
motorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000135d0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  080137b0  080137b0  000147b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013e00  08013e00  00015280  2**0
                  CONTENTS
  4 .ARM          00000008  08013e00  08013e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013e08  08013e08  00015280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013e08  08013e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013e0c  08013e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000280  20000000  08013e10  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae8  20000280  08014090  00015280  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d68  08014090  00015d68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015280  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024e8a  00000000  00000000  000152b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a4f  00000000  00000000  0003a13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d28  00000000  00000000  0003fb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001637  00000000  00000000  000418b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000276fe  00000000  00000000  00042eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a7f6  00000000  00000000  0006a5ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e50d0  00000000  00000000  00094de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00179eb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e14  00000000  00000000  00179ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00182d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000280 	.word	0x20000280
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013798 	.word	0x08013798

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000284 	.word	0x20000284
 800021c:	08013798 	.word	0x08013798

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00e fef6 	bl	800fe40 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	223c      	movs	r2, #60	@ 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00e fef0 	bl	800fe40 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001068:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <MX_ADC1_Init+0x164>)
 800106a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b48      	ldr	r3, [pc, #288]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107c:	4b46      	ldr	r3, [pc, #280]	@ (8001198 <MX_ADC1_Init+0x164>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001082:	4b45      	ldr	r3, [pc, #276]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <MX_ADC1_Init+0x164>)
 800108a:	2204      	movs	r2, #4
 800108c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001096:	2200      	movs	r2, #0
 8001098:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109a:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <MX_ADC1_Init+0x164>)
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ca:	4833      	ldr	r0, [pc, #204]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010cc:	f001 fdba 	bl	8002c44 <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fbca 	bl	800186e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e2:	4619      	mov	r1, r3
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010e6:	f003 fee3 	bl	8004eb0 <HAL_ADCEx_MultiModeConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f000 fbbd 	bl	800186e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <MX_ADC1_Init+0x168>)
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001110:	4619      	mov	r1, r3
 8001112:	4821      	ldr	r0, [pc, #132]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001114:	f002 f952 	bl	80033bc <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800111e:	f000 fba6 	bl	800186e <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_ADC1_Init+0x16c>)
 8001124:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001126:	2309      	movs	r3, #9
 8001128:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800112a:	2301      	movs	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001150:	2384      	movs	r3, #132	@ 0x84
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001164:	f003 f9c4 	bl	80044f0 <HAL_ADCEx_InjectedConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800116e:	f000 fb7e 	bl	800186e <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_ADC1_Init+0x170>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001176:	f240 130f 	movw	r3, #271	@ 0x10f
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001182:	f003 f9b5 	bl	80044f0 <HAL_ADCEx_InjectedConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800118c:	f000 fb6f 	bl	800186e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3768      	adds	r7, #104	@ 0x68
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2000029c 	.word	0x2000029c
 800119c:	08600004 	.word	0x08600004
 80011a0:	14f00020 	.word	0x14f00020
 80011a4:	2e300800 	.word	0x2e300800

080011a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b090      	sub	sp, #64	@ 0x40
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	223c      	movs	r2, #60	@ 0x3c
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00e fe43 	bl	800fe40 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011ba:	4b38      	ldr	r3, [pc, #224]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011bc:	4a38      	ldr	r2, [pc, #224]	@ (80012a0 <MX_ADC2_Init+0xf8>)
 80011be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011c0:	4b36      	ldr	r3, [pc, #216]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011c2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011c8:	4b34      	ldr	r3, [pc, #208]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ce:	4b33      	ldr	r3, [pc, #204]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011d4:	4b31      	ldr	r3, [pc, #196]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011da:	4b30      	ldr	r3, [pc, #192]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011dc:	2201      	movs	r2, #1
 80011de:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e0:	4b2e      	ldr	r3, [pc, #184]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011e2:	2204      	movs	r2, #4
 80011e4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011e6:	4b2d      	ldr	r3, [pc, #180]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011ec:	4b2b      	ldr	r3, [pc, #172]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80011f2:	4b2a      	ldr	r3, [pc, #168]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011f8:	4b28      	ldr	r3, [pc, #160]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001200:	4b26      	ldr	r3, [pc, #152]	@ (800129c <MX_ADC2_Init+0xf4>)
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001208:	4b24      	ldr	r3, [pc, #144]	@ (800129c <MX_ADC2_Init+0xf4>)
 800120a:	2200      	movs	r2, #0
 800120c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800120e:	4b23      	ldr	r3, [pc, #140]	@ (800129c <MX_ADC2_Init+0xf4>)
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001216:	4821      	ldr	r0, [pc, #132]	@ (800129c <MX_ADC2_Init+0xf4>)
 8001218:	f001 fd14 	bl	8002c44 <HAL_ADC_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001222:	f000 fb24 	bl	800186e <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 8001226:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <MX_ADC2_Init+0xfc>)
 8001228:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800122a:	2309      	movs	r3, #9
 800122c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800122e:	2301      	movs	r3, #1
 8001230:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001232:	237f      	movs	r3, #127	@ 0x7f
 8001234:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001236:	2304      	movs	r3, #4
 8001238:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800123e:	2302      	movs	r3, #2
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T8_CC4;
 8001254:	239c      	movs	r3, #156	@ 0x9c
 8001256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001258:	2380      	movs	r3, #128	@ 0x80
 800125a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	4619      	mov	r1, r3
 8001266:	480d      	ldr	r0, [pc, #52]	@ (800129c <MX_ADC2_Init+0xf4>)
 8001268:	f003 f942 	bl	80044f0 <HAL_ADCEx_InjectedConfigChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8001272:	f000 fafc 	bl	800186e <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <MX_ADC2_Init+0x100>)
 8001278:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800127a:	f240 130f 	movw	r3, #271	@ 0x10f
 800127e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	@ (800129c <MX_ADC2_Init+0xf4>)
 8001286:	f003 f933 	bl	80044f0 <HAL_ADCEx_InjectedConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_ADC2_Init+0xec>
  {
    Error_Handler();
 8001290:	f000 faed 	bl	800186e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	3740      	adds	r7, #64	@ 0x40
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000308 	.word	0x20000308
 80012a0:	50000100 	.word	0x50000100
 80012a4:	3ef08000 	.word	0x3ef08000
 80012a8:	32601000 	.word	0x32601000

080012ac <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b09e      	sub	sp, #120	@ 0x78
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c4:	f107 0320 	add.w	r3, r7, #32
 80012c8:	2244      	movs	r2, #68	@ 0x44
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f00e fdb7 	bl	800fe40 <memset>
  if(adcHandle->Instance==ADC1)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012da:	d15f      	bne.n	800139c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012e0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012e2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	4618      	mov	r0, r3
 80012ee:	f005 fc33 	bl	8006b58 <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012f8:	f000 fab9 	bl	800186e <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012fc:	4b4f      	ldr	r3, [pc, #316]	@ (800143c <HAL_ADC_MspInit+0x190>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	4a4e      	ldr	r2, [pc, #312]	@ (800143c <HAL_ADC_MspInit+0x190>)
 8001304:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001306:	4b4d      	ldr	r3, [pc, #308]	@ (800143c <HAL_ADC_MspInit+0x190>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d10b      	bne.n	8001326 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800130e:	4b4c      	ldr	r3, [pc, #304]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	4a4b      	ldr	r2, [pc, #300]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 8001314:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131a:	4b49      	ldr	r3, [pc, #292]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	4b46      	ldr	r3, [pc, #280]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a45      	ldr	r2, [pc, #276]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b43      	ldr	r3, [pc, #268]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	4b40      	ldr	r3, [pc, #256]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	4a3f      	ldr	r2, [pc, #252]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134a:	4b3d      	ldr	r3, [pc, #244]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001356:	2302      	movs	r3, #2
 8001358:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135a:	2303      	movs	r3, #3
 800135c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001366:	4619      	mov	r1, r3
 8001368:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800136c:	f004 fc60 	bl	8005c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001370:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001374:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001376:	2303      	movs	r3, #3
 8001378:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001382:	4619      	mov	r1, r3
 8001384:	482f      	ldr	r0, [pc, #188]	@ (8001444 <HAL_ADC_MspInit+0x198>)
 8001386:	f004 fc53 	bl	8005c30 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	2012      	movs	r0, #18
 8001390:	f003 ff0d 	bl	80051ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001394:	2012      	movs	r0, #18
 8001396:	f003 ff24 	bl	80051e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800139a:	e04a      	b.n	8001432 <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a29      	ldr	r2, [pc, #164]	@ (8001448 <HAL_ADC_MspInit+0x19c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d145      	bne.n	8001432 <HAL_ADC_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013aa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013ac:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	4618      	mov	r0, r3
 80013b8:	f005 fbce 	bl	8006b58 <HAL_RCCEx_PeriphCLKConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80013c2:	f000 fa54 	bl	800186e <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013c6:	4b1d      	ldr	r3, [pc, #116]	@ (800143c <HAL_ADC_MspInit+0x190>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	4a1b      	ldr	r2, [pc, #108]	@ (800143c <HAL_ADC_MspInit+0x190>)
 80013ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013d0:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <HAL_ADC_MspInit+0x190>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d10b      	bne.n	80013f0 <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013d8:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 80013da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013dc:	4a18      	ldr	r2, [pc, #96]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 80013de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 80013e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f0:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 80013f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f4:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 80013f6:	f043 0302 	orr.w	r3, r3, #2
 80013fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fc:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001408:	f248 0304 	movw	r3, #32772	@ 0x8004
 800140c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140e:	2303      	movs	r3, #3
 8001410:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001416:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800141a:	4619      	mov	r1, r3
 800141c:	4809      	ldr	r0, [pc, #36]	@ (8001444 <HAL_ADC_MspInit+0x198>)
 800141e:	f004 fc07 	bl	8005c30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2012      	movs	r0, #18
 8001428:	f003 fec1 	bl	80051ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800142c:	2012      	movs	r0, #18
 800142e:	f003 fed8 	bl	80051e2 <HAL_NVIC_EnableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3778      	adds	r7, #120	@ 0x78
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000374 	.word	0x20000374
 8001440:	40021000 	.word	0x40021000
 8001444:	48000400 	.word	0x48000400
 8001448:	50000100 	.word	0x50000100

0800144c <MX_DAC3_Init>:

DAC_HandleTypeDef hdac3;

/* DAC3 init function */
void MX_DAC3_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08c      	sub	sp, #48	@ 0x30
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001452:	463b      	mov	r3, r7
 8001454:	2230      	movs	r2, #48	@ 0x30
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f00e fcf1 	bl	800fe40 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <MX_DAC3_Init+0x6c>)
 8001460:	4a16      	ldr	r2, [pc, #88]	@ (80014bc <MX_DAC3_Init+0x70>)
 8001462:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001464:	4814      	ldr	r0, [pc, #80]	@ (80014b8 <MX_DAC3_Init+0x6c>)
 8001466:	f003 fed6 	bl	8005216 <HAL_DAC_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001470:	f000 f9fd 	bl	800186e <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001474:	2302      	movs	r3, #2
 8001476:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800148c:	2302      	movs	r3, #2
 800148e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001490:	2302      	movs	r3, #2
 8001492:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	@ (80014b8 <MX_DAC3_Init+0x6c>)
 80014a0:	f003 fedc 	bl	800525c <HAL_DAC_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 80014aa:	f000 f9e0 	bl	800186e <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	3730      	adds	r7, #48	@ 0x30
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000378 	.word	0x20000378
 80014bc:	50001000 	.word	0x50001000

080014c0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC3)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <HAL_DAC_MspInit+0x38>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d10b      	bne.n	80014ea <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* DAC3 clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80014d2:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <HAL_DAC_MspInit+0x3c>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	4a09      	ldr	r2, [pc, #36]	@ (80014fc <HAL_DAC_MspInit+0x3c>)
 80014d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014de:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <HAL_DAC_MspInit+0x3c>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	50001000 	.word	0x50001000
 80014fc:	40021000 	.word	0x40021000

08001500 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001506:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <MX_DMA_Init+0x80>)
 8001508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800150a:	4a1d      	ldr	r2, [pc, #116]	@ (8001580 <MX_DMA_Init+0x80>)
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	6493      	str	r3, [r2, #72]	@ 0x48
 8001512:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <MX_DMA_Init+0x80>)
 8001514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800151e:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <MX_DMA_Init+0x80>)
 8001520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001522:	4a17      	ldr	r2, [pc, #92]	@ (8001580 <MX_DMA_Init+0x80>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6493      	str	r3, [r2, #72]	@ 0x48
 800152a:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <MX_DMA_Init+0x80>)
 800152c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2101      	movs	r1, #1
 800153a:	200b      	movs	r0, #11
 800153c:	f003 fe37 	bl	80051ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001540:	200b      	movs	r0, #11
 8001542:	f003 fe4e 	bl	80051e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2101      	movs	r1, #1
 800154a:	200c      	movs	r0, #12
 800154c:	f003 fe2f 	bl	80051ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001550:	200c      	movs	r0, #12
 8001552:	f003 fe46 	bl	80051e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	200d      	movs	r0, #13
 800155c:	f003 fe27 	bl	80051ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001560:	200d      	movs	r0, #13
 8001562:	f003 fe3e 	bl	80051e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	200e      	movs	r0, #14
 800156c:	f003 fe1f 	bl	80051ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001570:	200e      	movs	r0, #14
 8001572:	f003 fe36 	bl	80051e2 <HAL_NVIC_EnableIRQ>

}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000

08001584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	@ 0x28
 8001588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	4b54      	ldr	r3, [pc, #336]	@ (80016ec <MX_GPIO_Init+0x168>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	4a53      	ldr	r2, [pc, #332]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a6:	4b51      	ldr	r3, [pc, #324]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b2:	4b4e      	ldr	r3, [pc, #312]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	4a4d      	ldr	r2, [pc, #308]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015b8:	f043 0320 	orr.w	r3, r3, #32
 80015bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015be:	4b4b      	ldr	r3, [pc, #300]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	f003 0320 	and.w	r3, r3, #32
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b48      	ldr	r3, [pc, #288]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	4a47      	ldr	r2, [pc, #284]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d6:	4b45      	ldr	r3, [pc, #276]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	4b42      	ldr	r3, [pc, #264]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e6:	4a41      	ldr	r2, [pc, #260]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ee:	4b3f      	ldr	r3, [pc, #252]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|TEST_Pin, GPIO_PIN_SET);
 80015fa:	2201      	movs	r2, #1
 80015fc:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 8001600:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001604:	f004 fcae 	bl	8005f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS2_GPIO_Port, NSS2_Pin, GPIO_PIN_SET);
 8001608:	2201      	movs	r2, #1
 800160a:	2110      	movs	r1, #16
 800160c:	4838      	ldr	r0, [pc, #224]	@ (80016f0 <MX_GPIO_Init+0x16c>)
 800160e:	f004 fca9 	bl	8005f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|NSS1_Pin, GPIO_PIN_SET);
 8001612:	2201      	movs	r2, #1
 8001614:	2109      	movs	r1, #9
 8001616:	4837      	ldr	r0, [pc, #220]	@ (80016f4 <MX_GPIO_Init+0x170>)
 8001618:	f004 fca4 	bl	8005f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800161c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	482f      	ldr	r0, [pc, #188]	@ (80016f0 <MX_GPIO_Init+0x16c>)
 8001632:	f004 fafd 	bl	8005c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8001636:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001640:	2301      	movs	r3, #1
 8001642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4829      	ldr	r0, [pc, #164]	@ (80016f0 <MX_GPIO_Init+0x16c>)
 800164c:	f004 faf0 	bl	8005c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001650:	2310      	movs	r3, #16
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800166a:	f004 fae1 	bl	8005c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS2_Pin;
 800166e:	2310      	movs	r3, #16
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167a:	2302      	movs	r3, #2
 800167c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS2_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	481a      	ldr	r0, [pc, #104]	@ (80016f0 <MX_GPIO_Init+0x16c>)
 8001686:	f004 fad3 	bl	8005c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800168a:	2301      	movs	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4814      	ldr	r0, [pc, #80]	@ (80016f4 <MX_GPIO_Init+0x170>)
 80016a2:	f004 fac5 	bl	8005c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
 80016a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b4:	2302      	movs	r3, #2
 80016b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c2:	f004 fab5 	bl	8005c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS1_Pin;
 80016c6:	2308      	movs	r3, #8
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d2:	2302      	movs	r3, #2
 80016d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS1_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <MX_GPIO_Init+0x170>)
 80016de:	f004 faa7 	bl	8005c30 <HAL_GPIO_Init>

}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	@ 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000
 80016f0:	48000800 	.word	0x48000800
 80016f4:	48000400 	.word	0x48000400

080016f8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016fc:	f000 ffbd 	bl	800267a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001700:	f000 f86c 	bl	80017dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001704:	f7ff ff3e 	bl	8001584 <MX_GPIO_Init>
  MX_DMA_Init();
 8001708:	f7ff fefa 	bl	8001500 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800170c:	f000 fde0 	bl	80022d0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001710:	f7ff fc90 	bl	8001034 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001714:	f7ff fd48 	bl	80011a8 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001718:	f000 fb36 	bl	8001d88 <MX_TIM1_Init>
  MX_DAC3_Init();
 800171c:	f7ff fe96 	bl	800144c <MX_DAC3_Init>
  MX_SPI1_Init();
 8001720:	f000 f8ac 	bl	800187c <MX_SPI1_Init>
  MX_TIM8_Init();
 8001724:	f000 fc0c 	bl	8001f40 <MX_TIM8_Init>
  MX_SPI3_Init();
 8001728:	f000 f8e6 	bl	80018f8 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 800172c:	f000 fd84 	bl	8002238 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 8001730:	f00a fcc4 	bl	800c0bc <appInit>
#if 1
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, sizeof(rxBuffer));
 8001734:	2264      	movs	r2, #100	@ 0x64
 8001736:	4923      	ldr	r1, [pc, #140]	@ (80017c4 <main+0xcc>)
 8001738:	4823      	ldr	r0, [pc, #140]	@ (80017c8 <main+0xd0>)
 800173a:	f008 ff60 	bl	800a5fe <HAL_UARTEx_ReceiveToIdle_DMA>
 // HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800173e:	217f      	movs	r1, #127	@ 0x7f
 8001740:	4822      	ldr	r0, [pc, #136]	@ (80017cc <main+0xd4>)
 8001742:	f002 fcb5 	bl	80040b0 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001746:	217f      	movs	r1, #127	@ 0x7f
 8001748:	4821      	ldr	r0, [pc, #132]	@ (80017d0 <main+0xd8>)
 800174a:	f002 fcb1 	bl	80040b0 <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 800174e:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <main+0xd4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2220      	movs	r2, #32
 8001754:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 8001756:	4b1d      	ldr	r3, [pc, #116]	@ (80017cc <main+0xd4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2204      	movs	r2, #4
 800175c:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 800175e:	4b1c      	ldr	r3, [pc, #112]	@ (80017d0 <main+0xd8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2220      	movs	r2, #32
 8001764:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001766:	4819      	ldr	r0, [pc, #100]	@ (80017cc <main+0xd4>)
 8001768:	f002 fdb4 	bl	80042d4 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 800176c:	4818      	ldr	r0, [pc, #96]	@ (80017d0 <main+0xd8>)
 800176e:	f002 fd01 	bl	8004174 <HAL_ADCEx_InjectedStart>
  HAL_TIM_Base_Start(&htim8);
 8001772:	4818      	ldr	r0, [pc, #96]	@ (80017d4 <main+0xdc>)
 8001774:	f006 f878 	bl	8007868 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001778:	210c      	movs	r1, #12
 800177a:	4816      	ldr	r0, [pc, #88]	@ (80017d4 <main+0xdc>)
 800177c:	f006 f938 	bl	80079f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001780:	2100      	movs	r1, #0
 8001782:	4814      	ldr	r0, [pc, #80]	@ (80017d4 <main+0xdc>)
 8001784:	f006 f934 	bl	80079f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001788:	2104      	movs	r1, #4
 800178a:	4812      	ldr	r0, [pc, #72]	@ (80017d4 <main+0xdc>)
 800178c:	f006 f930 	bl	80079f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001790:	2108      	movs	r1, #8
 8001792:	4810      	ldr	r0, [pc, #64]	@ (80017d4 <main+0xdc>)
 8001794:	f006 f92c 	bl	80079f0 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1);
 8001798:	480f      	ldr	r0, [pc, #60]	@ (80017d8 <main+0xe0>)
 800179a:	f006 f865 	bl	8007868 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800179e:	210c      	movs	r1, #12
 80017a0:	480d      	ldr	r0, [pc, #52]	@ (80017d8 <main+0xe0>)
 80017a2:	f006 f925 	bl	80079f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017a6:	2100      	movs	r1, #0
 80017a8:	480b      	ldr	r0, [pc, #44]	@ (80017d8 <main+0xe0>)
 80017aa:	f006 f921 	bl	80079f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80017ae:	2104      	movs	r1, #4
 80017b0:	4809      	ldr	r0, [pc, #36]	@ (80017d8 <main+0xe0>)
 80017b2:	f006 f91d 	bl	80079f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80017b6:	2108      	movs	r1, #8
 80017b8:	4807      	ldr	r0, [pc, #28]	@ (80017d8 <main+0xe0>)
 80017ba:	f006 f919 	bl	80079f0 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
 80017be:	f00c fc0f 	bl	800dfe0 <userMain>
 80017c2:	e7fc      	b.n	80017be <main+0xc6>
 80017c4:	20000ab0 	.word	0x20000ab0
 80017c8:	200004f0 	.word	0x200004f0
 80017cc:	2000029c 	.word	0x2000029c
 80017d0:	20000308 	.word	0x20000308
 80017d4:	200004a4 	.word	0x200004a4
 80017d8:	20000458 	.word	0x20000458

080017dc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b094      	sub	sp, #80	@ 0x50
 80017e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e2:	f107 0318 	add.w	r3, r7, #24
 80017e6:	2238      	movs	r2, #56	@ 0x38
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f00e fb28 	bl	800fe40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017fe:	2000      	movs	r0, #0
 8001800:	f004 fbc8 	bl	8005f94 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001804:	2301      	movs	r3, #1
 8001806:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001808:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800180c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180e:	2302      	movs	r3, #2
 8001810:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001812:	2303      	movs	r3, #3
 8001814:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8001816:	2303      	movs	r3, #3
 8001818:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800181a:	2328      	movs	r3, #40	@ 0x28
 800181c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800181e:	2302      	movs	r3, #2
 8001820:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001822:	2302      	movs	r3, #2
 8001824:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001826:	2302      	movs	r3, #2
 8001828:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182a:	f107 0318 	add.w	r3, r7, #24
 800182e:	4618      	mov	r0, r3
 8001830:	f004 fc64 	bl	80060fc <HAL_RCC_OscConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800183a:	f000 f818 	bl	800186e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800183e:	230f      	movs	r3, #15
 8001840:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001842:	2303      	movs	r3, #3
 8001844:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2104      	movs	r1, #4
 8001856:	4618      	mov	r0, r3
 8001858:	f004 ff62 	bl	8006720 <HAL_RCC_ClockConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001862:	f000 f804 	bl	800186e <Error_Handler>
  }
}
 8001866:	bf00      	nop
 8001868:	3750      	adds	r7, #80	@ 0x50
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001872:	b672      	cpsid	i
}
 8001874:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001876:	bf00      	nop
 8001878:	e7fd      	b.n	8001876 <Error_Handler+0x8>
	...

0800187c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001880:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <MX_SPI1_Init+0x74>)
 8001882:	4a1c      	ldr	r2, [pc, #112]	@ (80018f4 <MX_SPI1_Init+0x78>)
 8001884:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001886:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <MX_SPI1_Init+0x74>)
 8001888:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800188c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800188e:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <MX_SPI1_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001894:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <MX_SPI1_Init+0x74>)
 8001896:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800189a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800189c:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <MX_SPI1_Init+0x74>)
 800189e:	2202      	movs	r2, #2
 80018a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018a2:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <MX_SPI1_Init+0x74>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <MX_SPI1_Init+0x74>)
 80018aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <MX_SPI1_Init+0x74>)
 80018b2:	2238      	movs	r2, #56	@ 0x38
 80018b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <MX_SPI1_Init+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MX_SPI1_Init+0x74>)
 80018be:	2200      	movs	r2, #0
 80018c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <MX_SPI1_Init+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018c8:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <MX_SPI1_Init+0x74>)
 80018ca:	2207      	movs	r2, #7
 80018cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <MX_SPI1_Init+0x74>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <MX_SPI1_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	@ (80018f0 <MX_SPI1_Init+0x74>)
 80018dc:	f005 fb2c 	bl	8006f38 <HAL_SPI_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80018e6:	f7ff ffc2 	bl	800186e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000038c 	.word	0x2000038c
 80018f4:	40013000 	.word	0x40013000

080018f8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	@ (800196c <MX_SPI3_Init+0x74>)
 80018fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001970 <MX_SPI3_Init+0x78>)
 8001900:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001902:	4b1a      	ldr	r3, [pc, #104]	@ (800196c <MX_SPI3_Init+0x74>)
 8001904:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001908:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800190a:	4b18      	ldr	r3, [pc, #96]	@ (800196c <MX_SPI3_Init+0x74>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001910:	4b16      	ldr	r3, [pc, #88]	@ (800196c <MX_SPI3_Init+0x74>)
 8001912:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001916:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001918:	4b14      	ldr	r3, [pc, #80]	@ (800196c <MX_SPI3_Init+0x74>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800191e:	4b13      	ldr	r3, [pc, #76]	@ (800196c <MX_SPI3_Init+0x74>)
 8001920:	2201      	movs	r2, #1
 8001922:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001924:	4b11      	ldr	r3, [pc, #68]	@ (800196c <MX_SPI3_Init+0x74>)
 8001926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800192a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800192c:	4b0f      	ldr	r3, [pc, #60]	@ (800196c <MX_SPI3_Init+0x74>)
 800192e:	2210      	movs	r2, #16
 8001930:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001932:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <MX_SPI3_Init+0x74>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001938:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <MX_SPI3_Init+0x74>)
 800193a:	2200      	movs	r2, #0
 800193c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800193e:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <MX_SPI3_Init+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001944:	4b09      	ldr	r3, [pc, #36]	@ (800196c <MX_SPI3_Init+0x74>)
 8001946:	2207      	movs	r2, #7
 8001948:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800194a:	4b08      	ldr	r3, [pc, #32]	@ (800196c <MX_SPI3_Init+0x74>)
 800194c:	2200      	movs	r2, #0
 800194e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <MX_SPI3_Init+0x74>)
 8001952:	2200      	movs	r2, #0
 8001954:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001956:	4805      	ldr	r0, [pc, #20]	@ (800196c <MX_SPI3_Init+0x74>)
 8001958:	f005 faee 	bl	8006f38 <HAL_SPI_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001962:	f7ff ff84 	bl	800186e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200003f0 	.word	0x200003f0
 8001970:	40003c00 	.word	0x40003c00

08001974 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08c      	sub	sp, #48	@ 0x30
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a3d      	ldr	r2, [pc, #244]	@ (8001a88 <HAL_SPI_MspInit+0x114>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d129      	bne.n	80019ea <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001996:	4b3d      	ldr	r3, [pc, #244]	@ (8001a8c <HAL_SPI_MspInit+0x118>)
 8001998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199a:	4a3c      	ldr	r2, [pc, #240]	@ (8001a8c <HAL_SPI_MspInit+0x118>)
 800199c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80019a2:	4b3a      	ldr	r3, [pc, #232]	@ (8001a8c <HAL_SPI_MspInit+0x118>)
 80019a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b37      	ldr	r3, [pc, #220]	@ (8001a8c <HAL_SPI_MspInit+0x118>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	4a36      	ldr	r2, [pc, #216]	@ (8001a8c <HAL_SPI_MspInit+0x118>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ba:	4b34      	ldr	r3, [pc, #208]	@ (8001a8c <HAL_SPI_MspInit+0x118>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019c6:	23e0      	movs	r3, #224	@ 0xe0
 80019c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019d6:	2305      	movs	r3, #5
 80019d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 031c 	add.w	r3, r7, #28
 80019de:	4619      	mov	r1, r3
 80019e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019e4:	f004 f924 	bl	8005c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80019e8:	e049      	b.n	8001a7e <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a28      	ldr	r2, [pc, #160]	@ (8001a90 <HAL_SPI_MspInit+0x11c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d144      	bne.n	8001a7e <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019f4:	4b25      	ldr	r3, [pc, #148]	@ (8001a8c <HAL_SPI_MspInit+0x118>)
 80019f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f8:	4a24      	ldr	r2, [pc, #144]	@ (8001a8c <HAL_SPI_MspInit+0x118>)
 80019fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a00:	4b22      	ldr	r3, [pc, #136]	@ (8001a8c <HAL_SPI_MspInit+0x118>)
 8001a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a8c <HAL_SPI_MspInit+0x118>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a10:	4a1e      	ldr	r2, [pc, #120]	@ (8001a8c <HAL_SPI_MspInit+0x118>)
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a18:	4b1c      	ldr	r3, [pc, #112]	@ (8001a8c <HAL_SPI_MspInit+0x118>)
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a24:	4b19      	ldr	r3, [pc, #100]	@ (8001a8c <HAL_SPI_MspInit+0x118>)
 8001a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a28:	4a18      	ldr	r2, [pc, #96]	@ (8001a8c <HAL_SPI_MspInit+0x118>)
 8001a2a:	f043 0302 	orr.w	r3, r3, #2
 8001a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a30:	4b16      	ldr	r3, [pc, #88]	@ (8001a8c <HAL_SPI_MspInit+0x118>)
 8001a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a3c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a4e:	2306      	movs	r3, #6
 8001a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4619      	mov	r1, r3
 8001a58:	480e      	ldr	r0, [pc, #56]	@ (8001a94 <HAL_SPI_MspInit+0x120>)
 8001a5a:	f004 f8e9 	bl	8005c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a5e:	2320      	movs	r3, #32
 8001a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a6e:	2306      	movs	r3, #6
 8001a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	4807      	ldr	r0, [pc, #28]	@ (8001a98 <HAL_SPI_MspInit+0x124>)
 8001a7a:	f004 f8d9 	bl	8005c30 <HAL_GPIO_Init>
}
 8001a7e:	bf00      	nop
 8001a80:	3730      	adds	r7, #48	@ 0x30
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40013000 	.word	0x40013000
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40003c00 	.word	0x40003c00
 8001a94:	48000800 	.word	0x48000800
 8001a98:	48000400 	.word	0x48000400

08001a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <HAL_MspInit+0x44>)
 8001aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae0 <HAL_MspInit+0x44>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <HAL_MspInit+0x44>)
 8001ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_MspInit+0x44>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abe:	4a08      	ldr	r2, [pc, #32]	@ (8001ae0 <HAL_MspInit+0x44>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_MspInit+0x44>)
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ad2:	f004 fb03 	bl	80060dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <NMI_Handler+0x4>

08001aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <HardFault_Handler+0x4>

08001af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <MemManage_Handler+0x4>

08001afc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3a:	f000 fdf1 	bl	8002720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b48:	4802      	ldr	r0, [pc, #8]	@ (8001b54 <DMA1_Channel1_IRQHandler+0x10>)
 8001b4a:	f003 ff22 	bl	8005992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200006d8 	.word	0x200006d8

08001b58 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b5c:	4802      	ldr	r0, [pc, #8]	@ (8001b68 <DMA1_Channel2_IRQHandler+0x10>)
 8001b5e:	f003 ff18 	bl	8005992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000738 	.word	0x20000738

08001b6c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b70:	4802      	ldr	r0, [pc, #8]	@ (8001b7c <DMA1_Channel3_IRQHandler+0x10>)
 8001b72:	f003 ff0e 	bl	8005992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000618 	.word	0x20000618

08001b80 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b84:	4802      	ldr	r0, [pc, #8]	@ (8001b90 <DMA1_Channel4_IRQHandler+0x10>)
 8001b86:	f003 ff04 	bl	8005992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000678 	.word	0x20000678

08001b94 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b98:	4803      	ldr	r0, [pc, #12]	@ (8001ba8 <ADC1_2_IRQHandler+0x14>)
 8001b9a:	f001 f9d7 	bl	8002f4c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001b9e:	4803      	ldr	r0, [pc, #12]	@ (8001bac <ADC1_2_IRQHandler+0x18>)
 8001ba0:	f001 f9d4 	bl	8002f4c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	2000029c 	.word	0x2000029c
 8001bac:	20000308 	.word	0x20000308

08001bb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bb4:	4802      	ldr	r0, [pc, #8]	@ (8001bc0 <USART2_IRQHandler+0x10>)
 8001bb6:	f007 f97f 	bl	8008eb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200004f0 	.word	0x200004f0

08001bc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001bc8:	4802      	ldr	r0, [pc, #8]	@ (8001bd4 <USART3_IRQHandler+0x10>)
 8001bca:	f007 f975 	bl	8008eb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000584 	.word	0x20000584

08001bd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return 1;
 8001bdc:	2301      	movs	r3, #1
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_kill>:

int _kill(int pid, int sig)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bf2:	f00e f989 	bl	800ff08 <__errno>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2216      	movs	r2, #22
 8001bfa:	601a      	str	r2, [r3, #0]
  return -1;
 8001bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_exit>:

void _exit (int status)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ffe7 	bl	8001be8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c1a:	bf00      	nop
 8001c1c:	e7fd      	b.n	8001c1a <_exit+0x12>

08001c1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	e00a      	b.n	8001c46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c30:	f3af 8000 	nop.w
 8001c34:	4601      	mov	r1, r0
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	60ba      	str	r2, [r7, #8]
 8001c3c:	b2ca      	uxtb	r2, r1
 8001c3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	3301      	adds	r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	dbf0      	blt.n	8001c30 <_read+0x12>
  }

  return len;
 8001c4e:	687b      	ldr	r3, [r7, #4]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	e009      	b.n	8001c7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	60ba      	str	r2, [r7, #8]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	dbf1      	blt.n	8001c6a <_write+0x12>
  }
  return len;
 8001c86:	687b      	ldr	r3, [r7, #4]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_close>:

int _close(int file)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cb8:	605a      	str	r2, [r3, #4]
  return 0;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <_isatty>:

int _isatty(int file)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cd0:	2301      	movs	r3, #1
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d00:	4a14      	ldr	r2, [pc, #80]	@ (8001d54 <_sbrk+0x5c>)
 8001d02:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <_sbrk+0x60>)
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d14:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <_sbrk+0x64>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <_sbrk+0x68>)
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d207      	bcs.n	8001d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d28:	f00e f8ee 	bl	800ff08 <__errno>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	220c      	movs	r2, #12
 8001d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	e009      	b.n	8001d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d38:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	4a05      	ldr	r2, [pc, #20]	@ (8001d5c <_sbrk+0x64>)
 8001d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20008000 	.word	0x20008000
 8001d58:	00000400 	.word	0x00000400
 8001d5c:	20000454 	.word	0x20000454
 8001d60:	20000d68 	.word	0x20000d68

08001d64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <SystemInit+0x20>)
 8001d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d6e:	4a05      	ldr	r2, [pc, #20]	@ (8001d84 <SystemInit+0x20>)
 8001d70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b09c      	sub	sp, #112	@ 0x70
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
 8001db8:	615a      	str	r2, [r3, #20]
 8001dba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	2234      	movs	r2, #52	@ 0x34
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f00e f83c 	bl	800fe40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dc8:	4b5b      	ldr	r3, [pc, #364]	@ (8001f38 <MX_TIM1_Init+0x1b0>)
 8001dca:	4a5c      	ldr	r2, [pc, #368]	@ (8001f3c <MX_TIM1_Init+0x1b4>)
 8001dcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8001dce:	4b5a      	ldr	r3, [pc, #360]	@ (8001f38 <MX_TIM1_Init+0x1b0>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001dd4:	4b58      	ldr	r3, [pc, #352]	@ (8001f38 <MX_TIM1_Init+0x1b0>)
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8001dda:	4b57      	ldr	r3, [pc, #348]	@ (8001f38 <MX_TIM1_Init+0x1b0>)
 8001ddc:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001de0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001de2:	4b55      	ldr	r3, [pc, #340]	@ (8001f38 <MX_TIM1_Init+0x1b0>)
 8001de4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001de8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001dea:	4b53      	ldr	r3, [pc, #332]	@ (8001f38 <MX_TIM1_Init+0x1b0>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df0:	4b51      	ldr	r3, [pc, #324]	@ (8001f38 <MX_TIM1_Init+0x1b0>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001df6:	4850      	ldr	r0, [pc, #320]	@ (8001f38 <MX_TIM1_Init+0x1b0>)
 8001df8:	f005 fcde 	bl	80077b8 <HAL_TIM_Base_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001e02:	f7ff fd34 	bl	800186e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e0a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e0c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001e10:	4619      	mov	r1, r3
 8001e12:	4849      	ldr	r0, [pc, #292]	@ (8001f38 <MX_TIM1_Init+0x1b0>)
 8001e14:	f006 f896 	bl	8007f44 <HAL_TIM_ConfigClockSource>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001e1e:	f7ff fd26 	bl	800186e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e22:	4845      	ldr	r0, [pc, #276]	@ (8001f38 <MX_TIM1_Init+0x1b0>)
 8001e24:	f005 fd82 	bl	800792c <HAL_TIM_PWM_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001e2e:	f7ff fd1e 	bl	800186e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001e32:	2370      	movs	r3, #112	@ 0x70
 8001e34:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e3e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e42:	4619      	mov	r1, r3
 8001e44:	483c      	ldr	r0, [pc, #240]	@ (8001f38 <MX_TIM1_Init+0x1b0>)
 8001e46:	f006 fdcb 	bl	80089e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001e50:	f7ff fd0d 	bl	800186e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e54:	2360      	movs	r3, #96	@ 0x60
 8001e56:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e60:	2300      	movs	r3, #0
 8001e62:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e70:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e74:	2200      	movs	r2, #0
 8001e76:	4619      	mov	r1, r3
 8001e78:	482f      	ldr	r0, [pc, #188]	@ (8001f38 <MX_TIM1_Init+0x1b0>)
 8001e7a:	f005 ff4f 	bl	8007d1c <HAL_TIM_PWM_ConfigChannel>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001e84:	f7ff fcf3 	bl	800186e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e88:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4829      	ldr	r0, [pc, #164]	@ (8001f38 <MX_TIM1_Init+0x1b0>)
 8001e92:	f005 ff43 	bl	8007d1c <HAL_TIM_PWM_ConfigChannel>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001e9c:	f7ff fce7 	bl	800186e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ea0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4823      	ldr	r0, [pc, #140]	@ (8001f38 <MX_TIM1_Init+0x1b0>)
 8001eaa:	f005 ff37 	bl	8007d1c <HAL_TIM_PWM_ConfigChannel>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001eb4:	f7ff fcdb 	bl	800186e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001eb8:	2370      	movs	r3, #112	@ 0x70
 8001eba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 8001ebc:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8001ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ec2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	4619      	mov	r1, r3
 8001eca:	481b      	ldr	r0, [pc, #108]	@ (8001f38 <MX_TIM1_Init+0x1b0>)
 8001ecc:	f005 ff26 	bl	8007d1c <HAL_TIM_PWM_ConfigChannel>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8001ed6:	f7ff fcca 	bl	800186e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001eea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ef0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ef4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 2;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	4619      	mov	r1, r3
 8001f18:	4807      	ldr	r0, [pc, #28]	@ (8001f38 <MX_TIM1_Init+0x1b0>)
 8001f1a:	f006 fde3 	bl	8008ae4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM1_Init+0x1a0>
  {
    Error_Handler();
 8001f24:	f7ff fca3 	bl	800186e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f28:	4803      	ldr	r0, [pc, #12]	@ (8001f38 <MX_TIM1_Init+0x1b0>)
 8001f2a:	f000 f917 	bl	800215c <HAL_TIM_MspPostInit>

}
 8001f2e:	bf00      	nop
 8001f30:	3770      	adds	r7, #112	@ 0x70
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000458 	.word	0x20000458
 8001f3c:	40012c00 	.word	0x40012c00

08001f40 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b09c      	sub	sp, #112	@ 0x70
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f46:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f54:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f60:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
 8001f70:	615a      	str	r2, [r3, #20]
 8001f72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	2234      	movs	r2, #52	@ 0x34
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f00d ff60 	bl	800fe40 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f80:	4b5a      	ldr	r3, [pc, #360]	@ (80020ec <MX_TIM8_Init+0x1ac>)
 8001f82:	4a5b      	ldr	r2, [pc, #364]	@ (80020f0 <MX_TIM8_Init+0x1b0>)
 8001f84:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f86:	4b59      	ldr	r3, [pc, #356]	@ (80020ec <MX_TIM8_Init+0x1ac>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001f8c:	4b57      	ldr	r3, [pc, #348]	@ (80020ec <MX_TIM8_Init+0x1ac>)
 8001f8e:	2220      	movs	r2, #32
 8001f90:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7999;
 8001f92:	4b56      	ldr	r3, [pc, #344]	@ (80020ec <MX_TIM8_Init+0x1ac>)
 8001f94:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001f98:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001f9a:	4b54      	ldr	r3, [pc, #336]	@ (80020ec <MX_TIM8_Init+0x1ac>)
 8001f9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fa0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001fa2:	4b52      	ldr	r3, [pc, #328]	@ (80020ec <MX_TIM8_Init+0x1ac>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa8:	4b50      	ldr	r3, [pc, #320]	@ (80020ec <MX_TIM8_Init+0x1ac>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001fae:	484f      	ldr	r0, [pc, #316]	@ (80020ec <MX_TIM8_Init+0x1ac>)
 8001fb0:	f005 fc02 	bl	80077b8 <HAL_TIM_Base_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001fba:	f7ff fc58 	bl	800186e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fc2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001fc4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4848      	ldr	r0, [pc, #288]	@ (80020ec <MX_TIM8_Init+0x1ac>)
 8001fcc:	f005 ffba 	bl	8007f44 <HAL_TIM_ConfigClockSource>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001fd6:	f7ff fc4a 	bl	800186e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001fda:	4844      	ldr	r0, [pc, #272]	@ (80020ec <MX_TIM8_Init+0x1ac>)
 8001fdc:	f005 fca6 	bl	800792c <HAL_TIM_PWM_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001fe6:	f7ff fc42 	bl	800186e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001fea:	2370      	movs	r3, #112	@ 0x70
 8001fec:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ff6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	483b      	ldr	r0, [pc, #236]	@ (80020ec <MX_TIM8_Init+0x1ac>)
 8001ffe:	f006 fcef 	bl	80089e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8002008:	f7ff fc31 	bl	800186e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800200c:	2360      	movs	r3, #96	@ 0x60
 800200e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002014:	2300      	movs	r3, #0
 8002016:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002018:	2300      	movs	r3, #0
 800201a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002024:	2300      	movs	r3, #0
 8002026:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002028:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800202c:	2200      	movs	r2, #0
 800202e:	4619      	mov	r1, r3
 8002030:	482e      	ldr	r0, [pc, #184]	@ (80020ec <MX_TIM8_Init+0x1ac>)
 8002032:	f005 fe73 	bl	8007d1c <HAL_TIM_PWM_ConfigChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800203c:	f7ff fc17 	bl	800186e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002040:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002044:	2204      	movs	r2, #4
 8002046:	4619      	mov	r1, r3
 8002048:	4828      	ldr	r0, [pc, #160]	@ (80020ec <MX_TIM8_Init+0x1ac>)
 800204a:	f005 fe67 	bl	8007d1c <HAL_TIM_PWM_ConfigChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8002054:	f7ff fc0b 	bl	800186e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002058:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800205c:	2208      	movs	r2, #8
 800205e:	4619      	mov	r1, r3
 8002060:	4822      	ldr	r0, [pc, #136]	@ (80020ec <MX_TIM8_Init+0x1ac>)
 8002062:	f005 fe5b 	bl	8007d1c <HAL_TIM_PWM_ConfigChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 800206c:	f7ff fbff 	bl	800186e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002070:	2370      	movs	r3, #112	@ 0x70
 8002072:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 8002074:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8002078:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800207a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800207e:	220c      	movs	r2, #12
 8002080:	4619      	mov	r1, r3
 8002082:	481a      	ldr	r0, [pc, #104]	@ (80020ec <MX_TIM8_Init+0x1ac>)
 8002084:	f005 fe4a 	bl	8007d1c <HAL_TIM_PWM_ConfigChannel>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM8_Init+0x152>
  {
    Error_Handler();
 800208e:	f7ff fbee 	bl	800186e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80020b0:	2300      	movs	r3, #0
 80020b2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80020c2:	2300      	movs	r3, #0
 80020c4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	4619      	mov	r1, r3
 80020ce:	4807      	ldr	r0, [pc, #28]	@ (80020ec <MX_TIM8_Init+0x1ac>)
 80020d0:	f006 fd08 	bl	8008ae4 <HAL_TIMEx_ConfigBreakDeadTime>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM8_Init+0x19e>
  {
    Error_Handler();
 80020da:	f7ff fbc8 	bl	800186e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80020de:	4803      	ldr	r0, [pc, #12]	@ (80020ec <MX_TIM8_Init+0x1ac>)
 80020e0:	f000 f83c 	bl	800215c <HAL_TIM_MspPostInit>

}
 80020e4:	bf00      	nop
 80020e6:	3770      	adds	r7, #112	@ 0x70
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	200004a4 	.word	0x200004a4
 80020f0:	40013400 	.word	0x40013400

080020f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a13      	ldr	r2, [pc, #76]	@ (8002150 <HAL_TIM_Base_MspInit+0x5c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d10c      	bne.n	8002120 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002106:	4b13      	ldr	r3, [pc, #76]	@ (8002154 <HAL_TIM_Base_MspInit+0x60>)
 8002108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800210a:	4a12      	ldr	r2, [pc, #72]	@ (8002154 <HAL_TIM_Base_MspInit+0x60>)
 800210c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002110:	6613      	str	r3, [r2, #96]	@ 0x60
 8002112:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <HAL_TIM_Base_MspInit+0x60>)
 8002114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002116:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800211e:	e010      	b.n	8002142 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM8)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0c      	ldr	r2, [pc, #48]	@ (8002158 <HAL_TIM_Base_MspInit+0x64>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d10b      	bne.n	8002142 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800212a:	4b0a      	ldr	r3, [pc, #40]	@ (8002154 <HAL_TIM_Base_MspInit+0x60>)
 800212c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212e:	4a09      	ldr	r2, [pc, #36]	@ (8002154 <HAL_TIM_Base_MspInit+0x60>)
 8002130:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002134:	6613      	str	r3, [r2, #96]	@ 0x60
 8002136:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <HAL_TIM_Base_MspInit+0x60>)
 8002138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800213a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40012c00 	.word	0x40012c00
 8002154:	40021000 	.word	0x40021000
 8002158:	40013400 	.word	0x40013400

0800215c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	@ 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2b      	ldr	r2, [pc, #172]	@ (8002228 <HAL_TIM_MspPostInit+0xcc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d11e      	bne.n	80021bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217e:	4b2b      	ldr	r3, [pc, #172]	@ (800222c <HAL_TIM_MspPostInit+0xd0>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002182:	4a2a      	ldr	r2, [pc, #168]	@ (800222c <HAL_TIM_MspPostInit+0xd0>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800218a:	4b28      	ldr	r3, [pc, #160]	@ (800222c <HAL_TIM_MspPostInit+0xd0>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002196:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800219a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80021a8:	2306      	movs	r3, #6
 80021aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	4619      	mov	r1, r3
 80021b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021b6:	f003 fd3b 	bl	8005c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80021ba:	e031      	b.n	8002220 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM8)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002230 <HAL_TIM_MspPostInit+0xd4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d12c      	bne.n	8002220 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c6:	4b19      	ldr	r3, [pc, #100]	@ (800222c <HAL_TIM_MspPostInit+0xd0>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ca:	4a18      	ldr	r2, [pc, #96]	@ (800222c <HAL_TIM_MspPostInit+0xd0>)
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021d2:	4b16      	ldr	r3, [pc, #88]	@ (800222c <HAL_TIM_MspPostInit+0xd0>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021de:	2340      	movs	r3, #64	@ 0x40
 80021e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	2300      	movs	r3, #0
 80021ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 80021ee:	2305      	movs	r3, #5
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4619      	mov	r1, r3
 80021f8:	480e      	ldr	r0, [pc, #56]	@ (8002234 <HAL_TIM_MspPostInit+0xd8>)
 80021fa:	f003 fd19 	bl	8005c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002210:	230a      	movs	r3, #10
 8002212:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	4619      	mov	r1, r3
 800221a:	4806      	ldr	r0, [pc, #24]	@ (8002234 <HAL_TIM_MspPostInit+0xd8>)
 800221c:	f003 fd08 	bl	8005c30 <HAL_GPIO_Init>
}
 8002220:	bf00      	nop
 8002222:	3728      	adds	r7, #40	@ 0x28
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40012c00 	.word	0x40012c00
 800222c:	40021000 	.word	0x40021000
 8002230:	40013400 	.word	0x40013400
 8002234:	48000400 	.word	0x48000400

08002238 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800223c:	4b22      	ldr	r3, [pc, #136]	@ (80022c8 <MX_USART2_UART_Init+0x90>)
 800223e:	4a23      	ldr	r2, [pc, #140]	@ (80022cc <MX_USART2_UART_Init+0x94>)
 8002240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002242:	4b21      	ldr	r3, [pc, #132]	@ (80022c8 <MX_USART2_UART_Init+0x90>)
 8002244:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800224a:	4b1f      	ldr	r3, [pc, #124]	@ (80022c8 <MX_USART2_UART_Init+0x90>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002250:	4b1d      	ldr	r3, [pc, #116]	@ (80022c8 <MX_USART2_UART_Init+0x90>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002256:	4b1c      	ldr	r3, [pc, #112]	@ (80022c8 <MX_USART2_UART_Init+0x90>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800225c:	4b1a      	ldr	r3, [pc, #104]	@ (80022c8 <MX_USART2_UART_Init+0x90>)
 800225e:	220c      	movs	r2, #12
 8002260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002262:	4b19      	ldr	r3, [pc, #100]	@ (80022c8 <MX_USART2_UART_Init+0x90>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002268:	4b17      	ldr	r3, [pc, #92]	@ (80022c8 <MX_USART2_UART_Init+0x90>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800226e:	4b16      	ldr	r3, [pc, #88]	@ (80022c8 <MX_USART2_UART_Init+0x90>)
 8002270:	2200      	movs	r2, #0
 8002272:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002274:	4b14      	ldr	r3, [pc, #80]	@ (80022c8 <MX_USART2_UART_Init+0x90>)
 8002276:	2200      	movs	r2, #0
 8002278:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800227a:	4b13      	ldr	r3, [pc, #76]	@ (80022c8 <MX_USART2_UART_Init+0x90>)
 800227c:	2200      	movs	r2, #0
 800227e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002280:	4811      	ldr	r0, [pc, #68]	@ (80022c8 <MX_USART2_UART_Init+0x90>)
 8002282:	f006 fcbb 	bl	8008bfc <HAL_UART_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800228c:	f7ff faef 	bl	800186e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002290:	2100      	movs	r1, #0
 8002292:	480d      	ldr	r0, [pc, #52]	@ (80022c8 <MX_USART2_UART_Init+0x90>)
 8002294:	f008 f937 	bl	800a506 <HAL_UARTEx_SetTxFifoThreshold>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800229e:	f7ff fae6 	bl	800186e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022a2:	2100      	movs	r1, #0
 80022a4:	4808      	ldr	r0, [pc, #32]	@ (80022c8 <MX_USART2_UART_Init+0x90>)
 80022a6:	f008 f96c 	bl	800a582 <HAL_UARTEx_SetRxFifoThreshold>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80022b0:	f7ff fadd 	bl	800186e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80022b4:	4804      	ldr	r0, [pc, #16]	@ (80022c8 <MX_USART2_UART_Init+0x90>)
 80022b6:	f008 f8ed 	bl	800a494 <HAL_UARTEx_DisableFifoMode>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80022c0:	f7ff fad5 	bl	800186e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	200004f0 	.word	0x200004f0
 80022cc:	40004400 	.word	0x40004400

080022d0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022d4:	4b22      	ldr	r3, [pc, #136]	@ (8002360 <MX_USART3_UART_Init+0x90>)
 80022d6:	4a23      	ldr	r2, [pc, #140]	@ (8002364 <MX_USART3_UART_Init+0x94>)
 80022d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80022da:	4b21      	ldr	r3, [pc, #132]	@ (8002360 <MX_USART3_UART_Init+0x90>)
 80022dc:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80022e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002360 <MX_USART3_UART_Init+0x90>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002360 <MX_USART3_UART_Init+0x90>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002360 <MX_USART3_UART_Init+0x90>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002360 <MX_USART3_UART_Init+0x90>)
 80022f6:	220c      	movs	r2, #12
 80022f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022fa:	4b19      	ldr	r3, [pc, #100]	@ (8002360 <MX_USART3_UART_Init+0x90>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002300:	4b17      	ldr	r3, [pc, #92]	@ (8002360 <MX_USART3_UART_Init+0x90>)
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002306:	4b16      	ldr	r3, [pc, #88]	@ (8002360 <MX_USART3_UART_Init+0x90>)
 8002308:	2200      	movs	r2, #0
 800230a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800230c:	4b14      	ldr	r3, [pc, #80]	@ (8002360 <MX_USART3_UART_Init+0x90>)
 800230e:	2200      	movs	r2, #0
 8002310:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002312:	4b13      	ldr	r3, [pc, #76]	@ (8002360 <MX_USART3_UART_Init+0x90>)
 8002314:	2200      	movs	r2, #0
 8002316:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002318:	4811      	ldr	r0, [pc, #68]	@ (8002360 <MX_USART3_UART_Init+0x90>)
 800231a:	f006 fc6f 	bl	8008bfc <HAL_UART_Init>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002324:	f7ff faa3 	bl	800186e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002328:	2100      	movs	r1, #0
 800232a:	480d      	ldr	r0, [pc, #52]	@ (8002360 <MX_USART3_UART_Init+0x90>)
 800232c:	f008 f8eb 	bl	800a506 <HAL_UARTEx_SetTxFifoThreshold>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002336:	f7ff fa9a 	bl	800186e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800233a:	2100      	movs	r1, #0
 800233c:	4808      	ldr	r0, [pc, #32]	@ (8002360 <MX_USART3_UART_Init+0x90>)
 800233e:	f008 f920 	bl	800a582 <HAL_UARTEx_SetRxFifoThreshold>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002348:	f7ff fa91 	bl	800186e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800234c:	4804      	ldr	r0, [pc, #16]	@ (8002360 <MX_USART3_UART_Init+0x90>)
 800234e:	f008 f8a1 	bl	800a494 <HAL_UARTEx_DisableFifoMode>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002358:	f7ff fa89 	bl	800186e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000584 	.word	0x20000584
 8002364:	40004800 	.word	0x40004800

08002368 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b09c      	sub	sp, #112	@ 0x70
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002380:	f107 0318 	add.w	r3, r7, #24
 8002384:	2244      	movs	r2, #68	@ 0x44
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f00d fd59 	bl	800fe40 <memset>
  if(uartHandle->Instance==USART2)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a99      	ldr	r2, [pc, #612]	@ (80025f8 <HAL_UART_MspInit+0x290>)
 8002394:	4293      	cmp	r3, r2
 8002396:	f040 8093 	bne.w	80024c0 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800239a:	2302      	movs	r3, #2
 800239c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023a2:	f107 0318 	add.w	r3, r7, #24
 80023a6:	4618      	mov	r0, r3
 80023a8:	f004 fbd6 	bl	8006b58 <HAL_RCCEx_PeriphCLKConfig>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023b2:	f7ff fa5c 	bl	800186e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023b6:	4b91      	ldr	r3, [pc, #580]	@ (80025fc <HAL_UART_MspInit+0x294>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ba:	4a90      	ldr	r2, [pc, #576]	@ (80025fc <HAL_UART_MspInit+0x294>)
 80023bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80023c2:	4b8e      	ldr	r3, [pc, #568]	@ (80025fc <HAL_UART_MspInit+0x294>)
 80023c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ce:	4b8b      	ldr	r3, [pc, #556]	@ (80025fc <HAL_UART_MspInit+0x294>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d2:	4a8a      	ldr	r2, [pc, #552]	@ (80025fc <HAL_UART_MspInit+0x294>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023da:	4b88      	ldr	r3, [pc, #544]	@ (80025fc <HAL_UART_MspInit+0x294>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023e6:	230c      	movs	r3, #12
 80023e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023f6:	2307      	movs	r3, #7
 80023f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80023fe:	4619      	mov	r1, r3
 8002400:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002404:	f003 fc14 	bl	8005c30 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8002408:	4b7d      	ldr	r3, [pc, #500]	@ (8002600 <HAL_UART_MspInit+0x298>)
 800240a:	4a7e      	ldr	r2, [pc, #504]	@ (8002604 <HAL_UART_MspInit+0x29c>)
 800240c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800240e:	4b7c      	ldr	r3, [pc, #496]	@ (8002600 <HAL_UART_MspInit+0x298>)
 8002410:	221a      	movs	r2, #26
 8002412:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002414:	4b7a      	ldr	r3, [pc, #488]	@ (8002600 <HAL_UART_MspInit+0x298>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800241a:	4b79      	ldr	r3, [pc, #484]	@ (8002600 <HAL_UART_MspInit+0x298>)
 800241c:	2200      	movs	r2, #0
 800241e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002420:	4b77      	ldr	r3, [pc, #476]	@ (8002600 <HAL_UART_MspInit+0x298>)
 8002422:	2280      	movs	r2, #128	@ 0x80
 8002424:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002426:	4b76      	ldr	r3, [pc, #472]	@ (8002600 <HAL_UART_MspInit+0x298>)
 8002428:	2200      	movs	r2, #0
 800242a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800242c:	4b74      	ldr	r3, [pc, #464]	@ (8002600 <HAL_UART_MspInit+0x298>)
 800242e:	2200      	movs	r2, #0
 8002430:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002432:	4b73      	ldr	r3, [pc, #460]	@ (8002600 <HAL_UART_MspInit+0x298>)
 8002434:	2200      	movs	r2, #0
 8002436:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002438:	4b71      	ldr	r3, [pc, #452]	@ (8002600 <HAL_UART_MspInit+0x298>)
 800243a:	2200      	movs	r2, #0
 800243c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800243e:	4870      	ldr	r0, [pc, #448]	@ (8002600 <HAL_UART_MspInit+0x298>)
 8002440:	f003 f8c4 	bl	80055cc <HAL_DMA_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800244a:	f7ff fa10 	bl	800186e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a6b      	ldr	r2, [pc, #428]	@ (8002600 <HAL_UART_MspInit+0x298>)
 8002452:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002456:	4a6a      	ldr	r2, [pc, #424]	@ (8002600 <HAL_UART_MspInit+0x298>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800245c:	4b6a      	ldr	r3, [pc, #424]	@ (8002608 <HAL_UART_MspInit+0x2a0>)
 800245e:	4a6b      	ldr	r2, [pc, #428]	@ (800260c <HAL_UART_MspInit+0x2a4>)
 8002460:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002462:	4b69      	ldr	r3, [pc, #420]	@ (8002608 <HAL_UART_MspInit+0x2a0>)
 8002464:	221b      	movs	r2, #27
 8002466:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002468:	4b67      	ldr	r3, [pc, #412]	@ (8002608 <HAL_UART_MspInit+0x2a0>)
 800246a:	2210      	movs	r2, #16
 800246c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800246e:	4b66      	ldr	r3, [pc, #408]	@ (8002608 <HAL_UART_MspInit+0x2a0>)
 8002470:	2200      	movs	r2, #0
 8002472:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002474:	4b64      	ldr	r3, [pc, #400]	@ (8002608 <HAL_UART_MspInit+0x2a0>)
 8002476:	2280      	movs	r2, #128	@ 0x80
 8002478:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800247a:	4b63      	ldr	r3, [pc, #396]	@ (8002608 <HAL_UART_MspInit+0x2a0>)
 800247c:	2200      	movs	r2, #0
 800247e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002480:	4b61      	ldr	r3, [pc, #388]	@ (8002608 <HAL_UART_MspInit+0x2a0>)
 8002482:	2200      	movs	r2, #0
 8002484:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002486:	4b60      	ldr	r3, [pc, #384]	@ (8002608 <HAL_UART_MspInit+0x2a0>)
 8002488:	2200      	movs	r2, #0
 800248a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800248c:	4b5e      	ldr	r3, [pc, #376]	@ (8002608 <HAL_UART_MspInit+0x2a0>)
 800248e:	2200      	movs	r2, #0
 8002490:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002492:	485d      	ldr	r0, [pc, #372]	@ (8002608 <HAL_UART_MspInit+0x2a0>)
 8002494:	f003 f89a 	bl	80055cc <HAL_DMA_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800249e:	f7ff f9e6 	bl	800186e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a58      	ldr	r2, [pc, #352]	@ (8002608 <HAL_UART_MspInit+0x2a0>)
 80024a6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80024a8:	4a57      	ldr	r2, [pc, #348]	@ (8002608 <HAL_UART_MspInit+0x2a0>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2100      	movs	r1, #0
 80024b2:	2026      	movs	r0, #38	@ 0x26
 80024b4:	f002 fe7b 	bl	80051ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024b8:	2026      	movs	r0, #38	@ 0x26
 80024ba:	f002 fe92 	bl	80051e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024be:	e097      	b.n	80025f0 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART3)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a52      	ldr	r2, [pc, #328]	@ (8002610 <HAL_UART_MspInit+0x2a8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	f040 8092 	bne.w	80025f0 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024cc:	2304      	movs	r3, #4
 80024ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024d0:	2300      	movs	r3, #0
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024d4:	f107 0318 	add.w	r3, r7, #24
 80024d8:	4618      	mov	r0, r3
 80024da:	f004 fb3d 	bl	8006b58 <HAL_RCCEx_PeriphCLKConfig>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_UART_MspInit+0x180>
      Error_Handler();
 80024e4:	f7ff f9c3 	bl	800186e <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024e8:	4b44      	ldr	r3, [pc, #272]	@ (80025fc <HAL_UART_MspInit+0x294>)
 80024ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ec:	4a43      	ldr	r2, [pc, #268]	@ (80025fc <HAL_UART_MspInit+0x294>)
 80024ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80024f4:	4b41      	ldr	r3, [pc, #260]	@ (80025fc <HAL_UART_MspInit+0x294>)
 80024f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002500:	4b3e      	ldr	r3, [pc, #248]	@ (80025fc <HAL_UART_MspInit+0x294>)
 8002502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002504:	4a3d      	ldr	r2, [pc, #244]	@ (80025fc <HAL_UART_MspInit+0x294>)
 8002506:	f043 0302 	orr.w	r3, r3, #2
 800250a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800250c:	4b3b      	ldr	r3, [pc, #236]	@ (80025fc <HAL_UART_MspInit+0x294>)
 800250e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002518:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800251c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002526:	2300      	movs	r3, #0
 8002528:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800252a:	2307      	movs	r3, #7
 800252c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002532:	4619      	mov	r1, r3
 8002534:	4837      	ldr	r0, [pc, #220]	@ (8002614 <HAL_UART_MspInit+0x2ac>)
 8002536:	f003 fb7b 	bl	8005c30 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel1;
 800253a:	4b37      	ldr	r3, [pc, #220]	@ (8002618 <HAL_UART_MspInit+0x2b0>)
 800253c:	4a37      	ldr	r2, [pc, #220]	@ (800261c <HAL_UART_MspInit+0x2b4>)
 800253e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002540:	4b35      	ldr	r3, [pc, #212]	@ (8002618 <HAL_UART_MspInit+0x2b0>)
 8002542:	221d      	movs	r2, #29
 8002544:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002546:	4b34      	ldr	r3, [pc, #208]	@ (8002618 <HAL_UART_MspInit+0x2b0>)
 8002548:	2210      	movs	r2, #16
 800254a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800254c:	4b32      	ldr	r3, [pc, #200]	@ (8002618 <HAL_UART_MspInit+0x2b0>)
 800254e:	2200      	movs	r2, #0
 8002550:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002552:	4b31      	ldr	r3, [pc, #196]	@ (8002618 <HAL_UART_MspInit+0x2b0>)
 8002554:	2280      	movs	r2, #128	@ 0x80
 8002556:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002558:	4b2f      	ldr	r3, [pc, #188]	@ (8002618 <HAL_UART_MspInit+0x2b0>)
 800255a:	2200      	movs	r2, #0
 800255c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800255e:	4b2e      	ldr	r3, [pc, #184]	@ (8002618 <HAL_UART_MspInit+0x2b0>)
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002564:	4b2c      	ldr	r3, [pc, #176]	@ (8002618 <HAL_UART_MspInit+0x2b0>)
 8002566:	2200      	movs	r2, #0
 8002568:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800256a:	4b2b      	ldr	r3, [pc, #172]	@ (8002618 <HAL_UART_MspInit+0x2b0>)
 800256c:	2200      	movs	r2, #0
 800256e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002570:	4829      	ldr	r0, [pc, #164]	@ (8002618 <HAL_UART_MspInit+0x2b0>)
 8002572:	f003 f82b 	bl	80055cc <HAL_DMA_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_UART_MspInit+0x218>
      Error_Handler();
 800257c:	f7ff f977 	bl	800186e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a25      	ldr	r2, [pc, #148]	@ (8002618 <HAL_UART_MspInit+0x2b0>)
 8002584:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002586:	4a24      	ldr	r2, [pc, #144]	@ (8002618 <HAL_UART_MspInit+0x2b0>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart3_rx.Instance = DMA1_Channel2;
 800258c:	4b24      	ldr	r3, [pc, #144]	@ (8002620 <HAL_UART_MspInit+0x2b8>)
 800258e:	4a25      	ldr	r2, [pc, #148]	@ (8002624 <HAL_UART_MspInit+0x2bc>)
 8002590:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002592:	4b23      	ldr	r3, [pc, #140]	@ (8002620 <HAL_UART_MspInit+0x2b8>)
 8002594:	221c      	movs	r2, #28
 8002596:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002598:	4b21      	ldr	r3, [pc, #132]	@ (8002620 <HAL_UART_MspInit+0x2b8>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800259e:	4b20      	ldr	r3, [pc, #128]	@ (8002620 <HAL_UART_MspInit+0x2b8>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002620 <HAL_UART_MspInit+0x2b8>)
 80025a6:	2280      	movs	r2, #128	@ 0x80
 80025a8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002620 <HAL_UART_MspInit+0x2b8>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002620 <HAL_UART_MspInit+0x2b8>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80025b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002620 <HAL_UART_MspInit+0x2b8>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025bc:	4b18      	ldr	r3, [pc, #96]	@ (8002620 <HAL_UART_MspInit+0x2b8>)
 80025be:	2200      	movs	r2, #0
 80025c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80025c2:	4817      	ldr	r0, [pc, #92]	@ (8002620 <HAL_UART_MspInit+0x2b8>)
 80025c4:	f003 f802 	bl	80055cc <HAL_DMA_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_UART_MspInit+0x26a>
      Error_Handler();
 80025ce:	f7ff f94e 	bl	800186e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a12      	ldr	r2, [pc, #72]	@ (8002620 <HAL_UART_MspInit+0x2b8>)
 80025d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80025da:	4a11      	ldr	r2, [pc, #68]	@ (8002620 <HAL_UART_MspInit+0x2b8>)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80025e0:	2200      	movs	r2, #0
 80025e2:	2101      	movs	r1, #1
 80025e4:	2027      	movs	r0, #39	@ 0x27
 80025e6:	f002 fde2 	bl	80051ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025ea:	2027      	movs	r0, #39	@ 0x27
 80025ec:	f002 fdf9 	bl	80051e2 <HAL_NVIC_EnableIRQ>
}
 80025f0:	bf00      	nop
 80025f2:	3770      	adds	r7, #112	@ 0x70
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40004400 	.word	0x40004400
 80025fc:	40021000 	.word	0x40021000
 8002600:	20000618 	.word	0x20000618
 8002604:	40020030 	.word	0x40020030
 8002608:	20000678 	.word	0x20000678
 800260c:	40020044 	.word	0x40020044
 8002610:	40004800 	.word	0x40004800
 8002614:	48000400 	.word	0x48000400
 8002618:	200006d8 	.word	0x200006d8
 800261c:	40020008 	.word	0x40020008
 8002620:	20000738 	.word	0x20000738
 8002624:	4002001c 	.word	0x4002001c

08002628 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002628:	480d      	ldr	r0, [pc, #52]	@ (8002660 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800262a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800262c:	f7ff fb9a 	bl	8001d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002630:	480c      	ldr	r0, [pc, #48]	@ (8002664 <LoopForever+0x6>)
  ldr r1, =_edata
 8002632:	490d      	ldr	r1, [pc, #52]	@ (8002668 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002634:	4a0d      	ldr	r2, [pc, #52]	@ (800266c <LoopForever+0xe>)
  movs r3, #0
 8002636:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002638:	e002      	b.n	8002640 <LoopCopyDataInit>

0800263a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800263a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800263c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800263e:	3304      	adds	r3, #4

08002640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002644:	d3f9      	bcc.n	800263a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002646:	4a0a      	ldr	r2, [pc, #40]	@ (8002670 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002648:	4c0a      	ldr	r4, [pc, #40]	@ (8002674 <LoopForever+0x16>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800264c:	e001      	b.n	8002652 <LoopFillZerobss>

0800264e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800264e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002650:	3204      	adds	r2, #4

08002652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002654:	d3fb      	bcc.n	800264e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002656:	f00d fc5d 	bl	800ff14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800265a:	f7ff f84d 	bl	80016f8 <main>

0800265e <LoopForever>:

LoopForever:
    b LoopForever
 800265e:	e7fe      	b.n	800265e <LoopForever>
  ldr   r0, =_estack
 8002660:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002668:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 800266c:	08013e10 	.word	0x08013e10
  ldr r2, =_sbss
 8002670:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8002674:	20000d68 	.word	0x20000d68

08002678 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002678:	e7fe      	b.n	8002678 <COMP1_2_3_IRQHandler>

0800267a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002684:	2003      	movs	r0, #3
 8002686:	f002 fd87 	bl	8005198 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800268a:	200f      	movs	r0, #15
 800268c:	f000 f80e 	bl	80026ac <HAL_InitTick>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	71fb      	strb	r3, [r7, #7]
 800269a:	e001      	b.n	80026a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800269c:	f7ff f9fe 	bl	8001a9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026a0:	79fb      	ldrb	r3, [r7, #7]

}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80026b8:	4b16      	ldr	r3, [pc, #88]	@ (8002714 <HAL_InitTick+0x68>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d022      	beq.n	8002706 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80026c0:	4b15      	ldr	r3, [pc, #84]	@ (8002718 <HAL_InitTick+0x6c>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <HAL_InitTick+0x68>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80026cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	4618      	mov	r0, r3
 80026d6:	f002 fd92 	bl	80051fe <HAL_SYSTICK_Config>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10f      	bne.n	8002700 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	d809      	bhi.n	80026fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e6:	2200      	movs	r2, #0
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	f04f 30ff 	mov.w	r0, #4294967295
 80026ee:	f002 fd5e 	bl	80051ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026f2:	4a0a      	ldr	r2, [pc, #40]	@ (800271c <HAL_InitTick+0x70>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	e007      	b.n	800270a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	e004      	b.n	800270a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
 8002704:	e001      	b.n	800270a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800270a:	7bfb      	ldrb	r3, [r7, #15]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000008 	.word	0x20000008
 8002718:	20000000 	.word	0x20000000
 800271c:	20000004 	.word	0x20000004

08002720 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002724:	4b05      	ldr	r3, [pc, #20]	@ (800273c <HAL_IncTick+0x1c>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <HAL_IncTick+0x20>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4413      	add	r3, r2
 800272e:	4a03      	ldr	r2, [pc, #12]	@ (800273c <HAL_IncTick+0x1c>)
 8002730:	6013      	str	r3, [r2, #0]
}
 8002732:	bf00      	nop
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	20000798 	.word	0x20000798
 8002740:	20000008 	.word	0x20000008

08002744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return uwTick;
 8002748:	4b03      	ldr	r3, [pc, #12]	@ (8002758 <HAL_GetTick+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000798 	.word	0x20000798

0800275c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002764:	f7ff ffee 	bl	8002744 <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d004      	beq.n	8002780 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002776:	4b09      	ldr	r3, [pc, #36]	@ (800279c <HAL_Delay+0x40>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4413      	add	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002780:	bf00      	nop
 8002782:	f7ff ffdf 	bl	8002744 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	429a      	cmp	r2, r3
 8002790:	d8f7      	bhi.n	8002782 <HAL_Delay+0x26>
  {
  }
}
 8002792:	bf00      	nop
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000008 	.word	0x20000008

080027a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	609a      	str	r2, [r3, #8]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	609a      	str	r2, [r3, #8]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	3360      	adds	r3, #96	@ 0x60
 800281a:	461a      	mov	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b08      	ldr	r3, [pc, #32]	@ (800284c <LL_ADC_SetOffset+0x44>)
 800282a:	4013      	ands	r3, r2
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	4313      	orrs	r3, r2
 8002838:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002840:	bf00      	nop
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	03fff000 	.word	0x03fff000

08002850 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3360      	adds	r3, #96	@ 0x60
 800285e:	461a      	mov	r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002870:	4618      	mov	r0, r3
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3360      	adds	r3, #96	@ 0x60
 800288c:	461a      	mov	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028a6:	bf00      	nop
 80028a8:	371c      	adds	r7, #28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b087      	sub	sp, #28
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	3360      	adds	r3, #96	@ 0x60
 80028c2:	461a      	mov	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80028dc:	bf00      	nop
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3360      	adds	r3, #96	@ 0x60
 80028f8:	461a      	mov	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	431a      	orrs	r2, r3
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002912:	bf00      	nop
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	615a      	str	r2, [r3, #20]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800296a:	b480      	push	{r7}
 800296c:	b087      	sub	sp, #28
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3330      	adds	r3, #48	@ 0x30
 800297a:	461a      	mov	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	4413      	add	r3, r2
 8002988:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	211f      	movs	r1, #31
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	401a      	ands	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	0e9b      	lsrs	r3, r3, #26
 80029a2:	f003 011f 	and.w	r1, r3, #31
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	431a      	orrs	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029b6:	bf00      	nop
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ce:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3314      	adds	r3, #20
 80029f8:	461a      	mov	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	0e5b      	lsrs	r3, r3, #25
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	4413      	add	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	0d1b      	lsrs	r3, r3, #20
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	2107      	movs	r1, #7
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	0d1b      	lsrs	r3, r3, #20
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f003 0318 	and.w	r3, r3, #24
 8002a62:	4908      	ldr	r1, [pc, #32]	@ (8002a84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a64:	40d9      	lsrs	r1, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	400b      	ands	r3, r1
 8002a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	0007ffff 	.word	0x0007ffff

08002a88 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 031f 	and.w	r3, r3, #31
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002ad0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6093      	str	r3, [r2, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002af4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002af8:	d101      	bne.n	8002afe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002b1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b20:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b48:	d101      	bne.n	8002b4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b70:	f043 0201 	orr.w	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b98:	f043 0202 	orr.w	r2, r3, #2
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <LL_ADC_IsEnabled+0x18>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <LL_ADC_IsEnabled+0x1a>
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d101      	bne.n	8002bea <LL_ADC_IsDisableOngoing+0x18>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <LL_ADC_IsDisableOngoing+0x1a>
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d101      	bne.n	8002c10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d101      	bne.n	8002c36 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c44:	b590      	push	{r4, r7, lr}
 8002c46:	b089      	sub	sp, #36	@ 0x24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e167      	b.n	8002f2e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7fe fb1d 	bl	80012ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff2d 	bl	8002ae4 <LL_ADC_IsDeepPowerDownEnabled>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d004      	beq.n	8002c9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff13 	bl	8002ac0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff ff48 	bl	8002b34 <LL_ADC_IsInternalRegulatorEnabled>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d115      	bne.n	8002cd6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ff2c 	bl	8002b0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cb4:	4ba0      	ldr	r3, [pc, #640]	@ (8002f38 <HAL_ADC_Init+0x2f4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	099b      	lsrs	r3, r3, #6
 8002cba:	4aa0      	ldr	r2, [pc, #640]	@ (8002f3c <HAL_ADC_Init+0x2f8>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cc8:	e002      	b.n	8002cd0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f9      	bne.n	8002cca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff ff2a 	bl	8002b34 <LL_ADC_IsInternalRegulatorEnabled>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10d      	bne.n	8002d02 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cea:	f043 0210 	orr.w	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cf6:	f043 0201 	orr.w	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff ff76 	bl	8002bf8 <LL_ADC_REG_IsConversionOngoing>
 8002d0c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f040 8100 	bne.w	8002f1c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f040 80fc 	bne.w	8002f1c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d28:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d2c:	f043 0202 	orr.w	r2, r3, #2
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff37 	bl	8002bac <LL_ADC_IsEnabled>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d111      	bne.n	8002d68 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d44:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d48:	f7ff ff30 	bl	8002bac <LL_ADC_IsEnabled>
 8002d4c:	4604      	mov	r4, r0
 8002d4e:	487c      	ldr	r0, [pc, #496]	@ (8002f40 <HAL_ADC_Init+0x2fc>)
 8002d50:	f7ff ff2c 	bl	8002bac <LL_ADC_IsEnabled>
 8002d54:	4603      	mov	r3, r0
 8002d56:	4323      	orrs	r3, r4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d105      	bne.n	8002d68 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4619      	mov	r1, r3
 8002d62:	4878      	ldr	r0, [pc, #480]	@ (8002f44 <HAL_ADC_Init+0x300>)
 8002d64:	f7ff fd1c 	bl	80027a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	7f5b      	ldrb	r3, [r3, #29]
 8002d6c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d72:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002d78:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002d7e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d86:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d106      	bne.n	8002da4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	045b      	lsls	r3, r3, #17
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d009      	beq.n	8002dc0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	4b60      	ldr	r3, [pc, #384]	@ (8002f48 <HAL_ADC_Init+0x304>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	69b9      	ldr	r1, [r7, #24]
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff ff15 	bl	8002c1e <LL_ADC_INJ_IsConversionOngoing>
 8002df4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d16d      	bne.n	8002ed8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d16a      	bne.n	8002ed8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e06:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e0e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e1e:	f023 0302 	bic.w	r3, r3, #2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	69b9      	ldr	r1, [r7, #24]
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d017      	beq.n	8002e64 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002e42:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e4c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6911      	ldr	r1, [r2, #16]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002e62:	e013      	b.n	8002e8c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002e72:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e88:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d118      	bne.n	8002ec8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002ea0:	f023 0304 	bic.w	r3, r3, #4
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002eac:	4311      	orrs	r1, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002eb2:	4311      	orrs	r1, r2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0201 	orr.w	r2, r2, #1
 8002ec4:	611a      	str	r2, [r3, #16]
 8002ec6:	e007      	b.n	8002ed8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d10c      	bne.n	8002efa <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	f023 010f 	bic.w	r1, r3, #15
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	1e5a      	subs	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ef8:	e007      	b.n	8002f0a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 020f 	bic.w	r2, r2, #15
 8002f08:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0e:	f023 0303 	bic.w	r3, r3, #3
 8002f12:	f043 0201 	orr.w	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f1a:	e007      	b.n	8002f2c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f20:	f043 0210 	orr.w	r2, r3, #16
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3724      	adds	r7, #36	@ 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd90      	pop	{r4, r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000000 	.word	0x20000000
 8002f3c:	053e2d63 	.word	0x053e2d63
 8002f40:	50000100 	.word	0x50000100
 8002f44:	50000300 	.word	0x50000300
 8002f48:	fff04007 	.word	0xfff04007

08002f4c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	@ 0x28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002f54:	2300      	movs	r3, #0
 8002f56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f68:	4883      	ldr	r0, [pc, #524]	@ (8003178 <HAL_ADC_IRQHandler+0x22c>)
 8002f6a:	f7ff fd8d 	bl	8002a88 <LL_ADC_GetMultimode>
 8002f6e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d017      	beq.n	8002faa <HAL_ADC_IRQHandler+0x5e>
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d012      	beq.n	8002faa <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d105      	bne.n	8002f9c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f94:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f001 fa9d 	bl	80044dc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d004      	beq.n	8002fbe <HAL_ADC_IRQHandler+0x72>
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8085 	beq.w	80030d4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d07f      	beq.n	80030d4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fca7 	bl	8002944 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d064      	beq.n	80030c6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a5e      	ldr	r2, [pc, #376]	@ (800317c <HAL_ADC_IRQHandler+0x230>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d002      	beq.n	800300c <HAL_ADC_IRQHandler+0xc0>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	e001      	b.n	8003010 <HAL_ADC_IRQHandler+0xc4>
 800300c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	4293      	cmp	r3, r2
 8003016:	d008      	beq.n	800302a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2b05      	cmp	r3, #5
 8003022:	d002      	beq.n	800302a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2b09      	cmp	r3, #9
 8003028:	d104      	bne.n	8003034 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	623b      	str	r3, [r7, #32]
 8003032:	e00d      	b.n	8003050 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a50      	ldr	r2, [pc, #320]	@ (800317c <HAL_ADC_IRQHandler+0x230>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d002      	beq.n	8003044 <HAL_ADC_IRQHandler+0xf8>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	e001      	b.n	8003048 <HAL_ADC_IRQHandler+0xfc>
 8003044:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003048:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d135      	bne.n	80030c6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b08      	cmp	r3, #8
 8003066:	d12e      	bne.n	80030c6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fdc3 	bl	8002bf8 <LL_ADC_REG_IsConversionOngoing>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d11a      	bne.n	80030ae <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 020c 	bic.w	r2, r2, #12
 8003086:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003098:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d112      	bne.n	80030c6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a4:	f043 0201 	orr.w	r2, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030ac:	e00b      	b.n	80030c6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b2:	f043 0210 	orr.w	r2, r3, #16
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030be:	f043 0201 	orr.w	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f95a 	bl	8003380 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	220c      	movs	r2, #12
 80030d2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 0320 	and.w	r3, r3, #32
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d004      	beq.n	80030e8 <HAL_ADC_IRQHandler+0x19c>
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	f003 0320 	and.w	r3, r3, #32
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 809e 	beq.w	8003230 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 8098 	beq.w	8003230 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	2b00      	cmp	r3, #0
 800310a:	d105      	bne.n	8003118 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003110:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fc50 	bl	80029c2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003122:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fc0b 	bl	8002944 <LL_ADC_REG_IsTriggerSourceSWStart>
 800312e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a11      	ldr	r2, [pc, #68]	@ (800317c <HAL_ADC_IRQHandler+0x230>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d002      	beq.n	8003140 <HAL_ADC_IRQHandler+0x1f4>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	e001      	b.n	8003144 <HAL_ADC_IRQHandler+0x1f8>
 8003140:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	4293      	cmp	r3, r2
 800314a:	d008      	beq.n	800315e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b06      	cmp	r3, #6
 8003156:	d002      	beq.n	800315e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2b07      	cmp	r3, #7
 800315c:	d104      	bne.n	8003168 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	623b      	str	r3, [r7, #32]
 8003166:	e011      	b.n	800318c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a03      	ldr	r2, [pc, #12]	@ (800317c <HAL_ADC_IRQHandler+0x230>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d006      	beq.n	8003180 <HAL_ADC_IRQHandler+0x234>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	e005      	b.n	8003184 <HAL_ADC_IRQHandler+0x238>
 8003178:	50000300 	.word	0x50000300
 800317c:	50000100 	.word	0x50000100
 8003180:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003184:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d047      	beq.n	8003222 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d007      	beq.n	80031ac <HAL_ADC_IRQHandler+0x260>
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d03f      	beq.n	8003222 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d13a      	bne.n	8003222 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b6:	2b40      	cmp	r3, #64	@ 0x40
 80031b8:	d133      	bne.n	8003222 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d12e      	bne.n	8003222 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fd28 	bl	8002c1e <LL_ADC_INJ_IsConversionOngoing>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d11a      	bne.n	800320a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80031e2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d112      	bne.n	8003222 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003200:	f043 0201 	orr.w	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003208:	e00b      	b.n	8003222 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320e:	f043 0210 	orr.w	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800321a:	f043 0201 	orr.w	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f009 f82c 	bl	800c280 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2260      	movs	r2, #96	@ 0x60
 800322e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003236:	2b00      	cmp	r3, #0
 8003238:	d011      	beq.n	800325e <HAL_ADC_IRQHandler+0x312>
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00c      	beq.n	800325e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003248:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f89f 	bl	8003394 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2280      	movs	r2, #128	@ 0x80
 800325c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d012      	beq.n	800328e <HAL_ADC_IRQHandler+0x342>
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00d      	beq.n	800328e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003276:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f001 f918 	bl	80044b4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800328c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003294:	2b00      	cmp	r3, #0
 8003296:	d012      	beq.n	80032be <HAL_ADC_IRQHandler+0x372>
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00d      	beq.n	80032be <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f001 f90a 	bl	80044c8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d036      	beq.n	8003336 <HAL_ADC_IRQHandler+0x3ea>
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d031      	beq.n	8003336 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80032da:	2301      	movs	r3, #1
 80032dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80032de:	e014      	b.n	800330a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80032e6:	4825      	ldr	r0, [pc, #148]	@ (800337c <HAL_ADC_IRQHandler+0x430>)
 80032e8:	f7ff fbdc 	bl	8002aa4 <LL_ADC_GetMultiDMATransfer>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80032f2:	2301      	movs	r3, #1
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032f6:	e008      	b.n	800330a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003306:	2301      	movs	r3, #1
 8003308:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800330a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330c:	2b01      	cmp	r3, #1
 800330e:	d10e      	bne.n	800332e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003314:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003320:	f043 0202 	orr.w	r2, r3, #2
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f83d 	bl	80033a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2210      	movs	r2, #16
 8003334:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800333c:	2b00      	cmp	r3, #0
 800333e:	d018      	beq.n	8003372 <HAL_ADC_IRQHandler+0x426>
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003346:	2b00      	cmp	r3, #0
 8003348:	d013      	beq.n	8003372 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800335a:	f043 0208 	orr.w	r2, r3, #8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800336a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f001 f897 	bl	80044a0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003372:	bf00      	nop
 8003374:	3728      	adds	r7, #40	@ 0x28
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	50000300 	.word	0x50000300

08003380 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b0b6      	sub	sp, #216	@ 0xd8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_ADC_ConfigChannel+0x22>
 80033da:	2302      	movs	r3, #2
 80033dc:	e3c8      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x7b4>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fc04 	bl	8002bf8 <LL_ADC_REG_IsConversionOngoing>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 83ad 	bne.w	8003b52 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	f7ff fab0 	bl	800296a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fbf2 	bl	8002bf8 <LL_ADC_REG_IsConversionOngoing>
 8003414:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fbfe 	bl	8002c1e <LL_ADC_INJ_IsConversionOngoing>
 8003422:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003426:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800342a:	2b00      	cmp	r3, #0
 800342c:	f040 81d9 	bne.w	80037e2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003430:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003434:	2b00      	cmp	r3, #0
 8003436:	f040 81d4 	bne.w	80037e2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003442:	d10f      	bne.n	8003464 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2200      	movs	r2, #0
 800344e:	4619      	mov	r1, r3
 8003450:	f7ff faca 	bl	80029e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fa5e 	bl	800291e <LL_ADC_SetSamplingTimeCommonConfig>
 8003462:	e00e      	b.n	8003482 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	461a      	mov	r2, r3
 8003472:	f7ff fab9 	bl	80029e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2100      	movs	r1, #0
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fa4e 	bl	800291e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	08db      	lsrs	r3, r3, #3
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d022      	beq.n	80034ea <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	6919      	ldr	r1, [r3, #16]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80034b4:	f7ff f9a8 	bl	8002808 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	6919      	ldr	r1, [r3, #16]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	461a      	mov	r2, r3
 80034c6:	f7ff f9f4 	bl	80028b2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d102      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x124>
 80034da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034de:	e000      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x126>
 80034e0:	2300      	movs	r3, #0
 80034e2:	461a      	mov	r2, r3
 80034e4:	f7ff fa00 	bl	80028e8 <LL_ADC_SetOffsetSaturation>
 80034e8:	e17b      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff f9ad 	bl	8002850 <LL_ADC_GetOffsetChannel>
 80034f6:	4603      	mov	r3, r0
 80034f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x15a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2100      	movs	r1, #0
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff f9a2 	bl	8002850 <LL_ADC_GetOffsetChannel>
 800350c:	4603      	mov	r3, r0
 800350e:	0e9b      	lsrs	r3, r3, #26
 8003510:	f003 021f 	and.w	r2, r3, #31
 8003514:	e01e      	b.n	8003554 <HAL_ADC_ConfigChannel+0x198>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff f997 	bl	8002850 <LL_ADC_GetOffsetChannel>
 8003522:	4603      	mov	r3, r0
 8003524:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800352c:	fa93 f3a3 	rbit	r3, r3
 8003530:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003534:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003538:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800353c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003544:	2320      	movs	r3, #32
 8003546:	e004      	b.n	8003552 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003548:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355c:	2b00      	cmp	r3, #0
 800355e:	d105      	bne.n	800356c <HAL_ADC_ConfigChannel+0x1b0>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	0e9b      	lsrs	r3, r3, #26
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	e018      	b.n	800359e <HAL_ADC_ConfigChannel+0x1e2>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003578:	fa93 f3a3 	rbit	r3, r3
 800357c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003580:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003584:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003588:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003590:	2320      	movs	r3, #32
 8003592:	e004      	b.n	800359e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003594:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003598:	fab3 f383 	clz	r3, r3
 800359c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800359e:	429a      	cmp	r2, r3
 80035a0:	d106      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2200      	movs	r2, #0
 80035a8:	2100      	movs	r1, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff f966 	bl	800287c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2101      	movs	r1, #1
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff f94a 	bl	8002850 <LL_ADC_GetOffsetChannel>
 80035bc:	4603      	mov	r3, r0
 80035be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x220>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2101      	movs	r1, #1
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff f93f 	bl	8002850 <LL_ADC_GetOffsetChannel>
 80035d2:	4603      	mov	r3, r0
 80035d4:	0e9b      	lsrs	r3, r3, #26
 80035d6:	f003 021f 	and.w	r2, r3, #31
 80035da:	e01e      	b.n	800361a <HAL_ADC_ConfigChannel+0x25e>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2101      	movs	r1, #1
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff f934 	bl	8002850 <LL_ADC_GetOffsetChannel>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80035fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800360a:	2320      	movs	r3, #32
 800360c:	e004      	b.n	8003618 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800360e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003622:	2b00      	cmp	r3, #0
 8003624:	d105      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x276>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	0e9b      	lsrs	r3, r3, #26
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	e018      	b.n	8003664 <HAL_ADC_ConfigChannel+0x2a8>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800363e:	fa93 f3a3 	rbit	r3, r3
 8003642:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003646:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800364a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800364e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003656:	2320      	movs	r3, #32
 8003658:	e004      	b.n	8003664 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800365a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003664:	429a      	cmp	r2, r3
 8003666:	d106      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2200      	movs	r2, #0
 800366e:	2101      	movs	r1, #1
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff f903 	bl	800287c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2102      	movs	r1, #2
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff f8e7 	bl	8002850 <LL_ADC_GetOffsetChannel>
 8003682:	4603      	mov	r3, r0
 8003684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10a      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x2e6>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2102      	movs	r1, #2
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff f8dc 	bl	8002850 <LL_ADC_GetOffsetChannel>
 8003698:	4603      	mov	r3, r0
 800369a:	0e9b      	lsrs	r3, r3, #26
 800369c:	f003 021f 	and.w	r2, r3, #31
 80036a0:	e01e      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x324>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2102      	movs	r1, #2
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff f8d1 	bl	8002850 <LL_ADC_GetOffsetChannel>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036b8:	fa93 f3a3 	rbit	r3, r3
 80036bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80036c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80036c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80036d0:	2320      	movs	r3, #32
 80036d2:	e004      	b.n	80036de <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80036d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036d8:	fab3 f383 	clz	r3, r3
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d105      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x33c>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	0e9b      	lsrs	r3, r3, #26
 80036f2:	f003 031f 	and.w	r3, r3, #31
 80036f6:	e016      	b.n	8003726 <HAL_ADC_ConfigChannel+0x36a>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003700:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003704:	fa93 f3a3 	rbit	r3, r3
 8003708:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800370a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800370c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003710:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003718:	2320      	movs	r3, #32
 800371a:	e004      	b.n	8003726 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800371c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003720:	fab3 f383 	clz	r3, r3
 8003724:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003726:	429a      	cmp	r2, r3
 8003728:	d106      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2200      	movs	r2, #0
 8003730:	2102      	movs	r1, #2
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff f8a2 	bl	800287c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2103      	movs	r1, #3
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff f886 	bl	8002850 <LL_ADC_GetOffsetChannel>
 8003744:	4603      	mov	r3, r0
 8003746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10a      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x3a8>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2103      	movs	r1, #3
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff f87b 	bl	8002850 <LL_ADC_GetOffsetChannel>
 800375a:	4603      	mov	r3, r0
 800375c:	0e9b      	lsrs	r3, r3, #26
 800375e:	f003 021f 	and.w	r2, r3, #31
 8003762:	e017      	b.n	8003794 <HAL_ADC_ConfigChannel+0x3d8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2103      	movs	r1, #3
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff f870 	bl	8002850 <LL_ADC_GetOffsetChannel>
 8003770:	4603      	mov	r3, r0
 8003772:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003776:	fa93 f3a3 	rbit	r3, r3
 800377a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800377c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800377e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003780:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003786:	2320      	movs	r3, #32
 8003788:	e003      	b.n	8003792 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800378a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800378c:	fab3 f383 	clz	r3, r3
 8003790:	b2db      	uxtb	r3, r3
 8003792:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379c:	2b00      	cmp	r3, #0
 800379e:	d105      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x3f0>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	0e9b      	lsrs	r3, r3, #26
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	e011      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x414>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037b4:	fa93 f3a3 	rbit	r3, r3
 80037b8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80037ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80037be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80037c4:	2320      	movs	r3, #32
 80037c6:	e003      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80037c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037ca:	fab3 f383 	clz	r3, r3
 80037ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d106      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2200      	movs	r2, #0
 80037da:	2103      	movs	r1, #3
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff f84d 	bl	800287c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff f9e0 	bl	8002bac <LL_ADC_IsEnabled>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f040 8140 	bne.w	8003a74 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	6819      	ldr	r1, [r3, #0]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	461a      	mov	r2, r3
 8003802:	f7ff f91d 	bl	8002a40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	4a8f      	ldr	r2, [pc, #572]	@ (8003a48 <HAL_ADC_ConfigChannel+0x68c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	f040 8131 	bne.w	8003a74 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10b      	bne.n	800383a <HAL_ADC_ConfigChannel+0x47e>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	0e9b      	lsrs	r3, r3, #26
 8003828:	3301      	adds	r3, #1
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	2b09      	cmp	r3, #9
 8003830:	bf94      	ite	ls
 8003832:	2301      	movls	r3, #1
 8003834:	2300      	movhi	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	e019      	b.n	800386e <HAL_ADC_ConfigChannel+0x4b2>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003842:	fa93 f3a3 	rbit	r3, r3
 8003846:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003848:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800384a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800384c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003852:	2320      	movs	r3, #32
 8003854:	e003      	b.n	800385e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003856:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003858:	fab3 f383 	clz	r3, r3
 800385c:	b2db      	uxtb	r3, r3
 800385e:	3301      	adds	r3, #1
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	2b09      	cmp	r3, #9
 8003866:	bf94      	ite	ls
 8003868:	2301      	movls	r3, #1
 800386a:	2300      	movhi	r3, #0
 800386c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800386e:	2b00      	cmp	r3, #0
 8003870:	d079      	beq.n	8003966 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387a:	2b00      	cmp	r3, #0
 800387c:	d107      	bne.n	800388e <HAL_ADC_ConfigChannel+0x4d2>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	0e9b      	lsrs	r3, r3, #26
 8003884:	3301      	adds	r3, #1
 8003886:	069b      	lsls	r3, r3, #26
 8003888:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800388c:	e015      	b.n	80038ba <HAL_ADC_ConfigChannel+0x4fe>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800389c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800389e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80038a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80038a6:	2320      	movs	r3, #32
 80038a8:	e003      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80038aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ac:	fab3 f383 	clz	r3, r3
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	3301      	adds	r3, #1
 80038b4:	069b      	lsls	r3, r3, #26
 80038b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HAL_ADC_ConfigChannel+0x51e>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	0e9b      	lsrs	r3, r3, #26
 80038cc:	3301      	adds	r3, #1
 80038ce:	f003 031f 	and.w	r3, r3, #31
 80038d2:	2101      	movs	r1, #1
 80038d4:	fa01 f303 	lsl.w	r3, r1, r3
 80038d8:	e017      	b.n	800390a <HAL_ADC_ConfigChannel+0x54e>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80038e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80038ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80038f2:	2320      	movs	r3, #32
 80038f4:	e003      	b.n	80038fe <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80038f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038f8:	fab3 f383 	clz	r3, r3
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	3301      	adds	r3, #1
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	2101      	movs	r1, #1
 8003906:	fa01 f303 	lsl.w	r3, r1, r3
 800390a:	ea42 0103 	orr.w	r1, r2, r3
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x574>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	0e9b      	lsrs	r3, r3, #26
 8003920:	3301      	adds	r3, #1
 8003922:	f003 021f 	and.w	r2, r3, #31
 8003926:	4613      	mov	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	4413      	add	r3, r2
 800392c:	051b      	lsls	r3, r3, #20
 800392e:	e018      	b.n	8003962 <HAL_ADC_ConfigChannel+0x5a6>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003938:	fa93 f3a3 	rbit	r3, r3
 800393c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800393e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003940:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003948:	2320      	movs	r3, #32
 800394a:	e003      	b.n	8003954 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800394c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	3301      	adds	r3, #1
 8003956:	f003 021f 	and.w	r2, r3, #31
 800395a:	4613      	mov	r3, r2
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4413      	add	r3, r2
 8003960:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003962:	430b      	orrs	r3, r1
 8003964:	e081      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800396e:	2b00      	cmp	r3, #0
 8003970:	d107      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x5c6>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	0e9b      	lsrs	r3, r3, #26
 8003978:	3301      	adds	r3, #1
 800397a:	069b      	lsls	r3, r3, #26
 800397c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003980:	e015      	b.n	80039ae <HAL_ADC_ConfigChannel+0x5f2>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398a:	fa93 f3a3 	rbit	r3, r3
 800398e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003992:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800399a:	2320      	movs	r3, #32
 800399c:	e003      	b.n	80039a6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a0:	fab3 f383 	clz	r3, r3
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	3301      	adds	r3, #1
 80039a8:	069b      	lsls	r3, r3, #26
 80039aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x612>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	0e9b      	lsrs	r3, r3, #26
 80039c0:	3301      	adds	r3, #1
 80039c2:	f003 031f 	and.w	r3, r3, #31
 80039c6:	2101      	movs	r1, #1
 80039c8:	fa01 f303 	lsl.w	r3, r1, r3
 80039cc:	e017      	b.n	80039fe <HAL_ADC_ConfigChannel+0x642>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	fa93 f3a3 	rbit	r3, r3
 80039da:	61fb      	str	r3, [r7, #28]
  return result;
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80039e6:	2320      	movs	r3, #32
 80039e8:	e003      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	fab3 f383 	clz	r3, r3
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	3301      	adds	r3, #1
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	2101      	movs	r1, #1
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	ea42 0103 	orr.w	r1, r2, r3
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10d      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0x66e>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	0e9b      	lsrs	r3, r3, #26
 8003a14:	3301      	adds	r3, #1
 8003a16:	f003 021f 	and.w	r2, r3, #31
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	4413      	add	r3, r2
 8003a20:	3b1e      	subs	r3, #30
 8003a22:	051b      	lsls	r3, r3, #20
 8003a24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a28:	e01e      	b.n	8003a68 <HAL_ADC_ConfigChannel+0x6ac>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	fa93 f3a3 	rbit	r3, r3
 8003a36:	613b      	str	r3, [r7, #16]
  return result;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d104      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003a42:	2320      	movs	r3, #32
 8003a44:	e006      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x698>
 8003a46:	bf00      	nop
 8003a48:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	fab3 f383 	clz	r3, r3
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	3301      	adds	r3, #1
 8003a56:	f003 021f 	and.w	r2, r3, #31
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	4413      	add	r3, r2
 8003a60:	3b1e      	subs	r3, #30
 8003a62:	051b      	lsls	r3, r3, #20
 8003a64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a68:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f7fe ffba 	bl	80029e8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	4b3f      	ldr	r3, [pc, #252]	@ (8003b78 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d071      	beq.n	8003b64 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a80:	483e      	ldr	r0, [pc, #248]	@ (8003b7c <HAL_ADC_ConfigChannel+0x7c0>)
 8003a82:	f7fe feb3 	bl	80027ec <LL_ADC_GetCommonPathInternalCh>
 8003a86:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a3c      	ldr	r2, [pc, #240]	@ (8003b80 <HAL_ADC_ConfigChannel+0x7c4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_ADC_ConfigChannel+0x6e2>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a3a      	ldr	r2, [pc, #232]	@ (8003b84 <HAL_ADC_ConfigChannel+0x7c8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d127      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003aa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d121      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ab2:	d157      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ab4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ab8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003abc:	4619      	mov	r1, r3
 8003abe:	482f      	ldr	r0, [pc, #188]	@ (8003b7c <HAL_ADC_ConfigChannel+0x7c0>)
 8003ac0:	f7fe fe81 	bl	80027c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ac4:	4b30      	ldr	r3, [pc, #192]	@ (8003b88 <HAL_ADC_ConfigChannel+0x7cc>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	099b      	lsrs	r3, r3, #6
 8003aca:	4a30      	ldr	r2, [pc, #192]	@ (8003b8c <HAL_ADC_ConfigChannel+0x7d0>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	099b      	lsrs	r3, r3, #6
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ade:	e002      	b.n	8003ae6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f9      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003aec:	e03a      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a27      	ldr	r2, [pc, #156]	@ (8003b90 <HAL_ADC_ConfigChannel+0x7d4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d113      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003af8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003afc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10d      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a22      	ldr	r2, [pc, #136]	@ (8003b94 <HAL_ADC_ConfigChannel+0x7d8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d02a      	beq.n	8003b64 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b16:	4619      	mov	r1, r3
 8003b18:	4818      	ldr	r0, [pc, #96]	@ (8003b7c <HAL_ADC_ConfigChannel+0x7c0>)
 8003b1a:	f7fe fe54 	bl	80027c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b1e:	e021      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1c      	ldr	r2, [pc, #112]	@ (8003b98 <HAL_ADC_ConfigChannel+0x7dc>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d11c      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d116      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a16      	ldr	r2, [pc, #88]	@ (8003b94 <HAL_ADC_ConfigChannel+0x7d8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d011      	beq.n	8003b64 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b48:	4619      	mov	r1, r3
 8003b4a:	480c      	ldr	r0, [pc, #48]	@ (8003b7c <HAL_ADC_ConfigChannel+0x7c0>)
 8003b4c:	f7fe fe3b 	bl	80027c6 <LL_ADC_SetCommonPathInternalCh>
 8003b50:	e008      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b56:	f043 0220 	orr.w	r2, r3, #32
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b6c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	37d8      	adds	r7, #216	@ 0xd8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	80080000 	.word	0x80080000
 8003b7c:	50000300 	.word	0x50000300
 8003b80:	c3210000 	.word	0xc3210000
 8003b84:	90c00010 	.word	0x90c00010
 8003b88:	20000000 	.word	0x20000000
 8003b8c:	053e2d63 	.word	0x053e2d63
 8003b90:	c7520000 	.word	0xc7520000
 8003b94:	50000100 	.word	0x50000100
 8003b98:	cb840000 	.word	0xcb840000

08003b9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fe fffd 	bl	8002bac <LL_ADC_IsEnabled>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d169      	bne.n	8003c8c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	4b36      	ldr	r3, [pc, #216]	@ (8003c98 <ADC_Enable+0xfc>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00d      	beq.n	8003be2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bca:	f043 0210 	orr.w	r2, r3, #16
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd6:	f043 0201 	orr.w	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e055      	b.n	8003c8e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe ffb8 	bl	8002b5c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003bec:	482b      	ldr	r0, [pc, #172]	@ (8003c9c <ADC_Enable+0x100>)
 8003bee:	f7fe fdfd 	bl	80027ec <LL_ADC_GetCommonPathInternalCh>
 8003bf2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003bf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d013      	beq.n	8003c24 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bfc:	4b28      	ldr	r3, [pc, #160]	@ (8003ca0 <ADC_Enable+0x104>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	099b      	lsrs	r3, r3, #6
 8003c02:	4a28      	ldr	r2, [pc, #160]	@ (8003ca4 <ADC_Enable+0x108>)
 8003c04:	fba2 2303 	umull	r2, r3, r2, r3
 8003c08:	099b      	lsrs	r3, r3, #6
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c16:	e002      	b.n	8003c1e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f9      	bne.n	8003c18 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c24:	f7fe fd8e 	bl	8002744 <HAL_GetTick>
 8003c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c2a:	e028      	b.n	8003c7e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fe ffbb 	bl	8002bac <LL_ADC_IsEnabled>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d104      	bne.n	8003c46 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fe ff8b 	bl	8002b5c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c46:	f7fe fd7d 	bl	8002744 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d914      	bls.n	8003c7e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d00d      	beq.n	8003c7e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c66:	f043 0210 	orr.w	r2, r3, #16
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c72:	f043 0201 	orr.w	r2, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e007      	b.n	8003c8e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d1cf      	bne.n	8003c2c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	8000003f 	.word	0x8000003f
 8003c9c:	50000300 	.word	0x50000300
 8003ca0:	20000000 	.word	0x20000000
 8003ca4:	053e2d63 	.word	0x053e2d63

08003ca8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fe ff8c 	bl	8002bd2 <LL_ADC_IsDisableOngoing>
 8003cba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fe ff73 	bl	8002bac <LL_ADC_IsEnabled>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d047      	beq.n	8003d5c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d144      	bne.n	8003d5c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 030d 	and.w	r3, r3, #13
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d10c      	bne.n	8003cfa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fe ff4d 	bl	8002b84 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2203      	movs	r2, #3
 8003cf0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003cf2:	f7fe fd27 	bl	8002744 <HAL_GetTick>
 8003cf6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cf8:	e029      	b.n	8003d4e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfe:	f043 0210 	orr.w	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d0a:	f043 0201 	orr.w	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e023      	b.n	8003d5e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d16:	f7fe fd15 	bl	8002744 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d914      	bls.n	8003d4e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00d      	beq.n	8003d4e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d36:	f043 0210 	orr.w	r2, r3, #16
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d42:	f043 0201 	orr.w	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e007      	b.n	8003d5e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1dc      	bne.n	8003d16 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <LL_ADC_SetCommonPathInternalCh>:
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_ADC_GetCommonPathInternalCh>:
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_ADC_SetOffset>:
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3360      	adds	r3, #96	@ 0x60
 8003dba:	461a      	mov	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4b08      	ldr	r3, [pc, #32]	@ (8003dec <LL_ADC_SetOffset+0x44>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	601a      	str	r2, [r3, #0]
}
 8003de0:	bf00      	nop
 8003de2:	371c      	adds	r7, #28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	03fff000 	.word	0x03fff000

08003df0 <LL_ADC_GetOffsetChannel>:
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3360      	adds	r3, #96	@ 0x60
 8003dfe:	461a      	mov	r2, r3
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <LL_ADC_SetOffsetState>:
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	3360      	adds	r3, #96	@ 0x60
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	431a      	orrs	r2, r3
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	601a      	str	r2, [r3, #0]
}
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <LL_ADC_SetOffsetSign>:
{
 8003e52:	b480      	push	{r7}
 8003e54:	b087      	sub	sp, #28
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	3360      	adds	r3, #96	@ 0x60
 8003e62:	461a      	mov	r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	431a      	orrs	r2, r3
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	601a      	str	r2, [r3, #0]
}
 8003e7c:	bf00      	nop
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <LL_ADC_SetOffsetSaturation>:
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3360      	adds	r3, #96	@ 0x60
 8003e98:	461a      	mov	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	431a      	orrs	r2, r3
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	601a      	str	r2, [r3, #0]
}
 8003eb2:	bf00      	nop
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	615a      	str	r2, [r3, #20]
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <LL_ADC_INJ_GetTrigAuto>:
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <LL_ADC_SetChannelSamplingTime>:
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3314      	adds	r3, #20
 8003f10:	461a      	mov	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	0e5b      	lsrs	r3, r3, #25
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	4413      	add	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	0d1b      	lsrs	r3, r3, #20
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	2107      	movs	r1, #7
 8003f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f32:	43db      	mvns	r3, r3
 8003f34:	401a      	ands	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	0d1b      	lsrs	r3, r3, #20
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	fa01 f303 	lsl.w	r3, r1, r3
 8003f44:	431a      	orrs	r2, r3
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	601a      	str	r2, [r3, #0]
}
 8003f4a:	bf00      	nop
 8003f4c:	371c      	adds	r7, #28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
	...

08003f58 <LL_ADC_SetChannelSingleDiff>:
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f70:	43db      	mvns	r3, r3
 8003f72:	401a      	ands	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f003 0318 	and.w	r3, r3, #24
 8003f7a:	4908      	ldr	r1, [pc, #32]	@ (8003f9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003f7c:	40d9      	lsrs	r1, r3
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	400b      	ands	r3, r1
 8003f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f86:	431a      	orrs	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003f8e:	bf00      	nop
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	0007ffff 	.word	0x0007ffff

08003fa0 <LL_ADC_GetMultimode>:
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 031f 	and.w	r3, r3, #31
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <LL_ADC_IsEnabled>:
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <LL_ADC_IsEnabled+0x18>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <LL_ADC_IsEnabled+0x1a>
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <LL_ADC_StartCalibration>:
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003ff4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	609a      	str	r2, [r3, #8]
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <LL_ADC_IsCalibrationOnGoing>:
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004024:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004028:	d101      	bne.n	800402e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <LL_ADC_REG_IsConversionOngoing>:
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b04      	cmp	r3, #4
 800404e:	d101      	bne.n	8004054 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <LL_ADC_INJ_StartConversion>:
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004072:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004076:	f043 0208 	orr.w	r2, r3, #8
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	609a      	str	r2, [r3, #8]
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <LL_ADC_INJ_IsConversionOngoing>:
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b08      	cmp	r3, #8
 800409c:	d101      	bne.n	80040a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_ADCEx_Calibration_Start+0x1c>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e04d      	b.n	8004168 <HAL_ADCEx_Calibration_Start+0xb8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff fde7 	bl	8003ca8 <ADC_Disable>
 80040da:	4603      	mov	r3, r0
 80040dc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d136      	bne.n	8004152 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80040ec:	f023 0302 	bic.w	r3, r3, #2
 80040f0:	f043 0202 	orr.w	r2, r3, #2
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6839      	ldr	r1, [r7, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff ff6f 	bl	8003fe2 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004104:	e014      	b.n	8004130 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	3301      	adds	r3, #1
 800410a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4a18      	ldr	r2, [pc, #96]	@ (8004170 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d90d      	bls.n	8004130 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004118:	f023 0312 	bic.w	r3, r3, #18
 800411c:	f043 0210 	orr.w	r2, r3, #16
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e01b      	b.n	8004168 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff ff6d 	bl	8004014 <LL_ADC_IsCalibrationOnGoing>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e2      	bne.n	8004106 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004144:	f023 0303 	bic.w	r3, r3, #3
 8004148:	f043 0201 	orr.w	r2, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004150:	e005      	b.n	800415e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004156:	f043 0210 	orr.w	r2, r3, #16
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	0004de01 	.word	0x0004de01

08004174 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800417c:	4853      	ldr	r0, [pc, #332]	@ (80042cc <HAL_ADCEx_InjectedStart+0x158>)
 800417e:	f7ff ff0f 	bl	8003fa0 <LL_ADC_GetMultimode>
 8004182:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff ff7e 	bl	800408a <LL_ADC_INJ_IsConversionOngoing>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 8004194:	2302      	movs	r3, #2
 8004196:	e094      	b.n	80042c2 <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041a2:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041aa:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d107      	bne.n	80041c8 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041bc:	f043 0220 	orr.w	r2, r3, #32
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e07c      	b.n	80042c2 <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_ADCEx_InjectedStart+0x62>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e075      	b.n	80042c2 <HAL_ADCEx_InjectedStart+0x14e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7ff fcdc 	bl	8003b9c <ADC_Enable>
 80041e4:	4603      	mov	r3, r0
 80041e6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d164      	bne.n	80042b8 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d006      	beq.n	8004208 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041fe:	f023 0208 	bic.w	r2, r3, #8
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	661a      	str	r2, [r3, #96]	@ 0x60
 8004206:	e002      	b.n	800420e <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004212:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a2a      	ldr	r2, [pc, #168]	@ (80042d0 <HAL_ADCEx_InjectedStart+0x15c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d002      	beq.n	8004232 <HAL_ADCEx_InjectedStart+0xbe>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	e001      	b.n	8004236 <HAL_ADCEx_InjectedStart+0xc2>
 8004232:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	4293      	cmp	r3, r2
 800423c:	d002      	beq.n	8004244 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d105      	bne.n	8004250 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004248:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2260      	movs	r2, #96	@ 0x60
 8004256:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a1a      	ldr	r2, [pc, #104]	@ (80042d0 <HAL_ADCEx_InjectedStart+0x15c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d002      	beq.n	8004270 <HAL_ADCEx_InjectedStart+0xfc>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	e001      	b.n	8004274 <HAL_ADCEx_InjectedStart+0x100>
 8004270:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	4293      	cmp	r3, r2
 800427a:	d008      	beq.n	800428e <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b06      	cmp	r3, #6
 8004286:	d002      	beq.n	800428e <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2b07      	cmp	r3, #7
 800428c:	d10d      	bne.n	80042aa <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff fe26 	bl	8003ee4 <LL_ADC_INJ_GetTrigAuto>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d110      	bne.n	80042c0 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff fedd 	bl	8004062 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80042a8:	e00a      	b.n	80042c0 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042b6:	e003      	b.n	80042c0 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	50000300 	.word	0x50000300
 80042d0:	50000100 	.word	0x50000100

080042d4 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042dc:	486e      	ldr	r0, [pc, #440]	@ (8004498 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 80042de:	f7ff fe5f 	bl	8003fa0 <LL_ADC_GetMultimode>
 80042e2:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fece 	bl	800408a <LL_ADC_INJ_IsConversionOngoing>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 80042f4:	2302      	movs	r3, #2
 80042f6:	e0ca      	b.n	800448e <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004302:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800430a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d107      	bne.n	8004328 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800431c:	f043 0220 	orr.w	r2, r3, #32
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0b2      	b.n	800448e <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_ADCEx_InjectedStart_IT+0x62>
 8004332:	2302      	movs	r3, #2
 8004334:	e0ab      	b.n	800448e <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff fc2c 	bl	8003b9c <ADC_Enable>
 8004344:	4603      	mov	r3, r0
 8004346:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004348:	7bfb      	ldrb	r3, [r7, #15]
 800434a:	2b00      	cmp	r3, #0
 800434c:	f040 809a 	bne.w	8004484 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004358:	2b00      	cmp	r3, #0
 800435a:	d006      	beq.n	800436a <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004360:	f023 0208 	bic.w	r2, r3, #8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	661a      	str	r2, [r3, #96]	@ 0x60
 8004368:	e002      	b.n	8004370 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004374:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004378:	f023 0301 	bic.w	r3, r3, #1
 800437c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a44      	ldr	r2, [pc, #272]	@ (800449c <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d002      	beq.n	8004394 <HAL_ADCEx_InjectedStart_IT+0xc0>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	e001      	b.n	8004398 <HAL_ADCEx_InjectedStart_IT+0xc4>
 8004394:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	4293      	cmp	r3, r2
 800439e:	d002      	beq.n	80043a6 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d105      	bne.n	80043b2 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043aa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2260      	movs	r2, #96	@ 0x60
 80043b8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d007      	beq.n	80043e0 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043de:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d110      	bne.n	800440a <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0220 	bic.w	r2, r2, #32
 80043f6:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004406:	605a      	str	r2, [r3, #4]
          break;
 8004408:	e010      	b.n	800442c <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004418:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0220 	orr.w	r2, r2, #32
 8004428:	605a      	str	r2, [r3, #4]
          break;
 800442a:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1a      	ldr	r2, [pc, #104]	@ (800449c <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d002      	beq.n	800443c <HAL_ADCEx_InjectedStart_IT+0x168>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	e001      	b.n	8004440 <HAL_ADCEx_InjectedStart_IT+0x16c>
 800443c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6812      	ldr	r2, [r2, #0]
 8004444:	4293      	cmp	r3, r2
 8004446:	d008      	beq.n	800445a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b06      	cmp	r3, #6
 8004452:	d002      	beq.n	800445a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2b07      	cmp	r3, #7
 8004458:	d10d      	bne.n	8004476 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff fd40 	bl	8003ee4 <LL_ADC_INJ_GetTrigAuto>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d110      	bne.n	800448c <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fdf7 	bl	8004062 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004474:	e00a      	b.n	800448c <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800447a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004482:	e003      	b.n	800448c <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800448c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	50000300 	.word	0x50000300
 800449c:	50000100 	.word	0x50000100

080044a0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b0b6      	sub	sp, #216	@ 0xd8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004500:	2300      	movs	r3, #0
 8004502:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004510:	2b01      	cmp	r3, #1
 8004512:	d102      	bne.n	800451a <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8004514:	2302      	movs	r3, #2
 8004516:	f000 bcb5 	b.w	8004e84 <HAL_ADCEx_InjectedConfigChannel+0x994>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800452e:	2b01      	cmp	r3, #1
 8004530:	d130      	bne.n	8004594 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b09      	cmp	r3, #9
 8004538:	d179      	bne.n	800462e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453e:	2b00      	cmp	r3, #0
 8004540:	d010      	beq.n	8004564 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	0e9b      	lsrs	r3, r3, #26
 8004548:	025b      	lsls	r3, r3, #9
 800454a:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004552:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8004556:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004562:	e007      	b.n	8004574 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	0e9b      	lsrs	r3, r3, #26
 800456a:	025b      	lsls	r3, r3, #9
 800456c:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8004570:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800457a:	4b84      	ldr	r3, [pc, #528]	@ (800478c <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 800457c:	4013      	ands	r3, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6812      	ldr	r2, [r2, #0]
 8004582:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004586:	430b      	orrs	r3, r1
 8004588:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004590:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004592:	e04c      	b.n	800462e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004598:	2b00      	cmp	r3, #0
 800459a:	d11d      	bne.n	80045d8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	6a1a      	ldr	r2, [r3, #32]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00d      	beq.n	80045ce <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045bc:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80045c0:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045cc:	e004      	b.n	80045d8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	0e9b      	lsrs	r3, r3, #26
 80045de:	f003 021f 	and.w	r2, r3, #31
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045fc:	1e5a      	subs	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004606:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10a      	bne.n	800462e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800461e:	4b5b      	ldr	r3, [pc, #364]	@ (800478c <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004620:	4013      	ands	r3, r2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	430b      	orrs	r3, r1
 800462c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fd29 	bl	800408a <LL_ADC_INJ_IsConversionOngoing>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d124      	bne.n	8004688 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004644:	2b00      	cmp	r3, #0
 8004646:	d112      	bne.n	800466e <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004658:	055a      	lsls	r2, r3, #21
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004660:	051b      	lsls	r3, r3, #20
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	60da      	str	r2, [r3, #12]
 800466c:	e00c      	b.n	8004688 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800467e:	055a      	lsls	r2, r3, #21
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fcd5 	bl	800403c <LL_ADC_REG_IsConversionOngoing>
 8004692:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff fcf5 	bl	800408a <LL_ADC_INJ_IsConversionOngoing>
 80046a0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f040 822e 	bne.w	8004b0a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f040 8229 	bne.w	8004b0a <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d116      	bne.n	80046f6 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d108      	bne.n	80046e4 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80046e0:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80046e2:	e01f      	b.n	8004724 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80046f2:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80046f4:	e016      	b.n	8004724 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d109      	bne.n	8004714 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004704:	f043 0220 	orr.w	r2, r3, #32
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004712:	e007      	b.n	8004724 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8004722:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800472a:	2b01      	cmp	r3, #1
 800472c:	d110      	bne.n	8004750 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004740:	430b      	orrs	r3, r1
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0202 	orr.w	r2, r2, #2
 800474c:	611a      	str	r2, [r3, #16]
 800474e:	e007      	b.n	8004760 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0202 	bic.w	r2, r2, #2
 800475e:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004768:	d112      	bne.n	8004790 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2200      	movs	r2, #0
 8004774:	4619      	mov	r1, r3
 8004776:	f7ff fbc3 	bl	8003f00 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fb9b 	bl	8003ebe <LL_ADC_SetSamplingTimeCommonConfig>
 8004788:	e011      	b.n	80047ae <HAL_ADCEx_InjectedConfigChannel+0x2be>
 800478a:	bf00      	nop
 800478c:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6818      	ldr	r0, [r3, #0]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 800479c:	461a      	mov	r2, r3
 800479e:	f7ff fbaf 	bl	8003f00 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2100      	movs	r1, #0
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fb88 	bl	8003ebe <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	08db      	lsrs	r3, r3, #3
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d022      	beq.n	8004816 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6818      	ldr	r0, [r3, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	6919      	ldr	r1, [r3, #16]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047e0:	f7ff fae2 	bl	8003da8 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6818      	ldr	r0, [r3, #0]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	6919      	ldr	r1, [r3, #16]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	461a      	mov	r2, r3
 80047f2:	f7ff fb2e 	bl	8003e52 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004802:	2b01      	cmp	r3, #1
 8004804:	d102      	bne.n	800480c <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004806:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800480a:	e000      	b.n	800480e <HAL_ADCEx_InjectedConfigChannel+0x31e>
 800480c:	2300      	movs	r3, #0
 800480e:	461a      	mov	r2, r3
 8004810:	f7ff fb3a 	bl	8003e88 <LL_ADC_SetOffsetSaturation>
 8004814:	e179      	b.n	8004b0a <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2100      	movs	r1, #0
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff fae7 	bl	8003df0 <LL_ADC_GetOffsetChannel>
 8004822:	4603      	mov	r3, r0
 8004824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10a      	bne.n	8004842 <HAL_ADCEx_InjectedConfigChannel+0x352>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2100      	movs	r1, #0
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff fadc 	bl	8003df0 <LL_ADC_GetOffsetChannel>
 8004838:	4603      	mov	r3, r0
 800483a:	0e9b      	lsrs	r3, r3, #26
 800483c:	f003 021f 	and.w	r2, r3, #31
 8004840:	e01e      	b.n	8004880 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2100      	movs	r1, #0
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fad1 	bl	8003df0 <LL_ADC_GetOffsetChannel>
 800484e:	4603      	mov	r3, r0
 8004850:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004854:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004858:	fa93 f3a3 	rbit	r3, r3
 800485c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004860:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004864:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004868:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8004870:	2320      	movs	r3, #32
 8004872:	e004      	b.n	800487e <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004874:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004878:	fab3 f383 	clz	r3, r3
 800487c:	b2db      	uxtb	r3, r3
 800487e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004888:	2b00      	cmp	r3, #0
 800488a:	d105      	bne.n	8004898 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	0e9b      	lsrs	r3, r3, #26
 8004892:	f003 031f 	and.w	r3, r3, #31
 8004896:	e018      	b.n	80048ca <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048a4:	fa93 f3a3 	rbit	r3, r3
 80048a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80048ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80048b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80048bc:	2320      	movs	r3, #32
 80048be:	e004      	b.n	80048ca <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80048c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048c4:	fab3 f383 	clz	r3, r3
 80048c8:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d106      	bne.n	80048dc <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2200      	movs	r2, #0
 80048d4:	2100      	movs	r1, #0
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff faa0 	bl	8003e1c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2101      	movs	r1, #1
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fa84 	bl	8003df0 <LL_ADC_GetOffsetChannel>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <HAL_ADCEx_InjectedConfigChannel+0x418>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2101      	movs	r1, #1
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff fa79 	bl	8003df0 <LL_ADC_GetOffsetChannel>
 80048fe:	4603      	mov	r3, r0
 8004900:	0e9b      	lsrs	r3, r3, #26
 8004902:	f003 021f 	and.w	r2, r3, #31
 8004906:	e01e      	b.n	8004946 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2101      	movs	r1, #1
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff fa6e 	bl	8003df0 <LL_ADC_GetOffsetChannel>
 8004914:	4603      	mov	r3, r0
 8004916:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800491e:	fa93 f3a3 	rbit	r3, r3
 8004922:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004926:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800492a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800492e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004936:	2320      	movs	r3, #32
 8004938:	e004      	b.n	8004944 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 800493a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800493e:	fab3 f383 	clz	r3, r3
 8004942:	b2db      	uxtb	r3, r3
 8004944:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800494e:	2b00      	cmp	r3, #0
 8004950:	d105      	bne.n	800495e <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	0e9b      	lsrs	r3, r3, #26
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	e018      	b.n	8004990 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004966:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800496a:	fa93 f3a3 	rbit	r3, r3
 800496e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004972:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004976:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800497a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8004982:	2320      	movs	r3, #32
 8004984:	e004      	b.n	8004990 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8004986:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800498a:	fab3 f383 	clz	r3, r3
 800498e:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004990:	429a      	cmp	r2, r3
 8004992:	d106      	bne.n	80049a2 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2200      	movs	r2, #0
 800499a:	2101      	movs	r1, #1
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff fa3d 	bl	8003e1c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2102      	movs	r1, #2
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff fa21 	bl	8003df0 <LL_ADC_GetOffsetChannel>
 80049ae:	4603      	mov	r3, r0
 80049b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2102      	movs	r1, #2
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fa16 	bl	8003df0 <LL_ADC_GetOffsetChannel>
 80049c4:	4603      	mov	r3, r0
 80049c6:	0e9b      	lsrs	r3, r3, #26
 80049c8:	f003 021f 	and.w	r2, r3, #31
 80049cc:	e01e      	b.n	8004a0c <HAL_ADCEx_InjectedConfigChannel+0x51c>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2102      	movs	r1, #2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff fa0b 	bl	8003df0 <LL_ADC_GetOffsetChannel>
 80049da:	4603      	mov	r3, r0
 80049dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80049e4:	fa93 f3a3 	rbit	r3, r3
 80049e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80049ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80049f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80049fc:	2320      	movs	r3, #32
 80049fe:	e004      	b.n	8004a0a <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004a00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a04:	fab3 f383 	clz	r3, r3
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d105      	bne.n	8004a24 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	0e9b      	lsrs	r3, r3, #26
 8004a1e:	f003 031f 	and.w	r3, r3, #31
 8004a22:	e014      	b.n	8004a4e <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a2c:	fa93 f3a3 	rbit	r3, r3
 8004a30:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004a32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004a40:	2320      	movs	r3, #32
 8004a42:	e004      	b.n	8004a4e <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004a44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a48:	fab3 f383 	clz	r3, r3
 8004a4c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d106      	bne.n	8004a60 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2200      	movs	r2, #0
 8004a58:	2102      	movs	r1, #2
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff f9de 	bl	8003e1c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2103      	movs	r1, #3
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff f9c2 	bl	8003df0 <LL_ADC_GetOffsetChannel>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10a      	bne.n	8004a8c <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2103      	movs	r1, #3
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff f9b7 	bl	8003df0 <LL_ADC_GetOffsetChannel>
 8004a82:	4603      	mov	r3, r0
 8004a84:	0e9b      	lsrs	r3, r3, #26
 8004a86:	f003 021f 	and.w	r2, r3, #31
 8004a8a:	e017      	b.n	8004abc <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2103      	movs	r1, #3
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff f9ac 	bl	8003df0 <LL_ADC_GetOffsetChannel>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a9e:	fa93 f3a3 	rbit	r3, r3
 8004aa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004aa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aa6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004aa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004aae:	2320      	movs	r3, #32
 8004ab0:	e003      	b.n	8004aba <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004ab2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ab4:	fab3 f383 	clz	r3, r3
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d105      	bne.n	8004ad4 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	0e9b      	lsrs	r3, r3, #26
 8004ace:	f003 031f 	and.w	r3, r3, #31
 8004ad2:	e011      	b.n	8004af8 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ada:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004adc:	fa93 f3a3 	rbit	r3, r3
 8004ae0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004ae2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ae4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004ae6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004aec:	2320      	movs	r3, #32
 8004aee:	e003      	b.n	8004af8 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004af0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004af2:	fab3 f383 	clz	r3, r3
 8004af6:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d106      	bne.n	8004b0a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2200      	movs	r2, #0
 8004b02:	2103      	movs	r1, #3
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff f989 	bl	8003e1c <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff fa54 	bl	8003fbc <LL_ADC_IsEnabled>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f040 8140 	bne.w	8004d9c <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6818      	ldr	r0, [r3, #0]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	6819      	ldr	r1, [r3, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f7ff fa15 	bl	8003f58 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	4a8f      	ldr	r2, [pc, #572]	@ (8004d70 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	f040 8131 	bne.w	8004d9c <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10b      	bne.n	8004b62 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	0e9b      	lsrs	r3, r3, #26
 8004b50:	3301      	adds	r3, #1
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	2b09      	cmp	r3, #9
 8004b58:	bf94      	ite	ls
 8004b5a:	2301      	movls	r3, #1
 8004b5c:	2300      	movhi	r3, #0
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	e019      	b.n	8004b96 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b6a:	fa93 f3a3 	rbit	r3, r3
 8004b6e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b72:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004b74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004b7a:	2320      	movs	r3, #32
 8004b7c:	e003      	b.n	8004b86 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004b7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b80:	fab3 f383 	clz	r3, r3
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	3301      	adds	r3, #1
 8004b88:	f003 031f 	and.w	r3, r3, #31
 8004b8c:	2b09      	cmp	r3, #9
 8004b8e:	bf94      	ite	ls
 8004b90:	2301      	movls	r3, #1
 8004b92:	2300      	movhi	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d079      	beq.n	8004c8e <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d107      	bne.n	8004bb6 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	0e9b      	lsrs	r3, r3, #26
 8004bac:	3301      	adds	r3, #1
 8004bae:	069b      	lsls	r3, r3, #26
 8004bb0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004bb4:	e015      	b.n	8004be2 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bbe:	fa93 f3a3 	rbit	r3, r3
 8004bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004bc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bc6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004bc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004bce:	2320      	movs	r3, #32
 8004bd0:	e003      	b.n	8004bda <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004bd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bd4:	fab3 f383 	clz	r3, r3
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	3301      	adds	r3, #1
 8004bdc:	069b      	lsls	r3, r3, #26
 8004bde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d109      	bne.n	8004c02 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	0e9b      	lsrs	r3, r3, #26
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	f003 031f 	and.w	r3, r3, #31
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004c00:	e017      	b.n	8004c32 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c0a:	fa93 f3a3 	rbit	r3, r3
 8004c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004c10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c12:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004c14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004c1a:	2320      	movs	r3, #32
 8004c1c:	e003      	b.n	8004c26 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8004c1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c20:	fab3 f383 	clz	r3, r3
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	3301      	adds	r3, #1
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c32:	ea42 0103 	orr.w	r1, r2, r3
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	0e9b      	lsrs	r3, r3, #26
 8004c48:	3301      	adds	r3, #1
 8004c4a:	f003 021f 	and.w	r2, r3, #31
 8004c4e:	4613      	mov	r3, r2
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	4413      	add	r3, r2
 8004c54:	051b      	lsls	r3, r3, #20
 8004c56:	e018      	b.n	8004c8a <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c60:	fa93 f3a3 	rbit	r3, r3
 8004c64:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c68:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004c70:	2320      	movs	r3, #32
 8004c72:	e003      	b.n	8004c7c <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c76:	fab3 f383 	clz	r3, r3
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	f003 021f 	and.w	r2, r3, #31
 8004c82:	4613      	mov	r3, r2
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	4413      	add	r3, r2
 8004c88:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	e081      	b.n	8004d92 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d107      	bne.n	8004caa <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	0e9b      	lsrs	r3, r3, #26
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	069b      	lsls	r3, r3, #26
 8004ca4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ca8:	e015      	b.n	8004cd6 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb2:	fa93 f3a3 	rbit	r3, r3
 8004cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004cc2:	2320      	movs	r3, #32
 8004cc4:	e003      	b.n	8004cce <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc8:	fab3 f383 	clz	r3, r3
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	3301      	adds	r3, #1
 8004cd0:	069b      	lsls	r3, r3, #26
 8004cd2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d109      	bne.n	8004cf6 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	0e9b      	lsrs	r3, r3, #26
 8004ce8:	3301      	adds	r3, #1
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	2101      	movs	r1, #1
 8004cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf4:	e017      	b.n	8004d26 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	fa93 f3a3 	rbit	r3, r3
 8004d02:	61bb      	str	r3, [r7, #24]
  return result;
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004d0e:	2320      	movs	r3, #32
 8004d10:	e003      	b.n	8004d1a <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	fab3 f383 	clz	r3, r3
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	f003 031f 	and.w	r3, r3, #31
 8004d20:	2101      	movs	r1, #1
 8004d22:	fa01 f303 	lsl.w	r3, r1, r3
 8004d26:	ea42 0103 	orr.w	r1, r2, r3
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10d      	bne.n	8004d52 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	0e9b      	lsrs	r3, r3, #26
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	f003 021f 	and.w	r2, r3, #31
 8004d42:	4613      	mov	r3, r2
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	4413      	add	r3, r2
 8004d48:	3b1e      	subs	r3, #30
 8004d4a:	051b      	lsls	r3, r3, #20
 8004d4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d50:	e01e      	b.n	8004d90 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	fa93 f3a3 	rbit	r3, r3
 8004d5e:	60fb      	str	r3, [r7, #12]
  return result;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d104      	bne.n	8004d74 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8004d6a:	2320      	movs	r3, #32
 8004d6c:	e006      	b.n	8004d7c <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8004d6e:	bf00      	nop
 8004d70:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	fab3 f383 	clz	r3, r3
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	f003 021f 	and.w	r2, r3, #31
 8004d82:	4613      	mov	r3, r2
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	4413      	add	r3, r2
 8004d88:	3b1e      	subs	r3, #30
 8004d8a:	051b      	lsls	r3, r3, #20
 8004d8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d90:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d96:	4619      	mov	r1, r3
 8004d98:	f7ff f8b2 	bl	8003f00 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	4b3a      	ldr	r3, [pc, #232]	@ (8004e8c <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d067      	beq.n	8004e78 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004da8:	4839      	ldr	r0, [pc, #228]	@ (8004e90 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004daa:	f7fe ffef 	bl	8003d8c <LL_ADC_GetCommonPathInternalCh>
 8004dae:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a37      	ldr	r2, [pc, #220]	@ (8004e94 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d004      	beq.n	8004dc6 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a35      	ldr	r2, [pc, #212]	@ (8004e98 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d127      	bne.n	8004e16 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004dc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004dca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d121      	bne.n	8004e16 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dda:	d14d      	bne.n	8004e78 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ddc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004de0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004de4:	4619      	mov	r1, r3
 8004de6:	482a      	ldr	r0, [pc, #168]	@ (8004e90 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004de8:	f7fe ffbd 	bl	8003d66 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004dec:	4b2b      	ldr	r3, [pc, #172]	@ (8004e9c <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	099b      	lsrs	r3, r3, #6
 8004df2:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea0 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8004df4:	fba2 2303 	umull	r2, r3, r2, r3
 8004df8:	099a      	lsrs	r2, r3, #6
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004e04:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004e06:	e002      	b.n	8004e0e <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1f9      	bne.n	8004e08 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e14:	e030      	b.n	8004e78 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a22      	ldr	r2, [pc, #136]	@ (8004ea4 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d113      	bne.n	8004e48 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10d      	bne.n	8004e48 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea8 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d020      	beq.n	8004e78 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4813      	ldr	r0, [pc, #76]	@ (8004e90 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004e42:	f7fe ff90 	bl	8003d66 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e46:	e017      	b.n	8004e78 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a17      	ldr	r2, [pc, #92]	@ (8004eac <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d112      	bne.n	8004e78 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10c      	bne.n	8004e78 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a11      	ldr	r2, [pc, #68]	@ (8004ea8 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d007      	beq.n	8004e78 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e70:	4619      	mov	r1, r3
 8004e72:	4807      	ldr	r0, [pc, #28]	@ (8004e90 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004e74:	f7fe ff77 	bl	8003d66 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e80:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	37d8      	adds	r7, #216	@ 0xd8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	80080000 	.word	0x80080000
 8004e90:	50000300 	.word	0x50000300
 8004e94:	c3210000 	.word	0xc3210000
 8004e98:	90c00010 	.word	0x90c00010
 8004e9c:	20000000 	.word	0x20000000
 8004ea0:	053e2d63 	.word	0x053e2d63
 8004ea4:	c7520000 	.word	0xc7520000
 8004ea8:	50000100 	.word	0x50000100
 8004eac:	cb840000 	.word	0xcb840000

08004eb0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004eb0:	b590      	push	{r4, r7, lr}
 8004eb2:	b0a1      	sub	sp, #132	@ 0x84
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e08b      	b.n	8004fe6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004eda:	2300      	movs	r3, #0
 8004edc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ee6:	d102      	bne.n	8004eee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004ee8:	4b41      	ldr	r3, [pc, #260]	@ (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	e001      	b.n	8004ef2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10b      	bne.n	8004f10 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004efc:	f043 0220 	orr.w	r2, r3, #32
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e06a      	b.n	8004fe6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff f892 	bl	800403c <LL_ADC_REG_IsConversionOngoing>
 8004f18:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff f88c 	bl	800403c <LL_ADC_REG_IsConversionOngoing>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d14c      	bne.n	8004fc4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004f2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d149      	bne.n	8004fc4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f30:	4b30      	ldr	r3, [pc, #192]	@ (8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004f32:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d028      	beq.n	8004f8e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004f3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	6859      	ldr	r1, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f4e:	035b      	lsls	r3, r3, #13
 8004f50:	430b      	orrs	r3, r1
 8004f52:	431a      	orrs	r2, r3
 8004f54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f56:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f58:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004f5c:	f7ff f82e 	bl	8003fbc <LL_ADC_IsEnabled>
 8004f60:	4604      	mov	r4, r0
 8004f62:	4823      	ldr	r0, [pc, #140]	@ (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004f64:	f7ff f82a 	bl	8003fbc <LL_ADC_IsEnabled>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	4323      	orrs	r3, r4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d133      	bne.n	8004fd8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004f78:	f023 030f 	bic.w	r3, r3, #15
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	6811      	ldr	r1, [r2, #0]
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	6892      	ldr	r2, [r2, #8]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	431a      	orrs	r2, r3
 8004f88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f8a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f8c:	e024      	b.n	8004fd8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004f8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f98:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f9a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004f9e:	f7ff f80d 	bl	8003fbc <LL_ADC_IsEnabled>
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	4812      	ldr	r0, [pc, #72]	@ (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004fa6:	f7ff f809 	bl	8003fbc <LL_ADC_IsEnabled>
 8004faa:	4603      	mov	r3, r0
 8004fac:	4323      	orrs	r3, r4
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d112      	bne.n	8004fd8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004fb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004fba:	f023 030f 	bic.w	r3, r3, #15
 8004fbe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004fc0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fc2:	e009      	b.n	8004fd8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc8:	f043 0220 	orr.w	r2, r3, #32
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004fd6:	e000      	b.n	8004fda <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004fe2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3784      	adds	r7, #132	@ 0x84
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd90      	pop	{r4, r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	50000100 	.word	0x50000100
 8004ff4:	50000300 	.word	0x50000300

08004ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005008:	4b0c      	ldr	r3, [pc, #48]	@ (800503c <__NVIC_SetPriorityGrouping+0x44>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005014:	4013      	ands	r3, r2
 8005016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005020:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005024:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800502a:	4a04      	ldr	r2, [pc, #16]	@ (800503c <__NVIC_SetPriorityGrouping+0x44>)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	60d3      	str	r3, [r2, #12]
}
 8005030:	bf00      	nop
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	e000ed00 	.word	0xe000ed00

08005040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005044:	4b04      	ldr	r3, [pc, #16]	@ (8005058 <__NVIC_GetPriorityGrouping+0x18>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	0a1b      	lsrs	r3, r3, #8
 800504a:	f003 0307 	and.w	r3, r3, #7
}
 800504e:	4618      	mov	r0, r3
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	e000ed00 	.word	0xe000ed00

0800505c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	4603      	mov	r3, r0
 8005064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506a:	2b00      	cmp	r3, #0
 800506c:	db0b      	blt.n	8005086 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	f003 021f 	and.w	r2, r3, #31
 8005074:	4907      	ldr	r1, [pc, #28]	@ (8005094 <__NVIC_EnableIRQ+0x38>)
 8005076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	2001      	movs	r0, #1
 800507e:	fa00 f202 	lsl.w	r2, r0, r2
 8005082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	e000e100 	.word	0xe000e100

08005098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	6039      	str	r1, [r7, #0]
 80050a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	db0a      	blt.n	80050c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	490c      	ldr	r1, [pc, #48]	@ (80050e4 <__NVIC_SetPriority+0x4c>)
 80050b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b6:	0112      	lsls	r2, r2, #4
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	440b      	add	r3, r1
 80050bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050c0:	e00a      	b.n	80050d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	4908      	ldr	r1, [pc, #32]	@ (80050e8 <__NVIC_SetPriority+0x50>)
 80050c8:	79fb      	ldrb	r3, [r7, #7]
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	3b04      	subs	r3, #4
 80050d0:	0112      	lsls	r2, r2, #4
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	440b      	add	r3, r1
 80050d6:	761a      	strb	r2, [r3, #24]
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	e000e100 	.word	0xe000e100
 80050e8:	e000ed00 	.word	0xe000ed00

080050ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b089      	sub	sp, #36	@ 0x24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f1c3 0307 	rsb	r3, r3, #7
 8005106:	2b04      	cmp	r3, #4
 8005108:	bf28      	it	cs
 800510a:	2304      	movcs	r3, #4
 800510c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	3304      	adds	r3, #4
 8005112:	2b06      	cmp	r3, #6
 8005114:	d902      	bls.n	800511c <NVIC_EncodePriority+0x30>
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	3b03      	subs	r3, #3
 800511a:	e000      	b.n	800511e <NVIC_EncodePriority+0x32>
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005120:	f04f 32ff 	mov.w	r2, #4294967295
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	43da      	mvns	r2, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	401a      	ands	r2, r3
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005134:	f04f 31ff 	mov.w	r1, #4294967295
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	fa01 f303 	lsl.w	r3, r1, r3
 800513e:	43d9      	mvns	r1, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005144:	4313      	orrs	r3, r2
         );
}
 8005146:	4618      	mov	r0, r3
 8005148:	3724      	adds	r7, #36	@ 0x24
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
	...

08005154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3b01      	subs	r3, #1
 8005160:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005164:	d301      	bcc.n	800516a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005166:	2301      	movs	r3, #1
 8005168:	e00f      	b.n	800518a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800516a:	4a0a      	ldr	r2, [pc, #40]	@ (8005194 <SysTick_Config+0x40>)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3b01      	subs	r3, #1
 8005170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005172:	210f      	movs	r1, #15
 8005174:	f04f 30ff 	mov.w	r0, #4294967295
 8005178:	f7ff ff8e 	bl	8005098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800517c:	4b05      	ldr	r3, [pc, #20]	@ (8005194 <SysTick_Config+0x40>)
 800517e:	2200      	movs	r2, #0
 8005180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005182:	4b04      	ldr	r3, [pc, #16]	@ (8005194 <SysTick_Config+0x40>)
 8005184:	2207      	movs	r2, #7
 8005186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	e000e010 	.word	0xe000e010

08005198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff ff29 	bl	8004ff8 <__NVIC_SetPriorityGrouping>
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b086      	sub	sp, #24
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	4603      	mov	r3, r0
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
 80051ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80051bc:	f7ff ff40 	bl	8005040 <__NVIC_GetPriorityGrouping>
 80051c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	68b9      	ldr	r1, [r7, #8]
 80051c6:	6978      	ldr	r0, [r7, #20]
 80051c8:	f7ff ff90 	bl	80050ec <NVIC_EncodePriority>
 80051cc:	4602      	mov	r2, r0
 80051ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051d2:	4611      	mov	r1, r2
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff ff5f 	bl	8005098 <__NVIC_SetPriority>
}
 80051da:	bf00      	nop
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	4603      	mov	r3, r0
 80051ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff ff33 	bl	800505c <__NVIC_EnableIRQ>
}
 80051f6:	bf00      	nop
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b082      	sub	sp, #8
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff ffa4 	bl	8005154 <SysTick_Config>
 800520c:	4603      	mov	r3, r0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b082      	sub	sp, #8
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e014      	b.n	8005252 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	791b      	ldrb	r3, [r3, #4]
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d105      	bne.n	800523e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7fc f941 	bl	80014c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08a      	sub	sp, #40	@ 0x28
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <HAL_DAC_ConfigChannel+0x1c>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e19e      	b.n	80055ba <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	795b      	ldrb	r3, [r3, #5]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_DAC_ConfigChannel+0x2c>
 8005284:	2302      	movs	r3, #2
 8005286:	e198      	b.n	80055ba <HAL_DAC_ConfigChannel+0x35e>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2202      	movs	r2, #2
 8005292:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b04      	cmp	r3, #4
 800529a:	d17a      	bne.n	8005392 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800529c:	f7fd fa52 	bl	8002744 <HAL_GetTick>
 80052a0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d13d      	bne.n	8005324 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80052a8:	e018      	b.n	80052dc <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80052aa:	f7fd fa4b 	bl	8002744 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d911      	bls.n	80052dc <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f043 0208 	orr.w	r2, r3, #8
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2203      	movs	r2, #3
 80052d6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e16e      	b.n	80055ba <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1df      	bne.n	80052aa <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80052f4:	e020      	b.n	8005338 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80052f6:	f7fd fa25 	bl	8002744 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b01      	cmp	r3, #1
 8005302:	d90f      	bls.n	8005324 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800530a:	2b00      	cmp	r3, #0
 800530c:	da0a      	bge.n	8005324 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f043 0208 	orr.w	r2, r3, #8
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2203      	movs	r2, #3
 800531e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e14a      	b.n	80055ba <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800532a:	2b00      	cmp	r3, #0
 800532c:	dbe3      	blt.n	80052f6 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005336:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005348:	fa01 f303 	lsl.w	r3, r1, r3
 800534c:	43db      	mvns	r3, r3
 800534e:	ea02 0103 	and.w	r1, r2, r3
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	409a      	lsls	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f003 0310 	and.w	r3, r3, #16
 8005372:	21ff      	movs	r1, #255	@ 0xff
 8005374:	fa01 f303 	lsl.w	r3, r1, r3
 8005378:	43db      	mvns	r3, r3
 800537a:	ea02 0103 	and.w	r1, r2, r3
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	409a      	lsls	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d11d      	bne.n	80053d6 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f003 0310 	and.w	r3, r3, #16
 80053a8:	221f      	movs	r2, #31
 80053aa:	fa02 f303 	lsl.w	r3, r2, r3
 80053ae:	43db      	mvns	r3, r3
 80053b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b2:	4013      	ands	r3, r2
 80053b4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	fa02 f303 	lsl.w	r3, r2, r3
 80053c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ca:	4313      	orrs	r3, r2
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2207      	movs	r2, #7
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	43db      	mvns	r3, r3
 80053ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ee:	4013      	ands	r3, r2
 80053f0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d102      	bne.n	8005400 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	623b      	str	r3, [r7, #32]
 80053fe:	e00f      	b.n	8005420 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	2b02      	cmp	r3, #2
 8005406:	d102      	bne.n	800540e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005408:	2301      	movs	r3, #1
 800540a:	623b      	str	r3, [r7, #32]
 800540c:	e008      	b.n	8005420 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d102      	bne.n	800541c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005416:	2301      	movs	r3, #1
 8005418:	623b      	str	r3, [r7, #32]
 800541a:	e001      	b.n	8005420 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800541c:	2300      	movs	r3, #0
 800541e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	6a3a      	ldr	r2, [r7, #32]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f003 0310 	and.w	r3, r3, #16
 8005436:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	43db      	mvns	r3, r3
 8005440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005442:	4013      	ands	r3, r2
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	791b      	ldrb	r3, [r3, #4]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d102      	bne.n	8005454 <HAL_DAC_ConfigChannel+0x1f8>
 800544e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005452:	e000      	b.n	8005456 <HAL_DAC_ConfigChannel+0x1fa>
 8005454:	2300      	movs	r3, #0
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005466:	fa02 f303 	lsl.w	r3, r2, r3
 800546a:	43db      	mvns	r3, r3
 800546c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800546e:	4013      	ands	r3, r2
 8005470:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	795b      	ldrb	r3, [r3, #5]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d102      	bne.n	8005480 <HAL_DAC_ConfigChannel+0x224>
 800547a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800547e:	e000      	b.n	8005482 <HAL_DAC_ConfigChannel+0x226>
 8005480:	2300      	movs	r3, #0
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800548e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d114      	bne.n	80054c2 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005498:	f001 fae0 	bl	8006a5c <HAL_RCC_GetHCLKFreq>
 800549c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	4a48      	ldr	r2, [pc, #288]	@ (80055c4 <HAL_DAC_ConfigChannel+0x368>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d904      	bls.n	80054b0 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80054a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ae:	e00f      	b.n	80054d0 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	4a45      	ldr	r2, [pc, #276]	@ (80055c8 <HAL_DAC_ConfigChannel+0x36c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d90a      	bls.n	80054ce <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80054be:	627b      	str	r3, [r7, #36]	@ 0x24
 80054c0:	e006      	b.n	80054d0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c8:	4313      	orrs	r3, r2
 80054ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80054cc:	e000      	b.n	80054d0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80054ce:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054de:	4313      	orrs	r3, r2
 80054e0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6819      	ldr	r1, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80054fa:	fa02 f303 	lsl.w	r3, r2, r3
 80054fe:	43da      	mvns	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	400a      	ands	r2, r1
 8005506:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	43db      	mvns	r3, r3
 8005520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005522:	4013      	ands	r3, r2
 8005524:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800553a:	4313      	orrs	r3, r2
 800553c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005544:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6819      	ldr	r1, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	22c0      	movs	r2, #192	@ 0xc0
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	43da      	mvns	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	400a      	ands	r2, r1
 8005560:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	089b      	lsrs	r3, r3, #2
 8005568:	f003 030f 	and.w	r3, r3, #15
 800556c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	089b      	lsrs	r3, r3, #2
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005590:	fa01 f303 	lsl.w	r3, r1, r3
 8005594:	43db      	mvns	r3, r3
 8005596:	ea02 0103 	and.w	r1, r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f003 0310 	and.w	r3, r3, #16
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	409a      	lsls	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2201      	movs	r2, #1
 80055b0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80055b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3728      	adds	r7, #40	@ 0x28
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	09896800 	.word	0x09896800
 80055c8:	04c4b400 	.word	0x04c4b400

080055cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e08d      	b.n	80056fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	4b47      	ldr	r3, [pc, #284]	@ (8005704 <HAL_DMA_Init+0x138>)
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d80f      	bhi.n	800560a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	4b45      	ldr	r3, [pc, #276]	@ (8005708 <HAL_DMA_Init+0x13c>)
 80055f2:	4413      	add	r3, r2
 80055f4:	4a45      	ldr	r2, [pc, #276]	@ (800570c <HAL_DMA_Init+0x140>)
 80055f6:	fba2 2303 	umull	r2, r3, r2, r3
 80055fa:	091b      	lsrs	r3, r3, #4
 80055fc:	009a      	lsls	r2, r3, #2
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a42      	ldr	r2, [pc, #264]	@ (8005710 <HAL_DMA_Init+0x144>)
 8005606:	641a      	str	r2, [r3, #64]	@ 0x40
 8005608:	e00e      	b.n	8005628 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	4b40      	ldr	r3, [pc, #256]	@ (8005714 <HAL_DMA_Init+0x148>)
 8005612:	4413      	add	r3, r2
 8005614:	4a3d      	ldr	r2, [pc, #244]	@ (800570c <HAL_DMA_Init+0x140>)
 8005616:	fba2 2303 	umull	r2, r3, r2, r3
 800561a:	091b      	lsrs	r3, r3, #4
 800561c:	009a      	lsls	r2, r3, #2
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a3c      	ldr	r2, [pc, #240]	@ (8005718 <HAL_DMA_Init+0x14c>)
 8005626:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800563e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005642:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800564c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005658:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005664:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fa76 	bl	8005b6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005688:	d102      	bne.n	8005690 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d010      	beq.n	80056d0 <HAL_DMA_Init+0x104>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d80c      	bhi.n	80056d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fa96 	bl	8005be8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80056cc:	605a      	str	r2, [r3, #4]
 80056ce:	e008      	b.n	80056e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40020407 	.word	0x40020407
 8005708:	bffdfff8 	.word	0xbffdfff8
 800570c:	cccccccd 	.word	0xcccccccd
 8005710:	40020000 	.word	0x40020000
 8005714:	bffdfbf8 	.word	0xbffdfbf8
 8005718:	40020400 	.word	0x40020400

0800571c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_DMA_Start_IT+0x20>
 8005738:	2302      	movs	r3, #2
 800573a:	e066      	b.n	800580a <HAL_DMA_Start_IT+0xee>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b01      	cmp	r3, #1
 800574e:	d155      	bne.n	80057fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0201 	bic.w	r2, r2, #1
 800576c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 f9bb 	bl	8005af0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577e:	2b00      	cmp	r3, #0
 8005780:	d008      	beq.n	8005794 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f042 020e 	orr.w	r2, r2, #14
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	e00f      	b.n	80057b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0204 	bic.w	r2, r2, #4
 80057a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 020a 	orr.w	r2, r2, #10
 80057b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d007      	beq.n	80057d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d007      	beq.n	80057ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0201 	orr.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	e005      	b.n	8005808 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005804:	2302      	movs	r3, #2
 8005806:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005808:	7dfb      	ldrb	r3, [r7, #23]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005812:	b480      	push	{r7}
 8005814:	b085      	sub	sp, #20
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d005      	beq.n	8005836 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2204      	movs	r2, #4
 800582e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
 8005834:	e037      	b.n	80058a6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 020e 	bic.w	r2, r2, #14
 8005844:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005850:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005854:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0201 	bic.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586a:	f003 021f 	and.w	r2, r3, #31
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005872:	2101      	movs	r1, #1
 8005874:	fa01 f202 	lsl.w	r2, r1, r2
 8005878:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005882:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00c      	beq.n	80058a6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005896:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800589a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80058a4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058cc:	2300      	movs	r3, #0
 80058ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d00d      	beq.n	80058f8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2204      	movs	r2, #4
 80058e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	73fb      	strb	r3, [r7, #15]
 80058f6:	e047      	b.n	8005988 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 020e 	bic.w	r2, r2, #14
 8005906:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005922:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005926:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592c:	f003 021f 	and.w	r2, r3, #31
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005934:	2101      	movs	r1, #1
 8005936:	fa01 f202 	lsl.w	r2, r1, r2
 800593a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005944:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00c      	beq.n	8005968 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005958:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800595c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005966:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	4798      	blx	r3
    }
  }
  return status;
 8005988:	7bfb      	ldrb	r3, [r7, #15]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ae:	f003 031f 	and.w	r3, r3, #31
 80059b2:	2204      	movs	r2, #4
 80059b4:	409a      	lsls	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4013      	ands	r3, r2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d026      	beq.n	8005a0c <HAL_DMA_IRQHandler+0x7a>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d021      	beq.n	8005a0c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0320 	and.w	r3, r3, #32
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d107      	bne.n	80059e6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0204 	bic.w	r2, r2, #4
 80059e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ea:	f003 021f 	and.w	r2, r3, #31
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f2:	2104      	movs	r1, #4
 80059f4:	fa01 f202 	lsl.w	r2, r1, r2
 80059f8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d071      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005a0a:	e06c      	b.n	8005ae6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a10:	f003 031f 	and.w	r3, r3, #31
 8005a14:	2202      	movs	r2, #2
 8005a16:	409a      	lsls	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d02e      	beq.n	8005a7e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d029      	beq.n	8005a7e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0320 	and.w	r3, r3, #32
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10b      	bne.n	8005a50 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 020a 	bic.w	r2, r2, #10
 8005a46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a54:	f003 021f 	and.w	r2, r3, #31
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5c:	2102      	movs	r1, #2
 8005a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8005a62:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d038      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005a7c:	e033      	b.n	8005ae6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a82:	f003 031f 	and.w	r3, r3, #31
 8005a86:	2208      	movs	r2, #8
 8005a88:	409a      	lsls	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d02a      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f003 0308 	and.w	r3, r3, #8
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d025      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 020e 	bic.w	r2, r2, #14
 8005aaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab0:	f003 021f 	and.w	r2, r3, #31
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab8:	2101      	movs	r1, #1
 8005aba:	fa01 f202 	lsl.w	r2, r1, r2
 8005abe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d004      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005ae6:	bf00      	nop
 8005ae8:	bf00      	nop
}
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005b06:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d004      	beq.n	8005b1a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005b18:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1e:	f003 021f 	and.w	r2, r3, #31
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b26:	2101      	movs	r1, #1
 8005b28:	fa01 f202 	lsl.w	r2, r1, r2
 8005b2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	2b10      	cmp	r3, #16
 8005b3c:	d108      	bne.n	8005b50 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005b4e:	e007      	b.n	8005b60 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	60da      	str	r2, [r3, #12]
}
 8005b60:	bf00      	nop
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	4b16      	ldr	r3, [pc, #88]	@ (8005bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d802      	bhi.n	8005b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005b80:	4b15      	ldr	r3, [pc, #84]	@ (8005bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	e001      	b.n	8005b8a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005b86:	4b15      	ldr	r3, [pc, #84]	@ (8005bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005b88:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	3b08      	subs	r3, #8
 8005b96:	4a12      	ldr	r2, [pc, #72]	@ (8005be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005b98:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9c:	091b      	lsrs	r3, r3, #4
 8005b9e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ba4:	089b      	lsrs	r3, r3, #2
 8005ba6:	009a      	lsls	r2, r3, #2
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4413      	add	r3, r2
 8005bac:	461a      	mov	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8005be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005bb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f003 031f 	and.w	r3, r3, #31
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	409a      	lsls	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005bc6:	bf00      	nop
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	40020407 	.word	0x40020407
 8005bd8:	40020800 	.word	0x40020800
 8005bdc:	40020820 	.word	0x40020820
 8005be0:	cccccccd 	.word	0xcccccccd
 8005be4:	40020880 	.word	0x40020880

08005be8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8005c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	461a      	mov	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a08      	ldr	r2, [pc, #32]	@ (8005c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005c0a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	f003 031f 	and.w	r3, r3, #31
 8005c14:	2201      	movs	r2, #1
 8005c16:	409a      	lsls	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005c1c:	bf00      	nop
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	1000823f 	.word	0x1000823f
 8005c2c:	40020940 	.word	0x40020940

08005c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c3e:	e15a      	b.n	8005ef6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	2101      	movs	r1, #1
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 814c 	beq.w	8005ef0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f003 0303 	and.w	r3, r3, #3
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d005      	beq.n	8005c70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d130      	bne.n	8005cd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	2203      	movs	r2, #3
 8005c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c80:	43db      	mvns	r3, r3
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4013      	ands	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	68da      	ldr	r2, [r3, #12]
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	fa02 f303 	lsl.w	r3, r2, r3
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cae:	43db      	mvns	r3, r3
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	091b      	lsrs	r3, r3, #4
 8005cbc:	f003 0201 	and.w	r2, r3, #1
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d017      	beq.n	8005d0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	2203      	movs	r2, #3
 8005cea:	fa02 f303 	lsl.w	r3, r2, r3
 8005cee:	43db      	mvns	r3, r3
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d123      	bne.n	8005d62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	08da      	lsrs	r2, r3, #3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3208      	adds	r2, #8
 8005d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	220f      	movs	r2, #15
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	43db      	mvns	r3, r3
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	691a      	ldr	r2, [r3, #16]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	08da      	lsrs	r2, r3, #3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3208      	adds	r2, #8
 8005d5c:	6939      	ldr	r1, [r7, #16]
 8005d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	2203      	movs	r2, #3
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	43db      	mvns	r3, r3
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4013      	ands	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f003 0203 	and.w	r2, r3, #3
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 80a6 	beq.w	8005ef0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005da4:	4b5b      	ldr	r3, [pc, #364]	@ (8005f14 <HAL_GPIO_Init+0x2e4>)
 8005da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005da8:	4a5a      	ldr	r2, [pc, #360]	@ (8005f14 <HAL_GPIO_Init+0x2e4>)
 8005daa:	f043 0301 	orr.w	r3, r3, #1
 8005dae:	6613      	str	r3, [r2, #96]	@ 0x60
 8005db0:	4b58      	ldr	r3, [pc, #352]	@ (8005f14 <HAL_GPIO_Init+0x2e4>)
 8005db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	60bb      	str	r3, [r7, #8]
 8005dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dbc:	4a56      	ldr	r2, [pc, #344]	@ (8005f18 <HAL_GPIO_Init+0x2e8>)
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	089b      	lsrs	r3, r3, #2
 8005dc2:	3302      	adds	r3, #2
 8005dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f003 0303 	and.w	r3, r3, #3
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	220f      	movs	r2, #15
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005de6:	d01f      	beq.n	8005e28 <HAL_GPIO_Init+0x1f8>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a4c      	ldr	r2, [pc, #304]	@ (8005f1c <HAL_GPIO_Init+0x2ec>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d019      	beq.n	8005e24 <HAL_GPIO_Init+0x1f4>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a4b      	ldr	r2, [pc, #300]	@ (8005f20 <HAL_GPIO_Init+0x2f0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d013      	beq.n	8005e20 <HAL_GPIO_Init+0x1f0>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a4a      	ldr	r2, [pc, #296]	@ (8005f24 <HAL_GPIO_Init+0x2f4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00d      	beq.n	8005e1c <HAL_GPIO_Init+0x1ec>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a49      	ldr	r2, [pc, #292]	@ (8005f28 <HAL_GPIO_Init+0x2f8>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d007      	beq.n	8005e18 <HAL_GPIO_Init+0x1e8>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a48      	ldr	r2, [pc, #288]	@ (8005f2c <HAL_GPIO_Init+0x2fc>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d101      	bne.n	8005e14 <HAL_GPIO_Init+0x1e4>
 8005e10:	2305      	movs	r3, #5
 8005e12:	e00a      	b.n	8005e2a <HAL_GPIO_Init+0x1fa>
 8005e14:	2306      	movs	r3, #6
 8005e16:	e008      	b.n	8005e2a <HAL_GPIO_Init+0x1fa>
 8005e18:	2304      	movs	r3, #4
 8005e1a:	e006      	b.n	8005e2a <HAL_GPIO_Init+0x1fa>
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e004      	b.n	8005e2a <HAL_GPIO_Init+0x1fa>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e002      	b.n	8005e2a <HAL_GPIO_Init+0x1fa>
 8005e24:	2301      	movs	r3, #1
 8005e26:	e000      	b.n	8005e2a <HAL_GPIO_Init+0x1fa>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	f002 0203 	and.w	r2, r2, #3
 8005e30:	0092      	lsls	r2, r2, #2
 8005e32:	4093      	lsls	r3, r2
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e3a:	4937      	ldr	r1, [pc, #220]	@ (8005f18 <HAL_GPIO_Init+0x2e8>)
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	089b      	lsrs	r3, r3, #2
 8005e40:	3302      	adds	r3, #2
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e48:	4b39      	ldr	r3, [pc, #228]	@ (8005f30 <HAL_GPIO_Init+0x300>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	43db      	mvns	r3, r3
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4013      	ands	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005e6c:	4a30      	ldr	r2, [pc, #192]	@ (8005f30 <HAL_GPIO_Init+0x300>)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005e72:	4b2f      	ldr	r3, [pc, #188]	@ (8005f30 <HAL_GPIO_Init+0x300>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	43db      	mvns	r3, r3
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005e96:	4a26      	ldr	r2, [pc, #152]	@ (8005f30 <HAL_GPIO_Init+0x300>)
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005e9c:	4b24      	ldr	r3, [pc, #144]	@ (8005f30 <HAL_GPIO_Init+0x300>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	43db      	mvns	r3, r3
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f30 <HAL_GPIO_Init+0x300>)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8005f30 <HAL_GPIO_Init+0x300>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005eea:	4a11      	ldr	r2, [pc, #68]	@ (8005f30 <HAL_GPIO_Init+0x300>)
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	fa22 f303 	lsr.w	r3, r2, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f47f ae9d 	bne.w	8005c40 <HAL_GPIO_Init+0x10>
  }
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	40021000 	.word	0x40021000
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	48000400 	.word	0x48000400
 8005f20:	48000800 	.word	0x48000800
 8005f24:	48000c00 	.word	0x48000c00
 8005f28:	48001000 	.word	0x48001000
 8005f2c:	48001400 	.word	0x48001400
 8005f30:	40010400 	.word	0x40010400

08005f34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	887b      	ldrh	r3, [r7, #2]
 8005f46:	4013      	ands	r3, r2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	73fb      	strb	r3, [r7, #15]
 8005f50:	e001      	b.n	8005f56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f52:	2300      	movs	r3, #0
 8005f54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	807b      	strh	r3, [r7, #2]
 8005f70:	4613      	mov	r3, r2
 8005f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f74:	787b      	ldrb	r3, [r7, #1]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f7a:	887a      	ldrh	r2, [r7, #2]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f80:	e002      	b.n	8005f88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f82:	887a      	ldrh	r2, [r7, #2]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d141      	bne.n	8006026 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005fa2:	4b4b      	ldr	r3, [pc, #300]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fae:	d131      	bne.n	8006014 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fb0:	4b47      	ldr	r3, [pc, #284]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fb6:	4a46      	ldr	r2, [pc, #280]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005fc0:	4b43      	ldr	r3, [pc, #268]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005fc8:	4a41      	ldr	r2, [pc, #260]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005fce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005fd0:	4b40      	ldr	r3, [pc, #256]	@ (80060d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2232      	movs	r2, #50	@ 0x32
 8005fd6:	fb02 f303 	mul.w	r3, r2, r3
 8005fda:	4a3f      	ldr	r2, [pc, #252]	@ (80060d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe0:	0c9b      	lsrs	r3, r3, #18
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fe6:	e002      	b.n	8005fee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fee:	4b38      	ldr	r3, [pc, #224]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ffa:	d102      	bne.n	8006002 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f2      	bne.n	8005fe8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006002:	4b33      	ldr	r3, [pc, #204]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800600a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800600e:	d158      	bne.n	80060c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e057      	b.n	80060c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006014:	4b2e      	ldr	r3, [pc, #184]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800601a:	4a2d      	ldr	r2, [pc, #180]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800601c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006020:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006024:	e04d      	b.n	80060c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800602c:	d141      	bne.n	80060b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800602e:	4b28      	ldr	r3, [pc, #160]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800603a:	d131      	bne.n	80060a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800603c:	4b24      	ldr	r3, [pc, #144]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800603e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006042:	4a23      	ldr	r2, [pc, #140]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006048:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800604c:	4b20      	ldr	r3, [pc, #128]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006054:	4a1e      	ldr	r2, [pc, #120]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006056:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800605a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800605c:	4b1d      	ldr	r3, [pc, #116]	@ (80060d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2232      	movs	r2, #50	@ 0x32
 8006062:	fb02 f303 	mul.w	r3, r2, r3
 8006066:	4a1c      	ldr	r2, [pc, #112]	@ (80060d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006068:	fba2 2303 	umull	r2, r3, r2, r3
 800606c:	0c9b      	lsrs	r3, r3, #18
 800606e:	3301      	adds	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006072:	e002      	b.n	800607a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	3b01      	subs	r3, #1
 8006078:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800607a:	4b15      	ldr	r3, [pc, #84]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006086:	d102      	bne.n	800608e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1f2      	bne.n	8006074 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800608e:	4b10      	ldr	r3, [pc, #64]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800609a:	d112      	bne.n	80060c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e011      	b.n	80060c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060a0:	4b0b      	ldr	r3, [pc, #44]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060a6:	4a0a      	ldr	r2, [pc, #40]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80060b0:	e007      	b.n	80060c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80060b2:	4b07      	ldr	r3, [pc, #28]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80060ba:	4a05      	ldr	r2, [pc, #20]	@ (80060d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80060c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	40007000 	.word	0x40007000
 80060d4:	20000000 	.word	0x20000000
 80060d8:	431bde83 	.word	0x431bde83

080060dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80060e0:	4b05      	ldr	r3, [pc, #20]	@ (80060f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	4a04      	ldr	r2, [pc, #16]	@ (80060f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80060e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060ea:	6093      	str	r3, [r2, #8]
}
 80060ec:	bf00      	nop
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	40007000 	.word	0x40007000

080060fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b088      	sub	sp, #32
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e2fe      	b.n	800670c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d075      	beq.n	8006206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800611a:	4b97      	ldr	r3, [pc, #604]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 030c 	and.w	r3, r3, #12
 8006122:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006124:	4b94      	ldr	r3, [pc, #592]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f003 0303 	and.w	r3, r3, #3
 800612c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	2b0c      	cmp	r3, #12
 8006132:	d102      	bne.n	800613a <HAL_RCC_OscConfig+0x3e>
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	2b03      	cmp	r3, #3
 8006138:	d002      	beq.n	8006140 <HAL_RCC_OscConfig+0x44>
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	2b08      	cmp	r3, #8
 800613e:	d10b      	bne.n	8006158 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006140:	4b8d      	ldr	r3, [pc, #564]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d05b      	beq.n	8006204 <HAL_RCC_OscConfig+0x108>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d157      	bne.n	8006204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e2d9      	b.n	800670c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006160:	d106      	bne.n	8006170 <HAL_RCC_OscConfig+0x74>
 8006162:	4b85      	ldr	r3, [pc, #532]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a84      	ldr	r2, [pc, #528]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 8006168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	e01d      	b.n	80061ac <HAL_RCC_OscConfig+0xb0>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006178:	d10c      	bne.n	8006194 <HAL_RCC_OscConfig+0x98>
 800617a:	4b7f      	ldr	r3, [pc, #508]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a7e      	ldr	r2, [pc, #504]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 8006180:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	4b7c      	ldr	r3, [pc, #496]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a7b      	ldr	r2, [pc, #492]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 800618c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	e00b      	b.n	80061ac <HAL_RCC_OscConfig+0xb0>
 8006194:	4b78      	ldr	r3, [pc, #480]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a77      	ldr	r2, [pc, #476]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 800619a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	4b75      	ldr	r3, [pc, #468]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a74      	ldr	r2, [pc, #464]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 80061a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d013      	beq.n	80061dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b4:	f7fc fac6 	bl	8002744 <HAL_GetTick>
 80061b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061ba:	e008      	b.n	80061ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061bc:	f7fc fac2 	bl	8002744 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b64      	cmp	r3, #100	@ 0x64
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e29e      	b.n	800670c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061ce:	4b6a      	ldr	r3, [pc, #424]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d0f0      	beq.n	80061bc <HAL_RCC_OscConfig+0xc0>
 80061da:	e014      	b.n	8006206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061dc:	f7fc fab2 	bl	8002744 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061e4:	f7fc faae 	bl	8002744 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b64      	cmp	r3, #100	@ 0x64
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e28a      	b.n	800670c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061f6:	4b60      	ldr	r3, [pc, #384]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1f0      	bne.n	80061e4 <HAL_RCC_OscConfig+0xe8>
 8006202:	e000      	b.n	8006206 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d075      	beq.n	80062fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006212:	4b59      	ldr	r3, [pc, #356]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f003 030c 	and.w	r3, r3, #12
 800621a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800621c:	4b56      	ldr	r3, [pc, #344]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	2b0c      	cmp	r3, #12
 800622a:	d102      	bne.n	8006232 <HAL_RCC_OscConfig+0x136>
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d002      	beq.n	8006238 <HAL_RCC_OscConfig+0x13c>
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	2b04      	cmp	r3, #4
 8006236:	d11f      	bne.n	8006278 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006238:	4b4f      	ldr	r3, [pc, #316]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006240:	2b00      	cmp	r3, #0
 8006242:	d005      	beq.n	8006250 <HAL_RCC_OscConfig+0x154>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e25d      	b.n	800670c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006250:	4b49      	ldr	r3, [pc, #292]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	061b      	lsls	r3, r3, #24
 800625e:	4946      	ldr	r1, [pc, #280]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 8006260:	4313      	orrs	r3, r2
 8006262:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006264:	4b45      	ldr	r3, [pc, #276]	@ (800637c <HAL_RCC_OscConfig+0x280>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4618      	mov	r0, r3
 800626a:	f7fc fa1f 	bl	80026ac <HAL_InitTick>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d043      	beq.n	80062fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e249      	b.n	800670c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d023      	beq.n	80062c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006280:	4b3d      	ldr	r3, [pc, #244]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a3c      	ldr	r2, [pc, #240]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 8006286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800628a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628c:	f7fc fa5a 	bl	8002744 <HAL_GetTick>
 8006290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006292:	e008      	b.n	80062a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006294:	f7fc fa56 	bl	8002744 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e232      	b.n	800670c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062a6:	4b34      	ldr	r3, [pc, #208]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d0f0      	beq.n	8006294 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062b2:	4b31      	ldr	r3, [pc, #196]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	061b      	lsls	r3, r3, #24
 80062c0:	492d      	ldr	r1, [pc, #180]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	604b      	str	r3, [r1, #4]
 80062c6:	e01a      	b.n	80062fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062c8:	4b2b      	ldr	r3, [pc, #172]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a2a      	ldr	r2, [pc, #168]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 80062ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d4:	f7fc fa36 	bl	8002744 <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062dc:	f7fc fa32 	bl	8002744 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e20e      	b.n	800670c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062ee:	4b22      	ldr	r3, [pc, #136]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f0      	bne.n	80062dc <HAL_RCC_OscConfig+0x1e0>
 80062fa:	e000      	b.n	80062fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0308 	and.w	r3, r3, #8
 8006306:	2b00      	cmp	r3, #0
 8006308:	d041      	beq.n	800638e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d01c      	beq.n	800634c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006312:	4b19      	ldr	r3, [pc, #100]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 8006314:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006318:	4a17      	ldr	r2, [pc, #92]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 800631a:	f043 0301 	orr.w	r3, r3, #1
 800631e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006322:	f7fc fa0f 	bl	8002744 <HAL_GetTick>
 8006326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006328:	e008      	b.n	800633c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800632a:	f7fc fa0b 	bl	8002744 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e1e7      	b.n	800670c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800633c:	4b0e      	ldr	r3, [pc, #56]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 800633e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0ef      	beq.n	800632a <HAL_RCC_OscConfig+0x22e>
 800634a:	e020      	b.n	800638e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800634c:	4b0a      	ldr	r3, [pc, #40]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 800634e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006352:	4a09      	ldr	r2, [pc, #36]	@ (8006378 <HAL_RCC_OscConfig+0x27c>)
 8006354:	f023 0301 	bic.w	r3, r3, #1
 8006358:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800635c:	f7fc f9f2 	bl	8002744 <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006362:	e00d      	b.n	8006380 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006364:	f7fc f9ee 	bl	8002744 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d906      	bls.n	8006380 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e1ca      	b.n	800670c <HAL_RCC_OscConfig+0x610>
 8006376:	bf00      	nop
 8006378:	40021000 	.word	0x40021000
 800637c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006380:	4b8c      	ldr	r3, [pc, #560]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 8006382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1ea      	bne.n	8006364 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0304 	and.w	r3, r3, #4
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 80a6 	beq.w	80064e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800639c:	2300      	movs	r3, #0
 800639e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80063a0:	4b84      	ldr	r3, [pc, #528]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 80063a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <HAL_RCC_OscConfig+0x2b4>
 80063ac:	2301      	movs	r3, #1
 80063ae:	e000      	b.n	80063b2 <HAL_RCC_OscConfig+0x2b6>
 80063b0:	2300      	movs	r3, #0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00d      	beq.n	80063d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063b6:	4b7f      	ldr	r3, [pc, #508]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 80063b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ba:	4a7e      	ldr	r2, [pc, #504]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 80063bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80063c2:	4b7c      	ldr	r3, [pc, #496]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 80063c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80063ce:	2301      	movs	r3, #1
 80063d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063d2:	4b79      	ldr	r3, [pc, #484]	@ (80065b8 <HAL_RCC_OscConfig+0x4bc>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d118      	bne.n	8006410 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063de:	4b76      	ldr	r3, [pc, #472]	@ (80065b8 <HAL_RCC_OscConfig+0x4bc>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a75      	ldr	r2, [pc, #468]	@ (80065b8 <HAL_RCC_OscConfig+0x4bc>)
 80063e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063ea:	f7fc f9ab 	bl	8002744 <HAL_GetTick>
 80063ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063f0:	e008      	b.n	8006404 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063f2:	f7fc f9a7 	bl	8002744 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d901      	bls.n	8006404 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e183      	b.n	800670c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006404:	4b6c      	ldr	r3, [pc, #432]	@ (80065b8 <HAL_RCC_OscConfig+0x4bc>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800640c:	2b00      	cmp	r3, #0
 800640e:	d0f0      	beq.n	80063f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d108      	bne.n	800642a <HAL_RCC_OscConfig+0x32e>
 8006418:	4b66      	ldr	r3, [pc, #408]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 800641a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800641e:	4a65      	ldr	r2, [pc, #404]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 8006420:	f043 0301 	orr.w	r3, r3, #1
 8006424:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006428:	e024      	b.n	8006474 <HAL_RCC_OscConfig+0x378>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	2b05      	cmp	r3, #5
 8006430:	d110      	bne.n	8006454 <HAL_RCC_OscConfig+0x358>
 8006432:	4b60      	ldr	r3, [pc, #384]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 8006434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006438:	4a5e      	ldr	r2, [pc, #376]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 800643a:	f043 0304 	orr.w	r3, r3, #4
 800643e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006442:	4b5c      	ldr	r3, [pc, #368]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 8006444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006448:	4a5a      	ldr	r2, [pc, #360]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 800644a:	f043 0301 	orr.w	r3, r3, #1
 800644e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006452:	e00f      	b.n	8006474 <HAL_RCC_OscConfig+0x378>
 8006454:	4b57      	ldr	r3, [pc, #348]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 8006456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800645a:	4a56      	ldr	r2, [pc, #344]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 800645c:	f023 0301 	bic.w	r3, r3, #1
 8006460:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006464:	4b53      	ldr	r3, [pc, #332]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 8006466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800646a:	4a52      	ldr	r2, [pc, #328]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 800646c:	f023 0304 	bic.w	r3, r3, #4
 8006470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d016      	beq.n	80064aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800647c:	f7fc f962 	bl	8002744 <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006482:	e00a      	b.n	800649a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006484:	f7fc f95e 	bl	8002744 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006492:	4293      	cmp	r3, r2
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e138      	b.n	800670c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800649a:	4b46      	ldr	r3, [pc, #280]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 800649c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d0ed      	beq.n	8006484 <HAL_RCC_OscConfig+0x388>
 80064a8:	e015      	b.n	80064d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064aa:	f7fc f94b 	bl	8002744 <HAL_GetTick>
 80064ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80064b0:	e00a      	b.n	80064c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064b2:	f7fc f947 	bl	8002744 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d901      	bls.n	80064c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e121      	b.n	800670c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80064c8:	4b3a      	ldr	r3, [pc, #232]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 80064ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1ed      	bne.n	80064b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80064d6:	7ffb      	ldrb	r3, [r7, #31]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d105      	bne.n	80064e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064dc:	4b35      	ldr	r3, [pc, #212]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 80064de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e0:	4a34      	ldr	r2, [pc, #208]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 80064e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064e6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0320 	and.w	r3, r3, #32
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d03c      	beq.n	800656e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01c      	beq.n	8006536 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064fc:	4b2d      	ldr	r3, [pc, #180]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 80064fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006502:	4a2c      	ldr	r2, [pc, #176]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 8006504:	f043 0301 	orr.w	r3, r3, #1
 8006508:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800650c:	f7fc f91a 	bl	8002744 <HAL_GetTick>
 8006510:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006512:	e008      	b.n	8006526 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006514:	f7fc f916 	bl	8002744 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e0f2      	b.n	800670c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006526:	4b23      	ldr	r3, [pc, #140]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 8006528:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d0ef      	beq.n	8006514 <HAL_RCC_OscConfig+0x418>
 8006534:	e01b      	b.n	800656e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006536:	4b1f      	ldr	r3, [pc, #124]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 8006538:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800653c:	4a1d      	ldr	r2, [pc, #116]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 800653e:	f023 0301 	bic.w	r3, r3, #1
 8006542:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006546:	f7fc f8fd 	bl	8002744 <HAL_GetTick>
 800654a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800654c:	e008      	b.n	8006560 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800654e:	f7fc f8f9 	bl	8002744 <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	2b02      	cmp	r3, #2
 800655a:	d901      	bls.n	8006560 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e0d5      	b.n	800670c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006560:	4b14      	ldr	r3, [pc, #80]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 8006562:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1ef      	bne.n	800654e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 80c9 	beq.w	800670a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006578:	4b0e      	ldr	r3, [pc, #56]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 030c 	and.w	r3, r3, #12
 8006580:	2b0c      	cmp	r3, #12
 8006582:	f000 8083 	beq.w	800668c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d15e      	bne.n	800664c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800658e:	4b09      	ldr	r3, [pc, #36]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a08      	ldr	r2, [pc, #32]	@ (80065b4 <HAL_RCC_OscConfig+0x4b8>)
 8006594:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800659a:	f7fc f8d3 	bl	8002744 <HAL_GetTick>
 800659e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065a0:	e00c      	b.n	80065bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065a2:	f7fc f8cf 	bl	8002744 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d905      	bls.n	80065bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e0ab      	b.n	800670c <HAL_RCC_OscConfig+0x610>
 80065b4:	40021000 	.word	0x40021000
 80065b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065bc:	4b55      	ldr	r3, [pc, #340]	@ (8006714 <HAL_RCC_OscConfig+0x618>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1ec      	bne.n	80065a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065c8:	4b52      	ldr	r3, [pc, #328]	@ (8006714 <HAL_RCC_OscConfig+0x618>)
 80065ca:	68da      	ldr	r2, [r3, #12]
 80065cc:	4b52      	ldr	r3, [pc, #328]	@ (8006718 <HAL_RCC_OscConfig+0x61c>)
 80065ce:	4013      	ands	r3, r2
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6a11      	ldr	r1, [r2, #32]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80065d8:	3a01      	subs	r2, #1
 80065da:	0112      	lsls	r2, r2, #4
 80065dc:	4311      	orrs	r1, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80065e2:	0212      	lsls	r2, r2, #8
 80065e4:	4311      	orrs	r1, r2
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80065ea:	0852      	lsrs	r2, r2, #1
 80065ec:	3a01      	subs	r2, #1
 80065ee:	0552      	lsls	r2, r2, #21
 80065f0:	4311      	orrs	r1, r2
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80065f6:	0852      	lsrs	r2, r2, #1
 80065f8:	3a01      	subs	r2, #1
 80065fa:	0652      	lsls	r2, r2, #25
 80065fc:	4311      	orrs	r1, r2
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006602:	06d2      	lsls	r2, r2, #27
 8006604:	430a      	orrs	r2, r1
 8006606:	4943      	ldr	r1, [pc, #268]	@ (8006714 <HAL_RCC_OscConfig+0x618>)
 8006608:	4313      	orrs	r3, r2
 800660a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800660c:	4b41      	ldr	r3, [pc, #260]	@ (8006714 <HAL_RCC_OscConfig+0x618>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a40      	ldr	r2, [pc, #256]	@ (8006714 <HAL_RCC_OscConfig+0x618>)
 8006612:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006616:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006618:	4b3e      	ldr	r3, [pc, #248]	@ (8006714 <HAL_RCC_OscConfig+0x618>)
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	4a3d      	ldr	r2, [pc, #244]	@ (8006714 <HAL_RCC_OscConfig+0x618>)
 800661e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006622:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006624:	f7fc f88e 	bl	8002744 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800662c:	f7fc f88a 	bl	8002744 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e066      	b.n	800670c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800663e:	4b35      	ldr	r3, [pc, #212]	@ (8006714 <HAL_RCC_OscConfig+0x618>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0f0      	beq.n	800662c <HAL_RCC_OscConfig+0x530>
 800664a:	e05e      	b.n	800670a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800664c:	4b31      	ldr	r3, [pc, #196]	@ (8006714 <HAL_RCC_OscConfig+0x618>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a30      	ldr	r2, [pc, #192]	@ (8006714 <HAL_RCC_OscConfig+0x618>)
 8006652:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006658:	f7fc f874 	bl	8002744 <HAL_GetTick>
 800665c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006660:	f7fc f870 	bl	8002744 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b02      	cmp	r3, #2
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e04c      	b.n	800670c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006672:	4b28      	ldr	r3, [pc, #160]	@ (8006714 <HAL_RCC_OscConfig+0x618>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1f0      	bne.n	8006660 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800667e:	4b25      	ldr	r3, [pc, #148]	@ (8006714 <HAL_RCC_OscConfig+0x618>)
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	4924      	ldr	r1, [pc, #144]	@ (8006714 <HAL_RCC_OscConfig+0x618>)
 8006684:	4b25      	ldr	r3, [pc, #148]	@ (800671c <HAL_RCC_OscConfig+0x620>)
 8006686:	4013      	ands	r3, r2
 8006688:	60cb      	str	r3, [r1, #12]
 800668a:	e03e      	b.n	800670a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e039      	b.n	800670c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006698:	4b1e      	ldr	r3, [pc, #120]	@ (8006714 <HAL_RCC_OscConfig+0x618>)
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f003 0203 	and.w	r2, r3, #3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d12c      	bne.n	8006706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b6:	3b01      	subs	r3, #1
 80066b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d123      	bne.n	8006706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d11b      	bne.n	8006706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80066da:	429a      	cmp	r2, r3
 80066dc:	d113      	bne.n	8006706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e8:	085b      	lsrs	r3, r3, #1
 80066ea:	3b01      	subs	r3, #1
 80066ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d109      	bne.n	8006706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066fc:	085b      	lsrs	r3, r3, #1
 80066fe:	3b01      	subs	r3, #1
 8006700:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006702:	429a      	cmp	r2, r3
 8006704:	d001      	beq.n	800670a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3720      	adds	r7, #32
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	40021000 	.word	0x40021000
 8006718:	019f800c 	.word	0x019f800c
 800671c:	feeefffc 	.word	0xfeeefffc

08006720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800672a:	2300      	movs	r3, #0
 800672c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e11e      	b.n	8006976 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006738:	4b91      	ldr	r3, [pc, #580]	@ (8006980 <HAL_RCC_ClockConfig+0x260>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 030f 	and.w	r3, r3, #15
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	d910      	bls.n	8006768 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006746:	4b8e      	ldr	r3, [pc, #568]	@ (8006980 <HAL_RCC_ClockConfig+0x260>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f023 020f 	bic.w	r2, r3, #15
 800674e:	498c      	ldr	r1, [pc, #560]	@ (8006980 <HAL_RCC_ClockConfig+0x260>)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	4313      	orrs	r3, r2
 8006754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006756:	4b8a      	ldr	r3, [pc, #552]	@ (8006980 <HAL_RCC_ClockConfig+0x260>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 030f 	and.w	r3, r3, #15
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	429a      	cmp	r2, r3
 8006762:	d001      	beq.n	8006768 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e106      	b.n	8006976 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	d073      	beq.n	800685c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	2b03      	cmp	r3, #3
 800677a:	d129      	bne.n	80067d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800677c:	4b81      	ldr	r3, [pc, #516]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e0f4      	b.n	8006976 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800678c:	f000 f99e 	bl	8006acc <RCC_GetSysClockFreqFromPLLSource>
 8006790:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	4a7c      	ldr	r2, [pc, #496]	@ (8006988 <HAL_RCC_ClockConfig+0x268>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d93f      	bls.n	800681a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800679a:	4b7a      	ldr	r3, [pc, #488]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d009      	beq.n	80067ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d033      	beq.n	800681a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d12f      	bne.n	800681a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80067ba:	4b72      	ldr	r3, [pc, #456]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067c2:	4a70      	ldr	r2, [pc, #448]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 80067c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80067ca:	2380      	movs	r3, #128	@ 0x80
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	e024      	b.n	800681a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d107      	bne.n	80067e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067d8:	4b6a      	ldr	r3, [pc, #424]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d109      	bne.n	80067f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e0c6      	b.n	8006976 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067e8:	4b66      	ldr	r3, [pc, #408]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e0be      	b.n	8006976 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80067f8:	f000 f8ce 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 80067fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	4a61      	ldr	r2, [pc, #388]	@ (8006988 <HAL_RCC_ClockConfig+0x268>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d909      	bls.n	800681a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006806:	4b5f      	ldr	r3, [pc, #380]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800680e:	4a5d      	ldr	r2, [pc, #372]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 8006810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006814:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006816:	2380      	movs	r3, #128	@ 0x80
 8006818:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800681a:	4b5a      	ldr	r3, [pc, #360]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f023 0203 	bic.w	r2, r3, #3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	4957      	ldr	r1, [pc, #348]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 8006828:	4313      	orrs	r3, r2
 800682a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800682c:	f7fb ff8a 	bl	8002744 <HAL_GetTick>
 8006830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006832:	e00a      	b.n	800684a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006834:	f7fb ff86 	bl	8002744 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006842:	4293      	cmp	r3, r2
 8006844:	d901      	bls.n	800684a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e095      	b.n	8006976 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800684a:	4b4e      	ldr	r3, [pc, #312]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 020c 	and.w	r2, r3, #12
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	429a      	cmp	r2, r3
 800685a:	d1eb      	bne.n	8006834 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d023      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b00      	cmp	r3, #0
 8006872:	d005      	beq.n	8006880 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006874:	4b43      	ldr	r3, [pc, #268]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	4a42      	ldr	r2, [pc, #264]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 800687a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800687e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0308 	and.w	r3, r3, #8
 8006888:	2b00      	cmp	r3, #0
 800688a:	d007      	beq.n	800689c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800688c:	4b3d      	ldr	r3, [pc, #244]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006894:	4a3b      	ldr	r2, [pc, #236]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 8006896:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800689a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800689c:	4b39      	ldr	r3, [pc, #228]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	4936      	ldr	r1, [pc, #216]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	608b      	str	r3, [r1, #8]
 80068ae:	e008      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	2b80      	cmp	r3, #128	@ 0x80
 80068b4:	d105      	bne.n	80068c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80068b6:	4b33      	ldr	r3, [pc, #204]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	4a32      	ldr	r2, [pc, #200]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 80068bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068c2:	4b2f      	ldr	r3, [pc, #188]	@ (8006980 <HAL_RCC_ClockConfig+0x260>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 030f 	and.w	r3, r3, #15
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d21d      	bcs.n	800690c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006980 <HAL_RCC_ClockConfig+0x260>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f023 020f 	bic.w	r2, r3, #15
 80068d8:	4929      	ldr	r1, [pc, #164]	@ (8006980 <HAL_RCC_ClockConfig+0x260>)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	4313      	orrs	r3, r2
 80068de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80068e0:	f7fb ff30 	bl	8002744 <HAL_GetTick>
 80068e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068e6:	e00a      	b.n	80068fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068e8:	f7fb ff2c 	bl	8002744 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e03b      	b.n	8006976 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068fe:	4b20      	ldr	r3, [pc, #128]	@ (8006980 <HAL_RCC_ClockConfig+0x260>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	429a      	cmp	r2, r3
 800690a:	d1ed      	bne.n	80068e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0304 	and.w	r3, r3, #4
 8006914:	2b00      	cmp	r3, #0
 8006916:	d008      	beq.n	800692a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006918:	4b1a      	ldr	r3, [pc, #104]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	4917      	ldr	r1, [pc, #92]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 8006926:	4313      	orrs	r3, r2
 8006928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	2b00      	cmp	r3, #0
 8006934:	d009      	beq.n	800694a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006936:	4b13      	ldr	r3, [pc, #76]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	490f      	ldr	r1, [pc, #60]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 8006946:	4313      	orrs	r3, r2
 8006948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800694a:	f000 f825 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 800694e:	4602      	mov	r2, r0
 8006950:	4b0c      	ldr	r3, [pc, #48]	@ (8006984 <HAL_RCC_ClockConfig+0x264>)
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	091b      	lsrs	r3, r3, #4
 8006956:	f003 030f 	and.w	r3, r3, #15
 800695a:	490c      	ldr	r1, [pc, #48]	@ (800698c <HAL_RCC_ClockConfig+0x26c>)
 800695c:	5ccb      	ldrb	r3, [r1, r3]
 800695e:	f003 031f 	and.w	r3, r3, #31
 8006962:	fa22 f303 	lsr.w	r3, r2, r3
 8006966:	4a0a      	ldr	r2, [pc, #40]	@ (8006990 <HAL_RCC_ClockConfig+0x270>)
 8006968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800696a:	4b0a      	ldr	r3, [pc, #40]	@ (8006994 <HAL_RCC_ClockConfig+0x274>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f7fb fe9c 	bl	80026ac <HAL_InitTick>
 8006974:	4603      	mov	r3, r0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	40022000 	.word	0x40022000
 8006984:	40021000 	.word	0x40021000
 8006988:	04c4b400 	.word	0x04c4b400
 800698c:	08013910 	.word	0x08013910
 8006990:	20000000 	.word	0x20000000
 8006994:	20000004 	.word	0x20000004

08006998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800699e:	4b2c      	ldr	r3, [pc, #176]	@ (8006a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f003 030c 	and.w	r3, r3, #12
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	d102      	bne.n	80069b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80069aa:	4b2a      	ldr	r3, [pc, #168]	@ (8006a54 <HAL_RCC_GetSysClockFreq+0xbc>)
 80069ac:	613b      	str	r3, [r7, #16]
 80069ae:	e047      	b.n	8006a40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80069b0:	4b27      	ldr	r3, [pc, #156]	@ (8006a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f003 030c 	and.w	r3, r3, #12
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d102      	bne.n	80069c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80069bc:	4b26      	ldr	r3, [pc, #152]	@ (8006a58 <HAL_RCC_GetSysClockFreq+0xc0>)
 80069be:	613b      	str	r3, [r7, #16]
 80069c0:	e03e      	b.n	8006a40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80069c2:	4b23      	ldr	r3, [pc, #140]	@ (8006a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 030c 	and.w	r3, r3, #12
 80069ca:	2b0c      	cmp	r3, #12
 80069cc:	d136      	bne.n	8006a3c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80069ce:	4b20      	ldr	r3, [pc, #128]	@ (8006a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80069d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	091b      	lsrs	r3, r3, #4
 80069de:	f003 030f 	and.w	r3, r3, #15
 80069e2:	3301      	adds	r3, #1
 80069e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	d10c      	bne.n	8006a06 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006a58 <HAL_RCC_GetSysClockFreq+0xc0>)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f4:	4a16      	ldr	r2, [pc, #88]	@ (8006a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069f6:	68d2      	ldr	r2, [r2, #12]
 80069f8:	0a12      	lsrs	r2, r2, #8
 80069fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069fe:	fb02 f303 	mul.w	r3, r2, r3
 8006a02:	617b      	str	r3, [r7, #20]
      break;
 8006a04:	e00c      	b.n	8006a20 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a06:	4a13      	ldr	r2, [pc, #76]	@ (8006a54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0e:	4a10      	ldr	r2, [pc, #64]	@ (8006a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a10:	68d2      	ldr	r2, [r2, #12]
 8006a12:	0a12      	lsrs	r2, r2, #8
 8006a14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006a18:	fb02 f303 	mul.w	r3, r2, r3
 8006a1c:	617b      	str	r3, [r7, #20]
      break;
 8006a1e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a20:	4b0b      	ldr	r3, [pc, #44]	@ (8006a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	0e5b      	lsrs	r3, r3, #25
 8006a26:	f003 0303 	and.w	r3, r3, #3
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a38:	613b      	str	r3, [r7, #16]
 8006a3a:	e001      	b.n	8006a40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006a40:	693b      	ldr	r3, [r7, #16]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40021000 	.word	0x40021000
 8006a54:	00f42400 	.word	0x00f42400
 8006a58:	016e3600 	.word	0x016e3600

08006a5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a60:	4b03      	ldr	r3, [pc, #12]	@ (8006a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a62:	681b      	ldr	r3, [r3, #0]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	20000000 	.word	0x20000000

08006a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006a78:	f7ff fff0 	bl	8006a5c <HAL_RCC_GetHCLKFreq>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	4b06      	ldr	r3, [pc, #24]	@ (8006a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	0a1b      	lsrs	r3, r3, #8
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	4904      	ldr	r1, [pc, #16]	@ (8006a9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a8a:	5ccb      	ldrb	r3, [r1, r3]
 8006a8c:	f003 031f 	and.w	r3, r3, #31
 8006a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	40021000 	.word	0x40021000
 8006a9c:	08013920 	.word	0x08013920

08006aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006aa4:	f7ff ffda 	bl	8006a5c <HAL_RCC_GetHCLKFreq>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	4b06      	ldr	r3, [pc, #24]	@ (8006ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	0adb      	lsrs	r3, r3, #11
 8006ab0:	f003 0307 	and.w	r3, r3, #7
 8006ab4:	4904      	ldr	r1, [pc, #16]	@ (8006ac8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ab6:	5ccb      	ldrb	r3, [r1, r3]
 8006ab8:	f003 031f 	and.w	r3, r3, #31
 8006abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	40021000 	.word	0x40021000
 8006ac8:	08013920 	.word	0x08013920

08006acc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8006b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006adc:	4b1b      	ldr	r3, [pc, #108]	@ (8006b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	091b      	lsrs	r3, r3, #4
 8006ae2:	f003 030f 	and.w	r3, r3, #15
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	2b03      	cmp	r3, #3
 8006aee:	d10c      	bne.n	8006b0a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006af0:	4a17      	ldr	r2, [pc, #92]	@ (8006b50 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af8:	4a14      	ldr	r2, [pc, #80]	@ (8006b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006afa:	68d2      	ldr	r2, [r2, #12]
 8006afc:	0a12      	lsrs	r2, r2, #8
 8006afe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006b02:	fb02 f303 	mul.w	r3, r2, r3
 8006b06:	617b      	str	r3, [r7, #20]
    break;
 8006b08:	e00c      	b.n	8006b24 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b0a:	4a12      	ldr	r2, [pc, #72]	@ (8006b54 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b12:	4a0e      	ldr	r2, [pc, #56]	@ (8006b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b14:	68d2      	ldr	r2, [r2, #12]
 8006b16:	0a12      	lsrs	r2, r2, #8
 8006b18:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006b1c:	fb02 f303 	mul.w	r3, r2, r3
 8006b20:	617b      	str	r3, [r7, #20]
    break;
 8006b22:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b24:	4b09      	ldr	r3, [pc, #36]	@ (8006b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	0e5b      	lsrs	r3, r3, #25
 8006b2a:	f003 0303 	and.w	r3, r3, #3
 8006b2e:	3301      	adds	r3, #1
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b3c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006b3e:	687b      	ldr	r3, [r7, #4]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	371c      	adds	r7, #28
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	40021000 	.word	0x40021000
 8006b50:	016e3600 	.word	0x016e3600
 8006b54:	00f42400 	.word	0x00f42400

08006b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b60:	2300      	movs	r3, #0
 8006b62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b64:	2300      	movs	r3, #0
 8006b66:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 8098 	beq.w	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b76:	2300      	movs	r3, #0
 8006b78:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b7a:	4b43      	ldr	r3, [pc, #268]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10d      	bne.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b86:	4b40      	ldr	r3, [pc, #256]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b90:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b92:	4b3d      	ldr	r3, [pc, #244]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b9a:	60bb      	str	r3, [r7, #8]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ba2:	4b3a      	ldr	r3, [pc, #232]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a39      	ldr	r2, [pc, #228]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bae:	f7fb fdc9 	bl	8002744 <HAL_GetTick>
 8006bb2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bb4:	e009      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bb6:	f7fb fdc5 	bl	8002744 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d902      	bls.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	74fb      	strb	r3, [r7, #19]
        break;
 8006bc8:	e005      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bca:	4b30      	ldr	r3, [pc, #192]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0ef      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006bd6:	7cfb      	ldrb	r3, [r7, #19]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d159      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006be6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01e      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d019      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006bf8:	4b23      	ldr	r3, [pc, #140]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c04:	4b20      	ldr	r3, [pc, #128]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c14:	4b1c      	ldr	r3, [pc, #112]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c24:	4a18      	ldr	r2, [pc, #96]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d016      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c36:	f7fb fd85 	bl	8002744 <HAL_GetTick>
 8006c3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c3c:	e00b      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c3e:	f7fb fd81 	bl	8002744 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d902      	bls.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	74fb      	strb	r3, [r7, #19]
            break;
 8006c54:	e006      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c56:	4b0c      	ldr	r3, [pc, #48]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d0ec      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006c64:	7cfb      	ldrb	r3, [r7, #19]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10b      	bne.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c6a:	4b07      	ldr	r3, [pc, #28]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c78:	4903      	ldr	r1, [pc, #12]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006c80:	e008      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c82:	7cfb      	ldrb	r3, [r7, #19]
 8006c84:	74bb      	strb	r3, [r7, #18]
 8006c86:	e005      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006c88:	40021000 	.word	0x40021000
 8006c8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c90:	7cfb      	ldrb	r3, [r7, #19]
 8006c92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c94:	7c7b      	ldrb	r3, [r7, #17]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d105      	bne.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c9a:	4ba6      	ldr	r3, [pc, #664]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c9e:	4aa5      	ldr	r2, [pc, #660]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ca0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ca4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00a      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006cb2:	4ba0      	ldr	r3, [pc, #640]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb8:	f023 0203 	bic.w	r2, r3, #3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	499c      	ldr	r1, [pc, #624]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00a      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006cd4:	4b97      	ldr	r3, [pc, #604]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cda:	f023 020c 	bic.w	r2, r3, #12
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	4994      	ldr	r1, [pc, #592]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0304 	and.w	r3, r3, #4
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006cf6:	4b8f      	ldr	r3, [pc, #572]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cfc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	498b      	ldr	r1, [pc, #556]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0308 	and.w	r3, r3, #8
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00a      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006d18:	4b86      	ldr	r3, [pc, #536]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	4983      	ldr	r1, [pc, #524]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00a      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d3a:	4b7e      	ldr	r3, [pc, #504]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d40:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	497a      	ldr	r1, [pc, #488]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00a      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d5c:	4b75      	ldr	r3, [pc, #468]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d62:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	4972      	ldr	r1, [pc, #456]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00a      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d7e:	4b6d      	ldr	r3, [pc, #436]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d84:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	4969      	ldr	r1, [pc, #420]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00a      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006da0:	4b64      	ldr	r3, [pc, #400]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006da6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	4961      	ldr	r1, [pc, #388]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00a      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dc8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd0:	4958      	ldr	r1, [pc, #352]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d015      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006de4:	4b53      	ldr	r3, [pc, #332]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df2:	4950      	ldr	r1, [pc, #320]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e02:	d105      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e04:	4b4b      	ldr	r3, [pc, #300]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	4a4a      	ldr	r2, [pc, #296]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d015      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006e1c:	4b45      	ldr	r3, [pc, #276]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2a:	4942      	ldr	r1, [pc, #264]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e3a:	d105      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e3c:	4b3d      	ldr	r3, [pc, #244]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	4a3c      	ldr	r2, [pc, #240]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e46:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d015      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e54:	4b37      	ldr	r3, [pc, #220]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e5a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e62:	4934      	ldr	r1, [pc, #208]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e72:	d105      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e74:	4b2f      	ldr	r3, [pc, #188]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	4a2e      	ldr	r2, [pc, #184]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e7e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d015      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e8c:	4b29      	ldr	r3, [pc, #164]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e9a:	4926      	ldr	r1, [pc, #152]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ea6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006eaa:	d105      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006eac:	4b21      	ldr	r3, [pc, #132]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	4a20      	ldr	r2, [pc, #128]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eb6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d015      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed2:	4918      	ldr	r1, [pc, #96]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ede:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ee2:	d105      	bne.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ee4:	4b13      	ldr	r3, [pc, #76]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	4a12      	ldr	r2, [pc, #72]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d015      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006efc:	4b0d      	ldr	r3, [pc, #52]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f02:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f0a:	490a      	ldr	r1, [pc, #40]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f1a:	d105      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006f1c:	4b05      	ldr	r3, [pc, #20]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	4a04      	ldr	r2, [pc, #16]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006f28:	7cbb      	ldrb	r3, [r7, #18]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	40021000 	.word	0x40021000

08006f38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e09d      	b.n	8007086 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d108      	bne.n	8006f64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f5a:	d009      	beq.n	8006f70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	61da      	str	r2, [r3, #28]
 8006f62:	e005      	b.n	8006f70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d106      	bne.n	8006f90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7fa fcf2 	bl	8001974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fa6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006fb0:	d902      	bls.n	8006fb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	e002      	b.n	8006fbe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006fb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006fbc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006fc6:	d007      	beq.n	8006fd8 <HAL_SPI_Init+0xa0>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006fd0:	d002      	beq.n	8006fd8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007006:	431a      	orrs	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007010:	431a      	orrs	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800701a:	ea42 0103 	orr.w	r1, r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007022:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	0c1b      	lsrs	r3, r3, #16
 8007034:	f003 0204 	and.w	r2, r3, #4
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703c:	f003 0310 	and.w	r3, r3, #16
 8007040:	431a      	orrs	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007046:	f003 0308 	and.w	r3, r3, #8
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007054:	ea42 0103 	orr.w	r1, r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	69da      	ldr	r2, [r3, #28]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007074:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b08a      	sub	sp, #40	@ 0x28
 8007092:	af00      	add	r7, sp, #0
 8007094:	60f8      	str	r0, [r7, #12]
 8007096:	60b9      	str	r1, [r7, #8]
 8007098:	607a      	str	r2, [r7, #4]
 800709a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800709c:	2301      	movs	r3, #1
 800709e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80070a0:	2300      	movs	r3, #0
 80070a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d101      	bne.n	80070b4 <HAL_SPI_TransmitReceive+0x26>
 80070b0:	2302      	movs	r3, #2
 80070b2:	e20a      	b.n	80074ca <HAL_SPI_TransmitReceive+0x43c>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070bc:	f7fb fb42 	bl	8002744 <HAL_GetTick>
 80070c0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80070c8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80070d0:	887b      	ldrh	r3, [r7, #2]
 80070d2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80070d4:	887b      	ldrh	r3, [r7, #2]
 80070d6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070d8:	7efb      	ldrb	r3, [r7, #27]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d00e      	beq.n	80070fc <HAL_SPI_TransmitReceive+0x6e>
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070e4:	d106      	bne.n	80070f4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d102      	bne.n	80070f4 <HAL_SPI_TransmitReceive+0x66>
 80070ee:	7efb      	ldrb	r3, [r7, #27]
 80070f0:	2b04      	cmp	r3, #4
 80070f2:	d003      	beq.n	80070fc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80070f4:	2302      	movs	r3, #2
 80070f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80070fa:	e1e0      	b.n	80074be <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d005      	beq.n	800710e <HAL_SPI_TransmitReceive+0x80>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <HAL_SPI_TransmitReceive+0x80>
 8007108:	887b      	ldrh	r3, [r7, #2]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d103      	bne.n	8007116 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007114:	e1d3      	b.n	80074be <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b04      	cmp	r3, #4
 8007120:	d003      	beq.n	800712a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2205      	movs	r2, #5
 8007126:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	887a      	ldrh	r2, [r7, #2]
 800713a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	887a      	ldrh	r2, [r7, #2]
 8007142:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	887a      	ldrh	r2, [r7, #2]
 8007150:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	887a      	ldrh	r2, [r7, #2]
 8007156:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800716c:	d802      	bhi.n	8007174 <HAL_SPI_TransmitReceive+0xe6>
 800716e:	8a3b      	ldrh	r3, [r7, #16]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d908      	bls.n	8007186 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007182:	605a      	str	r2, [r3, #4]
 8007184:	e007      	b.n	8007196 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007194:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071a0:	2b40      	cmp	r3, #64	@ 0x40
 80071a2:	d007      	beq.n	80071b4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80071bc:	f240 8081 	bls.w	80072c2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <HAL_SPI_TransmitReceive+0x140>
 80071c8:	8a7b      	ldrh	r3, [r7, #18]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d16d      	bne.n	80072aa <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d2:	881a      	ldrh	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071de:	1c9a      	adds	r2, r3, #2
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	3b01      	subs	r3, #1
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071f2:	e05a      	b.n	80072aa <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d11b      	bne.n	800723a <HAL_SPI_TransmitReceive+0x1ac>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007206:	b29b      	uxth	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	d016      	beq.n	800723a <HAL_SPI_TransmitReceive+0x1ac>
 800720c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720e:	2b01      	cmp	r3, #1
 8007210:	d113      	bne.n	800723a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007216:	881a      	ldrh	r2, [r3, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007222:	1c9a      	adds	r2, r3, #2
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800722c:	b29b      	uxth	r3, r3
 800722e:	3b01      	subs	r3, #1
 8007230:	b29a      	uxth	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b01      	cmp	r3, #1
 8007246:	d11c      	bne.n	8007282 <HAL_SPI_TransmitReceive+0x1f4>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800724e:	b29b      	uxth	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	d016      	beq.n	8007282 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725e:	b292      	uxth	r2, r2
 8007260:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007266:	1c9a      	adds	r2, r3, #2
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007272:	b29b      	uxth	r3, r3
 8007274:	3b01      	subs	r3, #1
 8007276:	b29a      	uxth	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800727e:	2301      	movs	r3, #1
 8007280:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007282:	f7fb fa5f 	bl	8002744 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800728e:	429a      	cmp	r2, r3
 8007290:	d80b      	bhi.n	80072aa <HAL_SPI_TransmitReceive+0x21c>
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007298:	d007      	beq.n	80072aa <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80072a8:	e109      	b.n	80074be <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d19f      	bne.n	80071f4 <HAL_SPI_TransmitReceive+0x166>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d199      	bne.n	80071f4 <HAL_SPI_TransmitReceive+0x166>
 80072c0:	e0e3      	b.n	800748a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_SPI_TransmitReceive+0x244>
 80072ca:	8a7b      	ldrh	r3, [r7, #18]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	f040 80cf 	bne.w	8007470 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d912      	bls.n	8007302 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e0:	881a      	ldrh	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ec:	1c9a      	adds	r2, r3, #2
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	3b02      	subs	r3, #2
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007300:	e0b6      	b.n	8007470 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	330c      	adds	r3, #12
 800730c:	7812      	ldrb	r2, [r2, #0]
 800730e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800731e:	b29b      	uxth	r3, r3
 8007320:	3b01      	subs	r3, #1
 8007322:	b29a      	uxth	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007328:	e0a2      	b.n	8007470 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	2b02      	cmp	r3, #2
 8007336:	d134      	bne.n	80073a2 <HAL_SPI_TransmitReceive+0x314>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800733c:	b29b      	uxth	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d02f      	beq.n	80073a2 <HAL_SPI_TransmitReceive+0x314>
 8007342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007344:	2b01      	cmp	r3, #1
 8007346:	d12c      	bne.n	80073a2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800734c:	b29b      	uxth	r3, r3
 800734e:	2b01      	cmp	r3, #1
 8007350:	d912      	bls.n	8007378 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007356:	881a      	ldrh	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007362:	1c9a      	adds	r2, r3, #2
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800736c:	b29b      	uxth	r3, r3
 800736e:	3b02      	subs	r3, #2
 8007370:	b29a      	uxth	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007376:	e012      	b.n	800739e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	330c      	adds	r3, #12
 8007382:	7812      	ldrb	r2, [r2, #0]
 8007384:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007394:	b29b      	uxth	r3, r3
 8007396:	3b01      	subs	r3, #1
 8007398:	b29a      	uxth	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d148      	bne.n	8007442 <HAL_SPI_TransmitReceive+0x3b4>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d042      	beq.n	8007442 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d923      	bls.n	8007410 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d2:	b292      	uxth	r2, r2
 80073d4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073da:	1c9a      	adds	r2, r3, #2
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	3b02      	subs	r3, #2
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d81f      	bhi.n	800743e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	685a      	ldr	r2, [r3, #4]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800740c:	605a      	str	r2, [r3, #4]
 800740e:	e016      	b.n	800743e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f103 020c 	add.w	r2, r3, #12
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741c:	7812      	ldrb	r2, [r2, #0]
 800741e:	b2d2      	uxtb	r2, r2
 8007420:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007432:	b29b      	uxth	r3, r3
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800743e:	2301      	movs	r3, #1
 8007440:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007442:	f7fb f97f 	bl	8002744 <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800744e:	429a      	cmp	r2, r3
 8007450:	d803      	bhi.n	800745a <HAL_SPI_TransmitReceive+0x3cc>
 8007452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007458:	d102      	bne.n	8007460 <HAL_SPI_TransmitReceive+0x3d2>
 800745a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745c:	2b00      	cmp	r3, #0
 800745e:	d107      	bne.n	8007470 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800746e:	e026      	b.n	80074be <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007474:	b29b      	uxth	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	f47f af57 	bne.w	800732a <HAL_SPI_TransmitReceive+0x29c>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007482:	b29b      	uxth	r3, r3
 8007484:	2b00      	cmp	r3, #0
 8007486:	f47f af50 	bne.w	800732a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f000 f94c 	bl	800772c <SPI_EndRxTxTransaction>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2220      	movs	r2, #32
 80074a4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074b4:	e003      	b.n	80074be <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80074c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3728      	adds	r7, #40	@ 0x28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80074e0:	b2db      	uxtb	r3, r3
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
	...

080074f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b088      	sub	sp, #32
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	603b      	str	r3, [r7, #0]
 80074fc:	4613      	mov	r3, r2
 80074fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007500:	f7fb f920 	bl	8002744 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007508:	1a9b      	subs	r3, r3, r2
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	4413      	add	r3, r2
 800750e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007510:	f7fb f918 	bl	8002744 <HAL_GetTick>
 8007514:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007516:	4b39      	ldr	r3, [pc, #228]	@ (80075fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	015b      	lsls	r3, r3, #5
 800751c:	0d1b      	lsrs	r3, r3, #20
 800751e:	69fa      	ldr	r2, [r7, #28]
 8007520:	fb02 f303 	mul.w	r3, r2, r3
 8007524:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007526:	e054      	b.n	80075d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752e:	d050      	beq.n	80075d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007530:	f7fb f908 	bl	8002744 <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	69fa      	ldr	r2, [r7, #28]
 800753c:	429a      	cmp	r2, r3
 800753e:	d902      	bls.n	8007546 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d13d      	bne.n	80075c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007554:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800755e:	d111      	bne.n	8007584 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007568:	d004      	beq.n	8007574 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007572:	d107      	bne.n	8007584 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007582:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007588:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800758c:	d10f      	bne.n	80075ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e017      	b.n	80075f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075c8:	2300      	movs	r3, #0
 80075ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	4013      	ands	r3, r2
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	429a      	cmp	r2, r3
 80075e0:	bf0c      	ite	eq
 80075e2:	2301      	moveq	r3, #1
 80075e4:	2300      	movne	r3, #0
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	461a      	mov	r2, r3
 80075ea:	79fb      	ldrb	r3, [r7, #7]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d19b      	bne.n	8007528 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3720      	adds	r7, #32
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	20000000 	.word	0x20000000

08007600 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08a      	sub	sp, #40	@ 0x28
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
 800760c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007612:	f7fb f897 	bl	8002744 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761a:	1a9b      	subs	r3, r3, r2
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	4413      	add	r3, r2
 8007620:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007622:	f7fb f88f 	bl	8002744 <HAL_GetTick>
 8007626:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	330c      	adds	r3, #12
 800762e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007630:	4b3d      	ldr	r3, [pc, #244]	@ (8007728 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	4613      	mov	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	00da      	lsls	r2, r3, #3
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	0d1b      	lsrs	r3, r3, #20
 8007640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007642:	fb02 f303 	mul.w	r3, r2, r3
 8007646:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007648:	e060      	b.n	800770c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007650:	d107      	bne.n	8007662 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d104      	bne.n	8007662 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007660:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007668:	d050      	beq.n	800770c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800766a:	f7fb f86b 	bl	8002744 <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007676:	429a      	cmp	r2, r3
 8007678:	d902      	bls.n	8007680 <SPI_WaitFifoStateUntilTimeout+0x80>
 800767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767c:	2b00      	cmp	r3, #0
 800767e:	d13d      	bne.n	80076fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800768e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007698:	d111      	bne.n	80076be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076a2:	d004      	beq.n	80076ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ac:	d107      	bne.n	80076be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076c6:	d10f      	bne.n	80076e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e010      	b.n	800771e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	3b01      	subs	r3, #1
 800770a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689a      	ldr	r2, [r3, #8]
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	4013      	ands	r3, r2
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	429a      	cmp	r2, r3
 800771a:	d196      	bne.n	800764a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3728      	adds	r7, #40	@ 0x28
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	20000000 	.word	0x20000000

0800772c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af02      	add	r7, sp, #8
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2200      	movs	r2, #0
 8007740:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f7ff ff5b 	bl	8007600 <SPI_WaitFifoStateUntilTimeout>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d007      	beq.n	8007760 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007754:	f043 0220 	orr.w	r2, r3, #32
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e027      	b.n	80077b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2200      	movs	r2, #0
 8007768:	2180      	movs	r1, #128	@ 0x80
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f7ff fec0 	bl	80074f0 <SPI_WaitFlagStateUntilTimeout>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d007      	beq.n	8007786 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800777a:	f043 0220 	orr.w	r2, r3, #32
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e014      	b.n	80077b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2200      	movs	r2, #0
 800778e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f7ff ff34 	bl	8007600 <SPI_WaitFifoStateUntilTimeout>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d007      	beq.n	80077ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077a2:	f043 0220 	orr.w	r2, r3, #32
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e000      	b.n	80077b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e049      	b.n	800785e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d106      	bne.n	80077e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7fa fc88 	bl	80020f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2202      	movs	r2, #2
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	3304      	adds	r3, #4
 80077f4:	4619      	mov	r1, r3
 80077f6:	4610      	mov	r0, r2
 80077f8:	f000 fc9e 	bl	8008138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
	...

08007868 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b01      	cmp	r3, #1
 800787a:	d001      	beq.n	8007880 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e042      	b.n	8007906 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2202      	movs	r2, #2
 8007884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a21      	ldr	r2, [pc, #132]	@ (8007914 <HAL_TIM_Base_Start+0xac>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d018      	beq.n	80078c4 <HAL_TIM_Base_Start+0x5c>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800789a:	d013      	beq.n	80078c4 <HAL_TIM_Base_Start+0x5c>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007918 <HAL_TIM_Base_Start+0xb0>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00e      	beq.n	80078c4 <HAL_TIM_Base_Start+0x5c>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a1c      	ldr	r2, [pc, #112]	@ (800791c <HAL_TIM_Base_Start+0xb4>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d009      	beq.n	80078c4 <HAL_TIM_Base_Start+0x5c>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a1a      	ldr	r2, [pc, #104]	@ (8007920 <HAL_TIM_Base_Start+0xb8>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d004      	beq.n	80078c4 <HAL_TIM_Base_Start+0x5c>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a19      	ldr	r2, [pc, #100]	@ (8007924 <HAL_TIM_Base_Start+0xbc>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d115      	bne.n	80078f0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689a      	ldr	r2, [r3, #8]
 80078ca:	4b17      	ldr	r3, [pc, #92]	@ (8007928 <HAL_TIM_Base_Start+0xc0>)
 80078cc:	4013      	ands	r3, r2
 80078ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b06      	cmp	r3, #6
 80078d4:	d015      	beq.n	8007902 <HAL_TIM_Base_Start+0x9a>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078dc:	d011      	beq.n	8007902 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f042 0201 	orr.w	r2, r2, #1
 80078ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ee:	e008      	b.n	8007902 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f042 0201 	orr.w	r2, r2, #1
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	e000      	b.n	8007904 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007902:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	40012c00 	.word	0x40012c00
 8007918:	40000400 	.word	0x40000400
 800791c:	40000800 	.word	0x40000800
 8007920:	40013400 	.word	0x40013400
 8007924:	40014000 	.word	0x40014000
 8007928:	00010007 	.word	0x00010007

0800792c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e049      	b.n	80079d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d106      	bne.n	8007958 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f841 	bl	80079da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3304      	adds	r3, #4
 8007968:	4619      	mov	r1, r3
 800796a:	4610      	mov	r0, r2
 800796c:	f000 fbe4 	bl	8008138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80079e2:	bf00      	nop
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
	...

080079f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d109      	bne.n	8007a14 <HAL_TIM_PWM_Start+0x24>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	bf14      	ite	ne
 8007a0c:	2301      	movne	r3, #1
 8007a0e:	2300      	moveq	r3, #0
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	e03c      	b.n	8007a8e <HAL_TIM_PWM_Start+0x9e>
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2b04      	cmp	r3, #4
 8007a18:	d109      	bne.n	8007a2e <HAL_TIM_PWM_Start+0x3e>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	bf14      	ite	ne
 8007a26:	2301      	movne	r3, #1
 8007a28:	2300      	moveq	r3, #0
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	e02f      	b.n	8007a8e <HAL_TIM_PWM_Start+0x9e>
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b08      	cmp	r3, #8
 8007a32:	d109      	bne.n	8007a48 <HAL_TIM_PWM_Start+0x58>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	bf14      	ite	ne
 8007a40:	2301      	movne	r3, #1
 8007a42:	2300      	moveq	r3, #0
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	e022      	b.n	8007a8e <HAL_TIM_PWM_Start+0x9e>
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2b0c      	cmp	r3, #12
 8007a4c:	d109      	bne.n	8007a62 <HAL_TIM_PWM_Start+0x72>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	bf14      	ite	ne
 8007a5a:	2301      	movne	r3, #1
 8007a5c:	2300      	moveq	r3, #0
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	e015      	b.n	8007a8e <HAL_TIM_PWM_Start+0x9e>
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b10      	cmp	r3, #16
 8007a66:	d109      	bne.n	8007a7c <HAL_TIM_PWM_Start+0x8c>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	bf14      	ite	ne
 8007a74:	2301      	movne	r3, #1
 8007a76:	2300      	moveq	r3, #0
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	e008      	b.n	8007a8e <HAL_TIM_PWM_Start+0x9e>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	bf14      	ite	ne
 8007a88:	2301      	movne	r3, #1
 8007a8a:	2300      	moveq	r3, #0
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e097      	b.n	8007bc6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d104      	bne.n	8007aa6 <HAL_TIM_PWM_Start+0xb6>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007aa4:	e023      	b.n	8007aee <HAL_TIM_PWM_Start+0xfe>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b04      	cmp	r3, #4
 8007aaa:	d104      	bne.n	8007ab6 <HAL_TIM_PWM_Start+0xc6>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ab4:	e01b      	b.n	8007aee <HAL_TIM_PWM_Start+0xfe>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d104      	bne.n	8007ac6 <HAL_TIM_PWM_Start+0xd6>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ac4:	e013      	b.n	8007aee <HAL_TIM_PWM_Start+0xfe>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b0c      	cmp	r3, #12
 8007aca:	d104      	bne.n	8007ad6 <HAL_TIM_PWM_Start+0xe6>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ad4:	e00b      	b.n	8007aee <HAL_TIM_PWM_Start+0xfe>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b10      	cmp	r3, #16
 8007ada:	d104      	bne.n	8007ae6 <HAL_TIM_PWM_Start+0xf6>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ae4:	e003      	b.n	8007aee <HAL_TIM_PWM_Start+0xfe>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2202      	movs	r2, #2
 8007aea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2201      	movs	r2, #1
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 ff4c 	bl	8008994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a33      	ldr	r2, [pc, #204]	@ (8007bd0 <HAL_TIM_PWM_Start+0x1e0>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d013      	beq.n	8007b2e <HAL_TIM_PWM_Start+0x13e>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a32      	ldr	r2, [pc, #200]	@ (8007bd4 <HAL_TIM_PWM_Start+0x1e4>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d00e      	beq.n	8007b2e <HAL_TIM_PWM_Start+0x13e>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a30      	ldr	r2, [pc, #192]	@ (8007bd8 <HAL_TIM_PWM_Start+0x1e8>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d009      	beq.n	8007b2e <HAL_TIM_PWM_Start+0x13e>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a2f      	ldr	r2, [pc, #188]	@ (8007bdc <HAL_TIM_PWM_Start+0x1ec>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d004      	beq.n	8007b2e <HAL_TIM_PWM_Start+0x13e>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a2d      	ldr	r2, [pc, #180]	@ (8007be0 <HAL_TIM_PWM_Start+0x1f0>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d101      	bne.n	8007b32 <HAL_TIM_PWM_Start+0x142>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e000      	b.n	8007b34 <HAL_TIM_PWM_Start+0x144>
 8007b32:	2300      	movs	r3, #0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d007      	beq.n	8007b48 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b46:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a20      	ldr	r2, [pc, #128]	@ (8007bd0 <HAL_TIM_PWM_Start+0x1e0>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d018      	beq.n	8007b84 <HAL_TIM_PWM_Start+0x194>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b5a:	d013      	beq.n	8007b84 <HAL_TIM_PWM_Start+0x194>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a20      	ldr	r2, [pc, #128]	@ (8007be4 <HAL_TIM_PWM_Start+0x1f4>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d00e      	beq.n	8007b84 <HAL_TIM_PWM_Start+0x194>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a1f      	ldr	r2, [pc, #124]	@ (8007be8 <HAL_TIM_PWM_Start+0x1f8>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d009      	beq.n	8007b84 <HAL_TIM_PWM_Start+0x194>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a17      	ldr	r2, [pc, #92]	@ (8007bd4 <HAL_TIM_PWM_Start+0x1e4>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d004      	beq.n	8007b84 <HAL_TIM_PWM_Start+0x194>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a16      	ldr	r2, [pc, #88]	@ (8007bd8 <HAL_TIM_PWM_Start+0x1e8>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d115      	bne.n	8007bb0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689a      	ldr	r2, [r3, #8]
 8007b8a:	4b18      	ldr	r3, [pc, #96]	@ (8007bec <HAL_TIM_PWM_Start+0x1fc>)
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b06      	cmp	r3, #6
 8007b94:	d015      	beq.n	8007bc2 <HAL_TIM_PWM_Start+0x1d2>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b9c:	d011      	beq.n	8007bc2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f042 0201 	orr.w	r2, r2, #1
 8007bac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bae:	e008      	b.n	8007bc2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0201 	orr.w	r2, r2, #1
 8007bbe:	601a      	str	r2, [r3, #0]
 8007bc0:	e000      	b.n	8007bc4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	40012c00 	.word	0x40012c00
 8007bd4:	40013400 	.word	0x40013400
 8007bd8:	40014000 	.word	0x40014000
 8007bdc:	40014400 	.word	0x40014400
 8007be0:	40014800 	.word	0x40014800
 8007be4:	40000400 	.word	0x40000400
 8007be8:	40000800 	.word	0x40000800
 8007bec:	00010007 	.word	0x00010007

08007bf0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	6839      	ldr	r1, [r7, #0]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 fec6 	bl	8008994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a3e      	ldr	r2, [pc, #248]	@ (8007d08 <HAL_TIM_PWM_Stop+0x118>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d013      	beq.n	8007c3a <HAL_TIM_PWM_Stop+0x4a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a3d      	ldr	r2, [pc, #244]	@ (8007d0c <HAL_TIM_PWM_Stop+0x11c>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d00e      	beq.n	8007c3a <HAL_TIM_PWM_Stop+0x4a>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a3b      	ldr	r2, [pc, #236]	@ (8007d10 <HAL_TIM_PWM_Stop+0x120>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d009      	beq.n	8007c3a <HAL_TIM_PWM_Stop+0x4a>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a3a      	ldr	r2, [pc, #232]	@ (8007d14 <HAL_TIM_PWM_Stop+0x124>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d004      	beq.n	8007c3a <HAL_TIM_PWM_Stop+0x4a>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a38      	ldr	r2, [pc, #224]	@ (8007d18 <HAL_TIM_PWM_Stop+0x128>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d101      	bne.n	8007c3e <HAL_TIM_PWM_Stop+0x4e>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e000      	b.n	8007c40 <HAL_TIM_PWM_Stop+0x50>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d017      	beq.n	8007c74 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6a1a      	ldr	r2, [r3, #32]
 8007c4a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007c4e:	4013      	ands	r3, r2
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10f      	bne.n	8007c74 <HAL_TIM_PWM_Stop+0x84>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6a1a      	ldr	r2, [r3, #32]
 8007c5a:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007c5e:	4013      	ands	r3, r2
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d107      	bne.n	8007c74 <HAL_TIM_PWM_Stop+0x84>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c72:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6a1a      	ldr	r2, [r3, #32]
 8007c7a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007c7e:	4013      	ands	r3, r2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10f      	bne.n	8007ca4 <HAL_TIM_PWM_Stop+0xb4>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6a1a      	ldr	r2, [r3, #32]
 8007c8a:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007c8e:	4013      	ands	r3, r2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d107      	bne.n	8007ca4 <HAL_TIM_PWM_Stop+0xb4>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0201 	bic.w	r2, r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d104      	bne.n	8007cb4 <HAL_TIM_PWM_Stop+0xc4>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cb2:	e023      	b.n	8007cfc <HAL_TIM_PWM_Stop+0x10c>
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d104      	bne.n	8007cc4 <HAL_TIM_PWM_Stop+0xd4>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cc2:	e01b      	b.n	8007cfc <HAL_TIM_PWM_Stop+0x10c>
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	2b08      	cmp	r3, #8
 8007cc8:	d104      	bne.n	8007cd4 <HAL_TIM_PWM_Stop+0xe4>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cd2:	e013      	b.n	8007cfc <HAL_TIM_PWM_Stop+0x10c>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b0c      	cmp	r3, #12
 8007cd8:	d104      	bne.n	8007ce4 <HAL_TIM_PWM_Stop+0xf4>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ce2:	e00b      	b.n	8007cfc <HAL_TIM_PWM_Stop+0x10c>
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2b10      	cmp	r3, #16
 8007ce8:	d104      	bne.n	8007cf4 <HAL_TIM_PWM_Stop+0x104>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cf2:	e003      	b.n	8007cfc <HAL_TIM_PWM_Stop+0x10c>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	40012c00 	.word	0x40012c00
 8007d0c:	40013400 	.word	0x40013400
 8007d10:	40014000 	.word	0x40014000
 8007d14:	40014400 	.word	0x40014400
 8007d18:	40014800 	.word	0x40014800

08007d1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d101      	bne.n	8007d3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d36:	2302      	movs	r3, #2
 8007d38:	e0ff      	b.n	8007f3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b14      	cmp	r3, #20
 8007d46:	f200 80f0 	bhi.w	8007f2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d50:	08007da5 	.word	0x08007da5
 8007d54:	08007f2b 	.word	0x08007f2b
 8007d58:	08007f2b 	.word	0x08007f2b
 8007d5c:	08007f2b 	.word	0x08007f2b
 8007d60:	08007de5 	.word	0x08007de5
 8007d64:	08007f2b 	.word	0x08007f2b
 8007d68:	08007f2b 	.word	0x08007f2b
 8007d6c:	08007f2b 	.word	0x08007f2b
 8007d70:	08007e27 	.word	0x08007e27
 8007d74:	08007f2b 	.word	0x08007f2b
 8007d78:	08007f2b 	.word	0x08007f2b
 8007d7c:	08007f2b 	.word	0x08007f2b
 8007d80:	08007e67 	.word	0x08007e67
 8007d84:	08007f2b 	.word	0x08007f2b
 8007d88:	08007f2b 	.word	0x08007f2b
 8007d8c:	08007f2b 	.word	0x08007f2b
 8007d90:	08007ea9 	.word	0x08007ea9
 8007d94:	08007f2b 	.word	0x08007f2b
 8007d98:	08007f2b 	.word	0x08007f2b
 8007d9c:	08007f2b 	.word	0x08007f2b
 8007da0:	08007ee9 	.word	0x08007ee9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68b9      	ldr	r1, [r7, #8]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 fa60 	bl	8008270 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	699a      	ldr	r2, [r3, #24]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f042 0208 	orr.w	r2, r2, #8
 8007dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	699a      	ldr	r2, [r3, #24]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f022 0204 	bic.w	r2, r2, #4
 8007dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6999      	ldr	r1, [r3, #24]
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	691a      	ldr	r2, [r3, #16]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	619a      	str	r2, [r3, #24]
      break;
 8007de2:	e0a5      	b.n	8007f30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68b9      	ldr	r1, [r7, #8]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 fad0 	bl	8008390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	699a      	ldr	r2, [r3, #24]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	699a      	ldr	r2, [r3, #24]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6999      	ldr	r1, [r3, #24]
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	021a      	lsls	r2, r3, #8
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	430a      	orrs	r2, r1
 8007e22:	619a      	str	r2, [r3, #24]
      break;
 8007e24:	e084      	b.n	8007f30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68b9      	ldr	r1, [r7, #8]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 fb39 	bl	80084a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	69da      	ldr	r2, [r3, #28]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f042 0208 	orr.w	r2, r2, #8
 8007e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	69da      	ldr	r2, [r3, #28]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f022 0204 	bic.w	r2, r2, #4
 8007e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	69d9      	ldr	r1, [r3, #28]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	691a      	ldr	r2, [r3, #16]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	430a      	orrs	r2, r1
 8007e62:	61da      	str	r2, [r3, #28]
      break;
 8007e64:	e064      	b.n	8007f30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68b9      	ldr	r1, [r7, #8]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 fba1 	bl	80085b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	69da      	ldr	r2, [r3, #28]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	69da      	ldr	r2, [r3, #28]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69d9      	ldr	r1, [r3, #28]
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	021a      	lsls	r2, r3, #8
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	61da      	str	r2, [r3, #28]
      break;
 8007ea6:	e043      	b.n	8007f30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68b9      	ldr	r1, [r7, #8]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 fc0a 	bl	80086c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f042 0208 	orr.w	r2, r2, #8
 8007ec2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0204 	bic.w	r2, r2, #4
 8007ed2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	691a      	ldr	r2, [r3, #16]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007ee6:	e023      	b.n	8007f30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68b9      	ldr	r1, [r7, #8]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 fc4e 	bl	8008790 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f12:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	021a      	lsls	r2, r3, #8
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	430a      	orrs	r2, r1
 8007f26:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007f28:	e002      	b.n	8007f30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3718      	adds	r7, #24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop

08007f44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d101      	bne.n	8007f60 <HAL_TIM_ConfigClockSource+0x1c>
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	e0de      	b.n	800811e <HAL_TIM_ConfigClockSource+0x1da>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007f7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a63      	ldr	r2, [pc, #396]	@ (8008128 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	f000 80a9 	beq.w	80080f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007fa0:	4a61      	ldr	r2, [pc, #388]	@ (8008128 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	f200 80ae 	bhi.w	8008104 <HAL_TIM_ConfigClockSource+0x1c0>
 8007fa8:	4a60      	ldr	r2, [pc, #384]	@ (800812c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	f000 80a1 	beq.w	80080f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007fb0:	4a5e      	ldr	r2, [pc, #376]	@ (800812c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	f200 80a6 	bhi.w	8008104 <HAL_TIM_ConfigClockSource+0x1c0>
 8007fb8:	4a5d      	ldr	r2, [pc, #372]	@ (8008130 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	f000 8099 	beq.w	80080f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007fc0:	4a5b      	ldr	r2, [pc, #364]	@ (8008130 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	f200 809e 	bhi.w	8008104 <HAL_TIM_ConfigClockSource+0x1c0>
 8007fc8:	4a5a      	ldr	r2, [pc, #360]	@ (8008134 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	f000 8091 	beq.w	80080f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007fd0:	4a58      	ldr	r2, [pc, #352]	@ (8008134 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	f200 8096 	bhi.w	8008104 <HAL_TIM_ConfigClockSource+0x1c0>
 8007fd8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007fdc:	f000 8089 	beq.w	80080f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007fe0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007fe4:	f200 808e 	bhi.w	8008104 <HAL_TIM_ConfigClockSource+0x1c0>
 8007fe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fec:	d03e      	beq.n	800806c <HAL_TIM_ConfigClockSource+0x128>
 8007fee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ff2:	f200 8087 	bhi.w	8008104 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ffa:	f000 8086 	beq.w	800810a <HAL_TIM_ConfigClockSource+0x1c6>
 8007ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008002:	d87f      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x1c0>
 8008004:	2b70      	cmp	r3, #112	@ 0x70
 8008006:	d01a      	beq.n	800803e <HAL_TIM_ConfigClockSource+0xfa>
 8008008:	2b70      	cmp	r3, #112	@ 0x70
 800800a:	d87b      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x1c0>
 800800c:	2b60      	cmp	r3, #96	@ 0x60
 800800e:	d050      	beq.n	80080b2 <HAL_TIM_ConfigClockSource+0x16e>
 8008010:	2b60      	cmp	r3, #96	@ 0x60
 8008012:	d877      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x1c0>
 8008014:	2b50      	cmp	r3, #80	@ 0x50
 8008016:	d03c      	beq.n	8008092 <HAL_TIM_ConfigClockSource+0x14e>
 8008018:	2b50      	cmp	r3, #80	@ 0x50
 800801a:	d873      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x1c0>
 800801c:	2b40      	cmp	r3, #64	@ 0x40
 800801e:	d058      	beq.n	80080d2 <HAL_TIM_ConfigClockSource+0x18e>
 8008020:	2b40      	cmp	r3, #64	@ 0x40
 8008022:	d86f      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x1c0>
 8008024:	2b30      	cmp	r3, #48	@ 0x30
 8008026:	d064      	beq.n	80080f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008028:	2b30      	cmp	r3, #48	@ 0x30
 800802a:	d86b      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x1c0>
 800802c:	2b20      	cmp	r3, #32
 800802e:	d060      	beq.n	80080f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008030:	2b20      	cmp	r3, #32
 8008032:	d867      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x1c0>
 8008034:	2b00      	cmp	r3, #0
 8008036:	d05c      	beq.n	80080f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008038:	2b10      	cmp	r3, #16
 800803a:	d05a      	beq.n	80080f2 <HAL_TIM_ConfigClockSource+0x1ae>
 800803c:	e062      	b.n	8008104 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800804e:	f000 fc81 	bl	8008954 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008060:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	609a      	str	r2, [r3, #8]
      break;
 800806a:	e04f      	b.n	800810c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800807c:	f000 fc6a 	bl	8008954 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689a      	ldr	r2, [r3, #8]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800808e:	609a      	str	r2, [r3, #8]
      break;
 8008090:	e03c      	b.n	800810c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800809e:	461a      	mov	r2, r3
 80080a0:	f000 fbdc 	bl	800885c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2150      	movs	r1, #80	@ 0x50
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 fc35 	bl	800891a <TIM_ITRx_SetConfig>
      break;
 80080b0:	e02c      	b.n	800810c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080be:	461a      	mov	r2, r3
 80080c0:	f000 fbfb 	bl	80088ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2160      	movs	r1, #96	@ 0x60
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 fc25 	bl	800891a <TIM_ITRx_SetConfig>
      break;
 80080d0:	e01c      	b.n	800810c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080de:	461a      	mov	r2, r3
 80080e0:	f000 fbbc 	bl	800885c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2140      	movs	r1, #64	@ 0x40
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 fc15 	bl	800891a <TIM_ITRx_SetConfig>
      break;
 80080f0:	e00c      	b.n	800810c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4619      	mov	r1, r3
 80080fc:	4610      	mov	r0, r2
 80080fe:	f000 fc0c 	bl	800891a <TIM_ITRx_SetConfig>
      break;
 8008102:	e003      	b.n	800810c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	73fb      	strb	r3, [r7, #15]
      break;
 8008108:	e000      	b.n	800810c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800810a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	00100070 	.word	0x00100070
 800812c:	00100040 	.word	0x00100040
 8008130:	00100030 	.word	0x00100030
 8008134:	00100020 	.word	0x00100020

08008138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a42      	ldr	r2, [pc, #264]	@ (8008254 <TIM_Base_SetConfig+0x11c>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d00f      	beq.n	8008170 <TIM_Base_SetConfig+0x38>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008156:	d00b      	beq.n	8008170 <TIM_Base_SetConfig+0x38>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a3f      	ldr	r2, [pc, #252]	@ (8008258 <TIM_Base_SetConfig+0x120>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d007      	beq.n	8008170 <TIM_Base_SetConfig+0x38>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a3e      	ldr	r2, [pc, #248]	@ (800825c <TIM_Base_SetConfig+0x124>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d003      	beq.n	8008170 <TIM_Base_SetConfig+0x38>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a3d      	ldr	r2, [pc, #244]	@ (8008260 <TIM_Base_SetConfig+0x128>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d108      	bne.n	8008182 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	4313      	orrs	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a33      	ldr	r2, [pc, #204]	@ (8008254 <TIM_Base_SetConfig+0x11c>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d01b      	beq.n	80081c2 <TIM_Base_SetConfig+0x8a>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008190:	d017      	beq.n	80081c2 <TIM_Base_SetConfig+0x8a>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a30      	ldr	r2, [pc, #192]	@ (8008258 <TIM_Base_SetConfig+0x120>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d013      	beq.n	80081c2 <TIM_Base_SetConfig+0x8a>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a2f      	ldr	r2, [pc, #188]	@ (800825c <TIM_Base_SetConfig+0x124>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d00f      	beq.n	80081c2 <TIM_Base_SetConfig+0x8a>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a2e      	ldr	r2, [pc, #184]	@ (8008260 <TIM_Base_SetConfig+0x128>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d00b      	beq.n	80081c2 <TIM_Base_SetConfig+0x8a>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a2d      	ldr	r2, [pc, #180]	@ (8008264 <TIM_Base_SetConfig+0x12c>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d007      	beq.n	80081c2 <TIM_Base_SetConfig+0x8a>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a2c      	ldr	r2, [pc, #176]	@ (8008268 <TIM_Base_SetConfig+0x130>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d003      	beq.n	80081c2 <TIM_Base_SetConfig+0x8a>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a2b      	ldr	r2, [pc, #172]	@ (800826c <TIM_Base_SetConfig+0x134>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d108      	bne.n	80081d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	689a      	ldr	r2, [r3, #8]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a16      	ldr	r2, [pc, #88]	@ (8008254 <TIM_Base_SetConfig+0x11c>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d00f      	beq.n	8008220 <TIM_Base_SetConfig+0xe8>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a17      	ldr	r2, [pc, #92]	@ (8008260 <TIM_Base_SetConfig+0x128>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d00b      	beq.n	8008220 <TIM_Base_SetConfig+0xe8>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a16      	ldr	r2, [pc, #88]	@ (8008264 <TIM_Base_SetConfig+0x12c>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d007      	beq.n	8008220 <TIM_Base_SetConfig+0xe8>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a15      	ldr	r2, [pc, #84]	@ (8008268 <TIM_Base_SetConfig+0x130>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d003      	beq.n	8008220 <TIM_Base_SetConfig+0xe8>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a14      	ldr	r2, [pc, #80]	@ (800826c <TIM_Base_SetConfig+0x134>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d103      	bne.n	8008228 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	691a      	ldr	r2, [r3, #16]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	2b01      	cmp	r3, #1
 8008238:	d105      	bne.n	8008246 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	f023 0201 	bic.w	r2, r3, #1
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	611a      	str	r2, [r3, #16]
  }
}
 8008246:	bf00      	nop
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	40012c00 	.word	0x40012c00
 8008258:	40000400 	.word	0x40000400
 800825c:	40000800 	.word	0x40000800
 8008260:	40013400 	.word	0x40013400
 8008264:	40014000 	.word	0x40014000
 8008268:	40014400 	.word	0x40014400
 800826c:	40014800 	.word	0x40014800

08008270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008270:	b480      	push	{r7}
 8008272:	b087      	sub	sp, #28
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a1b      	ldr	r3, [r3, #32]
 8008284:	f023 0201 	bic.w	r2, r3, #1
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800829e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f023 0303 	bic.w	r3, r3, #3
 80082aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f023 0302 	bic.w	r3, r3, #2
 80082bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a2c      	ldr	r2, [pc, #176]	@ (800837c <TIM_OC1_SetConfig+0x10c>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d00f      	beq.n	80082f0 <TIM_OC1_SetConfig+0x80>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a2b      	ldr	r2, [pc, #172]	@ (8008380 <TIM_OC1_SetConfig+0x110>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d00b      	beq.n	80082f0 <TIM_OC1_SetConfig+0x80>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a2a      	ldr	r2, [pc, #168]	@ (8008384 <TIM_OC1_SetConfig+0x114>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d007      	beq.n	80082f0 <TIM_OC1_SetConfig+0x80>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a29      	ldr	r2, [pc, #164]	@ (8008388 <TIM_OC1_SetConfig+0x118>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d003      	beq.n	80082f0 <TIM_OC1_SetConfig+0x80>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a28      	ldr	r2, [pc, #160]	@ (800838c <TIM_OC1_SetConfig+0x11c>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d10c      	bne.n	800830a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	f023 0308 	bic.w	r3, r3, #8
 80082f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	4313      	orrs	r3, r2
 8008300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	f023 0304 	bic.w	r3, r3, #4
 8008308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a1b      	ldr	r2, [pc, #108]	@ (800837c <TIM_OC1_SetConfig+0x10c>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d00f      	beq.n	8008332 <TIM_OC1_SetConfig+0xc2>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a1a      	ldr	r2, [pc, #104]	@ (8008380 <TIM_OC1_SetConfig+0x110>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d00b      	beq.n	8008332 <TIM_OC1_SetConfig+0xc2>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a19      	ldr	r2, [pc, #100]	@ (8008384 <TIM_OC1_SetConfig+0x114>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d007      	beq.n	8008332 <TIM_OC1_SetConfig+0xc2>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a18      	ldr	r2, [pc, #96]	@ (8008388 <TIM_OC1_SetConfig+0x118>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d003      	beq.n	8008332 <TIM_OC1_SetConfig+0xc2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a17      	ldr	r2, [pc, #92]	@ (800838c <TIM_OC1_SetConfig+0x11c>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d111      	bne.n	8008356 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	4313      	orrs	r3, r2
 800834a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	4313      	orrs	r3, r2
 8008354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	621a      	str	r2, [r3, #32]
}
 8008370:	bf00      	nop
 8008372:	371c      	adds	r7, #28
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	40012c00 	.word	0x40012c00
 8008380:	40013400 	.word	0x40013400
 8008384:	40014000 	.word	0x40014000
 8008388:	40014400 	.word	0x40014400
 800838c:	40014800 	.word	0x40014800

08008390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008390:	b480      	push	{r7}
 8008392:	b087      	sub	sp, #28
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a1b      	ldr	r3, [r3, #32]
 80083a4:	f023 0210 	bic.w	r2, r3, #16
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	021b      	lsls	r3, r3, #8
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f023 0320 	bic.w	r3, r3, #32
 80083de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	011b      	lsls	r3, r3, #4
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a28      	ldr	r2, [pc, #160]	@ (8008490 <TIM_OC2_SetConfig+0x100>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d003      	beq.n	80083fc <TIM_OC2_SetConfig+0x6c>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a27      	ldr	r2, [pc, #156]	@ (8008494 <TIM_OC2_SetConfig+0x104>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d10d      	bne.n	8008418 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	011b      	lsls	r3, r3, #4
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	4313      	orrs	r3, r2
 800840e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008416:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a1d      	ldr	r2, [pc, #116]	@ (8008490 <TIM_OC2_SetConfig+0x100>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d00f      	beq.n	8008440 <TIM_OC2_SetConfig+0xb0>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a1c      	ldr	r2, [pc, #112]	@ (8008494 <TIM_OC2_SetConfig+0x104>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d00b      	beq.n	8008440 <TIM_OC2_SetConfig+0xb0>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a1b      	ldr	r2, [pc, #108]	@ (8008498 <TIM_OC2_SetConfig+0x108>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d007      	beq.n	8008440 <TIM_OC2_SetConfig+0xb0>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a1a      	ldr	r2, [pc, #104]	@ (800849c <TIM_OC2_SetConfig+0x10c>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d003      	beq.n	8008440 <TIM_OC2_SetConfig+0xb0>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a19      	ldr	r2, [pc, #100]	@ (80084a0 <TIM_OC2_SetConfig+0x110>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d113      	bne.n	8008468 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008446:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800844e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	4313      	orrs	r3, r2
 800845a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	4313      	orrs	r3, r2
 8008466:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	621a      	str	r2, [r3, #32]
}
 8008482:	bf00      	nop
 8008484:	371c      	adds	r7, #28
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	40012c00 	.word	0x40012c00
 8008494:	40013400 	.word	0x40013400
 8008498:	40014000 	.word	0x40014000
 800849c:	40014400 	.word	0x40014400
 80084a0:	40014800 	.word	0x40014800

080084a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b087      	sub	sp, #28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a1b      	ldr	r3, [r3, #32]
 80084b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f023 0303 	bic.w	r3, r3, #3
 80084de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80084f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	021b      	lsls	r3, r3, #8
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a27      	ldr	r2, [pc, #156]	@ (80085a0 <TIM_OC3_SetConfig+0xfc>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d003      	beq.n	800850e <TIM_OC3_SetConfig+0x6a>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a26      	ldr	r2, [pc, #152]	@ (80085a4 <TIM_OC3_SetConfig+0x100>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d10d      	bne.n	800852a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008514:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	021b      	lsls	r3, r3, #8
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	4313      	orrs	r3, r2
 8008520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a1c      	ldr	r2, [pc, #112]	@ (80085a0 <TIM_OC3_SetConfig+0xfc>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d00f      	beq.n	8008552 <TIM_OC3_SetConfig+0xae>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a1b      	ldr	r2, [pc, #108]	@ (80085a4 <TIM_OC3_SetConfig+0x100>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d00b      	beq.n	8008552 <TIM_OC3_SetConfig+0xae>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a1a      	ldr	r2, [pc, #104]	@ (80085a8 <TIM_OC3_SetConfig+0x104>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d007      	beq.n	8008552 <TIM_OC3_SetConfig+0xae>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a19      	ldr	r2, [pc, #100]	@ (80085ac <TIM_OC3_SetConfig+0x108>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d003      	beq.n	8008552 <TIM_OC3_SetConfig+0xae>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a18      	ldr	r2, [pc, #96]	@ (80085b0 <TIM_OC3_SetConfig+0x10c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d113      	bne.n	800857a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	011b      	lsls	r3, r3, #4
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	4313      	orrs	r3, r2
 800856c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	011b      	lsls	r3, r3, #4
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	4313      	orrs	r3, r2
 8008578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	685a      	ldr	r2, [r3, #4]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	621a      	str	r2, [r3, #32]
}
 8008594:	bf00      	nop
 8008596:	371c      	adds	r7, #28
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	40012c00 	.word	0x40012c00
 80085a4:	40013400 	.word	0x40013400
 80085a8:	40014000 	.word	0x40014000
 80085ac:	40014400 	.word	0x40014400
 80085b0:	40014800 	.word	0x40014800

080085b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	021b      	lsls	r3, r3, #8
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	031b      	lsls	r3, r3, #12
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	4313      	orrs	r3, r2
 800860e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a28      	ldr	r2, [pc, #160]	@ (80086b4 <TIM_OC4_SetConfig+0x100>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d003      	beq.n	8008620 <TIM_OC4_SetConfig+0x6c>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a27      	ldr	r2, [pc, #156]	@ (80086b8 <TIM_OC4_SetConfig+0x104>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d10d      	bne.n	800863c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	031b      	lsls	r3, r3, #12
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	4313      	orrs	r3, r2
 8008632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800863a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a1d      	ldr	r2, [pc, #116]	@ (80086b4 <TIM_OC4_SetConfig+0x100>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d00f      	beq.n	8008664 <TIM_OC4_SetConfig+0xb0>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a1c      	ldr	r2, [pc, #112]	@ (80086b8 <TIM_OC4_SetConfig+0x104>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d00b      	beq.n	8008664 <TIM_OC4_SetConfig+0xb0>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a1b      	ldr	r2, [pc, #108]	@ (80086bc <TIM_OC4_SetConfig+0x108>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d007      	beq.n	8008664 <TIM_OC4_SetConfig+0xb0>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a1a      	ldr	r2, [pc, #104]	@ (80086c0 <TIM_OC4_SetConfig+0x10c>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d003      	beq.n	8008664 <TIM_OC4_SetConfig+0xb0>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a19      	ldr	r2, [pc, #100]	@ (80086c4 <TIM_OC4_SetConfig+0x110>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d113      	bne.n	800868c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800866a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008672:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	695b      	ldr	r3, [r3, #20]
 8008678:	019b      	lsls	r3, r3, #6
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	4313      	orrs	r3, r2
 800867e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	019b      	lsls	r3, r3, #6
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	4313      	orrs	r3, r2
 800868a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	621a      	str	r2, [r3, #32]
}
 80086a6:	bf00      	nop
 80086a8:	371c      	adds	r7, #28
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	40012c00 	.word	0x40012c00
 80086b8:	40013400 	.word	0x40013400
 80086bc:	40014000 	.word	0x40014000
 80086c0:	40014400 	.word	0x40014400
 80086c4:	40014800 	.word	0x40014800

080086c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a1b      	ldr	r3, [r3, #32]
 80086dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	4313      	orrs	r3, r2
 8008704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800870c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	041b      	lsls	r3, r3, #16
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	4313      	orrs	r3, r2
 8008718:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a17      	ldr	r2, [pc, #92]	@ (800877c <TIM_OC5_SetConfig+0xb4>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d00f      	beq.n	8008742 <TIM_OC5_SetConfig+0x7a>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a16      	ldr	r2, [pc, #88]	@ (8008780 <TIM_OC5_SetConfig+0xb8>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d00b      	beq.n	8008742 <TIM_OC5_SetConfig+0x7a>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a15      	ldr	r2, [pc, #84]	@ (8008784 <TIM_OC5_SetConfig+0xbc>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d007      	beq.n	8008742 <TIM_OC5_SetConfig+0x7a>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a14      	ldr	r2, [pc, #80]	@ (8008788 <TIM_OC5_SetConfig+0xc0>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d003      	beq.n	8008742 <TIM_OC5_SetConfig+0x7a>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a13      	ldr	r2, [pc, #76]	@ (800878c <TIM_OC5_SetConfig+0xc4>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d109      	bne.n	8008756 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008748:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	021b      	lsls	r3, r3, #8
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	4313      	orrs	r3, r2
 8008754:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	621a      	str	r2, [r3, #32]
}
 8008770:	bf00      	nop
 8008772:	371c      	adds	r7, #28
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	40012c00 	.word	0x40012c00
 8008780:	40013400 	.word	0x40013400
 8008784:	40014000 	.word	0x40014000
 8008788:	40014400 	.word	0x40014400
 800878c:	40014800 	.word	0x40014800

08008790 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008790:	b480      	push	{r7}
 8008792:	b087      	sub	sp, #28
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a1b      	ldr	r3, [r3, #32]
 80087a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	021b      	lsls	r3, r3, #8
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80087d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	051b      	lsls	r3, r3, #20
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a18      	ldr	r2, [pc, #96]	@ (8008848 <TIM_OC6_SetConfig+0xb8>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d00f      	beq.n	800880c <TIM_OC6_SetConfig+0x7c>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a17      	ldr	r2, [pc, #92]	@ (800884c <TIM_OC6_SetConfig+0xbc>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d00b      	beq.n	800880c <TIM_OC6_SetConfig+0x7c>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a16      	ldr	r2, [pc, #88]	@ (8008850 <TIM_OC6_SetConfig+0xc0>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d007      	beq.n	800880c <TIM_OC6_SetConfig+0x7c>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a15      	ldr	r2, [pc, #84]	@ (8008854 <TIM_OC6_SetConfig+0xc4>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d003      	beq.n	800880c <TIM_OC6_SetConfig+0x7c>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a14      	ldr	r2, [pc, #80]	@ (8008858 <TIM_OC6_SetConfig+0xc8>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d109      	bne.n	8008820 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008812:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	029b      	lsls	r3, r3, #10
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	4313      	orrs	r3, r2
 800881e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	693a      	ldr	r2, [r7, #16]
 8008838:	621a      	str	r2, [r3, #32]
}
 800883a:	bf00      	nop
 800883c:	371c      	adds	r7, #28
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	40012c00 	.word	0x40012c00
 800884c:	40013400 	.word	0x40013400
 8008850:	40014000 	.word	0x40014000
 8008854:	40014400 	.word	0x40014400
 8008858:	40014800 	.word	0x40014800

0800885c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800885c:	b480      	push	{r7}
 800885e:	b087      	sub	sp, #28
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6a1b      	ldr	r3, [r3, #32]
 800886c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	f023 0201 	bic.w	r2, r3, #1
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	011b      	lsls	r3, r3, #4
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	4313      	orrs	r3, r2
 8008890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	f023 030a 	bic.w	r3, r3, #10
 8008898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	4313      	orrs	r3, r2
 80088a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	621a      	str	r2, [r3, #32]
}
 80088ae:	bf00      	nop
 80088b0:	371c      	adds	r7, #28
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088ba:	b480      	push	{r7}
 80088bc:	b087      	sub	sp, #28
 80088be:	af00      	add	r7, sp, #0
 80088c0:	60f8      	str	r0, [r7, #12]
 80088c2:	60b9      	str	r1, [r7, #8]
 80088c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6a1b      	ldr	r3, [r3, #32]
 80088d0:	f023 0210 	bic.w	r2, r3, #16
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80088e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	031b      	lsls	r3, r3, #12
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80088f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	011b      	lsls	r3, r3, #4
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	4313      	orrs	r3, r2
 8008900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	697a      	ldr	r2, [r7, #20]
 800890c:	621a      	str	r2, [r3, #32]
}
 800890e:	bf00      	nop
 8008910:	371c      	adds	r7, #28
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800891a:	b480      	push	{r7}
 800891c:	b085      	sub	sp, #20
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	4313      	orrs	r3, r2
 800893c:	f043 0307 	orr.w	r3, r3, #7
 8008940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	609a      	str	r2, [r3, #8]
}
 8008948:	bf00      	nop
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008954:	b480      	push	{r7}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
 8008960:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800896e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	021a      	lsls	r2, r3, #8
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	431a      	orrs	r2, r3
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	4313      	orrs	r3, r2
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	4313      	orrs	r3, r2
 8008980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	609a      	str	r2, [r3, #8]
}
 8008988:	bf00      	nop
 800898a:	371c      	adds	r7, #28
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008994:	b480      	push	{r7}
 8008996:	b087      	sub	sp, #28
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f003 031f 	and.w	r3, r3, #31
 80089a6:	2201      	movs	r2, #1
 80089a8:	fa02 f303 	lsl.w	r3, r2, r3
 80089ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6a1a      	ldr	r2, [r3, #32]
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	43db      	mvns	r3, r3
 80089b6:	401a      	ands	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6a1a      	ldr	r2, [r3, #32]
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f003 031f 	and.w	r3, r3, #31
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	fa01 f303 	lsl.w	r3, r1, r3
 80089cc:	431a      	orrs	r2, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	621a      	str	r2, [r3, #32]
}
 80089d2:	bf00      	nop
 80089d4:	371c      	adds	r7, #28
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
	...

080089e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d101      	bne.n	80089f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089f4:	2302      	movs	r3, #2
 80089f6:	e065      	b.n	8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2202      	movs	r2, #2
 8008a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a2c      	ldr	r2, [pc, #176]	@ (8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d004      	beq.n	8008a2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a2b      	ldr	r2, [pc, #172]	@ (8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d108      	bne.n	8008a3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008a32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008a44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a1b      	ldr	r2, [pc, #108]	@ (8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d018      	beq.n	8008a98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a6e:	d013      	beq.n	8008a98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a18      	ldr	r2, [pc, #96]	@ (8008ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d00e      	beq.n	8008a98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a17      	ldr	r2, [pc, #92]	@ (8008adc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d009      	beq.n	8008a98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a12      	ldr	r2, [pc, #72]	@ (8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d004      	beq.n	8008a98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a13      	ldr	r2, [pc, #76]	@ (8008ae0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d10c      	bne.n	8008ab2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	40012c00 	.word	0x40012c00
 8008ad4:	40013400 	.word	0x40013400
 8008ad8:	40000400 	.word	0x40000400
 8008adc:	40000800 	.word	0x40000800
 8008ae0:	40014000 	.word	0x40014000

08008ae4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008aee:	2300      	movs	r3, #0
 8008af0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d101      	bne.n	8008b00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008afc:	2302      	movs	r3, #2
 8008afe:	e073      	b.n	8008be8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b66:	4313      	orrs	r3, r2
 8008b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	699b      	ldr	r3, [r3, #24]
 8008b74:	041b      	lsls	r3, r3, #16
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	69db      	ldr	r3, [r3, #28]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a19      	ldr	r2, [pc, #100]	@ (8008bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d004      	beq.n	8008b9c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a18      	ldr	r2, [pc, #96]	@ (8008bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d11c      	bne.n	8008bd6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba6:	051b      	lsls	r3, r3, #20
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr
 8008bf4:	40012c00 	.word	0x40012c00
 8008bf8:	40013400 	.word	0x40013400

08008bfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e042      	b.n	8008c94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d106      	bne.n	8008c26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7f9 fba1 	bl	8002368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2224      	movs	r2, #36	@ 0x24
 8008c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f022 0201 	bic.w	r2, r2, #1
 8008c3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d002      	beq.n	8008c4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 ff6e 	bl	8009b28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fc9f 	bl	8009590 <UART_SetConfig>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d101      	bne.n	8008c5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e01b      	b.n	8008c94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	685a      	ldr	r2, [r3, #4]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	689a      	ldr	r2, [r3, #8]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f042 0201 	orr.w	r2, r2, #1
 8008c8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 ffed 	bl	8009c6c <UART_CheckIdleState>
 8008c92:	4603      	mov	r3, r0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b08a      	sub	sp, #40	@ 0x28
 8008ca0:	af02      	add	r7, sp, #8
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	603b      	str	r3, [r7, #0]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cb2:	2b20      	cmp	r3, #32
 8008cb4:	d17b      	bne.n	8008dae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <HAL_UART_Transmit+0x26>
 8008cbc:	88fb      	ldrh	r3, [r7, #6]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d101      	bne.n	8008cc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e074      	b.n	8008db0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2221      	movs	r2, #33	@ 0x21
 8008cd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cd6:	f7f9 fd35 	bl	8002744 <HAL_GetTick>
 8008cda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	88fa      	ldrh	r2, [r7, #6]
 8008ce0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	88fa      	ldrh	r2, [r7, #6]
 8008ce8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cf4:	d108      	bne.n	8008d08 <HAL_UART_Transmit+0x6c>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d104      	bne.n	8008d08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	61bb      	str	r3, [r7, #24]
 8008d06:	e003      	b.n	8008d10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d10:	e030      	b.n	8008d74 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	2180      	movs	r1, #128	@ 0x80
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f001 f84f 	bl	8009dc0 <UART_WaitOnFlagUntilTimeout>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2220      	movs	r2, #32
 8008d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e03d      	b.n	8008db0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10b      	bne.n	8008d52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	881b      	ldrh	r3, [r3, #0]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	3302      	adds	r3, #2
 8008d4e:	61bb      	str	r3, [r7, #24]
 8008d50:	e007      	b.n	8008d62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	781a      	ldrb	r2, [r3, #0]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1c8      	bne.n	8008d12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	2200      	movs	r2, #0
 8008d88:	2140      	movs	r1, #64	@ 0x40
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f001 f818 	bl	8009dc0 <UART_WaitOnFlagUntilTimeout>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d005      	beq.n	8008da2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	e006      	b.n	8008db0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2220      	movs	r2, #32
 8008da6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	e000      	b.n	8008db0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008dae:	2302      	movs	r3, #2
  }
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3720      	adds	r7, #32
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b08a      	sub	sp, #40	@ 0x28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dcc:	2b20      	cmp	r3, #32
 8008dce:	d167      	bne.n	8008ea0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d002      	beq.n	8008ddc <HAL_UART_Transmit_DMA+0x24>
 8008dd6:	88fb      	ldrh	r3, [r7, #6]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d101      	bne.n	8008de0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e060      	b.n	8008ea2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	88fa      	ldrh	r2, [r7, #6]
 8008dea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	88fa      	ldrh	r2, [r7, #6]
 8008df2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2221      	movs	r2, #33	@ 0x21
 8008e02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d028      	beq.n	8008e60 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e12:	4a26      	ldr	r2, [pc, #152]	@ (8008eac <HAL_UART_Transmit_DMA+0xf4>)
 8008e14:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e1a:	4a25      	ldr	r2, [pc, #148]	@ (8008eb0 <HAL_UART_Transmit_DMA+0xf8>)
 8008e1c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e22:	4a24      	ldr	r2, [pc, #144]	@ (8008eb4 <HAL_UART_Transmit_DMA+0xfc>)
 8008e24:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e36:	4619      	mov	r1, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	3328      	adds	r3, #40	@ 0x28
 8008e3e:	461a      	mov	r2, r3
 8008e40:	88fb      	ldrh	r3, [r7, #6]
 8008e42:	f7fc fc6b 	bl	800571c <HAL_DMA_Start_IT>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d009      	beq.n	8008e60 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2210      	movs	r2, #16
 8008e50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2220      	movs	r2, #32
 8008e58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e020      	b.n	8008ea2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2240      	movs	r2, #64	@ 0x40
 8008e66:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	3308      	adds	r3, #8
 8008e6e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	e853 3f00 	ldrex	r3, [r3]
 8008e76:	613b      	str	r3, [r7, #16]
   return(result);
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	3308      	adds	r3, #8
 8008e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e88:	623a      	str	r2, [r7, #32]
 8008e8a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8c:	69f9      	ldr	r1, [r7, #28]
 8008e8e:	6a3a      	ldr	r2, [r7, #32]
 8008e90:	e841 2300 	strex	r3, r2, [r1]
 8008e94:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1e5      	bne.n	8008e68 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	e000      	b.n	8008ea2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008ea0:	2302      	movs	r3, #2
  }
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3728      	adds	r7, #40	@ 0x28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	0800a137 	.word	0x0800a137
 8008eb0:	0800a1d1 	.word	0x0800a1d1
 8008eb4:	0800a357 	.word	0x0800a357

08008eb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b0ba      	sub	sp, #232	@ 0xe8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	69db      	ldr	r3, [r3, #28]
 8008ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008ede:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008ee2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008eec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d11b      	bne.n	8008f2c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ef8:	f003 0320 	and.w	r3, r3, #32
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d015      	beq.n	8008f2c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f04:	f003 0320 	and.w	r3, r3, #32
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d105      	bne.n	8008f18 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d009      	beq.n	8008f2c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f000 82e3 	beq.w	80094e8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	4798      	blx	r3
      }
      return;
 8008f2a:	e2dd      	b.n	80094e8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008f2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 8123 	beq.w	800917c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008f36:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008f3a:	4b8d      	ldr	r3, [pc, #564]	@ (8009170 <HAL_UART_IRQHandler+0x2b8>)
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d106      	bne.n	8008f50 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008f42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008f46:	4b8b      	ldr	r3, [pc, #556]	@ (8009174 <HAL_UART_IRQHandler+0x2bc>)
 8008f48:	4013      	ands	r3, r2
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f000 8116 	beq.w	800917c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f54:	f003 0301 	and.w	r3, r3, #1
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d011      	beq.n	8008f80 <HAL_UART_IRQHandler+0xc8>
 8008f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00b      	beq.n	8008f80 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f76:	f043 0201 	orr.w	r2, r3, #1
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f84:	f003 0302 	and.w	r3, r3, #2
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d011      	beq.n	8008fb0 <HAL_UART_IRQHandler+0xf8>
 8008f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f90:	f003 0301 	and.w	r3, r3, #1
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00b      	beq.n	8008fb0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fa6:	f043 0204 	orr.w	r2, r3, #4
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d011      	beq.n	8008fe0 <HAL_UART_IRQHandler+0x128>
 8008fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00b      	beq.n	8008fe0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2204      	movs	r2, #4
 8008fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fd6:	f043 0202 	orr.w	r2, r3, #2
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fe4:	f003 0308 	and.w	r3, r3, #8
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d017      	beq.n	800901c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ff0:	f003 0320 	and.w	r3, r3, #32
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d105      	bne.n	8009004 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008ff8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ffc:	4b5c      	ldr	r3, [pc, #368]	@ (8009170 <HAL_UART_IRQHandler+0x2b8>)
 8008ffe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2208      	movs	r2, #8
 800900a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009012:	f043 0208 	orr.w	r2, r3, #8
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800901c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009024:	2b00      	cmp	r3, #0
 8009026:	d012      	beq.n	800904e <HAL_UART_IRQHandler+0x196>
 8009028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800902c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00c      	beq.n	800904e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800903c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009044:	f043 0220 	orr.w	r2, r3, #32
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009054:	2b00      	cmp	r3, #0
 8009056:	f000 8249 	beq.w	80094ec <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800905a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800905e:	f003 0320 	and.w	r3, r3, #32
 8009062:	2b00      	cmp	r3, #0
 8009064:	d013      	beq.n	800908e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800906a:	f003 0320 	and.w	r3, r3, #32
 800906e:	2b00      	cmp	r3, #0
 8009070:	d105      	bne.n	800907e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d007      	beq.n	800908e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009082:	2b00      	cmp	r3, #0
 8009084:	d003      	beq.n	800908e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009094:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090a2:	2b40      	cmp	r3, #64	@ 0x40
 80090a4:	d005      	beq.n	80090b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80090a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80090aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d054      	beq.n	800915c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 ffd9 	bl	800a06a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090c2:	2b40      	cmp	r3, #64	@ 0x40
 80090c4:	d146      	bne.n	8009154 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	3308      	adds	r3, #8
 80090cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090d4:	e853 3f00 	ldrex	r3, [r3]
 80090d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80090dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80090e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	3308      	adds	r3, #8
 80090ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80090f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80090f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80090fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009102:	e841 2300 	strex	r3, r2, [r1]
 8009106:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800910a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1d9      	bne.n	80090c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009118:	2b00      	cmp	r3, #0
 800911a:	d017      	beq.n	800914c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009122:	4a15      	ldr	r2, [pc, #84]	@ (8009178 <HAL_UART_IRQHandler+0x2c0>)
 8009124:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800912c:	4618      	mov	r0, r3
 800912e:	f7fc fbc9 	bl	80058c4 <HAL_DMA_Abort_IT>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d019      	beq.n	800916c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800913e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009146:	4610      	mov	r0, r2
 8009148:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800914a:	e00f      	b.n	800916c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f9ff 	bl	8009550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009152:	e00b      	b.n	800916c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f9fb 	bl	8009550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800915a:	e007      	b.n	800916c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f9f7 	bl	8009550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800916a:	e1bf      	b.n	80094ec <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800916c:	bf00      	nop
    return;
 800916e:	e1bd      	b.n	80094ec <HAL_UART_IRQHandler+0x634>
 8009170:	10000001 	.word	0x10000001
 8009174:	04000120 	.word	0x04000120
 8009178:	0800a3d7 	.word	0x0800a3d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009180:	2b01      	cmp	r3, #1
 8009182:	f040 8153 	bne.w	800942c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800918a:	f003 0310 	and.w	r3, r3, #16
 800918e:	2b00      	cmp	r3, #0
 8009190:	f000 814c 	beq.w	800942c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009198:	f003 0310 	and.w	r3, r3, #16
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 8145 	beq.w	800942c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2210      	movs	r2, #16
 80091a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091b4:	2b40      	cmp	r3, #64	@ 0x40
 80091b6:	f040 80bb 	bne.w	8009330 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80091c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 818f 	beq.w	80094f0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80091d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80091dc:	429a      	cmp	r2, r3
 80091de:	f080 8187 	bcs.w	80094f0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80091e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 0320 	and.w	r3, r3, #32
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f040 8087 	bne.w	800930e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800920c:	e853 3f00 	ldrex	r3, [r3]
 8009210:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009214:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800921c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	461a      	mov	r2, r3
 8009226:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800922a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800922e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009232:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009236:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800923a:	e841 2300 	strex	r3, r2, [r1]
 800923e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009242:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1da      	bne.n	8009200 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3308      	adds	r3, #8
 8009250:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009252:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009254:	e853 3f00 	ldrex	r3, [r3]
 8009258:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800925a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800925c:	f023 0301 	bic.w	r3, r3, #1
 8009260:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3308      	adds	r3, #8
 800926a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800926e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009272:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009274:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009276:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800927a:	e841 2300 	strex	r3, r2, [r1]
 800927e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009280:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1e1      	bne.n	800924a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3308      	adds	r3, #8
 800928c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009290:	e853 3f00 	ldrex	r3, [r3]
 8009294:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009296:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009298:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800929c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3308      	adds	r3, #8
 80092a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80092aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80092ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80092b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80092b2:	e841 2300 	strex	r3, r2, [r1]
 80092b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80092b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1e3      	bne.n	8009286 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2220      	movs	r2, #32
 80092c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092d4:	e853 3f00 	ldrex	r3, [r3]
 80092d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80092da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092dc:	f023 0310 	bic.w	r3, r3, #16
 80092e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	461a      	mov	r2, r3
 80092ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80092f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80092f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80092fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e4      	bne.n	80092cc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009308:	4618      	mov	r0, r3
 800930a:	f7fc fa82 	bl	8005812 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2202      	movs	r2, #2
 8009312:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009320:	b29b      	uxth	r3, r3
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	b29b      	uxth	r3, r3
 8009326:	4619      	mov	r1, r3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f003 f81b 	bl	800c364 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800932e:	e0df      	b.n	80094f0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800933c:	b29b      	uxth	r3, r3
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800934a:	b29b      	uxth	r3, r3
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 80d1 	beq.w	80094f4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009352:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009356:	2b00      	cmp	r3, #0
 8009358:	f000 80cc 	beq.w	80094f4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009364:	e853 3f00 	ldrex	r3, [r3]
 8009368:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800936a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800936c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009370:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	461a      	mov	r2, r3
 800937a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800937e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009380:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009382:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009384:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009386:	e841 2300 	strex	r3, r2, [r1]
 800938a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800938c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1e4      	bne.n	800935c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	3308      	adds	r3, #8
 8009398:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939c:	e853 3f00 	ldrex	r3, [r3]
 80093a0:	623b      	str	r3, [r7, #32]
   return(result);
 80093a2:	6a3b      	ldr	r3, [r7, #32]
 80093a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093a8:	f023 0301 	bic.w	r3, r3, #1
 80093ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3308      	adds	r3, #8
 80093b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80093ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80093bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093c2:	e841 2300 	strex	r3, r2, [r1]
 80093c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1e1      	bne.n	8009392 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	e853 3f00 	ldrex	r3, [r3]
 80093ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f023 0310 	bic.w	r3, r3, #16
 80093f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	461a      	mov	r2, r3
 8009400:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009404:	61fb      	str	r3, [r7, #28]
 8009406:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009408:	69b9      	ldr	r1, [r7, #24]
 800940a:	69fa      	ldr	r2, [r7, #28]
 800940c:	e841 2300 	strex	r3, r2, [r1]
 8009410:	617b      	str	r3, [r7, #20]
   return(result);
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d1e4      	bne.n	80093e2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2202      	movs	r2, #2
 800941c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800941e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009422:	4619      	mov	r1, r3
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f002 ff9d 	bl	800c364 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800942a:	e063      	b.n	80094f4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800942c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009430:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00e      	beq.n	8009456 <HAL_UART_IRQHandler+0x59e>
 8009438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800943c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d008      	beq.n	8009456 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800944c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f001 f802 	bl	800a458 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009454:	e051      	b.n	80094fa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800945a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800945e:	2b00      	cmp	r3, #0
 8009460:	d014      	beq.n	800948c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800946a:	2b00      	cmp	r3, #0
 800946c:	d105      	bne.n	800947a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800946e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009472:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009476:	2b00      	cmp	r3, #0
 8009478:	d008      	beq.n	800948c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800947e:	2b00      	cmp	r3, #0
 8009480:	d03a      	beq.n	80094f8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	4798      	blx	r3
    }
    return;
 800948a:	e035      	b.n	80094f8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800948c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009494:	2b00      	cmp	r3, #0
 8009496:	d009      	beq.n	80094ac <HAL_UART_IRQHandler+0x5f4>
 8009498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800949c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d003      	beq.n	80094ac <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 ffac 	bl	800a402 <UART_EndTransmit_IT>
    return;
 80094aa:	e026      	b.n	80094fa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80094ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d009      	beq.n	80094cc <HAL_UART_IRQHandler+0x614>
 80094b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d003      	beq.n	80094cc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 ffdb 	bl	800a480 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094ca:	e016      	b.n	80094fa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80094cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d010      	beq.n	80094fa <HAL_UART_IRQHandler+0x642>
 80094d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	da0c      	bge.n	80094fa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 ffc3 	bl	800a46c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094e6:	e008      	b.n	80094fa <HAL_UART_IRQHandler+0x642>
      return;
 80094e8:	bf00      	nop
 80094ea:	e006      	b.n	80094fa <HAL_UART_IRQHandler+0x642>
    return;
 80094ec:	bf00      	nop
 80094ee:	e004      	b.n	80094fa <HAL_UART_IRQHandler+0x642>
      return;
 80094f0:	bf00      	nop
 80094f2:	e002      	b.n	80094fa <HAL_UART_IRQHandler+0x642>
      return;
 80094f4:	bf00      	nop
 80094f6:	e000      	b.n	80094fa <HAL_UART_IRQHandler+0x642>
    return;
 80094f8:	bf00      	nop
  }
}
 80094fa:	37e8      	adds	r7, #232	@ 0xe8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009572:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800957a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	4313      	orrs	r3, r2
}
 8009582:	4618      	mov	r0, r3
 8009584:	3714      	adds	r7, #20
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
	...

08009590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009594:	b08c      	sub	sp, #48	@ 0x30
 8009596:	af00      	add	r7, sp, #0
 8009598:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	689a      	ldr	r2, [r3, #8]
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	431a      	orrs	r2, r3
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	431a      	orrs	r2, r3
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	69db      	ldr	r3, [r3, #28]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	4bab      	ldr	r3, [pc, #684]	@ (800986c <UART_SetConfig+0x2dc>)
 80095c0:	4013      	ands	r3, r2
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	6812      	ldr	r2, [r2, #0]
 80095c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095c8:	430b      	orrs	r3, r1
 80095ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	68da      	ldr	r2, [r3, #12]
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	430a      	orrs	r2, r1
 80095e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4aa0      	ldr	r2, [pc, #640]	@ (8009870 <UART_SetConfig+0x2e0>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d004      	beq.n	80095fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095f8:	4313      	orrs	r3, r2
 80095fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009606:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	6812      	ldr	r2, [r2, #0]
 800960e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009610:	430b      	orrs	r3, r1
 8009612:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961a:	f023 010f 	bic.w	r1, r3, #15
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	430a      	orrs	r2, r1
 8009628:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a91      	ldr	r2, [pc, #580]	@ (8009874 <UART_SetConfig+0x2e4>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d125      	bne.n	8009680 <UART_SetConfig+0xf0>
 8009634:	4b90      	ldr	r3, [pc, #576]	@ (8009878 <UART_SetConfig+0x2e8>)
 8009636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800963a:	f003 0303 	and.w	r3, r3, #3
 800963e:	2b03      	cmp	r3, #3
 8009640:	d81a      	bhi.n	8009678 <UART_SetConfig+0xe8>
 8009642:	a201      	add	r2, pc, #4	@ (adr r2, 8009648 <UART_SetConfig+0xb8>)
 8009644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009648:	08009659 	.word	0x08009659
 800964c:	08009669 	.word	0x08009669
 8009650:	08009661 	.word	0x08009661
 8009654:	08009671 	.word	0x08009671
 8009658:	2301      	movs	r3, #1
 800965a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800965e:	e0d6      	b.n	800980e <UART_SetConfig+0x27e>
 8009660:	2302      	movs	r3, #2
 8009662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009666:	e0d2      	b.n	800980e <UART_SetConfig+0x27e>
 8009668:	2304      	movs	r3, #4
 800966a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800966e:	e0ce      	b.n	800980e <UART_SetConfig+0x27e>
 8009670:	2308      	movs	r3, #8
 8009672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009676:	e0ca      	b.n	800980e <UART_SetConfig+0x27e>
 8009678:	2310      	movs	r3, #16
 800967a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800967e:	e0c6      	b.n	800980e <UART_SetConfig+0x27e>
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a7d      	ldr	r2, [pc, #500]	@ (800987c <UART_SetConfig+0x2ec>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d138      	bne.n	80096fc <UART_SetConfig+0x16c>
 800968a:	4b7b      	ldr	r3, [pc, #492]	@ (8009878 <UART_SetConfig+0x2e8>)
 800968c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009690:	f003 030c 	and.w	r3, r3, #12
 8009694:	2b0c      	cmp	r3, #12
 8009696:	d82d      	bhi.n	80096f4 <UART_SetConfig+0x164>
 8009698:	a201      	add	r2, pc, #4	@ (adr r2, 80096a0 <UART_SetConfig+0x110>)
 800969a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969e:	bf00      	nop
 80096a0:	080096d5 	.word	0x080096d5
 80096a4:	080096f5 	.word	0x080096f5
 80096a8:	080096f5 	.word	0x080096f5
 80096ac:	080096f5 	.word	0x080096f5
 80096b0:	080096e5 	.word	0x080096e5
 80096b4:	080096f5 	.word	0x080096f5
 80096b8:	080096f5 	.word	0x080096f5
 80096bc:	080096f5 	.word	0x080096f5
 80096c0:	080096dd 	.word	0x080096dd
 80096c4:	080096f5 	.word	0x080096f5
 80096c8:	080096f5 	.word	0x080096f5
 80096cc:	080096f5 	.word	0x080096f5
 80096d0:	080096ed 	.word	0x080096ed
 80096d4:	2300      	movs	r3, #0
 80096d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096da:	e098      	b.n	800980e <UART_SetConfig+0x27e>
 80096dc:	2302      	movs	r3, #2
 80096de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096e2:	e094      	b.n	800980e <UART_SetConfig+0x27e>
 80096e4:	2304      	movs	r3, #4
 80096e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096ea:	e090      	b.n	800980e <UART_SetConfig+0x27e>
 80096ec:	2308      	movs	r3, #8
 80096ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096f2:	e08c      	b.n	800980e <UART_SetConfig+0x27e>
 80096f4:	2310      	movs	r3, #16
 80096f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096fa:	e088      	b.n	800980e <UART_SetConfig+0x27e>
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a5f      	ldr	r2, [pc, #380]	@ (8009880 <UART_SetConfig+0x2f0>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d125      	bne.n	8009752 <UART_SetConfig+0x1c2>
 8009706:	4b5c      	ldr	r3, [pc, #368]	@ (8009878 <UART_SetConfig+0x2e8>)
 8009708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800970c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009710:	2b30      	cmp	r3, #48	@ 0x30
 8009712:	d016      	beq.n	8009742 <UART_SetConfig+0x1b2>
 8009714:	2b30      	cmp	r3, #48	@ 0x30
 8009716:	d818      	bhi.n	800974a <UART_SetConfig+0x1ba>
 8009718:	2b20      	cmp	r3, #32
 800971a:	d00a      	beq.n	8009732 <UART_SetConfig+0x1a2>
 800971c:	2b20      	cmp	r3, #32
 800971e:	d814      	bhi.n	800974a <UART_SetConfig+0x1ba>
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <UART_SetConfig+0x19a>
 8009724:	2b10      	cmp	r3, #16
 8009726:	d008      	beq.n	800973a <UART_SetConfig+0x1aa>
 8009728:	e00f      	b.n	800974a <UART_SetConfig+0x1ba>
 800972a:	2300      	movs	r3, #0
 800972c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009730:	e06d      	b.n	800980e <UART_SetConfig+0x27e>
 8009732:	2302      	movs	r3, #2
 8009734:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009738:	e069      	b.n	800980e <UART_SetConfig+0x27e>
 800973a:	2304      	movs	r3, #4
 800973c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009740:	e065      	b.n	800980e <UART_SetConfig+0x27e>
 8009742:	2308      	movs	r3, #8
 8009744:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009748:	e061      	b.n	800980e <UART_SetConfig+0x27e>
 800974a:	2310      	movs	r3, #16
 800974c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009750:	e05d      	b.n	800980e <UART_SetConfig+0x27e>
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a4b      	ldr	r2, [pc, #300]	@ (8009884 <UART_SetConfig+0x2f4>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d125      	bne.n	80097a8 <UART_SetConfig+0x218>
 800975c:	4b46      	ldr	r3, [pc, #280]	@ (8009878 <UART_SetConfig+0x2e8>)
 800975e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009762:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009766:	2bc0      	cmp	r3, #192	@ 0xc0
 8009768:	d016      	beq.n	8009798 <UART_SetConfig+0x208>
 800976a:	2bc0      	cmp	r3, #192	@ 0xc0
 800976c:	d818      	bhi.n	80097a0 <UART_SetConfig+0x210>
 800976e:	2b80      	cmp	r3, #128	@ 0x80
 8009770:	d00a      	beq.n	8009788 <UART_SetConfig+0x1f8>
 8009772:	2b80      	cmp	r3, #128	@ 0x80
 8009774:	d814      	bhi.n	80097a0 <UART_SetConfig+0x210>
 8009776:	2b00      	cmp	r3, #0
 8009778:	d002      	beq.n	8009780 <UART_SetConfig+0x1f0>
 800977a:	2b40      	cmp	r3, #64	@ 0x40
 800977c:	d008      	beq.n	8009790 <UART_SetConfig+0x200>
 800977e:	e00f      	b.n	80097a0 <UART_SetConfig+0x210>
 8009780:	2300      	movs	r3, #0
 8009782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009786:	e042      	b.n	800980e <UART_SetConfig+0x27e>
 8009788:	2302      	movs	r3, #2
 800978a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800978e:	e03e      	b.n	800980e <UART_SetConfig+0x27e>
 8009790:	2304      	movs	r3, #4
 8009792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009796:	e03a      	b.n	800980e <UART_SetConfig+0x27e>
 8009798:	2308      	movs	r3, #8
 800979a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800979e:	e036      	b.n	800980e <UART_SetConfig+0x27e>
 80097a0:	2310      	movs	r3, #16
 80097a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097a6:	e032      	b.n	800980e <UART_SetConfig+0x27e>
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a30      	ldr	r2, [pc, #192]	@ (8009870 <UART_SetConfig+0x2e0>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d12a      	bne.n	8009808 <UART_SetConfig+0x278>
 80097b2:	4b31      	ldr	r3, [pc, #196]	@ (8009878 <UART_SetConfig+0x2e8>)
 80097b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80097bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097c0:	d01a      	beq.n	80097f8 <UART_SetConfig+0x268>
 80097c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097c6:	d81b      	bhi.n	8009800 <UART_SetConfig+0x270>
 80097c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097cc:	d00c      	beq.n	80097e8 <UART_SetConfig+0x258>
 80097ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097d2:	d815      	bhi.n	8009800 <UART_SetConfig+0x270>
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <UART_SetConfig+0x250>
 80097d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097dc:	d008      	beq.n	80097f0 <UART_SetConfig+0x260>
 80097de:	e00f      	b.n	8009800 <UART_SetConfig+0x270>
 80097e0:	2300      	movs	r3, #0
 80097e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097e6:	e012      	b.n	800980e <UART_SetConfig+0x27e>
 80097e8:	2302      	movs	r3, #2
 80097ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097ee:	e00e      	b.n	800980e <UART_SetConfig+0x27e>
 80097f0:	2304      	movs	r3, #4
 80097f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097f6:	e00a      	b.n	800980e <UART_SetConfig+0x27e>
 80097f8:	2308      	movs	r3, #8
 80097fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097fe:	e006      	b.n	800980e <UART_SetConfig+0x27e>
 8009800:	2310      	movs	r3, #16
 8009802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009806:	e002      	b.n	800980e <UART_SetConfig+0x27e>
 8009808:	2310      	movs	r3, #16
 800980a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a17      	ldr	r2, [pc, #92]	@ (8009870 <UART_SetConfig+0x2e0>)
 8009814:	4293      	cmp	r3, r2
 8009816:	f040 80a8 	bne.w	800996a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800981a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800981e:	2b08      	cmp	r3, #8
 8009820:	d834      	bhi.n	800988c <UART_SetConfig+0x2fc>
 8009822:	a201      	add	r2, pc, #4	@ (adr r2, 8009828 <UART_SetConfig+0x298>)
 8009824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009828:	0800984d 	.word	0x0800984d
 800982c:	0800988d 	.word	0x0800988d
 8009830:	08009855 	.word	0x08009855
 8009834:	0800988d 	.word	0x0800988d
 8009838:	0800985b 	.word	0x0800985b
 800983c:	0800988d 	.word	0x0800988d
 8009840:	0800988d 	.word	0x0800988d
 8009844:	0800988d 	.word	0x0800988d
 8009848:	08009863 	.word	0x08009863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800984c:	f7fd f912 	bl	8006a74 <HAL_RCC_GetPCLK1Freq>
 8009850:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009852:	e021      	b.n	8009898 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009854:	4b0c      	ldr	r3, [pc, #48]	@ (8009888 <UART_SetConfig+0x2f8>)
 8009856:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009858:	e01e      	b.n	8009898 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800985a:	f7fd f89d 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 800985e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009860:	e01a      	b.n	8009898 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009862:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009866:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009868:	e016      	b.n	8009898 <UART_SetConfig+0x308>
 800986a:	bf00      	nop
 800986c:	cfff69f3 	.word	0xcfff69f3
 8009870:	40008000 	.word	0x40008000
 8009874:	40013800 	.word	0x40013800
 8009878:	40021000 	.word	0x40021000
 800987c:	40004400 	.word	0x40004400
 8009880:	40004800 	.word	0x40004800
 8009884:	40004c00 	.word	0x40004c00
 8009888:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800988c:	2300      	movs	r3, #0
 800988e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009896:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 812a 	beq.w	8009af4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a4:	4a9e      	ldr	r2, [pc, #632]	@ (8009b20 <UART_SetConfig+0x590>)
 80098a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098aa:	461a      	mov	r2, r3
 80098ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80098b2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	685a      	ldr	r2, [r3, #4]
 80098b8:	4613      	mov	r3, r2
 80098ba:	005b      	lsls	r3, r3, #1
 80098bc:	4413      	add	r3, r2
 80098be:	69ba      	ldr	r2, [r7, #24]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d305      	bcc.n	80098d0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80098ca:	69ba      	ldr	r2, [r7, #24]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d903      	bls.n	80098d8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80098d6:	e10d      	b.n	8009af4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098da:	2200      	movs	r2, #0
 80098dc:	60bb      	str	r3, [r7, #8]
 80098de:	60fa      	str	r2, [r7, #12]
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098e4:	4a8e      	ldr	r2, [pc, #568]	@ (8009b20 <UART_SetConfig+0x590>)
 80098e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	2200      	movs	r2, #0
 80098ee:	603b      	str	r3, [r7, #0]
 80098f0:	607a      	str	r2, [r7, #4]
 80098f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80098fa:	f7f7 f9ed 	bl	8000cd8 <__aeabi_uldivmod>
 80098fe:	4602      	mov	r2, r0
 8009900:	460b      	mov	r3, r1
 8009902:	4610      	mov	r0, r2
 8009904:	4619      	mov	r1, r3
 8009906:	f04f 0200 	mov.w	r2, #0
 800990a:	f04f 0300 	mov.w	r3, #0
 800990e:	020b      	lsls	r3, r1, #8
 8009910:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009914:	0202      	lsls	r2, r0, #8
 8009916:	6979      	ldr	r1, [r7, #20]
 8009918:	6849      	ldr	r1, [r1, #4]
 800991a:	0849      	lsrs	r1, r1, #1
 800991c:	2000      	movs	r0, #0
 800991e:	460c      	mov	r4, r1
 8009920:	4605      	mov	r5, r0
 8009922:	eb12 0804 	adds.w	r8, r2, r4
 8009926:	eb43 0905 	adc.w	r9, r3, r5
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	469a      	mov	sl, r3
 8009932:	4693      	mov	fp, r2
 8009934:	4652      	mov	r2, sl
 8009936:	465b      	mov	r3, fp
 8009938:	4640      	mov	r0, r8
 800993a:	4649      	mov	r1, r9
 800993c:	f7f7 f9cc 	bl	8000cd8 <__aeabi_uldivmod>
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	4613      	mov	r3, r2
 8009946:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800994e:	d308      	bcc.n	8009962 <UART_SetConfig+0x3d2>
 8009950:	6a3b      	ldr	r3, [r7, #32]
 8009952:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009956:	d204      	bcs.n	8009962 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6a3a      	ldr	r2, [r7, #32]
 800995e:	60da      	str	r2, [r3, #12]
 8009960:	e0c8      	b.n	8009af4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009968:	e0c4      	b.n	8009af4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	69db      	ldr	r3, [r3, #28]
 800996e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009972:	d167      	bne.n	8009a44 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009974:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009978:	2b08      	cmp	r3, #8
 800997a:	d828      	bhi.n	80099ce <UART_SetConfig+0x43e>
 800997c:	a201      	add	r2, pc, #4	@ (adr r2, 8009984 <UART_SetConfig+0x3f4>)
 800997e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009982:	bf00      	nop
 8009984:	080099a9 	.word	0x080099a9
 8009988:	080099b1 	.word	0x080099b1
 800998c:	080099b9 	.word	0x080099b9
 8009990:	080099cf 	.word	0x080099cf
 8009994:	080099bf 	.word	0x080099bf
 8009998:	080099cf 	.word	0x080099cf
 800999c:	080099cf 	.word	0x080099cf
 80099a0:	080099cf 	.word	0x080099cf
 80099a4:	080099c7 	.word	0x080099c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099a8:	f7fd f864 	bl	8006a74 <HAL_RCC_GetPCLK1Freq>
 80099ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099ae:	e014      	b.n	80099da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099b0:	f7fd f876 	bl	8006aa0 <HAL_RCC_GetPCLK2Freq>
 80099b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099b6:	e010      	b.n	80099da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099b8:	4b5a      	ldr	r3, [pc, #360]	@ (8009b24 <UART_SetConfig+0x594>)
 80099ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099bc:	e00d      	b.n	80099da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099be:	f7fc ffeb 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 80099c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099c4:	e009      	b.n	80099da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099cc:	e005      	b.n	80099da <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80099ce:	2300      	movs	r3, #0
 80099d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80099d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80099da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f000 8089 	beq.w	8009af4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e6:	4a4e      	ldr	r2, [pc, #312]	@ (8009b20 <UART_SetConfig+0x590>)
 80099e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099ec:	461a      	mov	r2, r3
 80099ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80099f4:	005a      	lsls	r2, r3, #1
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	085b      	lsrs	r3, r3, #1
 80099fc:	441a      	add	r2, r3
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a08:	6a3b      	ldr	r3, [r7, #32]
 8009a0a:	2b0f      	cmp	r3, #15
 8009a0c:	d916      	bls.n	8009a3c <UART_SetConfig+0x4ac>
 8009a0e:	6a3b      	ldr	r3, [r7, #32]
 8009a10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a14:	d212      	bcs.n	8009a3c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a16:	6a3b      	ldr	r3, [r7, #32]
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	f023 030f 	bic.w	r3, r3, #15
 8009a1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a20:	6a3b      	ldr	r3, [r7, #32]
 8009a22:	085b      	lsrs	r3, r3, #1
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	8bfb      	ldrh	r3, [r7, #30]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	8bfa      	ldrh	r2, [r7, #30]
 8009a38:	60da      	str	r2, [r3, #12]
 8009a3a:	e05b      	b.n	8009af4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009a42:	e057      	b.n	8009af4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a44:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a48:	2b08      	cmp	r3, #8
 8009a4a:	d828      	bhi.n	8009a9e <UART_SetConfig+0x50e>
 8009a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a54 <UART_SetConfig+0x4c4>)
 8009a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a52:	bf00      	nop
 8009a54:	08009a79 	.word	0x08009a79
 8009a58:	08009a81 	.word	0x08009a81
 8009a5c:	08009a89 	.word	0x08009a89
 8009a60:	08009a9f 	.word	0x08009a9f
 8009a64:	08009a8f 	.word	0x08009a8f
 8009a68:	08009a9f 	.word	0x08009a9f
 8009a6c:	08009a9f 	.word	0x08009a9f
 8009a70:	08009a9f 	.word	0x08009a9f
 8009a74:	08009a97 	.word	0x08009a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a78:	f7fc fffc 	bl	8006a74 <HAL_RCC_GetPCLK1Freq>
 8009a7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a7e:	e014      	b.n	8009aaa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a80:	f7fd f80e 	bl	8006aa0 <HAL_RCC_GetPCLK2Freq>
 8009a84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a86:	e010      	b.n	8009aaa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a88:	4b26      	ldr	r3, [pc, #152]	@ (8009b24 <UART_SetConfig+0x594>)
 8009a8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a8c:	e00d      	b.n	8009aaa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a8e:	f7fc ff83 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 8009a92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a94:	e009      	b.n	8009aaa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a9c:	e005      	b.n	8009aaa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009aa8:	bf00      	nop
    }

    if (pclk != 0U)
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d021      	beq.n	8009af4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab4:	4a1a      	ldr	r2, [pc, #104]	@ (8009b20 <UART_SetConfig+0x590>)
 8009ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009aba:	461a      	mov	r2, r3
 8009abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009abe:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	085b      	lsrs	r3, r3, #1
 8009ac8:	441a      	add	r2, r3
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ad2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ad4:	6a3b      	ldr	r3, [r7, #32]
 8009ad6:	2b0f      	cmp	r3, #15
 8009ad8:	d909      	bls.n	8009aee <UART_SetConfig+0x55e>
 8009ada:	6a3b      	ldr	r3, [r7, #32]
 8009adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ae0:	d205      	bcs.n	8009aee <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ae2:	6a3b      	ldr	r3, [r7, #32]
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	60da      	str	r2, [r3, #12]
 8009aec:	e002      	b.n	8009af4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	2200      	movs	r2, #0
 8009b08:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009b10:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3730      	adds	r7, #48	@ 0x30
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b1e:	bf00      	nop
 8009b20:	08013928 	.word	0x08013928
 8009b24:	00f42400 	.word	0x00f42400

08009b28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b34:	f003 0308 	and.w	r3, r3, #8
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00a      	beq.n	8009b52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b56:	f003 0301 	and.w	r3, r3, #1
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00a      	beq.n	8009b74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	430a      	orrs	r2, r1
 8009b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b78:	f003 0302 	and.w	r3, r3, #2
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00a      	beq.n	8009b96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	430a      	orrs	r2, r1
 8009b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b9a:	f003 0304 	and.w	r3, r3, #4
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00a      	beq.n	8009bb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	430a      	orrs	r2, r1
 8009bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bbc:	f003 0310 	and.w	r3, r3, #16
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00a      	beq.n	8009bda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bde:	f003 0320 	and.w	r3, r3, #32
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00a      	beq.n	8009bfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	430a      	orrs	r2, r1
 8009bfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d01a      	beq.n	8009c3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	430a      	orrs	r2, r1
 8009c1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c26:	d10a      	bne.n	8009c3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	430a      	orrs	r2, r1
 8009c3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d00a      	beq.n	8009c60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	430a      	orrs	r2, r1
 8009c5e:	605a      	str	r2, [r3, #4]
  }
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b098      	sub	sp, #96	@ 0x60
 8009c70:	af02      	add	r7, sp, #8
 8009c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c7c:	f7f8 fd62 	bl	8002744 <HAL_GetTick>
 8009c80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 0308 	and.w	r3, r3, #8
 8009c8c:	2b08      	cmp	r3, #8
 8009c8e:	d12f      	bne.n	8009cf0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 f88e 	bl	8009dc0 <UART_WaitOnFlagUntilTimeout>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d022      	beq.n	8009cf0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb2:	e853 3f00 	ldrex	r3, [r3]
 8009cb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ccc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cd0:	e841 2300 	strex	r3, r2, [r1]
 8009cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1e6      	bne.n	8009caa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2220      	movs	r2, #32
 8009ce0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cec:	2303      	movs	r3, #3
 8009cee:	e063      	b.n	8009db8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 0304 	and.w	r3, r3, #4
 8009cfa:	2b04      	cmp	r3, #4
 8009cfc:	d149      	bne.n	8009d92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cfe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d06:	2200      	movs	r2, #0
 8009d08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 f857 	bl	8009dc0 <UART_WaitOnFlagUntilTimeout>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d03c      	beq.n	8009d92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d20:	e853 3f00 	ldrex	r3, [r3]
 8009d24:	623b      	str	r3, [r7, #32]
   return(result);
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	461a      	mov	r2, r3
 8009d34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d36:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d3e:	e841 2300 	strex	r3, r2, [r1]
 8009d42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1e6      	bne.n	8009d18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3308      	adds	r3, #8
 8009d50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	e853 3f00 	ldrex	r3, [r3]
 8009d58:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f023 0301 	bic.w	r3, r3, #1
 8009d60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	3308      	adds	r3, #8
 8009d68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d6a:	61fa      	str	r2, [r7, #28]
 8009d6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6e:	69b9      	ldr	r1, [r7, #24]
 8009d70:	69fa      	ldr	r2, [r7, #28]
 8009d72:	e841 2300 	strex	r3, r2, [r1]
 8009d76:	617b      	str	r3, [r7, #20]
   return(result);
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1e5      	bne.n	8009d4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2220      	movs	r2, #32
 8009d82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	e012      	b.n	8009db8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2220      	movs	r2, #32
 8009d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2220      	movs	r2, #32
 8009d9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3758      	adds	r7, #88	@ 0x58
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	603b      	str	r3, [r7, #0]
 8009dcc:	4613      	mov	r3, r2
 8009dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dd0:	e04f      	b.n	8009e72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd8:	d04b      	beq.n	8009e72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dda:	f7f8 fcb3 	bl	8002744 <HAL_GetTick>
 8009dde:	4602      	mov	r2, r0
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	69ba      	ldr	r2, [r7, #24]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d302      	bcc.n	8009df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d101      	bne.n	8009df4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009df0:	2303      	movs	r3, #3
 8009df2:	e04e      	b.n	8009e92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 0304 	and.w	r3, r3, #4
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d037      	beq.n	8009e72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	2b80      	cmp	r3, #128	@ 0x80
 8009e06:	d034      	beq.n	8009e72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2b40      	cmp	r3, #64	@ 0x40
 8009e0c:	d031      	beq.n	8009e72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	69db      	ldr	r3, [r3, #28]
 8009e14:	f003 0308 	and.w	r3, r3, #8
 8009e18:	2b08      	cmp	r3, #8
 8009e1a:	d110      	bne.n	8009e3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2208      	movs	r2, #8
 8009e22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f000 f920 	bl	800a06a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2208      	movs	r2, #8
 8009e2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e029      	b.n	8009e92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	69db      	ldr	r3, [r3, #28]
 8009e44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e4c:	d111      	bne.n	8009e72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f000 f906 	bl	800a06a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2220      	movs	r2, #32
 8009e62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	e00f      	b.n	8009e92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	69da      	ldr	r2, [r3, #28]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	bf0c      	ite	eq
 8009e82:	2301      	moveq	r3, #1
 8009e84:	2300      	movne	r3, #0
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	461a      	mov	r2, r3
 8009e8a:	79fb      	ldrb	r3, [r7, #7]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d0a0      	beq.n	8009dd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
	...

08009e9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b096      	sub	sp, #88	@ 0x58
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	88fa      	ldrh	r2, [r7, #6]
 8009eb4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2222      	movs	r2, #34	@ 0x22
 8009ec4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d02d      	beq.n	8009f2e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ed8:	4a40      	ldr	r2, [pc, #256]	@ (8009fdc <UART_Start_Receive_DMA+0x140>)
 8009eda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ee2:	4a3f      	ldr	r2, [pc, #252]	@ (8009fe0 <UART_Start_Receive_DMA+0x144>)
 8009ee4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eec:	4a3d      	ldr	r2, [pc, #244]	@ (8009fe4 <UART_Start_Receive_DMA+0x148>)
 8009eee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	3324      	adds	r3, #36	@ 0x24
 8009f06:	4619      	mov	r1, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	88fb      	ldrh	r3, [r7, #6]
 8009f10:	f7fb fc04 	bl	800571c <HAL_DMA_Start_IT>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d009      	beq.n	8009f2e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2210      	movs	r2, #16
 8009f1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2220      	movs	r2, #32
 8009f26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e051      	b.n	8009fd2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d018      	beq.n	8009f68 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f3e:	e853 3f00 	ldrex	r3, [r3]
 8009f42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	461a      	mov	r2, r3
 8009f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f56:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f58:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f5c:	e841 2300 	strex	r3, r2, [r1]
 8009f60:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1e6      	bne.n	8009f36 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	3308      	adds	r3, #8
 8009f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f72:	e853 3f00 	ldrex	r3, [r3]
 8009f76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7a:	f043 0301 	orr.w	r3, r3, #1
 8009f7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	3308      	adds	r3, #8
 8009f86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009f88:	637a      	str	r2, [r7, #52]	@ 0x34
 8009f8a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f90:	e841 2300 	strex	r3, r2, [r1]
 8009f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1e5      	bne.n	8009f68 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	3308      	adds	r3, #8
 8009fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	e853 3f00 	ldrex	r3, [r3]
 8009faa:	613b      	str	r3, [r7, #16]
   return(result);
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	3308      	adds	r3, #8
 8009fba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009fbc:	623a      	str	r2, [r7, #32]
 8009fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc0:	69f9      	ldr	r1, [r7, #28]
 8009fc2:	6a3a      	ldr	r2, [r7, #32]
 8009fc4:	e841 2300 	strex	r3, r2, [r1]
 8009fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1e5      	bne.n	8009f9c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3758      	adds	r7, #88	@ 0x58
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	0800a1ed 	.word	0x0800a1ed
 8009fe0:	0800a319 	.word	0x0800a319
 8009fe4:	0800a357 	.word	0x0800a357

08009fe8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b08f      	sub	sp, #60	@ 0x3c
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff6:	6a3b      	ldr	r3, [r7, #32]
 8009ff8:	e853 3f00 	ldrex	r3, [r3]
 8009ffc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a004:	637b      	str	r3, [r7, #52]	@ 0x34
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	461a      	mov	r2, r3
 800a00c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a00e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a010:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a012:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a014:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a016:	e841 2300 	strex	r3, r2, [r1]
 800a01a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1e6      	bne.n	8009ff0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3308      	adds	r3, #8
 800a028:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	60bb      	str	r3, [r7, #8]
   return(result);
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a038:	633b      	str	r3, [r7, #48]	@ 0x30
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	3308      	adds	r3, #8
 800a040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a042:	61ba      	str	r2, [r7, #24]
 800a044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a046:	6979      	ldr	r1, [r7, #20]
 800a048:	69ba      	ldr	r2, [r7, #24]
 800a04a:	e841 2300 	strex	r3, r2, [r1]
 800a04e:	613b      	str	r3, [r7, #16]
   return(result);
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1e5      	bne.n	800a022 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2220      	movs	r2, #32
 800a05a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a05e:	bf00      	nop
 800a060:	373c      	adds	r7, #60	@ 0x3c
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr

0800a06a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a06a:	b480      	push	{r7}
 800a06c:	b095      	sub	sp, #84	@ 0x54
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a07a:	e853 3f00 	ldrex	r3, [r3]
 800a07e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a082:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a086:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	461a      	mov	r2, r3
 800a08e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a090:	643b      	str	r3, [r7, #64]	@ 0x40
 800a092:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a094:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a096:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a098:	e841 2300 	strex	r3, r2, [r1]
 800a09c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1e6      	bne.n	800a072 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3308      	adds	r3, #8
 800a0aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ac:	6a3b      	ldr	r3, [r7, #32]
 800a0ae:	e853 3f00 	ldrex	r3, [r3]
 800a0b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0ba:	f023 0301 	bic.w	r3, r3, #1
 800a0be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3308      	adds	r3, #8
 800a0c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0d0:	e841 2300 	strex	r3, r2, [r1]
 800a0d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1e3      	bne.n	800a0a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d118      	bne.n	800a116 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	e853 3f00 	ldrex	r3, [r3]
 800a0f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	f023 0310 	bic.w	r3, r3, #16
 800a0f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	461a      	mov	r2, r3
 800a100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a102:	61bb      	str	r3, [r7, #24]
 800a104:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a106:	6979      	ldr	r1, [r7, #20]
 800a108:	69ba      	ldr	r2, [r7, #24]
 800a10a:	e841 2300 	strex	r3, r2, [r1]
 800a10e:	613b      	str	r3, [r7, #16]
   return(result);
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1e6      	bne.n	800a0e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2220      	movs	r2, #32
 800a11a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a12a:	bf00      	nop
 800a12c:	3754      	adds	r7, #84	@ 0x54
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b090      	sub	sp, #64	@ 0x40
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a142:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0320 	and.w	r3, r3, #32
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d137      	bne.n	800a1c2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a154:	2200      	movs	r2, #0
 800a156:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a15a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	3308      	adds	r3, #8
 800a160:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a164:	e853 3f00 	ldrex	r3, [r3]
 800a168:	623b      	str	r3, [r7, #32]
   return(result);
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a170:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	3308      	adds	r3, #8
 800a178:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a17a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a17c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a182:	e841 2300 	strex	r3, r2, [r1]
 800a186:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1e5      	bne.n	800a15a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a18e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	e853 3f00 	ldrex	r3, [r3]
 800a19a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ac:	61fb      	str	r3, [r7, #28]
 800a1ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b0:	69b9      	ldr	r1, [r7, #24]
 800a1b2:	69fa      	ldr	r2, [r7, #28]
 800a1b4:	e841 2300 	strex	r3, r2, [r1]
 800a1b8:	617b      	str	r3, [r7, #20]
   return(result);
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1e6      	bne.n	800a18e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1c0:	e002      	b.n	800a1c8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a1c2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a1c4:	f7ff f99c 	bl	8009500 <HAL_UART_TxCpltCallback>
}
 800a1c8:	bf00      	nop
 800a1ca:	3740      	adds	r7, #64	@ 0x40
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1dc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f7ff f998 	bl	8009514 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1e4:	bf00      	nop
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b09c      	sub	sp, #112	@ 0x70
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f003 0320 	and.w	r3, r3, #32
 800a204:	2b00      	cmp	r3, #0
 800a206:	d171      	bne.n	800a2ec <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a208:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a20a:	2200      	movs	r2, #0
 800a20c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a218:	e853 3f00 	ldrex	r3, [r3]
 800a21c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a21e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a220:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a224:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a226:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	461a      	mov	r2, r3
 800a22c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a22e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a230:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a232:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a234:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a236:	e841 2300 	strex	r3, r2, [r1]
 800a23a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a23c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1e6      	bne.n	800a210 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a242:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	3308      	adds	r3, #8
 800a248:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a24c:	e853 3f00 	ldrex	r3, [r3]
 800a250:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a254:	f023 0301 	bic.w	r3, r3, #1
 800a258:	667b      	str	r3, [r7, #100]	@ 0x64
 800a25a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3308      	adds	r3, #8
 800a260:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a262:	647a      	str	r2, [r7, #68]	@ 0x44
 800a264:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a266:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a268:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a26a:	e841 2300 	strex	r3, r2, [r1]
 800a26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1e5      	bne.n	800a242 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a276:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	3308      	adds	r3, #8
 800a27c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a280:	e853 3f00 	ldrex	r3, [r3]
 800a284:	623b      	str	r3, [r7, #32]
   return(result);
 800a286:	6a3b      	ldr	r3, [r7, #32]
 800a288:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a28c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a28e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	3308      	adds	r3, #8
 800a294:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a296:	633a      	str	r2, [r7, #48]	@ 0x30
 800a298:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a29c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a29e:	e841 2300 	strex	r3, r2, [r1]
 800a2a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d1e5      	bne.n	800a276 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a2aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2ac:	2220      	movs	r2, #32
 800a2ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d118      	bne.n	800a2ec <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	e853 3f00 	ldrex	r3, [r3]
 800a2c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f023 0310 	bic.w	r3, r3, #16
 800a2ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2d8:	61fb      	str	r3, [r7, #28]
 800a2da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2dc:	69b9      	ldr	r1, [r7, #24]
 800a2de:	69fa      	ldr	r2, [r7, #28]
 800a2e0:	e841 2300 	strex	r3, r2, [r1]
 800a2e4:	617b      	str	r3, [r7, #20]
   return(result);
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d1e6      	bne.n	800a2ba <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d107      	bne.n	800a30a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a300:	4619      	mov	r1, r3
 800a302:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a304:	f002 f82e 	bl	800c364 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a308:	e002      	b.n	800a310 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a30a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a30c:	f7ff f90c 	bl	8009528 <HAL_UART_RxCpltCallback>
}
 800a310:	bf00      	nop
 800a312:	3770      	adds	r7, #112	@ 0x70
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a324:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2201      	movs	r2, #1
 800a32a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a330:	2b01      	cmp	r3, #1
 800a332:	d109      	bne.n	800a348 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a33a:	085b      	lsrs	r3, r3, #1
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	4619      	mov	r1, r3
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f002 f80f 	bl	800c364 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a346:	e002      	b.n	800a34e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f7ff f8f7 	bl	800953c <HAL_UART_RxHalfCpltCallback>
}
 800a34e:	bf00      	nop
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b086      	sub	sp, #24
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a362:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a36a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a372:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a37e:	2b80      	cmp	r3, #128	@ 0x80
 800a380:	d109      	bne.n	800a396 <UART_DMAError+0x40>
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	2b21      	cmp	r3, #33	@ 0x21
 800a386:	d106      	bne.n	800a396 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a390:	6978      	ldr	r0, [r7, #20]
 800a392:	f7ff fe29 	bl	8009fe8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3a0:	2b40      	cmp	r3, #64	@ 0x40
 800a3a2:	d109      	bne.n	800a3b8 <UART_DMAError+0x62>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2b22      	cmp	r3, #34	@ 0x22
 800a3a8:	d106      	bne.n	800a3b8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a3b2:	6978      	ldr	r0, [r7, #20]
 800a3b4:	f7ff fe59 	bl	800a06a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3be:	f043 0210 	orr.w	r2, r3, #16
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3c8:	6978      	ldr	r0, [r7, #20]
 800a3ca:	f7ff f8c1 	bl	8009550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3ce:	bf00      	nop
 800a3d0:	3718      	adds	r7, #24
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b084      	sub	sp, #16
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f7ff f8ab 	bl	8009550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3fa:	bf00      	nop
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b088      	sub	sp, #32
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	e853 3f00 	ldrex	r3, [r3]
 800a416:	60bb      	str	r3, [r7, #8]
   return(result);
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a41e:	61fb      	str	r3, [r7, #28]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	461a      	mov	r2, r3
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	61bb      	str	r3, [r7, #24]
 800a42a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42c:	6979      	ldr	r1, [r7, #20]
 800a42e:	69ba      	ldr	r2, [r7, #24]
 800a430:	e841 2300 	strex	r3, r2, [r1]
 800a434:	613b      	str	r3, [r7, #16]
   return(result);
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1e6      	bne.n	800a40a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2220      	movs	r2, #32
 800a440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7ff f858 	bl	8009500 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a450:	bf00      	nop
 800a452:	3720      	adds	r7, #32
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a460:	bf00      	nop
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a474:	bf00      	nop
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a488:	bf00      	nop
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a494:	b480      	push	{r7}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d101      	bne.n	800a4aa <HAL_UARTEx_DisableFifoMode+0x16>
 800a4a6:	2302      	movs	r3, #2
 800a4a8:	e027      	b.n	800a4fa <HAL_UARTEx_DisableFifoMode+0x66>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2224      	movs	r2, #36	@ 0x24
 800a4b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f022 0201 	bic.w	r2, r2, #1
 800a4d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a4d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2220      	movs	r2, #32
 800a4ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3714      	adds	r7, #20
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b084      	sub	sp, #16
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a516:	2b01      	cmp	r3, #1
 800a518:	d101      	bne.n	800a51e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a51a:	2302      	movs	r3, #2
 800a51c:	e02d      	b.n	800a57a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2201      	movs	r2, #1
 800a522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2224      	movs	r2, #36	@ 0x24
 800a52a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f022 0201 	bic.w	r2, r2, #1
 800a544:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	683a      	ldr	r2, [r7, #0]
 800a556:	430a      	orrs	r2, r1
 800a558:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 f8a4 	bl	800a6a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2220      	movs	r2, #32
 800a56c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b084      	sub	sp, #16
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
 800a58a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a592:	2b01      	cmp	r3, #1
 800a594:	d101      	bne.n	800a59a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a596:	2302      	movs	r3, #2
 800a598:	e02d      	b.n	800a5f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2201      	movs	r2, #1
 800a59e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2224      	movs	r2, #36	@ 0x24
 800a5a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f022 0201 	bic.w	r2, r2, #1
 800a5c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	683a      	ldr	r2, [r7, #0]
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 f866 	bl	800a6a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2220      	movs	r2, #32
 800a5e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b08c      	sub	sp, #48	@ 0x30
 800a602:	af00      	add	r7, sp, #0
 800a604:	60f8      	str	r0, [r7, #12]
 800a606:	60b9      	str	r1, [r7, #8]
 800a608:	4613      	mov	r3, r2
 800a60a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a612:	2b20      	cmp	r3, #32
 800a614:	d142      	bne.n	800a69c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d002      	beq.n	800a622 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a61c:	88fb      	ldrh	r3, [r7, #6]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d101      	bne.n	800a626 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e03b      	b.n	800a69e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2201      	movs	r2, #1
 800a62a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a632:	88fb      	ldrh	r3, [r7, #6]
 800a634:	461a      	mov	r2, r3
 800a636:	68b9      	ldr	r1, [r7, #8]
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f7ff fc2f 	bl	8009e9c <UART_Start_Receive_DMA>
 800a63e:	4603      	mov	r3, r0
 800a640:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a644:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d124      	bne.n	800a696 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a650:	2b01      	cmp	r3, #1
 800a652:	d11d      	bne.n	800a690 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2210      	movs	r2, #16
 800a65a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	e853 3f00 	ldrex	r3, [r3]
 800a668:	617b      	str	r3, [r7, #20]
   return(result);
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	f043 0310 	orr.w	r3, r3, #16
 800a670:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	461a      	mov	r2, r3
 800a678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a67c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67e:	6a39      	ldr	r1, [r7, #32]
 800a680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a682:	e841 2300 	strex	r3, r2, [r1]
 800a686:	61fb      	str	r3, [r7, #28]
   return(result);
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1e6      	bne.n	800a65c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a68e:	e002      	b.n	800a696 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a696:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a69a:	e000      	b.n	800a69e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a69c:	2302      	movs	r3, #2
  }
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3730      	adds	r7, #48	@ 0x30
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
	...

0800a6a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d108      	bne.n	800a6ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6c8:	e031      	b.n	800a72e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6ca:	2308      	movs	r3, #8
 800a6cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6ce:	2308      	movs	r3, #8
 800a6d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	0e5b      	lsrs	r3, r3, #25
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	f003 0307 	and.w	r3, r3, #7
 800a6e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	0f5b      	lsrs	r3, r3, #29
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	f003 0307 	and.w	r3, r3, #7
 800a6f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6f2:	7bbb      	ldrb	r3, [r7, #14]
 800a6f4:	7b3a      	ldrb	r2, [r7, #12]
 800a6f6:	4911      	ldr	r1, [pc, #68]	@ (800a73c <UARTEx_SetNbDataToProcess+0x94>)
 800a6f8:	5c8a      	ldrb	r2, [r1, r2]
 800a6fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6fe:	7b3a      	ldrb	r2, [r7, #12]
 800a700:	490f      	ldr	r1, [pc, #60]	@ (800a740 <UARTEx_SetNbDataToProcess+0x98>)
 800a702:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a704:	fb93 f3f2 	sdiv	r3, r3, r2
 800a708:	b29a      	uxth	r2, r3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a710:	7bfb      	ldrb	r3, [r7, #15]
 800a712:	7b7a      	ldrb	r2, [r7, #13]
 800a714:	4909      	ldr	r1, [pc, #36]	@ (800a73c <UARTEx_SetNbDataToProcess+0x94>)
 800a716:	5c8a      	ldrb	r2, [r1, r2]
 800a718:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a71c:	7b7a      	ldrb	r2, [r7, #13]
 800a71e:	4908      	ldr	r1, [pc, #32]	@ (800a740 <UARTEx_SetNbDataToProcess+0x98>)
 800a720:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a722:	fb93 f3f2 	sdiv	r3, r3, r2
 800a726:	b29a      	uxth	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a72e:	bf00      	nop
 800a730:	3714      	adds	r7, #20
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	08013940 	.word	0x08013940
 800a740:	08013948 	.word	0x08013948

0800a744 <goToZeroElecAngle>:
#include "pid.h"
#include "lowpass_filter.h"
#include "focLib.h"

void goToZeroElecAngle(BldcMotor *motor)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
    setTorque(motor, 0, OPEN_LOOP_TORQUE, 0);
 800a74c:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800a770 <goToZeroElecAngle+0x2c>
 800a750:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800a774 <goToZeroElecAngle+0x30>
 800a754:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800a770 <goToZeroElecAngle+0x2c>
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f001 f84d 	bl	800b7f8 <setTorque>
    delay(700);
 800a75e:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800a762:	f003 fbb3 	bl	800decc <delay>
}
 800a766:	bf00      	nop
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	00000000 	.word	0x00000000
 800a774:	3fc511a3 	.word	0x3fc511a3

0800a778 <alignSensor>:
int alignSensor(BldcMotor *motor)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b08a      	sub	sp, #40	@ 0x28
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
    // setTorque(motor, OPEN_LOOP_TORQUE, 0, _3PI_2);
    // delay(200);
    // encoderUpdate(&motor->magEncoder);
    // float start_angle = motor->magEncoder.fullAngle;
    // printLog("start_angle:%f\n", start_angle);
    for (int i = 0; i <= 500; i++)
 800a780:	2300      	movs	r3, #0
 800a782:	627b      	str	r3, [r7, #36]	@ 0x24
 800a784:	e025      	b.n	800a7d2 <alignSensor+0x5a>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800a786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a788:	ee07 3a90 	vmov	s15, r3
 800a78c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a790:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800a998 <alignSensor+0x220>
 800a794:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a798:	eddf 6a80 	vldr	s13, [pc, #512]	@ 800a99c <alignSensor+0x224>
 800a79c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a7a0:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 800a9a0 <alignSensor+0x228>
 800a7a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a7a8:	edc7 7a02 	vstr	s15, [r7, #8]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800a7ac:	ed97 1a02 	vldr	s2, [r7, #8]
 800a7b0:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 800a9a4 <alignSensor+0x22c>
 800a7b4:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 800a9a8 <alignSensor+0x230>
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f001 f81d 	bl	800b7f8 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f000 fcef 	bl	800b1a4 <encoderUpdate>
        delay(2);
 800a7c6:	2002      	movs	r0, #2
 800a7c8:	f003 fb80 	bl	800decc <delay>
    for (int i = 0; i <= 500; i++)
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a7d8:	ddd5      	ble.n	800a786 <alignSensor+0xe>
    }
    // encoderUpdate(&motor->magEncoder);

    float mid_angle = motor->magEncoder.fullAngle;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	695b      	ldr	r3, [r3, #20]
 800a7de:	61fb      	str	r3, [r7, #28]
    printLog("mid_angle:%f\n", mid_angle);
 800a7e0:	69f8      	ldr	r0, [r7, #28]
 800a7e2:	f7f5 fed9 	bl	8000598 <__aeabi_f2d>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	4870      	ldr	r0, [pc, #448]	@ (800a9ac <alignSensor+0x234>)
 800a7ec:	f001 fdd6 	bl	800c39c <printLog>
    // move one electrical revolution backwards
    for (int i = 500; i >= 0; i--)
 800a7f0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800a7f4:	623b      	str	r3, [r7, #32]
 800a7f6:	e025      	b.n	800a844 <alignSensor+0xcc>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800a7f8:	6a3b      	ldr	r3, [r7, #32]
 800a7fa:	ee07 3a90 	vmov	s15, r3
 800a7fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a802:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800a998 <alignSensor+0x220>
 800a806:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a80a:	eddf 6a64 	vldr	s13, [pc, #400]	@ 800a99c <alignSensor+0x224>
 800a80e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a812:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800a9a0 <alignSensor+0x228>
 800a816:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a81a:	edc7 7a03 	vstr	s15, [r7, #12]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800a81e:	ed97 1a03 	vldr	s2, [r7, #12]
 800a822:	eddf 0a60 	vldr	s1, [pc, #384]	@ 800a9a4 <alignSensor+0x22c>
 800a826:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 800a9a8 <alignSensor+0x230>
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 ffe4 	bl	800b7f8 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4618      	mov	r0, r3
 800a834:	f000 fcb6 	bl	800b1a4 <encoderUpdate>
        delay(2);
 800a838:	2002      	movs	r0, #2
 800a83a:	f003 fb47 	bl	800decc <delay>
    for (int i = 500; i >= 0; i--)
 800a83e:	6a3b      	ldr	r3, [r7, #32]
 800a840:	3b01      	subs	r3, #1
 800a842:	623b      	str	r3, [r7, #32]
 800a844:	6a3b      	ldr	r3, [r7, #32]
 800a846:	2b00      	cmp	r3, #0
 800a848:	dad6      	bge.n	800a7f8 <alignSensor+0x80>
    }
    // encoderUpdate(&motor->magEncoder);

    float end_angle = motor->magEncoder.fullAngle;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	61bb      	str	r3, [r7, #24]
    printLog("end_angle:%f\n", end_angle);
 800a850:	69b8      	ldr	r0, [r7, #24]
 800a852:	f7f5 fea1 	bl	8000598 <__aeabi_f2d>
 800a856:	4602      	mov	r2, r0
 800a858:	460b      	mov	r3, r1
 800a85a:	4855      	ldr	r0, [pc, #340]	@ (800a9b0 <alignSensor+0x238>)
 800a85c:	f001 fd9e 	bl	800c39c <printLog>
    // setPhaseVoltage(0, 0, 0);
    delay(200);
 800a860:	20c8      	movs	r0, #200	@ 0xc8
 800a862:	f003 fb33 	bl	800decc <delay>

    // determine the direction the sensor moved
    float moved = fabsf(mid_angle - end_angle);
 800a866:	ed97 7a07 	vldr	s14, [r7, #28]
 800a86a:	edd7 7a06 	vldr	s15, [r7, #24]
 800a86e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a872:	eef0 7ae7 	vabs.f32	s15, s15
 800a876:	edc7 7a05 	vstr	s15, [r7, #20]
    printLog("moved:%f\n", moved);
 800a87a:	6978      	ldr	r0, [r7, #20]
 800a87c:	f7f5 fe8c 	bl	8000598 <__aeabi_f2d>
 800a880:	4602      	mov	r2, r0
 800a882:	460b      	mov	r3, r1
 800a884:	484b      	ldr	r0, [pc, #300]	@ (800a9b4 <alignSensor+0x23c>)
 800a886:	f001 fd89 	bl	800c39c <printLog>
    if (moved < MIN_ANGLE_DETECT_MOVEMENT)
 800a88a:	edd7 7a05 	vldr	s15, [r7, #20]
 800a88e:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800a9b8 <alignSensor+0x240>
 800a892:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a89a:	d504      	bpl.n	800a8a6 <alignSensor+0x12e>
    { // minimum angle to detect movement
        printLog("Failed to notice movement\n");
 800a89c:	4847      	ldr	r0, [pc, #284]	@ (800a9bc <alignSensor+0x244>)
 800a89e:	f001 fd7d 	bl	800c39c <printLog>
        return 0; // failed calibration
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	e073      	b.n	800a98e <alignSensor+0x216>
    }
    else if (mid_angle < end_angle)
 800a8a6:	ed97 7a07 	vldr	s14, [r7, #28]
 800a8aa:	edd7 7a06 	vldr	s15, [r7, #24]
 800a8ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8b6:	d507      	bpl.n	800a8c8 <alignSensor+0x150>
    {
        printLog("sensor_direction==CCW\n");
 800a8b8:	4841      	ldr	r0, [pc, #260]	@ (800a9c0 <alignSensor+0x248>)
 800a8ba:	f001 fd6f 	bl	800c39c <printLog>
        motor->magEncoder.direction = CCW;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	22ff      	movs	r2, #255	@ 0xff
 800a8c2:	f883 2020 	strb.w	r2, [r3, #32]
 800a8c6:	e006      	b.n	800a8d6 <alignSensor+0x15e>
    }
    else
    {
        printLog("sensor_direction==CW\n");
 800a8c8:	483e      	ldr	r0, [pc, #248]	@ (800a9c4 <alignSensor+0x24c>)
 800a8ca:	f001 fd67 	bl	800c39c <printLog>
        motor->magEncoder.direction = CW;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	f883 2020 	strb.w	r2, [r3, #32]
    }
    // check pole pair number
    bool pp_check_result = !(fabsf(moved * motor->pole_pairs - _2PI) > 0.5f); // 0.5f is arbitrary number it can be lower or higher!
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a8dc:	ee07 3a90 	vmov	s15, r3
 800a8e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8e4:	edd7 7a05 	vldr	s15, [r7, #20]
 800a8e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ec:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800a998 <alignSensor+0x220>
 800a8f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a8f4:	eef0 7ae7 	vabs.f32	s15, s15
 800a8f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a8fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a904:	bfcc      	ite	gt
 800a906:	2301      	movgt	r3, #1
 800a908:	2300      	movle	r3, #0
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	f083 0301 	eor.w	r3, r3, #1
 800a910:	b2db      	uxtb	r3, r3
 800a912:	74fb      	strb	r3, [r7, #19]
    if (pp_check_result == false)
 800a914:	7cfb      	ldrb	r3, [r7, #19]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d10d      	bne.n	800a936 <alignSensor+0x1be>
    {
        printLog("PP check: fail - estimated pp: %d\n", (int)(_2PI / moved));
 800a91a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800a998 <alignSensor+0x220>
 800a91e:	ed97 7a05 	vldr	s14, [r7, #20]
 800a922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a92a:	ee17 1a90 	vmov	r1, s15
 800a92e:	4826      	ldr	r0, [pc, #152]	@ (800a9c8 <alignSensor+0x250>)
 800a930:	f001 fd34 	bl	800c39c <printLog>
 800a934:	e002      	b.n	800a93c <alignSensor+0x1c4>
    }
    else
    {
        printLog("PP check: OK!\n");
 800a936:	4825      	ldr	r0, [pc, #148]	@ (800a9cc <alignSensor+0x254>)
 800a938:	f001 fd30 	bl	800c39c <printLog>
    }

    // align the electrical phases of the motor and sensor
    // set angle -90(270 = 3PI/2) degrees
    goToZeroElecAngle(motor);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7ff ff01 	bl	800a744 <goToZeroElecAngle>
    // read the sensor
    encoderUpdate(&motor->magEncoder);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4618      	mov	r0, r3
 800a946:	f000 fc2d 	bl	800b1a4 <encoderUpdate>
    // get the current zero electric angle
    motor->zeroElectricAngleOffSet = 0;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f04f 0200 	mov.w	r2, #0
 800a950:	635a      	str	r2, [r3, #52]	@ 0x34
    getElecAngle(motor);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 f840 	bl	800a9d8 <getElecAngle>
    motor->zeroElectricAngleOffSet = motor->angle_el;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	635a      	str	r2, [r3, #52]	@ 0x34
    // zero_electric_angle =  _normalizeAngle(_electricalAngle(sensor_direction*sensor->getAngle(), pole_pairs));

    // encoderUpdate(&motor->magEncoder);
    getElecAngle(motor);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 f839 	bl	800a9d8 <getElecAngle>
    // motor->zeroElectricAngleOffSet = 0;
    // printLog("[zeroAngleOffset]:%f  [zeroAngle]:%f\r\n", motor->zeroElectricAngleOffSet, motor->angle_el);
    printLog("[zeroAngleOffset]:%f\n", motor->zeroElectricAngleOffSet);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7f5 fe14 	bl	8000598 <__aeabi_f2d>
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	4816      	ldr	r0, [pc, #88]	@ (800a9d0 <alignSensor+0x258>)
 800a976:	f001 fd11 	bl	800c39c <printLog>
    printLog("[zeroAngle]:%f\n", motor->angle_el);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a97e:	4618      	mov	r0, r3
 800a980:	f7f5 fe0a 	bl	8000598 <__aeabi_f2d>
 800a984:	4602      	mov	r2, r0
 800a986:	460b      	mov	r3, r1
 800a988:	4812      	ldr	r0, [pc, #72]	@ (800a9d4 <alignSensor+0x25c>)
 800a98a:	f001 fd07 	bl	800c39c <printLog>
    // // make sure the angle_el is about zero

    // delay(200);
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3728      	adds	r7, #40	@ 0x28
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	40c90fdb 	.word	0x40c90fdb
 800a99c:	43fa0000 	.word	0x43fa0000
 800a9a0:	4096cbe4 	.word	0x4096cbe4
 800a9a4:	00000000 	.word	0x00000000
 800a9a8:	3fc511a3 	.word	0x3fc511a3
 800a9ac:	080137b0 	.word	0x080137b0
 800a9b0:	080137c0 	.word	0x080137c0
 800a9b4:	080137d0 	.word	0x080137d0
 800a9b8:	3d7ecfa9 	.word	0x3d7ecfa9
 800a9bc:	080137dc 	.word	0x080137dc
 800a9c0:	080137f8 	.word	0x080137f8
 800a9c4:	08013810 	.word	0x08013810
 800a9c8:	08013828 	.word	0x08013828
 800a9cc:	0801384c 	.word	0x0801384c
 800a9d0:	0801385c 	.word	0x0801385c
 800a9d4:	08013874 	.word	0x08013874

0800a9d8 <getElecAngle>:

void getElecAngle(BldcMotor *motor)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
    motor->angle_el = _normalizeAngle(motor->pole_pairs * motor->magEncoder.shaftAngle - motor->zeroElectricAngleOffSet);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a9e6:	ee07 3a90 	vmov	s15, r3
 800a9ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	edd3 7a04 	vldr	s15, [r3, #16]
 800a9f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800a9fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa02:	eeb0 0a67 	vmov.f32	s0, s15
 800aa06:	f000 fd6f 	bl	800b4e8 <_normalizeAngle>
 800aa0a:	eef0 7a40 	vmov.f32	s15, s0
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
}
 800aa14:	bf00      	nop
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <foc>:

void foc(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b088      	sub	sp, #32
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]

    if (motor->state == MOTOR_CALIBRATE)
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d111      	bne.n	800aa56 <foc+0x3a>
    {
        getCurrentOffsets(motor, adc_a, adc_b, 100);
 800aa32:	2364      	movs	r3, #100	@ 0x64
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	68b9      	ldr	r1, [r7, #8]
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f000 f9ad 	bl	800ad98 <getCurrentOffsets>
        alignSensor(motor);
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f7ff fe9a 	bl	800a778 <alignSensor>
        motor->state = MOTOR_READY;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        motor->stopPwm();
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800aa52:	4798      	blx	r3
                break;
            }
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
        }
    }
}
 800aa54:	e194      	b.n	800ad80 <foc+0x364>
        getPhaseCurrents(motor, adc_a, adc_b);
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	68b9      	ldr	r1, [r7, #8]
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f000 fa6c 	bl	800af38 <getPhaseCurrents>
        getABCurrents(motor);
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f000 fb0b 	bl	800b07c <getABCurrents>
        getDQCurrents(motor);
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f000 fb2e 	bl	800b0c8 <getDQCurrents>
        motor->Iq = lpfOperator(&motor->IqFilter, motor->Iq);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f103 02f4 	add.w	r2, r3, #244	@ 0xf4
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800aa78:	eeb0 0a67 	vmov.f32	s0, s15
 800aa7c:	4610      	mov	r0, r2
 800aa7e:	f000 fc2b 	bl	800b2d8 <lpfOperator>
 800aa82:	eef0 7a40 	vmov.f32	s15, s0
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
        motor->Id = lpfOperator(&motor->IdFilter, motor->Id);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800aa98:	eeb0 0a67 	vmov.f32	s0, s15
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	f000 fc1b 	bl	800b2d8 <lpfOperator>
 800aaa2:	eef0 7a40 	vmov.f32	s15, s0
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
        encoderUpdate(&motor->magEncoder);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 fb78 	bl	800b1a4 <encoderUpdate>
        motor->magEncoder.velocity = lpfOperator(&motor->velocityFilter, motor->magEncoder.velocity);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f503 7286 	add.w	r2, r3, #268	@ 0x10c
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	edd3 7a06 	vldr	s15, [r3, #24]
 800aac0:	eeb0 0a67 	vmov.f32	s0, s15
 800aac4:	4610      	mov	r0, r2
 800aac6:	f000 fc07 	bl	800b2d8 <lpfOperator>
 800aaca:	eef0 7a40 	vmov.f32	s15, s0
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	edc3 7a06 	vstr	s15, [r3, #24]
        getElecAngle(motor);
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f7ff ff7f 	bl	800a9d8 <getElecAngle>
        if (motor->state == MOTOR_READY)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	f000 814d 	beq.w	800ad80 <foc+0x364>
        else if (motor->state == MOTOR_START)
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	f040 8147 	bne.w	800ad80 <foc+0x364>
            switch (motor->controlType)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800aaf8:	2b03      	cmp	r3, #3
 800aafa:	f200 812f 	bhi.w	800ad5c <foc+0x340>
 800aafe:	a201      	add	r2, pc, #4	@ (adr r2, 800ab04 <foc+0xe8>)
 800ab00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab04:	0800ab71 	.word	0x0800ab71
 800ab08:	0800ab15 	.word	0x0800ab15
 800ab0c:	0800abdb 	.word	0x0800abdb
 800ab10:	0800ac8b 	.word	0x0800ac8b
                motor->target = 50;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	4a9c      	ldr	r2, [pc, #624]	@ (800ad88 <foc+0x36c>)
 800ab18:	631a      	str	r2, [r3, #48]	@ 0x30
                shaftAngle = _normalizeAngle(shaftAngle + motor->target * motor->Ts);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ab26:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab2a:	4b98      	ldr	r3, [pc, #608]	@ (800ad8c <foc+0x370>)
 800ab2c:	edd3 7a00 	vldr	s15, [r3]
 800ab30:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab34:	eeb0 0a67 	vmov.f32	s0, s15
 800ab38:	f000 fcd6 	bl	800b4e8 <_normalizeAngle>
 800ab3c:	eef0 7a40 	vmov.f32	s15, s0
 800ab40:	4b92      	ldr	r3, [pc, #584]	@ (800ad8c <foc+0x370>)
 800ab42:	edc3 7a00 	vstr	s15, [r3]
                motor->angle_el = _electricalAngle(shaftAngle, motor->pole_pairs);
 800ab46:	4b91      	ldr	r3, [pc, #580]	@ (800ad8c <foc+0x370>)
 800ab48:	edd3 7a00 	vldr	s15, [r3]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ab52:	4618      	mov	r0, r3
 800ab54:	eeb0 0a67 	vmov.f32	s0, s15
 800ab58:	f000 fcfc 	bl	800b554 <_electricalAngle>
 800ab5c:	eef0 7a40 	vmov.f32	s15, s0
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                motor->Uq = OPEN_LOOP_TORQUE;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	4a89      	ldr	r2, [pc, #548]	@ (800ad90 <foc+0x374>)
 800ab6a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                break;
 800ab6e:	e0f5      	b.n	800ad5c <foc+0x340>
                if (motor->torqueType == VOLTAGE)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d105      	bne.n	800ab86 <foc+0x16a>
                    motor->Uq = motor->target;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                break;
 800ab84:	e0ea      	b.n	800ad5c <foc+0x340>
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ab92:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800ad94 <foc+0x378>
 800ab96:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab9a:	eeb0 0a67 	vmov.f32	s0, s15
 800ab9e:	4610      	mov	r0, r2
 800aba0:	f000 fd22 	bl	800b5e8 <pidOperator>
 800aba4:	eef0 7a40 	vmov.f32	s15, s0
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, motor->target - motor->Iq);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800abc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abc4:	eeb0 0a67 	vmov.f32	s0, s15
 800abc8:	4610      	mov	r0, r2
 800abca:	f000 fd0d 	bl	800b5e8 <pidOperator>
 800abce:	eef0 7a40 	vmov.f32	s15, s0
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800abd8:	e0c0      	b.n	800ad5c <foc+0x340>
                if (motor->torqueType == VOLTAGE)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d116      	bne.n	800ac12 <foc+0x1f6>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	edd3 7a06 	vldr	s15, [r3, #24]
 800abf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abf4:	edc7 7a04 	vstr	s15, [r7, #16]
                    motor->Uq = pidOperator(&motor->velocityPID, velocityErr);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	33ac      	adds	r3, #172	@ 0xac
 800abfc:	ed97 0a04 	vldr	s0, [r7, #16]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 fcf1 	bl	800b5e8 <pidOperator>
 800ac06:	eef0 7a40 	vmov.f32	s15, s0
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800ac10:	e0a4      	b.n	800ad5c <foc+0x340>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	edd3 7a06 	vldr	s15, [r3, #24]
 800ac1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac22:	edc7 7a04 	vstr	s15, [r7, #16]
                    IqRef = pidOperator(&motor->velocityPID, velocityErr);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	33ac      	adds	r3, #172	@ 0xac
 800ac2a:	ed97 0a04 	vldr	s0, [r7, #16]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f000 fcda 	bl	800b5e8 <pidOperator>
 800ac34:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ac44:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800ad94 <foc+0x378>
 800ac48:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac4c:	eeb0 0a67 	vmov.f32	s0, s15
 800ac50:	4610      	mov	r0, r2
 800ac52:	f000 fcc9 	bl	800b5e8 <pidOperator>
 800ac56:	eef0 7a40 	vmov.f32	s15, s0
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800ac6c:	ed97 7a05 	vldr	s14, [r7, #20]
 800ac70:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac74:	eeb0 0a67 	vmov.f32	s0, s15
 800ac78:	4610      	mov	r0, r2
 800ac7a:	f000 fcb5 	bl	800b5e8 <pidOperator>
 800ac7e:	eef0 7a40 	vmov.f32	s15, s0
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800ac88:	e068      	b.n	800ad5c <foc+0x340>
                if (motor->torqueType == VOLTAGE)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d116      	bne.n	800acc2 <foc+0x2a6>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	edd3 7a05 	vldr	s15, [r3, #20]
 800aca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aca4:	edc7 7a07 	vstr	s15, [r7, #28]
                    motor->Uq = pidOperator(&motor->anglePID, angleErr);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	33d0      	adds	r3, #208	@ 0xd0
 800acac:	ed97 0a07 	vldr	s0, [r7, #28]
 800acb0:	4618      	mov	r0, r3
 800acb2:	f000 fc99 	bl	800b5e8 <pidOperator>
 800acb6:	eef0 7a40 	vmov.f32	s15, s0
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800acc0:	e04b      	b.n	800ad5a <foc+0x33e>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	edd3 7a05 	vldr	s15, [r3, #20]
 800acce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acd2:	edc7 7a07 	vstr	s15, [r7, #28]
                    velocityRef = pidOperator(&motor->anglePID, angleErr);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	33d0      	adds	r3, #208	@ 0xd0
 800acda:	ed97 0a07 	vldr	s0, [r7, #28]
 800acde:	4618      	mov	r0, r3
 800ace0:	f000 fc82 	bl	800b5e8 <pidOperator>
 800ace4:	ed87 0a06 	vstr	s0, [r7, #24]
                    IqRef = pidOperator(&motor->velocityPID, velocityRef - motor->magEncoder.velocity);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	edd3 7a06 	vldr	s15, [r3, #24]
 800acf4:	ed97 7a06 	vldr	s14, [r7, #24]
 800acf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acfc:	eeb0 0a67 	vmov.f32	s0, s15
 800ad00:	4610      	mov	r0, r2
 800ad02:	f000 fc71 	bl	800b5e8 <pidOperator>
 800ad06:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ad16:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800ad94 <foc+0x378>
 800ad1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad1e:	eeb0 0a67 	vmov.f32	s0, s15
 800ad22:	4610      	mov	r0, r2
 800ad24:	f000 fc60 	bl	800b5e8 <pidOperator>
 800ad28:	eef0 7a40 	vmov.f32	s15, s0
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800ad3e:	ed97 7a05 	vldr	s14, [r7, #20]
 800ad42:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad46:	eeb0 0a67 	vmov.f32	s0, s15
 800ad4a:	4610      	mov	r0, r2
 800ad4c:	f000 fc4c 	bl	800b5e8 <pidOperator>
 800ad50:	eef0 7a40 	vmov.f32	s15, s0
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800ad5a:	bf00      	nop
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800ad6e:	eeb0 1a66 	vmov.f32	s2, s13
 800ad72:	eef0 0a47 	vmov.f32	s1, s14
 800ad76:	eeb0 0a67 	vmov.f32	s0, s15
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f000 fd3c 	bl	800b7f8 <setTorque>
}
 800ad80:	bf00      	nop
 800ad82:	3720      	adds	r7, #32
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	42480000 	.word	0x42480000
 800ad8c:	2000079c 	.word	0x2000079c
 800ad90:	3fc511a3 	.word	0x3fc511a3
 800ad94:	00000000 	.word	0x00000000

0800ad98 <getCurrentOffsets>:
#include "math_utils.h"
#include "focLib.h"

// Function finding zero offsets of the ADC
void getCurrentOffsets(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b, uint32_t rounds)
{
 800ad98:	b5b0      	push	{r4, r5, r7, lr}
 800ad9a:	b086      	sub	sp, #24
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
 800ada4:	603b      	str	r3, [r7, #0]
    // find adc offset = zero current voltage
    motor->offset_ia = 0;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f04f 0200 	mov.w	r2, #0
 800adac:	641a      	str	r2, [r3, #64]	@ 0x40
    motor->offset_ib = 0;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f04f 0200 	mov.w	r2, #0
 800adb4:	645a      	str	r2, [r3, #68]	@ 0x44
    // read the adc voltage  times ( arbitrary number )
    for (int i = 0; i < rounds; i++)
 800adb6:	2300      	movs	r3, #0
 800adb8:	617b      	str	r3, [r7, #20]
 800adba:	e076      	b.n	800aeaa <getCurrentOffsets+0x112>
    {
        motor->offset_ia += ADC_2_CURRENT(adc_a);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7f5 fbe9 	bl	8000598 <__aeabi_f2d>
 800adc6:	4604      	mov	r4, r0
 800adc8:	460d      	mov	r5, r1
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	ee07 3a90 	vmov	s15, r3
 800add0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800add4:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800af28 <getCurrentOffsets+0x190>
 800add8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800addc:	ee17 0a90 	vmov	r0, s15
 800ade0:	f7f5 fbda 	bl	8000598 <__aeabi_f2d>
 800ade4:	a34c      	add	r3, pc, #304	@ (adr r3, 800af18 <getCurrentOffsets+0x180>)
 800ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adea:	f7f5 fd57 	bl	800089c <__aeabi_ddiv>
 800adee:	4602      	mov	r2, r0
 800adf0:	460b      	mov	r3, r1
 800adf2:	4610      	mov	r0, r2
 800adf4:	4619      	mov	r1, r3
 800adf6:	a34a      	add	r3, pc, #296	@ (adr r3, 800af20 <getCurrentOffsets+0x188>)
 800adf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfc:	f7f5 fd4e 	bl	800089c <__aeabi_ddiv>
 800ae00:	4602      	mov	r2, r0
 800ae02:	460b      	mov	r3, r1
 800ae04:	4610      	mov	r0, r2
 800ae06:	4619      	mov	r1, r3
 800ae08:	f04f 0200 	mov.w	r2, #0
 800ae0c:	4b47      	ldr	r3, [pc, #284]	@ (800af2c <getCurrentOffsets+0x194>)
 800ae0e:	f7f5 fd45 	bl	800089c <__aeabi_ddiv>
 800ae12:	4602      	mov	r2, r0
 800ae14:	460b      	mov	r3, r1
 800ae16:	4620      	mov	r0, r4
 800ae18:	4629      	mov	r1, r5
 800ae1a:	f7f5 fa5f 	bl	80002dc <__adddf3>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	460b      	mov	r3, r1
 800ae22:	4610      	mov	r0, r2
 800ae24:	4619      	mov	r1, r3
 800ae26:	f7f5 ff07 	bl	8000c38 <__aeabi_d2f>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	641a      	str	r2, [r3, #64]	@ 0x40
        motor->offset_ib += ADC_2_CURRENT(adc_b);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7f5 fbaf 	bl	8000598 <__aeabi_f2d>
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	460d      	mov	r5, r1
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	ee07 3a90 	vmov	s15, r3
 800ae44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae48:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800af28 <getCurrentOffsets+0x190>
 800ae4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae50:	ee17 0a90 	vmov	r0, s15
 800ae54:	f7f5 fba0 	bl	8000598 <__aeabi_f2d>
 800ae58:	a32f      	add	r3, pc, #188	@ (adr r3, 800af18 <getCurrentOffsets+0x180>)
 800ae5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5e:	f7f5 fd1d 	bl	800089c <__aeabi_ddiv>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	4610      	mov	r0, r2
 800ae68:	4619      	mov	r1, r3
 800ae6a:	a32d      	add	r3, pc, #180	@ (adr r3, 800af20 <getCurrentOffsets+0x188>)
 800ae6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae70:	f7f5 fd14 	bl	800089c <__aeabi_ddiv>
 800ae74:	4602      	mov	r2, r0
 800ae76:	460b      	mov	r3, r1
 800ae78:	4610      	mov	r0, r2
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	f04f 0200 	mov.w	r2, #0
 800ae80:	4b2a      	ldr	r3, [pc, #168]	@ (800af2c <getCurrentOffsets+0x194>)
 800ae82:	f7f5 fd0b 	bl	800089c <__aeabi_ddiv>
 800ae86:	4602      	mov	r2, r0
 800ae88:	460b      	mov	r3, r1
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	4629      	mov	r1, r5
 800ae8e:	f7f5 fa25 	bl	80002dc <__adddf3>
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	4610      	mov	r0, r2
 800ae98:	4619      	mov	r1, r3
 800ae9a:	f7f5 fecd 	bl	8000c38 <__aeabi_d2f>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	645a      	str	r2, [r3, #68]	@ 0x44
    for (int i = 0; i < rounds; i++)
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	3301      	adds	r3, #1
 800aea8:	617b      	str	r3, [r7, #20]
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	683a      	ldr	r2, [r7, #0]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d884      	bhi.n	800adbc <getCurrentOffsets+0x24>
    }
    // calculate the mean offsets
    motor->offset_ia = motor->offset_ia / rounds;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	ee07 3a90 	vmov	s15, r3
 800aebe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    motor->offset_ib = motor->offset_ib / rounds;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	ee07 3a90 	vmov	s15, r3
 800aed8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aedc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    // printLog("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    // printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    printLog("[offset_ia]:%f\r\n", motor->offset_ia);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7f5 fb54 	bl	8000598 <__aeabi_f2d>
 800aef0:	4602      	mov	r2, r0
 800aef2:	460b      	mov	r3, r1
 800aef4:	480e      	ldr	r0, [pc, #56]	@ (800af30 <getCurrentOffsets+0x198>)
 800aef6:	f001 fa51 	bl	800c39c <printLog>
    printLog("[offset_ib]:%f\r\n", motor->offset_ib);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aefe:	4618      	mov	r0, r3
 800af00:	f7f5 fb4a 	bl	8000598 <__aeabi_f2d>
 800af04:	4602      	mov	r2, r0
 800af06:	460b      	mov	r3, r1
 800af08:	480a      	ldr	r0, [pc, #40]	@ (800af34 <getCurrentOffsets+0x19c>)
 800af0a:	f001 fa47 	bl	800c39c <printLog>
    // _dbg_printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
}
 800af0e:	bf00      	nop
 800af10:	3718      	adds	r7, #24
 800af12:	46bd      	mov	sp, r7
 800af14:	bdb0      	pop	{r4, r5, r7, pc}
 800af16:	bf00      	nop
 800af18:	00000000 	.word	0x00000000
 800af1c:	40affe00 	.word	0x40affe00
 800af20:	40000000 	.word	0x40000000
 800af24:	3f847ae1 	.word	0x3f847ae1
 800af28:	40533333 	.word	0x40533333
 800af2c:	40240000 	.word	0x40240000
 800af30:	08013884 	.word	0x08013884
 800af34:	08013898 	.word	0x08013898

0800af38 <getPhaseCurrents>:

// read all three phase currents (if possible 2 or 3)
void getPhaseCurrents(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800af38:	b5b0      	push	{r4, r5, r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
    motor->Ia = ADC_2_CURRENT(adc_a) - motor->offset_ia; // amps
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	ee07 3a90 	vmov	s15, r3
 800af4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af4e:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800b070 <getPhaseCurrents+0x138>
 800af52:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af56:	ee17 0a90 	vmov	r0, s15
 800af5a:	f7f5 fb1d 	bl	8000598 <__aeabi_f2d>
 800af5e:	a340      	add	r3, pc, #256	@ (adr r3, 800b060 <getPhaseCurrents+0x128>)
 800af60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af64:	f7f5 fc9a 	bl	800089c <__aeabi_ddiv>
 800af68:	4602      	mov	r2, r0
 800af6a:	460b      	mov	r3, r1
 800af6c:	4610      	mov	r0, r2
 800af6e:	4619      	mov	r1, r3
 800af70:	a33d      	add	r3, pc, #244	@ (adr r3, 800b068 <getPhaseCurrents+0x130>)
 800af72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af76:	f7f5 fc91 	bl	800089c <__aeabi_ddiv>
 800af7a:	4602      	mov	r2, r0
 800af7c:	460b      	mov	r3, r1
 800af7e:	4610      	mov	r0, r2
 800af80:	4619      	mov	r1, r3
 800af82:	f04f 0200 	mov.w	r2, #0
 800af86:	4b3b      	ldr	r3, [pc, #236]	@ (800b074 <getPhaseCurrents+0x13c>)
 800af88:	f7f5 fc88 	bl	800089c <__aeabi_ddiv>
 800af8c:	4602      	mov	r2, r0
 800af8e:	460b      	mov	r3, r1
 800af90:	4614      	mov	r4, r2
 800af92:	461d      	mov	r5, r3
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af98:	4618      	mov	r0, r3
 800af9a:	f7f5 fafd 	bl	8000598 <__aeabi_f2d>
 800af9e:	4602      	mov	r2, r0
 800afa0:	460b      	mov	r3, r1
 800afa2:	4620      	mov	r0, r4
 800afa4:	4629      	mov	r1, r5
 800afa6:	f7f5 f997 	bl	80002d8 <__aeabi_dsub>
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	4610      	mov	r0, r2
 800afb0:	4619      	mov	r1, r3
 800afb2:	f7f5 fe41 	bl	8000c38 <__aeabi_d2f>
 800afb6:	4602      	mov	r2, r0
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	649a      	str	r2, [r3, #72]	@ 0x48
    motor->Ic = ADC_2_CURRENT(adc_b) - motor->offset_ib;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	ee07 3a90 	vmov	s15, r3
 800afc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afc6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800b070 <getPhaseCurrents+0x138>
 800afca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afce:	ee17 0a90 	vmov	r0, s15
 800afd2:	f7f5 fae1 	bl	8000598 <__aeabi_f2d>
 800afd6:	a322      	add	r3, pc, #136	@ (adr r3, 800b060 <getPhaseCurrents+0x128>)
 800afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afdc:	f7f5 fc5e 	bl	800089c <__aeabi_ddiv>
 800afe0:	4602      	mov	r2, r0
 800afe2:	460b      	mov	r3, r1
 800afe4:	4610      	mov	r0, r2
 800afe6:	4619      	mov	r1, r3
 800afe8:	a31f      	add	r3, pc, #124	@ (adr r3, 800b068 <getPhaseCurrents+0x130>)
 800afea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afee:	f7f5 fc55 	bl	800089c <__aeabi_ddiv>
 800aff2:	4602      	mov	r2, r0
 800aff4:	460b      	mov	r3, r1
 800aff6:	4610      	mov	r0, r2
 800aff8:	4619      	mov	r1, r3
 800affa:	f04f 0200 	mov.w	r2, #0
 800affe:	4b1d      	ldr	r3, [pc, #116]	@ (800b074 <getPhaseCurrents+0x13c>)
 800b000:	f7f5 fc4c 	bl	800089c <__aeabi_ddiv>
 800b004:	4602      	mov	r2, r0
 800b006:	460b      	mov	r3, r1
 800b008:	4614      	mov	r4, r2
 800b00a:	461d      	mov	r5, r3
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b010:	4618      	mov	r0, r3
 800b012:	f7f5 fac1 	bl	8000598 <__aeabi_f2d>
 800b016:	4602      	mov	r2, r0
 800b018:	460b      	mov	r3, r1
 800b01a:	4620      	mov	r0, r4
 800b01c:	4629      	mov	r1, r5
 800b01e:	f7f5 f95b 	bl	80002d8 <__aeabi_dsub>
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	4610      	mov	r0, r2
 800b028:	4619      	mov	r1, r3
 800b02a:	f7f5 fe05 	bl	8000c38 <__aeabi_d2f>
 800b02e:	4602      	mov	r2, r0
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	651a      	str	r2, [r3, #80]	@ 0x50
    motor->Ib = 0 - motor->Ia - motor->Ic;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800b03a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800b078 <getPhaseCurrents+0x140>
 800b03e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800b048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
}
 800b052:	bf00      	nop
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bdb0      	pop	{r4, r5, r7, pc}
 800b05a:	bf00      	nop
 800b05c:	f3af 8000 	nop.w
 800b060:	00000000 	.word	0x00000000
 800b064:	40affe00 	.word	0x40affe00
 800b068:	40000000 	.word	0x40000000
 800b06c:	3f847ae1 	.word	0x3f847ae1
 800b070:	40533333 	.word	0x40533333
 800b074:	40240000 	.word	0x40240000
 800b078:	00000000 	.word	0x00000000

0800b07c <getABCurrents>:
// Ibeta = 1/sqrt(3) * Ia + 1/sqrt(3) * 2Ib
/*============================================================================*/
//   calculating Alpha Beta currents from phase currents
//   - function calculating Clarke transform of the phase currents
void getABCurrents(BldcMotor *motor)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
    motor->Ialpha = motor->Ia;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	655a      	str	r2, [r3, #84]	@ 0x54
    motor->Ibeta = _1_SQRT3 * motor->Ia + _2_SQRT3 * motor->Ib;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800b092:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800b0c0 <getABCurrents+0x44>
 800b096:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800b0a0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800b0c4 <getABCurrents+0x48>
 800b0a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b0a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
}
 800b0b2:	bf00      	nop
 800b0b4:	370c      	adds	r7, #12
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	3f13cd3a 	.word	0x3f13cd3a
 800b0c4:	3f93cd3a 	.word	0x3f93cd3a

0800b0c8 <getDQCurrents>:
/*============================================================================*/
// function used with the foc algorihtm
//   calculating D and Q currents from Alpha Beta currents and electrical angle
//   - function calculating Clarke transform of the phase currents
void getDQCurrents(BldcMotor *motor)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
    float ct;
    float st;
    _sincos(motor->angle_el, &st, &ct);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800b0d6:	f107 020c 	add.w	r2, r7, #12
 800b0da:	f107 0308 	add.w	r3, r7, #8
 800b0de:	4611      	mov	r1, r2
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	eeb0 0a67 	vmov.f32	s0, s15
 800b0e6:	f000 f9df 	bl	800b4a8 <_sincos>
    motor->Id = motor->Ialpha * ct + motor->Ibeta * st;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800b0f0:	edd7 7a03 	vldr	s15, [r7, #12]
 800b0f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800b0fe:	edd7 7a02 	vldr	s15, [r7, #8]
 800b102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
    motor->Iq = motor->Ibeta * ct - motor->Ialpha * st;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 800b116:	edd7 7a03 	vldr	s15, [r7, #12]
 800b11a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800b124:	edd7 7a02 	vldr	s15, [r7, #8]
 800b128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b12c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
 800b136:	bf00      	nop
 800b138:	3710      	adds	r7, #16
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <encoderInit>:

#include "encoder.h"
#include "math_utils.h"
#include "focLib.h"
void encoderInit(MagEncoder *encoder, float _Ts, float (*_getRawAngle)(void), Direction _direction)
{
 800b13e:	b480      	push	{r7}
 800b140:	b085      	sub	sp, #20
 800b142:	af00      	add	r7, sp, #0
 800b144:	60f8      	str	r0, [r7, #12]
 800b146:	ed87 0a02 	vstr	s0, [r7, #8]
 800b14a:	6079      	str	r1, [r7, #4]
 800b14c:	4613      	mov	r3, r2
 800b14e:	70fb      	strb	r3, [r7, #3]
    encoder->angle_prev = 0;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f04f 0200 	mov.w	r2, #0
 800b156:	601a      	str	r2, [r3, #0]
    encoder->vel_angle_prev = 0;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f04f 0200 	mov.w	r2, #0
 800b15e:	605a      	str	r2, [r3, #4]
    encoder->full_rotations = 0;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2200      	movs	r2, #0
 800b164:	609a      	str	r2, [r3, #8]
    encoder->vel_full_rotations = 0;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2200      	movs	r2, #0
 800b16a:	60da      	str	r2, [r3, #12]
    encoder->shaftAngle = 0;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f04f 0200 	mov.w	r2, #0
 800b172:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = 0;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f04f 0200 	mov.w	r2, #0
 800b17a:	615a      	str	r2, [r3, #20]
    encoder->velocity = 0;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f04f 0200 	mov.w	r2, #0
 800b182:	619a      	str	r2, [r3, #24]
    encoder->Ts = _Ts;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	68ba      	ldr	r2, [r7, #8]
 800b188:	61da      	str	r2, [r3, #28]
    encoder->getRawAngle = _getRawAngle;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	625a      	str	r2, [r3, #36]	@ 0x24
    encoder->direction = _direction;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	78fa      	ldrb	r2, [r7, #3]
 800b194:	f883 2020 	strb.w	r2, [r3, #32]
}
 800b198:	bf00      	nop
 800b19a:	3714      	adds	r7, #20
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <encoderUpdate>:

void encoderUpdate(MagEncoder *encoder)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
    float val = encoder->getRawAngle() * encoder->direction;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1b0:	4798      	blx	r3
 800b1b2:	eeb0 7a40 	vmov.f32	s14, s0
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800b1bc:	ee07 3a90 	vmov	s15, r3
 800b1c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1c8:	edc7 7a03 	vstr	s15, [r7, #12]

    float d_angle = val - encoder->angle_prev;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	edd3 7a00 	vldr	s15, [r3]
 800b1d2:	ed97 7a03 	vldr	s14, [r7, #12]
 800b1d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1da:	edc7 7a02 	vstr	s15, [r7, #8]
    // 圈数检测
    if (fabsf(d_angle) > (0.8f * _2PI))
 800b1de:	edd7 7a02 	vldr	s15, [r7, #8]
 800b1e2:	eef0 7ae7 	vabs.f32	s15, s15
 800b1e6:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800b2a0 <encoderUpdate+0xfc>
 800b1ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1f2:	dd0f      	ble.n	800b214 <encoderUpdate+0x70>
        encoder->full_rotations += (d_angle > 0) ? -1 : 1;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	edd7 7a02 	vldr	s15, [r7, #8]
 800b1fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b204:	dd02      	ble.n	800b20c <encoderUpdate+0x68>
 800b206:	f04f 32ff 	mov.w	r2, #4294967295
 800b20a:	e000      	b.n	800b20e <encoderUpdate+0x6a>
 800b20c:	2201      	movs	r2, #1
 800b20e:	441a      	add	r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	609a      	str	r2, [r3, #8]

    // angle
    encoder->angle_prev = val;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	601a      	str	r2, [r3, #0]
    encoder->shaftAngle = val;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = (float)encoder->full_rotations * _2PI + encoder->angle_prev;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	ee07 3a90 	vmov	s15, r3
 800b228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b22c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800b2a4 <encoderUpdate+0x100>
 800b230:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	edd3 7a00 	vldr	s15, [r3]
 800b23a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	edc3 7a05 	vstr	s15, [r3, #20]

    // 速度计算
    val = ((float)(encoder->full_rotations - encoder->vel_full_rotations) * _2PI + (encoder->angle_prev - encoder->vel_angle_prev)) / encoder->Ts;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	689a      	ldr	r2, [r3, #8]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	ee07 3a90 	vmov	s15, r3
 800b252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b256:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800b2a4 <encoderUpdate+0x100>
 800b25a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	edd3 6a00 	vldr	s13, [r3]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	edd3 7a01 	vldr	s15, [r3, #4]
 800b26a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b26e:	ee77 6a27 	vadd.f32	s13, s14, s15
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	ed93 7a07 	vldr	s14, [r3, #28]
 800b278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b27c:	edc7 7a03 	vstr	s15, [r7, #12]
    // 保存变量以待将来使用
    encoder->vel_angle_prev = encoder->angle_prev;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	605a      	str	r2, [r3, #4]
    encoder->vel_full_rotations = encoder->full_rotations;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	689a      	ldr	r2, [r3, #8]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	60da      	str	r2, [r3, #12]
    encoder->velocity = val;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	619a      	str	r2, [r3, #24]
}
 800b296:	bf00      	nop
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	40a0d97c 	.word	0x40a0d97c
 800b2a4:	40c90fdb 	.word	0x40c90fdb

0800b2a8 <lpfInit>:
#include "lowpass_filter.h"

void lpfInit(LowPassFilter *filter, const float _Tf, const float _dt)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	ed87 0a02 	vstr	s0, [r7, #8]
 800b2b4:	edc7 0a01 	vstr	s1, [r7, #4]
    filter->Tf = _Tf;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	601a      	str	r2, [r3, #0]
    filter->dt = _dt;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	605a      	str	r2, [r3, #4]
    filter->y_prev = 0;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f04f 0200 	mov.w	r2, #0
 800b2ca:	609a      	str	r2, [r3, #8]
}
 800b2cc:	bf00      	nop
 800b2ce:	3714      	adds	r7, #20
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <lpfOperator>:

float lpfOperator(LowPassFilter *filter, float x)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	ed87 0a00 	vstr	s0, [r7]

    float alpha = filter->Tf / (filter->Tf + filter->dt);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	edd3 6a00 	vldr	s13, [r3]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	ed93 7a00 	vldr	s14, [r3]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	edd3 7a01 	vldr	s15, [r3, #4]
 800b2f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b2fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2fe:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha * filter->y_prev + (1.0f - alpha) * x;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	ed93 7a02 	vldr	s14, [r3, #8]
 800b308:	edd7 7a03 	vldr	s15, [r7, #12]
 800b30c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b310:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b314:	edd7 7a03 	vldr	s15, [r7, #12]
 800b318:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b31c:	edd7 7a00 	vldr	s15, [r7]
 800b320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b324:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b328:	edc7 7a02 	vstr	s15, [r7, #8]
    filter->y_prev = y;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	68ba      	ldr	r2, [r7, #8]
 800b330:	609a      	str	r2, [r3, #8]

    return y;
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	ee07 3a90 	vmov	s15, r3
}
 800b338:	eeb0 0a67 	vmov.f32	s0, s15
 800b33c:	3714      	adds	r7, #20
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr
	...

0800b348 <_sin>:
#include "focLib.h"
// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b086      	sub	sp, #24
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f7f5 f920 	bl	8000598 <__aeabi_f2d>
 800b358:	a339      	add	r3, pc, #228	@ (adr r3, 800b440 <_sin+0xf8>)
 800b35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35e:	f7f5 f973 	bl	8000648 <__aeabi_dmul>
 800b362:	4602      	mov	r2, r0
 800b364:	460b      	mov	r3, r1
 800b366:	4610      	mov	r0, r2
 800b368:	4619      	mov	r1, r3
 800b36a:	f7f5 fc45 	bl	8000bf8 <__aeabi_d2uiz>
 800b36e:	4603      	mov	r3, r0
 800b370:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	b2db      	uxtb	r3, r3
 800b376:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	0a1b      	lsrs	r3, r3, #8
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2b3f      	cmp	r3, #63	@ 0x3f
 800b384:	d80b      	bhi.n	800b39e <_sin+0x56>
  {
    t1 = sine_array[i];
 800b386:	4a2c      	ldr	r2, [pc, #176]	@ (800b438 <_sin+0xf0>)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b38e:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	3301      	adds	r3, #1
 800b394:	4a28      	ldr	r2, [pc, #160]	@ (800b438 <_sin+0xf0>)
 800b396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b39a:	613b      	str	r3, [r7, #16]
 800b39c:	e033      	b.n	800b406 <_sin+0xbe>
  }
  else if (i < 128)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2b7f      	cmp	r3, #127	@ 0x7f
 800b3a2:	d80e      	bhi.n	800b3c2 <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800b3aa:	4a23      	ldr	r2, [pc, #140]	@ (800b438 <_sin+0xf0>)
 800b3ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3b0:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800b3b8:	4a1f      	ldr	r2, [pc, #124]	@ (800b438 <_sin+0xf0>)
 800b3ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3be:	613b      	str	r3, [r7, #16]
 800b3c0:	e021      	b.n	800b406 <_sin+0xbe>
  }
  else if (i < 192)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2bbf      	cmp	r3, #191	@ 0xbf
 800b3c6:	d80e      	bhi.n	800b3e6 <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	3b80      	subs	r3, #128	@ 0x80
 800b3cc:	4a1a      	ldr	r2, [pc, #104]	@ (800b438 <_sin+0xf0>)
 800b3ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3d2:	425b      	negs	r3, r3
 800b3d4:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	3b7f      	subs	r3, #127	@ 0x7f
 800b3da:	4a17      	ldr	r2, [pc, #92]	@ (800b438 <_sin+0xf0>)
 800b3dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3e0:	425b      	negs	r3, r3
 800b3e2:	613b      	str	r3, [r7, #16]
 800b3e4:	e00f      	b.n	800b406 <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800b3ec:	4a12      	ldr	r2, [pc, #72]	@ (800b438 <_sin+0xf0>)
 800b3ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3f2:	425b      	negs	r3, r3
 800b3f4:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800b3fc:	4a0e      	ldr	r2, [pc, #56]	@ (800b438 <_sin+0xf0>)
 800b3fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b402:	425b      	negs	r3, r3
 800b404:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800b406:	693a      	ldr	r2, [r7, #16]
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	fb02 f303 	mul.w	r3, r2, r3
 800b412:	121a      	asrs	r2, r3, #8
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	4413      	add	r3, r2
 800b418:	ee07 3a90 	vmov	s15, r3
 800b41c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b420:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800b43c <_sin+0xf4>
 800b424:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b428:	eeb0 0a67 	vmov.f32	s0, s15
 800b42c:	3718      	adds	r7, #24
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	f3af 8000 	nop.w
 800b438:	2000000c 	.word	0x2000000c
 800b43c:	38000000 	.word	0x38000000
 800b440:	6446f9b4 	.word	0x6446f9b4
 800b444:	40c45f30 	.word	0x40c45f30

0800b448 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800b452:	edd7 7a01 	vldr	s15, [r7, #4]
 800b456:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800b4a0 <_cos+0x58>
 800b45a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b45e:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800b462:	edd7 7a03 	vldr	s15, [r7, #12]
 800b466:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800b4a4 <_cos+0x5c>
 800b46a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b472:	dd06      	ble.n	800b482 <_cos+0x3a>
 800b474:	edd7 7a03 	vldr	s15, [r7, #12]
 800b478:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800b4a4 <_cos+0x5c>
 800b47c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b480:	e001      	b.n	800b486 <_cos+0x3e>
 800b482:	edd7 7a03 	vldr	s15, [r7, #12]
 800b486:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800b48a:	ed97 0a03 	vldr	s0, [r7, #12]
 800b48e:	f7ff ff5b 	bl	800b348 <_sin>
 800b492:	eef0 7a40 	vmov.f32	s15, s0
}
 800b496:	eeb0 0a67 	vmov.f32	s0, s15
 800b49a:	3710      	adds	r7, #16
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	3fc90fdb 	.word	0x3fc90fdb
 800b4a4:	40c90fdb 	.word	0x40c90fdb

0800b4a8 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	ed87 0a03 	vstr	s0, [r7, #12]
 800b4b2:	60b8      	str	r0, [r7, #8]
 800b4b4:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800b4b6:	ed97 0a03 	vldr	s0, [r7, #12]
 800b4ba:	f7ff ff45 	bl	800b348 <_sin>
 800b4be:	eef0 7a40 	vmov.f32	s15, s0
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800b4c8:	ed97 0a03 	vldr	s0, [r7, #12]
 800b4cc:	f7ff ffbc 	bl	800b448 <_cos>
 800b4d0:	eef0 7a40 	vmov.f32	s15, s0
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	edc3 7a00 	vstr	s15, [r3]
}
 800b4da:	bf00      	nop
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	0000      	movs	r0, r0
 800b4e4:	0000      	movs	r0, r0
	...

0800b4e8 <_normalizeAngle>:
  return r;
}

// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f7f5 f850 	bl	8000598 <__aeabi_f2d>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 800b548 <_normalizeAngle+0x60>
 800b500:	ec43 2b10 	vmov	d0, r2, r3
 800b504:	f007 faa0 	bl	8012a48 <fmod>
 800b508:	ec53 2b10 	vmov	r2, r3, d0
 800b50c:	4610      	mov	r0, r2
 800b50e:	4619      	mov	r1, r3
 800b510:	f7f5 fb92 	bl	8000c38 <__aeabi_d2f>
 800b514:	4603      	mov	r3, r0
 800b516:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 800b518:	edd7 7a03 	vldr	s15, [r7, #12]
 800b51c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b524:	db02      	blt.n	800b52c <_normalizeAngle+0x44>
 800b526:	edd7 7a03 	vldr	s15, [r7, #12]
 800b52a:	e005      	b.n	800b538 <_normalizeAngle+0x50>
 800b52c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b530:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800b550 <_normalizeAngle+0x68>
 800b534:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800b538:	eeb0 0a67 	vmov.f32	s0, s15
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	f3af 8000 	nop.w
 800b548:	60000000 	.word	0x60000000
 800b54c:	401921fb 	.word	0x401921fb
 800b550:	40c90fdb 	.word	0x40c90fdb

0800b554 <_electricalAngle>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs)
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
 800b55a:	ed87 0a01 	vstr	s0, [r7, #4]
 800b55e:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	ee07 3a90 	vmov	s15, r3
 800b566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b56a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b56e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800b572:	eeb0 0a67 	vmov.f32	s0, s15
 800b576:	370c      	adds	r7, #12
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <pidInit>:
#include "pid.h"
#include "math_utils.h"

void pidInit(PidController *pidController, float _P, float _I, float _D, float _ramp, float _limit, float _Ts)
{
 800b580:	b480      	push	{r7}
 800b582:	b089      	sub	sp, #36	@ 0x24
 800b584:	af00      	add	r7, sp, #0
 800b586:	61f8      	str	r0, [r7, #28]
 800b588:	ed87 0a06 	vstr	s0, [r7, #24]
 800b58c:	edc7 0a05 	vstr	s1, [r7, #20]
 800b590:	ed87 1a04 	vstr	s2, [r7, #16]
 800b594:	edc7 1a03 	vstr	s3, [r7, #12]
 800b598:	ed87 2a02 	vstr	s4, [r7, #8]
 800b59c:	edc7 2a01 	vstr	s5, [r7, #4]
    pidController->P = _P;
 800b5a0:	69fb      	ldr	r3, [r7, #28]
 800b5a2:	69ba      	ldr	r2, [r7, #24]
 800b5a4:	601a      	str	r2, [r3, #0]
    pidController->I = _I;
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	697a      	ldr	r2, [r7, #20]
 800b5aa:	605a      	str	r2, [r3, #4]
    pidController->D = _D;
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	693a      	ldr	r2, [r7, #16]
 800b5b0:	609a      	str	r2, [r3, #8]
    pidController->output_ramp = _ramp;
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	60da      	str	r2, [r3, #12]
    pidController->limit = _limit;
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	68ba      	ldr	r2, [r7, #8]
 800b5bc:	611a      	str	r2, [r3, #16]
    pidController->Ts = _Ts;
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	621a      	str	r2, [r3, #32]
    pidController->error_prev = 0;
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	f04f 0200 	mov.w	r2, #0
 800b5ca:	615a      	str	r2, [r3, #20]
    pidController->output_prev = 0;
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	f04f 0200 	mov.w	r2, #0
 800b5d2:	619a      	str	r2, [r3, #24]
    pidController->integral_prev = 0;
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	f04f 0200 	mov.w	r2, #0
 800b5da:	61da      	str	r2, [r3, #28]
}
 800b5dc:	bf00      	nop
 800b5de:	3724      	adds	r7, #36	@ 0x24
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <pidOperator>:

// PID controller function
float pidOperator(PidController *pidController, float error)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b08b      	sub	sp, #44	@ 0x2c
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	ed87 0a00 	vstr	s0, [r7]
    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = pidController->P * error;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	edd3 7a00 	vldr	s15, [r3]
 800b5fa:	ed97 7a00 	vldr	s14, [r7]
 800b5fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b602:	edc7 7a08 	vstr	s15, [r7, #32]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float a = 0.5f * (error + pidController->error_prev);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	ed93 7a05 	vldr	s14, [r3, #20]
 800b60c:	edd7 7a00 	vldr	s15, [r7]
 800b610:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b614:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b618:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b61c:	edc7 7a07 	vstr	s15, [r7, #28]
    float b = pidController->I * pidController->Ts;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	ed93 7a01 	vldr	s14, [r3, #4]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	edd3 7a08 	vldr	s15, [r3, #32]
 800b62c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b630:	edc7 7a06 	vstr	s15, [r7, #24]
    float integral = pidController->integral_prev + pidController->I * pidController->Ts * 0.5f * (error + pidController->error_prev);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	ed93 7a07 	vldr	s14, [r3, #28]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	edd3 6a01 	vldr	s13, [r3, #4]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	edd3 7a08 	vldr	s15, [r3, #32]
 800b646:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b64a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800b64e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	ed93 6a05 	vldr	s12, [r3, #20]
 800b658:	edd7 7a00 	vldr	s15, [r7]
 800b65c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b664:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b668:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -pidController->limit, pidController->limit);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	edd3 7a04 	vldr	s15, [r3, #16]
 800b672:	eef1 7a67 	vneg.f32	s15, s15
 800b676:	ed97 7a05 	vldr	s14, [r7, #20]
 800b67a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b682:	d505      	bpl.n	800b690 <pidOperator+0xa8>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	edd3 7a04 	vldr	s15, [r3, #16]
 800b68a:	eef1 7a67 	vneg.f32	s15, s15
 800b68e:	e00f      	b.n	800b6b0 <pidOperator+0xc8>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	edd3 7a04 	vldr	s15, [r3, #16]
 800b696:	ed97 7a05 	vldr	s14, [r7, #20]
 800b69a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6a2:	dd03      	ble.n	800b6ac <pidOperator+0xc4>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	edd3 7a04 	vldr	s15, [r3, #16]
 800b6aa:	e001      	b.n	800b6b0 <pidOperator+0xc8>
 800b6ac:	edd7 7a05 	vldr	s15, [r7, #20]
 800b6b0:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = pidController->D * (error - pidController->error_prev) / pidController->Ts;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	ed93 7a02 	vldr	s14, [r3, #8]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	edd3 7a05 	vldr	s15, [r3, #20]
 800b6c0:	edd7 6a00 	vldr	s13, [r7]
 800b6c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b6c8:	ee67 6a27 	vmul.f32	s13, s14, s15
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	ed93 7a08 	vldr	s14, [r3, #32]
 800b6d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6d6:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 800b6da:	ed97 7a08 	vldr	s14, [r7, #32]
 800b6de:	edd7 7a05 	vldr	s15, [r7, #20]
 800b6e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6e6:	ed97 7a04 	vldr	s14, [r7, #16]
 800b6ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // antiwindup - limit the output variable
    output = _constrain(output, -pidController->limit, pidController->limit);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	edd3 7a04 	vldr	s15, [r3, #16]
 800b6f8:	eef1 7a67 	vneg.f32	s15, s15
 800b6fc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b700:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b708:	d505      	bpl.n	800b716 <pidOperator+0x12e>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	edd3 7a04 	vldr	s15, [r3, #16]
 800b710:	eef1 7a67 	vneg.f32	s15, s15
 800b714:	e00f      	b.n	800b736 <pidOperator+0x14e>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	edd3 7a04 	vldr	s15, [r3, #16]
 800b71c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b720:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b728:	dd03      	ble.n	800b732 <pidOperator+0x14a>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	edd3 7a04 	vldr	s15, [r3, #16]
 800b730:	e001      	b.n	800b736 <pidOperator+0x14e>
 800b732:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b736:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // if output ramp defined
    if (pidController->output_ramp > 0)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	edd3 7a03 	vldr	s15, [r3, #12]
 800b740:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b748:	dd42      	ble.n	800b7d0 <pidOperator+0x1e8>
    {
        // limit the acceleration by ramping the output
        float output_rate = (output - pidController->output_prev) / pidController->Ts;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	edd3 7a06 	vldr	s15, [r3, #24]
 800b750:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b754:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	ed93 7a08 	vldr	s14, [r3, #32]
 800b75e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b762:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > pidController->output_ramp)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	edd3 7a03 	vldr	s15, [r3, #12]
 800b76c:	ed97 7a03 	vldr	s14, [r7, #12]
 800b770:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b778:	dd0f      	ble.n	800b79a <pidOperator+0x1b2>
            output = pidController->output_prev + pidController->output_ramp * pidController->Ts;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	ed93 7a06 	vldr	s14, [r3, #24]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	edd3 6a03 	vldr	s13, [r3, #12]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	edd3 7a08 	vldr	s15, [r3, #32]
 800b78c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b790:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b794:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800b798:	e01a      	b.n	800b7d0 <pidOperator+0x1e8>
        else if (output_rate < -pidController->output_ramp)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	edd3 7a03 	vldr	s15, [r3, #12]
 800b7a0:	eef1 7a67 	vneg.f32	s15, s15
 800b7a4:	ed97 7a03 	vldr	s14, [r7, #12]
 800b7a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b7ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b0:	d50e      	bpl.n	800b7d0 <pidOperator+0x1e8>
            output = pidController->output_prev - pidController->output_ramp * pidController->Ts;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	ed93 7a06 	vldr	s14, [r3, #24]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	edd3 6a03 	vldr	s13, [r3, #12]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	edd3 7a08 	vldr	s15, [r3, #32]
 800b7c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b7c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7cc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    // saving for the next pass
    pidController->integral_prev = integral;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	697a      	ldr	r2, [r7, #20]
 800b7d4:	61da      	str	r2, [r3, #28]
    pidController->output_prev = output;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7da:	619a      	str	r2, [r3, #24]
    pidController->error_prev = error;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	683a      	ldr	r2, [r7, #0]
 800b7e0:	615a      	str	r2, [r3, #20]
    return output;
 800b7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e4:	ee07 3a90 	vmov	s15, r3
}
 800b7e8:	eeb0 0a67 	vmov.f32	s0, s15
 800b7ec:	372c      	adds	r7, #44	@ 0x2c
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr
	...

0800b7f8 <setTorque>:
    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
}
#elif 1

void setTorque(BldcMotor *motor, float Uq, float Ud, float angle_el)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b08e      	sub	sp, #56	@ 0x38
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	ed87 0a02 	vstr	s0, [r7, #8]
 800b804:	edc7 0a01 	vstr	s1, [r7, #4]
 800b808:	ed87 1a00 	vstr	s2, [r7]
    float Ualpha, Ubeta;
    float Ua, Ub, Uc;

    // Sinusoidal PWM modulation
    // Inverse Park + Clarke transformation
    _sincos(angle_el, &_sa, &_ca);
 800b80c:	f107 0214 	add.w	r2, r7, #20
 800b810:	f107 0310 	add.w	r3, r7, #16
 800b814:	4611      	mov	r1, r2
 800b816:	4618      	mov	r0, r3
 800b818:	ed97 0a00 	vldr	s0, [r7]
 800b81c:	f7ff fe44 	bl	800b4a8 <_sincos>

    // Inverse park transform
    Ualpha = _ca * Ud - _sa * Uq; // -sin(angle) * Uq;
 800b820:	ed97 7a05 	vldr	s14, [r7, #20]
 800b824:	edd7 7a01 	vldr	s15, [r7, #4]
 800b828:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b82c:	edd7 6a04 	vldr	s13, [r7, #16]
 800b830:	edd7 7a02 	vldr	s15, [r7, #8]
 800b834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b83c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Ubeta = _sa * Ud + _ca * Uq;  //  cos(angle) * Uq;
 800b840:	ed97 7a04 	vldr	s14, [r7, #16]
 800b844:	edd7 7a01 	vldr	s15, [r7, #4]
 800b848:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b84c:	edd7 6a05 	vldr	s13, [r7, #20]
 800b850:	edd7 7a02 	vldr	s15, [r7, #8]
 800b854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b85c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Clarke transform
    Ua = Ualpha;
 800b860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b862:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Ub = -0.5f * Ualpha + _SQRT3_2 * Ubeta;
 800b864:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800b868:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800b86c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b870:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b874:	eddf 6a95 	vldr	s13, [pc, #596]	@ 800bacc <setTorque+0x2d4>
 800b878:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b87c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b880:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc = -0.5f * Ualpha - _SQRT3_2 * Ubeta;
 800b884:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800b888:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800b88c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b890:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b894:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 800bacc <setTorque+0x2d4>
 800b898:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b89c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    center = U_DC / 2;
 800b8a4:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 800b8a8:	623b      	str	r3, [r7, #32]

    // discussed here: https://community.simplefoc.com/t/embedded-world-2023-stm32-cordic-co-processor/3107/165?u=candas1
    // a bit more info here: https://microchipdeveloper.com/mct5001:which-zsm-is-best
    // Midpoint Clamp
    float Umin = min(Ua, min(Ub, Uc));
 800b8aa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b8ae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b8b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b8b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8ba:	d502      	bpl.n	800b8c2 <setTorque+0xca>
 800b8bc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b8c0:	e001      	b.n	800b8c6 <setTorque+0xce>
 800b8c2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b8c6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b8ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8d2:	dd01      	ble.n	800b8d8 <setTorque+0xe0>
 800b8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8d6:	e00b      	b.n	800b8f0 <setTorque+0xf8>
 800b8d8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b8dc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b8e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8e8:	d501      	bpl.n	800b8ee <setTorque+0xf6>
 800b8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ec:	e000      	b.n	800b8f0 <setTorque+0xf8>
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f0:	61fb      	str	r3, [r7, #28]
    float Umax = max(Ua, max(Ub, Uc));
 800b8f2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b8f6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b8fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b902:	dd02      	ble.n	800b90a <setTorque+0x112>
 800b904:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b908:	e001      	b.n	800b90e <setTorque+0x116>
 800b90a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b90e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b912:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b91a:	d501      	bpl.n	800b920 <setTorque+0x128>
 800b91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b91e:	e00b      	b.n	800b938 <setTorque+0x140>
 800b920:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b924:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b930:	dd01      	ble.n	800b936 <setTorque+0x13e>
 800b932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b934:	e000      	b.n	800b938 <setTorque+0x140>
 800b936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b938:	61bb      	str	r3, [r7, #24]
    center -= (Umax + Umin) / 2;
 800b93a:	ed97 7a06 	vldr	s14, [r7, #24]
 800b93e:	edd7 7a07 	vldr	s15, [r7, #28]
 800b942:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b946:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b94a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b94e:	ed97 7a08 	vldr	s14, [r7, #32]
 800b952:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b956:	edc7 7a08 	vstr	s15, [r7, #32]

    Ua += center;
 800b95a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b95e:	edd7 7a08 	vldr	s15, [r7, #32]
 800b962:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b966:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    Ub += center;
 800b96a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b96e:	edd7 7a08 	vldr	s15, [r7, #32]
 800b972:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b976:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc += center;
 800b97a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b97e:	edd7 7a08 	vldr	s15, [r7, #32]
 800b982:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b986:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    motor->Ta = _constrain(Ua / U_DC, 0.0f, 1.0f);
 800b98a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b98e:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b992:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b996:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b99e:	d502      	bpl.n	800b9a6 <setTorque+0x1ae>
 800b9a0:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 800bad0 <setTorque+0x2d8>
 800b9a4:	e015      	b.n	800b9d2 <setTorque+0x1da>
 800b9a6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b9aa:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b9ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b9b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b9b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9be:	dd02      	ble.n	800b9c6 <setTorque+0x1ce>
 800b9c0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b9c4:	e005      	b.n	800b9d2 <setTorque+0x1da>
 800b9c6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b9ca:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b9ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
    motor->Tb = _constrain(Ub / U_DC, 0.0f, 1.0f);
 800b9d8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b9dc:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b9e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b9e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ec:	d502      	bpl.n	800b9f4 <setTorque+0x1fc>
 800b9ee:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800bad0 <setTorque+0x2d8>
 800b9f2:	e015      	b.n	800ba20 <setTorque+0x228>
 800b9f4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b9f8:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b9fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba04:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba0c:	dd02      	ble.n	800ba14 <setTorque+0x21c>
 800ba0e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ba12:	e005      	b.n	800ba20 <setTorque+0x228>
 800ba14:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800ba18:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800ba1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
    motor->Tc = _constrain(Uc / U_DC, 0.0f, 1.0f);
 800ba26:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800ba2a:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800ba2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba3a:	d502      	bpl.n	800ba42 <setTorque+0x24a>
 800ba3c:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800bad0 <setTorque+0x2d8>
 800ba40:	e015      	b.n	800ba6e <setTorque+0x276>
 800ba42:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800ba46:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800ba4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba52:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba5a:	dd02      	ble.n	800ba62 <setTorque+0x26a>
 800ba5c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ba60:	e005      	b.n	800ba6e <setTorque+0x276>
 800ba62:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800ba66:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800ba6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	edc3 7a4c 	vstr	s15, [r3, #304]	@ 0x130

    motor->updatePwm(HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tc);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 800ba80:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800bad4 <setTorque+0x2dc>
 800ba84:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba8c:	ee17 2a90 	vmov	r2, s15
 800ba90:	b290      	uxth	r0, r2
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	edd2 7a4a 	vldr	s15, [r2, #296]	@ 0x128
 800ba98:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800bad4 <setTorque+0x2dc>
 800ba9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800baa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baa4:	ee17 2a90 	vmov	r2, s15
 800baa8:	b291      	uxth	r1, r2
 800baaa:	68fa      	ldr	r2, [r7, #12]
 800baac:	edd2 7a4c 	vldr	s15, [r2, #304]	@ 0x130
 800bab0:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800bad4 <setTorque+0x2dc>
 800bab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800babc:	ee17 2a90 	vmov	r2, s15
 800bac0:	b292      	uxth	r2, r2
 800bac2:	4798      	blx	r3
    // set the voltages in driver
    // driver->setPwm(Ua, Ub, Uc);
}
 800bac4:	bf00      	nop
 800bac6:	3738      	adds	r7, #56	@ 0x38
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	3f5db3d7 	.word	0x3f5db3d7
 800bad0:	00000000 	.word	0x00000000
 800bad4:	45fa0000 	.word	0x45fa0000

0800bad8 <motorInit>:
static void working(void);

// should be called before interruption enabled

static void motorInit()
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b08c      	sub	sp, #48	@ 0x30
 800badc:	af00      	add	r7, sp, #0
#if 1
    motor1.pole_pairs = 7;
 800bade:	4bc6      	ldr	r3, [pc, #792]	@ (800bdf8 <motorInit+0x320>)
 800bae0:	2207      	movs	r2, #7
 800bae2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    motor1.updatePwm = updatePwm1;
 800bae6:	4bc4      	ldr	r3, [pc, #784]	@ (800bdf8 <motorInit+0x320>)
 800bae8:	4ac4      	ldr	r2, [pc, #784]	@ (800bdfc <motorInit+0x324>)
 800baea:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor1.startPwm = startPwm1;
 800baee:	4bc2      	ldr	r3, [pc, #776]	@ (800bdf8 <motorInit+0x320>)
 800baf0:	4ac3      	ldr	r2, [pc, #780]	@ (800be00 <motorInit+0x328>)
 800baf2:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor1.stopPwm = stopPwm1;
 800baf6:	4bc0      	ldr	r3, [pc, #768]	@ (800bdf8 <motorInit+0x320>)
 800baf8:	4ac2      	ldr	r2, [pc, #776]	@ (800be04 <motorInit+0x32c>)
 800bafa:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    motor1.zeroElectricAngleOffSet = 0;
 800bafe:	4bbe      	ldr	r3, [pc, #760]	@ (800bdf8 <motorInit+0x320>)
 800bb00:	f04f 0200 	mov.w	r2, #0
 800bb04:	635a      	str	r2, [r3, #52]	@ 0x34
    motor1.Ts = 100 * 1e-6f;
 800bb06:	4bbc      	ldr	r3, [pc, #752]	@ (800bdf8 <motorInit+0x320>)
 800bb08:	4abf      	ldr	r2, [pc, #764]	@ (800be08 <motorInit+0x330>)
 800bb0a:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor1.torqueType = VOLTAGE;
 800bb0c:	4bba      	ldr	r3, [pc, #744]	@ (800bdf8 <motorInit+0x320>)
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    motor1.controlType = VELOCITY;
 800bb14:	4bb8      	ldr	r3, [pc, #736]	@ (800bdf8 <motorInit+0x320>)
 800bb16:	2202      	movs	r2, #2
 800bb18:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    motor1.state = MOTOR_CALIBRATE;
 800bb1c:	4bb6      	ldr	r3, [pc, #728]	@ (800bdf8 <motorInit+0x320>)
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor1.magEncoder, motor1.Ts, _1_MT6701_GetRawAngle, UNKNOWN);
 800bb24:	4bb4      	ldr	r3, [pc, #720]	@ (800bdf8 <motorInit+0x320>)
 800bb26:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	49b7      	ldr	r1, [pc, #732]	@ (800be0c <motorInit+0x334>)
 800bb2e:	eeb0 0a67 	vmov.f32	s0, s15
 800bb32:	48b1      	ldr	r0, [pc, #708]	@ (800bdf8 <motorInit+0x320>)
 800bb34:	f7ff fb03 	bl	800b13e <encoderInit>

    if (motor1.controlType == TORQUE && motor1.torqueType == CURRENT)
 800bb38:	4baf      	ldr	r3, [pc, #700]	@ (800bdf8 <motorInit+0x320>)
 800bb3a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d11b      	bne.n	800bb7a <motorInit+0xa2>
 800bb42:	4bad      	ldr	r3, [pc, #692]	@ (800bdf8 <motorInit+0x320>)
 800bb44:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d116      	bne.n	800bb7a <motorInit+0xa2>
    {
        float kp, ki;
        kp = 500.0f;
 800bb4c:	4bb0      	ldr	r3, [pc, #704]	@ (800be10 <motorInit+0x338>)
 800bb4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ki = 50.0f;
 800bb50:	4bb0      	ldr	r3, [pc, #704]	@ (800be14 <motorInit+0x33c>)
 800bb52:	62bb      	str	r3, [r7, #40]	@ 0x28
        pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bb54:	4ba8      	ldr	r3, [pc, #672]	@ (800bdf8 <motorInit+0x320>)
 800bb56:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bb5a:	eef0 2a67 	vmov.f32	s5, s15
 800bb5e:	ed9f 2aae 	vldr	s4, [pc, #696]	@ 800be18 <motorInit+0x340>
 800bb62:	eddf 1aae 	vldr	s3, [pc, #696]	@ 800be1c <motorInit+0x344>
 800bb66:	ed9f 1aad 	vldr	s2, [pc, #692]	@ 800be1c <motorInit+0x344>
 800bb6a:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 800bb6e:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800bb72:	48ab      	ldr	r0, [pc, #684]	@ (800be20 <motorInit+0x348>)
 800bb74:	f7ff fd04 	bl	800b580 <pidInit>
    {
 800bb78:	e0c0      	b.n	800bcfc <motorInit+0x224>
        // pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
    }
    else if (motor1.controlType == VELOCITY)
 800bb7a:	4b9f      	ldr	r3, [pc, #636]	@ (800bdf8 <motorInit+0x320>)
 800bb7c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bb80:	2b02      	cmp	r3, #2
 800bb82:	d152      	bne.n	800bc2a <motorInit+0x152>
    {
        if (motor1.torqueType == CURRENT)
 800bb84:	4b9c      	ldr	r3, [pc, #624]	@ (800bdf8 <motorInit+0x320>)
 800bb86:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d13a      	bne.n	800bc04 <motorInit+0x12c>
        {
            pidInit(&motor1.velocityPID, 0.02, 0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800bb8e:	4b9a      	ldr	r3, [pc, #616]	@ (800bdf8 <motorInit+0x320>)
 800bb90:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bb94:	eef0 2a67 	vmov.f32	s5, s15
 800bb98:	ed9f 2aa2 	vldr	s4, [pc, #648]	@ 800be24 <motorInit+0x34c>
 800bb9c:	eddf 1a9f 	vldr	s3, [pc, #636]	@ 800be1c <motorInit+0x344>
 800bba0:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 800be1c <motorInit+0x344>
 800bba4:	eddf 0aa0 	vldr	s1, [pc, #640]	@ 800be28 <motorInit+0x350>
 800bba8:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 800be2c <motorInit+0x354>
 800bbac:	48a0      	ldr	r0, [pc, #640]	@ (800be30 <motorInit+0x358>)
 800bbae:	f7ff fce7 	bl	800b580 <pidInit>

            float kp, ki;
            kp = 500.0f;
 800bbb2:	4b97      	ldr	r3, [pc, #604]	@ (800be10 <motorInit+0x338>)
 800bbb4:	61fb      	str	r3, [r7, #28]
            ki = 50.0f;
 800bbb6:	4b97      	ldr	r3, [pc, #604]	@ (800be14 <motorInit+0x33c>)
 800bbb8:	61bb      	str	r3, [r7, #24]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bbba:	4b8f      	ldr	r3, [pc, #572]	@ (800bdf8 <motorInit+0x320>)
 800bbbc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bbc0:	eef0 2a67 	vmov.f32	s5, s15
 800bbc4:	ed9f 2a94 	vldr	s4, [pc, #592]	@ 800be18 <motorInit+0x340>
 800bbc8:	eddf 1a94 	vldr	s3, [pc, #592]	@ 800be1c <motorInit+0x344>
 800bbcc:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 800be1c <motorInit+0x344>
 800bbd0:	edd7 0a06 	vldr	s1, [r7, #24]
 800bbd4:	ed97 0a07 	vldr	s0, [r7, #28]
 800bbd8:	4891      	ldr	r0, [pc, #580]	@ (800be20 <motorInit+0x348>)
 800bbda:	f7ff fcd1 	bl	800b580 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bbde:	4b86      	ldr	r3, [pc, #536]	@ (800bdf8 <motorInit+0x320>)
 800bbe0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bbe4:	eef0 2a67 	vmov.f32	s5, s15
 800bbe8:	ed9f 2a8b 	vldr	s4, [pc, #556]	@ 800be18 <motorInit+0x340>
 800bbec:	eddf 1a8b 	vldr	s3, [pc, #556]	@ 800be1c <motorInit+0x344>
 800bbf0:	ed9f 1a8a 	vldr	s2, [pc, #552]	@ 800be1c <motorInit+0x344>
 800bbf4:	edd7 0a06 	vldr	s1, [r7, #24]
 800bbf8:	ed97 0a07 	vldr	s0, [r7, #28]
 800bbfc:	488d      	ldr	r0, [pc, #564]	@ (800be34 <motorInit+0x35c>)
 800bbfe:	f7ff fcbf 	bl	800b580 <pidInit>
 800bc02:	e07b      	b.n	800bcfc <motorInit+0x224>
        }
        else
        {
            pidInit(&motor1.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor1.Ts);
 800bc04:	4b7c      	ldr	r3, [pc, #496]	@ (800bdf8 <motorInit+0x320>)
 800bc06:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bc0a:	eef0 2a67 	vmov.f32	s5, s15
 800bc0e:	ed9f 2a82 	vldr	s4, [pc, #520]	@ 800be18 <motorInit+0x340>
 800bc12:	eddf 1a82 	vldr	s3, [pc, #520]	@ 800be1c <motorInit+0x344>
 800bc16:	ed9f 1a81 	vldr	s2, [pc, #516]	@ 800be1c <motorInit+0x344>
 800bc1a:	eddf 0a87 	vldr	s1, [pc, #540]	@ 800be38 <motorInit+0x360>
 800bc1e:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 800be3c <motorInit+0x364>
 800bc22:	4883      	ldr	r0, [pc, #524]	@ (800be30 <motorInit+0x358>)
 800bc24:	f7ff fcac 	bl	800b580 <pidInit>
 800bc28:	e068      	b.n	800bcfc <motorInit+0x224>
        }
    }
    else if (motor1.controlType == ANGLE)
 800bc2a:	4b73      	ldr	r3, [pc, #460]	@ (800bdf8 <motorInit+0x320>)
 800bc2c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bc30:	2b03      	cmp	r3, #3
 800bc32:	d163      	bne.n	800bcfc <motorInit+0x224>
    {
        if (motor1.torqueType == CURRENT)
 800bc34:	4b70      	ldr	r3, [pc, #448]	@ (800bdf8 <motorInit+0x320>)
 800bc36:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d14c      	bne.n	800bcd8 <motorInit+0x200>
        {
            pidInit(&motor1.anglePID, 2, 0, 0, 0, MAX_VELOCITY, motor1.Ts);
 800bc3e:	4b6e      	ldr	r3, [pc, #440]	@ (800bdf8 <motorInit+0x320>)
 800bc40:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bc44:	eef0 2a67 	vmov.f32	s5, s15
 800bc48:	ed9f 2a7d 	vldr	s4, [pc, #500]	@ 800be40 <motorInit+0x368>
 800bc4c:	eddf 1a73 	vldr	s3, [pc, #460]	@ 800be1c <motorInit+0x344>
 800bc50:	ed9f 1a72 	vldr	s2, [pc, #456]	@ 800be1c <motorInit+0x344>
 800bc54:	eddf 0a71 	vldr	s1, [pc, #452]	@ 800be1c <motorInit+0x344>
 800bc58:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800bc5c:	4879      	ldr	r0, [pc, #484]	@ (800be44 <motorInit+0x36c>)
 800bc5e:	f7ff fc8f 	bl	800b580 <pidInit>

            pidInit(&motor1.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800bc62:	4b65      	ldr	r3, [pc, #404]	@ (800bdf8 <motorInit+0x320>)
 800bc64:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bc68:	eef0 2a67 	vmov.f32	s5, s15
 800bc6c:	ed9f 2a6d 	vldr	s4, [pc, #436]	@ 800be24 <motorInit+0x34c>
 800bc70:	eddf 1a6a 	vldr	s3, [pc, #424]	@ 800be1c <motorInit+0x344>
 800bc74:	ed9f 1a69 	vldr	s2, [pc, #420]	@ 800be1c <motorInit+0x344>
 800bc78:	eddf 0a73 	vldr	s1, [pc, #460]	@ 800be48 <motorInit+0x370>
 800bc7c:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 800be4c <motorInit+0x374>
 800bc80:	486b      	ldr	r0, [pc, #428]	@ (800be30 <motorInit+0x358>)
 800bc82:	f7ff fc7d 	bl	800b580 <pidInit>

            // pidInit(&motor1.anglePID, -0.001, -0.0001, 0, 0, CURRENT_MAX / 2, motor1.Ts);

            float kp, ki;
            kp = -200;
 800bc86:	4b72      	ldr	r3, [pc, #456]	@ (800be50 <motorInit+0x378>)
 800bc88:	627b      	str	r3, [r7, #36]	@ 0x24
            ki = -20;
 800bc8a:	4b72      	ldr	r3, [pc, #456]	@ (800be54 <motorInit+0x37c>)
 800bc8c:	623b      	str	r3, [r7, #32]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bc8e:	4b5a      	ldr	r3, [pc, #360]	@ (800bdf8 <motorInit+0x320>)
 800bc90:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bc94:	eef0 2a67 	vmov.f32	s5, s15
 800bc98:	ed9f 2a5f 	vldr	s4, [pc, #380]	@ 800be18 <motorInit+0x340>
 800bc9c:	eddf 1a5f 	vldr	s3, [pc, #380]	@ 800be1c <motorInit+0x344>
 800bca0:	ed9f 1a5e 	vldr	s2, [pc, #376]	@ 800be1c <motorInit+0x344>
 800bca4:	edd7 0a08 	vldr	s1, [r7, #32]
 800bca8:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800bcac:	485c      	ldr	r0, [pc, #368]	@ (800be20 <motorInit+0x348>)
 800bcae:	f7ff fc67 	bl	800b580 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bcb2:	4b51      	ldr	r3, [pc, #324]	@ (800bdf8 <motorInit+0x320>)
 800bcb4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bcb8:	eef0 2a67 	vmov.f32	s5, s15
 800bcbc:	ed9f 2a56 	vldr	s4, [pc, #344]	@ 800be18 <motorInit+0x340>
 800bcc0:	eddf 1a56 	vldr	s3, [pc, #344]	@ 800be1c <motorInit+0x344>
 800bcc4:	ed9f 1a55 	vldr	s2, [pc, #340]	@ 800be1c <motorInit+0x344>
 800bcc8:	edd7 0a08 	vldr	s1, [r7, #32]
 800bccc:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800bcd0:	4858      	ldr	r0, [pc, #352]	@ (800be34 <motorInit+0x35c>)
 800bcd2:	f7ff fc55 	bl	800b580 <pidInit>
 800bcd6:	e011      	b.n	800bcfc <motorInit+0x224>
        }
        else
        {
            pidInit(&motor1.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor1.Ts);
 800bcd8:	4b47      	ldr	r3, [pc, #284]	@ (800bdf8 <motorInit+0x320>)
 800bcda:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bcde:	eef0 2a67 	vmov.f32	s5, s15
 800bce2:	ed9f 2a5d 	vldr	s4, [pc, #372]	@ 800be58 <motorInit+0x380>
 800bce6:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 800be1c <motorInit+0x344>
 800bcea:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 800be1c <motorInit+0x344>
 800bcee:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 800be5c <motorInit+0x384>
 800bcf2:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 800be60 <motorInit+0x388>
 800bcf6:	4853      	ldr	r0, [pc, #332]	@ (800be44 <motorInit+0x36c>)
 800bcf8:	f7ff fc42 	bl	800b580 <pidInit>
        }
    }

    lpfInit(&motor1.IqFilter, 0.05, motor1.Ts);
 800bcfc:	4b3e      	ldr	r3, [pc, #248]	@ (800bdf8 <motorInit+0x320>)
 800bcfe:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bd02:	eef0 0a67 	vmov.f32	s1, s15
 800bd06:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 800be38 <motorInit+0x360>
 800bd0a:	4856      	ldr	r0, [pc, #344]	@ (800be64 <motorInit+0x38c>)
 800bd0c:	f7ff facc 	bl	800b2a8 <lpfInit>
    lpfInit(&motor1.IdFilter, 0.05, motor1.Ts);
 800bd10:	4b39      	ldr	r3, [pc, #228]	@ (800bdf8 <motorInit+0x320>)
 800bd12:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bd16:	eef0 0a67 	vmov.f32	s1, s15
 800bd1a:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 800be38 <motorInit+0x360>
 800bd1e:	4852      	ldr	r0, [pc, #328]	@ (800be68 <motorInit+0x390>)
 800bd20:	f7ff fac2 	bl	800b2a8 <lpfInit>
    lpfInit(&motor1.velocityFilter, 0.01, motor1.Ts);
 800bd24:	4b34      	ldr	r3, [pc, #208]	@ (800bdf8 <motorInit+0x320>)
 800bd26:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bd2a:	eef0 0a67 	vmov.f32	s1, s15
 800bd2e:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800be28 <motorInit+0x350>
 800bd32:	484e      	ldr	r0, [pc, #312]	@ (800be6c <motorInit+0x394>)
 800bd34:	f7ff fab8 	bl	800b2a8 <lpfInit>

#endif
    motor2.pole_pairs = 7;
 800bd38:	4b4d      	ldr	r3, [pc, #308]	@ (800be70 <motorInit+0x398>)
 800bd3a:	2207      	movs	r2, #7
 800bd3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    motor2.updatePwm = updatePwm2;
 800bd40:	4b4b      	ldr	r3, [pc, #300]	@ (800be70 <motorInit+0x398>)
 800bd42:	4a4c      	ldr	r2, [pc, #304]	@ (800be74 <motorInit+0x39c>)
 800bd44:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor2.startPwm = startPwm2;
 800bd48:	4b49      	ldr	r3, [pc, #292]	@ (800be70 <motorInit+0x398>)
 800bd4a:	4a4b      	ldr	r2, [pc, #300]	@ (800be78 <motorInit+0x3a0>)
 800bd4c:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor2.stopPwm = stopPwm2;
 800bd50:	4b47      	ldr	r3, [pc, #284]	@ (800be70 <motorInit+0x398>)
 800bd52:	4a4a      	ldr	r2, [pc, #296]	@ (800be7c <motorInit+0x3a4>)
 800bd54:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    motor2.zeroElectricAngleOffSet = 0;
 800bd58:	4b45      	ldr	r3, [pc, #276]	@ (800be70 <motorInit+0x398>)
 800bd5a:	f04f 0200 	mov.w	r2, #0
 800bd5e:	635a      	str	r2, [r3, #52]	@ 0x34
    motor2.Ts = 100 * 1e-6f;
 800bd60:	4b43      	ldr	r3, [pc, #268]	@ (800be70 <motorInit+0x398>)
 800bd62:	4a29      	ldr	r2, [pc, #164]	@ (800be08 <motorInit+0x330>)
 800bd64:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor2.torqueType = VOLTAGE;
 800bd66:	4b42      	ldr	r3, [pc, #264]	@ (800be70 <motorInit+0x398>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    motor2.controlType = VELOCITY;
 800bd6e:	4b40      	ldr	r3, [pc, #256]	@ (800be70 <motorInit+0x398>)
 800bd70:	2202      	movs	r2, #2
 800bd72:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    motor2.state = MOTOR_CALIBRATE;
 800bd76:	4b3e      	ldr	r3, [pc, #248]	@ (800be70 <motorInit+0x398>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor2.magEncoder, motor2.Ts, _2_MT6701_GetRawAngle, UNKNOWN);
 800bd7e:	4b3c      	ldr	r3, [pc, #240]	@ (800be70 <motorInit+0x398>)
 800bd80:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bd84:	2201      	movs	r2, #1
 800bd86:	493e      	ldr	r1, [pc, #248]	@ (800be80 <motorInit+0x3a8>)
 800bd88:	eeb0 0a67 	vmov.f32	s0, s15
 800bd8c:	4838      	ldr	r0, [pc, #224]	@ (800be70 <motorInit+0x398>)
 800bd8e:	f7ff f9d6 	bl	800b13e <encoderInit>
    if (motor2.controlType == TORQUE && motor2.torqueType == CURRENT)
 800bd92:	4b37      	ldr	r3, [pc, #220]	@ (800be70 <motorInit+0x398>)
 800bd94:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d177      	bne.n	800be8c <motorInit+0x3b4>
 800bd9c:	4b34      	ldr	r3, [pc, #208]	@ (800be70 <motorInit+0x398>)
 800bd9e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d172      	bne.n	800be8c <motorInit+0x3b4>
    {
        float kp, ki;
        kp = -200;
 800bda6:	4b2a      	ldr	r3, [pc, #168]	@ (800be50 <motorInit+0x378>)
 800bda8:	617b      	str	r3, [r7, #20]
        ki = -20;
 800bdaa:	4b2a      	ldr	r3, [pc, #168]	@ (800be54 <motorInit+0x37c>)
 800bdac:	613b      	str	r3, [r7, #16]
        pidInit(&motor2.pidId, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800bdae:	4b30      	ldr	r3, [pc, #192]	@ (800be70 <motorInit+0x398>)
 800bdb0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bdb4:	eef0 2a67 	vmov.f32	s5, s15
 800bdb8:	ed9f 2a17 	vldr	s4, [pc, #92]	@ 800be18 <motorInit+0x340>
 800bdbc:	eddf 1a17 	vldr	s3, [pc, #92]	@ 800be1c <motorInit+0x344>
 800bdc0:	ed9f 1a16 	vldr	s2, [pc, #88]	@ 800be1c <motorInit+0x344>
 800bdc4:	edd7 0a04 	vldr	s1, [r7, #16]
 800bdc8:	ed97 0a05 	vldr	s0, [r7, #20]
 800bdcc:	482d      	ldr	r0, [pc, #180]	@ (800be84 <motorInit+0x3ac>)
 800bdce:	f7ff fbd7 	bl	800b580 <pidInit>
        pidInit(&motor2.pidIq, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800bdd2:	4b27      	ldr	r3, [pc, #156]	@ (800be70 <motorInit+0x398>)
 800bdd4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bdd8:	eef0 2a67 	vmov.f32	s5, s15
 800bddc:	ed9f 2a0e 	vldr	s4, [pc, #56]	@ 800be18 <motorInit+0x340>
 800bde0:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 800be1c <motorInit+0x344>
 800bde4:	ed9f 1a0d 	vldr	s2, [pc, #52]	@ 800be1c <motorInit+0x344>
 800bde8:	edd7 0a04 	vldr	s1, [r7, #16]
 800bdec:	ed97 0a05 	vldr	s0, [r7, #20]
 800bdf0:	4825      	ldr	r0, [pc, #148]	@ (800be88 <motorInit+0x3b0>)
 800bdf2:	f7ff fbc5 	bl	800b580 <pidInit>
    {
 800bdf6:	e10a      	b.n	800c00e <motorInit+0x536>
 800bdf8:	200007a4 	.word	0x200007a4
 800bdfc:	0800de1d 	.word	0x0800de1d
 800be00:	0800ddd5 	.word	0x0800ddd5
 800be04:	0800ddf9 	.word	0x0800ddf9
 800be08:	38d1b717 	.word	0x38d1b717
 800be0c:	0800dcc9 	.word	0x0800dcc9
 800be10:	43fa0000 	.word	0x43fa0000
 800be14:	42480000 	.word	0x42480000
 800be18:	4093cd3a 	.word	0x4093cd3a
 800be1c:	00000000 	.word	0x00000000
 800be20:	20000808 	.word	0x20000808
 800be24:	3e4ccccd 	.word	0x3e4ccccd
 800be28:	3c23d70a 	.word	0x3c23d70a
 800be2c:	3ca3d70a 	.word	0x3ca3d70a
 800be30:	20000850 	.word	0x20000850
 800be34:	2000082c 	.word	0x2000082c
 800be38:	3d4ccccd 	.word	0x3d4ccccd
 800be3c:	3e19999a 	.word	0x3e19999a
 800be40:	43c80000 	.word	0x43c80000
 800be44:	20000874 	.word	0x20000874
 800be48:	bc23d70a 	.word	0xbc23d70a
 800be4c:	bca3d70a 	.word	0xbca3d70a
 800be50:	c3480000 	.word	0xc3480000
 800be54:	c1a00000 	.word	0xc1a00000
 800be58:	4013cd3a 	.word	0x4013cd3a
 800be5c:	3a83126f 	.word	0x3a83126f
 800be60:	3e99999a 	.word	0x3e99999a
 800be64:	20000898 	.word	0x20000898
 800be68:	200008a4 	.word	0x200008a4
 800be6c:	200008b0 	.word	0x200008b0
 800be70:	200008e4 	.word	0x200008e4
 800be74:	0800de99 	.word	0x0800de99
 800be78:	0800de51 	.word	0x0800de51
 800be7c:	0800de75 	.word	0x0800de75
 800be80:	0800dd99 	.word	0x0800dd99
 800be84:	20000948 	.word	0x20000948
 800be88:	2000096c 	.word	0x2000096c
    }
    else if (motor2.controlType == VELOCITY)
 800be8c:	4b71      	ldr	r3, [pc, #452]	@ (800c054 <motorInit+0x57c>)
 800be8e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800be92:	2b02      	cmp	r3, #2
 800be94:	d152      	bne.n	800bf3c <motorInit+0x464>
    {
        if (motor2.torqueType == CURRENT)
 800be96:	4b6f      	ldr	r3, [pc, #444]	@ (800c054 <motorInit+0x57c>)
 800be98:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d13a      	bne.n	800bf16 <motorInit+0x43e>
        {
            pidInit(&motor2.velocityPID, 0.02, 0.01, 0, 0, CURRENT_MAX, motor2.Ts);
 800bea0:	4b6c      	ldr	r3, [pc, #432]	@ (800c054 <motorInit+0x57c>)
 800bea2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bea6:	eef0 2a67 	vmov.f32	s5, s15
 800beaa:	ed9f 2a6b 	vldr	s4, [pc, #428]	@ 800c058 <motorInit+0x580>
 800beae:	eddf 1a6b 	vldr	s3, [pc, #428]	@ 800c05c <motorInit+0x584>
 800beb2:	ed9f 1a6a 	vldr	s2, [pc, #424]	@ 800c05c <motorInit+0x584>
 800beb6:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 800c060 <motorInit+0x588>
 800beba:	ed9f 0a6a 	vldr	s0, [pc, #424]	@ 800c064 <motorInit+0x58c>
 800bebe:	486a      	ldr	r0, [pc, #424]	@ (800c068 <motorInit+0x590>)
 800bec0:	f7ff fb5e 	bl	800b580 <pidInit>

            float kp, ki;
            kp = 500.0f;
 800bec4:	4b69      	ldr	r3, [pc, #420]	@ (800c06c <motorInit+0x594>)
 800bec6:	607b      	str	r3, [r7, #4]
            ki = 50.0f;
 800bec8:	4b69      	ldr	r3, [pc, #420]	@ (800c070 <motorInit+0x598>)
 800beca:	603b      	str	r3, [r7, #0]
            pidInit(&motor2.pidId, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800becc:	4b61      	ldr	r3, [pc, #388]	@ (800c054 <motorInit+0x57c>)
 800bece:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bed2:	eef0 2a67 	vmov.f32	s5, s15
 800bed6:	ed9f 2a67 	vldr	s4, [pc, #412]	@ 800c074 <motorInit+0x59c>
 800beda:	eddf 1a60 	vldr	s3, [pc, #384]	@ 800c05c <motorInit+0x584>
 800bede:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 800c05c <motorInit+0x584>
 800bee2:	edd7 0a00 	vldr	s1, [r7]
 800bee6:	ed97 0a01 	vldr	s0, [r7, #4]
 800beea:	4863      	ldr	r0, [pc, #396]	@ (800c078 <motorInit+0x5a0>)
 800beec:	f7ff fb48 	bl	800b580 <pidInit>
            pidInit(&motor2.pidIq, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800bef0:	4b58      	ldr	r3, [pc, #352]	@ (800c054 <motorInit+0x57c>)
 800bef2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bef6:	eef0 2a67 	vmov.f32	s5, s15
 800befa:	ed9f 2a5e 	vldr	s4, [pc, #376]	@ 800c074 <motorInit+0x59c>
 800befe:	eddf 1a57 	vldr	s3, [pc, #348]	@ 800c05c <motorInit+0x584>
 800bf02:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 800c05c <motorInit+0x584>
 800bf06:	edd7 0a00 	vldr	s1, [r7]
 800bf0a:	ed97 0a01 	vldr	s0, [r7, #4]
 800bf0e:	485b      	ldr	r0, [pc, #364]	@ (800c07c <motorInit+0x5a4>)
 800bf10:	f7ff fb36 	bl	800b580 <pidInit>
 800bf14:	e07b      	b.n	800c00e <motorInit+0x536>
        }
        else
        {
            pidInit(&motor2.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor2.Ts);
 800bf16:	4b4f      	ldr	r3, [pc, #316]	@ (800c054 <motorInit+0x57c>)
 800bf18:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bf1c:	eef0 2a67 	vmov.f32	s5, s15
 800bf20:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 800c074 <motorInit+0x59c>
 800bf24:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 800c05c <motorInit+0x584>
 800bf28:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 800c05c <motorInit+0x584>
 800bf2c:	eddf 0a54 	vldr	s1, [pc, #336]	@ 800c080 <motorInit+0x5a8>
 800bf30:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 800c084 <motorInit+0x5ac>
 800bf34:	484c      	ldr	r0, [pc, #304]	@ (800c068 <motorInit+0x590>)
 800bf36:	f7ff fb23 	bl	800b580 <pidInit>
 800bf3a:	e068      	b.n	800c00e <motorInit+0x536>
        }
    }
    else if (motor2.controlType == ANGLE)
 800bf3c:	4b45      	ldr	r3, [pc, #276]	@ (800c054 <motorInit+0x57c>)
 800bf3e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bf42:	2b03      	cmp	r3, #3
 800bf44:	d163      	bne.n	800c00e <motorInit+0x536>
    {
        if (motor2.torqueType == CURRENT)
 800bf46:	4b43      	ldr	r3, [pc, #268]	@ (800c054 <motorInit+0x57c>)
 800bf48:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d14c      	bne.n	800bfea <motorInit+0x512>
        {
            pidInit(&motor2.anglePID, 2, 0, 0, 0, MAX_VELOCITY, motor2.Ts);
 800bf50:	4b40      	ldr	r3, [pc, #256]	@ (800c054 <motorInit+0x57c>)
 800bf52:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bf56:	eef0 2a67 	vmov.f32	s5, s15
 800bf5a:	ed9f 2a4b 	vldr	s4, [pc, #300]	@ 800c088 <motorInit+0x5b0>
 800bf5e:	eddf 1a3f 	vldr	s3, [pc, #252]	@ 800c05c <motorInit+0x584>
 800bf62:	ed9f 1a3e 	vldr	s2, [pc, #248]	@ 800c05c <motorInit+0x584>
 800bf66:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 800c05c <motorInit+0x584>
 800bf6a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800bf6e:	4847      	ldr	r0, [pc, #284]	@ (800c08c <motorInit+0x5b4>)
 800bf70:	f7ff fb06 	bl	800b580 <pidInit>

            pidInit(&motor2.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor2.Ts);
 800bf74:	4b37      	ldr	r3, [pc, #220]	@ (800c054 <motorInit+0x57c>)
 800bf76:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bf7a:	eef0 2a67 	vmov.f32	s5, s15
 800bf7e:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 800c058 <motorInit+0x580>
 800bf82:	eddf 1a36 	vldr	s3, [pc, #216]	@ 800c05c <motorInit+0x584>
 800bf86:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 800c05c <motorInit+0x584>
 800bf8a:	eddf 0a41 	vldr	s1, [pc, #260]	@ 800c090 <motorInit+0x5b8>
 800bf8e:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 800c094 <motorInit+0x5bc>
 800bf92:	4835      	ldr	r0, [pc, #212]	@ (800c068 <motorInit+0x590>)
 800bf94:	f7ff faf4 	bl	800b580 <pidInit>

            // pidInit(&motor1.anglePID, -0.001, -0.0001, 0, 0, CURRENT_MAX / 2, motor1.Ts);

            float kp, ki;
            kp = -200;
 800bf98:	4b3f      	ldr	r3, [pc, #252]	@ (800c098 <motorInit+0x5c0>)
 800bf9a:	60fb      	str	r3, [r7, #12]
            ki = -20;
 800bf9c:	4b3f      	ldr	r3, [pc, #252]	@ (800c09c <motorInit+0x5c4>)
 800bf9e:	60bb      	str	r3, [r7, #8]
            pidInit(&motor2.pidId, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800bfa0:	4b2c      	ldr	r3, [pc, #176]	@ (800c054 <motorInit+0x57c>)
 800bfa2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bfa6:	eef0 2a67 	vmov.f32	s5, s15
 800bfaa:	ed9f 2a32 	vldr	s4, [pc, #200]	@ 800c074 <motorInit+0x59c>
 800bfae:	eddf 1a2b 	vldr	s3, [pc, #172]	@ 800c05c <motorInit+0x584>
 800bfb2:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 800c05c <motorInit+0x584>
 800bfb6:	edd7 0a02 	vldr	s1, [r7, #8]
 800bfba:	ed97 0a03 	vldr	s0, [r7, #12]
 800bfbe:	482e      	ldr	r0, [pc, #184]	@ (800c078 <motorInit+0x5a0>)
 800bfc0:	f7ff fade 	bl	800b580 <pidInit>
            pidInit(&motor2.pidIq, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800bfc4:	4b23      	ldr	r3, [pc, #140]	@ (800c054 <motorInit+0x57c>)
 800bfc6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bfca:	eef0 2a67 	vmov.f32	s5, s15
 800bfce:	ed9f 2a29 	vldr	s4, [pc, #164]	@ 800c074 <motorInit+0x59c>
 800bfd2:	eddf 1a22 	vldr	s3, [pc, #136]	@ 800c05c <motorInit+0x584>
 800bfd6:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 800c05c <motorInit+0x584>
 800bfda:	edd7 0a02 	vldr	s1, [r7, #8]
 800bfde:	ed97 0a03 	vldr	s0, [r7, #12]
 800bfe2:	4826      	ldr	r0, [pc, #152]	@ (800c07c <motorInit+0x5a4>)
 800bfe4:	f7ff facc 	bl	800b580 <pidInit>
 800bfe8:	e011      	b.n	800c00e <motorInit+0x536>
        }
        else
        {
            pidInit(&motor2.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor2.Ts);
 800bfea:	4b1a      	ldr	r3, [pc, #104]	@ (800c054 <motorInit+0x57c>)
 800bfec:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bff0:	eef0 2a67 	vmov.f32	s5, s15
 800bff4:	ed9f 2a2a 	vldr	s4, [pc, #168]	@ 800c0a0 <motorInit+0x5c8>
 800bff8:	eddf 1a18 	vldr	s3, [pc, #96]	@ 800c05c <motorInit+0x584>
 800bffc:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 800c05c <motorInit+0x584>
 800c000:	eddf 0a28 	vldr	s1, [pc, #160]	@ 800c0a4 <motorInit+0x5cc>
 800c004:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 800c0a8 <motorInit+0x5d0>
 800c008:	4820      	ldr	r0, [pc, #128]	@ (800c08c <motorInit+0x5b4>)
 800c00a:	f7ff fab9 	bl	800b580 <pidInit>
        }
    }

    lpfInit(&motor2.IqFilter, 0.05, motor1.Ts);
 800c00e:	4b27      	ldr	r3, [pc, #156]	@ (800c0ac <motorInit+0x5d4>)
 800c010:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c014:	eef0 0a67 	vmov.f32	s1, s15
 800c018:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800c080 <motorInit+0x5a8>
 800c01c:	4824      	ldr	r0, [pc, #144]	@ (800c0b0 <motorInit+0x5d8>)
 800c01e:	f7ff f943 	bl	800b2a8 <lpfInit>
    lpfInit(&motor2.IdFilter, 0.05, motor1.Ts);
 800c022:	4b22      	ldr	r3, [pc, #136]	@ (800c0ac <motorInit+0x5d4>)
 800c024:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c028:	eef0 0a67 	vmov.f32	s1, s15
 800c02c:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 800c080 <motorInit+0x5a8>
 800c030:	4820      	ldr	r0, [pc, #128]	@ (800c0b4 <motorInit+0x5dc>)
 800c032:	f7ff f939 	bl	800b2a8 <lpfInit>
    lpfInit(&motor2.velocityFilter, 0.01, motor1.Ts);
 800c036:	4b1d      	ldr	r3, [pc, #116]	@ (800c0ac <motorInit+0x5d4>)
 800c038:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c03c:	eef0 0a67 	vmov.f32	s1, s15
 800c040:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800c060 <motorInit+0x588>
 800c044:	481c      	ldr	r0, [pc, #112]	@ (800c0b8 <motorInit+0x5e0>)
 800c046:	f7ff f92f 	bl	800b2a8 <lpfInit>
}
 800c04a:	bf00      	nop
 800c04c:	3730      	adds	r7, #48	@ 0x30
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	200008e4 	.word	0x200008e4
 800c058:	3e4ccccd 	.word	0x3e4ccccd
 800c05c:	00000000 	.word	0x00000000
 800c060:	3c23d70a 	.word	0x3c23d70a
 800c064:	3ca3d70a 	.word	0x3ca3d70a
 800c068:	20000990 	.word	0x20000990
 800c06c:	43fa0000 	.word	0x43fa0000
 800c070:	42480000 	.word	0x42480000
 800c074:	4093cd3a 	.word	0x4093cd3a
 800c078:	20000948 	.word	0x20000948
 800c07c:	2000096c 	.word	0x2000096c
 800c080:	3d4ccccd 	.word	0x3d4ccccd
 800c084:	3e19999a 	.word	0x3e19999a
 800c088:	43c80000 	.word	0x43c80000
 800c08c:	200009b4 	.word	0x200009b4
 800c090:	bc23d70a 	.word	0xbc23d70a
 800c094:	bca3d70a 	.word	0xbca3d70a
 800c098:	c3480000 	.word	0xc3480000
 800c09c:	c1a00000 	.word	0xc1a00000
 800c0a0:	4013cd3a 	.word	0x4013cd3a
 800c0a4:	3a83126f 	.word	0x3a83126f
 800c0a8:	3e99999a 	.word	0x3e99999a
 800c0ac:	200007a4 	.word	0x200007a4
 800c0b0:	200009d8 	.word	0x200009d8
 800c0b4:	200009e4 	.word	0x200009e4
 800c0b8:	200009f0 	.word	0x200009f0

0800c0bc <appInit>:
void appInit()
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	af00      	add	r7, sp, #0

    motorInit();
 800c0c0:	f7ff fd0a 	bl	800bad8 <motorInit>
    devState = STANDBY;
 800c0c4:	4b09      	ldr	r3, [pc, #36]	@ (800c0ec <appInit+0x30>)
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	701a      	strb	r2, [r3, #0]

    // balance
    pidInit(&balancePid, -1, 0, 0, 0, VELOCITY_MAX, 1 * 1e-3f);
 800c0ca:	eddf 2a09 	vldr	s5, [pc, #36]	@ 800c0f0 <appInit+0x34>
 800c0ce:	ed9f 2a09 	vldr	s4, [pc, #36]	@ 800c0f4 <appInit+0x38>
 800c0d2:	eddf 1a09 	vldr	s3, [pc, #36]	@ 800c0f8 <appInit+0x3c>
 800c0d6:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800c0f8 <appInit+0x3c>
 800c0da:	eddf 0a07 	vldr	s1, [pc, #28]	@ 800c0f8 <appInit+0x3c>
 800c0de:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800c0e2:	4806      	ldr	r0, [pc, #24]	@ (800c0fc <appInit+0x40>)
 800c0e4:	f7ff fa4c 	bl	800b580 <pidInit>
}
 800c0e8:	bf00      	nop
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	2000008e 	.word	0x2000008e
 800c0f0:	3a83126f 	.word	0x3a83126f
 800c0f4:	436a0000 	.word	0x436a0000
 800c0f8:	00000000 	.word	0x00000000
 800c0fc:	20000a24 	.word	0x20000a24

0800c100 <appRunning>:
static bool zeroReset, _1s;
void appRunning()
{
 800c100:	b580      	push	{r7, lr}
 800c102:	af00      	add	r7, sp, #0
    _1s = getOneSecFlag();
 800c104:	f002 f86e 	bl	800e1e4 <getOneSecFlag>
 800c108:	4603      	mov	r3, r0
 800c10a:	461a      	mov	r2, r3
 800c10c:	4b14      	ldr	r3, [pc, #80]	@ (800c160 <appRunning+0x60>)
 800c10e:	701a      	strb	r2, [r3, #0]
    getKeyState(&keyState);
 800c110:	4814      	ldr	r0, [pc, #80]	@ (800c164 <appRunning+0x64>)
 800c112:	f000 fba1 	bl	800c858 <getKeyState>
     commander_run(&motor1);
 800c116:	4814      	ldr	r0, [pc, #80]	@ (800c168 <appRunning+0x68>)
 800c118:	f000 f97e 	bl	800c418 <commander_run>
    if (++flashCnt >= 10)
 800c11c:	4b13      	ldr	r3, [pc, #76]	@ (800c16c <appRunning+0x6c>)
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	3301      	adds	r3, #1
 800c122:	b2da      	uxtb	r2, r3
 800c124:	4b11      	ldr	r3, [pc, #68]	@ (800c16c <appRunning+0x6c>)
 800c126:	701a      	strb	r2, [r3, #0]
 800c128:	4b10      	ldr	r3, [pc, #64]	@ (800c16c <appRunning+0x6c>)
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	2b09      	cmp	r3, #9
 800c12e:	d902      	bls.n	800c136 <appRunning+0x36>
        flashCnt = 0;
 800c130:	4b0e      	ldr	r3, [pc, #56]	@ (800c16c <appRunning+0x6c>)
 800c132:	2200      	movs	r2, #0
 800c134:	701a      	strb	r2, [r3, #0]

    ledOn = 0;
 800c136:	4b0e      	ldr	r3, [pc, #56]	@ (800c170 <appRunning+0x70>)
 800c138:	2200      	movs	r2, #0
 800c13a:	701a      	strb	r2, [r3, #0]
    //         motor1.target = goalTorqueV;
    //     else
    //         motor1.target = goalTorqueC;
    // }

    switch (devState)
 800c13c:	4b0d      	ldr	r3, [pc, #52]	@ (800c174 <appRunning+0x74>)
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d002      	beq.n	800c14a <appRunning+0x4a>
 800c144:	2b01      	cmp	r3, #1
 800c146:	d003      	beq.n	800c150 <appRunning+0x50>
 800c148:	e005      	b.n	800c156 <appRunning+0x56>
    {
    case STANDBY:
        standingBy();
 800c14a:	f000 f815 	bl	800c178 <standingBy>
        break;
 800c14e:	e002      	b.n	800c156 <appRunning+0x56>

    case WORK:
        working();
 800c150:	f000 f858 	bl	800c204 <working>
        break;
 800c154:	bf00      	nop
    }

    LED_drive();
 800c156:	f000 fbbd 	bl	800c8d4 <LED_drive>
}
 800c15a:	bf00      	nop
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	20000a49 	.word	0x20000a49
 800c164:	200007a0 	.word	0x200007a0
 800c168:	200007a4 	.word	0x200007a4
 800c16c:	200007a1 	.word	0x200007a1
 800c170:	20000b3c 	.word	0x20000b3c
 800c174:	2000008e 	.word	0x2000008e

0800c178 <standingBy>:
static void standingBy()
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	af00      	add	r7, sp, #0

    ledOn = 1;
 800c17c:	4b1a      	ldr	r3, [pc, #104]	@ (800c1e8 <standingBy+0x70>)
 800c17e:	2201      	movs	r2, #1
 800c180:	701a      	strb	r2, [r3, #0]
    // setTorque(&motor1, 0, OPEN_LOOP_TORQUE, 0);
    if (zeroReset == 0)
 800c182:	4b1a      	ldr	r3, [pc, #104]	@ (800c1ec <standingBy+0x74>)
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d109      	bne.n	800c19e <standingBy+0x26>
    {
        goToZeroElecAngle(&motor1);
 800c18a:	4819      	ldr	r0, [pc, #100]	@ (800c1f0 <standingBy+0x78>)
 800c18c:	f7fe fada 	bl	800a744 <goToZeroElecAngle>
        goToZeroElecAngle(&motor2);
 800c190:	4818      	ldr	r0, [pc, #96]	@ (800c1f4 <standingBy+0x7c>)
 800c192:	f7fe fad7 	bl	800a744 <goToZeroElecAngle>
        zeroReset = 1;
 800c196:	4b15      	ldr	r3, [pc, #84]	@ (800c1ec <standingBy+0x74>)
 800c198:	2201      	movs	r2, #1
 800c19a:	701a      	strb	r2, [r3, #0]
 800c19c:	e007      	b.n	800c1ae <standingBy+0x36>
    }
    else
    {
        motor1.stopPwm();
 800c19e:	4b14      	ldr	r3, [pc, #80]	@ (800c1f0 <standingBy+0x78>)
 800c1a0:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800c1a4:	4798      	blx	r3
        motor2.stopPwm();
 800c1a6:	4b13      	ldr	r3, [pc, #76]	@ (800c1f4 <standingBy+0x7c>)
 800c1a8:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800c1ac:	4798      	blx	r3
    }

    if (keyState == USER1_SHORT)
 800c1ae:	4b12      	ldr	r3, [pc, #72]	@ (800c1f8 <standingBy+0x80>)
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d115      	bne.n	800c1e2 <standingBy+0x6a>
    {
        WORK_INIT;
 800c1b6:	4b11      	ldr	r3, [pc, #68]	@ (800c1fc <standingBy+0x84>)
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	701a      	strb	r2, [r3, #0]
 800c1bc:	4b10      	ldr	r3, [pc, #64]	@ (800c200 <standingBy+0x88>)
 800c1be:	2200      	movs	r2, #0
 800c1c0:	701a      	strb	r2, [r3, #0]
 800c1c2:	4b0b      	ldr	r3, [pc, #44]	@ (800c1f0 <standingBy+0x78>)
 800c1c4:	2202      	movs	r2, #2
 800c1c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800c1ca:	4b09      	ldr	r3, [pc, #36]	@ (800c1f0 <standingBy+0x78>)
 800c1cc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800c1d0:	4798      	blx	r3
 800c1d2:	4b08      	ldr	r3, [pc, #32]	@ (800c1f4 <standingBy+0x7c>)
 800c1d4:	2202      	movs	r2, #2
 800c1d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800c1da:	4b06      	ldr	r3, [pc, #24]	@ (800c1f4 <standingBy+0x7c>)
 800c1dc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800c1e0:	4798      	blx	r3
    }
}
 800c1e2:	bf00      	nop
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20000b3c 	.word	0x20000b3c
 800c1ec:	20000a48 	.word	0x20000a48
 800c1f0:	200007a4 	.word	0x200007a4
 800c1f4:	200008e4 	.word	0x200008e4
 800c1f8:	200007a0 	.word	0x200007a0
 800c1fc:	2000008e 	.word	0x2000008e
 800c200:	200007a1 	.word	0x200007a1

0800c204 <working>:

static void working(void)
{
 800c204:	b480      	push	{r7}
 800c206:	af00      	add	r7, sp, #0
    zeroReset = 0;
 800c208:	4b10      	ldr	r3, [pc, #64]	@ (800c24c <working+0x48>)
 800c20a:	2200      	movs	r2, #0
 800c20c:	701a      	strb	r2, [r3, #0]
    if (flashCnt < 5)
 800c20e:	4b10      	ldr	r3, [pc, #64]	@ (800c250 <working+0x4c>)
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	2b04      	cmp	r3, #4
 800c214:	d802      	bhi.n	800c21c <working+0x18>
        ledOn = 1;
 800c216:	4b0f      	ldr	r3, [pc, #60]	@ (800c254 <working+0x50>)
 800c218:	2201      	movs	r2, #1
 800c21a:	701a      	strb	r2, [r3, #0]

    if (keyState == USER1_SHORT)
 800c21c:	4b0e      	ldr	r3, [pc, #56]	@ (800c258 <working+0x54>)
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	2b01      	cmp	r3, #1
 800c222:	d10d      	bne.n	800c240 <working+0x3c>
    {
        STANDBY_INIT;
 800c224:	4b0d      	ldr	r3, [pc, #52]	@ (800c25c <working+0x58>)
 800c226:	2200      	movs	r2, #0
 800c228:	701a      	strb	r2, [r3, #0]
 800c22a:	4b09      	ldr	r3, [pc, #36]	@ (800c250 <working+0x4c>)
 800c22c:	2200      	movs	r2, #0
 800c22e:	701a      	strb	r2, [r3, #0]
 800c230:	4b0b      	ldr	r3, [pc, #44]	@ (800c260 <working+0x5c>)
 800c232:	2201      	movs	r2, #1
 800c234:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800c238:	4b0a      	ldr	r3, [pc, #40]	@ (800c264 <working+0x60>)
 800c23a:	2201      	movs	r2, #1
 800c23c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    //        //     {
    //        //         bldcMotor.focTarget = 23;
    //        //     }
    //        // }
    //    }
}
 800c240:	bf00      	nop
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop
 800c24c:	20000a48 	.word	0x20000a48
 800c250:	200007a1 	.word	0x200007a1
 800c254:	20000b3c 	.word	0x20000b3c
 800c258:	200007a0 	.word	0x200007a0
 800c25c:	2000008e 	.word	0x2000008e
 800c260:	200007a4 	.word	0x200007a4
 800c264:	200008e4 	.word	0x200008e4

0800c268 <txDataProcess>:

void txDataProcess()
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	af00      	add	r7, sp, #0
    sprintf(txBuffer, "ok\n");
 800c26c:	4902      	ldr	r1, [pc, #8]	@ (800c278 <txDataProcess+0x10>)
 800c26e:	4803      	ldr	r0, [pc, #12]	@ (800c27c <txDataProcess+0x14>)
 800c270:	f003 fd62 	bl	800fd38 <siprintf>

    //  sprintf(txBuffer, "rawData1: %d,rawData2: %d\n", rawData1, rawData2);
    // sprintf(txBuffer, "pitch : %.2f,  wy: %.2f,  velocity1:%.2f, velocity2:%.2f \n", imu.pit, imu.wy, motor1.magEncoder.velocity, motor2.magEncoder.velocity);
    // sprintf(txBuffer, "target:%.2f  velocity1:%.2f  Iq1:%.2f Id1:%.2f  velocity2:%.2f  Iq2:%.2f Id2:%.2f\n", motor1.target, motor1.magEncoder.velocity, motor1.Iq, motor1.Id, motor2.magEncoder.velocity, motor2.Iq, motor2.Id);
    // sprintf(txBuffer, "target:%.2f fullAngle:%.2f velocity:%.2f Uq:%.2f Ud:%.2f Iq:%.2f Id:%.2f elec_angle:%.2f\n", motor1.target, motor1.magEncoder.fullAngle, motor1.magEncoder.velocity, motor1.Uq, motor1.Ud, motor1.Iq, motor1.Id, motor1.angle_el);
}
 800c274:	bf00      	nop
 800c276:	bd80      	pop	{r7, pc}
 800c278:	080138ac 	.word	0x080138ac
 800c27c:	20000a4c 	.word	0x20000a4c

0800c280 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
 800c288:	2201      	movs	r2, #1
 800c28a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c28e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c292:	f7f9 fe67 	bl	8005f64 <HAL_GPIO_WritePin>
    if (hadc == &hadc1)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4a1b      	ldr	r2, [pc, #108]	@ (800c308 <HAL_ADCEx_InjectedConvCpltCallback+0x88>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d128      	bne.n	800c2f0 <HAL_ADCEx_InjectedConvCpltCallback+0x70>
    {
        static bool shift;
        shift = !shift;
 800c29e:	4b1b      	ldr	r3, [pc, #108]	@ (800c30c <HAL_ADCEx_InjectedConvCpltCallback+0x8c>)
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	bf0c      	ite	eq
 800c2a6:	2301      	moveq	r3, #1
 800c2a8:	2300      	movne	r3, #0
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	4b17      	ldr	r3, [pc, #92]	@ (800c30c <HAL_ADCEx_InjectedConvCpltCallback+0x8c>)
 800c2b0:	701a      	strb	r2, [r3, #0]
        if (shift)
 800c2b2:	4b16      	ldr	r3, [pc, #88]	@ (800c30c <HAL_ADCEx_InjectedConvCpltCallback+0x8c>)
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00c      	beq.n	800c2d4 <HAL_ADCEx_InjectedConvCpltCallback+0x54>
        {
            foc(&motor1, hadc1.Instance->JDR1, hadc2.Instance->JDR1);
 800c2ba:	4b13      	ldr	r3, [pc, #76]	@ (800c308 <HAL_ADCEx_InjectedConvCpltCallback+0x88>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800c2c2:	4b13      	ldr	r3, [pc, #76]	@ (800c310 <HAL_ADCEx_InjectedConvCpltCallback+0x90>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	4811      	ldr	r0, [pc, #68]	@ (800c314 <HAL_ADCEx_InjectedConvCpltCallback+0x94>)
 800c2ce:	f7fe fba5 	bl	800aa1c <foc>
 800c2d2:	e00b      	b.n	800c2ec <HAL_ADCEx_InjectedConvCpltCallback+0x6c>
        }
        else
        {
            foc(&motor2, hadc1.Instance->JDR2, hadc2.Instance->JDR2);
 800c2d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c308 <HAL_ADCEx_InjectedConvCpltCallback+0x88>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 800c2dc:	4b0c      	ldr	r3, [pc, #48]	@ (800c310 <HAL_ADCEx_InjectedConvCpltCallback+0x90>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	480c      	ldr	r0, [pc, #48]	@ (800c318 <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 800c2e8:	f7fe fb98 	bl	800aa1c <foc>
        }

        dealPer100us();
 800c2ec:	f001 feb4 	bl	800e058 <dealPer100us>
        load_data[7] = motor2.magEncoder.velocity;
        memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
        HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, sizeof(tempData));
#endif
    }
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c2f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c2fa:	f7f9 fe33 	bl	8005f64 <HAL_GPIO_WritePin>
}
 800c2fe:	bf00      	nop
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	2000029c 	.word	0x2000029c
 800c30c:	20000a4a 	.word	0x20000a4a
 800c310:	20000308 	.word	0x20000308
 800c314:	200007a4 	.word	0x200007a4
 800c318:	200008e4 	.word	0x200008e4

0800c31c <balancerControl>:

void balancerControl()
{
 800c31c:	b480      	push	{r7}
 800c31e:	af00      	add	r7, sp, #0
    motor1.target = (&balancePid, 0 - imu.pit);
 800c320:	4b0c      	ldr	r3, [pc, #48]	@ (800c354 <balancerControl+0x38>)
 800c322:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c326:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800c358 <balancerControl+0x3c>
 800c32a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c32e:	4b0b      	ldr	r3, [pc, #44]	@ (800c35c <balancerControl+0x40>)
 800c330:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    motor2.target = (&balancePid, 0 - imu.pit);
 800c334:	4b07      	ldr	r3, [pc, #28]	@ (800c354 <balancerControl+0x38>)
 800c336:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c33a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800c358 <balancerControl+0x3c>
 800c33e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c342:	4b07      	ldr	r3, [pc, #28]	@ (800c360 <balancerControl+0x44>)
 800c344:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800c348:	bf00      	nop
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop
 800c354:	20000b88 	.word	0x20000b88
 800c358:	00000000 	.word	0x00000000
 800c35c:	200007a4 	.word	0x200007a4
 800c360:	200008e4 	.word	0x200008e4

0800c364 <HAL_UARTEx_RxEventCallback>:
bool toProcessData;
uint8_t aRxBuffer;
float comm1, comm2, comm3, comm4, comm5, comm6, comm7, comm8, comm9, comm10, comm11;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	460b      	mov	r3, r1
 800c36e:	807b      	strh	r3, [r7, #2]
  if (huart == &huart2)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	4a07      	ldr	r2, [pc, #28]	@ (800c390 <HAL_UARTEx_RxEventCallback+0x2c>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d107      	bne.n	800c388 <HAL_UARTEx_RxEventCallback+0x24>
  {
    // HAL_UART_Transmit_DMA(&huart3, rxBuffer, Size);
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, sizeof(rxBuffer));
 800c378:	2264      	movs	r2, #100	@ 0x64
 800c37a:	4906      	ldr	r1, [pc, #24]	@ (800c394 <HAL_UARTEx_RxEventCallback+0x30>)
 800c37c:	4804      	ldr	r0, [pc, #16]	@ (800c390 <HAL_UARTEx_RxEventCallback+0x2c>)
 800c37e:	f7fe f93e 	bl	800a5fe <HAL_UARTEx_ReceiveToIdle_DMA>
    toProcessData = 1;
 800c382:	4b05      	ldr	r3, [pc, #20]	@ (800c398 <HAL_UARTEx_RxEventCallback+0x34>)
 800c384:	2201      	movs	r2, #1
 800c386:	701a      	strb	r2, [r3, #0]
  }
}
 800c388:	bf00      	nop
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	200004f0 	.word	0x200004f0
 800c394:	20000ab0 	.word	0x20000ab0
 800c398:	20000b14 	.word	0x20000b14

0800c39c <printLog>:

// DMA模式
void printLog(const char *format, ...)
{
 800c39c:	b40f      	push	{r0, r1, r2, r3}
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b0c2      	sub	sp, #264	@ 0x108
 800c3a2:	af00      	add	r7, sp, #0

  va_list args;           // 定义参数列表变量
  va_start(args, format); // 从format位置开始接收参数表，放在arg里面
 800c3a4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800c3a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

  char strBuf[256];               // 定义输出的字符串
  vsprintf(strBuf, format, args); // 使用vsprintf将格式化的数据写入缓冲区
 800c3ac:	1d3b      	adds	r3, r7, #4
 800c3ae:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800c3b2:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f003 fd38 	bl	800fe2c <vsiprintf>
  va_end(args);                   // 结束可变参数的使用

  // 等待上次的数据发送完成，避免新的数据覆盖正在传输的数据，导致混乱
  while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX)
 800c3bc:	bf00      	nop
 800c3be:	480d      	ldr	r0, [pc, #52]	@ (800c3f4 <printLog+0x58>)
 800c3c0:	f7fd f8d0 	bl	8009564 <HAL_UART_GetState>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b21      	cmp	r3, #33	@ 0x21
 800c3c8:	d0f9      	beq.n	800c3be <printLog+0x22>
  {
    // Wait for DMA transfer to complete
  }
  HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf), 1000);
 800c3ca:	1d3b      	adds	r3, r7, #4
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7f3 ff77 	bl	80002c0 <strlen>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	b29a      	uxth	r2, r3
 800c3d6:	1d39      	adds	r1, r7, #4
 800c3d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c3dc:	4805      	ldr	r0, [pc, #20]	@ (800c3f4 <printLog+0x58>)
 800c3de:	f7fc fc5d 	bl	8008c9c <HAL_UART_Transmit>
}
 800c3e2:	bf00      	nop
 800c3e4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c3ee:	b004      	add	sp, #16
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	20000584 	.word	0x20000584

0800c3f8 <uartTx>:

//   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
// }

void uartTx()
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	af00      	add	r7, sp, #0

#if SHOW_WAVE == 0
  txDataProcess();
 800c3fc:	f7ff ff34 	bl	800c268 <txDataProcess>
  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)txBuffer, 10);
 800c400:	220a      	movs	r2, #10
 800c402:	4903      	ldr	r1, [pc, #12]	@ (800c410 <uartTx+0x18>)
 800c404:	4803      	ldr	r0, [pc, #12]	@ (800c414 <uartTx+0x1c>)
 800c406:	f7fc fcd7 	bl	8008db8 <HAL_UART_Transmit_DMA>
  // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, 10);
  // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
#endif
}
 800c40a:	bf00      	nop
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	20000a4c 	.word	0x20000a4c
 800c414:	200004f0 	.word	0x200004f0

0800c418 <commander_run>:

void commander_run(BldcMotor *motor)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  if (toProcessData == 1)
 800c420:	4b1e      	ldr	r3, [pc, #120]	@ (800c49c <commander_run+0x84>)
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	2b01      	cmp	r3, #1
 800c426:	d134      	bne.n	800c492 <commander_run+0x7a>
  {
    // memset(txBuffer, '\0', sizeof(txBuffer));
    printLog(rxBuffer);
 800c428:	481d      	ldr	r0, [pc, #116]	@ (800c4a0 <commander_run+0x88>)
 800c42a:	f7ff ffb7 	bl	800c39c <printLog>
    switch (rxBuffer[0])
 800c42e:	4b1c      	ldr	r3, [pc, #112]	@ (800c4a0 <commander_run+0x88>)
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	2b48      	cmp	r3, #72	@ 0x48
 800c434:	d002      	beq.n	800c43c <commander_run+0x24>
 800c436:	2b54      	cmp	r3, #84	@ 0x54
 800c438:	d00a      	beq.n	800c450 <commander_run+0x38>
 800c43a:	e027      	b.n	800c48c <commander_run+0x74>
    {
    case 'H':
      // sprintf(sndBuff, "Hello World!\r\n");
      // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)sndBuff, sizeof(sndBuff));
      sprintf(txBuffer, "Hello World!\r\n");
 800c43c:	4919      	ldr	r1, [pc, #100]	@ (800c4a4 <commander_run+0x8c>)
 800c43e:	481a      	ldr	r0, [pc, #104]	@ (800c4a8 <commander_run+0x90>)
 800c440:	f003 fc7a 	bl	800fd38 <siprintf>
      HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800c444:	2264      	movs	r2, #100	@ 0x64
 800c446:	4918      	ldr	r1, [pc, #96]	@ (800c4a8 <commander_run+0x90>)
 800c448:	4818      	ldr	r0, [pc, #96]	@ (800c4ac <commander_run+0x94>)
 800c44a:	f7fc fcb5 	bl	8008db8 <HAL_UART_Transmit_DMA>
      break;
 800c44e:	e01d      	b.n	800c48c <commander_run+0x74>
    case 'T': // T6.28

      motor->target = atof((const char *)(rxBuffer + 1));
 800c450:	4b17      	ldr	r3, [pc, #92]	@ (800c4b0 <commander_run+0x98>)
 800c452:	4618      	mov	r0, r3
 800c454:	f001 ff2a 	bl	800e2ac <atof>
 800c458:	ec53 2b10 	vmov	r2, r3, d0
 800c45c:	4610      	mov	r0, r2
 800c45e:	4619      	mov	r1, r3
 800c460:	f7f4 fbea 	bl	8000c38 <__aeabi_d2f>
 800c464:	4602      	mov	r2, r0
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	631a      	str	r2, [r3, #48]	@ 0x30
      sprintf(txBuffer, "Target=%.2f\r\n", motor->target);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c46e:	4618      	mov	r0, r3
 800c470:	f7f4 f892 	bl	8000598 <__aeabi_f2d>
 800c474:	4602      	mov	r2, r0
 800c476:	460b      	mov	r3, r1
 800c478:	490e      	ldr	r1, [pc, #56]	@ (800c4b4 <commander_run+0x9c>)
 800c47a:	480b      	ldr	r0, [pc, #44]	@ (800c4a8 <commander_run+0x90>)
 800c47c:	f003 fc5c 	bl	800fd38 <siprintf>
      HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800c480:	2264      	movs	r2, #100	@ 0x64
 800c482:	4909      	ldr	r1, [pc, #36]	@ (800c4a8 <commander_run+0x90>)
 800c484:	4809      	ldr	r0, [pc, #36]	@ (800c4ac <commander_run+0x94>)
 800c486:	f7fc fc97 	bl	8008db8 <HAL_UART_Transmit_DMA>
      // printf("%s", sndBuff);
      // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)sndBuff, sizeof(sndBuff));
      break;
 800c48a:	bf00      	nop
      // case 'A': // A
      //   sprintf(sndBuff, "Ang=%.2f\r\n", shaftAngle);
      //   printf("%s", sndBuff);
      //   break;
    }
    toProcessData = 0;
 800c48c:	4b03      	ldr	r3, [pc, #12]	@ (800c49c <commander_run+0x84>)
 800c48e:	2200      	movs	r2, #0
 800c490:	701a      	strb	r2, [r3, #0]
  }
}
 800c492:	bf00      	nop
 800c494:	3708      	adds	r7, #8
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	20000b14 	.word	0x20000b14
 800c4a0:	20000ab0 	.word	0x20000ab0
 800c4a4:	080138b0 	.word	0x080138b0
 800c4a8:	20000a4c 	.word	0x20000a4c
 800c4ac:	20000584 	.word	0x20000584
 800c4b0:	20000ab1 	.word	0x20000ab1
 800c4b4:	080138c0 	.word	0x080138c0

0800c4b8 <getKeyFlags>:
#include "key.h"

static KeyStruct keyStruct[KEY_NUM];

uint getKeyFlags()
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	af00      	add	r7, sp, #0
    static uint keyFlagsBak; // back up keyflags for filtering
    static uchar filterCnt;
    static Byte flags;       // real time key flags with bits operation
    static uint keyFlagsBuf; // return key flags after filtering

    flags.byte = 0;
 800c4bc:	4b1a      	ldr	r3, [pc, #104]	@ (800c528 <getKeyFlags+0x70>)
 800c4be:	2200      	movs	r2, #0
 800c4c0:	701a      	strb	r2, [r3, #0]

    // when IO been multiplexed
    if (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == 0)
 800c4c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c4c6:	4819      	ldr	r0, [pc, #100]	@ (800c52c <getKeyFlags+0x74>)
 800c4c8:	f7f9 fd34 	bl	8005f34 <HAL_GPIO_ReadPin>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d104      	bne.n	800c4dc <getKeyFlags+0x24>
    {
        flags.bits.b0 = 1; // SW1
 800c4d2:	4a15      	ldr	r2, [pc, #84]	@ (800c528 <getKeyFlags+0x70>)
 800c4d4:	7813      	ldrb	r3, [r2, #0]
 800c4d6:	f043 0301 	orr.w	r3, r3, #1
 800c4da:	7013      	strb	r3, [r2, #0]
    }

  
    if (flags.byte == keyFlagsBak)
 800c4dc:	4b12      	ldr	r3, [pc, #72]	@ (800c528 <getKeyFlags+0x70>)
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	4b13      	ldr	r3, [pc, #76]	@ (800c530 <getKeyFlags+0x78>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d114      	bne.n	800c514 <getKeyFlags+0x5c>
    {
        if (flags.bits.b0)
 800c4ea:	4b0f      	ldr	r3, [pc, #60]	@ (800c528 <getKeyFlags+0x70>)
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	f003 0301 	and.w	r3, r3, #1
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d006      	beq.n	800c506 <getKeyFlags+0x4e>
            keyFlagsBuf |= 1;
 800c4f8:	4b0e      	ldr	r3, [pc, #56]	@ (800c534 <getKeyFlags+0x7c>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f043 0301 	orr.w	r3, r3, #1
 800c500:	4a0c      	ldr	r2, [pc, #48]	@ (800c534 <getKeyFlags+0x7c>)
 800c502:	6013      	str	r3, [r2, #0]
 800c504:	e00b      	b.n	800c51e <getKeyFlags+0x66>
        else
            keyFlagsBuf &= ~1;
 800c506:	4b0b      	ldr	r3, [pc, #44]	@ (800c534 <getKeyFlags+0x7c>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f023 0301 	bic.w	r3, r3, #1
 800c50e:	4a09      	ldr	r2, [pc, #36]	@ (800c534 <getKeyFlags+0x7c>)
 800c510:	6013      	str	r3, [r2, #0]
 800c512:	e004      	b.n	800c51e <getKeyFlags+0x66>
        // else
        //     keyFlagsBuf &= ~(1 << 2);
    }
    else
    {
        keyFlagsBak = flags.byte;
 800c514:	4b04      	ldr	r3, [pc, #16]	@ (800c528 <getKeyFlags+0x70>)
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	461a      	mov	r2, r3
 800c51a:	4b05      	ldr	r3, [pc, #20]	@ (800c530 <getKeyFlags+0x78>)
 800c51c:	601a      	str	r2, [r3, #0]
    }
#if DEBUG_KEY
    // displayStuff = keyFlagsBuf;
#endif

    return keyFlagsBuf;
 800c51e:	4b05      	ldr	r3, [pc, #20]	@ (800c534 <getKeyFlags+0x7c>)
 800c520:	681b      	ldr	r3, [r3, #0]
}
 800c522:	4618      	mov	r0, r3
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	20000b30 	.word	0x20000b30
 800c52c:	48000800 	.word	0x48000800
 800c530:	20000b34 	.word	0x20000b34
 800c534:	20000b38 	.word	0x20000b38

0800c538 <keyScan>:

void keyScan()
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0

    uint keyFlags;

    keyFlags = getKeyFlags();
 800c53e:	f7ff ffbb 	bl	800c4b8 <getKeyFlags>
 800c542:	6038      	str	r0, [r7, #0]

    if (keyFlags == 0)
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d13b      	bne.n	800c5c2 <keyScan+0x8a>
    {
        uchar i;
        for (i = 0; i < KEY_NUM; i++)
 800c54a:	2300      	movs	r3, #0
 800c54c:	71fb      	strb	r3, [r7, #7]
 800c54e:	e035      	b.n	800c5bc <keyScan+0x84>
        {
            if (keyStruct[i].keyType == LONG_WITH_SHORT && keyStruct[i].trigCnt > 0)
 800c550:	79fa      	ldrb	r2, [r7, #7]
 800c552:	4992      	ldr	r1, [pc, #584]	@ (800c79c <keyScan+0x264>)
 800c554:	4613      	mov	r3, r2
 800c556:	005b      	lsls	r3, r3, #1
 800c558:	4413      	add	r3, r2
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	440b      	add	r3, r1
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	2b01      	cmp	r3, #1
 800c562:	d114      	bne.n	800c58e <keyScan+0x56>
 800c564:	79fa      	ldrb	r2, [r7, #7]
 800c566:	498d      	ldr	r1, [pc, #564]	@ (800c79c <keyScan+0x264>)
 800c568:	4613      	mov	r3, r2
 800c56a:	005b      	lsls	r3, r3, #1
 800c56c:	4413      	add	r3, r2
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	440b      	add	r3, r1
 800c572:	3304      	adds	r3, #4
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d009      	beq.n	800c58e <keyScan+0x56>
            {
                keyStruct[i].trigType = TRIG_SHORT;
 800c57a:	79fa      	ldrb	r2, [r7, #7]
 800c57c:	4987      	ldr	r1, [pc, #540]	@ (800c79c <keyScan+0x264>)
 800c57e:	4613      	mov	r3, r2
 800c580:	005b      	lsls	r3, r3, #1
 800c582:	4413      	add	r3, r2
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	440b      	add	r3, r1
 800c588:	3308      	adds	r3, #8
 800c58a:	2201      	movs	r2, #1
 800c58c:	701a      	strb	r2, [r3, #0]
            }
            keyStruct[i].trigCnt = 0;
 800c58e:	79fa      	ldrb	r2, [r7, #7]
 800c590:	4982      	ldr	r1, [pc, #520]	@ (800c79c <keyScan+0x264>)
 800c592:	4613      	mov	r3, r2
 800c594:	005b      	lsls	r3, r3, #1
 800c596:	4413      	add	r3, r2
 800c598:	009b      	lsls	r3, r3, #2
 800c59a:	440b      	add	r3, r1
 800c59c:	3304      	adds	r3, #4
 800c59e:	2200      	movs	r2, #0
 800c5a0:	601a      	str	r2, [r3, #0]
            keyStruct[i].preKeyValue = NO_TRIG;
 800c5a2:	79fa      	ldrb	r2, [r7, #7]
 800c5a4:	497d      	ldr	r1, [pc, #500]	@ (800c79c <keyScan+0x264>)
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	005b      	lsls	r3, r3, #1
 800c5aa:	4413      	add	r3, r2
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	440b      	add	r3, r1
 800c5b0:	3309      	adds	r3, #9
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < KEY_NUM; i++)
 800c5b6:	79fb      	ldrb	r3, [r7, #7]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	71fb      	strb	r3, [r7, #7]
 800c5bc:	79fb      	ldrb	r3, [r7, #7]
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d9c6      	bls.n	800c550 <keyScan+0x18>
        }
    }


    if (keyStruct[1].preKeyValue == NO_TRIG)
 800c5c2:	4b76      	ldr	r3, [pc, #472]	@ (800c79c <keyScan+0x264>)
 800c5c4:	7d5b      	ldrb	r3, [r3, #21]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d131      	bne.n	800c62e <keyScan+0xf6>
    {
        if (keyFlags == K(1))
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d15d      	bne.n	800c68c <keyScan+0x154>
        {
            if (keyStruct[1].preKeyValue == NO_TRIG)
 800c5d0:	4b72      	ldr	r3, [pc, #456]	@ (800c79c <keyScan+0x264>)
 800c5d2:	7d5b      	ldrb	r3, [r3, #21]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d159      	bne.n	800c68c <keyScan+0x154>
            {
                if (keyStruct[1].keyType == SHORT || keyStruct[1].keyType == CONTINUOUS)
 800c5d8:	4b70      	ldr	r3, [pc, #448]	@ (800c79c <keyScan+0x264>)
 800c5da:	7b1b      	ldrb	r3, [r3, #12]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d003      	beq.n	800c5e8 <keyScan+0xb0>
 800c5e0:	4b6e      	ldr	r3, [pc, #440]	@ (800c79c <keyScan+0x264>)
 800c5e2:	7b1b      	ldrb	r3, [r3, #12]
 800c5e4:	2b02      	cmp	r3, #2
 800c5e6:	d106      	bne.n	800c5f6 <keyScan+0xbe>
                {
                    keyStruct[1].trigType = TRIG_SHORT;
 800c5e8:	4b6c      	ldr	r3, [pc, #432]	@ (800c79c <keyScan+0x264>)
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	751a      	strb	r2, [r3, #20]
                    keyStruct[1].preKeyValue = TRIG_SHORT;
 800c5ee:	4b6b      	ldr	r3, [pc, #428]	@ (800c79c <keyScan+0x264>)
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	755a      	strb	r2, [r3, #21]
 800c5f4:	e04a      	b.n	800c68c <keyScan+0x154>
                }
                else if (keyStruct[1].keyType == LONG_WITH_SHORT || keyStruct[1].keyType == LONG)
 800c5f6:	4b69      	ldr	r3, [pc, #420]	@ (800c79c <keyScan+0x264>)
 800c5f8:	7b1b      	ldrb	r3, [r3, #12]
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d003      	beq.n	800c606 <keyScan+0xce>
 800c5fe:	4b67      	ldr	r3, [pc, #412]	@ (800c79c <keyScan+0x264>)
 800c600:	7b1b      	ldrb	r3, [r3, #12]
 800c602:	2b03      	cmp	r3, #3
 800c604:	d142      	bne.n	800c68c <keyScan+0x154>
                {
                    if (++keyStruct[1].trigCnt >= KEY1_LONG_CNT)
 800c606:	4b65      	ldr	r3, [pc, #404]	@ (800c79c <keyScan+0x264>)
 800c608:	691b      	ldr	r3, [r3, #16]
 800c60a:	3301      	adds	r3, #1
 800c60c:	4a63      	ldr	r2, [pc, #396]	@ (800c79c <keyScan+0x264>)
 800c60e:	6113      	str	r3, [r2, #16]
 800c610:	4b62      	ldr	r3, [pc, #392]	@ (800c79c <keyScan+0x264>)
 800c612:	691b      	ldr	r3, [r3, #16]
 800c614:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800c618:	d338      	bcc.n	800c68c <keyScan+0x154>
                    {
                        keyStruct[1].trigCnt = 0;
 800c61a:	4b60      	ldr	r3, [pc, #384]	@ (800c79c <keyScan+0x264>)
 800c61c:	2200      	movs	r2, #0
 800c61e:	611a      	str	r2, [r3, #16]
                        keyStruct[1].trigType = TRIG_LONG;
 800c620:	4b5e      	ldr	r3, [pc, #376]	@ (800c79c <keyScan+0x264>)
 800c622:	2202      	movs	r2, #2
 800c624:	751a      	strb	r2, [r3, #20]
                        keyStruct[1].preKeyValue = TRIG_LONG;
 800c626:	4b5d      	ldr	r3, [pc, #372]	@ (800c79c <keyScan+0x264>)
 800c628:	2202      	movs	r2, #2
 800c62a:	755a      	strb	r2, [r3, #21]
 800c62c:	e02e      	b.n	800c68c <keyScan+0x154>
                    }
                }
            }
        }
    }
    else if (keyStruct[1].keyType == CONTINUOUS)
 800c62e:	4b5b      	ldr	r3, [pc, #364]	@ (800c79c <keyScan+0x264>)
 800c630:	7b1b      	ldrb	r3, [r3, #12]
 800c632:	2b02      	cmp	r3, #2
 800c634:	d12a      	bne.n	800c68c <keyScan+0x154>
    {
        if (keyStruct[1].preKeyValue == TRIG_SHORT) // short key
 800c636:	4b59      	ldr	r3, [pc, #356]	@ (800c79c <keyScan+0x264>)
 800c638:	7d5b      	ldrb	r3, [r3, #21]
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d112      	bne.n	800c664 <keyScan+0x12c>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_TRIG_CNT)
 800c63e:	4b57      	ldr	r3, [pc, #348]	@ (800c79c <keyScan+0x264>)
 800c640:	691b      	ldr	r3, [r3, #16]
 800c642:	3301      	adds	r3, #1
 800c644:	4a55      	ldr	r2, [pc, #340]	@ (800c79c <keyScan+0x264>)
 800c646:	6113      	str	r3, [r2, #16]
 800c648:	4b54      	ldr	r3, [pc, #336]	@ (800c79c <keyScan+0x264>)
 800c64a:	691b      	ldr	r3, [r3, #16]
 800c64c:	2b63      	cmp	r3, #99	@ 0x63
 800c64e:	d91d      	bls.n	800c68c <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800c650:	4b52      	ldr	r3, [pc, #328]	@ (800c79c <keyScan+0x264>)
 800c652:	2200      	movs	r2, #0
 800c654:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = TRIG_LONG; // long
 800c656:	4b51      	ldr	r3, [pc, #324]	@ (800c79c <keyScan+0x264>)
 800c658:	2202      	movs	r2, #2
 800c65a:	751a      	strb	r2, [r3, #20]
                keyStruct[1].preKeyValue = TRIG_LONG;
 800c65c:	4b4f      	ldr	r3, [pc, #316]	@ (800c79c <keyScan+0x264>)
 800c65e:	2202      	movs	r2, #2
 800c660:	755a      	strb	r2, [r3, #21]
 800c662:	e013      	b.n	800c68c <keyScan+0x154>
            }
        }
        else if (keyStruct[1].preKeyValue == TRIG_LONG) // long key
 800c664:	4b4d      	ldr	r3, [pc, #308]	@ (800c79c <keyScan+0x264>)
 800c666:	7d5b      	ldrb	r3, [r3, #21]
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d10f      	bne.n	800c68c <keyScan+0x154>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_INTEVAL)
 800c66c:	4b4b      	ldr	r3, [pc, #300]	@ (800c79c <keyScan+0x264>)
 800c66e:	691b      	ldr	r3, [r3, #16]
 800c670:	3301      	adds	r3, #1
 800c672:	4a4a      	ldr	r2, [pc, #296]	@ (800c79c <keyScan+0x264>)
 800c674:	6113      	str	r3, [r2, #16]
 800c676:	4b49      	ldr	r3, [pc, #292]	@ (800c79c <keyScan+0x264>)
 800c678:	691b      	ldr	r3, [r3, #16]
 800c67a:	2b27      	cmp	r3, #39	@ 0x27
 800c67c:	d906      	bls.n	800c68c <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800c67e:	4b47      	ldr	r3, [pc, #284]	@ (800c79c <keyScan+0x264>)
 800c680:	2200      	movs	r2, #0
 800c682:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = keyStruct[1].preKeyValue;
 800c684:	4b45      	ldr	r3, [pc, #276]	@ (800c79c <keyScan+0x264>)
 800c686:	7d5a      	ldrb	r2, [r3, #21]
 800c688:	4b44      	ldr	r3, [pc, #272]	@ (800c79c <keyScan+0x264>)
 800c68a:	751a      	strb	r2, [r3, #20]
            }
        }
    }

    if (keyStruct[2].preKeyValue == NO_TRIG)
 800c68c:	4b43      	ldr	r3, [pc, #268]	@ (800c79c <keyScan+0x264>)
 800c68e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c692:	2b00      	cmp	r3, #0
 800c694:	d131      	bne.n	800c6fa <keyScan+0x1c2>
    {
        if (keyFlags == K(2))
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	2b02      	cmp	r3, #2
 800c69a:	d163      	bne.n	800c764 <keyScan+0x22c>
        {

            if (keyStruct[2].keyType == SHORT || keyStruct[2].keyType == CONTINUOUS)
 800c69c:	4b3f      	ldr	r3, [pc, #252]	@ (800c79c <keyScan+0x264>)
 800c69e:	7e1b      	ldrb	r3, [r3, #24]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d003      	beq.n	800c6ac <keyScan+0x174>
 800c6a4:	4b3d      	ldr	r3, [pc, #244]	@ (800c79c <keyScan+0x264>)
 800c6a6:	7e1b      	ldrb	r3, [r3, #24]
 800c6a8:	2b02      	cmp	r3, #2
 800c6aa:	d108      	bne.n	800c6be <keyScan+0x186>
            {
                keyStruct[2].trigType = TRIG_SHORT;
 800c6ac:	4b3b      	ldr	r3, [pc, #236]	@ (800c79c <keyScan+0x264>)
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_SHORT;
 800c6b4:	4b39      	ldr	r3, [pc, #228]	@ (800c79c <keyScan+0x264>)
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800c6bc:	e052      	b.n	800c764 <keyScan+0x22c>
            }
            else if (keyStruct[2].keyType == LONG_WITH_SHORT || keyStruct[2].keyType == LONG)
 800c6be:	4b37      	ldr	r3, [pc, #220]	@ (800c79c <keyScan+0x264>)
 800c6c0:	7e1b      	ldrb	r3, [r3, #24]
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d003      	beq.n	800c6ce <keyScan+0x196>
 800c6c6:	4b35      	ldr	r3, [pc, #212]	@ (800c79c <keyScan+0x264>)
 800c6c8:	7e1b      	ldrb	r3, [r3, #24]
 800c6ca:	2b03      	cmp	r3, #3
 800c6cc:	d14a      	bne.n	800c764 <keyScan+0x22c>
            {
                if (++keyStruct[2].trigCnt >= KEY2_LONG_CNT)
 800c6ce:	4b33      	ldr	r3, [pc, #204]	@ (800c79c <keyScan+0x264>)
 800c6d0:	69db      	ldr	r3, [r3, #28]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	4a31      	ldr	r2, [pc, #196]	@ (800c79c <keyScan+0x264>)
 800c6d6:	61d3      	str	r3, [r2, #28]
 800c6d8:	4b30      	ldr	r3, [pc, #192]	@ (800c79c <keyScan+0x264>)
 800c6da:	69db      	ldr	r3, [r3, #28]
 800c6dc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800c6e0:	d340      	bcc.n	800c764 <keyScan+0x22c>
                {
                    keyStruct[2].trigCnt = 0;
 800c6e2:	4b2e      	ldr	r3, [pc, #184]	@ (800c79c <keyScan+0x264>)
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	61da      	str	r2, [r3, #28]
                    keyStruct[2].trigType = TRIG_LONG;
 800c6e8:	4b2c      	ldr	r3, [pc, #176]	@ (800c79c <keyScan+0x264>)
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	f883 2020 	strb.w	r2, [r3, #32]
                    keyStruct[2].preKeyValue = TRIG_LONG;
 800c6f0:	4b2a      	ldr	r3, [pc, #168]	@ (800c79c <keyScan+0x264>)
 800c6f2:	2202      	movs	r2, #2
 800c6f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800c6f8:	e034      	b.n	800c764 <keyScan+0x22c>
                }
            }
        }
    }
    else if (keyStruct[2].keyType == CONTINUOUS)
 800c6fa:	4b28      	ldr	r3, [pc, #160]	@ (800c79c <keyScan+0x264>)
 800c6fc:	7e1b      	ldrb	r3, [r3, #24]
 800c6fe:	2b02      	cmp	r3, #2
 800c700:	d130      	bne.n	800c764 <keyScan+0x22c>
    {
        if (keyStruct[2].preKeyValue == TRIG_SHORT) // short key
 800c702:	4b26      	ldr	r3, [pc, #152]	@ (800c79c <keyScan+0x264>)
 800c704:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d114      	bne.n	800c736 <keyScan+0x1fe>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_TRIG_CNT)
 800c70c:	4b23      	ldr	r3, [pc, #140]	@ (800c79c <keyScan+0x264>)
 800c70e:	69db      	ldr	r3, [r3, #28]
 800c710:	3301      	adds	r3, #1
 800c712:	4a22      	ldr	r2, [pc, #136]	@ (800c79c <keyScan+0x264>)
 800c714:	61d3      	str	r3, [r2, #28]
 800c716:	4b21      	ldr	r3, [pc, #132]	@ (800c79c <keyScan+0x264>)
 800c718:	69db      	ldr	r3, [r3, #28]
 800c71a:	2b63      	cmp	r3, #99	@ 0x63
 800c71c:	d922      	bls.n	800c764 <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800c71e:	4b1f      	ldr	r3, [pc, #124]	@ (800c79c <keyScan+0x264>)
 800c720:	2200      	movs	r2, #0
 800c722:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = TRIG_LONG; // long
 800c724:	4b1d      	ldr	r3, [pc, #116]	@ (800c79c <keyScan+0x264>)
 800c726:	2202      	movs	r2, #2
 800c728:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_LONG;
 800c72c:	4b1b      	ldr	r3, [pc, #108]	@ (800c79c <keyScan+0x264>)
 800c72e:	2202      	movs	r2, #2
 800c730:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800c734:	e016      	b.n	800c764 <keyScan+0x22c>
            }
        }
        else if (keyStruct[2].preKeyValue == TRIG_LONG) // long key
 800c736:	4b19      	ldr	r3, [pc, #100]	@ (800c79c <keyScan+0x264>)
 800c738:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c73c:	2b02      	cmp	r3, #2
 800c73e:	d111      	bne.n	800c764 <keyScan+0x22c>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_INTEVAL)
 800c740:	4b16      	ldr	r3, [pc, #88]	@ (800c79c <keyScan+0x264>)
 800c742:	69db      	ldr	r3, [r3, #28]
 800c744:	3301      	adds	r3, #1
 800c746:	4a15      	ldr	r2, [pc, #84]	@ (800c79c <keyScan+0x264>)
 800c748:	61d3      	str	r3, [r2, #28]
 800c74a:	4b14      	ldr	r3, [pc, #80]	@ (800c79c <keyScan+0x264>)
 800c74c:	69db      	ldr	r3, [r3, #28]
 800c74e:	2b27      	cmp	r3, #39	@ 0x27
 800c750:	d908      	bls.n	800c764 <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800c752:	4b12      	ldr	r3, [pc, #72]	@ (800c79c <keyScan+0x264>)
 800c754:	2200      	movs	r2, #0
 800c756:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = keyStruct[2].preKeyValue;
 800c758:	4b10      	ldr	r3, [pc, #64]	@ (800c79c <keyScan+0x264>)
 800c75a:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800c75e:	4b0f      	ldr	r3, [pc, #60]	@ (800c79c <keyScan+0x264>)
 800c760:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }

    if (keyStruct[3].preKeyValue == NO_TRIG)
 800c764:	4b0d      	ldr	r3, [pc, #52]	@ (800c79c <keyScan+0x264>)
 800c766:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d137      	bne.n	800c7de <keyScan+0x2a6>
    {
        if (keyFlags == K(3))
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	2b04      	cmp	r3, #4
 800c772:	d16a      	bne.n	800c84a <keyScan+0x312>
        {
            if (keyStruct[3].keyType == SHORT || keyStruct[3].keyType == CONTINUOUS)
 800c774:	4b09      	ldr	r3, [pc, #36]	@ (800c79c <keyScan+0x264>)
 800c776:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d004      	beq.n	800c788 <keyScan+0x250>
 800c77e:	4b07      	ldr	r3, [pc, #28]	@ (800c79c <keyScan+0x264>)
 800c780:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c784:	2b02      	cmp	r3, #2
 800c786:	d10b      	bne.n	800c7a0 <keyScan+0x268>
            {
                keyStruct[3].trigType = TRIG_SHORT;
 800c788:	4b04      	ldr	r3, [pc, #16]	@ (800c79c <keyScan+0x264>)
 800c78a:	2201      	movs	r2, #1
 800c78c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_SHORT;
 800c790:	4b02      	ldr	r3, [pc, #8]	@ (800c79c <keyScan+0x264>)
 800c792:	2201      	movs	r2, #1
 800c794:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                keyStruct[3].trigCnt = 0;
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
            }
        }
    }
}
 800c798:	e057      	b.n	800c84a <keyScan+0x312>
 800c79a:	bf00      	nop
 800c79c:	20000b18 	.word	0x20000b18
            else if (keyStruct[3].keyType == LONG_WITH_SHORT || keyStruct[3].keyType == LONG)
 800c7a0:	4b2c      	ldr	r3, [pc, #176]	@ (800c854 <keyScan+0x31c>)
 800c7a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d004      	beq.n	800c7b4 <keyScan+0x27c>
 800c7aa:	4b2a      	ldr	r3, [pc, #168]	@ (800c854 <keyScan+0x31c>)
 800c7ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c7b0:	2b03      	cmp	r3, #3
 800c7b2:	d14a      	bne.n	800c84a <keyScan+0x312>
                if (++keyStruct[3].trigCnt >= KEY3_LONG_CNT)
 800c7b4:	4b27      	ldr	r3, [pc, #156]	@ (800c854 <keyScan+0x31c>)
 800c7b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	4a26      	ldr	r2, [pc, #152]	@ (800c854 <keyScan+0x31c>)
 800c7bc:	6293      	str	r3, [r2, #40]	@ 0x28
 800c7be:	4b25      	ldr	r3, [pc, #148]	@ (800c854 <keyScan+0x31c>)
 800c7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d041      	beq.n	800c84a <keyScan+0x312>
                    keyStruct[3].trigCnt = 0;
 800c7c6:	4b23      	ldr	r3, [pc, #140]	@ (800c854 <keyScan+0x31c>)
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	629a      	str	r2, [r3, #40]	@ 0x28
                    keyStruct[3].trigType = TRIG_LONG;
 800c7cc:	4b21      	ldr	r3, [pc, #132]	@ (800c854 <keyScan+0x31c>)
 800c7ce:	2202      	movs	r2, #2
 800c7d0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                    keyStruct[3].preKeyValue = TRIG_LONG;
 800c7d4:	4b1f      	ldr	r3, [pc, #124]	@ (800c854 <keyScan+0x31c>)
 800c7d6:	2202      	movs	r2, #2
 800c7d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800c7dc:	e035      	b.n	800c84a <keyScan+0x312>
    else if (keyStruct[3].keyType == CONTINUOUS)
 800c7de:	4b1d      	ldr	r3, [pc, #116]	@ (800c854 <keyScan+0x31c>)
 800c7e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c7e4:	2b02      	cmp	r3, #2
 800c7e6:	d130      	bne.n	800c84a <keyScan+0x312>
        if (keyStruct[3].preKeyValue == TRIG_SHORT) // short key
 800c7e8:	4b1a      	ldr	r3, [pc, #104]	@ (800c854 <keyScan+0x31c>)
 800c7ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d114      	bne.n	800c81c <keyScan+0x2e4>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_TRIG_CNT)
 800c7f2:	4b18      	ldr	r3, [pc, #96]	@ (800c854 <keyScan+0x31c>)
 800c7f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	4a16      	ldr	r2, [pc, #88]	@ (800c854 <keyScan+0x31c>)
 800c7fa:	6293      	str	r3, [r2, #40]	@ 0x28
 800c7fc:	4b15      	ldr	r3, [pc, #84]	@ (800c854 <keyScan+0x31c>)
 800c7fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c800:	2b63      	cmp	r3, #99	@ 0x63
 800c802:	d922      	bls.n	800c84a <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800c804:	4b13      	ldr	r3, [pc, #76]	@ (800c854 <keyScan+0x31c>)
 800c806:	2200      	movs	r2, #0
 800c808:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = TRIG_LONG; // long
 800c80a:	4b12      	ldr	r3, [pc, #72]	@ (800c854 <keyScan+0x31c>)
 800c80c:	2202      	movs	r2, #2
 800c80e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_LONG;
 800c812:	4b10      	ldr	r3, [pc, #64]	@ (800c854 <keyScan+0x31c>)
 800c814:	2202      	movs	r2, #2
 800c816:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800c81a:	e016      	b.n	800c84a <keyScan+0x312>
        else if (keyStruct[3].preKeyValue == TRIG_LONG) // long key
 800c81c:	4b0d      	ldr	r3, [pc, #52]	@ (800c854 <keyScan+0x31c>)
 800c81e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c822:	2b02      	cmp	r3, #2
 800c824:	d111      	bne.n	800c84a <keyScan+0x312>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_INTEVAL)
 800c826:	4b0b      	ldr	r3, [pc, #44]	@ (800c854 <keyScan+0x31c>)
 800c828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c82a:	3301      	adds	r3, #1
 800c82c:	4a09      	ldr	r2, [pc, #36]	@ (800c854 <keyScan+0x31c>)
 800c82e:	6293      	str	r3, [r2, #40]	@ 0x28
 800c830:	4b08      	ldr	r3, [pc, #32]	@ (800c854 <keyScan+0x31c>)
 800c832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c834:	2b27      	cmp	r3, #39	@ 0x27
 800c836:	d908      	bls.n	800c84a <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800c838:	4b06      	ldr	r3, [pc, #24]	@ (800c854 <keyScan+0x31c>)
 800c83a:	2200      	movs	r2, #0
 800c83c:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
 800c83e:	4b05      	ldr	r3, [pc, #20]	@ (800c854 <keyScan+0x31c>)
 800c840:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800c844:	4b03      	ldr	r3, [pc, #12]	@ (800c854 <keyScan+0x31c>)
 800c846:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 800c84a:	bf00      	nop
 800c84c:	3708      	adds	r7, #8
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	20000b18 	.word	0x20000b18

0800c858 <getKeyState>:

/*
将物理按键转化为逻辑按键
 */
void getKeyState(KeyState *keyState)
{
 800c858:	b480      	push	{r7}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
    uchar i;

    if (keyStruct[1].trigType == TRIG_SHORT)
 800c860:	4b1b      	ldr	r3, [pc, #108]	@ (800c8d0 <getKeyState+0x78>)
 800c862:	7d1b      	ldrb	r3, [r3, #20]
 800c864:	2b01      	cmp	r3, #1
 800c866:	d103      	bne.n	800c870 <getKeyState+0x18>
        *keyState = USER1_SHORT;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2201      	movs	r2, #1
 800c86c:	701a      	strb	r2, [r3, #0]
 800c86e:	e014      	b.n	800c89a <getKeyState+0x42>
    else if (keyStruct[2].trigType == TRIG_SHORT)
 800c870:	4b17      	ldr	r3, [pc, #92]	@ (800c8d0 <getKeyState+0x78>)
 800c872:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c876:	2b01      	cmp	r3, #1
 800c878:	d103      	bne.n	800c882 <getKeyState+0x2a>
        *keyState = USER2_SHORT;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2202      	movs	r2, #2
 800c87e:	701a      	strb	r2, [r3, #0]
 800c880:	e00b      	b.n	800c89a <getKeyState+0x42>
    else if (keyStruct[3].trigType == TRIG_SHORT)
 800c882:	4b13      	ldr	r3, [pc, #76]	@ (800c8d0 <getKeyState+0x78>)
 800c884:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d103      	bne.n	800c894 <getKeyState+0x3c>
        *keyState = USER3_SHORT;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2203      	movs	r2, #3
 800c890:	701a      	strb	r2, [r3, #0]
 800c892:	e002      	b.n	800c89a <getKeyState+0x42>
    else
        *keyState = NONE_KEY;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < KEY_NUM; i++)
 800c89a:	2300      	movs	r3, #0
 800c89c:	73fb      	strb	r3, [r7, #15]
 800c89e:	e00c      	b.n	800c8ba <getKeyState+0x62>
    {
        keyStruct[i].trigType = NO_TRIG;
 800c8a0:	7bfa      	ldrb	r2, [r7, #15]
 800c8a2:	490b      	ldr	r1, [pc, #44]	@ (800c8d0 <getKeyState+0x78>)
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	005b      	lsls	r3, r3, #1
 800c8a8:	4413      	add	r3, r2
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	440b      	add	r3, r1
 800c8ae:	3308      	adds	r3, #8
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < KEY_NUM; i++)
 800c8b4:	7bfb      	ldrb	r3, [r7, #15]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	73fb      	strb	r3, [r7, #15]
 800c8ba:	7bfb      	ldrb	r3, [r7, #15]
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d9ef      	bls.n	800c8a0 <getKeyState+0x48>
    }
}
 800c8c0:	bf00      	nop
 800c8c2:	bf00      	nop
 800c8c4:	3714      	adds	r7, #20
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop
 800c8d0:	20000b18 	.word	0x20000b18

0800c8d4 <LED_drive>:
#include "led.h"

bool ledOn;

void LED_drive()
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	af00      	add	r7, sp, #0
    if (ledOn)
 800c8d8:	4b08      	ldr	r3, [pc, #32]	@ (800c8fc <LED_drive+0x28>)
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d005      	beq.n	800c8ec <LED_drive+0x18>
        LED_ON;
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	2101      	movs	r1, #1
 800c8e4:	4806      	ldr	r0, [pc, #24]	@ (800c900 <LED_drive+0x2c>)
 800c8e6:	f7f9 fb3d 	bl	8005f64 <HAL_GPIO_WritePin>
    else
        LED_OFF;
}
 800c8ea:	e004      	b.n	800c8f6 <LED_drive+0x22>
        LED_OFF;
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	2101      	movs	r1, #1
 800c8f0:	4803      	ldr	r0, [pc, #12]	@ (800c900 <LED_drive+0x2c>)
 800c8f2:	f7f9 fb37 	bl	8005f64 <HAL_GPIO_WritePin>
}
 800c8f6:	bf00      	nop
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	20000b3c 	.word	0x20000b3c
 800c900:	48000400 	.word	0x48000400

0800c904 <inv_sqrt>:

// 快速平方根倒数，计算 1/Sqrt(x)
// X:数字还需要计算
// 调用imu ahrs update()函数
float inv_sqrt(float x)
{
 800c904:	b480      	push	{r7}
 800c906:	b087      	sub	sp, #28
 800c908:	af00      	add	r7, sp, #0
 800c90a:	ed87 0a01 	vstr	s0, [r7, #4]
    float halfx = 0.5f * x;
 800c90e:	edd7 7a01 	vldr	s15, [r7, #4]
 800c912:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c916:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c91a:	edc7 7a05 	vstr	s15, [r7, #20]
    float y = x;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	613b      	str	r3, [r7, #16]
    long i = *(long *)&y;
 800c922:	f107 0310 	add.w	r3, r7, #16
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	60fb      	str	r3, [r7, #12]

    i = 0x5f3759df - (i >> 1);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	105a      	asrs	r2, r3, #1
 800c92e:	4b12      	ldr	r3, [pc, #72]	@ (800c978 <inv_sqrt+0x74>)
 800c930:	1a9b      	subs	r3, r3, r2
 800c932:	60fb      	str	r3, [r7, #12]
    y = *(float *)&i;
 800c934:	f107 030c 	add.w	r3, r7, #12
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	613b      	str	r3, [r7, #16]
    y = y * (1.5f - (halfx * y * y));
 800c93c:	ed97 7a04 	vldr	s14, [r7, #16]
 800c940:	edd7 7a05 	vldr	s15, [r7, #20]
 800c944:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c948:	edd7 7a04 	vldr	s15, [r7, #16]
 800c94c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c950:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800c954:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c958:	edd7 7a04 	vldr	s15, [r7, #16]
 800c95c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c960:	edc7 7a04 	vstr	s15, [r7, #16]

    return y;
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	ee07 3a90 	vmov	s15, r3
}
 800c96a:	eeb0 0a67 	vmov.f32	s0, s15
 800c96e:	371c      	adds	r7, #28
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr
 800c978:	5f3759df 	.word	0x5f3759df

0800c97c <mpu_write_byte>:
// MPU6500单次写命令
uint8_t mpu_write_byte(uint8_t const reg, uint8_t const data)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af02      	add	r7, sp, #8
 800c982:	4603      	mov	r3, r0
 800c984:	460a      	mov	r2, r1
 800c986:	71fb      	strb	r3, [r7, #7]
 800c988:	4613      	mov	r3, r2
 800c98a:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;                                         // 开始通讯
 800c98c:	2200      	movs	r2, #0
 800c98e:	2110      	movs	r1, #16
 800c990:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c994:	f7f9 fae6 	bl	8005f64 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;                                     // 使第一位为0（写模式）
 800c998:	79fb      	ldrb	r3, [r7, #7]
 800c99a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	4b0f      	ldr	r3, [pc, #60]	@ (800c9e0 <mpu_write_byte+0x64>)
 800c9a2:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入命令地址
 800c9a4:	2337      	movs	r3, #55	@ 0x37
 800c9a6:	9300      	str	r3, [sp, #0]
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	4a0e      	ldr	r2, [pc, #56]	@ (800c9e4 <mpu_write_byte+0x68>)
 800c9ac:	490c      	ldr	r1, [pc, #48]	@ (800c9e0 <mpu_write_byte+0x64>)
 800c9ae:	480e      	ldr	r0, [pc, #56]	@ (800c9e8 <mpu_write_byte+0x6c>)
 800c9b0:	f7fa fb6d 	bl	800708e <HAL_SPI_TransmitReceive>
    tx = data;
 800c9b4:	4a0a      	ldr	r2, [pc, #40]	@ (800c9e0 <mpu_write_byte+0x64>)
 800c9b6:	79bb      	ldrb	r3, [r7, #6]
 800c9b8:	7013      	strb	r3, [r2, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入数据
 800c9ba:	2337      	movs	r3, #55	@ 0x37
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	2301      	movs	r3, #1
 800c9c0:	4a08      	ldr	r2, [pc, #32]	@ (800c9e4 <mpu_write_byte+0x68>)
 800c9c2:	4907      	ldr	r1, [pc, #28]	@ (800c9e0 <mpu_write_byte+0x64>)
 800c9c4:	4808      	ldr	r0, [pc, #32]	@ (800c9e8 <mpu_write_byte+0x6c>)
 800c9c6:	f7fa fb62 	bl	800708e <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;                                        // 结束通讯
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	2110      	movs	r1, #16
 800c9ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c9d2:	f7f9 fac7 	bl	8005f64 <HAL_GPIO_WritePin>
    return 0;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3708      	adds	r7, #8
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	20000b3d 	.word	0x20000b3d
 800c9e4:	20000b3e 	.word	0x20000b3e
 800c9e8:	2000038c 	.word	0x2000038c

0800c9ec <mpu_read_byte>:
// MPU6500单次读取单字节数据
uint8_t mpu_read_byte(uint8_t const reg)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af02      	add	r7, sp, #8
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	71fb      	strb	r3, [r7, #7]
    MPU_NSS_LOW;
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	2110      	movs	r1, #16
 800c9fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c9fe:	f7f9 fab1 	bl	8005f64 <HAL_GPIO_WritePin>
    tx = reg | 0x80;                                     // 使地址第一位为1（读模式）
 800ca02:	79fb      	ldrb	r3, [r7, #7]
 800ca04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ca08:	b2da      	uxtb	r2, r3
 800ca0a:	4b0f      	ldr	r3, [pc, #60]	@ (800ca48 <mpu_read_byte+0x5c>)
 800ca0c:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入需要读取的地址
 800ca0e:	2337      	movs	r3, #55	@ 0x37
 800ca10:	9300      	str	r3, [sp, #0]
 800ca12:	2301      	movs	r3, #1
 800ca14:	4a0d      	ldr	r2, [pc, #52]	@ (800ca4c <mpu_read_byte+0x60>)
 800ca16:	490c      	ldr	r1, [pc, #48]	@ (800ca48 <mpu_read_byte+0x5c>)
 800ca18:	480d      	ldr	r0, [pc, #52]	@ (800ca50 <mpu_read_byte+0x64>)
 800ca1a:	f7fa fb38 	bl	800708e <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 为读取的数据提供存储空间
 800ca1e:	2337      	movs	r3, #55	@ 0x37
 800ca20:	9300      	str	r3, [sp, #0]
 800ca22:	2301      	movs	r3, #1
 800ca24:	4a09      	ldr	r2, [pc, #36]	@ (800ca4c <mpu_read_byte+0x60>)
 800ca26:	4908      	ldr	r1, [pc, #32]	@ (800ca48 <mpu_read_byte+0x5c>)
 800ca28:	4809      	ldr	r0, [pc, #36]	@ (800ca50 <mpu_read_byte+0x64>)
 800ca2a:	f7fa fb30 	bl	800708e <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800ca2e:	2201      	movs	r2, #1
 800ca30:	2110      	movs	r1, #16
 800ca32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ca36:	f7f9 fa95 	bl	8005f64 <HAL_GPIO_WritePin>
    return rx;
 800ca3a:	4b04      	ldr	r3, [pc, #16]	@ (800ca4c <mpu_read_byte+0x60>)
 800ca3c:	781b      	ldrb	r3, [r3, #0]
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3708      	adds	r7, #8
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	20000b3d 	.word	0x20000b3d
 800ca4c:	20000b3e 	.word	0x20000b3e
 800ca50:	2000038c 	.word	0x2000038c

0800ca54 <mpu_read_bytes>:

// MPU6500单次读取多字节数据
uint8_t mpu_read_bytes(uint8_t const regAddr, uint8_t *pData, uint8_t len)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b084      	sub	sp, #16
 800ca58:	af02      	add	r7, sp, #8
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	6039      	str	r1, [r7, #0]
 800ca5e:	71fb      	strb	r3, [r7, #7]
 800ca60:	4613      	mov	r3, r2
 800ca62:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;
 800ca64:	2200      	movs	r2, #0
 800ca66:	2110      	movs	r1, #16
 800ca68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ca6c:	f7f9 fa7a 	bl	8005f64 <HAL_GPIO_WritePin>
    tx = regAddr | 0x80;
 800ca70:	79fb      	ldrb	r3, [r7, #7]
 800ca72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ca76:	b2da      	uxtb	r2, r3
 800ca78:	4b10      	ldr	r3, [pc, #64]	@ (800cabc <mpu_read_bytes+0x68>)
 800ca7a:	701a      	strb	r2, [r3, #0]
    tx_buff[0] = tx;
 800ca7c:	4b0f      	ldr	r3, [pc, #60]	@ (800cabc <mpu_read_bytes+0x68>)
 800ca7e:	781a      	ldrb	r2, [r3, #0]
 800ca80:	4b0f      	ldr	r3, [pc, #60]	@ (800cac0 <mpu_read_bytes+0x6c>)
 800ca82:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800ca84:	2337      	movs	r3, #55	@ 0x37
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	2301      	movs	r3, #1
 800ca8a:	4a0e      	ldr	r2, [pc, #56]	@ (800cac4 <mpu_read_bytes+0x70>)
 800ca8c:	490b      	ldr	r1, [pc, #44]	@ (800cabc <mpu_read_bytes+0x68>)
 800ca8e:	480e      	ldr	r0, [pc, #56]	@ (800cac8 <mpu_read_bytes+0x74>)
 800ca90:	f7fa fafd 	bl	800708e <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 800ca94:	79bb      	ldrb	r3, [r7, #6]
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	2237      	movs	r2, #55	@ 0x37
 800ca9a:	9200      	str	r2, [sp, #0]
 800ca9c:	683a      	ldr	r2, [r7, #0]
 800ca9e:	4908      	ldr	r1, [pc, #32]	@ (800cac0 <mpu_read_bytes+0x6c>)
 800caa0:	4809      	ldr	r0, [pc, #36]	@ (800cac8 <mpu_read_bytes+0x74>)
 800caa2:	f7fa faf4 	bl	800708e <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800caa6:	2201      	movs	r2, #1
 800caa8:	2110      	movs	r1, #16
 800caaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800caae:	f7f9 fa59 	bl	8005f64 <HAL_GPIO_WritePin>
    return 0;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3708      	adds	r7, #8
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	20000b3d 	.word	0x20000b3d
 800cac0:	20000094 	.word	0x20000094
 800cac4:	20000b3e 	.word	0x20000b3e
 800cac8:	2000038c 	.word	0x2000038c

0800cacc <mpu_set_gyro_fsr>:

// 设置imu 6500陀螺仪测量范围
uint8_t mpu_set_gyro_fsr(uint8_t fsr)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	4603      	mov	r3, r0
 800cad4:	71fb      	strb	r3, [r7, #7]
    return mpu_write_byte(MPU6500_GYRO_CONFIG, fsr << 3);
 800cad6:	79fb      	ldrb	r3, [r7, #7]
 800cad8:	00db      	lsls	r3, r3, #3
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	4619      	mov	r1, r3
 800cade:	201b      	movs	r0, #27
 800cae0:	f7ff ff4c 	bl	800c97c <mpu_write_byte>
 800cae4:	4603      	mov	r3, r0
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3708      	adds	r7, #8
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}

0800caee <mpu_set_accel_fsr>:
// 设置imu 6050/6500加速测量范围
uint8_t mpu_set_accel_fsr(uint8_t fsr)
{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b082      	sub	sp, #8
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	4603      	mov	r3, r0
 800caf6:	71fb      	strb	r3, [r7, #7]
    return mpu_write_byte(MPU6500_ACCEL_CONFIG, fsr << 3);
 800caf8:	79fb      	ldrb	r3, [r7, #7]
 800cafa:	00db      	lsls	r3, r3, #3
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	4619      	mov	r1, r3
 800cb00:	201c      	movs	r0, #28
 800cb02:	f7ff ff3b 	bl	800c97c <mpu_write_byte>
 800cb06:	4603      	mov	r3, r0
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3708      	adds	r7, #8
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <mpu_get_data>:
// 获取IMU数据
void mpu_get_data()
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	af00      	add	r7, sp, #0
    mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800cb14:	220e      	movs	r2, #14
 800cb16:	495c      	ldr	r1, [pc, #368]	@ (800cc88 <mpu_get_data+0x178>)
 800cb18:	203b      	movs	r0, #59	@ 0x3b
 800cb1a:	f7ff ff9b 	bl	800ca54 <mpu_read_bytes>

    mpu_data.ax = mpu_buff[0] << 8 | mpu_buff[1];
 800cb1e:	4b5a      	ldr	r3, [pc, #360]	@ (800cc88 <mpu_get_data+0x178>)
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	021b      	lsls	r3, r3, #8
 800cb24:	b21a      	sxth	r2, r3
 800cb26:	4b58      	ldr	r3, [pc, #352]	@ (800cc88 <mpu_get_data+0x178>)
 800cb28:	785b      	ldrb	r3, [r3, #1]
 800cb2a:	b21b      	sxth	r3, r3
 800cb2c:	4313      	orrs	r3, r2
 800cb2e:	b21a      	sxth	r2, r3
 800cb30:	4b56      	ldr	r3, [pc, #344]	@ (800cc8c <mpu_get_data+0x17c>)
 800cb32:	801a      	strh	r2, [r3, #0]
    mpu_data.ay = mpu_buff[2] << 8 | mpu_buff[3];
 800cb34:	4b54      	ldr	r3, [pc, #336]	@ (800cc88 <mpu_get_data+0x178>)
 800cb36:	789b      	ldrb	r3, [r3, #2]
 800cb38:	021b      	lsls	r3, r3, #8
 800cb3a:	b21a      	sxth	r2, r3
 800cb3c:	4b52      	ldr	r3, [pc, #328]	@ (800cc88 <mpu_get_data+0x178>)
 800cb3e:	78db      	ldrb	r3, [r3, #3]
 800cb40:	b21b      	sxth	r3, r3
 800cb42:	4313      	orrs	r3, r2
 800cb44:	b21a      	sxth	r2, r3
 800cb46:	4b51      	ldr	r3, [pc, #324]	@ (800cc8c <mpu_get_data+0x17c>)
 800cb48:	805a      	strh	r2, [r3, #2]
    mpu_data.az = mpu_buff[4] << 8 | mpu_buff[5];
 800cb4a:	4b4f      	ldr	r3, [pc, #316]	@ (800cc88 <mpu_get_data+0x178>)
 800cb4c:	791b      	ldrb	r3, [r3, #4]
 800cb4e:	021b      	lsls	r3, r3, #8
 800cb50:	b21a      	sxth	r2, r3
 800cb52:	4b4d      	ldr	r3, [pc, #308]	@ (800cc88 <mpu_get_data+0x178>)
 800cb54:	795b      	ldrb	r3, [r3, #5]
 800cb56:	b21b      	sxth	r3, r3
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	b21a      	sxth	r2, r3
 800cb5c:	4b4b      	ldr	r3, [pc, #300]	@ (800cc8c <mpu_get_data+0x17c>)
 800cb5e:	809a      	strh	r2, [r3, #4]
    mpu_data.temp = mpu_buff[6] << 8 | mpu_buff[7];
 800cb60:	4b49      	ldr	r3, [pc, #292]	@ (800cc88 <mpu_get_data+0x178>)
 800cb62:	799b      	ldrb	r3, [r3, #6]
 800cb64:	021b      	lsls	r3, r3, #8
 800cb66:	b21a      	sxth	r2, r3
 800cb68:	4b47      	ldr	r3, [pc, #284]	@ (800cc88 <mpu_get_data+0x178>)
 800cb6a:	79db      	ldrb	r3, [r3, #7]
 800cb6c:	b21b      	sxth	r3, r3
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	b21a      	sxth	r2, r3
 800cb72:	4b46      	ldr	r3, [pc, #280]	@ (800cc8c <mpu_get_data+0x17c>)
 800cb74:	819a      	strh	r2, [r3, #12]

    mpu_data.gx = ((mpu_buff[8] << 8 | mpu_buff[9]) - mpu_data.gx_offset);
 800cb76:	4b44      	ldr	r3, [pc, #272]	@ (800cc88 <mpu_get_data+0x178>)
 800cb78:	7a1b      	ldrb	r3, [r3, #8]
 800cb7a:	021b      	lsls	r3, r3, #8
 800cb7c:	b21a      	sxth	r2, r3
 800cb7e:	4b42      	ldr	r3, [pc, #264]	@ (800cc88 <mpu_get_data+0x178>)
 800cb80:	7a5b      	ldrb	r3, [r3, #9]
 800cb82:	b21b      	sxth	r3, r3
 800cb84:	4313      	orrs	r3, r2
 800cb86:	b21b      	sxth	r3, r3
 800cb88:	b29a      	uxth	r2, r3
 800cb8a:	4b40      	ldr	r3, [pc, #256]	@ (800cc8c <mpu_get_data+0x17c>)
 800cb8c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	1ad3      	subs	r3, r2, r3
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	b21a      	sxth	r2, r3
 800cb98:	4b3c      	ldr	r3, [pc, #240]	@ (800cc8c <mpu_get_data+0x17c>)
 800cb9a:	81da      	strh	r2, [r3, #14]
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 800cb9c:	4b3a      	ldr	r3, [pc, #232]	@ (800cc88 <mpu_get_data+0x178>)
 800cb9e:	7a9b      	ldrb	r3, [r3, #10]
 800cba0:	021b      	lsls	r3, r3, #8
 800cba2:	b21a      	sxth	r2, r3
 800cba4:	4b38      	ldr	r3, [pc, #224]	@ (800cc88 <mpu_get_data+0x178>)
 800cba6:	7adb      	ldrb	r3, [r3, #11]
 800cba8:	b21b      	sxth	r3, r3
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	b21b      	sxth	r3, r3
 800cbae:	b29a      	uxth	r2, r3
 800cbb0:	4b36      	ldr	r3, [pc, #216]	@ (800cc8c <mpu_get_data+0x17c>)
 800cbb2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	1ad3      	subs	r3, r2, r3
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	b21a      	sxth	r2, r3
 800cbbe:	4b33      	ldr	r3, [pc, #204]	@ (800cc8c <mpu_get_data+0x17c>)
 800cbc0:	821a      	strh	r2, [r3, #16]
    mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 800cbc2:	4b31      	ldr	r3, [pc, #196]	@ (800cc88 <mpu_get_data+0x178>)
 800cbc4:	7b1b      	ldrb	r3, [r3, #12]
 800cbc6:	021b      	lsls	r3, r3, #8
 800cbc8:	b21a      	sxth	r2, r3
 800cbca:	4b2f      	ldr	r3, [pc, #188]	@ (800cc88 <mpu_get_data+0x178>)
 800cbcc:	7b5b      	ldrb	r3, [r3, #13]
 800cbce:	b21b      	sxth	r3, r3
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	b21b      	sxth	r3, r3
 800cbd4:	b29a      	uxth	r2, r3
 800cbd6:	4b2d      	ldr	r3, [pc, #180]	@ (800cc8c <mpu_get_data+0x17c>)
 800cbd8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	1ad3      	subs	r3, r2, r3
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	b21a      	sxth	r2, r3
 800cbe4:	4b29      	ldr	r3, [pc, #164]	@ (800cc8c <mpu_get_data+0x17c>)
 800cbe6:	825a      	strh	r2, [r3, #18]

    // ist8310_get_data(ist_buff);
    // memcpy(&mpu_data.mx, ist_buff, 6);

    memcpy(&imu.ax, &mpu_data.ax, 6 * sizeof(int16_t));
 800cbe8:	220c      	movs	r2, #12
 800cbea:	4928      	ldr	r1, [pc, #160]	@ (800cc8c <mpu_get_data+0x17c>)
 800cbec:	4828      	ldr	r0, [pc, #160]	@ (800cc90 <mpu_get_data+0x180>)
 800cbee:	f003 f9b8 	bl	800ff62 <memcpy>

    imu.temp = 21 + mpu_data.temp / 333.87f;
 800cbf2:	4b26      	ldr	r3, [pc, #152]	@ (800cc8c <mpu_get_data+0x17c>)
 800cbf4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800cbf8:	ee07 3a90 	vmov	s15, r3
 800cbfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cc00:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800cc94 <mpu_get_data+0x184>
 800cc04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc08:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 800cc0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc10:	4b1f      	ldr	r3, [pc, #124]	@ (800cc90 <mpu_get_data+0x180>)
 800cc12:	edc3 7a03 	vstr	s15, [r3, #12]
    /* 2000dps -> rad/s */
    imu.wx = mpu_data.gx / 16.384f / 57.3f;
 800cc16:	4b1d      	ldr	r3, [pc, #116]	@ (800cc8c <mpu_get_data+0x17c>)
 800cc18:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800cc1c:	ee07 3a90 	vmov	s15, r3
 800cc20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc24:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800cc98 <mpu_get_data+0x188>
 800cc28:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800cc2c:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 800cc9c <mpu_get_data+0x18c>
 800cc30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc34:	4b16      	ldr	r3, [pc, #88]	@ (800cc90 <mpu_get_data+0x180>)
 800cc36:	edc3 7a04 	vstr	s15, [r3, #16]
    imu.wy = mpu_data.gy / 16.384f / 57.3f;
 800cc3a:	4b14      	ldr	r3, [pc, #80]	@ (800cc8c <mpu_get_data+0x17c>)
 800cc3c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800cc40:	ee07 3a90 	vmov	s15, r3
 800cc44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc48:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800cc98 <mpu_get_data+0x188>
 800cc4c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800cc50:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800cc9c <mpu_get_data+0x18c>
 800cc54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc58:	4b0d      	ldr	r3, [pc, #52]	@ (800cc90 <mpu_get_data+0x180>)
 800cc5a:	edc3 7a05 	vstr	s15, [r3, #20]
    imu.wz = mpu_data.gz / 16.384f / 57.3f;
 800cc5e:	4b0b      	ldr	r3, [pc, #44]	@ (800cc8c <mpu_get_data+0x17c>)
 800cc60:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800cc64:	ee07 3a90 	vmov	s15, r3
 800cc68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc6c:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800cc98 <mpu_get_data+0x188>
 800cc70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800cc74:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800cc9c <mpu_get_data+0x18c>
 800cc78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc7c:	4b04      	ldr	r3, [pc, #16]	@ (800cc90 <mpu_get_data+0x180>)
 800cc7e:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800cc82:	bf00      	nop
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	20000b58 	.word	0x20000b58
 800cc8c:	20000b68 	.word	0x20000b68
 800cc90:	20000b88 	.word	0x20000b88
 800cc94:	43a6ef5c 	.word	0x43a6ef5c
 800cc98:	4183126f 	.word	0x4183126f
 800cc9c:	42653333 	.word	0x42653333

0800cca0 <mpu_offset_call>:
// 获取MPU6500的偏移量数据
void mpu_offset_call(void)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 300; i++)
 800cca6:	2300      	movs	r3, #0
 800cca8:	607b      	str	r3, [r7, #4]
 800ccaa:	e07c      	b.n	800cda6 <mpu_offset_call+0x106>
    {
        mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800ccac:	220e      	movs	r2, #14
 800ccae:	4966      	ldr	r1, [pc, #408]	@ (800ce48 <mpu_offset_call+0x1a8>)
 800ccb0:	203b      	movs	r0, #59	@ 0x3b
 800ccb2:	f7ff fecf 	bl	800ca54 <mpu_read_bytes>

        mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 800ccb6:	4b65      	ldr	r3, [pc, #404]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800ccb8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ccbc:	b29a      	uxth	r2, r3
 800ccbe:	4b62      	ldr	r3, [pc, #392]	@ (800ce48 <mpu_offset_call+0x1a8>)
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	021b      	lsls	r3, r3, #8
 800ccc4:	b219      	sxth	r1, r3
 800ccc6:	4b60      	ldr	r3, [pc, #384]	@ (800ce48 <mpu_offset_call+0x1a8>)
 800ccc8:	785b      	ldrb	r3, [r3, #1]
 800ccca:	b21b      	sxth	r3, r3
 800cccc:	430b      	orrs	r3, r1
 800ccce:	b21b      	sxth	r3, r3
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	4413      	add	r3, r2
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	b21a      	sxth	r2, r3
 800ccd8:	4b5c      	ldr	r3, [pc, #368]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800ccda:	829a      	strh	r2, [r3, #20]
        mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 800ccdc:	4b5b      	ldr	r3, [pc, #364]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800ccde:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	4b58      	ldr	r3, [pc, #352]	@ (800ce48 <mpu_offset_call+0x1a8>)
 800cce6:	789b      	ldrb	r3, [r3, #2]
 800cce8:	021b      	lsls	r3, r3, #8
 800ccea:	b219      	sxth	r1, r3
 800ccec:	4b56      	ldr	r3, [pc, #344]	@ (800ce48 <mpu_offset_call+0x1a8>)
 800ccee:	78db      	ldrb	r3, [r3, #3]
 800ccf0:	b21b      	sxth	r3, r3
 800ccf2:	430b      	orrs	r3, r1
 800ccf4:	b21b      	sxth	r3, r3
 800ccf6:	b29b      	uxth	r3, r3
 800ccf8:	4413      	add	r3, r2
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	b21a      	sxth	r2, r3
 800ccfe:	4b53      	ldr	r3, [pc, #332]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800cd00:	82da      	strh	r2, [r3, #22]
        mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
 800cd02:	4b52      	ldr	r3, [pc, #328]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800cd04:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	4b4f      	ldr	r3, [pc, #316]	@ (800ce48 <mpu_offset_call+0x1a8>)
 800cd0c:	791b      	ldrb	r3, [r3, #4]
 800cd0e:	021b      	lsls	r3, r3, #8
 800cd10:	b219      	sxth	r1, r3
 800cd12:	4b4d      	ldr	r3, [pc, #308]	@ (800ce48 <mpu_offset_call+0x1a8>)
 800cd14:	795b      	ldrb	r3, [r3, #5]
 800cd16:	b21b      	sxth	r3, r3
 800cd18:	430b      	orrs	r3, r1
 800cd1a:	b21b      	sxth	r3, r3
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	4413      	add	r3, r2
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	b21a      	sxth	r2, r3
 800cd24:	4b49      	ldr	r3, [pc, #292]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800cd26:	831a      	strh	r2, [r3, #24]

        mpu_data.gx_offset += mpu_buff[8] << 8 | mpu_buff[9];
 800cd28:	4b48      	ldr	r3, [pc, #288]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800cd2a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800cd2e:	b29a      	uxth	r2, r3
 800cd30:	4b45      	ldr	r3, [pc, #276]	@ (800ce48 <mpu_offset_call+0x1a8>)
 800cd32:	7a1b      	ldrb	r3, [r3, #8]
 800cd34:	021b      	lsls	r3, r3, #8
 800cd36:	b219      	sxth	r1, r3
 800cd38:	4b43      	ldr	r3, [pc, #268]	@ (800ce48 <mpu_offset_call+0x1a8>)
 800cd3a:	7a5b      	ldrb	r3, [r3, #9]
 800cd3c:	b21b      	sxth	r3, r3
 800cd3e:	430b      	orrs	r3, r1
 800cd40:	b21b      	sxth	r3, r3
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	4413      	add	r3, r2
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	b21a      	sxth	r2, r3
 800cd4a:	4b40      	ldr	r3, [pc, #256]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800cd4c:	835a      	strh	r2, [r3, #26]
        mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 800cd4e:	4b3f      	ldr	r3, [pc, #252]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800cd50:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800cd54:	b29a      	uxth	r2, r3
 800cd56:	4b3c      	ldr	r3, [pc, #240]	@ (800ce48 <mpu_offset_call+0x1a8>)
 800cd58:	7a9b      	ldrb	r3, [r3, #10]
 800cd5a:	021b      	lsls	r3, r3, #8
 800cd5c:	b219      	sxth	r1, r3
 800cd5e:	4b3a      	ldr	r3, [pc, #232]	@ (800ce48 <mpu_offset_call+0x1a8>)
 800cd60:	7adb      	ldrb	r3, [r3, #11]
 800cd62:	b21b      	sxth	r3, r3
 800cd64:	430b      	orrs	r3, r1
 800cd66:	b21b      	sxth	r3, r3
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	4413      	add	r3, r2
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	b21a      	sxth	r2, r3
 800cd70:	4b36      	ldr	r3, [pc, #216]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800cd72:	839a      	strh	r2, [r3, #28]
        mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 800cd74:	4b35      	ldr	r3, [pc, #212]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800cd76:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	4b32      	ldr	r3, [pc, #200]	@ (800ce48 <mpu_offset_call+0x1a8>)
 800cd7e:	7b1b      	ldrb	r3, [r3, #12]
 800cd80:	021b      	lsls	r3, r3, #8
 800cd82:	b219      	sxth	r1, r3
 800cd84:	4b30      	ldr	r3, [pc, #192]	@ (800ce48 <mpu_offset_call+0x1a8>)
 800cd86:	7b5b      	ldrb	r3, [r3, #13]
 800cd88:	b21b      	sxth	r3, r3
 800cd8a:	430b      	orrs	r3, r1
 800cd8c:	b21b      	sxth	r3, r3
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	4413      	add	r3, r2
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	b21a      	sxth	r2, r3
 800cd96:	4b2d      	ldr	r3, [pc, #180]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800cd98:	83da      	strh	r2, [r3, #30]

        HAL_Delay(5);
 800cd9a:	2005      	movs	r0, #5
 800cd9c:	f7f5 fcde 	bl	800275c <HAL_Delay>
    for (i = 0; i < 300; i++)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	3301      	adds	r3, #1
 800cda4:	607b      	str	r3, [r7, #4]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800cdac:	f6ff af7e 	blt.w	800ccac <mpu_offset_call+0xc>
    }
    mpu_data.ax_offset = mpu_data.ax_offset / 300;
 800cdb0:	4b26      	ldr	r3, [pc, #152]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800cdb2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800cdb6:	4a26      	ldr	r2, [pc, #152]	@ (800ce50 <mpu_offset_call+0x1b0>)
 800cdb8:	fb82 1203 	smull	r1, r2, r2, r3
 800cdbc:	1152      	asrs	r2, r2, #5
 800cdbe:	17db      	asrs	r3, r3, #31
 800cdc0:	1ad3      	subs	r3, r2, r3
 800cdc2:	b21a      	sxth	r2, r3
 800cdc4:	4b21      	ldr	r3, [pc, #132]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800cdc6:	829a      	strh	r2, [r3, #20]
    mpu_data.ay_offset = mpu_data.ay_offset / 300;
 800cdc8:	4b20      	ldr	r3, [pc, #128]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800cdca:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800cdce:	4a20      	ldr	r2, [pc, #128]	@ (800ce50 <mpu_offset_call+0x1b0>)
 800cdd0:	fb82 1203 	smull	r1, r2, r2, r3
 800cdd4:	1152      	asrs	r2, r2, #5
 800cdd6:	17db      	asrs	r3, r3, #31
 800cdd8:	1ad3      	subs	r3, r2, r3
 800cdda:	b21a      	sxth	r2, r3
 800cddc:	4b1b      	ldr	r3, [pc, #108]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800cdde:	82da      	strh	r2, [r3, #22]
    mpu_data.az_offset = mpu_data.az_offset / 300;
 800cde0:	4b1a      	ldr	r3, [pc, #104]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800cde2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800cde6:	4a1a      	ldr	r2, [pc, #104]	@ (800ce50 <mpu_offset_call+0x1b0>)
 800cde8:	fb82 1203 	smull	r1, r2, r2, r3
 800cdec:	1152      	asrs	r2, r2, #5
 800cdee:	17db      	asrs	r3, r3, #31
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	b21a      	sxth	r2, r3
 800cdf4:	4b15      	ldr	r3, [pc, #84]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800cdf6:	831a      	strh	r2, [r3, #24]
    mpu_data.gx_offset = mpu_data.gx_offset / 300;
 800cdf8:	4b14      	ldr	r3, [pc, #80]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800cdfa:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800cdfe:	4a14      	ldr	r2, [pc, #80]	@ (800ce50 <mpu_offset_call+0x1b0>)
 800ce00:	fb82 1203 	smull	r1, r2, r2, r3
 800ce04:	1152      	asrs	r2, r2, #5
 800ce06:	17db      	asrs	r3, r3, #31
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	b21a      	sxth	r2, r3
 800ce0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800ce0e:	835a      	strh	r2, [r3, #26]
    mpu_data.gy_offset = mpu_data.gx_offset / 300;
 800ce10:	4b0e      	ldr	r3, [pc, #56]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800ce12:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800ce16:	4a0e      	ldr	r2, [pc, #56]	@ (800ce50 <mpu_offset_call+0x1b0>)
 800ce18:	fb82 1203 	smull	r1, r2, r2, r3
 800ce1c:	1152      	asrs	r2, r2, #5
 800ce1e:	17db      	asrs	r3, r3, #31
 800ce20:	1ad3      	subs	r3, r2, r3
 800ce22:	b21a      	sxth	r2, r3
 800ce24:	4b09      	ldr	r3, [pc, #36]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800ce26:	839a      	strh	r2, [r3, #28]
    mpu_data.gz_offset = mpu_data.gz_offset / 300;
 800ce28:	4b08      	ldr	r3, [pc, #32]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800ce2a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800ce2e:	4a08      	ldr	r2, [pc, #32]	@ (800ce50 <mpu_offset_call+0x1b0>)
 800ce30:	fb82 1203 	smull	r1, r2, r2, r3
 800ce34:	1152      	asrs	r2, r2, #5
 800ce36:	17db      	asrs	r3, r3, #31
 800ce38:	1ad3      	subs	r3, r2, r3
 800ce3a:	b21a      	sxth	r2, r3
 800ce3c:	4b03      	ldr	r3, [pc, #12]	@ (800ce4c <mpu_offset_call+0x1ac>)
 800ce3e:	83da      	strh	r2, [r3, #30]
}
 800ce40:	bf00      	nop
 800ce42:	3708      	adds	r7, #8
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	20000b58 	.word	0x20000b58
 800ce4c:	20000b68 	.word	0x20000b68
 800ce50:	1b4e81b5 	.word	0x1b4e81b5

0800ce54 <IMU_Init>:

// 初始化mpu6500和ist3810
uint8_t IMU_Init(void)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 800ce5a:	2064      	movs	r0, #100	@ 0x64
 800ce5c:	f7f5 fc7e 	bl	800275c <HAL_Delay>

    id = mpu_read_byte(MPU6500_ID);
 800ce60:	2075      	movs	r0, #117	@ 0x75
 800ce62:	f7ff fdc3 	bl	800c9ec <mpu_read_byte>
 800ce66:	4603      	mov	r3, r0
 800ce68:	461a      	mov	r2, r3
 800ce6a:	4b28      	ldr	r3, [pc, #160]	@ (800cf0c <IMU_Init+0xb8>)
 800ce6c:	701a      	strb	r2, [r3, #0]
    if (id != 0x70)
 800ce6e:	4b27      	ldr	r3, [pc, #156]	@ (800cf0c <IMU_Init+0xb8>)
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	2b70      	cmp	r3, #112	@ 0x70
 800ce74:	d001      	beq.n	800ce7a <IMU_Init+0x26>
        return 1;
 800ce76:	2301      	movs	r3, #1
 800ce78:	e044      	b.n	800cf04 <IMU_Init+0xb0>
    uint8_t i = 0;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	75fb      	strb	r3, [r7, #23]
    uint8_t MPU6500_Init_Data[10][2] = {
 800ce7e:	463b      	mov	r3, r7
 800ce80:	2200      	movs	r2, #0
 800ce82:	601a      	str	r2, [r3, #0]
 800ce84:	605a      	str	r2, [r3, #4]
 800ce86:	609a      	str	r2, [r3, #8]
 800ce88:	60da      	str	r2, [r3, #12]
 800ce8a:	611a      	str	r2, [r3, #16]
 800ce8c:	f248 036b 	movw	r3, #32875	@ 0x806b
 800ce90:	803b      	strh	r3, [r7, #0]
 800ce92:	f240 336b 	movw	r3, #875	@ 0x36b
 800ce96:	807b      	strh	r3, [r7, #2]
 800ce98:	236c      	movs	r3, #108	@ 0x6c
 800ce9a:	80bb      	strh	r3, [r7, #4]
 800ce9c:	f240 431a 	movw	r3, #1050	@ 0x41a
 800cea0:	80fb      	strh	r3, [r7, #6]
 800cea2:	f641 031b 	movw	r3, #6171	@ 0x181b
 800cea6:	813b      	strh	r3, [r7, #8]
 800cea8:	f241 031c 	movw	r3, #4124	@ 0x101c
 800ceac:	817b      	strh	r3, [r7, #10]
 800ceae:	f240 231d 	movw	r3, #541	@ 0x21d
 800ceb2:	81bb      	strh	r3, [r7, #12]
 800ceb4:	f242 036a 	movw	r3, #8298	@ 0x206a
 800ceb8:	81fb      	strh	r3, [r7, #14]
        {MPU6500_GYRO_CONFIG, 0x18},    /* +-2000dps */
        {MPU6500_ACCEL_CONFIG, 0x10},   /* +-8G */
        {MPU6500_ACCEL_CONFIG_2, 0x02}, /* 使能低通滤波器  设置 Acc 低通滤波 */
        {MPU6500_USER_CTRL, 0x20},
    }; /* 使能 AUX */
    for (i = 0; i < 10; i++)
 800ceba:	2300      	movs	r3, #0
 800cebc:	75fb      	strb	r3, [r7, #23]
 800cebe:	e015      	b.n	800ceec <IMU_Init+0x98>
    {
        mpu_write_byte(MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 800cec0:	7dfb      	ldrb	r3, [r7, #23]
 800cec2:	005b      	lsls	r3, r3, #1
 800cec4:	3318      	adds	r3, #24
 800cec6:	443b      	add	r3, r7
 800cec8:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800cecc:	7dfb      	ldrb	r3, [r7, #23]
 800cece:	005b      	lsls	r3, r3, #1
 800ced0:	3318      	adds	r3, #24
 800ced2:	443b      	add	r3, r7
 800ced4:	f813 3c17 	ldrb.w	r3, [r3, #-23]
 800ced8:	4619      	mov	r1, r3
 800ceda:	4610      	mov	r0, r2
 800cedc:	f7ff fd4e 	bl	800c97c <mpu_write_byte>
        HAL_Delay(1);
 800cee0:	2001      	movs	r0, #1
 800cee2:	f7f5 fc3b 	bl	800275c <HAL_Delay>
    for (i = 0; i < 10; i++)
 800cee6:	7dfb      	ldrb	r3, [r7, #23]
 800cee8:	3301      	adds	r3, #1
 800ceea:	75fb      	strb	r3, [r7, #23]
 800ceec:	7dfb      	ldrb	r3, [r7, #23]
 800ceee:	2b09      	cmp	r3, #9
 800cef0:	d9e6      	bls.n	800cec0 <IMU_Init+0x6c>
    }

    mpu_set_gyro_fsr(3);
 800cef2:	2003      	movs	r0, #3
 800cef4:	f7ff fdea 	bl	800cacc <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(2);
 800cef8:	2002      	movs	r0, #2
 800cefa:	f7ff fdf8 	bl	800caee <mpu_set_accel_fsr>

    // ist8310_init();
    mpu_offset_call();
 800cefe:	f7ff fecf 	bl	800cca0 <mpu_offset_call>
    return 0;
 800cf02:	2300      	movs	r3, #0
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3718      	adds	r7, #24
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	20000bbc 	.word	0x20000bbc

0800cf10 <init_quaternion>:

// 初始化四元数
void init_quaternion(void)
{
 800cf10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf14:	b084      	sub	sp, #16
 800cf16:	af00      	add	r7, sp, #0
    int16_t hx, hy; // hz;

    hx = imu.mx;
 800cf18:	4b79      	ldr	r3, [pc, #484]	@ (800d100 <init_quaternion+0x1f0>)
 800cf1a:	88db      	ldrh	r3, [r3, #6]
 800cf1c:	81fb      	strh	r3, [r7, #14]
    hy = imu.my;
 800cf1e:	4b78      	ldr	r3, [pc, #480]	@ (800d100 <init_quaternion+0x1f0>)
 800cf20:	891b      	ldrh	r3, [r3, #8]
 800cf22:	81bb      	strh	r3, [r7, #12]
            q2 = -0.56;
            q3 = 0.0045;
        }
    }
#else
    if (hx < 0 && hy < 0)
 800cf24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	da36      	bge.n	800cf9a <init_quaternion+0x8a>
 800cf2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	da32      	bge.n	800cf9a <init_quaternion+0x8a>
    {
        if (fabs(hx / hy) >= 1)
 800cf34:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800cf38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800cf3c:	fb92 f3f3 	sdiv	r3, r2, r3
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7f3 fb17 	bl	8000574 <__aeabi_i2d>
 800cf46:	4602      	mov	r2, r0
 800cf48:	460b      	mov	r3, r1
 800cf4a:	603a      	str	r2, [r7, #0]
 800cf4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cf50:	607b      	str	r3, [r7, #4]
 800cf52:	f04f 0200 	mov.w	r2, #0
 800cf56:	4b6b      	ldr	r3, [pc, #428]	@ (800d104 <init_quaternion+0x1f4>)
 800cf58:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf5c:	f7f3 fdfa 	bl	8000b54 <__aeabi_dcmpge>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d00c      	beq.n	800cf80 <init_quaternion+0x70>
        {
            q0 = 0.195;
 800cf66:	4b68      	ldr	r3, [pc, #416]	@ (800d108 <init_quaternion+0x1f8>)
 800cf68:	4a68      	ldr	r2, [pc, #416]	@ (800d10c <init_quaternion+0x1fc>)
 800cf6a:	601a      	str	r2, [r3, #0]
            q1 = -0.015;
 800cf6c:	4b68      	ldr	r3, [pc, #416]	@ (800d110 <init_quaternion+0x200>)
 800cf6e:	4a69      	ldr	r2, [pc, #420]	@ (800d114 <init_quaternion+0x204>)
 800cf70:	601a      	str	r2, [r3, #0]
            q2 = 0.0043;
 800cf72:	4b69      	ldr	r3, [pc, #420]	@ (800d118 <init_quaternion+0x208>)
 800cf74:	4a69      	ldr	r2, [pc, #420]	@ (800d11c <init_quaternion+0x20c>)
 800cf76:	601a      	str	r2, [r3, #0]
            q3 = 0.979;
 800cf78:	4b69      	ldr	r3, [pc, #420]	@ (800d120 <init_quaternion+0x210>)
 800cf7a:	4a6a      	ldr	r2, [pc, #424]	@ (800d124 <init_quaternion+0x214>)
 800cf7c:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800cf7e:	e0ba      	b.n	800d0f6 <init_quaternion+0x1e6>
        }
        else
        {
            q0 = 0.555;
 800cf80:	4b61      	ldr	r3, [pc, #388]	@ (800d108 <init_quaternion+0x1f8>)
 800cf82:	4a69      	ldr	r2, [pc, #420]	@ (800d128 <init_quaternion+0x218>)
 800cf84:	601a      	str	r2, [r3, #0]
            q1 = -0.015;
 800cf86:	4b62      	ldr	r3, [pc, #392]	@ (800d110 <init_quaternion+0x200>)
 800cf88:	4a62      	ldr	r2, [pc, #392]	@ (800d114 <init_quaternion+0x204>)
 800cf8a:	601a      	str	r2, [r3, #0]
            q2 = 0.006;
 800cf8c:	4b62      	ldr	r3, [pc, #392]	@ (800d118 <init_quaternion+0x208>)
 800cf8e:	4a67      	ldr	r2, [pc, #412]	@ (800d12c <init_quaternion+0x21c>)
 800cf90:	601a      	str	r2, [r3, #0]
            q3 = 0.829;
 800cf92:	4b63      	ldr	r3, [pc, #396]	@ (800d120 <init_quaternion+0x210>)
 800cf94:	4a66      	ldr	r2, [pc, #408]	@ (800d130 <init_quaternion+0x220>)
 800cf96:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800cf98:	e0ad      	b.n	800d0f6 <init_quaternion+0x1e6>
        }
    }
    else if (hx < 0 && hy > 0)
 800cf9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	da35      	bge.n	800d00e <init_quaternion+0xfe>
 800cfa2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	dd31      	ble.n	800d00e <init_quaternion+0xfe>
    {
        if (fabs(hx / hy) >= 1)
 800cfaa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800cfae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800cfb2:	fb92 f3f3 	sdiv	r3, r2, r3
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7f3 fadc 	bl	8000574 <__aeabi_i2d>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	4692      	mov	sl, r2
 800cfc2:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800cfc6:	f04f 0200 	mov.w	r2, #0
 800cfca:	4b4e      	ldr	r3, [pc, #312]	@ (800d104 <init_quaternion+0x1f4>)
 800cfcc:	4650      	mov	r0, sl
 800cfce:	4659      	mov	r1, fp
 800cfd0:	f7f3 fdc0 	bl	8000b54 <__aeabi_dcmpge>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d00c      	beq.n	800cff4 <init_quaternion+0xe4>
        {
            q0 = -0.193;
 800cfda:	4b4b      	ldr	r3, [pc, #300]	@ (800d108 <init_quaternion+0x1f8>)
 800cfdc:	4a55      	ldr	r2, [pc, #340]	@ (800d134 <init_quaternion+0x224>)
 800cfde:	601a      	str	r2, [r3, #0]
            q1 = -0.009;
 800cfe0:	4b4b      	ldr	r3, [pc, #300]	@ (800d110 <init_quaternion+0x200>)
 800cfe2:	4a55      	ldr	r2, [pc, #340]	@ (800d138 <init_quaternion+0x228>)
 800cfe4:	601a      	str	r2, [r3, #0]
            q2 = -0.006;
 800cfe6:	4b4c      	ldr	r3, [pc, #304]	@ (800d118 <init_quaternion+0x208>)
 800cfe8:	4a54      	ldr	r2, [pc, #336]	@ (800d13c <init_quaternion+0x22c>)
 800cfea:	601a      	str	r2, [r3, #0]
            q3 = 0.979;
 800cfec:	4b4c      	ldr	r3, [pc, #304]	@ (800d120 <init_quaternion+0x210>)
 800cfee:	4a4d      	ldr	r2, [pc, #308]	@ (800d124 <init_quaternion+0x214>)
 800cff0:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800cff2:	e080      	b.n	800d0f6 <init_quaternion+0x1e6>
        }
        else
        {
            q0 = -0.552;
 800cff4:	4b44      	ldr	r3, [pc, #272]	@ (800d108 <init_quaternion+0x1f8>)
 800cff6:	4a52      	ldr	r2, [pc, #328]	@ (800d140 <init_quaternion+0x230>)
 800cff8:	601a      	str	r2, [r3, #0]
            q1 = -0.0048;
 800cffa:	4b45      	ldr	r3, [pc, #276]	@ (800d110 <init_quaternion+0x200>)
 800cffc:	4a51      	ldr	r2, [pc, #324]	@ (800d144 <init_quaternion+0x234>)
 800cffe:	601a      	str	r2, [r3, #0]
            q2 = -0.0115;
 800d000:	4b45      	ldr	r3, [pc, #276]	@ (800d118 <init_quaternion+0x208>)
 800d002:	4a51      	ldr	r2, [pc, #324]	@ (800d148 <init_quaternion+0x238>)
 800d004:	601a      	str	r2, [r3, #0]
            q3 = 0.8313;
 800d006:	4b46      	ldr	r3, [pc, #280]	@ (800d120 <init_quaternion+0x210>)
 800d008:	4a50      	ldr	r2, [pc, #320]	@ (800d14c <init_quaternion+0x23c>)
 800d00a:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800d00c:	e073      	b.n	800d0f6 <init_quaternion+0x1e6>
        }
    }
    else if (hx > 0 && hy > 0)
 800d00e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d012:	2b00      	cmp	r3, #0
 800d014:	dd35      	ble.n	800d082 <init_quaternion+0x172>
 800d016:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	dd31      	ble.n	800d082 <init_quaternion+0x172>
    {
        if (fabs(hx / hy) >= 1)
 800d01e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d022:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d026:	fb92 f3f3 	sdiv	r3, r2, r3
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7f3 faa2 	bl	8000574 <__aeabi_i2d>
 800d030:	4602      	mov	r2, r0
 800d032:	460b      	mov	r3, r1
 800d034:	4690      	mov	r8, r2
 800d036:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800d03a:	f04f 0200 	mov.w	r2, #0
 800d03e:	4b31      	ldr	r3, [pc, #196]	@ (800d104 <init_quaternion+0x1f4>)
 800d040:	4640      	mov	r0, r8
 800d042:	4649      	mov	r1, r9
 800d044:	f7f3 fd86 	bl	8000b54 <__aeabi_dcmpge>
 800d048:	4603      	mov	r3, r0
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d00c      	beq.n	800d068 <init_quaternion+0x158>
        {
            q0 = -0.9785;
 800d04e:	4b2e      	ldr	r3, [pc, #184]	@ (800d108 <init_quaternion+0x1f8>)
 800d050:	4a3f      	ldr	r2, [pc, #252]	@ (800d150 <init_quaternion+0x240>)
 800d052:	601a      	str	r2, [r3, #0]
            q1 = 0.008;
 800d054:	4b2e      	ldr	r3, [pc, #184]	@ (800d110 <init_quaternion+0x200>)
 800d056:	4a3f      	ldr	r2, [pc, #252]	@ (800d154 <init_quaternion+0x244>)
 800d058:	601a      	str	r2, [r3, #0]
            q2 = -0.02;
 800d05a:	4b2f      	ldr	r3, [pc, #188]	@ (800d118 <init_quaternion+0x208>)
 800d05c:	4a3e      	ldr	r2, [pc, #248]	@ (800d158 <init_quaternion+0x248>)
 800d05e:	601a      	str	r2, [r3, #0]
            q3 = 0.195;
 800d060:	4b2f      	ldr	r3, [pc, #188]	@ (800d120 <init_quaternion+0x210>)
 800d062:	4a2a      	ldr	r2, [pc, #168]	@ (800d10c <init_quaternion+0x1fc>)
 800d064:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800d066:	e046      	b.n	800d0f6 <init_quaternion+0x1e6>
        }
        else
        {
            q0 = -0.9828;
 800d068:	4b27      	ldr	r3, [pc, #156]	@ (800d108 <init_quaternion+0x1f8>)
 800d06a:	4a3c      	ldr	r2, [pc, #240]	@ (800d15c <init_quaternion+0x24c>)
 800d06c:	601a      	str	r2, [r3, #0]
            q1 = 0.002;
 800d06e:	4b28      	ldr	r3, [pc, #160]	@ (800d110 <init_quaternion+0x200>)
 800d070:	4a3b      	ldr	r2, [pc, #236]	@ (800d160 <init_quaternion+0x250>)
 800d072:	601a      	str	r2, [r3, #0]
            q2 = -0.0167;
 800d074:	4b28      	ldr	r3, [pc, #160]	@ (800d118 <init_quaternion+0x208>)
 800d076:	4a3b      	ldr	r2, [pc, #236]	@ (800d164 <init_quaternion+0x254>)
 800d078:	601a      	str	r2, [r3, #0]
            q3 = 0.5557;
 800d07a:	4b29      	ldr	r3, [pc, #164]	@ (800d120 <init_quaternion+0x210>)
 800d07c:	4a3a      	ldr	r2, [pc, #232]	@ (800d168 <init_quaternion+0x258>)
 800d07e:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800d080:	e039      	b.n	800d0f6 <init_quaternion+0x1e6>
        }
    }
    else if (hx > 0 && hy < 0)
 800d082:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d086:	2b00      	cmp	r3, #0
 800d088:	dd35      	ble.n	800d0f6 <init_quaternion+0x1e6>
 800d08a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	da31      	bge.n	800d0f6 <init_quaternion+0x1e6>
    {
        if (fabs(hx / hy) >= 1)
 800d092:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d096:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d09a:	fb92 f3f3 	sdiv	r3, r2, r3
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7f3 fa68 	bl	8000574 <__aeabi_i2d>
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	460b      	mov	r3, r1
 800d0a8:	4614      	mov	r4, r2
 800d0aa:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800d0ae:	f04f 0200 	mov.w	r2, #0
 800d0b2:	4b14      	ldr	r3, [pc, #80]	@ (800d104 <init_quaternion+0x1f4>)
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	4629      	mov	r1, r5
 800d0b8:	f7f3 fd4c 	bl	8000b54 <__aeabi_dcmpge>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d00c      	beq.n	800d0dc <init_quaternion+0x1cc>
        {
            q0 = -0.979;
 800d0c2:	4b11      	ldr	r3, [pc, #68]	@ (800d108 <init_quaternion+0x1f8>)
 800d0c4:	4a29      	ldr	r2, [pc, #164]	@ (800d16c <init_quaternion+0x25c>)
 800d0c6:	601a      	str	r2, [r3, #0]
            q1 = 0.0116;
 800d0c8:	4b11      	ldr	r3, [pc, #68]	@ (800d110 <init_quaternion+0x200>)
 800d0ca:	4a29      	ldr	r2, [pc, #164]	@ (800d170 <init_quaternion+0x260>)
 800d0cc:	601a      	str	r2, [r3, #0]
            q2 = -0.0167;
 800d0ce:	4b12      	ldr	r3, [pc, #72]	@ (800d118 <init_quaternion+0x208>)
 800d0d0:	4a24      	ldr	r2, [pc, #144]	@ (800d164 <init_quaternion+0x254>)
 800d0d2:	601a      	str	r2, [r3, #0]
            q3 = -0.195;
 800d0d4:	4b12      	ldr	r3, [pc, #72]	@ (800d120 <init_quaternion+0x210>)
 800d0d6:	4a27      	ldr	r2, [pc, #156]	@ (800d174 <init_quaternion+0x264>)
 800d0d8:	601a      	str	r2, [r3, #0]
            q2 = -0.012;
            q3 = -0.556;
        }
    }
#endif
}
 800d0da:	e00c      	b.n	800d0f6 <init_quaternion+0x1e6>
            q0 = -0.83;
 800d0dc:	4b0a      	ldr	r3, [pc, #40]	@ (800d108 <init_quaternion+0x1f8>)
 800d0de:	4a26      	ldr	r2, [pc, #152]	@ (800d178 <init_quaternion+0x268>)
 800d0e0:	601a      	str	r2, [r3, #0]
            q1 = 0.014;
 800d0e2:	4b0b      	ldr	r3, [pc, #44]	@ (800d110 <init_quaternion+0x200>)
 800d0e4:	4a25      	ldr	r2, [pc, #148]	@ (800d17c <init_quaternion+0x26c>)
 800d0e6:	601a      	str	r2, [r3, #0]
            q2 = -0.012;
 800d0e8:	4b0b      	ldr	r3, [pc, #44]	@ (800d118 <init_quaternion+0x208>)
 800d0ea:	4a25      	ldr	r2, [pc, #148]	@ (800d180 <init_quaternion+0x270>)
 800d0ec:	601a      	str	r2, [r3, #0]
            q3 = -0.556;
 800d0ee:	4b0c      	ldr	r3, [pc, #48]	@ (800d120 <init_quaternion+0x210>)
 800d0f0:	4a24      	ldr	r2, [pc, #144]	@ (800d184 <init_quaternion+0x274>)
 800d0f2:	601a      	str	r2, [r3, #0]
}
 800d0f4:	e7ff      	b.n	800d0f6 <init_quaternion+0x1e6>
 800d0f6:	bf00      	nop
 800d0f8:	3710      	adds	r7, #16
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d100:	20000b88 	.word	0x20000b88
 800d104:	3ff00000 	.word	0x3ff00000
 800d108:	20000090 	.word	0x20000090
 800d10c:	3e47ae14 	.word	0x3e47ae14
 800d110:	20000b40 	.word	0x20000b40
 800d114:	bc75c28f 	.word	0xbc75c28f
 800d118:	20000b44 	.word	0x20000b44
 800d11c:	3b8ce704 	.word	0x3b8ce704
 800d120:	20000b48 	.word	0x20000b48
 800d124:	3f7a9fbe 	.word	0x3f7a9fbe
 800d128:	3f0e147b 	.word	0x3f0e147b
 800d12c:	3bc49ba6 	.word	0x3bc49ba6
 800d130:	3f543958 	.word	0x3f543958
 800d134:	be45a1cb 	.word	0xbe45a1cb
 800d138:	bc1374bc 	.word	0xbc1374bc
 800d13c:	bbc49ba6 	.word	0xbbc49ba6
 800d140:	bf0d4fdf 	.word	0xbf0d4fdf
 800d144:	bb9d4952 	.word	0xbb9d4952
 800d148:	bc3c6a7f 	.word	0xbc3c6a7f
 800d14c:	3f54d014 	.word	0x3f54d014
 800d150:	bf7a7efa 	.word	0xbf7a7efa
 800d154:	3c03126f 	.word	0x3c03126f
 800d158:	bca3d70a 	.word	0xbca3d70a
 800d15c:	bf7b98c8 	.word	0xbf7b98c8
 800d160:	3b03126f 	.word	0x3b03126f
 800d164:	bc88ce70 	.word	0xbc88ce70
 800d168:	3f0e425b 	.word	0x3f0e425b
 800d16c:	bf7a9fbe 	.word	0xbf7a9fbe
 800d170:	3c3e0ded 	.word	0x3c3e0ded
 800d174:	be47ae14 	.word	0xbe47ae14
 800d178:	bf547ae1 	.word	0xbf547ae1
 800d17c:	3c656042 	.word	0x3c656042
 800d180:	bc449ba6 	.word	0xbc449ba6
 800d184:	bf0e5604 	.word	0xbf0e5604

0800d188 <imu_ahrs_update>:

// 更新IMU数值
void imu_ahrs_update(void)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b09e      	sub	sp, #120	@ 0x78
 800d18c:	af00      	add	r7, sp, #0
    float hx, hy, hz, bx, bz;
    float vx, vy, vz, wx, wy, wz;
    float ex, ey, ez, halfT;
    float tempq0, tempq1, tempq2, tempq3;

    float q0q0 = q0 * q0;
 800d18e:	4bd6      	ldr	r3, [pc, #856]	@ (800d4e8 <imu_ahrs_update+0x360>)
 800d190:	ed93 7a00 	vldr	s14, [r3]
 800d194:	4bd4      	ldr	r3, [pc, #848]	@ (800d4e8 <imu_ahrs_update+0x360>)
 800d196:	edd3 7a00 	vldr	s15, [r3]
 800d19a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d19e:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    float q0q1 = q0 * q1;
 800d1a2:	4bd1      	ldr	r3, [pc, #836]	@ (800d4e8 <imu_ahrs_update+0x360>)
 800d1a4:	ed93 7a00 	vldr	s14, [r3]
 800d1a8:	4bd0      	ldr	r3, [pc, #832]	@ (800d4ec <imu_ahrs_update+0x364>)
 800d1aa:	edd3 7a00 	vldr	s15, [r3]
 800d1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1b2:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    float q0q2 = q0 * q2;
 800d1b6:	4bcc      	ldr	r3, [pc, #816]	@ (800d4e8 <imu_ahrs_update+0x360>)
 800d1b8:	ed93 7a00 	vldr	s14, [r3]
 800d1bc:	4bcc      	ldr	r3, [pc, #816]	@ (800d4f0 <imu_ahrs_update+0x368>)
 800d1be:	edd3 7a00 	vldr	s15, [r3]
 800d1c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1c6:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    float q0q3 = q0 * q3;
 800d1ca:	4bc7      	ldr	r3, [pc, #796]	@ (800d4e8 <imu_ahrs_update+0x360>)
 800d1cc:	ed93 7a00 	vldr	s14, [r3]
 800d1d0:	4bc8      	ldr	r3, [pc, #800]	@ (800d4f4 <imu_ahrs_update+0x36c>)
 800d1d2:	edd3 7a00 	vldr	s15, [r3]
 800d1d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1da:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    float q1q1 = q1 * q1;
 800d1de:	4bc3      	ldr	r3, [pc, #780]	@ (800d4ec <imu_ahrs_update+0x364>)
 800d1e0:	ed93 7a00 	vldr	s14, [r3]
 800d1e4:	4bc1      	ldr	r3, [pc, #772]	@ (800d4ec <imu_ahrs_update+0x364>)
 800d1e6:	edd3 7a00 	vldr	s15, [r3]
 800d1ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1ee:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    float q1q2 = q1 * q2;
 800d1f2:	4bbe      	ldr	r3, [pc, #760]	@ (800d4ec <imu_ahrs_update+0x364>)
 800d1f4:	ed93 7a00 	vldr	s14, [r3]
 800d1f8:	4bbd      	ldr	r3, [pc, #756]	@ (800d4f0 <imu_ahrs_update+0x368>)
 800d1fa:	edd3 7a00 	vldr	s15, [r3]
 800d1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d202:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    float q1q3 = q1 * q3;
 800d206:	4bb9      	ldr	r3, [pc, #740]	@ (800d4ec <imu_ahrs_update+0x364>)
 800d208:	ed93 7a00 	vldr	s14, [r3]
 800d20c:	4bb9      	ldr	r3, [pc, #740]	@ (800d4f4 <imu_ahrs_update+0x36c>)
 800d20e:	edd3 7a00 	vldr	s15, [r3]
 800d212:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d216:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    float q2q2 = q2 * q2;
 800d21a:	4bb5      	ldr	r3, [pc, #724]	@ (800d4f0 <imu_ahrs_update+0x368>)
 800d21c:	ed93 7a00 	vldr	s14, [r3]
 800d220:	4bb3      	ldr	r3, [pc, #716]	@ (800d4f0 <imu_ahrs_update+0x368>)
 800d222:	edd3 7a00 	vldr	s15, [r3]
 800d226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d22a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    float q2q3 = q2 * q3;
 800d22e:	4bb0      	ldr	r3, [pc, #704]	@ (800d4f0 <imu_ahrs_update+0x368>)
 800d230:	ed93 7a00 	vldr	s14, [r3]
 800d234:	4baf      	ldr	r3, [pc, #700]	@ (800d4f4 <imu_ahrs_update+0x36c>)
 800d236:	edd3 7a00 	vldr	s15, [r3]
 800d23a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d23e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    float q3q3 = q3 * q3;
 800d242:	4bac      	ldr	r3, [pc, #688]	@ (800d4f4 <imu_ahrs_update+0x36c>)
 800d244:	ed93 7a00 	vldr	s14, [r3]
 800d248:	4baa      	ldr	r3, [pc, #680]	@ (800d4f4 <imu_ahrs_update+0x36c>)
 800d24a:	edd3 7a00 	vldr	s15, [r3]
 800d24e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d252:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    gx = imu.wx;
 800d256:	4ba8      	ldr	r3, [pc, #672]	@ (800d4f8 <imu_ahrs_update+0x370>)
 800d258:	691b      	ldr	r3, [r3, #16]
 800d25a:	4aa8      	ldr	r2, [pc, #672]	@ (800d4fc <imu_ahrs_update+0x374>)
 800d25c:	6013      	str	r3, [r2, #0]
    gy = imu.wy;
 800d25e:	4ba6      	ldr	r3, [pc, #664]	@ (800d4f8 <imu_ahrs_update+0x370>)
 800d260:	695b      	ldr	r3, [r3, #20]
 800d262:	4aa7      	ldr	r2, [pc, #668]	@ (800d500 <imu_ahrs_update+0x378>)
 800d264:	6013      	str	r3, [r2, #0]
    gz = imu.wz;
 800d266:	4ba4      	ldr	r3, [pc, #656]	@ (800d4f8 <imu_ahrs_update+0x370>)
 800d268:	699b      	ldr	r3, [r3, #24]
 800d26a:	4aa6      	ldr	r2, [pc, #664]	@ (800d504 <imu_ahrs_update+0x37c>)
 800d26c:	6013      	str	r3, [r2, #0]
    ax = imu.ax;
 800d26e:	4ba2      	ldr	r3, [pc, #648]	@ (800d4f8 <imu_ahrs_update+0x370>)
 800d270:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d274:	ee07 3a90 	vmov	s15, r3
 800d278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d27c:	4ba2      	ldr	r3, [pc, #648]	@ (800d508 <imu_ahrs_update+0x380>)
 800d27e:	edc3 7a00 	vstr	s15, [r3]
    ay = imu.ay;
 800d282:	4b9d      	ldr	r3, [pc, #628]	@ (800d4f8 <imu_ahrs_update+0x370>)
 800d284:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d288:	ee07 3a90 	vmov	s15, r3
 800d28c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d290:	4b9e      	ldr	r3, [pc, #632]	@ (800d50c <imu_ahrs_update+0x384>)
 800d292:	edc3 7a00 	vstr	s15, [r3]
    az = imu.az;
 800d296:	4b98      	ldr	r3, [pc, #608]	@ (800d4f8 <imu_ahrs_update+0x370>)
 800d298:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d29c:	ee07 3a90 	vmov	s15, r3
 800d2a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2a4:	4b9a      	ldr	r3, [pc, #616]	@ (800d510 <imu_ahrs_update+0x388>)
 800d2a6:	edc3 7a00 	vstr	s15, [r3]
    mx = imu.mx;
 800d2aa:	4b93      	ldr	r3, [pc, #588]	@ (800d4f8 <imu_ahrs_update+0x370>)
 800d2ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d2b0:	ee07 3a90 	vmov	s15, r3
 800d2b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2b8:	4b96      	ldr	r3, [pc, #600]	@ (800d514 <imu_ahrs_update+0x38c>)
 800d2ba:	edc3 7a00 	vstr	s15, [r3]
    my = imu.my;
 800d2be:	4b8e      	ldr	r3, [pc, #568]	@ (800d4f8 <imu_ahrs_update+0x370>)
 800d2c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d2c4:	ee07 3a90 	vmov	s15, r3
 800d2c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2cc:	4b92      	ldr	r3, [pc, #584]	@ (800d518 <imu_ahrs_update+0x390>)
 800d2ce:	edc3 7a00 	vstr	s15, [r3]
    mz = imu.mz;
 800d2d2:	4b89      	ldr	r3, [pc, #548]	@ (800d4f8 <imu_ahrs_update+0x370>)
 800d2d4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800d2d8:	ee07 3a90 	vmov	s15, r3
 800d2dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2e0:	4b8e      	ldr	r3, [pc, #568]	@ (800d51c <imu_ahrs_update+0x394>)
 800d2e2:	edc3 7a00 	vstr	s15, [r3]

    now_update = HAL_GetTick(); // ms
 800d2e6:	f7f5 fa2d 	bl	8002744 <HAL_GetTick>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	4a8c      	ldr	r2, [pc, #560]	@ (800d520 <imu_ahrs_update+0x398>)
 800d2ee:	6013      	str	r3, [r2, #0]
    halfT = ((float)(now_update - last_update) / 2000.0f);
 800d2f0:	4b8b      	ldr	r3, [pc, #556]	@ (800d520 <imu_ahrs_update+0x398>)
 800d2f2:	681a      	ldr	r2, [r3, #0]
 800d2f4:	4b8b      	ldr	r3, [pc, #556]	@ (800d524 <imu_ahrs_update+0x39c>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	1ad3      	subs	r3, r2, r3
 800d2fa:	ee07 3a90 	vmov	s15, r3
 800d2fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d302:	eddf 6a89 	vldr	s13, [pc, #548]	@ 800d528 <imu_ahrs_update+0x3a0>
 800d306:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d30a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    last_update = now_update;
 800d30e:	4b84      	ldr	r3, [pc, #528]	@ (800d520 <imu_ahrs_update+0x398>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4a84      	ldr	r2, [pc, #528]	@ (800d524 <imu_ahrs_update+0x39c>)
 800d314:	6013      	str	r3, [r2, #0]

    /* 快速逆平方根 */
    norm = inv_sqrt(ax * ax + ay * ay + az * az);
 800d316:	4b7c      	ldr	r3, [pc, #496]	@ (800d508 <imu_ahrs_update+0x380>)
 800d318:	ed93 7a00 	vldr	s14, [r3]
 800d31c:	4b7a      	ldr	r3, [pc, #488]	@ (800d508 <imu_ahrs_update+0x380>)
 800d31e:	edd3 7a00 	vldr	s15, [r3]
 800d322:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d326:	4b79      	ldr	r3, [pc, #484]	@ (800d50c <imu_ahrs_update+0x384>)
 800d328:	edd3 6a00 	vldr	s13, [r3]
 800d32c:	4b77      	ldr	r3, [pc, #476]	@ (800d50c <imu_ahrs_update+0x384>)
 800d32e:	edd3 7a00 	vldr	s15, [r3]
 800d332:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d336:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d33a:	4b75      	ldr	r3, [pc, #468]	@ (800d510 <imu_ahrs_update+0x388>)
 800d33c:	edd3 6a00 	vldr	s13, [r3]
 800d340:	4b73      	ldr	r3, [pc, #460]	@ (800d510 <imu_ahrs_update+0x388>)
 800d342:	edd3 7a00 	vldr	s15, [r3]
 800d346:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d34a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d34e:	eeb0 0a67 	vmov.f32	s0, s15
 800d352:	f7ff fad7 	bl	800c904 <inv_sqrt>
 800d356:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    ax = ax * norm;
 800d35a:	4b6b      	ldr	r3, [pc, #428]	@ (800d508 <imu_ahrs_update+0x380>)
 800d35c:	ed93 7a00 	vldr	s14, [r3]
 800d360:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d364:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d368:	4b67      	ldr	r3, [pc, #412]	@ (800d508 <imu_ahrs_update+0x380>)
 800d36a:	edc3 7a00 	vstr	s15, [r3]
    ay = ay * norm;
 800d36e:	4b67      	ldr	r3, [pc, #412]	@ (800d50c <imu_ahrs_update+0x384>)
 800d370:	ed93 7a00 	vldr	s14, [r3]
 800d374:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d37c:	4b63      	ldr	r3, [pc, #396]	@ (800d50c <imu_ahrs_update+0x384>)
 800d37e:	edc3 7a00 	vstr	s15, [r3]
    az = az * norm;
 800d382:	4b63      	ldr	r3, [pc, #396]	@ (800d510 <imu_ahrs_update+0x388>)
 800d384:	ed93 7a00 	vldr	s14, [r3]
 800d388:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d38c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d390:	4b5f      	ldr	r3, [pc, #380]	@ (800d510 <imu_ahrs_update+0x388>)
 800d392:	edc3 7a00 	vstr	s15, [r3]
    norm = inv_sqrt(mx * mx + my * my + mz * mz);
    mx = mx * norm;
    my = my * norm;
    mz = mz * norm;
#else
    mx = 0;
 800d396:	4b5f      	ldr	r3, [pc, #380]	@ (800d514 <imu_ahrs_update+0x38c>)
 800d398:	f04f 0200 	mov.w	r2, #0
 800d39c:	601a      	str	r2, [r3, #0]
    my = 0;
 800d39e:	4b5e      	ldr	r3, [pc, #376]	@ (800d518 <imu_ahrs_update+0x390>)
 800d3a0:	f04f 0200 	mov.w	r2, #0
 800d3a4:	601a      	str	r2, [r3, #0]
    mz = 0;
 800d3a6:	4b5d      	ldr	r3, [pc, #372]	@ (800d51c <imu_ahrs_update+0x394>)
 800d3a8:	f04f 0200 	mov.w	r2, #0
 800d3ac:	601a      	str	r2, [r3, #0]
#endif
    /* 计算通量的参考方向*/
    hx = 2.0f * mx * (0.5f - q2q2 - q3q3) + 2.0f * my * (q1q2 - q0q3) + 2.0f * mz * (q1q3 + q0q2);
 800d3ae:	4b59      	ldr	r3, [pc, #356]	@ (800d514 <imu_ahrs_update+0x38c>)
 800d3b0:	edd3 7a00 	vldr	s15, [r3]
 800d3b4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d3b8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800d3bc:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800d3c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d3c4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800d3c8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d3cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3d0:	4b51      	ldr	r3, [pc, #324]	@ (800d518 <imu_ahrs_update+0x390>)
 800d3d2:	edd3 7a00 	vldr	s15, [r3]
 800d3d6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d3da:	ed97 6a18 	vldr	s12, [r7, #96]	@ 0x60
 800d3de:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800d3e2:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d3e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d3ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d3ee:	4b4b      	ldr	r3, [pc, #300]	@ (800d51c <imu_ahrs_update+0x394>)
 800d3f0:	edd3 7a00 	vldr	s15, [r3]
 800d3f4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d3f8:	ed97 6a17 	vldr	s12, [r7, #92]	@ 0x5c
 800d3fc:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800d400:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d40c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    hy = 2.0f * mx * (q1q2 + q0q3) + 2.0f * my * (0.5f - q1q1 - q3q3) + 2.0f * mz * (q2q3 - q0q1);
 800d410:	4b40      	ldr	r3, [pc, #256]	@ (800d514 <imu_ahrs_update+0x38c>)
 800d412:	edd3 7a00 	vldr	s15, [r3]
 800d416:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d41a:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 800d41e:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800d422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d426:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d42a:	4b3b      	ldr	r3, [pc, #236]	@ (800d518 <imu_ahrs_update+0x390>)
 800d42c:	edd3 7a00 	vldr	s15, [r3]
 800d430:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d434:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d438:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800d43c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d440:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800d444:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d44c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d450:	4b32      	ldr	r3, [pc, #200]	@ (800d51c <imu_ahrs_update+0x394>)
 800d452:	edd3 7a00 	vldr	s15, [r3]
 800d456:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d45a:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 800d45e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800d462:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d46a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d46e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    hz = 2.0f * mx * (q1q3 - q0q2) + 2.0f * my * (q2q3 + q0q1) + 2.0f * mz * (0.5f - q1q1 - q2q2);
 800d472:	4b28      	ldr	r3, [pc, #160]	@ (800d514 <imu_ahrs_update+0x38c>)
 800d474:	edd3 7a00 	vldr	s15, [r3]
 800d478:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d47c:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800d480:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800d484:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d488:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d48c:	4b22      	ldr	r3, [pc, #136]	@ (800d518 <imu_ahrs_update+0x390>)
 800d48e:	edd3 7a00 	vldr	s15, [r3]
 800d492:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d496:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 800d49a:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800d49e:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d4a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d4a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d4aa:	4b1c      	ldr	r3, [pc, #112]	@ (800d51c <imu_ahrs_update+0x394>)
 800d4ac:	edd3 7a00 	vldr	s15, [r3]
 800d4b0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d4b4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d4b8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800d4bc:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d4c0:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800d4c4:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d4c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d4cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4d0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    bx = sqrt((hx * hx) + (hy * hy));
 800d4d4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800d4d8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800d4dc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800d4e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d4e4:	e022      	b.n	800d52c <imu_ahrs_update+0x3a4>
 800d4e6:	bf00      	nop
 800d4e8:	20000090 	.word	0x20000090
 800d4ec:	20000b40 	.word	0x20000b40
 800d4f0:	20000b44 	.word	0x20000b44
 800d4f4:	20000b48 	.word	0x20000b48
 800d4f8:	20000b88 	.word	0x20000b88
 800d4fc:	20000bc0 	.word	0x20000bc0
 800d500:	20000bc4 	.word	0x20000bc4
 800d504:	20000bc8 	.word	0x20000bc8
 800d508:	20000bcc 	.word	0x20000bcc
 800d50c:	20000bd0 	.word	0x20000bd0
 800d510:	20000bd4 	.word	0x20000bd4
 800d514:	20000bd8 	.word	0x20000bd8
 800d518:	20000bdc 	.word	0x20000bdc
 800d51c:	20000be0 	.word	0x20000be0
 800d520:	20000be8 	.word	0x20000be8
 800d524:	20000be4 	.word	0x20000be4
 800d528:	44fa0000 	.word	0x44fa0000
 800d52c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d530:	ee17 0a90 	vmov	r0, s15
 800d534:	f7f3 f830 	bl	8000598 <__aeabi_f2d>
 800d538:	4602      	mov	r2, r0
 800d53a:	460b      	mov	r3, r1
 800d53c:	ec43 2b10 	vmov	d0, r2, r3
 800d540:	f005 fab0 	bl	8012aa4 <sqrt>
 800d544:	ec53 2b10 	vmov	r2, r3, d0
 800d548:	4610      	mov	r0, r2
 800d54a:	4619      	mov	r1, r3
 800d54c:	f7f3 fb74 	bl	8000c38 <__aeabi_d2f>
 800d550:	4603      	mov	r3, r0
 800d552:	63bb      	str	r3, [r7, #56]	@ 0x38
    bz = hz;
 800d554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d556:	637b      	str	r3, [r7, #52]	@ 0x34

    /* 估计重力和通量方向(v和w)   */
    vx = 2.0f * (q1q3 - q0q2);
 800d558:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800d55c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800d560:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d564:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d568:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    vy = 2.0f * (q0q1 + q2q3);
 800d56c:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800d570:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800d574:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d578:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d57c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    vz = q0q0 - q1q1 - q2q2 + q3q3;
 800d580:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800d584:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800d588:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d58c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800d590:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d594:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800d598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d59c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    wx = 2.0f * bx * (0.5f - q2q2 - q3q3) + 2.0f * bz * (q1q3 - q0q2);
 800d5a0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d5a4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d5a8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800d5ac:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800d5b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d5b4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800d5b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d5bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5c0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800d5c4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d5c8:	ed97 6a17 	vldr	s12, [r7, #92]	@ 0x5c
 800d5cc:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800d5d0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d5d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    wy = 2.0f * bx * (q1q2 - q0q3) + 2.0f * bz * (q0q1 + q2q3);
 800d5e0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d5e4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d5e8:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 800d5ec:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800d5f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d5f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5f8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800d5fc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d600:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 800d604:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800d608:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d60c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d610:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d614:	edc7 7a08 	vstr	s15, [r7, #32]
    wz = 2.0f * bx * (q0q2 + q1q3) + 2.0f * bz * (0.5f - q1q1 - q2q2);
 800d618:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d61c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d620:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800d624:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800d628:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d62c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d630:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800d634:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d638:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d63c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800d640:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d644:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800d648:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d64c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d650:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d654:	edc7 7a07 	vstr	s15, [r7, #28]

    /*
     * 误差是场的参考方向与传感器测量方向的叉积之和
     */
    ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 800d658:	4bde      	ldr	r3, [pc, #888]	@ (800d9d4 <imu_ahrs_update+0x84c>)
 800d65a:	ed93 7a00 	vldr	s14, [r3]
 800d65e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800d662:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d666:	4bdc      	ldr	r3, [pc, #880]	@ (800d9d8 <imu_ahrs_update+0x850>)
 800d668:	edd3 6a00 	vldr	s13, [r3]
 800d66c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d670:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d674:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d678:	4bd8      	ldr	r3, [pc, #864]	@ (800d9dc <imu_ahrs_update+0x854>)
 800d67a:	edd3 6a00 	vldr	s13, [r3]
 800d67e:	edd7 7a07 	vldr	s15, [r7, #28]
 800d682:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d686:	4bd6      	ldr	r3, [pc, #856]	@ (800d9e0 <imu_ahrs_update+0x858>)
 800d688:	ed93 6a00 	vldr	s12, [r3]
 800d68c:	edd7 7a08 	vldr	s15, [r7, #32]
 800d690:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d694:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d69c:	edc7 7a06 	vstr	s15, [r7, #24]
    ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 800d6a0:	4bcd      	ldr	r3, [pc, #820]	@ (800d9d8 <imu_ahrs_update+0x850>)
 800d6a2:	ed93 7a00 	vldr	s14, [r3]
 800d6a6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d6aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6ae:	4bcd      	ldr	r3, [pc, #820]	@ (800d9e4 <imu_ahrs_update+0x85c>)
 800d6b0:	edd3 6a00 	vldr	s13, [r3]
 800d6b4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800d6b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d6bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d6c0:	4bc7      	ldr	r3, [pc, #796]	@ (800d9e0 <imu_ahrs_update+0x858>)
 800d6c2:	edd3 6a00 	vldr	s13, [r3]
 800d6c6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d6ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d6ce:	4bc6      	ldr	r3, [pc, #792]	@ (800d9e8 <imu_ahrs_update+0x860>)
 800d6d0:	ed93 6a00 	vldr	s12, [r3]
 800d6d4:	edd7 7a07 	vldr	s15, [r7, #28]
 800d6d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d6dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d6e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d6e4:	edc7 7a05 	vstr	s15, [r7, #20]
    ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 800d6e8:	4bbe      	ldr	r3, [pc, #760]	@ (800d9e4 <imu_ahrs_update+0x85c>)
 800d6ea:	ed93 7a00 	vldr	s14, [r3]
 800d6ee:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d6f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6f6:	4bb7      	ldr	r3, [pc, #732]	@ (800d9d4 <imu_ahrs_update+0x84c>)
 800d6f8:	edd3 6a00 	vldr	s13, [r3]
 800d6fc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d700:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d704:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d708:	4bb7      	ldr	r3, [pc, #732]	@ (800d9e8 <imu_ahrs_update+0x860>)
 800d70a:	edd3 6a00 	vldr	s13, [r3]
 800d70e:	edd7 7a08 	vldr	s15, [r7, #32]
 800d712:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d716:	4bb1      	ldr	r3, [pc, #708]	@ (800d9dc <imu_ahrs_update+0x854>)
 800d718:	ed93 6a00 	vldr	s12, [r3]
 800d71c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d720:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d724:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d72c:	edc7 7a04 	vstr	s15, [r7, #16]

    /* PI */
    if (ex != 0.0f && ey != 0.0f && ez != 0.0f)
 800d730:	edd7 7a06 	vldr	s15, [r7, #24]
 800d734:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d73c:	d076      	beq.n	800d82c <imu_ahrs_update+0x6a4>
 800d73e:	edd7 7a05 	vldr	s15, [r7, #20]
 800d742:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d74a:	d06f      	beq.n	800d82c <imu_ahrs_update+0x6a4>
 800d74c:	edd7 7a04 	vldr	s15, [r7, #16]
 800d750:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d758:	d068      	beq.n	800d82c <imu_ahrs_update+0x6a4>
    {
        exInt = exInt + ex * Ki * halfT;
 800d75a:	edd7 7a06 	vldr	s15, [r7, #24]
 800d75e:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 800d9ec <imu_ahrs_update+0x864>
 800d762:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d766:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d76a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d76e:	4ba0      	ldr	r3, [pc, #640]	@ (800d9f0 <imu_ahrs_update+0x868>)
 800d770:	edd3 7a00 	vldr	s15, [r3]
 800d774:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d778:	4b9d      	ldr	r3, [pc, #628]	@ (800d9f0 <imu_ahrs_update+0x868>)
 800d77a:	edc3 7a00 	vstr	s15, [r3]
        eyInt = eyInt + ey * Ki * halfT;
 800d77e:	edd7 7a05 	vldr	s15, [r7, #20]
 800d782:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800d9ec <imu_ahrs_update+0x864>
 800d786:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d78a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d78e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d792:	4b98      	ldr	r3, [pc, #608]	@ (800d9f4 <imu_ahrs_update+0x86c>)
 800d794:	edd3 7a00 	vldr	s15, [r3]
 800d798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d79c:	4b95      	ldr	r3, [pc, #596]	@ (800d9f4 <imu_ahrs_update+0x86c>)
 800d79e:	edc3 7a00 	vstr	s15, [r3]
        ezInt = ezInt + ez * Ki * halfT;
 800d7a2:	edd7 7a04 	vldr	s15, [r7, #16]
 800d7a6:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800d9ec <imu_ahrs_update+0x864>
 800d7aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d7ae:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d7b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7b6:	4b90      	ldr	r3, [pc, #576]	@ (800d9f8 <imu_ahrs_update+0x870>)
 800d7b8:	edd3 7a00 	vldr	s15, [r3]
 800d7bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7c0:	4b8d      	ldr	r3, [pc, #564]	@ (800d9f8 <imu_ahrs_update+0x870>)
 800d7c2:	edc3 7a00 	vstr	s15, [r3]

        gx = gx + Kp * ex + exInt;
 800d7c6:	edd7 7a06 	vldr	s15, [r7, #24]
 800d7ca:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d7ce:	4b8b      	ldr	r3, [pc, #556]	@ (800d9fc <imu_ahrs_update+0x874>)
 800d7d0:	edd3 7a00 	vldr	s15, [r3]
 800d7d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d7d8:	4b85      	ldr	r3, [pc, #532]	@ (800d9f0 <imu_ahrs_update+0x868>)
 800d7da:	edd3 7a00 	vldr	s15, [r3]
 800d7de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7e2:	4b86      	ldr	r3, [pc, #536]	@ (800d9fc <imu_ahrs_update+0x874>)
 800d7e4:	edc3 7a00 	vstr	s15, [r3]
        gy = gy + Kp * ey + eyInt;
 800d7e8:	edd7 7a05 	vldr	s15, [r7, #20]
 800d7ec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d7f0:	4b83      	ldr	r3, [pc, #524]	@ (800da00 <imu_ahrs_update+0x878>)
 800d7f2:	edd3 7a00 	vldr	s15, [r3]
 800d7f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d7fa:	4b7e      	ldr	r3, [pc, #504]	@ (800d9f4 <imu_ahrs_update+0x86c>)
 800d7fc:	edd3 7a00 	vldr	s15, [r3]
 800d800:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d804:	4b7e      	ldr	r3, [pc, #504]	@ (800da00 <imu_ahrs_update+0x878>)
 800d806:	edc3 7a00 	vstr	s15, [r3]
        gz = gz + Kp * ez + ezInt;
 800d80a:	edd7 7a04 	vldr	s15, [r7, #16]
 800d80e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d812:	4b7c      	ldr	r3, [pc, #496]	@ (800da04 <imu_ahrs_update+0x87c>)
 800d814:	edd3 7a00 	vldr	s15, [r3]
 800d818:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d81c:	4b76      	ldr	r3, [pc, #472]	@ (800d9f8 <imu_ahrs_update+0x870>)
 800d81e:	edd3 7a00 	vldr	s15, [r3]
 800d822:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d826:	4b77      	ldr	r3, [pc, #476]	@ (800da04 <imu_ahrs_update+0x87c>)
 800d828:	edc3 7a00 	vstr	s15, [r3]
    }

    tempq0 = q0 + (-q1 * gx - q2 * gy - q3 * gz) * halfT;
 800d82c:	4b76      	ldr	r3, [pc, #472]	@ (800da08 <imu_ahrs_update+0x880>)
 800d82e:	edd3 7a00 	vldr	s15, [r3]
 800d832:	eeb1 7a67 	vneg.f32	s14, s15
 800d836:	4b71      	ldr	r3, [pc, #452]	@ (800d9fc <imu_ahrs_update+0x874>)
 800d838:	edd3 7a00 	vldr	s15, [r3]
 800d83c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d840:	4b72      	ldr	r3, [pc, #456]	@ (800da0c <imu_ahrs_update+0x884>)
 800d842:	edd3 6a00 	vldr	s13, [r3]
 800d846:	4b6e      	ldr	r3, [pc, #440]	@ (800da00 <imu_ahrs_update+0x878>)
 800d848:	edd3 7a00 	vldr	s15, [r3]
 800d84c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d850:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d854:	4b6e      	ldr	r3, [pc, #440]	@ (800da10 <imu_ahrs_update+0x888>)
 800d856:	edd3 6a00 	vldr	s13, [r3]
 800d85a:	4b6a      	ldr	r3, [pc, #424]	@ (800da04 <imu_ahrs_update+0x87c>)
 800d85c:	edd3 7a00 	vldr	s15, [r3]
 800d860:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d864:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d868:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d86c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d870:	4b68      	ldr	r3, [pc, #416]	@ (800da14 <imu_ahrs_update+0x88c>)
 800d872:	edd3 7a00 	vldr	s15, [r3]
 800d876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d87a:	edc7 7a03 	vstr	s15, [r7, #12]
    tempq1 = q1 + (q0 * gx + q2 * gz - q3 * gy) * halfT;
 800d87e:	4b65      	ldr	r3, [pc, #404]	@ (800da14 <imu_ahrs_update+0x88c>)
 800d880:	ed93 7a00 	vldr	s14, [r3]
 800d884:	4b5d      	ldr	r3, [pc, #372]	@ (800d9fc <imu_ahrs_update+0x874>)
 800d886:	edd3 7a00 	vldr	s15, [r3]
 800d88a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d88e:	4b5f      	ldr	r3, [pc, #380]	@ (800da0c <imu_ahrs_update+0x884>)
 800d890:	edd3 6a00 	vldr	s13, [r3]
 800d894:	4b5b      	ldr	r3, [pc, #364]	@ (800da04 <imu_ahrs_update+0x87c>)
 800d896:	edd3 7a00 	vldr	s15, [r3]
 800d89a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d89e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d8a2:	4b5b      	ldr	r3, [pc, #364]	@ (800da10 <imu_ahrs_update+0x888>)
 800d8a4:	edd3 6a00 	vldr	s13, [r3]
 800d8a8:	4b55      	ldr	r3, [pc, #340]	@ (800da00 <imu_ahrs_update+0x878>)
 800d8aa:	edd3 7a00 	vldr	s15, [r3]
 800d8ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d8b6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d8ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8be:	4b52      	ldr	r3, [pc, #328]	@ (800da08 <imu_ahrs_update+0x880>)
 800d8c0:	edd3 7a00 	vldr	s15, [r3]
 800d8c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8c8:	edc7 7a02 	vstr	s15, [r7, #8]
    tempq2 = q2 + (q0 * gy - q1 * gz + q3 * gx) * halfT;
 800d8cc:	4b51      	ldr	r3, [pc, #324]	@ (800da14 <imu_ahrs_update+0x88c>)
 800d8ce:	ed93 7a00 	vldr	s14, [r3]
 800d8d2:	4b4b      	ldr	r3, [pc, #300]	@ (800da00 <imu_ahrs_update+0x878>)
 800d8d4:	edd3 7a00 	vldr	s15, [r3]
 800d8d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8dc:	4b4a      	ldr	r3, [pc, #296]	@ (800da08 <imu_ahrs_update+0x880>)
 800d8de:	edd3 6a00 	vldr	s13, [r3]
 800d8e2:	4b48      	ldr	r3, [pc, #288]	@ (800da04 <imu_ahrs_update+0x87c>)
 800d8e4:	edd3 7a00 	vldr	s15, [r3]
 800d8e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d8f0:	4b47      	ldr	r3, [pc, #284]	@ (800da10 <imu_ahrs_update+0x888>)
 800d8f2:	edd3 6a00 	vldr	s13, [r3]
 800d8f6:	4b41      	ldr	r3, [pc, #260]	@ (800d9fc <imu_ahrs_update+0x874>)
 800d8f8:	edd3 7a00 	vldr	s15, [r3]
 800d8fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d900:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d904:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d908:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d90c:	4b3f      	ldr	r3, [pc, #252]	@ (800da0c <imu_ahrs_update+0x884>)
 800d90e:	edd3 7a00 	vldr	s15, [r3]
 800d912:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d916:	edc7 7a01 	vstr	s15, [r7, #4]
    tempq3 = q3 + (q0 * gz + q1 * gy - q2 * gx) * halfT;
 800d91a:	4b3e      	ldr	r3, [pc, #248]	@ (800da14 <imu_ahrs_update+0x88c>)
 800d91c:	ed93 7a00 	vldr	s14, [r3]
 800d920:	4b38      	ldr	r3, [pc, #224]	@ (800da04 <imu_ahrs_update+0x87c>)
 800d922:	edd3 7a00 	vldr	s15, [r3]
 800d926:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d92a:	4b37      	ldr	r3, [pc, #220]	@ (800da08 <imu_ahrs_update+0x880>)
 800d92c:	edd3 6a00 	vldr	s13, [r3]
 800d930:	4b33      	ldr	r3, [pc, #204]	@ (800da00 <imu_ahrs_update+0x878>)
 800d932:	edd3 7a00 	vldr	s15, [r3]
 800d936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d93a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d93e:	4b33      	ldr	r3, [pc, #204]	@ (800da0c <imu_ahrs_update+0x884>)
 800d940:	edd3 6a00 	vldr	s13, [r3]
 800d944:	4b2d      	ldr	r3, [pc, #180]	@ (800d9fc <imu_ahrs_update+0x874>)
 800d946:	edd3 7a00 	vldr	s15, [r3]
 800d94a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d94e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d952:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d956:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d95a:	4b2d      	ldr	r3, [pc, #180]	@ (800da10 <imu_ahrs_update+0x888>)
 800d95c:	edd3 7a00 	vldr	s15, [r3]
 800d960:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d964:	edc7 7a00 	vstr	s15, [r7]

    /*将四元数标准化 */
    norm = inv_sqrt(tempq0 * tempq0 + tempq1 * tempq1 + tempq2 * tempq2 + tempq3 * tempq3);
 800d968:	edd7 7a03 	vldr	s15, [r7, #12]
 800d96c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800d970:	edd7 7a02 	vldr	s15, [r7, #8]
 800d974:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d978:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d97c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d980:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d984:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d988:	edd7 7a00 	vldr	s15, [r7]
 800d98c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d990:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d994:	eeb0 0a67 	vmov.f32	s0, s15
 800d998:	f7fe ffb4 	bl	800c904 <inv_sqrt>
 800d99c:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    q0 = tempq0 * norm;
 800d9a0:	ed97 7a03 	vldr	s14, [r7, #12]
 800d9a4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d9a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9ac:	4b19      	ldr	r3, [pc, #100]	@ (800da14 <imu_ahrs_update+0x88c>)
 800d9ae:	edc3 7a00 	vstr	s15, [r3]
    q1 = tempq1 * norm;
 800d9b2:	ed97 7a02 	vldr	s14, [r7, #8]
 800d9b6:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d9ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9be:	4b12      	ldr	r3, [pc, #72]	@ (800da08 <imu_ahrs_update+0x880>)
 800d9c0:	edc3 7a00 	vstr	s15, [r3]
    q2 = tempq2 * norm;
 800d9c4:	ed97 7a01 	vldr	s14, [r7, #4]
 800d9c8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d9cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9d0:	e022      	b.n	800da18 <imu_ahrs_update+0x890>
 800d9d2:	bf00      	nop
 800d9d4:	20000bd0 	.word	0x20000bd0
 800d9d8:	20000bd4 	.word	0x20000bd4
 800d9dc:	20000bdc 	.word	0x20000bdc
 800d9e0:	20000be0 	.word	0x20000be0
 800d9e4:	20000bcc 	.word	0x20000bcc
 800d9e8:	20000bd8 	.word	0x20000bd8
 800d9ec:	3c23d70a 	.word	0x3c23d70a
 800d9f0:	20000b4c 	.word	0x20000b4c
 800d9f4:	20000b50 	.word	0x20000b50
 800d9f8:	20000b54 	.word	0x20000b54
 800d9fc:	20000bc0 	.word	0x20000bc0
 800da00:	20000bc4 	.word	0x20000bc4
 800da04:	20000bc8 	.word	0x20000bc8
 800da08:	20000b40 	.word	0x20000b40
 800da0c:	20000b44 	.word	0x20000b44
 800da10:	20000b48 	.word	0x20000b48
 800da14:	20000090 	.word	0x20000090
 800da18:	4b07      	ldr	r3, [pc, #28]	@ (800da38 <imu_ahrs_update+0x8b0>)
 800da1a:	edc3 7a00 	vstr	s15, [r3]
    q3 = tempq3 * norm;
 800da1e:	ed97 7a00 	vldr	s14, [r7]
 800da22:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800da26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da2a:	4b04      	ldr	r3, [pc, #16]	@ (800da3c <imu_ahrs_update+0x8b4>)
 800da2c:	edc3 7a00 	vstr	s15, [r3]
}
 800da30:	bf00      	nop
 800da32:	3778      	adds	r7, #120	@ 0x78
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	20000b44 	.word	0x20000b44
 800da3c:	20000b48 	.word	0x20000b48

0800da40 <imu_attitude_update>:

// 更新imu的态度
void imu_attitude_update(void)
{
 800da40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800da44:	af00      	add	r7, sp, #0
    /* yaw    -pi----pi */
    imu.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3, -2 * q2 * q2 - 2 * q3 * q3 + 1) * 57.3;
 800da46:	4b76      	ldr	r3, [pc, #472]	@ (800dc20 <imu_attitude_update+0x1e0>)
 800da48:	edd3 7a00 	vldr	s15, [r3]
 800da4c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800da50:	4b74      	ldr	r3, [pc, #464]	@ (800dc24 <imu_attitude_update+0x1e4>)
 800da52:	edd3 7a00 	vldr	s15, [r3]
 800da56:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da5a:	4b73      	ldr	r3, [pc, #460]	@ (800dc28 <imu_attitude_update+0x1e8>)
 800da5c:	edd3 7a00 	vldr	s15, [r3]
 800da60:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800da64:	4b71      	ldr	r3, [pc, #452]	@ (800dc2c <imu_attitude_update+0x1ec>)
 800da66:	edd3 7a00 	vldr	s15, [r3]
 800da6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da72:	ee17 0a90 	vmov	r0, s15
 800da76:	f7f2 fd8f 	bl	8000598 <__aeabi_f2d>
 800da7a:	4682      	mov	sl, r0
 800da7c:	468b      	mov	fp, r1
 800da7e:	4b69      	ldr	r3, [pc, #420]	@ (800dc24 <imu_attitude_update+0x1e4>)
 800da80:	edd3 7a00 	vldr	s15, [r3]
 800da84:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800da88:	ee27 7a87 	vmul.f32	s14, s15, s14
 800da8c:	4b65      	ldr	r3, [pc, #404]	@ (800dc24 <imu_attitude_update+0x1e4>)
 800da8e:	edd3 7a00 	vldr	s15, [r3]
 800da92:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da96:	4b65      	ldr	r3, [pc, #404]	@ (800dc2c <imu_attitude_update+0x1ec>)
 800da98:	edd3 7a00 	vldr	s15, [r3]
 800da9c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800daa0:	4b62      	ldr	r3, [pc, #392]	@ (800dc2c <imu_attitude_update+0x1ec>)
 800daa2:	edd3 7a00 	vldr	s15, [r3]
 800daa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800daaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800daae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dab2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dab6:	ee17 0a90 	vmov	r0, s15
 800daba:	f7f2 fd6d 	bl	8000598 <__aeabi_f2d>
 800dabe:	4602      	mov	r2, r0
 800dac0:	460b      	mov	r3, r1
 800dac2:	ec43 2b11 	vmov	d1, r2, r3
 800dac6:	ec4b ab10 	vmov	d0, sl, fp
 800daca:	f004 ffbb 	bl	8012a44 <atan2>
 800dace:	ec53 2b10 	vmov	r2, r3, d0
 800dad2:	4690      	mov	r8, r2
 800dad4:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800dad8:	a34f      	add	r3, pc, #316	@ (adr r3, 800dc18 <imu_attitude_update+0x1d8>)
 800dada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dade:	4640      	mov	r0, r8
 800dae0:	4649      	mov	r1, r9
 800dae2:	f7f2 fdb1 	bl	8000648 <__aeabi_dmul>
 800dae6:	4602      	mov	r2, r0
 800dae8:	460b      	mov	r3, r1
 800daea:	4610      	mov	r0, r2
 800daec:	4619      	mov	r1, r3
 800daee:	f7f3 f8a3 	bl	8000c38 <__aeabi_d2f>
 800daf2:	4603      	mov	r3, r0
 800daf4:	4a4e      	ldr	r2, [pc, #312]	@ (800dc30 <imu_attitude_update+0x1f0>)
 800daf6:	6313      	str	r3, [r2, #48]	@ 0x30
    /* pitch  -pi/2----pi/2 */
    imu.pit = -asin(-2 * q1 * q3 + 2 * q0 * q2) * 57.3;
 800daf8:	4b49      	ldr	r3, [pc, #292]	@ (800dc20 <imu_attitude_update+0x1e0>)
 800dafa:	edd3 7a00 	vldr	s15, [r3]
 800dafe:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800db02:	ee27 7a87 	vmul.f32	s14, s15, s14
 800db06:	4b49      	ldr	r3, [pc, #292]	@ (800dc2c <imu_attitude_update+0x1ec>)
 800db08:	edd3 7a00 	vldr	s15, [r3]
 800db0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db10:	4b45      	ldr	r3, [pc, #276]	@ (800dc28 <imu_attitude_update+0x1e8>)
 800db12:	edd3 7a00 	vldr	s15, [r3]
 800db16:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800db1a:	4b42      	ldr	r3, [pc, #264]	@ (800dc24 <imu_attitude_update+0x1e4>)
 800db1c:	edd3 7a00 	vldr	s15, [r3]
 800db20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db28:	ee17 0a90 	vmov	r0, s15
 800db2c:	f7f2 fd34 	bl	8000598 <__aeabi_f2d>
 800db30:	4602      	mov	r2, r0
 800db32:	460b      	mov	r3, r1
 800db34:	ec43 2b10 	vmov	d0, r2, r3
 800db38:	f004 ff50 	bl	80129dc <asin>
 800db3c:	ec53 2b10 	vmov	r2, r3, d0
 800db40:	4614      	mov	r4, r2
 800db42:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800db46:	a334      	add	r3, pc, #208	@ (adr r3, 800dc18 <imu_attitude_update+0x1d8>)
 800db48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4c:	4620      	mov	r0, r4
 800db4e:	4629      	mov	r1, r5
 800db50:	f7f2 fd7a 	bl	8000648 <__aeabi_dmul>
 800db54:	4602      	mov	r2, r0
 800db56:	460b      	mov	r3, r1
 800db58:	4610      	mov	r0, r2
 800db5a:	4619      	mov	r1, r3
 800db5c:	f7f3 f86c 	bl	8000c38 <__aeabi_d2f>
 800db60:	4603      	mov	r3, r0
 800db62:	4a33      	ldr	r2, [pc, #204]	@ (800dc30 <imu_attitude_update+0x1f0>)
 800db64:	62d3      	str	r3, [r2, #44]	@ 0x2c
    /* roll   -pi----pi  */
    imu.rol = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2 * q2 + 1) * 57.3;
 800db66:	4b2f      	ldr	r3, [pc, #188]	@ (800dc24 <imu_attitude_update+0x1e4>)
 800db68:	edd3 7a00 	vldr	s15, [r3]
 800db6c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800db70:	4b2e      	ldr	r3, [pc, #184]	@ (800dc2c <imu_attitude_update+0x1ec>)
 800db72:	edd3 7a00 	vldr	s15, [r3]
 800db76:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db7a:	4b2b      	ldr	r3, [pc, #172]	@ (800dc28 <imu_attitude_update+0x1e8>)
 800db7c:	edd3 7a00 	vldr	s15, [r3]
 800db80:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800db84:	4b26      	ldr	r3, [pc, #152]	@ (800dc20 <imu_attitude_update+0x1e0>)
 800db86:	edd3 7a00 	vldr	s15, [r3]
 800db8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db92:	ee17 0a90 	vmov	r0, s15
 800db96:	f7f2 fcff 	bl	8000598 <__aeabi_f2d>
 800db9a:	4604      	mov	r4, r0
 800db9c:	460d      	mov	r5, r1
 800db9e:	4b20      	ldr	r3, [pc, #128]	@ (800dc20 <imu_attitude_update+0x1e0>)
 800dba0:	edd3 7a00 	vldr	s15, [r3]
 800dba4:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800dba8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dbac:	4b1c      	ldr	r3, [pc, #112]	@ (800dc20 <imu_attitude_update+0x1e0>)
 800dbae:	edd3 7a00 	vldr	s15, [r3]
 800dbb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dbb6:	4b1b      	ldr	r3, [pc, #108]	@ (800dc24 <imu_attitude_update+0x1e4>)
 800dbb8:	edd3 7a00 	vldr	s15, [r3]
 800dbbc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800dbc0:	4b18      	ldr	r3, [pc, #96]	@ (800dc24 <imu_attitude_update+0x1e4>)
 800dbc2:	edd3 7a00 	vldr	s15, [r3]
 800dbc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dbca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dbce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dbd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dbd6:	ee17 0a90 	vmov	r0, s15
 800dbda:	f7f2 fcdd 	bl	8000598 <__aeabi_f2d>
 800dbde:	4602      	mov	r2, r0
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	ec43 2b11 	vmov	d1, r2, r3
 800dbe6:	ec45 4b10 	vmov	d0, r4, r5
 800dbea:	f004 ff2b 	bl	8012a44 <atan2>
 800dbee:	ec51 0b10 	vmov	r0, r1, d0
 800dbf2:	a309      	add	r3, pc, #36	@ (adr r3, 800dc18 <imu_attitude_update+0x1d8>)
 800dbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf8:	f7f2 fd26 	bl	8000648 <__aeabi_dmul>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	460b      	mov	r3, r1
 800dc00:	4610      	mov	r0, r2
 800dc02:	4619      	mov	r1, r3
 800dc04:	f7f3 f818 	bl	8000c38 <__aeabi_d2f>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	4a09      	ldr	r2, [pc, #36]	@ (800dc30 <imu_attitude_update+0x1f0>)
 800dc0c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800dc0e:	bf00      	nop
 800dc10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dc14:	f3af 8000 	nop.w
 800dc18:	66666666 	.word	0x66666666
 800dc1c:	404ca666 	.word	0x404ca666
 800dc20:	20000b40 	.word	0x20000b40
 800dc24:	20000b44 	.word	0x20000b44
 800dc28:	20000090 	.word	0x20000090
 800dc2c:	20000b48 	.word	0x20000b48
 800dc30:	20000b88 	.word	0x20000b88

0800dc34 <_1_MT6701_GetRawData>:
#include "focLib.h"
#include "time_utils.h"
// static unsigned int rotationCount, rotationCount_Last;

uint16_t _1_MT6701_GetRawData(void)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800dc3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dc3e:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800dc40:	23c8      	movs	r3, #200	@ 0xc8
 800dc42:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800dc44:	e009      	b.n	800dc5a <_1_MT6701_GetRawData+0x26>
    {
        if (timeOut-- == 0)
 800dc46:	88fb      	ldrh	r3, [r7, #6]
 800dc48:	1e5a      	subs	r2, r3, #1
 800dc4a:	80fa      	strh	r2, [r7, #6]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d104      	bne.n	800dc5a <_1_MT6701_GetRawData+0x26>
        {
            printLog("SPI state error!\r\n");
 800dc50:	4819      	ldr	r0, [pc, #100]	@ (800dcb8 <_1_MT6701_GetRawData+0x84>)
 800dc52:	f7fe fba3 	bl	800c39c <printLog>
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800dc56:	2300      	movs	r3, #0
 800dc58:	e02a      	b.n	800dcb0 <_1_MT6701_GetRawData+0x7c>
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800dc5a:	4818      	ldr	r0, [pc, #96]	@ (800dcbc <_1_MT6701_GetRawData+0x88>)
 800dc5c:	f7f9 fc39 	bl	80074d2 <HAL_SPI_GetState>
 800dc60:	4603      	mov	r3, r0
 800dc62:	2b01      	cmp	r3, #1
 800dc64:	d1ef      	bne.n	800dc46 <_1_MT6701_GetRawData+0x12>
        }
    }

    _1_MT6701_CS_Enable;
 800dc66:	2200      	movs	r2, #0
 800dc68:	2108      	movs	r1, #8
 800dc6a:	4815      	ldr	r0, [pc, #84]	@ (800dcc0 <_1_MT6701_GetRawData+0x8c>)
 800dc6c:	f7f8 f97a 	bl	8005f64 <HAL_GPIO_WritePin>

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800dc70:	1cba      	adds	r2, r7, #2
 800dc72:	4639      	mov	r1, r7
 800dc74:	f04f 33ff 	mov.w	r3, #4294967295
 800dc78:	9300      	str	r3, [sp, #0]
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	480f      	ldr	r0, [pc, #60]	@ (800dcbc <_1_MT6701_GetRawData+0x88>)
 800dc7e:	f7f9 fa06 	bl	800708e <HAL_SPI_TransmitReceive>
 800dc82:	4603      	mov	r3, r0
 800dc84:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800dc86:	797b      	ldrb	r3, [r7, #5]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d009      	beq.n	800dca0 <_1_MT6701_GetRawData+0x6c>
    {
        _1_MT6701_CS_Disable;
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	2108      	movs	r1, #8
 800dc90:	480b      	ldr	r0, [pc, #44]	@ (800dcc0 <_1_MT6701_GetRawData+0x8c>)
 800dc92:	f7f8 f967 	bl	8005f64 <HAL_GPIO_WritePin>
        printLog("MT6701 read data error!\r\n");
 800dc96:	480b      	ldr	r0, [pc, #44]	@ (800dcc4 <_1_MT6701_GetRawData+0x90>)
 800dc98:	f7fe fb80 	bl	800c39c <printLog>
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	e007      	b.n	800dcb0 <_1_MT6701_GetRawData+0x7c>
    }

    _1_MT6701_CS_Disable;
 800dca0:	2201      	movs	r2, #1
 800dca2:	2108      	movs	r1, #8
 800dca4:	4806      	ldr	r0, [pc, #24]	@ (800dcc0 <_1_MT6701_GetRawData+0x8c>)
 800dca6:	f7f8 f95d 	bl	8005f64 <HAL_GPIO_WritePin>

    return rawData >> 2; // 取高14位的角度数据
 800dcaa:	887b      	ldrh	r3, [r7, #2]
 800dcac:	089b      	lsrs	r3, r3, #2
 800dcae:	b29b      	uxth	r3, r3
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3708      	adds	r7, #8
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	080138d0 	.word	0x080138d0
 800dcbc:	200003f0 	.word	0x200003f0
 800dcc0:	48000400 	.word	0x48000400
 800dcc4:	080138e4 	.word	0x080138e4

0800dcc8 <_1_MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float _1_MT6701_GetRawAngle(void)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
    uint16_t rawData = _1_MT6701_GetRawData();
 800dcce:	f7ff ffb1 	bl	800dc34 <_1_MT6701_GetRawData>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800dcd6:	88fb      	ldrh	r3, [r7, #6]
 800dcd8:	ee07 3a90 	vmov	s15, r3
 800dcdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dce0:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800dcfc <_1_MT6701_GetRawAngle+0x34>
 800dce4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dce8:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800dd00 <_1_MT6701_GetRawAngle+0x38>
 800dcec:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800dcf0:	eeb0 0a67 	vmov.f32	s0, s15
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	46800000 	.word	0x46800000
 800dd00:	40c90fdb 	.word	0x40c90fdb

0800dd04 <_2_MT6701_GetRawData>:

uint16_t _2_MT6701_GetRawData(void)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800dd0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd0e:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800dd10:	23c8      	movs	r3, #200	@ 0xc8
 800dd12:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800dd14:	e009      	b.n	800dd2a <_2_MT6701_GetRawData+0x26>
    {
        if (timeOut-- == 0)
 800dd16:	88fb      	ldrh	r3, [r7, #6]
 800dd18:	1e5a      	subs	r2, r3, #1
 800dd1a:	80fa      	strh	r2, [r7, #6]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d104      	bne.n	800dd2a <_2_MT6701_GetRawData+0x26>
        {
            printLog("SPI state error!\r\n");
 800dd20:	4819      	ldr	r0, [pc, #100]	@ (800dd88 <_2_MT6701_GetRawData+0x84>)
 800dd22:	f7fe fb3b 	bl	800c39c <printLog>
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800dd26:	2300      	movs	r3, #0
 800dd28:	e02a      	b.n	800dd80 <_2_MT6701_GetRawData+0x7c>
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800dd2a:	4818      	ldr	r0, [pc, #96]	@ (800dd8c <_2_MT6701_GetRawData+0x88>)
 800dd2c:	f7f9 fbd1 	bl	80074d2 <HAL_SPI_GetState>
 800dd30:	4603      	mov	r3, r0
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d1ef      	bne.n	800dd16 <_2_MT6701_GetRawData+0x12>
        }
    }

    _2_MT6701_CS_Enable;
 800dd36:	2200      	movs	r2, #0
 800dd38:	2110      	movs	r1, #16
 800dd3a:	4815      	ldr	r0, [pc, #84]	@ (800dd90 <_2_MT6701_GetRawData+0x8c>)
 800dd3c:	f7f8 f912 	bl	8005f64 <HAL_GPIO_WritePin>

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800dd40:	1cba      	adds	r2, r7, #2
 800dd42:	4639      	mov	r1, r7
 800dd44:	f04f 33ff 	mov.w	r3, #4294967295
 800dd48:	9300      	str	r3, [sp, #0]
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	480f      	ldr	r0, [pc, #60]	@ (800dd8c <_2_MT6701_GetRawData+0x88>)
 800dd4e:	f7f9 f99e 	bl	800708e <HAL_SPI_TransmitReceive>
 800dd52:	4603      	mov	r3, r0
 800dd54:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800dd56:	797b      	ldrb	r3, [r7, #5]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d009      	beq.n	800dd70 <_2_MT6701_GetRawData+0x6c>
    {
        _2_MT6701_CS_Disable;
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	2110      	movs	r1, #16
 800dd60:	480b      	ldr	r0, [pc, #44]	@ (800dd90 <_2_MT6701_GetRawData+0x8c>)
 800dd62:	f7f8 f8ff 	bl	8005f64 <HAL_GPIO_WritePin>
        printLog("MT6701 read data error!\r\n");
 800dd66:	480b      	ldr	r0, [pc, #44]	@ (800dd94 <_2_MT6701_GetRawData+0x90>)
 800dd68:	f7fe fb18 	bl	800c39c <printLog>
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	e007      	b.n	800dd80 <_2_MT6701_GetRawData+0x7c>
    }

    _2_MT6701_CS_Disable;
 800dd70:	2201      	movs	r2, #1
 800dd72:	2110      	movs	r1, #16
 800dd74:	4806      	ldr	r0, [pc, #24]	@ (800dd90 <_2_MT6701_GetRawData+0x8c>)
 800dd76:	f7f8 f8f5 	bl	8005f64 <HAL_GPIO_WritePin>

    return rawData >> 2; // 取高14位的角度数据
 800dd7a:	887b      	ldrh	r3, [r7, #2]
 800dd7c:	089b      	lsrs	r3, r3, #2
 800dd7e:	b29b      	uxth	r3, r3
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3708      	adds	r7, #8
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	080138d0 	.word	0x080138d0
 800dd8c:	200003f0 	.word	0x200003f0
 800dd90:	48000800 	.word	0x48000800
 800dd94:	080138e4 	.word	0x080138e4

0800dd98 <_2_MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float _2_MT6701_GetRawAngle(void)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
    uint16_t rawData = _2_MT6701_GetRawData();
 800dd9e:	f7ff ffb1 	bl	800dd04 <_2_MT6701_GetRawData>
 800dda2:	4603      	mov	r3, r0
 800dda4:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800dda6:	88fb      	ldrh	r3, [r7, #6]
 800dda8:	ee07 3a90 	vmov	s15, r3
 800ddac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ddb0:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800ddcc <_2_MT6701_GetRawAngle+0x34>
 800ddb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ddb8:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800ddd0 <_2_MT6701_GetRawAngle+0x38>
 800ddbc:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800ddc0:	eeb0 0a67 	vmov.f32	s0, s15
 800ddc4:	3708      	adds	r7, #8
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	46800000 	.word	0x46800000
 800ddd0:	40c90fdb 	.word	0x40c90fdb

0800ddd4 <startPwm1>:
#include "pwm.h"

 void startPwm1()
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800ddd8:	2100      	movs	r1, #0
 800ddda:	4806      	ldr	r0, [pc, #24]	@ (800ddf4 <startPwm1+0x20>)
 800dddc:	f7f9 fe08 	bl	80079f0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800dde0:	2104      	movs	r1, #4
 800dde2:	4804      	ldr	r0, [pc, #16]	@ (800ddf4 <startPwm1+0x20>)
 800dde4:	f7f9 fe04 	bl	80079f0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800dde8:	2108      	movs	r1, #8
 800ddea:	4802      	ldr	r0, [pc, #8]	@ (800ddf4 <startPwm1+0x20>)
 800ddec:	f7f9 fe00 	bl	80079f0 <HAL_TIM_PWM_Start>

}
 800ddf0:	bf00      	nop
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	200004a4 	.word	0x200004a4

0800ddf8 <stopPwm1>:
 void stopPwm1()
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800ddfc:	2100      	movs	r1, #0
 800ddfe:	4806      	ldr	r0, [pc, #24]	@ (800de18 <stopPwm1+0x20>)
 800de00:	f7f9 fef6 	bl	8007bf0 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 800de04:	2104      	movs	r1, #4
 800de06:	4804      	ldr	r0, [pc, #16]	@ (800de18 <stopPwm1+0x20>)
 800de08:	f7f9 fef2 	bl	8007bf0 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 800de0c:	2108      	movs	r1, #8
 800de0e:	4802      	ldr	r0, [pc, #8]	@ (800de18 <stopPwm1+0x20>)
 800de10:	f7f9 feee 	bl	8007bf0 <HAL_TIM_PWM_Stop>

}
 800de14:	bf00      	nop
 800de16:	bd80      	pop	{r7, pc}
 800de18:	200004a4 	.word	0x200004a4

0800de1c <updatePwm1>:
 void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b083      	sub	sp, #12
 800de20:	af00      	add	r7, sp, #0
 800de22:	4603      	mov	r3, r0
 800de24:	80fb      	strh	r3, [r7, #6]
 800de26:	460b      	mov	r3, r1
 800de28:	80bb      	strh	r3, [r7, #4]
 800de2a:	4613      	mov	r3, r2
 800de2c:	807b      	strh	r3, [r7, #2]
    TIM8->CCR1 = a;
 800de2e:	4a07      	ldr	r2, [pc, #28]	@ (800de4c <updatePwm1+0x30>)
 800de30:	88fb      	ldrh	r3, [r7, #6]
 800de32:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM8->CCR2 = b;
 800de34:	4a05      	ldr	r2, [pc, #20]	@ (800de4c <updatePwm1+0x30>)
 800de36:	88bb      	ldrh	r3, [r7, #4]
 800de38:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM8->CCR3 = c;
 800de3a:	4a04      	ldr	r2, [pc, #16]	@ (800de4c <updatePwm1+0x30>)
 800de3c:	887b      	ldrh	r3, [r7, #2]
 800de3e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800de40:	bf00      	nop
 800de42:	370c      	adds	r7, #12
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr
 800de4c:	40013400 	.word	0x40013400

0800de50 <startPwm2>:

 void startPwm2()
{
 800de50:	b580      	push	{r7, lr}
 800de52:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800de54:	2100      	movs	r1, #0
 800de56:	4806      	ldr	r0, [pc, #24]	@ (800de70 <startPwm2+0x20>)
 800de58:	f7f9 fdca 	bl	80079f0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800de5c:	2104      	movs	r1, #4
 800de5e:	4804      	ldr	r0, [pc, #16]	@ (800de70 <startPwm2+0x20>)
 800de60:	f7f9 fdc6 	bl	80079f0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800de64:	2108      	movs	r1, #8
 800de66:	4802      	ldr	r0, [pc, #8]	@ (800de70 <startPwm2+0x20>)
 800de68:	f7f9 fdc2 	bl	80079f0 <HAL_TIM_PWM_Start>
 
}
 800de6c:	bf00      	nop
 800de6e:	bd80      	pop	{r7, pc}
 800de70:	20000458 	.word	0x20000458

0800de74 <stopPwm2>:
 void stopPwm2()
{
 800de74:	b580      	push	{r7, lr}
 800de76:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800de78:	2100      	movs	r1, #0
 800de7a:	4806      	ldr	r0, [pc, #24]	@ (800de94 <stopPwm2+0x20>)
 800de7c:	f7f9 feb8 	bl	8007bf0 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800de80:	2104      	movs	r1, #4
 800de82:	4804      	ldr	r0, [pc, #16]	@ (800de94 <stopPwm2+0x20>)
 800de84:	f7f9 feb4 	bl	8007bf0 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800de88:	2108      	movs	r1, #8
 800de8a:	4802      	ldr	r0, [pc, #8]	@ (800de94 <stopPwm2+0x20>)
 800de8c:	f7f9 feb0 	bl	8007bf0 <HAL_TIM_PWM_Stop>
 
}
 800de90:	bf00      	nop
 800de92:	bd80      	pop	{r7, pc}
 800de94:	20000458 	.word	0x20000458

0800de98 <updatePwm2>:

 void updatePwm2(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	4603      	mov	r3, r0
 800dea0:	80fb      	strh	r3, [r7, #6]
 800dea2:	460b      	mov	r3, r1
 800dea4:	80bb      	strh	r3, [r7, #4]
 800dea6:	4613      	mov	r3, r2
 800dea8:	807b      	strh	r3, [r7, #2]
    TIM1->CCR1 = a;
 800deaa:	4a07      	ldr	r2, [pc, #28]	@ (800dec8 <updatePwm2+0x30>)
 800deac:	88fb      	ldrh	r3, [r7, #6]
 800deae:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = b;
 800deb0:	4a05      	ldr	r2, [pc, #20]	@ (800dec8 <updatePwm2+0x30>)
 800deb2:	88bb      	ldrh	r3, [r7, #4]
 800deb4:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = c;
 800deb6:	4a04      	ldr	r2, [pc, #16]	@ (800dec8 <updatePwm2+0x30>)
 800deb8:	887b      	ldrh	r3, [r7, #2]
 800deba:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800debc:	bf00      	nop
 800debe:	370c      	adds	r7, #12
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr
 800dec8:	40012c00 	.word	0x40012c00

0800decc <delay>:
#include "time_utils.h"

__IO uint32_t m, tms, u, t0;

void delay(uint32_t _ms)
{
 800decc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ded0:	b082      	sub	sp, #8
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	6078      	str	r0, [r7, #4]
    t0 = micros();
 800ded6:	f000 f83b 	bl	800df50 <micros>
 800deda:	4602      	mov	r2, r0
 800dedc:	460b      	mov	r3, r1
 800dede:	4b11      	ldr	r3, [pc, #68]	@ (800df24 <delay+0x58>)
 800dee0:	601a      	str	r2, [r3, #0]
    while (micros() - t0 < _ms * 1000)
 800dee2:	e000      	b.n	800dee6 <delay+0x1a>
        __NOP();
 800dee4:	bf00      	nop
    while (micros() - t0 < _ms * 1000)
 800dee6:	f000 f833 	bl	800df50 <micros>
 800deea:	4602      	mov	r2, r0
 800deec:	460b      	mov	r3, r1
 800deee:	490d      	ldr	r1, [pc, #52]	@ (800df24 <delay+0x58>)
 800def0:	6809      	ldr	r1, [r1, #0]
 800def2:	2000      	movs	r0, #0
 800def4:	468a      	mov	sl, r1
 800def6:	4683      	mov	fp, r0
 800def8:	ebb2 040a 	subs.w	r4, r2, sl
 800defc:	eb63 050b 	sbc.w	r5, r3, fp
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800df06:	fb02 f303 	mul.w	r3, r2, r3
 800df0a:	2200      	movs	r2, #0
 800df0c:	4698      	mov	r8, r3
 800df0e:	4691      	mov	r9, r2
 800df10:	4544      	cmp	r4, r8
 800df12:	eb75 0309 	sbcs.w	r3, r5, r9
 800df16:	d3e5      	bcc.n	800dee4 <delay+0x18>
}
 800df18:	bf00      	nop
 800df1a:	bf00      	nop
 800df1c:	3708      	adds	r7, #8
 800df1e:	46bd      	mov	sp, r7
 800df20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df24:	20000bf8 	.word	0x20000bf8

0800df28 <LL_SYSTICK_IsActiveCounterFlag>:
    while (_us--)
        __NOP();
}

__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag()
{
 800df28:	b480      	push	{r7}
 800df2a:	af00      	add	r7, sp, #0
    return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800df2c:	4b07      	ldr	r3, [pc, #28]	@ (800df4c <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800df34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df38:	bf0c      	ite	eq
 800df3a:	2301      	moveq	r3, #1
 800df3c:	2300      	movne	r3, #0
 800df3e:	b2db      	uxtb	r3, r3
}
 800df40:	4618      	mov	r0, r3
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop
 800df4c:	e000e010 	.word	0xe000e010

0800df50 <micros>:

uint64_t micros()
{
 800df50:	b5b0      	push	{r4, r5, r7, lr}
 800df52:	af00      	add	r7, sp, #0
    /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
    LL_SYSTICK_IsActiveCounterFlag();
 800df54:	f7ff ffe8 	bl	800df28 <LL_SYSTICK_IsActiveCounterFlag>
    m = HAL_GetTick();
 800df58:	f7f4 fbf4 	bl	8002744 <HAL_GetTick>
 800df5c:	4603      	mov	r3, r0
 800df5e:	4a1c      	ldr	r2, [pc, #112]	@ (800dfd0 <micros+0x80>)
 800df60:	6013      	str	r3, [r2, #0]
    tms = SysTick->LOAD + 1;
 800df62:	4b1c      	ldr	r3, [pc, #112]	@ (800dfd4 <micros+0x84>)
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	3301      	adds	r3, #1
 800df68:	4a1b      	ldr	r2, [pc, #108]	@ (800dfd8 <micros+0x88>)
 800df6a:	6013      	str	r3, [r2, #0]
    u = tms - SysTick->VAL;
 800df6c:	4b1a      	ldr	r3, [pc, #104]	@ (800dfd8 <micros+0x88>)
 800df6e:	681a      	ldr	r2, [r3, #0]
 800df70:	4b18      	ldr	r3, [pc, #96]	@ (800dfd4 <micros+0x84>)
 800df72:	689b      	ldr	r3, [r3, #8]
 800df74:	1ad3      	subs	r3, r2, r3
 800df76:	4a19      	ldr	r2, [pc, #100]	@ (800dfdc <micros+0x8c>)
 800df78:	6013      	str	r3, [r2, #0]
    if (LL_SYSTICK_IsActiveCounterFlag())
 800df7a:	f7ff ffd5 	bl	800df28 <LL_SYSTICK_IsActiveCounterFlag>
 800df7e:	4603      	mov	r3, r0
 800df80:	2b00      	cmp	r3, #0
 800df82:	d00b      	beq.n	800df9c <micros+0x4c>
    {
        m = HAL_GetTick();
 800df84:	f7f4 fbde 	bl	8002744 <HAL_GetTick>
 800df88:	4603      	mov	r3, r0
 800df8a:	4a11      	ldr	r2, [pc, #68]	@ (800dfd0 <micros+0x80>)
 800df8c:	6013      	str	r3, [r2, #0]
        u = tms - SysTick->VAL;
 800df8e:	4b12      	ldr	r3, [pc, #72]	@ (800dfd8 <micros+0x88>)
 800df90:	681a      	ldr	r2, [r3, #0]
 800df92:	4b10      	ldr	r3, [pc, #64]	@ (800dfd4 <micros+0x84>)
 800df94:	689b      	ldr	r3, [r3, #8]
 800df96:	1ad3      	subs	r3, r2, r3
 800df98:	4a10      	ldr	r2, [pc, #64]	@ (800dfdc <micros+0x8c>)
 800df9a:	6013      	str	r3, [r2, #0]
    }
    return (m * 1000 + (u * 1000) / tms);
 800df9c:	4b0c      	ldr	r3, [pc, #48]	@ (800dfd0 <micros+0x80>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dfa4:	fb03 f202 	mul.w	r2, r3, r2
 800dfa8:	4b0c      	ldr	r3, [pc, #48]	@ (800dfdc <micros+0x8c>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800dfb0:	fb03 f101 	mul.w	r1, r3, r1
 800dfb4:	4b08      	ldr	r3, [pc, #32]	@ (800dfd8 <micros+0x88>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	fbb1 f3f3 	udiv	r3, r1, r3
 800dfbc:	4413      	add	r3, r2
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	461c      	mov	r4, r3
 800dfc2:	4615      	mov	r5, r2
 800dfc4:	4622      	mov	r2, r4
 800dfc6:	462b      	mov	r3, r5
}
 800dfc8:	4610      	mov	r0, r2
 800dfca:	4619      	mov	r1, r3
 800dfcc:	bdb0      	pop	{r4, r5, r7, pc}
 800dfce:	bf00      	nop
 800dfd0:	20000bec 	.word	0x20000bec
 800dfd4:	e000e010 	.word	0xe000e010
 800dfd8:	20000bf0 	.word	0x20000bf0
 800dfdc:	20000bf4 	.word	0x20000bf4

0800dfe0 <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
// static bool powerLost;
void userMain(void)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	af00      	add	r7, sp, #0

	if (get5MsFlag())
 800dfe4:	f000 f926 	bl	800e234 <get5MsFlag>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d001      	beq.n	800dff2 <userMain+0x12>
	{
		keyScan();
 800dfee:	f7fe faa3 	bl	800c538 <keyScan>
	}
	if (getOneMsFlag())
 800dff2:	f000 f90b 	bl	800e20c <getOneMsFlag>
 800dff6:	4603      	mov	r3, r0
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d019      	beq.n	800e030 <userMain+0x50>
	{
		static bool imuInited;

		if (imuInited == false)
 800dffc:	4b14      	ldr	r3, [pc, #80]	@ (800e050 <userMain+0x70>)
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d10d      	bne.n	800e020 <userMain+0x40>
		{
			if (IMU_Init() == 0)
 800e004:	f7fe ff26 	bl	800ce54 <IMU_Init>
 800e008:	4603      	mov	r3, r0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d110      	bne.n	800e030 <userMain+0x50>
			{
				init_quaternion();
 800e00e:	f7fe ff7f 	bl	800cf10 <init_quaternion>
				imuInited = true;
 800e012:	4b0f      	ldr	r3, [pc, #60]	@ (800e050 <userMain+0x70>)
 800e014:	2201      	movs	r2, #1
 800e016:	701a      	strb	r2, [r3, #0]
				printLog("mpu init done\n");
 800e018:	480e      	ldr	r0, [pc, #56]	@ (800e054 <userMain+0x74>)
 800e01a:	f7fe f9bf 	bl	800c39c <printLog>
 800e01e:	e007      	b.n	800e030 <userMain+0x50>
			}
		}
		else
		{
			// IMU_handle();
			mpu_get_data();
 800e020:	f7fe fd76 	bl	800cb10 <mpu_get_data>
			imu_ahrs_update();
 800e024:	f7ff f8b0 	bl	800d188 <imu_ahrs_update>
			imu_attitude_update();
 800e028:	f7ff fd0a 	bl	800da40 <imu_attitude_update>
			balancerControl();
 800e02c:	f7fe f976 	bl	800c31c <balancerControl>
		}
	}

	if (get100MsFlag())
 800e030:	f000 f914 	bl	800e25c <get100MsFlag>
 800e034:	4603      	mov	r3, r0
 800e036:	2b00      	cmp	r3, #0
 800e038:	d001      	beq.n	800e03e <userMain+0x5e>
	{
		appRunning();
 800e03a:	f7fe f861 	bl	800c100 <appRunning>
	}
#if SHOW_WAVE == 0 //&& COMMAMNDER == 0
	if (get500MsFlag())
 800e03e:	f000 f921 	bl	800e284 <get500MsFlag>
 800e042:	4603      	mov	r3, r0
 800e044:	2b00      	cmp	r3, #0
 800e046:	d001      	beq.n	800e04c <userMain+0x6c>
	{
		uartTx();
 800e048:	f7fe f9d6 	bl	800c3f8 <uartTx>
	}
#endif
}
 800e04c:	bf00      	nop
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	20000bfc 	.word	0x20000bfc
 800e054:	08013900 	.word	0x08013900

0800e058 <dealPer100us>:


static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag, _1s;
static void dealPerMs();
void dealPer100us()
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800e05c:	4b08      	ldr	r3, [pc, #32]	@ (800e080 <dealPer100us+0x28>)
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	3301      	adds	r3, #1
 800e062:	b2da      	uxtb	r2, r3
 800e064:	4b06      	ldr	r3, [pc, #24]	@ (800e080 <dealPer100us+0x28>)
 800e066:	701a      	strb	r2, [r3, #0]
 800e068:	4b05      	ldr	r3, [pc, #20]	@ (800e080 <dealPer100us+0x28>)
 800e06a:	781b      	ldrb	r3, [r3, #0]
 800e06c:	2b09      	cmp	r3, #9
 800e06e:	d904      	bls.n	800e07a <dealPer100us+0x22>
    {
        cnt = 0;
 800e070:	4b03      	ldr	r3, [pc, #12]	@ (800e080 <dealPer100us+0x28>)
 800e072:	2200      	movs	r2, #0
 800e074:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800e076:	f000 f805 	bl	800e084 <dealPerMs>
    }

}
 800e07a:	bf00      	nop
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	20000c0b 	.word	0x20000c0b

0800e084 <dealPerMs>:

static void dealPerMs()
{
 800e084:	b480      	push	{r7}
 800e086:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt, _1000msCnt;
    if (++_5msCnt >= 5)
 800e088:	4b45      	ldr	r3, [pc, #276]	@ (800e1a0 <dealPerMs+0x11c>)
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	3301      	adds	r3, #1
 800e08e:	b2da      	uxtb	r2, r3
 800e090:	4b43      	ldr	r3, [pc, #268]	@ (800e1a0 <dealPerMs+0x11c>)
 800e092:	701a      	strb	r2, [r3, #0]
 800e094:	4b42      	ldr	r3, [pc, #264]	@ (800e1a0 <dealPerMs+0x11c>)
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	2b04      	cmp	r3, #4
 800e09a:	d905      	bls.n	800e0a8 <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800e09c:	4b40      	ldr	r3, [pc, #256]	@ (800e1a0 <dealPerMs+0x11c>)
 800e09e:	2200      	movs	r2, #0
 800e0a0:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800e0a2:	4b40      	ldr	r3, [pc, #256]	@ (800e1a4 <dealPerMs+0x120>)
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800e0a8:	4b3f      	ldr	r3, [pc, #252]	@ (800e1a8 <dealPerMs+0x124>)
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	b2da      	uxtb	r2, r3
 800e0b0:	4b3d      	ldr	r3, [pc, #244]	@ (800e1a8 <dealPerMs+0x124>)
 800e0b2:	701a      	strb	r2, [r3, #0]
 800e0b4:	4b3c      	ldr	r3, [pc, #240]	@ (800e1a8 <dealPerMs+0x124>)
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	2b09      	cmp	r3, #9
 800e0ba:	d905      	bls.n	800e0c8 <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800e0bc:	4b3a      	ldr	r3, [pc, #232]	@ (800e1a8 <dealPerMs+0x124>)
 800e0be:	2200      	movs	r2, #0
 800e0c0:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800e0c2:	4b3a      	ldr	r3, [pc, #232]	@ (800e1ac <dealPerMs+0x128>)
 800e0c4:	2201      	movs	r2, #1
 800e0c6:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800e0c8:	4b39      	ldr	r3, [pc, #228]	@ (800e1b0 <dealPerMs+0x12c>)
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	b2da      	uxtb	r2, r3
 800e0d0:	4b37      	ldr	r3, [pc, #220]	@ (800e1b0 <dealPerMs+0x12c>)
 800e0d2:	701a      	strb	r2, [r3, #0]
 800e0d4:	4b36      	ldr	r3, [pc, #216]	@ (800e1b0 <dealPerMs+0x12c>)
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	2b13      	cmp	r3, #19
 800e0da:	d905      	bls.n	800e0e8 <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800e0dc:	4b34      	ldr	r3, [pc, #208]	@ (800e1b0 <dealPerMs+0x12c>)
 800e0de:	2200      	movs	r2, #0
 800e0e0:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800e0e2:	4b34      	ldr	r3, [pc, #208]	@ (800e1b4 <dealPerMs+0x130>)
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800e0e8:	4b33      	ldr	r3, [pc, #204]	@ (800e1b8 <dealPerMs+0x134>)
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	b2da      	uxtb	r2, r3
 800e0f0:	4b31      	ldr	r3, [pc, #196]	@ (800e1b8 <dealPerMs+0x134>)
 800e0f2:	701a      	strb	r2, [r3, #0]
 800e0f4:	4b30      	ldr	r3, [pc, #192]	@ (800e1b8 <dealPerMs+0x134>)
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	2b1d      	cmp	r3, #29
 800e0fa:	d905      	bls.n	800e108 <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800e0fc:	4b2e      	ldr	r3, [pc, #184]	@ (800e1b8 <dealPerMs+0x134>)
 800e0fe:	2200      	movs	r2, #0
 800e100:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800e102:	4b2e      	ldr	r3, [pc, #184]	@ (800e1bc <dealPerMs+0x138>)
 800e104:	2201      	movs	r2, #1
 800e106:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800e108:	4b2d      	ldr	r3, [pc, #180]	@ (800e1c0 <dealPerMs+0x13c>)
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	3301      	adds	r3, #1
 800e10e:	b2da      	uxtb	r2, r3
 800e110:	4b2b      	ldr	r3, [pc, #172]	@ (800e1c0 <dealPerMs+0x13c>)
 800e112:	701a      	strb	r2, [r3, #0]
 800e114:	4b2a      	ldr	r3, [pc, #168]	@ (800e1c0 <dealPerMs+0x13c>)
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	2b63      	cmp	r3, #99	@ 0x63
 800e11a:	d905      	bls.n	800e128 <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800e11c:	4b28      	ldr	r3, [pc, #160]	@ (800e1c0 <dealPerMs+0x13c>)
 800e11e:	2200      	movs	r2, #0
 800e120:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800e122:	4b28      	ldr	r3, [pc, #160]	@ (800e1c4 <dealPerMs+0x140>)
 800e124:	2201      	movs	r2, #1
 800e126:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800e128:	4b27      	ldr	r3, [pc, #156]	@ (800e1c8 <dealPerMs+0x144>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	3301      	adds	r3, #1
 800e12e:	4a26      	ldr	r2, [pc, #152]	@ (800e1c8 <dealPerMs+0x144>)
 800e130:	6013      	str	r3, [r2, #0]
 800e132:	4b25      	ldr	r3, [pc, #148]	@ (800e1c8 <dealPerMs+0x144>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800e13a:	d305      	bcc.n	800e148 <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800e13c:	4b22      	ldr	r3, [pc, #136]	@ (800e1c8 <dealPerMs+0x144>)
 800e13e:	2200      	movs	r2, #0
 800e140:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800e142:	4b22      	ldr	r3, [pc, #136]	@ (800e1cc <dealPerMs+0x148>)
 800e144:	2201      	movs	r2, #1
 800e146:	701a      	strb	r2, [r3, #0]
    }
    if (++_1000msCnt >= 1000)
 800e148:	4b21      	ldr	r3, [pc, #132]	@ (800e1d0 <dealPerMs+0x14c>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	3301      	adds	r3, #1
 800e14e:	4a20      	ldr	r2, [pc, #128]	@ (800e1d0 <dealPerMs+0x14c>)
 800e150:	6013      	str	r3, [r2, #0]
 800e152:	4b1f      	ldr	r3, [pc, #124]	@ (800e1d0 <dealPerMs+0x14c>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e15a:	d305      	bcc.n	800e168 <dealPerMs+0xe4>
    {
        _1000msCnt = 0;
 800e15c:	4b1c      	ldr	r3, [pc, #112]	@ (800e1d0 <dealPerMs+0x14c>)
 800e15e:	2200      	movs	r2, #0
 800e160:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800e162:	4b1c      	ldr	r3, [pc, #112]	@ (800e1d4 <dealPerMs+0x150>)
 800e164:	2201      	movs	r2, #1
 800e166:	701a      	strb	r2, [r3, #0]

        cnt = 0;
    }

#else
    frequence = 50;
 800e168:	4b1b      	ldr	r3, [pc, #108]	@ (800e1d8 <dealPerMs+0x154>)
 800e16a:	2232      	movs	r2, #50	@ 0x32
 800e16c:	701a      	strb	r2, [r3, #0]
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
 800e16e:	4b1b      	ldr	r3, [pc, #108]	@ (800e1dc <dealPerMs+0x158>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	3301      	adds	r3, #1
 800e174:	4a19      	ldr	r2, [pc, #100]	@ (800e1dc <dealPerMs+0x158>)
 800e176:	6013      	str	r3, [r2, #0]
 800e178:	4b18      	ldr	r3, [pc, #96]	@ (800e1dc <dealPerMs+0x158>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e180:	d305      	bcc.n	800e18e <dealPerMs+0x10a>
    {
        _1msCnt = 0;
 800e182:	4b16      	ldr	r3, [pc, #88]	@ (800e1dc <dealPerMs+0x158>)
 800e184:	2200      	movs	r2, #0
 800e186:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800e188:	4b12      	ldr	r3, [pc, #72]	@ (800e1d4 <dealPerMs+0x150>)
 800e18a:	2201      	movs	r2, #1
 800e18c:	701a      	strb	r2, [r3, #0]
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
 800e18e:	4b14      	ldr	r3, [pc, #80]	@ (800e1e0 <dealPerMs+0x15c>)
 800e190:	2201      	movs	r2, #1
 800e192:	701a      	strb	r2, [r3, #0]




}
 800e194:	bf00      	nop
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop
 800e1a0:	20000c0c 	.word	0x20000c0c
 800e1a4:	20000c05 	.word	0x20000c05
 800e1a8:	20000c0d 	.word	0x20000c0d
 800e1ac:	20000c06 	.word	0x20000c06
 800e1b0:	20000c0e 	.word	0x20000c0e
 800e1b4:	20000c07 	.word	0x20000c07
 800e1b8:	20000c0f 	.word	0x20000c0f
 800e1bc:	20000c08 	.word	0x20000c08
 800e1c0:	20000c10 	.word	0x20000c10
 800e1c4:	20000c09 	.word	0x20000c09
 800e1c8:	20000c14 	.word	0x20000c14
 800e1cc:	20000c0a 	.word	0x20000c0a
 800e1d0:	20000c18 	.word	0x20000c18
 800e1d4:	20000bfd 	.word	0x20000bfd
 800e1d8:	20000c04 	.word	0x20000c04
 800e1dc:	20000c00 	.word	0x20000c00
 800e1e0:	20000bfe 	.word	0x20000bfe

0800e1e4 <getOneSecFlag>:
}



bool getOneSecFlag()
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	af00      	add	r7, sp, #0
    if (_1s)
 800e1e8:	4b07      	ldr	r3, [pc, #28]	@ (800e208 <getOneSecFlag+0x24>)
 800e1ea:	781b      	ldrb	r3, [r3, #0]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d004      	beq.n	800e1fa <getOneSecFlag+0x16>
    {
        _1s = 0;
 800e1f0:	4b05      	ldr	r3, [pc, #20]	@ (800e208 <getOneSecFlag+0x24>)
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	701a      	strb	r2, [r3, #0]
        return 1;
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	e000      	b.n	800e1fc <getOneSecFlag+0x18>
    }
    else
        return 0;
 800e1fa:	2300      	movs	r3, #0
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	46bd      	mov	sp, r7
 800e200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e204:	4770      	bx	lr
 800e206:	bf00      	nop
 800e208:	20000bfd 	.word	0x20000bfd

0800e20c <getOneMsFlag>:

bool getOneMsFlag()
{
 800e20c:	b480      	push	{r7}
 800e20e:	af00      	add	r7, sp, #0
    if (_1ms)
 800e210:	4b07      	ldr	r3, [pc, #28]	@ (800e230 <getOneMsFlag+0x24>)
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d004      	beq.n	800e222 <getOneMsFlag+0x16>
    {
        _1ms = 0;
 800e218:	4b05      	ldr	r3, [pc, #20]	@ (800e230 <getOneMsFlag+0x24>)
 800e21a:	2200      	movs	r2, #0
 800e21c:	701a      	strb	r2, [r3, #0]
        return 1;
 800e21e:	2301      	movs	r3, #1
 800e220:	e000      	b.n	800e224 <getOneMsFlag+0x18>
    }
    else
        return 0;
 800e222:	2300      	movs	r3, #0
}
 800e224:	4618      	mov	r0, r3
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr
 800e22e:	bf00      	nop
 800e230:	20000bfe 	.word	0x20000bfe

0800e234 <get5MsFlag>:
bool getCrossZero()
{
    return crossZero;
}
bool get5MsFlag()
{
 800e234:	b480      	push	{r7}
 800e236:	af00      	add	r7, sp, #0
    if (_5msFlag)
 800e238:	4b07      	ldr	r3, [pc, #28]	@ (800e258 <get5MsFlag+0x24>)
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d004      	beq.n	800e24a <get5MsFlag+0x16>
    {
        _5msFlag = 0;
 800e240:	4b05      	ldr	r3, [pc, #20]	@ (800e258 <get5MsFlag+0x24>)
 800e242:	2200      	movs	r2, #0
 800e244:	701a      	strb	r2, [r3, #0]
        return 1;
 800e246:	2301      	movs	r3, #1
 800e248:	e000      	b.n	800e24c <get5MsFlag+0x18>
    }
    else
    {
        return 0;
 800e24a:	2300      	movs	r3, #0
    }
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr
 800e256:	bf00      	nop
 800e258:	20000c05 	.word	0x20000c05

0800e25c <get100MsFlag>:
        return 0;
    }
}

bool get100MsFlag()
{
 800e25c:	b480      	push	{r7}
 800e25e:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800e260:	4b07      	ldr	r3, [pc, #28]	@ (800e280 <get100MsFlag+0x24>)
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d004      	beq.n	800e272 <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800e268:	4b05      	ldr	r3, [pc, #20]	@ (800e280 <get100MsFlag+0x24>)
 800e26a:	2200      	movs	r2, #0
 800e26c:	701a      	strb	r2, [r3, #0]
        return 1;
 800e26e:	2301      	movs	r3, #1
 800e270:	e000      	b.n	800e274 <get100MsFlag+0x18>
    }
    else
    {
        return 0;
 800e272:	2300      	movs	r3, #0
    }
}
 800e274:	4618      	mov	r0, r3
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr
 800e27e:	bf00      	nop
 800e280:	20000c09 	.word	0x20000c09

0800e284 <get500MsFlag>:

bool get500MsFlag()
{
 800e284:	b480      	push	{r7}
 800e286:	af00      	add	r7, sp, #0
    if (_500msFlag)
 800e288:	4b07      	ldr	r3, [pc, #28]	@ (800e2a8 <get500MsFlag+0x24>)
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d004      	beq.n	800e29a <get500MsFlag+0x16>
    {
        _500msFlag = 0;
 800e290:	4b05      	ldr	r3, [pc, #20]	@ (800e2a8 <get500MsFlag+0x24>)
 800e292:	2200      	movs	r2, #0
 800e294:	701a      	strb	r2, [r3, #0]
        return 1;
 800e296:	2301      	movs	r3, #1
 800e298:	e000      	b.n	800e29c <get500MsFlag+0x18>
    }
    else
    {
        return 0;
 800e29a:	2300      	movs	r3, #0
    }
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a4:	4770      	bx	lr
 800e2a6:	bf00      	nop
 800e2a8:	20000c0a 	.word	0x20000c0a

0800e2ac <atof>:
 800e2ac:	2100      	movs	r1, #0
 800e2ae:	f000 be09 	b.w	800eec4 <strtod>

0800e2b2 <sulp>:
 800e2b2:	b570      	push	{r4, r5, r6, lr}
 800e2b4:	4604      	mov	r4, r0
 800e2b6:	460d      	mov	r5, r1
 800e2b8:	ec45 4b10 	vmov	d0, r4, r5
 800e2bc:	4616      	mov	r6, r2
 800e2be:	f003 fc7b 	bl	8011bb8 <__ulp>
 800e2c2:	ec51 0b10 	vmov	r0, r1, d0
 800e2c6:	b17e      	cbz	r6, 800e2e8 <sulp+0x36>
 800e2c8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e2cc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	dd09      	ble.n	800e2e8 <sulp+0x36>
 800e2d4:	051b      	lsls	r3, r3, #20
 800e2d6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e2da:	2400      	movs	r4, #0
 800e2dc:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e2e0:	4622      	mov	r2, r4
 800e2e2:	462b      	mov	r3, r5
 800e2e4:	f7f2 f9b0 	bl	8000648 <__aeabi_dmul>
 800e2e8:	ec41 0b10 	vmov	d0, r0, r1
 800e2ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e2f0 <_strtod_l>:
 800e2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f4:	b09f      	sub	sp, #124	@ 0x7c
 800e2f6:	460c      	mov	r4, r1
 800e2f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	921a      	str	r2, [sp, #104]	@ 0x68
 800e2fe:	9005      	str	r0, [sp, #20]
 800e300:	f04f 0a00 	mov.w	sl, #0
 800e304:	f04f 0b00 	mov.w	fp, #0
 800e308:	460a      	mov	r2, r1
 800e30a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e30c:	7811      	ldrb	r1, [r2, #0]
 800e30e:	292b      	cmp	r1, #43	@ 0x2b
 800e310:	d04a      	beq.n	800e3a8 <_strtod_l+0xb8>
 800e312:	d838      	bhi.n	800e386 <_strtod_l+0x96>
 800e314:	290d      	cmp	r1, #13
 800e316:	d832      	bhi.n	800e37e <_strtod_l+0x8e>
 800e318:	2908      	cmp	r1, #8
 800e31a:	d832      	bhi.n	800e382 <_strtod_l+0x92>
 800e31c:	2900      	cmp	r1, #0
 800e31e:	d03b      	beq.n	800e398 <_strtod_l+0xa8>
 800e320:	2200      	movs	r2, #0
 800e322:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e324:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e326:	782a      	ldrb	r2, [r5, #0]
 800e328:	2a30      	cmp	r2, #48	@ 0x30
 800e32a:	f040 80b3 	bne.w	800e494 <_strtod_l+0x1a4>
 800e32e:	786a      	ldrb	r2, [r5, #1]
 800e330:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e334:	2a58      	cmp	r2, #88	@ 0x58
 800e336:	d16e      	bne.n	800e416 <_strtod_l+0x126>
 800e338:	9302      	str	r3, [sp, #8]
 800e33a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e33c:	9301      	str	r3, [sp, #4]
 800e33e:	ab1a      	add	r3, sp, #104	@ 0x68
 800e340:	9300      	str	r3, [sp, #0]
 800e342:	4a8e      	ldr	r2, [pc, #568]	@ (800e57c <_strtod_l+0x28c>)
 800e344:	9805      	ldr	r0, [sp, #20]
 800e346:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e348:	a919      	add	r1, sp, #100	@ 0x64
 800e34a:	f002 fd27 	bl	8010d9c <__gethex>
 800e34e:	f010 060f 	ands.w	r6, r0, #15
 800e352:	4604      	mov	r4, r0
 800e354:	d005      	beq.n	800e362 <_strtod_l+0x72>
 800e356:	2e06      	cmp	r6, #6
 800e358:	d128      	bne.n	800e3ac <_strtod_l+0xbc>
 800e35a:	3501      	adds	r5, #1
 800e35c:	2300      	movs	r3, #0
 800e35e:	9519      	str	r5, [sp, #100]	@ 0x64
 800e360:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e362:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e364:	2b00      	cmp	r3, #0
 800e366:	f040 858e 	bne.w	800ee86 <_strtod_l+0xb96>
 800e36a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e36c:	b1cb      	cbz	r3, 800e3a2 <_strtod_l+0xb2>
 800e36e:	4652      	mov	r2, sl
 800e370:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e374:	ec43 2b10 	vmov	d0, r2, r3
 800e378:	b01f      	add	sp, #124	@ 0x7c
 800e37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e37e:	2920      	cmp	r1, #32
 800e380:	d1ce      	bne.n	800e320 <_strtod_l+0x30>
 800e382:	3201      	adds	r2, #1
 800e384:	e7c1      	b.n	800e30a <_strtod_l+0x1a>
 800e386:	292d      	cmp	r1, #45	@ 0x2d
 800e388:	d1ca      	bne.n	800e320 <_strtod_l+0x30>
 800e38a:	2101      	movs	r1, #1
 800e38c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e38e:	1c51      	adds	r1, r2, #1
 800e390:	9119      	str	r1, [sp, #100]	@ 0x64
 800e392:	7852      	ldrb	r2, [r2, #1]
 800e394:	2a00      	cmp	r2, #0
 800e396:	d1c5      	bne.n	800e324 <_strtod_l+0x34>
 800e398:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e39a:	9419      	str	r4, [sp, #100]	@ 0x64
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	f040 8570 	bne.w	800ee82 <_strtod_l+0xb92>
 800e3a2:	4652      	mov	r2, sl
 800e3a4:	465b      	mov	r3, fp
 800e3a6:	e7e5      	b.n	800e374 <_strtod_l+0x84>
 800e3a8:	2100      	movs	r1, #0
 800e3aa:	e7ef      	b.n	800e38c <_strtod_l+0x9c>
 800e3ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e3ae:	b13a      	cbz	r2, 800e3c0 <_strtod_l+0xd0>
 800e3b0:	2135      	movs	r1, #53	@ 0x35
 800e3b2:	a81c      	add	r0, sp, #112	@ 0x70
 800e3b4:	f003 fcfa 	bl	8011dac <__copybits>
 800e3b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e3ba:	9805      	ldr	r0, [sp, #20]
 800e3bc:	f003 f8c8 	bl	8011550 <_Bfree>
 800e3c0:	3e01      	subs	r6, #1
 800e3c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e3c4:	2e04      	cmp	r6, #4
 800e3c6:	d806      	bhi.n	800e3d6 <_strtod_l+0xe6>
 800e3c8:	e8df f006 	tbb	[pc, r6]
 800e3cc:	201d0314 	.word	0x201d0314
 800e3d0:	14          	.byte	0x14
 800e3d1:	00          	.byte	0x00
 800e3d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e3d6:	05e1      	lsls	r1, r4, #23
 800e3d8:	bf48      	it	mi
 800e3da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e3de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e3e2:	0d1b      	lsrs	r3, r3, #20
 800e3e4:	051b      	lsls	r3, r3, #20
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d1bb      	bne.n	800e362 <_strtod_l+0x72>
 800e3ea:	f001 fd8d 	bl	800ff08 <__errno>
 800e3ee:	2322      	movs	r3, #34	@ 0x22
 800e3f0:	6003      	str	r3, [r0, #0]
 800e3f2:	e7b6      	b.n	800e362 <_strtod_l+0x72>
 800e3f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e3f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e3fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e400:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e404:	e7e7      	b.n	800e3d6 <_strtod_l+0xe6>
 800e406:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e584 <_strtod_l+0x294>
 800e40a:	e7e4      	b.n	800e3d6 <_strtod_l+0xe6>
 800e40c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e410:	f04f 3aff 	mov.w	sl, #4294967295
 800e414:	e7df      	b.n	800e3d6 <_strtod_l+0xe6>
 800e416:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e418:	1c5a      	adds	r2, r3, #1
 800e41a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e41c:	785b      	ldrb	r3, [r3, #1]
 800e41e:	2b30      	cmp	r3, #48	@ 0x30
 800e420:	d0f9      	beq.n	800e416 <_strtod_l+0x126>
 800e422:	2b00      	cmp	r3, #0
 800e424:	d09d      	beq.n	800e362 <_strtod_l+0x72>
 800e426:	2301      	movs	r3, #1
 800e428:	9309      	str	r3, [sp, #36]	@ 0x24
 800e42a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e42c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e42e:	2300      	movs	r3, #0
 800e430:	9308      	str	r3, [sp, #32]
 800e432:	930a      	str	r3, [sp, #40]	@ 0x28
 800e434:	461f      	mov	r7, r3
 800e436:	220a      	movs	r2, #10
 800e438:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e43a:	7805      	ldrb	r5, [r0, #0]
 800e43c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e440:	b2d9      	uxtb	r1, r3
 800e442:	2909      	cmp	r1, #9
 800e444:	d928      	bls.n	800e498 <_strtod_l+0x1a8>
 800e446:	494e      	ldr	r1, [pc, #312]	@ (800e580 <_strtod_l+0x290>)
 800e448:	2201      	movs	r2, #1
 800e44a:	f001 fd01 	bl	800fe50 <strncmp>
 800e44e:	2800      	cmp	r0, #0
 800e450:	d032      	beq.n	800e4b8 <_strtod_l+0x1c8>
 800e452:	2000      	movs	r0, #0
 800e454:	462a      	mov	r2, r5
 800e456:	4681      	mov	r9, r0
 800e458:	463d      	mov	r5, r7
 800e45a:	4603      	mov	r3, r0
 800e45c:	2a65      	cmp	r2, #101	@ 0x65
 800e45e:	d001      	beq.n	800e464 <_strtod_l+0x174>
 800e460:	2a45      	cmp	r2, #69	@ 0x45
 800e462:	d114      	bne.n	800e48e <_strtod_l+0x19e>
 800e464:	b91d      	cbnz	r5, 800e46e <_strtod_l+0x17e>
 800e466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e468:	4302      	orrs	r2, r0
 800e46a:	d095      	beq.n	800e398 <_strtod_l+0xa8>
 800e46c:	2500      	movs	r5, #0
 800e46e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e470:	1c62      	adds	r2, r4, #1
 800e472:	9219      	str	r2, [sp, #100]	@ 0x64
 800e474:	7862      	ldrb	r2, [r4, #1]
 800e476:	2a2b      	cmp	r2, #43	@ 0x2b
 800e478:	d077      	beq.n	800e56a <_strtod_l+0x27a>
 800e47a:	2a2d      	cmp	r2, #45	@ 0x2d
 800e47c:	d07b      	beq.n	800e576 <_strtod_l+0x286>
 800e47e:	f04f 0c00 	mov.w	ip, #0
 800e482:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e486:	2909      	cmp	r1, #9
 800e488:	f240 8082 	bls.w	800e590 <_strtod_l+0x2a0>
 800e48c:	9419      	str	r4, [sp, #100]	@ 0x64
 800e48e:	f04f 0800 	mov.w	r8, #0
 800e492:	e0a2      	b.n	800e5da <_strtod_l+0x2ea>
 800e494:	2300      	movs	r3, #0
 800e496:	e7c7      	b.n	800e428 <_strtod_l+0x138>
 800e498:	2f08      	cmp	r7, #8
 800e49a:	bfd5      	itete	le
 800e49c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e49e:	9908      	ldrgt	r1, [sp, #32]
 800e4a0:	fb02 3301 	mlale	r3, r2, r1, r3
 800e4a4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e4a8:	f100 0001 	add.w	r0, r0, #1
 800e4ac:	bfd4      	ite	le
 800e4ae:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e4b0:	9308      	strgt	r3, [sp, #32]
 800e4b2:	3701      	adds	r7, #1
 800e4b4:	9019      	str	r0, [sp, #100]	@ 0x64
 800e4b6:	e7bf      	b.n	800e438 <_strtod_l+0x148>
 800e4b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e4ba:	1c5a      	adds	r2, r3, #1
 800e4bc:	9219      	str	r2, [sp, #100]	@ 0x64
 800e4be:	785a      	ldrb	r2, [r3, #1]
 800e4c0:	b37f      	cbz	r7, 800e522 <_strtod_l+0x232>
 800e4c2:	4681      	mov	r9, r0
 800e4c4:	463d      	mov	r5, r7
 800e4c6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e4ca:	2b09      	cmp	r3, #9
 800e4cc:	d912      	bls.n	800e4f4 <_strtod_l+0x204>
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	e7c4      	b.n	800e45c <_strtod_l+0x16c>
 800e4d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e4d4:	1c5a      	adds	r2, r3, #1
 800e4d6:	9219      	str	r2, [sp, #100]	@ 0x64
 800e4d8:	785a      	ldrb	r2, [r3, #1]
 800e4da:	3001      	adds	r0, #1
 800e4dc:	2a30      	cmp	r2, #48	@ 0x30
 800e4de:	d0f8      	beq.n	800e4d2 <_strtod_l+0x1e2>
 800e4e0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e4e4:	2b08      	cmp	r3, #8
 800e4e6:	f200 84d3 	bhi.w	800ee90 <_strtod_l+0xba0>
 800e4ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e4ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800e4ee:	4681      	mov	r9, r0
 800e4f0:	2000      	movs	r0, #0
 800e4f2:	4605      	mov	r5, r0
 800e4f4:	3a30      	subs	r2, #48	@ 0x30
 800e4f6:	f100 0301 	add.w	r3, r0, #1
 800e4fa:	d02a      	beq.n	800e552 <_strtod_l+0x262>
 800e4fc:	4499      	add	r9, r3
 800e4fe:	eb00 0c05 	add.w	ip, r0, r5
 800e502:	462b      	mov	r3, r5
 800e504:	210a      	movs	r1, #10
 800e506:	4563      	cmp	r3, ip
 800e508:	d10d      	bne.n	800e526 <_strtod_l+0x236>
 800e50a:	1c69      	adds	r1, r5, #1
 800e50c:	4401      	add	r1, r0
 800e50e:	4428      	add	r0, r5
 800e510:	2808      	cmp	r0, #8
 800e512:	dc16      	bgt.n	800e542 <_strtod_l+0x252>
 800e514:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e516:	230a      	movs	r3, #10
 800e518:	fb03 2300 	mla	r3, r3, r0, r2
 800e51c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e51e:	2300      	movs	r3, #0
 800e520:	e018      	b.n	800e554 <_strtod_l+0x264>
 800e522:	4638      	mov	r0, r7
 800e524:	e7da      	b.n	800e4dc <_strtod_l+0x1ec>
 800e526:	2b08      	cmp	r3, #8
 800e528:	f103 0301 	add.w	r3, r3, #1
 800e52c:	dc03      	bgt.n	800e536 <_strtod_l+0x246>
 800e52e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e530:	434e      	muls	r6, r1
 800e532:	960a      	str	r6, [sp, #40]	@ 0x28
 800e534:	e7e7      	b.n	800e506 <_strtod_l+0x216>
 800e536:	2b10      	cmp	r3, #16
 800e538:	bfde      	ittt	le
 800e53a:	9e08      	ldrle	r6, [sp, #32]
 800e53c:	434e      	mulle	r6, r1
 800e53e:	9608      	strle	r6, [sp, #32]
 800e540:	e7e1      	b.n	800e506 <_strtod_l+0x216>
 800e542:	280f      	cmp	r0, #15
 800e544:	dceb      	bgt.n	800e51e <_strtod_l+0x22e>
 800e546:	9808      	ldr	r0, [sp, #32]
 800e548:	230a      	movs	r3, #10
 800e54a:	fb03 2300 	mla	r3, r3, r0, r2
 800e54e:	9308      	str	r3, [sp, #32]
 800e550:	e7e5      	b.n	800e51e <_strtod_l+0x22e>
 800e552:	4629      	mov	r1, r5
 800e554:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e556:	1c50      	adds	r0, r2, #1
 800e558:	9019      	str	r0, [sp, #100]	@ 0x64
 800e55a:	7852      	ldrb	r2, [r2, #1]
 800e55c:	4618      	mov	r0, r3
 800e55e:	460d      	mov	r5, r1
 800e560:	e7b1      	b.n	800e4c6 <_strtod_l+0x1d6>
 800e562:	f04f 0900 	mov.w	r9, #0
 800e566:	2301      	movs	r3, #1
 800e568:	e77d      	b.n	800e466 <_strtod_l+0x176>
 800e56a:	f04f 0c00 	mov.w	ip, #0
 800e56e:	1ca2      	adds	r2, r4, #2
 800e570:	9219      	str	r2, [sp, #100]	@ 0x64
 800e572:	78a2      	ldrb	r2, [r4, #2]
 800e574:	e785      	b.n	800e482 <_strtod_l+0x192>
 800e576:	f04f 0c01 	mov.w	ip, #1
 800e57a:	e7f8      	b.n	800e56e <_strtod_l+0x27e>
 800e57c:	08013968 	.word	0x08013968
 800e580:	08013950 	.word	0x08013950
 800e584:	7ff00000 	.word	0x7ff00000
 800e588:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e58a:	1c51      	adds	r1, r2, #1
 800e58c:	9119      	str	r1, [sp, #100]	@ 0x64
 800e58e:	7852      	ldrb	r2, [r2, #1]
 800e590:	2a30      	cmp	r2, #48	@ 0x30
 800e592:	d0f9      	beq.n	800e588 <_strtod_l+0x298>
 800e594:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e598:	2908      	cmp	r1, #8
 800e59a:	f63f af78 	bhi.w	800e48e <_strtod_l+0x19e>
 800e59e:	3a30      	subs	r2, #48	@ 0x30
 800e5a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e5a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e5a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e5a6:	f04f 080a 	mov.w	r8, #10
 800e5aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e5ac:	1c56      	adds	r6, r2, #1
 800e5ae:	9619      	str	r6, [sp, #100]	@ 0x64
 800e5b0:	7852      	ldrb	r2, [r2, #1]
 800e5b2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e5b6:	f1be 0f09 	cmp.w	lr, #9
 800e5ba:	d939      	bls.n	800e630 <_strtod_l+0x340>
 800e5bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e5be:	1a76      	subs	r6, r6, r1
 800e5c0:	2e08      	cmp	r6, #8
 800e5c2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e5c6:	dc03      	bgt.n	800e5d0 <_strtod_l+0x2e0>
 800e5c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e5ca:	4588      	cmp	r8, r1
 800e5cc:	bfa8      	it	ge
 800e5ce:	4688      	movge	r8, r1
 800e5d0:	f1bc 0f00 	cmp.w	ip, #0
 800e5d4:	d001      	beq.n	800e5da <_strtod_l+0x2ea>
 800e5d6:	f1c8 0800 	rsb	r8, r8, #0
 800e5da:	2d00      	cmp	r5, #0
 800e5dc:	d14e      	bne.n	800e67c <_strtod_l+0x38c>
 800e5de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e5e0:	4308      	orrs	r0, r1
 800e5e2:	f47f aebe 	bne.w	800e362 <_strtod_l+0x72>
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	f47f aed6 	bne.w	800e398 <_strtod_l+0xa8>
 800e5ec:	2a69      	cmp	r2, #105	@ 0x69
 800e5ee:	d028      	beq.n	800e642 <_strtod_l+0x352>
 800e5f0:	dc25      	bgt.n	800e63e <_strtod_l+0x34e>
 800e5f2:	2a49      	cmp	r2, #73	@ 0x49
 800e5f4:	d025      	beq.n	800e642 <_strtod_l+0x352>
 800e5f6:	2a4e      	cmp	r2, #78	@ 0x4e
 800e5f8:	f47f aece 	bne.w	800e398 <_strtod_l+0xa8>
 800e5fc:	499b      	ldr	r1, [pc, #620]	@ (800e86c <_strtod_l+0x57c>)
 800e5fe:	a819      	add	r0, sp, #100	@ 0x64
 800e600:	f002 fdee 	bl	80111e0 <__match>
 800e604:	2800      	cmp	r0, #0
 800e606:	f43f aec7 	beq.w	800e398 <_strtod_l+0xa8>
 800e60a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	2b28      	cmp	r3, #40	@ 0x28
 800e610:	d12e      	bne.n	800e670 <_strtod_l+0x380>
 800e612:	4997      	ldr	r1, [pc, #604]	@ (800e870 <_strtod_l+0x580>)
 800e614:	aa1c      	add	r2, sp, #112	@ 0x70
 800e616:	a819      	add	r0, sp, #100	@ 0x64
 800e618:	f002 fdf6 	bl	8011208 <__hexnan>
 800e61c:	2805      	cmp	r0, #5
 800e61e:	d127      	bne.n	800e670 <_strtod_l+0x380>
 800e620:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e622:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e626:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e62a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e62e:	e698      	b.n	800e362 <_strtod_l+0x72>
 800e630:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e632:	fb08 2101 	mla	r1, r8, r1, r2
 800e636:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e63a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e63c:	e7b5      	b.n	800e5aa <_strtod_l+0x2ba>
 800e63e:	2a6e      	cmp	r2, #110	@ 0x6e
 800e640:	e7da      	b.n	800e5f8 <_strtod_l+0x308>
 800e642:	498c      	ldr	r1, [pc, #560]	@ (800e874 <_strtod_l+0x584>)
 800e644:	a819      	add	r0, sp, #100	@ 0x64
 800e646:	f002 fdcb 	bl	80111e0 <__match>
 800e64a:	2800      	cmp	r0, #0
 800e64c:	f43f aea4 	beq.w	800e398 <_strtod_l+0xa8>
 800e650:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e652:	4989      	ldr	r1, [pc, #548]	@ (800e878 <_strtod_l+0x588>)
 800e654:	3b01      	subs	r3, #1
 800e656:	a819      	add	r0, sp, #100	@ 0x64
 800e658:	9319      	str	r3, [sp, #100]	@ 0x64
 800e65a:	f002 fdc1 	bl	80111e0 <__match>
 800e65e:	b910      	cbnz	r0, 800e666 <_strtod_l+0x376>
 800e660:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e662:	3301      	adds	r3, #1
 800e664:	9319      	str	r3, [sp, #100]	@ 0x64
 800e666:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e888 <_strtod_l+0x598>
 800e66a:	f04f 0a00 	mov.w	sl, #0
 800e66e:	e678      	b.n	800e362 <_strtod_l+0x72>
 800e670:	4882      	ldr	r0, [pc, #520]	@ (800e87c <_strtod_l+0x58c>)
 800e672:	f001 fc85 	bl	800ff80 <nan>
 800e676:	ec5b ab10 	vmov	sl, fp, d0
 800e67a:	e672      	b.n	800e362 <_strtod_l+0x72>
 800e67c:	eba8 0309 	sub.w	r3, r8, r9
 800e680:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e682:	9309      	str	r3, [sp, #36]	@ 0x24
 800e684:	2f00      	cmp	r7, #0
 800e686:	bf08      	it	eq
 800e688:	462f      	moveq	r7, r5
 800e68a:	2d10      	cmp	r5, #16
 800e68c:	462c      	mov	r4, r5
 800e68e:	bfa8      	it	ge
 800e690:	2410      	movge	r4, #16
 800e692:	f7f1 ff5f 	bl	8000554 <__aeabi_ui2d>
 800e696:	2d09      	cmp	r5, #9
 800e698:	4682      	mov	sl, r0
 800e69a:	468b      	mov	fp, r1
 800e69c:	dc13      	bgt.n	800e6c6 <_strtod_l+0x3d6>
 800e69e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	f43f ae5e 	beq.w	800e362 <_strtod_l+0x72>
 800e6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6a8:	dd78      	ble.n	800e79c <_strtod_l+0x4ac>
 800e6aa:	2b16      	cmp	r3, #22
 800e6ac:	dc5f      	bgt.n	800e76e <_strtod_l+0x47e>
 800e6ae:	4974      	ldr	r1, [pc, #464]	@ (800e880 <_strtod_l+0x590>)
 800e6b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e6b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6b8:	4652      	mov	r2, sl
 800e6ba:	465b      	mov	r3, fp
 800e6bc:	f7f1 ffc4 	bl	8000648 <__aeabi_dmul>
 800e6c0:	4682      	mov	sl, r0
 800e6c2:	468b      	mov	fp, r1
 800e6c4:	e64d      	b.n	800e362 <_strtod_l+0x72>
 800e6c6:	4b6e      	ldr	r3, [pc, #440]	@ (800e880 <_strtod_l+0x590>)
 800e6c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e6cc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e6d0:	f7f1 ffba 	bl	8000648 <__aeabi_dmul>
 800e6d4:	4682      	mov	sl, r0
 800e6d6:	9808      	ldr	r0, [sp, #32]
 800e6d8:	468b      	mov	fp, r1
 800e6da:	f7f1 ff3b 	bl	8000554 <__aeabi_ui2d>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	460b      	mov	r3, r1
 800e6e2:	4650      	mov	r0, sl
 800e6e4:	4659      	mov	r1, fp
 800e6e6:	f7f1 fdf9 	bl	80002dc <__adddf3>
 800e6ea:	2d0f      	cmp	r5, #15
 800e6ec:	4682      	mov	sl, r0
 800e6ee:	468b      	mov	fp, r1
 800e6f0:	ddd5      	ble.n	800e69e <_strtod_l+0x3ae>
 800e6f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6f4:	1b2c      	subs	r4, r5, r4
 800e6f6:	441c      	add	r4, r3
 800e6f8:	2c00      	cmp	r4, #0
 800e6fa:	f340 8096 	ble.w	800e82a <_strtod_l+0x53a>
 800e6fe:	f014 030f 	ands.w	r3, r4, #15
 800e702:	d00a      	beq.n	800e71a <_strtod_l+0x42a>
 800e704:	495e      	ldr	r1, [pc, #376]	@ (800e880 <_strtod_l+0x590>)
 800e706:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e70a:	4652      	mov	r2, sl
 800e70c:	465b      	mov	r3, fp
 800e70e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e712:	f7f1 ff99 	bl	8000648 <__aeabi_dmul>
 800e716:	4682      	mov	sl, r0
 800e718:	468b      	mov	fp, r1
 800e71a:	f034 040f 	bics.w	r4, r4, #15
 800e71e:	d073      	beq.n	800e808 <_strtod_l+0x518>
 800e720:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e724:	dd48      	ble.n	800e7b8 <_strtod_l+0x4c8>
 800e726:	2400      	movs	r4, #0
 800e728:	46a0      	mov	r8, r4
 800e72a:	940a      	str	r4, [sp, #40]	@ 0x28
 800e72c:	46a1      	mov	r9, r4
 800e72e:	9a05      	ldr	r2, [sp, #20]
 800e730:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e888 <_strtod_l+0x598>
 800e734:	2322      	movs	r3, #34	@ 0x22
 800e736:	6013      	str	r3, [r2, #0]
 800e738:	f04f 0a00 	mov.w	sl, #0
 800e73c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e73e:	2b00      	cmp	r3, #0
 800e740:	f43f ae0f 	beq.w	800e362 <_strtod_l+0x72>
 800e744:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e746:	9805      	ldr	r0, [sp, #20]
 800e748:	f002 ff02 	bl	8011550 <_Bfree>
 800e74c:	9805      	ldr	r0, [sp, #20]
 800e74e:	4649      	mov	r1, r9
 800e750:	f002 fefe 	bl	8011550 <_Bfree>
 800e754:	9805      	ldr	r0, [sp, #20]
 800e756:	4641      	mov	r1, r8
 800e758:	f002 fefa 	bl	8011550 <_Bfree>
 800e75c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e75e:	9805      	ldr	r0, [sp, #20]
 800e760:	f002 fef6 	bl	8011550 <_Bfree>
 800e764:	9805      	ldr	r0, [sp, #20]
 800e766:	4621      	mov	r1, r4
 800e768:	f002 fef2 	bl	8011550 <_Bfree>
 800e76c:	e5f9      	b.n	800e362 <_strtod_l+0x72>
 800e76e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e770:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e774:	4293      	cmp	r3, r2
 800e776:	dbbc      	blt.n	800e6f2 <_strtod_l+0x402>
 800e778:	4c41      	ldr	r4, [pc, #260]	@ (800e880 <_strtod_l+0x590>)
 800e77a:	f1c5 050f 	rsb	r5, r5, #15
 800e77e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e782:	4652      	mov	r2, sl
 800e784:	465b      	mov	r3, fp
 800e786:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e78a:	f7f1 ff5d 	bl	8000648 <__aeabi_dmul>
 800e78e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e790:	1b5d      	subs	r5, r3, r5
 800e792:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e796:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e79a:	e78f      	b.n	800e6bc <_strtod_l+0x3cc>
 800e79c:	3316      	adds	r3, #22
 800e79e:	dba8      	blt.n	800e6f2 <_strtod_l+0x402>
 800e7a0:	4b37      	ldr	r3, [pc, #220]	@ (800e880 <_strtod_l+0x590>)
 800e7a2:	eba9 0808 	sub.w	r8, r9, r8
 800e7a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e7aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e7ae:	4650      	mov	r0, sl
 800e7b0:	4659      	mov	r1, fp
 800e7b2:	f7f2 f873 	bl	800089c <__aeabi_ddiv>
 800e7b6:	e783      	b.n	800e6c0 <_strtod_l+0x3d0>
 800e7b8:	4b32      	ldr	r3, [pc, #200]	@ (800e884 <_strtod_l+0x594>)
 800e7ba:	9308      	str	r3, [sp, #32]
 800e7bc:	2300      	movs	r3, #0
 800e7be:	1124      	asrs	r4, r4, #4
 800e7c0:	4650      	mov	r0, sl
 800e7c2:	4659      	mov	r1, fp
 800e7c4:	461e      	mov	r6, r3
 800e7c6:	2c01      	cmp	r4, #1
 800e7c8:	dc21      	bgt.n	800e80e <_strtod_l+0x51e>
 800e7ca:	b10b      	cbz	r3, 800e7d0 <_strtod_l+0x4e0>
 800e7cc:	4682      	mov	sl, r0
 800e7ce:	468b      	mov	fp, r1
 800e7d0:	492c      	ldr	r1, [pc, #176]	@ (800e884 <_strtod_l+0x594>)
 800e7d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e7d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e7da:	4652      	mov	r2, sl
 800e7dc:	465b      	mov	r3, fp
 800e7de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7e2:	f7f1 ff31 	bl	8000648 <__aeabi_dmul>
 800e7e6:	4b28      	ldr	r3, [pc, #160]	@ (800e888 <_strtod_l+0x598>)
 800e7e8:	460a      	mov	r2, r1
 800e7ea:	400b      	ands	r3, r1
 800e7ec:	4927      	ldr	r1, [pc, #156]	@ (800e88c <_strtod_l+0x59c>)
 800e7ee:	428b      	cmp	r3, r1
 800e7f0:	4682      	mov	sl, r0
 800e7f2:	d898      	bhi.n	800e726 <_strtod_l+0x436>
 800e7f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e7f8:	428b      	cmp	r3, r1
 800e7fa:	bf86      	itte	hi
 800e7fc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e890 <_strtod_l+0x5a0>
 800e800:	f04f 3aff 	movhi.w	sl, #4294967295
 800e804:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e808:	2300      	movs	r3, #0
 800e80a:	9308      	str	r3, [sp, #32]
 800e80c:	e07a      	b.n	800e904 <_strtod_l+0x614>
 800e80e:	07e2      	lsls	r2, r4, #31
 800e810:	d505      	bpl.n	800e81e <_strtod_l+0x52e>
 800e812:	9b08      	ldr	r3, [sp, #32]
 800e814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e818:	f7f1 ff16 	bl	8000648 <__aeabi_dmul>
 800e81c:	2301      	movs	r3, #1
 800e81e:	9a08      	ldr	r2, [sp, #32]
 800e820:	3208      	adds	r2, #8
 800e822:	3601      	adds	r6, #1
 800e824:	1064      	asrs	r4, r4, #1
 800e826:	9208      	str	r2, [sp, #32]
 800e828:	e7cd      	b.n	800e7c6 <_strtod_l+0x4d6>
 800e82a:	d0ed      	beq.n	800e808 <_strtod_l+0x518>
 800e82c:	4264      	negs	r4, r4
 800e82e:	f014 020f 	ands.w	r2, r4, #15
 800e832:	d00a      	beq.n	800e84a <_strtod_l+0x55a>
 800e834:	4b12      	ldr	r3, [pc, #72]	@ (800e880 <_strtod_l+0x590>)
 800e836:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e83a:	4650      	mov	r0, sl
 800e83c:	4659      	mov	r1, fp
 800e83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e842:	f7f2 f82b 	bl	800089c <__aeabi_ddiv>
 800e846:	4682      	mov	sl, r0
 800e848:	468b      	mov	fp, r1
 800e84a:	1124      	asrs	r4, r4, #4
 800e84c:	d0dc      	beq.n	800e808 <_strtod_l+0x518>
 800e84e:	2c1f      	cmp	r4, #31
 800e850:	dd20      	ble.n	800e894 <_strtod_l+0x5a4>
 800e852:	2400      	movs	r4, #0
 800e854:	46a0      	mov	r8, r4
 800e856:	940a      	str	r4, [sp, #40]	@ 0x28
 800e858:	46a1      	mov	r9, r4
 800e85a:	9a05      	ldr	r2, [sp, #20]
 800e85c:	2322      	movs	r3, #34	@ 0x22
 800e85e:	f04f 0a00 	mov.w	sl, #0
 800e862:	f04f 0b00 	mov.w	fp, #0
 800e866:	6013      	str	r3, [r2, #0]
 800e868:	e768      	b.n	800e73c <_strtod_l+0x44c>
 800e86a:	bf00      	nop
 800e86c:	080139b5 	.word	0x080139b5
 800e870:	08013954 	.word	0x08013954
 800e874:	080139ad 	.word	0x080139ad
 800e878:	080139ec 	.word	0x080139ec
 800e87c:	08013d7d 	.word	0x08013d7d
 800e880:	08013b68 	.word	0x08013b68
 800e884:	08013b40 	.word	0x08013b40
 800e888:	7ff00000 	.word	0x7ff00000
 800e88c:	7ca00000 	.word	0x7ca00000
 800e890:	7fefffff 	.word	0x7fefffff
 800e894:	f014 0310 	ands.w	r3, r4, #16
 800e898:	bf18      	it	ne
 800e89a:	236a      	movne	r3, #106	@ 0x6a
 800e89c:	4ea9      	ldr	r6, [pc, #676]	@ (800eb44 <_strtod_l+0x854>)
 800e89e:	9308      	str	r3, [sp, #32]
 800e8a0:	4650      	mov	r0, sl
 800e8a2:	4659      	mov	r1, fp
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	07e2      	lsls	r2, r4, #31
 800e8a8:	d504      	bpl.n	800e8b4 <_strtod_l+0x5c4>
 800e8aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e8ae:	f7f1 fecb 	bl	8000648 <__aeabi_dmul>
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	1064      	asrs	r4, r4, #1
 800e8b6:	f106 0608 	add.w	r6, r6, #8
 800e8ba:	d1f4      	bne.n	800e8a6 <_strtod_l+0x5b6>
 800e8bc:	b10b      	cbz	r3, 800e8c2 <_strtod_l+0x5d2>
 800e8be:	4682      	mov	sl, r0
 800e8c0:	468b      	mov	fp, r1
 800e8c2:	9b08      	ldr	r3, [sp, #32]
 800e8c4:	b1b3      	cbz	r3, 800e8f4 <_strtod_l+0x604>
 800e8c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e8ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	4659      	mov	r1, fp
 800e8d2:	dd0f      	ble.n	800e8f4 <_strtod_l+0x604>
 800e8d4:	2b1f      	cmp	r3, #31
 800e8d6:	dd55      	ble.n	800e984 <_strtod_l+0x694>
 800e8d8:	2b34      	cmp	r3, #52	@ 0x34
 800e8da:	bfde      	ittt	le
 800e8dc:	f04f 33ff 	movle.w	r3, #4294967295
 800e8e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e8e4:	4093      	lslle	r3, r2
 800e8e6:	f04f 0a00 	mov.w	sl, #0
 800e8ea:	bfcc      	ite	gt
 800e8ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e8f0:	ea03 0b01 	andle.w	fp, r3, r1
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	4650      	mov	r0, sl
 800e8fa:	4659      	mov	r1, fp
 800e8fc:	f7f2 f90c 	bl	8000b18 <__aeabi_dcmpeq>
 800e900:	2800      	cmp	r0, #0
 800e902:	d1a6      	bne.n	800e852 <_strtod_l+0x562>
 800e904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e906:	9300      	str	r3, [sp, #0]
 800e908:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e90a:	9805      	ldr	r0, [sp, #20]
 800e90c:	462b      	mov	r3, r5
 800e90e:	463a      	mov	r2, r7
 800e910:	f002 fe86 	bl	8011620 <__s2b>
 800e914:	900a      	str	r0, [sp, #40]	@ 0x28
 800e916:	2800      	cmp	r0, #0
 800e918:	f43f af05 	beq.w	800e726 <_strtod_l+0x436>
 800e91c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e91e:	2a00      	cmp	r2, #0
 800e920:	eba9 0308 	sub.w	r3, r9, r8
 800e924:	bfa8      	it	ge
 800e926:	2300      	movge	r3, #0
 800e928:	9312      	str	r3, [sp, #72]	@ 0x48
 800e92a:	2400      	movs	r4, #0
 800e92c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e930:	9316      	str	r3, [sp, #88]	@ 0x58
 800e932:	46a0      	mov	r8, r4
 800e934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e936:	9805      	ldr	r0, [sp, #20]
 800e938:	6859      	ldr	r1, [r3, #4]
 800e93a:	f002 fdc9 	bl	80114d0 <_Balloc>
 800e93e:	4681      	mov	r9, r0
 800e940:	2800      	cmp	r0, #0
 800e942:	f43f aef4 	beq.w	800e72e <_strtod_l+0x43e>
 800e946:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e948:	691a      	ldr	r2, [r3, #16]
 800e94a:	3202      	adds	r2, #2
 800e94c:	f103 010c 	add.w	r1, r3, #12
 800e950:	0092      	lsls	r2, r2, #2
 800e952:	300c      	adds	r0, #12
 800e954:	f001 fb05 	bl	800ff62 <memcpy>
 800e958:	ec4b ab10 	vmov	d0, sl, fp
 800e95c:	9805      	ldr	r0, [sp, #20]
 800e95e:	aa1c      	add	r2, sp, #112	@ 0x70
 800e960:	a91b      	add	r1, sp, #108	@ 0x6c
 800e962:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e966:	f003 f997 	bl	8011c98 <__d2b>
 800e96a:	901a      	str	r0, [sp, #104]	@ 0x68
 800e96c:	2800      	cmp	r0, #0
 800e96e:	f43f aede 	beq.w	800e72e <_strtod_l+0x43e>
 800e972:	9805      	ldr	r0, [sp, #20]
 800e974:	2101      	movs	r1, #1
 800e976:	f002 fee9 	bl	801174c <__i2b>
 800e97a:	4680      	mov	r8, r0
 800e97c:	b948      	cbnz	r0, 800e992 <_strtod_l+0x6a2>
 800e97e:	f04f 0800 	mov.w	r8, #0
 800e982:	e6d4      	b.n	800e72e <_strtod_l+0x43e>
 800e984:	f04f 32ff 	mov.w	r2, #4294967295
 800e988:	fa02 f303 	lsl.w	r3, r2, r3
 800e98c:	ea03 0a0a 	and.w	sl, r3, sl
 800e990:	e7b0      	b.n	800e8f4 <_strtod_l+0x604>
 800e992:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e994:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e996:	2d00      	cmp	r5, #0
 800e998:	bfab      	itete	ge
 800e99a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e99c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e99e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e9a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e9a2:	bfac      	ite	ge
 800e9a4:	18ef      	addge	r7, r5, r3
 800e9a6:	1b5e      	sublt	r6, r3, r5
 800e9a8:	9b08      	ldr	r3, [sp, #32]
 800e9aa:	1aed      	subs	r5, r5, r3
 800e9ac:	4415      	add	r5, r2
 800e9ae:	4b66      	ldr	r3, [pc, #408]	@ (800eb48 <_strtod_l+0x858>)
 800e9b0:	3d01      	subs	r5, #1
 800e9b2:	429d      	cmp	r5, r3
 800e9b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e9b8:	da50      	bge.n	800ea5c <_strtod_l+0x76c>
 800e9ba:	1b5b      	subs	r3, r3, r5
 800e9bc:	2b1f      	cmp	r3, #31
 800e9be:	eba2 0203 	sub.w	r2, r2, r3
 800e9c2:	f04f 0101 	mov.w	r1, #1
 800e9c6:	dc3d      	bgt.n	800ea44 <_strtod_l+0x754>
 800e9c8:	fa01 f303 	lsl.w	r3, r1, r3
 800e9cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e9d2:	18bd      	adds	r5, r7, r2
 800e9d4:	9b08      	ldr	r3, [sp, #32]
 800e9d6:	42af      	cmp	r7, r5
 800e9d8:	4416      	add	r6, r2
 800e9da:	441e      	add	r6, r3
 800e9dc:	463b      	mov	r3, r7
 800e9de:	bfa8      	it	ge
 800e9e0:	462b      	movge	r3, r5
 800e9e2:	42b3      	cmp	r3, r6
 800e9e4:	bfa8      	it	ge
 800e9e6:	4633      	movge	r3, r6
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	bfc2      	ittt	gt
 800e9ec:	1aed      	subgt	r5, r5, r3
 800e9ee:	1af6      	subgt	r6, r6, r3
 800e9f0:	1aff      	subgt	r7, r7, r3
 800e9f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	dd16      	ble.n	800ea26 <_strtod_l+0x736>
 800e9f8:	4641      	mov	r1, r8
 800e9fa:	9805      	ldr	r0, [sp, #20]
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	f002 ff65 	bl	80118cc <__pow5mult>
 800ea02:	4680      	mov	r8, r0
 800ea04:	2800      	cmp	r0, #0
 800ea06:	d0ba      	beq.n	800e97e <_strtod_l+0x68e>
 800ea08:	4601      	mov	r1, r0
 800ea0a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ea0c:	9805      	ldr	r0, [sp, #20]
 800ea0e:	f002 feb3 	bl	8011778 <__multiply>
 800ea12:	900e      	str	r0, [sp, #56]	@ 0x38
 800ea14:	2800      	cmp	r0, #0
 800ea16:	f43f ae8a 	beq.w	800e72e <_strtod_l+0x43e>
 800ea1a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ea1c:	9805      	ldr	r0, [sp, #20]
 800ea1e:	f002 fd97 	bl	8011550 <_Bfree>
 800ea22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea24:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea26:	2d00      	cmp	r5, #0
 800ea28:	dc1d      	bgt.n	800ea66 <_strtod_l+0x776>
 800ea2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	dd23      	ble.n	800ea78 <_strtod_l+0x788>
 800ea30:	4649      	mov	r1, r9
 800ea32:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ea34:	9805      	ldr	r0, [sp, #20]
 800ea36:	f002 ff49 	bl	80118cc <__pow5mult>
 800ea3a:	4681      	mov	r9, r0
 800ea3c:	b9e0      	cbnz	r0, 800ea78 <_strtod_l+0x788>
 800ea3e:	f04f 0900 	mov.w	r9, #0
 800ea42:	e674      	b.n	800e72e <_strtod_l+0x43e>
 800ea44:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ea48:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ea4c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ea50:	35e2      	adds	r5, #226	@ 0xe2
 800ea52:	fa01 f305 	lsl.w	r3, r1, r5
 800ea56:	9310      	str	r3, [sp, #64]	@ 0x40
 800ea58:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ea5a:	e7ba      	b.n	800e9d2 <_strtod_l+0x6e2>
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ea60:	2301      	movs	r3, #1
 800ea62:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ea64:	e7b5      	b.n	800e9d2 <_strtod_l+0x6e2>
 800ea66:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ea68:	9805      	ldr	r0, [sp, #20]
 800ea6a:	462a      	mov	r2, r5
 800ea6c:	f002 ff88 	bl	8011980 <__lshift>
 800ea70:	901a      	str	r0, [sp, #104]	@ 0x68
 800ea72:	2800      	cmp	r0, #0
 800ea74:	d1d9      	bne.n	800ea2a <_strtod_l+0x73a>
 800ea76:	e65a      	b.n	800e72e <_strtod_l+0x43e>
 800ea78:	2e00      	cmp	r6, #0
 800ea7a:	dd07      	ble.n	800ea8c <_strtod_l+0x79c>
 800ea7c:	4649      	mov	r1, r9
 800ea7e:	9805      	ldr	r0, [sp, #20]
 800ea80:	4632      	mov	r2, r6
 800ea82:	f002 ff7d 	bl	8011980 <__lshift>
 800ea86:	4681      	mov	r9, r0
 800ea88:	2800      	cmp	r0, #0
 800ea8a:	d0d8      	beq.n	800ea3e <_strtod_l+0x74e>
 800ea8c:	2f00      	cmp	r7, #0
 800ea8e:	dd08      	ble.n	800eaa2 <_strtod_l+0x7b2>
 800ea90:	4641      	mov	r1, r8
 800ea92:	9805      	ldr	r0, [sp, #20]
 800ea94:	463a      	mov	r2, r7
 800ea96:	f002 ff73 	bl	8011980 <__lshift>
 800ea9a:	4680      	mov	r8, r0
 800ea9c:	2800      	cmp	r0, #0
 800ea9e:	f43f ae46 	beq.w	800e72e <_strtod_l+0x43e>
 800eaa2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eaa4:	9805      	ldr	r0, [sp, #20]
 800eaa6:	464a      	mov	r2, r9
 800eaa8:	f002 fff2 	bl	8011a90 <__mdiff>
 800eaac:	4604      	mov	r4, r0
 800eaae:	2800      	cmp	r0, #0
 800eab0:	f43f ae3d 	beq.w	800e72e <_strtod_l+0x43e>
 800eab4:	68c3      	ldr	r3, [r0, #12]
 800eab6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eab8:	2300      	movs	r3, #0
 800eaba:	60c3      	str	r3, [r0, #12]
 800eabc:	4641      	mov	r1, r8
 800eabe:	f002 ffcb 	bl	8011a58 <__mcmp>
 800eac2:	2800      	cmp	r0, #0
 800eac4:	da46      	bge.n	800eb54 <_strtod_l+0x864>
 800eac6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eac8:	ea53 030a 	orrs.w	r3, r3, sl
 800eacc:	d16c      	bne.n	800eba8 <_strtod_l+0x8b8>
 800eace:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d168      	bne.n	800eba8 <_strtod_l+0x8b8>
 800ead6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eada:	0d1b      	lsrs	r3, r3, #20
 800eadc:	051b      	lsls	r3, r3, #20
 800eade:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eae2:	d961      	bls.n	800eba8 <_strtod_l+0x8b8>
 800eae4:	6963      	ldr	r3, [r4, #20]
 800eae6:	b913      	cbnz	r3, 800eaee <_strtod_l+0x7fe>
 800eae8:	6923      	ldr	r3, [r4, #16]
 800eaea:	2b01      	cmp	r3, #1
 800eaec:	dd5c      	ble.n	800eba8 <_strtod_l+0x8b8>
 800eaee:	4621      	mov	r1, r4
 800eaf0:	2201      	movs	r2, #1
 800eaf2:	9805      	ldr	r0, [sp, #20]
 800eaf4:	f002 ff44 	bl	8011980 <__lshift>
 800eaf8:	4641      	mov	r1, r8
 800eafa:	4604      	mov	r4, r0
 800eafc:	f002 ffac 	bl	8011a58 <__mcmp>
 800eb00:	2800      	cmp	r0, #0
 800eb02:	dd51      	ble.n	800eba8 <_strtod_l+0x8b8>
 800eb04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eb08:	9a08      	ldr	r2, [sp, #32]
 800eb0a:	0d1b      	lsrs	r3, r3, #20
 800eb0c:	051b      	lsls	r3, r3, #20
 800eb0e:	2a00      	cmp	r2, #0
 800eb10:	d06b      	beq.n	800ebea <_strtod_l+0x8fa>
 800eb12:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eb16:	d868      	bhi.n	800ebea <_strtod_l+0x8fa>
 800eb18:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800eb1c:	f67f ae9d 	bls.w	800e85a <_strtod_l+0x56a>
 800eb20:	4b0a      	ldr	r3, [pc, #40]	@ (800eb4c <_strtod_l+0x85c>)
 800eb22:	4650      	mov	r0, sl
 800eb24:	4659      	mov	r1, fp
 800eb26:	2200      	movs	r2, #0
 800eb28:	f7f1 fd8e 	bl	8000648 <__aeabi_dmul>
 800eb2c:	4b08      	ldr	r3, [pc, #32]	@ (800eb50 <_strtod_l+0x860>)
 800eb2e:	400b      	ands	r3, r1
 800eb30:	4682      	mov	sl, r0
 800eb32:	468b      	mov	fp, r1
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	f47f ae05 	bne.w	800e744 <_strtod_l+0x454>
 800eb3a:	9a05      	ldr	r2, [sp, #20]
 800eb3c:	2322      	movs	r3, #34	@ 0x22
 800eb3e:	6013      	str	r3, [r2, #0]
 800eb40:	e600      	b.n	800e744 <_strtod_l+0x454>
 800eb42:	bf00      	nop
 800eb44:	08013980 	.word	0x08013980
 800eb48:	fffffc02 	.word	0xfffffc02
 800eb4c:	39500000 	.word	0x39500000
 800eb50:	7ff00000 	.word	0x7ff00000
 800eb54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800eb58:	d165      	bne.n	800ec26 <_strtod_l+0x936>
 800eb5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800eb5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eb60:	b35a      	cbz	r2, 800ebba <_strtod_l+0x8ca>
 800eb62:	4a9f      	ldr	r2, [pc, #636]	@ (800ede0 <_strtod_l+0xaf0>)
 800eb64:	4293      	cmp	r3, r2
 800eb66:	d12b      	bne.n	800ebc0 <_strtod_l+0x8d0>
 800eb68:	9b08      	ldr	r3, [sp, #32]
 800eb6a:	4651      	mov	r1, sl
 800eb6c:	b303      	cbz	r3, 800ebb0 <_strtod_l+0x8c0>
 800eb6e:	4b9d      	ldr	r3, [pc, #628]	@ (800ede4 <_strtod_l+0xaf4>)
 800eb70:	465a      	mov	r2, fp
 800eb72:	4013      	ands	r3, r2
 800eb74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800eb78:	f04f 32ff 	mov.w	r2, #4294967295
 800eb7c:	d81b      	bhi.n	800ebb6 <_strtod_l+0x8c6>
 800eb7e:	0d1b      	lsrs	r3, r3, #20
 800eb80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eb84:	fa02 f303 	lsl.w	r3, r2, r3
 800eb88:	4299      	cmp	r1, r3
 800eb8a:	d119      	bne.n	800ebc0 <_strtod_l+0x8d0>
 800eb8c:	4b96      	ldr	r3, [pc, #600]	@ (800ede8 <_strtod_l+0xaf8>)
 800eb8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d102      	bne.n	800eb9a <_strtod_l+0x8aa>
 800eb94:	3101      	adds	r1, #1
 800eb96:	f43f adca 	beq.w	800e72e <_strtod_l+0x43e>
 800eb9a:	4b92      	ldr	r3, [pc, #584]	@ (800ede4 <_strtod_l+0xaf4>)
 800eb9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb9e:	401a      	ands	r2, r3
 800eba0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800eba4:	f04f 0a00 	mov.w	sl, #0
 800eba8:	9b08      	ldr	r3, [sp, #32]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d1b8      	bne.n	800eb20 <_strtod_l+0x830>
 800ebae:	e5c9      	b.n	800e744 <_strtod_l+0x454>
 800ebb0:	f04f 33ff 	mov.w	r3, #4294967295
 800ebb4:	e7e8      	b.n	800eb88 <_strtod_l+0x898>
 800ebb6:	4613      	mov	r3, r2
 800ebb8:	e7e6      	b.n	800eb88 <_strtod_l+0x898>
 800ebba:	ea53 030a 	orrs.w	r3, r3, sl
 800ebbe:	d0a1      	beq.n	800eb04 <_strtod_l+0x814>
 800ebc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ebc2:	b1db      	cbz	r3, 800ebfc <_strtod_l+0x90c>
 800ebc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ebc6:	4213      	tst	r3, r2
 800ebc8:	d0ee      	beq.n	800eba8 <_strtod_l+0x8b8>
 800ebca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebcc:	9a08      	ldr	r2, [sp, #32]
 800ebce:	4650      	mov	r0, sl
 800ebd0:	4659      	mov	r1, fp
 800ebd2:	b1bb      	cbz	r3, 800ec04 <_strtod_l+0x914>
 800ebd4:	f7ff fb6d 	bl	800e2b2 <sulp>
 800ebd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ebdc:	ec53 2b10 	vmov	r2, r3, d0
 800ebe0:	f7f1 fb7c 	bl	80002dc <__adddf3>
 800ebe4:	4682      	mov	sl, r0
 800ebe6:	468b      	mov	fp, r1
 800ebe8:	e7de      	b.n	800eba8 <_strtod_l+0x8b8>
 800ebea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ebee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ebf2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ebf6:	f04f 3aff 	mov.w	sl, #4294967295
 800ebfa:	e7d5      	b.n	800eba8 <_strtod_l+0x8b8>
 800ebfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ebfe:	ea13 0f0a 	tst.w	r3, sl
 800ec02:	e7e1      	b.n	800ebc8 <_strtod_l+0x8d8>
 800ec04:	f7ff fb55 	bl	800e2b2 <sulp>
 800ec08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ec0c:	ec53 2b10 	vmov	r2, r3, d0
 800ec10:	f7f1 fb62 	bl	80002d8 <__aeabi_dsub>
 800ec14:	2200      	movs	r2, #0
 800ec16:	2300      	movs	r3, #0
 800ec18:	4682      	mov	sl, r0
 800ec1a:	468b      	mov	fp, r1
 800ec1c:	f7f1 ff7c 	bl	8000b18 <__aeabi_dcmpeq>
 800ec20:	2800      	cmp	r0, #0
 800ec22:	d0c1      	beq.n	800eba8 <_strtod_l+0x8b8>
 800ec24:	e619      	b.n	800e85a <_strtod_l+0x56a>
 800ec26:	4641      	mov	r1, r8
 800ec28:	4620      	mov	r0, r4
 800ec2a:	f003 f88d 	bl	8011d48 <__ratio>
 800ec2e:	ec57 6b10 	vmov	r6, r7, d0
 800ec32:	2200      	movs	r2, #0
 800ec34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ec38:	4630      	mov	r0, r6
 800ec3a:	4639      	mov	r1, r7
 800ec3c:	f7f1 ff80 	bl	8000b40 <__aeabi_dcmple>
 800ec40:	2800      	cmp	r0, #0
 800ec42:	d06f      	beq.n	800ed24 <_strtod_l+0xa34>
 800ec44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d17a      	bne.n	800ed40 <_strtod_l+0xa50>
 800ec4a:	f1ba 0f00 	cmp.w	sl, #0
 800ec4e:	d158      	bne.n	800ed02 <_strtod_l+0xa12>
 800ec50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d15a      	bne.n	800ed10 <_strtod_l+0xa20>
 800ec5a:	4b64      	ldr	r3, [pc, #400]	@ (800edec <_strtod_l+0xafc>)
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	4630      	mov	r0, r6
 800ec60:	4639      	mov	r1, r7
 800ec62:	f7f1 ff63 	bl	8000b2c <__aeabi_dcmplt>
 800ec66:	2800      	cmp	r0, #0
 800ec68:	d159      	bne.n	800ed1e <_strtod_l+0xa2e>
 800ec6a:	4630      	mov	r0, r6
 800ec6c:	4639      	mov	r1, r7
 800ec6e:	4b60      	ldr	r3, [pc, #384]	@ (800edf0 <_strtod_l+0xb00>)
 800ec70:	2200      	movs	r2, #0
 800ec72:	f7f1 fce9 	bl	8000648 <__aeabi_dmul>
 800ec76:	4606      	mov	r6, r0
 800ec78:	460f      	mov	r7, r1
 800ec7a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ec7e:	9606      	str	r6, [sp, #24]
 800ec80:	9307      	str	r3, [sp, #28]
 800ec82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec86:	4d57      	ldr	r5, [pc, #348]	@ (800ede4 <_strtod_l+0xaf4>)
 800ec88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ec8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec8e:	401d      	ands	r5, r3
 800ec90:	4b58      	ldr	r3, [pc, #352]	@ (800edf4 <_strtod_l+0xb04>)
 800ec92:	429d      	cmp	r5, r3
 800ec94:	f040 80b2 	bne.w	800edfc <_strtod_l+0xb0c>
 800ec98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ec9e:	ec4b ab10 	vmov	d0, sl, fp
 800eca2:	f002 ff89 	bl	8011bb8 <__ulp>
 800eca6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ecaa:	ec51 0b10 	vmov	r0, r1, d0
 800ecae:	f7f1 fccb 	bl	8000648 <__aeabi_dmul>
 800ecb2:	4652      	mov	r2, sl
 800ecb4:	465b      	mov	r3, fp
 800ecb6:	f7f1 fb11 	bl	80002dc <__adddf3>
 800ecba:	460b      	mov	r3, r1
 800ecbc:	4949      	ldr	r1, [pc, #292]	@ (800ede4 <_strtod_l+0xaf4>)
 800ecbe:	4a4e      	ldr	r2, [pc, #312]	@ (800edf8 <_strtod_l+0xb08>)
 800ecc0:	4019      	ands	r1, r3
 800ecc2:	4291      	cmp	r1, r2
 800ecc4:	4682      	mov	sl, r0
 800ecc6:	d942      	bls.n	800ed4e <_strtod_l+0xa5e>
 800ecc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ecca:	4b47      	ldr	r3, [pc, #284]	@ (800ede8 <_strtod_l+0xaf8>)
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d103      	bne.n	800ecd8 <_strtod_l+0x9e8>
 800ecd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ecd2:	3301      	adds	r3, #1
 800ecd4:	f43f ad2b 	beq.w	800e72e <_strtod_l+0x43e>
 800ecd8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ede8 <_strtod_l+0xaf8>
 800ecdc:	f04f 3aff 	mov.w	sl, #4294967295
 800ece0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ece2:	9805      	ldr	r0, [sp, #20]
 800ece4:	f002 fc34 	bl	8011550 <_Bfree>
 800ece8:	9805      	ldr	r0, [sp, #20]
 800ecea:	4649      	mov	r1, r9
 800ecec:	f002 fc30 	bl	8011550 <_Bfree>
 800ecf0:	9805      	ldr	r0, [sp, #20]
 800ecf2:	4641      	mov	r1, r8
 800ecf4:	f002 fc2c 	bl	8011550 <_Bfree>
 800ecf8:	9805      	ldr	r0, [sp, #20]
 800ecfa:	4621      	mov	r1, r4
 800ecfc:	f002 fc28 	bl	8011550 <_Bfree>
 800ed00:	e618      	b.n	800e934 <_strtod_l+0x644>
 800ed02:	f1ba 0f01 	cmp.w	sl, #1
 800ed06:	d103      	bne.n	800ed10 <_strtod_l+0xa20>
 800ed08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	f43f ada5 	beq.w	800e85a <_strtod_l+0x56a>
 800ed10:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800edc0 <_strtod_l+0xad0>
 800ed14:	4f35      	ldr	r7, [pc, #212]	@ (800edec <_strtod_l+0xafc>)
 800ed16:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ed1a:	2600      	movs	r6, #0
 800ed1c:	e7b1      	b.n	800ec82 <_strtod_l+0x992>
 800ed1e:	4f34      	ldr	r7, [pc, #208]	@ (800edf0 <_strtod_l+0xb00>)
 800ed20:	2600      	movs	r6, #0
 800ed22:	e7aa      	b.n	800ec7a <_strtod_l+0x98a>
 800ed24:	4b32      	ldr	r3, [pc, #200]	@ (800edf0 <_strtod_l+0xb00>)
 800ed26:	4630      	mov	r0, r6
 800ed28:	4639      	mov	r1, r7
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	f7f1 fc8c 	bl	8000648 <__aeabi_dmul>
 800ed30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed32:	4606      	mov	r6, r0
 800ed34:	460f      	mov	r7, r1
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d09f      	beq.n	800ec7a <_strtod_l+0x98a>
 800ed3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ed3e:	e7a0      	b.n	800ec82 <_strtod_l+0x992>
 800ed40:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800edc8 <_strtod_l+0xad8>
 800ed44:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ed48:	ec57 6b17 	vmov	r6, r7, d7
 800ed4c:	e799      	b.n	800ec82 <_strtod_l+0x992>
 800ed4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ed52:	9b08      	ldr	r3, [sp, #32]
 800ed54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d1c1      	bne.n	800ece0 <_strtod_l+0x9f0>
 800ed5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed60:	0d1b      	lsrs	r3, r3, #20
 800ed62:	051b      	lsls	r3, r3, #20
 800ed64:	429d      	cmp	r5, r3
 800ed66:	d1bb      	bne.n	800ece0 <_strtod_l+0x9f0>
 800ed68:	4630      	mov	r0, r6
 800ed6a:	4639      	mov	r1, r7
 800ed6c:	f7f1 ffcc 	bl	8000d08 <__aeabi_d2lz>
 800ed70:	f7f1 fc3c 	bl	80005ec <__aeabi_l2d>
 800ed74:	4602      	mov	r2, r0
 800ed76:	460b      	mov	r3, r1
 800ed78:	4630      	mov	r0, r6
 800ed7a:	4639      	mov	r1, r7
 800ed7c:	f7f1 faac 	bl	80002d8 <__aeabi_dsub>
 800ed80:	460b      	mov	r3, r1
 800ed82:	4602      	mov	r2, r0
 800ed84:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ed88:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ed8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed8e:	ea46 060a 	orr.w	r6, r6, sl
 800ed92:	431e      	orrs	r6, r3
 800ed94:	d06f      	beq.n	800ee76 <_strtod_l+0xb86>
 800ed96:	a30e      	add	r3, pc, #56	@ (adr r3, 800edd0 <_strtod_l+0xae0>)
 800ed98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed9c:	f7f1 fec6 	bl	8000b2c <__aeabi_dcmplt>
 800eda0:	2800      	cmp	r0, #0
 800eda2:	f47f accf 	bne.w	800e744 <_strtod_l+0x454>
 800eda6:	a30c      	add	r3, pc, #48	@ (adr r3, 800edd8 <_strtod_l+0xae8>)
 800eda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800edb0:	f7f1 feda 	bl	8000b68 <__aeabi_dcmpgt>
 800edb4:	2800      	cmp	r0, #0
 800edb6:	d093      	beq.n	800ece0 <_strtod_l+0x9f0>
 800edb8:	e4c4      	b.n	800e744 <_strtod_l+0x454>
 800edba:	bf00      	nop
 800edbc:	f3af 8000 	nop.w
 800edc0:	00000000 	.word	0x00000000
 800edc4:	bff00000 	.word	0xbff00000
 800edc8:	00000000 	.word	0x00000000
 800edcc:	3ff00000 	.word	0x3ff00000
 800edd0:	94a03595 	.word	0x94a03595
 800edd4:	3fdfffff 	.word	0x3fdfffff
 800edd8:	35afe535 	.word	0x35afe535
 800eddc:	3fe00000 	.word	0x3fe00000
 800ede0:	000fffff 	.word	0x000fffff
 800ede4:	7ff00000 	.word	0x7ff00000
 800ede8:	7fefffff 	.word	0x7fefffff
 800edec:	3ff00000 	.word	0x3ff00000
 800edf0:	3fe00000 	.word	0x3fe00000
 800edf4:	7fe00000 	.word	0x7fe00000
 800edf8:	7c9fffff 	.word	0x7c9fffff
 800edfc:	9b08      	ldr	r3, [sp, #32]
 800edfe:	b323      	cbz	r3, 800ee4a <_strtod_l+0xb5a>
 800ee00:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ee04:	d821      	bhi.n	800ee4a <_strtod_l+0xb5a>
 800ee06:	a328      	add	r3, pc, #160	@ (adr r3, 800eea8 <_strtod_l+0xbb8>)
 800ee08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee0c:	4630      	mov	r0, r6
 800ee0e:	4639      	mov	r1, r7
 800ee10:	f7f1 fe96 	bl	8000b40 <__aeabi_dcmple>
 800ee14:	b1a0      	cbz	r0, 800ee40 <_strtod_l+0xb50>
 800ee16:	4639      	mov	r1, r7
 800ee18:	4630      	mov	r0, r6
 800ee1a:	f7f1 feed 	bl	8000bf8 <__aeabi_d2uiz>
 800ee1e:	2801      	cmp	r0, #1
 800ee20:	bf38      	it	cc
 800ee22:	2001      	movcc	r0, #1
 800ee24:	f7f1 fb96 	bl	8000554 <__aeabi_ui2d>
 800ee28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee2a:	4606      	mov	r6, r0
 800ee2c:	460f      	mov	r7, r1
 800ee2e:	b9fb      	cbnz	r3, 800ee70 <_strtod_l+0xb80>
 800ee30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ee34:	9014      	str	r0, [sp, #80]	@ 0x50
 800ee36:	9315      	str	r3, [sp, #84]	@ 0x54
 800ee38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ee3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ee40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ee42:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ee46:	1b5b      	subs	r3, r3, r5
 800ee48:	9311      	str	r3, [sp, #68]	@ 0x44
 800ee4a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ee4e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ee52:	f002 feb1 	bl	8011bb8 <__ulp>
 800ee56:	4650      	mov	r0, sl
 800ee58:	ec53 2b10 	vmov	r2, r3, d0
 800ee5c:	4659      	mov	r1, fp
 800ee5e:	f7f1 fbf3 	bl	8000648 <__aeabi_dmul>
 800ee62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ee66:	f7f1 fa39 	bl	80002dc <__adddf3>
 800ee6a:	4682      	mov	sl, r0
 800ee6c:	468b      	mov	fp, r1
 800ee6e:	e770      	b.n	800ed52 <_strtod_l+0xa62>
 800ee70:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ee74:	e7e0      	b.n	800ee38 <_strtod_l+0xb48>
 800ee76:	a30e      	add	r3, pc, #56	@ (adr r3, 800eeb0 <_strtod_l+0xbc0>)
 800ee78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee7c:	f7f1 fe56 	bl	8000b2c <__aeabi_dcmplt>
 800ee80:	e798      	b.n	800edb4 <_strtod_l+0xac4>
 800ee82:	2300      	movs	r3, #0
 800ee84:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ee88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee8a:	6013      	str	r3, [r2, #0]
 800ee8c:	f7ff ba6d 	b.w	800e36a <_strtod_l+0x7a>
 800ee90:	2a65      	cmp	r2, #101	@ 0x65
 800ee92:	f43f ab66 	beq.w	800e562 <_strtod_l+0x272>
 800ee96:	2a45      	cmp	r2, #69	@ 0x45
 800ee98:	f43f ab63 	beq.w	800e562 <_strtod_l+0x272>
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	f7ff bb9e 	b.w	800e5de <_strtod_l+0x2ee>
 800eea2:	bf00      	nop
 800eea4:	f3af 8000 	nop.w
 800eea8:	ffc00000 	.word	0xffc00000
 800eeac:	41dfffff 	.word	0x41dfffff
 800eeb0:	94a03595 	.word	0x94a03595
 800eeb4:	3fcfffff 	.word	0x3fcfffff

0800eeb8 <_strtod_r>:
 800eeb8:	4b01      	ldr	r3, [pc, #4]	@ (800eec0 <_strtod_r+0x8>)
 800eeba:	f7ff ba19 	b.w	800e2f0 <_strtod_l>
 800eebe:	bf00      	nop
 800eec0:	200000b0 	.word	0x200000b0

0800eec4 <strtod>:
 800eec4:	460a      	mov	r2, r1
 800eec6:	4601      	mov	r1, r0
 800eec8:	4802      	ldr	r0, [pc, #8]	@ (800eed4 <strtod+0x10>)
 800eeca:	4b03      	ldr	r3, [pc, #12]	@ (800eed8 <strtod+0x14>)
 800eecc:	6800      	ldr	r0, [r0, #0]
 800eece:	f7ff ba0f 	b.w	800e2f0 <_strtod_l>
 800eed2:	bf00      	nop
 800eed4:	2000021c 	.word	0x2000021c
 800eed8:	200000b0 	.word	0x200000b0

0800eedc <__cvt>:
 800eedc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eee0:	ec57 6b10 	vmov	r6, r7, d0
 800eee4:	2f00      	cmp	r7, #0
 800eee6:	460c      	mov	r4, r1
 800eee8:	4619      	mov	r1, r3
 800eeea:	463b      	mov	r3, r7
 800eeec:	bfbb      	ittet	lt
 800eeee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800eef2:	461f      	movlt	r7, r3
 800eef4:	2300      	movge	r3, #0
 800eef6:	232d      	movlt	r3, #45	@ 0x2d
 800eef8:	700b      	strb	r3, [r1, #0]
 800eefa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eefc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ef00:	4691      	mov	r9, r2
 800ef02:	f023 0820 	bic.w	r8, r3, #32
 800ef06:	bfbc      	itt	lt
 800ef08:	4632      	movlt	r2, r6
 800ef0a:	4616      	movlt	r6, r2
 800ef0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ef10:	d005      	beq.n	800ef1e <__cvt+0x42>
 800ef12:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ef16:	d100      	bne.n	800ef1a <__cvt+0x3e>
 800ef18:	3401      	adds	r4, #1
 800ef1a:	2102      	movs	r1, #2
 800ef1c:	e000      	b.n	800ef20 <__cvt+0x44>
 800ef1e:	2103      	movs	r1, #3
 800ef20:	ab03      	add	r3, sp, #12
 800ef22:	9301      	str	r3, [sp, #4]
 800ef24:	ab02      	add	r3, sp, #8
 800ef26:	9300      	str	r3, [sp, #0]
 800ef28:	ec47 6b10 	vmov	d0, r6, r7
 800ef2c:	4653      	mov	r3, sl
 800ef2e:	4622      	mov	r2, r4
 800ef30:	f001 f8be 	bl	80100b0 <_dtoa_r>
 800ef34:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ef38:	4605      	mov	r5, r0
 800ef3a:	d119      	bne.n	800ef70 <__cvt+0x94>
 800ef3c:	f019 0f01 	tst.w	r9, #1
 800ef40:	d00e      	beq.n	800ef60 <__cvt+0x84>
 800ef42:	eb00 0904 	add.w	r9, r0, r4
 800ef46:	2200      	movs	r2, #0
 800ef48:	2300      	movs	r3, #0
 800ef4a:	4630      	mov	r0, r6
 800ef4c:	4639      	mov	r1, r7
 800ef4e:	f7f1 fde3 	bl	8000b18 <__aeabi_dcmpeq>
 800ef52:	b108      	cbz	r0, 800ef58 <__cvt+0x7c>
 800ef54:	f8cd 900c 	str.w	r9, [sp, #12]
 800ef58:	2230      	movs	r2, #48	@ 0x30
 800ef5a:	9b03      	ldr	r3, [sp, #12]
 800ef5c:	454b      	cmp	r3, r9
 800ef5e:	d31e      	bcc.n	800ef9e <__cvt+0xc2>
 800ef60:	9b03      	ldr	r3, [sp, #12]
 800ef62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef64:	1b5b      	subs	r3, r3, r5
 800ef66:	4628      	mov	r0, r5
 800ef68:	6013      	str	r3, [r2, #0]
 800ef6a:	b004      	add	sp, #16
 800ef6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ef74:	eb00 0904 	add.w	r9, r0, r4
 800ef78:	d1e5      	bne.n	800ef46 <__cvt+0x6a>
 800ef7a:	7803      	ldrb	r3, [r0, #0]
 800ef7c:	2b30      	cmp	r3, #48	@ 0x30
 800ef7e:	d10a      	bne.n	800ef96 <__cvt+0xba>
 800ef80:	2200      	movs	r2, #0
 800ef82:	2300      	movs	r3, #0
 800ef84:	4630      	mov	r0, r6
 800ef86:	4639      	mov	r1, r7
 800ef88:	f7f1 fdc6 	bl	8000b18 <__aeabi_dcmpeq>
 800ef8c:	b918      	cbnz	r0, 800ef96 <__cvt+0xba>
 800ef8e:	f1c4 0401 	rsb	r4, r4, #1
 800ef92:	f8ca 4000 	str.w	r4, [sl]
 800ef96:	f8da 3000 	ldr.w	r3, [sl]
 800ef9a:	4499      	add	r9, r3
 800ef9c:	e7d3      	b.n	800ef46 <__cvt+0x6a>
 800ef9e:	1c59      	adds	r1, r3, #1
 800efa0:	9103      	str	r1, [sp, #12]
 800efa2:	701a      	strb	r2, [r3, #0]
 800efa4:	e7d9      	b.n	800ef5a <__cvt+0x7e>

0800efa6 <__exponent>:
 800efa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800efa8:	2900      	cmp	r1, #0
 800efaa:	bfba      	itte	lt
 800efac:	4249      	neglt	r1, r1
 800efae:	232d      	movlt	r3, #45	@ 0x2d
 800efb0:	232b      	movge	r3, #43	@ 0x2b
 800efb2:	2909      	cmp	r1, #9
 800efb4:	7002      	strb	r2, [r0, #0]
 800efb6:	7043      	strb	r3, [r0, #1]
 800efb8:	dd29      	ble.n	800f00e <__exponent+0x68>
 800efba:	f10d 0307 	add.w	r3, sp, #7
 800efbe:	461d      	mov	r5, r3
 800efc0:	270a      	movs	r7, #10
 800efc2:	461a      	mov	r2, r3
 800efc4:	fbb1 f6f7 	udiv	r6, r1, r7
 800efc8:	fb07 1416 	mls	r4, r7, r6, r1
 800efcc:	3430      	adds	r4, #48	@ 0x30
 800efce:	f802 4c01 	strb.w	r4, [r2, #-1]
 800efd2:	460c      	mov	r4, r1
 800efd4:	2c63      	cmp	r4, #99	@ 0x63
 800efd6:	f103 33ff 	add.w	r3, r3, #4294967295
 800efda:	4631      	mov	r1, r6
 800efdc:	dcf1      	bgt.n	800efc2 <__exponent+0x1c>
 800efde:	3130      	adds	r1, #48	@ 0x30
 800efe0:	1e94      	subs	r4, r2, #2
 800efe2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800efe6:	1c41      	adds	r1, r0, #1
 800efe8:	4623      	mov	r3, r4
 800efea:	42ab      	cmp	r3, r5
 800efec:	d30a      	bcc.n	800f004 <__exponent+0x5e>
 800efee:	f10d 0309 	add.w	r3, sp, #9
 800eff2:	1a9b      	subs	r3, r3, r2
 800eff4:	42ac      	cmp	r4, r5
 800eff6:	bf88      	it	hi
 800eff8:	2300      	movhi	r3, #0
 800effa:	3302      	adds	r3, #2
 800effc:	4403      	add	r3, r0
 800effe:	1a18      	subs	r0, r3, r0
 800f000:	b003      	add	sp, #12
 800f002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f004:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f008:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f00c:	e7ed      	b.n	800efea <__exponent+0x44>
 800f00e:	2330      	movs	r3, #48	@ 0x30
 800f010:	3130      	adds	r1, #48	@ 0x30
 800f012:	7083      	strb	r3, [r0, #2]
 800f014:	70c1      	strb	r1, [r0, #3]
 800f016:	1d03      	adds	r3, r0, #4
 800f018:	e7f1      	b.n	800effe <__exponent+0x58>
	...

0800f01c <_printf_float>:
 800f01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f020:	b08d      	sub	sp, #52	@ 0x34
 800f022:	460c      	mov	r4, r1
 800f024:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f028:	4616      	mov	r6, r2
 800f02a:	461f      	mov	r7, r3
 800f02c:	4605      	mov	r5, r0
 800f02e:	f000 ff21 	bl	800fe74 <_localeconv_r>
 800f032:	6803      	ldr	r3, [r0, #0]
 800f034:	9304      	str	r3, [sp, #16]
 800f036:	4618      	mov	r0, r3
 800f038:	f7f1 f942 	bl	80002c0 <strlen>
 800f03c:	2300      	movs	r3, #0
 800f03e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f040:	f8d8 3000 	ldr.w	r3, [r8]
 800f044:	9005      	str	r0, [sp, #20]
 800f046:	3307      	adds	r3, #7
 800f048:	f023 0307 	bic.w	r3, r3, #7
 800f04c:	f103 0208 	add.w	r2, r3, #8
 800f050:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f054:	f8d4 b000 	ldr.w	fp, [r4]
 800f058:	f8c8 2000 	str.w	r2, [r8]
 800f05c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f060:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f064:	9307      	str	r3, [sp, #28]
 800f066:	f8cd 8018 	str.w	r8, [sp, #24]
 800f06a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f06e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f072:	4b9c      	ldr	r3, [pc, #624]	@ (800f2e4 <_printf_float+0x2c8>)
 800f074:	f04f 32ff 	mov.w	r2, #4294967295
 800f078:	f7f1 fd80 	bl	8000b7c <__aeabi_dcmpun>
 800f07c:	bb70      	cbnz	r0, 800f0dc <_printf_float+0xc0>
 800f07e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f082:	4b98      	ldr	r3, [pc, #608]	@ (800f2e4 <_printf_float+0x2c8>)
 800f084:	f04f 32ff 	mov.w	r2, #4294967295
 800f088:	f7f1 fd5a 	bl	8000b40 <__aeabi_dcmple>
 800f08c:	bb30      	cbnz	r0, 800f0dc <_printf_float+0xc0>
 800f08e:	2200      	movs	r2, #0
 800f090:	2300      	movs	r3, #0
 800f092:	4640      	mov	r0, r8
 800f094:	4649      	mov	r1, r9
 800f096:	f7f1 fd49 	bl	8000b2c <__aeabi_dcmplt>
 800f09a:	b110      	cbz	r0, 800f0a2 <_printf_float+0x86>
 800f09c:	232d      	movs	r3, #45	@ 0x2d
 800f09e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f0a2:	4a91      	ldr	r2, [pc, #580]	@ (800f2e8 <_printf_float+0x2cc>)
 800f0a4:	4b91      	ldr	r3, [pc, #580]	@ (800f2ec <_printf_float+0x2d0>)
 800f0a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f0aa:	bf94      	ite	ls
 800f0ac:	4690      	movls	r8, r2
 800f0ae:	4698      	movhi	r8, r3
 800f0b0:	2303      	movs	r3, #3
 800f0b2:	6123      	str	r3, [r4, #16]
 800f0b4:	f02b 0304 	bic.w	r3, fp, #4
 800f0b8:	6023      	str	r3, [r4, #0]
 800f0ba:	f04f 0900 	mov.w	r9, #0
 800f0be:	9700      	str	r7, [sp, #0]
 800f0c0:	4633      	mov	r3, r6
 800f0c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f0c4:	4621      	mov	r1, r4
 800f0c6:	4628      	mov	r0, r5
 800f0c8:	f000 f9d2 	bl	800f470 <_printf_common>
 800f0cc:	3001      	adds	r0, #1
 800f0ce:	f040 808d 	bne.w	800f1ec <_printf_float+0x1d0>
 800f0d2:	f04f 30ff 	mov.w	r0, #4294967295
 800f0d6:	b00d      	add	sp, #52	@ 0x34
 800f0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0dc:	4642      	mov	r2, r8
 800f0de:	464b      	mov	r3, r9
 800f0e0:	4640      	mov	r0, r8
 800f0e2:	4649      	mov	r1, r9
 800f0e4:	f7f1 fd4a 	bl	8000b7c <__aeabi_dcmpun>
 800f0e8:	b140      	cbz	r0, 800f0fc <_printf_float+0xe0>
 800f0ea:	464b      	mov	r3, r9
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	bfbc      	itt	lt
 800f0f0:	232d      	movlt	r3, #45	@ 0x2d
 800f0f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f0f6:	4a7e      	ldr	r2, [pc, #504]	@ (800f2f0 <_printf_float+0x2d4>)
 800f0f8:	4b7e      	ldr	r3, [pc, #504]	@ (800f2f4 <_printf_float+0x2d8>)
 800f0fa:	e7d4      	b.n	800f0a6 <_printf_float+0x8a>
 800f0fc:	6863      	ldr	r3, [r4, #4]
 800f0fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f102:	9206      	str	r2, [sp, #24]
 800f104:	1c5a      	adds	r2, r3, #1
 800f106:	d13b      	bne.n	800f180 <_printf_float+0x164>
 800f108:	2306      	movs	r3, #6
 800f10a:	6063      	str	r3, [r4, #4]
 800f10c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f110:	2300      	movs	r3, #0
 800f112:	6022      	str	r2, [r4, #0]
 800f114:	9303      	str	r3, [sp, #12]
 800f116:	ab0a      	add	r3, sp, #40	@ 0x28
 800f118:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f11c:	ab09      	add	r3, sp, #36	@ 0x24
 800f11e:	9300      	str	r3, [sp, #0]
 800f120:	6861      	ldr	r1, [r4, #4]
 800f122:	ec49 8b10 	vmov	d0, r8, r9
 800f126:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f12a:	4628      	mov	r0, r5
 800f12c:	f7ff fed6 	bl	800eedc <__cvt>
 800f130:	9b06      	ldr	r3, [sp, #24]
 800f132:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f134:	2b47      	cmp	r3, #71	@ 0x47
 800f136:	4680      	mov	r8, r0
 800f138:	d129      	bne.n	800f18e <_printf_float+0x172>
 800f13a:	1cc8      	adds	r0, r1, #3
 800f13c:	db02      	blt.n	800f144 <_printf_float+0x128>
 800f13e:	6863      	ldr	r3, [r4, #4]
 800f140:	4299      	cmp	r1, r3
 800f142:	dd41      	ble.n	800f1c8 <_printf_float+0x1ac>
 800f144:	f1aa 0a02 	sub.w	sl, sl, #2
 800f148:	fa5f fa8a 	uxtb.w	sl, sl
 800f14c:	3901      	subs	r1, #1
 800f14e:	4652      	mov	r2, sl
 800f150:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f154:	9109      	str	r1, [sp, #36]	@ 0x24
 800f156:	f7ff ff26 	bl	800efa6 <__exponent>
 800f15a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f15c:	1813      	adds	r3, r2, r0
 800f15e:	2a01      	cmp	r2, #1
 800f160:	4681      	mov	r9, r0
 800f162:	6123      	str	r3, [r4, #16]
 800f164:	dc02      	bgt.n	800f16c <_printf_float+0x150>
 800f166:	6822      	ldr	r2, [r4, #0]
 800f168:	07d2      	lsls	r2, r2, #31
 800f16a:	d501      	bpl.n	800f170 <_printf_float+0x154>
 800f16c:	3301      	adds	r3, #1
 800f16e:	6123      	str	r3, [r4, #16]
 800f170:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f174:	2b00      	cmp	r3, #0
 800f176:	d0a2      	beq.n	800f0be <_printf_float+0xa2>
 800f178:	232d      	movs	r3, #45	@ 0x2d
 800f17a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f17e:	e79e      	b.n	800f0be <_printf_float+0xa2>
 800f180:	9a06      	ldr	r2, [sp, #24]
 800f182:	2a47      	cmp	r2, #71	@ 0x47
 800f184:	d1c2      	bne.n	800f10c <_printf_float+0xf0>
 800f186:	2b00      	cmp	r3, #0
 800f188:	d1c0      	bne.n	800f10c <_printf_float+0xf0>
 800f18a:	2301      	movs	r3, #1
 800f18c:	e7bd      	b.n	800f10a <_printf_float+0xee>
 800f18e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f192:	d9db      	bls.n	800f14c <_printf_float+0x130>
 800f194:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f198:	d118      	bne.n	800f1cc <_printf_float+0x1b0>
 800f19a:	2900      	cmp	r1, #0
 800f19c:	6863      	ldr	r3, [r4, #4]
 800f19e:	dd0b      	ble.n	800f1b8 <_printf_float+0x19c>
 800f1a0:	6121      	str	r1, [r4, #16]
 800f1a2:	b913      	cbnz	r3, 800f1aa <_printf_float+0x18e>
 800f1a4:	6822      	ldr	r2, [r4, #0]
 800f1a6:	07d0      	lsls	r0, r2, #31
 800f1a8:	d502      	bpl.n	800f1b0 <_printf_float+0x194>
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	440b      	add	r3, r1
 800f1ae:	6123      	str	r3, [r4, #16]
 800f1b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f1b2:	f04f 0900 	mov.w	r9, #0
 800f1b6:	e7db      	b.n	800f170 <_printf_float+0x154>
 800f1b8:	b913      	cbnz	r3, 800f1c0 <_printf_float+0x1a4>
 800f1ba:	6822      	ldr	r2, [r4, #0]
 800f1bc:	07d2      	lsls	r2, r2, #31
 800f1be:	d501      	bpl.n	800f1c4 <_printf_float+0x1a8>
 800f1c0:	3302      	adds	r3, #2
 800f1c2:	e7f4      	b.n	800f1ae <_printf_float+0x192>
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	e7f2      	b.n	800f1ae <_printf_float+0x192>
 800f1c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f1cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1ce:	4299      	cmp	r1, r3
 800f1d0:	db05      	blt.n	800f1de <_printf_float+0x1c2>
 800f1d2:	6823      	ldr	r3, [r4, #0]
 800f1d4:	6121      	str	r1, [r4, #16]
 800f1d6:	07d8      	lsls	r0, r3, #31
 800f1d8:	d5ea      	bpl.n	800f1b0 <_printf_float+0x194>
 800f1da:	1c4b      	adds	r3, r1, #1
 800f1dc:	e7e7      	b.n	800f1ae <_printf_float+0x192>
 800f1de:	2900      	cmp	r1, #0
 800f1e0:	bfd4      	ite	le
 800f1e2:	f1c1 0202 	rsble	r2, r1, #2
 800f1e6:	2201      	movgt	r2, #1
 800f1e8:	4413      	add	r3, r2
 800f1ea:	e7e0      	b.n	800f1ae <_printf_float+0x192>
 800f1ec:	6823      	ldr	r3, [r4, #0]
 800f1ee:	055a      	lsls	r2, r3, #21
 800f1f0:	d407      	bmi.n	800f202 <_printf_float+0x1e6>
 800f1f2:	6923      	ldr	r3, [r4, #16]
 800f1f4:	4642      	mov	r2, r8
 800f1f6:	4631      	mov	r1, r6
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	47b8      	blx	r7
 800f1fc:	3001      	adds	r0, #1
 800f1fe:	d12b      	bne.n	800f258 <_printf_float+0x23c>
 800f200:	e767      	b.n	800f0d2 <_printf_float+0xb6>
 800f202:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f206:	f240 80dd 	bls.w	800f3c4 <_printf_float+0x3a8>
 800f20a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f20e:	2200      	movs	r2, #0
 800f210:	2300      	movs	r3, #0
 800f212:	f7f1 fc81 	bl	8000b18 <__aeabi_dcmpeq>
 800f216:	2800      	cmp	r0, #0
 800f218:	d033      	beq.n	800f282 <_printf_float+0x266>
 800f21a:	4a37      	ldr	r2, [pc, #220]	@ (800f2f8 <_printf_float+0x2dc>)
 800f21c:	2301      	movs	r3, #1
 800f21e:	4631      	mov	r1, r6
 800f220:	4628      	mov	r0, r5
 800f222:	47b8      	blx	r7
 800f224:	3001      	adds	r0, #1
 800f226:	f43f af54 	beq.w	800f0d2 <_printf_float+0xb6>
 800f22a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f22e:	4543      	cmp	r3, r8
 800f230:	db02      	blt.n	800f238 <_printf_float+0x21c>
 800f232:	6823      	ldr	r3, [r4, #0]
 800f234:	07d8      	lsls	r0, r3, #31
 800f236:	d50f      	bpl.n	800f258 <_printf_float+0x23c>
 800f238:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f23c:	4631      	mov	r1, r6
 800f23e:	4628      	mov	r0, r5
 800f240:	47b8      	blx	r7
 800f242:	3001      	adds	r0, #1
 800f244:	f43f af45 	beq.w	800f0d2 <_printf_float+0xb6>
 800f248:	f04f 0900 	mov.w	r9, #0
 800f24c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f250:	f104 0a1a 	add.w	sl, r4, #26
 800f254:	45c8      	cmp	r8, r9
 800f256:	dc09      	bgt.n	800f26c <_printf_float+0x250>
 800f258:	6823      	ldr	r3, [r4, #0]
 800f25a:	079b      	lsls	r3, r3, #30
 800f25c:	f100 8103 	bmi.w	800f466 <_printf_float+0x44a>
 800f260:	68e0      	ldr	r0, [r4, #12]
 800f262:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f264:	4298      	cmp	r0, r3
 800f266:	bfb8      	it	lt
 800f268:	4618      	movlt	r0, r3
 800f26a:	e734      	b.n	800f0d6 <_printf_float+0xba>
 800f26c:	2301      	movs	r3, #1
 800f26e:	4652      	mov	r2, sl
 800f270:	4631      	mov	r1, r6
 800f272:	4628      	mov	r0, r5
 800f274:	47b8      	blx	r7
 800f276:	3001      	adds	r0, #1
 800f278:	f43f af2b 	beq.w	800f0d2 <_printf_float+0xb6>
 800f27c:	f109 0901 	add.w	r9, r9, #1
 800f280:	e7e8      	b.n	800f254 <_printf_float+0x238>
 800f282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f284:	2b00      	cmp	r3, #0
 800f286:	dc39      	bgt.n	800f2fc <_printf_float+0x2e0>
 800f288:	4a1b      	ldr	r2, [pc, #108]	@ (800f2f8 <_printf_float+0x2dc>)
 800f28a:	2301      	movs	r3, #1
 800f28c:	4631      	mov	r1, r6
 800f28e:	4628      	mov	r0, r5
 800f290:	47b8      	blx	r7
 800f292:	3001      	adds	r0, #1
 800f294:	f43f af1d 	beq.w	800f0d2 <_printf_float+0xb6>
 800f298:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f29c:	ea59 0303 	orrs.w	r3, r9, r3
 800f2a0:	d102      	bne.n	800f2a8 <_printf_float+0x28c>
 800f2a2:	6823      	ldr	r3, [r4, #0]
 800f2a4:	07d9      	lsls	r1, r3, #31
 800f2a6:	d5d7      	bpl.n	800f258 <_printf_float+0x23c>
 800f2a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2ac:	4631      	mov	r1, r6
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	47b8      	blx	r7
 800f2b2:	3001      	adds	r0, #1
 800f2b4:	f43f af0d 	beq.w	800f0d2 <_printf_float+0xb6>
 800f2b8:	f04f 0a00 	mov.w	sl, #0
 800f2bc:	f104 0b1a 	add.w	fp, r4, #26
 800f2c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2c2:	425b      	negs	r3, r3
 800f2c4:	4553      	cmp	r3, sl
 800f2c6:	dc01      	bgt.n	800f2cc <_printf_float+0x2b0>
 800f2c8:	464b      	mov	r3, r9
 800f2ca:	e793      	b.n	800f1f4 <_printf_float+0x1d8>
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	465a      	mov	r2, fp
 800f2d0:	4631      	mov	r1, r6
 800f2d2:	4628      	mov	r0, r5
 800f2d4:	47b8      	blx	r7
 800f2d6:	3001      	adds	r0, #1
 800f2d8:	f43f aefb 	beq.w	800f0d2 <_printf_float+0xb6>
 800f2dc:	f10a 0a01 	add.w	sl, sl, #1
 800f2e0:	e7ee      	b.n	800f2c0 <_printf_float+0x2a4>
 800f2e2:	bf00      	nop
 800f2e4:	7fefffff 	.word	0x7fefffff
 800f2e8:	080139a8 	.word	0x080139a8
 800f2ec:	080139ac 	.word	0x080139ac
 800f2f0:	080139b0 	.word	0x080139b0
 800f2f4:	080139b4 	.word	0x080139b4
 800f2f8:	080139b8 	.word	0x080139b8
 800f2fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f2fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f302:	4553      	cmp	r3, sl
 800f304:	bfa8      	it	ge
 800f306:	4653      	movge	r3, sl
 800f308:	2b00      	cmp	r3, #0
 800f30a:	4699      	mov	r9, r3
 800f30c:	dc36      	bgt.n	800f37c <_printf_float+0x360>
 800f30e:	f04f 0b00 	mov.w	fp, #0
 800f312:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f316:	f104 021a 	add.w	r2, r4, #26
 800f31a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f31c:	9306      	str	r3, [sp, #24]
 800f31e:	eba3 0309 	sub.w	r3, r3, r9
 800f322:	455b      	cmp	r3, fp
 800f324:	dc31      	bgt.n	800f38a <_printf_float+0x36e>
 800f326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f328:	459a      	cmp	sl, r3
 800f32a:	dc3a      	bgt.n	800f3a2 <_printf_float+0x386>
 800f32c:	6823      	ldr	r3, [r4, #0]
 800f32e:	07da      	lsls	r2, r3, #31
 800f330:	d437      	bmi.n	800f3a2 <_printf_float+0x386>
 800f332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f334:	ebaa 0903 	sub.w	r9, sl, r3
 800f338:	9b06      	ldr	r3, [sp, #24]
 800f33a:	ebaa 0303 	sub.w	r3, sl, r3
 800f33e:	4599      	cmp	r9, r3
 800f340:	bfa8      	it	ge
 800f342:	4699      	movge	r9, r3
 800f344:	f1b9 0f00 	cmp.w	r9, #0
 800f348:	dc33      	bgt.n	800f3b2 <_printf_float+0x396>
 800f34a:	f04f 0800 	mov.w	r8, #0
 800f34e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f352:	f104 0b1a 	add.w	fp, r4, #26
 800f356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f358:	ebaa 0303 	sub.w	r3, sl, r3
 800f35c:	eba3 0309 	sub.w	r3, r3, r9
 800f360:	4543      	cmp	r3, r8
 800f362:	f77f af79 	ble.w	800f258 <_printf_float+0x23c>
 800f366:	2301      	movs	r3, #1
 800f368:	465a      	mov	r2, fp
 800f36a:	4631      	mov	r1, r6
 800f36c:	4628      	mov	r0, r5
 800f36e:	47b8      	blx	r7
 800f370:	3001      	adds	r0, #1
 800f372:	f43f aeae 	beq.w	800f0d2 <_printf_float+0xb6>
 800f376:	f108 0801 	add.w	r8, r8, #1
 800f37a:	e7ec      	b.n	800f356 <_printf_float+0x33a>
 800f37c:	4642      	mov	r2, r8
 800f37e:	4631      	mov	r1, r6
 800f380:	4628      	mov	r0, r5
 800f382:	47b8      	blx	r7
 800f384:	3001      	adds	r0, #1
 800f386:	d1c2      	bne.n	800f30e <_printf_float+0x2f2>
 800f388:	e6a3      	b.n	800f0d2 <_printf_float+0xb6>
 800f38a:	2301      	movs	r3, #1
 800f38c:	4631      	mov	r1, r6
 800f38e:	4628      	mov	r0, r5
 800f390:	9206      	str	r2, [sp, #24]
 800f392:	47b8      	blx	r7
 800f394:	3001      	adds	r0, #1
 800f396:	f43f ae9c 	beq.w	800f0d2 <_printf_float+0xb6>
 800f39a:	9a06      	ldr	r2, [sp, #24]
 800f39c:	f10b 0b01 	add.w	fp, fp, #1
 800f3a0:	e7bb      	b.n	800f31a <_printf_float+0x2fe>
 800f3a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3a6:	4631      	mov	r1, r6
 800f3a8:	4628      	mov	r0, r5
 800f3aa:	47b8      	blx	r7
 800f3ac:	3001      	adds	r0, #1
 800f3ae:	d1c0      	bne.n	800f332 <_printf_float+0x316>
 800f3b0:	e68f      	b.n	800f0d2 <_printf_float+0xb6>
 800f3b2:	9a06      	ldr	r2, [sp, #24]
 800f3b4:	464b      	mov	r3, r9
 800f3b6:	4442      	add	r2, r8
 800f3b8:	4631      	mov	r1, r6
 800f3ba:	4628      	mov	r0, r5
 800f3bc:	47b8      	blx	r7
 800f3be:	3001      	adds	r0, #1
 800f3c0:	d1c3      	bne.n	800f34a <_printf_float+0x32e>
 800f3c2:	e686      	b.n	800f0d2 <_printf_float+0xb6>
 800f3c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f3c8:	f1ba 0f01 	cmp.w	sl, #1
 800f3cc:	dc01      	bgt.n	800f3d2 <_printf_float+0x3b6>
 800f3ce:	07db      	lsls	r3, r3, #31
 800f3d0:	d536      	bpl.n	800f440 <_printf_float+0x424>
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	4642      	mov	r2, r8
 800f3d6:	4631      	mov	r1, r6
 800f3d8:	4628      	mov	r0, r5
 800f3da:	47b8      	blx	r7
 800f3dc:	3001      	adds	r0, #1
 800f3de:	f43f ae78 	beq.w	800f0d2 <_printf_float+0xb6>
 800f3e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3e6:	4631      	mov	r1, r6
 800f3e8:	4628      	mov	r0, r5
 800f3ea:	47b8      	blx	r7
 800f3ec:	3001      	adds	r0, #1
 800f3ee:	f43f ae70 	beq.w	800f0d2 <_printf_float+0xb6>
 800f3f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f3fe:	f7f1 fb8b 	bl	8000b18 <__aeabi_dcmpeq>
 800f402:	b9c0      	cbnz	r0, 800f436 <_printf_float+0x41a>
 800f404:	4653      	mov	r3, sl
 800f406:	f108 0201 	add.w	r2, r8, #1
 800f40a:	4631      	mov	r1, r6
 800f40c:	4628      	mov	r0, r5
 800f40e:	47b8      	blx	r7
 800f410:	3001      	adds	r0, #1
 800f412:	d10c      	bne.n	800f42e <_printf_float+0x412>
 800f414:	e65d      	b.n	800f0d2 <_printf_float+0xb6>
 800f416:	2301      	movs	r3, #1
 800f418:	465a      	mov	r2, fp
 800f41a:	4631      	mov	r1, r6
 800f41c:	4628      	mov	r0, r5
 800f41e:	47b8      	blx	r7
 800f420:	3001      	adds	r0, #1
 800f422:	f43f ae56 	beq.w	800f0d2 <_printf_float+0xb6>
 800f426:	f108 0801 	add.w	r8, r8, #1
 800f42a:	45d0      	cmp	r8, sl
 800f42c:	dbf3      	blt.n	800f416 <_printf_float+0x3fa>
 800f42e:	464b      	mov	r3, r9
 800f430:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f434:	e6df      	b.n	800f1f6 <_printf_float+0x1da>
 800f436:	f04f 0800 	mov.w	r8, #0
 800f43a:	f104 0b1a 	add.w	fp, r4, #26
 800f43e:	e7f4      	b.n	800f42a <_printf_float+0x40e>
 800f440:	2301      	movs	r3, #1
 800f442:	4642      	mov	r2, r8
 800f444:	e7e1      	b.n	800f40a <_printf_float+0x3ee>
 800f446:	2301      	movs	r3, #1
 800f448:	464a      	mov	r2, r9
 800f44a:	4631      	mov	r1, r6
 800f44c:	4628      	mov	r0, r5
 800f44e:	47b8      	blx	r7
 800f450:	3001      	adds	r0, #1
 800f452:	f43f ae3e 	beq.w	800f0d2 <_printf_float+0xb6>
 800f456:	f108 0801 	add.w	r8, r8, #1
 800f45a:	68e3      	ldr	r3, [r4, #12]
 800f45c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f45e:	1a5b      	subs	r3, r3, r1
 800f460:	4543      	cmp	r3, r8
 800f462:	dcf0      	bgt.n	800f446 <_printf_float+0x42a>
 800f464:	e6fc      	b.n	800f260 <_printf_float+0x244>
 800f466:	f04f 0800 	mov.w	r8, #0
 800f46a:	f104 0919 	add.w	r9, r4, #25
 800f46e:	e7f4      	b.n	800f45a <_printf_float+0x43e>

0800f470 <_printf_common>:
 800f470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f474:	4616      	mov	r6, r2
 800f476:	4698      	mov	r8, r3
 800f478:	688a      	ldr	r2, [r1, #8]
 800f47a:	690b      	ldr	r3, [r1, #16]
 800f47c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f480:	4293      	cmp	r3, r2
 800f482:	bfb8      	it	lt
 800f484:	4613      	movlt	r3, r2
 800f486:	6033      	str	r3, [r6, #0]
 800f488:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f48c:	4607      	mov	r7, r0
 800f48e:	460c      	mov	r4, r1
 800f490:	b10a      	cbz	r2, 800f496 <_printf_common+0x26>
 800f492:	3301      	adds	r3, #1
 800f494:	6033      	str	r3, [r6, #0]
 800f496:	6823      	ldr	r3, [r4, #0]
 800f498:	0699      	lsls	r1, r3, #26
 800f49a:	bf42      	ittt	mi
 800f49c:	6833      	ldrmi	r3, [r6, #0]
 800f49e:	3302      	addmi	r3, #2
 800f4a0:	6033      	strmi	r3, [r6, #0]
 800f4a2:	6825      	ldr	r5, [r4, #0]
 800f4a4:	f015 0506 	ands.w	r5, r5, #6
 800f4a8:	d106      	bne.n	800f4b8 <_printf_common+0x48>
 800f4aa:	f104 0a19 	add.w	sl, r4, #25
 800f4ae:	68e3      	ldr	r3, [r4, #12]
 800f4b0:	6832      	ldr	r2, [r6, #0]
 800f4b2:	1a9b      	subs	r3, r3, r2
 800f4b4:	42ab      	cmp	r3, r5
 800f4b6:	dc26      	bgt.n	800f506 <_printf_common+0x96>
 800f4b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f4bc:	6822      	ldr	r2, [r4, #0]
 800f4be:	3b00      	subs	r3, #0
 800f4c0:	bf18      	it	ne
 800f4c2:	2301      	movne	r3, #1
 800f4c4:	0692      	lsls	r2, r2, #26
 800f4c6:	d42b      	bmi.n	800f520 <_printf_common+0xb0>
 800f4c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f4cc:	4641      	mov	r1, r8
 800f4ce:	4638      	mov	r0, r7
 800f4d0:	47c8      	blx	r9
 800f4d2:	3001      	adds	r0, #1
 800f4d4:	d01e      	beq.n	800f514 <_printf_common+0xa4>
 800f4d6:	6823      	ldr	r3, [r4, #0]
 800f4d8:	6922      	ldr	r2, [r4, #16]
 800f4da:	f003 0306 	and.w	r3, r3, #6
 800f4de:	2b04      	cmp	r3, #4
 800f4e0:	bf02      	ittt	eq
 800f4e2:	68e5      	ldreq	r5, [r4, #12]
 800f4e4:	6833      	ldreq	r3, [r6, #0]
 800f4e6:	1aed      	subeq	r5, r5, r3
 800f4e8:	68a3      	ldr	r3, [r4, #8]
 800f4ea:	bf0c      	ite	eq
 800f4ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f4f0:	2500      	movne	r5, #0
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	bfc4      	itt	gt
 800f4f6:	1a9b      	subgt	r3, r3, r2
 800f4f8:	18ed      	addgt	r5, r5, r3
 800f4fa:	2600      	movs	r6, #0
 800f4fc:	341a      	adds	r4, #26
 800f4fe:	42b5      	cmp	r5, r6
 800f500:	d11a      	bne.n	800f538 <_printf_common+0xc8>
 800f502:	2000      	movs	r0, #0
 800f504:	e008      	b.n	800f518 <_printf_common+0xa8>
 800f506:	2301      	movs	r3, #1
 800f508:	4652      	mov	r2, sl
 800f50a:	4641      	mov	r1, r8
 800f50c:	4638      	mov	r0, r7
 800f50e:	47c8      	blx	r9
 800f510:	3001      	adds	r0, #1
 800f512:	d103      	bne.n	800f51c <_printf_common+0xac>
 800f514:	f04f 30ff 	mov.w	r0, #4294967295
 800f518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f51c:	3501      	adds	r5, #1
 800f51e:	e7c6      	b.n	800f4ae <_printf_common+0x3e>
 800f520:	18e1      	adds	r1, r4, r3
 800f522:	1c5a      	adds	r2, r3, #1
 800f524:	2030      	movs	r0, #48	@ 0x30
 800f526:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f52a:	4422      	add	r2, r4
 800f52c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f530:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f534:	3302      	adds	r3, #2
 800f536:	e7c7      	b.n	800f4c8 <_printf_common+0x58>
 800f538:	2301      	movs	r3, #1
 800f53a:	4622      	mov	r2, r4
 800f53c:	4641      	mov	r1, r8
 800f53e:	4638      	mov	r0, r7
 800f540:	47c8      	blx	r9
 800f542:	3001      	adds	r0, #1
 800f544:	d0e6      	beq.n	800f514 <_printf_common+0xa4>
 800f546:	3601      	adds	r6, #1
 800f548:	e7d9      	b.n	800f4fe <_printf_common+0x8e>
	...

0800f54c <_printf_i>:
 800f54c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f550:	7e0f      	ldrb	r7, [r1, #24]
 800f552:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f554:	2f78      	cmp	r7, #120	@ 0x78
 800f556:	4691      	mov	r9, r2
 800f558:	4680      	mov	r8, r0
 800f55a:	460c      	mov	r4, r1
 800f55c:	469a      	mov	sl, r3
 800f55e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f562:	d807      	bhi.n	800f574 <_printf_i+0x28>
 800f564:	2f62      	cmp	r7, #98	@ 0x62
 800f566:	d80a      	bhi.n	800f57e <_printf_i+0x32>
 800f568:	2f00      	cmp	r7, #0
 800f56a:	f000 80d2 	beq.w	800f712 <_printf_i+0x1c6>
 800f56e:	2f58      	cmp	r7, #88	@ 0x58
 800f570:	f000 80b9 	beq.w	800f6e6 <_printf_i+0x19a>
 800f574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f578:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f57c:	e03a      	b.n	800f5f4 <_printf_i+0xa8>
 800f57e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f582:	2b15      	cmp	r3, #21
 800f584:	d8f6      	bhi.n	800f574 <_printf_i+0x28>
 800f586:	a101      	add	r1, pc, #4	@ (adr r1, 800f58c <_printf_i+0x40>)
 800f588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f58c:	0800f5e5 	.word	0x0800f5e5
 800f590:	0800f5f9 	.word	0x0800f5f9
 800f594:	0800f575 	.word	0x0800f575
 800f598:	0800f575 	.word	0x0800f575
 800f59c:	0800f575 	.word	0x0800f575
 800f5a0:	0800f575 	.word	0x0800f575
 800f5a4:	0800f5f9 	.word	0x0800f5f9
 800f5a8:	0800f575 	.word	0x0800f575
 800f5ac:	0800f575 	.word	0x0800f575
 800f5b0:	0800f575 	.word	0x0800f575
 800f5b4:	0800f575 	.word	0x0800f575
 800f5b8:	0800f6f9 	.word	0x0800f6f9
 800f5bc:	0800f623 	.word	0x0800f623
 800f5c0:	0800f6b3 	.word	0x0800f6b3
 800f5c4:	0800f575 	.word	0x0800f575
 800f5c8:	0800f575 	.word	0x0800f575
 800f5cc:	0800f71b 	.word	0x0800f71b
 800f5d0:	0800f575 	.word	0x0800f575
 800f5d4:	0800f623 	.word	0x0800f623
 800f5d8:	0800f575 	.word	0x0800f575
 800f5dc:	0800f575 	.word	0x0800f575
 800f5e0:	0800f6bb 	.word	0x0800f6bb
 800f5e4:	6833      	ldr	r3, [r6, #0]
 800f5e6:	1d1a      	adds	r2, r3, #4
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	6032      	str	r2, [r6, #0]
 800f5ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f5f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	e09d      	b.n	800f734 <_printf_i+0x1e8>
 800f5f8:	6833      	ldr	r3, [r6, #0]
 800f5fa:	6820      	ldr	r0, [r4, #0]
 800f5fc:	1d19      	adds	r1, r3, #4
 800f5fe:	6031      	str	r1, [r6, #0]
 800f600:	0606      	lsls	r6, r0, #24
 800f602:	d501      	bpl.n	800f608 <_printf_i+0xbc>
 800f604:	681d      	ldr	r5, [r3, #0]
 800f606:	e003      	b.n	800f610 <_printf_i+0xc4>
 800f608:	0645      	lsls	r5, r0, #25
 800f60a:	d5fb      	bpl.n	800f604 <_printf_i+0xb8>
 800f60c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f610:	2d00      	cmp	r5, #0
 800f612:	da03      	bge.n	800f61c <_printf_i+0xd0>
 800f614:	232d      	movs	r3, #45	@ 0x2d
 800f616:	426d      	negs	r5, r5
 800f618:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f61c:	4859      	ldr	r0, [pc, #356]	@ (800f784 <_printf_i+0x238>)
 800f61e:	230a      	movs	r3, #10
 800f620:	e011      	b.n	800f646 <_printf_i+0xfa>
 800f622:	6821      	ldr	r1, [r4, #0]
 800f624:	6833      	ldr	r3, [r6, #0]
 800f626:	0608      	lsls	r0, r1, #24
 800f628:	f853 5b04 	ldr.w	r5, [r3], #4
 800f62c:	d402      	bmi.n	800f634 <_printf_i+0xe8>
 800f62e:	0649      	lsls	r1, r1, #25
 800f630:	bf48      	it	mi
 800f632:	b2ad      	uxthmi	r5, r5
 800f634:	2f6f      	cmp	r7, #111	@ 0x6f
 800f636:	4853      	ldr	r0, [pc, #332]	@ (800f784 <_printf_i+0x238>)
 800f638:	6033      	str	r3, [r6, #0]
 800f63a:	bf14      	ite	ne
 800f63c:	230a      	movne	r3, #10
 800f63e:	2308      	moveq	r3, #8
 800f640:	2100      	movs	r1, #0
 800f642:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f646:	6866      	ldr	r6, [r4, #4]
 800f648:	60a6      	str	r6, [r4, #8]
 800f64a:	2e00      	cmp	r6, #0
 800f64c:	bfa2      	ittt	ge
 800f64e:	6821      	ldrge	r1, [r4, #0]
 800f650:	f021 0104 	bicge.w	r1, r1, #4
 800f654:	6021      	strge	r1, [r4, #0]
 800f656:	b90d      	cbnz	r5, 800f65c <_printf_i+0x110>
 800f658:	2e00      	cmp	r6, #0
 800f65a:	d04b      	beq.n	800f6f4 <_printf_i+0x1a8>
 800f65c:	4616      	mov	r6, r2
 800f65e:	fbb5 f1f3 	udiv	r1, r5, r3
 800f662:	fb03 5711 	mls	r7, r3, r1, r5
 800f666:	5dc7      	ldrb	r7, [r0, r7]
 800f668:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f66c:	462f      	mov	r7, r5
 800f66e:	42bb      	cmp	r3, r7
 800f670:	460d      	mov	r5, r1
 800f672:	d9f4      	bls.n	800f65e <_printf_i+0x112>
 800f674:	2b08      	cmp	r3, #8
 800f676:	d10b      	bne.n	800f690 <_printf_i+0x144>
 800f678:	6823      	ldr	r3, [r4, #0]
 800f67a:	07df      	lsls	r7, r3, #31
 800f67c:	d508      	bpl.n	800f690 <_printf_i+0x144>
 800f67e:	6923      	ldr	r3, [r4, #16]
 800f680:	6861      	ldr	r1, [r4, #4]
 800f682:	4299      	cmp	r1, r3
 800f684:	bfde      	ittt	le
 800f686:	2330      	movle	r3, #48	@ 0x30
 800f688:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f68c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f690:	1b92      	subs	r2, r2, r6
 800f692:	6122      	str	r2, [r4, #16]
 800f694:	f8cd a000 	str.w	sl, [sp]
 800f698:	464b      	mov	r3, r9
 800f69a:	aa03      	add	r2, sp, #12
 800f69c:	4621      	mov	r1, r4
 800f69e:	4640      	mov	r0, r8
 800f6a0:	f7ff fee6 	bl	800f470 <_printf_common>
 800f6a4:	3001      	adds	r0, #1
 800f6a6:	d14a      	bne.n	800f73e <_printf_i+0x1f2>
 800f6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ac:	b004      	add	sp, #16
 800f6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6b2:	6823      	ldr	r3, [r4, #0]
 800f6b4:	f043 0320 	orr.w	r3, r3, #32
 800f6b8:	6023      	str	r3, [r4, #0]
 800f6ba:	4833      	ldr	r0, [pc, #204]	@ (800f788 <_printf_i+0x23c>)
 800f6bc:	2778      	movs	r7, #120	@ 0x78
 800f6be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f6c2:	6823      	ldr	r3, [r4, #0]
 800f6c4:	6831      	ldr	r1, [r6, #0]
 800f6c6:	061f      	lsls	r7, r3, #24
 800f6c8:	f851 5b04 	ldr.w	r5, [r1], #4
 800f6cc:	d402      	bmi.n	800f6d4 <_printf_i+0x188>
 800f6ce:	065f      	lsls	r7, r3, #25
 800f6d0:	bf48      	it	mi
 800f6d2:	b2ad      	uxthmi	r5, r5
 800f6d4:	6031      	str	r1, [r6, #0]
 800f6d6:	07d9      	lsls	r1, r3, #31
 800f6d8:	bf44      	itt	mi
 800f6da:	f043 0320 	orrmi.w	r3, r3, #32
 800f6de:	6023      	strmi	r3, [r4, #0]
 800f6e0:	b11d      	cbz	r5, 800f6ea <_printf_i+0x19e>
 800f6e2:	2310      	movs	r3, #16
 800f6e4:	e7ac      	b.n	800f640 <_printf_i+0xf4>
 800f6e6:	4827      	ldr	r0, [pc, #156]	@ (800f784 <_printf_i+0x238>)
 800f6e8:	e7e9      	b.n	800f6be <_printf_i+0x172>
 800f6ea:	6823      	ldr	r3, [r4, #0]
 800f6ec:	f023 0320 	bic.w	r3, r3, #32
 800f6f0:	6023      	str	r3, [r4, #0]
 800f6f2:	e7f6      	b.n	800f6e2 <_printf_i+0x196>
 800f6f4:	4616      	mov	r6, r2
 800f6f6:	e7bd      	b.n	800f674 <_printf_i+0x128>
 800f6f8:	6833      	ldr	r3, [r6, #0]
 800f6fa:	6825      	ldr	r5, [r4, #0]
 800f6fc:	6961      	ldr	r1, [r4, #20]
 800f6fe:	1d18      	adds	r0, r3, #4
 800f700:	6030      	str	r0, [r6, #0]
 800f702:	062e      	lsls	r6, r5, #24
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	d501      	bpl.n	800f70c <_printf_i+0x1c0>
 800f708:	6019      	str	r1, [r3, #0]
 800f70a:	e002      	b.n	800f712 <_printf_i+0x1c6>
 800f70c:	0668      	lsls	r0, r5, #25
 800f70e:	d5fb      	bpl.n	800f708 <_printf_i+0x1bc>
 800f710:	8019      	strh	r1, [r3, #0]
 800f712:	2300      	movs	r3, #0
 800f714:	6123      	str	r3, [r4, #16]
 800f716:	4616      	mov	r6, r2
 800f718:	e7bc      	b.n	800f694 <_printf_i+0x148>
 800f71a:	6833      	ldr	r3, [r6, #0]
 800f71c:	1d1a      	adds	r2, r3, #4
 800f71e:	6032      	str	r2, [r6, #0]
 800f720:	681e      	ldr	r6, [r3, #0]
 800f722:	6862      	ldr	r2, [r4, #4]
 800f724:	2100      	movs	r1, #0
 800f726:	4630      	mov	r0, r6
 800f728:	f7f0 fd7a 	bl	8000220 <memchr>
 800f72c:	b108      	cbz	r0, 800f732 <_printf_i+0x1e6>
 800f72e:	1b80      	subs	r0, r0, r6
 800f730:	6060      	str	r0, [r4, #4]
 800f732:	6863      	ldr	r3, [r4, #4]
 800f734:	6123      	str	r3, [r4, #16]
 800f736:	2300      	movs	r3, #0
 800f738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f73c:	e7aa      	b.n	800f694 <_printf_i+0x148>
 800f73e:	6923      	ldr	r3, [r4, #16]
 800f740:	4632      	mov	r2, r6
 800f742:	4649      	mov	r1, r9
 800f744:	4640      	mov	r0, r8
 800f746:	47d0      	blx	sl
 800f748:	3001      	adds	r0, #1
 800f74a:	d0ad      	beq.n	800f6a8 <_printf_i+0x15c>
 800f74c:	6823      	ldr	r3, [r4, #0]
 800f74e:	079b      	lsls	r3, r3, #30
 800f750:	d413      	bmi.n	800f77a <_printf_i+0x22e>
 800f752:	68e0      	ldr	r0, [r4, #12]
 800f754:	9b03      	ldr	r3, [sp, #12]
 800f756:	4298      	cmp	r0, r3
 800f758:	bfb8      	it	lt
 800f75a:	4618      	movlt	r0, r3
 800f75c:	e7a6      	b.n	800f6ac <_printf_i+0x160>
 800f75e:	2301      	movs	r3, #1
 800f760:	4632      	mov	r2, r6
 800f762:	4649      	mov	r1, r9
 800f764:	4640      	mov	r0, r8
 800f766:	47d0      	blx	sl
 800f768:	3001      	adds	r0, #1
 800f76a:	d09d      	beq.n	800f6a8 <_printf_i+0x15c>
 800f76c:	3501      	adds	r5, #1
 800f76e:	68e3      	ldr	r3, [r4, #12]
 800f770:	9903      	ldr	r1, [sp, #12]
 800f772:	1a5b      	subs	r3, r3, r1
 800f774:	42ab      	cmp	r3, r5
 800f776:	dcf2      	bgt.n	800f75e <_printf_i+0x212>
 800f778:	e7eb      	b.n	800f752 <_printf_i+0x206>
 800f77a:	2500      	movs	r5, #0
 800f77c:	f104 0619 	add.w	r6, r4, #25
 800f780:	e7f5      	b.n	800f76e <_printf_i+0x222>
 800f782:	bf00      	nop
 800f784:	080139ba 	.word	0x080139ba
 800f788:	080139cb 	.word	0x080139cb

0800f78c <_scanf_float>:
 800f78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f790:	b087      	sub	sp, #28
 800f792:	4617      	mov	r7, r2
 800f794:	9303      	str	r3, [sp, #12]
 800f796:	688b      	ldr	r3, [r1, #8]
 800f798:	1e5a      	subs	r2, r3, #1
 800f79a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f79e:	bf81      	itttt	hi
 800f7a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f7a4:	eb03 0b05 	addhi.w	fp, r3, r5
 800f7a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f7ac:	608b      	strhi	r3, [r1, #8]
 800f7ae:	680b      	ldr	r3, [r1, #0]
 800f7b0:	460a      	mov	r2, r1
 800f7b2:	f04f 0500 	mov.w	r5, #0
 800f7b6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f7ba:	f842 3b1c 	str.w	r3, [r2], #28
 800f7be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f7c2:	4680      	mov	r8, r0
 800f7c4:	460c      	mov	r4, r1
 800f7c6:	bf98      	it	ls
 800f7c8:	f04f 0b00 	movls.w	fp, #0
 800f7cc:	9201      	str	r2, [sp, #4]
 800f7ce:	4616      	mov	r6, r2
 800f7d0:	46aa      	mov	sl, r5
 800f7d2:	46a9      	mov	r9, r5
 800f7d4:	9502      	str	r5, [sp, #8]
 800f7d6:	68a2      	ldr	r2, [r4, #8]
 800f7d8:	b152      	cbz	r2, 800f7f0 <_scanf_float+0x64>
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	781b      	ldrb	r3, [r3, #0]
 800f7de:	2b4e      	cmp	r3, #78	@ 0x4e
 800f7e0:	d864      	bhi.n	800f8ac <_scanf_float+0x120>
 800f7e2:	2b40      	cmp	r3, #64	@ 0x40
 800f7e4:	d83c      	bhi.n	800f860 <_scanf_float+0xd4>
 800f7e6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f7ea:	b2c8      	uxtb	r0, r1
 800f7ec:	280e      	cmp	r0, #14
 800f7ee:	d93a      	bls.n	800f866 <_scanf_float+0xda>
 800f7f0:	f1b9 0f00 	cmp.w	r9, #0
 800f7f4:	d003      	beq.n	800f7fe <_scanf_float+0x72>
 800f7f6:	6823      	ldr	r3, [r4, #0]
 800f7f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f7fc:	6023      	str	r3, [r4, #0]
 800f7fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f802:	f1ba 0f01 	cmp.w	sl, #1
 800f806:	f200 8117 	bhi.w	800fa38 <_scanf_float+0x2ac>
 800f80a:	9b01      	ldr	r3, [sp, #4]
 800f80c:	429e      	cmp	r6, r3
 800f80e:	f200 8108 	bhi.w	800fa22 <_scanf_float+0x296>
 800f812:	2001      	movs	r0, #1
 800f814:	b007      	add	sp, #28
 800f816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f81a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f81e:	2a0d      	cmp	r2, #13
 800f820:	d8e6      	bhi.n	800f7f0 <_scanf_float+0x64>
 800f822:	a101      	add	r1, pc, #4	@ (adr r1, 800f828 <_scanf_float+0x9c>)
 800f824:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f828:	0800f96f 	.word	0x0800f96f
 800f82c:	0800f7f1 	.word	0x0800f7f1
 800f830:	0800f7f1 	.word	0x0800f7f1
 800f834:	0800f7f1 	.word	0x0800f7f1
 800f838:	0800f9cf 	.word	0x0800f9cf
 800f83c:	0800f9a7 	.word	0x0800f9a7
 800f840:	0800f7f1 	.word	0x0800f7f1
 800f844:	0800f7f1 	.word	0x0800f7f1
 800f848:	0800f97d 	.word	0x0800f97d
 800f84c:	0800f7f1 	.word	0x0800f7f1
 800f850:	0800f7f1 	.word	0x0800f7f1
 800f854:	0800f7f1 	.word	0x0800f7f1
 800f858:	0800f7f1 	.word	0x0800f7f1
 800f85c:	0800f935 	.word	0x0800f935
 800f860:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f864:	e7db      	b.n	800f81e <_scanf_float+0x92>
 800f866:	290e      	cmp	r1, #14
 800f868:	d8c2      	bhi.n	800f7f0 <_scanf_float+0x64>
 800f86a:	a001      	add	r0, pc, #4	@ (adr r0, 800f870 <_scanf_float+0xe4>)
 800f86c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f870:	0800f925 	.word	0x0800f925
 800f874:	0800f7f1 	.word	0x0800f7f1
 800f878:	0800f925 	.word	0x0800f925
 800f87c:	0800f9bb 	.word	0x0800f9bb
 800f880:	0800f7f1 	.word	0x0800f7f1
 800f884:	0800f8cd 	.word	0x0800f8cd
 800f888:	0800f90b 	.word	0x0800f90b
 800f88c:	0800f90b 	.word	0x0800f90b
 800f890:	0800f90b 	.word	0x0800f90b
 800f894:	0800f90b 	.word	0x0800f90b
 800f898:	0800f90b 	.word	0x0800f90b
 800f89c:	0800f90b 	.word	0x0800f90b
 800f8a0:	0800f90b 	.word	0x0800f90b
 800f8a4:	0800f90b 	.word	0x0800f90b
 800f8a8:	0800f90b 	.word	0x0800f90b
 800f8ac:	2b6e      	cmp	r3, #110	@ 0x6e
 800f8ae:	d809      	bhi.n	800f8c4 <_scanf_float+0x138>
 800f8b0:	2b60      	cmp	r3, #96	@ 0x60
 800f8b2:	d8b2      	bhi.n	800f81a <_scanf_float+0x8e>
 800f8b4:	2b54      	cmp	r3, #84	@ 0x54
 800f8b6:	d07b      	beq.n	800f9b0 <_scanf_float+0x224>
 800f8b8:	2b59      	cmp	r3, #89	@ 0x59
 800f8ba:	d199      	bne.n	800f7f0 <_scanf_float+0x64>
 800f8bc:	2d07      	cmp	r5, #7
 800f8be:	d197      	bne.n	800f7f0 <_scanf_float+0x64>
 800f8c0:	2508      	movs	r5, #8
 800f8c2:	e02c      	b.n	800f91e <_scanf_float+0x192>
 800f8c4:	2b74      	cmp	r3, #116	@ 0x74
 800f8c6:	d073      	beq.n	800f9b0 <_scanf_float+0x224>
 800f8c8:	2b79      	cmp	r3, #121	@ 0x79
 800f8ca:	e7f6      	b.n	800f8ba <_scanf_float+0x12e>
 800f8cc:	6821      	ldr	r1, [r4, #0]
 800f8ce:	05c8      	lsls	r0, r1, #23
 800f8d0:	d51b      	bpl.n	800f90a <_scanf_float+0x17e>
 800f8d2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f8d6:	6021      	str	r1, [r4, #0]
 800f8d8:	f109 0901 	add.w	r9, r9, #1
 800f8dc:	f1bb 0f00 	cmp.w	fp, #0
 800f8e0:	d003      	beq.n	800f8ea <_scanf_float+0x15e>
 800f8e2:	3201      	adds	r2, #1
 800f8e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f8e8:	60a2      	str	r2, [r4, #8]
 800f8ea:	68a3      	ldr	r3, [r4, #8]
 800f8ec:	3b01      	subs	r3, #1
 800f8ee:	60a3      	str	r3, [r4, #8]
 800f8f0:	6923      	ldr	r3, [r4, #16]
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	6123      	str	r3, [r4, #16]
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	3b01      	subs	r3, #1
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	607b      	str	r3, [r7, #4]
 800f8fe:	f340 8087 	ble.w	800fa10 <_scanf_float+0x284>
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	3301      	adds	r3, #1
 800f906:	603b      	str	r3, [r7, #0]
 800f908:	e765      	b.n	800f7d6 <_scanf_float+0x4a>
 800f90a:	eb1a 0105 	adds.w	r1, sl, r5
 800f90e:	f47f af6f 	bne.w	800f7f0 <_scanf_float+0x64>
 800f912:	6822      	ldr	r2, [r4, #0]
 800f914:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f918:	6022      	str	r2, [r4, #0]
 800f91a:	460d      	mov	r5, r1
 800f91c:	468a      	mov	sl, r1
 800f91e:	f806 3b01 	strb.w	r3, [r6], #1
 800f922:	e7e2      	b.n	800f8ea <_scanf_float+0x15e>
 800f924:	6822      	ldr	r2, [r4, #0]
 800f926:	0610      	lsls	r0, r2, #24
 800f928:	f57f af62 	bpl.w	800f7f0 <_scanf_float+0x64>
 800f92c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f930:	6022      	str	r2, [r4, #0]
 800f932:	e7f4      	b.n	800f91e <_scanf_float+0x192>
 800f934:	f1ba 0f00 	cmp.w	sl, #0
 800f938:	d10e      	bne.n	800f958 <_scanf_float+0x1cc>
 800f93a:	f1b9 0f00 	cmp.w	r9, #0
 800f93e:	d10e      	bne.n	800f95e <_scanf_float+0x1d2>
 800f940:	6822      	ldr	r2, [r4, #0]
 800f942:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f946:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f94a:	d108      	bne.n	800f95e <_scanf_float+0x1d2>
 800f94c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f950:	6022      	str	r2, [r4, #0]
 800f952:	f04f 0a01 	mov.w	sl, #1
 800f956:	e7e2      	b.n	800f91e <_scanf_float+0x192>
 800f958:	f1ba 0f02 	cmp.w	sl, #2
 800f95c:	d055      	beq.n	800fa0a <_scanf_float+0x27e>
 800f95e:	2d01      	cmp	r5, #1
 800f960:	d002      	beq.n	800f968 <_scanf_float+0x1dc>
 800f962:	2d04      	cmp	r5, #4
 800f964:	f47f af44 	bne.w	800f7f0 <_scanf_float+0x64>
 800f968:	3501      	adds	r5, #1
 800f96a:	b2ed      	uxtb	r5, r5
 800f96c:	e7d7      	b.n	800f91e <_scanf_float+0x192>
 800f96e:	f1ba 0f01 	cmp.w	sl, #1
 800f972:	f47f af3d 	bne.w	800f7f0 <_scanf_float+0x64>
 800f976:	f04f 0a02 	mov.w	sl, #2
 800f97a:	e7d0      	b.n	800f91e <_scanf_float+0x192>
 800f97c:	b97d      	cbnz	r5, 800f99e <_scanf_float+0x212>
 800f97e:	f1b9 0f00 	cmp.w	r9, #0
 800f982:	f47f af38 	bne.w	800f7f6 <_scanf_float+0x6a>
 800f986:	6822      	ldr	r2, [r4, #0]
 800f988:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f98c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f990:	f040 8108 	bne.w	800fba4 <_scanf_float+0x418>
 800f994:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f998:	6022      	str	r2, [r4, #0]
 800f99a:	2501      	movs	r5, #1
 800f99c:	e7bf      	b.n	800f91e <_scanf_float+0x192>
 800f99e:	2d03      	cmp	r5, #3
 800f9a0:	d0e2      	beq.n	800f968 <_scanf_float+0x1dc>
 800f9a2:	2d05      	cmp	r5, #5
 800f9a4:	e7de      	b.n	800f964 <_scanf_float+0x1d8>
 800f9a6:	2d02      	cmp	r5, #2
 800f9a8:	f47f af22 	bne.w	800f7f0 <_scanf_float+0x64>
 800f9ac:	2503      	movs	r5, #3
 800f9ae:	e7b6      	b.n	800f91e <_scanf_float+0x192>
 800f9b0:	2d06      	cmp	r5, #6
 800f9b2:	f47f af1d 	bne.w	800f7f0 <_scanf_float+0x64>
 800f9b6:	2507      	movs	r5, #7
 800f9b8:	e7b1      	b.n	800f91e <_scanf_float+0x192>
 800f9ba:	6822      	ldr	r2, [r4, #0]
 800f9bc:	0591      	lsls	r1, r2, #22
 800f9be:	f57f af17 	bpl.w	800f7f0 <_scanf_float+0x64>
 800f9c2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f9c6:	6022      	str	r2, [r4, #0]
 800f9c8:	f8cd 9008 	str.w	r9, [sp, #8]
 800f9cc:	e7a7      	b.n	800f91e <_scanf_float+0x192>
 800f9ce:	6822      	ldr	r2, [r4, #0]
 800f9d0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f9d4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f9d8:	d006      	beq.n	800f9e8 <_scanf_float+0x25c>
 800f9da:	0550      	lsls	r0, r2, #21
 800f9dc:	f57f af08 	bpl.w	800f7f0 <_scanf_float+0x64>
 800f9e0:	f1b9 0f00 	cmp.w	r9, #0
 800f9e4:	f000 80de 	beq.w	800fba4 <_scanf_float+0x418>
 800f9e8:	0591      	lsls	r1, r2, #22
 800f9ea:	bf58      	it	pl
 800f9ec:	9902      	ldrpl	r1, [sp, #8]
 800f9ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f9f2:	bf58      	it	pl
 800f9f4:	eba9 0101 	subpl.w	r1, r9, r1
 800f9f8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f9fc:	bf58      	it	pl
 800f9fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fa02:	6022      	str	r2, [r4, #0]
 800fa04:	f04f 0900 	mov.w	r9, #0
 800fa08:	e789      	b.n	800f91e <_scanf_float+0x192>
 800fa0a:	f04f 0a03 	mov.w	sl, #3
 800fa0e:	e786      	b.n	800f91e <_scanf_float+0x192>
 800fa10:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fa14:	4639      	mov	r1, r7
 800fa16:	4640      	mov	r0, r8
 800fa18:	4798      	blx	r3
 800fa1a:	2800      	cmp	r0, #0
 800fa1c:	f43f aedb 	beq.w	800f7d6 <_scanf_float+0x4a>
 800fa20:	e6e6      	b.n	800f7f0 <_scanf_float+0x64>
 800fa22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fa2a:	463a      	mov	r2, r7
 800fa2c:	4640      	mov	r0, r8
 800fa2e:	4798      	blx	r3
 800fa30:	6923      	ldr	r3, [r4, #16]
 800fa32:	3b01      	subs	r3, #1
 800fa34:	6123      	str	r3, [r4, #16]
 800fa36:	e6e8      	b.n	800f80a <_scanf_float+0x7e>
 800fa38:	1e6b      	subs	r3, r5, #1
 800fa3a:	2b06      	cmp	r3, #6
 800fa3c:	d824      	bhi.n	800fa88 <_scanf_float+0x2fc>
 800fa3e:	2d02      	cmp	r5, #2
 800fa40:	d836      	bhi.n	800fab0 <_scanf_float+0x324>
 800fa42:	9b01      	ldr	r3, [sp, #4]
 800fa44:	429e      	cmp	r6, r3
 800fa46:	f67f aee4 	bls.w	800f812 <_scanf_float+0x86>
 800fa4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fa52:	463a      	mov	r2, r7
 800fa54:	4640      	mov	r0, r8
 800fa56:	4798      	blx	r3
 800fa58:	6923      	ldr	r3, [r4, #16]
 800fa5a:	3b01      	subs	r3, #1
 800fa5c:	6123      	str	r3, [r4, #16]
 800fa5e:	e7f0      	b.n	800fa42 <_scanf_float+0x2b6>
 800fa60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa64:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fa68:	463a      	mov	r2, r7
 800fa6a:	4640      	mov	r0, r8
 800fa6c:	4798      	blx	r3
 800fa6e:	6923      	ldr	r3, [r4, #16]
 800fa70:	3b01      	subs	r3, #1
 800fa72:	6123      	str	r3, [r4, #16]
 800fa74:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fa78:	fa5f fa8a 	uxtb.w	sl, sl
 800fa7c:	f1ba 0f02 	cmp.w	sl, #2
 800fa80:	d1ee      	bne.n	800fa60 <_scanf_float+0x2d4>
 800fa82:	3d03      	subs	r5, #3
 800fa84:	b2ed      	uxtb	r5, r5
 800fa86:	1b76      	subs	r6, r6, r5
 800fa88:	6823      	ldr	r3, [r4, #0]
 800fa8a:	05da      	lsls	r2, r3, #23
 800fa8c:	d530      	bpl.n	800faf0 <_scanf_float+0x364>
 800fa8e:	055b      	lsls	r3, r3, #21
 800fa90:	d511      	bpl.n	800fab6 <_scanf_float+0x32a>
 800fa92:	9b01      	ldr	r3, [sp, #4]
 800fa94:	429e      	cmp	r6, r3
 800fa96:	f67f aebc 	bls.w	800f812 <_scanf_float+0x86>
 800fa9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800faa2:	463a      	mov	r2, r7
 800faa4:	4640      	mov	r0, r8
 800faa6:	4798      	blx	r3
 800faa8:	6923      	ldr	r3, [r4, #16]
 800faaa:	3b01      	subs	r3, #1
 800faac:	6123      	str	r3, [r4, #16]
 800faae:	e7f0      	b.n	800fa92 <_scanf_float+0x306>
 800fab0:	46aa      	mov	sl, r5
 800fab2:	46b3      	mov	fp, r6
 800fab4:	e7de      	b.n	800fa74 <_scanf_float+0x2e8>
 800fab6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800faba:	6923      	ldr	r3, [r4, #16]
 800fabc:	2965      	cmp	r1, #101	@ 0x65
 800fabe:	f103 33ff 	add.w	r3, r3, #4294967295
 800fac2:	f106 35ff 	add.w	r5, r6, #4294967295
 800fac6:	6123      	str	r3, [r4, #16]
 800fac8:	d00c      	beq.n	800fae4 <_scanf_float+0x358>
 800faca:	2945      	cmp	r1, #69	@ 0x45
 800facc:	d00a      	beq.n	800fae4 <_scanf_float+0x358>
 800face:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fad2:	463a      	mov	r2, r7
 800fad4:	4640      	mov	r0, r8
 800fad6:	4798      	blx	r3
 800fad8:	6923      	ldr	r3, [r4, #16]
 800fada:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fade:	3b01      	subs	r3, #1
 800fae0:	1eb5      	subs	r5, r6, #2
 800fae2:	6123      	str	r3, [r4, #16]
 800fae4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fae8:	463a      	mov	r2, r7
 800faea:	4640      	mov	r0, r8
 800faec:	4798      	blx	r3
 800faee:	462e      	mov	r6, r5
 800faf0:	6822      	ldr	r2, [r4, #0]
 800faf2:	f012 0210 	ands.w	r2, r2, #16
 800faf6:	d001      	beq.n	800fafc <_scanf_float+0x370>
 800faf8:	2000      	movs	r0, #0
 800fafa:	e68b      	b.n	800f814 <_scanf_float+0x88>
 800fafc:	7032      	strb	r2, [r6, #0]
 800fafe:	6823      	ldr	r3, [r4, #0]
 800fb00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fb04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fb08:	d11c      	bne.n	800fb44 <_scanf_float+0x3b8>
 800fb0a:	9b02      	ldr	r3, [sp, #8]
 800fb0c:	454b      	cmp	r3, r9
 800fb0e:	eba3 0209 	sub.w	r2, r3, r9
 800fb12:	d123      	bne.n	800fb5c <_scanf_float+0x3d0>
 800fb14:	9901      	ldr	r1, [sp, #4]
 800fb16:	2200      	movs	r2, #0
 800fb18:	4640      	mov	r0, r8
 800fb1a:	f7ff f9cd 	bl	800eeb8 <_strtod_r>
 800fb1e:	9b03      	ldr	r3, [sp, #12]
 800fb20:	6821      	ldr	r1, [r4, #0]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	f011 0f02 	tst.w	r1, #2
 800fb28:	ec57 6b10 	vmov	r6, r7, d0
 800fb2c:	f103 0204 	add.w	r2, r3, #4
 800fb30:	d01f      	beq.n	800fb72 <_scanf_float+0x3e6>
 800fb32:	9903      	ldr	r1, [sp, #12]
 800fb34:	600a      	str	r2, [r1, #0]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	e9c3 6700 	strd	r6, r7, [r3]
 800fb3c:	68e3      	ldr	r3, [r4, #12]
 800fb3e:	3301      	adds	r3, #1
 800fb40:	60e3      	str	r3, [r4, #12]
 800fb42:	e7d9      	b.n	800faf8 <_scanf_float+0x36c>
 800fb44:	9b04      	ldr	r3, [sp, #16]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d0e4      	beq.n	800fb14 <_scanf_float+0x388>
 800fb4a:	9905      	ldr	r1, [sp, #20]
 800fb4c:	230a      	movs	r3, #10
 800fb4e:	3101      	adds	r1, #1
 800fb50:	4640      	mov	r0, r8
 800fb52:	f002 f9e9 	bl	8011f28 <_strtol_r>
 800fb56:	9b04      	ldr	r3, [sp, #16]
 800fb58:	9e05      	ldr	r6, [sp, #20]
 800fb5a:	1ac2      	subs	r2, r0, r3
 800fb5c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800fb60:	429e      	cmp	r6, r3
 800fb62:	bf28      	it	cs
 800fb64:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fb68:	4910      	ldr	r1, [pc, #64]	@ (800fbac <_scanf_float+0x420>)
 800fb6a:	4630      	mov	r0, r6
 800fb6c:	f000 f8e4 	bl	800fd38 <siprintf>
 800fb70:	e7d0      	b.n	800fb14 <_scanf_float+0x388>
 800fb72:	f011 0f04 	tst.w	r1, #4
 800fb76:	9903      	ldr	r1, [sp, #12]
 800fb78:	600a      	str	r2, [r1, #0]
 800fb7a:	d1dc      	bne.n	800fb36 <_scanf_float+0x3aa>
 800fb7c:	681d      	ldr	r5, [r3, #0]
 800fb7e:	4632      	mov	r2, r6
 800fb80:	463b      	mov	r3, r7
 800fb82:	4630      	mov	r0, r6
 800fb84:	4639      	mov	r1, r7
 800fb86:	f7f0 fff9 	bl	8000b7c <__aeabi_dcmpun>
 800fb8a:	b128      	cbz	r0, 800fb98 <_scanf_float+0x40c>
 800fb8c:	4808      	ldr	r0, [pc, #32]	@ (800fbb0 <_scanf_float+0x424>)
 800fb8e:	f000 f9ff 	bl	800ff90 <nanf>
 800fb92:	ed85 0a00 	vstr	s0, [r5]
 800fb96:	e7d1      	b.n	800fb3c <_scanf_float+0x3b0>
 800fb98:	4630      	mov	r0, r6
 800fb9a:	4639      	mov	r1, r7
 800fb9c:	f7f1 f84c 	bl	8000c38 <__aeabi_d2f>
 800fba0:	6028      	str	r0, [r5, #0]
 800fba2:	e7cb      	b.n	800fb3c <_scanf_float+0x3b0>
 800fba4:	f04f 0900 	mov.w	r9, #0
 800fba8:	e629      	b.n	800f7fe <_scanf_float+0x72>
 800fbaa:	bf00      	nop
 800fbac:	080139dc 	.word	0x080139dc
 800fbb0:	08013d7d 	.word	0x08013d7d

0800fbb4 <std>:
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	b510      	push	{r4, lr}
 800fbb8:	4604      	mov	r4, r0
 800fbba:	e9c0 3300 	strd	r3, r3, [r0]
 800fbbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fbc2:	6083      	str	r3, [r0, #8]
 800fbc4:	8181      	strh	r1, [r0, #12]
 800fbc6:	6643      	str	r3, [r0, #100]	@ 0x64
 800fbc8:	81c2      	strh	r2, [r0, #14]
 800fbca:	6183      	str	r3, [r0, #24]
 800fbcc:	4619      	mov	r1, r3
 800fbce:	2208      	movs	r2, #8
 800fbd0:	305c      	adds	r0, #92	@ 0x5c
 800fbd2:	f000 f935 	bl	800fe40 <memset>
 800fbd6:	4b0d      	ldr	r3, [pc, #52]	@ (800fc0c <std+0x58>)
 800fbd8:	6263      	str	r3, [r4, #36]	@ 0x24
 800fbda:	4b0d      	ldr	r3, [pc, #52]	@ (800fc10 <std+0x5c>)
 800fbdc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fbde:	4b0d      	ldr	r3, [pc, #52]	@ (800fc14 <std+0x60>)
 800fbe0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fbe2:	4b0d      	ldr	r3, [pc, #52]	@ (800fc18 <std+0x64>)
 800fbe4:	6323      	str	r3, [r4, #48]	@ 0x30
 800fbe6:	4b0d      	ldr	r3, [pc, #52]	@ (800fc1c <std+0x68>)
 800fbe8:	6224      	str	r4, [r4, #32]
 800fbea:	429c      	cmp	r4, r3
 800fbec:	d006      	beq.n	800fbfc <std+0x48>
 800fbee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fbf2:	4294      	cmp	r4, r2
 800fbf4:	d002      	beq.n	800fbfc <std+0x48>
 800fbf6:	33d0      	adds	r3, #208	@ 0xd0
 800fbf8:	429c      	cmp	r4, r3
 800fbfa:	d105      	bne.n	800fc08 <std+0x54>
 800fbfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fc00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc04:	f000 b9aa 	b.w	800ff5c <__retarget_lock_init_recursive>
 800fc08:	bd10      	pop	{r4, pc}
 800fc0a:	bf00      	nop
 800fc0c:	0800fd79 	.word	0x0800fd79
 800fc10:	0800fd9b 	.word	0x0800fd9b
 800fc14:	0800fdd3 	.word	0x0800fdd3
 800fc18:	0800fdf7 	.word	0x0800fdf7
 800fc1c:	20000c1c 	.word	0x20000c1c

0800fc20 <stdio_exit_handler>:
 800fc20:	4a02      	ldr	r2, [pc, #8]	@ (800fc2c <stdio_exit_handler+0xc>)
 800fc22:	4903      	ldr	r1, [pc, #12]	@ (800fc30 <stdio_exit_handler+0x10>)
 800fc24:	4803      	ldr	r0, [pc, #12]	@ (800fc34 <stdio_exit_handler+0x14>)
 800fc26:	f000 b869 	b.w	800fcfc <_fwalk_sglue>
 800fc2a:	bf00      	nop
 800fc2c:	200000a4 	.word	0x200000a4
 800fc30:	080122fd 	.word	0x080122fd
 800fc34:	20000220 	.word	0x20000220

0800fc38 <cleanup_stdio>:
 800fc38:	6841      	ldr	r1, [r0, #4]
 800fc3a:	4b0c      	ldr	r3, [pc, #48]	@ (800fc6c <cleanup_stdio+0x34>)
 800fc3c:	4299      	cmp	r1, r3
 800fc3e:	b510      	push	{r4, lr}
 800fc40:	4604      	mov	r4, r0
 800fc42:	d001      	beq.n	800fc48 <cleanup_stdio+0x10>
 800fc44:	f002 fb5a 	bl	80122fc <_fflush_r>
 800fc48:	68a1      	ldr	r1, [r4, #8]
 800fc4a:	4b09      	ldr	r3, [pc, #36]	@ (800fc70 <cleanup_stdio+0x38>)
 800fc4c:	4299      	cmp	r1, r3
 800fc4e:	d002      	beq.n	800fc56 <cleanup_stdio+0x1e>
 800fc50:	4620      	mov	r0, r4
 800fc52:	f002 fb53 	bl	80122fc <_fflush_r>
 800fc56:	68e1      	ldr	r1, [r4, #12]
 800fc58:	4b06      	ldr	r3, [pc, #24]	@ (800fc74 <cleanup_stdio+0x3c>)
 800fc5a:	4299      	cmp	r1, r3
 800fc5c:	d004      	beq.n	800fc68 <cleanup_stdio+0x30>
 800fc5e:	4620      	mov	r0, r4
 800fc60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc64:	f002 bb4a 	b.w	80122fc <_fflush_r>
 800fc68:	bd10      	pop	{r4, pc}
 800fc6a:	bf00      	nop
 800fc6c:	20000c1c 	.word	0x20000c1c
 800fc70:	20000c84 	.word	0x20000c84
 800fc74:	20000cec 	.word	0x20000cec

0800fc78 <global_stdio_init.part.0>:
 800fc78:	b510      	push	{r4, lr}
 800fc7a:	4b0b      	ldr	r3, [pc, #44]	@ (800fca8 <global_stdio_init.part.0+0x30>)
 800fc7c:	4c0b      	ldr	r4, [pc, #44]	@ (800fcac <global_stdio_init.part.0+0x34>)
 800fc7e:	4a0c      	ldr	r2, [pc, #48]	@ (800fcb0 <global_stdio_init.part.0+0x38>)
 800fc80:	601a      	str	r2, [r3, #0]
 800fc82:	4620      	mov	r0, r4
 800fc84:	2200      	movs	r2, #0
 800fc86:	2104      	movs	r1, #4
 800fc88:	f7ff ff94 	bl	800fbb4 <std>
 800fc8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fc90:	2201      	movs	r2, #1
 800fc92:	2109      	movs	r1, #9
 800fc94:	f7ff ff8e 	bl	800fbb4 <std>
 800fc98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fc9c:	2202      	movs	r2, #2
 800fc9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fca2:	2112      	movs	r1, #18
 800fca4:	f7ff bf86 	b.w	800fbb4 <std>
 800fca8:	20000d54 	.word	0x20000d54
 800fcac:	20000c1c 	.word	0x20000c1c
 800fcb0:	0800fc21 	.word	0x0800fc21

0800fcb4 <__sfp_lock_acquire>:
 800fcb4:	4801      	ldr	r0, [pc, #4]	@ (800fcbc <__sfp_lock_acquire+0x8>)
 800fcb6:	f000 b952 	b.w	800ff5e <__retarget_lock_acquire_recursive>
 800fcba:	bf00      	nop
 800fcbc:	20000d5d 	.word	0x20000d5d

0800fcc0 <__sfp_lock_release>:
 800fcc0:	4801      	ldr	r0, [pc, #4]	@ (800fcc8 <__sfp_lock_release+0x8>)
 800fcc2:	f000 b94d 	b.w	800ff60 <__retarget_lock_release_recursive>
 800fcc6:	bf00      	nop
 800fcc8:	20000d5d 	.word	0x20000d5d

0800fccc <__sinit>:
 800fccc:	b510      	push	{r4, lr}
 800fcce:	4604      	mov	r4, r0
 800fcd0:	f7ff fff0 	bl	800fcb4 <__sfp_lock_acquire>
 800fcd4:	6a23      	ldr	r3, [r4, #32]
 800fcd6:	b11b      	cbz	r3, 800fce0 <__sinit+0x14>
 800fcd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcdc:	f7ff bff0 	b.w	800fcc0 <__sfp_lock_release>
 800fce0:	4b04      	ldr	r3, [pc, #16]	@ (800fcf4 <__sinit+0x28>)
 800fce2:	6223      	str	r3, [r4, #32]
 800fce4:	4b04      	ldr	r3, [pc, #16]	@ (800fcf8 <__sinit+0x2c>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d1f5      	bne.n	800fcd8 <__sinit+0xc>
 800fcec:	f7ff ffc4 	bl	800fc78 <global_stdio_init.part.0>
 800fcf0:	e7f2      	b.n	800fcd8 <__sinit+0xc>
 800fcf2:	bf00      	nop
 800fcf4:	0800fc39 	.word	0x0800fc39
 800fcf8:	20000d54 	.word	0x20000d54

0800fcfc <_fwalk_sglue>:
 800fcfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd00:	4607      	mov	r7, r0
 800fd02:	4688      	mov	r8, r1
 800fd04:	4614      	mov	r4, r2
 800fd06:	2600      	movs	r6, #0
 800fd08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fd0c:	f1b9 0901 	subs.w	r9, r9, #1
 800fd10:	d505      	bpl.n	800fd1e <_fwalk_sglue+0x22>
 800fd12:	6824      	ldr	r4, [r4, #0]
 800fd14:	2c00      	cmp	r4, #0
 800fd16:	d1f7      	bne.n	800fd08 <_fwalk_sglue+0xc>
 800fd18:	4630      	mov	r0, r6
 800fd1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd1e:	89ab      	ldrh	r3, [r5, #12]
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d907      	bls.n	800fd34 <_fwalk_sglue+0x38>
 800fd24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fd28:	3301      	adds	r3, #1
 800fd2a:	d003      	beq.n	800fd34 <_fwalk_sglue+0x38>
 800fd2c:	4629      	mov	r1, r5
 800fd2e:	4638      	mov	r0, r7
 800fd30:	47c0      	blx	r8
 800fd32:	4306      	orrs	r6, r0
 800fd34:	3568      	adds	r5, #104	@ 0x68
 800fd36:	e7e9      	b.n	800fd0c <_fwalk_sglue+0x10>

0800fd38 <siprintf>:
 800fd38:	b40e      	push	{r1, r2, r3}
 800fd3a:	b500      	push	{lr}
 800fd3c:	b09c      	sub	sp, #112	@ 0x70
 800fd3e:	ab1d      	add	r3, sp, #116	@ 0x74
 800fd40:	9002      	str	r0, [sp, #8]
 800fd42:	9006      	str	r0, [sp, #24]
 800fd44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fd48:	4809      	ldr	r0, [pc, #36]	@ (800fd70 <siprintf+0x38>)
 800fd4a:	9107      	str	r1, [sp, #28]
 800fd4c:	9104      	str	r1, [sp, #16]
 800fd4e:	4909      	ldr	r1, [pc, #36]	@ (800fd74 <siprintf+0x3c>)
 800fd50:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd54:	9105      	str	r1, [sp, #20]
 800fd56:	6800      	ldr	r0, [r0, #0]
 800fd58:	9301      	str	r3, [sp, #4]
 800fd5a:	a902      	add	r1, sp, #8
 800fd5c:	f002 f94e 	bl	8011ffc <_svfiprintf_r>
 800fd60:	9b02      	ldr	r3, [sp, #8]
 800fd62:	2200      	movs	r2, #0
 800fd64:	701a      	strb	r2, [r3, #0]
 800fd66:	b01c      	add	sp, #112	@ 0x70
 800fd68:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd6c:	b003      	add	sp, #12
 800fd6e:	4770      	bx	lr
 800fd70:	2000021c 	.word	0x2000021c
 800fd74:	ffff0208 	.word	0xffff0208

0800fd78 <__sread>:
 800fd78:	b510      	push	{r4, lr}
 800fd7a:	460c      	mov	r4, r1
 800fd7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd80:	f000 f89e 	bl	800fec0 <_read_r>
 800fd84:	2800      	cmp	r0, #0
 800fd86:	bfab      	itete	ge
 800fd88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fd8a:	89a3      	ldrhlt	r3, [r4, #12]
 800fd8c:	181b      	addge	r3, r3, r0
 800fd8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fd92:	bfac      	ite	ge
 800fd94:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fd96:	81a3      	strhlt	r3, [r4, #12]
 800fd98:	bd10      	pop	{r4, pc}

0800fd9a <__swrite>:
 800fd9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd9e:	461f      	mov	r7, r3
 800fda0:	898b      	ldrh	r3, [r1, #12]
 800fda2:	05db      	lsls	r3, r3, #23
 800fda4:	4605      	mov	r5, r0
 800fda6:	460c      	mov	r4, r1
 800fda8:	4616      	mov	r6, r2
 800fdaa:	d505      	bpl.n	800fdb8 <__swrite+0x1e>
 800fdac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdb0:	2302      	movs	r3, #2
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	f000 f872 	bl	800fe9c <_lseek_r>
 800fdb8:	89a3      	ldrh	r3, [r4, #12]
 800fdba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fdc2:	81a3      	strh	r3, [r4, #12]
 800fdc4:	4632      	mov	r2, r6
 800fdc6:	463b      	mov	r3, r7
 800fdc8:	4628      	mov	r0, r5
 800fdca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdce:	f000 b889 	b.w	800fee4 <_write_r>

0800fdd2 <__sseek>:
 800fdd2:	b510      	push	{r4, lr}
 800fdd4:	460c      	mov	r4, r1
 800fdd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdda:	f000 f85f 	bl	800fe9c <_lseek_r>
 800fdde:	1c43      	adds	r3, r0, #1
 800fde0:	89a3      	ldrh	r3, [r4, #12]
 800fde2:	bf15      	itete	ne
 800fde4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fde6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fdea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fdee:	81a3      	strheq	r3, [r4, #12]
 800fdf0:	bf18      	it	ne
 800fdf2:	81a3      	strhne	r3, [r4, #12]
 800fdf4:	bd10      	pop	{r4, pc}

0800fdf6 <__sclose>:
 800fdf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdfa:	f000 b83f 	b.w	800fe7c <_close_r>
	...

0800fe00 <_vsiprintf_r>:
 800fe00:	b500      	push	{lr}
 800fe02:	b09b      	sub	sp, #108	@ 0x6c
 800fe04:	9100      	str	r1, [sp, #0]
 800fe06:	9104      	str	r1, [sp, #16]
 800fe08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fe0c:	9105      	str	r1, [sp, #20]
 800fe0e:	9102      	str	r1, [sp, #8]
 800fe10:	4905      	ldr	r1, [pc, #20]	@ (800fe28 <_vsiprintf_r+0x28>)
 800fe12:	9103      	str	r1, [sp, #12]
 800fe14:	4669      	mov	r1, sp
 800fe16:	f002 f8f1 	bl	8011ffc <_svfiprintf_r>
 800fe1a:	9b00      	ldr	r3, [sp, #0]
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	701a      	strb	r2, [r3, #0]
 800fe20:	b01b      	add	sp, #108	@ 0x6c
 800fe22:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe26:	bf00      	nop
 800fe28:	ffff0208 	.word	0xffff0208

0800fe2c <vsiprintf>:
 800fe2c:	4613      	mov	r3, r2
 800fe2e:	460a      	mov	r2, r1
 800fe30:	4601      	mov	r1, r0
 800fe32:	4802      	ldr	r0, [pc, #8]	@ (800fe3c <vsiprintf+0x10>)
 800fe34:	6800      	ldr	r0, [r0, #0]
 800fe36:	f7ff bfe3 	b.w	800fe00 <_vsiprintf_r>
 800fe3a:	bf00      	nop
 800fe3c:	2000021c 	.word	0x2000021c

0800fe40 <memset>:
 800fe40:	4402      	add	r2, r0
 800fe42:	4603      	mov	r3, r0
 800fe44:	4293      	cmp	r3, r2
 800fe46:	d100      	bne.n	800fe4a <memset+0xa>
 800fe48:	4770      	bx	lr
 800fe4a:	f803 1b01 	strb.w	r1, [r3], #1
 800fe4e:	e7f9      	b.n	800fe44 <memset+0x4>

0800fe50 <strncmp>:
 800fe50:	b510      	push	{r4, lr}
 800fe52:	b16a      	cbz	r2, 800fe70 <strncmp+0x20>
 800fe54:	3901      	subs	r1, #1
 800fe56:	1884      	adds	r4, r0, r2
 800fe58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fe60:	429a      	cmp	r2, r3
 800fe62:	d103      	bne.n	800fe6c <strncmp+0x1c>
 800fe64:	42a0      	cmp	r0, r4
 800fe66:	d001      	beq.n	800fe6c <strncmp+0x1c>
 800fe68:	2a00      	cmp	r2, #0
 800fe6a:	d1f5      	bne.n	800fe58 <strncmp+0x8>
 800fe6c:	1ad0      	subs	r0, r2, r3
 800fe6e:	bd10      	pop	{r4, pc}
 800fe70:	4610      	mov	r0, r2
 800fe72:	e7fc      	b.n	800fe6e <strncmp+0x1e>

0800fe74 <_localeconv_r>:
 800fe74:	4800      	ldr	r0, [pc, #0]	@ (800fe78 <_localeconv_r+0x4>)
 800fe76:	4770      	bx	lr
 800fe78:	200001a0 	.word	0x200001a0

0800fe7c <_close_r>:
 800fe7c:	b538      	push	{r3, r4, r5, lr}
 800fe7e:	4d06      	ldr	r5, [pc, #24]	@ (800fe98 <_close_r+0x1c>)
 800fe80:	2300      	movs	r3, #0
 800fe82:	4604      	mov	r4, r0
 800fe84:	4608      	mov	r0, r1
 800fe86:	602b      	str	r3, [r5, #0]
 800fe88:	f7f1 ff02 	bl	8001c90 <_close>
 800fe8c:	1c43      	adds	r3, r0, #1
 800fe8e:	d102      	bne.n	800fe96 <_close_r+0x1a>
 800fe90:	682b      	ldr	r3, [r5, #0]
 800fe92:	b103      	cbz	r3, 800fe96 <_close_r+0x1a>
 800fe94:	6023      	str	r3, [r4, #0]
 800fe96:	bd38      	pop	{r3, r4, r5, pc}
 800fe98:	20000d58 	.word	0x20000d58

0800fe9c <_lseek_r>:
 800fe9c:	b538      	push	{r3, r4, r5, lr}
 800fe9e:	4d07      	ldr	r5, [pc, #28]	@ (800febc <_lseek_r+0x20>)
 800fea0:	4604      	mov	r4, r0
 800fea2:	4608      	mov	r0, r1
 800fea4:	4611      	mov	r1, r2
 800fea6:	2200      	movs	r2, #0
 800fea8:	602a      	str	r2, [r5, #0]
 800feaa:	461a      	mov	r2, r3
 800feac:	f7f1 ff17 	bl	8001cde <_lseek>
 800feb0:	1c43      	adds	r3, r0, #1
 800feb2:	d102      	bne.n	800feba <_lseek_r+0x1e>
 800feb4:	682b      	ldr	r3, [r5, #0]
 800feb6:	b103      	cbz	r3, 800feba <_lseek_r+0x1e>
 800feb8:	6023      	str	r3, [r4, #0]
 800feba:	bd38      	pop	{r3, r4, r5, pc}
 800febc:	20000d58 	.word	0x20000d58

0800fec0 <_read_r>:
 800fec0:	b538      	push	{r3, r4, r5, lr}
 800fec2:	4d07      	ldr	r5, [pc, #28]	@ (800fee0 <_read_r+0x20>)
 800fec4:	4604      	mov	r4, r0
 800fec6:	4608      	mov	r0, r1
 800fec8:	4611      	mov	r1, r2
 800feca:	2200      	movs	r2, #0
 800fecc:	602a      	str	r2, [r5, #0]
 800fece:	461a      	mov	r2, r3
 800fed0:	f7f1 fea5 	bl	8001c1e <_read>
 800fed4:	1c43      	adds	r3, r0, #1
 800fed6:	d102      	bne.n	800fede <_read_r+0x1e>
 800fed8:	682b      	ldr	r3, [r5, #0]
 800feda:	b103      	cbz	r3, 800fede <_read_r+0x1e>
 800fedc:	6023      	str	r3, [r4, #0]
 800fede:	bd38      	pop	{r3, r4, r5, pc}
 800fee0:	20000d58 	.word	0x20000d58

0800fee4 <_write_r>:
 800fee4:	b538      	push	{r3, r4, r5, lr}
 800fee6:	4d07      	ldr	r5, [pc, #28]	@ (800ff04 <_write_r+0x20>)
 800fee8:	4604      	mov	r4, r0
 800feea:	4608      	mov	r0, r1
 800feec:	4611      	mov	r1, r2
 800feee:	2200      	movs	r2, #0
 800fef0:	602a      	str	r2, [r5, #0]
 800fef2:	461a      	mov	r2, r3
 800fef4:	f7f1 feb0 	bl	8001c58 <_write>
 800fef8:	1c43      	adds	r3, r0, #1
 800fefa:	d102      	bne.n	800ff02 <_write_r+0x1e>
 800fefc:	682b      	ldr	r3, [r5, #0]
 800fefe:	b103      	cbz	r3, 800ff02 <_write_r+0x1e>
 800ff00:	6023      	str	r3, [r4, #0]
 800ff02:	bd38      	pop	{r3, r4, r5, pc}
 800ff04:	20000d58 	.word	0x20000d58

0800ff08 <__errno>:
 800ff08:	4b01      	ldr	r3, [pc, #4]	@ (800ff10 <__errno+0x8>)
 800ff0a:	6818      	ldr	r0, [r3, #0]
 800ff0c:	4770      	bx	lr
 800ff0e:	bf00      	nop
 800ff10:	2000021c 	.word	0x2000021c

0800ff14 <__libc_init_array>:
 800ff14:	b570      	push	{r4, r5, r6, lr}
 800ff16:	4d0d      	ldr	r5, [pc, #52]	@ (800ff4c <__libc_init_array+0x38>)
 800ff18:	4c0d      	ldr	r4, [pc, #52]	@ (800ff50 <__libc_init_array+0x3c>)
 800ff1a:	1b64      	subs	r4, r4, r5
 800ff1c:	10a4      	asrs	r4, r4, #2
 800ff1e:	2600      	movs	r6, #0
 800ff20:	42a6      	cmp	r6, r4
 800ff22:	d109      	bne.n	800ff38 <__libc_init_array+0x24>
 800ff24:	4d0b      	ldr	r5, [pc, #44]	@ (800ff54 <__libc_init_array+0x40>)
 800ff26:	4c0c      	ldr	r4, [pc, #48]	@ (800ff58 <__libc_init_array+0x44>)
 800ff28:	f003 fc36 	bl	8013798 <_init>
 800ff2c:	1b64      	subs	r4, r4, r5
 800ff2e:	10a4      	asrs	r4, r4, #2
 800ff30:	2600      	movs	r6, #0
 800ff32:	42a6      	cmp	r6, r4
 800ff34:	d105      	bne.n	800ff42 <__libc_init_array+0x2e>
 800ff36:	bd70      	pop	{r4, r5, r6, pc}
 800ff38:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff3c:	4798      	blx	r3
 800ff3e:	3601      	adds	r6, #1
 800ff40:	e7ee      	b.n	800ff20 <__libc_init_array+0xc>
 800ff42:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff46:	4798      	blx	r3
 800ff48:	3601      	adds	r6, #1
 800ff4a:	e7f2      	b.n	800ff32 <__libc_init_array+0x1e>
 800ff4c:	08013e08 	.word	0x08013e08
 800ff50:	08013e08 	.word	0x08013e08
 800ff54:	08013e08 	.word	0x08013e08
 800ff58:	08013e0c 	.word	0x08013e0c

0800ff5c <__retarget_lock_init_recursive>:
 800ff5c:	4770      	bx	lr

0800ff5e <__retarget_lock_acquire_recursive>:
 800ff5e:	4770      	bx	lr

0800ff60 <__retarget_lock_release_recursive>:
 800ff60:	4770      	bx	lr

0800ff62 <memcpy>:
 800ff62:	440a      	add	r2, r1
 800ff64:	4291      	cmp	r1, r2
 800ff66:	f100 33ff 	add.w	r3, r0, #4294967295
 800ff6a:	d100      	bne.n	800ff6e <memcpy+0xc>
 800ff6c:	4770      	bx	lr
 800ff6e:	b510      	push	{r4, lr}
 800ff70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff78:	4291      	cmp	r1, r2
 800ff7a:	d1f9      	bne.n	800ff70 <memcpy+0xe>
 800ff7c:	bd10      	pop	{r4, pc}
	...

0800ff80 <nan>:
 800ff80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ff88 <nan+0x8>
 800ff84:	4770      	bx	lr
 800ff86:	bf00      	nop
 800ff88:	00000000 	.word	0x00000000
 800ff8c:	7ff80000 	.word	0x7ff80000

0800ff90 <nanf>:
 800ff90:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ff98 <nanf+0x8>
 800ff94:	4770      	bx	lr
 800ff96:	bf00      	nop
 800ff98:	7fc00000 	.word	0x7fc00000

0800ff9c <quorem>:
 800ff9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa0:	6903      	ldr	r3, [r0, #16]
 800ffa2:	690c      	ldr	r4, [r1, #16]
 800ffa4:	42a3      	cmp	r3, r4
 800ffa6:	4607      	mov	r7, r0
 800ffa8:	db7e      	blt.n	80100a8 <quorem+0x10c>
 800ffaa:	3c01      	subs	r4, #1
 800ffac:	f101 0814 	add.w	r8, r1, #20
 800ffb0:	00a3      	lsls	r3, r4, #2
 800ffb2:	f100 0514 	add.w	r5, r0, #20
 800ffb6:	9300      	str	r3, [sp, #0]
 800ffb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ffbc:	9301      	str	r3, [sp, #4]
 800ffbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ffc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ffce:	fbb2 f6f3 	udiv	r6, r2, r3
 800ffd2:	d32e      	bcc.n	8010032 <quorem+0x96>
 800ffd4:	f04f 0a00 	mov.w	sl, #0
 800ffd8:	46c4      	mov	ip, r8
 800ffda:	46ae      	mov	lr, r5
 800ffdc:	46d3      	mov	fp, sl
 800ffde:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ffe2:	b298      	uxth	r0, r3
 800ffe4:	fb06 a000 	mla	r0, r6, r0, sl
 800ffe8:	0c02      	lsrs	r2, r0, #16
 800ffea:	0c1b      	lsrs	r3, r3, #16
 800ffec:	fb06 2303 	mla	r3, r6, r3, r2
 800fff0:	f8de 2000 	ldr.w	r2, [lr]
 800fff4:	b280      	uxth	r0, r0
 800fff6:	b292      	uxth	r2, r2
 800fff8:	1a12      	subs	r2, r2, r0
 800fffa:	445a      	add	r2, fp
 800fffc:	f8de 0000 	ldr.w	r0, [lr]
 8010000:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010004:	b29b      	uxth	r3, r3
 8010006:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801000a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801000e:	b292      	uxth	r2, r2
 8010010:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010014:	45e1      	cmp	r9, ip
 8010016:	f84e 2b04 	str.w	r2, [lr], #4
 801001a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801001e:	d2de      	bcs.n	800ffde <quorem+0x42>
 8010020:	9b00      	ldr	r3, [sp, #0]
 8010022:	58eb      	ldr	r3, [r5, r3]
 8010024:	b92b      	cbnz	r3, 8010032 <quorem+0x96>
 8010026:	9b01      	ldr	r3, [sp, #4]
 8010028:	3b04      	subs	r3, #4
 801002a:	429d      	cmp	r5, r3
 801002c:	461a      	mov	r2, r3
 801002e:	d32f      	bcc.n	8010090 <quorem+0xf4>
 8010030:	613c      	str	r4, [r7, #16]
 8010032:	4638      	mov	r0, r7
 8010034:	f001 fd10 	bl	8011a58 <__mcmp>
 8010038:	2800      	cmp	r0, #0
 801003a:	db25      	blt.n	8010088 <quorem+0xec>
 801003c:	4629      	mov	r1, r5
 801003e:	2000      	movs	r0, #0
 8010040:	f858 2b04 	ldr.w	r2, [r8], #4
 8010044:	f8d1 c000 	ldr.w	ip, [r1]
 8010048:	fa1f fe82 	uxth.w	lr, r2
 801004c:	fa1f f38c 	uxth.w	r3, ip
 8010050:	eba3 030e 	sub.w	r3, r3, lr
 8010054:	4403      	add	r3, r0
 8010056:	0c12      	lsrs	r2, r2, #16
 8010058:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801005c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010060:	b29b      	uxth	r3, r3
 8010062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010066:	45c1      	cmp	r9, r8
 8010068:	f841 3b04 	str.w	r3, [r1], #4
 801006c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010070:	d2e6      	bcs.n	8010040 <quorem+0xa4>
 8010072:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010076:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801007a:	b922      	cbnz	r2, 8010086 <quorem+0xea>
 801007c:	3b04      	subs	r3, #4
 801007e:	429d      	cmp	r5, r3
 8010080:	461a      	mov	r2, r3
 8010082:	d30b      	bcc.n	801009c <quorem+0x100>
 8010084:	613c      	str	r4, [r7, #16]
 8010086:	3601      	adds	r6, #1
 8010088:	4630      	mov	r0, r6
 801008a:	b003      	add	sp, #12
 801008c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010090:	6812      	ldr	r2, [r2, #0]
 8010092:	3b04      	subs	r3, #4
 8010094:	2a00      	cmp	r2, #0
 8010096:	d1cb      	bne.n	8010030 <quorem+0x94>
 8010098:	3c01      	subs	r4, #1
 801009a:	e7c6      	b.n	801002a <quorem+0x8e>
 801009c:	6812      	ldr	r2, [r2, #0]
 801009e:	3b04      	subs	r3, #4
 80100a0:	2a00      	cmp	r2, #0
 80100a2:	d1ef      	bne.n	8010084 <quorem+0xe8>
 80100a4:	3c01      	subs	r4, #1
 80100a6:	e7ea      	b.n	801007e <quorem+0xe2>
 80100a8:	2000      	movs	r0, #0
 80100aa:	e7ee      	b.n	801008a <quorem+0xee>
 80100ac:	0000      	movs	r0, r0
	...

080100b0 <_dtoa_r>:
 80100b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b4:	69c7      	ldr	r7, [r0, #28]
 80100b6:	b099      	sub	sp, #100	@ 0x64
 80100b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80100bc:	ec55 4b10 	vmov	r4, r5, d0
 80100c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80100c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80100c4:	4683      	mov	fp, r0
 80100c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80100c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80100ca:	b97f      	cbnz	r7, 80100ec <_dtoa_r+0x3c>
 80100cc:	2010      	movs	r0, #16
 80100ce:	f001 f937 	bl	8011340 <malloc>
 80100d2:	4602      	mov	r2, r0
 80100d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80100d8:	b920      	cbnz	r0, 80100e4 <_dtoa_r+0x34>
 80100da:	4ba7      	ldr	r3, [pc, #668]	@ (8010378 <_dtoa_r+0x2c8>)
 80100dc:	21ef      	movs	r1, #239	@ 0xef
 80100de:	48a7      	ldr	r0, [pc, #668]	@ (801037c <_dtoa_r+0x2cc>)
 80100e0:	f002 f95e 	bl	80123a0 <__assert_func>
 80100e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80100e8:	6007      	str	r7, [r0, #0]
 80100ea:	60c7      	str	r7, [r0, #12]
 80100ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80100f0:	6819      	ldr	r1, [r3, #0]
 80100f2:	b159      	cbz	r1, 801010c <_dtoa_r+0x5c>
 80100f4:	685a      	ldr	r2, [r3, #4]
 80100f6:	604a      	str	r2, [r1, #4]
 80100f8:	2301      	movs	r3, #1
 80100fa:	4093      	lsls	r3, r2
 80100fc:	608b      	str	r3, [r1, #8]
 80100fe:	4658      	mov	r0, fp
 8010100:	f001 fa26 	bl	8011550 <_Bfree>
 8010104:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010108:	2200      	movs	r2, #0
 801010a:	601a      	str	r2, [r3, #0]
 801010c:	1e2b      	subs	r3, r5, #0
 801010e:	bfb9      	ittee	lt
 8010110:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010114:	9303      	strlt	r3, [sp, #12]
 8010116:	2300      	movge	r3, #0
 8010118:	6033      	strge	r3, [r6, #0]
 801011a:	9f03      	ldr	r7, [sp, #12]
 801011c:	4b98      	ldr	r3, [pc, #608]	@ (8010380 <_dtoa_r+0x2d0>)
 801011e:	bfbc      	itt	lt
 8010120:	2201      	movlt	r2, #1
 8010122:	6032      	strlt	r2, [r6, #0]
 8010124:	43bb      	bics	r3, r7
 8010126:	d112      	bne.n	801014e <_dtoa_r+0x9e>
 8010128:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801012a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801012e:	6013      	str	r3, [r2, #0]
 8010130:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010134:	4323      	orrs	r3, r4
 8010136:	f000 854d 	beq.w	8010bd4 <_dtoa_r+0xb24>
 801013a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801013c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010394 <_dtoa_r+0x2e4>
 8010140:	2b00      	cmp	r3, #0
 8010142:	f000 854f 	beq.w	8010be4 <_dtoa_r+0xb34>
 8010146:	f10a 0303 	add.w	r3, sl, #3
 801014a:	f000 bd49 	b.w	8010be0 <_dtoa_r+0xb30>
 801014e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010152:	2200      	movs	r2, #0
 8010154:	ec51 0b17 	vmov	r0, r1, d7
 8010158:	2300      	movs	r3, #0
 801015a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801015e:	f7f0 fcdb 	bl	8000b18 <__aeabi_dcmpeq>
 8010162:	4680      	mov	r8, r0
 8010164:	b158      	cbz	r0, 801017e <_dtoa_r+0xce>
 8010166:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010168:	2301      	movs	r3, #1
 801016a:	6013      	str	r3, [r2, #0]
 801016c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801016e:	b113      	cbz	r3, 8010176 <_dtoa_r+0xc6>
 8010170:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010172:	4b84      	ldr	r3, [pc, #528]	@ (8010384 <_dtoa_r+0x2d4>)
 8010174:	6013      	str	r3, [r2, #0]
 8010176:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010398 <_dtoa_r+0x2e8>
 801017a:	f000 bd33 	b.w	8010be4 <_dtoa_r+0xb34>
 801017e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010182:	aa16      	add	r2, sp, #88	@ 0x58
 8010184:	a917      	add	r1, sp, #92	@ 0x5c
 8010186:	4658      	mov	r0, fp
 8010188:	f001 fd86 	bl	8011c98 <__d2b>
 801018c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010190:	4681      	mov	r9, r0
 8010192:	2e00      	cmp	r6, #0
 8010194:	d077      	beq.n	8010286 <_dtoa_r+0x1d6>
 8010196:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010198:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801019c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80101a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80101a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80101a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80101ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80101b0:	4619      	mov	r1, r3
 80101b2:	2200      	movs	r2, #0
 80101b4:	4b74      	ldr	r3, [pc, #464]	@ (8010388 <_dtoa_r+0x2d8>)
 80101b6:	f7f0 f88f 	bl	80002d8 <__aeabi_dsub>
 80101ba:	a369      	add	r3, pc, #420	@ (adr r3, 8010360 <_dtoa_r+0x2b0>)
 80101bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c0:	f7f0 fa42 	bl	8000648 <__aeabi_dmul>
 80101c4:	a368      	add	r3, pc, #416	@ (adr r3, 8010368 <_dtoa_r+0x2b8>)
 80101c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ca:	f7f0 f887 	bl	80002dc <__adddf3>
 80101ce:	4604      	mov	r4, r0
 80101d0:	4630      	mov	r0, r6
 80101d2:	460d      	mov	r5, r1
 80101d4:	f7f0 f9ce 	bl	8000574 <__aeabi_i2d>
 80101d8:	a365      	add	r3, pc, #404	@ (adr r3, 8010370 <_dtoa_r+0x2c0>)
 80101da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101de:	f7f0 fa33 	bl	8000648 <__aeabi_dmul>
 80101e2:	4602      	mov	r2, r0
 80101e4:	460b      	mov	r3, r1
 80101e6:	4620      	mov	r0, r4
 80101e8:	4629      	mov	r1, r5
 80101ea:	f7f0 f877 	bl	80002dc <__adddf3>
 80101ee:	4604      	mov	r4, r0
 80101f0:	460d      	mov	r5, r1
 80101f2:	f7f0 fcd9 	bl	8000ba8 <__aeabi_d2iz>
 80101f6:	2200      	movs	r2, #0
 80101f8:	4607      	mov	r7, r0
 80101fa:	2300      	movs	r3, #0
 80101fc:	4620      	mov	r0, r4
 80101fe:	4629      	mov	r1, r5
 8010200:	f7f0 fc94 	bl	8000b2c <__aeabi_dcmplt>
 8010204:	b140      	cbz	r0, 8010218 <_dtoa_r+0x168>
 8010206:	4638      	mov	r0, r7
 8010208:	f7f0 f9b4 	bl	8000574 <__aeabi_i2d>
 801020c:	4622      	mov	r2, r4
 801020e:	462b      	mov	r3, r5
 8010210:	f7f0 fc82 	bl	8000b18 <__aeabi_dcmpeq>
 8010214:	b900      	cbnz	r0, 8010218 <_dtoa_r+0x168>
 8010216:	3f01      	subs	r7, #1
 8010218:	2f16      	cmp	r7, #22
 801021a:	d851      	bhi.n	80102c0 <_dtoa_r+0x210>
 801021c:	4b5b      	ldr	r3, [pc, #364]	@ (801038c <_dtoa_r+0x2dc>)
 801021e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010226:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801022a:	f7f0 fc7f 	bl	8000b2c <__aeabi_dcmplt>
 801022e:	2800      	cmp	r0, #0
 8010230:	d048      	beq.n	80102c4 <_dtoa_r+0x214>
 8010232:	3f01      	subs	r7, #1
 8010234:	2300      	movs	r3, #0
 8010236:	9312      	str	r3, [sp, #72]	@ 0x48
 8010238:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801023a:	1b9b      	subs	r3, r3, r6
 801023c:	1e5a      	subs	r2, r3, #1
 801023e:	bf44      	itt	mi
 8010240:	f1c3 0801 	rsbmi	r8, r3, #1
 8010244:	2300      	movmi	r3, #0
 8010246:	9208      	str	r2, [sp, #32]
 8010248:	bf54      	ite	pl
 801024a:	f04f 0800 	movpl.w	r8, #0
 801024e:	9308      	strmi	r3, [sp, #32]
 8010250:	2f00      	cmp	r7, #0
 8010252:	db39      	blt.n	80102c8 <_dtoa_r+0x218>
 8010254:	9b08      	ldr	r3, [sp, #32]
 8010256:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010258:	443b      	add	r3, r7
 801025a:	9308      	str	r3, [sp, #32]
 801025c:	2300      	movs	r3, #0
 801025e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010262:	2b09      	cmp	r3, #9
 8010264:	d864      	bhi.n	8010330 <_dtoa_r+0x280>
 8010266:	2b05      	cmp	r3, #5
 8010268:	bfc4      	itt	gt
 801026a:	3b04      	subgt	r3, #4
 801026c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801026e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010270:	f1a3 0302 	sub.w	r3, r3, #2
 8010274:	bfcc      	ite	gt
 8010276:	2400      	movgt	r4, #0
 8010278:	2401      	movle	r4, #1
 801027a:	2b03      	cmp	r3, #3
 801027c:	d863      	bhi.n	8010346 <_dtoa_r+0x296>
 801027e:	e8df f003 	tbb	[pc, r3]
 8010282:	372a      	.short	0x372a
 8010284:	5535      	.short	0x5535
 8010286:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801028a:	441e      	add	r6, r3
 801028c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010290:	2b20      	cmp	r3, #32
 8010292:	bfc1      	itttt	gt
 8010294:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010298:	409f      	lslgt	r7, r3
 801029a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801029e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80102a2:	bfd6      	itet	le
 80102a4:	f1c3 0320 	rsble	r3, r3, #32
 80102a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80102ac:	fa04 f003 	lslle.w	r0, r4, r3
 80102b0:	f7f0 f950 	bl	8000554 <__aeabi_ui2d>
 80102b4:	2201      	movs	r2, #1
 80102b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80102ba:	3e01      	subs	r6, #1
 80102bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80102be:	e777      	b.n	80101b0 <_dtoa_r+0x100>
 80102c0:	2301      	movs	r3, #1
 80102c2:	e7b8      	b.n	8010236 <_dtoa_r+0x186>
 80102c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80102c6:	e7b7      	b.n	8010238 <_dtoa_r+0x188>
 80102c8:	427b      	negs	r3, r7
 80102ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80102cc:	2300      	movs	r3, #0
 80102ce:	eba8 0807 	sub.w	r8, r8, r7
 80102d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80102d4:	e7c4      	b.n	8010260 <_dtoa_r+0x1b0>
 80102d6:	2300      	movs	r3, #0
 80102d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80102da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102dc:	2b00      	cmp	r3, #0
 80102de:	dc35      	bgt.n	801034c <_dtoa_r+0x29c>
 80102e0:	2301      	movs	r3, #1
 80102e2:	9300      	str	r3, [sp, #0]
 80102e4:	9307      	str	r3, [sp, #28]
 80102e6:	461a      	mov	r2, r3
 80102e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80102ea:	e00b      	b.n	8010304 <_dtoa_r+0x254>
 80102ec:	2301      	movs	r3, #1
 80102ee:	e7f3      	b.n	80102d8 <_dtoa_r+0x228>
 80102f0:	2300      	movs	r3, #0
 80102f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80102f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102f6:	18fb      	adds	r3, r7, r3
 80102f8:	9300      	str	r3, [sp, #0]
 80102fa:	3301      	adds	r3, #1
 80102fc:	2b01      	cmp	r3, #1
 80102fe:	9307      	str	r3, [sp, #28]
 8010300:	bfb8      	it	lt
 8010302:	2301      	movlt	r3, #1
 8010304:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010308:	2100      	movs	r1, #0
 801030a:	2204      	movs	r2, #4
 801030c:	f102 0514 	add.w	r5, r2, #20
 8010310:	429d      	cmp	r5, r3
 8010312:	d91f      	bls.n	8010354 <_dtoa_r+0x2a4>
 8010314:	6041      	str	r1, [r0, #4]
 8010316:	4658      	mov	r0, fp
 8010318:	f001 f8da 	bl	80114d0 <_Balloc>
 801031c:	4682      	mov	sl, r0
 801031e:	2800      	cmp	r0, #0
 8010320:	d13c      	bne.n	801039c <_dtoa_r+0x2ec>
 8010322:	4b1b      	ldr	r3, [pc, #108]	@ (8010390 <_dtoa_r+0x2e0>)
 8010324:	4602      	mov	r2, r0
 8010326:	f240 11af 	movw	r1, #431	@ 0x1af
 801032a:	e6d8      	b.n	80100de <_dtoa_r+0x2e>
 801032c:	2301      	movs	r3, #1
 801032e:	e7e0      	b.n	80102f2 <_dtoa_r+0x242>
 8010330:	2401      	movs	r4, #1
 8010332:	2300      	movs	r3, #0
 8010334:	9309      	str	r3, [sp, #36]	@ 0x24
 8010336:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010338:	f04f 33ff 	mov.w	r3, #4294967295
 801033c:	9300      	str	r3, [sp, #0]
 801033e:	9307      	str	r3, [sp, #28]
 8010340:	2200      	movs	r2, #0
 8010342:	2312      	movs	r3, #18
 8010344:	e7d0      	b.n	80102e8 <_dtoa_r+0x238>
 8010346:	2301      	movs	r3, #1
 8010348:	930b      	str	r3, [sp, #44]	@ 0x2c
 801034a:	e7f5      	b.n	8010338 <_dtoa_r+0x288>
 801034c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801034e:	9300      	str	r3, [sp, #0]
 8010350:	9307      	str	r3, [sp, #28]
 8010352:	e7d7      	b.n	8010304 <_dtoa_r+0x254>
 8010354:	3101      	adds	r1, #1
 8010356:	0052      	lsls	r2, r2, #1
 8010358:	e7d8      	b.n	801030c <_dtoa_r+0x25c>
 801035a:	bf00      	nop
 801035c:	f3af 8000 	nop.w
 8010360:	636f4361 	.word	0x636f4361
 8010364:	3fd287a7 	.word	0x3fd287a7
 8010368:	8b60c8b3 	.word	0x8b60c8b3
 801036c:	3fc68a28 	.word	0x3fc68a28
 8010370:	509f79fb 	.word	0x509f79fb
 8010374:	3fd34413 	.word	0x3fd34413
 8010378:	080139f6 	.word	0x080139f6
 801037c:	08013a0d 	.word	0x08013a0d
 8010380:	7ff00000 	.word	0x7ff00000
 8010384:	080139b9 	.word	0x080139b9
 8010388:	3ff80000 	.word	0x3ff80000
 801038c:	08013b68 	.word	0x08013b68
 8010390:	08013a65 	.word	0x08013a65
 8010394:	080139f2 	.word	0x080139f2
 8010398:	080139b8 	.word	0x080139b8
 801039c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80103a0:	6018      	str	r0, [r3, #0]
 80103a2:	9b07      	ldr	r3, [sp, #28]
 80103a4:	2b0e      	cmp	r3, #14
 80103a6:	f200 80a4 	bhi.w	80104f2 <_dtoa_r+0x442>
 80103aa:	2c00      	cmp	r4, #0
 80103ac:	f000 80a1 	beq.w	80104f2 <_dtoa_r+0x442>
 80103b0:	2f00      	cmp	r7, #0
 80103b2:	dd33      	ble.n	801041c <_dtoa_r+0x36c>
 80103b4:	4bad      	ldr	r3, [pc, #692]	@ (801066c <_dtoa_r+0x5bc>)
 80103b6:	f007 020f 	and.w	r2, r7, #15
 80103ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80103be:	ed93 7b00 	vldr	d7, [r3]
 80103c2:	05f8      	lsls	r0, r7, #23
 80103c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80103c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80103cc:	d516      	bpl.n	80103fc <_dtoa_r+0x34c>
 80103ce:	4ba8      	ldr	r3, [pc, #672]	@ (8010670 <_dtoa_r+0x5c0>)
 80103d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80103d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80103d8:	f7f0 fa60 	bl	800089c <__aeabi_ddiv>
 80103dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103e0:	f004 040f 	and.w	r4, r4, #15
 80103e4:	2603      	movs	r6, #3
 80103e6:	4da2      	ldr	r5, [pc, #648]	@ (8010670 <_dtoa_r+0x5c0>)
 80103e8:	b954      	cbnz	r4, 8010400 <_dtoa_r+0x350>
 80103ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103f2:	f7f0 fa53 	bl	800089c <__aeabi_ddiv>
 80103f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103fa:	e028      	b.n	801044e <_dtoa_r+0x39e>
 80103fc:	2602      	movs	r6, #2
 80103fe:	e7f2      	b.n	80103e6 <_dtoa_r+0x336>
 8010400:	07e1      	lsls	r1, r4, #31
 8010402:	d508      	bpl.n	8010416 <_dtoa_r+0x366>
 8010404:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010408:	e9d5 2300 	ldrd	r2, r3, [r5]
 801040c:	f7f0 f91c 	bl	8000648 <__aeabi_dmul>
 8010410:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010414:	3601      	adds	r6, #1
 8010416:	1064      	asrs	r4, r4, #1
 8010418:	3508      	adds	r5, #8
 801041a:	e7e5      	b.n	80103e8 <_dtoa_r+0x338>
 801041c:	f000 80d2 	beq.w	80105c4 <_dtoa_r+0x514>
 8010420:	427c      	negs	r4, r7
 8010422:	4b92      	ldr	r3, [pc, #584]	@ (801066c <_dtoa_r+0x5bc>)
 8010424:	4d92      	ldr	r5, [pc, #584]	@ (8010670 <_dtoa_r+0x5c0>)
 8010426:	f004 020f 	and.w	r2, r4, #15
 801042a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801042e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010432:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010436:	f7f0 f907 	bl	8000648 <__aeabi_dmul>
 801043a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801043e:	1124      	asrs	r4, r4, #4
 8010440:	2300      	movs	r3, #0
 8010442:	2602      	movs	r6, #2
 8010444:	2c00      	cmp	r4, #0
 8010446:	f040 80b2 	bne.w	80105ae <_dtoa_r+0x4fe>
 801044a:	2b00      	cmp	r3, #0
 801044c:	d1d3      	bne.n	80103f6 <_dtoa_r+0x346>
 801044e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010450:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010454:	2b00      	cmp	r3, #0
 8010456:	f000 80b7 	beq.w	80105c8 <_dtoa_r+0x518>
 801045a:	4b86      	ldr	r3, [pc, #536]	@ (8010674 <_dtoa_r+0x5c4>)
 801045c:	2200      	movs	r2, #0
 801045e:	4620      	mov	r0, r4
 8010460:	4629      	mov	r1, r5
 8010462:	f7f0 fb63 	bl	8000b2c <__aeabi_dcmplt>
 8010466:	2800      	cmp	r0, #0
 8010468:	f000 80ae 	beq.w	80105c8 <_dtoa_r+0x518>
 801046c:	9b07      	ldr	r3, [sp, #28]
 801046e:	2b00      	cmp	r3, #0
 8010470:	f000 80aa 	beq.w	80105c8 <_dtoa_r+0x518>
 8010474:	9b00      	ldr	r3, [sp, #0]
 8010476:	2b00      	cmp	r3, #0
 8010478:	dd37      	ble.n	80104ea <_dtoa_r+0x43a>
 801047a:	1e7b      	subs	r3, r7, #1
 801047c:	9304      	str	r3, [sp, #16]
 801047e:	4620      	mov	r0, r4
 8010480:	4b7d      	ldr	r3, [pc, #500]	@ (8010678 <_dtoa_r+0x5c8>)
 8010482:	2200      	movs	r2, #0
 8010484:	4629      	mov	r1, r5
 8010486:	f7f0 f8df 	bl	8000648 <__aeabi_dmul>
 801048a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801048e:	9c00      	ldr	r4, [sp, #0]
 8010490:	3601      	adds	r6, #1
 8010492:	4630      	mov	r0, r6
 8010494:	f7f0 f86e 	bl	8000574 <__aeabi_i2d>
 8010498:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801049c:	f7f0 f8d4 	bl	8000648 <__aeabi_dmul>
 80104a0:	4b76      	ldr	r3, [pc, #472]	@ (801067c <_dtoa_r+0x5cc>)
 80104a2:	2200      	movs	r2, #0
 80104a4:	f7ef ff1a 	bl	80002dc <__adddf3>
 80104a8:	4605      	mov	r5, r0
 80104aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80104ae:	2c00      	cmp	r4, #0
 80104b0:	f040 808d 	bne.w	80105ce <_dtoa_r+0x51e>
 80104b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104b8:	4b71      	ldr	r3, [pc, #452]	@ (8010680 <_dtoa_r+0x5d0>)
 80104ba:	2200      	movs	r2, #0
 80104bc:	f7ef ff0c 	bl	80002d8 <__aeabi_dsub>
 80104c0:	4602      	mov	r2, r0
 80104c2:	460b      	mov	r3, r1
 80104c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80104c8:	462a      	mov	r2, r5
 80104ca:	4633      	mov	r3, r6
 80104cc:	f7f0 fb4c 	bl	8000b68 <__aeabi_dcmpgt>
 80104d0:	2800      	cmp	r0, #0
 80104d2:	f040 828b 	bne.w	80109ec <_dtoa_r+0x93c>
 80104d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104da:	462a      	mov	r2, r5
 80104dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80104e0:	f7f0 fb24 	bl	8000b2c <__aeabi_dcmplt>
 80104e4:	2800      	cmp	r0, #0
 80104e6:	f040 8128 	bne.w	801073a <_dtoa_r+0x68a>
 80104ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80104ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80104f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	f2c0 815a 	blt.w	80107ae <_dtoa_r+0x6fe>
 80104fa:	2f0e      	cmp	r7, #14
 80104fc:	f300 8157 	bgt.w	80107ae <_dtoa_r+0x6fe>
 8010500:	4b5a      	ldr	r3, [pc, #360]	@ (801066c <_dtoa_r+0x5bc>)
 8010502:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010506:	ed93 7b00 	vldr	d7, [r3]
 801050a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801050c:	2b00      	cmp	r3, #0
 801050e:	ed8d 7b00 	vstr	d7, [sp]
 8010512:	da03      	bge.n	801051c <_dtoa_r+0x46c>
 8010514:	9b07      	ldr	r3, [sp, #28]
 8010516:	2b00      	cmp	r3, #0
 8010518:	f340 8101 	ble.w	801071e <_dtoa_r+0x66e>
 801051c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010520:	4656      	mov	r6, sl
 8010522:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010526:	4620      	mov	r0, r4
 8010528:	4629      	mov	r1, r5
 801052a:	f7f0 f9b7 	bl	800089c <__aeabi_ddiv>
 801052e:	f7f0 fb3b 	bl	8000ba8 <__aeabi_d2iz>
 8010532:	4680      	mov	r8, r0
 8010534:	f7f0 f81e 	bl	8000574 <__aeabi_i2d>
 8010538:	e9dd 2300 	ldrd	r2, r3, [sp]
 801053c:	f7f0 f884 	bl	8000648 <__aeabi_dmul>
 8010540:	4602      	mov	r2, r0
 8010542:	460b      	mov	r3, r1
 8010544:	4620      	mov	r0, r4
 8010546:	4629      	mov	r1, r5
 8010548:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801054c:	f7ef fec4 	bl	80002d8 <__aeabi_dsub>
 8010550:	f806 4b01 	strb.w	r4, [r6], #1
 8010554:	9d07      	ldr	r5, [sp, #28]
 8010556:	eba6 040a 	sub.w	r4, r6, sl
 801055a:	42a5      	cmp	r5, r4
 801055c:	4602      	mov	r2, r0
 801055e:	460b      	mov	r3, r1
 8010560:	f040 8117 	bne.w	8010792 <_dtoa_r+0x6e2>
 8010564:	f7ef feba 	bl	80002dc <__adddf3>
 8010568:	e9dd 2300 	ldrd	r2, r3, [sp]
 801056c:	4604      	mov	r4, r0
 801056e:	460d      	mov	r5, r1
 8010570:	f7f0 fafa 	bl	8000b68 <__aeabi_dcmpgt>
 8010574:	2800      	cmp	r0, #0
 8010576:	f040 80f9 	bne.w	801076c <_dtoa_r+0x6bc>
 801057a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801057e:	4620      	mov	r0, r4
 8010580:	4629      	mov	r1, r5
 8010582:	f7f0 fac9 	bl	8000b18 <__aeabi_dcmpeq>
 8010586:	b118      	cbz	r0, 8010590 <_dtoa_r+0x4e0>
 8010588:	f018 0f01 	tst.w	r8, #1
 801058c:	f040 80ee 	bne.w	801076c <_dtoa_r+0x6bc>
 8010590:	4649      	mov	r1, r9
 8010592:	4658      	mov	r0, fp
 8010594:	f000 ffdc 	bl	8011550 <_Bfree>
 8010598:	2300      	movs	r3, #0
 801059a:	7033      	strb	r3, [r6, #0]
 801059c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801059e:	3701      	adds	r7, #1
 80105a0:	601f      	str	r7, [r3, #0]
 80105a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	f000 831d 	beq.w	8010be4 <_dtoa_r+0xb34>
 80105aa:	601e      	str	r6, [r3, #0]
 80105ac:	e31a      	b.n	8010be4 <_dtoa_r+0xb34>
 80105ae:	07e2      	lsls	r2, r4, #31
 80105b0:	d505      	bpl.n	80105be <_dtoa_r+0x50e>
 80105b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80105b6:	f7f0 f847 	bl	8000648 <__aeabi_dmul>
 80105ba:	3601      	adds	r6, #1
 80105bc:	2301      	movs	r3, #1
 80105be:	1064      	asrs	r4, r4, #1
 80105c0:	3508      	adds	r5, #8
 80105c2:	e73f      	b.n	8010444 <_dtoa_r+0x394>
 80105c4:	2602      	movs	r6, #2
 80105c6:	e742      	b.n	801044e <_dtoa_r+0x39e>
 80105c8:	9c07      	ldr	r4, [sp, #28]
 80105ca:	9704      	str	r7, [sp, #16]
 80105cc:	e761      	b.n	8010492 <_dtoa_r+0x3e2>
 80105ce:	4b27      	ldr	r3, [pc, #156]	@ (801066c <_dtoa_r+0x5bc>)
 80105d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80105d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80105d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80105da:	4454      	add	r4, sl
 80105dc:	2900      	cmp	r1, #0
 80105de:	d053      	beq.n	8010688 <_dtoa_r+0x5d8>
 80105e0:	4928      	ldr	r1, [pc, #160]	@ (8010684 <_dtoa_r+0x5d4>)
 80105e2:	2000      	movs	r0, #0
 80105e4:	f7f0 f95a 	bl	800089c <__aeabi_ddiv>
 80105e8:	4633      	mov	r3, r6
 80105ea:	462a      	mov	r2, r5
 80105ec:	f7ef fe74 	bl	80002d8 <__aeabi_dsub>
 80105f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80105f4:	4656      	mov	r6, sl
 80105f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105fa:	f7f0 fad5 	bl	8000ba8 <__aeabi_d2iz>
 80105fe:	4605      	mov	r5, r0
 8010600:	f7ef ffb8 	bl	8000574 <__aeabi_i2d>
 8010604:	4602      	mov	r2, r0
 8010606:	460b      	mov	r3, r1
 8010608:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801060c:	f7ef fe64 	bl	80002d8 <__aeabi_dsub>
 8010610:	3530      	adds	r5, #48	@ 0x30
 8010612:	4602      	mov	r2, r0
 8010614:	460b      	mov	r3, r1
 8010616:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801061a:	f806 5b01 	strb.w	r5, [r6], #1
 801061e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010622:	f7f0 fa83 	bl	8000b2c <__aeabi_dcmplt>
 8010626:	2800      	cmp	r0, #0
 8010628:	d171      	bne.n	801070e <_dtoa_r+0x65e>
 801062a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801062e:	4911      	ldr	r1, [pc, #68]	@ (8010674 <_dtoa_r+0x5c4>)
 8010630:	2000      	movs	r0, #0
 8010632:	f7ef fe51 	bl	80002d8 <__aeabi_dsub>
 8010636:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801063a:	f7f0 fa77 	bl	8000b2c <__aeabi_dcmplt>
 801063e:	2800      	cmp	r0, #0
 8010640:	f040 8095 	bne.w	801076e <_dtoa_r+0x6be>
 8010644:	42a6      	cmp	r6, r4
 8010646:	f43f af50 	beq.w	80104ea <_dtoa_r+0x43a>
 801064a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801064e:	4b0a      	ldr	r3, [pc, #40]	@ (8010678 <_dtoa_r+0x5c8>)
 8010650:	2200      	movs	r2, #0
 8010652:	f7ef fff9 	bl	8000648 <__aeabi_dmul>
 8010656:	4b08      	ldr	r3, [pc, #32]	@ (8010678 <_dtoa_r+0x5c8>)
 8010658:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801065c:	2200      	movs	r2, #0
 801065e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010662:	f7ef fff1 	bl	8000648 <__aeabi_dmul>
 8010666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801066a:	e7c4      	b.n	80105f6 <_dtoa_r+0x546>
 801066c:	08013b68 	.word	0x08013b68
 8010670:	08013b40 	.word	0x08013b40
 8010674:	3ff00000 	.word	0x3ff00000
 8010678:	40240000 	.word	0x40240000
 801067c:	401c0000 	.word	0x401c0000
 8010680:	40140000 	.word	0x40140000
 8010684:	3fe00000 	.word	0x3fe00000
 8010688:	4631      	mov	r1, r6
 801068a:	4628      	mov	r0, r5
 801068c:	f7ef ffdc 	bl	8000648 <__aeabi_dmul>
 8010690:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010694:	9415      	str	r4, [sp, #84]	@ 0x54
 8010696:	4656      	mov	r6, sl
 8010698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801069c:	f7f0 fa84 	bl	8000ba8 <__aeabi_d2iz>
 80106a0:	4605      	mov	r5, r0
 80106a2:	f7ef ff67 	bl	8000574 <__aeabi_i2d>
 80106a6:	4602      	mov	r2, r0
 80106a8:	460b      	mov	r3, r1
 80106aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106ae:	f7ef fe13 	bl	80002d8 <__aeabi_dsub>
 80106b2:	3530      	adds	r5, #48	@ 0x30
 80106b4:	f806 5b01 	strb.w	r5, [r6], #1
 80106b8:	4602      	mov	r2, r0
 80106ba:	460b      	mov	r3, r1
 80106bc:	42a6      	cmp	r6, r4
 80106be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80106c2:	f04f 0200 	mov.w	r2, #0
 80106c6:	d124      	bne.n	8010712 <_dtoa_r+0x662>
 80106c8:	4bac      	ldr	r3, [pc, #688]	@ (801097c <_dtoa_r+0x8cc>)
 80106ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80106ce:	f7ef fe05 	bl	80002dc <__adddf3>
 80106d2:	4602      	mov	r2, r0
 80106d4:	460b      	mov	r3, r1
 80106d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106da:	f7f0 fa45 	bl	8000b68 <__aeabi_dcmpgt>
 80106de:	2800      	cmp	r0, #0
 80106e0:	d145      	bne.n	801076e <_dtoa_r+0x6be>
 80106e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80106e6:	49a5      	ldr	r1, [pc, #660]	@ (801097c <_dtoa_r+0x8cc>)
 80106e8:	2000      	movs	r0, #0
 80106ea:	f7ef fdf5 	bl	80002d8 <__aeabi_dsub>
 80106ee:	4602      	mov	r2, r0
 80106f0:	460b      	mov	r3, r1
 80106f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106f6:	f7f0 fa19 	bl	8000b2c <__aeabi_dcmplt>
 80106fa:	2800      	cmp	r0, #0
 80106fc:	f43f aef5 	beq.w	80104ea <_dtoa_r+0x43a>
 8010700:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010702:	1e73      	subs	r3, r6, #1
 8010704:	9315      	str	r3, [sp, #84]	@ 0x54
 8010706:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801070a:	2b30      	cmp	r3, #48	@ 0x30
 801070c:	d0f8      	beq.n	8010700 <_dtoa_r+0x650>
 801070e:	9f04      	ldr	r7, [sp, #16]
 8010710:	e73e      	b.n	8010590 <_dtoa_r+0x4e0>
 8010712:	4b9b      	ldr	r3, [pc, #620]	@ (8010980 <_dtoa_r+0x8d0>)
 8010714:	f7ef ff98 	bl	8000648 <__aeabi_dmul>
 8010718:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801071c:	e7bc      	b.n	8010698 <_dtoa_r+0x5e8>
 801071e:	d10c      	bne.n	801073a <_dtoa_r+0x68a>
 8010720:	4b98      	ldr	r3, [pc, #608]	@ (8010984 <_dtoa_r+0x8d4>)
 8010722:	2200      	movs	r2, #0
 8010724:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010728:	f7ef ff8e 	bl	8000648 <__aeabi_dmul>
 801072c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010730:	f7f0 fa10 	bl	8000b54 <__aeabi_dcmpge>
 8010734:	2800      	cmp	r0, #0
 8010736:	f000 8157 	beq.w	80109e8 <_dtoa_r+0x938>
 801073a:	2400      	movs	r4, #0
 801073c:	4625      	mov	r5, r4
 801073e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010740:	43db      	mvns	r3, r3
 8010742:	9304      	str	r3, [sp, #16]
 8010744:	4656      	mov	r6, sl
 8010746:	2700      	movs	r7, #0
 8010748:	4621      	mov	r1, r4
 801074a:	4658      	mov	r0, fp
 801074c:	f000 ff00 	bl	8011550 <_Bfree>
 8010750:	2d00      	cmp	r5, #0
 8010752:	d0dc      	beq.n	801070e <_dtoa_r+0x65e>
 8010754:	b12f      	cbz	r7, 8010762 <_dtoa_r+0x6b2>
 8010756:	42af      	cmp	r7, r5
 8010758:	d003      	beq.n	8010762 <_dtoa_r+0x6b2>
 801075a:	4639      	mov	r1, r7
 801075c:	4658      	mov	r0, fp
 801075e:	f000 fef7 	bl	8011550 <_Bfree>
 8010762:	4629      	mov	r1, r5
 8010764:	4658      	mov	r0, fp
 8010766:	f000 fef3 	bl	8011550 <_Bfree>
 801076a:	e7d0      	b.n	801070e <_dtoa_r+0x65e>
 801076c:	9704      	str	r7, [sp, #16]
 801076e:	4633      	mov	r3, r6
 8010770:	461e      	mov	r6, r3
 8010772:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010776:	2a39      	cmp	r2, #57	@ 0x39
 8010778:	d107      	bne.n	801078a <_dtoa_r+0x6da>
 801077a:	459a      	cmp	sl, r3
 801077c:	d1f8      	bne.n	8010770 <_dtoa_r+0x6c0>
 801077e:	9a04      	ldr	r2, [sp, #16]
 8010780:	3201      	adds	r2, #1
 8010782:	9204      	str	r2, [sp, #16]
 8010784:	2230      	movs	r2, #48	@ 0x30
 8010786:	f88a 2000 	strb.w	r2, [sl]
 801078a:	781a      	ldrb	r2, [r3, #0]
 801078c:	3201      	adds	r2, #1
 801078e:	701a      	strb	r2, [r3, #0]
 8010790:	e7bd      	b.n	801070e <_dtoa_r+0x65e>
 8010792:	4b7b      	ldr	r3, [pc, #492]	@ (8010980 <_dtoa_r+0x8d0>)
 8010794:	2200      	movs	r2, #0
 8010796:	f7ef ff57 	bl	8000648 <__aeabi_dmul>
 801079a:	2200      	movs	r2, #0
 801079c:	2300      	movs	r3, #0
 801079e:	4604      	mov	r4, r0
 80107a0:	460d      	mov	r5, r1
 80107a2:	f7f0 f9b9 	bl	8000b18 <__aeabi_dcmpeq>
 80107a6:	2800      	cmp	r0, #0
 80107a8:	f43f aebb 	beq.w	8010522 <_dtoa_r+0x472>
 80107ac:	e6f0      	b.n	8010590 <_dtoa_r+0x4e0>
 80107ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80107b0:	2a00      	cmp	r2, #0
 80107b2:	f000 80db 	beq.w	801096c <_dtoa_r+0x8bc>
 80107b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80107b8:	2a01      	cmp	r2, #1
 80107ba:	f300 80bf 	bgt.w	801093c <_dtoa_r+0x88c>
 80107be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80107c0:	2a00      	cmp	r2, #0
 80107c2:	f000 80b7 	beq.w	8010934 <_dtoa_r+0x884>
 80107c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80107ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80107cc:	4646      	mov	r6, r8
 80107ce:	9a08      	ldr	r2, [sp, #32]
 80107d0:	2101      	movs	r1, #1
 80107d2:	441a      	add	r2, r3
 80107d4:	4658      	mov	r0, fp
 80107d6:	4498      	add	r8, r3
 80107d8:	9208      	str	r2, [sp, #32]
 80107da:	f000 ffb7 	bl	801174c <__i2b>
 80107de:	4605      	mov	r5, r0
 80107e0:	b15e      	cbz	r6, 80107fa <_dtoa_r+0x74a>
 80107e2:	9b08      	ldr	r3, [sp, #32]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	dd08      	ble.n	80107fa <_dtoa_r+0x74a>
 80107e8:	42b3      	cmp	r3, r6
 80107ea:	9a08      	ldr	r2, [sp, #32]
 80107ec:	bfa8      	it	ge
 80107ee:	4633      	movge	r3, r6
 80107f0:	eba8 0803 	sub.w	r8, r8, r3
 80107f4:	1af6      	subs	r6, r6, r3
 80107f6:	1ad3      	subs	r3, r2, r3
 80107f8:	9308      	str	r3, [sp, #32]
 80107fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107fc:	b1f3      	cbz	r3, 801083c <_dtoa_r+0x78c>
 80107fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010800:	2b00      	cmp	r3, #0
 8010802:	f000 80b7 	beq.w	8010974 <_dtoa_r+0x8c4>
 8010806:	b18c      	cbz	r4, 801082c <_dtoa_r+0x77c>
 8010808:	4629      	mov	r1, r5
 801080a:	4622      	mov	r2, r4
 801080c:	4658      	mov	r0, fp
 801080e:	f001 f85d 	bl	80118cc <__pow5mult>
 8010812:	464a      	mov	r2, r9
 8010814:	4601      	mov	r1, r0
 8010816:	4605      	mov	r5, r0
 8010818:	4658      	mov	r0, fp
 801081a:	f000 ffad 	bl	8011778 <__multiply>
 801081e:	4649      	mov	r1, r9
 8010820:	9004      	str	r0, [sp, #16]
 8010822:	4658      	mov	r0, fp
 8010824:	f000 fe94 	bl	8011550 <_Bfree>
 8010828:	9b04      	ldr	r3, [sp, #16]
 801082a:	4699      	mov	r9, r3
 801082c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801082e:	1b1a      	subs	r2, r3, r4
 8010830:	d004      	beq.n	801083c <_dtoa_r+0x78c>
 8010832:	4649      	mov	r1, r9
 8010834:	4658      	mov	r0, fp
 8010836:	f001 f849 	bl	80118cc <__pow5mult>
 801083a:	4681      	mov	r9, r0
 801083c:	2101      	movs	r1, #1
 801083e:	4658      	mov	r0, fp
 8010840:	f000 ff84 	bl	801174c <__i2b>
 8010844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010846:	4604      	mov	r4, r0
 8010848:	2b00      	cmp	r3, #0
 801084a:	f000 81cf 	beq.w	8010bec <_dtoa_r+0xb3c>
 801084e:	461a      	mov	r2, r3
 8010850:	4601      	mov	r1, r0
 8010852:	4658      	mov	r0, fp
 8010854:	f001 f83a 	bl	80118cc <__pow5mult>
 8010858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801085a:	2b01      	cmp	r3, #1
 801085c:	4604      	mov	r4, r0
 801085e:	f300 8095 	bgt.w	801098c <_dtoa_r+0x8dc>
 8010862:	9b02      	ldr	r3, [sp, #8]
 8010864:	2b00      	cmp	r3, #0
 8010866:	f040 8087 	bne.w	8010978 <_dtoa_r+0x8c8>
 801086a:	9b03      	ldr	r3, [sp, #12]
 801086c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010870:	2b00      	cmp	r3, #0
 8010872:	f040 8089 	bne.w	8010988 <_dtoa_r+0x8d8>
 8010876:	9b03      	ldr	r3, [sp, #12]
 8010878:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801087c:	0d1b      	lsrs	r3, r3, #20
 801087e:	051b      	lsls	r3, r3, #20
 8010880:	b12b      	cbz	r3, 801088e <_dtoa_r+0x7de>
 8010882:	9b08      	ldr	r3, [sp, #32]
 8010884:	3301      	adds	r3, #1
 8010886:	9308      	str	r3, [sp, #32]
 8010888:	f108 0801 	add.w	r8, r8, #1
 801088c:	2301      	movs	r3, #1
 801088e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010890:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010892:	2b00      	cmp	r3, #0
 8010894:	f000 81b0 	beq.w	8010bf8 <_dtoa_r+0xb48>
 8010898:	6923      	ldr	r3, [r4, #16]
 801089a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801089e:	6918      	ldr	r0, [r3, #16]
 80108a0:	f000 ff08 	bl	80116b4 <__hi0bits>
 80108a4:	f1c0 0020 	rsb	r0, r0, #32
 80108a8:	9b08      	ldr	r3, [sp, #32]
 80108aa:	4418      	add	r0, r3
 80108ac:	f010 001f 	ands.w	r0, r0, #31
 80108b0:	d077      	beq.n	80109a2 <_dtoa_r+0x8f2>
 80108b2:	f1c0 0320 	rsb	r3, r0, #32
 80108b6:	2b04      	cmp	r3, #4
 80108b8:	dd6b      	ble.n	8010992 <_dtoa_r+0x8e2>
 80108ba:	9b08      	ldr	r3, [sp, #32]
 80108bc:	f1c0 001c 	rsb	r0, r0, #28
 80108c0:	4403      	add	r3, r0
 80108c2:	4480      	add	r8, r0
 80108c4:	4406      	add	r6, r0
 80108c6:	9308      	str	r3, [sp, #32]
 80108c8:	f1b8 0f00 	cmp.w	r8, #0
 80108cc:	dd05      	ble.n	80108da <_dtoa_r+0x82a>
 80108ce:	4649      	mov	r1, r9
 80108d0:	4642      	mov	r2, r8
 80108d2:	4658      	mov	r0, fp
 80108d4:	f001 f854 	bl	8011980 <__lshift>
 80108d8:	4681      	mov	r9, r0
 80108da:	9b08      	ldr	r3, [sp, #32]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	dd05      	ble.n	80108ec <_dtoa_r+0x83c>
 80108e0:	4621      	mov	r1, r4
 80108e2:	461a      	mov	r2, r3
 80108e4:	4658      	mov	r0, fp
 80108e6:	f001 f84b 	bl	8011980 <__lshift>
 80108ea:	4604      	mov	r4, r0
 80108ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d059      	beq.n	80109a6 <_dtoa_r+0x8f6>
 80108f2:	4621      	mov	r1, r4
 80108f4:	4648      	mov	r0, r9
 80108f6:	f001 f8af 	bl	8011a58 <__mcmp>
 80108fa:	2800      	cmp	r0, #0
 80108fc:	da53      	bge.n	80109a6 <_dtoa_r+0x8f6>
 80108fe:	1e7b      	subs	r3, r7, #1
 8010900:	9304      	str	r3, [sp, #16]
 8010902:	4649      	mov	r1, r9
 8010904:	2300      	movs	r3, #0
 8010906:	220a      	movs	r2, #10
 8010908:	4658      	mov	r0, fp
 801090a:	f000 fe43 	bl	8011594 <__multadd>
 801090e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010910:	4681      	mov	r9, r0
 8010912:	2b00      	cmp	r3, #0
 8010914:	f000 8172 	beq.w	8010bfc <_dtoa_r+0xb4c>
 8010918:	2300      	movs	r3, #0
 801091a:	4629      	mov	r1, r5
 801091c:	220a      	movs	r2, #10
 801091e:	4658      	mov	r0, fp
 8010920:	f000 fe38 	bl	8011594 <__multadd>
 8010924:	9b00      	ldr	r3, [sp, #0]
 8010926:	2b00      	cmp	r3, #0
 8010928:	4605      	mov	r5, r0
 801092a:	dc67      	bgt.n	80109fc <_dtoa_r+0x94c>
 801092c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801092e:	2b02      	cmp	r3, #2
 8010930:	dc41      	bgt.n	80109b6 <_dtoa_r+0x906>
 8010932:	e063      	b.n	80109fc <_dtoa_r+0x94c>
 8010934:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010936:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801093a:	e746      	b.n	80107ca <_dtoa_r+0x71a>
 801093c:	9b07      	ldr	r3, [sp, #28]
 801093e:	1e5c      	subs	r4, r3, #1
 8010940:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010942:	42a3      	cmp	r3, r4
 8010944:	bfbf      	itttt	lt
 8010946:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010948:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801094a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801094c:	1ae3      	sublt	r3, r4, r3
 801094e:	bfb4      	ite	lt
 8010950:	18d2      	addlt	r2, r2, r3
 8010952:	1b1c      	subge	r4, r3, r4
 8010954:	9b07      	ldr	r3, [sp, #28]
 8010956:	bfbc      	itt	lt
 8010958:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801095a:	2400      	movlt	r4, #0
 801095c:	2b00      	cmp	r3, #0
 801095e:	bfb5      	itete	lt
 8010960:	eba8 0603 	sublt.w	r6, r8, r3
 8010964:	9b07      	ldrge	r3, [sp, #28]
 8010966:	2300      	movlt	r3, #0
 8010968:	4646      	movge	r6, r8
 801096a:	e730      	b.n	80107ce <_dtoa_r+0x71e>
 801096c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801096e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010970:	4646      	mov	r6, r8
 8010972:	e735      	b.n	80107e0 <_dtoa_r+0x730>
 8010974:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010976:	e75c      	b.n	8010832 <_dtoa_r+0x782>
 8010978:	2300      	movs	r3, #0
 801097a:	e788      	b.n	801088e <_dtoa_r+0x7de>
 801097c:	3fe00000 	.word	0x3fe00000
 8010980:	40240000 	.word	0x40240000
 8010984:	40140000 	.word	0x40140000
 8010988:	9b02      	ldr	r3, [sp, #8]
 801098a:	e780      	b.n	801088e <_dtoa_r+0x7de>
 801098c:	2300      	movs	r3, #0
 801098e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010990:	e782      	b.n	8010898 <_dtoa_r+0x7e8>
 8010992:	d099      	beq.n	80108c8 <_dtoa_r+0x818>
 8010994:	9a08      	ldr	r2, [sp, #32]
 8010996:	331c      	adds	r3, #28
 8010998:	441a      	add	r2, r3
 801099a:	4498      	add	r8, r3
 801099c:	441e      	add	r6, r3
 801099e:	9208      	str	r2, [sp, #32]
 80109a0:	e792      	b.n	80108c8 <_dtoa_r+0x818>
 80109a2:	4603      	mov	r3, r0
 80109a4:	e7f6      	b.n	8010994 <_dtoa_r+0x8e4>
 80109a6:	9b07      	ldr	r3, [sp, #28]
 80109a8:	9704      	str	r7, [sp, #16]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	dc20      	bgt.n	80109f0 <_dtoa_r+0x940>
 80109ae:	9300      	str	r3, [sp, #0]
 80109b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109b2:	2b02      	cmp	r3, #2
 80109b4:	dd1e      	ble.n	80109f4 <_dtoa_r+0x944>
 80109b6:	9b00      	ldr	r3, [sp, #0]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	f47f aec0 	bne.w	801073e <_dtoa_r+0x68e>
 80109be:	4621      	mov	r1, r4
 80109c0:	2205      	movs	r2, #5
 80109c2:	4658      	mov	r0, fp
 80109c4:	f000 fde6 	bl	8011594 <__multadd>
 80109c8:	4601      	mov	r1, r0
 80109ca:	4604      	mov	r4, r0
 80109cc:	4648      	mov	r0, r9
 80109ce:	f001 f843 	bl	8011a58 <__mcmp>
 80109d2:	2800      	cmp	r0, #0
 80109d4:	f77f aeb3 	ble.w	801073e <_dtoa_r+0x68e>
 80109d8:	4656      	mov	r6, sl
 80109da:	2331      	movs	r3, #49	@ 0x31
 80109dc:	f806 3b01 	strb.w	r3, [r6], #1
 80109e0:	9b04      	ldr	r3, [sp, #16]
 80109e2:	3301      	adds	r3, #1
 80109e4:	9304      	str	r3, [sp, #16]
 80109e6:	e6ae      	b.n	8010746 <_dtoa_r+0x696>
 80109e8:	9c07      	ldr	r4, [sp, #28]
 80109ea:	9704      	str	r7, [sp, #16]
 80109ec:	4625      	mov	r5, r4
 80109ee:	e7f3      	b.n	80109d8 <_dtoa_r+0x928>
 80109f0:	9b07      	ldr	r3, [sp, #28]
 80109f2:	9300      	str	r3, [sp, #0]
 80109f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	f000 8104 	beq.w	8010c04 <_dtoa_r+0xb54>
 80109fc:	2e00      	cmp	r6, #0
 80109fe:	dd05      	ble.n	8010a0c <_dtoa_r+0x95c>
 8010a00:	4629      	mov	r1, r5
 8010a02:	4632      	mov	r2, r6
 8010a04:	4658      	mov	r0, fp
 8010a06:	f000 ffbb 	bl	8011980 <__lshift>
 8010a0a:	4605      	mov	r5, r0
 8010a0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d05a      	beq.n	8010ac8 <_dtoa_r+0xa18>
 8010a12:	6869      	ldr	r1, [r5, #4]
 8010a14:	4658      	mov	r0, fp
 8010a16:	f000 fd5b 	bl	80114d0 <_Balloc>
 8010a1a:	4606      	mov	r6, r0
 8010a1c:	b928      	cbnz	r0, 8010a2a <_dtoa_r+0x97a>
 8010a1e:	4b84      	ldr	r3, [pc, #528]	@ (8010c30 <_dtoa_r+0xb80>)
 8010a20:	4602      	mov	r2, r0
 8010a22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010a26:	f7ff bb5a 	b.w	80100de <_dtoa_r+0x2e>
 8010a2a:	692a      	ldr	r2, [r5, #16]
 8010a2c:	3202      	adds	r2, #2
 8010a2e:	0092      	lsls	r2, r2, #2
 8010a30:	f105 010c 	add.w	r1, r5, #12
 8010a34:	300c      	adds	r0, #12
 8010a36:	f7ff fa94 	bl	800ff62 <memcpy>
 8010a3a:	2201      	movs	r2, #1
 8010a3c:	4631      	mov	r1, r6
 8010a3e:	4658      	mov	r0, fp
 8010a40:	f000 ff9e 	bl	8011980 <__lshift>
 8010a44:	f10a 0301 	add.w	r3, sl, #1
 8010a48:	9307      	str	r3, [sp, #28]
 8010a4a:	9b00      	ldr	r3, [sp, #0]
 8010a4c:	4453      	add	r3, sl
 8010a4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010a50:	9b02      	ldr	r3, [sp, #8]
 8010a52:	f003 0301 	and.w	r3, r3, #1
 8010a56:	462f      	mov	r7, r5
 8010a58:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a5a:	4605      	mov	r5, r0
 8010a5c:	9b07      	ldr	r3, [sp, #28]
 8010a5e:	4621      	mov	r1, r4
 8010a60:	3b01      	subs	r3, #1
 8010a62:	4648      	mov	r0, r9
 8010a64:	9300      	str	r3, [sp, #0]
 8010a66:	f7ff fa99 	bl	800ff9c <quorem>
 8010a6a:	4639      	mov	r1, r7
 8010a6c:	9002      	str	r0, [sp, #8]
 8010a6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010a72:	4648      	mov	r0, r9
 8010a74:	f000 fff0 	bl	8011a58 <__mcmp>
 8010a78:	462a      	mov	r2, r5
 8010a7a:	9008      	str	r0, [sp, #32]
 8010a7c:	4621      	mov	r1, r4
 8010a7e:	4658      	mov	r0, fp
 8010a80:	f001 f806 	bl	8011a90 <__mdiff>
 8010a84:	68c2      	ldr	r2, [r0, #12]
 8010a86:	4606      	mov	r6, r0
 8010a88:	bb02      	cbnz	r2, 8010acc <_dtoa_r+0xa1c>
 8010a8a:	4601      	mov	r1, r0
 8010a8c:	4648      	mov	r0, r9
 8010a8e:	f000 ffe3 	bl	8011a58 <__mcmp>
 8010a92:	4602      	mov	r2, r0
 8010a94:	4631      	mov	r1, r6
 8010a96:	4658      	mov	r0, fp
 8010a98:	920e      	str	r2, [sp, #56]	@ 0x38
 8010a9a:	f000 fd59 	bl	8011550 <_Bfree>
 8010a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010aa0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010aa2:	9e07      	ldr	r6, [sp, #28]
 8010aa4:	ea43 0102 	orr.w	r1, r3, r2
 8010aa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010aaa:	4319      	orrs	r1, r3
 8010aac:	d110      	bne.n	8010ad0 <_dtoa_r+0xa20>
 8010aae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010ab2:	d029      	beq.n	8010b08 <_dtoa_r+0xa58>
 8010ab4:	9b08      	ldr	r3, [sp, #32]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	dd02      	ble.n	8010ac0 <_dtoa_r+0xa10>
 8010aba:	9b02      	ldr	r3, [sp, #8]
 8010abc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010ac0:	9b00      	ldr	r3, [sp, #0]
 8010ac2:	f883 8000 	strb.w	r8, [r3]
 8010ac6:	e63f      	b.n	8010748 <_dtoa_r+0x698>
 8010ac8:	4628      	mov	r0, r5
 8010aca:	e7bb      	b.n	8010a44 <_dtoa_r+0x994>
 8010acc:	2201      	movs	r2, #1
 8010ace:	e7e1      	b.n	8010a94 <_dtoa_r+0x9e4>
 8010ad0:	9b08      	ldr	r3, [sp, #32]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	db04      	blt.n	8010ae0 <_dtoa_r+0xa30>
 8010ad6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010ad8:	430b      	orrs	r3, r1
 8010ada:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010adc:	430b      	orrs	r3, r1
 8010ade:	d120      	bne.n	8010b22 <_dtoa_r+0xa72>
 8010ae0:	2a00      	cmp	r2, #0
 8010ae2:	dded      	ble.n	8010ac0 <_dtoa_r+0xa10>
 8010ae4:	4649      	mov	r1, r9
 8010ae6:	2201      	movs	r2, #1
 8010ae8:	4658      	mov	r0, fp
 8010aea:	f000 ff49 	bl	8011980 <__lshift>
 8010aee:	4621      	mov	r1, r4
 8010af0:	4681      	mov	r9, r0
 8010af2:	f000 ffb1 	bl	8011a58 <__mcmp>
 8010af6:	2800      	cmp	r0, #0
 8010af8:	dc03      	bgt.n	8010b02 <_dtoa_r+0xa52>
 8010afa:	d1e1      	bne.n	8010ac0 <_dtoa_r+0xa10>
 8010afc:	f018 0f01 	tst.w	r8, #1
 8010b00:	d0de      	beq.n	8010ac0 <_dtoa_r+0xa10>
 8010b02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010b06:	d1d8      	bne.n	8010aba <_dtoa_r+0xa0a>
 8010b08:	9a00      	ldr	r2, [sp, #0]
 8010b0a:	2339      	movs	r3, #57	@ 0x39
 8010b0c:	7013      	strb	r3, [r2, #0]
 8010b0e:	4633      	mov	r3, r6
 8010b10:	461e      	mov	r6, r3
 8010b12:	3b01      	subs	r3, #1
 8010b14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010b18:	2a39      	cmp	r2, #57	@ 0x39
 8010b1a:	d052      	beq.n	8010bc2 <_dtoa_r+0xb12>
 8010b1c:	3201      	adds	r2, #1
 8010b1e:	701a      	strb	r2, [r3, #0]
 8010b20:	e612      	b.n	8010748 <_dtoa_r+0x698>
 8010b22:	2a00      	cmp	r2, #0
 8010b24:	dd07      	ble.n	8010b36 <_dtoa_r+0xa86>
 8010b26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010b2a:	d0ed      	beq.n	8010b08 <_dtoa_r+0xa58>
 8010b2c:	9a00      	ldr	r2, [sp, #0]
 8010b2e:	f108 0301 	add.w	r3, r8, #1
 8010b32:	7013      	strb	r3, [r2, #0]
 8010b34:	e608      	b.n	8010748 <_dtoa_r+0x698>
 8010b36:	9b07      	ldr	r3, [sp, #28]
 8010b38:	9a07      	ldr	r2, [sp, #28]
 8010b3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010b3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b40:	4293      	cmp	r3, r2
 8010b42:	d028      	beq.n	8010b96 <_dtoa_r+0xae6>
 8010b44:	4649      	mov	r1, r9
 8010b46:	2300      	movs	r3, #0
 8010b48:	220a      	movs	r2, #10
 8010b4a:	4658      	mov	r0, fp
 8010b4c:	f000 fd22 	bl	8011594 <__multadd>
 8010b50:	42af      	cmp	r7, r5
 8010b52:	4681      	mov	r9, r0
 8010b54:	f04f 0300 	mov.w	r3, #0
 8010b58:	f04f 020a 	mov.w	r2, #10
 8010b5c:	4639      	mov	r1, r7
 8010b5e:	4658      	mov	r0, fp
 8010b60:	d107      	bne.n	8010b72 <_dtoa_r+0xac2>
 8010b62:	f000 fd17 	bl	8011594 <__multadd>
 8010b66:	4607      	mov	r7, r0
 8010b68:	4605      	mov	r5, r0
 8010b6a:	9b07      	ldr	r3, [sp, #28]
 8010b6c:	3301      	adds	r3, #1
 8010b6e:	9307      	str	r3, [sp, #28]
 8010b70:	e774      	b.n	8010a5c <_dtoa_r+0x9ac>
 8010b72:	f000 fd0f 	bl	8011594 <__multadd>
 8010b76:	4629      	mov	r1, r5
 8010b78:	4607      	mov	r7, r0
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	220a      	movs	r2, #10
 8010b7e:	4658      	mov	r0, fp
 8010b80:	f000 fd08 	bl	8011594 <__multadd>
 8010b84:	4605      	mov	r5, r0
 8010b86:	e7f0      	b.n	8010b6a <_dtoa_r+0xaba>
 8010b88:	9b00      	ldr	r3, [sp, #0]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	bfcc      	ite	gt
 8010b8e:	461e      	movgt	r6, r3
 8010b90:	2601      	movle	r6, #1
 8010b92:	4456      	add	r6, sl
 8010b94:	2700      	movs	r7, #0
 8010b96:	4649      	mov	r1, r9
 8010b98:	2201      	movs	r2, #1
 8010b9a:	4658      	mov	r0, fp
 8010b9c:	f000 fef0 	bl	8011980 <__lshift>
 8010ba0:	4621      	mov	r1, r4
 8010ba2:	4681      	mov	r9, r0
 8010ba4:	f000 ff58 	bl	8011a58 <__mcmp>
 8010ba8:	2800      	cmp	r0, #0
 8010baa:	dcb0      	bgt.n	8010b0e <_dtoa_r+0xa5e>
 8010bac:	d102      	bne.n	8010bb4 <_dtoa_r+0xb04>
 8010bae:	f018 0f01 	tst.w	r8, #1
 8010bb2:	d1ac      	bne.n	8010b0e <_dtoa_r+0xa5e>
 8010bb4:	4633      	mov	r3, r6
 8010bb6:	461e      	mov	r6, r3
 8010bb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010bbc:	2a30      	cmp	r2, #48	@ 0x30
 8010bbe:	d0fa      	beq.n	8010bb6 <_dtoa_r+0xb06>
 8010bc0:	e5c2      	b.n	8010748 <_dtoa_r+0x698>
 8010bc2:	459a      	cmp	sl, r3
 8010bc4:	d1a4      	bne.n	8010b10 <_dtoa_r+0xa60>
 8010bc6:	9b04      	ldr	r3, [sp, #16]
 8010bc8:	3301      	adds	r3, #1
 8010bca:	9304      	str	r3, [sp, #16]
 8010bcc:	2331      	movs	r3, #49	@ 0x31
 8010bce:	f88a 3000 	strb.w	r3, [sl]
 8010bd2:	e5b9      	b.n	8010748 <_dtoa_r+0x698>
 8010bd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010bd6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010c34 <_dtoa_r+0xb84>
 8010bda:	b11b      	cbz	r3, 8010be4 <_dtoa_r+0xb34>
 8010bdc:	f10a 0308 	add.w	r3, sl, #8
 8010be0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010be2:	6013      	str	r3, [r2, #0]
 8010be4:	4650      	mov	r0, sl
 8010be6:	b019      	add	sp, #100	@ 0x64
 8010be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bee:	2b01      	cmp	r3, #1
 8010bf0:	f77f ae37 	ble.w	8010862 <_dtoa_r+0x7b2>
 8010bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010bf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010bf8:	2001      	movs	r0, #1
 8010bfa:	e655      	b.n	80108a8 <_dtoa_r+0x7f8>
 8010bfc:	9b00      	ldr	r3, [sp, #0]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	f77f aed6 	ble.w	80109b0 <_dtoa_r+0x900>
 8010c04:	4656      	mov	r6, sl
 8010c06:	4621      	mov	r1, r4
 8010c08:	4648      	mov	r0, r9
 8010c0a:	f7ff f9c7 	bl	800ff9c <quorem>
 8010c0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010c12:	f806 8b01 	strb.w	r8, [r6], #1
 8010c16:	9b00      	ldr	r3, [sp, #0]
 8010c18:	eba6 020a 	sub.w	r2, r6, sl
 8010c1c:	4293      	cmp	r3, r2
 8010c1e:	ddb3      	ble.n	8010b88 <_dtoa_r+0xad8>
 8010c20:	4649      	mov	r1, r9
 8010c22:	2300      	movs	r3, #0
 8010c24:	220a      	movs	r2, #10
 8010c26:	4658      	mov	r0, fp
 8010c28:	f000 fcb4 	bl	8011594 <__multadd>
 8010c2c:	4681      	mov	r9, r0
 8010c2e:	e7ea      	b.n	8010c06 <_dtoa_r+0xb56>
 8010c30:	08013a65 	.word	0x08013a65
 8010c34:	080139e9 	.word	0x080139e9

08010c38 <_free_r>:
 8010c38:	b538      	push	{r3, r4, r5, lr}
 8010c3a:	4605      	mov	r5, r0
 8010c3c:	2900      	cmp	r1, #0
 8010c3e:	d041      	beq.n	8010cc4 <_free_r+0x8c>
 8010c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c44:	1f0c      	subs	r4, r1, #4
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	bfb8      	it	lt
 8010c4a:	18e4      	addlt	r4, r4, r3
 8010c4c:	f000 fc34 	bl	80114b8 <__malloc_lock>
 8010c50:	4a1d      	ldr	r2, [pc, #116]	@ (8010cc8 <_free_r+0x90>)
 8010c52:	6813      	ldr	r3, [r2, #0]
 8010c54:	b933      	cbnz	r3, 8010c64 <_free_r+0x2c>
 8010c56:	6063      	str	r3, [r4, #4]
 8010c58:	6014      	str	r4, [r2, #0]
 8010c5a:	4628      	mov	r0, r5
 8010c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c60:	f000 bc30 	b.w	80114c4 <__malloc_unlock>
 8010c64:	42a3      	cmp	r3, r4
 8010c66:	d908      	bls.n	8010c7a <_free_r+0x42>
 8010c68:	6820      	ldr	r0, [r4, #0]
 8010c6a:	1821      	adds	r1, r4, r0
 8010c6c:	428b      	cmp	r3, r1
 8010c6e:	bf01      	itttt	eq
 8010c70:	6819      	ldreq	r1, [r3, #0]
 8010c72:	685b      	ldreq	r3, [r3, #4]
 8010c74:	1809      	addeq	r1, r1, r0
 8010c76:	6021      	streq	r1, [r4, #0]
 8010c78:	e7ed      	b.n	8010c56 <_free_r+0x1e>
 8010c7a:	461a      	mov	r2, r3
 8010c7c:	685b      	ldr	r3, [r3, #4]
 8010c7e:	b10b      	cbz	r3, 8010c84 <_free_r+0x4c>
 8010c80:	42a3      	cmp	r3, r4
 8010c82:	d9fa      	bls.n	8010c7a <_free_r+0x42>
 8010c84:	6811      	ldr	r1, [r2, #0]
 8010c86:	1850      	adds	r0, r2, r1
 8010c88:	42a0      	cmp	r0, r4
 8010c8a:	d10b      	bne.n	8010ca4 <_free_r+0x6c>
 8010c8c:	6820      	ldr	r0, [r4, #0]
 8010c8e:	4401      	add	r1, r0
 8010c90:	1850      	adds	r0, r2, r1
 8010c92:	4283      	cmp	r3, r0
 8010c94:	6011      	str	r1, [r2, #0]
 8010c96:	d1e0      	bne.n	8010c5a <_free_r+0x22>
 8010c98:	6818      	ldr	r0, [r3, #0]
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	6053      	str	r3, [r2, #4]
 8010c9e:	4408      	add	r0, r1
 8010ca0:	6010      	str	r0, [r2, #0]
 8010ca2:	e7da      	b.n	8010c5a <_free_r+0x22>
 8010ca4:	d902      	bls.n	8010cac <_free_r+0x74>
 8010ca6:	230c      	movs	r3, #12
 8010ca8:	602b      	str	r3, [r5, #0]
 8010caa:	e7d6      	b.n	8010c5a <_free_r+0x22>
 8010cac:	6820      	ldr	r0, [r4, #0]
 8010cae:	1821      	adds	r1, r4, r0
 8010cb0:	428b      	cmp	r3, r1
 8010cb2:	bf04      	itt	eq
 8010cb4:	6819      	ldreq	r1, [r3, #0]
 8010cb6:	685b      	ldreq	r3, [r3, #4]
 8010cb8:	6063      	str	r3, [r4, #4]
 8010cba:	bf04      	itt	eq
 8010cbc:	1809      	addeq	r1, r1, r0
 8010cbe:	6021      	streq	r1, [r4, #0]
 8010cc0:	6054      	str	r4, [r2, #4]
 8010cc2:	e7ca      	b.n	8010c5a <_free_r+0x22>
 8010cc4:	bd38      	pop	{r3, r4, r5, pc}
 8010cc6:	bf00      	nop
 8010cc8:	20000d64 	.word	0x20000d64

08010ccc <rshift>:
 8010ccc:	6903      	ldr	r3, [r0, #16]
 8010cce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010cd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cd6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010cda:	f100 0414 	add.w	r4, r0, #20
 8010cde:	dd45      	ble.n	8010d6c <rshift+0xa0>
 8010ce0:	f011 011f 	ands.w	r1, r1, #31
 8010ce4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010ce8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010cec:	d10c      	bne.n	8010d08 <rshift+0x3c>
 8010cee:	f100 0710 	add.w	r7, r0, #16
 8010cf2:	4629      	mov	r1, r5
 8010cf4:	42b1      	cmp	r1, r6
 8010cf6:	d334      	bcc.n	8010d62 <rshift+0x96>
 8010cf8:	1a9b      	subs	r3, r3, r2
 8010cfa:	009b      	lsls	r3, r3, #2
 8010cfc:	1eea      	subs	r2, r5, #3
 8010cfe:	4296      	cmp	r6, r2
 8010d00:	bf38      	it	cc
 8010d02:	2300      	movcc	r3, #0
 8010d04:	4423      	add	r3, r4
 8010d06:	e015      	b.n	8010d34 <rshift+0x68>
 8010d08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010d0c:	f1c1 0820 	rsb	r8, r1, #32
 8010d10:	40cf      	lsrs	r7, r1
 8010d12:	f105 0e04 	add.w	lr, r5, #4
 8010d16:	46a1      	mov	r9, r4
 8010d18:	4576      	cmp	r6, lr
 8010d1a:	46f4      	mov	ip, lr
 8010d1c:	d815      	bhi.n	8010d4a <rshift+0x7e>
 8010d1e:	1a9a      	subs	r2, r3, r2
 8010d20:	0092      	lsls	r2, r2, #2
 8010d22:	3a04      	subs	r2, #4
 8010d24:	3501      	adds	r5, #1
 8010d26:	42ae      	cmp	r6, r5
 8010d28:	bf38      	it	cc
 8010d2a:	2200      	movcc	r2, #0
 8010d2c:	18a3      	adds	r3, r4, r2
 8010d2e:	50a7      	str	r7, [r4, r2]
 8010d30:	b107      	cbz	r7, 8010d34 <rshift+0x68>
 8010d32:	3304      	adds	r3, #4
 8010d34:	1b1a      	subs	r2, r3, r4
 8010d36:	42a3      	cmp	r3, r4
 8010d38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010d3c:	bf08      	it	eq
 8010d3e:	2300      	moveq	r3, #0
 8010d40:	6102      	str	r2, [r0, #16]
 8010d42:	bf08      	it	eq
 8010d44:	6143      	streq	r3, [r0, #20]
 8010d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d4a:	f8dc c000 	ldr.w	ip, [ip]
 8010d4e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010d52:	ea4c 0707 	orr.w	r7, ip, r7
 8010d56:	f849 7b04 	str.w	r7, [r9], #4
 8010d5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010d5e:	40cf      	lsrs	r7, r1
 8010d60:	e7da      	b.n	8010d18 <rshift+0x4c>
 8010d62:	f851 cb04 	ldr.w	ip, [r1], #4
 8010d66:	f847 cf04 	str.w	ip, [r7, #4]!
 8010d6a:	e7c3      	b.n	8010cf4 <rshift+0x28>
 8010d6c:	4623      	mov	r3, r4
 8010d6e:	e7e1      	b.n	8010d34 <rshift+0x68>

08010d70 <__hexdig_fun>:
 8010d70:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010d74:	2b09      	cmp	r3, #9
 8010d76:	d802      	bhi.n	8010d7e <__hexdig_fun+0xe>
 8010d78:	3820      	subs	r0, #32
 8010d7a:	b2c0      	uxtb	r0, r0
 8010d7c:	4770      	bx	lr
 8010d7e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010d82:	2b05      	cmp	r3, #5
 8010d84:	d801      	bhi.n	8010d8a <__hexdig_fun+0x1a>
 8010d86:	3847      	subs	r0, #71	@ 0x47
 8010d88:	e7f7      	b.n	8010d7a <__hexdig_fun+0xa>
 8010d8a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010d8e:	2b05      	cmp	r3, #5
 8010d90:	d801      	bhi.n	8010d96 <__hexdig_fun+0x26>
 8010d92:	3827      	subs	r0, #39	@ 0x27
 8010d94:	e7f1      	b.n	8010d7a <__hexdig_fun+0xa>
 8010d96:	2000      	movs	r0, #0
 8010d98:	4770      	bx	lr
	...

08010d9c <__gethex>:
 8010d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010da0:	b085      	sub	sp, #20
 8010da2:	468a      	mov	sl, r1
 8010da4:	9302      	str	r3, [sp, #8]
 8010da6:	680b      	ldr	r3, [r1, #0]
 8010da8:	9001      	str	r0, [sp, #4]
 8010daa:	4690      	mov	r8, r2
 8010dac:	1c9c      	adds	r4, r3, #2
 8010dae:	46a1      	mov	r9, r4
 8010db0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010db4:	2830      	cmp	r0, #48	@ 0x30
 8010db6:	d0fa      	beq.n	8010dae <__gethex+0x12>
 8010db8:	eba9 0303 	sub.w	r3, r9, r3
 8010dbc:	f1a3 0b02 	sub.w	fp, r3, #2
 8010dc0:	f7ff ffd6 	bl	8010d70 <__hexdig_fun>
 8010dc4:	4605      	mov	r5, r0
 8010dc6:	2800      	cmp	r0, #0
 8010dc8:	d168      	bne.n	8010e9c <__gethex+0x100>
 8010dca:	49a0      	ldr	r1, [pc, #640]	@ (801104c <__gethex+0x2b0>)
 8010dcc:	2201      	movs	r2, #1
 8010dce:	4648      	mov	r0, r9
 8010dd0:	f7ff f83e 	bl	800fe50 <strncmp>
 8010dd4:	4607      	mov	r7, r0
 8010dd6:	2800      	cmp	r0, #0
 8010dd8:	d167      	bne.n	8010eaa <__gethex+0x10e>
 8010dda:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010dde:	4626      	mov	r6, r4
 8010de0:	f7ff ffc6 	bl	8010d70 <__hexdig_fun>
 8010de4:	2800      	cmp	r0, #0
 8010de6:	d062      	beq.n	8010eae <__gethex+0x112>
 8010de8:	4623      	mov	r3, r4
 8010dea:	7818      	ldrb	r0, [r3, #0]
 8010dec:	2830      	cmp	r0, #48	@ 0x30
 8010dee:	4699      	mov	r9, r3
 8010df0:	f103 0301 	add.w	r3, r3, #1
 8010df4:	d0f9      	beq.n	8010dea <__gethex+0x4e>
 8010df6:	f7ff ffbb 	bl	8010d70 <__hexdig_fun>
 8010dfa:	fab0 f580 	clz	r5, r0
 8010dfe:	096d      	lsrs	r5, r5, #5
 8010e00:	f04f 0b01 	mov.w	fp, #1
 8010e04:	464a      	mov	r2, r9
 8010e06:	4616      	mov	r6, r2
 8010e08:	3201      	adds	r2, #1
 8010e0a:	7830      	ldrb	r0, [r6, #0]
 8010e0c:	f7ff ffb0 	bl	8010d70 <__hexdig_fun>
 8010e10:	2800      	cmp	r0, #0
 8010e12:	d1f8      	bne.n	8010e06 <__gethex+0x6a>
 8010e14:	498d      	ldr	r1, [pc, #564]	@ (801104c <__gethex+0x2b0>)
 8010e16:	2201      	movs	r2, #1
 8010e18:	4630      	mov	r0, r6
 8010e1a:	f7ff f819 	bl	800fe50 <strncmp>
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	d13f      	bne.n	8010ea2 <__gethex+0x106>
 8010e22:	b944      	cbnz	r4, 8010e36 <__gethex+0x9a>
 8010e24:	1c74      	adds	r4, r6, #1
 8010e26:	4622      	mov	r2, r4
 8010e28:	4616      	mov	r6, r2
 8010e2a:	3201      	adds	r2, #1
 8010e2c:	7830      	ldrb	r0, [r6, #0]
 8010e2e:	f7ff ff9f 	bl	8010d70 <__hexdig_fun>
 8010e32:	2800      	cmp	r0, #0
 8010e34:	d1f8      	bne.n	8010e28 <__gethex+0x8c>
 8010e36:	1ba4      	subs	r4, r4, r6
 8010e38:	00a7      	lsls	r7, r4, #2
 8010e3a:	7833      	ldrb	r3, [r6, #0]
 8010e3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010e40:	2b50      	cmp	r3, #80	@ 0x50
 8010e42:	d13e      	bne.n	8010ec2 <__gethex+0x126>
 8010e44:	7873      	ldrb	r3, [r6, #1]
 8010e46:	2b2b      	cmp	r3, #43	@ 0x2b
 8010e48:	d033      	beq.n	8010eb2 <__gethex+0x116>
 8010e4a:	2b2d      	cmp	r3, #45	@ 0x2d
 8010e4c:	d034      	beq.n	8010eb8 <__gethex+0x11c>
 8010e4e:	1c71      	adds	r1, r6, #1
 8010e50:	2400      	movs	r4, #0
 8010e52:	7808      	ldrb	r0, [r1, #0]
 8010e54:	f7ff ff8c 	bl	8010d70 <__hexdig_fun>
 8010e58:	1e43      	subs	r3, r0, #1
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	2b18      	cmp	r3, #24
 8010e5e:	d830      	bhi.n	8010ec2 <__gethex+0x126>
 8010e60:	f1a0 0210 	sub.w	r2, r0, #16
 8010e64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010e68:	f7ff ff82 	bl	8010d70 <__hexdig_fun>
 8010e6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8010e70:	fa5f fc8c 	uxtb.w	ip, ip
 8010e74:	f1bc 0f18 	cmp.w	ip, #24
 8010e78:	f04f 030a 	mov.w	r3, #10
 8010e7c:	d91e      	bls.n	8010ebc <__gethex+0x120>
 8010e7e:	b104      	cbz	r4, 8010e82 <__gethex+0xe6>
 8010e80:	4252      	negs	r2, r2
 8010e82:	4417      	add	r7, r2
 8010e84:	f8ca 1000 	str.w	r1, [sl]
 8010e88:	b1ed      	cbz	r5, 8010ec6 <__gethex+0x12a>
 8010e8a:	f1bb 0f00 	cmp.w	fp, #0
 8010e8e:	bf0c      	ite	eq
 8010e90:	2506      	moveq	r5, #6
 8010e92:	2500      	movne	r5, #0
 8010e94:	4628      	mov	r0, r5
 8010e96:	b005      	add	sp, #20
 8010e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e9c:	2500      	movs	r5, #0
 8010e9e:	462c      	mov	r4, r5
 8010ea0:	e7b0      	b.n	8010e04 <__gethex+0x68>
 8010ea2:	2c00      	cmp	r4, #0
 8010ea4:	d1c7      	bne.n	8010e36 <__gethex+0x9a>
 8010ea6:	4627      	mov	r7, r4
 8010ea8:	e7c7      	b.n	8010e3a <__gethex+0x9e>
 8010eaa:	464e      	mov	r6, r9
 8010eac:	462f      	mov	r7, r5
 8010eae:	2501      	movs	r5, #1
 8010eb0:	e7c3      	b.n	8010e3a <__gethex+0x9e>
 8010eb2:	2400      	movs	r4, #0
 8010eb4:	1cb1      	adds	r1, r6, #2
 8010eb6:	e7cc      	b.n	8010e52 <__gethex+0xb6>
 8010eb8:	2401      	movs	r4, #1
 8010eba:	e7fb      	b.n	8010eb4 <__gethex+0x118>
 8010ebc:	fb03 0002 	mla	r0, r3, r2, r0
 8010ec0:	e7ce      	b.n	8010e60 <__gethex+0xc4>
 8010ec2:	4631      	mov	r1, r6
 8010ec4:	e7de      	b.n	8010e84 <__gethex+0xe8>
 8010ec6:	eba6 0309 	sub.w	r3, r6, r9
 8010eca:	3b01      	subs	r3, #1
 8010ecc:	4629      	mov	r1, r5
 8010ece:	2b07      	cmp	r3, #7
 8010ed0:	dc0a      	bgt.n	8010ee8 <__gethex+0x14c>
 8010ed2:	9801      	ldr	r0, [sp, #4]
 8010ed4:	f000 fafc 	bl	80114d0 <_Balloc>
 8010ed8:	4604      	mov	r4, r0
 8010eda:	b940      	cbnz	r0, 8010eee <__gethex+0x152>
 8010edc:	4b5c      	ldr	r3, [pc, #368]	@ (8011050 <__gethex+0x2b4>)
 8010ede:	4602      	mov	r2, r0
 8010ee0:	21e4      	movs	r1, #228	@ 0xe4
 8010ee2:	485c      	ldr	r0, [pc, #368]	@ (8011054 <__gethex+0x2b8>)
 8010ee4:	f001 fa5c 	bl	80123a0 <__assert_func>
 8010ee8:	3101      	adds	r1, #1
 8010eea:	105b      	asrs	r3, r3, #1
 8010eec:	e7ef      	b.n	8010ece <__gethex+0x132>
 8010eee:	f100 0a14 	add.w	sl, r0, #20
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	4655      	mov	r5, sl
 8010ef6:	469b      	mov	fp, r3
 8010ef8:	45b1      	cmp	r9, r6
 8010efa:	d337      	bcc.n	8010f6c <__gethex+0x1d0>
 8010efc:	f845 bb04 	str.w	fp, [r5], #4
 8010f00:	eba5 050a 	sub.w	r5, r5, sl
 8010f04:	10ad      	asrs	r5, r5, #2
 8010f06:	6125      	str	r5, [r4, #16]
 8010f08:	4658      	mov	r0, fp
 8010f0a:	f000 fbd3 	bl	80116b4 <__hi0bits>
 8010f0e:	016d      	lsls	r5, r5, #5
 8010f10:	f8d8 6000 	ldr.w	r6, [r8]
 8010f14:	1a2d      	subs	r5, r5, r0
 8010f16:	42b5      	cmp	r5, r6
 8010f18:	dd54      	ble.n	8010fc4 <__gethex+0x228>
 8010f1a:	1bad      	subs	r5, r5, r6
 8010f1c:	4629      	mov	r1, r5
 8010f1e:	4620      	mov	r0, r4
 8010f20:	f000 ff67 	bl	8011df2 <__any_on>
 8010f24:	4681      	mov	r9, r0
 8010f26:	b178      	cbz	r0, 8010f48 <__gethex+0x1ac>
 8010f28:	1e6b      	subs	r3, r5, #1
 8010f2a:	1159      	asrs	r1, r3, #5
 8010f2c:	f003 021f 	and.w	r2, r3, #31
 8010f30:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010f34:	f04f 0901 	mov.w	r9, #1
 8010f38:	fa09 f202 	lsl.w	r2, r9, r2
 8010f3c:	420a      	tst	r2, r1
 8010f3e:	d003      	beq.n	8010f48 <__gethex+0x1ac>
 8010f40:	454b      	cmp	r3, r9
 8010f42:	dc36      	bgt.n	8010fb2 <__gethex+0x216>
 8010f44:	f04f 0902 	mov.w	r9, #2
 8010f48:	4629      	mov	r1, r5
 8010f4a:	4620      	mov	r0, r4
 8010f4c:	f7ff febe 	bl	8010ccc <rshift>
 8010f50:	442f      	add	r7, r5
 8010f52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f56:	42bb      	cmp	r3, r7
 8010f58:	da42      	bge.n	8010fe0 <__gethex+0x244>
 8010f5a:	9801      	ldr	r0, [sp, #4]
 8010f5c:	4621      	mov	r1, r4
 8010f5e:	f000 faf7 	bl	8011550 <_Bfree>
 8010f62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f64:	2300      	movs	r3, #0
 8010f66:	6013      	str	r3, [r2, #0]
 8010f68:	25a3      	movs	r5, #163	@ 0xa3
 8010f6a:	e793      	b.n	8010e94 <__gethex+0xf8>
 8010f6c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010f70:	2a2e      	cmp	r2, #46	@ 0x2e
 8010f72:	d012      	beq.n	8010f9a <__gethex+0x1fe>
 8010f74:	2b20      	cmp	r3, #32
 8010f76:	d104      	bne.n	8010f82 <__gethex+0x1e6>
 8010f78:	f845 bb04 	str.w	fp, [r5], #4
 8010f7c:	f04f 0b00 	mov.w	fp, #0
 8010f80:	465b      	mov	r3, fp
 8010f82:	7830      	ldrb	r0, [r6, #0]
 8010f84:	9303      	str	r3, [sp, #12]
 8010f86:	f7ff fef3 	bl	8010d70 <__hexdig_fun>
 8010f8a:	9b03      	ldr	r3, [sp, #12]
 8010f8c:	f000 000f 	and.w	r0, r0, #15
 8010f90:	4098      	lsls	r0, r3
 8010f92:	ea4b 0b00 	orr.w	fp, fp, r0
 8010f96:	3304      	adds	r3, #4
 8010f98:	e7ae      	b.n	8010ef8 <__gethex+0x15c>
 8010f9a:	45b1      	cmp	r9, r6
 8010f9c:	d8ea      	bhi.n	8010f74 <__gethex+0x1d8>
 8010f9e:	492b      	ldr	r1, [pc, #172]	@ (801104c <__gethex+0x2b0>)
 8010fa0:	9303      	str	r3, [sp, #12]
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	4630      	mov	r0, r6
 8010fa6:	f7fe ff53 	bl	800fe50 <strncmp>
 8010faa:	9b03      	ldr	r3, [sp, #12]
 8010fac:	2800      	cmp	r0, #0
 8010fae:	d1e1      	bne.n	8010f74 <__gethex+0x1d8>
 8010fb0:	e7a2      	b.n	8010ef8 <__gethex+0x15c>
 8010fb2:	1ea9      	subs	r1, r5, #2
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	f000 ff1c 	bl	8011df2 <__any_on>
 8010fba:	2800      	cmp	r0, #0
 8010fbc:	d0c2      	beq.n	8010f44 <__gethex+0x1a8>
 8010fbe:	f04f 0903 	mov.w	r9, #3
 8010fc2:	e7c1      	b.n	8010f48 <__gethex+0x1ac>
 8010fc4:	da09      	bge.n	8010fda <__gethex+0x23e>
 8010fc6:	1b75      	subs	r5, r6, r5
 8010fc8:	4621      	mov	r1, r4
 8010fca:	9801      	ldr	r0, [sp, #4]
 8010fcc:	462a      	mov	r2, r5
 8010fce:	f000 fcd7 	bl	8011980 <__lshift>
 8010fd2:	1b7f      	subs	r7, r7, r5
 8010fd4:	4604      	mov	r4, r0
 8010fd6:	f100 0a14 	add.w	sl, r0, #20
 8010fda:	f04f 0900 	mov.w	r9, #0
 8010fde:	e7b8      	b.n	8010f52 <__gethex+0x1b6>
 8010fe0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010fe4:	42bd      	cmp	r5, r7
 8010fe6:	dd6f      	ble.n	80110c8 <__gethex+0x32c>
 8010fe8:	1bed      	subs	r5, r5, r7
 8010fea:	42ae      	cmp	r6, r5
 8010fec:	dc34      	bgt.n	8011058 <__gethex+0x2bc>
 8010fee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010ff2:	2b02      	cmp	r3, #2
 8010ff4:	d022      	beq.n	801103c <__gethex+0x2a0>
 8010ff6:	2b03      	cmp	r3, #3
 8010ff8:	d024      	beq.n	8011044 <__gethex+0x2a8>
 8010ffa:	2b01      	cmp	r3, #1
 8010ffc:	d115      	bne.n	801102a <__gethex+0x28e>
 8010ffe:	42ae      	cmp	r6, r5
 8011000:	d113      	bne.n	801102a <__gethex+0x28e>
 8011002:	2e01      	cmp	r6, #1
 8011004:	d10b      	bne.n	801101e <__gethex+0x282>
 8011006:	9a02      	ldr	r2, [sp, #8]
 8011008:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801100c:	6013      	str	r3, [r2, #0]
 801100e:	2301      	movs	r3, #1
 8011010:	6123      	str	r3, [r4, #16]
 8011012:	f8ca 3000 	str.w	r3, [sl]
 8011016:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011018:	2562      	movs	r5, #98	@ 0x62
 801101a:	601c      	str	r4, [r3, #0]
 801101c:	e73a      	b.n	8010e94 <__gethex+0xf8>
 801101e:	1e71      	subs	r1, r6, #1
 8011020:	4620      	mov	r0, r4
 8011022:	f000 fee6 	bl	8011df2 <__any_on>
 8011026:	2800      	cmp	r0, #0
 8011028:	d1ed      	bne.n	8011006 <__gethex+0x26a>
 801102a:	9801      	ldr	r0, [sp, #4]
 801102c:	4621      	mov	r1, r4
 801102e:	f000 fa8f 	bl	8011550 <_Bfree>
 8011032:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011034:	2300      	movs	r3, #0
 8011036:	6013      	str	r3, [r2, #0]
 8011038:	2550      	movs	r5, #80	@ 0x50
 801103a:	e72b      	b.n	8010e94 <__gethex+0xf8>
 801103c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801103e:	2b00      	cmp	r3, #0
 8011040:	d1f3      	bne.n	801102a <__gethex+0x28e>
 8011042:	e7e0      	b.n	8011006 <__gethex+0x26a>
 8011044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011046:	2b00      	cmp	r3, #0
 8011048:	d1dd      	bne.n	8011006 <__gethex+0x26a>
 801104a:	e7ee      	b.n	801102a <__gethex+0x28e>
 801104c:	08013950 	.word	0x08013950
 8011050:	08013a65 	.word	0x08013a65
 8011054:	08013a76 	.word	0x08013a76
 8011058:	1e6f      	subs	r7, r5, #1
 801105a:	f1b9 0f00 	cmp.w	r9, #0
 801105e:	d130      	bne.n	80110c2 <__gethex+0x326>
 8011060:	b127      	cbz	r7, 801106c <__gethex+0x2d0>
 8011062:	4639      	mov	r1, r7
 8011064:	4620      	mov	r0, r4
 8011066:	f000 fec4 	bl	8011df2 <__any_on>
 801106a:	4681      	mov	r9, r0
 801106c:	117a      	asrs	r2, r7, #5
 801106e:	2301      	movs	r3, #1
 8011070:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011074:	f007 071f 	and.w	r7, r7, #31
 8011078:	40bb      	lsls	r3, r7
 801107a:	4213      	tst	r3, r2
 801107c:	4629      	mov	r1, r5
 801107e:	4620      	mov	r0, r4
 8011080:	bf18      	it	ne
 8011082:	f049 0902 	orrne.w	r9, r9, #2
 8011086:	f7ff fe21 	bl	8010ccc <rshift>
 801108a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801108e:	1b76      	subs	r6, r6, r5
 8011090:	2502      	movs	r5, #2
 8011092:	f1b9 0f00 	cmp.w	r9, #0
 8011096:	d047      	beq.n	8011128 <__gethex+0x38c>
 8011098:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801109c:	2b02      	cmp	r3, #2
 801109e:	d015      	beq.n	80110cc <__gethex+0x330>
 80110a0:	2b03      	cmp	r3, #3
 80110a2:	d017      	beq.n	80110d4 <__gethex+0x338>
 80110a4:	2b01      	cmp	r3, #1
 80110a6:	d109      	bne.n	80110bc <__gethex+0x320>
 80110a8:	f019 0f02 	tst.w	r9, #2
 80110ac:	d006      	beq.n	80110bc <__gethex+0x320>
 80110ae:	f8da 3000 	ldr.w	r3, [sl]
 80110b2:	ea49 0903 	orr.w	r9, r9, r3
 80110b6:	f019 0f01 	tst.w	r9, #1
 80110ba:	d10e      	bne.n	80110da <__gethex+0x33e>
 80110bc:	f045 0510 	orr.w	r5, r5, #16
 80110c0:	e032      	b.n	8011128 <__gethex+0x38c>
 80110c2:	f04f 0901 	mov.w	r9, #1
 80110c6:	e7d1      	b.n	801106c <__gethex+0x2d0>
 80110c8:	2501      	movs	r5, #1
 80110ca:	e7e2      	b.n	8011092 <__gethex+0x2f6>
 80110cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110ce:	f1c3 0301 	rsb	r3, r3, #1
 80110d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80110d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d0f0      	beq.n	80110bc <__gethex+0x320>
 80110da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80110de:	f104 0314 	add.w	r3, r4, #20
 80110e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80110e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80110ea:	f04f 0c00 	mov.w	ip, #0
 80110ee:	4618      	mov	r0, r3
 80110f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80110f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80110f8:	d01b      	beq.n	8011132 <__gethex+0x396>
 80110fa:	3201      	adds	r2, #1
 80110fc:	6002      	str	r2, [r0, #0]
 80110fe:	2d02      	cmp	r5, #2
 8011100:	f104 0314 	add.w	r3, r4, #20
 8011104:	d13c      	bne.n	8011180 <__gethex+0x3e4>
 8011106:	f8d8 2000 	ldr.w	r2, [r8]
 801110a:	3a01      	subs	r2, #1
 801110c:	42b2      	cmp	r2, r6
 801110e:	d109      	bne.n	8011124 <__gethex+0x388>
 8011110:	1171      	asrs	r1, r6, #5
 8011112:	2201      	movs	r2, #1
 8011114:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011118:	f006 061f 	and.w	r6, r6, #31
 801111c:	fa02 f606 	lsl.w	r6, r2, r6
 8011120:	421e      	tst	r6, r3
 8011122:	d13a      	bne.n	801119a <__gethex+0x3fe>
 8011124:	f045 0520 	orr.w	r5, r5, #32
 8011128:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801112a:	601c      	str	r4, [r3, #0]
 801112c:	9b02      	ldr	r3, [sp, #8]
 801112e:	601f      	str	r7, [r3, #0]
 8011130:	e6b0      	b.n	8010e94 <__gethex+0xf8>
 8011132:	4299      	cmp	r1, r3
 8011134:	f843 cc04 	str.w	ip, [r3, #-4]
 8011138:	d8d9      	bhi.n	80110ee <__gethex+0x352>
 801113a:	68a3      	ldr	r3, [r4, #8]
 801113c:	459b      	cmp	fp, r3
 801113e:	db17      	blt.n	8011170 <__gethex+0x3d4>
 8011140:	6861      	ldr	r1, [r4, #4]
 8011142:	9801      	ldr	r0, [sp, #4]
 8011144:	3101      	adds	r1, #1
 8011146:	f000 f9c3 	bl	80114d0 <_Balloc>
 801114a:	4681      	mov	r9, r0
 801114c:	b918      	cbnz	r0, 8011156 <__gethex+0x3ba>
 801114e:	4b1a      	ldr	r3, [pc, #104]	@ (80111b8 <__gethex+0x41c>)
 8011150:	4602      	mov	r2, r0
 8011152:	2184      	movs	r1, #132	@ 0x84
 8011154:	e6c5      	b.n	8010ee2 <__gethex+0x146>
 8011156:	6922      	ldr	r2, [r4, #16]
 8011158:	3202      	adds	r2, #2
 801115a:	f104 010c 	add.w	r1, r4, #12
 801115e:	0092      	lsls	r2, r2, #2
 8011160:	300c      	adds	r0, #12
 8011162:	f7fe fefe 	bl	800ff62 <memcpy>
 8011166:	4621      	mov	r1, r4
 8011168:	9801      	ldr	r0, [sp, #4]
 801116a:	f000 f9f1 	bl	8011550 <_Bfree>
 801116e:	464c      	mov	r4, r9
 8011170:	6923      	ldr	r3, [r4, #16]
 8011172:	1c5a      	adds	r2, r3, #1
 8011174:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011178:	6122      	str	r2, [r4, #16]
 801117a:	2201      	movs	r2, #1
 801117c:	615a      	str	r2, [r3, #20]
 801117e:	e7be      	b.n	80110fe <__gethex+0x362>
 8011180:	6922      	ldr	r2, [r4, #16]
 8011182:	455a      	cmp	r2, fp
 8011184:	dd0b      	ble.n	801119e <__gethex+0x402>
 8011186:	2101      	movs	r1, #1
 8011188:	4620      	mov	r0, r4
 801118a:	f7ff fd9f 	bl	8010ccc <rshift>
 801118e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011192:	3701      	adds	r7, #1
 8011194:	42bb      	cmp	r3, r7
 8011196:	f6ff aee0 	blt.w	8010f5a <__gethex+0x1be>
 801119a:	2501      	movs	r5, #1
 801119c:	e7c2      	b.n	8011124 <__gethex+0x388>
 801119e:	f016 061f 	ands.w	r6, r6, #31
 80111a2:	d0fa      	beq.n	801119a <__gethex+0x3fe>
 80111a4:	4453      	add	r3, sl
 80111a6:	f1c6 0620 	rsb	r6, r6, #32
 80111aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80111ae:	f000 fa81 	bl	80116b4 <__hi0bits>
 80111b2:	42b0      	cmp	r0, r6
 80111b4:	dbe7      	blt.n	8011186 <__gethex+0x3ea>
 80111b6:	e7f0      	b.n	801119a <__gethex+0x3fe>
 80111b8:	08013a65 	.word	0x08013a65

080111bc <L_shift>:
 80111bc:	f1c2 0208 	rsb	r2, r2, #8
 80111c0:	0092      	lsls	r2, r2, #2
 80111c2:	b570      	push	{r4, r5, r6, lr}
 80111c4:	f1c2 0620 	rsb	r6, r2, #32
 80111c8:	6843      	ldr	r3, [r0, #4]
 80111ca:	6804      	ldr	r4, [r0, #0]
 80111cc:	fa03 f506 	lsl.w	r5, r3, r6
 80111d0:	432c      	orrs	r4, r5
 80111d2:	40d3      	lsrs	r3, r2
 80111d4:	6004      	str	r4, [r0, #0]
 80111d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80111da:	4288      	cmp	r0, r1
 80111dc:	d3f4      	bcc.n	80111c8 <L_shift+0xc>
 80111de:	bd70      	pop	{r4, r5, r6, pc}

080111e0 <__match>:
 80111e0:	b530      	push	{r4, r5, lr}
 80111e2:	6803      	ldr	r3, [r0, #0]
 80111e4:	3301      	adds	r3, #1
 80111e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111ea:	b914      	cbnz	r4, 80111f2 <__match+0x12>
 80111ec:	6003      	str	r3, [r0, #0]
 80111ee:	2001      	movs	r0, #1
 80111f0:	bd30      	pop	{r4, r5, pc}
 80111f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80111fa:	2d19      	cmp	r5, #25
 80111fc:	bf98      	it	ls
 80111fe:	3220      	addls	r2, #32
 8011200:	42a2      	cmp	r2, r4
 8011202:	d0f0      	beq.n	80111e6 <__match+0x6>
 8011204:	2000      	movs	r0, #0
 8011206:	e7f3      	b.n	80111f0 <__match+0x10>

08011208 <__hexnan>:
 8011208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801120c:	680b      	ldr	r3, [r1, #0]
 801120e:	6801      	ldr	r1, [r0, #0]
 8011210:	115e      	asrs	r6, r3, #5
 8011212:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011216:	f013 031f 	ands.w	r3, r3, #31
 801121a:	b087      	sub	sp, #28
 801121c:	bf18      	it	ne
 801121e:	3604      	addne	r6, #4
 8011220:	2500      	movs	r5, #0
 8011222:	1f37      	subs	r7, r6, #4
 8011224:	4682      	mov	sl, r0
 8011226:	4690      	mov	r8, r2
 8011228:	9301      	str	r3, [sp, #4]
 801122a:	f846 5c04 	str.w	r5, [r6, #-4]
 801122e:	46b9      	mov	r9, r7
 8011230:	463c      	mov	r4, r7
 8011232:	9502      	str	r5, [sp, #8]
 8011234:	46ab      	mov	fp, r5
 8011236:	784a      	ldrb	r2, [r1, #1]
 8011238:	1c4b      	adds	r3, r1, #1
 801123a:	9303      	str	r3, [sp, #12]
 801123c:	b342      	cbz	r2, 8011290 <__hexnan+0x88>
 801123e:	4610      	mov	r0, r2
 8011240:	9105      	str	r1, [sp, #20]
 8011242:	9204      	str	r2, [sp, #16]
 8011244:	f7ff fd94 	bl	8010d70 <__hexdig_fun>
 8011248:	2800      	cmp	r0, #0
 801124a:	d151      	bne.n	80112f0 <__hexnan+0xe8>
 801124c:	9a04      	ldr	r2, [sp, #16]
 801124e:	9905      	ldr	r1, [sp, #20]
 8011250:	2a20      	cmp	r2, #32
 8011252:	d818      	bhi.n	8011286 <__hexnan+0x7e>
 8011254:	9b02      	ldr	r3, [sp, #8]
 8011256:	459b      	cmp	fp, r3
 8011258:	dd13      	ble.n	8011282 <__hexnan+0x7a>
 801125a:	454c      	cmp	r4, r9
 801125c:	d206      	bcs.n	801126c <__hexnan+0x64>
 801125e:	2d07      	cmp	r5, #7
 8011260:	dc04      	bgt.n	801126c <__hexnan+0x64>
 8011262:	462a      	mov	r2, r5
 8011264:	4649      	mov	r1, r9
 8011266:	4620      	mov	r0, r4
 8011268:	f7ff ffa8 	bl	80111bc <L_shift>
 801126c:	4544      	cmp	r4, r8
 801126e:	d952      	bls.n	8011316 <__hexnan+0x10e>
 8011270:	2300      	movs	r3, #0
 8011272:	f1a4 0904 	sub.w	r9, r4, #4
 8011276:	f844 3c04 	str.w	r3, [r4, #-4]
 801127a:	f8cd b008 	str.w	fp, [sp, #8]
 801127e:	464c      	mov	r4, r9
 8011280:	461d      	mov	r5, r3
 8011282:	9903      	ldr	r1, [sp, #12]
 8011284:	e7d7      	b.n	8011236 <__hexnan+0x2e>
 8011286:	2a29      	cmp	r2, #41	@ 0x29
 8011288:	d157      	bne.n	801133a <__hexnan+0x132>
 801128a:	3102      	adds	r1, #2
 801128c:	f8ca 1000 	str.w	r1, [sl]
 8011290:	f1bb 0f00 	cmp.w	fp, #0
 8011294:	d051      	beq.n	801133a <__hexnan+0x132>
 8011296:	454c      	cmp	r4, r9
 8011298:	d206      	bcs.n	80112a8 <__hexnan+0xa0>
 801129a:	2d07      	cmp	r5, #7
 801129c:	dc04      	bgt.n	80112a8 <__hexnan+0xa0>
 801129e:	462a      	mov	r2, r5
 80112a0:	4649      	mov	r1, r9
 80112a2:	4620      	mov	r0, r4
 80112a4:	f7ff ff8a 	bl	80111bc <L_shift>
 80112a8:	4544      	cmp	r4, r8
 80112aa:	d936      	bls.n	801131a <__hexnan+0x112>
 80112ac:	f1a8 0204 	sub.w	r2, r8, #4
 80112b0:	4623      	mov	r3, r4
 80112b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80112b6:	f842 1f04 	str.w	r1, [r2, #4]!
 80112ba:	429f      	cmp	r7, r3
 80112bc:	d2f9      	bcs.n	80112b2 <__hexnan+0xaa>
 80112be:	1b3b      	subs	r3, r7, r4
 80112c0:	f023 0303 	bic.w	r3, r3, #3
 80112c4:	3304      	adds	r3, #4
 80112c6:	3401      	adds	r4, #1
 80112c8:	3e03      	subs	r6, #3
 80112ca:	42b4      	cmp	r4, r6
 80112cc:	bf88      	it	hi
 80112ce:	2304      	movhi	r3, #4
 80112d0:	4443      	add	r3, r8
 80112d2:	2200      	movs	r2, #0
 80112d4:	f843 2b04 	str.w	r2, [r3], #4
 80112d8:	429f      	cmp	r7, r3
 80112da:	d2fb      	bcs.n	80112d4 <__hexnan+0xcc>
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	b91b      	cbnz	r3, 80112e8 <__hexnan+0xe0>
 80112e0:	4547      	cmp	r7, r8
 80112e2:	d128      	bne.n	8011336 <__hexnan+0x12e>
 80112e4:	2301      	movs	r3, #1
 80112e6:	603b      	str	r3, [r7, #0]
 80112e8:	2005      	movs	r0, #5
 80112ea:	b007      	add	sp, #28
 80112ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112f0:	3501      	adds	r5, #1
 80112f2:	2d08      	cmp	r5, #8
 80112f4:	f10b 0b01 	add.w	fp, fp, #1
 80112f8:	dd06      	ble.n	8011308 <__hexnan+0x100>
 80112fa:	4544      	cmp	r4, r8
 80112fc:	d9c1      	bls.n	8011282 <__hexnan+0x7a>
 80112fe:	2300      	movs	r3, #0
 8011300:	f844 3c04 	str.w	r3, [r4, #-4]
 8011304:	2501      	movs	r5, #1
 8011306:	3c04      	subs	r4, #4
 8011308:	6822      	ldr	r2, [r4, #0]
 801130a:	f000 000f 	and.w	r0, r0, #15
 801130e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011312:	6020      	str	r0, [r4, #0]
 8011314:	e7b5      	b.n	8011282 <__hexnan+0x7a>
 8011316:	2508      	movs	r5, #8
 8011318:	e7b3      	b.n	8011282 <__hexnan+0x7a>
 801131a:	9b01      	ldr	r3, [sp, #4]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d0dd      	beq.n	80112dc <__hexnan+0xd4>
 8011320:	f1c3 0320 	rsb	r3, r3, #32
 8011324:	f04f 32ff 	mov.w	r2, #4294967295
 8011328:	40da      	lsrs	r2, r3
 801132a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801132e:	4013      	ands	r3, r2
 8011330:	f846 3c04 	str.w	r3, [r6, #-4]
 8011334:	e7d2      	b.n	80112dc <__hexnan+0xd4>
 8011336:	3f04      	subs	r7, #4
 8011338:	e7d0      	b.n	80112dc <__hexnan+0xd4>
 801133a:	2004      	movs	r0, #4
 801133c:	e7d5      	b.n	80112ea <__hexnan+0xe2>
	...

08011340 <malloc>:
 8011340:	4b02      	ldr	r3, [pc, #8]	@ (801134c <malloc+0xc>)
 8011342:	4601      	mov	r1, r0
 8011344:	6818      	ldr	r0, [r3, #0]
 8011346:	f000 b825 	b.w	8011394 <_malloc_r>
 801134a:	bf00      	nop
 801134c:	2000021c 	.word	0x2000021c

08011350 <sbrk_aligned>:
 8011350:	b570      	push	{r4, r5, r6, lr}
 8011352:	4e0f      	ldr	r6, [pc, #60]	@ (8011390 <sbrk_aligned+0x40>)
 8011354:	460c      	mov	r4, r1
 8011356:	6831      	ldr	r1, [r6, #0]
 8011358:	4605      	mov	r5, r0
 801135a:	b911      	cbnz	r1, 8011362 <sbrk_aligned+0x12>
 801135c:	f001 f810 	bl	8012380 <_sbrk_r>
 8011360:	6030      	str	r0, [r6, #0]
 8011362:	4621      	mov	r1, r4
 8011364:	4628      	mov	r0, r5
 8011366:	f001 f80b 	bl	8012380 <_sbrk_r>
 801136a:	1c43      	adds	r3, r0, #1
 801136c:	d103      	bne.n	8011376 <sbrk_aligned+0x26>
 801136e:	f04f 34ff 	mov.w	r4, #4294967295
 8011372:	4620      	mov	r0, r4
 8011374:	bd70      	pop	{r4, r5, r6, pc}
 8011376:	1cc4      	adds	r4, r0, #3
 8011378:	f024 0403 	bic.w	r4, r4, #3
 801137c:	42a0      	cmp	r0, r4
 801137e:	d0f8      	beq.n	8011372 <sbrk_aligned+0x22>
 8011380:	1a21      	subs	r1, r4, r0
 8011382:	4628      	mov	r0, r5
 8011384:	f000 fffc 	bl	8012380 <_sbrk_r>
 8011388:	3001      	adds	r0, #1
 801138a:	d1f2      	bne.n	8011372 <sbrk_aligned+0x22>
 801138c:	e7ef      	b.n	801136e <sbrk_aligned+0x1e>
 801138e:	bf00      	nop
 8011390:	20000d60 	.word	0x20000d60

08011394 <_malloc_r>:
 8011394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011398:	1ccd      	adds	r5, r1, #3
 801139a:	f025 0503 	bic.w	r5, r5, #3
 801139e:	3508      	adds	r5, #8
 80113a0:	2d0c      	cmp	r5, #12
 80113a2:	bf38      	it	cc
 80113a4:	250c      	movcc	r5, #12
 80113a6:	2d00      	cmp	r5, #0
 80113a8:	4606      	mov	r6, r0
 80113aa:	db01      	blt.n	80113b0 <_malloc_r+0x1c>
 80113ac:	42a9      	cmp	r1, r5
 80113ae:	d904      	bls.n	80113ba <_malloc_r+0x26>
 80113b0:	230c      	movs	r3, #12
 80113b2:	6033      	str	r3, [r6, #0]
 80113b4:	2000      	movs	r0, #0
 80113b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011490 <_malloc_r+0xfc>
 80113be:	f000 f87b 	bl	80114b8 <__malloc_lock>
 80113c2:	f8d8 3000 	ldr.w	r3, [r8]
 80113c6:	461c      	mov	r4, r3
 80113c8:	bb44      	cbnz	r4, 801141c <_malloc_r+0x88>
 80113ca:	4629      	mov	r1, r5
 80113cc:	4630      	mov	r0, r6
 80113ce:	f7ff ffbf 	bl	8011350 <sbrk_aligned>
 80113d2:	1c43      	adds	r3, r0, #1
 80113d4:	4604      	mov	r4, r0
 80113d6:	d158      	bne.n	801148a <_malloc_r+0xf6>
 80113d8:	f8d8 4000 	ldr.w	r4, [r8]
 80113dc:	4627      	mov	r7, r4
 80113de:	2f00      	cmp	r7, #0
 80113e0:	d143      	bne.n	801146a <_malloc_r+0xd6>
 80113e2:	2c00      	cmp	r4, #0
 80113e4:	d04b      	beq.n	801147e <_malloc_r+0xea>
 80113e6:	6823      	ldr	r3, [r4, #0]
 80113e8:	4639      	mov	r1, r7
 80113ea:	4630      	mov	r0, r6
 80113ec:	eb04 0903 	add.w	r9, r4, r3
 80113f0:	f000 ffc6 	bl	8012380 <_sbrk_r>
 80113f4:	4581      	cmp	r9, r0
 80113f6:	d142      	bne.n	801147e <_malloc_r+0xea>
 80113f8:	6821      	ldr	r1, [r4, #0]
 80113fa:	1a6d      	subs	r5, r5, r1
 80113fc:	4629      	mov	r1, r5
 80113fe:	4630      	mov	r0, r6
 8011400:	f7ff ffa6 	bl	8011350 <sbrk_aligned>
 8011404:	3001      	adds	r0, #1
 8011406:	d03a      	beq.n	801147e <_malloc_r+0xea>
 8011408:	6823      	ldr	r3, [r4, #0]
 801140a:	442b      	add	r3, r5
 801140c:	6023      	str	r3, [r4, #0]
 801140e:	f8d8 3000 	ldr.w	r3, [r8]
 8011412:	685a      	ldr	r2, [r3, #4]
 8011414:	bb62      	cbnz	r2, 8011470 <_malloc_r+0xdc>
 8011416:	f8c8 7000 	str.w	r7, [r8]
 801141a:	e00f      	b.n	801143c <_malloc_r+0xa8>
 801141c:	6822      	ldr	r2, [r4, #0]
 801141e:	1b52      	subs	r2, r2, r5
 8011420:	d420      	bmi.n	8011464 <_malloc_r+0xd0>
 8011422:	2a0b      	cmp	r2, #11
 8011424:	d917      	bls.n	8011456 <_malloc_r+0xc2>
 8011426:	1961      	adds	r1, r4, r5
 8011428:	42a3      	cmp	r3, r4
 801142a:	6025      	str	r5, [r4, #0]
 801142c:	bf18      	it	ne
 801142e:	6059      	strne	r1, [r3, #4]
 8011430:	6863      	ldr	r3, [r4, #4]
 8011432:	bf08      	it	eq
 8011434:	f8c8 1000 	streq.w	r1, [r8]
 8011438:	5162      	str	r2, [r4, r5]
 801143a:	604b      	str	r3, [r1, #4]
 801143c:	4630      	mov	r0, r6
 801143e:	f000 f841 	bl	80114c4 <__malloc_unlock>
 8011442:	f104 000b 	add.w	r0, r4, #11
 8011446:	1d23      	adds	r3, r4, #4
 8011448:	f020 0007 	bic.w	r0, r0, #7
 801144c:	1ac2      	subs	r2, r0, r3
 801144e:	bf1c      	itt	ne
 8011450:	1a1b      	subne	r3, r3, r0
 8011452:	50a3      	strne	r3, [r4, r2]
 8011454:	e7af      	b.n	80113b6 <_malloc_r+0x22>
 8011456:	6862      	ldr	r2, [r4, #4]
 8011458:	42a3      	cmp	r3, r4
 801145a:	bf0c      	ite	eq
 801145c:	f8c8 2000 	streq.w	r2, [r8]
 8011460:	605a      	strne	r2, [r3, #4]
 8011462:	e7eb      	b.n	801143c <_malloc_r+0xa8>
 8011464:	4623      	mov	r3, r4
 8011466:	6864      	ldr	r4, [r4, #4]
 8011468:	e7ae      	b.n	80113c8 <_malloc_r+0x34>
 801146a:	463c      	mov	r4, r7
 801146c:	687f      	ldr	r7, [r7, #4]
 801146e:	e7b6      	b.n	80113de <_malloc_r+0x4a>
 8011470:	461a      	mov	r2, r3
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	42a3      	cmp	r3, r4
 8011476:	d1fb      	bne.n	8011470 <_malloc_r+0xdc>
 8011478:	2300      	movs	r3, #0
 801147a:	6053      	str	r3, [r2, #4]
 801147c:	e7de      	b.n	801143c <_malloc_r+0xa8>
 801147e:	230c      	movs	r3, #12
 8011480:	6033      	str	r3, [r6, #0]
 8011482:	4630      	mov	r0, r6
 8011484:	f000 f81e 	bl	80114c4 <__malloc_unlock>
 8011488:	e794      	b.n	80113b4 <_malloc_r+0x20>
 801148a:	6005      	str	r5, [r0, #0]
 801148c:	e7d6      	b.n	801143c <_malloc_r+0xa8>
 801148e:	bf00      	nop
 8011490:	20000d64 	.word	0x20000d64

08011494 <__ascii_mbtowc>:
 8011494:	b082      	sub	sp, #8
 8011496:	b901      	cbnz	r1, 801149a <__ascii_mbtowc+0x6>
 8011498:	a901      	add	r1, sp, #4
 801149a:	b142      	cbz	r2, 80114ae <__ascii_mbtowc+0x1a>
 801149c:	b14b      	cbz	r3, 80114b2 <__ascii_mbtowc+0x1e>
 801149e:	7813      	ldrb	r3, [r2, #0]
 80114a0:	600b      	str	r3, [r1, #0]
 80114a2:	7812      	ldrb	r2, [r2, #0]
 80114a4:	1e10      	subs	r0, r2, #0
 80114a6:	bf18      	it	ne
 80114a8:	2001      	movne	r0, #1
 80114aa:	b002      	add	sp, #8
 80114ac:	4770      	bx	lr
 80114ae:	4610      	mov	r0, r2
 80114b0:	e7fb      	b.n	80114aa <__ascii_mbtowc+0x16>
 80114b2:	f06f 0001 	mvn.w	r0, #1
 80114b6:	e7f8      	b.n	80114aa <__ascii_mbtowc+0x16>

080114b8 <__malloc_lock>:
 80114b8:	4801      	ldr	r0, [pc, #4]	@ (80114c0 <__malloc_lock+0x8>)
 80114ba:	f7fe bd50 	b.w	800ff5e <__retarget_lock_acquire_recursive>
 80114be:	bf00      	nop
 80114c0:	20000d5c 	.word	0x20000d5c

080114c4 <__malloc_unlock>:
 80114c4:	4801      	ldr	r0, [pc, #4]	@ (80114cc <__malloc_unlock+0x8>)
 80114c6:	f7fe bd4b 	b.w	800ff60 <__retarget_lock_release_recursive>
 80114ca:	bf00      	nop
 80114cc:	20000d5c 	.word	0x20000d5c

080114d0 <_Balloc>:
 80114d0:	b570      	push	{r4, r5, r6, lr}
 80114d2:	69c6      	ldr	r6, [r0, #28]
 80114d4:	4604      	mov	r4, r0
 80114d6:	460d      	mov	r5, r1
 80114d8:	b976      	cbnz	r6, 80114f8 <_Balloc+0x28>
 80114da:	2010      	movs	r0, #16
 80114dc:	f7ff ff30 	bl	8011340 <malloc>
 80114e0:	4602      	mov	r2, r0
 80114e2:	61e0      	str	r0, [r4, #28]
 80114e4:	b920      	cbnz	r0, 80114f0 <_Balloc+0x20>
 80114e6:	4b18      	ldr	r3, [pc, #96]	@ (8011548 <_Balloc+0x78>)
 80114e8:	4818      	ldr	r0, [pc, #96]	@ (801154c <_Balloc+0x7c>)
 80114ea:	216b      	movs	r1, #107	@ 0x6b
 80114ec:	f000 ff58 	bl	80123a0 <__assert_func>
 80114f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114f4:	6006      	str	r6, [r0, #0]
 80114f6:	60c6      	str	r6, [r0, #12]
 80114f8:	69e6      	ldr	r6, [r4, #28]
 80114fa:	68f3      	ldr	r3, [r6, #12]
 80114fc:	b183      	cbz	r3, 8011520 <_Balloc+0x50>
 80114fe:	69e3      	ldr	r3, [r4, #28]
 8011500:	68db      	ldr	r3, [r3, #12]
 8011502:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011506:	b9b8      	cbnz	r0, 8011538 <_Balloc+0x68>
 8011508:	2101      	movs	r1, #1
 801150a:	fa01 f605 	lsl.w	r6, r1, r5
 801150e:	1d72      	adds	r2, r6, #5
 8011510:	0092      	lsls	r2, r2, #2
 8011512:	4620      	mov	r0, r4
 8011514:	f000 ff62 	bl	80123dc <_calloc_r>
 8011518:	b160      	cbz	r0, 8011534 <_Balloc+0x64>
 801151a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801151e:	e00e      	b.n	801153e <_Balloc+0x6e>
 8011520:	2221      	movs	r2, #33	@ 0x21
 8011522:	2104      	movs	r1, #4
 8011524:	4620      	mov	r0, r4
 8011526:	f000 ff59 	bl	80123dc <_calloc_r>
 801152a:	69e3      	ldr	r3, [r4, #28]
 801152c:	60f0      	str	r0, [r6, #12]
 801152e:	68db      	ldr	r3, [r3, #12]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d1e4      	bne.n	80114fe <_Balloc+0x2e>
 8011534:	2000      	movs	r0, #0
 8011536:	bd70      	pop	{r4, r5, r6, pc}
 8011538:	6802      	ldr	r2, [r0, #0]
 801153a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801153e:	2300      	movs	r3, #0
 8011540:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011544:	e7f7      	b.n	8011536 <_Balloc+0x66>
 8011546:	bf00      	nop
 8011548:	080139f6 	.word	0x080139f6
 801154c:	08013ad6 	.word	0x08013ad6

08011550 <_Bfree>:
 8011550:	b570      	push	{r4, r5, r6, lr}
 8011552:	69c6      	ldr	r6, [r0, #28]
 8011554:	4605      	mov	r5, r0
 8011556:	460c      	mov	r4, r1
 8011558:	b976      	cbnz	r6, 8011578 <_Bfree+0x28>
 801155a:	2010      	movs	r0, #16
 801155c:	f7ff fef0 	bl	8011340 <malloc>
 8011560:	4602      	mov	r2, r0
 8011562:	61e8      	str	r0, [r5, #28]
 8011564:	b920      	cbnz	r0, 8011570 <_Bfree+0x20>
 8011566:	4b09      	ldr	r3, [pc, #36]	@ (801158c <_Bfree+0x3c>)
 8011568:	4809      	ldr	r0, [pc, #36]	@ (8011590 <_Bfree+0x40>)
 801156a:	218f      	movs	r1, #143	@ 0x8f
 801156c:	f000 ff18 	bl	80123a0 <__assert_func>
 8011570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011574:	6006      	str	r6, [r0, #0]
 8011576:	60c6      	str	r6, [r0, #12]
 8011578:	b13c      	cbz	r4, 801158a <_Bfree+0x3a>
 801157a:	69eb      	ldr	r3, [r5, #28]
 801157c:	6862      	ldr	r2, [r4, #4]
 801157e:	68db      	ldr	r3, [r3, #12]
 8011580:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011584:	6021      	str	r1, [r4, #0]
 8011586:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801158a:	bd70      	pop	{r4, r5, r6, pc}
 801158c:	080139f6 	.word	0x080139f6
 8011590:	08013ad6 	.word	0x08013ad6

08011594 <__multadd>:
 8011594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011598:	690d      	ldr	r5, [r1, #16]
 801159a:	4607      	mov	r7, r0
 801159c:	460c      	mov	r4, r1
 801159e:	461e      	mov	r6, r3
 80115a0:	f101 0c14 	add.w	ip, r1, #20
 80115a4:	2000      	movs	r0, #0
 80115a6:	f8dc 3000 	ldr.w	r3, [ip]
 80115aa:	b299      	uxth	r1, r3
 80115ac:	fb02 6101 	mla	r1, r2, r1, r6
 80115b0:	0c1e      	lsrs	r6, r3, #16
 80115b2:	0c0b      	lsrs	r3, r1, #16
 80115b4:	fb02 3306 	mla	r3, r2, r6, r3
 80115b8:	b289      	uxth	r1, r1
 80115ba:	3001      	adds	r0, #1
 80115bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80115c0:	4285      	cmp	r5, r0
 80115c2:	f84c 1b04 	str.w	r1, [ip], #4
 80115c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80115ca:	dcec      	bgt.n	80115a6 <__multadd+0x12>
 80115cc:	b30e      	cbz	r6, 8011612 <__multadd+0x7e>
 80115ce:	68a3      	ldr	r3, [r4, #8]
 80115d0:	42ab      	cmp	r3, r5
 80115d2:	dc19      	bgt.n	8011608 <__multadd+0x74>
 80115d4:	6861      	ldr	r1, [r4, #4]
 80115d6:	4638      	mov	r0, r7
 80115d8:	3101      	adds	r1, #1
 80115da:	f7ff ff79 	bl	80114d0 <_Balloc>
 80115de:	4680      	mov	r8, r0
 80115e0:	b928      	cbnz	r0, 80115ee <__multadd+0x5a>
 80115e2:	4602      	mov	r2, r0
 80115e4:	4b0c      	ldr	r3, [pc, #48]	@ (8011618 <__multadd+0x84>)
 80115e6:	480d      	ldr	r0, [pc, #52]	@ (801161c <__multadd+0x88>)
 80115e8:	21ba      	movs	r1, #186	@ 0xba
 80115ea:	f000 fed9 	bl	80123a0 <__assert_func>
 80115ee:	6922      	ldr	r2, [r4, #16]
 80115f0:	3202      	adds	r2, #2
 80115f2:	f104 010c 	add.w	r1, r4, #12
 80115f6:	0092      	lsls	r2, r2, #2
 80115f8:	300c      	adds	r0, #12
 80115fa:	f7fe fcb2 	bl	800ff62 <memcpy>
 80115fe:	4621      	mov	r1, r4
 8011600:	4638      	mov	r0, r7
 8011602:	f7ff ffa5 	bl	8011550 <_Bfree>
 8011606:	4644      	mov	r4, r8
 8011608:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801160c:	3501      	adds	r5, #1
 801160e:	615e      	str	r6, [r3, #20]
 8011610:	6125      	str	r5, [r4, #16]
 8011612:	4620      	mov	r0, r4
 8011614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011618:	08013a65 	.word	0x08013a65
 801161c:	08013ad6 	.word	0x08013ad6

08011620 <__s2b>:
 8011620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011624:	460c      	mov	r4, r1
 8011626:	4615      	mov	r5, r2
 8011628:	461f      	mov	r7, r3
 801162a:	2209      	movs	r2, #9
 801162c:	3308      	adds	r3, #8
 801162e:	4606      	mov	r6, r0
 8011630:	fb93 f3f2 	sdiv	r3, r3, r2
 8011634:	2100      	movs	r1, #0
 8011636:	2201      	movs	r2, #1
 8011638:	429a      	cmp	r2, r3
 801163a:	db09      	blt.n	8011650 <__s2b+0x30>
 801163c:	4630      	mov	r0, r6
 801163e:	f7ff ff47 	bl	80114d0 <_Balloc>
 8011642:	b940      	cbnz	r0, 8011656 <__s2b+0x36>
 8011644:	4602      	mov	r2, r0
 8011646:	4b19      	ldr	r3, [pc, #100]	@ (80116ac <__s2b+0x8c>)
 8011648:	4819      	ldr	r0, [pc, #100]	@ (80116b0 <__s2b+0x90>)
 801164a:	21d3      	movs	r1, #211	@ 0xd3
 801164c:	f000 fea8 	bl	80123a0 <__assert_func>
 8011650:	0052      	lsls	r2, r2, #1
 8011652:	3101      	adds	r1, #1
 8011654:	e7f0      	b.n	8011638 <__s2b+0x18>
 8011656:	9b08      	ldr	r3, [sp, #32]
 8011658:	6143      	str	r3, [r0, #20]
 801165a:	2d09      	cmp	r5, #9
 801165c:	f04f 0301 	mov.w	r3, #1
 8011660:	6103      	str	r3, [r0, #16]
 8011662:	dd16      	ble.n	8011692 <__s2b+0x72>
 8011664:	f104 0909 	add.w	r9, r4, #9
 8011668:	46c8      	mov	r8, r9
 801166a:	442c      	add	r4, r5
 801166c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011670:	4601      	mov	r1, r0
 8011672:	3b30      	subs	r3, #48	@ 0x30
 8011674:	220a      	movs	r2, #10
 8011676:	4630      	mov	r0, r6
 8011678:	f7ff ff8c 	bl	8011594 <__multadd>
 801167c:	45a0      	cmp	r8, r4
 801167e:	d1f5      	bne.n	801166c <__s2b+0x4c>
 8011680:	f1a5 0408 	sub.w	r4, r5, #8
 8011684:	444c      	add	r4, r9
 8011686:	1b2d      	subs	r5, r5, r4
 8011688:	1963      	adds	r3, r4, r5
 801168a:	42bb      	cmp	r3, r7
 801168c:	db04      	blt.n	8011698 <__s2b+0x78>
 801168e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011692:	340a      	adds	r4, #10
 8011694:	2509      	movs	r5, #9
 8011696:	e7f6      	b.n	8011686 <__s2b+0x66>
 8011698:	f814 3b01 	ldrb.w	r3, [r4], #1
 801169c:	4601      	mov	r1, r0
 801169e:	3b30      	subs	r3, #48	@ 0x30
 80116a0:	220a      	movs	r2, #10
 80116a2:	4630      	mov	r0, r6
 80116a4:	f7ff ff76 	bl	8011594 <__multadd>
 80116a8:	e7ee      	b.n	8011688 <__s2b+0x68>
 80116aa:	bf00      	nop
 80116ac:	08013a65 	.word	0x08013a65
 80116b0:	08013ad6 	.word	0x08013ad6

080116b4 <__hi0bits>:
 80116b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80116b8:	4603      	mov	r3, r0
 80116ba:	bf36      	itet	cc
 80116bc:	0403      	lslcc	r3, r0, #16
 80116be:	2000      	movcs	r0, #0
 80116c0:	2010      	movcc	r0, #16
 80116c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80116c6:	bf3c      	itt	cc
 80116c8:	021b      	lslcc	r3, r3, #8
 80116ca:	3008      	addcc	r0, #8
 80116cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80116d0:	bf3c      	itt	cc
 80116d2:	011b      	lslcc	r3, r3, #4
 80116d4:	3004      	addcc	r0, #4
 80116d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80116da:	bf3c      	itt	cc
 80116dc:	009b      	lslcc	r3, r3, #2
 80116de:	3002      	addcc	r0, #2
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	db05      	blt.n	80116f0 <__hi0bits+0x3c>
 80116e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80116e8:	f100 0001 	add.w	r0, r0, #1
 80116ec:	bf08      	it	eq
 80116ee:	2020      	moveq	r0, #32
 80116f0:	4770      	bx	lr

080116f2 <__lo0bits>:
 80116f2:	6803      	ldr	r3, [r0, #0]
 80116f4:	4602      	mov	r2, r0
 80116f6:	f013 0007 	ands.w	r0, r3, #7
 80116fa:	d00b      	beq.n	8011714 <__lo0bits+0x22>
 80116fc:	07d9      	lsls	r1, r3, #31
 80116fe:	d421      	bmi.n	8011744 <__lo0bits+0x52>
 8011700:	0798      	lsls	r0, r3, #30
 8011702:	bf49      	itett	mi
 8011704:	085b      	lsrmi	r3, r3, #1
 8011706:	089b      	lsrpl	r3, r3, #2
 8011708:	2001      	movmi	r0, #1
 801170a:	6013      	strmi	r3, [r2, #0]
 801170c:	bf5c      	itt	pl
 801170e:	6013      	strpl	r3, [r2, #0]
 8011710:	2002      	movpl	r0, #2
 8011712:	4770      	bx	lr
 8011714:	b299      	uxth	r1, r3
 8011716:	b909      	cbnz	r1, 801171c <__lo0bits+0x2a>
 8011718:	0c1b      	lsrs	r3, r3, #16
 801171a:	2010      	movs	r0, #16
 801171c:	b2d9      	uxtb	r1, r3
 801171e:	b909      	cbnz	r1, 8011724 <__lo0bits+0x32>
 8011720:	3008      	adds	r0, #8
 8011722:	0a1b      	lsrs	r3, r3, #8
 8011724:	0719      	lsls	r1, r3, #28
 8011726:	bf04      	itt	eq
 8011728:	091b      	lsreq	r3, r3, #4
 801172a:	3004      	addeq	r0, #4
 801172c:	0799      	lsls	r1, r3, #30
 801172e:	bf04      	itt	eq
 8011730:	089b      	lsreq	r3, r3, #2
 8011732:	3002      	addeq	r0, #2
 8011734:	07d9      	lsls	r1, r3, #31
 8011736:	d403      	bmi.n	8011740 <__lo0bits+0x4e>
 8011738:	085b      	lsrs	r3, r3, #1
 801173a:	f100 0001 	add.w	r0, r0, #1
 801173e:	d003      	beq.n	8011748 <__lo0bits+0x56>
 8011740:	6013      	str	r3, [r2, #0]
 8011742:	4770      	bx	lr
 8011744:	2000      	movs	r0, #0
 8011746:	4770      	bx	lr
 8011748:	2020      	movs	r0, #32
 801174a:	4770      	bx	lr

0801174c <__i2b>:
 801174c:	b510      	push	{r4, lr}
 801174e:	460c      	mov	r4, r1
 8011750:	2101      	movs	r1, #1
 8011752:	f7ff febd 	bl	80114d0 <_Balloc>
 8011756:	4602      	mov	r2, r0
 8011758:	b928      	cbnz	r0, 8011766 <__i2b+0x1a>
 801175a:	4b05      	ldr	r3, [pc, #20]	@ (8011770 <__i2b+0x24>)
 801175c:	4805      	ldr	r0, [pc, #20]	@ (8011774 <__i2b+0x28>)
 801175e:	f240 1145 	movw	r1, #325	@ 0x145
 8011762:	f000 fe1d 	bl	80123a0 <__assert_func>
 8011766:	2301      	movs	r3, #1
 8011768:	6144      	str	r4, [r0, #20]
 801176a:	6103      	str	r3, [r0, #16]
 801176c:	bd10      	pop	{r4, pc}
 801176e:	bf00      	nop
 8011770:	08013a65 	.word	0x08013a65
 8011774:	08013ad6 	.word	0x08013ad6

08011778 <__multiply>:
 8011778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801177c:	4614      	mov	r4, r2
 801177e:	690a      	ldr	r2, [r1, #16]
 8011780:	6923      	ldr	r3, [r4, #16]
 8011782:	429a      	cmp	r2, r3
 8011784:	bfa8      	it	ge
 8011786:	4623      	movge	r3, r4
 8011788:	460f      	mov	r7, r1
 801178a:	bfa4      	itt	ge
 801178c:	460c      	movge	r4, r1
 801178e:	461f      	movge	r7, r3
 8011790:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011794:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011798:	68a3      	ldr	r3, [r4, #8]
 801179a:	6861      	ldr	r1, [r4, #4]
 801179c:	eb0a 0609 	add.w	r6, sl, r9
 80117a0:	42b3      	cmp	r3, r6
 80117a2:	b085      	sub	sp, #20
 80117a4:	bfb8      	it	lt
 80117a6:	3101      	addlt	r1, #1
 80117a8:	f7ff fe92 	bl	80114d0 <_Balloc>
 80117ac:	b930      	cbnz	r0, 80117bc <__multiply+0x44>
 80117ae:	4602      	mov	r2, r0
 80117b0:	4b44      	ldr	r3, [pc, #272]	@ (80118c4 <__multiply+0x14c>)
 80117b2:	4845      	ldr	r0, [pc, #276]	@ (80118c8 <__multiply+0x150>)
 80117b4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80117b8:	f000 fdf2 	bl	80123a0 <__assert_func>
 80117bc:	f100 0514 	add.w	r5, r0, #20
 80117c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80117c4:	462b      	mov	r3, r5
 80117c6:	2200      	movs	r2, #0
 80117c8:	4543      	cmp	r3, r8
 80117ca:	d321      	bcc.n	8011810 <__multiply+0x98>
 80117cc:	f107 0114 	add.w	r1, r7, #20
 80117d0:	f104 0214 	add.w	r2, r4, #20
 80117d4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80117d8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80117dc:	9302      	str	r3, [sp, #8]
 80117de:	1b13      	subs	r3, r2, r4
 80117e0:	3b15      	subs	r3, #21
 80117e2:	f023 0303 	bic.w	r3, r3, #3
 80117e6:	3304      	adds	r3, #4
 80117e8:	f104 0715 	add.w	r7, r4, #21
 80117ec:	42ba      	cmp	r2, r7
 80117ee:	bf38      	it	cc
 80117f0:	2304      	movcc	r3, #4
 80117f2:	9301      	str	r3, [sp, #4]
 80117f4:	9b02      	ldr	r3, [sp, #8]
 80117f6:	9103      	str	r1, [sp, #12]
 80117f8:	428b      	cmp	r3, r1
 80117fa:	d80c      	bhi.n	8011816 <__multiply+0x9e>
 80117fc:	2e00      	cmp	r6, #0
 80117fe:	dd03      	ble.n	8011808 <__multiply+0x90>
 8011800:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011804:	2b00      	cmp	r3, #0
 8011806:	d05b      	beq.n	80118c0 <__multiply+0x148>
 8011808:	6106      	str	r6, [r0, #16]
 801180a:	b005      	add	sp, #20
 801180c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011810:	f843 2b04 	str.w	r2, [r3], #4
 8011814:	e7d8      	b.n	80117c8 <__multiply+0x50>
 8011816:	f8b1 a000 	ldrh.w	sl, [r1]
 801181a:	f1ba 0f00 	cmp.w	sl, #0
 801181e:	d024      	beq.n	801186a <__multiply+0xf2>
 8011820:	f104 0e14 	add.w	lr, r4, #20
 8011824:	46a9      	mov	r9, r5
 8011826:	f04f 0c00 	mov.w	ip, #0
 801182a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801182e:	f8d9 3000 	ldr.w	r3, [r9]
 8011832:	fa1f fb87 	uxth.w	fp, r7
 8011836:	b29b      	uxth	r3, r3
 8011838:	fb0a 330b 	mla	r3, sl, fp, r3
 801183c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011840:	f8d9 7000 	ldr.w	r7, [r9]
 8011844:	4463      	add	r3, ip
 8011846:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801184a:	fb0a c70b 	mla	r7, sl, fp, ip
 801184e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011852:	b29b      	uxth	r3, r3
 8011854:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011858:	4572      	cmp	r2, lr
 801185a:	f849 3b04 	str.w	r3, [r9], #4
 801185e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011862:	d8e2      	bhi.n	801182a <__multiply+0xb2>
 8011864:	9b01      	ldr	r3, [sp, #4]
 8011866:	f845 c003 	str.w	ip, [r5, r3]
 801186a:	9b03      	ldr	r3, [sp, #12]
 801186c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011870:	3104      	adds	r1, #4
 8011872:	f1b9 0f00 	cmp.w	r9, #0
 8011876:	d021      	beq.n	80118bc <__multiply+0x144>
 8011878:	682b      	ldr	r3, [r5, #0]
 801187a:	f104 0c14 	add.w	ip, r4, #20
 801187e:	46ae      	mov	lr, r5
 8011880:	f04f 0a00 	mov.w	sl, #0
 8011884:	f8bc b000 	ldrh.w	fp, [ip]
 8011888:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801188c:	fb09 770b 	mla	r7, r9, fp, r7
 8011890:	4457      	add	r7, sl
 8011892:	b29b      	uxth	r3, r3
 8011894:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011898:	f84e 3b04 	str.w	r3, [lr], #4
 801189c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80118a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80118a4:	f8be 3000 	ldrh.w	r3, [lr]
 80118a8:	fb09 330a 	mla	r3, r9, sl, r3
 80118ac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80118b0:	4562      	cmp	r2, ip
 80118b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80118b6:	d8e5      	bhi.n	8011884 <__multiply+0x10c>
 80118b8:	9f01      	ldr	r7, [sp, #4]
 80118ba:	51eb      	str	r3, [r5, r7]
 80118bc:	3504      	adds	r5, #4
 80118be:	e799      	b.n	80117f4 <__multiply+0x7c>
 80118c0:	3e01      	subs	r6, #1
 80118c2:	e79b      	b.n	80117fc <__multiply+0x84>
 80118c4:	08013a65 	.word	0x08013a65
 80118c8:	08013ad6 	.word	0x08013ad6

080118cc <__pow5mult>:
 80118cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118d0:	4615      	mov	r5, r2
 80118d2:	f012 0203 	ands.w	r2, r2, #3
 80118d6:	4607      	mov	r7, r0
 80118d8:	460e      	mov	r6, r1
 80118da:	d007      	beq.n	80118ec <__pow5mult+0x20>
 80118dc:	4c25      	ldr	r4, [pc, #148]	@ (8011974 <__pow5mult+0xa8>)
 80118de:	3a01      	subs	r2, #1
 80118e0:	2300      	movs	r3, #0
 80118e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80118e6:	f7ff fe55 	bl	8011594 <__multadd>
 80118ea:	4606      	mov	r6, r0
 80118ec:	10ad      	asrs	r5, r5, #2
 80118ee:	d03d      	beq.n	801196c <__pow5mult+0xa0>
 80118f0:	69fc      	ldr	r4, [r7, #28]
 80118f2:	b97c      	cbnz	r4, 8011914 <__pow5mult+0x48>
 80118f4:	2010      	movs	r0, #16
 80118f6:	f7ff fd23 	bl	8011340 <malloc>
 80118fa:	4602      	mov	r2, r0
 80118fc:	61f8      	str	r0, [r7, #28]
 80118fe:	b928      	cbnz	r0, 801190c <__pow5mult+0x40>
 8011900:	4b1d      	ldr	r3, [pc, #116]	@ (8011978 <__pow5mult+0xac>)
 8011902:	481e      	ldr	r0, [pc, #120]	@ (801197c <__pow5mult+0xb0>)
 8011904:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011908:	f000 fd4a 	bl	80123a0 <__assert_func>
 801190c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011910:	6004      	str	r4, [r0, #0]
 8011912:	60c4      	str	r4, [r0, #12]
 8011914:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011918:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801191c:	b94c      	cbnz	r4, 8011932 <__pow5mult+0x66>
 801191e:	f240 2171 	movw	r1, #625	@ 0x271
 8011922:	4638      	mov	r0, r7
 8011924:	f7ff ff12 	bl	801174c <__i2b>
 8011928:	2300      	movs	r3, #0
 801192a:	f8c8 0008 	str.w	r0, [r8, #8]
 801192e:	4604      	mov	r4, r0
 8011930:	6003      	str	r3, [r0, #0]
 8011932:	f04f 0900 	mov.w	r9, #0
 8011936:	07eb      	lsls	r3, r5, #31
 8011938:	d50a      	bpl.n	8011950 <__pow5mult+0x84>
 801193a:	4631      	mov	r1, r6
 801193c:	4622      	mov	r2, r4
 801193e:	4638      	mov	r0, r7
 8011940:	f7ff ff1a 	bl	8011778 <__multiply>
 8011944:	4631      	mov	r1, r6
 8011946:	4680      	mov	r8, r0
 8011948:	4638      	mov	r0, r7
 801194a:	f7ff fe01 	bl	8011550 <_Bfree>
 801194e:	4646      	mov	r6, r8
 8011950:	106d      	asrs	r5, r5, #1
 8011952:	d00b      	beq.n	801196c <__pow5mult+0xa0>
 8011954:	6820      	ldr	r0, [r4, #0]
 8011956:	b938      	cbnz	r0, 8011968 <__pow5mult+0x9c>
 8011958:	4622      	mov	r2, r4
 801195a:	4621      	mov	r1, r4
 801195c:	4638      	mov	r0, r7
 801195e:	f7ff ff0b 	bl	8011778 <__multiply>
 8011962:	6020      	str	r0, [r4, #0]
 8011964:	f8c0 9000 	str.w	r9, [r0]
 8011968:	4604      	mov	r4, r0
 801196a:	e7e4      	b.n	8011936 <__pow5mult+0x6a>
 801196c:	4630      	mov	r0, r6
 801196e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011972:	bf00      	nop
 8011974:	08013b30 	.word	0x08013b30
 8011978:	080139f6 	.word	0x080139f6
 801197c:	08013ad6 	.word	0x08013ad6

08011980 <__lshift>:
 8011980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011984:	460c      	mov	r4, r1
 8011986:	6849      	ldr	r1, [r1, #4]
 8011988:	6923      	ldr	r3, [r4, #16]
 801198a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801198e:	68a3      	ldr	r3, [r4, #8]
 8011990:	4607      	mov	r7, r0
 8011992:	4691      	mov	r9, r2
 8011994:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011998:	f108 0601 	add.w	r6, r8, #1
 801199c:	42b3      	cmp	r3, r6
 801199e:	db0b      	blt.n	80119b8 <__lshift+0x38>
 80119a0:	4638      	mov	r0, r7
 80119a2:	f7ff fd95 	bl	80114d0 <_Balloc>
 80119a6:	4605      	mov	r5, r0
 80119a8:	b948      	cbnz	r0, 80119be <__lshift+0x3e>
 80119aa:	4602      	mov	r2, r0
 80119ac:	4b28      	ldr	r3, [pc, #160]	@ (8011a50 <__lshift+0xd0>)
 80119ae:	4829      	ldr	r0, [pc, #164]	@ (8011a54 <__lshift+0xd4>)
 80119b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80119b4:	f000 fcf4 	bl	80123a0 <__assert_func>
 80119b8:	3101      	adds	r1, #1
 80119ba:	005b      	lsls	r3, r3, #1
 80119bc:	e7ee      	b.n	801199c <__lshift+0x1c>
 80119be:	2300      	movs	r3, #0
 80119c0:	f100 0114 	add.w	r1, r0, #20
 80119c4:	f100 0210 	add.w	r2, r0, #16
 80119c8:	4618      	mov	r0, r3
 80119ca:	4553      	cmp	r3, sl
 80119cc:	db33      	blt.n	8011a36 <__lshift+0xb6>
 80119ce:	6920      	ldr	r0, [r4, #16]
 80119d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119d4:	f104 0314 	add.w	r3, r4, #20
 80119d8:	f019 091f 	ands.w	r9, r9, #31
 80119dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80119e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80119e4:	d02b      	beq.n	8011a3e <__lshift+0xbe>
 80119e6:	f1c9 0e20 	rsb	lr, r9, #32
 80119ea:	468a      	mov	sl, r1
 80119ec:	2200      	movs	r2, #0
 80119ee:	6818      	ldr	r0, [r3, #0]
 80119f0:	fa00 f009 	lsl.w	r0, r0, r9
 80119f4:	4310      	orrs	r0, r2
 80119f6:	f84a 0b04 	str.w	r0, [sl], #4
 80119fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80119fe:	459c      	cmp	ip, r3
 8011a00:	fa22 f20e 	lsr.w	r2, r2, lr
 8011a04:	d8f3      	bhi.n	80119ee <__lshift+0x6e>
 8011a06:	ebac 0304 	sub.w	r3, ip, r4
 8011a0a:	3b15      	subs	r3, #21
 8011a0c:	f023 0303 	bic.w	r3, r3, #3
 8011a10:	3304      	adds	r3, #4
 8011a12:	f104 0015 	add.w	r0, r4, #21
 8011a16:	4584      	cmp	ip, r0
 8011a18:	bf38      	it	cc
 8011a1a:	2304      	movcc	r3, #4
 8011a1c:	50ca      	str	r2, [r1, r3]
 8011a1e:	b10a      	cbz	r2, 8011a24 <__lshift+0xa4>
 8011a20:	f108 0602 	add.w	r6, r8, #2
 8011a24:	3e01      	subs	r6, #1
 8011a26:	4638      	mov	r0, r7
 8011a28:	612e      	str	r6, [r5, #16]
 8011a2a:	4621      	mov	r1, r4
 8011a2c:	f7ff fd90 	bl	8011550 <_Bfree>
 8011a30:	4628      	mov	r0, r5
 8011a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a36:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a3a:	3301      	adds	r3, #1
 8011a3c:	e7c5      	b.n	80119ca <__lshift+0x4a>
 8011a3e:	3904      	subs	r1, #4
 8011a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a44:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a48:	459c      	cmp	ip, r3
 8011a4a:	d8f9      	bhi.n	8011a40 <__lshift+0xc0>
 8011a4c:	e7ea      	b.n	8011a24 <__lshift+0xa4>
 8011a4e:	bf00      	nop
 8011a50:	08013a65 	.word	0x08013a65
 8011a54:	08013ad6 	.word	0x08013ad6

08011a58 <__mcmp>:
 8011a58:	690a      	ldr	r2, [r1, #16]
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	6900      	ldr	r0, [r0, #16]
 8011a5e:	1a80      	subs	r0, r0, r2
 8011a60:	b530      	push	{r4, r5, lr}
 8011a62:	d10e      	bne.n	8011a82 <__mcmp+0x2a>
 8011a64:	3314      	adds	r3, #20
 8011a66:	3114      	adds	r1, #20
 8011a68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011a6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011a70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011a74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011a78:	4295      	cmp	r5, r2
 8011a7a:	d003      	beq.n	8011a84 <__mcmp+0x2c>
 8011a7c:	d205      	bcs.n	8011a8a <__mcmp+0x32>
 8011a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8011a82:	bd30      	pop	{r4, r5, pc}
 8011a84:	42a3      	cmp	r3, r4
 8011a86:	d3f3      	bcc.n	8011a70 <__mcmp+0x18>
 8011a88:	e7fb      	b.n	8011a82 <__mcmp+0x2a>
 8011a8a:	2001      	movs	r0, #1
 8011a8c:	e7f9      	b.n	8011a82 <__mcmp+0x2a>
	...

08011a90 <__mdiff>:
 8011a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a94:	4689      	mov	r9, r1
 8011a96:	4606      	mov	r6, r0
 8011a98:	4611      	mov	r1, r2
 8011a9a:	4648      	mov	r0, r9
 8011a9c:	4614      	mov	r4, r2
 8011a9e:	f7ff ffdb 	bl	8011a58 <__mcmp>
 8011aa2:	1e05      	subs	r5, r0, #0
 8011aa4:	d112      	bne.n	8011acc <__mdiff+0x3c>
 8011aa6:	4629      	mov	r1, r5
 8011aa8:	4630      	mov	r0, r6
 8011aaa:	f7ff fd11 	bl	80114d0 <_Balloc>
 8011aae:	4602      	mov	r2, r0
 8011ab0:	b928      	cbnz	r0, 8011abe <__mdiff+0x2e>
 8011ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8011bb0 <__mdiff+0x120>)
 8011ab4:	f240 2137 	movw	r1, #567	@ 0x237
 8011ab8:	483e      	ldr	r0, [pc, #248]	@ (8011bb4 <__mdiff+0x124>)
 8011aba:	f000 fc71 	bl	80123a0 <__assert_func>
 8011abe:	2301      	movs	r3, #1
 8011ac0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011ac4:	4610      	mov	r0, r2
 8011ac6:	b003      	add	sp, #12
 8011ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011acc:	bfbc      	itt	lt
 8011ace:	464b      	movlt	r3, r9
 8011ad0:	46a1      	movlt	r9, r4
 8011ad2:	4630      	mov	r0, r6
 8011ad4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011ad8:	bfba      	itte	lt
 8011ada:	461c      	movlt	r4, r3
 8011adc:	2501      	movlt	r5, #1
 8011ade:	2500      	movge	r5, #0
 8011ae0:	f7ff fcf6 	bl	80114d0 <_Balloc>
 8011ae4:	4602      	mov	r2, r0
 8011ae6:	b918      	cbnz	r0, 8011af0 <__mdiff+0x60>
 8011ae8:	4b31      	ldr	r3, [pc, #196]	@ (8011bb0 <__mdiff+0x120>)
 8011aea:	f240 2145 	movw	r1, #581	@ 0x245
 8011aee:	e7e3      	b.n	8011ab8 <__mdiff+0x28>
 8011af0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011af4:	6926      	ldr	r6, [r4, #16]
 8011af6:	60c5      	str	r5, [r0, #12]
 8011af8:	f109 0310 	add.w	r3, r9, #16
 8011afc:	f109 0514 	add.w	r5, r9, #20
 8011b00:	f104 0e14 	add.w	lr, r4, #20
 8011b04:	f100 0b14 	add.w	fp, r0, #20
 8011b08:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011b0c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011b10:	9301      	str	r3, [sp, #4]
 8011b12:	46d9      	mov	r9, fp
 8011b14:	f04f 0c00 	mov.w	ip, #0
 8011b18:	9b01      	ldr	r3, [sp, #4]
 8011b1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011b1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011b22:	9301      	str	r3, [sp, #4]
 8011b24:	fa1f f38a 	uxth.w	r3, sl
 8011b28:	4619      	mov	r1, r3
 8011b2a:	b283      	uxth	r3, r0
 8011b2c:	1acb      	subs	r3, r1, r3
 8011b2e:	0c00      	lsrs	r0, r0, #16
 8011b30:	4463      	add	r3, ip
 8011b32:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011b36:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011b3a:	b29b      	uxth	r3, r3
 8011b3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011b40:	4576      	cmp	r6, lr
 8011b42:	f849 3b04 	str.w	r3, [r9], #4
 8011b46:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b4a:	d8e5      	bhi.n	8011b18 <__mdiff+0x88>
 8011b4c:	1b33      	subs	r3, r6, r4
 8011b4e:	3b15      	subs	r3, #21
 8011b50:	f023 0303 	bic.w	r3, r3, #3
 8011b54:	3415      	adds	r4, #21
 8011b56:	3304      	adds	r3, #4
 8011b58:	42a6      	cmp	r6, r4
 8011b5a:	bf38      	it	cc
 8011b5c:	2304      	movcc	r3, #4
 8011b5e:	441d      	add	r5, r3
 8011b60:	445b      	add	r3, fp
 8011b62:	461e      	mov	r6, r3
 8011b64:	462c      	mov	r4, r5
 8011b66:	4544      	cmp	r4, r8
 8011b68:	d30e      	bcc.n	8011b88 <__mdiff+0xf8>
 8011b6a:	f108 0103 	add.w	r1, r8, #3
 8011b6e:	1b49      	subs	r1, r1, r5
 8011b70:	f021 0103 	bic.w	r1, r1, #3
 8011b74:	3d03      	subs	r5, #3
 8011b76:	45a8      	cmp	r8, r5
 8011b78:	bf38      	it	cc
 8011b7a:	2100      	movcc	r1, #0
 8011b7c:	440b      	add	r3, r1
 8011b7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011b82:	b191      	cbz	r1, 8011baa <__mdiff+0x11a>
 8011b84:	6117      	str	r7, [r2, #16]
 8011b86:	e79d      	b.n	8011ac4 <__mdiff+0x34>
 8011b88:	f854 1b04 	ldr.w	r1, [r4], #4
 8011b8c:	46e6      	mov	lr, ip
 8011b8e:	0c08      	lsrs	r0, r1, #16
 8011b90:	fa1c fc81 	uxtah	ip, ip, r1
 8011b94:	4471      	add	r1, lr
 8011b96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011b9a:	b289      	uxth	r1, r1
 8011b9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011ba0:	f846 1b04 	str.w	r1, [r6], #4
 8011ba4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011ba8:	e7dd      	b.n	8011b66 <__mdiff+0xd6>
 8011baa:	3f01      	subs	r7, #1
 8011bac:	e7e7      	b.n	8011b7e <__mdiff+0xee>
 8011bae:	bf00      	nop
 8011bb0:	08013a65 	.word	0x08013a65
 8011bb4:	08013ad6 	.word	0x08013ad6

08011bb8 <__ulp>:
 8011bb8:	b082      	sub	sp, #8
 8011bba:	ed8d 0b00 	vstr	d0, [sp]
 8011bbe:	9a01      	ldr	r2, [sp, #4]
 8011bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8011c00 <__ulp+0x48>)
 8011bc2:	4013      	ands	r3, r2
 8011bc4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	dc08      	bgt.n	8011bde <__ulp+0x26>
 8011bcc:	425b      	negs	r3, r3
 8011bce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011bd2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011bd6:	da04      	bge.n	8011be2 <__ulp+0x2a>
 8011bd8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011bdc:	4113      	asrs	r3, r2
 8011bde:	2200      	movs	r2, #0
 8011be0:	e008      	b.n	8011bf4 <__ulp+0x3c>
 8011be2:	f1a2 0314 	sub.w	r3, r2, #20
 8011be6:	2b1e      	cmp	r3, #30
 8011be8:	bfda      	itte	le
 8011bea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011bee:	40da      	lsrle	r2, r3
 8011bf0:	2201      	movgt	r2, #1
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	4619      	mov	r1, r3
 8011bf6:	4610      	mov	r0, r2
 8011bf8:	ec41 0b10 	vmov	d0, r0, r1
 8011bfc:	b002      	add	sp, #8
 8011bfe:	4770      	bx	lr
 8011c00:	7ff00000 	.word	0x7ff00000

08011c04 <__b2d>:
 8011c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c08:	6906      	ldr	r6, [r0, #16]
 8011c0a:	f100 0814 	add.w	r8, r0, #20
 8011c0e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011c12:	1f37      	subs	r7, r6, #4
 8011c14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011c18:	4610      	mov	r0, r2
 8011c1a:	f7ff fd4b 	bl	80116b4 <__hi0bits>
 8011c1e:	f1c0 0320 	rsb	r3, r0, #32
 8011c22:	280a      	cmp	r0, #10
 8011c24:	600b      	str	r3, [r1, #0]
 8011c26:	491b      	ldr	r1, [pc, #108]	@ (8011c94 <__b2d+0x90>)
 8011c28:	dc15      	bgt.n	8011c56 <__b2d+0x52>
 8011c2a:	f1c0 0c0b 	rsb	ip, r0, #11
 8011c2e:	fa22 f30c 	lsr.w	r3, r2, ip
 8011c32:	45b8      	cmp	r8, r7
 8011c34:	ea43 0501 	orr.w	r5, r3, r1
 8011c38:	bf34      	ite	cc
 8011c3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c3e:	2300      	movcs	r3, #0
 8011c40:	3015      	adds	r0, #21
 8011c42:	fa02 f000 	lsl.w	r0, r2, r0
 8011c46:	fa23 f30c 	lsr.w	r3, r3, ip
 8011c4a:	4303      	orrs	r3, r0
 8011c4c:	461c      	mov	r4, r3
 8011c4e:	ec45 4b10 	vmov	d0, r4, r5
 8011c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c56:	45b8      	cmp	r8, r7
 8011c58:	bf3a      	itte	cc
 8011c5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c5e:	f1a6 0708 	subcc.w	r7, r6, #8
 8011c62:	2300      	movcs	r3, #0
 8011c64:	380b      	subs	r0, #11
 8011c66:	d012      	beq.n	8011c8e <__b2d+0x8a>
 8011c68:	f1c0 0120 	rsb	r1, r0, #32
 8011c6c:	fa23 f401 	lsr.w	r4, r3, r1
 8011c70:	4082      	lsls	r2, r0
 8011c72:	4322      	orrs	r2, r4
 8011c74:	4547      	cmp	r7, r8
 8011c76:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011c7a:	bf8c      	ite	hi
 8011c7c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011c80:	2200      	movls	r2, #0
 8011c82:	4083      	lsls	r3, r0
 8011c84:	40ca      	lsrs	r2, r1
 8011c86:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011c8a:	4313      	orrs	r3, r2
 8011c8c:	e7de      	b.n	8011c4c <__b2d+0x48>
 8011c8e:	ea42 0501 	orr.w	r5, r2, r1
 8011c92:	e7db      	b.n	8011c4c <__b2d+0x48>
 8011c94:	3ff00000 	.word	0x3ff00000

08011c98 <__d2b>:
 8011c98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c9c:	460f      	mov	r7, r1
 8011c9e:	2101      	movs	r1, #1
 8011ca0:	ec59 8b10 	vmov	r8, r9, d0
 8011ca4:	4616      	mov	r6, r2
 8011ca6:	f7ff fc13 	bl	80114d0 <_Balloc>
 8011caa:	4604      	mov	r4, r0
 8011cac:	b930      	cbnz	r0, 8011cbc <__d2b+0x24>
 8011cae:	4602      	mov	r2, r0
 8011cb0:	4b23      	ldr	r3, [pc, #140]	@ (8011d40 <__d2b+0xa8>)
 8011cb2:	4824      	ldr	r0, [pc, #144]	@ (8011d44 <__d2b+0xac>)
 8011cb4:	f240 310f 	movw	r1, #783	@ 0x30f
 8011cb8:	f000 fb72 	bl	80123a0 <__assert_func>
 8011cbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011cc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011cc4:	b10d      	cbz	r5, 8011cca <__d2b+0x32>
 8011cc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011cca:	9301      	str	r3, [sp, #4]
 8011ccc:	f1b8 0300 	subs.w	r3, r8, #0
 8011cd0:	d023      	beq.n	8011d1a <__d2b+0x82>
 8011cd2:	4668      	mov	r0, sp
 8011cd4:	9300      	str	r3, [sp, #0]
 8011cd6:	f7ff fd0c 	bl	80116f2 <__lo0bits>
 8011cda:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011cde:	b1d0      	cbz	r0, 8011d16 <__d2b+0x7e>
 8011ce0:	f1c0 0320 	rsb	r3, r0, #32
 8011ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8011ce8:	430b      	orrs	r3, r1
 8011cea:	40c2      	lsrs	r2, r0
 8011cec:	6163      	str	r3, [r4, #20]
 8011cee:	9201      	str	r2, [sp, #4]
 8011cf0:	9b01      	ldr	r3, [sp, #4]
 8011cf2:	61a3      	str	r3, [r4, #24]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	bf0c      	ite	eq
 8011cf8:	2201      	moveq	r2, #1
 8011cfa:	2202      	movne	r2, #2
 8011cfc:	6122      	str	r2, [r4, #16]
 8011cfe:	b1a5      	cbz	r5, 8011d2a <__d2b+0x92>
 8011d00:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011d04:	4405      	add	r5, r0
 8011d06:	603d      	str	r5, [r7, #0]
 8011d08:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011d0c:	6030      	str	r0, [r6, #0]
 8011d0e:	4620      	mov	r0, r4
 8011d10:	b003      	add	sp, #12
 8011d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d16:	6161      	str	r1, [r4, #20]
 8011d18:	e7ea      	b.n	8011cf0 <__d2b+0x58>
 8011d1a:	a801      	add	r0, sp, #4
 8011d1c:	f7ff fce9 	bl	80116f2 <__lo0bits>
 8011d20:	9b01      	ldr	r3, [sp, #4]
 8011d22:	6163      	str	r3, [r4, #20]
 8011d24:	3020      	adds	r0, #32
 8011d26:	2201      	movs	r2, #1
 8011d28:	e7e8      	b.n	8011cfc <__d2b+0x64>
 8011d2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011d32:	6038      	str	r0, [r7, #0]
 8011d34:	6918      	ldr	r0, [r3, #16]
 8011d36:	f7ff fcbd 	bl	80116b4 <__hi0bits>
 8011d3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d3e:	e7e5      	b.n	8011d0c <__d2b+0x74>
 8011d40:	08013a65 	.word	0x08013a65
 8011d44:	08013ad6 	.word	0x08013ad6

08011d48 <__ratio>:
 8011d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d4c:	b085      	sub	sp, #20
 8011d4e:	e9cd 1000 	strd	r1, r0, [sp]
 8011d52:	a902      	add	r1, sp, #8
 8011d54:	f7ff ff56 	bl	8011c04 <__b2d>
 8011d58:	9800      	ldr	r0, [sp, #0]
 8011d5a:	a903      	add	r1, sp, #12
 8011d5c:	ec55 4b10 	vmov	r4, r5, d0
 8011d60:	f7ff ff50 	bl	8011c04 <__b2d>
 8011d64:	9b01      	ldr	r3, [sp, #4]
 8011d66:	6919      	ldr	r1, [r3, #16]
 8011d68:	9b00      	ldr	r3, [sp, #0]
 8011d6a:	691b      	ldr	r3, [r3, #16]
 8011d6c:	1ac9      	subs	r1, r1, r3
 8011d6e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011d72:	1a9b      	subs	r3, r3, r2
 8011d74:	ec5b ab10 	vmov	sl, fp, d0
 8011d78:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	bfce      	itee	gt
 8011d80:	462a      	movgt	r2, r5
 8011d82:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011d86:	465a      	movle	r2, fp
 8011d88:	462f      	mov	r7, r5
 8011d8a:	46d9      	mov	r9, fp
 8011d8c:	bfcc      	ite	gt
 8011d8e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011d92:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011d96:	464b      	mov	r3, r9
 8011d98:	4652      	mov	r2, sl
 8011d9a:	4620      	mov	r0, r4
 8011d9c:	4639      	mov	r1, r7
 8011d9e:	f7ee fd7d 	bl	800089c <__aeabi_ddiv>
 8011da2:	ec41 0b10 	vmov	d0, r0, r1
 8011da6:	b005      	add	sp, #20
 8011da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011dac <__copybits>:
 8011dac:	3901      	subs	r1, #1
 8011dae:	b570      	push	{r4, r5, r6, lr}
 8011db0:	1149      	asrs	r1, r1, #5
 8011db2:	6914      	ldr	r4, [r2, #16]
 8011db4:	3101      	adds	r1, #1
 8011db6:	f102 0314 	add.w	r3, r2, #20
 8011dba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011dbe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011dc2:	1f05      	subs	r5, r0, #4
 8011dc4:	42a3      	cmp	r3, r4
 8011dc6:	d30c      	bcc.n	8011de2 <__copybits+0x36>
 8011dc8:	1aa3      	subs	r3, r4, r2
 8011dca:	3b11      	subs	r3, #17
 8011dcc:	f023 0303 	bic.w	r3, r3, #3
 8011dd0:	3211      	adds	r2, #17
 8011dd2:	42a2      	cmp	r2, r4
 8011dd4:	bf88      	it	hi
 8011dd6:	2300      	movhi	r3, #0
 8011dd8:	4418      	add	r0, r3
 8011dda:	2300      	movs	r3, #0
 8011ddc:	4288      	cmp	r0, r1
 8011dde:	d305      	bcc.n	8011dec <__copybits+0x40>
 8011de0:	bd70      	pop	{r4, r5, r6, pc}
 8011de2:	f853 6b04 	ldr.w	r6, [r3], #4
 8011de6:	f845 6f04 	str.w	r6, [r5, #4]!
 8011dea:	e7eb      	b.n	8011dc4 <__copybits+0x18>
 8011dec:	f840 3b04 	str.w	r3, [r0], #4
 8011df0:	e7f4      	b.n	8011ddc <__copybits+0x30>

08011df2 <__any_on>:
 8011df2:	f100 0214 	add.w	r2, r0, #20
 8011df6:	6900      	ldr	r0, [r0, #16]
 8011df8:	114b      	asrs	r3, r1, #5
 8011dfa:	4298      	cmp	r0, r3
 8011dfc:	b510      	push	{r4, lr}
 8011dfe:	db11      	blt.n	8011e24 <__any_on+0x32>
 8011e00:	dd0a      	ble.n	8011e18 <__any_on+0x26>
 8011e02:	f011 011f 	ands.w	r1, r1, #31
 8011e06:	d007      	beq.n	8011e18 <__any_on+0x26>
 8011e08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011e0c:	fa24 f001 	lsr.w	r0, r4, r1
 8011e10:	fa00 f101 	lsl.w	r1, r0, r1
 8011e14:	428c      	cmp	r4, r1
 8011e16:	d10b      	bne.n	8011e30 <__any_on+0x3e>
 8011e18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011e1c:	4293      	cmp	r3, r2
 8011e1e:	d803      	bhi.n	8011e28 <__any_on+0x36>
 8011e20:	2000      	movs	r0, #0
 8011e22:	bd10      	pop	{r4, pc}
 8011e24:	4603      	mov	r3, r0
 8011e26:	e7f7      	b.n	8011e18 <__any_on+0x26>
 8011e28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011e2c:	2900      	cmp	r1, #0
 8011e2e:	d0f5      	beq.n	8011e1c <__any_on+0x2a>
 8011e30:	2001      	movs	r0, #1
 8011e32:	e7f6      	b.n	8011e22 <__any_on+0x30>

08011e34 <_strtol_l.constprop.0>:
 8011e34:	2b24      	cmp	r3, #36	@ 0x24
 8011e36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e3a:	4686      	mov	lr, r0
 8011e3c:	4690      	mov	r8, r2
 8011e3e:	d801      	bhi.n	8011e44 <_strtol_l.constprop.0+0x10>
 8011e40:	2b01      	cmp	r3, #1
 8011e42:	d106      	bne.n	8011e52 <_strtol_l.constprop.0+0x1e>
 8011e44:	f7fe f860 	bl	800ff08 <__errno>
 8011e48:	2316      	movs	r3, #22
 8011e4a:	6003      	str	r3, [r0, #0]
 8011e4c:	2000      	movs	r0, #0
 8011e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e52:	4834      	ldr	r0, [pc, #208]	@ (8011f24 <_strtol_l.constprop.0+0xf0>)
 8011e54:	460d      	mov	r5, r1
 8011e56:	462a      	mov	r2, r5
 8011e58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e5c:	5d06      	ldrb	r6, [r0, r4]
 8011e5e:	f016 0608 	ands.w	r6, r6, #8
 8011e62:	d1f8      	bne.n	8011e56 <_strtol_l.constprop.0+0x22>
 8011e64:	2c2d      	cmp	r4, #45	@ 0x2d
 8011e66:	d12d      	bne.n	8011ec4 <_strtol_l.constprop.0+0x90>
 8011e68:	782c      	ldrb	r4, [r5, #0]
 8011e6a:	2601      	movs	r6, #1
 8011e6c:	1c95      	adds	r5, r2, #2
 8011e6e:	f033 0210 	bics.w	r2, r3, #16
 8011e72:	d109      	bne.n	8011e88 <_strtol_l.constprop.0+0x54>
 8011e74:	2c30      	cmp	r4, #48	@ 0x30
 8011e76:	d12a      	bne.n	8011ece <_strtol_l.constprop.0+0x9a>
 8011e78:	782a      	ldrb	r2, [r5, #0]
 8011e7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011e7e:	2a58      	cmp	r2, #88	@ 0x58
 8011e80:	d125      	bne.n	8011ece <_strtol_l.constprop.0+0x9a>
 8011e82:	786c      	ldrb	r4, [r5, #1]
 8011e84:	2310      	movs	r3, #16
 8011e86:	3502      	adds	r5, #2
 8011e88:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011e8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011e90:	2200      	movs	r2, #0
 8011e92:	fbbc f9f3 	udiv	r9, ip, r3
 8011e96:	4610      	mov	r0, r2
 8011e98:	fb03 ca19 	mls	sl, r3, r9, ip
 8011e9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011ea0:	2f09      	cmp	r7, #9
 8011ea2:	d81b      	bhi.n	8011edc <_strtol_l.constprop.0+0xa8>
 8011ea4:	463c      	mov	r4, r7
 8011ea6:	42a3      	cmp	r3, r4
 8011ea8:	dd27      	ble.n	8011efa <_strtol_l.constprop.0+0xc6>
 8011eaa:	1c57      	adds	r7, r2, #1
 8011eac:	d007      	beq.n	8011ebe <_strtol_l.constprop.0+0x8a>
 8011eae:	4581      	cmp	r9, r0
 8011eb0:	d320      	bcc.n	8011ef4 <_strtol_l.constprop.0+0xc0>
 8011eb2:	d101      	bne.n	8011eb8 <_strtol_l.constprop.0+0x84>
 8011eb4:	45a2      	cmp	sl, r4
 8011eb6:	db1d      	blt.n	8011ef4 <_strtol_l.constprop.0+0xc0>
 8011eb8:	fb00 4003 	mla	r0, r0, r3, r4
 8011ebc:	2201      	movs	r2, #1
 8011ebe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011ec2:	e7eb      	b.n	8011e9c <_strtol_l.constprop.0+0x68>
 8011ec4:	2c2b      	cmp	r4, #43	@ 0x2b
 8011ec6:	bf04      	itt	eq
 8011ec8:	782c      	ldrbeq	r4, [r5, #0]
 8011eca:	1c95      	addeq	r5, r2, #2
 8011ecc:	e7cf      	b.n	8011e6e <_strtol_l.constprop.0+0x3a>
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d1da      	bne.n	8011e88 <_strtol_l.constprop.0+0x54>
 8011ed2:	2c30      	cmp	r4, #48	@ 0x30
 8011ed4:	bf0c      	ite	eq
 8011ed6:	2308      	moveq	r3, #8
 8011ed8:	230a      	movne	r3, #10
 8011eda:	e7d5      	b.n	8011e88 <_strtol_l.constprop.0+0x54>
 8011edc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011ee0:	2f19      	cmp	r7, #25
 8011ee2:	d801      	bhi.n	8011ee8 <_strtol_l.constprop.0+0xb4>
 8011ee4:	3c37      	subs	r4, #55	@ 0x37
 8011ee6:	e7de      	b.n	8011ea6 <_strtol_l.constprop.0+0x72>
 8011ee8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011eec:	2f19      	cmp	r7, #25
 8011eee:	d804      	bhi.n	8011efa <_strtol_l.constprop.0+0xc6>
 8011ef0:	3c57      	subs	r4, #87	@ 0x57
 8011ef2:	e7d8      	b.n	8011ea6 <_strtol_l.constprop.0+0x72>
 8011ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8011ef8:	e7e1      	b.n	8011ebe <_strtol_l.constprop.0+0x8a>
 8011efa:	1c53      	adds	r3, r2, #1
 8011efc:	d108      	bne.n	8011f10 <_strtol_l.constprop.0+0xdc>
 8011efe:	2322      	movs	r3, #34	@ 0x22
 8011f00:	f8ce 3000 	str.w	r3, [lr]
 8011f04:	4660      	mov	r0, ip
 8011f06:	f1b8 0f00 	cmp.w	r8, #0
 8011f0a:	d0a0      	beq.n	8011e4e <_strtol_l.constprop.0+0x1a>
 8011f0c:	1e69      	subs	r1, r5, #1
 8011f0e:	e006      	b.n	8011f1e <_strtol_l.constprop.0+0xea>
 8011f10:	b106      	cbz	r6, 8011f14 <_strtol_l.constprop.0+0xe0>
 8011f12:	4240      	negs	r0, r0
 8011f14:	f1b8 0f00 	cmp.w	r8, #0
 8011f18:	d099      	beq.n	8011e4e <_strtol_l.constprop.0+0x1a>
 8011f1a:	2a00      	cmp	r2, #0
 8011f1c:	d1f6      	bne.n	8011f0c <_strtol_l.constprop.0+0xd8>
 8011f1e:	f8c8 1000 	str.w	r1, [r8]
 8011f22:	e794      	b.n	8011e4e <_strtol_l.constprop.0+0x1a>
 8011f24:	08013c31 	.word	0x08013c31

08011f28 <_strtol_r>:
 8011f28:	f7ff bf84 	b.w	8011e34 <_strtol_l.constprop.0>

08011f2c <__ascii_wctomb>:
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	4608      	mov	r0, r1
 8011f30:	b141      	cbz	r1, 8011f44 <__ascii_wctomb+0x18>
 8011f32:	2aff      	cmp	r2, #255	@ 0xff
 8011f34:	d904      	bls.n	8011f40 <__ascii_wctomb+0x14>
 8011f36:	228a      	movs	r2, #138	@ 0x8a
 8011f38:	601a      	str	r2, [r3, #0]
 8011f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f3e:	4770      	bx	lr
 8011f40:	700a      	strb	r2, [r1, #0]
 8011f42:	2001      	movs	r0, #1
 8011f44:	4770      	bx	lr

08011f46 <__ssputs_r>:
 8011f46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f4a:	688e      	ldr	r6, [r1, #8]
 8011f4c:	461f      	mov	r7, r3
 8011f4e:	42be      	cmp	r6, r7
 8011f50:	680b      	ldr	r3, [r1, #0]
 8011f52:	4682      	mov	sl, r0
 8011f54:	460c      	mov	r4, r1
 8011f56:	4690      	mov	r8, r2
 8011f58:	d82d      	bhi.n	8011fb6 <__ssputs_r+0x70>
 8011f5a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011f5e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011f62:	d026      	beq.n	8011fb2 <__ssputs_r+0x6c>
 8011f64:	6965      	ldr	r5, [r4, #20]
 8011f66:	6909      	ldr	r1, [r1, #16]
 8011f68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f6c:	eba3 0901 	sub.w	r9, r3, r1
 8011f70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011f74:	1c7b      	adds	r3, r7, #1
 8011f76:	444b      	add	r3, r9
 8011f78:	106d      	asrs	r5, r5, #1
 8011f7a:	429d      	cmp	r5, r3
 8011f7c:	bf38      	it	cc
 8011f7e:	461d      	movcc	r5, r3
 8011f80:	0553      	lsls	r3, r2, #21
 8011f82:	d527      	bpl.n	8011fd4 <__ssputs_r+0x8e>
 8011f84:	4629      	mov	r1, r5
 8011f86:	f7ff fa05 	bl	8011394 <_malloc_r>
 8011f8a:	4606      	mov	r6, r0
 8011f8c:	b360      	cbz	r0, 8011fe8 <__ssputs_r+0xa2>
 8011f8e:	6921      	ldr	r1, [r4, #16]
 8011f90:	464a      	mov	r2, r9
 8011f92:	f7fd ffe6 	bl	800ff62 <memcpy>
 8011f96:	89a3      	ldrh	r3, [r4, #12]
 8011f98:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011fa0:	81a3      	strh	r3, [r4, #12]
 8011fa2:	6126      	str	r6, [r4, #16]
 8011fa4:	6165      	str	r5, [r4, #20]
 8011fa6:	444e      	add	r6, r9
 8011fa8:	eba5 0509 	sub.w	r5, r5, r9
 8011fac:	6026      	str	r6, [r4, #0]
 8011fae:	60a5      	str	r5, [r4, #8]
 8011fb0:	463e      	mov	r6, r7
 8011fb2:	42be      	cmp	r6, r7
 8011fb4:	d900      	bls.n	8011fb8 <__ssputs_r+0x72>
 8011fb6:	463e      	mov	r6, r7
 8011fb8:	6820      	ldr	r0, [r4, #0]
 8011fba:	4632      	mov	r2, r6
 8011fbc:	4641      	mov	r1, r8
 8011fbe:	f000 f9c5 	bl	801234c <memmove>
 8011fc2:	68a3      	ldr	r3, [r4, #8]
 8011fc4:	1b9b      	subs	r3, r3, r6
 8011fc6:	60a3      	str	r3, [r4, #8]
 8011fc8:	6823      	ldr	r3, [r4, #0]
 8011fca:	4433      	add	r3, r6
 8011fcc:	6023      	str	r3, [r4, #0]
 8011fce:	2000      	movs	r0, #0
 8011fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fd4:	462a      	mov	r2, r5
 8011fd6:	f000 fa15 	bl	8012404 <_realloc_r>
 8011fda:	4606      	mov	r6, r0
 8011fdc:	2800      	cmp	r0, #0
 8011fde:	d1e0      	bne.n	8011fa2 <__ssputs_r+0x5c>
 8011fe0:	6921      	ldr	r1, [r4, #16]
 8011fe2:	4650      	mov	r0, sl
 8011fe4:	f7fe fe28 	bl	8010c38 <_free_r>
 8011fe8:	230c      	movs	r3, #12
 8011fea:	f8ca 3000 	str.w	r3, [sl]
 8011fee:	89a3      	ldrh	r3, [r4, #12]
 8011ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ff4:	81a3      	strh	r3, [r4, #12]
 8011ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8011ffa:	e7e9      	b.n	8011fd0 <__ssputs_r+0x8a>

08011ffc <_svfiprintf_r>:
 8011ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012000:	4698      	mov	r8, r3
 8012002:	898b      	ldrh	r3, [r1, #12]
 8012004:	061b      	lsls	r3, r3, #24
 8012006:	b09d      	sub	sp, #116	@ 0x74
 8012008:	4607      	mov	r7, r0
 801200a:	460d      	mov	r5, r1
 801200c:	4614      	mov	r4, r2
 801200e:	d510      	bpl.n	8012032 <_svfiprintf_r+0x36>
 8012010:	690b      	ldr	r3, [r1, #16]
 8012012:	b973      	cbnz	r3, 8012032 <_svfiprintf_r+0x36>
 8012014:	2140      	movs	r1, #64	@ 0x40
 8012016:	f7ff f9bd 	bl	8011394 <_malloc_r>
 801201a:	6028      	str	r0, [r5, #0]
 801201c:	6128      	str	r0, [r5, #16]
 801201e:	b930      	cbnz	r0, 801202e <_svfiprintf_r+0x32>
 8012020:	230c      	movs	r3, #12
 8012022:	603b      	str	r3, [r7, #0]
 8012024:	f04f 30ff 	mov.w	r0, #4294967295
 8012028:	b01d      	add	sp, #116	@ 0x74
 801202a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801202e:	2340      	movs	r3, #64	@ 0x40
 8012030:	616b      	str	r3, [r5, #20]
 8012032:	2300      	movs	r3, #0
 8012034:	9309      	str	r3, [sp, #36]	@ 0x24
 8012036:	2320      	movs	r3, #32
 8012038:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801203c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012040:	2330      	movs	r3, #48	@ 0x30
 8012042:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80121e0 <_svfiprintf_r+0x1e4>
 8012046:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801204a:	f04f 0901 	mov.w	r9, #1
 801204e:	4623      	mov	r3, r4
 8012050:	469a      	mov	sl, r3
 8012052:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012056:	b10a      	cbz	r2, 801205c <_svfiprintf_r+0x60>
 8012058:	2a25      	cmp	r2, #37	@ 0x25
 801205a:	d1f9      	bne.n	8012050 <_svfiprintf_r+0x54>
 801205c:	ebba 0b04 	subs.w	fp, sl, r4
 8012060:	d00b      	beq.n	801207a <_svfiprintf_r+0x7e>
 8012062:	465b      	mov	r3, fp
 8012064:	4622      	mov	r2, r4
 8012066:	4629      	mov	r1, r5
 8012068:	4638      	mov	r0, r7
 801206a:	f7ff ff6c 	bl	8011f46 <__ssputs_r>
 801206e:	3001      	adds	r0, #1
 8012070:	f000 80a7 	beq.w	80121c2 <_svfiprintf_r+0x1c6>
 8012074:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012076:	445a      	add	r2, fp
 8012078:	9209      	str	r2, [sp, #36]	@ 0x24
 801207a:	f89a 3000 	ldrb.w	r3, [sl]
 801207e:	2b00      	cmp	r3, #0
 8012080:	f000 809f 	beq.w	80121c2 <_svfiprintf_r+0x1c6>
 8012084:	2300      	movs	r3, #0
 8012086:	f04f 32ff 	mov.w	r2, #4294967295
 801208a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801208e:	f10a 0a01 	add.w	sl, sl, #1
 8012092:	9304      	str	r3, [sp, #16]
 8012094:	9307      	str	r3, [sp, #28]
 8012096:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801209a:	931a      	str	r3, [sp, #104]	@ 0x68
 801209c:	4654      	mov	r4, sl
 801209e:	2205      	movs	r2, #5
 80120a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120a4:	484e      	ldr	r0, [pc, #312]	@ (80121e0 <_svfiprintf_r+0x1e4>)
 80120a6:	f7ee f8bb 	bl	8000220 <memchr>
 80120aa:	9a04      	ldr	r2, [sp, #16]
 80120ac:	b9d8      	cbnz	r0, 80120e6 <_svfiprintf_r+0xea>
 80120ae:	06d0      	lsls	r0, r2, #27
 80120b0:	bf44      	itt	mi
 80120b2:	2320      	movmi	r3, #32
 80120b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80120b8:	0711      	lsls	r1, r2, #28
 80120ba:	bf44      	itt	mi
 80120bc:	232b      	movmi	r3, #43	@ 0x2b
 80120be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80120c2:	f89a 3000 	ldrb.w	r3, [sl]
 80120c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80120c8:	d015      	beq.n	80120f6 <_svfiprintf_r+0xfa>
 80120ca:	9a07      	ldr	r2, [sp, #28]
 80120cc:	4654      	mov	r4, sl
 80120ce:	2000      	movs	r0, #0
 80120d0:	f04f 0c0a 	mov.w	ip, #10
 80120d4:	4621      	mov	r1, r4
 80120d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120da:	3b30      	subs	r3, #48	@ 0x30
 80120dc:	2b09      	cmp	r3, #9
 80120de:	d94b      	bls.n	8012178 <_svfiprintf_r+0x17c>
 80120e0:	b1b0      	cbz	r0, 8012110 <_svfiprintf_r+0x114>
 80120e2:	9207      	str	r2, [sp, #28]
 80120e4:	e014      	b.n	8012110 <_svfiprintf_r+0x114>
 80120e6:	eba0 0308 	sub.w	r3, r0, r8
 80120ea:	fa09 f303 	lsl.w	r3, r9, r3
 80120ee:	4313      	orrs	r3, r2
 80120f0:	9304      	str	r3, [sp, #16]
 80120f2:	46a2      	mov	sl, r4
 80120f4:	e7d2      	b.n	801209c <_svfiprintf_r+0xa0>
 80120f6:	9b03      	ldr	r3, [sp, #12]
 80120f8:	1d19      	adds	r1, r3, #4
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	9103      	str	r1, [sp, #12]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	bfbb      	ittet	lt
 8012102:	425b      	neglt	r3, r3
 8012104:	f042 0202 	orrlt.w	r2, r2, #2
 8012108:	9307      	strge	r3, [sp, #28]
 801210a:	9307      	strlt	r3, [sp, #28]
 801210c:	bfb8      	it	lt
 801210e:	9204      	strlt	r2, [sp, #16]
 8012110:	7823      	ldrb	r3, [r4, #0]
 8012112:	2b2e      	cmp	r3, #46	@ 0x2e
 8012114:	d10a      	bne.n	801212c <_svfiprintf_r+0x130>
 8012116:	7863      	ldrb	r3, [r4, #1]
 8012118:	2b2a      	cmp	r3, #42	@ 0x2a
 801211a:	d132      	bne.n	8012182 <_svfiprintf_r+0x186>
 801211c:	9b03      	ldr	r3, [sp, #12]
 801211e:	1d1a      	adds	r2, r3, #4
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	9203      	str	r2, [sp, #12]
 8012124:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012128:	3402      	adds	r4, #2
 801212a:	9305      	str	r3, [sp, #20]
 801212c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80121f0 <_svfiprintf_r+0x1f4>
 8012130:	7821      	ldrb	r1, [r4, #0]
 8012132:	2203      	movs	r2, #3
 8012134:	4650      	mov	r0, sl
 8012136:	f7ee f873 	bl	8000220 <memchr>
 801213a:	b138      	cbz	r0, 801214c <_svfiprintf_r+0x150>
 801213c:	9b04      	ldr	r3, [sp, #16]
 801213e:	eba0 000a 	sub.w	r0, r0, sl
 8012142:	2240      	movs	r2, #64	@ 0x40
 8012144:	4082      	lsls	r2, r0
 8012146:	4313      	orrs	r3, r2
 8012148:	3401      	adds	r4, #1
 801214a:	9304      	str	r3, [sp, #16]
 801214c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012150:	4824      	ldr	r0, [pc, #144]	@ (80121e4 <_svfiprintf_r+0x1e8>)
 8012152:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012156:	2206      	movs	r2, #6
 8012158:	f7ee f862 	bl	8000220 <memchr>
 801215c:	2800      	cmp	r0, #0
 801215e:	d036      	beq.n	80121ce <_svfiprintf_r+0x1d2>
 8012160:	4b21      	ldr	r3, [pc, #132]	@ (80121e8 <_svfiprintf_r+0x1ec>)
 8012162:	bb1b      	cbnz	r3, 80121ac <_svfiprintf_r+0x1b0>
 8012164:	9b03      	ldr	r3, [sp, #12]
 8012166:	3307      	adds	r3, #7
 8012168:	f023 0307 	bic.w	r3, r3, #7
 801216c:	3308      	adds	r3, #8
 801216e:	9303      	str	r3, [sp, #12]
 8012170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012172:	4433      	add	r3, r6
 8012174:	9309      	str	r3, [sp, #36]	@ 0x24
 8012176:	e76a      	b.n	801204e <_svfiprintf_r+0x52>
 8012178:	fb0c 3202 	mla	r2, ip, r2, r3
 801217c:	460c      	mov	r4, r1
 801217e:	2001      	movs	r0, #1
 8012180:	e7a8      	b.n	80120d4 <_svfiprintf_r+0xd8>
 8012182:	2300      	movs	r3, #0
 8012184:	3401      	adds	r4, #1
 8012186:	9305      	str	r3, [sp, #20]
 8012188:	4619      	mov	r1, r3
 801218a:	f04f 0c0a 	mov.w	ip, #10
 801218e:	4620      	mov	r0, r4
 8012190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012194:	3a30      	subs	r2, #48	@ 0x30
 8012196:	2a09      	cmp	r2, #9
 8012198:	d903      	bls.n	80121a2 <_svfiprintf_r+0x1a6>
 801219a:	2b00      	cmp	r3, #0
 801219c:	d0c6      	beq.n	801212c <_svfiprintf_r+0x130>
 801219e:	9105      	str	r1, [sp, #20]
 80121a0:	e7c4      	b.n	801212c <_svfiprintf_r+0x130>
 80121a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80121a6:	4604      	mov	r4, r0
 80121a8:	2301      	movs	r3, #1
 80121aa:	e7f0      	b.n	801218e <_svfiprintf_r+0x192>
 80121ac:	ab03      	add	r3, sp, #12
 80121ae:	9300      	str	r3, [sp, #0]
 80121b0:	462a      	mov	r2, r5
 80121b2:	4b0e      	ldr	r3, [pc, #56]	@ (80121ec <_svfiprintf_r+0x1f0>)
 80121b4:	a904      	add	r1, sp, #16
 80121b6:	4638      	mov	r0, r7
 80121b8:	f7fc ff30 	bl	800f01c <_printf_float>
 80121bc:	1c42      	adds	r2, r0, #1
 80121be:	4606      	mov	r6, r0
 80121c0:	d1d6      	bne.n	8012170 <_svfiprintf_r+0x174>
 80121c2:	89ab      	ldrh	r3, [r5, #12]
 80121c4:	065b      	lsls	r3, r3, #25
 80121c6:	f53f af2d 	bmi.w	8012024 <_svfiprintf_r+0x28>
 80121ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80121cc:	e72c      	b.n	8012028 <_svfiprintf_r+0x2c>
 80121ce:	ab03      	add	r3, sp, #12
 80121d0:	9300      	str	r3, [sp, #0]
 80121d2:	462a      	mov	r2, r5
 80121d4:	4b05      	ldr	r3, [pc, #20]	@ (80121ec <_svfiprintf_r+0x1f0>)
 80121d6:	a904      	add	r1, sp, #16
 80121d8:	4638      	mov	r0, r7
 80121da:	f7fd f9b7 	bl	800f54c <_printf_i>
 80121de:	e7ed      	b.n	80121bc <_svfiprintf_r+0x1c0>
 80121e0:	08013d31 	.word	0x08013d31
 80121e4:	08013d3b 	.word	0x08013d3b
 80121e8:	0800f01d 	.word	0x0800f01d
 80121ec:	08011f47 	.word	0x08011f47
 80121f0:	08013d37 	.word	0x08013d37

080121f4 <__sflush_r>:
 80121f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80121f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121fc:	0716      	lsls	r6, r2, #28
 80121fe:	4605      	mov	r5, r0
 8012200:	460c      	mov	r4, r1
 8012202:	d454      	bmi.n	80122ae <__sflush_r+0xba>
 8012204:	684b      	ldr	r3, [r1, #4]
 8012206:	2b00      	cmp	r3, #0
 8012208:	dc02      	bgt.n	8012210 <__sflush_r+0x1c>
 801220a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801220c:	2b00      	cmp	r3, #0
 801220e:	dd48      	ble.n	80122a2 <__sflush_r+0xae>
 8012210:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012212:	2e00      	cmp	r6, #0
 8012214:	d045      	beq.n	80122a2 <__sflush_r+0xae>
 8012216:	2300      	movs	r3, #0
 8012218:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801221c:	682f      	ldr	r7, [r5, #0]
 801221e:	6a21      	ldr	r1, [r4, #32]
 8012220:	602b      	str	r3, [r5, #0]
 8012222:	d030      	beq.n	8012286 <__sflush_r+0x92>
 8012224:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012226:	89a3      	ldrh	r3, [r4, #12]
 8012228:	0759      	lsls	r1, r3, #29
 801222a:	d505      	bpl.n	8012238 <__sflush_r+0x44>
 801222c:	6863      	ldr	r3, [r4, #4]
 801222e:	1ad2      	subs	r2, r2, r3
 8012230:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012232:	b10b      	cbz	r3, 8012238 <__sflush_r+0x44>
 8012234:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012236:	1ad2      	subs	r2, r2, r3
 8012238:	2300      	movs	r3, #0
 801223a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801223c:	6a21      	ldr	r1, [r4, #32]
 801223e:	4628      	mov	r0, r5
 8012240:	47b0      	blx	r6
 8012242:	1c43      	adds	r3, r0, #1
 8012244:	89a3      	ldrh	r3, [r4, #12]
 8012246:	d106      	bne.n	8012256 <__sflush_r+0x62>
 8012248:	6829      	ldr	r1, [r5, #0]
 801224a:	291d      	cmp	r1, #29
 801224c:	d82b      	bhi.n	80122a6 <__sflush_r+0xb2>
 801224e:	4a2a      	ldr	r2, [pc, #168]	@ (80122f8 <__sflush_r+0x104>)
 8012250:	410a      	asrs	r2, r1
 8012252:	07d6      	lsls	r6, r2, #31
 8012254:	d427      	bmi.n	80122a6 <__sflush_r+0xb2>
 8012256:	2200      	movs	r2, #0
 8012258:	6062      	str	r2, [r4, #4]
 801225a:	04d9      	lsls	r1, r3, #19
 801225c:	6922      	ldr	r2, [r4, #16]
 801225e:	6022      	str	r2, [r4, #0]
 8012260:	d504      	bpl.n	801226c <__sflush_r+0x78>
 8012262:	1c42      	adds	r2, r0, #1
 8012264:	d101      	bne.n	801226a <__sflush_r+0x76>
 8012266:	682b      	ldr	r3, [r5, #0]
 8012268:	b903      	cbnz	r3, 801226c <__sflush_r+0x78>
 801226a:	6560      	str	r0, [r4, #84]	@ 0x54
 801226c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801226e:	602f      	str	r7, [r5, #0]
 8012270:	b1b9      	cbz	r1, 80122a2 <__sflush_r+0xae>
 8012272:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012276:	4299      	cmp	r1, r3
 8012278:	d002      	beq.n	8012280 <__sflush_r+0x8c>
 801227a:	4628      	mov	r0, r5
 801227c:	f7fe fcdc 	bl	8010c38 <_free_r>
 8012280:	2300      	movs	r3, #0
 8012282:	6363      	str	r3, [r4, #52]	@ 0x34
 8012284:	e00d      	b.n	80122a2 <__sflush_r+0xae>
 8012286:	2301      	movs	r3, #1
 8012288:	4628      	mov	r0, r5
 801228a:	47b0      	blx	r6
 801228c:	4602      	mov	r2, r0
 801228e:	1c50      	adds	r0, r2, #1
 8012290:	d1c9      	bne.n	8012226 <__sflush_r+0x32>
 8012292:	682b      	ldr	r3, [r5, #0]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d0c6      	beq.n	8012226 <__sflush_r+0x32>
 8012298:	2b1d      	cmp	r3, #29
 801229a:	d001      	beq.n	80122a0 <__sflush_r+0xac>
 801229c:	2b16      	cmp	r3, #22
 801229e:	d11e      	bne.n	80122de <__sflush_r+0xea>
 80122a0:	602f      	str	r7, [r5, #0]
 80122a2:	2000      	movs	r0, #0
 80122a4:	e022      	b.n	80122ec <__sflush_r+0xf8>
 80122a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80122aa:	b21b      	sxth	r3, r3
 80122ac:	e01b      	b.n	80122e6 <__sflush_r+0xf2>
 80122ae:	690f      	ldr	r7, [r1, #16]
 80122b0:	2f00      	cmp	r7, #0
 80122b2:	d0f6      	beq.n	80122a2 <__sflush_r+0xae>
 80122b4:	0793      	lsls	r3, r2, #30
 80122b6:	680e      	ldr	r6, [r1, #0]
 80122b8:	bf08      	it	eq
 80122ba:	694b      	ldreq	r3, [r1, #20]
 80122bc:	600f      	str	r7, [r1, #0]
 80122be:	bf18      	it	ne
 80122c0:	2300      	movne	r3, #0
 80122c2:	eba6 0807 	sub.w	r8, r6, r7
 80122c6:	608b      	str	r3, [r1, #8]
 80122c8:	f1b8 0f00 	cmp.w	r8, #0
 80122cc:	dde9      	ble.n	80122a2 <__sflush_r+0xae>
 80122ce:	6a21      	ldr	r1, [r4, #32]
 80122d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80122d2:	4643      	mov	r3, r8
 80122d4:	463a      	mov	r2, r7
 80122d6:	4628      	mov	r0, r5
 80122d8:	47b0      	blx	r6
 80122da:	2800      	cmp	r0, #0
 80122dc:	dc08      	bgt.n	80122f0 <__sflush_r+0xfc>
 80122de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80122e6:	81a3      	strh	r3, [r4, #12]
 80122e8:	f04f 30ff 	mov.w	r0, #4294967295
 80122ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122f0:	4407      	add	r7, r0
 80122f2:	eba8 0800 	sub.w	r8, r8, r0
 80122f6:	e7e7      	b.n	80122c8 <__sflush_r+0xd4>
 80122f8:	dfbffffe 	.word	0xdfbffffe

080122fc <_fflush_r>:
 80122fc:	b538      	push	{r3, r4, r5, lr}
 80122fe:	690b      	ldr	r3, [r1, #16]
 8012300:	4605      	mov	r5, r0
 8012302:	460c      	mov	r4, r1
 8012304:	b913      	cbnz	r3, 801230c <_fflush_r+0x10>
 8012306:	2500      	movs	r5, #0
 8012308:	4628      	mov	r0, r5
 801230a:	bd38      	pop	{r3, r4, r5, pc}
 801230c:	b118      	cbz	r0, 8012316 <_fflush_r+0x1a>
 801230e:	6a03      	ldr	r3, [r0, #32]
 8012310:	b90b      	cbnz	r3, 8012316 <_fflush_r+0x1a>
 8012312:	f7fd fcdb 	bl	800fccc <__sinit>
 8012316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d0f3      	beq.n	8012306 <_fflush_r+0xa>
 801231e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012320:	07d0      	lsls	r0, r2, #31
 8012322:	d404      	bmi.n	801232e <_fflush_r+0x32>
 8012324:	0599      	lsls	r1, r3, #22
 8012326:	d402      	bmi.n	801232e <_fflush_r+0x32>
 8012328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801232a:	f7fd fe18 	bl	800ff5e <__retarget_lock_acquire_recursive>
 801232e:	4628      	mov	r0, r5
 8012330:	4621      	mov	r1, r4
 8012332:	f7ff ff5f 	bl	80121f4 <__sflush_r>
 8012336:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012338:	07da      	lsls	r2, r3, #31
 801233a:	4605      	mov	r5, r0
 801233c:	d4e4      	bmi.n	8012308 <_fflush_r+0xc>
 801233e:	89a3      	ldrh	r3, [r4, #12]
 8012340:	059b      	lsls	r3, r3, #22
 8012342:	d4e1      	bmi.n	8012308 <_fflush_r+0xc>
 8012344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012346:	f7fd fe0b 	bl	800ff60 <__retarget_lock_release_recursive>
 801234a:	e7dd      	b.n	8012308 <_fflush_r+0xc>

0801234c <memmove>:
 801234c:	4288      	cmp	r0, r1
 801234e:	b510      	push	{r4, lr}
 8012350:	eb01 0402 	add.w	r4, r1, r2
 8012354:	d902      	bls.n	801235c <memmove+0x10>
 8012356:	4284      	cmp	r4, r0
 8012358:	4623      	mov	r3, r4
 801235a:	d807      	bhi.n	801236c <memmove+0x20>
 801235c:	1e43      	subs	r3, r0, #1
 801235e:	42a1      	cmp	r1, r4
 8012360:	d008      	beq.n	8012374 <memmove+0x28>
 8012362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012366:	f803 2f01 	strb.w	r2, [r3, #1]!
 801236a:	e7f8      	b.n	801235e <memmove+0x12>
 801236c:	4402      	add	r2, r0
 801236e:	4601      	mov	r1, r0
 8012370:	428a      	cmp	r2, r1
 8012372:	d100      	bne.n	8012376 <memmove+0x2a>
 8012374:	bd10      	pop	{r4, pc}
 8012376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801237a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801237e:	e7f7      	b.n	8012370 <memmove+0x24>

08012380 <_sbrk_r>:
 8012380:	b538      	push	{r3, r4, r5, lr}
 8012382:	4d06      	ldr	r5, [pc, #24]	@ (801239c <_sbrk_r+0x1c>)
 8012384:	2300      	movs	r3, #0
 8012386:	4604      	mov	r4, r0
 8012388:	4608      	mov	r0, r1
 801238a:	602b      	str	r3, [r5, #0]
 801238c:	f7ef fcb4 	bl	8001cf8 <_sbrk>
 8012390:	1c43      	adds	r3, r0, #1
 8012392:	d102      	bne.n	801239a <_sbrk_r+0x1a>
 8012394:	682b      	ldr	r3, [r5, #0]
 8012396:	b103      	cbz	r3, 801239a <_sbrk_r+0x1a>
 8012398:	6023      	str	r3, [r4, #0]
 801239a:	bd38      	pop	{r3, r4, r5, pc}
 801239c:	20000d58 	.word	0x20000d58

080123a0 <__assert_func>:
 80123a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123a2:	4614      	mov	r4, r2
 80123a4:	461a      	mov	r2, r3
 80123a6:	4b09      	ldr	r3, [pc, #36]	@ (80123cc <__assert_func+0x2c>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	4605      	mov	r5, r0
 80123ac:	68d8      	ldr	r0, [r3, #12]
 80123ae:	b954      	cbnz	r4, 80123c6 <__assert_func+0x26>
 80123b0:	4b07      	ldr	r3, [pc, #28]	@ (80123d0 <__assert_func+0x30>)
 80123b2:	461c      	mov	r4, r3
 80123b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80123b8:	9100      	str	r1, [sp, #0]
 80123ba:	462b      	mov	r3, r5
 80123bc:	4905      	ldr	r1, [pc, #20]	@ (80123d4 <__assert_func+0x34>)
 80123be:	f000 f84f 	bl	8012460 <fiprintf>
 80123c2:	f000 f85f 	bl	8012484 <abort>
 80123c6:	4b04      	ldr	r3, [pc, #16]	@ (80123d8 <__assert_func+0x38>)
 80123c8:	e7f4      	b.n	80123b4 <__assert_func+0x14>
 80123ca:	bf00      	nop
 80123cc:	2000021c 	.word	0x2000021c
 80123d0:	08013d7d 	.word	0x08013d7d
 80123d4:	08013d4f 	.word	0x08013d4f
 80123d8:	08013d42 	.word	0x08013d42

080123dc <_calloc_r>:
 80123dc:	b570      	push	{r4, r5, r6, lr}
 80123de:	fba1 5402 	umull	r5, r4, r1, r2
 80123e2:	b93c      	cbnz	r4, 80123f4 <_calloc_r+0x18>
 80123e4:	4629      	mov	r1, r5
 80123e6:	f7fe ffd5 	bl	8011394 <_malloc_r>
 80123ea:	4606      	mov	r6, r0
 80123ec:	b928      	cbnz	r0, 80123fa <_calloc_r+0x1e>
 80123ee:	2600      	movs	r6, #0
 80123f0:	4630      	mov	r0, r6
 80123f2:	bd70      	pop	{r4, r5, r6, pc}
 80123f4:	220c      	movs	r2, #12
 80123f6:	6002      	str	r2, [r0, #0]
 80123f8:	e7f9      	b.n	80123ee <_calloc_r+0x12>
 80123fa:	462a      	mov	r2, r5
 80123fc:	4621      	mov	r1, r4
 80123fe:	f7fd fd1f 	bl	800fe40 <memset>
 8012402:	e7f5      	b.n	80123f0 <_calloc_r+0x14>

08012404 <_realloc_r>:
 8012404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012408:	4680      	mov	r8, r0
 801240a:	4615      	mov	r5, r2
 801240c:	460c      	mov	r4, r1
 801240e:	b921      	cbnz	r1, 801241a <_realloc_r+0x16>
 8012410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012414:	4611      	mov	r1, r2
 8012416:	f7fe bfbd 	b.w	8011394 <_malloc_r>
 801241a:	b92a      	cbnz	r2, 8012428 <_realloc_r+0x24>
 801241c:	f7fe fc0c 	bl	8010c38 <_free_r>
 8012420:	2400      	movs	r4, #0
 8012422:	4620      	mov	r0, r4
 8012424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012428:	f000 f833 	bl	8012492 <_malloc_usable_size_r>
 801242c:	4285      	cmp	r5, r0
 801242e:	4606      	mov	r6, r0
 8012430:	d802      	bhi.n	8012438 <_realloc_r+0x34>
 8012432:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012436:	d8f4      	bhi.n	8012422 <_realloc_r+0x1e>
 8012438:	4629      	mov	r1, r5
 801243a:	4640      	mov	r0, r8
 801243c:	f7fe ffaa 	bl	8011394 <_malloc_r>
 8012440:	4607      	mov	r7, r0
 8012442:	2800      	cmp	r0, #0
 8012444:	d0ec      	beq.n	8012420 <_realloc_r+0x1c>
 8012446:	42b5      	cmp	r5, r6
 8012448:	462a      	mov	r2, r5
 801244a:	4621      	mov	r1, r4
 801244c:	bf28      	it	cs
 801244e:	4632      	movcs	r2, r6
 8012450:	f7fd fd87 	bl	800ff62 <memcpy>
 8012454:	4621      	mov	r1, r4
 8012456:	4640      	mov	r0, r8
 8012458:	f7fe fbee 	bl	8010c38 <_free_r>
 801245c:	463c      	mov	r4, r7
 801245e:	e7e0      	b.n	8012422 <_realloc_r+0x1e>

08012460 <fiprintf>:
 8012460:	b40e      	push	{r1, r2, r3}
 8012462:	b503      	push	{r0, r1, lr}
 8012464:	4601      	mov	r1, r0
 8012466:	ab03      	add	r3, sp, #12
 8012468:	4805      	ldr	r0, [pc, #20]	@ (8012480 <fiprintf+0x20>)
 801246a:	f853 2b04 	ldr.w	r2, [r3], #4
 801246e:	6800      	ldr	r0, [r0, #0]
 8012470:	9301      	str	r3, [sp, #4]
 8012472:	f000 f83f 	bl	80124f4 <_vfiprintf_r>
 8012476:	b002      	add	sp, #8
 8012478:	f85d eb04 	ldr.w	lr, [sp], #4
 801247c:	b003      	add	sp, #12
 801247e:	4770      	bx	lr
 8012480:	2000021c 	.word	0x2000021c

08012484 <abort>:
 8012484:	b508      	push	{r3, lr}
 8012486:	2006      	movs	r0, #6
 8012488:	f000 fa08 	bl	801289c <raise>
 801248c:	2001      	movs	r0, #1
 801248e:	f7ef fbbb 	bl	8001c08 <_exit>

08012492 <_malloc_usable_size_r>:
 8012492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012496:	1f18      	subs	r0, r3, #4
 8012498:	2b00      	cmp	r3, #0
 801249a:	bfbc      	itt	lt
 801249c:	580b      	ldrlt	r3, [r1, r0]
 801249e:	18c0      	addlt	r0, r0, r3
 80124a0:	4770      	bx	lr

080124a2 <__sfputc_r>:
 80124a2:	6893      	ldr	r3, [r2, #8]
 80124a4:	3b01      	subs	r3, #1
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	b410      	push	{r4}
 80124aa:	6093      	str	r3, [r2, #8]
 80124ac:	da08      	bge.n	80124c0 <__sfputc_r+0x1e>
 80124ae:	6994      	ldr	r4, [r2, #24]
 80124b0:	42a3      	cmp	r3, r4
 80124b2:	db01      	blt.n	80124b8 <__sfputc_r+0x16>
 80124b4:	290a      	cmp	r1, #10
 80124b6:	d103      	bne.n	80124c0 <__sfputc_r+0x1e>
 80124b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124bc:	f000 b932 	b.w	8012724 <__swbuf_r>
 80124c0:	6813      	ldr	r3, [r2, #0]
 80124c2:	1c58      	adds	r0, r3, #1
 80124c4:	6010      	str	r0, [r2, #0]
 80124c6:	7019      	strb	r1, [r3, #0]
 80124c8:	4608      	mov	r0, r1
 80124ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124ce:	4770      	bx	lr

080124d0 <__sfputs_r>:
 80124d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124d2:	4606      	mov	r6, r0
 80124d4:	460f      	mov	r7, r1
 80124d6:	4614      	mov	r4, r2
 80124d8:	18d5      	adds	r5, r2, r3
 80124da:	42ac      	cmp	r4, r5
 80124dc:	d101      	bne.n	80124e2 <__sfputs_r+0x12>
 80124de:	2000      	movs	r0, #0
 80124e0:	e007      	b.n	80124f2 <__sfputs_r+0x22>
 80124e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124e6:	463a      	mov	r2, r7
 80124e8:	4630      	mov	r0, r6
 80124ea:	f7ff ffda 	bl	80124a2 <__sfputc_r>
 80124ee:	1c43      	adds	r3, r0, #1
 80124f0:	d1f3      	bne.n	80124da <__sfputs_r+0xa>
 80124f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080124f4 <_vfiprintf_r>:
 80124f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124f8:	460d      	mov	r5, r1
 80124fa:	b09d      	sub	sp, #116	@ 0x74
 80124fc:	4614      	mov	r4, r2
 80124fe:	4698      	mov	r8, r3
 8012500:	4606      	mov	r6, r0
 8012502:	b118      	cbz	r0, 801250c <_vfiprintf_r+0x18>
 8012504:	6a03      	ldr	r3, [r0, #32]
 8012506:	b90b      	cbnz	r3, 801250c <_vfiprintf_r+0x18>
 8012508:	f7fd fbe0 	bl	800fccc <__sinit>
 801250c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801250e:	07d9      	lsls	r1, r3, #31
 8012510:	d405      	bmi.n	801251e <_vfiprintf_r+0x2a>
 8012512:	89ab      	ldrh	r3, [r5, #12]
 8012514:	059a      	lsls	r2, r3, #22
 8012516:	d402      	bmi.n	801251e <_vfiprintf_r+0x2a>
 8012518:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801251a:	f7fd fd20 	bl	800ff5e <__retarget_lock_acquire_recursive>
 801251e:	89ab      	ldrh	r3, [r5, #12]
 8012520:	071b      	lsls	r3, r3, #28
 8012522:	d501      	bpl.n	8012528 <_vfiprintf_r+0x34>
 8012524:	692b      	ldr	r3, [r5, #16]
 8012526:	b99b      	cbnz	r3, 8012550 <_vfiprintf_r+0x5c>
 8012528:	4629      	mov	r1, r5
 801252a:	4630      	mov	r0, r6
 801252c:	f000 f938 	bl	80127a0 <__swsetup_r>
 8012530:	b170      	cbz	r0, 8012550 <_vfiprintf_r+0x5c>
 8012532:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012534:	07dc      	lsls	r4, r3, #31
 8012536:	d504      	bpl.n	8012542 <_vfiprintf_r+0x4e>
 8012538:	f04f 30ff 	mov.w	r0, #4294967295
 801253c:	b01d      	add	sp, #116	@ 0x74
 801253e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012542:	89ab      	ldrh	r3, [r5, #12]
 8012544:	0598      	lsls	r0, r3, #22
 8012546:	d4f7      	bmi.n	8012538 <_vfiprintf_r+0x44>
 8012548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801254a:	f7fd fd09 	bl	800ff60 <__retarget_lock_release_recursive>
 801254e:	e7f3      	b.n	8012538 <_vfiprintf_r+0x44>
 8012550:	2300      	movs	r3, #0
 8012552:	9309      	str	r3, [sp, #36]	@ 0x24
 8012554:	2320      	movs	r3, #32
 8012556:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801255a:	f8cd 800c 	str.w	r8, [sp, #12]
 801255e:	2330      	movs	r3, #48	@ 0x30
 8012560:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012710 <_vfiprintf_r+0x21c>
 8012564:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012568:	f04f 0901 	mov.w	r9, #1
 801256c:	4623      	mov	r3, r4
 801256e:	469a      	mov	sl, r3
 8012570:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012574:	b10a      	cbz	r2, 801257a <_vfiprintf_r+0x86>
 8012576:	2a25      	cmp	r2, #37	@ 0x25
 8012578:	d1f9      	bne.n	801256e <_vfiprintf_r+0x7a>
 801257a:	ebba 0b04 	subs.w	fp, sl, r4
 801257e:	d00b      	beq.n	8012598 <_vfiprintf_r+0xa4>
 8012580:	465b      	mov	r3, fp
 8012582:	4622      	mov	r2, r4
 8012584:	4629      	mov	r1, r5
 8012586:	4630      	mov	r0, r6
 8012588:	f7ff ffa2 	bl	80124d0 <__sfputs_r>
 801258c:	3001      	adds	r0, #1
 801258e:	f000 80a7 	beq.w	80126e0 <_vfiprintf_r+0x1ec>
 8012592:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012594:	445a      	add	r2, fp
 8012596:	9209      	str	r2, [sp, #36]	@ 0x24
 8012598:	f89a 3000 	ldrb.w	r3, [sl]
 801259c:	2b00      	cmp	r3, #0
 801259e:	f000 809f 	beq.w	80126e0 <_vfiprintf_r+0x1ec>
 80125a2:	2300      	movs	r3, #0
 80125a4:	f04f 32ff 	mov.w	r2, #4294967295
 80125a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80125ac:	f10a 0a01 	add.w	sl, sl, #1
 80125b0:	9304      	str	r3, [sp, #16]
 80125b2:	9307      	str	r3, [sp, #28]
 80125b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80125b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80125ba:	4654      	mov	r4, sl
 80125bc:	2205      	movs	r2, #5
 80125be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125c2:	4853      	ldr	r0, [pc, #332]	@ (8012710 <_vfiprintf_r+0x21c>)
 80125c4:	f7ed fe2c 	bl	8000220 <memchr>
 80125c8:	9a04      	ldr	r2, [sp, #16]
 80125ca:	b9d8      	cbnz	r0, 8012604 <_vfiprintf_r+0x110>
 80125cc:	06d1      	lsls	r1, r2, #27
 80125ce:	bf44      	itt	mi
 80125d0:	2320      	movmi	r3, #32
 80125d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125d6:	0713      	lsls	r3, r2, #28
 80125d8:	bf44      	itt	mi
 80125da:	232b      	movmi	r3, #43	@ 0x2b
 80125dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125e0:	f89a 3000 	ldrb.w	r3, [sl]
 80125e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80125e6:	d015      	beq.n	8012614 <_vfiprintf_r+0x120>
 80125e8:	9a07      	ldr	r2, [sp, #28]
 80125ea:	4654      	mov	r4, sl
 80125ec:	2000      	movs	r0, #0
 80125ee:	f04f 0c0a 	mov.w	ip, #10
 80125f2:	4621      	mov	r1, r4
 80125f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125f8:	3b30      	subs	r3, #48	@ 0x30
 80125fa:	2b09      	cmp	r3, #9
 80125fc:	d94b      	bls.n	8012696 <_vfiprintf_r+0x1a2>
 80125fe:	b1b0      	cbz	r0, 801262e <_vfiprintf_r+0x13a>
 8012600:	9207      	str	r2, [sp, #28]
 8012602:	e014      	b.n	801262e <_vfiprintf_r+0x13a>
 8012604:	eba0 0308 	sub.w	r3, r0, r8
 8012608:	fa09 f303 	lsl.w	r3, r9, r3
 801260c:	4313      	orrs	r3, r2
 801260e:	9304      	str	r3, [sp, #16]
 8012610:	46a2      	mov	sl, r4
 8012612:	e7d2      	b.n	80125ba <_vfiprintf_r+0xc6>
 8012614:	9b03      	ldr	r3, [sp, #12]
 8012616:	1d19      	adds	r1, r3, #4
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	9103      	str	r1, [sp, #12]
 801261c:	2b00      	cmp	r3, #0
 801261e:	bfbb      	ittet	lt
 8012620:	425b      	neglt	r3, r3
 8012622:	f042 0202 	orrlt.w	r2, r2, #2
 8012626:	9307      	strge	r3, [sp, #28]
 8012628:	9307      	strlt	r3, [sp, #28]
 801262a:	bfb8      	it	lt
 801262c:	9204      	strlt	r2, [sp, #16]
 801262e:	7823      	ldrb	r3, [r4, #0]
 8012630:	2b2e      	cmp	r3, #46	@ 0x2e
 8012632:	d10a      	bne.n	801264a <_vfiprintf_r+0x156>
 8012634:	7863      	ldrb	r3, [r4, #1]
 8012636:	2b2a      	cmp	r3, #42	@ 0x2a
 8012638:	d132      	bne.n	80126a0 <_vfiprintf_r+0x1ac>
 801263a:	9b03      	ldr	r3, [sp, #12]
 801263c:	1d1a      	adds	r2, r3, #4
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	9203      	str	r2, [sp, #12]
 8012642:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012646:	3402      	adds	r4, #2
 8012648:	9305      	str	r3, [sp, #20]
 801264a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012720 <_vfiprintf_r+0x22c>
 801264e:	7821      	ldrb	r1, [r4, #0]
 8012650:	2203      	movs	r2, #3
 8012652:	4650      	mov	r0, sl
 8012654:	f7ed fde4 	bl	8000220 <memchr>
 8012658:	b138      	cbz	r0, 801266a <_vfiprintf_r+0x176>
 801265a:	9b04      	ldr	r3, [sp, #16]
 801265c:	eba0 000a 	sub.w	r0, r0, sl
 8012660:	2240      	movs	r2, #64	@ 0x40
 8012662:	4082      	lsls	r2, r0
 8012664:	4313      	orrs	r3, r2
 8012666:	3401      	adds	r4, #1
 8012668:	9304      	str	r3, [sp, #16]
 801266a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801266e:	4829      	ldr	r0, [pc, #164]	@ (8012714 <_vfiprintf_r+0x220>)
 8012670:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012674:	2206      	movs	r2, #6
 8012676:	f7ed fdd3 	bl	8000220 <memchr>
 801267a:	2800      	cmp	r0, #0
 801267c:	d03f      	beq.n	80126fe <_vfiprintf_r+0x20a>
 801267e:	4b26      	ldr	r3, [pc, #152]	@ (8012718 <_vfiprintf_r+0x224>)
 8012680:	bb1b      	cbnz	r3, 80126ca <_vfiprintf_r+0x1d6>
 8012682:	9b03      	ldr	r3, [sp, #12]
 8012684:	3307      	adds	r3, #7
 8012686:	f023 0307 	bic.w	r3, r3, #7
 801268a:	3308      	adds	r3, #8
 801268c:	9303      	str	r3, [sp, #12]
 801268e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012690:	443b      	add	r3, r7
 8012692:	9309      	str	r3, [sp, #36]	@ 0x24
 8012694:	e76a      	b.n	801256c <_vfiprintf_r+0x78>
 8012696:	fb0c 3202 	mla	r2, ip, r2, r3
 801269a:	460c      	mov	r4, r1
 801269c:	2001      	movs	r0, #1
 801269e:	e7a8      	b.n	80125f2 <_vfiprintf_r+0xfe>
 80126a0:	2300      	movs	r3, #0
 80126a2:	3401      	adds	r4, #1
 80126a4:	9305      	str	r3, [sp, #20]
 80126a6:	4619      	mov	r1, r3
 80126a8:	f04f 0c0a 	mov.w	ip, #10
 80126ac:	4620      	mov	r0, r4
 80126ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126b2:	3a30      	subs	r2, #48	@ 0x30
 80126b4:	2a09      	cmp	r2, #9
 80126b6:	d903      	bls.n	80126c0 <_vfiprintf_r+0x1cc>
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d0c6      	beq.n	801264a <_vfiprintf_r+0x156>
 80126bc:	9105      	str	r1, [sp, #20]
 80126be:	e7c4      	b.n	801264a <_vfiprintf_r+0x156>
 80126c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80126c4:	4604      	mov	r4, r0
 80126c6:	2301      	movs	r3, #1
 80126c8:	e7f0      	b.n	80126ac <_vfiprintf_r+0x1b8>
 80126ca:	ab03      	add	r3, sp, #12
 80126cc:	9300      	str	r3, [sp, #0]
 80126ce:	462a      	mov	r2, r5
 80126d0:	4b12      	ldr	r3, [pc, #72]	@ (801271c <_vfiprintf_r+0x228>)
 80126d2:	a904      	add	r1, sp, #16
 80126d4:	4630      	mov	r0, r6
 80126d6:	f7fc fca1 	bl	800f01c <_printf_float>
 80126da:	4607      	mov	r7, r0
 80126dc:	1c78      	adds	r0, r7, #1
 80126de:	d1d6      	bne.n	801268e <_vfiprintf_r+0x19a>
 80126e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80126e2:	07d9      	lsls	r1, r3, #31
 80126e4:	d405      	bmi.n	80126f2 <_vfiprintf_r+0x1fe>
 80126e6:	89ab      	ldrh	r3, [r5, #12]
 80126e8:	059a      	lsls	r2, r3, #22
 80126ea:	d402      	bmi.n	80126f2 <_vfiprintf_r+0x1fe>
 80126ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80126ee:	f7fd fc37 	bl	800ff60 <__retarget_lock_release_recursive>
 80126f2:	89ab      	ldrh	r3, [r5, #12]
 80126f4:	065b      	lsls	r3, r3, #25
 80126f6:	f53f af1f 	bmi.w	8012538 <_vfiprintf_r+0x44>
 80126fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80126fc:	e71e      	b.n	801253c <_vfiprintf_r+0x48>
 80126fe:	ab03      	add	r3, sp, #12
 8012700:	9300      	str	r3, [sp, #0]
 8012702:	462a      	mov	r2, r5
 8012704:	4b05      	ldr	r3, [pc, #20]	@ (801271c <_vfiprintf_r+0x228>)
 8012706:	a904      	add	r1, sp, #16
 8012708:	4630      	mov	r0, r6
 801270a:	f7fc ff1f 	bl	800f54c <_printf_i>
 801270e:	e7e4      	b.n	80126da <_vfiprintf_r+0x1e6>
 8012710:	08013d31 	.word	0x08013d31
 8012714:	08013d3b 	.word	0x08013d3b
 8012718:	0800f01d 	.word	0x0800f01d
 801271c:	080124d1 	.word	0x080124d1
 8012720:	08013d37 	.word	0x08013d37

08012724 <__swbuf_r>:
 8012724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012726:	460e      	mov	r6, r1
 8012728:	4614      	mov	r4, r2
 801272a:	4605      	mov	r5, r0
 801272c:	b118      	cbz	r0, 8012736 <__swbuf_r+0x12>
 801272e:	6a03      	ldr	r3, [r0, #32]
 8012730:	b90b      	cbnz	r3, 8012736 <__swbuf_r+0x12>
 8012732:	f7fd facb 	bl	800fccc <__sinit>
 8012736:	69a3      	ldr	r3, [r4, #24]
 8012738:	60a3      	str	r3, [r4, #8]
 801273a:	89a3      	ldrh	r3, [r4, #12]
 801273c:	071a      	lsls	r2, r3, #28
 801273e:	d501      	bpl.n	8012744 <__swbuf_r+0x20>
 8012740:	6923      	ldr	r3, [r4, #16]
 8012742:	b943      	cbnz	r3, 8012756 <__swbuf_r+0x32>
 8012744:	4621      	mov	r1, r4
 8012746:	4628      	mov	r0, r5
 8012748:	f000 f82a 	bl	80127a0 <__swsetup_r>
 801274c:	b118      	cbz	r0, 8012756 <__swbuf_r+0x32>
 801274e:	f04f 37ff 	mov.w	r7, #4294967295
 8012752:	4638      	mov	r0, r7
 8012754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012756:	6823      	ldr	r3, [r4, #0]
 8012758:	6922      	ldr	r2, [r4, #16]
 801275a:	1a98      	subs	r0, r3, r2
 801275c:	6963      	ldr	r3, [r4, #20]
 801275e:	b2f6      	uxtb	r6, r6
 8012760:	4283      	cmp	r3, r0
 8012762:	4637      	mov	r7, r6
 8012764:	dc05      	bgt.n	8012772 <__swbuf_r+0x4e>
 8012766:	4621      	mov	r1, r4
 8012768:	4628      	mov	r0, r5
 801276a:	f7ff fdc7 	bl	80122fc <_fflush_r>
 801276e:	2800      	cmp	r0, #0
 8012770:	d1ed      	bne.n	801274e <__swbuf_r+0x2a>
 8012772:	68a3      	ldr	r3, [r4, #8]
 8012774:	3b01      	subs	r3, #1
 8012776:	60a3      	str	r3, [r4, #8]
 8012778:	6823      	ldr	r3, [r4, #0]
 801277a:	1c5a      	adds	r2, r3, #1
 801277c:	6022      	str	r2, [r4, #0]
 801277e:	701e      	strb	r6, [r3, #0]
 8012780:	6962      	ldr	r2, [r4, #20]
 8012782:	1c43      	adds	r3, r0, #1
 8012784:	429a      	cmp	r2, r3
 8012786:	d004      	beq.n	8012792 <__swbuf_r+0x6e>
 8012788:	89a3      	ldrh	r3, [r4, #12]
 801278a:	07db      	lsls	r3, r3, #31
 801278c:	d5e1      	bpl.n	8012752 <__swbuf_r+0x2e>
 801278e:	2e0a      	cmp	r6, #10
 8012790:	d1df      	bne.n	8012752 <__swbuf_r+0x2e>
 8012792:	4621      	mov	r1, r4
 8012794:	4628      	mov	r0, r5
 8012796:	f7ff fdb1 	bl	80122fc <_fflush_r>
 801279a:	2800      	cmp	r0, #0
 801279c:	d0d9      	beq.n	8012752 <__swbuf_r+0x2e>
 801279e:	e7d6      	b.n	801274e <__swbuf_r+0x2a>

080127a0 <__swsetup_r>:
 80127a0:	b538      	push	{r3, r4, r5, lr}
 80127a2:	4b29      	ldr	r3, [pc, #164]	@ (8012848 <__swsetup_r+0xa8>)
 80127a4:	4605      	mov	r5, r0
 80127a6:	6818      	ldr	r0, [r3, #0]
 80127a8:	460c      	mov	r4, r1
 80127aa:	b118      	cbz	r0, 80127b4 <__swsetup_r+0x14>
 80127ac:	6a03      	ldr	r3, [r0, #32]
 80127ae:	b90b      	cbnz	r3, 80127b4 <__swsetup_r+0x14>
 80127b0:	f7fd fa8c 	bl	800fccc <__sinit>
 80127b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127b8:	0719      	lsls	r1, r3, #28
 80127ba:	d422      	bmi.n	8012802 <__swsetup_r+0x62>
 80127bc:	06da      	lsls	r2, r3, #27
 80127be:	d407      	bmi.n	80127d0 <__swsetup_r+0x30>
 80127c0:	2209      	movs	r2, #9
 80127c2:	602a      	str	r2, [r5, #0]
 80127c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80127c8:	81a3      	strh	r3, [r4, #12]
 80127ca:	f04f 30ff 	mov.w	r0, #4294967295
 80127ce:	e033      	b.n	8012838 <__swsetup_r+0x98>
 80127d0:	0758      	lsls	r0, r3, #29
 80127d2:	d512      	bpl.n	80127fa <__swsetup_r+0x5a>
 80127d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80127d6:	b141      	cbz	r1, 80127ea <__swsetup_r+0x4a>
 80127d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80127dc:	4299      	cmp	r1, r3
 80127de:	d002      	beq.n	80127e6 <__swsetup_r+0x46>
 80127e0:	4628      	mov	r0, r5
 80127e2:	f7fe fa29 	bl	8010c38 <_free_r>
 80127e6:	2300      	movs	r3, #0
 80127e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80127ea:	89a3      	ldrh	r3, [r4, #12]
 80127ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80127f0:	81a3      	strh	r3, [r4, #12]
 80127f2:	2300      	movs	r3, #0
 80127f4:	6063      	str	r3, [r4, #4]
 80127f6:	6923      	ldr	r3, [r4, #16]
 80127f8:	6023      	str	r3, [r4, #0]
 80127fa:	89a3      	ldrh	r3, [r4, #12]
 80127fc:	f043 0308 	orr.w	r3, r3, #8
 8012800:	81a3      	strh	r3, [r4, #12]
 8012802:	6923      	ldr	r3, [r4, #16]
 8012804:	b94b      	cbnz	r3, 801281a <__swsetup_r+0x7a>
 8012806:	89a3      	ldrh	r3, [r4, #12]
 8012808:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801280c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012810:	d003      	beq.n	801281a <__swsetup_r+0x7a>
 8012812:	4621      	mov	r1, r4
 8012814:	4628      	mov	r0, r5
 8012816:	f000 f883 	bl	8012920 <__smakebuf_r>
 801281a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801281e:	f013 0201 	ands.w	r2, r3, #1
 8012822:	d00a      	beq.n	801283a <__swsetup_r+0x9a>
 8012824:	2200      	movs	r2, #0
 8012826:	60a2      	str	r2, [r4, #8]
 8012828:	6962      	ldr	r2, [r4, #20]
 801282a:	4252      	negs	r2, r2
 801282c:	61a2      	str	r2, [r4, #24]
 801282e:	6922      	ldr	r2, [r4, #16]
 8012830:	b942      	cbnz	r2, 8012844 <__swsetup_r+0xa4>
 8012832:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012836:	d1c5      	bne.n	80127c4 <__swsetup_r+0x24>
 8012838:	bd38      	pop	{r3, r4, r5, pc}
 801283a:	0799      	lsls	r1, r3, #30
 801283c:	bf58      	it	pl
 801283e:	6962      	ldrpl	r2, [r4, #20]
 8012840:	60a2      	str	r2, [r4, #8]
 8012842:	e7f4      	b.n	801282e <__swsetup_r+0x8e>
 8012844:	2000      	movs	r0, #0
 8012846:	e7f7      	b.n	8012838 <__swsetup_r+0x98>
 8012848:	2000021c 	.word	0x2000021c

0801284c <_raise_r>:
 801284c:	291f      	cmp	r1, #31
 801284e:	b538      	push	{r3, r4, r5, lr}
 8012850:	4605      	mov	r5, r0
 8012852:	460c      	mov	r4, r1
 8012854:	d904      	bls.n	8012860 <_raise_r+0x14>
 8012856:	2316      	movs	r3, #22
 8012858:	6003      	str	r3, [r0, #0]
 801285a:	f04f 30ff 	mov.w	r0, #4294967295
 801285e:	bd38      	pop	{r3, r4, r5, pc}
 8012860:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012862:	b112      	cbz	r2, 801286a <_raise_r+0x1e>
 8012864:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012868:	b94b      	cbnz	r3, 801287e <_raise_r+0x32>
 801286a:	4628      	mov	r0, r5
 801286c:	f000 f830 	bl	80128d0 <_getpid_r>
 8012870:	4622      	mov	r2, r4
 8012872:	4601      	mov	r1, r0
 8012874:	4628      	mov	r0, r5
 8012876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801287a:	f000 b817 	b.w	80128ac <_kill_r>
 801287e:	2b01      	cmp	r3, #1
 8012880:	d00a      	beq.n	8012898 <_raise_r+0x4c>
 8012882:	1c59      	adds	r1, r3, #1
 8012884:	d103      	bne.n	801288e <_raise_r+0x42>
 8012886:	2316      	movs	r3, #22
 8012888:	6003      	str	r3, [r0, #0]
 801288a:	2001      	movs	r0, #1
 801288c:	e7e7      	b.n	801285e <_raise_r+0x12>
 801288e:	2100      	movs	r1, #0
 8012890:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012894:	4620      	mov	r0, r4
 8012896:	4798      	blx	r3
 8012898:	2000      	movs	r0, #0
 801289a:	e7e0      	b.n	801285e <_raise_r+0x12>

0801289c <raise>:
 801289c:	4b02      	ldr	r3, [pc, #8]	@ (80128a8 <raise+0xc>)
 801289e:	4601      	mov	r1, r0
 80128a0:	6818      	ldr	r0, [r3, #0]
 80128a2:	f7ff bfd3 	b.w	801284c <_raise_r>
 80128a6:	bf00      	nop
 80128a8:	2000021c 	.word	0x2000021c

080128ac <_kill_r>:
 80128ac:	b538      	push	{r3, r4, r5, lr}
 80128ae:	4d07      	ldr	r5, [pc, #28]	@ (80128cc <_kill_r+0x20>)
 80128b0:	2300      	movs	r3, #0
 80128b2:	4604      	mov	r4, r0
 80128b4:	4608      	mov	r0, r1
 80128b6:	4611      	mov	r1, r2
 80128b8:	602b      	str	r3, [r5, #0]
 80128ba:	f7ef f995 	bl	8001be8 <_kill>
 80128be:	1c43      	adds	r3, r0, #1
 80128c0:	d102      	bne.n	80128c8 <_kill_r+0x1c>
 80128c2:	682b      	ldr	r3, [r5, #0]
 80128c4:	b103      	cbz	r3, 80128c8 <_kill_r+0x1c>
 80128c6:	6023      	str	r3, [r4, #0]
 80128c8:	bd38      	pop	{r3, r4, r5, pc}
 80128ca:	bf00      	nop
 80128cc:	20000d58 	.word	0x20000d58

080128d0 <_getpid_r>:
 80128d0:	f7ef b982 	b.w	8001bd8 <_getpid>

080128d4 <__swhatbuf_r>:
 80128d4:	b570      	push	{r4, r5, r6, lr}
 80128d6:	460c      	mov	r4, r1
 80128d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128dc:	2900      	cmp	r1, #0
 80128de:	b096      	sub	sp, #88	@ 0x58
 80128e0:	4615      	mov	r5, r2
 80128e2:	461e      	mov	r6, r3
 80128e4:	da0d      	bge.n	8012902 <__swhatbuf_r+0x2e>
 80128e6:	89a3      	ldrh	r3, [r4, #12]
 80128e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80128ec:	f04f 0100 	mov.w	r1, #0
 80128f0:	bf14      	ite	ne
 80128f2:	2340      	movne	r3, #64	@ 0x40
 80128f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80128f8:	2000      	movs	r0, #0
 80128fa:	6031      	str	r1, [r6, #0]
 80128fc:	602b      	str	r3, [r5, #0]
 80128fe:	b016      	add	sp, #88	@ 0x58
 8012900:	bd70      	pop	{r4, r5, r6, pc}
 8012902:	466a      	mov	r2, sp
 8012904:	f000 f848 	bl	8012998 <_fstat_r>
 8012908:	2800      	cmp	r0, #0
 801290a:	dbec      	blt.n	80128e6 <__swhatbuf_r+0x12>
 801290c:	9901      	ldr	r1, [sp, #4]
 801290e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012912:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012916:	4259      	negs	r1, r3
 8012918:	4159      	adcs	r1, r3
 801291a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801291e:	e7eb      	b.n	80128f8 <__swhatbuf_r+0x24>

08012920 <__smakebuf_r>:
 8012920:	898b      	ldrh	r3, [r1, #12]
 8012922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012924:	079d      	lsls	r5, r3, #30
 8012926:	4606      	mov	r6, r0
 8012928:	460c      	mov	r4, r1
 801292a:	d507      	bpl.n	801293c <__smakebuf_r+0x1c>
 801292c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012930:	6023      	str	r3, [r4, #0]
 8012932:	6123      	str	r3, [r4, #16]
 8012934:	2301      	movs	r3, #1
 8012936:	6163      	str	r3, [r4, #20]
 8012938:	b003      	add	sp, #12
 801293a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801293c:	ab01      	add	r3, sp, #4
 801293e:	466a      	mov	r2, sp
 8012940:	f7ff ffc8 	bl	80128d4 <__swhatbuf_r>
 8012944:	9f00      	ldr	r7, [sp, #0]
 8012946:	4605      	mov	r5, r0
 8012948:	4639      	mov	r1, r7
 801294a:	4630      	mov	r0, r6
 801294c:	f7fe fd22 	bl	8011394 <_malloc_r>
 8012950:	b948      	cbnz	r0, 8012966 <__smakebuf_r+0x46>
 8012952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012956:	059a      	lsls	r2, r3, #22
 8012958:	d4ee      	bmi.n	8012938 <__smakebuf_r+0x18>
 801295a:	f023 0303 	bic.w	r3, r3, #3
 801295e:	f043 0302 	orr.w	r3, r3, #2
 8012962:	81a3      	strh	r3, [r4, #12]
 8012964:	e7e2      	b.n	801292c <__smakebuf_r+0xc>
 8012966:	89a3      	ldrh	r3, [r4, #12]
 8012968:	6020      	str	r0, [r4, #0]
 801296a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801296e:	81a3      	strh	r3, [r4, #12]
 8012970:	9b01      	ldr	r3, [sp, #4]
 8012972:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012976:	b15b      	cbz	r3, 8012990 <__smakebuf_r+0x70>
 8012978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801297c:	4630      	mov	r0, r6
 801297e:	f000 f81d 	bl	80129bc <_isatty_r>
 8012982:	b128      	cbz	r0, 8012990 <__smakebuf_r+0x70>
 8012984:	89a3      	ldrh	r3, [r4, #12]
 8012986:	f023 0303 	bic.w	r3, r3, #3
 801298a:	f043 0301 	orr.w	r3, r3, #1
 801298e:	81a3      	strh	r3, [r4, #12]
 8012990:	89a3      	ldrh	r3, [r4, #12]
 8012992:	431d      	orrs	r5, r3
 8012994:	81a5      	strh	r5, [r4, #12]
 8012996:	e7cf      	b.n	8012938 <__smakebuf_r+0x18>

08012998 <_fstat_r>:
 8012998:	b538      	push	{r3, r4, r5, lr}
 801299a:	4d07      	ldr	r5, [pc, #28]	@ (80129b8 <_fstat_r+0x20>)
 801299c:	2300      	movs	r3, #0
 801299e:	4604      	mov	r4, r0
 80129a0:	4608      	mov	r0, r1
 80129a2:	4611      	mov	r1, r2
 80129a4:	602b      	str	r3, [r5, #0]
 80129a6:	f7ef f97f 	bl	8001ca8 <_fstat>
 80129aa:	1c43      	adds	r3, r0, #1
 80129ac:	d102      	bne.n	80129b4 <_fstat_r+0x1c>
 80129ae:	682b      	ldr	r3, [r5, #0]
 80129b0:	b103      	cbz	r3, 80129b4 <_fstat_r+0x1c>
 80129b2:	6023      	str	r3, [r4, #0]
 80129b4:	bd38      	pop	{r3, r4, r5, pc}
 80129b6:	bf00      	nop
 80129b8:	20000d58 	.word	0x20000d58

080129bc <_isatty_r>:
 80129bc:	b538      	push	{r3, r4, r5, lr}
 80129be:	4d06      	ldr	r5, [pc, #24]	@ (80129d8 <_isatty_r+0x1c>)
 80129c0:	2300      	movs	r3, #0
 80129c2:	4604      	mov	r4, r0
 80129c4:	4608      	mov	r0, r1
 80129c6:	602b      	str	r3, [r5, #0]
 80129c8:	f7ef f97e 	bl	8001cc8 <_isatty>
 80129cc:	1c43      	adds	r3, r0, #1
 80129ce:	d102      	bne.n	80129d6 <_isatty_r+0x1a>
 80129d0:	682b      	ldr	r3, [r5, #0]
 80129d2:	b103      	cbz	r3, 80129d6 <_isatty_r+0x1a>
 80129d4:	6023      	str	r3, [r4, #0]
 80129d6:	bd38      	pop	{r3, r4, r5, pc}
 80129d8:	20000d58 	.word	0x20000d58

080129dc <asin>:
 80129dc:	b538      	push	{r3, r4, r5, lr}
 80129de:	ed2d 8b02 	vpush	{d8}
 80129e2:	ec55 4b10 	vmov	r4, r5, d0
 80129e6:	f000 f96b 	bl	8012cc0 <__ieee754_asin>
 80129ea:	4622      	mov	r2, r4
 80129ec:	462b      	mov	r3, r5
 80129ee:	4620      	mov	r0, r4
 80129f0:	4629      	mov	r1, r5
 80129f2:	eeb0 8a40 	vmov.f32	s16, s0
 80129f6:	eef0 8a60 	vmov.f32	s17, s1
 80129fa:	f7ee f8bf 	bl	8000b7c <__aeabi_dcmpun>
 80129fe:	b9a8      	cbnz	r0, 8012a2c <asin+0x50>
 8012a00:	ec45 4b10 	vmov	d0, r4, r5
 8012a04:	f000 f87a 	bl	8012afc <fabs>
 8012a08:	4b0c      	ldr	r3, [pc, #48]	@ (8012a3c <asin+0x60>)
 8012a0a:	ec51 0b10 	vmov	r0, r1, d0
 8012a0e:	2200      	movs	r2, #0
 8012a10:	f7ee f8aa 	bl	8000b68 <__aeabi_dcmpgt>
 8012a14:	b150      	cbz	r0, 8012a2c <asin+0x50>
 8012a16:	f7fd fa77 	bl	800ff08 <__errno>
 8012a1a:	ecbd 8b02 	vpop	{d8}
 8012a1e:	2321      	movs	r3, #33	@ 0x21
 8012a20:	6003      	str	r3, [r0, #0]
 8012a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a26:	4806      	ldr	r0, [pc, #24]	@ (8012a40 <asin+0x64>)
 8012a28:	f7fd baaa 	b.w	800ff80 <nan>
 8012a2c:	eeb0 0a48 	vmov.f32	s0, s16
 8012a30:	eef0 0a68 	vmov.f32	s1, s17
 8012a34:	ecbd 8b02 	vpop	{d8}
 8012a38:	bd38      	pop	{r3, r4, r5, pc}
 8012a3a:	bf00      	nop
 8012a3c:	3ff00000 	.word	0x3ff00000
 8012a40:	08013d7d 	.word	0x08013d7d

08012a44 <atan2>:
 8012a44:	f000 bb40 	b.w	80130c8 <__ieee754_atan2>

08012a48 <fmod>:
 8012a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a4a:	ed2d 8b02 	vpush	{d8}
 8012a4e:	ec57 6b10 	vmov	r6, r7, d0
 8012a52:	ec55 4b11 	vmov	r4, r5, d1
 8012a56:	f000 fbfd 	bl	8013254 <__ieee754_fmod>
 8012a5a:	4622      	mov	r2, r4
 8012a5c:	462b      	mov	r3, r5
 8012a5e:	4630      	mov	r0, r6
 8012a60:	4639      	mov	r1, r7
 8012a62:	eeb0 8a40 	vmov.f32	s16, s0
 8012a66:	eef0 8a60 	vmov.f32	s17, s1
 8012a6a:	f7ee f887 	bl	8000b7c <__aeabi_dcmpun>
 8012a6e:	b990      	cbnz	r0, 8012a96 <fmod+0x4e>
 8012a70:	2200      	movs	r2, #0
 8012a72:	2300      	movs	r3, #0
 8012a74:	4620      	mov	r0, r4
 8012a76:	4629      	mov	r1, r5
 8012a78:	f7ee f84e 	bl	8000b18 <__aeabi_dcmpeq>
 8012a7c:	b158      	cbz	r0, 8012a96 <fmod+0x4e>
 8012a7e:	f7fd fa43 	bl	800ff08 <__errno>
 8012a82:	2321      	movs	r3, #33	@ 0x21
 8012a84:	6003      	str	r3, [r0, #0]
 8012a86:	2200      	movs	r2, #0
 8012a88:	2300      	movs	r3, #0
 8012a8a:	4610      	mov	r0, r2
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	f7ed ff05 	bl	800089c <__aeabi_ddiv>
 8012a92:	ec41 0b18 	vmov	d8, r0, r1
 8012a96:	eeb0 0a48 	vmov.f32	s0, s16
 8012a9a:	eef0 0a68 	vmov.f32	s1, s17
 8012a9e:	ecbd 8b02 	vpop	{d8}
 8012aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012aa4 <sqrt>:
 8012aa4:	b538      	push	{r3, r4, r5, lr}
 8012aa6:	ed2d 8b02 	vpush	{d8}
 8012aaa:	ec55 4b10 	vmov	r4, r5, d0
 8012aae:	f000 f82d 	bl	8012b0c <__ieee754_sqrt>
 8012ab2:	4622      	mov	r2, r4
 8012ab4:	462b      	mov	r3, r5
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	4629      	mov	r1, r5
 8012aba:	eeb0 8a40 	vmov.f32	s16, s0
 8012abe:	eef0 8a60 	vmov.f32	s17, s1
 8012ac2:	f7ee f85b 	bl	8000b7c <__aeabi_dcmpun>
 8012ac6:	b990      	cbnz	r0, 8012aee <sqrt+0x4a>
 8012ac8:	2200      	movs	r2, #0
 8012aca:	2300      	movs	r3, #0
 8012acc:	4620      	mov	r0, r4
 8012ace:	4629      	mov	r1, r5
 8012ad0:	f7ee f82c 	bl	8000b2c <__aeabi_dcmplt>
 8012ad4:	b158      	cbz	r0, 8012aee <sqrt+0x4a>
 8012ad6:	f7fd fa17 	bl	800ff08 <__errno>
 8012ada:	2321      	movs	r3, #33	@ 0x21
 8012adc:	6003      	str	r3, [r0, #0]
 8012ade:	2200      	movs	r2, #0
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	4610      	mov	r0, r2
 8012ae4:	4619      	mov	r1, r3
 8012ae6:	f7ed fed9 	bl	800089c <__aeabi_ddiv>
 8012aea:	ec41 0b18 	vmov	d8, r0, r1
 8012aee:	eeb0 0a48 	vmov.f32	s0, s16
 8012af2:	eef0 0a68 	vmov.f32	s1, s17
 8012af6:	ecbd 8b02 	vpop	{d8}
 8012afa:	bd38      	pop	{r3, r4, r5, pc}

08012afc <fabs>:
 8012afc:	ec51 0b10 	vmov	r0, r1, d0
 8012b00:	4602      	mov	r2, r0
 8012b02:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012b06:	ec43 2b10 	vmov	d0, r2, r3
 8012b0a:	4770      	bx	lr

08012b0c <__ieee754_sqrt>:
 8012b0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b10:	4a68      	ldr	r2, [pc, #416]	@ (8012cb4 <__ieee754_sqrt+0x1a8>)
 8012b12:	ec55 4b10 	vmov	r4, r5, d0
 8012b16:	43aa      	bics	r2, r5
 8012b18:	462b      	mov	r3, r5
 8012b1a:	4621      	mov	r1, r4
 8012b1c:	d110      	bne.n	8012b40 <__ieee754_sqrt+0x34>
 8012b1e:	4622      	mov	r2, r4
 8012b20:	4620      	mov	r0, r4
 8012b22:	4629      	mov	r1, r5
 8012b24:	f7ed fd90 	bl	8000648 <__aeabi_dmul>
 8012b28:	4602      	mov	r2, r0
 8012b2a:	460b      	mov	r3, r1
 8012b2c:	4620      	mov	r0, r4
 8012b2e:	4629      	mov	r1, r5
 8012b30:	f7ed fbd4 	bl	80002dc <__adddf3>
 8012b34:	4604      	mov	r4, r0
 8012b36:	460d      	mov	r5, r1
 8012b38:	ec45 4b10 	vmov	d0, r4, r5
 8012b3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b40:	2d00      	cmp	r5, #0
 8012b42:	dc0e      	bgt.n	8012b62 <__ieee754_sqrt+0x56>
 8012b44:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012b48:	4322      	orrs	r2, r4
 8012b4a:	d0f5      	beq.n	8012b38 <__ieee754_sqrt+0x2c>
 8012b4c:	b19d      	cbz	r5, 8012b76 <__ieee754_sqrt+0x6a>
 8012b4e:	4622      	mov	r2, r4
 8012b50:	4620      	mov	r0, r4
 8012b52:	4629      	mov	r1, r5
 8012b54:	f7ed fbc0 	bl	80002d8 <__aeabi_dsub>
 8012b58:	4602      	mov	r2, r0
 8012b5a:	460b      	mov	r3, r1
 8012b5c:	f7ed fe9e 	bl	800089c <__aeabi_ddiv>
 8012b60:	e7e8      	b.n	8012b34 <__ieee754_sqrt+0x28>
 8012b62:	152a      	asrs	r2, r5, #20
 8012b64:	d115      	bne.n	8012b92 <__ieee754_sqrt+0x86>
 8012b66:	2000      	movs	r0, #0
 8012b68:	e009      	b.n	8012b7e <__ieee754_sqrt+0x72>
 8012b6a:	0acb      	lsrs	r3, r1, #11
 8012b6c:	3a15      	subs	r2, #21
 8012b6e:	0549      	lsls	r1, r1, #21
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d0fa      	beq.n	8012b6a <__ieee754_sqrt+0x5e>
 8012b74:	e7f7      	b.n	8012b66 <__ieee754_sqrt+0x5a>
 8012b76:	462a      	mov	r2, r5
 8012b78:	e7fa      	b.n	8012b70 <__ieee754_sqrt+0x64>
 8012b7a:	005b      	lsls	r3, r3, #1
 8012b7c:	3001      	adds	r0, #1
 8012b7e:	02dc      	lsls	r4, r3, #11
 8012b80:	d5fb      	bpl.n	8012b7a <__ieee754_sqrt+0x6e>
 8012b82:	1e44      	subs	r4, r0, #1
 8012b84:	1b12      	subs	r2, r2, r4
 8012b86:	f1c0 0420 	rsb	r4, r0, #32
 8012b8a:	fa21 f404 	lsr.w	r4, r1, r4
 8012b8e:	4323      	orrs	r3, r4
 8012b90:	4081      	lsls	r1, r0
 8012b92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b96:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8012b9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012b9e:	07d2      	lsls	r2, r2, #31
 8012ba0:	bf5c      	itt	pl
 8012ba2:	005b      	lslpl	r3, r3, #1
 8012ba4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012ba8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012bac:	bf58      	it	pl
 8012bae:	0049      	lslpl	r1, r1, #1
 8012bb0:	2600      	movs	r6, #0
 8012bb2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8012bb6:	106d      	asrs	r5, r5, #1
 8012bb8:	0049      	lsls	r1, r1, #1
 8012bba:	2016      	movs	r0, #22
 8012bbc:	4632      	mov	r2, r6
 8012bbe:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8012bc2:	1917      	adds	r7, r2, r4
 8012bc4:	429f      	cmp	r7, r3
 8012bc6:	bfde      	ittt	le
 8012bc8:	193a      	addle	r2, r7, r4
 8012bca:	1bdb      	suble	r3, r3, r7
 8012bcc:	1936      	addle	r6, r6, r4
 8012bce:	0fcf      	lsrs	r7, r1, #31
 8012bd0:	3801      	subs	r0, #1
 8012bd2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8012bd6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012bda:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012bde:	d1f0      	bne.n	8012bc2 <__ieee754_sqrt+0xb6>
 8012be0:	4604      	mov	r4, r0
 8012be2:	2720      	movs	r7, #32
 8012be4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012be8:	429a      	cmp	r2, r3
 8012bea:	eb00 0e0c 	add.w	lr, r0, ip
 8012bee:	db02      	blt.n	8012bf6 <__ieee754_sqrt+0xea>
 8012bf0:	d113      	bne.n	8012c1a <__ieee754_sqrt+0x10e>
 8012bf2:	458e      	cmp	lr, r1
 8012bf4:	d811      	bhi.n	8012c1a <__ieee754_sqrt+0x10e>
 8012bf6:	f1be 0f00 	cmp.w	lr, #0
 8012bfa:	eb0e 000c 	add.w	r0, lr, ip
 8012bfe:	da42      	bge.n	8012c86 <__ieee754_sqrt+0x17a>
 8012c00:	2800      	cmp	r0, #0
 8012c02:	db40      	blt.n	8012c86 <__ieee754_sqrt+0x17a>
 8012c04:	f102 0801 	add.w	r8, r2, #1
 8012c08:	1a9b      	subs	r3, r3, r2
 8012c0a:	458e      	cmp	lr, r1
 8012c0c:	bf88      	it	hi
 8012c0e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012c12:	eba1 010e 	sub.w	r1, r1, lr
 8012c16:	4464      	add	r4, ip
 8012c18:	4642      	mov	r2, r8
 8012c1a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012c1e:	3f01      	subs	r7, #1
 8012c20:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012c24:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012c28:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012c2c:	d1dc      	bne.n	8012be8 <__ieee754_sqrt+0xdc>
 8012c2e:	4319      	orrs	r1, r3
 8012c30:	d01b      	beq.n	8012c6a <__ieee754_sqrt+0x15e>
 8012c32:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8012cb8 <__ieee754_sqrt+0x1ac>
 8012c36:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8012cbc <__ieee754_sqrt+0x1b0>
 8012c3a:	e9da 0100 	ldrd	r0, r1, [sl]
 8012c3e:	e9db 2300 	ldrd	r2, r3, [fp]
 8012c42:	f7ed fb49 	bl	80002d8 <__aeabi_dsub>
 8012c46:	e9da 8900 	ldrd	r8, r9, [sl]
 8012c4a:	4602      	mov	r2, r0
 8012c4c:	460b      	mov	r3, r1
 8012c4e:	4640      	mov	r0, r8
 8012c50:	4649      	mov	r1, r9
 8012c52:	f7ed ff75 	bl	8000b40 <__aeabi_dcmple>
 8012c56:	b140      	cbz	r0, 8012c6a <__ieee754_sqrt+0x15e>
 8012c58:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012c5c:	e9da 0100 	ldrd	r0, r1, [sl]
 8012c60:	e9db 2300 	ldrd	r2, r3, [fp]
 8012c64:	d111      	bne.n	8012c8a <__ieee754_sqrt+0x17e>
 8012c66:	3601      	adds	r6, #1
 8012c68:	463c      	mov	r4, r7
 8012c6a:	1072      	asrs	r2, r6, #1
 8012c6c:	0863      	lsrs	r3, r4, #1
 8012c6e:	07f1      	lsls	r1, r6, #31
 8012c70:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012c74:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012c78:	bf48      	it	mi
 8012c7a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8012c7e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8012c82:	4618      	mov	r0, r3
 8012c84:	e756      	b.n	8012b34 <__ieee754_sqrt+0x28>
 8012c86:	4690      	mov	r8, r2
 8012c88:	e7be      	b.n	8012c08 <__ieee754_sqrt+0xfc>
 8012c8a:	f7ed fb27 	bl	80002dc <__adddf3>
 8012c8e:	e9da 8900 	ldrd	r8, r9, [sl]
 8012c92:	4602      	mov	r2, r0
 8012c94:	460b      	mov	r3, r1
 8012c96:	4640      	mov	r0, r8
 8012c98:	4649      	mov	r1, r9
 8012c9a:	f7ed ff47 	bl	8000b2c <__aeabi_dcmplt>
 8012c9e:	b120      	cbz	r0, 8012caa <__ieee754_sqrt+0x19e>
 8012ca0:	1ca0      	adds	r0, r4, #2
 8012ca2:	bf08      	it	eq
 8012ca4:	3601      	addeq	r6, #1
 8012ca6:	3402      	adds	r4, #2
 8012ca8:	e7df      	b.n	8012c6a <__ieee754_sqrt+0x15e>
 8012caa:	1c63      	adds	r3, r4, #1
 8012cac:	f023 0401 	bic.w	r4, r3, #1
 8012cb0:	e7db      	b.n	8012c6a <__ieee754_sqrt+0x15e>
 8012cb2:	bf00      	nop
 8012cb4:	7ff00000 	.word	0x7ff00000
 8012cb8:	20000278 	.word	0x20000278
 8012cbc:	20000270 	.word	0x20000270

08012cc0 <__ieee754_asin>:
 8012cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cc4:	ec55 4b10 	vmov	r4, r5, d0
 8012cc8:	4bc7      	ldr	r3, [pc, #796]	@ (8012fe8 <__ieee754_asin+0x328>)
 8012cca:	b087      	sub	sp, #28
 8012ccc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8012cd0:	429e      	cmp	r6, r3
 8012cd2:	9501      	str	r5, [sp, #4]
 8012cd4:	d92d      	bls.n	8012d32 <__ieee754_asin+0x72>
 8012cd6:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8012cda:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8012cde:	4326      	orrs	r6, r4
 8012ce0:	d116      	bne.n	8012d10 <__ieee754_asin+0x50>
 8012ce2:	a3a7      	add	r3, pc, #668	@ (adr r3, 8012f80 <__ieee754_asin+0x2c0>)
 8012ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ce8:	4620      	mov	r0, r4
 8012cea:	4629      	mov	r1, r5
 8012cec:	f7ed fcac 	bl	8000648 <__aeabi_dmul>
 8012cf0:	a3a5      	add	r3, pc, #660	@ (adr r3, 8012f88 <__ieee754_asin+0x2c8>)
 8012cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cf6:	4606      	mov	r6, r0
 8012cf8:	460f      	mov	r7, r1
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	4629      	mov	r1, r5
 8012cfe:	f7ed fca3 	bl	8000648 <__aeabi_dmul>
 8012d02:	4602      	mov	r2, r0
 8012d04:	460b      	mov	r3, r1
 8012d06:	4630      	mov	r0, r6
 8012d08:	4639      	mov	r1, r7
 8012d0a:	f7ed fae7 	bl	80002dc <__adddf3>
 8012d0e:	e009      	b.n	8012d24 <__ieee754_asin+0x64>
 8012d10:	4622      	mov	r2, r4
 8012d12:	462b      	mov	r3, r5
 8012d14:	4620      	mov	r0, r4
 8012d16:	4629      	mov	r1, r5
 8012d18:	f7ed fade 	bl	80002d8 <__aeabi_dsub>
 8012d1c:	4602      	mov	r2, r0
 8012d1e:	460b      	mov	r3, r1
 8012d20:	f7ed fdbc 	bl	800089c <__aeabi_ddiv>
 8012d24:	4604      	mov	r4, r0
 8012d26:	460d      	mov	r5, r1
 8012d28:	ec45 4b10 	vmov	d0, r4, r5
 8012d2c:	b007      	add	sp, #28
 8012d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d32:	4bae      	ldr	r3, [pc, #696]	@ (8012fec <__ieee754_asin+0x32c>)
 8012d34:	429e      	cmp	r6, r3
 8012d36:	d810      	bhi.n	8012d5a <__ieee754_asin+0x9a>
 8012d38:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8012d3c:	f080 80ad 	bcs.w	8012e9a <__ieee754_asin+0x1da>
 8012d40:	a393      	add	r3, pc, #588	@ (adr r3, 8012f90 <__ieee754_asin+0x2d0>)
 8012d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d46:	4620      	mov	r0, r4
 8012d48:	4629      	mov	r1, r5
 8012d4a:	f7ed fac7 	bl	80002dc <__adddf3>
 8012d4e:	4ba8      	ldr	r3, [pc, #672]	@ (8012ff0 <__ieee754_asin+0x330>)
 8012d50:	2200      	movs	r2, #0
 8012d52:	f7ed ff09 	bl	8000b68 <__aeabi_dcmpgt>
 8012d56:	2800      	cmp	r0, #0
 8012d58:	d1e6      	bne.n	8012d28 <__ieee754_asin+0x68>
 8012d5a:	ec45 4b10 	vmov	d0, r4, r5
 8012d5e:	f7ff fecd 	bl	8012afc <fabs>
 8012d62:	49a3      	ldr	r1, [pc, #652]	@ (8012ff0 <__ieee754_asin+0x330>)
 8012d64:	ec53 2b10 	vmov	r2, r3, d0
 8012d68:	2000      	movs	r0, #0
 8012d6a:	f7ed fab5 	bl	80002d8 <__aeabi_dsub>
 8012d6e:	4ba1      	ldr	r3, [pc, #644]	@ (8012ff4 <__ieee754_asin+0x334>)
 8012d70:	2200      	movs	r2, #0
 8012d72:	f7ed fc69 	bl	8000648 <__aeabi_dmul>
 8012d76:	a388      	add	r3, pc, #544	@ (adr r3, 8012f98 <__ieee754_asin+0x2d8>)
 8012d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d7c:	4604      	mov	r4, r0
 8012d7e:	460d      	mov	r5, r1
 8012d80:	f7ed fc62 	bl	8000648 <__aeabi_dmul>
 8012d84:	a386      	add	r3, pc, #536	@ (adr r3, 8012fa0 <__ieee754_asin+0x2e0>)
 8012d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d8a:	f7ed faa7 	bl	80002dc <__adddf3>
 8012d8e:	4622      	mov	r2, r4
 8012d90:	462b      	mov	r3, r5
 8012d92:	f7ed fc59 	bl	8000648 <__aeabi_dmul>
 8012d96:	a384      	add	r3, pc, #528	@ (adr r3, 8012fa8 <__ieee754_asin+0x2e8>)
 8012d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d9c:	f7ed fa9c 	bl	80002d8 <__aeabi_dsub>
 8012da0:	4622      	mov	r2, r4
 8012da2:	462b      	mov	r3, r5
 8012da4:	f7ed fc50 	bl	8000648 <__aeabi_dmul>
 8012da8:	a381      	add	r3, pc, #516	@ (adr r3, 8012fb0 <__ieee754_asin+0x2f0>)
 8012daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dae:	f7ed fa95 	bl	80002dc <__adddf3>
 8012db2:	4622      	mov	r2, r4
 8012db4:	462b      	mov	r3, r5
 8012db6:	f7ed fc47 	bl	8000648 <__aeabi_dmul>
 8012dba:	a37f      	add	r3, pc, #508	@ (adr r3, 8012fb8 <__ieee754_asin+0x2f8>)
 8012dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc0:	f7ed fa8a 	bl	80002d8 <__aeabi_dsub>
 8012dc4:	4622      	mov	r2, r4
 8012dc6:	462b      	mov	r3, r5
 8012dc8:	f7ed fc3e 	bl	8000648 <__aeabi_dmul>
 8012dcc:	a37c      	add	r3, pc, #496	@ (adr r3, 8012fc0 <__ieee754_asin+0x300>)
 8012dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd2:	f7ed fa83 	bl	80002dc <__adddf3>
 8012dd6:	4622      	mov	r2, r4
 8012dd8:	462b      	mov	r3, r5
 8012dda:	f7ed fc35 	bl	8000648 <__aeabi_dmul>
 8012dde:	a37a      	add	r3, pc, #488	@ (adr r3, 8012fc8 <__ieee754_asin+0x308>)
 8012de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012de8:	4620      	mov	r0, r4
 8012dea:	4629      	mov	r1, r5
 8012dec:	f7ed fc2c 	bl	8000648 <__aeabi_dmul>
 8012df0:	a377      	add	r3, pc, #476	@ (adr r3, 8012fd0 <__ieee754_asin+0x310>)
 8012df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df6:	f7ed fa6f 	bl	80002d8 <__aeabi_dsub>
 8012dfa:	4622      	mov	r2, r4
 8012dfc:	462b      	mov	r3, r5
 8012dfe:	f7ed fc23 	bl	8000648 <__aeabi_dmul>
 8012e02:	a375      	add	r3, pc, #468	@ (adr r3, 8012fd8 <__ieee754_asin+0x318>)
 8012e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e08:	f7ed fa68 	bl	80002dc <__adddf3>
 8012e0c:	4622      	mov	r2, r4
 8012e0e:	462b      	mov	r3, r5
 8012e10:	f7ed fc1a 	bl	8000648 <__aeabi_dmul>
 8012e14:	a372      	add	r3, pc, #456	@ (adr r3, 8012fe0 <__ieee754_asin+0x320>)
 8012e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e1a:	f7ed fa5d 	bl	80002d8 <__aeabi_dsub>
 8012e1e:	4622      	mov	r2, r4
 8012e20:	462b      	mov	r3, r5
 8012e22:	f7ed fc11 	bl	8000648 <__aeabi_dmul>
 8012e26:	4b72      	ldr	r3, [pc, #456]	@ (8012ff0 <__ieee754_asin+0x330>)
 8012e28:	2200      	movs	r2, #0
 8012e2a:	f7ed fa57 	bl	80002dc <__adddf3>
 8012e2e:	ec45 4b10 	vmov	d0, r4, r5
 8012e32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012e36:	f7ff fe69 	bl	8012b0c <__ieee754_sqrt>
 8012e3a:	4b6f      	ldr	r3, [pc, #444]	@ (8012ff8 <__ieee754_asin+0x338>)
 8012e3c:	429e      	cmp	r6, r3
 8012e3e:	ec5b ab10 	vmov	sl, fp, d0
 8012e42:	f240 80db 	bls.w	8012ffc <__ieee754_asin+0x33c>
 8012e46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e4e:	f7ed fd25 	bl	800089c <__aeabi_ddiv>
 8012e52:	4652      	mov	r2, sl
 8012e54:	465b      	mov	r3, fp
 8012e56:	f7ed fbf7 	bl	8000648 <__aeabi_dmul>
 8012e5a:	4652      	mov	r2, sl
 8012e5c:	465b      	mov	r3, fp
 8012e5e:	f7ed fa3d 	bl	80002dc <__adddf3>
 8012e62:	4602      	mov	r2, r0
 8012e64:	460b      	mov	r3, r1
 8012e66:	f7ed fa39 	bl	80002dc <__adddf3>
 8012e6a:	a347      	add	r3, pc, #284	@ (adr r3, 8012f88 <__ieee754_asin+0x2c8>)
 8012e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e70:	f7ed fa32 	bl	80002d8 <__aeabi_dsub>
 8012e74:	4602      	mov	r2, r0
 8012e76:	460b      	mov	r3, r1
 8012e78:	a141      	add	r1, pc, #260	@ (adr r1, 8012f80 <__ieee754_asin+0x2c0>)
 8012e7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e7e:	f7ed fa2b 	bl	80002d8 <__aeabi_dsub>
 8012e82:	9b01      	ldr	r3, [sp, #4]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	bfdc      	itt	le
 8012e88:	4602      	movle	r2, r0
 8012e8a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8012e8e:	4604      	mov	r4, r0
 8012e90:	460d      	mov	r5, r1
 8012e92:	bfdc      	itt	le
 8012e94:	4614      	movle	r4, r2
 8012e96:	461d      	movle	r5, r3
 8012e98:	e746      	b.n	8012d28 <__ieee754_asin+0x68>
 8012e9a:	4622      	mov	r2, r4
 8012e9c:	462b      	mov	r3, r5
 8012e9e:	4620      	mov	r0, r4
 8012ea0:	4629      	mov	r1, r5
 8012ea2:	f7ed fbd1 	bl	8000648 <__aeabi_dmul>
 8012ea6:	a33c      	add	r3, pc, #240	@ (adr r3, 8012f98 <__ieee754_asin+0x2d8>)
 8012ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eac:	4606      	mov	r6, r0
 8012eae:	460f      	mov	r7, r1
 8012eb0:	f7ed fbca 	bl	8000648 <__aeabi_dmul>
 8012eb4:	a33a      	add	r3, pc, #232	@ (adr r3, 8012fa0 <__ieee754_asin+0x2e0>)
 8012eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eba:	f7ed fa0f 	bl	80002dc <__adddf3>
 8012ebe:	4632      	mov	r2, r6
 8012ec0:	463b      	mov	r3, r7
 8012ec2:	f7ed fbc1 	bl	8000648 <__aeabi_dmul>
 8012ec6:	a338      	add	r3, pc, #224	@ (adr r3, 8012fa8 <__ieee754_asin+0x2e8>)
 8012ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ecc:	f7ed fa04 	bl	80002d8 <__aeabi_dsub>
 8012ed0:	4632      	mov	r2, r6
 8012ed2:	463b      	mov	r3, r7
 8012ed4:	f7ed fbb8 	bl	8000648 <__aeabi_dmul>
 8012ed8:	a335      	add	r3, pc, #212	@ (adr r3, 8012fb0 <__ieee754_asin+0x2f0>)
 8012eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ede:	f7ed f9fd 	bl	80002dc <__adddf3>
 8012ee2:	4632      	mov	r2, r6
 8012ee4:	463b      	mov	r3, r7
 8012ee6:	f7ed fbaf 	bl	8000648 <__aeabi_dmul>
 8012eea:	a333      	add	r3, pc, #204	@ (adr r3, 8012fb8 <__ieee754_asin+0x2f8>)
 8012eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef0:	f7ed f9f2 	bl	80002d8 <__aeabi_dsub>
 8012ef4:	4632      	mov	r2, r6
 8012ef6:	463b      	mov	r3, r7
 8012ef8:	f7ed fba6 	bl	8000648 <__aeabi_dmul>
 8012efc:	a330      	add	r3, pc, #192	@ (adr r3, 8012fc0 <__ieee754_asin+0x300>)
 8012efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f02:	f7ed f9eb 	bl	80002dc <__adddf3>
 8012f06:	4632      	mov	r2, r6
 8012f08:	463b      	mov	r3, r7
 8012f0a:	f7ed fb9d 	bl	8000648 <__aeabi_dmul>
 8012f0e:	a32e      	add	r3, pc, #184	@ (adr r3, 8012fc8 <__ieee754_asin+0x308>)
 8012f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f14:	4680      	mov	r8, r0
 8012f16:	4689      	mov	r9, r1
 8012f18:	4630      	mov	r0, r6
 8012f1a:	4639      	mov	r1, r7
 8012f1c:	f7ed fb94 	bl	8000648 <__aeabi_dmul>
 8012f20:	a32b      	add	r3, pc, #172	@ (adr r3, 8012fd0 <__ieee754_asin+0x310>)
 8012f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f26:	f7ed f9d7 	bl	80002d8 <__aeabi_dsub>
 8012f2a:	4632      	mov	r2, r6
 8012f2c:	463b      	mov	r3, r7
 8012f2e:	f7ed fb8b 	bl	8000648 <__aeabi_dmul>
 8012f32:	a329      	add	r3, pc, #164	@ (adr r3, 8012fd8 <__ieee754_asin+0x318>)
 8012f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f38:	f7ed f9d0 	bl	80002dc <__adddf3>
 8012f3c:	4632      	mov	r2, r6
 8012f3e:	463b      	mov	r3, r7
 8012f40:	f7ed fb82 	bl	8000648 <__aeabi_dmul>
 8012f44:	a326      	add	r3, pc, #152	@ (adr r3, 8012fe0 <__ieee754_asin+0x320>)
 8012f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f4a:	f7ed f9c5 	bl	80002d8 <__aeabi_dsub>
 8012f4e:	4632      	mov	r2, r6
 8012f50:	463b      	mov	r3, r7
 8012f52:	f7ed fb79 	bl	8000648 <__aeabi_dmul>
 8012f56:	4b26      	ldr	r3, [pc, #152]	@ (8012ff0 <__ieee754_asin+0x330>)
 8012f58:	2200      	movs	r2, #0
 8012f5a:	f7ed f9bf 	bl	80002dc <__adddf3>
 8012f5e:	4602      	mov	r2, r0
 8012f60:	460b      	mov	r3, r1
 8012f62:	4640      	mov	r0, r8
 8012f64:	4649      	mov	r1, r9
 8012f66:	f7ed fc99 	bl	800089c <__aeabi_ddiv>
 8012f6a:	4622      	mov	r2, r4
 8012f6c:	462b      	mov	r3, r5
 8012f6e:	f7ed fb6b 	bl	8000648 <__aeabi_dmul>
 8012f72:	4602      	mov	r2, r0
 8012f74:	460b      	mov	r3, r1
 8012f76:	4620      	mov	r0, r4
 8012f78:	4629      	mov	r1, r5
 8012f7a:	e6c6      	b.n	8012d0a <__ieee754_asin+0x4a>
 8012f7c:	f3af 8000 	nop.w
 8012f80:	54442d18 	.word	0x54442d18
 8012f84:	3ff921fb 	.word	0x3ff921fb
 8012f88:	33145c07 	.word	0x33145c07
 8012f8c:	3c91a626 	.word	0x3c91a626
 8012f90:	8800759c 	.word	0x8800759c
 8012f94:	7e37e43c 	.word	0x7e37e43c
 8012f98:	0dfdf709 	.word	0x0dfdf709
 8012f9c:	3f023de1 	.word	0x3f023de1
 8012fa0:	7501b288 	.word	0x7501b288
 8012fa4:	3f49efe0 	.word	0x3f49efe0
 8012fa8:	b5688f3b 	.word	0xb5688f3b
 8012fac:	3fa48228 	.word	0x3fa48228
 8012fb0:	0e884455 	.word	0x0e884455
 8012fb4:	3fc9c155 	.word	0x3fc9c155
 8012fb8:	03eb6f7d 	.word	0x03eb6f7d
 8012fbc:	3fd4d612 	.word	0x3fd4d612
 8012fc0:	55555555 	.word	0x55555555
 8012fc4:	3fc55555 	.word	0x3fc55555
 8012fc8:	b12e9282 	.word	0xb12e9282
 8012fcc:	3fb3b8c5 	.word	0x3fb3b8c5
 8012fd0:	1b8d0159 	.word	0x1b8d0159
 8012fd4:	3fe6066c 	.word	0x3fe6066c
 8012fd8:	9c598ac8 	.word	0x9c598ac8
 8012fdc:	40002ae5 	.word	0x40002ae5
 8012fe0:	1c8a2d4b 	.word	0x1c8a2d4b
 8012fe4:	40033a27 	.word	0x40033a27
 8012fe8:	3fefffff 	.word	0x3fefffff
 8012fec:	3fdfffff 	.word	0x3fdfffff
 8012ff0:	3ff00000 	.word	0x3ff00000
 8012ff4:	3fe00000 	.word	0x3fe00000
 8012ff8:	3fef3332 	.word	0x3fef3332
 8012ffc:	4652      	mov	r2, sl
 8012ffe:	465b      	mov	r3, fp
 8013000:	4650      	mov	r0, sl
 8013002:	4659      	mov	r1, fp
 8013004:	f7ed f96a 	bl	80002dc <__adddf3>
 8013008:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801300c:	4606      	mov	r6, r0
 801300e:	460f      	mov	r7, r1
 8013010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013014:	f7ed fc42 	bl	800089c <__aeabi_ddiv>
 8013018:	4602      	mov	r2, r0
 801301a:	460b      	mov	r3, r1
 801301c:	4630      	mov	r0, r6
 801301e:	4639      	mov	r1, r7
 8013020:	f7ed fb12 	bl	8000648 <__aeabi_dmul>
 8013024:	f04f 0800 	mov.w	r8, #0
 8013028:	4606      	mov	r6, r0
 801302a:	460f      	mov	r7, r1
 801302c:	4642      	mov	r2, r8
 801302e:	465b      	mov	r3, fp
 8013030:	4640      	mov	r0, r8
 8013032:	4659      	mov	r1, fp
 8013034:	f7ed fb08 	bl	8000648 <__aeabi_dmul>
 8013038:	4602      	mov	r2, r0
 801303a:	460b      	mov	r3, r1
 801303c:	4620      	mov	r0, r4
 801303e:	4629      	mov	r1, r5
 8013040:	f7ed f94a 	bl	80002d8 <__aeabi_dsub>
 8013044:	4642      	mov	r2, r8
 8013046:	4604      	mov	r4, r0
 8013048:	460d      	mov	r5, r1
 801304a:	465b      	mov	r3, fp
 801304c:	4650      	mov	r0, sl
 801304e:	4659      	mov	r1, fp
 8013050:	f7ed f944 	bl	80002dc <__adddf3>
 8013054:	4602      	mov	r2, r0
 8013056:	460b      	mov	r3, r1
 8013058:	4620      	mov	r0, r4
 801305a:	4629      	mov	r1, r5
 801305c:	f7ed fc1e 	bl	800089c <__aeabi_ddiv>
 8013060:	4602      	mov	r2, r0
 8013062:	460b      	mov	r3, r1
 8013064:	f7ed f93a 	bl	80002dc <__adddf3>
 8013068:	4602      	mov	r2, r0
 801306a:	460b      	mov	r3, r1
 801306c:	a112      	add	r1, pc, #72	@ (adr r1, 80130b8 <__ieee754_asin+0x3f8>)
 801306e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013072:	f7ed f931 	bl	80002d8 <__aeabi_dsub>
 8013076:	4602      	mov	r2, r0
 8013078:	460b      	mov	r3, r1
 801307a:	4630      	mov	r0, r6
 801307c:	4639      	mov	r1, r7
 801307e:	f7ed f92b 	bl	80002d8 <__aeabi_dsub>
 8013082:	4642      	mov	r2, r8
 8013084:	4604      	mov	r4, r0
 8013086:	460d      	mov	r5, r1
 8013088:	465b      	mov	r3, fp
 801308a:	4640      	mov	r0, r8
 801308c:	4659      	mov	r1, fp
 801308e:	f7ed f925 	bl	80002dc <__adddf3>
 8013092:	4602      	mov	r2, r0
 8013094:	460b      	mov	r3, r1
 8013096:	a10a      	add	r1, pc, #40	@ (adr r1, 80130c0 <__ieee754_asin+0x400>)
 8013098:	e9d1 0100 	ldrd	r0, r1, [r1]
 801309c:	f7ed f91c 	bl	80002d8 <__aeabi_dsub>
 80130a0:	4602      	mov	r2, r0
 80130a2:	460b      	mov	r3, r1
 80130a4:	4620      	mov	r0, r4
 80130a6:	4629      	mov	r1, r5
 80130a8:	f7ed f916 	bl	80002d8 <__aeabi_dsub>
 80130ac:	4602      	mov	r2, r0
 80130ae:	460b      	mov	r3, r1
 80130b0:	a103      	add	r1, pc, #12	@ (adr r1, 80130c0 <__ieee754_asin+0x400>)
 80130b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130b6:	e6e2      	b.n	8012e7e <__ieee754_asin+0x1be>
 80130b8:	33145c07 	.word	0x33145c07
 80130bc:	3c91a626 	.word	0x3c91a626
 80130c0:	54442d18 	.word	0x54442d18
 80130c4:	3fe921fb 	.word	0x3fe921fb

080130c8 <__ieee754_atan2>:
 80130c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130cc:	ec57 6b11 	vmov	r6, r7, d1
 80130d0:	4273      	negs	r3, r6
 80130d2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8013250 <__ieee754_atan2+0x188>
 80130d6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80130da:	4333      	orrs	r3, r6
 80130dc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80130e0:	4543      	cmp	r3, r8
 80130e2:	ec51 0b10 	vmov	r0, r1, d0
 80130e6:	4635      	mov	r5, r6
 80130e8:	d809      	bhi.n	80130fe <__ieee754_atan2+0x36>
 80130ea:	4244      	negs	r4, r0
 80130ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80130f0:	4304      	orrs	r4, r0
 80130f2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80130f6:	4544      	cmp	r4, r8
 80130f8:	468e      	mov	lr, r1
 80130fa:	4681      	mov	r9, r0
 80130fc:	d907      	bls.n	801310e <__ieee754_atan2+0x46>
 80130fe:	4632      	mov	r2, r6
 8013100:	463b      	mov	r3, r7
 8013102:	f7ed f8eb 	bl	80002dc <__adddf3>
 8013106:	ec41 0b10 	vmov	d0, r0, r1
 801310a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801310e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8013112:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8013116:	4334      	orrs	r4, r6
 8013118:	d103      	bne.n	8013122 <__ieee754_atan2+0x5a>
 801311a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801311e:	f000 b9a3 	b.w	8013468 <atan>
 8013122:	17bc      	asrs	r4, r7, #30
 8013124:	f004 0402 	and.w	r4, r4, #2
 8013128:	ea53 0909 	orrs.w	r9, r3, r9
 801312c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013130:	d107      	bne.n	8013142 <__ieee754_atan2+0x7a>
 8013132:	2c02      	cmp	r4, #2
 8013134:	d05f      	beq.n	80131f6 <__ieee754_atan2+0x12e>
 8013136:	2c03      	cmp	r4, #3
 8013138:	d1e5      	bne.n	8013106 <__ieee754_atan2+0x3e>
 801313a:	a141      	add	r1, pc, #260	@ (adr r1, 8013240 <__ieee754_atan2+0x178>)
 801313c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013140:	e7e1      	b.n	8013106 <__ieee754_atan2+0x3e>
 8013142:	4315      	orrs	r5, r2
 8013144:	d106      	bne.n	8013154 <__ieee754_atan2+0x8c>
 8013146:	f1be 0f00 	cmp.w	lr, #0
 801314a:	da5f      	bge.n	801320c <__ieee754_atan2+0x144>
 801314c:	a13e      	add	r1, pc, #248	@ (adr r1, 8013248 <__ieee754_atan2+0x180>)
 801314e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013152:	e7d8      	b.n	8013106 <__ieee754_atan2+0x3e>
 8013154:	4542      	cmp	r2, r8
 8013156:	d10f      	bne.n	8013178 <__ieee754_atan2+0xb0>
 8013158:	4293      	cmp	r3, r2
 801315a:	f104 34ff 	add.w	r4, r4, #4294967295
 801315e:	d107      	bne.n	8013170 <__ieee754_atan2+0xa8>
 8013160:	2c02      	cmp	r4, #2
 8013162:	d84c      	bhi.n	80131fe <__ieee754_atan2+0x136>
 8013164:	4b34      	ldr	r3, [pc, #208]	@ (8013238 <__ieee754_atan2+0x170>)
 8013166:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801316a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801316e:	e7ca      	b.n	8013106 <__ieee754_atan2+0x3e>
 8013170:	2c02      	cmp	r4, #2
 8013172:	d848      	bhi.n	8013206 <__ieee754_atan2+0x13e>
 8013174:	4b31      	ldr	r3, [pc, #196]	@ (801323c <__ieee754_atan2+0x174>)
 8013176:	e7f6      	b.n	8013166 <__ieee754_atan2+0x9e>
 8013178:	4543      	cmp	r3, r8
 801317a:	d0e4      	beq.n	8013146 <__ieee754_atan2+0x7e>
 801317c:	1a9b      	subs	r3, r3, r2
 801317e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8013182:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013186:	da1e      	bge.n	80131c6 <__ieee754_atan2+0xfe>
 8013188:	2f00      	cmp	r7, #0
 801318a:	da01      	bge.n	8013190 <__ieee754_atan2+0xc8>
 801318c:	323c      	adds	r2, #60	@ 0x3c
 801318e:	db1e      	blt.n	80131ce <__ieee754_atan2+0x106>
 8013190:	4632      	mov	r2, r6
 8013192:	463b      	mov	r3, r7
 8013194:	f7ed fb82 	bl	800089c <__aeabi_ddiv>
 8013198:	ec41 0b10 	vmov	d0, r0, r1
 801319c:	f7ff fcae 	bl	8012afc <fabs>
 80131a0:	f000 f962 	bl	8013468 <atan>
 80131a4:	ec51 0b10 	vmov	r0, r1, d0
 80131a8:	2c01      	cmp	r4, #1
 80131aa:	d013      	beq.n	80131d4 <__ieee754_atan2+0x10c>
 80131ac:	2c02      	cmp	r4, #2
 80131ae:	d015      	beq.n	80131dc <__ieee754_atan2+0x114>
 80131b0:	2c00      	cmp	r4, #0
 80131b2:	d0a8      	beq.n	8013106 <__ieee754_atan2+0x3e>
 80131b4:	a318      	add	r3, pc, #96	@ (adr r3, 8013218 <__ieee754_atan2+0x150>)
 80131b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ba:	f7ed f88d 	bl	80002d8 <__aeabi_dsub>
 80131be:	a318      	add	r3, pc, #96	@ (adr r3, 8013220 <__ieee754_atan2+0x158>)
 80131c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131c4:	e014      	b.n	80131f0 <__ieee754_atan2+0x128>
 80131c6:	a118      	add	r1, pc, #96	@ (adr r1, 8013228 <__ieee754_atan2+0x160>)
 80131c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131cc:	e7ec      	b.n	80131a8 <__ieee754_atan2+0xe0>
 80131ce:	2000      	movs	r0, #0
 80131d0:	2100      	movs	r1, #0
 80131d2:	e7e9      	b.n	80131a8 <__ieee754_atan2+0xe0>
 80131d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80131d8:	4619      	mov	r1, r3
 80131da:	e794      	b.n	8013106 <__ieee754_atan2+0x3e>
 80131dc:	a30e      	add	r3, pc, #56	@ (adr r3, 8013218 <__ieee754_atan2+0x150>)
 80131de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131e2:	f7ed f879 	bl	80002d8 <__aeabi_dsub>
 80131e6:	4602      	mov	r2, r0
 80131e8:	460b      	mov	r3, r1
 80131ea:	a10d      	add	r1, pc, #52	@ (adr r1, 8013220 <__ieee754_atan2+0x158>)
 80131ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131f0:	f7ed f872 	bl	80002d8 <__aeabi_dsub>
 80131f4:	e787      	b.n	8013106 <__ieee754_atan2+0x3e>
 80131f6:	a10a      	add	r1, pc, #40	@ (adr r1, 8013220 <__ieee754_atan2+0x158>)
 80131f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131fc:	e783      	b.n	8013106 <__ieee754_atan2+0x3e>
 80131fe:	a10c      	add	r1, pc, #48	@ (adr r1, 8013230 <__ieee754_atan2+0x168>)
 8013200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013204:	e77f      	b.n	8013106 <__ieee754_atan2+0x3e>
 8013206:	2000      	movs	r0, #0
 8013208:	2100      	movs	r1, #0
 801320a:	e77c      	b.n	8013106 <__ieee754_atan2+0x3e>
 801320c:	a106      	add	r1, pc, #24	@ (adr r1, 8013228 <__ieee754_atan2+0x160>)
 801320e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013212:	e778      	b.n	8013106 <__ieee754_atan2+0x3e>
 8013214:	f3af 8000 	nop.w
 8013218:	33145c07 	.word	0x33145c07
 801321c:	3ca1a626 	.word	0x3ca1a626
 8013220:	54442d18 	.word	0x54442d18
 8013224:	400921fb 	.word	0x400921fb
 8013228:	54442d18 	.word	0x54442d18
 801322c:	3ff921fb 	.word	0x3ff921fb
 8013230:	54442d18 	.word	0x54442d18
 8013234:	3fe921fb 	.word	0x3fe921fb
 8013238:	08013d98 	.word	0x08013d98
 801323c:	08013d80 	.word	0x08013d80
 8013240:	54442d18 	.word	0x54442d18
 8013244:	c00921fb 	.word	0xc00921fb
 8013248:	54442d18 	.word	0x54442d18
 801324c:	bff921fb 	.word	0xbff921fb
 8013250:	7ff00000 	.word	0x7ff00000

08013254 <__ieee754_fmod>:
 8013254:	ec53 2b11 	vmov	r2, r3, d1
 8013258:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 801325c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013260:	ea52 040c 	orrs.w	r4, r2, ip
 8013264:	ec51 0b10 	vmov	r0, r1, d0
 8013268:	461e      	mov	r6, r3
 801326a:	4617      	mov	r7, r2
 801326c:	4696      	mov	lr, r2
 801326e:	d00c      	beq.n	801328a <__ieee754_fmod+0x36>
 8013270:	4c77      	ldr	r4, [pc, #476]	@ (8013450 <__ieee754_fmod+0x1fc>)
 8013272:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8013276:	45a0      	cmp	r8, r4
 8013278:	4689      	mov	r9, r1
 801327a:	d806      	bhi.n	801328a <__ieee754_fmod+0x36>
 801327c:	4254      	negs	r4, r2
 801327e:	4d75      	ldr	r5, [pc, #468]	@ (8013454 <__ieee754_fmod+0x200>)
 8013280:	4314      	orrs	r4, r2
 8013282:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8013286:	42ac      	cmp	r4, r5
 8013288:	d909      	bls.n	801329e <__ieee754_fmod+0x4a>
 801328a:	f7ed f9dd 	bl	8000648 <__aeabi_dmul>
 801328e:	4602      	mov	r2, r0
 8013290:	460b      	mov	r3, r1
 8013292:	f7ed fb03 	bl	800089c <__aeabi_ddiv>
 8013296:	ec41 0b10 	vmov	d0, r0, r1
 801329a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801329e:	45e0      	cmp	r8, ip
 80132a0:	4682      	mov	sl, r0
 80132a2:	4604      	mov	r4, r0
 80132a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80132a8:	dc09      	bgt.n	80132be <__ieee754_fmod+0x6a>
 80132aa:	dbf4      	blt.n	8013296 <__ieee754_fmod+0x42>
 80132ac:	4282      	cmp	r2, r0
 80132ae:	d8f2      	bhi.n	8013296 <__ieee754_fmod+0x42>
 80132b0:	d105      	bne.n	80132be <__ieee754_fmod+0x6a>
 80132b2:	4b69      	ldr	r3, [pc, #420]	@ (8013458 <__ieee754_fmod+0x204>)
 80132b4:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 80132b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80132bc:	e7eb      	b.n	8013296 <__ieee754_fmod+0x42>
 80132be:	4a65      	ldr	r2, [pc, #404]	@ (8013454 <__ieee754_fmod+0x200>)
 80132c0:	ea19 0f02 	tst.w	r9, r2
 80132c4:	d148      	bne.n	8013358 <__ieee754_fmod+0x104>
 80132c6:	f1b8 0f00 	cmp.w	r8, #0
 80132ca:	d13d      	bne.n	8013348 <__ieee754_fmod+0xf4>
 80132cc:	4963      	ldr	r1, [pc, #396]	@ (801345c <__ieee754_fmod+0x208>)
 80132ce:	4653      	mov	r3, sl
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	dc36      	bgt.n	8013342 <__ieee754_fmod+0xee>
 80132d4:	4216      	tst	r6, r2
 80132d6:	d14f      	bne.n	8013378 <__ieee754_fmod+0x124>
 80132d8:	f1bc 0f00 	cmp.w	ip, #0
 80132dc:	d144      	bne.n	8013368 <__ieee754_fmod+0x114>
 80132de:	4a5f      	ldr	r2, [pc, #380]	@ (801345c <__ieee754_fmod+0x208>)
 80132e0:	463b      	mov	r3, r7
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	dc3d      	bgt.n	8013362 <__ieee754_fmod+0x10e>
 80132e6:	485e      	ldr	r0, [pc, #376]	@ (8013460 <__ieee754_fmod+0x20c>)
 80132e8:	4281      	cmp	r1, r0
 80132ea:	db4a      	blt.n	8013382 <__ieee754_fmod+0x12e>
 80132ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80132f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80132f4:	485a      	ldr	r0, [pc, #360]	@ (8013460 <__ieee754_fmod+0x20c>)
 80132f6:	4282      	cmp	r2, r0
 80132f8:	db57      	blt.n	80133aa <__ieee754_fmod+0x156>
 80132fa:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80132fe:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8013302:	1a89      	subs	r1, r1, r2
 8013304:	1b98      	subs	r0, r3, r6
 8013306:	eba4 070e 	sub.w	r7, r4, lr
 801330a:	2900      	cmp	r1, #0
 801330c:	d162      	bne.n	80133d4 <__ieee754_fmod+0x180>
 801330e:	4574      	cmp	r4, lr
 8013310:	bf38      	it	cc
 8013312:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8013316:	2800      	cmp	r0, #0
 8013318:	bfa4      	itt	ge
 801331a:	463c      	movge	r4, r7
 801331c:	4603      	movge	r3, r0
 801331e:	ea53 0104 	orrs.w	r1, r3, r4
 8013322:	d0c6      	beq.n	80132b2 <__ieee754_fmod+0x5e>
 8013324:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013328:	db69      	blt.n	80133fe <__ieee754_fmod+0x1aa>
 801332a:	494d      	ldr	r1, [pc, #308]	@ (8013460 <__ieee754_fmod+0x20c>)
 801332c:	428a      	cmp	r2, r1
 801332e:	db6c      	blt.n	801340a <__ieee754_fmod+0x1b6>
 8013330:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013334:	432b      	orrs	r3, r5
 8013336:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 801333a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801333e:	4620      	mov	r0, r4
 8013340:	e7a9      	b.n	8013296 <__ieee754_fmod+0x42>
 8013342:	3901      	subs	r1, #1
 8013344:	005b      	lsls	r3, r3, #1
 8013346:	e7c3      	b.n	80132d0 <__ieee754_fmod+0x7c>
 8013348:	4945      	ldr	r1, [pc, #276]	@ (8013460 <__ieee754_fmod+0x20c>)
 801334a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801334e:	2b00      	cmp	r3, #0
 8013350:	ddc0      	ble.n	80132d4 <__ieee754_fmod+0x80>
 8013352:	3901      	subs	r1, #1
 8013354:	005b      	lsls	r3, r3, #1
 8013356:	e7fa      	b.n	801334e <__ieee754_fmod+0xfa>
 8013358:	ea4f 5128 	mov.w	r1, r8, asr #20
 801335c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8013360:	e7b8      	b.n	80132d4 <__ieee754_fmod+0x80>
 8013362:	3a01      	subs	r2, #1
 8013364:	005b      	lsls	r3, r3, #1
 8013366:	e7bc      	b.n	80132e2 <__ieee754_fmod+0x8e>
 8013368:	4a3d      	ldr	r2, [pc, #244]	@ (8013460 <__ieee754_fmod+0x20c>)
 801336a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801336e:	2b00      	cmp	r3, #0
 8013370:	ddb9      	ble.n	80132e6 <__ieee754_fmod+0x92>
 8013372:	3a01      	subs	r2, #1
 8013374:	005b      	lsls	r3, r3, #1
 8013376:	e7fa      	b.n	801336e <__ieee754_fmod+0x11a>
 8013378:	ea4f 522c 	mov.w	r2, ip, asr #20
 801337c:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8013380:	e7b1      	b.n	80132e6 <__ieee754_fmod+0x92>
 8013382:	1a40      	subs	r0, r0, r1
 8013384:	281f      	cmp	r0, #31
 8013386:	dc0a      	bgt.n	801339e <__ieee754_fmod+0x14a>
 8013388:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 801338c:	fa08 f800 	lsl.w	r8, r8, r0
 8013390:	fa2a f303 	lsr.w	r3, sl, r3
 8013394:	ea43 0308 	orr.w	r3, r3, r8
 8013398:	fa0a f400 	lsl.w	r4, sl, r0
 801339c:	e7aa      	b.n	80132f4 <__ieee754_fmod+0xa0>
 801339e:	4b31      	ldr	r3, [pc, #196]	@ (8013464 <__ieee754_fmod+0x210>)
 80133a0:	1a5b      	subs	r3, r3, r1
 80133a2:	fa0a f303 	lsl.w	r3, sl, r3
 80133a6:	2400      	movs	r4, #0
 80133a8:	e7a4      	b.n	80132f4 <__ieee754_fmod+0xa0>
 80133aa:	1a80      	subs	r0, r0, r2
 80133ac:	281f      	cmp	r0, #31
 80133ae:	dc0a      	bgt.n	80133c6 <__ieee754_fmod+0x172>
 80133b0:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 80133b4:	fa0c fc00 	lsl.w	ip, ip, r0
 80133b8:	fa27 f606 	lsr.w	r6, r7, r6
 80133bc:	ea46 060c 	orr.w	r6, r6, ip
 80133c0:	fa07 fe00 	lsl.w	lr, r7, r0
 80133c4:	e79d      	b.n	8013302 <__ieee754_fmod+0xae>
 80133c6:	4e27      	ldr	r6, [pc, #156]	@ (8013464 <__ieee754_fmod+0x210>)
 80133c8:	1ab6      	subs	r6, r6, r2
 80133ca:	fa07 f606 	lsl.w	r6, r7, r6
 80133ce:	f04f 0e00 	mov.w	lr, #0
 80133d2:	e796      	b.n	8013302 <__ieee754_fmod+0xae>
 80133d4:	4574      	cmp	r4, lr
 80133d6:	bf38      	it	cc
 80133d8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80133dc:	2800      	cmp	r0, #0
 80133de:	da05      	bge.n	80133ec <__ieee754_fmod+0x198>
 80133e0:	0fe0      	lsrs	r0, r4, #31
 80133e2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80133e6:	0064      	lsls	r4, r4, #1
 80133e8:	3901      	subs	r1, #1
 80133ea:	e78b      	b.n	8013304 <__ieee754_fmod+0xb0>
 80133ec:	ea50 0307 	orrs.w	r3, r0, r7
 80133f0:	f43f af5f 	beq.w	80132b2 <__ieee754_fmod+0x5e>
 80133f4:	0ffb      	lsrs	r3, r7, #31
 80133f6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80133fa:	007c      	lsls	r4, r7, #1
 80133fc:	e7f4      	b.n	80133e8 <__ieee754_fmod+0x194>
 80133fe:	0fe1      	lsrs	r1, r4, #31
 8013400:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8013404:	0064      	lsls	r4, r4, #1
 8013406:	3a01      	subs	r2, #1
 8013408:	e78c      	b.n	8013324 <__ieee754_fmod+0xd0>
 801340a:	1a89      	subs	r1, r1, r2
 801340c:	2914      	cmp	r1, #20
 801340e:	dc0a      	bgt.n	8013426 <__ieee754_fmod+0x1d2>
 8013410:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8013414:	fa03 f202 	lsl.w	r2, r3, r2
 8013418:	40cc      	lsrs	r4, r1
 801341a:	4322      	orrs	r2, r4
 801341c:	410b      	asrs	r3, r1
 801341e:	ea43 0105 	orr.w	r1, r3, r5
 8013422:	4610      	mov	r0, r2
 8013424:	e737      	b.n	8013296 <__ieee754_fmod+0x42>
 8013426:	291f      	cmp	r1, #31
 8013428:	dc07      	bgt.n	801343a <__ieee754_fmod+0x1e6>
 801342a:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 801342e:	40cc      	lsrs	r4, r1
 8013430:	fa03 f202 	lsl.w	r2, r3, r2
 8013434:	4322      	orrs	r2, r4
 8013436:	462b      	mov	r3, r5
 8013438:	e7f1      	b.n	801341e <__ieee754_fmod+0x1ca>
 801343a:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 801343e:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8013442:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8013446:	32e2      	adds	r2, #226	@ 0xe2
 8013448:	fa43 f202 	asr.w	r2, r3, r2
 801344c:	e7f3      	b.n	8013436 <__ieee754_fmod+0x1e2>
 801344e:	bf00      	nop
 8013450:	7fefffff 	.word	0x7fefffff
 8013454:	7ff00000 	.word	0x7ff00000
 8013458:	08013db0 	.word	0x08013db0
 801345c:	fffffbed 	.word	0xfffffbed
 8013460:	fffffc02 	.word	0xfffffc02
 8013464:	fffffbe2 	.word	0xfffffbe2

08013468 <atan>:
 8013468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801346c:	ec55 4b10 	vmov	r4, r5, d0
 8013470:	4bbf      	ldr	r3, [pc, #764]	@ (8013770 <atan+0x308>)
 8013472:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8013476:	429e      	cmp	r6, r3
 8013478:	46ab      	mov	fp, r5
 801347a:	d918      	bls.n	80134ae <atan+0x46>
 801347c:	4bbd      	ldr	r3, [pc, #756]	@ (8013774 <atan+0x30c>)
 801347e:	429e      	cmp	r6, r3
 8013480:	d801      	bhi.n	8013486 <atan+0x1e>
 8013482:	d109      	bne.n	8013498 <atan+0x30>
 8013484:	b144      	cbz	r4, 8013498 <atan+0x30>
 8013486:	4622      	mov	r2, r4
 8013488:	462b      	mov	r3, r5
 801348a:	4620      	mov	r0, r4
 801348c:	4629      	mov	r1, r5
 801348e:	f7ec ff25 	bl	80002dc <__adddf3>
 8013492:	4604      	mov	r4, r0
 8013494:	460d      	mov	r5, r1
 8013496:	e006      	b.n	80134a6 <atan+0x3e>
 8013498:	f1bb 0f00 	cmp.w	fp, #0
 801349c:	f340 812b 	ble.w	80136f6 <atan+0x28e>
 80134a0:	a597      	add	r5, pc, #604	@ (adr r5, 8013700 <atan+0x298>)
 80134a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80134a6:	ec45 4b10 	vmov	d0, r4, r5
 80134aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134ae:	4bb2      	ldr	r3, [pc, #712]	@ (8013778 <atan+0x310>)
 80134b0:	429e      	cmp	r6, r3
 80134b2:	d813      	bhi.n	80134dc <atan+0x74>
 80134b4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80134b8:	429e      	cmp	r6, r3
 80134ba:	d80c      	bhi.n	80134d6 <atan+0x6e>
 80134bc:	a392      	add	r3, pc, #584	@ (adr r3, 8013708 <atan+0x2a0>)
 80134be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c2:	4620      	mov	r0, r4
 80134c4:	4629      	mov	r1, r5
 80134c6:	f7ec ff09 	bl	80002dc <__adddf3>
 80134ca:	4bac      	ldr	r3, [pc, #688]	@ (801377c <atan+0x314>)
 80134cc:	2200      	movs	r2, #0
 80134ce:	f7ed fb4b 	bl	8000b68 <__aeabi_dcmpgt>
 80134d2:	2800      	cmp	r0, #0
 80134d4:	d1e7      	bne.n	80134a6 <atan+0x3e>
 80134d6:	f04f 3aff 	mov.w	sl, #4294967295
 80134da:	e029      	b.n	8013530 <atan+0xc8>
 80134dc:	f7ff fb0e 	bl	8012afc <fabs>
 80134e0:	4ba7      	ldr	r3, [pc, #668]	@ (8013780 <atan+0x318>)
 80134e2:	429e      	cmp	r6, r3
 80134e4:	ec55 4b10 	vmov	r4, r5, d0
 80134e8:	f200 80bc 	bhi.w	8013664 <atan+0x1fc>
 80134ec:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80134f0:	429e      	cmp	r6, r3
 80134f2:	f200 809e 	bhi.w	8013632 <atan+0x1ca>
 80134f6:	4622      	mov	r2, r4
 80134f8:	462b      	mov	r3, r5
 80134fa:	4620      	mov	r0, r4
 80134fc:	4629      	mov	r1, r5
 80134fe:	f7ec feed 	bl	80002dc <__adddf3>
 8013502:	4b9e      	ldr	r3, [pc, #632]	@ (801377c <atan+0x314>)
 8013504:	2200      	movs	r2, #0
 8013506:	f7ec fee7 	bl	80002d8 <__aeabi_dsub>
 801350a:	2200      	movs	r2, #0
 801350c:	4606      	mov	r6, r0
 801350e:	460f      	mov	r7, r1
 8013510:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013514:	4620      	mov	r0, r4
 8013516:	4629      	mov	r1, r5
 8013518:	f7ec fee0 	bl	80002dc <__adddf3>
 801351c:	4602      	mov	r2, r0
 801351e:	460b      	mov	r3, r1
 8013520:	4630      	mov	r0, r6
 8013522:	4639      	mov	r1, r7
 8013524:	f7ed f9ba 	bl	800089c <__aeabi_ddiv>
 8013528:	f04f 0a00 	mov.w	sl, #0
 801352c:	4604      	mov	r4, r0
 801352e:	460d      	mov	r5, r1
 8013530:	4622      	mov	r2, r4
 8013532:	462b      	mov	r3, r5
 8013534:	4620      	mov	r0, r4
 8013536:	4629      	mov	r1, r5
 8013538:	f7ed f886 	bl	8000648 <__aeabi_dmul>
 801353c:	4602      	mov	r2, r0
 801353e:	460b      	mov	r3, r1
 8013540:	4680      	mov	r8, r0
 8013542:	4689      	mov	r9, r1
 8013544:	f7ed f880 	bl	8000648 <__aeabi_dmul>
 8013548:	a371      	add	r3, pc, #452	@ (adr r3, 8013710 <atan+0x2a8>)
 801354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801354e:	4606      	mov	r6, r0
 8013550:	460f      	mov	r7, r1
 8013552:	f7ed f879 	bl	8000648 <__aeabi_dmul>
 8013556:	a370      	add	r3, pc, #448	@ (adr r3, 8013718 <atan+0x2b0>)
 8013558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801355c:	f7ec febe 	bl	80002dc <__adddf3>
 8013560:	4632      	mov	r2, r6
 8013562:	463b      	mov	r3, r7
 8013564:	f7ed f870 	bl	8000648 <__aeabi_dmul>
 8013568:	a36d      	add	r3, pc, #436	@ (adr r3, 8013720 <atan+0x2b8>)
 801356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801356e:	f7ec feb5 	bl	80002dc <__adddf3>
 8013572:	4632      	mov	r2, r6
 8013574:	463b      	mov	r3, r7
 8013576:	f7ed f867 	bl	8000648 <__aeabi_dmul>
 801357a:	a36b      	add	r3, pc, #428	@ (adr r3, 8013728 <atan+0x2c0>)
 801357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013580:	f7ec feac 	bl	80002dc <__adddf3>
 8013584:	4632      	mov	r2, r6
 8013586:	463b      	mov	r3, r7
 8013588:	f7ed f85e 	bl	8000648 <__aeabi_dmul>
 801358c:	a368      	add	r3, pc, #416	@ (adr r3, 8013730 <atan+0x2c8>)
 801358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013592:	f7ec fea3 	bl	80002dc <__adddf3>
 8013596:	4632      	mov	r2, r6
 8013598:	463b      	mov	r3, r7
 801359a:	f7ed f855 	bl	8000648 <__aeabi_dmul>
 801359e:	a366      	add	r3, pc, #408	@ (adr r3, 8013738 <atan+0x2d0>)
 80135a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135a4:	f7ec fe9a 	bl	80002dc <__adddf3>
 80135a8:	4642      	mov	r2, r8
 80135aa:	464b      	mov	r3, r9
 80135ac:	f7ed f84c 	bl	8000648 <__aeabi_dmul>
 80135b0:	a363      	add	r3, pc, #396	@ (adr r3, 8013740 <atan+0x2d8>)
 80135b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135b6:	4680      	mov	r8, r0
 80135b8:	4689      	mov	r9, r1
 80135ba:	4630      	mov	r0, r6
 80135bc:	4639      	mov	r1, r7
 80135be:	f7ed f843 	bl	8000648 <__aeabi_dmul>
 80135c2:	a361      	add	r3, pc, #388	@ (adr r3, 8013748 <atan+0x2e0>)
 80135c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c8:	f7ec fe86 	bl	80002d8 <__aeabi_dsub>
 80135cc:	4632      	mov	r2, r6
 80135ce:	463b      	mov	r3, r7
 80135d0:	f7ed f83a 	bl	8000648 <__aeabi_dmul>
 80135d4:	a35e      	add	r3, pc, #376	@ (adr r3, 8013750 <atan+0x2e8>)
 80135d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135da:	f7ec fe7d 	bl	80002d8 <__aeabi_dsub>
 80135de:	4632      	mov	r2, r6
 80135e0:	463b      	mov	r3, r7
 80135e2:	f7ed f831 	bl	8000648 <__aeabi_dmul>
 80135e6:	a35c      	add	r3, pc, #368	@ (adr r3, 8013758 <atan+0x2f0>)
 80135e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ec:	f7ec fe74 	bl	80002d8 <__aeabi_dsub>
 80135f0:	4632      	mov	r2, r6
 80135f2:	463b      	mov	r3, r7
 80135f4:	f7ed f828 	bl	8000648 <__aeabi_dmul>
 80135f8:	a359      	add	r3, pc, #356	@ (adr r3, 8013760 <atan+0x2f8>)
 80135fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135fe:	f7ec fe6b 	bl	80002d8 <__aeabi_dsub>
 8013602:	4632      	mov	r2, r6
 8013604:	463b      	mov	r3, r7
 8013606:	f7ed f81f 	bl	8000648 <__aeabi_dmul>
 801360a:	4602      	mov	r2, r0
 801360c:	460b      	mov	r3, r1
 801360e:	4640      	mov	r0, r8
 8013610:	4649      	mov	r1, r9
 8013612:	f7ec fe63 	bl	80002dc <__adddf3>
 8013616:	4622      	mov	r2, r4
 8013618:	462b      	mov	r3, r5
 801361a:	f7ed f815 	bl	8000648 <__aeabi_dmul>
 801361e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013622:	4602      	mov	r2, r0
 8013624:	460b      	mov	r3, r1
 8013626:	d148      	bne.n	80136ba <atan+0x252>
 8013628:	4620      	mov	r0, r4
 801362a:	4629      	mov	r1, r5
 801362c:	f7ec fe54 	bl	80002d8 <__aeabi_dsub>
 8013630:	e72f      	b.n	8013492 <atan+0x2a>
 8013632:	4b52      	ldr	r3, [pc, #328]	@ (801377c <atan+0x314>)
 8013634:	2200      	movs	r2, #0
 8013636:	4620      	mov	r0, r4
 8013638:	4629      	mov	r1, r5
 801363a:	f7ec fe4d 	bl	80002d8 <__aeabi_dsub>
 801363e:	4b4f      	ldr	r3, [pc, #316]	@ (801377c <atan+0x314>)
 8013640:	4606      	mov	r6, r0
 8013642:	460f      	mov	r7, r1
 8013644:	2200      	movs	r2, #0
 8013646:	4620      	mov	r0, r4
 8013648:	4629      	mov	r1, r5
 801364a:	f7ec fe47 	bl	80002dc <__adddf3>
 801364e:	4602      	mov	r2, r0
 8013650:	460b      	mov	r3, r1
 8013652:	4630      	mov	r0, r6
 8013654:	4639      	mov	r1, r7
 8013656:	f7ed f921 	bl	800089c <__aeabi_ddiv>
 801365a:	f04f 0a01 	mov.w	sl, #1
 801365e:	4604      	mov	r4, r0
 8013660:	460d      	mov	r5, r1
 8013662:	e765      	b.n	8013530 <atan+0xc8>
 8013664:	4b47      	ldr	r3, [pc, #284]	@ (8013784 <atan+0x31c>)
 8013666:	429e      	cmp	r6, r3
 8013668:	d21c      	bcs.n	80136a4 <atan+0x23c>
 801366a:	4b47      	ldr	r3, [pc, #284]	@ (8013788 <atan+0x320>)
 801366c:	2200      	movs	r2, #0
 801366e:	4620      	mov	r0, r4
 8013670:	4629      	mov	r1, r5
 8013672:	f7ec fe31 	bl	80002d8 <__aeabi_dsub>
 8013676:	4b44      	ldr	r3, [pc, #272]	@ (8013788 <atan+0x320>)
 8013678:	4606      	mov	r6, r0
 801367a:	460f      	mov	r7, r1
 801367c:	2200      	movs	r2, #0
 801367e:	4620      	mov	r0, r4
 8013680:	4629      	mov	r1, r5
 8013682:	f7ec ffe1 	bl	8000648 <__aeabi_dmul>
 8013686:	4b3d      	ldr	r3, [pc, #244]	@ (801377c <atan+0x314>)
 8013688:	2200      	movs	r2, #0
 801368a:	f7ec fe27 	bl	80002dc <__adddf3>
 801368e:	4602      	mov	r2, r0
 8013690:	460b      	mov	r3, r1
 8013692:	4630      	mov	r0, r6
 8013694:	4639      	mov	r1, r7
 8013696:	f7ed f901 	bl	800089c <__aeabi_ddiv>
 801369a:	f04f 0a02 	mov.w	sl, #2
 801369e:	4604      	mov	r4, r0
 80136a0:	460d      	mov	r5, r1
 80136a2:	e745      	b.n	8013530 <atan+0xc8>
 80136a4:	4622      	mov	r2, r4
 80136a6:	462b      	mov	r3, r5
 80136a8:	4938      	ldr	r1, [pc, #224]	@ (801378c <atan+0x324>)
 80136aa:	2000      	movs	r0, #0
 80136ac:	f7ed f8f6 	bl	800089c <__aeabi_ddiv>
 80136b0:	f04f 0a03 	mov.w	sl, #3
 80136b4:	4604      	mov	r4, r0
 80136b6:	460d      	mov	r5, r1
 80136b8:	e73a      	b.n	8013530 <atan+0xc8>
 80136ba:	4b35      	ldr	r3, [pc, #212]	@ (8013790 <atan+0x328>)
 80136bc:	4e35      	ldr	r6, [pc, #212]	@ (8013794 <atan+0x32c>)
 80136be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80136c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136c6:	f7ec fe07 	bl	80002d8 <__aeabi_dsub>
 80136ca:	4622      	mov	r2, r4
 80136cc:	462b      	mov	r3, r5
 80136ce:	f7ec fe03 	bl	80002d8 <__aeabi_dsub>
 80136d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80136d6:	4602      	mov	r2, r0
 80136d8:	460b      	mov	r3, r1
 80136da:	e9d6 0100 	ldrd	r0, r1, [r6]
 80136de:	f7ec fdfb 	bl	80002d8 <__aeabi_dsub>
 80136e2:	f1bb 0f00 	cmp.w	fp, #0
 80136e6:	4604      	mov	r4, r0
 80136e8:	460d      	mov	r5, r1
 80136ea:	f6bf aedc 	bge.w	80134a6 <atan+0x3e>
 80136ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80136f2:	461d      	mov	r5, r3
 80136f4:	e6d7      	b.n	80134a6 <atan+0x3e>
 80136f6:	a51c      	add	r5, pc, #112	@ (adr r5, 8013768 <atan+0x300>)
 80136f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80136fc:	e6d3      	b.n	80134a6 <atan+0x3e>
 80136fe:	bf00      	nop
 8013700:	54442d18 	.word	0x54442d18
 8013704:	3ff921fb 	.word	0x3ff921fb
 8013708:	8800759c 	.word	0x8800759c
 801370c:	7e37e43c 	.word	0x7e37e43c
 8013710:	e322da11 	.word	0xe322da11
 8013714:	3f90ad3a 	.word	0x3f90ad3a
 8013718:	24760deb 	.word	0x24760deb
 801371c:	3fa97b4b 	.word	0x3fa97b4b
 8013720:	a0d03d51 	.word	0xa0d03d51
 8013724:	3fb10d66 	.word	0x3fb10d66
 8013728:	c54c206e 	.word	0xc54c206e
 801372c:	3fb745cd 	.word	0x3fb745cd
 8013730:	920083ff 	.word	0x920083ff
 8013734:	3fc24924 	.word	0x3fc24924
 8013738:	5555550d 	.word	0x5555550d
 801373c:	3fd55555 	.word	0x3fd55555
 8013740:	2c6a6c2f 	.word	0x2c6a6c2f
 8013744:	bfa2b444 	.word	0xbfa2b444
 8013748:	52defd9a 	.word	0x52defd9a
 801374c:	3fadde2d 	.word	0x3fadde2d
 8013750:	af749a6d 	.word	0xaf749a6d
 8013754:	3fb3b0f2 	.word	0x3fb3b0f2
 8013758:	fe231671 	.word	0xfe231671
 801375c:	3fbc71c6 	.word	0x3fbc71c6
 8013760:	9998ebc4 	.word	0x9998ebc4
 8013764:	3fc99999 	.word	0x3fc99999
 8013768:	54442d18 	.word	0x54442d18
 801376c:	bff921fb 	.word	0xbff921fb
 8013770:	440fffff 	.word	0x440fffff
 8013774:	7ff00000 	.word	0x7ff00000
 8013778:	3fdbffff 	.word	0x3fdbffff
 801377c:	3ff00000 	.word	0x3ff00000
 8013780:	3ff2ffff 	.word	0x3ff2ffff
 8013784:	40038000 	.word	0x40038000
 8013788:	3ff80000 	.word	0x3ff80000
 801378c:	bff00000 	.word	0xbff00000
 8013790:	08013dc0 	.word	0x08013dc0
 8013794:	08013de0 	.word	0x08013de0

08013798 <_init>:
 8013798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801379a:	bf00      	nop
 801379c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801379e:	bc08      	pop	{r3}
 80137a0:	469e      	mov	lr, r3
 80137a2:	4770      	bx	lr

080137a4 <_fini>:
 80137a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137a6:	bf00      	nop
 80137a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137aa:	bc08      	pop	{r3}
 80137ac:	469e      	mov	lr, r3
 80137ae:	4770      	bx	lr
