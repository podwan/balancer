
motorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000141d8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  080143b8  080143b8  000153b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014a10  08014a10  000162a0  2**0
                  CONTENTS
  4 .ARM          00000008  08014a10  08014a10  00015a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014a18  08014a18  000162a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014a18  08014a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014a1c  08014a1c  00015a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002a0  20000000  08014a20  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c04  200002a0  08014cc0  000162a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ea4  08014cc0  00016ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000162a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000267e3  00000000  00000000  000162d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005da8  00000000  00000000  0003cab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e48  00000000  00000000  00042860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000170c  00000000  00000000  000446a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028521  00000000  00000000  00045db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c72a  00000000  00000000  0006e2d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9b58  00000000  00000000  0009a9ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00184557  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092ac  00000000  00000000  0018459c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0018d848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002a0 	.word	0x200002a0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080143a0 	.word	0x080143a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002a4 	.word	0x200002a4
 800021c:	080143a0 	.word	0x080143a0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00f fcfa 	bl	8010a48 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	223c      	movs	r2, #60	@ 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00f fcf4 	bl	8010a48 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b56      	ldr	r3, [pc, #344]	@ (80011bc <MX_ADC1_Init+0x188>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001068:	4b54      	ldr	r3, [pc, #336]	@ (80011bc <MX_ADC1_Init+0x188>)
 800106a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b52      	ldr	r3, [pc, #328]	@ (80011bc <MX_ADC1_Init+0x188>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b51      	ldr	r3, [pc, #324]	@ (80011bc <MX_ADC1_Init+0x188>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107c:	4b4f      	ldr	r3, [pc, #316]	@ (80011bc <MX_ADC1_Init+0x188>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001082:	4b4e      	ldr	r3, [pc, #312]	@ (80011bc <MX_ADC1_Init+0x188>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b4c      	ldr	r3, [pc, #304]	@ (80011bc <MX_ADC1_Init+0x188>)
 800108a:	2204      	movs	r2, #4
 800108c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b4b      	ldr	r3, [pc, #300]	@ (80011bc <MX_ADC1_Init+0x188>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b49      	ldr	r3, [pc, #292]	@ (80011bc <MX_ADC1_Init+0x188>)
 8001096:	2200      	movs	r2, #0
 8001098:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109a:	4b48      	ldr	r3, [pc, #288]	@ (80011bc <MX_ADC1_Init+0x188>)
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b46      	ldr	r3, [pc, #280]	@ (80011bc <MX_ADC1_Init+0x188>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b44      	ldr	r3, [pc, #272]	@ (80011bc <MX_ADC1_Init+0x188>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b43      	ldr	r3, [pc, #268]	@ (80011bc <MX_ADC1_Init+0x188>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b41      	ldr	r3, [pc, #260]	@ (80011bc <MX_ADC1_Init+0x188>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b3f      	ldr	r3, [pc, #252]	@ (80011bc <MX_ADC1_Init+0x188>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c2:	4b3e      	ldr	r3, [pc, #248]	@ (80011bc <MX_ADC1_Init+0x188>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ca:	483c      	ldr	r0, [pc, #240]	@ (80011bc <MX_ADC1_Init+0x188>)
 80010cc:	f001 ffe0 	bl	8003090 <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fcc6 	bl	8001a66 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e2:	4619      	mov	r1, r3
 80010e4:	4835      	ldr	r0, [pc, #212]	@ (80011bc <MX_ADC1_Init+0x188>)
 80010e6:	f004 f909 	bl	80052fc <HAL_ADCEx_MultiModeConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f000 fcb9 	bl	8001a66 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010f4:	4b32      	ldr	r3, [pc, #200]	@ (80011c0 <MX_ADC1_Init+0x18c>)
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001110:	4619      	mov	r1, r3
 8001112:	482a      	ldr	r0, [pc, #168]	@ (80011bc <MX_ADC1_Init+0x188>)
 8001114:	f002 fb78 	bl	8003808 <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800111e:	f000 fca2 	bl	8001a66 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001122:	4b28      	ldr	r3, [pc, #160]	@ (80011c4 <MX_ADC1_Init+0x190>)
 8001124:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001126:	2309      	movs	r3, #9
 8001128:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800112a:	2301      	movs	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 800113a:	2303      	movs	r3, #3
 800113c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T8_CC4;
 8001150:	239c      	movs	r3, #156	@ 0x9c
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	4816      	ldr	r0, [pc, #88]	@ (80011bc <MX_ADC1_Init+0x188>)
 8001164:	f003 fbea 	bl	800493c <HAL_ADCEx_InjectedConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800116e:	f000 fc7a 	bl	8001a66 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 8001172:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <MX_ADC1_Init+0x194>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001176:	f240 130f 	movw	r3, #271	@ 0x10f
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	480e      	ldr	r0, [pc, #56]	@ (80011bc <MX_ADC1_Init+0x188>)
 8001182:	f003 fbdb 	bl	800493c <HAL_ADCEx_InjectedConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800118c:	f000 fc6b 	bl	8001a66 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001190:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <MX_ADC1_Init+0x198>)
 8001192:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001194:	f240 2315 	movw	r3, #533	@ 0x215
 8001198:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800119e:	463b      	mov	r3, r7
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	@ (80011bc <MX_ADC1_Init+0x188>)
 80011a4:	f003 fbca 	bl	800493c <HAL_ADCEx_InjectedConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 80011ae:	f000 fc5a 	bl	8001a66 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	3768      	adds	r7, #104	@ 0x68
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200002bc 	.word	0x200002bc
 80011c0:	08600004 	.word	0x08600004
 80011c4:	2e300800 	.word	0x2e300800
 80011c8:	3ef08000 	.word	0x3ef08000
 80011cc:	32601000 	.word	0x32601000

080011d0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b090      	sub	sp, #64	@ 0x40
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	223c      	movs	r2, #60	@ 0x3c
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f00f fc33 	bl	8010a48 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011e2:	4b31      	ldr	r3, [pc, #196]	@ (80012a8 <MX_ADC2_Init+0xd8>)
 80011e4:	4a31      	ldr	r2, [pc, #196]	@ (80012ac <MX_ADC2_Init+0xdc>)
 80011e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011e8:	4b2f      	ldr	r3, [pc, #188]	@ (80012a8 <MX_ADC2_Init+0xd8>)
 80011ea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011f0:	4b2d      	ldr	r3, [pc, #180]	@ (80012a8 <MX_ADC2_Init+0xd8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f6:	4b2c      	ldr	r3, [pc, #176]	@ (80012a8 <MX_ADC2_Init+0xd8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011fc:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <MX_ADC2_Init+0xd8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001202:	4b29      	ldr	r3, [pc, #164]	@ (80012a8 <MX_ADC2_Init+0xd8>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001208:	4b27      	ldr	r3, [pc, #156]	@ (80012a8 <MX_ADC2_Init+0xd8>)
 800120a:	2204      	movs	r2, #4
 800120c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800120e:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <MX_ADC2_Init+0xd8>)
 8001210:	2200      	movs	r2, #0
 8001212:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001214:	4b24      	ldr	r3, [pc, #144]	@ (80012a8 <MX_ADC2_Init+0xd8>)
 8001216:	2200      	movs	r2, #0
 8001218:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800121a:	4b23      	ldr	r3, [pc, #140]	@ (80012a8 <MX_ADC2_Init+0xd8>)
 800121c:	2201      	movs	r2, #1
 800121e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001220:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <MX_ADC2_Init+0xd8>)
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001228:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <MX_ADC2_Init+0xd8>)
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001230:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <MX_ADC2_Init+0xd8>)
 8001232:	2200      	movs	r2, #0
 8001234:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <MX_ADC2_Init+0xd8>)
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800123e:	481a      	ldr	r0, [pc, #104]	@ (80012a8 <MX_ADC2_Init+0xd8>)
 8001240:	f001 ff26 	bl	8003090 <HAL_ADC_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800124a:	f000 fc0c 	bl	8001a66 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 800124e:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <MX_ADC2_Init+0xe0>)
 8001250:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001252:	2309      	movs	r3, #9
 8001254:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001256:	2301      	movs	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800125a:	237f      	movs	r3, #127	@ 0x7f
 800125c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800125e:	2304      	movs	r3, #4
 8001260:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001266:	2301      	movs	r3, #1
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 800127c:	2384      	movs	r3, #132	@ 0x84
 800127e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001280:	2380      	movs	r3, #128	@ 0x80
 8001282:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	@ (80012a8 <MX_ADC2_Init+0xd8>)
 8001290:	f003 fb54 	bl	800493c <HAL_ADCEx_InjectedConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 800129a:	f000 fbe4 	bl	8001a66 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3740      	adds	r7, #64	@ 0x40
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000328 	.word	0x20000328
 80012ac:	50000100 	.word	0x50000100
 80012b0:	3ef08000 	.word	0x3ef08000

080012b4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b09e      	sub	sp, #120	@ 0x78
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012cc:	f107 0320 	add.w	r3, r7, #32
 80012d0:	2244      	movs	r2, #68	@ 0x44
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f00f fbb7 	bl	8010a48 <memset>
  if(adcHandle->Instance==ADC1)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012e2:	d15f      	bne.n	80013a4 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012e8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012ea:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	4618      	mov	r0, r3
 80012f6:	f006 f917 	bl	8007528 <HAL_RCCEx_PeriphCLKConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001300:	f000 fbb1 	bl	8001a66 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001304:	4b4f      	ldr	r3, [pc, #316]	@ (8001444 <HAL_ADC_MspInit+0x190>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	3301      	adds	r3, #1
 800130a:	4a4e      	ldr	r2, [pc, #312]	@ (8001444 <HAL_ADC_MspInit+0x190>)
 800130c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800130e:	4b4d      	ldr	r3, [pc, #308]	@ (8001444 <HAL_ADC_MspInit+0x190>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d10b      	bne.n	800132e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001316:	4b4c      	ldr	r3, [pc, #304]	@ (8001448 <HAL_ADC_MspInit+0x194>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	4a4b      	ldr	r2, [pc, #300]	@ (8001448 <HAL_ADC_MspInit+0x194>)
 800131c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001322:	4b49      	ldr	r3, [pc, #292]	@ (8001448 <HAL_ADC_MspInit+0x194>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	4b46      	ldr	r3, [pc, #280]	@ (8001448 <HAL_ADC_MspInit+0x194>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	4a45      	ldr	r2, [pc, #276]	@ (8001448 <HAL_ADC_MspInit+0x194>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133a:	4b43      	ldr	r3, [pc, #268]	@ (8001448 <HAL_ADC_MspInit+0x194>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	61bb      	str	r3, [r7, #24]
 8001344:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	4b40      	ldr	r3, [pc, #256]	@ (8001448 <HAL_ADC_MspInit+0x194>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	4a3f      	ldr	r2, [pc, #252]	@ (8001448 <HAL_ADC_MspInit+0x194>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001352:	4b3d      	ldr	r3, [pc, #244]	@ (8001448 <HAL_ADC_MspInit+0x194>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697b      	ldr	r3, [r7, #20]
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800135e:	2302      	movs	r3, #2
 8001360:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001362:	2303      	movs	r3, #3
 8001364:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800136e:	4619      	mov	r1, r3
 8001370:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001374:	f005 f944 	bl	8006600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_14;
 8001378:	f245 0303 	movw	r3, #20483	@ 0x5003
 800137c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137e:	2303      	movs	r3, #3
 8001380:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001386:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800138a:	4619      	mov	r1, r3
 800138c:	482f      	ldr	r0, [pc, #188]	@ (800144c <HAL_ADC_MspInit+0x198>)
 800138e:	f005 f937 	bl	8006600 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	2012      	movs	r0, #18
 8001398:	f004 fb57 	bl	8005a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800139c:	2012      	movs	r0, #18
 800139e:	f004 fb6e 	bl	8005a7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80013a2:	e04a      	b.n	800143a <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a29      	ldr	r2, [pc, #164]	@ (8001450 <HAL_ADC_MspInit+0x19c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d145      	bne.n	800143a <HAL_ADC_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013b2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013b4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ba:	f107 0320 	add.w	r3, r7, #32
 80013be:	4618      	mov	r0, r3
 80013c0:	f006 f8b2 	bl	8007528 <HAL_RCCEx_PeriphCLKConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80013ca:	f000 fb4c 	bl	8001a66 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <HAL_ADC_MspInit+0x190>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001444 <HAL_ADC_MspInit+0x190>)
 80013d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <HAL_ADC_MspInit+0x190>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d10b      	bne.n	80013f8 <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013e0:	4b19      	ldr	r3, [pc, #100]	@ (8001448 <HAL_ADC_MspInit+0x194>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	4a18      	ldr	r2, [pc, #96]	@ (8001448 <HAL_ADC_MspInit+0x194>)
 80013e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ec:	4b16      	ldr	r3, [pc, #88]	@ (8001448 <HAL_ADC_MspInit+0x194>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f8:	4b13      	ldr	r3, [pc, #76]	@ (8001448 <HAL_ADC_MspInit+0x194>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fc:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <HAL_ADC_MspInit+0x194>)
 80013fe:	f043 0302 	orr.w	r3, r3, #2
 8001402:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001404:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <HAL_ADC_MspInit+0x194>)
 8001406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001410:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001414:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001416:	2303      	movs	r3, #3
 8001418:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001422:	4619      	mov	r1, r3
 8001424:	4809      	ldr	r0, [pc, #36]	@ (800144c <HAL_ADC_MspInit+0x198>)
 8001426:	f005 f8eb 	bl	8006600 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2012      	movs	r0, #18
 8001430:	f004 fb0b 	bl	8005a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001434:	2012      	movs	r0, #18
 8001436:	f004 fb22 	bl	8005a7e <HAL_NVIC_EnableIRQ>
}
 800143a:	bf00      	nop
 800143c:	3778      	adds	r7, #120	@ 0x78
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000394 	.word	0x20000394
 8001448:	40021000 	.word	0x40021000
 800144c:	48000400 	.word	0x48000400
 8001450:	50000100 	.word	0x50000100

08001454 <MX_COMP1_Init>:
COMP_HandleTypeDef hcomp1;
COMP_HandleTypeDef hcomp4;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <MX_COMP1_Init+0x44>)
 800145a:	4a10      	ldr	r2, [pc, #64]	@ (800149c <MX_COMP1_Init+0x48>)
 800145c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <MX_COMP1_Init+0x44>)
 8001460:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001464:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8001466:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <MX_COMP1_Init+0x44>)
 8001468:	2240      	movs	r2, #64	@ 0x40
 800146a:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800146c:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <MX_COMP1_Init+0x44>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001472:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <MX_COMP1_Init+0x44>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001478:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <MX_COMP1_Init+0x44>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 800147e:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <MX_COMP1_Init+0x44>)
 8001480:	2211      	movs	r2, #17
 8001482:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001484:	4804      	ldr	r0, [pc, #16]	@ (8001498 <MX_COMP1_Init+0x44>)
 8001486:	f004 f89b 	bl	80055c0 <HAL_COMP_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8001490:	f000 fae9 	bl	8001a66 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000398 	.word	0x20000398
 800149c:	40010200 	.word	0x40010200

080014a0 <MX_COMP4_Init>:
/* COMP4 init function */
void MX_COMP4_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <MX_COMP4_Init+0x44>)
 80014a6:	4a10      	ldr	r2, [pc, #64]	@ (80014e8 <MX_COMP4_Init+0x48>)
 80014a8:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <MX_COMP4_Init+0x44>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	605a      	str	r2, [r3, #4]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <MX_COMP4_Init+0x44>)
 80014b2:	2240      	movs	r2, #64	@ 0x40
 80014b4:	609a      	str	r2, [r3, #8]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <MX_COMP4_Init+0x44>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80014bc:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_COMP4_Init+0x44>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <MX_COMP4_Init+0x44>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	615a      	str	r2, [r3, #20]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_COMP4_Init+0x44>)
 80014ca:	2211      	movs	r2, #17
 80014cc:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <MX_COMP4_Init+0x44>)
 80014d0:	f004 f876 	bl	80055c0 <HAL_COMP_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_COMP4_Init+0x3e>
  {
    Error_Handler();
 80014da:	f000 fac4 	bl	8001a66 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200003bc 	.word	0x200003bc
 80014e8:	4001020c 	.word	0x4001020c

080014ec <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	@ 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a26      	ldr	r2, [pc, #152]	@ (80015a4 <HAL_COMP_MspInit+0xb8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d120      	bne.n	8001550 <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4b26      	ldr	r3, [pc, #152]	@ (80015a8 <HAL_COMP_MspInit+0xbc>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	4a25      	ldr	r2, [pc, #148]	@ (80015a8 <HAL_COMP_MspInit+0xbc>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800151a:	4b23      	ldr	r3, [pc, #140]	@ (80015a8 <HAL_COMP_MspInit+0xbc>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001526:	2302      	movs	r3, #2
 8001528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152a:	2303      	movs	r3, #3
 800152c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	481c      	ldr	r0, [pc, #112]	@ (80015ac <HAL_COMP_MspInit+0xc0>)
 800153a:	f005 f861 	bl	8006600 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	2040      	movs	r0, #64	@ 0x40
 8001544:	f004 fa81 	bl	8005a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8001548:	2040      	movs	r0, #64	@ 0x40
 800154a:	f004 fa98 	bl	8005a7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(COMP4_IRQn);
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }
}
 800154e:	e024      	b.n	800159a <HAL_COMP_MspInit+0xae>
  else if(compHandle->Instance==COMP4)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a16      	ldr	r2, [pc, #88]	@ (80015b0 <HAL_COMP_MspInit+0xc4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d11f      	bne.n	800159a <HAL_COMP_MspInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <HAL_COMP_MspInit+0xbc>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	4a12      	ldr	r2, [pc, #72]	@ (80015a8 <HAL_COMP_MspInit+0xbc>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <HAL_COMP_MspInit+0xbc>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001572:	2301      	movs	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001576:	2303      	movs	r3, #3
 8001578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	4809      	ldr	r0, [pc, #36]	@ (80015ac <HAL_COMP_MspInit+0xc0>)
 8001586:	f005 f83b 	bl	8006600 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP4_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	2041      	movs	r0, #65	@ 0x41
 8001590:	f004 fa5b 	bl	8005a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP4_IRQn);
 8001594:	2041      	movs	r0, #65	@ 0x41
 8001596:	f004 fa72 	bl	8005a7e <HAL_NVIC_EnableIRQ>
}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	@ 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40010200 	.word	0x40010200
 80015a8:	40021000 	.word	0x40021000
 80015ac:	48000400 	.word	0x48000400
 80015b0:	4001020c 	.word	0x4001020c

080015b4 <MX_DAC3_Init>:

DAC_HandleTypeDef hdac3;

/* DAC3 init function */
void MX_DAC3_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08c      	sub	sp, #48	@ 0x30
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015ba:	463b      	mov	r3, r7
 80015bc:	2230      	movs	r2, #48	@ 0x30
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f00f fa41 	bl	8010a48 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 80015c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <MX_DAC3_Init+0x80>)
 80015c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001638 <MX_DAC3_Init+0x84>)
 80015ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 80015cc:	4819      	ldr	r0, [pc, #100]	@ (8001634 <MX_DAC3_Init+0x80>)
 80015ce:	f004 fa70 	bl	8005ab2 <HAL_DAC_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 80015d8:	f000 fa45 	bl	8001a66 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80015dc:	2302      	movs	r3, #2
 80015de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80015f4:	2302      	movs	r3, #2
 80015f6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001600:	463b      	mov	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	4619      	mov	r1, r3
 8001606:	480b      	ldr	r0, [pc, #44]	@ (8001634 <MX_DAC3_Init+0x80>)
 8001608:	f004 fb10 	bl	8005c2c <HAL_DAC_ConfigChannel>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8001612:	f000 fa28 	bl	8001a66 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001616:	463b      	mov	r3, r7
 8001618:	2210      	movs	r2, #16
 800161a:	4619      	mov	r1, r3
 800161c:	4805      	ldr	r0, [pc, #20]	@ (8001634 <MX_DAC3_Init+0x80>)
 800161e:	f004 fb05 	bl	8005c2c <HAL_DAC_ConfigChannel>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8001628:	f000 fa1d 	bl	8001a66 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	3730      	adds	r7, #48	@ 0x30
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200003e0 	.word	0x200003e0
 8001638:	50001000 	.word	0x50001000

0800163c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC3)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <HAL_DAC_MspInit+0x38>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d10b      	bne.n	8001666 <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* DAC3 clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 800164e:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <HAL_DAC_MspInit+0x3c>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001652:	4a09      	ldr	r2, [pc, #36]	@ (8001678 <HAL_DAC_MspInit+0x3c>)
 8001654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165a:	4b07      	ldr	r3, [pc, #28]	@ (8001678 <HAL_DAC_MspInit+0x3c>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	50001000 	.word	0x50001000
 8001678:	40021000 	.word	0x40021000

0800167c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001682:	4b22      	ldr	r3, [pc, #136]	@ (800170c <MX_DMA_Init+0x90>)
 8001684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001686:	4a21      	ldr	r2, [pc, #132]	@ (800170c <MX_DMA_Init+0x90>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	6493      	str	r3, [r2, #72]	@ 0x48
 800168e:	4b1f      	ldr	r3, [pc, #124]	@ (800170c <MX_DMA_Init+0x90>)
 8001690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800169a:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <MX_DMA_Init+0x90>)
 800169c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800169e:	4a1b      	ldr	r2, [pc, #108]	@ (800170c <MX_DMA_Init+0x90>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80016a6:	4b19      	ldr	r3, [pc, #100]	@ (800170c <MX_DMA_Init+0x90>)
 80016a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2101      	movs	r1, #1
 80016b6:	200b      	movs	r0, #11
 80016b8:	f004 f9c7 	bl	8005a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016bc:	200b      	movs	r0, #11
 80016be:	f004 f9de 	bl	8005a7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2101      	movs	r1, #1
 80016c6:	200c      	movs	r0, #12
 80016c8:	f004 f9bf 	bl	8005a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016cc:	200c      	movs	r0, #12
 80016ce:	f004 f9d6 	bl	8005a7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	200d      	movs	r0, #13
 80016d8:	f004 f9b7 	bl	8005a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016dc:	200d      	movs	r0, #13
 80016de:	f004 f9ce 	bl	8005a7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	200e      	movs	r0, #14
 80016e8:	f004 f9af 	bl	8005a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80016ec:	200e      	movs	r0, #14
 80016ee:	f004 f9c6 	bl	8005a7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	200f      	movs	r0, #15
 80016f8:	f004 f9a7 	bl	8005a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80016fc:	200f      	movs	r0, #15
 80016fe:	f004 f9be 	bl	8005a7e <HAL_NVIC_EnableIRQ>

}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000

08001710 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	@ 0x28
 8001714:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	4b4d      	ldr	r3, [pc, #308]	@ (800185c <MX_GPIO_Init+0x14c>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172a:	4a4c      	ldr	r2, [pc, #304]	@ (800185c <MX_GPIO_Init+0x14c>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001732:	4b4a      	ldr	r3, [pc, #296]	@ (800185c <MX_GPIO_Init+0x14c>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800173e:	4b47      	ldr	r3, [pc, #284]	@ (800185c <MX_GPIO_Init+0x14c>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	4a46      	ldr	r2, [pc, #280]	@ (800185c <MX_GPIO_Init+0x14c>)
 8001744:	f043 0320 	orr.w	r3, r3, #32
 8001748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174a:	4b44      	ldr	r3, [pc, #272]	@ (800185c <MX_GPIO_Init+0x14c>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174e:	f003 0320 	and.w	r3, r3, #32
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	4b41      	ldr	r3, [pc, #260]	@ (800185c <MX_GPIO_Init+0x14c>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	4a40      	ldr	r2, [pc, #256]	@ (800185c <MX_GPIO_Init+0x14c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001762:	4b3e      	ldr	r3, [pc, #248]	@ (800185c <MX_GPIO_Init+0x14c>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	4b3b      	ldr	r3, [pc, #236]	@ (800185c <MX_GPIO_Init+0x14c>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001772:	4a3a      	ldr	r2, [pc, #232]	@ (800185c <MX_GPIO_Init+0x14c>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800177a:	4b38      	ldr	r3, [pc, #224]	@ (800185c <MX_GPIO_Init+0x14c>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|TEST_Pin, GPIO_PIN_SET);
 8001786:	2201      	movs	r2, #1
 8001788:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 800178c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001790:	f005 f8d0 	bl	8006934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS2_GPIO_Port, NSS2_Pin, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	2110      	movs	r1, #16
 8001798:	4831      	ldr	r0, [pc, #196]	@ (8001860 <MX_GPIO_Init+0x150>)
 800179a:	f005 f8cb 	bl	8006934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS1_GPIO_Port, NSS1_Pin, GPIO_PIN_SET);
 800179e:	2201      	movs	r2, #1
 80017a0:	2108      	movs	r1, #8
 80017a2:	4830      	ldr	r0, [pc, #192]	@ (8001864 <MX_GPIO_Init+0x154>)
 80017a4:	f005 f8c6 	bl	8006934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	4828      	ldr	r0, [pc, #160]	@ (8001860 <MX_GPIO_Init+0x150>)
 80017be:	f004 ff1f 	bl	8006600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80017c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017cc:	2301      	movs	r3, #1
 80017ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4619      	mov	r1, r3
 80017d6:	4822      	ldr	r0, [pc, #136]	@ (8001860 <MX_GPIO_Init+0x150>)
 80017d8:	f004 ff12 	bl	8006600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80017dc:	2310      	movs	r3, #16
 80017de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4619      	mov	r1, r3
 80017f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017f6:	f004 ff03 	bl	8006600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS2_Pin;
 80017fa:	2310      	movs	r3, #16
 80017fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fe:	2301      	movs	r3, #1
 8001800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS2_GPIO_Port, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	4813      	ldr	r0, [pc, #76]	@ (8001860 <MX_GPIO_Init+0x150>)
 8001812:	f004 fef5 	bl	8006600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001816:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800181a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181c:	2301      	movs	r3, #1
 800181e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001824:	2302      	movs	r3, #2
 8001826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001832:	f004 fee5 	bl	8006600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS1_Pin;
 8001836:	2308      	movs	r3, #8
 8001838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001842:	2302      	movs	r3, #2
 8001844:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS1_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	4805      	ldr	r0, [pc, #20]	@ (8001864 <MX_GPIO_Init+0x154>)
 800184e:	f004 fed7 	bl	8006600 <HAL_GPIO_Init>

}
 8001852:	bf00      	nop
 8001854:	3728      	adds	r7, #40	@ 0x28
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000
 8001860:	48000800 	.word	0x48000800
 8001864:	48000400 	.word	0x48000400

08001868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800186c:	f001 f92b 	bl	8002ac6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001870:	f000 f8b0 	bl	80019d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001874:	f7ff ff4c 	bl	8001710 <MX_GPIO_Init>
  MX_DMA_Init();
 8001878:	f7ff ff00 	bl	800167c <MX_DMA_Init>
  MX_USART3_UART_Init();
 800187c:	f000 ff4c 	bl	8002718 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001880:	f7ff fbd8 	bl	8001034 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001884:	f7ff fca4 	bl	80011d0 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001888:	f000 fb98 	bl	8001fbc <MX_TIM1_Init>
  MX_DAC3_Init();
 800188c:	f7ff fe92 	bl	80015b4 <MX_DAC3_Init>
  MX_SPI1_Init();
 8001890:	f000 f8f0 	bl	8001a74 <MX_SPI1_Init>
  MX_TIM8_Init();
 8001894:	f000 fcfc 	bl	8002290 <MX_TIM8_Init>
  MX_SPI3_Init();
 8001898:	f000 f92a 	bl	8001af0 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 800189c:	f000 fef0 	bl	8002680 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 80018a0:	f7ff fdd8 	bl	8001454 <MX_COMP1_Init>
  MX_COMP4_Init();
 80018a4:	f7ff fdfc 	bl	80014a0 <MX_COMP4_Init>
  MX_TIM2_Init();
 80018a8:	f000 fc7c 	bl	80021a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 80018ac:	f00b f9b2 	bl	800cc14 <appInit>
#if 1
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, sizeof(rxBuffer));
 80018b0:	2264      	movs	r2, #100	@ 0x64
 80018b2:	493c      	ldr	r1, [pc, #240]	@ (80019a4 <main+0x13c>)
 80018b4:	483c      	ldr	r0, [pc, #240]	@ (80019a8 <main+0x140>)
 80018b6:	f009 fc4c 	bl	800b152 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80018ba:	4b3c      	ldr	r3, [pc, #240]	@ (80019ac <main+0x144>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b3a      	ldr	r3, [pc, #232]	@ (80019ac <main+0x144>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0204 	bic.w	r2, r2, #4
 80018c8:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 80018ca:	2264      	movs	r2, #100	@ 0x64
 80018cc:	4935      	ldr	r1, [pc, #212]	@ (80019a4 <main+0x13c>)
 80018ce:	4838      	ldr	r0, [pc, #224]	@ (80019b0 <main+0x148>)
 80018d0:	f009 fc3f 	bl	800b152 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80018d4:	4b37      	ldr	r3, [pc, #220]	@ (80019b4 <main+0x14c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4b36      	ldr	r3, [pc, #216]	@ (80019b4 <main+0x14c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0204 	bic.w	r2, r2, #4
 80018e2:	601a      	str	r2, [r3, #0]
  // HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80018e4:	217f      	movs	r1, #127	@ 0x7f
 80018e6:	4834      	ldr	r0, [pc, #208]	@ (80019b8 <main+0x150>)
 80018e8:	f002 fe08 	bl	80044fc <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80018ec:	217f      	movs	r1, #127	@ 0x7f
 80018ee:	4833      	ldr	r0, [pc, #204]	@ (80019bc <main+0x154>)
 80018f0:	f002 fe04 	bl	80044fc <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 80018f4:	4b30      	ldr	r3, [pc, #192]	@ (80019b8 <main+0x150>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2220      	movs	r2, #32
 80018fa:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 80018fc:	4b2e      	ldr	r3, [pc, #184]	@ (80019b8 <main+0x150>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2204      	movs	r2, #4
 8001902:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 8001904:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <main+0x154>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2220      	movs	r2, #32
 800190a:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 800190c:	482a      	ldr	r0, [pc, #168]	@ (80019b8 <main+0x150>)
 800190e:	f002 ff07 	bl	8004720 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 8001912:	482a      	ldr	r0, [pc, #168]	@ (80019bc <main+0x154>)
 8001914:	f002 fe54 	bl	80045c0 <HAL_ADCEx_InjectedStart>

  HAL_DAC_Start(&hdac3, DAC_CHANNEL_1);
 8001918:	2100      	movs	r1, #0
 800191a:	4829      	ldr	r0, [pc, #164]	@ (80019c0 <main+0x158>)
 800191c:	f004 f8ec 	bl	8005af8 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 3000);
 8001920:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	4825      	ldr	r0, [pc, #148]	@ (80019c0 <main+0x158>)
 800192a:	f004 f951 	bl	8005bd0 <HAL_DAC_SetValue>
  HAL_COMP_Start(&hcomp1);
 800192e:	4825      	ldr	r0, [pc, #148]	@ (80019c4 <main+0x15c>)
 8001930:	f003 ff22 	bl	8005778 <HAL_COMP_Start>


  HAL_DAC_Start(&hdac3, DAC_CHANNEL_2);
 8001934:	2110      	movs	r1, #16
 8001936:	4822      	ldr	r0, [pc, #136]	@ (80019c0 <main+0x158>)
 8001938:	f004 f8de 	bl	8005af8 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 3000);
 800193c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001940:	2200      	movs	r2, #0
 8001942:	2110      	movs	r1, #16
 8001944:	481e      	ldr	r0, [pc, #120]	@ (80019c0 <main+0x158>)
 8001946:	f004 f943 	bl	8005bd0 <HAL_DAC_SetValue>
  HAL_COMP_Start(&hcomp4);
 800194a:	481f      	ldr	r0, [pc, #124]	@ (80019c8 <main+0x160>)
 800194c:	f003 ff14 	bl	8005778 <HAL_COMP_Start>


  HAL_TIM_Base_Start(&htim8);
 8001950:	481e      	ldr	r0, [pc, #120]	@ (80019cc <main+0x164>)
 8001952:	f006 fc71 	bl	8008238 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001956:	210c      	movs	r1, #12
 8001958:	481c      	ldr	r0, [pc, #112]	@ (80019cc <main+0x164>)
 800195a:	f006 fd31 	bl	80083c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800195e:	2100      	movs	r1, #0
 8001960:	481a      	ldr	r0, [pc, #104]	@ (80019cc <main+0x164>)
 8001962:	f006 fd2d 	bl	80083c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001966:	2104      	movs	r1, #4
 8001968:	4818      	ldr	r0, [pc, #96]	@ (80019cc <main+0x164>)
 800196a:	f006 fd29 	bl	80083c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800196e:	2108      	movs	r1, #8
 8001970:	4816      	ldr	r0, [pc, #88]	@ (80019cc <main+0x164>)
 8001972:	f006 fd25 	bl	80083c0 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1);
 8001976:	4816      	ldr	r0, [pc, #88]	@ (80019d0 <main+0x168>)
 8001978:	f006 fc5e 	bl	8008238 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800197c:	210c      	movs	r1, #12
 800197e:	4814      	ldr	r0, [pc, #80]	@ (80019d0 <main+0x168>)
 8001980:	f006 fd1e 	bl	80083c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001984:	2100      	movs	r1, #0
 8001986:	4812      	ldr	r0, [pc, #72]	@ (80019d0 <main+0x168>)
 8001988:	f006 fd1a 	bl	80083c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800198c:	2104      	movs	r1, #4
 800198e:	4810      	ldr	r0, [pc, #64]	@ (80019d0 <main+0x168>)
 8001990:	f006 fd16 	bl	80083c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001994:	2108      	movs	r1, #8
 8001996:	480e      	ldr	r0, [pc, #56]	@ (80019d0 <main+0x168>)
 8001998:	f006 fd12 	bl	80083c0 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
 800199c:	f00d f940 	bl	800ec20 <userMain>
 80019a0:	e7fc      	b.n	800199c <main+0x134>
 80019a2:	bf00      	nop
 80019a4:	20000bec 	.word	0x20000bec
 80019a8:	20000604 	.word	0x20000604
 80019ac:	2000072c 	.word	0x2000072c
 80019b0:	20000698 	.word	0x20000698
 80019b4:	2000084c 	.word	0x2000084c
 80019b8:	200002bc 	.word	0x200002bc
 80019bc:	20000328 	.word	0x20000328
 80019c0:	200003e0 	.word	0x200003e0
 80019c4:	20000398 	.word	0x20000398
 80019c8:	200003bc 	.word	0x200003bc
 80019cc:	20000558 	.word	0x20000558
 80019d0:	200004c0 	.word	0x200004c0

080019d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b094      	sub	sp, #80	@ 0x50
 80019d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019da:	f107 0318 	add.w	r3, r7, #24
 80019de:	2238      	movs	r2, #56	@ 0x38
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f00f f830 	bl	8010a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
 80019f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f004 ffb4 	bl	8006964 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019fc:	2301      	movs	r3, #1
 80019fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a04:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a06:	2302      	movs	r3, #2
 8001a08:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001a12:	2328      	movs	r3, #40	@ 0x28
 8001a14:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a16:	2302      	movs	r3, #2
 8001a18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a22:	f107 0318 	add.w	r3, r7, #24
 8001a26:	4618      	mov	r0, r3
 8001a28:	f005 f850 	bl	8006acc <HAL_RCC_OscConfig>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001a32:	f000 f818 	bl	8001a66 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a36:	230f      	movs	r3, #15
 8001a38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2104      	movs	r1, #4
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f005 fb4e 	bl	80070f0 <HAL_RCC_ClockConfig>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001a5a:	f000 f804 	bl	8001a66 <Error_Handler>
  }
}
 8001a5e:	bf00      	nop
 8001a60:	3750      	adds	r7, #80	@ 0x50
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6a:	b672      	cpsid	i
}
 8001a6c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a6e:	bf00      	nop
 8001a70:	e7fd      	b.n	8001a6e <Error_Handler+0x8>
	...

08001a74 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae8 <MX_SPI1_Init+0x74>)
 8001a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001aec <MX_SPI1_Init+0x78>)
 8001a7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae8 <MX_SPI1_Init+0x74>)
 8001a80:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a86:	4b18      	ldr	r3, [pc, #96]	@ (8001ae8 <MX_SPI1_Init+0x74>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <MX_SPI1_Init+0x74>)
 8001a8e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001a92:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a94:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <MX_SPI1_Init+0x74>)
 8001a96:	2202      	movs	r2, #2
 8001a98:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <MX_SPI1_Init+0x74>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <MX_SPI1_Init+0x74>)
 8001aa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aa6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <MX_SPI1_Init+0x74>)
 8001aaa:	2238      	movs	r2, #56	@ 0x38
 8001aac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <MX_SPI1_Init+0x74>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <MX_SPI1_Init+0x74>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <MX_SPI1_Init+0x74>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ac0:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <MX_SPI1_Init+0x74>)
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ac6:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <MX_SPI1_Init+0x74>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <MX_SPI1_Init+0x74>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ad2:	4805      	ldr	r0, [pc, #20]	@ (8001ae8 <MX_SPI1_Init+0x74>)
 8001ad4:	f005 ff18 	bl	8007908 <HAL_SPI_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ade:	f7ff ffc2 	bl	8001a66 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200003f4 	.word	0x200003f4
 8001aec:	40013000 	.word	0x40013000

08001af0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001af4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <MX_SPI3_Init+0x74>)
 8001af6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b68 <MX_SPI3_Init+0x78>)
 8001af8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001afa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <MX_SPI3_Init+0x74>)
 8001afc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b00:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b02:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <MX_SPI3_Init+0x74>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001b08:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <MX_SPI3_Init+0x74>)
 8001b0a:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001b0e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b10:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <MX_SPI3_Init+0x74>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b16:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <MX_SPI3_Init+0x74>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <MX_SPI3_Init+0x74>)
 8001b1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b22:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <MX_SPI3_Init+0x74>)
 8001b26:	2210      	movs	r2, #16
 8001b28:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <MX_SPI3_Init+0x74>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <MX_SPI3_Init+0x74>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <MX_SPI3_Init+0x74>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <MX_SPI3_Init+0x74>)
 8001b3e:	2207      	movs	r2, #7
 8001b40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b42:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <MX_SPI3_Init+0x74>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <MX_SPI3_Init+0x74>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b4e:	4805      	ldr	r0, [pc, #20]	@ (8001b64 <MX_SPI3_Init+0x74>)
 8001b50:	f005 feda 	bl	8007908 <HAL_SPI_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001b5a:	f7ff ff84 	bl	8001a66 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000458 	.word	0x20000458
 8001b68:	40003c00 	.word	0x40003c00

08001b6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08c      	sub	sp, #48	@ 0x30
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a3d      	ldr	r2, [pc, #244]	@ (8001c80 <HAL_SPI_MspInit+0x114>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d129      	bne.n	8001be2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c84 <HAL_SPI_MspInit+0x118>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b92:	4a3c      	ldr	r2, [pc, #240]	@ (8001c84 <HAL_SPI_MspInit+0x118>)
 8001b94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b98:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c84 <HAL_SPI_MspInit+0x118>)
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ba2:	61bb      	str	r3, [r7, #24]
 8001ba4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	4b37      	ldr	r3, [pc, #220]	@ (8001c84 <HAL_SPI_MspInit+0x118>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001baa:	4a36      	ldr	r2, [pc, #216]	@ (8001c84 <HAL_SPI_MspInit+0x118>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bb2:	4b34      	ldr	r3, [pc, #208]	@ (8001c84 <HAL_SPI_MspInit+0x118>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001bbe:	23e0      	movs	r3, #224	@ 0xe0
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bce:	2305      	movs	r3, #5
 8001bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 031c 	add.w	r3, r7, #28
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bdc:	f004 fd10 	bl	8006600 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001be0:	e049      	b.n	8001c76 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a28      	ldr	r2, [pc, #160]	@ (8001c88 <HAL_SPI_MspInit+0x11c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d144      	bne.n	8001c76 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bec:	4b25      	ldr	r3, [pc, #148]	@ (8001c84 <HAL_SPI_MspInit+0x118>)
 8001bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf0:	4a24      	ldr	r2, [pc, #144]	@ (8001c84 <HAL_SPI_MspInit+0x118>)
 8001bf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bf8:	4b22      	ldr	r3, [pc, #136]	@ (8001c84 <HAL_SPI_MspInit+0x118>)
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c04:	4b1f      	ldr	r3, [pc, #124]	@ (8001c84 <HAL_SPI_MspInit+0x118>)
 8001c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c08:	4a1e      	ldr	r2, [pc, #120]	@ (8001c84 <HAL_SPI_MspInit+0x118>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c10:	4b1c      	ldr	r3, [pc, #112]	@ (8001c84 <HAL_SPI_MspInit+0x118>)
 8001c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1c:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <HAL_SPI_MspInit+0x118>)
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c20:	4a18      	ldr	r2, [pc, #96]	@ (8001c84 <HAL_SPI_MspInit+0x118>)
 8001c22:	f043 0302 	orr.w	r3, r3, #2
 8001c26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c28:	4b16      	ldr	r3, [pc, #88]	@ (8001c84 <HAL_SPI_MspInit+0x118>)
 8001c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c34:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c46:	2306      	movs	r3, #6
 8001c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	480e      	ldr	r0, [pc, #56]	@ (8001c8c <HAL_SPI_MspInit+0x120>)
 8001c52:	f004 fcd5 	bl	8006600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c56:	2320      	movs	r3, #32
 8001c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c66:	2306      	movs	r3, #6
 8001c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 031c 	add.w	r3, r7, #28
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4807      	ldr	r0, [pc, #28]	@ (8001c90 <HAL_SPI_MspInit+0x124>)
 8001c72:	f004 fcc5 	bl	8006600 <HAL_GPIO_Init>
}
 8001c76:	bf00      	nop
 8001c78:	3730      	adds	r7, #48	@ 0x30
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40013000 	.word	0x40013000
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40003c00 	.word	0x40003c00
 8001c8c:	48000800 	.word	0x48000800
 8001c90:	48000400 	.word	0x48000400

08001c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd8 <HAL_MspInit+0x44>)
 8001c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001cd8 <HAL_MspInit+0x44>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <HAL_MspInit+0x44>)
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <HAL_MspInit+0x44>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb6:	4a08      	ldr	r2, [pc, #32]	@ (8001cd8 <HAL_MspInit+0x44>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_MspInit+0x44>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001cca:	f004 feef 	bl	8006aac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <HardFault_Handler+0x4>

08001cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <MemManage_Handler+0x4>

08001cf4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <BusFault_Handler+0x4>

08001cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <UsageFault_Handler+0x4>

08001d04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d32:	f000 ff1b 	bl	8002b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001d40:	4802      	ldr	r0, [pc, #8]	@ (8001d4c <DMA1_Channel1_IRQHandler+0x10>)
 8001d42:	f004 fb0e 	bl	8006362 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200007ec 	.word	0x200007ec

08001d50 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d54:	4802      	ldr	r0, [pc, #8]	@ (8001d60 <DMA1_Channel2_IRQHandler+0x10>)
 8001d56:	f004 fb04 	bl	8006362 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	2000084c 	.word	0x2000084c

08001d64 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d68:	4802      	ldr	r0, [pc, #8]	@ (8001d74 <DMA1_Channel3_IRQHandler+0x10>)
 8001d6a:	f004 fafa 	bl	8006362 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000072c 	.word	0x2000072c

08001d78 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d7c:	4802      	ldr	r0, [pc, #8]	@ (8001d88 <DMA1_Channel4_IRQHandler+0x10>)
 8001d7e:	f004 faf0 	bl	8006362 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000078c 	.word	0x2000078c

08001d8c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001d90:	4802      	ldr	r0, [pc, #8]	@ (8001d9c <DMA1_Channel5_IRQHandler+0x10>)
 8001d92:	f004 fae6 	bl	8006362 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200005a4 	.word	0x200005a4

08001da0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001da4:	4803      	ldr	r0, [pc, #12]	@ (8001db4 <ADC1_2_IRQHandler+0x14>)
 8001da6:	f001 faf7 	bl	8003398 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001daa:	4803      	ldr	r0, [pc, #12]	@ (8001db8 <ADC1_2_IRQHandler+0x18>)
 8001dac:	f001 faf4 	bl	8003398 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200002bc 	.word	0x200002bc
 8001db8:	20000328 	.word	0x20000328

08001dbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dc0:	4802      	ldr	r0, [pc, #8]	@ (8001dcc <USART2_IRQHandler+0x10>)
 8001dc2:	f007 fe39 	bl	8009a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000604 	.word	0x20000604

08001dd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001dd4:	4802      	ldr	r0, [pc, #8]	@ (8001de0 <USART3_IRQHandler+0x10>)
 8001dd6:	f007 fe2f 	bl	8009a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000698 	.word	0x20000698

08001de4 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001de8:	4802      	ldr	r0, [pc, #8]	@ (8001df4 <COMP1_2_3_IRQHandler+0x10>)
 8001dea:	f003 fd0d 	bl	8005808 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000398 	.word	0x20000398

08001df8 <COMP4_IRQHandler>:

/**
  * @brief This function handles COMP4 interrupt through EXTI line 30.
  */
void COMP4_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP4_IRQn 0 */

  /* USER CODE END COMP4_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp4);
 8001dfc:	4802      	ldr	r0, [pc, #8]	@ (8001e08 <COMP4_IRQHandler+0x10>)
 8001dfe:	f003 fd03 	bl	8005808 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP4_IRQn 1 */

  /* USER CODE END COMP4_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200003bc 	.word	0x200003bc

08001e0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return 1;
 8001e10:	2301      	movs	r3, #1
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <_kill>:

int _kill(int pid, int sig)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e26:	f00e fe73 	bl	8010b10 <__errno>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2216      	movs	r2, #22
 8001e2e:	601a      	str	r2, [r3, #0]
  return -1;
 8001e30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <_exit>:

void _exit (int status)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ffe7 	bl	8001e1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e4e:	bf00      	nop
 8001e50:	e7fd      	b.n	8001e4e <_exit+0x12>

08001e52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	e00a      	b.n	8001e7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e64:	f3af 8000 	nop.w
 8001e68:	4601      	mov	r1, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	60ba      	str	r2, [r7, #8]
 8001e70:	b2ca      	uxtb	r2, r1
 8001e72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	3301      	adds	r3, #1
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	dbf0      	blt.n	8001e64 <_read+0x12>
  }

  return len;
 8001e82:	687b      	ldr	r3, [r7, #4]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	e009      	b.n	8001eb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	60ba      	str	r2, [r7, #8]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dbf1      	blt.n	8001e9e <_write+0x12>
  }
  return len;
 8001eba:	687b      	ldr	r3, [r7, #4]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_close>:

int _close(int file)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eec:	605a      	str	r2, [r3, #4]
  return 0;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_isatty>:

int _isatty(int file)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f04:	2301      	movs	r3, #1
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b085      	sub	sp, #20
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f34:	4a14      	ldr	r2, [pc, #80]	@ (8001f88 <_sbrk+0x5c>)
 8001f36:	4b15      	ldr	r3, [pc, #84]	@ (8001f8c <_sbrk+0x60>)
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f40:	4b13      	ldr	r3, [pc, #76]	@ (8001f90 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f48:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <_sbrk+0x64>)
 8001f4a:	4a12      	ldr	r2, [pc, #72]	@ (8001f94 <_sbrk+0x68>)
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4e:	4b10      	ldr	r3, [pc, #64]	@ (8001f90 <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d207      	bcs.n	8001f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f5c:	f00e fdd8 	bl	8010b10 <__errno>
 8001f60:	4603      	mov	r3, r0
 8001f62:	220c      	movs	r2, #12
 8001f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	e009      	b.n	8001f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f6c:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f72:	4b07      	ldr	r3, [pc, #28]	@ (8001f90 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a05      	ldr	r2, [pc, #20]	@ (8001f90 <_sbrk+0x64>)
 8001f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20008000 	.word	0x20008000
 8001f8c:	00000400 	.word	0x00000400
 8001f90:	200004bc 	.word	0x200004bc
 8001f94:	20000ea8 	.word	0x20000ea8

08001f98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f9c:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <SystemInit+0x20>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa2:	4a05      	ldr	r2, [pc, #20]	@ (8001fb8 <SystemInit+0x20>)
 8001fa4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fa8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b09e      	sub	sp, #120	@ 0x78
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fc2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001fdc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fe8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
 8001ff8:	615a      	str	r2, [r3, #20]
 8001ffa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	2234      	movs	r2, #52	@ 0x34
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f00e fd20 	bl	8010a48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002008:	4b64      	ldr	r3, [pc, #400]	@ (800219c <MX_TIM1_Init+0x1e0>)
 800200a:	4a65      	ldr	r2, [pc, #404]	@ (80021a0 <MX_TIM1_Init+0x1e4>)
 800200c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 800200e:	4b63      	ldr	r3, [pc, #396]	@ (800219c <MX_TIM1_Init+0x1e0>)
 8002010:	2200      	movs	r2, #0
 8002012:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002014:	4b61      	ldr	r3, [pc, #388]	@ (800219c <MX_TIM1_Init+0x1e0>)
 8002016:	2220      	movs	r2, #32
 8002018:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 800201a:	4b60      	ldr	r3, [pc, #384]	@ (800219c <MX_TIM1_Init+0x1e0>)
 800201c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002020:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002022:	4b5e      	ldr	r3, [pc, #376]	@ (800219c <MX_TIM1_Init+0x1e0>)
 8002024:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002028:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800202a:	4b5c      	ldr	r3, [pc, #368]	@ (800219c <MX_TIM1_Init+0x1e0>)
 800202c:	2201      	movs	r2, #1
 800202e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002030:	4b5a      	ldr	r3, [pc, #360]	@ (800219c <MX_TIM1_Init+0x1e0>)
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002036:	4859      	ldr	r0, [pc, #356]	@ (800219c <MX_TIM1_Init+0x1e0>)
 8002038:	f006 f8a6 	bl	8008188 <HAL_TIM_Base_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002042:	f7ff fd10 	bl	8001a66 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002046:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800204a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800204c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002050:	4619      	mov	r1, r3
 8002052:	4852      	ldr	r0, [pc, #328]	@ (800219c <MX_TIM1_Init+0x1e0>)
 8002054:	f006 fc5e 	bl	8008914 <HAL_TIM_ConfigClockSource>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800205e:	f7ff fd02 	bl	8001a66 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002062:	484e      	ldr	r0, [pc, #312]	@ (800219c <MX_TIM1_Init+0x1e0>)
 8002064:	f006 f94a 	bl	80082fc <HAL_TIM_PWM_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800206e:	f7ff fcfa 	bl	8001a66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002072:	2370      	movs	r3, #112	@ 0x70
 8002074:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800207e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002082:	4619      	mov	r1, r3
 8002084:	4845      	ldr	r0, [pc, #276]	@ (800219c <MX_TIM1_Init+0x1e0>)
 8002086:	f007 f993 	bl	80093b0 <HAL_TIMEx_MasterConfigSynchronization>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8002090:	f7ff fce9 	bl	8001a66 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8002094:	2310      	movs	r3, #16
 8002096:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8002098:	2301      	movs	r3, #1
 800209a:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 800209c:	2300      	movs	r3, #0
 800209e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80020a0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80020a4:	461a      	mov	r2, r3
 80020a6:	2101      	movs	r1, #1
 80020a8:	483c      	ldr	r0, [pc, #240]	@ (800219c <MX_TIM1_Init+0x1e0>)
 80020aa:	f007 fa8f 	bl	80095cc <HAL_TIMEx_ConfigBreakInput>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80020b4:	f7ff fcd7 	bl	8001a66 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020b8:	2360      	movs	r3, #96	@ 0x60
 80020ba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020c0:	2300      	movs	r3, #0
 80020c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020c4:	2300      	movs	r3, #0
 80020c6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020cc:	2300      	movs	r3, #0
 80020ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020d0:	2300      	movs	r3, #0
 80020d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020d4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020d8:	2200      	movs	r2, #0
 80020da:	4619      	mov	r1, r3
 80020dc:	482f      	ldr	r0, [pc, #188]	@ (800219c <MX_TIM1_Init+0x1e0>)
 80020de:	f006 fb05 	bl	80086ec <HAL_TIM_PWM_ConfigChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80020e8:	f7ff fcbd 	bl	8001a66 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020f0:	2204      	movs	r2, #4
 80020f2:	4619      	mov	r1, r3
 80020f4:	4829      	ldr	r0, [pc, #164]	@ (800219c <MX_TIM1_Init+0x1e0>)
 80020f6:	f006 faf9 	bl	80086ec <HAL_TIM_PWM_ConfigChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8002100:	f7ff fcb1 	bl	8001a66 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002104:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002108:	2208      	movs	r2, #8
 800210a:	4619      	mov	r1, r3
 800210c:	4823      	ldr	r0, [pc, #140]	@ (800219c <MX_TIM1_Init+0x1e0>)
 800210e:	f006 faed 	bl	80086ec <HAL_TIM_PWM_ConfigChannel>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 8002118:	f7ff fca5 	bl	8001a66 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800211c:	2370      	movs	r3, #112	@ 0x70
 800211e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 7998;
 8002120:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8002124:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002126:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800212a:	220c      	movs	r2, #12
 800212c:	4619      	mov	r1, r3
 800212e:	481b      	ldr	r0, [pc, #108]	@ (800219c <MX_TIM1_Init+0x1e0>)
 8002130:	f006 fadc 	bl	80086ec <HAL_TIM_PWM_ConfigChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM1_Init+0x182>
  {
    Error_Handler();
 800213a:	f7ff fc94 	bl	8001a66 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800214e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002152:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002154:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002158:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 2;
 800215a:	2302      	movs	r3, #2
 800215c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002166:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800216a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002170:	2300      	movs	r3, #0
 8002172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002178:	463b      	mov	r3, r7
 800217a:	4619      	mov	r1, r3
 800217c:	4807      	ldr	r0, [pc, #28]	@ (800219c <MX_TIM1_Init+0x1e0>)
 800217e:	f007 f999 	bl	80094b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM1_Init+0x1d0>
  {
    Error_Handler();
 8002188:	f7ff fc6d 	bl	8001a66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800218c:	4803      	ldr	r0, [pc, #12]	@ (800219c <MX_TIM1_Init+0x1e0>)
 800218e:	f000 f9e5 	bl	800255c <HAL_TIM_MspPostInit>

}
 8002192:	bf00      	nop
 8002194:	3778      	adds	r7, #120	@ 0x78
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200004c0 	.word	0x200004c0
 80021a0:	40012c00 	.word	0x40012c00

080021a4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08e      	sub	sp, #56	@ 0x38
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021c4:	463b      	mov	r3, r7
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]
 80021d0:	611a      	str	r2, [r3, #16]
 80021d2:	615a      	str	r2, [r3, #20]
 80021d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021d6:	4b2d      	ldr	r3, [pc, #180]	@ (800228c <MX_TIM2_Init+0xe8>)
 80021d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021de:	4b2b      	ldr	r3, [pc, #172]	@ (800228c <MX_TIM2_Init+0xe8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e4:	4b29      	ldr	r3, [pc, #164]	@ (800228c <MX_TIM2_Init+0xe8>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 80021ea:	4b28      	ldr	r3, [pc, #160]	@ (800228c <MX_TIM2_Init+0xe8>)
 80021ec:	22c7      	movs	r2, #199	@ 0xc7
 80021ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f0:	4b26      	ldr	r3, [pc, #152]	@ (800228c <MX_TIM2_Init+0xe8>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f6:	4b25      	ldr	r3, [pc, #148]	@ (800228c <MX_TIM2_Init+0xe8>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021fc:	4823      	ldr	r0, [pc, #140]	@ (800228c <MX_TIM2_Init+0xe8>)
 80021fe:	f005 ffc3 	bl	8008188 <HAL_TIM_Base_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002208:	f7ff fc2d 	bl	8001a66 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800220c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002210:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002212:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002216:	4619      	mov	r1, r3
 8002218:	481c      	ldr	r0, [pc, #112]	@ (800228c <MX_TIM2_Init+0xe8>)
 800221a:	f006 fb7b 	bl	8008914 <HAL_TIM_ConfigClockSource>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002224:	f7ff fc1f 	bl	8001a66 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002228:	4818      	ldr	r0, [pc, #96]	@ (800228c <MX_TIM2_Init+0xe8>)
 800222a:	f006 f867 	bl	80082fc <HAL_TIM_PWM_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002234:	f7ff fc17 	bl	8001a66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002240:	f107 031c 	add.w	r3, r7, #28
 8002244:	4619      	mov	r1, r3
 8002246:	4811      	ldr	r0, [pc, #68]	@ (800228c <MX_TIM2_Init+0xe8>)
 8002248:	f007 f8b2 	bl	80093b0 <HAL_TIMEx_MasterConfigSynchronization>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002252:	f7ff fc08 	bl	8001a66 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002256:	2360      	movs	r3, #96	@ 0x60
 8002258:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002266:	463b      	mov	r3, r7
 8002268:	2200      	movs	r2, #0
 800226a:	4619      	mov	r1, r3
 800226c:	4807      	ldr	r0, [pc, #28]	@ (800228c <MX_TIM2_Init+0xe8>)
 800226e:	f006 fa3d 	bl	80086ec <HAL_TIM_PWM_ConfigChannel>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002278:	f7ff fbf5 	bl	8001a66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800227c:	4803      	ldr	r0, [pc, #12]	@ (800228c <MX_TIM2_Init+0xe8>)
 800227e:	f000 f96d 	bl	800255c <HAL_TIM_MspPostInit>

}
 8002282:	bf00      	nop
 8002284:	3738      	adds	r7, #56	@ 0x38
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	2000050c 	.word	0x2000050c

08002290 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b09e      	sub	sp, #120	@ 0x78
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002296:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80022b0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
 80022cc:	615a      	str	r2, [r3, #20]
 80022ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022d0:	463b      	mov	r3, r7
 80022d2:	2234      	movs	r2, #52	@ 0x34
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f00e fbb6 	bl	8010a48 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80022dc:	4b64      	ldr	r3, [pc, #400]	@ (8002470 <MX_TIM8_Init+0x1e0>)
 80022de:	4a65      	ldr	r2, [pc, #404]	@ (8002474 <MX_TIM8_Init+0x1e4>)
 80022e0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80022e2:	4b63      	ldr	r3, [pc, #396]	@ (8002470 <MX_TIM8_Init+0x1e0>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80022e8:	4b61      	ldr	r3, [pc, #388]	@ (8002470 <MX_TIM8_Init+0x1e0>)
 80022ea:	2220      	movs	r2, #32
 80022ec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7999;
 80022ee:	4b60      	ldr	r3, [pc, #384]	@ (8002470 <MX_TIM8_Init+0x1e0>)
 80022f0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80022f4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80022f6:	4b5e      	ldr	r3, [pc, #376]	@ (8002470 <MX_TIM8_Init+0x1e0>)
 80022f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022fc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 80022fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002470 <MX_TIM8_Init+0x1e0>)
 8002300:	2201      	movs	r2, #1
 8002302:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002304:	4b5a      	ldr	r3, [pc, #360]	@ (8002470 <MX_TIM8_Init+0x1e0>)
 8002306:	2200      	movs	r2, #0
 8002308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800230a:	4859      	ldr	r0, [pc, #356]	@ (8002470 <MX_TIM8_Init+0x1e0>)
 800230c:	f005 ff3c 	bl	8008188 <HAL_TIM_Base_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002316:	f7ff fba6 	bl	8001a66 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800231a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800231e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002320:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002324:	4619      	mov	r1, r3
 8002326:	4852      	ldr	r0, [pc, #328]	@ (8002470 <MX_TIM8_Init+0x1e0>)
 8002328:	f006 faf4 	bl	8008914 <HAL_TIM_ConfigClockSource>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002332:	f7ff fb98 	bl	8001a66 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002336:	484e      	ldr	r0, [pc, #312]	@ (8002470 <MX_TIM8_Init+0x1e0>)
 8002338:	f005 ffe0 	bl	80082fc <HAL_TIM_PWM_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8002342:	f7ff fb90 	bl	8001a66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002346:	2370      	movs	r3, #112	@ 0x70
 8002348:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800234a:	2300      	movs	r3, #0
 800234c:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800234e:	2300      	movs	r3, #0
 8002350:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002352:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002356:	4619      	mov	r1, r3
 8002358:	4845      	ldr	r0, [pc, #276]	@ (8002470 <MX_TIM8_Init+0x1e0>)
 800235a:	f007 f829 	bl	80093b0 <HAL_TIMEx_MasterConfigSynchronization>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM8_Init+0xd8>
  {
    Error_Handler();
 8002364:	f7ff fb7f 	bl	8001a66 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8002368:	2302      	movs	r3, #2
 800236a:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800236c:	2301      	movs	r3, #1
 800236e:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8002370:	2300      	movs	r3, #0
 8002372:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim8, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002374:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002378:	461a      	mov	r2, r3
 800237a:	2101      	movs	r1, #1
 800237c:	483c      	ldr	r0, [pc, #240]	@ (8002470 <MX_TIM8_Init+0x1e0>)
 800237e:	f007 f925 	bl	80095cc <HAL_TIMEx_ConfigBreakInput>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8002388:	f7ff fb6d 	bl	8001a66 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800238c:	2360      	movs	r3, #96	@ 0x60
 800238e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002394:	2300      	movs	r3, #0
 8002396:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002398:	2300      	movs	r3, #0
 800239a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800239c:	2300      	movs	r3, #0
 800239e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023a0:	2300      	movs	r3, #0
 80023a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023a4:	2300      	movs	r3, #0
 80023a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023ac:	2200      	movs	r2, #0
 80023ae:	4619      	mov	r1, r3
 80023b0:	482f      	ldr	r0, [pc, #188]	@ (8002470 <MX_TIM8_Init+0x1e0>)
 80023b2:	f006 f99b 	bl	80086ec <HAL_TIM_PWM_ConfigChannel>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 80023bc:	f7ff fb53 	bl	8001a66 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023c0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023c4:	2204      	movs	r2, #4
 80023c6:	4619      	mov	r1, r3
 80023c8:	4829      	ldr	r0, [pc, #164]	@ (8002470 <MX_TIM8_Init+0x1e0>)
 80023ca:	f006 f98f 	bl	80086ec <HAL_TIM_PWM_ConfigChannel>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 80023d4:	f7ff fb47 	bl	8001a66 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023dc:	2208      	movs	r2, #8
 80023de:	4619      	mov	r1, r3
 80023e0:	4823      	ldr	r0, [pc, #140]	@ (8002470 <MX_TIM8_Init+0x1e0>)
 80023e2:	f006 f983 	bl	80086ec <HAL_TIM_PWM_ConfigChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM8_Init+0x160>
  {
    Error_Handler();
 80023ec:	f7ff fb3b 	bl	8001a66 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80023f0:	2370      	movs	r3, #112	@ 0x70
 80023f2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 7998;
 80023f4:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 80023f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023fe:	220c      	movs	r2, #12
 8002400:	4619      	mov	r1, r3
 8002402:	481b      	ldr	r0, [pc, #108]	@ (8002470 <MX_TIM8_Init+0x1e0>)
 8002404:	f006 f972 	bl	80086ec <HAL_TIM_PWM_ConfigChannel>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM8_Init+0x182>
  {
    Error_Handler();
 800240e:	f7ff fb2a 	bl	8001a66 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002422:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002426:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800242c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002436:	2300      	movs	r3, #0
 8002438:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800243a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002444:	2300      	movs	r3, #0
 8002446:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002448:	2300      	movs	r3, #0
 800244a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800244c:	463b      	mov	r3, r7
 800244e:	4619      	mov	r1, r3
 8002450:	4807      	ldr	r0, [pc, #28]	@ (8002470 <MX_TIM8_Init+0x1e0>)
 8002452:	f007 f82f 	bl	80094b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM8_Init+0x1d0>
  {
    Error_Handler();
 800245c:	f7ff fb03 	bl	8001a66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002460:	4803      	ldr	r0, [pc, #12]	@ (8002470 <MX_TIM8_Init+0x1e0>)
 8002462:	f000 f87b 	bl	800255c <HAL_TIM_MspPostInit>

}
 8002466:	bf00      	nop
 8002468:	3778      	adds	r7, #120	@ 0x78
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000558 	.word	0x20000558
 8002474:	40013400 	.word	0x40013400

08002478 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a30      	ldr	r2, [pc, #192]	@ (8002548 <HAL_TIM_Base_MspInit+0xd0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d10c      	bne.n	80024a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800248a:	4b30      	ldr	r3, [pc, #192]	@ (800254c <HAL_TIM_Base_MspInit+0xd4>)
 800248c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800248e:	4a2f      	ldr	r2, [pc, #188]	@ (800254c <HAL_TIM_Base_MspInit+0xd4>)
 8002490:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002494:	6613      	str	r3, [r2, #96]	@ 0x60
 8002496:	4b2d      	ldr	r3, [pc, #180]	@ (800254c <HAL_TIM_Base_MspInit+0xd4>)
 8002498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800249a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80024a2:	e04d      	b.n	8002540 <HAL_TIM_Base_MspInit+0xc8>
  else if(tim_baseHandle->Instance==TIM2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ac:	d137      	bne.n	800251e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ae:	4b27      	ldr	r3, [pc, #156]	@ (800254c <HAL_TIM_Base_MspInit+0xd4>)
 80024b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b2:	4a26      	ldr	r2, [pc, #152]	@ (800254c <HAL_TIM_Base_MspInit+0xd4>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ba:	4b24      	ldr	r3, [pc, #144]	@ (800254c <HAL_TIM_Base_MspInit+0xd4>)
 80024bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80024c6:	4b22      	ldr	r3, [pc, #136]	@ (8002550 <HAL_TIM_Base_MspInit+0xd8>)
 80024c8:	4a22      	ldr	r2, [pc, #136]	@ (8002554 <HAL_TIM_Base_MspInit+0xdc>)
 80024ca:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 80024cc:	4b20      	ldr	r3, [pc, #128]	@ (8002550 <HAL_TIM_Base_MspInit+0xd8>)
 80024ce:	2238      	movs	r2, #56	@ 0x38
 80024d0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002550 <HAL_TIM_Base_MspInit+0xd8>)
 80024d4:	2210      	movs	r2, #16
 80024d6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002550 <HAL_TIM_Base_MspInit+0xd8>)
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80024de:	4b1c      	ldr	r3, [pc, #112]	@ (8002550 <HAL_TIM_Base_MspInit+0xd8>)
 80024e0:	2280      	movs	r2, #128	@ 0x80
 80024e2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002550 <HAL_TIM_Base_MspInit+0xd8>)
 80024e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024ea:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024ec:	4b18      	ldr	r3, [pc, #96]	@ (8002550 <HAL_TIM_Base_MspInit+0xd8>)
 80024ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024f2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80024f4:	4b16      	ldr	r3, [pc, #88]	@ (8002550 <HAL_TIM_Base_MspInit+0xd8>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80024fa:	4b15      	ldr	r3, [pc, #84]	@ (8002550 <HAL_TIM_Base_MspInit+0xd8>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002500:	4813      	ldr	r0, [pc, #76]	@ (8002550 <HAL_TIM_Base_MspInit+0xd8>)
 8002502:	f003 fd4b 	bl	8005f9c <HAL_DMA_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_TIM_Base_MspInit+0x98>
      Error_Handler();
 800250c:	f7ff faab 	bl	8001a66 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a0f      	ldr	r2, [pc, #60]	@ (8002550 <HAL_TIM_Base_MspInit+0xd8>)
 8002514:	625a      	str	r2, [r3, #36]	@ 0x24
 8002516:	4a0e      	ldr	r2, [pc, #56]	@ (8002550 <HAL_TIM_Base_MspInit+0xd8>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800251c:	e010      	b.n	8002540 <HAL_TIM_Base_MspInit+0xc8>
  else if(tim_baseHandle->Instance==TIM8)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a0d      	ldr	r2, [pc, #52]	@ (8002558 <HAL_TIM_Base_MspInit+0xe0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d10b      	bne.n	8002540 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002528:	4b08      	ldr	r3, [pc, #32]	@ (800254c <HAL_TIM_Base_MspInit+0xd4>)
 800252a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800252c:	4a07      	ldr	r2, [pc, #28]	@ (800254c <HAL_TIM_Base_MspInit+0xd4>)
 800252e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002532:	6613      	str	r3, [r2, #96]	@ 0x60
 8002534:	4b05      	ldr	r3, [pc, #20]	@ (800254c <HAL_TIM_Base_MspInit+0xd4>)
 8002536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002538:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
}
 8002540:	bf00      	nop
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40012c00 	.word	0x40012c00
 800254c:	40021000 	.word	0x40021000
 8002550:	200005a4 	.word	0x200005a4
 8002554:	40020058 	.word	0x40020058
 8002558:	40013400 	.word	0x40013400

0800255c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	@ 0x28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a3d      	ldr	r2, [pc, #244]	@ (8002670 <HAL_TIM_MspPostInit+0x114>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d11e      	bne.n	80025bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257e:	4b3d      	ldr	r3, [pc, #244]	@ (8002674 <HAL_TIM_MspPostInit+0x118>)
 8002580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002582:	4a3c      	ldr	r2, [pc, #240]	@ (8002674 <HAL_TIM_MspPostInit+0x118>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800258a:	4b3a      	ldr	r3, [pc, #232]	@ (8002674 <HAL_TIM_MspPostInit+0x118>)
 800258c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002596:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800259a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80025a8:	2306      	movs	r3, #6
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4619      	mov	r1, r3
 80025b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025b6:	f004 f823 	bl	8006600 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80025ba:	e054      	b.n	8002666 <HAL_TIM_MspPostInit+0x10a>
  else if(timHandle->Instance==TIM2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025c4:	d11d      	bne.n	8002602 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002674 <HAL_TIM_MspPostInit+0x118>)
 80025c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ca:	4a2a      	ldr	r2, [pc, #168]	@ (8002674 <HAL_TIM_MspPostInit+0x118>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025d2:	4b28      	ldr	r3, [pc, #160]	@ (8002674 <HAL_TIM_MspPostInit+0x118>)
 80025d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025de:	2301      	movs	r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e2:	2302      	movs	r3, #2
 80025e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025ee:	2301      	movs	r3, #1
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f2:	f107 0314 	add.w	r3, r7, #20
 80025f6:	4619      	mov	r1, r3
 80025f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025fc:	f004 f800 	bl	8006600 <HAL_GPIO_Init>
}
 8002600:	e031      	b.n	8002666 <HAL_TIM_MspPostInit+0x10a>
  else if(timHandle->Instance==TIM8)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a1c      	ldr	r2, [pc, #112]	@ (8002678 <HAL_TIM_MspPostInit+0x11c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d12c      	bne.n	8002666 <HAL_TIM_MspPostInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260c:	4b19      	ldr	r3, [pc, #100]	@ (8002674 <HAL_TIM_MspPostInit+0x118>)
 800260e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002610:	4a18      	ldr	r2, [pc, #96]	@ (8002674 <HAL_TIM_MspPostInit+0x118>)
 8002612:	f043 0302 	orr.w	r3, r3, #2
 8002616:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002618:	4b16      	ldr	r3, [pc, #88]	@ (8002674 <HAL_TIM_MspPostInit+0x118>)
 800261a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002624:	2340      	movs	r3, #64	@ 0x40
 8002626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	2302      	movs	r3, #2
 800262a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	2300      	movs	r3, #0
 8002632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8002634:	2305      	movs	r3, #5
 8002636:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	4619      	mov	r1, r3
 800263e:	480f      	ldr	r0, [pc, #60]	@ (800267c <HAL_TIM_MspPostInit+0x120>)
 8002640:	f003 ffde 	bl	8006600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002644:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002652:	2300      	movs	r3, #0
 8002654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002656:	230a      	movs	r3, #10
 8002658:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265a:	f107 0314 	add.w	r3, r7, #20
 800265e:	4619      	mov	r1, r3
 8002660:	4806      	ldr	r0, [pc, #24]	@ (800267c <HAL_TIM_MspPostInit+0x120>)
 8002662:	f003 ffcd 	bl	8006600 <HAL_GPIO_Init>
}
 8002666:	bf00      	nop
 8002668:	3728      	adds	r7, #40	@ 0x28
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40012c00 	.word	0x40012c00
 8002674:	40021000 	.word	0x40021000
 8002678:	40013400 	.word	0x40013400
 800267c:	48000400 	.word	0x48000400

08002680 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002684:	4b22      	ldr	r3, [pc, #136]	@ (8002710 <MX_USART2_UART_Init+0x90>)
 8002686:	4a23      	ldr	r2, [pc, #140]	@ (8002714 <MX_USART2_UART_Init+0x94>)
 8002688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800268a:	4b21      	ldr	r3, [pc, #132]	@ (8002710 <MX_USART2_UART_Init+0x90>)
 800268c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002692:	4b1f      	ldr	r3, [pc, #124]	@ (8002710 <MX_USART2_UART_Init+0x90>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002698:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <MX_USART2_UART_Init+0x90>)
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800269e:	4b1c      	ldr	r3, [pc, #112]	@ (8002710 <MX_USART2_UART_Init+0x90>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002710 <MX_USART2_UART_Init+0x90>)
 80026a6:	220c      	movs	r2, #12
 80026a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026aa:	4b19      	ldr	r3, [pc, #100]	@ (8002710 <MX_USART2_UART_Init+0x90>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b0:	4b17      	ldr	r3, [pc, #92]	@ (8002710 <MX_USART2_UART_Init+0x90>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026b6:	4b16      	ldr	r3, [pc, #88]	@ (8002710 <MX_USART2_UART_Init+0x90>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026bc:	4b14      	ldr	r3, [pc, #80]	@ (8002710 <MX_USART2_UART_Init+0x90>)
 80026be:	2200      	movs	r2, #0
 80026c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026c2:	4b13      	ldr	r3, [pc, #76]	@ (8002710 <MX_USART2_UART_Init+0x90>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026c8:	4811      	ldr	r0, [pc, #68]	@ (8002710 <MX_USART2_UART_Init+0x90>)
 80026ca:	f007 f857 	bl	800977c <HAL_UART_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80026d4:	f7ff f9c7 	bl	8001a66 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026d8:	2100      	movs	r1, #0
 80026da:	480d      	ldr	r0, [pc, #52]	@ (8002710 <MX_USART2_UART_Init+0x90>)
 80026dc:	f008 fcbd 	bl	800b05a <HAL_UARTEx_SetTxFifoThreshold>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80026e6:	f7ff f9be 	bl	8001a66 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026ea:	2100      	movs	r1, #0
 80026ec:	4808      	ldr	r0, [pc, #32]	@ (8002710 <MX_USART2_UART_Init+0x90>)
 80026ee:	f008 fcf2 	bl	800b0d6 <HAL_UARTEx_SetRxFifoThreshold>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80026f8:	f7ff f9b5 	bl	8001a66 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80026fc:	4804      	ldr	r0, [pc, #16]	@ (8002710 <MX_USART2_UART_Init+0x90>)
 80026fe:	f008 fc73 	bl	800afe8 <HAL_UARTEx_DisableFifoMode>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002708:	f7ff f9ad 	bl	8001a66 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000604 	.word	0x20000604
 8002714:	40004400 	.word	0x40004400

08002718 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800271c:	4b22      	ldr	r3, [pc, #136]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 800271e:	4a23      	ldr	r2, [pc, #140]	@ (80027ac <MX_USART3_UART_Init+0x94>)
 8002720:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8002722:	4b21      	ldr	r3, [pc, #132]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002724:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002728:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800272a:	4b1f      	ldr	r3, [pc, #124]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002730:	4b1d      	ldr	r3, [pc, #116]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002736:	4b1c      	ldr	r3, [pc, #112]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800273c:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 800273e:	220c      	movs	r2, #12
 8002740:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002742:	4b19      	ldr	r3, [pc, #100]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002748:	4b17      	ldr	r3, [pc, #92]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800274e:	4b16      	ldr	r3, [pc, #88]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002754:	4b14      	ldr	r3, [pc, #80]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002756:	2200      	movs	r2, #0
 8002758:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800275a:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 800275c:	2200      	movs	r2, #0
 800275e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002760:	4811      	ldr	r0, [pc, #68]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002762:	f007 f80b 	bl	800977c <HAL_UART_Init>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800276c:	f7ff f97b 	bl	8001a66 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002770:	2100      	movs	r1, #0
 8002772:	480d      	ldr	r0, [pc, #52]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002774:	f008 fc71 	bl	800b05a <HAL_UARTEx_SetTxFifoThreshold>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800277e:	f7ff f972 	bl	8001a66 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002782:	2100      	movs	r1, #0
 8002784:	4808      	ldr	r0, [pc, #32]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002786:	f008 fca6 	bl	800b0d6 <HAL_UARTEx_SetRxFifoThreshold>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002790:	f7ff f969 	bl	8001a66 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002794:	4804      	ldr	r0, [pc, #16]	@ (80027a8 <MX_USART3_UART_Init+0x90>)
 8002796:	f008 fc27 	bl	800afe8 <HAL_UARTEx_DisableFifoMode>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80027a0:	f7ff f961 	bl	8001a66 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000698 	.word	0x20000698
 80027ac:	40004800 	.word	0x40004800

080027b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b09c      	sub	sp, #112	@ 0x70
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027c8:	f107 0318 	add.w	r3, r7, #24
 80027cc:	2244      	movs	r2, #68	@ 0x44
 80027ce:	2100      	movs	r1, #0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f00e f939 	bl	8010a48 <memset>
  if(uartHandle->Instance==USART2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a9a      	ldr	r2, [pc, #616]	@ (8002a44 <HAL_UART_MspInit+0x294>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	f040 8094 	bne.w	800290a <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80027e2:	2302      	movs	r3, #2
 80027e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80027e6:	2300      	movs	r3, #0
 80027e8:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027ea:	f107 0318 	add.w	r3, r7, #24
 80027ee:	4618      	mov	r0, r3
 80027f0:	f004 fe9a 	bl	8007528 <HAL_RCCEx_PeriphCLKConfig>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80027fa:	f7ff f934 	bl	8001a66 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027fe:	4b92      	ldr	r3, [pc, #584]	@ (8002a48 <HAL_UART_MspInit+0x298>)
 8002800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002802:	4a91      	ldr	r2, [pc, #580]	@ (8002a48 <HAL_UART_MspInit+0x298>)
 8002804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002808:	6593      	str	r3, [r2, #88]	@ 0x58
 800280a:	4b8f      	ldr	r3, [pc, #572]	@ (8002a48 <HAL_UART_MspInit+0x298>)
 800280c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002816:	4b8c      	ldr	r3, [pc, #560]	@ (8002a48 <HAL_UART_MspInit+0x298>)
 8002818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281a:	4a8b      	ldr	r2, [pc, #556]	@ (8002a48 <HAL_UART_MspInit+0x298>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002822:	4b89      	ldr	r3, [pc, #548]	@ (8002a48 <HAL_UART_MspInit+0x298>)
 8002824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800282e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002832:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002840:	2307      	movs	r3, #7
 8002842:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002844:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002848:	4619      	mov	r1, r3
 800284a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800284e:	f003 fed7 	bl	8006600 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8002852:	4b7e      	ldr	r3, [pc, #504]	@ (8002a4c <HAL_UART_MspInit+0x29c>)
 8002854:	4a7e      	ldr	r2, [pc, #504]	@ (8002a50 <HAL_UART_MspInit+0x2a0>)
 8002856:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002858:	4b7c      	ldr	r3, [pc, #496]	@ (8002a4c <HAL_UART_MspInit+0x29c>)
 800285a:	221a      	movs	r2, #26
 800285c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800285e:	4b7b      	ldr	r3, [pc, #492]	@ (8002a4c <HAL_UART_MspInit+0x29c>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002864:	4b79      	ldr	r3, [pc, #484]	@ (8002a4c <HAL_UART_MspInit+0x29c>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800286a:	4b78      	ldr	r3, [pc, #480]	@ (8002a4c <HAL_UART_MspInit+0x29c>)
 800286c:	2280      	movs	r2, #128	@ 0x80
 800286e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002870:	4b76      	ldr	r3, [pc, #472]	@ (8002a4c <HAL_UART_MspInit+0x29c>)
 8002872:	2200      	movs	r2, #0
 8002874:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002876:	4b75      	ldr	r3, [pc, #468]	@ (8002a4c <HAL_UART_MspInit+0x29c>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800287c:	4b73      	ldr	r3, [pc, #460]	@ (8002a4c <HAL_UART_MspInit+0x29c>)
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002882:	4b72      	ldr	r3, [pc, #456]	@ (8002a4c <HAL_UART_MspInit+0x29c>)
 8002884:	2200      	movs	r2, #0
 8002886:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002888:	4870      	ldr	r0, [pc, #448]	@ (8002a4c <HAL_UART_MspInit+0x29c>)
 800288a:	f003 fb87 	bl	8005f9c <HAL_DMA_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002894:	f7ff f8e7 	bl	8001a66 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a6c      	ldr	r2, [pc, #432]	@ (8002a4c <HAL_UART_MspInit+0x29c>)
 800289c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80028a0:	4a6a      	ldr	r2, [pc, #424]	@ (8002a4c <HAL_UART_MspInit+0x29c>)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80028a6:	4b6b      	ldr	r3, [pc, #428]	@ (8002a54 <HAL_UART_MspInit+0x2a4>)
 80028a8:	4a6b      	ldr	r2, [pc, #428]	@ (8002a58 <HAL_UART_MspInit+0x2a8>)
 80028aa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80028ac:	4b69      	ldr	r3, [pc, #420]	@ (8002a54 <HAL_UART_MspInit+0x2a4>)
 80028ae:	221b      	movs	r2, #27
 80028b0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028b2:	4b68      	ldr	r3, [pc, #416]	@ (8002a54 <HAL_UART_MspInit+0x2a4>)
 80028b4:	2210      	movs	r2, #16
 80028b6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b8:	4b66      	ldr	r3, [pc, #408]	@ (8002a54 <HAL_UART_MspInit+0x2a4>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028be:	4b65      	ldr	r3, [pc, #404]	@ (8002a54 <HAL_UART_MspInit+0x2a4>)
 80028c0:	2280      	movs	r2, #128	@ 0x80
 80028c2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028c4:	4b63      	ldr	r3, [pc, #396]	@ (8002a54 <HAL_UART_MspInit+0x2a4>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028ca:	4b62      	ldr	r3, [pc, #392]	@ (8002a54 <HAL_UART_MspInit+0x2a4>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80028d0:	4b60      	ldr	r3, [pc, #384]	@ (8002a54 <HAL_UART_MspInit+0x2a4>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002a54 <HAL_UART_MspInit+0x2a4>)
 80028d8:	2200      	movs	r2, #0
 80028da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80028dc:	485d      	ldr	r0, [pc, #372]	@ (8002a54 <HAL_UART_MspInit+0x2a4>)
 80028de:	f003 fb5d 	bl	8005f9c <HAL_DMA_Init>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 80028e8:	f7ff f8bd 	bl	8001a66 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a59      	ldr	r2, [pc, #356]	@ (8002a54 <HAL_UART_MspInit+0x2a4>)
 80028f0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80028f2:	4a58      	ldr	r2, [pc, #352]	@ (8002a54 <HAL_UART_MspInit+0x2a4>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80028f8:	2200      	movs	r2, #0
 80028fa:	2100      	movs	r1, #0
 80028fc:	2026      	movs	r0, #38	@ 0x26
 80028fe:	f003 f8a4 	bl	8005a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002902:	2026      	movs	r0, #38	@ 0x26
 8002904:	f003 f8bb 	bl	8005a7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002908:	e097      	b.n	8002a3a <HAL_UART_MspInit+0x28a>
  else if(uartHandle->Instance==USART3)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a53      	ldr	r2, [pc, #332]	@ (8002a5c <HAL_UART_MspInit+0x2ac>)
 8002910:	4293      	cmp	r3, r2
 8002912:	f040 8092 	bne.w	8002a3a <HAL_UART_MspInit+0x28a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002916:	2304      	movs	r3, #4
 8002918:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800291e:	f107 0318 	add.w	r3, r7, #24
 8002922:	4618      	mov	r0, r3
 8002924:	f004 fe00 	bl	8007528 <HAL_RCCEx_PeriphCLKConfig>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_UART_MspInit+0x182>
      Error_Handler();
 800292e:	f7ff f89a 	bl	8001a66 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002932:	4b45      	ldr	r3, [pc, #276]	@ (8002a48 <HAL_UART_MspInit+0x298>)
 8002934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002936:	4a44      	ldr	r2, [pc, #272]	@ (8002a48 <HAL_UART_MspInit+0x298>)
 8002938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800293c:	6593      	str	r3, [r2, #88]	@ 0x58
 800293e:	4b42      	ldr	r3, [pc, #264]	@ (8002a48 <HAL_UART_MspInit+0x298>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002942:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a48 <HAL_UART_MspInit+0x298>)
 800294c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800294e:	4a3e      	ldr	r2, [pc, #248]	@ (8002a48 <HAL_UART_MspInit+0x298>)
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002956:	4b3c      	ldr	r3, [pc, #240]	@ (8002a48 <HAL_UART_MspInit+0x298>)
 8002958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002962:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002966:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002968:	2302      	movs	r3, #2
 800296a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	2300      	movs	r3, #0
 8002972:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002974:	2307      	movs	r3, #7
 8002976:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002978:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800297c:	4619      	mov	r1, r3
 800297e:	4838      	ldr	r0, [pc, #224]	@ (8002a60 <HAL_UART_MspInit+0x2b0>)
 8002980:	f003 fe3e 	bl	8006600 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel1;
 8002984:	4b37      	ldr	r3, [pc, #220]	@ (8002a64 <HAL_UART_MspInit+0x2b4>)
 8002986:	4a38      	ldr	r2, [pc, #224]	@ (8002a68 <HAL_UART_MspInit+0x2b8>)
 8002988:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800298a:	4b36      	ldr	r3, [pc, #216]	@ (8002a64 <HAL_UART_MspInit+0x2b4>)
 800298c:	221d      	movs	r2, #29
 800298e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002990:	4b34      	ldr	r3, [pc, #208]	@ (8002a64 <HAL_UART_MspInit+0x2b4>)
 8002992:	2210      	movs	r2, #16
 8002994:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002996:	4b33      	ldr	r3, [pc, #204]	@ (8002a64 <HAL_UART_MspInit+0x2b4>)
 8002998:	2200      	movs	r2, #0
 800299a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800299c:	4b31      	ldr	r3, [pc, #196]	@ (8002a64 <HAL_UART_MspInit+0x2b4>)
 800299e:	2280      	movs	r2, #128	@ 0x80
 80029a0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029a2:	4b30      	ldr	r3, [pc, #192]	@ (8002a64 <HAL_UART_MspInit+0x2b4>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002a64 <HAL_UART_MspInit+0x2b4>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80029ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002a64 <HAL_UART_MspInit+0x2b4>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a64 <HAL_UART_MspInit+0x2b4>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80029ba:	482a      	ldr	r0, [pc, #168]	@ (8002a64 <HAL_UART_MspInit+0x2b4>)
 80029bc:	f003 faee 	bl	8005f9c <HAL_DMA_Init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_UART_MspInit+0x21a>
      Error_Handler();
 80029c6:	f7ff f84e 	bl	8001a66 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a25      	ldr	r2, [pc, #148]	@ (8002a64 <HAL_UART_MspInit+0x2b4>)
 80029ce:	67da      	str	r2, [r3, #124]	@ 0x7c
 80029d0:	4a24      	ldr	r2, [pc, #144]	@ (8002a64 <HAL_UART_MspInit+0x2b4>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart3_rx.Instance = DMA1_Channel2;
 80029d6:	4b25      	ldr	r3, [pc, #148]	@ (8002a6c <HAL_UART_MspInit+0x2bc>)
 80029d8:	4a25      	ldr	r2, [pc, #148]	@ (8002a70 <HAL_UART_MspInit+0x2c0>)
 80029da:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80029dc:	4b23      	ldr	r3, [pc, #140]	@ (8002a6c <HAL_UART_MspInit+0x2bc>)
 80029de:	221c      	movs	r2, #28
 80029e0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029e2:	4b22      	ldr	r3, [pc, #136]	@ (8002a6c <HAL_UART_MspInit+0x2bc>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029e8:	4b20      	ldr	r3, [pc, #128]	@ (8002a6c <HAL_UART_MspInit+0x2bc>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029ee:	4b1f      	ldr	r3, [pc, #124]	@ (8002a6c <HAL_UART_MspInit+0x2bc>)
 80029f0:	2280      	movs	r2, #128	@ 0x80
 80029f2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029f4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a6c <HAL_UART_MspInit+0x2bc>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029fa:	4b1c      	ldr	r3, [pc, #112]	@ (8002a6c <HAL_UART_MspInit+0x2bc>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002a00:	4b1a      	ldr	r3, [pc, #104]	@ (8002a6c <HAL_UART_MspInit+0x2bc>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a06:	4b19      	ldr	r3, [pc, #100]	@ (8002a6c <HAL_UART_MspInit+0x2bc>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002a0c:	4817      	ldr	r0, [pc, #92]	@ (8002a6c <HAL_UART_MspInit+0x2bc>)
 8002a0e:	f003 fac5 	bl	8005f9c <HAL_DMA_Init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8002a18:	f7ff f825 	bl	8001a66 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a13      	ldr	r2, [pc, #76]	@ (8002a6c <HAL_UART_MspInit+0x2bc>)
 8002a20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002a24:	4a11      	ldr	r2, [pc, #68]	@ (8002a6c <HAL_UART_MspInit+0x2bc>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	2027      	movs	r0, #39	@ 0x27
 8002a30:	f003 f80b 	bl	8005a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a34:	2027      	movs	r0, #39	@ 0x27
 8002a36:	f003 f822 	bl	8005a7e <HAL_NVIC_EnableIRQ>
}
 8002a3a:	bf00      	nop
 8002a3c:	3770      	adds	r7, #112	@ 0x70
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40004400 	.word	0x40004400
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	2000072c 	.word	0x2000072c
 8002a50:	40020030 	.word	0x40020030
 8002a54:	2000078c 	.word	0x2000078c
 8002a58:	40020044 	.word	0x40020044
 8002a5c:	40004800 	.word	0x40004800
 8002a60:	48000400 	.word	0x48000400
 8002a64:	200007ec 	.word	0x200007ec
 8002a68:	40020008 	.word	0x40020008
 8002a6c:	2000084c 	.word	0x2000084c
 8002a70:	4002001c 	.word	0x4002001c

08002a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a74:	480d      	ldr	r0, [pc, #52]	@ (8002aac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a76:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a78:	f7ff fa8e 	bl	8001f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a7c:	480c      	ldr	r0, [pc, #48]	@ (8002ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a7e:	490d      	ldr	r1, [pc, #52]	@ (8002ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a80:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab8 <LoopForever+0xe>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002a84:	e002      	b.n	8002a8c <LoopCopyDataInit>

08002a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a8a:	3304      	adds	r3, #4

08002a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a90:	d3f9      	bcc.n	8002a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a92:	4a0a      	ldr	r2, [pc, #40]	@ (8002abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a94:	4c0a      	ldr	r4, [pc, #40]	@ (8002ac0 <LoopForever+0x16>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a98:	e001      	b.n	8002a9e <LoopFillZerobss>

08002a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a9c:	3204      	adds	r2, #4

08002a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa0:	d3fb      	bcc.n	8002a9a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002aa2:	f00e f83b 	bl	8010b1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002aa6:	f7fe fedf 	bl	8001868 <main>

08002aaa <LoopForever>:

LoopForever:
    b LoopForever
 8002aaa:	e7fe      	b.n	8002aaa <LoopForever>
  ldr   r0, =_estack
 8002aac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab4:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 8002ab8:	08014a20 	.word	0x08014a20
  ldr r2, =_sbss
 8002abc:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8002ac0:	20000ea4 	.word	0x20000ea4

08002ac4 <CORDIC_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ac4:	e7fe      	b.n	8002ac4 <CORDIC_IRQHandler>

08002ac6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad0:	2003      	movs	r0, #3
 8002ad2:	f002 ffaf 	bl	8005a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ad6:	200f      	movs	r0, #15
 8002ad8:	f000 f80e 	bl	8002af8 <HAL_InitTick>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	71fb      	strb	r3, [r7, #7]
 8002ae6:	e001      	b.n	8002aec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ae8:	f7ff f8d4 	bl	8001c94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002aec:	79fb      	ldrb	r3, [r7, #7]

}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002b04:	4b16      	ldr	r3, [pc, #88]	@ (8002b60 <HAL_InitTick+0x68>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d022      	beq.n	8002b52 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002b0c:	4b15      	ldr	r3, [pc, #84]	@ (8002b64 <HAL_InitTick+0x6c>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b13      	ldr	r3, [pc, #76]	@ (8002b60 <HAL_InitTick+0x68>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002b18:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	4618      	mov	r0, r3
 8002b22:	f002 ffba 	bl	8005a9a <HAL_SYSTICK_Config>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10f      	bne.n	8002b4c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b0f      	cmp	r3, #15
 8002b30:	d809      	bhi.n	8002b46 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b32:	2200      	movs	r2, #0
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3a:	f002 ff86 	bl	8005a4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b68 <HAL_InitTick+0x70>)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	e007      	b.n	8002b56 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
 8002b4a:	e004      	b.n	8002b56 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
 8002b50:	e001      	b.n	8002b56 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000008 	.word	0x20000008
 8002b64:	20000000 	.word	0x20000000
 8002b68:	20000004 	.word	0x20000004

08002b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b70:	4b05      	ldr	r3, [pc, #20]	@ (8002b88 <HAL_IncTick+0x1c>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b05      	ldr	r3, [pc, #20]	@ (8002b8c <HAL_IncTick+0x20>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4413      	add	r3, r2
 8002b7a:	4a03      	ldr	r2, [pc, #12]	@ (8002b88 <HAL_IncTick+0x1c>)
 8002b7c:	6013      	str	r3, [r2, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	200008ac 	.word	0x200008ac
 8002b8c:	20000008 	.word	0x20000008

08002b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return uwTick;
 8002b94:	4b03      	ldr	r3, [pc, #12]	@ (8002ba4 <HAL_GetTick+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	200008ac 	.word	0x200008ac

08002ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb0:	f7ff ffee 	bl	8002b90 <HAL_GetTick>
 8002bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d004      	beq.n	8002bcc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bc2:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <HAL_Delay+0x40>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4413      	add	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bcc:	bf00      	nop
 8002bce:	f7ff ffdf 	bl	8002b90 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d8f7      	bhi.n	8002bce <HAL_Delay+0x26>
  {
  }
}
 8002bde:	bf00      	nop
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000008 	.word	0x20000008

08002bec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	609a      	str	r2, [r3, #8]
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	3360      	adds	r3, #96	@ 0x60
 8002c66:	461a      	mov	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <LL_ADC_SetOffset+0x44>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002c8c:	bf00      	nop
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	03fff000 	.word	0x03fff000

08002c9c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3360      	adds	r3, #96	@ 0x60
 8002caa:	461a      	mov	r2, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	3360      	adds	r3, #96	@ 0x60
 8002cd8:	461a      	mov	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	431a      	orrs	r2, r3
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002cf2:	bf00      	nop
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b087      	sub	sp, #28
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3360      	adds	r3, #96	@ 0x60
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002d28:	bf00      	nop
 8002d2a:	371c      	adds	r7, #28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3360      	adds	r3, #96	@ 0x60
 8002d44:	461a      	mov	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002d5e:	bf00      	nop
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	615a      	str	r2, [r3, #20]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b087      	sub	sp, #28
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3330      	adds	r3, #48	@ 0x30
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	4413      	add	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	211f      	movs	r1, #31
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	401a      	ands	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	0e9b      	lsrs	r3, r3, #26
 8002dee:	f003 011f 	and.w	r1, r3, #31
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e02:	bf00      	nop
 8002e04:	371c      	adds	r7, #28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e1a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3314      	adds	r3, #20
 8002e44:	461a      	mov	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	0e5b      	lsrs	r3, r3, #25
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	4413      	add	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	0d1b      	lsrs	r3, r3, #20
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	2107      	movs	r1, #7
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	401a      	ands	r2, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	0d1b      	lsrs	r3, r3, #20
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f003 0318 	and.w	r3, r3, #24
 8002eae:	4908      	ldr	r1, [pc, #32]	@ (8002ed0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002eb0:	40d9      	lsrs	r1, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	400b      	ands	r3, r1
 8002eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	0007ffff 	.word	0x0007ffff

08002ed4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 031f 	and.w	r3, r3, #31
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002f1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6093      	str	r3, [r2, #8]
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f44:	d101      	bne.n	8002f4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002f68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f6c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f94:	d101      	bne.n	8002f9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fbc:	f043 0201 	orr.w	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fe0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fe4:	f043 0202 	orr.w	r2, r3, #2
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <LL_ADC_IsEnabled+0x18>
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <LL_ADC_IsEnabled+0x1a>
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b02      	cmp	r3, #2
 8003030:	d101      	bne.n	8003036 <LL_ADC_IsDisableOngoing+0x18>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <LL_ADC_IsDisableOngoing+0x1a>
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b04      	cmp	r3, #4
 8003056:	d101      	bne.n	800305c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b08      	cmp	r3, #8
 800307c:	d101      	bne.n	8003082 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b089      	sub	sp, #36	@ 0x24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e167      	b.n	800337a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d109      	bne.n	80030cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7fe f8fb 	bl	80012b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff ff2d 	bl	8002f30 <LL_ADC_IsDeepPowerDownEnabled>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d004      	beq.n	80030e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff13 	bl	8002f0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff ff48 	bl	8002f80 <LL_ADC_IsInternalRegulatorEnabled>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d115      	bne.n	8003122 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff ff2c 	bl	8002f58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003100:	4ba0      	ldr	r3, [pc, #640]	@ (8003384 <HAL_ADC_Init+0x2f4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	099b      	lsrs	r3, r3, #6
 8003106:	4aa0      	ldr	r2, [pc, #640]	@ (8003388 <HAL_ADC_Init+0x2f8>)
 8003108:	fba2 2303 	umull	r2, r3, r2, r3
 800310c:	099b      	lsrs	r3, r3, #6
 800310e:	3301      	adds	r3, #1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003114:	e002      	b.n	800311c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3b01      	subs	r3, #1
 800311a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f9      	bne.n	8003116 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff ff2a 	bl	8002f80 <LL_ADC_IsInternalRegulatorEnabled>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10d      	bne.n	800314e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003136:	f043 0210 	orr.w	r2, r3, #16
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003142:	f043 0201 	orr.w	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff ff76 	bl	8003044 <LL_ADC_REG_IsConversionOngoing>
 8003158:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315e:	f003 0310 	and.w	r3, r3, #16
 8003162:	2b00      	cmp	r3, #0
 8003164:	f040 8100 	bne.w	8003368 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f040 80fc 	bne.w	8003368 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003174:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003178:	f043 0202 	orr.w	r2, r3, #2
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ff37 	bl	8002ff8 <LL_ADC_IsEnabled>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d111      	bne.n	80031b4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003190:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003194:	f7ff ff30 	bl	8002ff8 <LL_ADC_IsEnabled>
 8003198:	4604      	mov	r4, r0
 800319a:	487c      	ldr	r0, [pc, #496]	@ (800338c <HAL_ADC_Init+0x2fc>)
 800319c:	f7ff ff2c 	bl	8002ff8 <LL_ADC_IsEnabled>
 80031a0:	4603      	mov	r3, r0
 80031a2:	4323      	orrs	r3, r4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d105      	bne.n	80031b4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4619      	mov	r1, r3
 80031ae:	4878      	ldr	r0, [pc, #480]	@ (8003390 <HAL_ADC_Init+0x300>)
 80031b0:	f7ff fd1c 	bl	8002bec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	7f5b      	ldrb	r3, [r3, #29]
 80031b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80031c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80031ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d106      	bne.n	80031f0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e6:	3b01      	subs	r3, #1
 80031e8:	045b      	lsls	r3, r3, #17
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d009      	beq.n	800320c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003204:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	4b60      	ldr	r3, [pc, #384]	@ (8003394 <HAL_ADC_Init+0x304>)
 8003214:	4013      	ands	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	69b9      	ldr	r1, [r7, #24]
 800321c:	430b      	orrs	r3, r1
 800321e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff ff15 	bl	800306a <LL_ADC_INJ_IsConversionOngoing>
 8003240:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d16d      	bne.n	8003324 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d16a      	bne.n	8003324 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003252:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800325a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800326a:	f023 0302 	bic.w	r3, r3, #2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6812      	ldr	r2, [r2, #0]
 8003272:	69b9      	ldr	r1, [r7, #24]
 8003274:	430b      	orrs	r3, r1
 8003276:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d017      	beq.n	80032b0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800328e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003298:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800329c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6911      	ldr	r1, [r2, #16]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	430b      	orrs	r3, r1
 80032aa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80032ae:	e013      	b.n	80032d8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80032be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80032d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032d4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d118      	bne.n	8003314 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80032ec:	f023 0304 	bic.w	r3, r3, #4
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032f8:	4311      	orrs	r1, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032fe:	4311      	orrs	r1, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003304:	430a      	orrs	r2, r1
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0201 	orr.w	r2, r2, #1
 8003310:	611a      	str	r2, [r3, #16]
 8003312:	e007      	b.n	8003324 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d10c      	bne.n	8003346 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003332:	f023 010f 	bic.w	r1, r3, #15
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	1e5a      	subs	r2, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	631a      	str	r2, [r3, #48]	@ 0x30
 8003344:	e007      	b.n	8003356 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 020f 	bic.w	r2, r2, #15
 8003354:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335a:	f023 0303 	bic.w	r3, r3, #3
 800335e:	f043 0201 	orr.w	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003366:	e007      	b.n	8003378 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800336c:	f043 0210 	orr.w	r2, r3, #16
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003378:	7ffb      	ldrb	r3, [r7, #31]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3724      	adds	r7, #36	@ 0x24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd90      	pop	{r4, r7, pc}
 8003382:	bf00      	nop
 8003384:	20000000 	.word	0x20000000
 8003388:	053e2d63 	.word	0x053e2d63
 800338c:	50000100 	.word	0x50000100
 8003390:	50000300 	.word	0x50000300
 8003394:	fff04007 	.word	0xfff04007

08003398 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	@ 0x28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80033a0:	2300      	movs	r3, #0
 80033a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033b4:	4883      	ldr	r0, [pc, #524]	@ (80035c4 <HAL_ADC_IRQHandler+0x22c>)
 80033b6:	f7ff fd8d 	bl	8002ed4 <LL_ADC_GetMultimode>
 80033ba:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d017      	beq.n	80033f6 <HAL_ADC_IRQHandler+0x5e>
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d012      	beq.n	80033f6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f001 fa9d 	bl	8004928 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2202      	movs	r2, #2
 80033f4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d004      	beq.n	800340a <HAL_ADC_IRQHandler+0x72>
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 8085 	beq.w	8003520 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d07f      	beq.n	8003520 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b00      	cmp	r3, #0
 800342a:	d105      	bne.n	8003438 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003430:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fca7 	bl	8002d90 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d064      	beq.n	8003512 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a5e      	ldr	r2, [pc, #376]	@ (80035c8 <HAL_ADC_IRQHandler+0x230>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d002      	beq.n	8003458 <HAL_ADC_IRQHandler+0xc0>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	e001      	b.n	800345c <HAL_ADC_IRQHandler+0xc4>
 8003458:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	4293      	cmp	r3, r2
 8003462:	d008      	beq.n	8003476 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b05      	cmp	r3, #5
 800346e:	d002      	beq.n	8003476 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2b09      	cmp	r3, #9
 8003474:	d104      	bne.n	8003480 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	623b      	str	r3, [r7, #32]
 800347e:	e00d      	b.n	800349c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a50      	ldr	r2, [pc, #320]	@ (80035c8 <HAL_ADC_IRQHandler+0x230>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d002      	beq.n	8003490 <HAL_ADC_IRQHandler+0xf8>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	e001      	b.n	8003494 <HAL_ADC_IRQHandler+0xfc>
 8003490:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003494:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d135      	bne.n	8003512 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d12e      	bne.n	8003512 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fdc3 	bl	8003044 <LL_ADC_REG_IsConversionOngoing>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d11a      	bne.n	80034fa <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 020c 	bic.w	r2, r2, #12
 80034d2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d112      	bne.n	8003512 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f0:	f043 0201 	orr.w	r2, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034f8:	e00b      	b.n	8003512 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fe:	f043 0210 	orr.w	r2, r3, #16
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800350a:	f043 0201 	orr.w	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f95a 	bl	80037cc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	220c      	movs	r2, #12
 800351e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d004      	beq.n	8003534 <HAL_ADC_IRQHandler+0x19c>
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 809e 	beq.w	800367c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 8098 	beq.w	800367c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fc50 	bl	8002e0e <LL_ADC_INJ_IsTriggerSourceSWStart>
 800356e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff fc0b 	bl	8002d90 <LL_ADC_REG_IsTriggerSourceSWStart>
 800357a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a11      	ldr	r2, [pc, #68]	@ (80035c8 <HAL_ADC_IRQHandler+0x230>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d002      	beq.n	800358c <HAL_ADC_IRQHandler+0x1f4>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	e001      	b.n	8003590 <HAL_ADC_IRQHandler+0x1f8>
 800358c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	4293      	cmp	r3, r2
 8003596:	d008      	beq.n	80035aa <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b06      	cmp	r3, #6
 80035a2:	d002      	beq.n	80035aa <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2b07      	cmp	r3, #7
 80035a8:	d104      	bne.n	80035b4 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	623b      	str	r3, [r7, #32]
 80035b2:	e011      	b.n	80035d8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a03      	ldr	r2, [pc, #12]	@ (80035c8 <HAL_ADC_IRQHandler+0x230>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d006      	beq.n	80035cc <HAL_ADC_IRQHandler+0x234>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	e005      	b.n	80035d0 <HAL_ADC_IRQHandler+0x238>
 80035c4:	50000300 	.word	0x50000300
 80035c8:	50000100 	.word	0x50000100
 80035cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80035d0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d047      	beq.n	800366e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <HAL_ADC_IRQHandler+0x260>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d03f      	beq.n	800366e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d13a      	bne.n	800366e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003602:	2b40      	cmp	r3, #64	@ 0x40
 8003604:	d133      	bne.n	800366e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d12e      	bne.n	800366e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fd28 	bl	800306a <LL_ADC_INJ_IsConversionOngoing>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d11a      	bne.n	8003656 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800362e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003634:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d112      	bne.n	800366e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364c:	f043 0201 	orr.w	r2, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003654:	e00b      	b.n	800366e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365a:	f043 0210 	orr.w	r2, r3, #16
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003666:	f043 0201 	orr.w	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f009 fbb4 	bl	800cddc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2260      	movs	r2, #96	@ 0x60
 800367a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003682:	2b00      	cmp	r3, #0
 8003684:	d011      	beq.n	80036aa <HAL_ADC_IRQHandler+0x312>
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00c      	beq.n	80036aa <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003694:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f89f 	bl	80037e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2280      	movs	r2, #128	@ 0x80
 80036a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d012      	beq.n	80036da <HAL_ADC_IRQHandler+0x342>
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00d      	beq.n	80036da <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f001 f918 	bl	8004900 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d012      	beq.n	800370a <HAL_ADC_IRQHandler+0x372>
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00d      	beq.n	800370a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f001 f90a 	bl	8004914 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003708:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	d036      	beq.n	8003782 <HAL_ADC_IRQHandler+0x3ea>
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b00      	cmp	r3, #0
 800371c:	d031      	beq.n	8003782 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003726:	2301      	movs	r3, #1
 8003728:	627b      	str	r3, [r7, #36]	@ 0x24
 800372a:	e014      	b.n	8003756 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003732:	4825      	ldr	r0, [pc, #148]	@ (80037c8 <HAL_ADC_IRQHandler+0x430>)
 8003734:	f7ff fbdc 	bl	8002ef0 <LL_ADC_GetMultiDMATransfer>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800373e:	2301      	movs	r3, #1
 8003740:	627b      	str	r3, [r7, #36]	@ 0x24
 8003742:	e008      	b.n	8003756 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003752:	2301      	movs	r3, #1
 8003754:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003758:	2b01      	cmp	r3, #1
 800375a:	d10e      	bne.n	800377a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003760:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800376c:	f043 0202 	orr.w	r2, r3, #2
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f83d 	bl	80037f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2210      	movs	r2, #16
 8003780:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003788:	2b00      	cmp	r3, #0
 800378a:	d018      	beq.n	80037be <HAL_ADC_IRQHandler+0x426>
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003792:	2b00      	cmp	r3, #0
 8003794:	d013      	beq.n	80037be <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a6:	f043 0208 	orr.w	r2, r3, #8
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037b6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f001 f897 	bl	80048ec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80037be:	bf00      	nop
 80037c0:	3728      	adds	r7, #40	@ 0x28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	50000300 	.word	0x50000300

080037cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b0b6      	sub	sp, #216	@ 0xd8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_ADC_ConfigChannel+0x22>
 8003826:	2302      	movs	r3, #2
 8003828:	e3c8      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x7b4>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fc04 	bl	8003044 <LL_ADC_REG_IsConversionOngoing>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	f040 83ad 	bne.w	8003f9e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	6859      	ldr	r1, [r3, #4]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	f7ff fab0 	bl	8002db6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fbf2 	bl	8003044 <LL_ADC_REG_IsConversionOngoing>
 8003860:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff fbfe 	bl	800306a <LL_ADC_INJ_IsConversionOngoing>
 800386e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003872:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003876:	2b00      	cmp	r3, #0
 8003878:	f040 81d9 	bne.w	8003c2e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800387c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003880:	2b00      	cmp	r3, #0
 8003882:	f040 81d4 	bne.w	8003c2e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800388e:	d10f      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6818      	ldr	r0, [r3, #0]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2200      	movs	r2, #0
 800389a:	4619      	mov	r1, r3
 800389c:	f7ff faca 	bl	8002e34 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fa5e 	bl	8002d6a <LL_ADC_SetSamplingTimeCommonConfig>
 80038ae:	e00e      	b.n	80038ce <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6818      	ldr	r0, [r3, #0]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	6819      	ldr	r1, [r3, #0]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	461a      	mov	r2, r3
 80038be:	f7ff fab9 	bl	8002e34 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fa4e 	bl	8002d6a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	08db      	lsrs	r3, r3, #3
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d022      	beq.n	8003936 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6919      	ldr	r1, [r3, #16]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003900:	f7ff f9a8 	bl	8002c54 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	6919      	ldr	r1, [r3, #16]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	461a      	mov	r2, r3
 8003912:	f7ff f9f4 	bl	8002cfe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003922:	2b01      	cmp	r3, #1
 8003924:	d102      	bne.n	800392c <HAL_ADC_ConfigChannel+0x124>
 8003926:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800392a:	e000      	b.n	800392e <HAL_ADC_ConfigChannel+0x126>
 800392c:	2300      	movs	r3, #0
 800392e:	461a      	mov	r2, r3
 8003930:	f7ff fa00 	bl	8002d34 <LL_ADC_SetOffsetSaturation>
 8003934:	e17b      	b.n	8003c2e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2100      	movs	r1, #0
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff f9ad 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 8003942:	4603      	mov	r3, r0
 8003944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10a      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x15a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2100      	movs	r1, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff f9a2 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 8003958:	4603      	mov	r3, r0
 800395a:	0e9b      	lsrs	r3, r3, #26
 800395c:	f003 021f 	and.w	r2, r3, #31
 8003960:	e01e      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x198>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2100      	movs	r1, #0
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff f997 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 800396e:	4603      	mov	r3, r0
 8003970:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003978:	fa93 f3a3 	rbit	r3, r3
 800397c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003980:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003984:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003988:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003990:	2320      	movs	r3, #32
 8003992:	e004      	b.n	800399e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003994:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003998:	fab3 f383 	clz	r3, r3
 800399c:	b2db      	uxtb	r3, r3
 800399e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d105      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x1b0>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	0e9b      	lsrs	r3, r3, #26
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	e018      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1e2>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80039c4:	fa93 f3a3 	rbit	r3, r3
 80039c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80039cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80039d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80039dc:	2320      	movs	r3, #32
 80039de:	e004      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80039e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80039e4:	fab3 f383 	clz	r3, r3
 80039e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d106      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2200      	movs	r2, #0
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff f966 	bl	8002cc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2101      	movs	r1, #1
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff f94a 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x220>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2101      	movs	r1, #1
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff f93f 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	0e9b      	lsrs	r3, r3, #26
 8003a22:	f003 021f 	and.w	r2, r3, #31
 8003a26:	e01e      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x25e>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff f934 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a3e:	fa93 f3a3 	rbit	r3, r3
 8003a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003a46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003a4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003a56:	2320      	movs	r3, #32
 8003a58:	e004      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003a5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a5e:	fab3 f383 	clz	r3, r3
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d105      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x276>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	0e9b      	lsrs	r3, r3, #26
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	e018      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x2a8>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a8a:	fa93 f3a3 	rbit	r3, r3
 8003a8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003a92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003a9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003aa2:	2320      	movs	r3, #32
 8003aa4:	e004      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003aa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d106      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2101      	movs	r1, #1
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff f903 	bl	8002cc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2102      	movs	r1, #2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff f8e7 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10a      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x2e6>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2102      	movs	r1, #2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff f8dc 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	0e9b      	lsrs	r3, r3, #26
 8003ae8:	f003 021f 	and.w	r2, r3, #31
 8003aec:	e01e      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x324>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2102      	movs	r1, #2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff f8d1 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b04:	fa93 f3a3 	rbit	r3, r3
 8003b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003b14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003b1c:	2320      	movs	r3, #32
 8003b1e:	e004      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003b20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b24:	fab3 f383 	clz	r3, r3
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d105      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x33c>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	0e9b      	lsrs	r3, r3, #26
 8003b3e:	f003 031f 	and.w	r3, r3, #31
 8003b42:	e016      	b.n	8003b72 <HAL_ADC_ConfigChannel+0x36a>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b50:	fa93 f3a3 	rbit	r3, r3
 8003b54:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003b56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003b64:	2320      	movs	r3, #32
 8003b66:	e004      	b.n	8003b72 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b6c:	fab3 f383 	clz	r3, r3
 8003b70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d106      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff f8a2 	bl	8002cc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2103      	movs	r1, #3
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff f886 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10a      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x3a8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2103      	movs	r1, #3
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff f87b 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	0e9b      	lsrs	r3, r3, #26
 8003baa:	f003 021f 	and.w	r2, r3, #31
 8003bae:	e017      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x3d8>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2103      	movs	r1, #3
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff f870 	bl	8002c9c <LL_ADC_GetOffsetChannel>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bc2:	fa93 f3a3 	rbit	r3, r3
 8003bc6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003bc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bca:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003bcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003bd2:	2320      	movs	r3, #32
 8003bd4:	e003      	b.n	8003bde <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003bd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bd8:	fab3 f383 	clz	r3, r3
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d105      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x3f0>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	0e9b      	lsrs	r3, r3, #26
 8003bf2:	f003 031f 	and.w	r3, r3, #31
 8003bf6:	e011      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x414>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c00:	fa93 f3a3 	rbit	r3, r3
 8003c04:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003c06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c08:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003c0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003c10:	2320      	movs	r3, #32
 8003c12:	e003      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003c14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d106      	bne.n	8003c2e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2200      	movs	r2, #0
 8003c26:	2103      	movs	r1, #3
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff f84d 	bl	8002cc8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff f9e0 	bl	8002ff8 <LL_ADC_IsEnabled>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f040 8140 	bne.w	8003ec0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	6819      	ldr	r1, [r3, #0]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f7ff f91d 	bl	8002e8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	4a8f      	ldr	r2, [pc, #572]	@ (8003e94 <HAL_ADC_ConfigChannel+0x68c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	f040 8131 	bne.w	8003ec0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10b      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x47e>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	0e9b      	lsrs	r3, r3, #26
 8003c74:	3301      	adds	r3, #1
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	2b09      	cmp	r3, #9
 8003c7c:	bf94      	ite	ls
 8003c7e:	2301      	movls	r3, #1
 8003c80:	2300      	movhi	r3, #0
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	e019      	b.n	8003cba <HAL_ADC_ConfigChannel+0x4b2>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c8e:	fa93 f3a3 	rbit	r3, r3
 8003c92:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003c94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c96:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003c98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003c9e:	2320      	movs	r3, #32
 8003ca0:	e003      	b.n	8003caa <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003ca2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ca4:	fab3 f383 	clz	r3, r3
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	3301      	adds	r3, #1
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	2b09      	cmp	r3, #9
 8003cb2:	bf94      	ite	ls
 8003cb4:	2301      	movls	r3, #1
 8003cb6:	2300      	movhi	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d079      	beq.n	8003db2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d107      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x4d2>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	0e9b      	lsrs	r3, r3, #26
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	069b      	lsls	r3, r3, #26
 8003cd4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cd8:	e015      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x4fe>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ce2:	fa93 f3a3 	rbit	r3, r3
 8003ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cea:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003cf2:	2320      	movs	r3, #32
 8003cf4:	e003      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf8:	fab3 f383 	clz	r3, r3
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	069b      	lsls	r3, r3, #26
 8003d02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <HAL_ADC_ConfigChannel+0x51e>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	0e9b      	lsrs	r3, r3, #26
 8003d18:	3301      	adds	r3, #1
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	2101      	movs	r1, #1
 8003d20:	fa01 f303 	lsl.w	r3, r1, r3
 8003d24:	e017      	b.n	8003d56 <HAL_ADC_ConfigChannel+0x54e>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d2e:	fa93 f3a3 	rbit	r3, r3
 8003d32:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d36:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003d3e:	2320      	movs	r3, #32
 8003d40:	e003      	b.n	8003d4a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003d42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d44:	fab3 f383 	clz	r3, r3
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	2101      	movs	r1, #1
 8003d52:	fa01 f303 	lsl.w	r3, r1, r3
 8003d56:	ea42 0103 	orr.w	r1, r2, r3
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <HAL_ADC_ConfigChannel+0x574>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	0e9b      	lsrs	r3, r3, #26
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	f003 021f 	and.w	r2, r3, #31
 8003d72:	4613      	mov	r3, r2
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	4413      	add	r3, r2
 8003d78:	051b      	lsls	r3, r3, #20
 8003d7a:	e018      	b.n	8003dae <HAL_ADC_ConfigChannel+0x5a6>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d84:	fa93 f3a3 	rbit	r3, r3
 8003d88:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003d94:	2320      	movs	r3, #32
 8003d96:	e003      	b.n	8003da0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d9a:	fab3 f383 	clz	r3, r3
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	3301      	adds	r3, #1
 8003da2:	f003 021f 	and.w	r2, r3, #31
 8003da6:	4613      	mov	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	4413      	add	r3, r2
 8003dac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dae:	430b      	orrs	r3, r1
 8003db0:	e081      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d107      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x5c6>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	0e9b      	lsrs	r3, r3, #26
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	069b      	lsls	r3, r3, #26
 8003dc8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dcc:	e015      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x5f2>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd6:	fa93 f3a3 	rbit	r3, r3
 8003dda:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dde:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003de6:	2320      	movs	r3, #32
 8003de8:	e003      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dec:	fab3 f383 	clz	r3, r3
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	3301      	adds	r3, #1
 8003df4:	069b      	lsls	r3, r3, #26
 8003df6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d109      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x612>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	0e9b      	lsrs	r3, r3, #26
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	2101      	movs	r1, #1
 8003e14:	fa01 f303 	lsl.w	r3, r1, r3
 8003e18:	e017      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x642>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	fa93 f3a3 	rbit	r3, r3
 8003e26:	61fb      	str	r3, [r7, #28]
  return result;
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003e32:	2320      	movs	r3, #32
 8003e34:	e003      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	fab3 f383 	clz	r3, r3
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	2101      	movs	r1, #1
 8003e46:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4a:	ea42 0103 	orr.w	r1, r2, r3
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10d      	bne.n	8003e76 <HAL_ADC_ConfigChannel+0x66e>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	0e9b      	lsrs	r3, r3, #26
 8003e60:	3301      	adds	r3, #1
 8003e62:	f003 021f 	and.w	r2, r3, #31
 8003e66:	4613      	mov	r3, r2
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3b1e      	subs	r3, #30
 8003e6e:	051b      	lsls	r3, r3, #20
 8003e70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e74:	e01e      	b.n	8003eb4 <HAL_ADC_ConfigChannel+0x6ac>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	fa93 f3a3 	rbit	r3, r3
 8003e82:	613b      	str	r3, [r7, #16]
  return result;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d104      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003e8e:	2320      	movs	r3, #32
 8003e90:	e006      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x698>
 8003e92:	bf00      	nop
 8003e94:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	fab3 f383 	clz	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	f003 021f 	and.w	r2, r3, #31
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	4413      	add	r3, r2
 8003eac:	3b1e      	subs	r3, #30
 8003eae:	051b      	lsls	r3, r3, #20
 8003eb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eb4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eba:	4619      	mov	r1, r3
 8003ebc:	f7fe ffba 	bl	8002e34 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	4b3f      	ldr	r3, [pc, #252]	@ (8003fc4 <HAL_ADC_ConfigChannel+0x7bc>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d071      	beq.n	8003fb0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ecc:	483e      	ldr	r0, [pc, #248]	@ (8003fc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ece:	f7fe feb3 	bl	8002c38 <LL_ADC_GetCommonPathInternalCh>
 8003ed2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a3c      	ldr	r2, [pc, #240]	@ (8003fcc <HAL_ADC_ConfigChannel+0x7c4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d004      	beq.n	8003eea <HAL_ADC_ConfigChannel+0x6e2>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a3a      	ldr	r2, [pc, #232]	@ (8003fd0 <HAL_ADC_ConfigChannel+0x7c8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d127      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003eea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003eee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d121      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003efe:	d157      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f08:	4619      	mov	r1, r3
 8003f0a:	482f      	ldr	r0, [pc, #188]	@ (8003fc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003f0c:	f7fe fe81 	bl	8002c12 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f10:	4b30      	ldr	r3, [pc, #192]	@ (8003fd4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	099b      	lsrs	r3, r3, #6
 8003f16:	4a30      	ldr	r2, [pc, #192]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	099b      	lsrs	r3, r3, #6
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	4613      	mov	r3, r2
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f2a:	e002      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f9      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f38:	e03a      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a27      	ldr	r2, [pc, #156]	@ (8003fdc <HAL_ADC_ConfigChannel+0x7d4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d113      	bne.n	8003f6c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10d      	bne.n	8003f6c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a22      	ldr	r2, [pc, #136]	@ (8003fe0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d02a      	beq.n	8003fb0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f62:	4619      	mov	r1, r3
 8003f64:	4818      	ldr	r0, [pc, #96]	@ (8003fc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003f66:	f7fe fe54 	bl	8002c12 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f6a:	e021      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a1c      	ldr	r2, [pc, #112]	@ (8003fe4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d11c      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d116      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a16      	ldr	r2, [pc, #88]	@ (8003fe0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d011      	beq.n	8003fb0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f94:	4619      	mov	r1, r3
 8003f96:	480c      	ldr	r0, [pc, #48]	@ (8003fc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003f98:	f7fe fe3b 	bl	8002c12 <LL_ADC_SetCommonPathInternalCh>
 8003f9c:	e008      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa2:	f043 0220 	orr.w	r2, r3, #32
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003fb8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	37d8      	adds	r7, #216	@ 0xd8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	80080000 	.word	0x80080000
 8003fc8:	50000300 	.word	0x50000300
 8003fcc:	c3210000 	.word	0xc3210000
 8003fd0:	90c00010 	.word	0x90c00010
 8003fd4:	20000000 	.word	0x20000000
 8003fd8:	053e2d63 	.word	0x053e2d63
 8003fdc:	c7520000 	.word	0xc7520000
 8003fe0:	50000100 	.word	0x50000100
 8003fe4:	cb840000 	.word	0xcb840000

08003fe8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fe fffd 	bl	8002ff8 <LL_ADC_IsEnabled>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d169      	bne.n	80040d8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	4b36      	ldr	r3, [pc, #216]	@ (80040e4 <ADC_Enable+0xfc>)
 800400c:	4013      	ands	r3, r2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00d      	beq.n	800402e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004016:	f043 0210 	orr.w	r2, r3, #16
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004022:	f043 0201 	orr.w	r2, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e055      	b.n	80040da <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe ffb8 	bl	8002fa8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004038:	482b      	ldr	r0, [pc, #172]	@ (80040e8 <ADC_Enable+0x100>)
 800403a:	f7fe fdfd 	bl	8002c38 <LL_ADC_GetCommonPathInternalCh>
 800403e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004040:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004044:	2b00      	cmp	r3, #0
 8004046:	d013      	beq.n	8004070 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004048:	4b28      	ldr	r3, [pc, #160]	@ (80040ec <ADC_Enable+0x104>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	099b      	lsrs	r3, r3, #6
 800404e:	4a28      	ldr	r2, [pc, #160]	@ (80040f0 <ADC_Enable+0x108>)
 8004050:	fba2 2303 	umull	r2, r3, r2, r3
 8004054:	099b      	lsrs	r3, r3, #6
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	4613      	mov	r3, r2
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004062:	e002      	b.n	800406a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	3b01      	subs	r3, #1
 8004068:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1f9      	bne.n	8004064 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004070:	f7fe fd8e 	bl	8002b90 <HAL_GetTick>
 8004074:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004076:	e028      	b.n	80040ca <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f7fe ffbb 	bl	8002ff8 <LL_ADC_IsEnabled>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d104      	bne.n	8004092 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f7fe ff8b 	bl	8002fa8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004092:	f7fe fd7d 	bl	8002b90 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d914      	bls.n	80040ca <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d00d      	beq.n	80040ca <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b2:	f043 0210 	orr.w	r2, r3, #16
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040be:	f043 0201 	orr.w	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e007      	b.n	80040da <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d1cf      	bne.n	8004078 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	8000003f 	.word	0x8000003f
 80040e8:	50000300 	.word	0x50000300
 80040ec:	20000000 	.word	0x20000000
 80040f0:	053e2d63 	.word	0x053e2d63

080040f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f7fe ff8c 	bl	800301e <LL_ADC_IsDisableOngoing>
 8004106:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f7fe ff73 	bl	8002ff8 <LL_ADC_IsEnabled>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d047      	beq.n	80041a8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d144      	bne.n	80041a8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 030d 	and.w	r3, r3, #13
 8004128:	2b01      	cmp	r3, #1
 800412a:	d10c      	bne.n	8004146 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f7fe ff4d 	bl	8002fd0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2203      	movs	r2, #3
 800413c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800413e:	f7fe fd27 	bl	8002b90 <HAL_GetTick>
 8004142:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004144:	e029      	b.n	800419a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414a:	f043 0210 	orr.w	r2, r3, #16
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004156:	f043 0201 	orr.w	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e023      	b.n	80041aa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004162:	f7fe fd15 	bl	8002b90 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d914      	bls.n	800419a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00d      	beq.n	800419a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004182:	f043 0210 	orr.w	r2, r3, #16
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800418e:	f043 0201 	orr.w	r2, r3, #1
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e007      	b.n	80041aa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1dc      	bne.n	8004162 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <LL_ADC_SetCommonPathInternalCh>:
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	609a      	str	r2, [r3, #8]
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <LL_ADC_GetCommonPathInternalCh>:
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <LL_ADC_SetOffset>:
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3360      	adds	r3, #96	@ 0x60
 8004206:	461a      	mov	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4b08      	ldr	r3, [pc, #32]	@ (8004238 <LL_ADC_SetOffset+0x44>)
 8004216:	4013      	ands	r3, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	4313      	orrs	r3, r2
 8004224:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	601a      	str	r2, [r3, #0]
}
 800422c:	bf00      	nop
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	03fff000 	.word	0x03fff000

0800423c <LL_ADC_GetOffsetChannel>:
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3360      	adds	r3, #96	@ 0x60
 800424a:	461a      	mov	r2, r3
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <LL_ADC_SetOffsetState>:
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3360      	adds	r3, #96	@ 0x60
 8004278:	461a      	mov	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	431a      	orrs	r2, r3
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	601a      	str	r2, [r3, #0]
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <LL_ADC_SetOffsetSign>:
{
 800429e:	b480      	push	{r7}
 80042a0:	b087      	sub	sp, #28
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	3360      	adds	r3, #96	@ 0x60
 80042ae:	461a      	mov	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	601a      	str	r2, [r3, #0]
}
 80042c8:	bf00      	nop
 80042ca:	371c      	adds	r7, #28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <LL_ADC_SetOffsetSaturation>:
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	3360      	adds	r3, #96	@ 0x60
 80042e4:	461a      	mov	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	431a      	orrs	r2, r3
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	601a      	str	r2, [r3, #0]
}
 80042fe:	bf00      	nop
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <LL_ADC_SetSamplingTimeCommonConfig>:
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	615a      	str	r2, [r3, #20]
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <LL_ADC_INJ_GetTrigAuto>:
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <LL_ADC_SetChannelSamplingTime>:
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3314      	adds	r3, #20
 800435c:	461a      	mov	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	0e5b      	lsrs	r3, r3, #25
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	4413      	add	r3, r2
 800436a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	0d1b      	lsrs	r3, r3, #20
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	2107      	movs	r1, #7
 800437a:	fa01 f303 	lsl.w	r3, r1, r3
 800437e:	43db      	mvns	r3, r3
 8004380:	401a      	ands	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	0d1b      	lsrs	r3, r3, #20
 8004386:	f003 031f 	and.w	r3, r3, #31
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	fa01 f303 	lsl.w	r3, r1, r3
 8004390:	431a      	orrs	r2, r3
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	601a      	str	r2, [r3, #0]
}
 8004396:	bf00      	nop
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <LL_ADC_SetChannelSingleDiff>:
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043bc:	43db      	mvns	r3, r3
 80043be:	401a      	ands	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f003 0318 	and.w	r3, r3, #24
 80043c6:	4908      	ldr	r1, [pc, #32]	@ (80043e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80043c8:	40d9      	lsrs	r1, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	400b      	ands	r3, r1
 80043ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d2:	431a      	orrs	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	0007ffff 	.word	0x0007ffff

080043ec <LL_ADC_GetMultimode>:
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 031f 	and.w	r3, r3, #31
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <LL_ADC_IsEnabled>:
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <LL_ADC_IsEnabled+0x18>
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <LL_ADC_IsEnabled+0x1a>
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <LL_ADC_StartCalibration>:
{
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004440:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800444a:	4313      	orrs	r3, r2
 800444c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	609a      	str	r2, [r3, #8]
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <LL_ADC_IsCalibrationOnGoing>:
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004470:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004474:	d101      	bne.n	800447a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <LL_ADC_REG_IsConversionOngoing>:
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b04      	cmp	r3, #4
 800449a:	d101      	bne.n	80044a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <LL_ADC_INJ_StartConversion>:
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044c2:	f043 0208 	orr.w	r2, r3, #8
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	609a      	str	r2, [r3, #8]
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <LL_ADC_INJ_IsConversionOngoing>:
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d101      	bne.n	80044ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004506:	2300      	movs	r3, #0
 8004508:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_ADCEx_Calibration_Start+0x1c>
 8004514:	2302      	movs	r3, #2
 8004516:	e04d      	b.n	80045b4 <HAL_ADCEx_Calibration_Start+0xb8>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff fde7 	bl	80040f4 <ADC_Disable>
 8004526:	4603      	mov	r3, r0
 8004528:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d136      	bne.n	800459e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004534:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004538:	f023 0302 	bic.w	r3, r3, #2
 800453c:	f043 0202 	orr.w	r2, r3, #2
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6839      	ldr	r1, [r7, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff ff6f 	bl	800442e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004550:	e014      	b.n	800457c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	3301      	adds	r3, #1
 8004556:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4a18      	ldr	r2, [pc, #96]	@ (80045bc <HAL_ADCEx_Calibration_Start+0xc0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d90d      	bls.n	800457c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004564:	f023 0312 	bic.w	r3, r3, #18
 8004568:	f043 0210 	orr.w	r2, r3, #16
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e01b      	b.n	80045b4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff ff6d 	bl	8004460 <LL_ADC_IsCalibrationOnGoing>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e2      	bne.n	8004552 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004590:	f023 0303 	bic.w	r3, r3, #3
 8004594:	f043 0201 	orr.w	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800459c:	e005      	b.n	80045aa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a2:	f043 0210 	orr.w	r2, r3, #16
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	0004de01 	.word	0x0004de01

080045c0 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045c8:	4853      	ldr	r0, [pc, #332]	@ (8004718 <HAL_ADCEx_InjectedStart+0x158>)
 80045ca:	f7ff ff0f 	bl	80043ec <LL_ADC_GetMultimode>
 80045ce:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff ff7e 	bl	80044d6 <LL_ADC_INJ_IsConversionOngoing>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 80045e0:	2302      	movs	r3, #2
 80045e2:	e094      	b.n	800470e <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045ee:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10a      	bne.n	8004614 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d107      	bne.n	8004614 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004608:	f043 0220 	orr.w	r2, r3, #32
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e07c      	b.n	800470e <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_ADCEx_InjectedStart+0x62>
 800461e:	2302      	movs	r3, #2
 8004620:	e075      	b.n	800470e <HAL_ADCEx_InjectedStart+0x14e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff fcdc 	bl	8003fe8 <ADC_Enable>
 8004630:	4603      	mov	r3, r0
 8004632:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d164      	bne.n	8004704 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800463e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d006      	beq.n	8004654 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800464a:	f023 0208 	bic.w	r2, r3, #8
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	661a      	str	r2, [r3, #96]	@ 0x60
 8004652:	e002      	b.n	800465a <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800465e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004662:	f023 0301 	bic.w	r3, r3, #1
 8004666:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a2a      	ldr	r2, [pc, #168]	@ (800471c <HAL_ADCEx_InjectedStart+0x15c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d002      	beq.n	800467e <HAL_ADCEx_InjectedStart+0xbe>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	e001      	b.n	8004682 <HAL_ADCEx_InjectedStart+0xc2>
 800467e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	4293      	cmp	r3, r2
 8004688:	d002      	beq.n	8004690 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d105      	bne.n	800469c <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004694:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2260      	movs	r2, #96	@ 0x60
 80046a2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1a      	ldr	r2, [pc, #104]	@ (800471c <HAL_ADCEx_InjectedStart+0x15c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d002      	beq.n	80046bc <HAL_ADCEx_InjectedStart+0xfc>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	e001      	b.n	80046c0 <HAL_ADCEx_InjectedStart+0x100>
 80046bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d008      	beq.n	80046da <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b06      	cmp	r3, #6
 80046d2:	d002      	beq.n	80046da <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2b07      	cmp	r3, #7
 80046d8:	d10d      	bne.n	80046f6 <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff fe26 	bl	8004330 <LL_ADC_INJ_GetTrigAuto>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d110      	bne.n	800470c <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff fedd 	bl	80044ae <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80046f4:	e00a      	b.n	800470c <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004702:	e003      	b.n	800470c <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800470c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	50000300 	.word	0x50000300
 800471c:	50000100 	.word	0x50000100

08004720 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004728:	486e      	ldr	r0, [pc, #440]	@ (80048e4 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 800472a:	f7ff fe5f 	bl	80043ec <LL_ADC_GetMultimode>
 800472e:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fece 	bl	80044d6 <LL_ADC_INJ_IsConversionOngoing>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
 8004742:	e0ca      	b.n	80048da <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800474e:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004756:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d107      	bne.n	8004774 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004768:	f043 0220 	orr.w	r2, r3, #32
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0b2      	b.n	80048da <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_ADCEx_InjectedStart_IT+0x62>
 800477e:	2302      	movs	r3, #2
 8004780:	e0ab      	b.n	80048da <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fc2c 	bl	8003fe8 <ADC_Enable>
 8004790:	4603      	mov	r3, r0
 8004792:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	2b00      	cmp	r3, #0
 8004798:	f040 809a 	bne.w	80048d0 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d006      	beq.n	80047b6 <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ac:	f023 0208 	bic.w	r2, r3, #8
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	661a      	str	r2, [r3, #96]	@ 0x60
 80047b4:	e002      	b.n	80047bc <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a44      	ldr	r2, [pc, #272]	@ (80048e8 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d002      	beq.n	80047e0 <HAL_ADCEx_InjectedStart_IT+0xc0>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	e001      	b.n	80047e4 <HAL_ADCEx_InjectedStart_IT+0xc4>
 80047e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d002      	beq.n	80047f2 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d105      	bne.n	80047fe <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2260      	movs	r2, #96	@ 0x60
 8004804:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d007      	beq.n	800482c <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800482a:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	2b08      	cmp	r3, #8
 8004832:	d110      	bne.n	8004856 <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0220 	bic.w	r2, r2, #32
 8004842:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004852:	605a      	str	r2, [r3, #4]
          break;
 8004854:	e010      	b.n	8004878 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004864:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0220 	orr.w	r2, r2, #32
 8004874:	605a      	str	r2, [r3, #4]
          break;
 8004876:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1a      	ldr	r2, [pc, #104]	@ (80048e8 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d002      	beq.n	8004888 <HAL_ADCEx_InjectedStart_IT+0x168>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	e001      	b.n	800488c <HAL_ADCEx_InjectedStart_IT+0x16c>
 8004888:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	4293      	cmp	r3, r2
 8004892:	d008      	beq.n	80048a6 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d005      	beq.n	80048a6 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b06      	cmp	r3, #6
 800489e:	d002      	beq.n	80048a6 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2b07      	cmp	r3, #7
 80048a4:	d10d      	bne.n	80048c2 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fd40 	bl	8004330 <LL_ADC_INJ_GetTrigAuto>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d110      	bne.n	80048d8 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff fdf7 	bl	80044ae <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80048c0:	e00a      	b.n	80048d8 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048ce:	e003      	b.n	80048d8 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	50000300 	.word	0x50000300
 80048e8:	50000100 	.word	0x50000100

080048ec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b0b6      	sub	sp, #216	@ 0xd8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800495c:	2b01      	cmp	r3, #1
 800495e:	d102      	bne.n	8004966 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8004960:	2302      	movs	r3, #2
 8004962:	f000 bcb5 	b.w	80052d0 <HAL_ADCEx_InjectedConfigChannel+0x994>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800497a:	2b01      	cmp	r3, #1
 800497c:	d130      	bne.n	80049e0 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b09      	cmp	r3, #9
 8004984:	d179      	bne.n	8004a7a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498a:	2b00      	cmp	r3, #0
 800498c:	d010      	beq.n	80049b0 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	0e9b      	lsrs	r3, r3, #26
 8004994:	025b      	lsls	r3, r3, #9
 8004996:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80049a2:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049ae:	e007      	b.n	80049c0 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	0e9b      	lsrs	r3, r3, #26
 80049b6:	025b      	lsls	r3, r3, #9
 80049b8:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 80049bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049c6:	4b84      	ldr	r3, [pc, #528]	@ (8004bd8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6812      	ldr	r2, [r2, #0]
 80049ce:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80049d2:	430b      	orrs	r3, r1
 80049d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049dc:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80049de:	e04c      	b.n	8004a7a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d11d      	bne.n	8004a24 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	6a1a      	ldr	r2, [r3, #32]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00d      	beq.n	8004a1a <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a08:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8004a0c:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a18:	e004      	b.n	8004a24 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	0e9b      	lsrs	r3, r3, #26
 8004a2a:	f003 021f 	and.w	r2, r3, #31
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f003 031f 	and.w	r3, r3, #31
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a48:	1e5a      	subs	r2, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004a52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a6a:	4b5b      	ldr	r3, [pc, #364]	@ (8004bd8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	430b      	orrs	r3, r1
 8004a78:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fd29 	bl	80044d6 <LL_ADC_INJ_IsConversionOngoing>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d124      	bne.n	8004ad4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d112      	bne.n	8004aba <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004aa4:	055a      	lsls	r2, r3, #21
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004aac:	051b      	lsls	r3, r3, #20
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	60da      	str	r2, [r3, #12]
 8004ab8:	e00c      	b.n	8004ad4 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004aca:	055a      	lsls	r2, r3, #21
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff fcd5 	bl	8004488 <LL_ADC_REG_IsConversionOngoing>
 8004ade:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff fcf5 	bl	80044d6 <LL_ADC_INJ_IsConversionOngoing>
 8004aec:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004af0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f040 822e 	bne.w	8004f56 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004afa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f040 8229 	bne.w	8004f56 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d116      	bne.n	8004b42 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d108      	bne.n	8004b30 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8004b2c:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004b2e:	e01f      	b.n	8004b70 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8004b3e:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004b40:	e016      	b.n	8004b70 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d109      	bne.n	8004b60 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b50:	f043 0220 	orr.w	r2, r3, #32
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004b5e:	e007      	b.n	8004b70 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8004b6e:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d110      	bne.n	8004b9c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0202 	orr.w	r2, r2, #2
 8004b98:	611a      	str	r2, [r3, #16]
 8004b9a:	e007      	b.n	8004bac <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691a      	ldr	r2, [r3, #16]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0202 	bic.w	r2, r2, #2
 8004baa:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bb4:	d112      	bne.n	8004bdc <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	f7ff fbc3 	bl	800434c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff fb9b 	bl	800430a <LL_ADC_SetSamplingTimeCommonConfig>
 8004bd4:	e011      	b.n	8004bfa <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8004bd6:	bf00      	nop
 8004bd8:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6818      	ldr	r0, [r3, #0]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8004be8:	461a      	mov	r2, r3
 8004bea:	f7ff fbaf 	bl	800434c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff fb88 	bl	800430a <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	695a      	ldr	r2, [r3, #20]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	08db      	lsrs	r3, r3, #3
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d022      	beq.n	8004c62 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6818      	ldr	r0, [r3, #0]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	6919      	ldr	r1, [r3, #16]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c2c:	f7ff fae2 	bl	80041f4 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6818      	ldr	r0, [r3, #0]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	6919      	ldr	r1, [r3, #16]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	f7ff fb2e 	bl	800429e <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d102      	bne.n	8004c58 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004c52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c56:	e000      	b.n	8004c5a <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f7ff fb3a 	bl	80042d4 <LL_ADC_SetOffsetSaturation>
 8004c60:	e179      	b.n	8004f56 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2100      	movs	r1, #0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff fae7 	bl	800423c <LL_ADC_GetOffsetChannel>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10a      	bne.n	8004c8e <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff fadc 	bl	800423c <LL_ADC_GetOffsetChannel>
 8004c84:	4603      	mov	r3, r0
 8004c86:	0e9b      	lsrs	r3, r3, #26
 8004c88:	f003 021f 	and.w	r2, r3, #31
 8004c8c:	e01e      	b.n	8004ccc <HAL_ADCEx_InjectedConfigChannel+0x390>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2100      	movs	r1, #0
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff fad1 	bl	800423c <LL_ADC_GetOffsetChannel>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ca4:	fa93 f3a3 	rbit	r3, r3
 8004ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004cac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004cb0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004cb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8004cbc:	2320      	movs	r3, #32
 8004cbe:	e004      	b.n	8004cca <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004cc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004cc4:	fab3 f383 	clz	r3, r3
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d105      	bne.n	8004ce4 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	0e9b      	lsrs	r3, r3, #26
 8004cde:	f003 031f 	and.w	r3, r3, #31
 8004ce2:	e018      	b.n	8004d16 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cf0:	fa93 f3a3 	rbit	r3, r3
 8004cf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004cf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004d00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8004d08:	2320      	movs	r3, #32
 8004d0a:	e004      	b.n	8004d16 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8004d0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004d10:	fab3 f383 	clz	r3, r3
 8004d14:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d106      	bne.n	8004d28 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2100      	movs	r1, #0
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff faa0 	bl	8004268 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff fa84 	bl	800423c <LL_ADC_GetOffsetChannel>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10a      	bne.n	8004d54 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2101      	movs	r1, #1
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff fa79 	bl	800423c <LL_ADC_GetOffsetChannel>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	0e9b      	lsrs	r3, r3, #26
 8004d4e:	f003 021f 	and.w	r2, r3, #31
 8004d52:	e01e      	b.n	8004d92 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2101      	movs	r1, #1
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff fa6e 	bl	800423c <LL_ADC_GetOffsetChannel>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d6a:	fa93 f3a3 	rbit	r3, r3
 8004d6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004d72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004d7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004d82:	2320      	movs	r3, #32
 8004d84:	e004      	b.n	8004d90 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8004d86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d8a:	fab3 f383 	clz	r3, r3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d105      	bne.n	8004daa <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	0e9b      	lsrs	r3, r3, #26
 8004da4:	f003 031f 	and.w	r3, r3, #31
 8004da8:	e018      	b.n	8004ddc <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004db6:	fa93 f3a3 	rbit	r3, r3
 8004dba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004dbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004dc2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004dc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8004dce:	2320      	movs	r3, #32
 8004dd0:	e004      	b.n	8004ddc <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8004dd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dd6:	fab3 f383 	clz	r3, r3
 8004dda:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d106      	bne.n	8004dee <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2200      	movs	r2, #0
 8004de6:	2101      	movs	r1, #1
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fa3d 	bl	8004268 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2102      	movs	r1, #2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff fa21 	bl	800423c <LL_ADC_GetOffsetChannel>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10a      	bne.n	8004e1a <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2102      	movs	r1, #2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff fa16 	bl	800423c <LL_ADC_GetOffsetChannel>
 8004e10:	4603      	mov	r3, r0
 8004e12:	0e9b      	lsrs	r3, r3, #26
 8004e14:	f003 021f 	and.w	r2, r3, #31
 8004e18:	e01e      	b.n	8004e58 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2102      	movs	r1, #2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff fa0b 	bl	800423c <LL_ADC_GetOffsetChannel>
 8004e26:	4603      	mov	r3, r0
 8004e28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e30:	fa93 f3a3 	rbit	r3, r3
 8004e34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004e38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004e40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004e48:	2320      	movs	r3, #32
 8004e4a:	e004      	b.n	8004e56 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e50:	fab3 f383 	clz	r3, r3
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d105      	bne.n	8004e70 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	0e9b      	lsrs	r3, r3, #26
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	e014      	b.n	8004e9a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e78:	fa93 f3a3 	rbit	r3, r3
 8004e7c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004e7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004e84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004e8c:	2320      	movs	r3, #32
 8004e8e:	e004      	b.n	8004e9a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004e90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e94:	fab3 f383 	clz	r3, r3
 8004e98:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d106      	bne.n	8004eac <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	2102      	movs	r1, #2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff f9de 	bl	8004268 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2103      	movs	r1, #3
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff f9c2 	bl	800423c <LL_ADC_GetOffsetChannel>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2103      	movs	r1, #3
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff f9b7 	bl	800423c <LL_ADC_GetOffsetChannel>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	0e9b      	lsrs	r3, r3, #26
 8004ed2:	f003 021f 	and.w	r2, r3, #31
 8004ed6:	e017      	b.n	8004f08 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2103      	movs	r1, #3
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff f9ac 	bl	800423c <LL_ADC_GetOffsetChannel>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004eea:	fa93 f3a3 	rbit	r3, r3
 8004eee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ef2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004ef4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004efa:	2320      	movs	r3, #32
 8004efc:	e003      	b.n	8004f06 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004efe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f00:	fab3 f383 	clz	r3, r3
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d105      	bne.n	8004f20 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	0e9b      	lsrs	r3, r3, #26
 8004f1a:	f003 031f 	and.w	r3, r3, #31
 8004f1e:	e011      	b.n	8004f44 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f28:	fa93 f3a3 	rbit	r3, r3
 8004f2c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004f2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f30:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004f32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004f38:	2320      	movs	r3, #32
 8004f3a:	e003      	b.n	8004f44 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004f3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f3e:	fab3 f383 	clz	r3, r3
 8004f42:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d106      	bne.n	8004f56 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2103      	movs	r1, #3
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff f989 	bl	8004268 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff fa54 	bl	8004408 <LL_ADC_IsEnabled>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f040 8140 	bne.w	80051e8 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6818      	ldr	r0, [r3, #0]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	6819      	ldr	r1, [r3, #0]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	461a      	mov	r2, r3
 8004f76:	f7ff fa15 	bl	80043a4 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	4a8f      	ldr	r2, [pc, #572]	@ (80051bc <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	f040 8131 	bne.w	80051e8 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	0e9b      	lsrs	r3, r3, #26
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	2b09      	cmp	r3, #9
 8004fa4:	bf94      	ite	ls
 8004fa6:	2301      	movls	r3, #1
 8004fa8:	2300      	movhi	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	e019      	b.n	8004fe2 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fb6:	fa93 f3a3 	rbit	r3, r3
 8004fba:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004fc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004fc6:	2320      	movs	r3, #32
 8004fc8:	e003      	b.n	8004fd2 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004fca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fcc:	fab3 f383 	clz	r3, r3
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	2b09      	cmp	r3, #9
 8004fda:	bf94      	ite	ls
 8004fdc:	2301      	movls	r3, #1
 8004fde:	2300      	movhi	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d079      	beq.n	80050da <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d107      	bne.n	8005002 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	0e9b      	lsrs	r3, r3, #26
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	069b      	lsls	r3, r3, #26
 8004ffc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005000:	e015      	b.n	800502e <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800500a:	fa93 f3a3 	rbit	r3, r3
 800500e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005010:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005012:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005014:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 800501a:	2320      	movs	r3, #32
 800501c:	e003      	b.n	8005026 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 800501e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005020:	fab3 f383 	clz	r3, r3
 8005024:	b2db      	uxtb	r3, r3
 8005026:	3301      	adds	r3, #1
 8005028:	069b      	lsls	r3, r3, #26
 800502a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005036:	2b00      	cmp	r3, #0
 8005038:	d109      	bne.n	800504e <HAL_ADCEx_InjectedConfigChannel+0x712>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	0e9b      	lsrs	r3, r3, #26
 8005040:	3301      	adds	r3, #1
 8005042:	f003 031f 	and.w	r3, r3, #31
 8005046:	2101      	movs	r1, #1
 8005048:	fa01 f303 	lsl.w	r3, r1, r3
 800504c:	e017      	b.n	800507e <HAL_ADCEx_InjectedConfigChannel+0x742>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005056:	fa93 f3a3 	rbit	r3, r3
 800505a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800505c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800505e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8005066:	2320      	movs	r3, #32
 8005068:	e003      	b.n	8005072 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 800506a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800506c:	fab3 f383 	clz	r3, r3
 8005070:	b2db      	uxtb	r3, r3
 8005072:	3301      	adds	r3, #1
 8005074:	f003 031f 	and.w	r3, r3, #31
 8005078:	2101      	movs	r1, #1
 800507a:	fa01 f303 	lsl.w	r3, r1, r3
 800507e:	ea42 0103 	orr.w	r1, r2, r3
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10a      	bne.n	80050a4 <HAL_ADCEx_InjectedConfigChannel+0x768>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	0e9b      	lsrs	r3, r3, #26
 8005094:	3301      	adds	r3, #1
 8005096:	f003 021f 	and.w	r2, r3, #31
 800509a:	4613      	mov	r3, r2
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	4413      	add	r3, r2
 80050a0:	051b      	lsls	r3, r3, #20
 80050a2:	e018      	b.n	80050d6 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ac:	fa93 f3a3 	rbit	r3, r3
 80050b0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80050b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80050b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 80050bc:	2320      	movs	r3, #32
 80050be:	e003      	b.n	80050c8 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 80050c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c2:	fab3 f383 	clz	r3, r3
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	3301      	adds	r3, #1
 80050ca:	f003 021f 	and.w	r2, r3, #31
 80050ce:	4613      	mov	r3, r2
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	4413      	add	r3, r2
 80050d4:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050d6:	430b      	orrs	r3, r1
 80050d8:	e081      	b.n	80051de <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d107      	bne.n	80050f6 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	0e9b      	lsrs	r3, r3, #26
 80050ec:	3301      	adds	r3, #1
 80050ee:	069b      	lsls	r3, r3, #26
 80050f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050f4:	e015      	b.n	8005122 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fe:	fa93 f3a3 	rbit	r3, r3
 8005102:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 800510e:	2320      	movs	r3, #32
 8005110:	e003      	b.n	800511a <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8005112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005114:	fab3 f383 	clz	r3, r3
 8005118:	b2db      	uxtb	r3, r3
 800511a:	3301      	adds	r3, #1
 800511c:	069b      	lsls	r3, r3, #26
 800511e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800512a:	2b00      	cmp	r3, #0
 800512c:	d109      	bne.n	8005142 <HAL_ADCEx_InjectedConfigChannel+0x806>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	0e9b      	lsrs	r3, r3, #26
 8005134:	3301      	adds	r3, #1
 8005136:	f003 031f 	and.w	r3, r3, #31
 800513a:	2101      	movs	r1, #1
 800513c:	fa01 f303 	lsl.w	r3, r1, r3
 8005140:	e017      	b.n	8005172 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	fa93 f3a3 	rbit	r3, r3
 800514e:	61bb      	str	r3, [r7, #24]
  return result;
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 800515a:	2320      	movs	r3, #32
 800515c:	e003      	b.n	8005166 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	fab3 f383 	clz	r3, r3
 8005164:	b2db      	uxtb	r3, r3
 8005166:	3301      	adds	r3, #1
 8005168:	f003 031f 	and.w	r3, r3, #31
 800516c:	2101      	movs	r1, #1
 800516e:	fa01 f303 	lsl.w	r3, r1, r3
 8005172:	ea42 0103 	orr.w	r1, r2, r3
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10d      	bne.n	800519e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	0e9b      	lsrs	r3, r3, #26
 8005188:	3301      	adds	r3, #1
 800518a:	f003 021f 	and.w	r2, r3, #31
 800518e:	4613      	mov	r3, r2
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	4413      	add	r3, r2
 8005194:	3b1e      	subs	r3, #30
 8005196:	051b      	lsls	r3, r3, #20
 8005198:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800519c:	e01e      	b.n	80051dc <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	fa93 f3a3 	rbit	r3, r3
 80051aa:	60fb      	str	r3, [r7, #12]
  return result;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d104      	bne.n	80051c0 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 80051b6:	2320      	movs	r3, #32
 80051b8:	e006      	b.n	80051c8 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 80051ba:	bf00      	nop
 80051bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	fab3 f383 	clz	r3, r3
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	3301      	adds	r3, #1
 80051ca:	f003 021f 	and.w	r2, r3, #31
 80051ce:	4613      	mov	r3, r2
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	4413      	add	r3, r2
 80051d4:	3b1e      	subs	r3, #30
 80051d6:	051b      	lsls	r3, r3, #20
 80051d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051dc:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051e2:	4619      	mov	r1, r3
 80051e4:	f7ff f8b2 	bl	800434c <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	4b3a      	ldr	r3, [pc, #232]	@ (80052d8 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d067      	beq.n	80052c4 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051f4:	4839      	ldr	r0, [pc, #228]	@ (80052dc <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80051f6:	f7fe ffef 	bl	80041d8 <LL_ADC_GetCommonPathInternalCh>
 80051fa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a37      	ldr	r2, [pc, #220]	@ (80052e0 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d004      	beq.n	8005212 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a35      	ldr	r2, [pc, #212]	@ (80052e4 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d127      	bne.n	8005262 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005212:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005216:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d121      	bne.n	8005262 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005226:	d14d      	bne.n	80052c4 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005228:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800522c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005230:	4619      	mov	r1, r3
 8005232:	482a      	ldr	r0, [pc, #168]	@ (80052dc <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8005234:	f7fe ffbd 	bl	80041b2 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8005238:	4b2b      	ldr	r3, [pc, #172]	@ (80052e8 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	099b      	lsrs	r3, r3, #6
 800523e:	4a2b      	ldr	r2, [pc, #172]	@ (80052ec <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8005240:	fba2 2303 	umull	r2, r3, r2, r3
 8005244:	099a      	lsrs	r2, r3, #6
 8005246:	4613      	mov	r3, r2
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	4413      	add	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8005250:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8005252:	e002      	b.n	800525a <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	3b01      	subs	r3, #1
 8005258:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1f9      	bne.n	8005254 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005260:	e030      	b.n	80052c4 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a22      	ldr	r2, [pc, #136]	@ (80052f0 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d113      	bne.n	8005294 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800526c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005270:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10d      	bne.n	8005294 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1d      	ldr	r2, [pc, #116]	@ (80052f4 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d020      	beq.n	80052c4 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005282:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005286:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800528a:	4619      	mov	r1, r3
 800528c:	4813      	ldr	r0, [pc, #76]	@ (80052dc <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 800528e:	f7fe ff90 	bl	80041b2 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005292:	e017      	b.n	80052c4 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a17      	ldr	r2, [pc, #92]	@ (80052f8 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d112      	bne.n	80052c4 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800529e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10c      	bne.n	80052c4 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a11      	ldr	r2, [pc, #68]	@ (80052f4 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d007      	beq.n	80052c4 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80052bc:	4619      	mov	r1, r3
 80052be:	4807      	ldr	r0, [pc, #28]	@ (80052dc <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80052c0:	f7fe ff77 	bl	80041b2 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80052cc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	37d8      	adds	r7, #216	@ 0xd8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	80080000 	.word	0x80080000
 80052dc:	50000300 	.word	0x50000300
 80052e0:	c3210000 	.word	0xc3210000
 80052e4:	90c00010 	.word	0x90c00010
 80052e8:	20000000 	.word	0x20000000
 80052ec:	053e2d63 	.word	0x053e2d63
 80052f0:	c7520000 	.word	0xc7520000
 80052f4:	50000100 	.word	0x50000100
 80052f8:	cb840000 	.word	0xcb840000

080052fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80052fc:	b590      	push	{r4, r7, lr}
 80052fe:	b0a1      	sub	sp, #132	@ 0x84
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005316:	2302      	movs	r3, #2
 8005318:	e08b      	b.n	8005432 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005322:	2300      	movs	r3, #0
 8005324:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005326:	2300      	movs	r3, #0
 8005328:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005332:	d102      	bne.n	800533a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005334:	4b41      	ldr	r3, [pc, #260]	@ (800543c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005336:	60bb      	str	r3, [r7, #8]
 8005338:	e001      	b.n	800533e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800533a:	2300      	movs	r3, #0
 800533c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10b      	bne.n	800535c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005348:	f043 0220 	orr.w	r2, r3, #32
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e06a      	b.n	8005432 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff f892 	bl	8004488 <LL_ADC_REG_IsConversionOngoing>
 8005364:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff f88c 	bl	8004488 <LL_ADC_REG_IsConversionOngoing>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d14c      	bne.n	8005410 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005376:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005378:	2b00      	cmp	r3, #0
 800537a:	d149      	bne.n	8005410 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800537c:	4b30      	ldr	r3, [pc, #192]	@ (8005440 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800537e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d028      	beq.n	80053da <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005388:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	6859      	ldr	r1, [r3, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800539a:	035b      	lsls	r3, r3, #13
 800539c:	430b      	orrs	r3, r1
 800539e:	431a      	orrs	r2, r3
 80053a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053a4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80053a8:	f7ff f82e 	bl	8004408 <LL_ADC_IsEnabled>
 80053ac:	4604      	mov	r4, r0
 80053ae:	4823      	ldr	r0, [pc, #140]	@ (800543c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80053b0:	f7ff f82a 	bl	8004408 <LL_ADC_IsEnabled>
 80053b4:	4603      	mov	r3, r0
 80053b6:	4323      	orrs	r3, r4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d133      	bne.n	8005424 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80053bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80053c4:	f023 030f 	bic.w	r3, r3, #15
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	6811      	ldr	r1, [r2, #0]
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	6892      	ldr	r2, [r2, #8]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	431a      	orrs	r2, r3
 80053d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053d6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80053d8:	e024      	b.n	8005424 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80053da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053e4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053e6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80053ea:	f7ff f80d 	bl	8004408 <LL_ADC_IsEnabled>
 80053ee:	4604      	mov	r4, r0
 80053f0:	4812      	ldr	r0, [pc, #72]	@ (800543c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80053f2:	f7ff f809 	bl	8004408 <LL_ADC_IsEnabled>
 80053f6:	4603      	mov	r3, r0
 80053f8:	4323      	orrs	r3, r4
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d112      	bne.n	8005424 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80053fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005406:	f023 030f 	bic.w	r3, r3, #15
 800540a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800540c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800540e:	e009      	b.n	8005424 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005414:	f043 0220 	orr.w	r2, r3, #32
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005422:	e000      	b.n	8005426 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005424:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800542e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005432:	4618      	mov	r0, r3
 8005434:	3784      	adds	r7, #132	@ 0x84
 8005436:	46bd      	mov	sp, r7
 8005438:	bd90      	pop	{r4, r7, pc}
 800543a:	bf00      	nop
 800543c:	50000100 	.word	0x50000100
 8005440:	50000300 	.word	0x50000300

08005444 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800544c:	4b05      	ldr	r3, [pc, #20]	@ (8005464 <LL_EXTI_EnableIT_0_31+0x20>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4904      	ldr	r1, [pc, #16]	@ (8005464 <LL_EXTI_EnableIT_0_31+0x20>)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4313      	orrs	r3, r2
 8005456:	600b      	str	r3, [r1, #0]
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	40010400 	.word	0x40010400

08005468 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005470:	4b06      	ldr	r3, [pc, #24]	@ (800548c <LL_EXTI_DisableIT_0_31+0x24>)
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	43db      	mvns	r3, r3
 8005478:	4904      	ldr	r1, [pc, #16]	@ (800548c <LL_EXTI_DisableIT_0_31+0x24>)
 800547a:	4013      	ands	r3, r2
 800547c:	600b      	str	r3, [r1, #0]
}
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40010400 	.word	0x40010400

08005490 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005498:	4b05      	ldr	r3, [pc, #20]	@ (80054b0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	4904      	ldr	r1, [pc, #16]	@ (80054b0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	604b      	str	r3, [r1, #4]

}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	40010400 	.word	0x40010400

080054b4 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80054bc:	4b06      	ldr	r3, [pc, #24]	@ (80054d8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	43db      	mvns	r3, r3
 80054c4:	4904      	ldr	r1, [pc, #16]	@ (80054d8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80054c6:	4013      	ands	r3, r2
 80054c8:	604b      	str	r3, [r1, #4]
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40010400 	.word	0x40010400

080054dc <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80054e4:	4b05      	ldr	r3, [pc, #20]	@ (80054fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	4904      	ldr	r1, [pc, #16]	@ (80054fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	608b      	str	r3, [r1, #8]

}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	40010400 	.word	0x40010400

08005500 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005508:	4b06      	ldr	r3, [pc, #24]	@ (8005524 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	43db      	mvns	r3, r3
 8005510:	4904      	ldr	r1, [pc, #16]	@ (8005524 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005512:	4013      	ands	r3, r2
 8005514:	608b      	str	r3, [r1, #8]

}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40010400 	.word	0x40010400

08005528 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005530:	4b05      	ldr	r3, [pc, #20]	@ (8005548 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	4904      	ldr	r1, [pc, #16]	@ (8005548 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4313      	orrs	r3, r2
 800553a:	60cb      	str	r3, [r1, #12]
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	40010400 	.word	0x40010400

0800554c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005554:	4b06      	ldr	r3, [pc, #24]	@ (8005570 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	43db      	mvns	r3, r3
 800555c:	4904      	ldr	r1, [pc, #16]	@ (8005570 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800555e:	4013      	ands	r3, r2
 8005560:	60cb      	str	r3, [r1, #12]
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40010400 	.word	0x40010400

08005574 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800557c:	4b07      	ldr	r3, [pc, #28]	@ (800559c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800557e:	695a      	ldr	r2, [r3, #20]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4013      	ands	r3, r2
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	429a      	cmp	r2, r3
 8005588:	d101      	bne.n	800558e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	40010400 	.word	0x40010400

080055a0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80055a8:	4a04      	ldr	r2, [pc, #16]	@ (80055bc <LL_EXTI_ClearFlag_0_31+0x1c>)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6153      	str	r3, [r2, #20]
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40010400 	.word	0x40010400

080055c0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d102      	bne.n	80055dc <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	77fb      	strb	r3, [r7, #31]
 80055da:	e0bc      	b.n	8005756 <HAL_COMP_Init+0x196>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055ea:	d102      	bne.n	80055f2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	77fb      	strb	r3, [r7, #31]
 80055f0:	e0b1      	b.n	8005756 <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	7f5b      	ldrb	r3, [r3, #29]
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d108      	bne.n	800560e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7fb ff6f 	bl	80014ec <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005618:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	4b48      	ldr	r3, [pc, #288]	@ (8005760 <HAL_COMP_Init+0x1a0>)
 8005640:	4013      	ands	r3, r2
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	6979      	ldr	r1, [r7, #20]
 8005648:	430b      	orrs	r3, r1
 800564a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d016      	beq.n	8005688 <HAL_COMP_Init+0xc8>
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d113      	bne.n	8005688 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005660:	4b40      	ldr	r3, [pc, #256]	@ (8005764 <HAL_COMP_Init+0x1a4>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	099b      	lsrs	r3, r3, #6
 8005666:	4a40      	ldr	r2, [pc, #256]	@ (8005768 <HAL_COMP_Init+0x1a8>)
 8005668:	fba2 2303 	umull	r2, r3, r2, r3
 800566c:	099b      	lsrs	r3, r3, #6
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800567a:	e002      	b.n	8005682 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3b01      	subs	r3, #1
 8005680:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1f9      	bne.n	800567c <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a37      	ldr	r2, [pc, #220]	@ (800576c <HAL_COMP_Init+0x1ac>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d012      	beq.n	80056b8 <HAL_COMP_Init+0xf8>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a36      	ldr	r2, [pc, #216]	@ (8005770 <HAL_COMP_Init+0x1b0>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00a      	beq.n	80056b2 <HAL_COMP_Init+0xf2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a34      	ldr	r2, [pc, #208]	@ (8005774 <HAL_COMP_Init+0x1b4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d102      	bne.n	80056ac <HAL_COMP_Init+0xec>
 80056a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80056aa:	e007      	b.n	80056bc <HAL_COMP_Init+0xfc>
 80056ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80056b0:	e004      	b.n	80056bc <HAL_COMP_Init+0xfc>
 80056b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80056b6:	e001      	b.n	80056bc <HAL_COMP_Init+0xfc>
 80056b8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80056bc:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d037      	beq.n	800573a <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	f003 0310 	and.w	r3, r3, #16
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80056d6:	6938      	ldr	r0, [r7, #16]
 80056d8:	f7ff ff00 	bl	80054dc <LL_EXTI_EnableRisingTrig_0_31>
 80056dc:	e002      	b.n	80056e4 <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80056de:	6938      	ldr	r0, [r7, #16]
 80056e0:	f7ff ff0e 	bl	8005500 <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f003 0320 	and.w	r3, r3, #32
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80056f0:	6938      	ldr	r0, [r7, #16]
 80056f2:	f7ff ff19 	bl	8005528 <LL_EXTI_EnableFallingTrig_0_31>
 80056f6:	e002      	b.n	80056fe <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80056f8:	6938      	ldr	r0, [r7, #16]
 80056fa:	f7ff ff27 	bl	800554c <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 80056fe:	6938      	ldr	r0, [r7, #16]
 8005700:	f7ff ff4e 	bl	80055a0 <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 8005710:	6938      	ldr	r0, [r7, #16]
 8005712:	f7ff febd 	bl	8005490 <LL_EXTI_EnableEvent_0_31>
 8005716:	e002      	b.n	800571e <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 8005718:	6938      	ldr	r0, [r7, #16]
 800571a:	f7ff fecb 	bl	80054b4 <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 800572a:	6938      	ldr	r0, [r7, #16]
 800572c:	f7ff fe8a 	bl	8005444 <LL_EXTI_EnableIT_0_31>
 8005730:	e009      	b.n	8005746 <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 8005732:	6938      	ldr	r0, [r7, #16]
 8005734:	f7ff fe98 	bl	8005468 <LL_EXTI_DisableIT_0_31>
 8005738:	e005      	b.n	8005746 <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 800573a:	6938      	ldr	r0, [r7, #16]
 800573c:	f7ff feba 	bl	80054b4 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 8005740:	6938      	ldr	r0, [r7, #16]
 8005742:	f7ff fe91 	bl	8005468 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	7f5b      	ldrb	r3, [r3, #29]
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d102      	bne.n	8005756 <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8005756:	7ffb      	ldrb	r3, [r7, #31]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3720      	adds	r7, #32
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	ff007e0f 	.word	0xff007e0f
 8005764:	20000000 	.word	0x20000000
 8005768:	053e2d63 	.word	0x053e2d63
 800576c:	40010200 	.word	0x40010200
 8005770:	40010204 	.word	0x40010204
 8005774:	40010208 	.word	0x40010208

08005778 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005780:	2300      	movs	r3, #0
 8005782:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d102      	bne.n	8005794 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	73fb      	strb	r3, [r7, #15]
 8005792:	e02e      	b.n	80057f2 <HAL_COMP_Start+0x7a>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800579e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057a2:	d102      	bne.n	80057aa <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
 80057a8:	e023      	b.n	80057f2 <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	7f5b      	ldrb	r3, [r3, #29]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d11c      	bne.n	80057ee <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 80057ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005800 <HAL_COMP_Start+0x88>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a0d      	ldr	r2, [pc, #52]	@ (8005804 <HAL_COMP_Start+0x8c>)
 80057d0:	fba2 2303 	umull	r2, r3, r2, r3
 80057d4:	0cda      	lsrs	r2, r3, #19
 80057d6:	4613      	mov	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80057de:	e002      	b.n	80057e6 <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	3b01      	subs	r3, #1
 80057e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1f9      	bne.n	80057e0 <HAL_COMP_Start+0x68>
 80057ec:	e001      	b.n	80057f2 <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	20000000 	.word	0x20000000
 8005804:	431bde83 	.word	0x431bde83

08005808 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a17      	ldr	r2, [pc, #92]	@ (8005874 <HAL_COMP_IRQHandler+0x6c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d012      	beq.n	8005840 <HAL_COMP_IRQHandler+0x38>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a16      	ldr	r2, [pc, #88]	@ (8005878 <HAL_COMP_IRQHandler+0x70>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00a      	beq.n	800583a <HAL_COMP_IRQHandler+0x32>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a14      	ldr	r2, [pc, #80]	@ (800587c <HAL_COMP_IRQHandler+0x74>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d102      	bne.n	8005834 <HAL_COMP_IRQHandler+0x2c>
 800582e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005832:	e007      	b.n	8005844 <HAL_COMP_IRQHandler+0x3c>
 8005834:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005838:	e004      	b.n	8005844 <HAL_COMP_IRQHandler+0x3c>
 800583a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800583e:	e001      	b.n	8005844 <HAL_COMP_IRQHandler+0x3c>
 8005840:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005844:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if (LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800584a:	68b8      	ldr	r0, [r7, #8]
 800584c:	f7ff fe92 	bl	8005574 <LL_EXTI_IsActiveFlag_0_31>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 8005856:	2301      	movs	r3, #1
 8005858:	60fb      	str	r3, [r7, #12]
  }
#endif /* COMP7 */

  if (tmp_comp_exti_flag_set != 0UL)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <HAL_COMP_IRQHandler+0x64>
    else
    {
      LL_EXTI_ClearFlag_0_31(exti_line);
    }
#else
    LL_EXTI_ClearFlag_0_31(exti_line);
 8005860:	68b8      	ldr	r0, [r7, #8]
 8005862:	f7ff fe9d 	bl	80055a0 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f80a 	bl	8005880 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 800586c:	bf00      	nop
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40010200 	.word	0x40010200
 8005878:	40010204 	.word	0x40010204
 800587c:	40010208 	.word	0x40010208

08005880 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058a4:	4b0c      	ldr	r3, [pc, #48]	@ (80058d8 <__NVIC_SetPriorityGrouping+0x44>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80058b0:	4013      	ands	r3, r2
 80058b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80058c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058c6:	4a04      	ldr	r2, [pc, #16]	@ (80058d8 <__NVIC_SetPriorityGrouping+0x44>)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	60d3      	str	r3, [r2, #12]
}
 80058cc:	bf00      	nop
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	e000ed00 	.word	0xe000ed00

080058dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058e0:	4b04      	ldr	r3, [pc, #16]	@ (80058f4 <__NVIC_GetPriorityGrouping+0x18>)
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	0a1b      	lsrs	r3, r3, #8
 80058e6:	f003 0307 	and.w	r3, r3, #7
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	e000ed00 	.word	0xe000ed00

080058f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	4603      	mov	r3, r0
 8005900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005906:	2b00      	cmp	r3, #0
 8005908:	db0b      	blt.n	8005922 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800590a:	79fb      	ldrb	r3, [r7, #7]
 800590c:	f003 021f 	and.w	r2, r3, #31
 8005910:	4907      	ldr	r1, [pc, #28]	@ (8005930 <__NVIC_EnableIRQ+0x38>)
 8005912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	2001      	movs	r0, #1
 800591a:	fa00 f202 	lsl.w	r2, r0, r2
 800591e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	e000e100 	.word	0xe000e100

08005934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	4603      	mov	r3, r0
 800593c:	6039      	str	r1, [r7, #0]
 800593e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005944:	2b00      	cmp	r3, #0
 8005946:	db0a      	blt.n	800595e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	b2da      	uxtb	r2, r3
 800594c:	490c      	ldr	r1, [pc, #48]	@ (8005980 <__NVIC_SetPriority+0x4c>)
 800594e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005952:	0112      	lsls	r2, r2, #4
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	440b      	add	r3, r1
 8005958:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800595c:	e00a      	b.n	8005974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	b2da      	uxtb	r2, r3
 8005962:	4908      	ldr	r1, [pc, #32]	@ (8005984 <__NVIC_SetPriority+0x50>)
 8005964:	79fb      	ldrb	r3, [r7, #7]
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	3b04      	subs	r3, #4
 800596c:	0112      	lsls	r2, r2, #4
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	440b      	add	r3, r1
 8005972:	761a      	strb	r2, [r3, #24]
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	e000e100 	.word	0xe000e100
 8005984:	e000ed00 	.word	0xe000ed00

08005988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005988:	b480      	push	{r7}
 800598a:	b089      	sub	sp, #36	@ 0x24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	f1c3 0307 	rsb	r3, r3, #7
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	bf28      	it	cs
 80059a6:	2304      	movcs	r3, #4
 80059a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	3304      	adds	r3, #4
 80059ae:	2b06      	cmp	r3, #6
 80059b0:	d902      	bls.n	80059b8 <NVIC_EncodePriority+0x30>
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	3b03      	subs	r3, #3
 80059b6:	e000      	b.n	80059ba <NVIC_EncodePriority+0x32>
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059bc:	f04f 32ff 	mov.w	r2, #4294967295
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	43da      	mvns	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	401a      	ands	r2, r3
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059d0:	f04f 31ff 	mov.w	r1, #4294967295
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	fa01 f303 	lsl.w	r3, r1, r3
 80059da:	43d9      	mvns	r1, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059e0:	4313      	orrs	r3, r2
         );
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3724      	adds	r7, #36	@ 0x24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
	...

080059f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a00:	d301      	bcc.n	8005a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a02:	2301      	movs	r3, #1
 8005a04:	e00f      	b.n	8005a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a06:	4a0a      	ldr	r2, [pc, #40]	@ (8005a30 <SysTick_Config+0x40>)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a0e:	210f      	movs	r1, #15
 8005a10:	f04f 30ff 	mov.w	r0, #4294967295
 8005a14:	f7ff ff8e 	bl	8005934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a18:	4b05      	ldr	r3, [pc, #20]	@ (8005a30 <SysTick_Config+0x40>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a1e:	4b04      	ldr	r3, [pc, #16]	@ (8005a30 <SysTick_Config+0x40>)
 8005a20:	2207      	movs	r2, #7
 8005a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	e000e010 	.word	0xe000e010

08005a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7ff ff29 	bl	8005894 <__NVIC_SetPriorityGrouping>
}
 8005a42:	bf00      	nop
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b086      	sub	sp, #24
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	4603      	mov	r3, r0
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	607a      	str	r2, [r7, #4]
 8005a56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a58:	f7ff ff40 	bl	80058dc <__NVIC_GetPriorityGrouping>
 8005a5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	68b9      	ldr	r1, [r7, #8]
 8005a62:	6978      	ldr	r0, [r7, #20]
 8005a64:	f7ff ff90 	bl	8005988 <NVIC_EncodePriority>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a6e:	4611      	mov	r1, r2
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff ff5f 	bl	8005934 <__NVIC_SetPriority>
}
 8005a76:	bf00      	nop
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b082      	sub	sp, #8
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	4603      	mov	r3, r0
 8005a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff ff33 	bl	80058f8 <__NVIC_EnableIRQ>
}
 8005a92:	bf00      	nop
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b082      	sub	sp, #8
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7ff ffa4 	bl	80059f0 <SysTick_Config>
 8005aa8:	4603      	mov	r3, r0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b082      	sub	sp, #8
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e014      	b.n	8005aee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	791b      	ldrb	r3, [r3, #4]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d105      	bne.n	8005ada <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7fb fdb1 	bl	800163c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2202      	movs	r2, #2
 8005ade:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e056      	b.n	8005bba <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	795b      	ldrb	r3, [r3, #5]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_DAC_Start+0x20>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e050      	b.n	8005bba <HAL_DAC_Start+0xc2>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2202      	movs	r2, #2
 8005b22:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6819      	ldr	r1, [r3, #0]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	f003 0310 	and.w	r3, r3, #16
 8005b30:	2201      	movs	r2, #1
 8005b32:	409a      	lsls	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b3c:	4b22      	ldr	r3, [pc, #136]	@ (8005bc8 <HAL_DAC_Start+0xd0>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	099b      	lsrs	r3, r3, #6
 8005b42:	4a22      	ldr	r2, [pc, #136]	@ (8005bcc <HAL_DAC_Start+0xd4>)
 8005b44:	fba2 2303 	umull	r2, r3, r2, r3
 8005b48:	099b      	lsrs	r3, r3, #6
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005b4e:	e002      	b.n	8005b56 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1f9      	bne.n	8005b50 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10f      	bne.n	8005b82 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d11d      	bne.n	8005bac <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0201 	orr.w	r2, r2, #1
 8005b7e:	605a      	str	r2, [r3, #4]
 8005b80:	e014      	b.n	8005bac <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	f003 0310 	and.w	r3, r3, #16
 8005b92:	2102      	movs	r1, #2
 8005b94:	fa01 f303 	lsl.w	r3, r1, r3
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d107      	bne.n	8005bac <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0202 	orr.w	r2, r2, #2
 8005baa:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20000000 	.word	0x20000000
 8005bcc:	053e2d63 	.word	0x053e2d63

08005bd0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e018      	b.n	8005c1e <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d105      	bne.n	8005c0a <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4413      	add	r3, r2
 8005c04:	3308      	adds	r3, #8
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	e004      	b.n	8005c14 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4413      	add	r3, r2
 8005c10:	3314      	adds	r3, #20
 8005c12:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	461a      	mov	r2, r3
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	371c      	adds	r7, #28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
	...

08005c2c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b08a      	sub	sp, #40	@ 0x28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <HAL_DAC_ConfigChannel+0x1c>
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e19e      	b.n	8005f8a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	795b      	ldrb	r3, [r3, #5]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_DAC_ConfigChannel+0x2c>
 8005c54:	2302      	movs	r3, #2
 8005c56:	e198      	b.n	8005f8a <HAL_DAC_ConfigChannel+0x35e>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2202      	movs	r2, #2
 8005c62:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d17a      	bne.n	8005d62 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005c6c:	f7fc ff90 	bl	8002b90 <HAL_GetTick>
 8005c70:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d13d      	bne.n	8005cf4 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005c78:	e018      	b.n	8005cac <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005c7a:	f7fc ff89 	bl	8002b90 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d911      	bls.n	8005cac <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f043 0208 	orr.w	r2, r3, #8
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2203      	movs	r2, #3
 8005ca6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e16e      	b.n	8005f8a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1df      	bne.n	8005c7a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005cc2:	641a      	str	r2, [r3, #64]	@ 0x40
 8005cc4:	e020      	b.n	8005d08 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005cc6:	f7fc ff63 	bl	8002b90 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d90f      	bls.n	8005cf4 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	da0a      	bge.n	8005cf4 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f043 0208 	orr.w	r2, r3, #8
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2203      	movs	r2, #3
 8005cee:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e14a      	b.n	8005f8a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	dbe3      	blt.n	8005cc6 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d06:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f003 0310 	and.w	r3, r3, #16
 8005d14:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005d18:	fa01 f303 	lsl.w	r3, r1, r3
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	ea02 0103 	and.w	r1, r2, r3
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f003 0310 	and.w	r3, r3, #16
 8005d2c:	409a      	lsls	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f003 0310 	and.w	r3, r3, #16
 8005d42:	21ff      	movs	r1, #255	@ 0xff
 8005d44:	fa01 f303 	lsl.w	r3, r1, r3
 8005d48:	43db      	mvns	r3, r3
 8005d4a:	ea02 0103 	and.w	r1, r2, r3
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f003 0310 	and.w	r3, r3, #16
 8005d58:	409a      	lsls	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d11d      	bne.n	8005da6 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d70:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f003 0310 	and.w	r3, r3, #16
 8005d78:	221f      	movs	r2, #31
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d82:	4013      	ands	r3, r2
 8005d84:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f003 0310 	and.w	r3, r3, #16
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005da4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dac:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f003 0310 	and.w	r3, r3, #16
 8005db4:	2207      	movs	r2, #7
 8005db6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dba:	43db      	mvns	r3, r3
 8005dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d102      	bne.n	8005dd0 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	623b      	str	r3, [r7, #32]
 8005dce:	e00f      	b.n	8005df0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d102      	bne.n	8005dde <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	623b      	str	r3, [r7, #32]
 8005ddc:	e008      	b.n	8005df0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d102      	bne.n	8005dec <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005de6:	2301      	movs	r3, #1
 8005de8:	623b      	str	r3, [r7, #32]
 8005dea:	e001      	b.n	8005df0 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005dec:	2300      	movs	r3, #0
 8005dee:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	6a3a      	ldr	r2, [r7, #32]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f003 0310 	and.w	r3, r3, #16
 8005e06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0e:	43db      	mvns	r3, r3
 8005e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e12:	4013      	ands	r3, r2
 8005e14:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	791b      	ldrb	r3, [r3, #4]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d102      	bne.n	8005e24 <HAL_DAC_ConfigChannel+0x1f8>
 8005e1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005e22:	e000      	b.n	8005e26 <HAL_DAC_ConfigChannel+0x1fa>
 8005e24:	2300      	movs	r3, #0
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f003 0310 	and.w	r3, r3, #16
 8005e32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e36:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3a:	43db      	mvns	r3, r3
 8005e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e3e:	4013      	ands	r3, r2
 8005e40:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	795b      	ldrb	r3, [r3, #5]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d102      	bne.n	8005e50 <HAL_DAC_ConfigChannel+0x224>
 8005e4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e4e:	e000      	b.n	8005e52 <HAL_DAC_ConfigChannel+0x226>
 8005e50:	2300      	movs	r3, #0
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d114      	bne.n	8005e92 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005e68:	f001 fae0 	bl	800742c <HAL_RCC_GetHCLKFreq>
 8005e6c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	4a48      	ldr	r2, [pc, #288]	@ (8005f94 <HAL_DAC_ConfigChannel+0x368>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d904      	bls.n	8005e80 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e7e:	e00f      	b.n	8005ea0 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4a45      	ldr	r2, [pc, #276]	@ (8005f98 <HAL_DAC_ConfigChannel+0x36c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d90a      	bls.n	8005e9e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e90:	e006      	b.n	8005ea0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e9c:	e000      	b.n	8005ea0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005e9e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f003 0310 	and.w	r3, r3, #16
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6819      	ldr	r1, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f003 0310 	and.w	r3, r3, #16
 8005ec6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005eca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ece:	43da      	mvns	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	400a      	ands	r2, r1
 8005ed6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f003 0310 	and.w	r3, r3, #16
 8005ee6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005eea:	fa02 f303 	lsl.w	r3, r2, r3
 8005eee:	43db      	mvns	r3, r3
 8005ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f003 0310 	and.w	r3, r3, #16
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	fa02 f303 	lsl.w	r3, r2, r3
 8005f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f14:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6819      	ldr	r1, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f003 0310 	and.w	r3, r3, #16
 8005f22:	22c0      	movs	r2, #192	@ 0xc0
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	43da      	mvns	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	400a      	ands	r2, r1
 8005f30:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	089b      	lsrs	r3, r3, #2
 8005f38:	f003 030f 	and.w	r3, r3, #15
 8005f3c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	089b      	lsrs	r3, r3, #2
 8005f44:	021b      	lsls	r3, r3, #8
 8005f46:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005f60:	fa01 f303 	lsl.w	r3, r1, r3
 8005f64:	43db      	mvns	r3, r3
 8005f66:	ea02 0103 	and.w	r1, r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	409a      	lsls	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005f88:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3728      	adds	r7, #40	@ 0x28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	09896800 	.word	0x09896800
 8005f98:	04c4b400 	.word	0x04c4b400

08005f9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e08d      	b.n	80060ca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	4b47      	ldr	r3, [pc, #284]	@ (80060d4 <HAL_DMA_Init+0x138>)
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d80f      	bhi.n	8005fda <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	4b45      	ldr	r3, [pc, #276]	@ (80060d8 <HAL_DMA_Init+0x13c>)
 8005fc2:	4413      	add	r3, r2
 8005fc4:	4a45      	ldr	r2, [pc, #276]	@ (80060dc <HAL_DMA_Init+0x140>)
 8005fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fca:	091b      	lsrs	r3, r3, #4
 8005fcc:	009a      	lsls	r2, r3, #2
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a42      	ldr	r2, [pc, #264]	@ (80060e0 <HAL_DMA_Init+0x144>)
 8005fd6:	641a      	str	r2, [r3, #64]	@ 0x40
 8005fd8:	e00e      	b.n	8005ff8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	4b40      	ldr	r3, [pc, #256]	@ (80060e4 <HAL_DMA_Init+0x148>)
 8005fe2:	4413      	add	r3, r2
 8005fe4:	4a3d      	ldr	r2, [pc, #244]	@ (80060dc <HAL_DMA_Init+0x140>)
 8005fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fea:	091b      	lsrs	r3, r3, #4
 8005fec:	009a      	lsls	r2, r3, #2
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a3c      	ldr	r2, [pc, #240]	@ (80060e8 <HAL_DMA_Init+0x14c>)
 8005ff6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800600e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006012:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800601c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006028:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006034:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa76 	bl	800653c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006058:	d102      	bne.n	8006060 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006074:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d010      	beq.n	80060a0 <HAL_DMA_Init+0x104>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b04      	cmp	r3, #4
 8006084:	d80c      	bhi.n	80060a0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fa96 	bl	80065b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006090:	2200      	movs	r2, #0
 8006092:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800609c:	605a      	str	r2, [r3, #4]
 800609e:	e008      	b.n	80060b2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40020407 	.word	0x40020407
 80060d8:	bffdfff8 	.word	0xbffdfff8
 80060dc:	cccccccd 	.word	0xcccccccd
 80060e0:	40020000 	.word	0x40020000
 80060e4:	bffdfbf8 	.word	0xbffdfbf8
 80060e8:	40020400 	.word	0x40020400

080060ec <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_DMA_Start_IT+0x20>
 8006108:	2302      	movs	r3, #2
 800610a:	e066      	b.n	80061da <HAL_DMA_Start_IT+0xee>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b01      	cmp	r3, #1
 800611e:	d155      	bne.n	80061cc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0201 	bic.w	r2, r2, #1
 800613c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 f9bb 	bl	80064c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614e:	2b00      	cmp	r3, #0
 8006150:	d008      	beq.n	8006164 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 020e 	orr.w	r2, r2, #14
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	e00f      	b.n	8006184 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0204 	bic.w	r2, r2, #4
 8006172:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 020a 	orr.w	r2, r2, #10
 8006182:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d007      	beq.n	80061a2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800619c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061a0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061b8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f042 0201 	orr.w	r2, r2, #1
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	e005      	b.n	80061d8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80061d4:	2302      	movs	r3, #2
 80061d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b085      	sub	sp, #20
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d005      	beq.n	8006206 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2204      	movs	r2, #4
 80061fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	73fb      	strb	r3, [r7, #15]
 8006204:	e037      	b.n	8006276 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 020e 	bic.w	r2, r2, #14
 8006214:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006220:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006224:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0201 	bic.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623a:	f003 021f 	and.w	r2, r3, #31
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006242:	2101      	movs	r1, #1
 8006244:	fa01 f202 	lsl.w	r2, r1, r2
 8006248:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006252:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00c      	beq.n	8006276 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006266:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800626a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006274:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8006286:	7bfb      	ldrb	r3, [r7, #15]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d00d      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2204      	movs	r2, #4
 80062b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	73fb      	strb	r3, [r7, #15]
 80062c6:	e047      	b.n	8006358 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 020e 	bic.w	r2, r2, #14
 80062d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0201 	bic.w	r2, r2, #1
 80062e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062fc:	f003 021f 	and.w	r2, r3, #31
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006304:	2101      	movs	r1, #1
 8006306:	fa01 f202 	lsl.w	r2, r1, r2
 800630a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006314:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00c      	beq.n	8006338 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006328:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800632c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006336:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	4798      	blx	r3
    }
  }
  return status;
 8006358:	7bfb      	ldrb	r3, [r7, #15]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637e:	f003 031f 	and.w	r3, r3, #31
 8006382:	2204      	movs	r2, #4
 8006384:	409a      	lsls	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4013      	ands	r3, r2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d026      	beq.n	80063dc <HAL_DMA_IRQHandler+0x7a>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	d021      	beq.n	80063dc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d107      	bne.n	80063b6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0204 	bic.w	r2, r2, #4
 80063b4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ba:	f003 021f 	and.w	r2, r3, #31
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c2:	2104      	movs	r1, #4
 80063c4:	fa01 f202 	lsl.w	r2, r1, r2
 80063c8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d071      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80063da:	e06c      	b.n	80064b6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063e0:	f003 031f 	and.w	r3, r3, #31
 80063e4:	2202      	movs	r2, #2
 80063e6:	409a      	lsls	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4013      	ands	r3, r2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d02e      	beq.n	800644e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d029      	beq.n	800644e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10b      	bne.n	8006420 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 020a 	bic.w	r2, r2, #10
 8006416:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006424:	f003 021f 	and.w	r2, r3, #31
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642c:	2102      	movs	r1, #2
 800642e:	fa01 f202 	lsl.w	r2, r1, r2
 8006432:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d038      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800644c:	e033      	b.n	80064b6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006452:	f003 031f 	and.w	r3, r3, #31
 8006456:	2208      	movs	r2, #8
 8006458:	409a      	lsls	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4013      	ands	r3, r2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d02a      	beq.n	80064b8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	2b00      	cmp	r3, #0
 800646a:	d025      	beq.n	80064b8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 020e 	bic.w	r2, r2, #14
 800647a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006480:	f003 021f 	and.w	r2, r3, #31
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006488:	2101      	movs	r1, #1
 800648a:	fa01 f202 	lsl.w	r2, r1, r2
 800648e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d004      	beq.n	80064b8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80064b6:	bf00      	nop
 80064b8:	bf00      	nop
}
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80064d6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d004      	beq.n	80064ea <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80064e8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ee:	f003 021f 	and.w	r2, r3, #31
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	2101      	movs	r1, #1
 80064f8:	fa01 f202 	lsl.w	r2, r1, r2
 80064fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	2b10      	cmp	r3, #16
 800650c:	d108      	bne.n	8006520 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800651e:	e007      	b.n	8006530 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	60da      	str	r2, [r3, #12]
}
 8006530:	bf00      	nop
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	461a      	mov	r2, r3
 800654a:	4b16      	ldr	r3, [pc, #88]	@ (80065a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800654c:	429a      	cmp	r2, r3
 800654e:	d802      	bhi.n	8006556 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006550:	4b15      	ldr	r3, [pc, #84]	@ (80065a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	e001      	b.n	800655a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8006556:	4b15      	ldr	r3, [pc, #84]	@ (80065ac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006558:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	b2db      	uxtb	r3, r3
 8006564:	3b08      	subs	r3, #8
 8006566:	4a12      	ldr	r2, [pc, #72]	@ (80065b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006568:	fba2 2303 	umull	r2, r3, r2, r3
 800656c:	091b      	lsrs	r3, r3, #4
 800656e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006574:	089b      	lsrs	r3, r3, #2
 8006576:	009a      	lsls	r2, r3, #2
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	4413      	add	r3, r2
 800657c:	461a      	mov	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a0b      	ldr	r2, [pc, #44]	@ (80065b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006586:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	2201      	movs	r2, #1
 8006590:	409a      	lsls	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006596:	bf00      	nop
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	40020407 	.word	0x40020407
 80065a8:	40020800 	.word	0x40020800
 80065ac:	40020820 	.word	0x40020820
 80065b0:	cccccccd 	.word	0xcccccccd
 80065b4:	40020880 	.word	0x40020880

080065b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4b0b      	ldr	r3, [pc, #44]	@ (80065f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80065cc:	4413      	add	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	461a      	mov	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a08      	ldr	r2, [pc, #32]	@ (80065fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80065da:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3b01      	subs	r3, #1
 80065e0:	f003 031f 	and.w	r3, r3, #31
 80065e4:	2201      	movs	r2, #1
 80065e6:	409a      	lsls	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80065ec:	bf00      	nop
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	1000823f 	.word	0x1000823f
 80065fc:	40020940 	.word	0x40020940

08006600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800660a:	2300      	movs	r3, #0
 800660c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800660e:	e15a      	b.n	80068c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	2101      	movs	r1, #1
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	fa01 f303 	lsl.w	r3, r1, r3
 800661c:	4013      	ands	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 814c 	beq.w	80068c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f003 0303 	and.w	r3, r3, #3
 8006630:	2b01      	cmp	r3, #1
 8006632:	d005      	beq.n	8006640 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800663c:	2b02      	cmp	r3, #2
 800663e:	d130      	bne.n	80066a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	2203      	movs	r2, #3
 800664c:	fa02 f303 	lsl.w	r3, r2, r3
 8006650:	43db      	mvns	r3, r3
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	4013      	ands	r3, r2
 8006656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	68da      	ldr	r2, [r3, #12]
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	fa02 f303 	lsl.w	r3, r2, r3
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	4313      	orrs	r3, r2
 8006668:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006676:	2201      	movs	r2, #1
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	fa02 f303 	lsl.w	r3, r2, r3
 800667e:	43db      	mvns	r3, r3
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4013      	ands	r3, r2
 8006684:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	091b      	lsrs	r3, r3, #4
 800668c:	f003 0201 	and.w	r2, r3, #1
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	fa02 f303 	lsl.w	r3, r2, r3
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	4313      	orrs	r3, r2
 800669a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d017      	beq.n	80066de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	2203      	movs	r2, #3
 80066ba:	fa02 f303 	lsl.w	r3, r2, r3
 80066be:	43db      	mvns	r3, r3
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	4013      	ands	r3, r2
 80066c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	fa02 f303 	lsl.w	r3, r2, r3
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d123      	bne.n	8006732 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	08da      	lsrs	r2, r3, #3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3208      	adds	r2, #8
 80066f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	220f      	movs	r2, #15
 8006702:	fa02 f303 	lsl.w	r3, r2, r3
 8006706:	43db      	mvns	r3, r3
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4013      	ands	r3, r2
 800670c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	691a      	ldr	r2, [r3, #16]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	fa02 f303 	lsl.w	r3, r2, r3
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	4313      	orrs	r3, r2
 8006722:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	08da      	lsrs	r2, r3, #3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3208      	adds	r2, #8
 800672c:	6939      	ldr	r1, [r7, #16]
 800672e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	2203      	movs	r2, #3
 800673e:	fa02 f303 	lsl.w	r3, r2, r3
 8006742:	43db      	mvns	r3, r3
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4013      	ands	r3, r2
 8006748:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f003 0203 	and.w	r2, r3, #3
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	fa02 f303 	lsl.w	r3, r2, r3
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	4313      	orrs	r3, r2
 800675e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 80a6 	beq.w	80068c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006774:	4b5b      	ldr	r3, [pc, #364]	@ (80068e4 <HAL_GPIO_Init+0x2e4>)
 8006776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006778:	4a5a      	ldr	r2, [pc, #360]	@ (80068e4 <HAL_GPIO_Init+0x2e4>)
 800677a:	f043 0301 	orr.w	r3, r3, #1
 800677e:	6613      	str	r3, [r2, #96]	@ 0x60
 8006780:	4b58      	ldr	r3, [pc, #352]	@ (80068e4 <HAL_GPIO_Init+0x2e4>)
 8006782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	60bb      	str	r3, [r7, #8]
 800678a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800678c:	4a56      	ldr	r2, [pc, #344]	@ (80068e8 <HAL_GPIO_Init+0x2e8>)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	089b      	lsrs	r3, r3, #2
 8006792:	3302      	adds	r3, #2
 8006794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006798:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f003 0303 	and.w	r3, r3, #3
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	220f      	movs	r2, #15
 80067a4:	fa02 f303 	lsl.w	r3, r2, r3
 80067a8:	43db      	mvns	r3, r3
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	4013      	ands	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80067b6:	d01f      	beq.n	80067f8 <HAL_GPIO_Init+0x1f8>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a4c      	ldr	r2, [pc, #304]	@ (80068ec <HAL_GPIO_Init+0x2ec>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d019      	beq.n	80067f4 <HAL_GPIO_Init+0x1f4>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a4b      	ldr	r2, [pc, #300]	@ (80068f0 <HAL_GPIO_Init+0x2f0>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d013      	beq.n	80067f0 <HAL_GPIO_Init+0x1f0>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a4a      	ldr	r2, [pc, #296]	@ (80068f4 <HAL_GPIO_Init+0x2f4>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00d      	beq.n	80067ec <HAL_GPIO_Init+0x1ec>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a49      	ldr	r2, [pc, #292]	@ (80068f8 <HAL_GPIO_Init+0x2f8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d007      	beq.n	80067e8 <HAL_GPIO_Init+0x1e8>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a48      	ldr	r2, [pc, #288]	@ (80068fc <HAL_GPIO_Init+0x2fc>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d101      	bne.n	80067e4 <HAL_GPIO_Init+0x1e4>
 80067e0:	2305      	movs	r3, #5
 80067e2:	e00a      	b.n	80067fa <HAL_GPIO_Init+0x1fa>
 80067e4:	2306      	movs	r3, #6
 80067e6:	e008      	b.n	80067fa <HAL_GPIO_Init+0x1fa>
 80067e8:	2304      	movs	r3, #4
 80067ea:	e006      	b.n	80067fa <HAL_GPIO_Init+0x1fa>
 80067ec:	2303      	movs	r3, #3
 80067ee:	e004      	b.n	80067fa <HAL_GPIO_Init+0x1fa>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e002      	b.n	80067fa <HAL_GPIO_Init+0x1fa>
 80067f4:	2301      	movs	r3, #1
 80067f6:	e000      	b.n	80067fa <HAL_GPIO_Init+0x1fa>
 80067f8:	2300      	movs	r3, #0
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	f002 0203 	and.w	r2, r2, #3
 8006800:	0092      	lsls	r2, r2, #2
 8006802:	4093      	lsls	r3, r2
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	4313      	orrs	r3, r2
 8006808:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800680a:	4937      	ldr	r1, [pc, #220]	@ (80068e8 <HAL_GPIO_Init+0x2e8>)
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	089b      	lsrs	r3, r3, #2
 8006810:	3302      	adds	r3, #2
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006818:	4b39      	ldr	r3, [pc, #228]	@ (8006900 <HAL_GPIO_Init+0x300>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	43db      	mvns	r3, r3
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	4013      	ands	r3, r2
 8006826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4313      	orrs	r3, r2
 800683a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800683c:	4a30      	ldr	r2, [pc, #192]	@ (8006900 <HAL_GPIO_Init+0x300>)
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006842:	4b2f      	ldr	r3, [pc, #188]	@ (8006900 <HAL_GPIO_Init+0x300>)
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	43db      	mvns	r3, r3
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	4013      	ands	r3, r2
 8006850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4313      	orrs	r3, r2
 8006864:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006866:	4a26      	ldr	r2, [pc, #152]	@ (8006900 <HAL_GPIO_Init+0x300>)
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800686c:	4b24      	ldr	r3, [pc, #144]	@ (8006900 <HAL_GPIO_Init+0x300>)
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	43db      	mvns	r3, r3
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	4013      	ands	r3, r2
 800687a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d003      	beq.n	8006890 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4313      	orrs	r3, r2
 800688e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006890:	4a1b      	ldr	r2, [pc, #108]	@ (8006900 <HAL_GPIO_Init+0x300>)
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006896:	4b1a      	ldr	r3, [pc, #104]	@ (8006900 <HAL_GPIO_Init+0x300>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	43db      	mvns	r3, r3
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	4013      	ands	r3, r2
 80068a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80068ba:	4a11      	ldr	r2, [pc, #68]	@ (8006900 <HAL_GPIO_Init+0x300>)
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	3301      	adds	r3, #1
 80068c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	fa22 f303 	lsr.w	r3, r2, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f47f ae9d 	bne.w	8006610 <HAL_GPIO_Init+0x10>
  }
}
 80068d6:	bf00      	nop
 80068d8:	bf00      	nop
 80068da:	371c      	adds	r7, #28
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	40021000 	.word	0x40021000
 80068e8:	40010000 	.word	0x40010000
 80068ec:	48000400 	.word	0x48000400
 80068f0:	48000800 	.word	0x48000800
 80068f4:	48000c00 	.word	0x48000c00
 80068f8:	48001000 	.word	0x48001000
 80068fc:	48001400 	.word	0x48001400
 8006900:	40010400 	.word	0x40010400

08006904 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691a      	ldr	r2, [r3, #16]
 8006914:	887b      	ldrh	r3, [r7, #2]
 8006916:	4013      	ands	r3, r2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800691c:	2301      	movs	r3, #1
 800691e:	73fb      	strb	r3, [r7, #15]
 8006920:	e001      	b.n	8006926 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006922:	2300      	movs	r3, #0
 8006924:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006926:	7bfb      	ldrb	r3, [r7, #15]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	807b      	strh	r3, [r7, #2]
 8006940:	4613      	mov	r3, r2
 8006942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006944:	787b      	ldrb	r3, [r7, #1]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800694a:	887a      	ldrh	r2, [r7, #2]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006950:	e002      	b.n	8006958 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006952:	887a      	ldrh	r2, [r7, #2]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d141      	bne.n	80069f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006972:	4b4b      	ldr	r3, [pc, #300]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800697a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800697e:	d131      	bne.n	80069e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006980:	4b47      	ldr	r3, [pc, #284]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006986:	4a46      	ldr	r2, [pc, #280]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800698c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006990:	4b43      	ldr	r3, [pc, #268]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006998:	4a41      	ldr	r2, [pc, #260]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800699a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800699e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80069a0:	4b40      	ldr	r3, [pc, #256]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2232      	movs	r2, #50	@ 0x32
 80069a6:	fb02 f303 	mul.w	r3, r2, r3
 80069aa:	4a3f      	ldr	r2, [pc, #252]	@ (8006aa8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80069ac:	fba2 2303 	umull	r2, r3, r2, r3
 80069b0:	0c9b      	lsrs	r3, r3, #18
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069b6:	e002      	b.n	80069be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069be:	4b38      	ldr	r3, [pc, #224]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069ca:	d102      	bne.n	80069d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1f2      	bne.n	80069b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80069d2:	4b33      	ldr	r3, [pc, #204]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069de:	d158      	bne.n	8006a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e057      	b.n	8006a94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069e4:	4b2e      	ldr	r3, [pc, #184]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069ea:	4a2d      	ldr	r2, [pc, #180]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80069f4:	e04d      	b.n	8006a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069fc:	d141      	bne.n	8006a82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80069fe:	4b28      	ldr	r3, [pc, #160]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a0a:	d131      	bne.n	8006a70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a0c:	4b24      	ldr	r3, [pc, #144]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a12:	4a23      	ldr	r2, [pc, #140]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a1c:	4b20      	ldr	r3, [pc, #128]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006a24:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2232      	movs	r2, #50	@ 0x32
 8006a32:	fb02 f303 	mul.w	r3, r2, r3
 8006a36:	4a1c      	ldr	r2, [pc, #112]	@ (8006aa8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006a38:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3c:	0c9b      	lsrs	r3, r3, #18
 8006a3e:	3301      	adds	r3, #1
 8006a40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a42:	e002      	b.n	8006a4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3b01      	subs	r3, #1
 8006a48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a4a:	4b15      	ldr	r3, [pc, #84]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a56:	d102      	bne.n	8006a5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f2      	bne.n	8006a44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a5e:	4b10      	ldr	r3, [pc, #64]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a6a:	d112      	bne.n	8006a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e011      	b.n	8006a94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a70:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a76:	4a0a      	ldr	r2, [pc, #40]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006a80:	e007      	b.n	8006a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006a82:	4b07      	ldr	r3, [pc, #28]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006a8a:	4a05      	ldr	r2, [pc, #20]	@ (8006aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006a90:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	40007000 	.word	0x40007000
 8006aa4:	20000000 	.word	0x20000000
 8006aa8:	431bde83 	.word	0x431bde83

08006aac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006ab0:	4b05      	ldr	r3, [pc, #20]	@ (8006ac8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	4a04      	ldr	r2, [pc, #16]	@ (8006ac8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006ab6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006aba:	6093      	str	r3, [r2, #8]
}
 8006abc:	bf00      	nop
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	40007000 	.word	0x40007000

08006acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b088      	sub	sp, #32
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e2fe      	b.n	80070dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d075      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006aea:	4b97      	ldr	r3, [pc, #604]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f003 030c 	and.w	r3, r3, #12
 8006af2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006af4:	4b94      	ldr	r3, [pc, #592]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f003 0303 	and.w	r3, r3, #3
 8006afc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	2b0c      	cmp	r3, #12
 8006b02:	d102      	bne.n	8006b0a <HAL_RCC_OscConfig+0x3e>
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	d002      	beq.n	8006b10 <HAL_RCC_OscConfig+0x44>
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d10b      	bne.n	8006b28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b10:	4b8d      	ldr	r3, [pc, #564]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d05b      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x108>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d157      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e2d9      	b.n	80070dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b30:	d106      	bne.n	8006b40 <HAL_RCC_OscConfig+0x74>
 8006b32:	4b85      	ldr	r3, [pc, #532]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a84      	ldr	r2, [pc, #528]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b3c:	6013      	str	r3, [r2, #0]
 8006b3e:	e01d      	b.n	8006b7c <HAL_RCC_OscConfig+0xb0>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b48:	d10c      	bne.n	8006b64 <HAL_RCC_OscConfig+0x98>
 8006b4a:	4b7f      	ldr	r3, [pc, #508]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a7e      	ldr	r2, [pc, #504]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006b50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b54:	6013      	str	r3, [r2, #0]
 8006b56:	4b7c      	ldr	r3, [pc, #496]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a7b      	ldr	r2, [pc, #492]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	e00b      	b.n	8006b7c <HAL_RCC_OscConfig+0xb0>
 8006b64:	4b78      	ldr	r3, [pc, #480]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a77      	ldr	r2, [pc, #476]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b6e:	6013      	str	r3, [r2, #0]
 8006b70:	4b75      	ldr	r3, [pc, #468]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a74      	ldr	r2, [pc, #464]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006b76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d013      	beq.n	8006bac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b84:	f7fc f804 	bl	8002b90 <HAL_GetTick>
 8006b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b8a:	e008      	b.n	8006b9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b8c:	f7fc f800 	bl	8002b90 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b64      	cmp	r3, #100	@ 0x64
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e29e      	b.n	80070dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b9e:	4b6a      	ldr	r3, [pc, #424]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d0f0      	beq.n	8006b8c <HAL_RCC_OscConfig+0xc0>
 8006baa:	e014      	b.n	8006bd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bac:	f7fb fff0 	bl	8002b90 <HAL_GetTick>
 8006bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bb4:	f7fb ffec 	bl	8002b90 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b64      	cmp	r3, #100	@ 0x64
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e28a      	b.n	80070dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006bc6:	4b60      	ldr	r3, [pc, #384]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1f0      	bne.n	8006bb4 <HAL_RCC_OscConfig+0xe8>
 8006bd2:	e000      	b.n	8006bd6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d075      	beq.n	8006cce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006be2:	4b59      	ldr	r3, [pc, #356]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f003 030c 	and.w	r3, r3, #12
 8006bea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006bec:	4b56      	ldr	r3, [pc, #344]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	2b0c      	cmp	r3, #12
 8006bfa:	d102      	bne.n	8006c02 <HAL_RCC_OscConfig+0x136>
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d002      	beq.n	8006c08 <HAL_RCC_OscConfig+0x13c>
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	d11f      	bne.n	8006c48 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c08:	4b4f      	ldr	r3, [pc, #316]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d005      	beq.n	8006c20 <HAL_RCC_OscConfig+0x154>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e25d      	b.n	80070dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c20:	4b49      	ldr	r3, [pc, #292]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	061b      	lsls	r3, r3, #24
 8006c2e:	4946      	ldr	r1, [pc, #280]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006c34:	4b45      	ldr	r3, [pc, #276]	@ (8006d4c <HAL_RCC_OscConfig+0x280>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fb ff5d 	bl	8002af8 <HAL_InitTick>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d043      	beq.n	8006ccc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e249      	b.n	80070dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d023      	beq.n	8006c98 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c50:	4b3d      	ldr	r3, [pc, #244]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a3c      	ldr	r2, [pc, #240]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006c56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c5c:	f7fb ff98 	bl	8002b90 <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c64:	f7fb ff94 	bl	8002b90 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e232      	b.n	80070dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c76:	4b34      	ldr	r3, [pc, #208]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0f0      	beq.n	8006c64 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c82:	4b31      	ldr	r3, [pc, #196]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	061b      	lsls	r3, r3, #24
 8006c90:	492d      	ldr	r1, [pc, #180]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	604b      	str	r3, [r1, #4]
 8006c96:	e01a      	b.n	8006cce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c98:	4b2b      	ldr	r3, [pc, #172]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a2a      	ldr	r2, [pc, #168]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006c9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca4:	f7fb ff74 	bl	8002b90 <HAL_GetTick>
 8006ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006caa:	e008      	b.n	8006cbe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cac:	f7fb ff70 	bl	8002b90 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e20e      	b.n	80070dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006cbe:	4b22      	ldr	r3, [pc, #136]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1f0      	bne.n	8006cac <HAL_RCC_OscConfig+0x1e0>
 8006cca:	e000      	b.n	8006cce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ccc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d041      	beq.n	8006d5e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d01c      	beq.n	8006d1c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ce2:	4b19      	ldr	r3, [pc, #100]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ce8:	4a17      	ldr	r2, [pc, #92]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006cea:	f043 0301 	orr.w	r3, r3, #1
 8006cee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf2:	f7fb ff4d 	bl	8002b90 <HAL_GetTick>
 8006cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006cf8:	e008      	b.n	8006d0c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cfa:	f7fb ff49 	bl	8002b90 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d901      	bls.n	8006d0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e1e7      	b.n	80070dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d0ef      	beq.n	8006cfa <HAL_RCC_OscConfig+0x22e>
 8006d1a:	e020      	b.n	8006d5e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d22:	4a09      	ldr	r2, [pc, #36]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006d24:	f023 0301 	bic.w	r3, r3, #1
 8006d28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d2c:	f7fb ff30 	bl	8002b90 <HAL_GetTick>
 8006d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d32:	e00d      	b.n	8006d50 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d34:	f7fb ff2c 	bl	8002b90 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d906      	bls.n	8006d50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e1ca      	b.n	80070dc <HAL_RCC_OscConfig+0x610>
 8006d46:	bf00      	nop
 8006d48:	40021000 	.word	0x40021000
 8006d4c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d50:	4b8c      	ldr	r3, [pc, #560]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d56:	f003 0302 	and.w	r3, r3, #2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1ea      	bne.n	8006d34 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0304 	and.w	r3, r3, #4
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 80a6 	beq.w	8006eb8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006d70:	4b84      	ldr	r3, [pc, #528]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <HAL_RCC_OscConfig+0x2b4>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e000      	b.n	8006d82 <HAL_RCC_OscConfig+0x2b6>
 8006d80:	2300      	movs	r3, #0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00d      	beq.n	8006da2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d86:	4b7f      	ldr	r3, [pc, #508]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d8a:	4a7e      	ldr	r2, [pc, #504]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d90:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d92:	4b7c      	ldr	r3, [pc, #496]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006da2:	4b79      	ldr	r3, [pc, #484]	@ (8006f88 <HAL_RCC_OscConfig+0x4bc>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d118      	bne.n	8006de0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006dae:	4b76      	ldr	r3, [pc, #472]	@ (8006f88 <HAL_RCC_OscConfig+0x4bc>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a75      	ldr	r2, [pc, #468]	@ (8006f88 <HAL_RCC_OscConfig+0x4bc>)
 8006db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dba:	f7fb fee9 	bl	8002b90 <HAL_GetTick>
 8006dbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dc0:	e008      	b.n	8006dd4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dc2:	f7fb fee5 	bl	8002b90 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d901      	bls.n	8006dd4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e183      	b.n	80070dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dd4:	4b6c      	ldr	r3, [pc, #432]	@ (8006f88 <HAL_RCC_OscConfig+0x4bc>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d0f0      	beq.n	8006dc2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d108      	bne.n	8006dfa <HAL_RCC_OscConfig+0x32e>
 8006de8:	4b66      	ldr	r3, [pc, #408]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dee:	4a65      	ldr	r2, [pc, #404]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006df0:	f043 0301 	orr.w	r3, r3, #1
 8006df4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006df8:	e024      	b.n	8006e44 <HAL_RCC_OscConfig+0x378>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	2b05      	cmp	r3, #5
 8006e00:	d110      	bne.n	8006e24 <HAL_RCC_OscConfig+0x358>
 8006e02:	4b60      	ldr	r3, [pc, #384]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e08:	4a5e      	ldr	r2, [pc, #376]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006e0a:	f043 0304 	orr.w	r3, r3, #4
 8006e0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e12:	4b5c      	ldr	r3, [pc, #368]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e18:	4a5a      	ldr	r2, [pc, #360]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006e1a:	f043 0301 	orr.w	r3, r3, #1
 8006e1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e22:	e00f      	b.n	8006e44 <HAL_RCC_OscConfig+0x378>
 8006e24:	4b57      	ldr	r3, [pc, #348]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e2a:	4a56      	ldr	r2, [pc, #344]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006e2c:	f023 0301 	bic.w	r3, r3, #1
 8006e30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e34:	4b53      	ldr	r3, [pc, #332]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e3a:	4a52      	ldr	r2, [pc, #328]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006e3c:	f023 0304 	bic.w	r3, r3, #4
 8006e40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d016      	beq.n	8006e7a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e4c:	f7fb fea0 	bl	8002b90 <HAL_GetTick>
 8006e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e52:	e00a      	b.n	8006e6a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e54:	f7fb fe9c 	bl	8002b90 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d901      	bls.n	8006e6a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e138      	b.n	80070dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e6a:	4b46      	ldr	r3, [pc, #280]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0ed      	beq.n	8006e54 <HAL_RCC_OscConfig+0x388>
 8006e78:	e015      	b.n	8006ea6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e7a:	f7fb fe89 	bl	8002b90 <HAL_GetTick>
 8006e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e80:	e00a      	b.n	8006e98 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e82:	f7fb fe85 	bl	8002b90 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d901      	bls.n	8006e98 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e121      	b.n	80070dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e98:	4b3a      	ldr	r3, [pc, #232]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1ed      	bne.n	8006e82 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ea6:	7ffb      	ldrb	r3, [r7, #31]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d105      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eac:	4b35      	ldr	r3, [pc, #212]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eb0:	4a34      	ldr	r2, [pc, #208]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006eb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006eb6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0320 	and.w	r3, r3, #32
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d03c      	beq.n	8006f3e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d01c      	beq.n	8006f06 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006ed4:	f043 0301 	orr.w	r3, r3, #1
 8006ed8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006edc:	f7fb fe58 	bl	8002b90 <HAL_GetTick>
 8006ee0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ee2:	e008      	b.n	8006ef6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ee4:	f7fb fe54 	bl	8002b90 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e0f2      	b.n	80070dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ef6:	4b23      	ldr	r3, [pc, #140]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0ef      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x418>
 8006f04:	e01b      	b.n	8006f3e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f06:	4b1f      	ldr	r3, [pc, #124]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006f08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006f0e:	f023 0301 	bic.w	r3, r3, #1
 8006f12:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f16:	f7fb fe3b 	bl	8002b90 <HAL_GetTick>
 8006f1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f1c:	e008      	b.n	8006f30 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f1e:	f7fb fe37 	bl	8002b90 <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d901      	bls.n	8006f30 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e0d5      	b.n	80070dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f30:	4b14      	ldr	r3, [pc, #80]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006f32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1ef      	bne.n	8006f1e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 80c9 	beq.w	80070da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f48:	4b0e      	ldr	r3, [pc, #56]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f003 030c 	and.w	r3, r3, #12
 8006f50:	2b0c      	cmp	r3, #12
 8006f52:	f000 8083 	beq.w	800705c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d15e      	bne.n	800701c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f5e:	4b09      	ldr	r3, [pc, #36]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a08      	ldr	r2, [pc, #32]	@ (8006f84 <HAL_RCC_OscConfig+0x4b8>)
 8006f64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f6a:	f7fb fe11 	bl	8002b90 <HAL_GetTick>
 8006f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f70:	e00c      	b.n	8006f8c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f72:	f7fb fe0d 	bl	8002b90 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d905      	bls.n	8006f8c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e0ab      	b.n	80070dc <HAL_RCC_OscConfig+0x610>
 8006f84:	40021000 	.word	0x40021000
 8006f88:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f8c:	4b55      	ldr	r3, [pc, #340]	@ (80070e4 <HAL_RCC_OscConfig+0x618>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1ec      	bne.n	8006f72 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f98:	4b52      	ldr	r3, [pc, #328]	@ (80070e4 <HAL_RCC_OscConfig+0x618>)
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	4b52      	ldr	r3, [pc, #328]	@ (80070e8 <HAL_RCC_OscConfig+0x61c>)
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	6a11      	ldr	r1, [r2, #32]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006fa8:	3a01      	subs	r2, #1
 8006faa:	0112      	lsls	r2, r2, #4
 8006fac:	4311      	orrs	r1, r2
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006fb2:	0212      	lsls	r2, r2, #8
 8006fb4:	4311      	orrs	r1, r2
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006fba:	0852      	lsrs	r2, r2, #1
 8006fbc:	3a01      	subs	r2, #1
 8006fbe:	0552      	lsls	r2, r2, #21
 8006fc0:	4311      	orrs	r1, r2
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006fc6:	0852      	lsrs	r2, r2, #1
 8006fc8:	3a01      	subs	r2, #1
 8006fca:	0652      	lsls	r2, r2, #25
 8006fcc:	4311      	orrs	r1, r2
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006fd2:	06d2      	lsls	r2, r2, #27
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	4943      	ldr	r1, [pc, #268]	@ (80070e4 <HAL_RCC_OscConfig+0x618>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fdc:	4b41      	ldr	r3, [pc, #260]	@ (80070e4 <HAL_RCC_OscConfig+0x618>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a40      	ldr	r2, [pc, #256]	@ (80070e4 <HAL_RCC_OscConfig+0x618>)
 8006fe2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006fe6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80070e4 <HAL_RCC_OscConfig+0x618>)
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	4a3d      	ldr	r2, [pc, #244]	@ (80070e4 <HAL_RCC_OscConfig+0x618>)
 8006fee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ff2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff4:	f7fb fdcc 	bl	8002b90 <HAL_GetTick>
 8006ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ffa:	e008      	b.n	800700e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ffc:	f7fb fdc8 	bl	8002b90 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	2b02      	cmp	r3, #2
 8007008:	d901      	bls.n	800700e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e066      	b.n	80070dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800700e:	4b35      	ldr	r3, [pc, #212]	@ (80070e4 <HAL_RCC_OscConfig+0x618>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0f0      	beq.n	8006ffc <HAL_RCC_OscConfig+0x530>
 800701a:	e05e      	b.n	80070da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800701c:	4b31      	ldr	r3, [pc, #196]	@ (80070e4 <HAL_RCC_OscConfig+0x618>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a30      	ldr	r2, [pc, #192]	@ (80070e4 <HAL_RCC_OscConfig+0x618>)
 8007022:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007028:	f7fb fdb2 	bl	8002b90 <HAL_GetTick>
 800702c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800702e:	e008      	b.n	8007042 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007030:	f7fb fdae 	bl	8002b90 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	2b02      	cmp	r3, #2
 800703c:	d901      	bls.n	8007042 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e04c      	b.n	80070dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007042:	4b28      	ldr	r3, [pc, #160]	@ (80070e4 <HAL_RCC_OscConfig+0x618>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1f0      	bne.n	8007030 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800704e:	4b25      	ldr	r3, [pc, #148]	@ (80070e4 <HAL_RCC_OscConfig+0x618>)
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	4924      	ldr	r1, [pc, #144]	@ (80070e4 <HAL_RCC_OscConfig+0x618>)
 8007054:	4b25      	ldr	r3, [pc, #148]	@ (80070ec <HAL_RCC_OscConfig+0x620>)
 8007056:	4013      	ands	r3, r2
 8007058:	60cb      	str	r3, [r1, #12]
 800705a:	e03e      	b.n	80070da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d101      	bne.n	8007068 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e039      	b.n	80070dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007068:	4b1e      	ldr	r3, [pc, #120]	@ (80070e4 <HAL_RCC_OscConfig+0x618>)
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f003 0203 	and.w	r2, r3, #3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	429a      	cmp	r2, r3
 800707a:	d12c      	bne.n	80070d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007086:	3b01      	subs	r3, #1
 8007088:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800708a:	429a      	cmp	r2, r3
 800708c:	d123      	bne.n	80070d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007098:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800709a:	429a      	cmp	r2, r3
 800709c:	d11b      	bne.n	80070d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d113      	bne.n	80070d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b8:	085b      	lsrs	r3, r3, #1
 80070ba:	3b01      	subs	r3, #1
 80070bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80070be:	429a      	cmp	r2, r3
 80070c0:	d109      	bne.n	80070d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070cc:	085b      	lsrs	r3, r3, #1
 80070ce:	3b01      	subs	r3, #1
 80070d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d001      	beq.n	80070da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e000      	b.n	80070dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3720      	adds	r7, #32
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	40021000 	.word	0x40021000
 80070e8:	019f800c 	.word	0x019f800c
 80070ec:	feeefffc 	.word	0xfeeefffc

080070f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80070fa:	2300      	movs	r3, #0
 80070fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e11e      	b.n	8007346 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007108:	4b91      	ldr	r3, [pc, #580]	@ (8007350 <HAL_RCC_ClockConfig+0x260>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 030f 	and.w	r3, r3, #15
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	429a      	cmp	r2, r3
 8007114:	d910      	bls.n	8007138 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007116:	4b8e      	ldr	r3, [pc, #568]	@ (8007350 <HAL_RCC_ClockConfig+0x260>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f023 020f 	bic.w	r2, r3, #15
 800711e:	498c      	ldr	r1, [pc, #560]	@ (8007350 <HAL_RCC_ClockConfig+0x260>)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	4313      	orrs	r3, r2
 8007124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007126:	4b8a      	ldr	r3, [pc, #552]	@ (8007350 <HAL_RCC_ClockConfig+0x260>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 030f 	and.w	r3, r3, #15
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d001      	beq.n	8007138 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e106      	b.n	8007346 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b00      	cmp	r3, #0
 8007142:	d073      	beq.n	800722c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	2b03      	cmp	r3, #3
 800714a:	d129      	bne.n	80071a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800714c:	4b81      	ldr	r3, [pc, #516]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d101      	bne.n	800715c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e0f4      	b.n	8007346 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800715c:	f000 f99e 	bl	800749c <RCC_GetSysClockFreqFromPLLSource>
 8007160:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	4a7c      	ldr	r2, [pc, #496]	@ (8007358 <HAL_RCC_ClockConfig+0x268>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d93f      	bls.n	80071ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800716a:	4b7a      	ldr	r3, [pc, #488]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d009      	beq.n	800718a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800717e:	2b00      	cmp	r3, #0
 8007180:	d033      	beq.n	80071ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007186:	2b00      	cmp	r3, #0
 8007188:	d12f      	bne.n	80071ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800718a:	4b72      	ldr	r3, [pc, #456]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007192:	4a70      	ldr	r2, [pc, #448]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 8007194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007198:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800719a:	2380      	movs	r3, #128	@ 0x80
 800719c:	617b      	str	r3, [r7, #20]
 800719e:	e024      	b.n	80071ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d107      	bne.n	80071b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071a8:	4b6a      	ldr	r3, [pc, #424]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d109      	bne.n	80071c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e0c6      	b.n	8007346 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071b8:	4b66      	ldr	r3, [pc, #408]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e0be      	b.n	8007346 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80071c8:	f000 f8ce 	bl	8007368 <HAL_RCC_GetSysClockFreq>
 80071cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	4a61      	ldr	r2, [pc, #388]	@ (8007358 <HAL_RCC_ClockConfig+0x268>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d909      	bls.n	80071ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80071d6:	4b5f      	ldr	r3, [pc, #380]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071de:	4a5d      	ldr	r2, [pc, #372]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 80071e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80071e6:	2380      	movs	r3, #128	@ 0x80
 80071e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071ea:	4b5a      	ldr	r3, [pc, #360]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f023 0203 	bic.w	r2, r3, #3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	4957      	ldr	r1, [pc, #348]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071fc:	f7fb fcc8 	bl	8002b90 <HAL_GetTick>
 8007200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007202:	e00a      	b.n	800721a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007204:	f7fb fcc4 	bl	8002b90 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007212:	4293      	cmp	r3, r2
 8007214:	d901      	bls.n	800721a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e095      	b.n	8007346 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800721a:	4b4e      	ldr	r3, [pc, #312]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f003 020c 	and.w	r2, r3, #12
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	429a      	cmp	r2, r3
 800722a:	d1eb      	bne.n	8007204 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d023      	beq.n	8007280 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	2b00      	cmp	r3, #0
 8007242:	d005      	beq.n	8007250 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007244:	4b43      	ldr	r3, [pc, #268]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	4a42      	ldr	r2, [pc, #264]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 800724a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800724e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0308 	and.w	r3, r3, #8
 8007258:	2b00      	cmp	r3, #0
 800725a:	d007      	beq.n	800726c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800725c:	4b3d      	ldr	r3, [pc, #244]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007264:	4a3b      	ldr	r2, [pc, #236]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 8007266:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800726a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800726c:	4b39      	ldr	r3, [pc, #228]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	4936      	ldr	r1, [pc, #216]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 800727a:	4313      	orrs	r3, r2
 800727c:	608b      	str	r3, [r1, #8]
 800727e:	e008      	b.n	8007292 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	2b80      	cmp	r3, #128	@ 0x80
 8007284:	d105      	bne.n	8007292 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007286:	4b33      	ldr	r3, [pc, #204]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	4a32      	ldr	r2, [pc, #200]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 800728c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007290:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007292:	4b2f      	ldr	r3, [pc, #188]	@ (8007350 <HAL_RCC_ClockConfig+0x260>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 030f 	and.w	r3, r3, #15
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	429a      	cmp	r2, r3
 800729e:	d21d      	bcs.n	80072dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072a0:	4b2b      	ldr	r3, [pc, #172]	@ (8007350 <HAL_RCC_ClockConfig+0x260>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f023 020f 	bic.w	r2, r3, #15
 80072a8:	4929      	ldr	r1, [pc, #164]	@ (8007350 <HAL_RCC_ClockConfig+0x260>)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80072b0:	f7fb fc6e 	bl	8002b90 <HAL_GetTick>
 80072b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072b6:	e00a      	b.n	80072ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072b8:	f7fb fc6a 	bl	8002b90 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d901      	bls.n	80072ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e03b      	b.n	8007346 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ce:	4b20      	ldr	r3, [pc, #128]	@ (8007350 <HAL_RCC_ClockConfig+0x260>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 030f 	and.w	r3, r3, #15
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d1ed      	bne.n	80072b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d008      	beq.n	80072fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	4917      	ldr	r1, [pc, #92]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0308 	and.w	r3, r3, #8
 8007302:	2b00      	cmp	r3, #0
 8007304:	d009      	beq.n	800731a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007306:	4b13      	ldr	r3, [pc, #76]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	490f      	ldr	r1, [pc, #60]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 8007316:	4313      	orrs	r3, r2
 8007318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800731a:	f000 f825 	bl	8007368 <HAL_RCC_GetSysClockFreq>
 800731e:	4602      	mov	r2, r0
 8007320:	4b0c      	ldr	r3, [pc, #48]	@ (8007354 <HAL_RCC_ClockConfig+0x264>)
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	091b      	lsrs	r3, r3, #4
 8007326:	f003 030f 	and.w	r3, r3, #15
 800732a:	490c      	ldr	r1, [pc, #48]	@ (800735c <HAL_RCC_ClockConfig+0x26c>)
 800732c:	5ccb      	ldrb	r3, [r1, r3]
 800732e:	f003 031f 	and.w	r3, r3, #31
 8007332:	fa22 f303 	lsr.w	r3, r2, r3
 8007336:	4a0a      	ldr	r2, [pc, #40]	@ (8007360 <HAL_RCC_ClockConfig+0x270>)
 8007338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800733a:	4b0a      	ldr	r3, [pc, #40]	@ (8007364 <HAL_RCC_ClockConfig+0x274>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4618      	mov	r0, r3
 8007340:	f7fb fbda 	bl	8002af8 <HAL_InitTick>
 8007344:	4603      	mov	r3, r0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	40022000 	.word	0x40022000
 8007354:	40021000 	.word	0x40021000
 8007358:	04c4b400 	.word	0x04c4b400
 800735c:	08014520 	.word	0x08014520
 8007360:	20000000 	.word	0x20000000
 8007364:	20000004 	.word	0x20000004

08007368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800736e:	4b2c      	ldr	r3, [pc, #176]	@ (8007420 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f003 030c 	and.w	r3, r3, #12
 8007376:	2b04      	cmp	r3, #4
 8007378:	d102      	bne.n	8007380 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800737a:	4b2a      	ldr	r3, [pc, #168]	@ (8007424 <HAL_RCC_GetSysClockFreq+0xbc>)
 800737c:	613b      	str	r3, [r7, #16]
 800737e:	e047      	b.n	8007410 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007380:	4b27      	ldr	r3, [pc, #156]	@ (8007420 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f003 030c 	and.w	r3, r3, #12
 8007388:	2b08      	cmp	r3, #8
 800738a:	d102      	bne.n	8007392 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800738c:	4b26      	ldr	r3, [pc, #152]	@ (8007428 <HAL_RCC_GetSysClockFreq+0xc0>)
 800738e:	613b      	str	r3, [r7, #16]
 8007390:	e03e      	b.n	8007410 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007392:	4b23      	ldr	r3, [pc, #140]	@ (8007420 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f003 030c 	and.w	r3, r3, #12
 800739a:	2b0c      	cmp	r3, #12
 800739c:	d136      	bne.n	800740c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800739e:	4b20      	ldr	r3, [pc, #128]	@ (8007420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f003 0303 	and.w	r3, r3, #3
 80073a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80073a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	091b      	lsrs	r3, r3, #4
 80073ae:	f003 030f 	and.w	r3, r3, #15
 80073b2:	3301      	adds	r3, #1
 80073b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d10c      	bne.n	80073d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073bc:	4a1a      	ldr	r2, [pc, #104]	@ (8007428 <HAL_RCC_GetSysClockFreq+0xc0>)
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c4:	4a16      	ldr	r2, [pc, #88]	@ (8007420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073c6:	68d2      	ldr	r2, [r2, #12]
 80073c8:	0a12      	lsrs	r2, r2, #8
 80073ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80073ce:	fb02 f303 	mul.w	r3, r2, r3
 80073d2:	617b      	str	r3, [r7, #20]
      break;
 80073d4:	e00c      	b.n	80073f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073d6:	4a13      	ldr	r2, [pc, #76]	@ (8007424 <HAL_RCC_GetSysClockFreq+0xbc>)
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	fbb2 f3f3 	udiv	r3, r2, r3
 80073de:	4a10      	ldr	r2, [pc, #64]	@ (8007420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073e0:	68d2      	ldr	r2, [r2, #12]
 80073e2:	0a12      	lsrs	r2, r2, #8
 80073e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80073e8:	fb02 f303 	mul.w	r3, r2, r3
 80073ec:	617b      	str	r3, [r7, #20]
      break;
 80073ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80073f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	0e5b      	lsrs	r3, r3, #25
 80073f6:	f003 0303 	and.w	r3, r3, #3
 80073fa:	3301      	adds	r3, #1
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	fbb2 f3f3 	udiv	r3, r2, r3
 8007408:	613b      	str	r3, [r7, #16]
 800740a:	e001      	b.n	8007410 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007410:	693b      	ldr	r3, [r7, #16]
}
 8007412:	4618      	mov	r0, r3
 8007414:	371c      	adds	r7, #28
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	40021000 	.word	0x40021000
 8007424:	00f42400 	.word	0x00f42400
 8007428:	016e3600 	.word	0x016e3600

0800742c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007430:	4b03      	ldr	r3, [pc, #12]	@ (8007440 <HAL_RCC_GetHCLKFreq+0x14>)
 8007432:	681b      	ldr	r3, [r3, #0]
}
 8007434:	4618      	mov	r0, r3
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	20000000 	.word	0x20000000

08007444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007448:	f7ff fff0 	bl	800742c <HAL_RCC_GetHCLKFreq>
 800744c:	4602      	mov	r2, r0
 800744e:	4b06      	ldr	r3, [pc, #24]	@ (8007468 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	0a1b      	lsrs	r3, r3, #8
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	4904      	ldr	r1, [pc, #16]	@ (800746c <HAL_RCC_GetPCLK1Freq+0x28>)
 800745a:	5ccb      	ldrb	r3, [r1, r3]
 800745c:	f003 031f 	and.w	r3, r3, #31
 8007460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007464:	4618      	mov	r0, r3
 8007466:	bd80      	pop	{r7, pc}
 8007468:	40021000 	.word	0x40021000
 800746c:	08014530 	.word	0x08014530

08007470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007474:	f7ff ffda 	bl	800742c <HAL_RCC_GetHCLKFreq>
 8007478:	4602      	mov	r2, r0
 800747a:	4b06      	ldr	r3, [pc, #24]	@ (8007494 <HAL_RCC_GetPCLK2Freq+0x24>)
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	0adb      	lsrs	r3, r3, #11
 8007480:	f003 0307 	and.w	r3, r3, #7
 8007484:	4904      	ldr	r1, [pc, #16]	@ (8007498 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007486:	5ccb      	ldrb	r3, [r1, r3]
 8007488:	f003 031f 	and.w	r3, r3, #31
 800748c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007490:	4618      	mov	r0, r3
 8007492:	bd80      	pop	{r7, pc}
 8007494:	40021000 	.word	0x40021000
 8007498:	08014530 	.word	0x08014530

0800749c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800749c:	b480      	push	{r7}
 800749e:	b087      	sub	sp, #28
 80074a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80074a2:	4b1e      	ldr	r3, [pc, #120]	@ (800751c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	f003 0303 	and.w	r3, r3, #3
 80074aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80074ac:	4b1b      	ldr	r3, [pc, #108]	@ (800751c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	091b      	lsrs	r3, r3, #4
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	3301      	adds	r3, #1
 80074b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	2b03      	cmp	r3, #3
 80074be:	d10c      	bne.n	80074da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80074c0:	4a17      	ldr	r2, [pc, #92]	@ (8007520 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c8:	4a14      	ldr	r2, [pc, #80]	@ (800751c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074ca:	68d2      	ldr	r2, [r2, #12]
 80074cc:	0a12      	lsrs	r2, r2, #8
 80074ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80074d2:	fb02 f303 	mul.w	r3, r2, r3
 80074d6:	617b      	str	r3, [r7, #20]
    break;
 80074d8:	e00c      	b.n	80074f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80074da:	4a12      	ldr	r2, [pc, #72]	@ (8007524 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e2:	4a0e      	ldr	r2, [pc, #56]	@ (800751c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074e4:	68d2      	ldr	r2, [r2, #12]
 80074e6:	0a12      	lsrs	r2, r2, #8
 80074e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80074ec:	fb02 f303 	mul.w	r3, r2, r3
 80074f0:	617b      	str	r3, [r7, #20]
    break;
 80074f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80074f4:	4b09      	ldr	r3, [pc, #36]	@ (800751c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	0e5b      	lsrs	r3, r3, #25
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	3301      	adds	r3, #1
 8007500:	005b      	lsls	r3, r3, #1
 8007502:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	fbb2 f3f3 	udiv	r3, r2, r3
 800750c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800750e:	687b      	ldr	r3, [r7, #4]
}
 8007510:	4618      	mov	r0, r3
 8007512:	371c      	adds	r7, #28
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	40021000 	.word	0x40021000
 8007520:	016e3600 	.word	0x016e3600
 8007524:	00f42400 	.word	0x00f42400

08007528 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007530:	2300      	movs	r3, #0
 8007532:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007534:	2300      	movs	r3, #0
 8007536:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 8098 	beq.w	8007676 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007546:	2300      	movs	r3, #0
 8007548:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800754a:	4b43      	ldr	r3, [pc, #268]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800754c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800754e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10d      	bne.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007556:	4b40      	ldr	r3, [pc, #256]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800755a:	4a3f      	ldr	r2, [pc, #252]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800755c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007560:	6593      	str	r3, [r2, #88]	@ 0x58
 8007562:	4b3d      	ldr	r3, [pc, #244]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800756a:	60bb      	str	r3, [r7, #8]
 800756c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800756e:	2301      	movs	r3, #1
 8007570:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007572:	4b3a      	ldr	r3, [pc, #232]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a39      	ldr	r2, [pc, #228]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800757c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800757e:	f7fb fb07 	bl	8002b90 <HAL_GetTick>
 8007582:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007584:	e009      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007586:	f7fb fb03 	bl	8002b90 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	2b02      	cmp	r3, #2
 8007592:	d902      	bls.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	74fb      	strb	r3, [r7, #19]
        break;
 8007598:	e005      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800759a:	4b30      	ldr	r3, [pc, #192]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d0ef      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80075a6:	7cfb      	ldrb	r3, [r7, #19]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d159      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80075ac:	4b2a      	ldr	r3, [pc, #168]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d01e      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d019      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80075c8:	4b23      	ldr	r3, [pc, #140]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075d4:	4b20      	ldr	r3, [pc, #128]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075da:	4a1f      	ldr	r2, [pc, #124]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075e4:	4b1c      	ldr	r3, [pc, #112]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80075f4:	4a18      	ldr	r2, [pc, #96]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d016      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007606:	f7fb fac3 	bl	8002b90 <HAL_GetTick>
 800760a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800760c:	e00b      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800760e:	f7fb fabf 	bl	8002b90 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800761c:	4293      	cmp	r3, r2
 800761e:	d902      	bls.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	74fb      	strb	r3, [r7, #19]
            break;
 8007624:	e006      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007626:	4b0c      	ldr	r3, [pc, #48]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b00      	cmp	r3, #0
 8007632:	d0ec      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007634:	7cfb      	ldrb	r3, [r7, #19]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10b      	bne.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800763a:	4b07      	ldr	r3, [pc, #28]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800763c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007640:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007648:	4903      	ldr	r1, [pc, #12]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800764a:	4313      	orrs	r3, r2
 800764c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007650:	e008      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007652:	7cfb      	ldrb	r3, [r7, #19]
 8007654:	74bb      	strb	r3, [r7, #18]
 8007656:	e005      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007658:	40021000 	.word	0x40021000
 800765c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007660:	7cfb      	ldrb	r3, [r7, #19]
 8007662:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007664:	7c7b      	ldrb	r3, [r7, #17]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d105      	bne.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800766a:	4ba6      	ldr	r3, [pc, #664]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800766c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800766e:	4aa5      	ldr	r2, [pc, #660]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007670:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007674:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00a      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007682:	4ba0      	ldr	r3, [pc, #640]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007688:	f023 0203 	bic.w	r2, r3, #3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	499c      	ldr	r1, [pc, #624]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007692:	4313      	orrs	r3, r2
 8007694:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00a      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80076a4:	4b97      	ldr	r3, [pc, #604]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076aa:	f023 020c 	bic.w	r2, r3, #12
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	4994      	ldr	r1, [pc, #592]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0304 	and.w	r3, r3, #4
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00a      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80076c6:	4b8f      	ldr	r3, [pc, #572]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	498b      	ldr	r1, [pc, #556]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0308 	and.w	r3, r3, #8
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00a      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076e8:	4b86      	ldr	r3, [pc, #536]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	4983      	ldr	r1, [pc, #524]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0320 	and.w	r3, r3, #32
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00a      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800770a:	4b7e      	ldr	r3, [pc, #504]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800770c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007710:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	497a      	ldr	r1, [pc, #488]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800771a:	4313      	orrs	r3, r2
 800771c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00a      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800772c:	4b75      	ldr	r3, [pc, #468]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800772e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007732:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	4972      	ldr	r1, [pc, #456]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800773c:	4313      	orrs	r3, r2
 800773e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00a      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800774e:	4b6d      	ldr	r3, [pc, #436]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007754:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	69db      	ldr	r3, [r3, #28]
 800775c:	4969      	ldr	r1, [pc, #420]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800775e:	4313      	orrs	r3, r2
 8007760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00a      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007770:	4b64      	ldr	r3, [pc, #400]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007776:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	4961      	ldr	r1, [pc, #388]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007780:	4313      	orrs	r3, r2
 8007782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00a      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007792:	4b5c      	ldr	r3, [pc, #368]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007798:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a0:	4958      	ldr	r1, [pc, #352]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d015      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80077b4:	4b53      	ldr	r3, [pc, #332]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c2:	4950      	ldr	r1, [pc, #320]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077d2:	d105      	bne.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077d4:	4b4b      	ldr	r3, [pc, #300]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	4a4a      	ldr	r2, [pc, #296]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d015      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80077ec:	4b45      	ldr	r3, [pc, #276]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fa:	4942      	ldr	r1, [pc, #264]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007806:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800780a:	d105      	bne.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800780c:	4b3d      	ldr	r3, [pc, #244]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	4a3c      	ldr	r2, [pc, #240]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007816:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d015      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007824:	4b37      	ldr	r3, [pc, #220]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800782a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007832:	4934      	ldr	r1, [pc, #208]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007834:	4313      	orrs	r3, r2
 8007836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007842:	d105      	bne.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007844:	4b2f      	ldr	r3, [pc, #188]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	4a2e      	ldr	r2, [pc, #184]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800784a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800784e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d015      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800785c:	4b29      	ldr	r3, [pc, #164]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800785e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007862:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800786a:	4926      	ldr	r1, [pc, #152]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800786c:	4313      	orrs	r3, r2
 800786e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007876:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800787a:	d105      	bne.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800787c:	4b21      	ldr	r3, [pc, #132]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	4a20      	ldr	r2, [pc, #128]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007882:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007886:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d015      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007894:	4b1b      	ldr	r3, [pc, #108]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800789a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a2:	4918      	ldr	r1, [pc, #96]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078b2:	d105      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078b4:	4b13      	ldr	r3, [pc, #76]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	4a12      	ldr	r2, [pc, #72]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d015      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80078cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078da:	490a      	ldr	r1, [pc, #40]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078ea:	d105      	bne.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80078ec:	4b05      	ldr	r3, [pc, #20]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	4a04      	ldr	r2, [pc, #16]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80078f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	40021000 	.word	0x40021000

08007908 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e09d      	b.n	8007a56 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800791e:	2b00      	cmp	r3, #0
 8007920:	d108      	bne.n	8007934 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800792a:	d009      	beq.n	8007940 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	61da      	str	r2, [r3, #28]
 8007932:	e005      	b.n	8007940 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d106      	bne.n	8007960 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7fa f906 	bl	8001b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007976:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007980:	d902      	bls.n	8007988 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007982:	2300      	movs	r3, #0
 8007984:	60fb      	str	r3, [r7, #12]
 8007986:	e002      	b.n	800798e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007988:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800798c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007996:	d007      	beq.n	80079a8 <HAL_SPI_Init+0xa0>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80079a0:	d002      	beq.n	80079a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80079b8:	431a      	orrs	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	431a      	orrs	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079d6:	431a      	orrs	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079e0:	431a      	orrs	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ea:	ea42 0103 	orr.w	r1, r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	0c1b      	lsrs	r3, r3, #16
 8007a04:	f003 0204 	and.w	r2, r3, #4
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a0c:	f003 0310 	and.w	r3, r3, #16
 8007a10:	431a      	orrs	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a16:	f003 0308 	and.w	r3, r3, #8
 8007a1a:	431a      	orrs	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007a24:	ea42 0103 	orr.w	r1, r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	69da      	ldr	r2, [r3, #28]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b08a      	sub	sp, #40	@ 0x28
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	607a      	str	r2, [r7, #4]
 8007a6a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d101      	bne.n	8007a84 <HAL_SPI_TransmitReceive+0x26>
 8007a80:	2302      	movs	r3, #2
 8007a82:	e20a      	b.n	8007e9a <HAL_SPI_TransmitReceive+0x43c>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a8c:	f7fb f880 	bl	8002b90 <HAL_GetTick>
 8007a90:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007a98:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007aa0:	887b      	ldrh	r3, [r7, #2]
 8007aa2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007aa4:	887b      	ldrh	r3, [r7, #2]
 8007aa6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007aa8:	7efb      	ldrb	r3, [r7, #27]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d00e      	beq.n	8007acc <HAL_SPI_TransmitReceive+0x6e>
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ab4:	d106      	bne.n	8007ac4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d102      	bne.n	8007ac4 <HAL_SPI_TransmitReceive+0x66>
 8007abe:	7efb      	ldrb	r3, [r7, #27]
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	d003      	beq.n	8007acc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007aca:	e1e0      	b.n	8007e8e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d005      	beq.n	8007ade <HAL_SPI_TransmitReceive+0x80>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <HAL_SPI_TransmitReceive+0x80>
 8007ad8:	887b      	ldrh	r3, [r7, #2]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d103      	bne.n	8007ae6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007ae4:	e1d3      	b.n	8007e8e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b04      	cmp	r3, #4
 8007af0:	d003      	beq.n	8007afa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2205      	movs	r2, #5
 8007af6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	887a      	ldrh	r2, [r7, #2]
 8007b0a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	887a      	ldrh	r2, [r7, #2]
 8007b12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	887a      	ldrh	r2, [r7, #2]
 8007b20:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	887a      	ldrh	r2, [r7, #2]
 8007b26:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b3c:	d802      	bhi.n	8007b44 <HAL_SPI_TransmitReceive+0xe6>
 8007b3e:	8a3b      	ldrh	r3, [r7, #16]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d908      	bls.n	8007b56 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007b52:	605a      	str	r2, [r3, #4]
 8007b54:	e007      	b.n	8007b66 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007b64:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b70:	2b40      	cmp	r3, #64	@ 0x40
 8007b72:	d007      	beq.n	8007b84 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b8c:	f240 8081 	bls.w	8007c92 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <HAL_SPI_TransmitReceive+0x140>
 8007b98:	8a7b      	ldrh	r3, [r7, #18]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d16d      	bne.n	8007c7a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba2:	881a      	ldrh	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bae:	1c9a      	adds	r2, r3, #2
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bc2:	e05a      	b.n	8007c7a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d11b      	bne.n	8007c0a <HAL_SPI_TransmitReceive+0x1ac>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d016      	beq.n	8007c0a <HAL_SPI_TransmitReceive+0x1ac>
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d113      	bne.n	8007c0a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be6:	881a      	ldrh	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf2:	1c9a      	adds	r2, r3, #2
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c06:	2300      	movs	r3, #0
 8007c08:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d11c      	bne.n	8007c52 <HAL_SPI_TransmitReceive+0x1f4>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d016      	beq.n	8007c52 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2e:	b292      	uxth	r2, r2
 8007c30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c36:	1c9a      	adds	r2, r3, #2
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	3b01      	subs	r3, #1
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c52:	f7fa ff9d 	bl	8002b90 <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d80b      	bhi.n	8007c7a <HAL_SPI_TransmitReceive+0x21c>
 8007c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c68:	d007      	beq.n	8007c7a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007c78:	e109      	b.n	8007e8e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d19f      	bne.n	8007bc4 <HAL_SPI_TransmitReceive+0x166>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d199      	bne.n	8007bc4 <HAL_SPI_TransmitReceive+0x166>
 8007c90:	e0e3      	b.n	8007e5a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <HAL_SPI_TransmitReceive+0x244>
 8007c9a:	8a7b      	ldrh	r3, [r7, #18]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	f040 80cf 	bne.w	8007e40 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d912      	bls.n	8007cd2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb0:	881a      	ldrh	r2, [r3, #0]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cbc:	1c9a      	adds	r2, r3, #2
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	3b02      	subs	r3, #2
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007cd0:	e0b6      	b.n	8007e40 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	330c      	adds	r3, #12
 8007cdc:	7812      	ldrb	r2, [r2, #0]
 8007cde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce4:	1c5a      	adds	r2, r3, #1
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cf8:	e0a2      	b.n	8007e40 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d134      	bne.n	8007d72 <HAL_SPI_TransmitReceive+0x314>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d02f      	beq.n	8007d72 <HAL_SPI_TransmitReceive+0x314>
 8007d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d12c      	bne.n	8007d72 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d912      	bls.n	8007d48 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d26:	881a      	ldrh	r2, [r3, #0]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d32:	1c9a      	adds	r2, r3, #2
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	3b02      	subs	r3, #2
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d46:	e012      	b.n	8007d6e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	330c      	adds	r3, #12
 8007d52:	7812      	ldrb	r2, [r2, #0]
 8007d54:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	3b01      	subs	r3, #1
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d148      	bne.n	8007e12 <HAL_SPI_TransmitReceive+0x3b4>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d042      	beq.n	8007e12 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d923      	bls.n	8007de0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68da      	ldr	r2, [r3, #12]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da2:	b292      	uxth	r2, r2
 8007da4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007daa:	1c9a      	adds	r2, r3, #2
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	3b02      	subs	r3, #2
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d81f      	bhi.n	8007e0e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007ddc:	605a      	str	r2, [r3, #4]
 8007dde:	e016      	b.n	8007e0e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f103 020c 	add.w	r2, r3, #12
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dec:	7812      	ldrb	r2, [r2, #0]
 8007dee:	b2d2      	uxtb	r2, r2
 8007df0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	3b01      	subs	r3, #1
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e12:	f7fa febd 	bl	8002b90 <HAL_GetTick>
 8007e16:	4602      	mov	r2, r0
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d803      	bhi.n	8007e2a <HAL_SPI_TransmitReceive+0x3cc>
 8007e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e28:	d102      	bne.n	8007e30 <HAL_SPI_TransmitReceive+0x3d2>
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d107      	bne.n	8007e40 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007e3e:	e026      	b.n	8007e8e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f47f af57 	bne.w	8007cfa <HAL_SPI_TransmitReceive+0x29c>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f47f af50 	bne.w	8007cfa <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f000 f94c 	bl	80080fc <SPI_EndRxTxTransaction>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d005      	beq.n	8007e76 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2220      	movs	r2, #32
 8007e74:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d003      	beq.n	8007e86 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e84:	e003      	b.n	8007e8e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007e96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3728      	adds	r7, #40	@ 0x28
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007eb0:	b2db      	uxtb	r3, r3
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
	...

08007ec0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	603b      	str	r3, [r7, #0]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ed0:	f7fa fe5e 	bl	8002b90 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed8:	1a9b      	subs	r3, r3, r2
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	4413      	add	r3, r2
 8007ede:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ee0:	f7fa fe56 	bl	8002b90 <HAL_GetTick>
 8007ee4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007ee6:	4b39      	ldr	r3, [pc, #228]	@ (8007fcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	015b      	lsls	r3, r3, #5
 8007eec:	0d1b      	lsrs	r3, r3, #20
 8007eee:	69fa      	ldr	r2, [r7, #28]
 8007ef0:	fb02 f303 	mul.w	r3, r2, r3
 8007ef4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ef6:	e054      	b.n	8007fa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efe:	d050      	beq.n	8007fa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f00:	f7fa fe46 	bl	8002b90 <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	69fa      	ldr	r2, [r7, #28]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d902      	bls.n	8007f16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d13d      	bne.n	8007f92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007f24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f2e:	d111      	bne.n	8007f54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f38:	d004      	beq.n	8007f44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f42:	d107      	bne.n	8007f54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f5c:	d10f      	bne.n	8007f7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e017      	b.n	8007fc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d101      	bne.n	8007f9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	689a      	ldr	r2, [r3, #8]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	4013      	ands	r3, r2
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	bf0c      	ite	eq
 8007fb2:	2301      	moveq	r3, #1
 8007fb4:	2300      	movne	r3, #0
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	461a      	mov	r2, r3
 8007fba:	79fb      	ldrb	r3, [r7, #7]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d19b      	bne.n	8007ef8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3720      	adds	r7, #32
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20000000 	.word	0x20000000

08007fd0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b08a      	sub	sp, #40	@ 0x28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
 8007fdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007fe2:	f7fa fdd5 	bl	8002b90 <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fea:	1a9b      	subs	r3, r3, r2
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	4413      	add	r3, r2
 8007ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007ff2:	f7fa fdcd 	bl	8002b90 <HAL_GetTick>
 8007ff6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	330c      	adds	r3, #12
 8007ffe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008000:	4b3d      	ldr	r3, [pc, #244]	@ (80080f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	00da      	lsls	r2, r3, #3
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	0d1b      	lsrs	r3, r3, #20
 8008010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008012:	fb02 f303 	mul.w	r3, r2, r3
 8008016:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008018:	e060      	b.n	80080dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008020:	d107      	bne.n	8008032 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d104      	bne.n	8008032 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	b2db      	uxtb	r3, r3
 800802e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008030:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008038:	d050      	beq.n	80080dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800803a:	f7fa fda9 	bl	8002b90 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008046:	429a      	cmp	r2, r3
 8008048:	d902      	bls.n	8008050 <SPI_WaitFifoStateUntilTimeout+0x80>
 800804a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804c:	2b00      	cmp	r3, #0
 800804e:	d13d      	bne.n	80080cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800805e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008068:	d111      	bne.n	800808e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008072:	d004      	beq.n	800807e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800807c:	d107      	bne.n	800808e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800808c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008092:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008096:	d10f      	bne.n	80080b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80080b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e010      	b.n	80080ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	3b01      	subs	r3, #1
 80080da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689a      	ldr	r2, [r3, #8]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	4013      	ands	r3, r2
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d196      	bne.n	800801a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3728      	adds	r7, #40	@ 0x28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	20000000 	.word	0x20000000

080080fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af02      	add	r7, sp, #8
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	2200      	movs	r2, #0
 8008110:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f7ff ff5b 	bl	8007fd0 <SPI_WaitFifoStateUntilTimeout>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d007      	beq.n	8008130 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008124:	f043 0220 	orr.w	r2, r3, #32
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e027      	b.n	8008180 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	2200      	movs	r2, #0
 8008138:	2180      	movs	r1, #128	@ 0x80
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f7ff fec0 	bl	8007ec0 <SPI_WaitFlagStateUntilTimeout>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d007      	beq.n	8008156 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800814a:	f043 0220 	orr.w	r2, r3, #32
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e014      	b.n	8008180 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	2200      	movs	r2, #0
 800815e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f7ff ff34 	bl	8007fd0 <SPI_WaitFifoStateUntilTimeout>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d007      	beq.n	800817e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008172:	f043 0220 	orr.w	r2, r3, #32
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e000      	b.n	8008180 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e049      	b.n	800822e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d106      	bne.n	80081b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7fa f962 	bl	8002478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2202      	movs	r2, #2
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3304      	adds	r3, #4
 80081c4:	4619      	mov	r1, r3
 80081c6:	4610      	mov	r0, r2
 80081c8:	f000 fc9e 	bl	8008b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
	...

08008238 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b01      	cmp	r3, #1
 800824a:	d001      	beq.n	8008250 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e042      	b.n	80082d6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a21      	ldr	r2, [pc, #132]	@ (80082e4 <HAL_TIM_Base_Start+0xac>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d018      	beq.n	8008294 <HAL_TIM_Base_Start+0x5c>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800826a:	d013      	beq.n	8008294 <HAL_TIM_Base_Start+0x5c>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a1d      	ldr	r2, [pc, #116]	@ (80082e8 <HAL_TIM_Base_Start+0xb0>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d00e      	beq.n	8008294 <HAL_TIM_Base_Start+0x5c>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a1c      	ldr	r2, [pc, #112]	@ (80082ec <HAL_TIM_Base_Start+0xb4>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d009      	beq.n	8008294 <HAL_TIM_Base_Start+0x5c>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a1a      	ldr	r2, [pc, #104]	@ (80082f0 <HAL_TIM_Base_Start+0xb8>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d004      	beq.n	8008294 <HAL_TIM_Base_Start+0x5c>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a19      	ldr	r2, [pc, #100]	@ (80082f4 <HAL_TIM_Base_Start+0xbc>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d115      	bne.n	80082c0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689a      	ldr	r2, [r3, #8]
 800829a:	4b17      	ldr	r3, [pc, #92]	@ (80082f8 <HAL_TIM_Base_Start+0xc0>)
 800829c:	4013      	ands	r3, r2
 800829e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2b06      	cmp	r3, #6
 80082a4:	d015      	beq.n	80082d2 <HAL_TIM_Base_Start+0x9a>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082ac:	d011      	beq.n	80082d2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f042 0201 	orr.w	r2, r2, #1
 80082bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082be:	e008      	b.n	80082d2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f042 0201 	orr.w	r2, r2, #1
 80082ce:	601a      	str	r2, [r3, #0]
 80082d0:	e000      	b.n	80082d4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3714      	adds	r7, #20
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	40012c00 	.word	0x40012c00
 80082e8:	40000400 	.word	0x40000400
 80082ec:	40000800 	.word	0x40000800
 80082f0:	40013400 	.word	0x40013400
 80082f4:	40014000 	.word	0x40014000
 80082f8:	00010007 	.word	0x00010007

080082fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e049      	b.n	80083a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b00      	cmp	r3, #0
 8008318:	d106      	bne.n	8008328 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f841 	bl	80083aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2202      	movs	r2, #2
 800832c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	3304      	adds	r3, #4
 8008338:	4619      	mov	r1, r3
 800833a:	4610      	mov	r0, r2
 800833c:	f000 fbe4 	bl	8008b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80083b2:	bf00      	nop
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
	...

080083c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d109      	bne.n	80083e4 <HAL_TIM_PWM_Start+0x24>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b01      	cmp	r3, #1
 80083da:	bf14      	ite	ne
 80083dc:	2301      	movne	r3, #1
 80083de:	2300      	moveq	r3, #0
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	e03c      	b.n	800845e <HAL_TIM_PWM_Start+0x9e>
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	2b04      	cmp	r3, #4
 80083e8:	d109      	bne.n	80083fe <HAL_TIM_PWM_Start+0x3e>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	bf14      	ite	ne
 80083f6:	2301      	movne	r3, #1
 80083f8:	2300      	moveq	r3, #0
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	e02f      	b.n	800845e <HAL_TIM_PWM_Start+0x9e>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b08      	cmp	r3, #8
 8008402:	d109      	bne.n	8008418 <HAL_TIM_PWM_Start+0x58>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b01      	cmp	r3, #1
 800840e:	bf14      	ite	ne
 8008410:	2301      	movne	r3, #1
 8008412:	2300      	moveq	r3, #0
 8008414:	b2db      	uxtb	r3, r3
 8008416:	e022      	b.n	800845e <HAL_TIM_PWM_Start+0x9e>
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	2b0c      	cmp	r3, #12
 800841c:	d109      	bne.n	8008432 <HAL_TIM_PWM_Start+0x72>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b01      	cmp	r3, #1
 8008428:	bf14      	ite	ne
 800842a:	2301      	movne	r3, #1
 800842c:	2300      	moveq	r3, #0
 800842e:	b2db      	uxtb	r3, r3
 8008430:	e015      	b.n	800845e <HAL_TIM_PWM_Start+0x9e>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b10      	cmp	r3, #16
 8008436:	d109      	bne.n	800844c <HAL_TIM_PWM_Start+0x8c>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b01      	cmp	r3, #1
 8008442:	bf14      	ite	ne
 8008444:	2301      	movne	r3, #1
 8008446:	2300      	moveq	r3, #0
 8008448:	b2db      	uxtb	r3, r3
 800844a:	e008      	b.n	800845e <HAL_TIM_PWM_Start+0x9e>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b01      	cmp	r3, #1
 8008456:	bf14      	ite	ne
 8008458:	2301      	movne	r3, #1
 800845a:	2300      	moveq	r3, #0
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e097      	b.n	8008596 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d104      	bne.n	8008476 <HAL_TIM_PWM_Start+0xb6>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008474:	e023      	b.n	80084be <HAL_TIM_PWM_Start+0xfe>
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b04      	cmp	r3, #4
 800847a:	d104      	bne.n	8008486 <HAL_TIM_PWM_Start+0xc6>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2202      	movs	r2, #2
 8008480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008484:	e01b      	b.n	80084be <HAL_TIM_PWM_Start+0xfe>
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b08      	cmp	r3, #8
 800848a:	d104      	bne.n	8008496 <HAL_TIM_PWM_Start+0xd6>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2202      	movs	r2, #2
 8008490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008494:	e013      	b.n	80084be <HAL_TIM_PWM_Start+0xfe>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2b0c      	cmp	r3, #12
 800849a:	d104      	bne.n	80084a6 <HAL_TIM_PWM_Start+0xe6>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084a4:	e00b      	b.n	80084be <HAL_TIM_PWM_Start+0xfe>
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b10      	cmp	r3, #16
 80084aa:	d104      	bne.n	80084b6 <HAL_TIM_PWM_Start+0xf6>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2202      	movs	r2, #2
 80084b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084b4:	e003      	b.n	80084be <HAL_TIM_PWM_Start+0xfe>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2202      	movs	r2, #2
 80084ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2201      	movs	r2, #1
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 ff4c 	bl	8009364 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a33      	ldr	r2, [pc, #204]	@ (80085a0 <HAL_TIM_PWM_Start+0x1e0>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d013      	beq.n	80084fe <HAL_TIM_PWM_Start+0x13e>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a32      	ldr	r2, [pc, #200]	@ (80085a4 <HAL_TIM_PWM_Start+0x1e4>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d00e      	beq.n	80084fe <HAL_TIM_PWM_Start+0x13e>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a30      	ldr	r2, [pc, #192]	@ (80085a8 <HAL_TIM_PWM_Start+0x1e8>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d009      	beq.n	80084fe <HAL_TIM_PWM_Start+0x13e>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a2f      	ldr	r2, [pc, #188]	@ (80085ac <HAL_TIM_PWM_Start+0x1ec>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d004      	beq.n	80084fe <HAL_TIM_PWM_Start+0x13e>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a2d      	ldr	r2, [pc, #180]	@ (80085b0 <HAL_TIM_PWM_Start+0x1f0>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d101      	bne.n	8008502 <HAL_TIM_PWM_Start+0x142>
 80084fe:	2301      	movs	r3, #1
 8008500:	e000      	b.n	8008504 <HAL_TIM_PWM_Start+0x144>
 8008502:	2300      	movs	r3, #0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d007      	beq.n	8008518 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008516:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a20      	ldr	r2, [pc, #128]	@ (80085a0 <HAL_TIM_PWM_Start+0x1e0>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d018      	beq.n	8008554 <HAL_TIM_PWM_Start+0x194>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800852a:	d013      	beq.n	8008554 <HAL_TIM_PWM_Start+0x194>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a20      	ldr	r2, [pc, #128]	@ (80085b4 <HAL_TIM_PWM_Start+0x1f4>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d00e      	beq.n	8008554 <HAL_TIM_PWM_Start+0x194>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a1f      	ldr	r2, [pc, #124]	@ (80085b8 <HAL_TIM_PWM_Start+0x1f8>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d009      	beq.n	8008554 <HAL_TIM_PWM_Start+0x194>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a17      	ldr	r2, [pc, #92]	@ (80085a4 <HAL_TIM_PWM_Start+0x1e4>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d004      	beq.n	8008554 <HAL_TIM_PWM_Start+0x194>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a16      	ldr	r2, [pc, #88]	@ (80085a8 <HAL_TIM_PWM_Start+0x1e8>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d115      	bne.n	8008580 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	4b18      	ldr	r3, [pc, #96]	@ (80085bc <HAL_TIM_PWM_Start+0x1fc>)
 800855c:	4013      	ands	r3, r2
 800855e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b06      	cmp	r3, #6
 8008564:	d015      	beq.n	8008592 <HAL_TIM_PWM_Start+0x1d2>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800856c:	d011      	beq.n	8008592 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f042 0201 	orr.w	r2, r2, #1
 800857c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800857e:	e008      	b.n	8008592 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f042 0201 	orr.w	r2, r2, #1
 800858e:	601a      	str	r2, [r3, #0]
 8008590:	e000      	b.n	8008594 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008592:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	40012c00 	.word	0x40012c00
 80085a4:	40013400 	.word	0x40013400
 80085a8:	40014000 	.word	0x40014000
 80085ac:	40014400 	.word	0x40014400
 80085b0:	40014800 	.word	0x40014800
 80085b4:	40000400 	.word	0x40000400
 80085b8:	40000800 	.word	0x40000800
 80085bc:	00010007 	.word	0x00010007

080085c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2200      	movs	r2, #0
 80085d0:	6839      	ldr	r1, [r7, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 fec6 	bl	8009364 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a3e      	ldr	r2, [pc, #248]	@ (80086d8 <HAL_TIM_PWM_Stop+0x118>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d013      	beq.n	800860a <HAL_TIM_PWM_Stop+0x4a>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a3d      	ldr	r2, [pc, #244]	@ (80086dc <HAL_TIM_PWM_Stop+0x11c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d00e      	beq.n	800860a <HAL_TIM_PWM_Stop+0x4a>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a3b      	ldr	r2, [pc, #236]	@ (80086e0 <HAL_TIM_PWM_Stop+0x120>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d009      	beq.n	800860a <HAL_TIM_PWM_Stop+0x4a>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a3a      	ldr	r2, [pc, #232]	@ (80086e4 <HAL_TIM_PWM_Stop+0x124>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d004      	beq.n	800860a <HAL_TIM_PWM_Stop+0x4a>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a38      	ldr	r2, [pc, #224]	@ (80086e8 <HAL_TIM_PWM_Stop+0x128>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d101      	bne.n	800860e <HAL_TIM_PWM_Stop+0x4e>
 800860a:	2301      	movs	r3, #1
 800860c:	e000      	b.n	8008610 <HAL_TIM_PWM_Stop+0x50>
 800860e:	2300      	movs	r3, #0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d017      	beq.n	8008644 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6a1a      	ldr	r2, [r3, #32]
 800861a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800861e:	4013      	ands	r3, r2
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10f      	bne.n	8008644 <HAL_TIM_PWM_Stop+0x84>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6a1a      	ldr	r2, [r3, #32]
 800862a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800862e:	4013      	ands	r3, r2
 8008630:	2b00      	cmp	r3, #0
 8008632:	d107      	bne.n	8008644 <HAL_TIM_PWM_Stop+0x84>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008642:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6a1a      	ldr	r2, [r3, #32]
 800864a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800864e:	4013      	ands	r3, r2
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10f      	bne.n	8008674 <HAL_TIM_PWM_Stop+0xb4>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6a1a      	ldr	r2, [r3, #32]
 800865a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800865e:	4013      	ands	r3, r2
 8008660:	2b00      	cmp	r3, #0
 8008662:	d107      	bne.n	8008674 <HAL_TIM_PWM_Stop+0xb4>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f022 0201 	bic.w	r2, r2, #1
 8008672:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d104      	bne.n	8008684 <HAL_TIM_PWM_Stop+0xc4>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008682:	e023      	b.n	80086cc <HAL_TIM_PWM_Stop+0x10c>
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	2b04      	cmp	r3, #4
 8008688:	d104      	bne.n	8008694 <HAL_TIM_PWM_Stop+0xd4>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008692:	e01b      	b.n	80086cc <HAL_TIM_PWM_Stop+0x10c>
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	2b08      	cmp	r3, #8
 8008698:	d104      	bne.n	80086a4 <HAL_TIM_PWM_Stop+0xe4>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086a2:	e013      	b.n	80086cc <HAL_TIM_PWM_Stop+0x10c>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2b0c      	cmp	r3, #12
 80086a8:	d104      	bne.n	80086b4 <HAL_TIM_PWM_Stop+0xf4>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80086b2:	e00b      	b.n	80086cc <HAL_TIM_PWM_Stop+0x10c>
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	2b10      	cmp	r3, #16
 80086b8:	d104      	bne.n	80086c4 <HAL_TIM_PWM_Stop+0x104>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086c2:	e003      	b.n	80086cc <HAL_TIM_PWM_Stop+0x10c>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	40012c00 	.word	0x40012c00
 80086dc:	40013400 	.word	0x40013400
 80086e0:	40014000 	.word	0x40014000
 80086e4:	40014400 	.word	0x40014400
 80086e8:	40014800 	.word	0x40014800

080086ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b086      	sub	sp, #24
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008702:	2b01      	cmp	r3, #1
 8008704:	d101      	bne.n	800870a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008706:	2302      	movs	r3, #2
 8008708:	e0ff      	b.n	800890a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2b14      	cmp	r3, #20
 8008716:	f200 80f0 	bhi.w	80088fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800871a:	a201      	add	r2, pc, #4	@ (adr r2, 8008720 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800871c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008720:	08008775 	.word	0x08008775
 8008724:	080088fb 	.word	0x080088fb
 8008728:	080088fb 	.word	0x080088fb
 800872c:	080088fb 	.word	0x080088fb
 8008730:	080087b5 	.word	0x080087b5
 8008734:	080088fb 	.word	0x080088fb
 8008738:	080088fb 	.word	0x080088fb
 800873c:	080088fb 	.word	0x080088fb
 8008740:	080087f7 	.word	0x080087f7
 8008744:	080088fb 	.word	0x080088fb
 8008748:	080088fb 	.word	0x080088fb
 800874c:	080088fb 	.word	0x080088fb
 8008750:	08008837 	.word	0x08008837
 8008754:	080088fb 	.word	0x080088fb
 8008758:	080088fb 	.word	0x080088fb
 800875c:	080088fb 	.word	0x080088fb
 8008760:	08008879 	.word	0x08008879
 8008764:	080088fb 	.word	0x080088fb
 8008768:	080088fb 	.word	0x080088fb
 800876c:	080088fb 	.word	0x080088fb
 8008770:	080088b9 	.word	0x080088b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68b9      	ldr	r1, [r7, #8]
 800877a:	4618      	mov	r0, r3
 800877c:	f000 fa60 	bl	8008c40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	699a      	ldr	r2, [r3, #24]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f042 0208 	orr.w	r2, r2, #8
 800878e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	699a      	ldr	r2, [r3, #24]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f022 0204 	bic.w	r2, r2, #4
 800879e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6999      	ldr	r1, [r3, #24]
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	691a      	ldr	r2, [r3, #16]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	430a      	orrs	r2, r1
 80087b0:	619a      	str	r2, [r3, #24]
      break;
 80087b2:	e0a5      	b.n	8008900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68b9      	ldr	r1, [r7, #8]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f000 fad0 	bl	8008d60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	699a      	ldr	r2, [r3, #24]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	699a      	ldr	r2, [r3, #24]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6999      	ldr	r1, [r3, #24]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	021a      	lsls	r2, r3, #8
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	430a      	orrs	r2, r1
 80087f2:	619a      	str	r2, [r3, #24]
      break;
 80087f4:	e084      	b.n	8008900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68b9      	ldr	r1, [r7, #8]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f000 fb39 	bl	8008e74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	69da      	ldr	r2, [r3, #28]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f042 0208 	orr.w	r2, r2, #8
 8008810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	69da      	ldr	r2, [r3, #28]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f022 0204 	bic.w	r2, r2, #4
 8008820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	69d9      	ldr	r1, [r3, #28]
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	691a      	ldr	r2, [r3, #16]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	430a      	orrs	r2, r1
 8008832:	61da      	str	r2, [r3, #28]
      break;
 8008834:	e064      	b.n	8008900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68b9      	ldr	r1, [r7, #8]
 800883c:	4618      	mov	r0, r3
 800883e:	f000 fba1 	bl	8008f84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	69da      	ldr	r2, [r3, #28]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	69da      	ldr	r2, [r3, #28]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	69d9      	ldr	r1, [r3, #28]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	021a      	lsls	r2, r3, #8
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	430a      	orrs	r2, r1
 8008874:	61da      	str	r2, [r3, #28]
      break;
 8008876:	e043      	b.n	8008900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68b9      	ldr	r1, [r7, #8]
 800887e:	4618      	mov	r0, r3
 8008880:	f000 fc0a 	bl	8009098 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f042 0208 	orr.w	r2, r2, #8
 8008892:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f022 0204 	bic.w	r2, r2, #4
 80088a2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	691a      	ldr	r2, [r3, #16]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	430a      	orrs	r2, r1
 80088b4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80088b6:	e023      	b.n	8008900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68b9      	ldr	r1, [r7, #8]
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 fc4e 	bl	8009160 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088e2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	021a      	lsls	r2, r3, #8
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	430a      	orrs	r2, r1
 80088f6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80088f8:	e002      	b.n	8008900 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	75fb      	strb	r3, [r7, #23]
      break;
 80088fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008908:	7dfb      	ldrb	r3, [r7, #23]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop

08008914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800891e:	2300      	movs	r3, #0
 8008920:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008928:	2b01      	cmp	r3, #1
 800892a:	d101      	bne.n	8008930 <HAL_TIM_ConfigClockSource+0x1c>
 800892c:	2302      	movs	r3, #2
 800892e:	e0de      	b.n	8008aee <HAL_TIM_ConfigClockSource+0x1da>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800894e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800895a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a63      	ldr	r2, [pc, #396]	@ (8008af8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800896a:	4293      	cmp	r3, r2
 800896c:	f000 80a9 	beq.w	8008ac2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008970:	4a61      	ldr	r2, [pc, #388]	@ (8008af8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008972:	4293      	cmp	r3, r2
 8008974:	f200 80ae 	bhi.w	8008ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008978:	4a60      	ldr	r2, [pc, #384]	@ (8008afc <HAL_TIM_ConfigClockSource+0x1e8>)
 800897a:	4293      	cmp	r3, r2
 800897c:	f000 80a1 	beq.w	8008ac2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008980:	4a5e      	ldr	r2, [pc, #376]	@ (8008afc <HAL_TIM_ConfigClockSource+0x1e8>)
 8008982:	4293      	cmp	r3, r2
 8008984:	f200 80a6 	bhi.w	8008ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008988:	4a5d      	ldr	r2, [pc, #372]	@ (8008b00 <HAL_TIM_ConfigClockSource+0x1ec>)
 800898a:	4293      	cmp	r3, r2
 800898c:	f000 8099 	beq.w	8008ac2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008990:	4a5b      	ldr	r2, [pc, #364]	@ (8008b00 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008992:	4293      	cmp	r3, r2
 8008994:	f200 809e 	bhi.w	8008ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008998:	4a5a      	ldr	r2, [pc, #360]	@ (8008b04 <HAL_TIM_ConfigClockSource+0x1f0>)
 800899a:	4293      	cmp	r3, r2
 800899c:	f000 8091 	beq.w	8008ac2 <HAL_TIM_ConfigClockSource+0x1ae>
 80089a0:	4a58      	ldr	r2, [pc, #352]	@ (8008b04 <HAL_TIM_ConfigClockSource+0x1f0>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	f200 8096 	bhi.w	8008ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 80089a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80089ac:	f000 8089 	beq.w	8008ac2 <HAL_TIM_ConfigClockSource+0x1ae>
 80089b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80089b4:	f200 808e 	bhi.w	8008ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 80089b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089bc:	d03e      	beq.n	8008a3c <HAL_TIM_ConfigClockSource+0x128>
 80089be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089c2:	f200 8087 	bhi.w	8008ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 80089c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089ca:	f000 8086 	beq.w	8008ada <HAL_TIM_ConfigClockSource+0x1c6>
 80089ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089d2:	d87f      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 80089d4:	2b70      	cmp	r3, #112	@ 0x70
 80089d6:	d01a      	beq.n	8008a0e <HAL_TIM_ConfigClockSource+0xfa>
 80089d8:	2b70      	cmp	r3, #112	@ 0x70
 80089da:	d87b      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 80089dc:	2b60      	cmp	r3, #96	@ 0x60
 80089de:	d050      	beq.n	8008a82 <HAL_TIM_ConfigClockSource+0x16e>
 80089e0:	2b60      	cmp	r3, #96	@ 0x60
 80089e2:	d877      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 80089e4:	2b50      	cmp	r3, #80	@ 0x50
 80089e6:	d03c      	beq.n	8008a62 <HAL_TIM_ConfigClockSource+0x14e>
 80089e8:	2b50      	cmp	r3, #80	@ 0x50
 80089ea:	d873      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 80089ec:	2b40      	cmp	r3, #64	@ 0x40
 80089ee:	d058      	beq.n	8008aa2 <HAL_TIM_ConfigClockSource+0x18e>
 80089f0:	2b40      	cmp	r3, #64	@ 0x40
 80089f2:	d86f      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 80089f4:	2b30      	cmp	r3, #48	@ 0x30
 80089f6:	d064      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x1ae>
 80089f8:	2b30      	cmp	r3, #48	@ 0x30
 80089fa:	d86b      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 80089fc:	2b20      	cmp	r3, #32
 80089fe:	d060      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008a00:	2b20      	cmp	r3, #32
 8008a02:	d867      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d05c      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008a08:	2b10      	cmp	r3, #16
 8008a0a:	d05a      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008a0c:	e062      	b.n	8008ad4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a1e:	f000 fc81 	bl	8009324 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	609a      	str	r2, [r3, #8]
      break;
 8008a3a:	e04f      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a4c:	f000 fc6a 	bl	8009324 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	689a      	ldr	r2, [r3, #8]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a5e:	609a      	str	r2, [r3, #8]
      break;
 8008a60:	e03c      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a6e:	461a      	mov	r2, r3
 8008a70:	f000 fbdc 	bl	800922c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2150      	movs	r1, #80	@ 0x50
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 fc35 	bl	80092ea <TIM_ITRx_SetConfig>
      break;
 8008a80:	e02c      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a8e:	461a      	mov	r2, r3
 8008a90:	f000 fbfb 	bl	800928a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2160      	movs	r1, #96	@ 0x60
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 fc25 	bl	80092ea <TIM_ITRx_SetConfig>
      break;
 8008aa0:	e01c      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f000 fbbc 	bl	800922c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2140      	movs	r1, #64	@ 0x40
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 fc15 	bl	80092ea <TIM_ITRx_SetConfig>
      break;
 8008ac0:	e00c      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4619      	mov	r1, r3
 8008acc:	4610      	mov	r0, r2
 8008ace:	f000 fc0c 	bl	80092ea <TIM_ITRx_SetConfig>
      break;
 8008ad2:	e003      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ad8:	e000      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8008ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	00100070 	.word	0x00100070
 8008afc:	00100040 	.word	0x00100040
 8008b00:	00100030 	.word	0x00100030
 8008b04:	00100020 	.word	0x00100020

08008b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a42      	ldr	r2, [pc, #264]	@ (8008c24 <TIM_Base_SetConfig+0x11c>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d00f      	beq.n	8008b40 <TIM_Base_SetConfig+0x38>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b26:	d00b      	beq.n	8008b40 <TIM_Base_SetConfig+0x38>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a3f      	ldr	r2, [pc, #252]	@ (8008c28 <TIM_Base_SetConfig+0x120>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d007      	beq.n	8008b40 <TIM_Base_SetConfig+0x38>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a3e      	ldr	r2, [pc, #248]	@ (8008c2c <TIM_Base_SetConfig+0x124>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d003      	beq.n	8008b40 <TIM_Base_SetConfig+0x38>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a3d      	ldr	r2, [pc, #244]	@ (8008c30 <TIM_Base_SetConfig+0x128>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d108      	bne.n	8008b52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a33      	ldr	r2, [pc, #204]	@ (8008c24 <TIM_Base_SetConfig+0x11c>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d01b      	beq.n	8008b92 <TIM_Base_SetConfig+0x8a>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b60:	d017      	beq.n	8008b92 <TIM_Base_SetConfig+0x8a>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a30      	ldr	r2, [pc, #192]	@ (8008c28 <TIM_Base_SetConfig+0x120>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d013      	beq.n	8008b92 <TIM_Base_SetConfig+0x8a>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a2f      	ldr	r2, [pc, #188]	@ (8008c2c <TIM_Base_SetConfig+0x124>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d00f      	beq.n	8008b92 <TIM_Base_SetConfig+0x8a>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a2e      	ldr	r2, [pc, #184]	@ (8008c30 <TIM_Base_SetConfig+0x128>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d00b      	beq.n	8008b92 <TIM_Base_SetConfig+0x8a>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a2d      	ldr	r2, [pc, #180]	@ (8008c34 <TIM_Base_SetConfig+0x12c>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d007      	beq.n	8008b92 <TIM_Base_SetConfig+0x8a>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a2c      	ldr	r2, [pc, #176]	@ (8008c38 <TIM_Base_SetConfig+0x130>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d003      	beq.n	8008b92 <TIM_Base_SetConfig+0x8a>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a2b      	ldr	r2, [pc, #172]	@ (8008c3c <TIM_Base_SetConfig+0x134>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d108      	bne.n	8008ba4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	689a      	ldr	r2, [r3, #8]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a16      	ldr	r2, [pc, #88]	@ (8008c24 <TIM_Base_SetConfig+0x11c>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d00f      	beq.n	8008bf0 <TIM_Base_SetConfig+0xe8>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a17      	ldr	r2, [pc, #92]	@ (8008c30 <TIM_Base_SetConfig+0x128>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d00b      	beq.n	8008bf0 <TIM_Base_SetConfig+0xe8>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a16      	ldr	r2, [pc, #88]	@ (8008c34 <TIM_Base_SetConfig+0x12c>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d007      	beq.n	8008bf0 <TIM_Base_SetConfig+0xe8>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a15      	ldr	r2, [pc, #84]	@ (8008c38 <TIM_Base_SetConfig+0x130>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d003      	beq.n	8008bf0 <TIM_Base_SetConfig+0xe8>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a14      	ldr	r2, [pc, #80]	@ (8008c3c <TIM_Base_SetConfig+0x134>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d103      	bne.n	8008bf8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	691a      	ldr	r2, [r3, #16]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d105      	bne.n	8008c16 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	f023 0201 	bic.w	r2, r3, #1
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	611a      	str	r2, [r3, #16]
  }
}
 8008c16:	bf00      	nop
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	40012c00 	.word	0x40012c00
 8008c28:	40000400 	.word	0x40000400
 8008c2c:	40000800 	.word	0x40000800
 8008c30:	40013400 	.word	0x40013400
 8008c34:	40014000 	.word	0x40014000
 8008c38:	40014400 	.word	0x40014400
 8008c3c:	40014800 	.word	0x40014800

08008c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b087      	sub	sp, #28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a1b      	ldr	r3, [r3, #32]
 8008c54:	f023 0201 	bic.w	r2, r3, #1
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f023 0303 	bic.w	r3, r3, #3
 8008c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f023 0302 	bic.w	r3, r3, #2
 8008c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a2c      	ldr	r2, [pc, #176]	@ (8008d4c <TIM_OC1_SetConfig+0x10c>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d00f      	beq.n	8008cc0 <TIM_OC1_SetConfig+0x80>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a2b      	ldr	r2, [pc, #172]	@ (8008d50 <TIM_OC1_SetConfig+0x110>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d00b      	beq.n	8008cc0 <TIM_OC1_SetConfig+0x80>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a2a      	ldr	r2, [pc, #168]	@ (8008d54 <TIM_OC1_SetConfig+0x114>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d007      	beq.n	8008cc0 <TIM_OC1_SetConfig+0x80>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a29      	ldr	r2, [pc, #164]	@ (8008d58 <TIM_OC1_SetConfig+0x118>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d003      	beq.n	8008cc0 <TIM_OC1_SetConfig+0x80>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a28      	ldr	r2, [pc, #160]	@ (8008d5c <TIM_OC1_SetConfig+0x11c>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d10c      	bne.n	8008cda <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f023 0308 	bic.w	r3, r3, #8
 8008cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	697a      	ldr	r2, [r7, #20]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	f023 0304 	bic.w	r3, r3, #4
 8008cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8008d4c <TIM_OC1_SetConfig+0x10c>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d00f      	beq.n	8008d02 <TIM_OC1_SetConfig+0xc2>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a1a      	ldr	r2, [pc, #104]	@ (8008d50 <TIM_OC1_SetConfig+0x110>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d00b      	beq.n	8008d02 <TIM_OC1_SetConfig+0xc2>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a19      	ldr	r2, [pc, #100]	@ (8008d54 <TIM_OC1_SetConfig+0x114>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d007      	beq.n	8008d02 <TIM_OC1_SetConfig+0xc2>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a18      	ldr	r2, [pc, #96]	@ (8008d58 <TIM_OC1_SetConfig+0x118>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d003      	beq.n	8008d02 <TIM_OC1_SetConfig+0xc2>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a17      	ldr	r2, [pc, #92]	@ (8008d5c <TIM_OC1_SetConfig+0x11c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d111      	bne.n	8008d26 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	695b      	ldr	r3, [r3, #20]
 8008d16:	693a      	ldr	r2, [r7, #16]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	693a      	ldr	r2, [r7, #16]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	621a      	str	r2, [r3, #32]
}
 8008d40:	bf00      	nop
 8008d42:	371c      	adds	r7, #28
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	40012c00 	.word	0x40012c00
 8008d50:	40013400 	.word	0x40013400
 8008d54:	40014000 	.word	0x40014000
 8008d58:	40014400 	.word	0x40014400
 8008d5c:	40014800 	.word	0x40014800

08008d60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a1b      	ldr	r3, [r3, #32]
 8008d74:	f023 0210 	bic.w	r2, r3, #16
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	021b      	lsls	r3, r3, #8
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	f023 0320 	bic.w	r3, r3, #32
 8008dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	011b      	lsls	r3, r3, #4
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a28      	ldr	r2, [pc, #160]	@ (8008e60 <TIM_OC2_SetConfig+0x100>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d003      	beq.n	8008dcc <TIM_OC2_SetConfig+0x6c>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a27      	ldr	r2, [pc, #156]	@ (8008e64 <TIM_OC2_SetConfig+0x104>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d10d      	bne.n	8008de8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	011b      	lsls	r3, r3, #4
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008de6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a1d      	ldr	r2, [pc, #116]	@ (8008e60 <TIM_OC2_SetConfig+0x100>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d00f      	beq.n	8008e10 <TIM_OC2_SetConfig+0xb0>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a1c      	ldr	r2, [pc, #112]	@ (8008e64 <TIM_OC2_SetConfig+0x104>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d00b      	beq.n	8008e10 <TIM_OC2_SetConfig+0xb0>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8008e68 <TIM_OC2_SetConfig+0x108>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d007      	beq.n	8008e10 <TIM_OC2_SetConfig+0xb0>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a1a      	ldr	r2, [pc, #104]	@ (8008e6c <TIM_OC2_SetConfig+0x10c>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d003      	beq.n	8008e10 <TIM_OC2_SetConfig+0xb0>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a19      	ldr	r2, [pc, #100]	@ (8008e70 <TIM_OC2_SetConfig+0x110>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d113      	bne.n	8008e38 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	695b      	ldr	r3, [r3, #20]
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	693a      	ldr	r2, [r7, #16]
 8008e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	685a      	ldr	r2, [r3, #4]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	621a      	str	r2, [r3, #32]
}
 8008e52:	bf00      	nop
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	40012c00 	.word	0x40012c00
 8008e64:	40013400 	.word	0x40013400
 8008e68:	40014000 	.word	0x40014000
 8008e6c:	40014400 	.word	0x40014400
 8008e70:	40014800 	.word	0x40014800

08008e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b087      	sub	sp, #28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a1b      	ldr	r3, [r3, #32]
 8008e88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	69db      	ldr	r3, [r3, #28]
 8008e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f023 0303 	bic.w	r3, r3, #3
 8008eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	021b      	lsls	r3, r3, #8
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a27      	ldr	r2, [pc, #156]	@ (8008f70 <TIM_OC3_SetConfig+0xfc>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d003      	beq.n	8008ede <TIM_OC3_SetConfig+0x6a>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a26      	ldr	r2, [pc, #152]	@ (8008f74 <TIM_OC3_SetConfig+0x100>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d10d      	bne.n	8008efa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	021b      	lsls	r3, r3, #8
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a1c      	ldr	r2, [pc, #112]	@ (8008f70 <TIM_OC3_SetConfig+0xfc>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d00f      	beq.n	8008f22 <TIM_OC3_SetConfig+0xae>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a1b      	ldr	r2, [pc, #108]	@ (8008f74 <TIM_OC3_SetConfig+0x100>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d00b      	beq.n	8008f22 <TIM_OC3_SetConfig+0xae>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a1a      	ldr	r2, [pc, #104]	@ (8008f78 <TIM_OC3_SetConfig+0x104>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d007      	beq.n	8008f22 <TIM_OC3_SetConfig+0xae>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a19      	ldr	r2, [pc, #100]	@ (8008f7c <TIM_OC3_SetConfig+0x108>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d003      	beq.n	8008f22 <TIM_OC3_SetConfig+0xae>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a18      	ldr	r2, [pc, #96]	@ (8008f80 <TIM_OC3_SetConfig+0x10c>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d113      	bne.n	8008f4a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	011b      	lsls	r3, r3, #4
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	699b      	ldr	r3, [r3, #24]
 8008f42:	011b      	lsls	r3, r3, #4
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	685a      	ldr	r2, [r3, #4]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	621a      	str	r2, [r3, #32]
}
 8008f64:	bf00      	nop
 8008f66:	371c      	adds	r7, #28
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	40012c00 	.word	0x40012c00
 8008f74:	40013400 	.word	0x40013400
 8008f78:	40014000 	.word	0x40014000
 8008f7c:	40014400 	.word	0x40014400
 8008f80:	40014800 	.word	0x40014800

08008f84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b087      	sub	sp, #28
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a1b      	ldr	r3, [r3, #32]
 8008f92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a1b      	ldr	r3, [r3, #32]
 8008f98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	69db      	ldr	r3, [r3, #28]
 8008faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	021b      	lsls	r3, r3, #8
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008fd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	031b      	lsls	r3, r3, #12
 8008fda:	697a      	ldr	r2, [r7, #20]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a28      	ldr	r2, [pc, #160]	@ (8009084 <TIM_OC4_SetConfig+0x100>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d003      	beq.n	8008ff0 <TIM_OC4_SetConfig+0x6c>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a27      	ldr	r2, [pc, #156]	@ (8009088 <TIM_OC4_SetConfig+0x104>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d10d      	bne.n	800900c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	031b      	lsls	r3, r3, #12
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	4313      	orrs	r3, r2
 8009002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800900a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a1d      	ldr	r2, [pc, #116]	@ (8009084 <TIM_OC4_SetConfig+0x100>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d00f      	beq.n	8009034 <TIM_OC4_SetConfig+0xb0>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a1c      	ldr	r2, [pc, #112]	@ (8009088 <TIM_OC4_SetConfig+0x104>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d00b      	beq.n	8009034 <TIM_OC4_SetConfig+0xb0>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a1b      	ldr	r2, [pc, #108]	@ (800908c <TIM_OC4_SetConfig+0x108>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d007      	beq.n	8009034 <TIM_OC4_SetConfig+0xb0>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a1a      	ldr	r2, [pc, #104]	@ (8009090 <TIM_OC4_SetConfig+0x10c>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d003      	beq.n	8009034 <TIM_OC4_SetConfig+0xb0>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a19      	ldr	r2, [pc, #100]	@ (8009094 <TIM_OC4_SetConfig+0x110>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d113      	bne.n	800905c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800903a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009042:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	695b      	ldr	r3, [r3, #20]
 8009048:	019b      	lsls	r3, r3, #6
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	4313      	orrs	r3, r2
 800904e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	019b      	lsls	r3, r3, #6
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	4313      	orrs	r3, r2
 800905a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	693a      	ldr	r2, [r7, #16]
 8009060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	697a      	ldr	r2, [r7, #20]
 8009074:	621a      	str	r2, [r3, #32]
}
 8009076:	bf00      	nop
 8009078:	371c      	adds	r7, #28
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	40012c00 	.word	0x40012c00
 8009088:	40013400 	.word	0x40013400
 800908c:	40014000 	.word	0x40014000
 8009090:	40014400 	.word	0x40014400
 8009094:	40014800 	.word	0x40014800

08009098 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009098:	b480      	push	{r7}
 800909a:	b087      	sub	sp, #28
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a1b      	ldr	r3, [r3, #32]
 80090ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80090dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	041b      	lsls	r3, r3, #16
 80090e4:	693a      	ldr	r2, [r7, #16]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a17      	ldr	r2, [pc, #92]	@ (800914c <TIM_OC5_SetConfig+0xb4>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d00f      	beq.n	8009112 <TIM_OC5_SetConfig+0x7a>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a16      	ldr	r2, [pc, #88]	@ (8009150 <TIM_OC5_SetConfig+0xb8>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d00b      	beq.n	8009112 <TIM_OC5_SetConfig+0x7a>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a15      	ldr	r2, [pc, #84]	@ (8009154 <TIM_OC5_SetConfig+0xbc>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d007      	beq.n	8009112 <TIM_OC5_SetConfig+0x7a>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a14      	ldr	r2, [pc, #80]	@ (8009158 <TIM_OC5_SetConfig+0xc0>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d003      	beq.n	8009112 <TIM_OC5_SetConfig+0x7a>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a13      	ldr	r2, [pc, #76]	@ (800915c <TIM_OC5_SetConfig+0xc4>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d109      	bne.n	8009126 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009118:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	021b      	lsls	r3, r3, #8
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	4313      	orrs	r3, r2
 8009124:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	697a      	ldr	r2, [r7, #20]
 800912a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	621a      	str	r2, [r3, #32]
}
 8009140:	bf00      	nop
 8009142:	371c      	adds	r7, #28
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr
 800914c:	40012c00 	.word	0x40012c00
 8009150:	40013400 	.word	0x40013400
 8009154:	40014000 	.word	0x40014000
 8009158:	40014400 	.word	0x40014400
 800915c:	40014800 	.word	0x40014800

08009160 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009160:	b480      	push	{r7}
 8009162:	b087      	sub	sp, #28
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a1b      	ldr	r3, [r3, #32]
 800916e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a1b      	ldr	r3, [r3, #32]
 8009174:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800918e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	021b      	lsls	r3, r3, #8
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	4313      	orrs	r3, r2
 800919e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80091a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	051b      	lsls	r3, r3, #20
 80091ae:	693a      	ldr	r2, [r7, #16]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a18      	ldr	r2, [pc, #96]	@ (8009218 <TIM_OC6_SetConfig+0xb8>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d00f      	beq.n	80091dc <TIM_OC6_SetConfig+0x7c>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a17      	ldr	r2, [pc, #92]	@ (800921c <TIM_OC6_SetConfig+0xbc>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d00b      	beq.n	80091dc <TIM_OC6_SetConfig+0x7c>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a16      	ldr	r2, [pc, #88]	@ (8009220 <TIM_OC6_SetConfig+0xc0>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d007      	beq.n	80091dc <TIM_OC6_SetConfig+0x7c>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a15      	ldr	r2, [pc, #84]	@ (8009224 <TIM_OC6_SetConfig+0xc4>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d003      	beq.n	80091dc <TIM_OC6_SetConfig+0x7c>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a14      	ldr	r2, [pc, #80]	@ (8009228 <TIM_OC6_SetConfig+0xc8>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d109      	bne.n	80091f0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80091e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	695b      	ldr	r3, [r3, #20]
 80091e8:	029b      	lsls	r3, r3, #10
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	693a      	ldr	r2, [r7, #16]
 8009208:	621a      	str	r2, [r3, #32]
}
 800920a:	bf00      	nop
 800920c:	371c      	adds	r7, #28
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	40012c00 	.word	0x40012c00
 800921c:	40013400 	.word	0x40013400
 8009220:	40014000 	.word	0x40014000
 8009224:	40014400 	.word	0x40014400
 8009228:	40014800 	.word	0x40014800

0800922c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800922c:	b480      	push	{r7}
 800922e:	b087      	sub	sp, #28
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6a1b      	ldr	r3, [r3, #32]
 800923c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	f023 0201 	bic.w	r2, r3, #1
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	011b      	lsls	r3, r3, #4
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	4313      	orrs	r3, r2
 8009260:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f023 030a 	bic.w	r3, r3, #10
 8009268:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	4313      	orrs	r3, r2
 8009270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	621a      	str	r2, [r3, #32]
}
 800927e:	bf00      	nop
 8009280:	371c      	adds	r7, #28
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800928a:	b480      	push	{r7}
 800928c:	b087      	sub	sp, #28
 800928e:	af00      	add	r7, sp, #0
 8009290:	60f8      	str	r0, [r7, #12]
 8009292:	60b9      	str	r1, [r7, #8]
 8009294:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6a1b      	ldr	r3, [r3, #32]
 800929a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6a1b      	ldr	r3, [r3, #32]
 80092a0:	f023 0210 	bic.w	r2, r3, #16
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80092b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	031b      	lsls	r3, r3, #12
 80092ba:	693a      	ldr	r2, [r7, #16]
 80092bc:	4313      	orrs	r3, r2
 80092be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80092c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	011b      	lsls	r3, r3, #4
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	621a      	str	r2, [r3, #32]
}
 80092de:	bf00      	nop
 80092e0:	371c      	adds	r7, #28
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr

080092ea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092ea:	b480      	push	{r7}
 80092ec:	b085      	sub	sp, #20
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
 80092f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009300:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009304:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4313      	orrs	r3, r2
 800930c:	f043 0307 	orr.w	r3, r3, #7
 8009310:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	609a      	str	r2, [r3, #8]
}
 8009318:	bf00      	nop
 800931a:	3714      	adds	r7, #20
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009324:	b480      	push	{r7}
 8009326:	b087      	sub	sp, #28
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	607a      	str	r2, [r7, #4]
 8009330:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800933e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	021a      	lsls	r2, r3, #8
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	431a      	orrs	r2, r3
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	4313      	orrs	r3, r2
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	4313      	orrs	r3, r2
 8009350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	697a      	ldr	r2, [r7, #20]
 8009356:	609a      	str	r2, [r3, #8]
}
 8009358:	bf00      	nop
 800935a:	371c      	adds	r7, #28
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009364:	b480      	push	{r7}
 8009366:	b087      	sub	sp, #28
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	f003 031f 	and.w	r3, r3, #31
 8009376:	2201      	movs	r2, #1
 8009378:	fa02 f303 	lsl.w	r3, r2, r3
 800937c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6a1a      	ldr	r2, [r3, #32]
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	43db      	mvns	r3, r3
 8009386:	401a      	ands	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6a1a      	ldr	r2, [r3, #32]
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	f003 031f 	and.w	r3, r3, #31
 8009396:	6879      	ldr	r1, [r7, #4]
 8009398:	fa01 f303 	lsl.w	r3, r1, r3
 800939c:	431a      	orrs	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	621a      	str	r2, [r3, #32]
}
 80093a2:	bf00      	nop
 80093a4:	371c      	adds	r7, #28
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
	...

080093b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d101      	bne.n	80093c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093c4:	2302      	movs	r3, #2
 80093c6:	e065      	b.n	8009494 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2202      	movs	r2, #2
 80093d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a2c      	ldr	r2, [pc, #176]	@ (80094a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d004      	beq.n	80093fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a2b      	ldr	r2, [pc, #172]	@ (80094a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d108      	bne.n	800940e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009402:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	4313      	orrs	r3, r2
 800940c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009414:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009418:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	4313      	orrs	r3, r2
 8009422:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a1b      	ldr	r2, [pc, #108]	@ (80094a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d018      	beq.n	8009468 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800943e:	d013      	beq.n	8009468 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a18      	ldr	r2, [pc, #96]	@ (80094a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d00e      	beq.n	8009468 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a17      	ldr	r2, [pc, #92]	@ (80094ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d009      	beq.n	8009468 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a12      	ldr	r2, [pc, #72]	@ (80094a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d004      	beq.n	8009468 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a13      	ldr	r2, [pc, #76]	@ (80094b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d10c      	bne.n	8009482 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800946e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	4313      	orrs	r3, r2
 8009478:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2201      	movs	r2, #1
 8009486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	40012c00 	.word	0x40012c00
 80094a4:	40013400 	.word	0x40013400
 80094a8:	40000400 	.word	0x40000400
 80094ac:	40000800 	.word	0x40000800
 80094b0:	40014000 	.word	0x40014000

080094b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d101      	bne.n	80094d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80094cc:	2302      	movs	r3, #2
 80094ce:	e073      	b.n	80095b8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	4313      	orrs	r3, r2
 8009500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4313      	orrs	r3, r2
 800950e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	4313      	orrs	r3, r2
 800951c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	4313      	orrs	r3, r2
 800952a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009536:	4313      	orrs	r3, r2
 8009538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	041b      	lsls	r3, r3, #16
 8009546:	4313      	orrs	r3, r2
 8009548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	69db      	ldr	r3, [r3, #28]
 8009554:	4313      	orrs	r3, r2
 8009556:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a19      	ldr	r2, [pc, #100]	@ (80095c4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d004      	beq.n	800956c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a18      	ldr	r2, [pc, #96]	@ (80095c8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d11c      	bne.n	80095a6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009576:	051b      	lsls	r3, r3, #20
 8009578:	4313      	orrs	r3, r2
 800957a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	4313      	orrs	r3, r2
 8009588:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009594:	4313      	orrs	r3, r2
 8009596:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a2:	4313      	orrs	r3, r2
 80095a4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3714      	adds	r7, #20
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	40012c00 	.word	0x40012c00
 80095c8:	40013400 	.word	0x40013400

080095cc <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b08b      	sub	sp, #44	@ 0x2c
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d101      	bne.n	80095ec <HAL_TIMEx_ConfigBreakInput+0x20>
 80095e8:	2302      	movs	r3, #2
 80095ea:	e0c1      	b.n	8009770 <HAL_TIMEx_ConfigBreakInput+0x1a4>
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	2b0f      	cmp	r3, #15
 80095fc:	d854      	bhi.n	80096a8 <HAL_TIMEx_ConfigBreakInput+0xdc>
 80095fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009604 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8009600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009604:	08009645 	.word	0x08009645
 8009608:	08009659 	.word	0x08009659
 800960c:	080096a9 	.word	0x080096a9
 8009610:	0800966d 	.word	0x0800966d
 8009614:	080096a9 	.word	0x080096a9
 8009618:	080096a9 	.word	0x080096a9
 800961c:	080096a9 	.word	0x080096a9
 8009620:	08009681 	.word	0x08009681
 8009624:	080096a9 	.word	0x080096a9
 8009628:	080096a9 	.word	0x080096a9
 800962c:	080096a9 	.word	0x080096a9
 8009630:	080096a9 	.word	0x080096a9
 8009634:	080096a9 	.word	0x080096a9
 8009638:	080096a9 	.word	0x080096a9
 800963c:	080096a9 	.word	0x080096a9
 8009640:	08009695 	.word	0x08009695
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8009644:	2301      	movs	r3, #1
 8009646:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8009648:	2300      	movs	r3, #0
 800964a:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800964c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009650:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8009652:	2309      	movs	r3, #9
 8009654:	617b      	str	r3, [r7, #20]
      break;
 8009656:	e030      	b.n	80096ba <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8009658:	2302      	movs	r3, #2
 800965a:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800965c:	2301      	movs	r3, #1
 800965e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8009660:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009664:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8009666:	230a      	movs	r3, #10
 8009668:	617b      	str	r3, [r7, #20]
      break;
 800966a:	e026      	b.n	80096ba <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800966c:	2304      	movs	r3, #4
 800966e:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8009670:	2302      	movs	r3, #2
 8009672:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8009674:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009678:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800967a:	230b      	movs	r3, #11
 800967c:	617b      	str	r3, [r7, #20]
      break;
 800967e:	e01c      	b.n	80096ba <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 8009680:	2308      	movs	r3, #8
 8009682:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8009684:	2303      	movs	r3, #3
 8009686:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8009688:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800968c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 800968e:	230c      	movs	r3, #12
 8009690:	617b      	str	r3, [r7, #20]
      break;
 8009692:	e012      	b.n	80096ba <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 8009694:	2310      	movs	r3, #16
 8009696:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8009698:	2304      	movs	r3, #4
 800969a:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 800969c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80096a0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 80096a2:	230d      	movs	r3, #13
 80096a4:	617b      	str	r3, [r7, #20]
      break;
 80096a6:	e008      	b.n	80096ba <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 80096a8:	2300      	movs	r3, #0
 80096aa:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 80096ac:	2300      	movs	r3, #0
 80096ae:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 80096b0:	2300      	movs	r3, #0
 80096b2:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80096b4:	2300      	movs	r3, #0
 80096b6:	617b      	str	r3, [r7, #20]
      break;
 80096b8:	bf00      	nop
    }
  }

  switch (BreakInput)
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d003      	beq.n	80096c8 <HAL_TIMEx_ConfigBreakInput+0xfc>
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d025      	beq.n	8009712 <HAL_TIMEx_ConfigBreakInput+0x146>
 80096c6:	e049      	b.n	800975c <HAL_TIMEx_ConfigBreakInput+0x190>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096ce:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	43db      	mvns	r3, r3
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	4013      	ands	r3, r2
 80096d8:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	685a      	ldr	r2, [r3, #4]
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	409a      	lsls	r2, r3
 80096e2:	6a3b      	ldr	r3, [r7, #32]
 80096e4:	4013      	ands	r3, r2
 80096e6:	693a      	ldr	r2, [r7, #16]
 80096e8:	4313      	orrs	r3, r2
 80096ea:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	43db      	mvns	r3, r3
 80096f0:	693a      	ldr	r2, [r7, #16]
 80096f2:	4013      	ands	r3, r2
 80096f4:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	689a      	ldr	r2, [r3, #8]
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	409a      	lsls	r2, r3
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	4013      	ands	r3, r2
 8009702:	693a      	ldr	r2, [r7, #16]
 8009704:	4313      	orrs	r3, r2
 8009706:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8009710:	e028      	b.n	8009764 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009718:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	43db      	mvns	r3, r3
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	4013      	ands	r3, r2
 8009722:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685a      	ldr	r2, [r3, #4]
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	409a      	lsls	r2, r3
 800972c:	6a3b      	ldr	r3, [r7, #32]
 800972e:	4013      	ands	r3, r2
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	4313      	orrs	r3, r2
 8009734:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	43db      	mvns	r3, r3
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	4013      	ands	r3, r2
 800973e:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	689a      	ldr	r2, [r3, #8]
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	409a      	lsls	r2, r3
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	4013      	ands	r3, r2
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	4313      	orrs	r3, r2
 8009750:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800975a:	e003      	b.n	8009764 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    default:
      status = HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8009762:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800976c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009770:	4618      	mov	r0, r3
 8009772:	372c      	adds	r7, #44	@ 0x2c
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e042      	b.n	8009814 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009794:	2b00      	cmp	r3, #0
 8009796:	d106      	bne.n	80097a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7f9 f805 	bl	80027b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2224      	movs	r2, #36	@ 0x24
 80097aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f022 0201 	bic.w	r2, r2, #1
 80097bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d002      	beq.n	80097cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 ff58 	bl	800a67c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 fc89 	bl	800a0e4 <UART_SetConfig>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d101      	bne.n	80097dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	e01b      	b.n	8009814 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685a      	ldr	r2, [r3, #4]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80097ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	689a      	ldr	r2, [r3, #8]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80097fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f042 0201 	orr.w	r2, r2, #1
 800980a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 ffd7 	bl	800a7c0 <UART_CheckIdleState>
 8009812:	4603      	mov	r3, r0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3708      	adds	r7, #8
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08a      	sub	sp, #40	@ 0x28
 8009820:	af02      	add	r7, sp, #8
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	603b      	str	r3, [r7, #0]
 8009828:	4613      	mov	r3, r2
 800982a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009832:	2b20      	cmp	r3, #32
 8009834:	d17b      	bne.n	800992e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d002      	beq.n	8009842 <HAL_UART_Transmit+0x26>
 800983c:	88fb      	ldrh	r3, [r7, #6]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d101      	bne.n	8009846 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e074      	b.n	8009930 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2221      	movs	r2, #33	@ 0x21
 8009852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009856:	f7f9 f99b 	bl	8002b90 <HAL_GetTick>
 800985a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	88fa      	ldrh	r2, [r7, #6]
 8009860:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	88fa      	ldrh	r2, [r7, #6]
 8009868:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009874:	d108      	bne.n	8009888 <HAL_UART_Transmit+0x6c>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d104      	bne.n	8009888 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800987e:	2300      	movs	r3, #0
 8009880:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	61bb      	str	r3, [r7, #24]
 8009886:	e003      	b.n	8009890 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800988c:	2300      	movs	r3, #0
 800988e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009890:	e030      	b.n	80098f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	2200      	movs	r2, #0
 800989a:	2180      	movs	r1, #128	@ 0x80
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f001 f839 	bl	800a914 <UART_WaitOnFlagUntilTimeout>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d005      	beq.n	80098b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2220      	movs	r2, #32
 80098ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80098b0:	2303      	movs	r3, #3
 80098b2:	e03d      	b.n	8009930 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10b      	bne.n	80098d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	881b      	ldrh	r3, [r3, #0]
 80098be:	461a      	mov	r2, r3
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	3302      	adds	r3, #2
 80098ce:	61bb      	str	r3, [r7, #24]
 80098d0:	e007      	b.n	80098e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	781a      	ldrb	r2, [r3, #0]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	3301      	adds	r3, #1
 80098e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	3b01      	subs	r3, #1
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1c8      	bne.n	8009892 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	2200      	movs	r2, #0
 8009908:	2140      	movs	r1, #64	@ 0x40
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f001 f802 	bl	800a914 <UART_WaitOnFlagUntilTimeout>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d005      	beq.n	8009922 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2220      	movs	r2, #32
 800991a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800991e:	2303      	movs	r3, #3
 8009920:	e006      	b.n	8009930 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2220      	movs	r2, #32
 8009926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	e000      	b.n	8009930 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800992e:	2302      	movs	r3, #2
  }
}
 8009930:	4618      	mov	r0, r3
 8009932:	3720      	adds	r7, #32
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b08a      	sub	sp, #40	@ 0x28
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	4613      	mov	r3, r2
 8009944:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800994c:	2b20      	cmp	r3, #32
 800994e:	d167      	bne.n	8009a20 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d002      	beq.n	800995c <HAL_UART_Transmit_DMA+0x24>
 8009956:	88fb      	ldrh	r3, [r7, #6]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d101      	bne.n	8009960 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	e060      	b.n	8009a22 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	68ba      	ldr	r2, [r7, #8]
 8009964:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	88fa      	ldrh	r2, [r7, #6]
 800996a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	88fa      	ldrh	r2, [r7, #6]
 8009972:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2200      	movs	r2, #0
 800997a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2221      	movs	r2, #33	@ 0x21
 8009982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800998a:	2b00      	cmp	r3, #0
 800998c:	d028      	beq.n	80099e0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009992:	4a26      	ldr	r2, [pc, #152]	@ (8009a2c <HAL_UART_Transmit_DMA+0xf4>)
 8009994:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800999a:	4a25      	ldr	r2, [pc, #148]	@ (8009a30 <HAL_UART_Transmit_DMA+0xf8>)
 800999c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099a2:	4a24      	ldr	r2, [pc, #144]	@ (8009a34 <HAL_UART_Transmit_DMA+0xfc>)
 80099a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099aa:	2200      	movs	r2, #0
 80099ac:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099b6:	4619      	mov	r1, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	3328      	adds	r3, #40	@ 0x28
 80099be:	461a      	mov	r2, r3
 80099c0:	88fb      	ldrh	r3, [r7, #6]
 80099c2:	f7fc fb93 	bl	80060ec <HAL_DMA_Start_IT>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d009      	beq.n	80099e0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2210      	movs	r2, #16
 80099d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2220      	movs	r2, #32
 80099d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e020      	b.n	8009a22 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2240      	movs	r2, #64	@ 0x40
 80099e6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	3308      	adds	r3, #8
 80099ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	e853 3f00 	ldrex	r3, [r3]
 80099f6:	613b      	str	r3, [r7, #16]
   return(result);
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3308      	adds	r3, #8
 8009a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a08:	623a      	str	r2, [r7, #32]
 8009a0a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0c:	69f9      	ldr	r1, [r7, #28]
 8009a0e:	6a3a      	ldr	r2, [r7, #32]
 8009a10:	e841 2300 	strex	r3, r2, [r1]
 8009a14:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d1e5      	bne.n	80099e8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	e000      	b.n	8009a22 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009a20:	2302      	movs	r3, #2
  }
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3728      	adds	r7, #40	@ 0x28
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	0800ac8b 	.word	0x0800ac8b
 8009a30:	0800ad25 	.word	0x0800ad25
 8009a34:	0800aeab 	.word	0x0800aeab

08009a38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b0ba      	sub	sp, #232	@ 0xe8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	69db      	ldr	r3, [r3, #28]
 8009a46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009a62:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009a66:	4013      	ands	r3, r2
 8009a68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009a6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d11b      	bne.n	8009aac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a78:	f003 0320 	and.w	r3, r3, #32
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d015      	beq.n	8009aac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a84:	f003 0320 	and.w	r3, r3, #32
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d105      	bne.n	8009a98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d009      	beq.n	8009aac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 82e3 	beq.w	800a068 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	4798      	blx	r3
      }
      return;
 8009aaa:	e2dd      	b.n	800a068 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009aac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 8123 	beq.w	8009cfc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009ab6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009aba:	4b8d      	ldr	r3, [pc, #564]	@ (8009cf0 <HAL_UART_IRQHandler+0x2b8>)
 8009abc:	4013      	ands	r3, r2
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d106      	bne.n	8009ad0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009ac2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009ac6:	4b8b      	ldr	r3, [pc, #556]	@ (8009cf4 <HAL_UART_IRQHandler+0x2bc>)
 8009ac8:	4013      	ands	r3, r2
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f000 8116 	beq.w	8009cfc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ad4:	f003 0301 	and.w	r3, r3, #1
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d011      	beq.n	8009b00 <HAL_UART_IRQHandler+0xc8>
 8009adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00b      	beq.n	8009b00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2201      	movs	r2, #1
 8009aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009af6:	f043 0201 	orr.w	r2, r3, #1
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b04:	f003 0302 	and.w	r3, r3, #2
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d011      	beq.n	8009b30 <HAL_UART_IRQHandler+0xf8>
 8009b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b10:	f003 0301 	and.w	r3, r3, #1
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00b      	beq.n	8009b30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2202      	movs	r2, #2
 8009b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b26:	f043 0204 	orr.w	r2, r3, #4
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b34:	f003 0304 	and.w	r3, r3, #4
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d011      	beq.n	8009b60 <HAL_UART_IRQHandler+0x128>
 8009b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b40:	f003 0301 	and.w	r3, r3, #1
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00b      	beq.n	8009b60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2204      	movs	r2, #4
 8009b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b56:	f043 0202 	orr.w	r2, r3, #2
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b64:	f003 0308 	and.w	r3, r3, #8
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d017      	beq.n	8009b9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b70:	f003 0320 	and.w	r3, r3, #32
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d105      	bne.n	8009b84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009b78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009b7c:	4b5c      	ldr	r3, [pc, #368]	@ (8009cf0 <HAL_UART_IRQHandler+0x2b8>)
 8009b7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00b      	beq.n	8009b9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2208      	movs	r2, #8
 8009b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b92:	f043 0208 	orr.w	r2, r3, #8
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ba0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d012      	beq.n	8009bce <HAL_UART_IRQHandler+0x196>
 8009ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00c      	beq.n	8009bce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009bbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bc4:	f043 0220 	orr.w	r2, r3, #32
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f000 8249 	beq.w	800a06c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bde:	f003 0320 	and.w	r3, r3, #32
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d013      	beq.n	8009c0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bea:	f003 0320 	and.w	r3, r3, #32
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d105      	bne.n	8009bfe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d007      	beq.n	8009c0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c22:	2b40      	cmp	r3, #64	@ 0x40
 8009c24:	d005      	beq.n	8009c32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009c2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d054      	beq.n	8009cdc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 ffc3 	bl	800abbe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c42:	2b40      	cmp	r3, #64	@ 0x40
 8009c44:	d146      	bne.n	8009cd4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	3308      	adds	r3, #8
 8009c4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c54:	e853 3f00 	ldrex	r3, [r3]
 8009c58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	3308      	adds	r3, #8
 8009c6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009c72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009c76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009c7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009c82:	e841 2300 	strex	r3, r2, [r1]
 8009c86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1d9      	bne.n	8009c46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d017      	beq.n	8009ccc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ca2:	4a15      	ldr	r2, [pc, #84]	@ (8009cf8 <HAL_UART_IRQHandler+0x2c0>)
 8009ca4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fc faf1 	bl	8006294 <HAL_DMA_Abort_IT>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d019      	beq.n	8009cec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cca:	e00f      	b.n	8009cec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f9ff 	bl	800a0d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cd2:	e00b      	b.n	8009cec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f9fb 	bl	800a0d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cda:	e007      	b.n	8009cec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f9f7 	bl	800a0d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009cea:	e1bf      	b.n	800a06c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cec:	bf00      	nop
    return;
 8009cee:	e1bd      	b.n	800a06c <HAL_UART_IRQHandler+0x634>
 8009cf0:	10000001 	.word	0x10000001
 8009cf4:	04000120 	.word	0x04000120
 8009cf8:	0800af2b 	.word	0x0800af2b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	f040 8153 	bne.w	8009fac <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d0a:	f003 0310 	and.w	r3, r3, #16
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f000 814c 	beq.w	8009fac <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d18:	f003 0310 	and.w	r3, r3, #16
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f000 8145 	beq.w	8009fac <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2210      	movs	r2, #16
 8009d28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d34:	2b40      	cmp	r3, #64	@ 0x40
 8009d36:	f040 80bb 	bne.w	8009eb0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009d48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 818f 	beq.w	800a070 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	f080 8187 	bcs.w	800a070 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f003 0320 	and.w	r3, r3, #32
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f040 8087 	bne.w	8009e8e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d8c:	e853 3f00 	ldrex	r3, [r3]
 8009d90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	461a      	mov	r2, r3
 8009da6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009daa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009dae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009db6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009dba:	e841 2300 	strex	r3, r2, [r1]
 8009dbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1da      	bne.n	8009d80 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	3308      	adds	r3, #8
 8009dd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009dd4:	e853 3f00 	ldrex	r3, [r3]
 8009dd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009dda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ddc:	f023 0301 	bic.w	r3, r3, #1
 8009de0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	3308      	adds	r3, #8
 8009dea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009dee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009df2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009df6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009dfa:	e841 2300 	strex	r3, r2, [r1]
 8009dfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009e00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1e1      	bne.n	8009dca <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3308      	adds	r3, #8
 8009e0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e10:	e853 3f00 	ldrex	r3, [r3]
 8009e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	3308      	adds	r3, #8
 8009e26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009e2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009e30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009e32:	e841 2300 	strex	r3, r2, [r1]
 8009e36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009e38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1e3      	bne.n	8009e06 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2220      	movs	r2, #32
 8009e42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e54:	e853 3f00 	ldrex	r3, [r3]
 8009e58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e5c:	f023 0310 	bic.w	r3, r3, #16
 8009e60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	461a      	mov	r2, r3
 8009e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e76:	e841 2300 	strex	r3, r2, [r1]
 8009e7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1e4      	bne.n	8009e4c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fc f9aa 	bl	80061e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2202      	movs	r2, #2
 8009e92:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f003 f857 	bl	800cf5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009eae:	e0df      	b.n	800a070 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	1ad3      	subs	r3, r2, r3
 8009ec0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f000 80d1 	beq.w	800a074 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009ed2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f000 80cc 	beq.w	800a074 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee4:	e853 3f00 	ldrex	r3, [r3]
 8009ee8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ef0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	461a      	mov	r2, r3
 8009efa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009efe:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f00:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f06:	e841 2300 	strex	r3, r2, [r1]
 8009f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1e4      	bne.n	8009edc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3308      	adds	r3, #8
 8009f18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f1c:	e853 3f00 	ldrex	r3, [r3]
 8009f20:	623b      	str	r3, [r7, #32]
   return(result);
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f28:	f023 0301 	bic.w	r3, r3, #1
 8009f2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	3308      	adds	r3, #8
 8009f36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009f3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f42:	e841 2300 	strex	r3, r2, [r1]
 8009f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1e1      	bne.n	8009f12 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2220      	movs	r2, #32
 8009f52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	e853 3f00 	ldrex	r3, [r3]
 8009f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f023 0310 	bic.w	r3, r3, #16
 8009f76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009f84:	61fb      	str	r3, [r7, #28]
 8009f86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f88:	69b9      	ldr	r1, [r7, #24]
 8009f8a:	69fa      	ldr	r2, [r7, #28]
 8009f8c:	e841 2300 	strex	r3, r2, [r1]
 8009f90:	617b      	str	r3, [r7, #20]
   return(result);
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1e4      	bne.n	8009f62 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f002 ffd9 	bl	800cf5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009faa:	e063      	b.n	800a074 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00e      	beq.n	8009fd6 <HAL_UART_IRQHandler+0x59e>
 8009fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d008      	beq.n	8009fd6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009fcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 ffec 	bl	800afac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fd4:	e051      	b.n	800a07a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d014      	beq.n	800a00c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d105      	bne.n	8009ffa <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ff2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d008      	beq.n	800a00c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d03a      	beq.n	800a078 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	4798      	blx	r3
    }
    return;
 800a00a:	e035      	b.n	800a078 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a00c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a014:	2b00      	cmp	r3, #0
 800a016:	d009      	beq.n	800a02c <HAL_UART_IRQHandler+0x5f4>
 800a018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a01c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a020:	2b00      	cmp	r3, #0
 800a022:	d003      	beq.n	800a02c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 ff96 	bl	800af56 <UART_EndTransmit_IT>
    return;
 800a02a:	e026      	b.n	800a07a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a02c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a030:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d009      	beq.n	800a04c <HAL_UART_IRQHandler+0x614>
 800a038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a03c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a040:	2b00      	cmp	r3, #0
 800a042:	d003      	beq.n	800a04c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 ffc5 	bl	800afd4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a04a:	e016      	b.n	800a07a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a050:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d010      	beq.n	800a07a <HAL_UART_IRQHandler+0x642>
 800a058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	da0c      	bge.n	800a07a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 ffad 	bl	800afc0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a066:	e008      	b.n	800a07a <HAL_UART_IRQHandler+0x642>
      return;
 800a068:	bf00      	nop
 800a06a:	e006      	b.n	800a07a <HAL_UART_IRQHandler+0x642>
    return;
 800a06c:	bf00      	nop
 800a06e:	e004      	b.n	800a07a <HAL_UART_IRQHandler+0x642>
      return;
 800a070:	bf00      	nop
 800a072:	e002      	b.n	800a07a <HAL_UART_IRQHandler+0x642>
      return;
 800a074:	bf00      	nop
 800a076:	e000      	b.n	800a07a <HAL_UART_IRQHandler+0x642>
    return;
 800a078:	bf00      	nop
  }
}
 800a07a:	37e8      	adds	r7, #232	@ 0xe8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a09c:	bf00      	nop
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a0c4:	bf00      	nop
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0e8:	b08c      	sub	sp, #48	@ 0x30
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	689a      	ldr	r2, [r3, #8]
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	431a      	orrs	r2, r3
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	431a      	orrs	r2, r3
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	69db      	ldr	r3, [r3, #28]
 800a108:	4313      	orrs	r3, r2
 800a10a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	4bab      	ldr	r3, [pc, #684]	@ (800a3c0 <UART_SetConfig+0x2dc>)
 800a114:	4013      	ands	r3, r2
 800a116:	697a      	ldr	r2, [r7, #20]
 800a118:	6812      	ldr	r2, [r2, #0]
 800a11a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a11c:	430b      	orrs	r3, r1
 800a11e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	68da      	ldr	r2, [r3, #12]
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	430a      	orrs	r2, r1
 800a134:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4aa0      	ldr	r2, [pc, #640]	@ (800a3c4 <UART_SetConfig+0x2e0>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d004      	beq.n	800a150 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a14c:	4313      	orrs	r3, r2
 800a14e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a15a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	6812      	ldr	r2, [r2, #0]
 800a162:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a164:	430b      	orrs	r3, r1
 800a166:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a16e:	f023 010f 	bic.w	r1, r3, #15
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	430a      	orrs	r2, r1
 800a17c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a91      	ldr	r2, [pc, #580]	@ (800a3c8 <UART_SetConfig+0x2e4>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d125      	bne.n	800a1d4 <UART_SetConfig+0xf0>
 800a188:	4b90      	ldr	r3, [pc, #576]	@ (800a3cc <UART_SetConfig+0x2e8>)
 800a18a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a18e:	f003 0303 	and.w	r3, r3, #3
 800a192:	2b03      	cmp	r3, #3
 800a194:	d81a      	bhi.n	800a1cc <UART_SetConfig+0xe8>
 800a196:	a201      	add	r2, pc, #4	@ (adr r2, 800a19c <UART_SetConfig+0xb8>)
 800a198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19c:	0800a1ad 	.word	0x0800a1ad
 800a1a0:	0800a1bd 	.word	0x0800a1bd
 800a1a4:	0800a1b5 	.word	0x0800a1b5
 800a1a8:	0800a1c5 	.word	0x0800a1c5
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1b2:	e0d6      	b.n	800a362 <UART_SetConfig+0x27e>
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ba:	e0d2      	b.n	800a362 <UART_SetConfig+0x27e>
 800a1bc:	2304      	movs	r3, #4
 800a1be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1c2:	e0ce      	b.n	800a362 <UART_SetConfig+0x27e>
 800a1c4:	2308      	movs	r3, #8
 800a1c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ca:	e0ca      	b.n	800a362 <UART_SetConfig+0x27e>
 800a1cc:	2310      	movs	r3, #16
 800a1ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1d2:	e0c6      	b.n	800a362 <UART_SetConfig+0x27e>
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a7d      	ldr	r2, [pc, #500]	@ (800a3d0 <UART_SetConfig+0x2ec>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d138      	bne.n	800a250 <UART_SetConfig+0x16c>
 800a1de:	4b7b      	ldr	r3, [pc, #492]	@ (800a3cc <UART_SetConfig+0x2e8>)
 800a1e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1e4:	f003 030c 	and.w	r3, r3, #12
 800a1e8:	2b0c      	cmp	r3, #12
 800a1ea:	d82d      	bhi.n	800a248 <UART_SetConfig+0x164>
 800a1ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a1f4 <UART_SetConfig+0x110>)
 800a1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f2:	bf00      	nop
 800a1f4:	0800a229 	.word	0x0800a229
 800a1f8:	0800a249 	.word	0x0800a249
 800a1fc:	0800a249 	.word	0x0800a249
 800a200:	0800a249 	.word	0x0800a249
 800a204:	0800a239 	.word	0x0800a239
 800a208:	0800a249 	.word	0x0800a249
 800a20c:	0800a249 	.word	0x0800a249
 800a210:	0800a249 	.word	0x0800a249
 800a214:	0800a231 	.word	0x0800a231
 800a218:	0800a249 	.word	0x0800a249
 800a21c:	0800a249 	.word	0x0800a249
 800a220:	0800a249 	.word	0x0800a249
 800a224:	0800a241 	.word	0x0800a241
 800a228:	2300      	movs	r3, #0
 800a22a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a22e:	e098      	b.n	800a362 <UART_SetConfig+0x27e>
 800a230:	2302      	movs	r3, #2
 800a232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a236:	e094      	b.n	800a362 <UART_SetConfig+0x27e>
 800a238:	2304      	movs	r3, #4
 800a23a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a23e:	e090      	b.n	800a362 <UART_SetConfig+0x27e>
 800a240:	2308      	movs	r3, #8
 800a242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a246:	e08c      	b.n	800a362 <UART_SetConfig+0x27e>
 800a248:	2310      	movs	r3, #16
 800a24a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a24e:	e088      	b.n	800a362 <UART_SetConfig+0x27e>
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a5f      	ldr	r2, [pc, #380]	@ (800a3d4 <UART_SetConfig+0x2f0>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d125      	bne.n	800a2a6 <UART_SetConfig+0x1c2>
 800a25a:	4b5c      	ldr	r3, [pc, #368]	@ (800a3cc <UART_SetConfig+0x2e8>)
 800a25c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a260:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a264:	2b30      	cmp	r3, #48	@ 0x30
 800a266:	d016      	beq.n	800a296 <UART_SetConfig+0x1b2>
 800a268:	2b30      	cmp	r3, #48	@ 0x30
 800a26a:	d818      	bhi.n	800a29e <UART_SetConfig+0x1ba>
 800a26c:	2b20      	cmp	r3, #32
 800a26e:	d00a      	beq.n	800a286 <UART_SetConfig+0x1a2>
 800a270:	2b20      	cmp	r3, #32
 800a272:	d814      	bhi.n	800a29e <UART_SetConfig+0x1ba>
 800a274:	2b00      	cmp	r3, #0
 800a276:	d002      	beq.n	800a27e <UART_SetConfig+0x19a>
 800a278:	2b10      	cmp	r3, #16
 800a27a:	d008      	beq.n	800a28e <UART_SetConfig+0x1aa>
 800a27c:	e00f      	b.n	800a29e <UART_SetConfig+0x1ba>
 800a27e:	2300      	movs	r3, #0
 800a280:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a284:	e06d      	b.n	800a362 <UART_SetConfig+0x27e>
 800a286:	2302      	movs	r3, #2
 800a288:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a28c:	e069      	b.n	800a362 <UART_SetConfig+0x27e>
 800a28e:	2304      	movs	r3, #4
 800a290:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a294:	e065      	b.n	800a362 <UART_SetConfig+0x27e>
 800a296:	2308      	movs	r3, #8
 800a298:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a29c:	e061      	b.n	800a362 <UART_SetConfig+0x27e>
 800a29e:	2310      	movs	r3, #16
 800a2a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2a4:	e05d      	b.n	800a362 <UART_SetConfig+0x27e>
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a4b      	ldr	r2, [pc, #300]	@ (800a3d8 <UART_SetConfig+0x2f4>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d125      	bne.n	800a2fc <UART_SetConfig+0x218>
 800a2b0:	4b46      	ldr	r3, [pc, #280]	@ (800a3cc <UART_SetConfig+0x2e8>)
 800a2b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a2ba:	2bc0      	cmp	r3, #192	@ 0xc0
 800a2bc:	d016      	beq.n	800a2ec <UART_SetConfig+0x208>
 800a2be:	2bc0      	cmp	r3, #192	@ 0xc0
 800a2c0:	d818      	bhi.n	800a2f4 <UART_SetConfig+0x210>
 800a2c2:	2b80      	cmp	r3, #128	@ 0x80
 800a2c4:	d00a      	beq.n	800a2dc <UART_SetConfig+0x1f8>
 800a2c6:	2b80      	cmp	r3, #128	@ 0x80
 800a2c8:	d814      	bhi.n	800a2f4 <UART_SetConfig+0x210>
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d002      	beq.n	800a2d4 <UART_SetConfig+0x1f0>
 800a2ce:	2b40      	cmp	r3, #64	@ 0x40
 800a2d0:	d008      	beq.n	800a2e4 <UART_SetConfig+0x200>
 800a2d2:	e00f      	b.n	800a2f4 <UART_SetConfig+0x210>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2da:	e042      	b.n	800a362 <UART_SetConfig+0x27e>
 800a2dc:	2302      	movs	r3, #2
 800a2de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2e2:	e03e      	b.n	800a362 <UART_SetConfig+0x27e>
 800a2e4:	2304      	movs	r3, #4
 800a2e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2ea:	e03a      	b.n	800a362 <UART_SetConfig+0x27e>
 800a2ec:	2308      	movs	r3, #8
 800a2ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2f2:	e036      	b.n	800a362 <UART_SetConfig+0x27e>
 800a2f4:	2310      	movs	r3, #16
 800a2f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2fa:	e032      	b.n	800a362 <UART_SetConfig+0x27e>
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a30      	ldr	r2, [pc, #192]	@ (800a3c4 <UART_SetConfig+0x2e0>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d12a      	bne.n	800a35c <UART_SetConfig+0x278>
 800a306:	4b31      	ldr	r3, [pc, #196]	@ (800a3cc <UART_SetConfig+0x2e8>)
 800a308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a30c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a310:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a314:	d01a      	beq.n	800a34c <UART_SetConfig+0x268>
 800a316:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a31a:	d81b      	bhi.n	800a354 <UART_SetConfig+0x270>
 800a31c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a320:	d00c      	beq.n	800a33c <UART_SetConfig+0x258>
 800a322:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a326:	d815      	bhi.n	800a354 <UART_SetConfig+0x270>
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d003      	beq.n	800a334 <UART_SetConfig+0x250>
 800a32c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a330:	d008      	beq.n	800a344 <UART_SetConfig+0x260>
 800a332:	e00f      	b.n	800a354 <UART_SetConfig+0x270>
 800a334:	2300      	movs	r3, #0
 800a336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a33a:	e012      	b.n	800a362 <UART_SetConfig+0x27e>
 800a33c:	2302      	movs	r3, #2
 800a33e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a342:	e00e      	b.n	800a362 <UART_SetConfig+0x27e>
 800a344:	2304      	movs	r3, #4
 800a346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a34a:	e00a      	b.n	800a362 <UART_SetConfig+0x27e>
 800a34c:	2308      	movs	r3, #8
 800a34e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a352:	e006      	b.n	800a362 <UART_SetConfig+0x27e>
 800a354:	2310      	movs	r3, #16
 800a356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a35a:	e002      	b.n	800a362 <UART_SetConfig+0x27e>
 800a35c:	2310      	movs	r3, #16
 800a35e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a17      	ldr	r2, [pc, #92]	@ (800a3c4 <UART_SetConfig+0x2e0>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	f040 80a8 	bne.w	800a4be <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a36e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a372:	2b08      	cmp	r3, #8
 800a374:	d834      	bhi.n	800a3e0 <UART_SetConfig+0x2fc>
 800a376:	a201      	add	r2, pc, #4	@ (adr r2, 800a37c <UART_SetConfig+0x298>)
 800a378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37c:	0800a3a1 	.word	0x0800a3a1
 800a380:	0800a3e1 	.word	0x0800a3e1
 800a384:	0800a3a9 	.word	0x0800a3a9
 800a388:	0800a3e1 	.word	0x0800a3e1
 800a38c:	0800a3af 	.word	0x0800a3af
 800a390:	0800a3e1 	.word	0x0800a3e1
 800a394:	0800a3e1 	.word	0x0800a3e1
 800a398:	0800a3e1 	.word	0x0800a3e1
 800a39c:	0800a3b7 	.word	0x0800a3b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3a0:	f7fd f850 	bl	8007444 <HAL_RCC_GetPCLK1Freq>
 800a3a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3a6:	e021      	b.n	800a3ec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a3dc <UART_SetConfig+0x2f8>)
 800a3aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3ac:	e01e      	b.n	800a3ec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3ae:	f7fc ffdb 	bl	8007368 <HAL_RCC_GetSysClockFreq>
 800a3b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3b4:	e01a      	b.n	800a3ec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3bc:	e016      	b.n	800a3ec <UART_SetConfig+0x308>
 800a3be:	bf00      	nop
 800a3c0:	cfff69f3 	.word	0xcfff69f3
 800a3c4:	40008000 	.word	0x40008000
 800a3c8:	40013800 	.word	0x40013800
 800a3cc:	40021000 	.word	0x40021000
 800a3d0:	40004400 	.word	0x40004400
 800a3d4:	40004800 	.word	0x40004800
 800a3d8:	40004c00 	.word	0x40004c00
 800a3dc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a3ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f000 812a 	beq.w	800a648 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3f8:	4a9e      	ldr	r2, [pc, #632]	@ (800a674 <UART_SetConfig+0x590>)
 800a3fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3fe:	461a      	mov	r2, r3
 800a400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a402:	fbb3 f3f2 	udiv	r3, r3, r2
 800a406:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	685a      	ldr	r2, [r3, #4]
 800a40c:	4613      	mov	r3, r2
 800a40e:	005b      	lsls	r3, r3, #1
 800a410:	4413      	add	r3, r2
 800a412:	69ba      	ldr	r2, [r7, #24]
 800a414:	429a      	cmp	r2, r3
 800a416:	d305      	bcc.n	800a424 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a41e:	69ba      	ldr	r2, [r7, #24]
 800a420:	429a      	cmp	r2, r3
 800a422:	d903      	bls.n	800a42c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a42a:	e10d      	b.n	800a648 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42e:	2200      	movs	r2, #0
 800a430:	60bb      	str	r3, [r7, #8]
 800a432:	60fa      	str	r2, [r7, #12]
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a438:	4a8e      	ldr	r2, [pc, #568]	@ (800a674 <UART_SetConfig+0x590>)
 800a43a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a43e:	b29b      	uxth	r3, r3
 800a440:	2200      	movs	r2, #0
 800a442:	603b      	str	r3, [r7, #0]
 800a444:	607a      	str	r2, [r7, #4]
 800a446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a44a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a44e:	f7f6 fc43 	bl	8000cd8 <__aeabi_uldivmod>
 800a452:	4602      	mov	r2, r0
 800a454:	460b      	mov	r3, r1
 800a456:	4610      	mov	r0, r2
 800a458:	4619      	mov	r1, r3
 800a45a:	f04f 0200 	mov.w	r2, #0
 800a45e:	f04f 0300 	mov.w	r3, #0
 800a462:	020b      	lsls	r3, r1, #8
 800a464:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a468:	0202      	lsls	r2, r0, #8
 800a46a:	6979      	ldr	r1, [r7, #20]
 800a46c:	6849      	ldr	r1, [r1, #4]
 800a46e:	0849      	lsrs	r1, r1, #1
 800a470:	2000      	movs	r0, #0
 800a472:	460c      	mov	r4, r1
 800a474:	4605      	mov	r5, r0
 800a476:	eb12 0804 	adds.w	r8, r2, r4
 800a47a:	eb43 0905 	adc.w	r9, r3, r5
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	469a      	mov	sl, r3
 800a486:	4693      	mov	fp, r2
 800a488:	4652      	mov	r2, sl
 800a48a:	465b      	mov	r3, fp
 800a48c:	4640      	mov	r0, r8
 800a48e:	4649      	mov	r1, r9
 800a490:	f7f6 fc22 	bl	8000cd8 <__aeabi_uldivmod>
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	4613      	mov	r3, r2
 800a49a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a49c:	6a3b      	ldr	r3, [r7, #32]
 800a49e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4a2:	d308      	bcc.n	800a4b6 <UART_SetConfig+0x3d2>
 800a4a4:	6a3b      	ldr	r3, [r7, #32]
 800a4a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4aa:	d204      	bcs.n	800a4b6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6a3a      	ldr	r2, [r7, #32]
 800a4b2:	60da      	str	r2, [r3, #12]
 800a4b4:	e0c8      	b.n	800a648 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a4bc:	e0c4      	b.n	800a648 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	69db      	ldr	r3, [r3, #28]
 800a4c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4c6:	d167      	bne.n	800a598 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a4c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a4cc:	2b08      	cmp	r3, #8
 800a4ce:	d828      	bhi.n	800a522 <UART_SetConfig+0x43e>
 800a4d0:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d8 <UART_SetConfig+0x3f4>)
 800a4d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d6:	bf00      	nop
 800a4d8:	0800a4fd 	.word	0x0800a4fd
 800a4dc:	0800a505 	.word	0x0800a505
 800a4e0:	0800a50d 	.word	0x0800a50d
 800a4e4:	0800a523 	.word	0x0800a523
 800a4e8:	0800a513 	.word	0x0800a513
 800a4ec:	0800a523 	.word	0x0800a523
 800a4f0:	0800a523 	.word	0x0800a523
 800a4f4:	0800a523 	.word	0x0800a523
 800a4f8:	0800a51b 	.word	0x0800a51b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4fc:	f7fc ffa2 	bl	8007444 <HAL_RCC_GetPCLK1Freq>
 800a500:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a502:	e014      	b.n	800a52e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a504:	f7fc ffb4 	bl	8007470 <HAL_RCC_GetPCLK2Freq>
 800a508:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a50a:	e010      	b.n	800a52e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a50c:	4b5a      	ldr	r3, [pc, #360]	@ (800a678 <UART_SetConfig+0x594>)
 800a50e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a510:	e00d      	b.n	800a52e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a512:	f7fc ff29 	bl	8007368 <HAL_RCC_GetSysClockFreq>
 800a516:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a518:	e009      	b.n	800a52e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a51a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a51e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a520:	e005      	b.n	800a52e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800a522:	2300      	movs	r3, #0
 800a524:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a52c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a530:	2b00      	cmp	r3, #0
 800a532:	f000 8089 	beq.w	800a648 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a53a:	4a4e      	ldr	r2, [pc, #312]	@ (800a674 <UART_SetConfig+0x590>)
 800a53c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a540:	461a      	mov	r2, r3
 800a542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a544:	fbb3 f3f2 	udiv	r3, r3, r2
 800a548:	005a      	lsls	r2, r3, #1
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	085b      	lsrs	r3, r3, #1
 800a550:	441a      	add	r2, r3
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	fbb2 f3f3 	udiv	r3, r2, r3
 800a55a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a55c:	6a3b      	ldr	r3, [r7, #32]
 800a55e:	2b0f      	cmp	r3, #15
 800a560:	d916      	bls.n	800a590 <UART_SetConfig+0x4ac>
 800a562:	6a3b      	ldr	r3, [r7, #32]
 800a564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a568:	d212      	bcs.n	800a590 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a56a:	6a3b      	ldr	r3, [r7, #32]
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	f023 030f 	bic.w	r3, r3, #15
 800a572:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a574:	6a3b      	ldr	r3, [r7, #32]
 800a576:	085b      	lsrs	r3, r3, #1
 800a578:	b29b      	uxth	r3, r3
 800a57a:	f003 0307 	and.w	r3, r3, #7
 800a57e:	b29a      	uxth	r2, r3
 800a580:	8bfb      	ldrh	r3, [r7, #30]
 800a582:	4313      	orrs	r3, r2
 800a584:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	8bfa      	ldrh	r2, [r7, #30]
 800a58c:	60da      	str	r2, [r3, #12]
 800a58e:	e05b      	b.n	800a648 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a590:	2301      	movs	r3, #1
 800a592:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a596:	e057      	b.n	800a648 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a598:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a59c:	2b08      	cmp	r3, #8
 800a59e:	d828      	bhi.n	800a5f2 <UART_SetConfig+0x50e>
 800a5a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a5a8 <UART_SetConfig+0x4c4>)
 800a5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a6:	bf00      	nop
 800a5a8:	0800a5cd 	.word	0x0800a5cd
 800a5ac:	0800a5d5 	.word	0x0800a5d5
 800a5b0:	0800a5dd 	.word	0x0800a5dd
 800a5b4:	0800a5f3 	.word	0x0800a5f3
 800a5b8:	0800a5e3 	.word	0x0800a5e3
 800a5bc:	0800a5f3 	.word	0x0800a5f3
 800a5c0:	0800a5f3 	.word	0x0800a5f3
 800a5c4:	0800a5f3 	.word	0x0800a5f3
 800a5c8:	0800a5eb 	.word	0x0800a5eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5cc:	f7fc ff3a 	bl	8007444 <HAL_RCC_GetPCLK1Freq>
 800a5d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5d2:	e014      	b.n	800a5fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5d4:	f7fc ff4c 	bl	8007470 <HAL_RCC_GetPCLK2Freq>
 800a5d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5da:	e010      	b.n	800a5fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5dc:	4b26      	ldr	r3, [pc, #152]	@ (800a678 <UART_SetConfig+0x594>)
 800a5de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a5e0:	e00d      	b.n	800a5fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5e2:	f7fc fec1 	bl	8007368 <HAL_RCC_GetSysClockFreq>
 800a5e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5e8:	e009      	b.n	800a5fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a5f0:	e005      	b.n	800a5fe <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a5fc:	bf00      	nop
    }

    if (pclk != 0U)
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a600:	2b00      	cmp	r3, #0
 800a602:	d021      	beq.n	800a648 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a608:	4a1a      	ldr	r2, [pc, #104]	@ (800a674 <UART_SetConfig+0x590>)
 800a60a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a60e:	461a      	mov	r2, r3
 800a610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a612:	fbb3 f2f2 	udiv	r2, r3, r2
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	085b      	lsrs	r3, r3, #1
 800a61c:	441a      	add	r2, r3
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	fbb2 f3f3 	udiv	r3, r2, r3
 800a626:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a628:	6a3b      	ldr	r3, [r7, #32]
 800a62a:	2b0f      	cmp	r3, #15
 800a62c:	d909      	bls.n	800a642 <UART_SetConfig+0x55e>
 800a62e:	6a3b      	ldr	r3, [r7, #32]
 800a630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a634:	d205      	bcs.n	800a642 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a636:	6a3b      	ldr	r3, [r7, #32]
 800a638:	b29a      	uxth	r2, r3
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	60da      	str	r2, [r3, #12]
 800a640:	e002      	b.n	800a648 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	2201      	movs	r2, #1
 800a654:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	2200      	movs	r2, #0
 800a65c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	2200      	movs	r2, #0
 800a662:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a664:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3730      	adds	r7, #48	@ 0x30
 800a66c:	46bd      	mov	sp, r7
 800a66e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a672:	bf00      	nop
 800a674:	08014538 	.word	0x08014538
 800a678:	00f42400 	.word	0x00f42400

0800a67c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a688:	f003 0308 	and.w	r3, r3, #8
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00a      	beq.n	800a6a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	430a      	orrs	r2, r1
 800a6a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6aa:	f003 0301 	and.w	r3, r3, #1
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00a      	beq.n	800a6c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	430a      	orrs	r2, r1
 800a6c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6cc:	f003 0302 	and.w	r3, r3, #2
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00a      	beq.n	800a6ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ee:	f003 0304 	and.w	r3, r3, #4
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00a      	beq.n	800a70c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	430a      	orrs	r2, r1
 800a70a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a710:	f003 0310 	and.w	r3, r3, #16
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00a      	beq.n	800a72e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	430a      	orrs	r2, r1
 800a72c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a732:	f003 0320 	and.w	r3, r3, #32
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00a      	beq.n	800a750 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	430a      	orrs	r2, r1
 800a74e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d01a      	beq.n	800a792 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	430a      	orrs	r2, r1
 800a770:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a776:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a77a:	d10a      	bne.n	800a792 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	430a      	orrs	r2, r1
 800a790:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00a      	beq.n	800a7b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	430a      	orrs	r2, r1
 800a7b2:	605a      	str	r2, [r3, #4]
  }
}
 800a7b4:	bf00      	nop
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b098      	sub	sp, #96	@ 0x60
 800a7c4:	af02      	add	r7, sp, #8
 800a7c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7d0:	f7f8 f9de 	bl	8002b90 <HAL_GetTick>
 800a7d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f003 0308 	and.w	r3, r3, #8
 800a7e0:	2b08      	cmp	r3, #8
 800a7e2:	d12f      	bne.n	800a844 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 f88e 	bl	800a914 <UART_WaitOnFlagUntilTimeout>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d022      	beq.n	800a844 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a806:	e853 3f00 	ldrex	r3, [r3]
 800a80a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a80c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a80e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a812:	653b      	str	r3, [r7, #80]	@ 0x50
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	461a      	mov	r2, r3
 800a81a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a81c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a81e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a820:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a822:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a824:	e841 2300 	strex	r3, r2, [r1]
 800a828:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a82a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1e6      	bne.n	800a7fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2220      	movs	r2, #32
 800a834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a840:	2303      	movs	r3, #3
 800a842:	e063      	b.n	800a90c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 0304 	and.w	r3, r3, #4
 800a84e:	2b04      	cmp	r3, #4
 800a850:	d149      	bne.n	800a8e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a852:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a85a:	2200      	movs	r2, #0
 800a85c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 f857 	bl	800a914 <UART_WaitOnFlagUntilTimeout>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d03c      	beq.n	800a8e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a874:	e853 3f00 	ldrex	r3, [r3]
 800a878:	623b      	str	r3, [r7, #32]
   return(result);
 800a87a:	6a3b      	ldr	r3, [r7, #32]
 800a87c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a880:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	461a      	mov	r2, r3
 800a888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a88a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a88c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a892:	e841 2300 	strex	r3, r2, [r1]
 800a896:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1e6      	bne.n	800a86c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	e853 3f00 	ldrex	r3, [r3]
 800a8ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f023 0301 	bic.w	r3, r3, #1
 800a8b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3308      	adds	r3, #8
 800a8bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8be:	61fa      	str	r2, [r7, #28]
 800a8c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c2:	69b9      	ldr	r1, [r7, #24]
 800a8c4:	69fa      	ldr	r2, [r7, #28]
 800a8c6:	e841 2300 	strex	r3, r2, [r1]
 800a8ca:	617b      	str	r3, [r7, #20]
   return(result);
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1e5      	bne.n	800a89e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2220      	movs	r2, #32
 800a8d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e012      	b.n	800a90c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2220      	movs	r2, #32
 800a8ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2220      	movs	r2, #32
 800a8f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a90a:	2300      	movs	r3, #0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3758      	adds	r7, #88	@ 0x58
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	603b      	str	r3, [r7, #0]
 800a920:	4613      	mov	r3, r2
 800a922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a924:	e04f      	b.n	800a9c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a92c:	d04b      	beq.n	800a9c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a92e:	f7f8 f92f 	bl	8002b90 <HAL_GetTick>
 800a932:	4602      	mov	r2, r0
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	69ba      	ldr	r2, [r7, #24]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d302      	bcc.n	800a944 <UART_WaitOnFlagUntilTimeout+0x30>
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d101      	bne.n	800a948 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a944:	2303      	movs	r3, #3
 800a946:	e04e      	b.n	800a9e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f003 0304 	and.w	r3, r3, #4
 800a952:	2b00      	cmp	r3, #0
 800a954:	d037      	beq.n	800a9c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	2b80      	cmp	r3, #128	@ 0x80
 800a95a:	d034      	beq.n	800a9c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	2b40      	cmp	r3, #64	@ 0x40
 800a960:	d031      	beq.n	800a9c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	69db      	ldr	r3, [r3, #28]
 800a968:	f003 0308 	and.w	r3, r3, #8
 800a96c:	2b08      	cmp	r3, #8
 800a96e:	d110      	bne.n	800a992 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2208      	movs	r2, #8
 800a976:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f000 f920 	bl	800abbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2208      	movs	r2, #8
 800a982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	e029      	b.n	800a9e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	69db      	ldr	r3, [r3, #28]
 800a998:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a99c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9a0:	d111      	bne.n	800a9c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a9aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f000 f906 	bl	800abbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2220      	movs	r2, #32
 800a9b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a9c2:	2303      	movs	r3, #3
 800a9c4:	e00f      	b.n	800a9e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	69da      	ldr	r2, [r3, #28]
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	bf0c      	ite	eq
 800a9d6:	2301      	moveq	r3, #1
 800a9d8:	2300      	movne	r3, #0
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	461a      	mov	r2, r3
 800a9de:	79fb      	ldrb	r3, [r7, #7]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d0a0      	beq.n	800a926 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
	...

0800a9f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b096      	sub	sp, #88	@ 0x58
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	68ba      	ldr	r2, [r7, #8]
 800aa02:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	88fa      	ldrh	r2, [r7, #6]
 800aa08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2222      	movs	r2, #34	@ 0x22
 800aa18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d02d      	beq.n	800aa82 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa2c:	4a40      	ldr	r2, [pc, #256]	@ (800ab30 <UART_Start_Receive_DMA+0x140>)
 800aa2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa36:	4a3f      	ldr	r2, [pc, #252]	@ (800ab34 <UART_Start_Receive_DMA+0x144>)
 800aa38:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa40:	4a3d      	ldr	r2, [pc, #244]	@ (800ab38 <UART_Start_Receive_DMA+0x148>)
 800aa42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	3324      	adds	r3, #36	@ 0x24
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa60:	461a      	mov	r2, r3
 800aa62:	88fb      	ldrh	r3, [r7, #6]
 800aa64:	f7fb fb42 	bl	80060ec <HAL_DMA_Start_IT>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d009      	beq.n	800aa82 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2210      	movs	r2, #16
 800aa72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2220      	movs	r2, #32
 800aa7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e051      	b.n	800ab26 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d018      	beq.n	800aabc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa92:	e853 3f00 	ldrex	r3, [r3]
 800aa96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa9e:	657b      	str	r3, [r7, #84]	@ 0x54
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aaa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aaaa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aaae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aab0:	e841 2300 	strex	r3, r2, [r1]
 800aab4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800aab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1e6      	bne.n	800aa8a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	3308      	adds	r3, #8
 800aac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac6:	e853 3f00 	ldrex	r3, [r3]
 800aaca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aace:	f043 0301 	orr.w	r3, r3, #1
 800aad2:	653b      	str	r3, [r7, #80]	@ 0x50
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	3308      	adds	r3, #8
 800aada:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aadc:	637a      	str	r2, [r7, #52]	@ 0x34
 800aade:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aae2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aae4:	e841 2300 	strex	r3, r2, [r1]
 800aae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800aaea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d1e5      	bne.n	800aabc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	3308      	adds	r3, #8
 800aaf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	e853 3f00 	ldrex	r3, [r3]
 800aafe:	613b      	str	r3, [r7, #16]
   return(result);
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	3308      	adds	r3, #8
 800ab0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ab10:	623a      	str	r2, [r7, #32]
 800ab12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab14:	69f9      	ldr	r1, [r7, #28]
 800ab16:	6a3a      	ldr	r2, [r7, #32]
 800ab18:	e841 2300 	strex	r3, r2, [r1]
 800ab1c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1e5      	bne.n	800aaf0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3758      	adds	r7, #88	@ 0x58
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	0800ad41 	.word	0x0800ad41
 800ab34:	0800ae6d 	.word	0x0800ae6d
 800ab38:	0800aeab 	.word	0x0800aeab

0800ab3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b08f      	sub	sp, #60	@ 0x3c
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4a:	6a3b      	ldr	r3, [r7, #32]
 800ab4c:	e853 3f00 	ldrex	r3, [r3]
 800ab50:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ab58:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	461a      	mov	r2, r3
 800ab60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab64:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab6a:	e841 2300 	strex	r3, r2, [r1]
 800ab6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1e6      	bne.n	800ab44 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	3308      	adds	r3, #8
 800ab7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	e853 3f00 	ldrex	r3, [r3]
 800ab84:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ab8c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	3308      	adds	r3, #8
 800ab94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab96:	61ba      	str	r2, [r7, #24]
 800ab98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9a:	6979      	ldr	r1, [r7, #20]
 800ab9c:	69ba      	ldr	r2, [r7, #24]
 800ab9e:	e841 2300 	strex	r3, r2, [r1]
 800aba2:	613b      	str	r3, [r7, #16]
   return(result);
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1e5      	bne.n	800ab76 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2220      	movs	r2, #32
 800abae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800abb2:	bf00      	nop
 800abb4:	373c      	adds	r7, #60	@ 0x3c
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr

0800abbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abbe:	b480      	push	{r7}
 800abc0:	b095      	sub	sp, #84	@ 0x54
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abce:	e853 3f00 	ldrex	r3, [r3]
 800abd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800abd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800abda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	461a      	mov	r2, r3
 800abe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abe4:	643b      	str	r3, [r7, #64]	@ 0x40
 800abe6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800abea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abec:	e841 2300 	strex	r3, r2, [r1]
 800abf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d1e6      	bne.n	800abc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	3308      	adds	r3, #8
 800abfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac00:	6a3b      	ldr	r3, [r7, #32]
 800ac02:	e853 3f00 	ldrex	r3, [r3]
 800ac06:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac0e:	f023 0301 	bic.w	r3, r3, #1
 800ac12:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3308      	adds	r3, #8
 800ac1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac24:	e841 2300 	strex	r3, r2, [r1]
 800ac28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d1e3      	bne.n	800abf8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d118      	bne.n	800ac6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	e853 3f00 	ldrex	r3, [r3]
 800ac44:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	f023 0310 	bic.w	r3, r3, #16
 800ac4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	461a      	mov	r2, r3
 800ac54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac56:	61bb      	str	r3, [r7, #24]
 800ac58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5a:	6979      	ldr	r1, [r7, #20]
 800ac5c:	69ba      	ldr	r2, [r7, #24]
 800ac5e:	e841 2300 	strex	r3, r2, [r1]
 800ac62:	613b      	str	r3, [r7, #16]
   return(result);
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1e6      	bne.n	800ac38 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ac7e:	bf00      	nop
 800ac80:	3754      	adds	r7, #84	@ 0x54
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr

0800ac8a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b090      	sub	sp, #64	@ 0x40
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac96:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f003 0320 	and.w	r3, r3, #32
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d137      	bne.n	800ad16 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800aca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aca8:	2200      	movs	r2, #0
 800acaa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800acae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	3308      	adds	r3, #8
 800acb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb8:	e853 3f00 	ldrex	r3, [r3]
 800acbc:	623b      	str	r3, [r7, #32]
   return(result);
 800acbe:	6a3b      	ldr	r3, [r7, #32]
 800acc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800acc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800acc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	3308      	adds	r3, #8
 800accc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800acce:	633a      	str	r2, [r7, #48]	@ 0x30
 800acd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acd6:	e841 2300 	strex	r3, r2, [r1]
 800acda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800acdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1e5      	bne.n	800acae <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ace2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	e853 3f00 	ldrex	r3, [r3]
 800acee:	60fb      	str	r3, [r7, #12]
   return(result);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acf6:	637b      	str	r3, [r7, #52]	@ 0x34
 800acf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	461a      	mov	r2, r3
 800acfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad00:	61fb      	str	r3, [r7, #28]
 800ad02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad04:	69b9      	ldr	r1, [r7, #24]
 800ad06:	69fa      	ldr	r2, [r7, #28]
 800ad08:	e841 2300 	strex	r3, r2, [r1]
 800ad0c:	617b      	str	r3, [r7, #20]
   return(result);
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1e6      	bne.n	800ace2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad14:	e002      	b.n	800ad1c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ad16:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ad18:	f7ff f9b2 	bl	800a080 <HAL_UART_TxCpltCallback>
}
 800ad1c:	bf00      	nop
 800ad1e:	3740      	adds	r7, #64	@ 0x40
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad30:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f7ff f9ae 	bl	800a094 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad38:	bf00      	nop
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b09c      	sub	sp, #112	@ 0x70
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad4c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 0320 	and.w	r3, r3, #32
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d171      	bne.n	800ae40 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ad5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad6c:	e853 3f00 	ldrex	r3, [r3]
 800ad70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ad72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad78:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	461a      	mov	r2, r3
 800ad80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad82:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ad88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad8a:	e841 2300 	strex	r3, r2, [r1]
 800ad8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ad90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1e6      	bne.n	800ad64 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	3308      	adds	r3, #8
 800ad9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada0:	e853 3f00 	ldrex	r3, [r3]
 800ada4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ada6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ada8:	f023 0301 	bic.w	r3, r3, #1
 800adac:	667b      	str	r3, [r7, #100]	@ 0x64
 800adae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	3308      	adds	r3, #8
 800adb4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800adb6:	647a      	str	r2, [r7, #68]	@ 0x44
 800adb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800adbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800adbe:	e841 2300 	strex	r3, r2, [r1]
 800adc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800adc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1e5      	bne.n	800ad96 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800adca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	3308      	adds	r3, #8
 800add0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add4:	e853 3f00 	ldrex	r3, [r3]
 800add8:	623b      	str	r3, [r7, #32]
   return(result);
 800adda:	6a3b      	ldr	r3, [r7, #32]
 800addc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ade0:	663b      	str	r3, [r7, #96]	@ 0x60
 800ade2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	3308      	adds	r3, #8
 800ade8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800adea:	633a      	str	r2, [r7, #48]	@ 0x30
 800adec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800adf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adf2:	e841 2300 	strex	r3, r2, [r1]
 800adf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800adf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d1e5      	bne.n	800adca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800adfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae00:	2220      	movs	r2, #32
 800ae02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d118      	bne.n	800ae40 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	e853 3f00 	ldrex	r3, [r3]
 800ae1a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f023 0310 	bic.w	r3, r3, #16
 800ae22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ae24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae2c:	61fb      	str	r3, [r7, #28]
 800ae2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae30:	69b9      	ldr	r1, [r7, #24]
 800ae32:	69fa      	ldr	r2, [r7, #28]
 800ae34:	e841 2300 	strex	r3, r2, [r1]
 800ae38:	617b      	str	r3, [r7, #20]
   return(result);
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d1e6      	bne.n	800ae0e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae42:	2200      	movs	r2, #0
 800ae44:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d107      	bne.n	800ae5e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae54:	4619      	mov	r1, r3
 800ae56:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ae58:	f002 f880 	bl	800cf5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae5c:	e002      	b.n	800ae64 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ae5e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ae60:	f7ff f922 	bl	800a0a8 <HAL_UART_RxCpltCallback>
}
 800ae64:	bf00      	nop
 800ae66:	3770      	adds	r7, #112	@ 0x70
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae78:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d109      	bne.n	800ae9c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae8e:	085b      	lsrs	r3, r3, #1
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	4619      	mov	r1, r3
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f002 f861 	bl	800cf5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae9a:	e002      	b.n	800aea2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f7ff f90d 	bl	800a0bc <HAL_UART_RxHalfCpltCallback>
}
 800aea2:	bf00      	nop
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aeaa:	b580      	push	{r7, lr}
 800aeac:	b086      	sub	sp, #24
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeb6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aebe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aec6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aed2:	2b80      	cmp	r3, #128	@ 0x80
 800aed4:	d109      	bne.n	800aeea <UART_DMAError+0x40>
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	2b21      	cmp	r3, #33	@ 0x21
 800aeda:	d106      	bne.n	800aeea <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	2200      	movs	r2, #0
 800aee0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800aee4:	6978      	ldr	r0, [r7, #20]
 800aee6:	f7ff fe29 	bl	800ab3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aef4:	2b40      	cmp	r3, #64	@ 0x40
 800aef6:	d109      	bne.n	800af0c <UART_DMAError+0x62>
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2b22      	cmp	r3, #34	@ 0x22
 800aefc:	d106      	bne.n	800af0c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	2200      	movs	r2, #0
 800af02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800af06:	6978      	ldr	r0, [r7, #20]
 800af08:	f7ff fe59 	bl	800abbe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af12:	f043 0210 	orr.w	r2, r3, #16
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af1c:	6978      	ldr	r0, [r7, #20]
 800af1e:	f7ff f8d7 	bl	800a0d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af22:	bf00      	nop
 800af24:	3718      	adds	r7, #24
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b084      	sub	sp, #16
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af48:	68f8      	ldr	r0, [r7, #12]
 800af4a:	f7ff f8c1 	bl	800a0d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af4e:	bf00      	nop
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b088      	sub	sp, #32
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	e853 3f00 	ldrex	r3, [r3]
 800af6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af72:	61fb      	str	r3, [r7, #28]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	461a      	mov	r2, r3
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	61bb      	str	r3, [r7, #24]
 800af7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af80:	6979      	ldr	r1, [r7, #20]
 800af82:	69ba      	ldr	r2, [r7, #24]
 800af84:	e841 2300 	strex	r3, r2, [r1]
 800af88:	613b      	str	r3, [r7, #16]
   return(result);
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1e6      	bne.n	800af5e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2220      	movs	r2, #32
 800af94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7ff f86e 	bl	800a080 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afa4:	bf00      	nop
 800afa6:	3720      	adds	r7, #32
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800afb4:	bf00      	nop
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800afc8:	bf00      	nop
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800afdc:	bf00      	nop
 800afde:	370c      	adds	r7, #12
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800afe8:	b480      	push	{r7}
 800afea:	b085      	sub	sp, #20
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d101      	bne.n	800affe <HAL_UARTEx_DisableFifoMode+0x16>
 800affa:	2302      	movs	r3, #2
 800affc:	e027      	b.n	800b04e <HAL_UARTEx_DisableFifoMode+0x66>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2201      	movs	r2, #1
 800b002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2224      	movs	r2, #36	@ 0x24
 800b00a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f022 0201 	bic.w	r2, r2, #1
 800b024:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b02c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68fa      	ldr	r2, [r7, #12]
 800b03a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2220      	movs	r2, #32
 800b040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3714      	adds	r7, #20
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr

0800b05a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b084      	sub	sp, #16
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
 800b062:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d101      	bne.n	800b072 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b06e:	2302      	movs	r3, #2
 800b070:	e02d      	b.n	800b0ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2201      	movs	r2, #1
 800b076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2224      	movs	r2, #36	@ 0x24
 800b07e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f022 0201 	bic.w	r2, r2, #1
 800b098:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	683a      	ldr	r2, [r7, #0]
 800b0aa:	430a      	orrs	r2, r1
 800b0ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 f8a4 	bl	800b1fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	68fa      	ldr	r2, [r7, #12]
 800b0ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2220      	movs	r2, #32
 800b0c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b084      	sub	sp, #16
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d101      	bne.n	800b0ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b0ea:	2302      	movs	r3, #2
 800b0ec:	e02d      	b.n	800b14a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2224      	movs	r2, #36	@ 0x24
 800b0fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f022 0201 	bic.w	r2, r2, #1
 800b114:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	683a      	ldr	r2, [r7, #0]
 800b126:	430a      	orrs	r2, r1
 800b128:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f866 	bl	800b1fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2220      	movs	r2, #32
 800b13c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3710      	adds	r7, #16
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b08c      	sub	sp, #48	@ 0x30
 800b156:	af00      	add	r7, sp, #0
 800b158:	60f8      	str	r0, [r7, #12]
 800b15a:	60b9      	str	r1, [r7, #8]
 800b15c:	4613      	mov	r3, r2
 800b15e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b166:	2b20      	cmp	r3, #32
 800b168:	d142      	bne.n	800b1f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d002      	beq.n	800b176 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b170:	88fb      	ldrh	r3, [r7, #6]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d101      	bne.n	800b17a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	e03b      	b.n	800b1f2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2201      	movs	r2, #1
 800b17e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b186:	88fb      	ldrh	r3, [r7, #6]
 800b188:	461a      	mov	r2, r3
 800b18a:	68b9      	ldr	r1, [r7, #8]
 800b18c:	68f8      	ldr	r0, [r7, #12]
 800b18e:	f7ff fc2f 	bl	800a9f0 <UART_Start_Receive_DMA>
 800b192:	4603      	mov	r3, r0
 800b194:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b198:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d124      	bne.n	800b1ea <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d11d      	bne.n	800b1e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2210      	movs	r2, #16
 800b1ae:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	e853 3f00 	ldrex	r3, [r3]
 800b1bc:	617b      	str	r3, [r7, #20]
   return(result);
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	f043 0310 	orr.w	r3, r3, #16
 800b1c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1d0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d2:	6a39      	ldr	r1, [r7, #32]
 800b1d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1d6:	e841 2300 	strex	r3, r2, [r1]
 800b1da:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1e6      	bne.n	800b1b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b1e2:	e002      	b.n	800b1ea <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b1ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b1ee:	e000      	b.n	800b1f2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b1f0:	2302      	movs	r3, #2
  }
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3730      	adds	r7, #48	@ 0x30
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
	...

0800b1fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d108      	bne.n	800b21e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2201      	movs	r2, #1
 800b218:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b21c:	e031      	b.n	800b282 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b21e:	2308      	movs	r3, #8
 800b220:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b222:	2308      	movs	r3, #8
 800b224:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	0e5b      	lsrs	r3, r3, #25
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	f003 0307 	and.w	r3, r3, #7
 800b234:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	0f5b      	lsrs	r3, r3, #29
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	f003 0307 	and.w	r3, r3, #7
 800b244:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b246:	7bbb      	ldrb	r3, [r7, #14]
 800b248:	7b3a      	ldrb	r2, [r7, #12]
 800b24a:	4911      	ldr	r1, [pc, #68]	@ (800b290 <UARTEx_SetNbDataToProcess+0x94>)
 800b24c:	5c8a      	ldrb	r2, [r1, r2]
 800b24e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b252:	7b3a      	ldrb	r2, [r7, #12]
 800b254:	490f      	ldr	r1, [pc, #60]	@ (800b294 <UARTEx_SetNbDataToProcess+0x98>)
 800b256:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b258:	fb93 f3f2 	sdiv	r3, r3, r2
 800b25c:	b29a      	uxth	r2, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b264:	7bfb      	ldrb	r3, [r7, #15]
 800b266:	7b7a      	ldrb	r2, [r7, #13]
 800b268:	4909      	ldr	r1, [pc, #36]	@ (800b290 <UARTEx_SetNbDataToProcess+0x94>)
 800b26a:	5c8a      	ldrb	r2, [r1, r2]
 800b26c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b270:	7b7a      	ldrb	r2, [r7, #13]
 800b272:	4908      	ldr	r1, [pc, #32]	@ (800b294 <UARTEx_SetNbDataToProcess+0x98>)
 800b274:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b276:	fb93 f3f2 	sdiv	r3, r3, r2
 800b27a:	b29a      	uxth	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b282:	bf00      	nop
 800b284:	3714      	adds	r7, #20
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop
 800b290:	08014550 	.word	0x08014550
 800b294:	08014558 	.word	0x08014558

0800b298 <goToZeroElecAngle>:
#include "pid.h"
#include "lowpass_filter.h"
#include "focLib.h"

void goToZeroElecAngle(BldcMotor *motor)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
    setTorque(motor, 0, OPEN_LOOP_TORQUE, 0);
 800b2a0:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800b2c4 <goToZeroElecAngle+0x2c>
 800b2a4:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800b2c8 <goToZeroElecAngle+0x30>
 800b2a8:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800b2c4 <goToZeroElecAngle+0x2c>
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f001 f84f 	bl	800c350 <setTorque>
    delay(700);
 800b2b2:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800b2b6:	f003 fc29 	bl	800eb0c <delay>
}
 800b2ba:	bf00      	nop
 800b2bc:	3708      	adds	r7, #8
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	00000000 	.word	0x00000000
 800b2c8:	4013cd3a 	.word	0x4013cd3a

0800b2cc <alignSensor>:
int alignSensor(BldcMotor *motor)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b08a      	sub	sp, #40	@ 0x28
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
    // setTorque(motor, OPEN_LOOP_TORQUE, 0, _3PI_2);
    // delay(200);
    // encoderUpdate(&motor->magEncoder);
    // float start_angle = motor->magEncoder.fullAngle;
    // printLog("start_angle:%f\n", start_angle);
    for (int i = 0; i <= 500; i++)
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2d8:	e025      	b.n	800b326 <alignSensor+0x5a>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800b2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2dc:	ee07 3a90 	vmov	s15, r3
 800b2e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2e4:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800b4ec <alignSensor+0x220>
 800b2e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b2ec:	eddf 6a80 	vldr	s13, [pc, #512]	@ 800b4f0 <alignSensor+0x224>
 800b2f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b2f4:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 800b4f4 <alignSensor+0x228>
 800b2f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2fc:	edc7 7a02 	vstr	s15, [r7, #8]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800b300:	ed97 1a02 	vldr	s2, [r7, #8]
 800b304:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 800b4f8 <alignSensor+0x22c>
 800b308:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 800b4fc <alignSensor+0x230>
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f001 f81f 	bl	800c350 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4618      	mov	r0, r3
 800b316:	f000 fcf1 	bl	800bcfc <encoderUpdate>
        delay(2);
 800b31a:	2002      	movs	r0, #2
 800b31c:	f003 fbf6 	bl	800eb0c <delay>
    for (int i = 0; i <= 500; i++)
 800b320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b322:	3301      	adds	r3, #1
 800b324:	627b      	str	r3, [r7, #36]	@ 0x24
 800b326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b328:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b32c:	ddd5      	ble.n	800b2da <alignSensor+0xe>
    }
    // encoderUpdate(&motor->magEncoder);

    float mid_angle = motor->magEncoder.fullAngle;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	695b      	ldr	r3, [r3, #20]
 800b332:	61fb      	str	r3, [r7, #28]
    printLog("mid_angle:%f\n", mid_angle);
 800b334:	69f8      	ldr	r0, [r7, #28]
 800b336:	f7f5 f92f 	bl	8000598 <__aeabi_f2d>
 800b33a:	4602      	mov	r2, r0
 800b33c:	460b      	mov	r3, r1
 800b33e:	4870      	ldr	r0, [pc, #448]	@ (800b500 <alignSensor+0x234>)
 800b340:	f001 fe4c 	bl	800cfdc <printLog>
    // move one electrical revolution backwards
    for (int i = 500; i >= 0; i--)
 800b344:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800b348:	623b      	str	r3, [r7, #32]
 800b34a:	e025      	b.n	800b398 <alignSensor+0xcc>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800b34c:	6a3b      	ldr	r3, [r7, #32]
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b356:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800b4ec <alignSensor+0x220>
 800b35a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b35e:	eddf 6a64 	vldr	s13, [pc, #400]	@ 800b4f0 <alignSensor+0x224>
 800b362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b366:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800b4f4 <alignSensor+0x228>
 800b36a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b36e:	edc7 7a03 	vstr	s15, [r7, #12]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800b372:	ed97 1a03 	vldr	s2, [r7, #12]
 800b376:	eddf 0a60 	vldr	s1, [pc, #384]	@ 800b4f8 <alignSensor+0x22c>
 800b37a:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 800b4fc <alignSensor+0x230>
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 ffe6 	bl	800c350 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4618      	mov	r0, r3
 800b388:	f000 fcb8 	bl	800bcfc <encoderUpdate>
        delay(2);
 800b38c:	2002      	movs	r0, #2
 800b38e:	f003 fbbd 	bl	800eb0c <delay>
    for (int i = 500; i >= 0; i--)
 800b392:	6a3b      	ldr	r3, [r7, #32]
 800b394:	3b01      	subs	r3, #1
 800b396:	623b      	str	r3, [r7, #32]
 800b398:	6a3b      	ldr	r3, [r7, #32]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	dad6      	bge.n	800b34c <alignSensor+0x80>
    }
    // encoderUpdate(&motor->magEncoder);

    float end_angle = motor->magEncoder.fullAngle;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	61bb      	str	r3, [r7, #24]
    printLog("end_angle:%f\n", end_angle);
 800b3a4:	69b8      	ldr	r0, [r7, #24]
 800b3a6:	f7f5 f8f7 	bl	8000598 <__aeabi_f2d>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	4855      	ldr	r0, [pc, #340]	@ (800b504 <alignSensor+0x238>)
 800b3b0:	f001 fe14 	bl	800cfdc <printLog>
    // setPhaseVoltage(0, 0, 0);
    delay(200);
 800b3b4:	20c8      	movs	r0, #200	@ 0xc8
 800b3b6:	f003 fba9 	bl	800eb0c <delay>

    // determine the direction the sensor moved
    float moved = fabsf(mid_angle - end_angle);
 800b3ba:	ed97 7a07 	vldr	s14, [r7, #28]
 800b3be:	edd7 7a06 	vldr	s15, [r7, #24]
 800b3c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3c6:	eef0 7ae7 	vabs.f32	s15, s15
 800b3ca:	edc7 7a05 	vstr	s15, [r7, #20]
    printLog("moved:%f\n", moved);
 800b3ce:	6978      	ldr	r0, [r7, #20]
 800b3d0:	f7f5 f8e2 	bl	8000598 <__aeabi_f2d>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	484b      	ldr	r0, [pc, #300]	@ (800b508 <alignSensor+0x23c>)
 800b3da:	f001 fdff 	bl	800cfdc <printLog>
    if (moved < MIN_ANGLE_DETECT_MOVEMENT)
 800b3de:	edd7 7a05 	vldr	s15, [r7, #20]
 800b3e2:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800b50c <alignSensor+0x240>
 800b3e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ee:	d504      	bpl.n	800b3fa <alignSensor+0x12e>
    { // minimum angle to detect movement
        printLog("Failed to notice movement\n");
 800b3f0:	4847      	ldr	r0, [pc, #284]	@ (800b510 <alignSensor+0x244>)
 800b3f2:	f001 fdf3 	bl	800cfdc <printLog>
        return 0; // failed calibration
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	e073      	b.n	800b4e2 <alignSensor+0x216>
    }
    else if (mid_angle < end_angle)
 800b3fa:	ed97 7a07 	vldr	s14, [r7, #28]
 800b3fe:	edd7 7a06 	vldr	s15, [r7, #24]
 800b402:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b40a:	d507      	bpl.n	800b41c <alignSensor+0x150>
    {
        printLog("sensor_direction==CCW\n");
 800b40c:	4841      	ldr	r0, [pc, #260]	@ (800b514 <alignSensor+0x248>)
 800b40e:	f001 fde5 	bl	800cfdc <printLog>
        motor->magEncoder.direction = CCW;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	22ff      	movs	r2, #255	@ 0xff
 800b416:	f883 2020 	strb.w	r2, [r3, #32]
 800b41a:	e006      	b.n	800b42a <alignSensor+0x15e>
    }
    else
    {
        printLog("sensor_direction==CW\n");
 800b41c:	483e      	ldr	r0, [pc, #248]	@ (800b518 <alignSensor+0x24c>)
 800b41e:	f001 fddd 	bl	800cfdc <printLog>
        motor->magEncoder.direction = CW;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2201      	movs	r2, #1
 800b426:	f883 2020 	strb.w	r2, [r3, #32]
    }
    // check pole pair number
    bool pp_check_result = !(fabsf(moved * motor->pole_pairs - _2PI) > 0.5f); // 0.5f is arbitrary number it can be lower or higher!
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b430:	ee07 3a90 	vmov	s15, r3
 800b434:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b438:	edd7 7a05 	vldr	s15, [r7, #20]
 800b43c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b440:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800b4ec <alignSensor+0x220>
 800b444:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b448:	eef0 7ae7 	vabs.f32	s15, s15
 800b44c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b450:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b458:	bfcc      	ite	gt
 800b45a:	2301      	movgt	r3, #1
 800b45c:	2300      	movle	r3, #0
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	f083 0301 	eor.w	r3, r3, #1
 800b464:	b2db      	uxtb	r3, r3
 800b466:	74fb      	strb	r3, [r7, #19]
    if (pp_check_result == false)
 800b468:	7cfb      	ldrb	r3, [r7, #19]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d10d      	bne.n	800b48a <alignSensor+0x1be>
    {
        printLog("PP check: fail - estimated pp: %d\n", (int)(_2PI / moved));
 800b46e:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800b4ec <alignSensor+0x220>
 800b472:	ed97 7a05 	vldr	s14, [r7, #20]
 800b476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b47a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b47e:	ee17 1a90 	vmov	r1, s15
 800b482:	4826      	ldr	r0, [pc, #152]	@ (800b51c <alignSensor+0x250>)
 800b484:	f001 fdaa 	bl	800cfdc <printLog>
 800b488:	e002      	b.n	800b490 <alignSensor+0x1c4>
    }
    else
    {
        printLog("PP check: OK!\n");
 800b48a:	4825      	ldr	r0, [pc, #148]	@ (800b520 <alignSensor+0x254>)
 800b48c:	f001 fda6 	bl	800cfdc <printLog>
    }

    // align the electrical phases of the motor and sensor
    // set angle -90(270 = 3PI/2) degrees
    goToZeroElecAngle(motor);
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7ff ff01 	bl	800b298 <goToZeroElecAngle>
    // read the sensor
    encoderUpdate(&motor->magEncoder);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4618      	mov	r0, r3
 800b49a:	f000 fc2f 	bl	800bcfc <encoderUpdate>
    // get the current zero electric angle
    motor->zeroElectricAngleOffSet = 0;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f04f 0200 	mov.w	r2, #0
 800b4a4:	635a      	str	r2, [r3, #52]	@ 0x34
    getElecAngle(motor);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 f840 	bl	800b52c <getElecAngle>
    motor->zeroElectricAngleOffSet = motor->angle_el;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	635a      	str	r2, [r3, #52]	@ 0x34
    // zero_electric_angle =  _normalizeAngle(_electricalAngle(sensor_direction*sensor->getAngle(), pole_pairs));

    // encoderUpdate(&motor->magEncoder);
    getElecAngle(motor);
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 f839 	bl	800b52c <getElecAngle>
    // motor->zeroElectricAngleOffSet = 0;
    // printLog("[zeroAngleOffset]:%f  [zeroAngle]:%f\r\n", motor->zeroElectricAngleOffSet, motor->angle_el);
    printLog("[zeroAngleOffset]:%f\n", motor->zeroElectricAngleOffSet);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7f5 f86a 	bl	8000598 <__aeabi_f2d>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	4816      	ldr	r0, [pc, #88]	@ (800b524 <alignSensor+0x258>)
 800b4ca:	f001 fd87 	bl	800cfdc <printLog>
    printLog("[zeroAngle]:%f\n", motor->angle_el);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7f5 f860 	bl	8000598 <__aeabi_f2d>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	460b      	mov	r3, r1
 800b4dc:	4812      	ldr	r0, [pc, #72]	@ (800b528 <alignSensor+0x25c>)
 800b4de:	f001 fd7d 	bl	800cfdc <printLog>
    // // make sure the angle_el is about zero

    // delay(200);
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3728      	adds	r7, #40	@ 0x28
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	40c90fdb 	.word	0x40c90fdb
 800b4f0:	43fa0000 	.word	0x43fa0000
 800b4f4:	4096cbe4 	.word	0x4096cbe4
 800b4f8:	00000000 	.word	0x00000000
 800b4fc:	4013cd3a 	.word	0x4013cd3a
 800b500:	080143b8 	.word	0x080143b8
 800b504:	080143c8 	.word	0x080143c8
 800b508:	080143d8 	.word	0x080143d8
 800b50c:	3d7ecfa9 	.word	0x3d7ecfa9
 800b510:	080143e4 	.word	0x080143e4
 800b514:	08014400 	.word	0x08014400
 800b518:	08014418 	.word	0x08014418
 800b51c:	08014430 	.word	0x08014430
 800b520:	08014454 	.word	0x08014454
 800b524:	08014464 	.word	0x08014464
 800b528:	0801447c 	.word	0x0801447c

0800b52c <getElecAngle>:

void getElecAngle(BldcMotor *motor)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
    motor->angle_el = _normalizeAngle(motor->pole_pairs * motor->magEncoder.shaftAngle - motor->zeroElectricAngleOffSet);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b53a:	ee07 3a90 	vmov	s15, r3
 800b53e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	edd3 7a04 	vldr	s15, [r3, #16]
 800b548:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800b552:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b556:	eeb0 0a67 	vmov.f32	s0, s15
 800b55a:	f000 fd71 	bl	800c040 <_normalizeAngle>
 800b55e:	eef0 7a40 	vmov.f32	s15, s0
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
}
 800b568:	bf00      	nop
 800b56a:	3708      	adds	r7, #8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <foc>:

void foc(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b088      	sub	sp, #32
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]

    if (motor->state == MOTOR_CALIBRATE)
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b582:	2b00      	cmp	r3, #0
 800b584:	d111      	bne.n	800b5aa <foc+0x3a>
    {
        getCurrentOffsets(motor, adc_a, adc_b, 100);
 800b586:	2364      	movs	r3, #100	@ 0x64
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	68b9      	ldr	r1, [r7, #8]
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f000 f9af 	bl	800b8f0 <getCurrentOffsets>
        alignSensor(motor);
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	f7ff fe9a 	bl	800b2cc <alignSensor>
        motor->state = MOTOR_READY;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        motor->stopPwm();
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800b5a6:	4798      	blx	r3
                break;
            }
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
        }
    }
}
 800b5a8:	e194      	b.n	800b8d4 <foc+0x364>
        getPhaseCurrents(motor, adc_a, adc_b);
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	68b9      	ldr	r1, [r7, #8]
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f000 fa6e 	bl	800ba90 <getPhaseCurrents>
        getABCurrents(motor);
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	f000 fb0d 	bl	800bbd4 <getABCurrents>
        getDQCurrents(motor);
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f000 fb30 	bl	800bc20 <getDQCurrents>
        motor->Iq = lpfOperator(&motor->IqFilter, motor->Iq);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f103 02f4 	add.w	r2, r3, #244	@ 0xf4
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800b5cc:	eeb0 0a67 	vmov.f32	s0, s15
 800b5d0:	4610      	mov	r0, r2
 800b5d2:	f000 fc2d 	bl	800be30 <lpfOperator>
 800b5d6:	eef0 7a40 	vmov.f32	s15, s0
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
        motor->Id = lpfOperator(&motor->IdFilter, motor->Id);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800b5ec:	eeb0 0a67 	vmov.f32	s0, s15
 800b5f0:	4610      	mov	r0, r2
 800b5f2:	f000 fc1d 	bl	800be30 <lpfOperator>
 800b5f6:	eef0 7a40 	vmov.f32	s15, s0
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
        encoderUpdate(&motor->magEncoder);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	4618      	mov	r0, r3
 800b604:	f000 fb7a 	bl	800bcfc <encoderUpdate>
        motor->magEncoder.velocity = lpfOperator(&motor->velocityFilter, motor->magEncoder.velocity);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f503 7286 	add.w	r2, r3, #268	@ 0x10c
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	edd3 7a06 	vldr	s15, [r3, #24]
 800b614:	eeb0 0a67 	vmov.f32	s0, s15
 800b618:	4610      	mov	r0, r2
 800b61a:	f000 fc09 	bl	800be30 <lpfOperator>
 800b61e:	eef0 7a40 	vmov.f32	s15, s0
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	edc3 7a06 	vstr	s15, [r3, #24]
        getElecAngle(motor);
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f7ff ff7f 	bl	800b52c <getElecAngle>
        if (motor->state == MOTOR_READY)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b634:	2b01      	cmp	r3, #1
 800b636:	f000 814d 	beq.w	800b8d4 <foc+0x364>
        else if (motor->state == MOTOR_START)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b640:	2b02      	cmp	r3, #2
 800b642:	f040 8147 	bne.w	800b8d4 <foc+0x364>
            switch (motor->controlType)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800b64c:	2b03      	cmp	r3, #3
 800b64e:	f200 812f 	bhi.w	800b8b0 <foc+0x340>
 800b652:	a201      	add	r2, pc, #4	@ (adr r2, 800b658 <foc+0xe8>)
 800b654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b658:	0800b6c5 	.word	0x0800b6c5
 800b65c:	0800b669 	.word	0x0800b669
 800b660:	0800b72f 	.word	0x0800b72f
 800b664:	0800b7df 	.word	0x0800b7df
                motor->target = 23;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	4a9c      	ldr	r2, [pc, #624]	@ (800b8dc <foc+0x36c>)
 800b66c:	631a      	str	r2, [r3, #48]	@ 0x30
                shaftAngle = _normalizeAngle(shaftAngle + motor->target * motor->Ts);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b67a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b67e:	4b98      	ldr	r3, [pc, #608]	@ (800b8e0 <foc+0x370>)
 800b680:	edd3 7a00 	vldr	s15, [r3]
 800b684:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b688:	eeb0 0a67 	vmov.f32	s0, s15
 800b68c:	f000 fcd8 	bl	800c040 <_normalizeAngle>
 800b690:	eef0 7a40 	vmov.f32	s15, s0
 800b694:	4b92      	ldr	r3, [pc, #584]	@ (800b8e0 <foc+0x370>)
 800b696:	edc3 7a00 	vstr	s15, [r3]
                motor->angle_el = _electricalAngle(shaftAngle, motor->pole_pairs);
 800b69a:	4b91      	ldr	r3, [pc, #580]	@ (800b8e0 <foc+0x370>)
 800b69c:	edd3 7a00 	vldr	s15, [r3]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	eeb0 0a67 	vmov.f32	s0, s15
 800b6ac:	f000 fcfe 	bl	800c0ac <_electricalAngle>
 800b6b0:	eef0 7a40 	vmov.f32	s15, s0
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                motor->Uq = OPEN_LOOP_TORQUE;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	4a89      	ldr	r2, [pc, #548]	@ (800b8e4 <foc+0x374>)
 800b6be:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                break;
 800b6c2:	e0f5      	b.n	800b8b0 <foc+0x340>
                if (motor->torqueType == VOLTAGE)
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d105      	bne.n	800b6da <foc+0x16a>
                    motor->Uq = motor->target;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                break;
 800b6d8:	e0ea      	b.n	800b8b0 <foc+0x340>
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800b6e6:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b8e8 <foc+0x378>
 800b6ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6ee:	eeb0 0a67 	vmov.f32	s0, s15
 800b6f2:	4610      	mov	r0, r2
 800b6f4:	f000 fd24 	bl	800c140 <pidOperator>
 800b6f8:	eef0 7a40 	vmov.f32	s15, s0
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, motor->target - motor->Iq);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800b714:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b718:	eeb0 0a67 	vmov.f32	s0, s15
 800b71c:	4610      	mov	r0, r2
 800b71e:	f000 fd0f 	bl	800c140 <pidOperator>
 800b722:	eef0 7a40 	vmov.f32	s15, s0
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800b72c:	e0c0      	b.n	800b8b0 <foc+0x340>
                if (motor->torqueType == VOLTAGE)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b734:	2b00      	cmp	r3, #0
 800b736:	d116      	bne.n	800b766 <foc+0x1f6>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	edd3 7a06 	vldr	s15, [r3, #24]
 800b744:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b748:	edc7 7a04 	vstr	s15, [r7, #16]
                    motor->Uq = pidOperator(&motor->velocityPID, velocityErr);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	33ac      	adds	r3, #172	@ 0xac
 800b750:	ed97 0a04 	vldr	s0, [r7, #16]
 800b754:	4618      	mov	r0, r3
 800b756:	f000 fcf3 	bl	800c140 <pidOperator>
 800b75a:	eef0 7a40 	vmov.f32	s15, s0
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800b764:	e0a4      	b.n	800b8b0 <foc+0x340>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	edd3 7a06 	vldr	s15, [r3, #24]
 800b772:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b776:	edc7 7a04 	vstr	s15, [r7, #16]
                    IqRef = pidOperator(&motor->velocityPID, velocityErr);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	33ac      	adds	r3, #172	@ 0xac
 800b77e:	ed97 0a04 	vldr	s0, [r7, #16]
 800b782:	4618      	mov	r0, r3
 800b784:	f000 fcdc 	bl	800c140 <pidOperator>
 800b788:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800b798:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800b8e8 <foc+0x378>
 800b79c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7a0:	eeb0 0a67 	vmov.f32	s0, s15
 800b7a4:	4610      	mov	r0, r2
 800b7a6:	f000 fccb 	bl	800c140 <pidOperator>
 800b7aa:	eef0 7a40 	vmov.f32	s15, s0
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800b7c0:	ed97 7a05 	vldr	s14, [r7, #20]
 800b7c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7c8:	eeb0 0a67 	vmov.f32	s0, s15
 800b7cc:	4610      	mov	r0, r2
 800b7ce:	f000 fcb7 	bl	800c140 <pidOperator>
 800b7d2:	eef0 7a40 	vmov.f32	s15, s0
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800b7dc:	e068      	b.n	800b8b0 <foc+0x340>
                if (motor->torqueType == VOLTAGE)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d116      	bne.n	800b816 <foc+0x2a6>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	edd3 7a05 	vldr	s15, [r3, #20]
 800b7f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7f8:	edc7 7a07 	vstr	s15, [r7, #28]
                    motor->Uq = pidOperator(&motor->anglePID, angleErr);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	33d0      	adds	r3, #208	@ 0xd0
 800b800:	ed97 0a07 	vldr	s0, [r7, #28]
 800b804:	4618      	mov	r0, r3
 800b806:	f000 fc9b 	bl	800c140 <pidOperator>
 800b80a:	eef0 7a40 	vmov.f32	s15, s0
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800b814:	e04b      	b.n	800b8ae <foc+0x33e>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	edd3 7a05 	vldr	s15, [r3, #20]
 800b822:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b826:	edc7 7a07 	vstr	s15, [r7, #28]
                    velocityRef = pidOperator(&motor->anglePID, angleErr);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	33d0      	adds	r3, #208	@ 0xd0
 800b82e:	ed97 0a07 	vldr	s0, [r7, #28]
 800b832:	4618      	mov	r0, r3
 800b834:	f000 fc84 	bl	800c140 <pidOperator>
 800b838:	ed87 0a06 	vstr	s0, [r7, #24]
                    IqRef = pidOperator(&motor->velocityPID, velocityRef - motor->magEncoder.velocity);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	edd3 7a06 	vldr	s15, [r3, #24]
 800b848:	ed97 7a06 	vldr	s14, [r7, #24]
 800b84c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b850:	eeb0 0a67 	vmov.f32	s0, s15
 800b854:	4610      	mov	r0, r2
 800b856:	f000 fc73 	bl	800c140 <pidOperator>
 800b85a:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800b86a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800b8e8 <foc+0x378>
 800b86e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b872:	eeb0 0a67 	vmov.f32	s0, s15
 800b876:	4610      	mov	r0, r2
 800b878:	f000 fc62 	bl	800c140 <pidOperator>
 800b87c:	eef0 7a40 	vmov.f32	s15, s0
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800b892:	ed97 7a05 	vldr	s14, [r7, #20]
 800b896:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b89a:	eeb0 0a67 	vmov.f32	s0, s15
 800b89e:	4610      	mov	r0, r2
 800b8a0:	f000 fc4e 	bl	800c140 <pidOperator>
 800b8a4:	eef0 7a40 	vmov.f32	s15, s0
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800b8ae:	bf00      	nop
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800b8c2:	eeb0 1a66 	vmov.f32	s2, s13
 800b8c6:	eef0 0a47 	vmov.f32	s1, s14
 800b8ca:	eeb0 0a67 	vmov.f32	s0, s15
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f000 fd3e 	bl	800c350 <setTorque>
}
 800b8d4:	bf00      	nop
 800b8d6:	3720      	adds	r7, #32
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	41b80000 	.word	0x41b80000
 800b8e0:	200008b0 	.word	0x200008b0
 800b8e4:	4013cd3a 	.word	0x4013cd3a
	...

0800b8f0 <getCurrentOffsets>:
#include "math_utils.h"
#include "focLib.h"

// Function finding zero offsets of the ADC
void getCurrentOffsets(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b, uint32_t rounds)
{
 800b8f0:	b5b0      	push	{r4, r5, r7, lr}
 800b8f2:	b086      	sub	sp, #24
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
 800b8fc:	603b      	str	r3, [r7, #0]
    // find adc offset = zero current voltage
    motor->offset_ia = 0;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f04f 0200 	mov.w	r2, #0
 800b904:	641a      	str	r2, [r3, #64]	@ 0x40
    motor->offset_ib = 0;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f04f 0200 	mov.w	r2, #0
 800b90c:	645a      	str	r2, [r3, #68]	@ 0x44
    // read the adc voltage  times ( arbitrary number )
    for (int i = 0; i < rounds; i++)
 800b90e:	2300      	movs	r3, #0
 800b910:	617b      	str	r3, [r7, #20]
 800b912:	e076      	b.n	800ba02 <getCurrentOffsets+0x112>
    {
        motor->offset_ia += ADC_2_CURRENT(adc_a);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b918:	4618      	mov	r0, r3
 800b91a:	f7f4 fe3d 	bl	8000598 <__aeabi_f2d>
 800b91e:	4604      	mov	r4, r0
 800b920:	460d      	mov	r5, r1
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	ee07 3a90 	vmov	s15, r3
 800b928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b92c:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800ba80 <getCurrentOffsets+0x190>
 800b930:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b934:	ee17 0a90 	vmov	r0, s15
 800b938:	f7f4 fe2e 	bl	8000598 <__aeabi_f2d>
 800b93c:	a34c      	add	r3, pc, #304	@ (adr r3, 800ba70 <getCurrentOffsets+0x180>)
 800b93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b942:	f7f4 ffab 	bl	800089c <__aeabi_ddiv>
 800b946:	4602      	mov	r2, r0
 800b948:	460b      	mov	r3, r1
 800b94a:	4610      	mov	r0, r2
 800b94c:	4619      	mov	r1, r3
 800b94e:	a34a      	add	r3, pc, #296	@ (adr r3, 800ba78 <getCurrentOffsets+0x188>)
 800b950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b954:	f7f4 ffa2 	bl	800089c <__aeabi_ddiv>
 800b958:	4602      	mov	r2, r0
 800b95a:	460b      	mov	r3, r1
 800b95c:	4610      	mov	r0, r2
 800b95e:	4619      	mov	r1, r3
 800b960:	f04f 0200 	mov.w	r2, #0
 800b964:	4b47      	ldr	r3, [pc, #284]	@ (800ba84 <getCurrentOffsets+0x194>)
 800b966:	f7f4 ff99 	bl	800089c <__aeabi_ddiv>
 800b96a:	4602      	mov	r2, r0
 800b96c:	460b      	mov	r3, r1
 800b96e:	4620      	mov	r0, r4
 800b970:	4629      	mov	r1, r5
 800b972:	f7f4 fcb3 	bl	80002dc <__adddf3>
 800b976:	4602      	mov	r2, r0
 800b978:	460b      	mov	r3, r1
 800b97a:	4610      	mov	r0, r2
 800b97c:	4619      	mov	r1, r3
 800b97e:	f7f5 f95b 	bl	8000c38 <__aeabi_d2f>
 800b982:	4602      	mov	r2, r0
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	641a      	str	r2, [r3, #64]	@ 0x40
        motor->offset_ib += ADC_2_CURRENT(adc_b);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7f4 fe03 	bl	8000598 <__aeabi_f2d>
 800b992:	4604      	mov	r4, r0
 800b994:	460d      	mov	r5, r1
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	ee07 3a90 	vmov	s15, r3
 800b99c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9a0:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800ba80 <getCurrentOffsets+0x190>
 800b9a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9a8:	ee17 0a90 	vmov	r0, s15
 800b9ac:	f7f4 fdf4 	bl	8000598 <__aeabi_f2d>
 800b9b0:	a32f      	add	r3, pc, #188	@ (adr r3, 800ba70 <getCurrentOffsets+0x180>)
 800b9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b6:	f7f4 ff71 	bl	800089c <__aeabi_ddiv>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	460b      	mov	r3, r1
 800b9be:	4610      	mov	r0, r2
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	a32d      	add	r3, pc, #180	@ (adr r3, 800ba78 <getCurrentOffsets+0x188>)
 800b9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c8:	f7f4 ff68 	bl	800089c <__aeabi_ddiv>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	4610      	mov	r0, r2
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	f04f 0200 	mov.w	r2, #0
 800b9d8:	4b2a      	ldr	r3, [pc, #168]	@ (800ba84 <getCurrentOffsets+0x194>)
 800b9da:	f7f4 ff5f 	bl	800089c <__aeabi_ddiv>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	4629      	mov	r1, r5
 800b9e6:	f7f4 fc79 	bl	80002dc <__adddf3>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	4610      	mov	r0, r2
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	f7f5 f921 	bl	8000c38 <__aeabi_d2f>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	645a      	str	r2, [r3, #68]	@ 0x44
    for (int i = 0; i < rounds; i++)
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	617b      	str	r3, [r7, #20]
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	683a      	ldr	r2, [r7, #0]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d884      	bhi.n	800b914 <getCurrentOffsets+0x24>
    }
    // calculate the mean offsets
    motor->offset_ia = motor->offset_ia / rounds;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	ee07 3a90 	vmov	s15, r3
 800ba16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ba1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    motor->offset_ib = motor->offset_ib / rounds;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	ee07 3a90 	vmov	s15, r3
 800ba30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ba34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    // printLog("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    // printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    printLog("[offset_ia]:%f\r\n", motor->offset_ia);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7f4 fda8 	bl	8000598 <__aeabi_f2d>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	480e      	ldr	r0, [pc, #56]	@ (800ba88 <getCurrentOffsets+0x198>)
 800ba4e:	f001 fac5 	bl	800cfdc <printLog>
    printLog("[offset_ib]:%f\r\n", motor->offset_ib);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7f4 fd9e 	bl	8000598 <__aeabi_f2d>
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	460b      	mov	r3, r1
 800ba60:	480a      	ldr	r0, [pc, #40]	@ (800ba8c <getCurrentOffsets+0x19c>)
 800ba62:	f001 fabb 	bl	800cfdc <printLog>
    // _dbg_printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
}
 800ba66:	bf00      	nop
 800ba68:	3718      	adds	r7, #24
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bdb0      	pop	{r4, r5, r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	00000000 	.word	0x00000000
 800ba74:	40affe00 	.word	0x40affe00
 800ba78:	40000000 	.word	0x40000000
 800ba7c:	3f847ae1 	.word	0x3f847ae1
 800ba80:	40533333 	.word	0x40533333
 800ba84:	40240000 	.word	0x40240000
 800ba88:	0801448c 	.word	0x0801448c
 800ba8c:	080144a0 	.word	0x080144a0

0800ba90 <getPhaseCurrents>:

// read all three phase currents (if possible 2 or 3)
void getPhaseCurrents(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800ba90:	b5b0      	push	{r4, r5, r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
    motor->Ia = ADC_2_CURRENT(adc_a) - motor->offset_ia; // amps
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	ee07 3a90 	vmov	s15, r3
 800baa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baa6:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800bbc8 <getPhaseCurrents+0x138>
 800baaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800baae:	ee17 0a90 	vmov	r0, s15
 800bab2:	f7f4 fd71 	bl	8000598 <__aeabi_f2d>
 800bab6:	a340      	add	r3, pc, #256	@ (adr r3, 800bbb8 <getPhaseCurrents+0x128>)
 800bab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babc:	f7f4 feee 	bl	800089c <__aeabi_ddiv>
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	4610      	mov	r0, r2
 800bac6:	4619      	mov	r1, r3
 800bac8:	a33d      	add	r3, pc, #244	@ (adr r3, 800bbc0 <getPhaseCurrents+0x130>)
 800baca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bace:	f7f4 fee5 	bl	800089c <__aeabi_ddiv>
 800bad2:	4602      	mov	r2, r0
 800bad4:	460b      	mov	r3, r1
 800bad6:	4610      	mov	r0, r2
 800bad8:	4619      	mov	r1, r3
 800bada:	f04f 0200 	mov.w	r2, #0
 800bade:	4b3b      	ldr	r3, [pc, #236]	@ (800bbcc <getPhaseCurrents+0x13c>)
 800bae0:	f7f4 fedc 	bl	800089c <__aeabi_ddiv>
 800bae4:	4602      	mov	r2, r0
 800bae6:	460b      	mov	r3, r1
 800bae8:	4614      	mov	r4, r2
 800baea:	461d      	mov	r5, r3
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7f4 fd51 	bl	8000598 <__aeabi_f2d>
 800baf6:	4602      	mov	r2, r0
 800baf8:	460b      	mov	r3, r1
 800bafa:	4620      	mov	r0, r4
 800bafc:	4629      	mov	r1, r5
 800bafe:	f7f4 fbeb 	bl	80002d8 <__aeabi_dsub>
 800bb02:	4602      	mov	r2, r0
 800bb04:	460b      	mov	r3, r1
 800bb06:	4610      	mov	r0, r2
 800bb08:	4619      	mov	r1, r3
 800bb0a:	f7f5 f895 	bl	8000c38 <__aeabi_d2f>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	649a      	str	r2, [r3, #72]	@ 0x48
    motor->Ic = ADC_2_CURRENT(adc_b) - motor->offset_ib;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	ee07 3a90 	vmov	s15, r3
 800bb1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb1e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800bbc8 <getPhaseCurrents+0x138>
 800bb22:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb26:	ee17 0a90 	vmov	r0, s15
 800bb2a:	f7f4 fd35 	bl	8000598 <__aeabi_f2d>
 800bb2e:	a322      	add	r3, pc, #136	@ (adr r3, 800bbb8 <getPhaseCurrents+0x128>)
 800bb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb34:	f7f4 feb2 	bl	800089c <__aeabi_ddiv>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	4610      	mov	r0, r2
 800bb3e:	4619      	mov	r1, r3
 800bb40:	a31f      	add	r3, pc, #124	@ (adr r3, 800bbc0 <getPhaseCurrents+0x130>)
 800bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb46:	f7f4 fea9 	bl	800089c <__aeabi_ddiv>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	4610      	mov	r0, r2
 800bb50:	4619      	mov	r1, r3
 800bb52:	f04f 0200 	mov.w	r2, #0
 800bb56:	4b1d      	ldr	r3, [pc, #116]	@ (800bbcc <getPhaseCurrents+0x13c>)
 800bb58:	f7f4 fea0 	bl	800089c <__aeabi_ddiv>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	460b      	mov	r3, r1
 800bb60:	4614      	mov	r4, r2
 800bb62:	461d      	mov	r5, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7f4 fd15 	bl	8000598 <__aeabi_f2d>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	460b      	mov	r3, r1
 800bb72:	4620      	mov	r0, r4
 800bb74:	4629      	mov	r1, r5
 800bb76:	f7f4 fbaf 	bl	80002d8 <__aeabi_dsub>
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	4610      	mov	r0, r2
 800bb80:	4619      	mov	r1, r3
 800bb82:	f7f5 f859 	bl	8000c38 <__aeabi_d2f>
 800bb86:	4602      	mov	r2, r0
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	651a      	str	r2, [r3, #80]	@ 0x50
    motor->Ib = 0 - motor->Ia - motor->Ic;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800bb92:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800bbd0 <getPhaseCurrents+0x140>
 800bb96:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800bba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
}
 800bbaa:	bf00      	nop
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bdb0      	pop	{r4, r5, r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	f3af 8000 	nop.w
 800bbb8:	00000000 	.word	0x00000000
 800bbbc:	40affe00 	.word	0x40affe00
 800bbc0:	40000000 	.word	0x40000000
 800bbc4:	3f847ae1 	.word	0x3f847ae1
 800bbc8:	40533333 	.word	0x40533333
 800bbcc:	40240000 	.word	0x40240000
 800bbd0:	00000000 	.word	0x00000000

0800bbd4 <getABCurrents>:
// Ibeta = 1/sqrt(3) * Ia + 1/sqrt(3) * 2Ib
/*============================================================================*/
//   calculating Alpha Beta currents from phase currents
//   - function calculating Clarke transform of the phase currents
void getABCurrents(BldcMotor *motor)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
    motor->Ialpha = motor->Ia;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	655a      	str	r2, [r3, #84]	@ 0x54
    motor->Ibeta = _1_SQRT3 * motor->Ia + _2_SQRT3 * motor->Ib;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800bbea:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800bc18 <getABCurrents+0x44>
 800bbee:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800bbf8:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800bc1c <getABCurrents+0x48>
 800bbfc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
}
 800bc0a:	bf00      	nop
 800bc0c:	370c      	adds	r7, #12
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	3f13cd3a 	.word	0x3f13cd3a
 800bc1c:	3f93cd3a 	.word	0x3f93cd3a

0800bc20 <getDQCurrents>:
/*============================================================================*/
// function used with the foc algorihtm
//   calculating D and Q currents from Alpha Beta currents and electrical angle
//   - function calculating Clarke transform of the phase currents
void getDQCurrents(BldcMotor *motor)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
    float ct;
    float st;
    _sincos(motor->angle_el, &st, &ct);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800bc2e:	f107 020c 	add.w	r2, r7, #12
 800bc32:	f107 0308 	add.w	r3, r7, #8
 800bc36:	4611      	mov	r1, r2
 800bc38:	4618      	mov	r0, r3
 800bc3a:	eeb0 0a67 	vmov.f32	s0, s15
 800bc3e:	f000 f9df 	bl	800c000 <_sincos>
    motor->Id = motor->Ialpha * ct + motor->Ibeta * st;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800bc48:	edd7 7a03 	vldr	s15, [r7, #12]
 800bc4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800bc56:	edd7 7a02 	vldr	s15, [r7, #8]
 800bc5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
    motor->Iq = motor->Ibeta * ct - motor->Ialpha * st;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 800bc6e:	edd7 7a03 	vldr	s15, [r7, #12]
 800bc72:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800bc7c:	edd7 7a02 	vldr	s15, [r7, #8]
 800bc80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
 800bc8e:	bf00      	nop
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <encoderInit>:

#include "encoder.h"
#include "math_utils.h"
#include "focLib.h"
void encoderInit(MagEncoder *encoder, float _Ts, float (*_getRawAngle)(void), Direction _direction)
{
 800bc96:	b480      	push	{r7}
 800bc98:	b085      	sub	sp, #20
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	60f8      	str	r0, [r7, #12]
 800bc9e:	ed87 0a02 	vstr	s0, [r7, #8]
 800bca2:	6079      	str	r1, [r7, #4]
 800bca4:	4613      	mov	r3, r2
 800bca6:	70fb      	strb	r3, [r7, #3]
    encoder->angle_prev = 0;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f04f 0200 	mov.w	r2, #0
 800bcae:	601a      	str	r2, [r3, #0]
    encoder->vel_angle_prev = 0;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f04f 0200 	mov.w	r2, #0
 800bcb6:	605a      	str	r2, [r3, #4]
    encoder->full_rotations = 0;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	609a      	str	r2, [r3, #8]
    encoder->vel_full_rotations = 0;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	60da      	str	r2, [r3, #12]
    encoder->shaftAngle = 0;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f04f 0200 	mov.w	r2, #0
 800bcca:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = 0;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f04f 0200 	mov.w	r2, #0
 800bcd2:	615a      	str	r2, [r3, #20]
    encoder->velocity = 0;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f04f 0200 	mov.w	r2, #0
 800bcda:	619a      	str	r2, [r3, #24]
    encoder->Ts = _Ts;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	68ba      	ldr	r2, [r7, #8]
 800bce0:	61da      	str	r2, [r3, #28]
    encoder->getRawAngle = _getRawAngle;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	625a      	str	r2, [r3, #36]	@ 0x24
    encoder->direction = _direction;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	78fa      	ldrb	r2, [r7, #3]
 800bcec:	f883 2020 	strb.w	r2, [r3, #32]
}
 800bcf0:	bf00      	nop
 800bcf2:	3714      	adds	r7, #20
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <encoderUpdate>:

void encoderUpdate(MagEncoder *encoder)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
    float val = encoder->getRawAngle() * encoder->direction;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd08:	4798      	blx	r3
 800bd0a:	eeb0 7a40 	vmov.f32	s14, s0
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800bd14:	ee07 3a90 	vmov	s15, r3
 800bd18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd20:	edc7 7a03 	vstr	s15, [r7, #12]

    float d_angle = val - encoder->angle_prev;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	edd3 7a00 	vldr	s15, [r3]
 800bd2a:	ed97 7a03 	vldr	s14, [r7, #12]
 800bd2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd32:	edc7 7a02 	vstr	s15, [r7, #8]
    // 圈数检测
    if (fabsf(d_angle) > (0.8f * _2PI))
 800bd36:	edd7 7a02 	vldr	s15, [r7, #8]
 800bd3a:	eef0 7ae7 	vabs.f32	s15, s15
 800bd3e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800bdf8 <encoderUpdate+0xfc>
 800bd42:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd4a:	dd0f      	ble.n	800bd6c <encoderUpdate+0x70>
        encoder->full_rotations += (d_angle > 0) ? -1 : 1;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	edd7 7a02 	vldr	s15, [r7, #8]
 800bd54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bd58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd5c:	dd02      	ble.n	800bd64 <encoderUpdate+0x68>
 800bd5e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd62:	e000      	b.n	800bd66 <encoderUpdate+0x6a>
 800bd64:	2201      	movs	r2, #1
 800bd66:	441a      	add	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	609a      	str	r2, [r3, #8]

    // angle
    encoder->angle_prev = val;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	68fa      	ldr	r2, [r7, #12]
 800bd70:	601a      	str	r2, [r3, #0]
    encoder->shaftAngle = val;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = (float)encoder->full_rotations * _2PI + encoder->angle_prev;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	ee07 3a90 	vmov	s15, r3
 800bd80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd84:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800bdfc <encoderUpdate+0x100>
 800bd88:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	edd3 7a00 	vldr	s15, [r3]
 800bd92:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	edc3 7a05 	vstr	s15, [r3, #20]

    // 速度计算
    val = ((float)(encoder->full_rotations - encoder->vel_full_rotations) * _2PI + (encoder->angle_prev - encoder->vel_angle_prev)) / encoder->Ts;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	689a      	ldr	r2, [r3, #8]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	1ad3      	subs	r3, r2, r3
 800bda6:	ee07 3a90 	vmov	s15, r3
 800bdaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdae:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800bdfc <encoderUpdate+0x100>
 800bdb2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	edd3 6a00 	vldr	s13, [r3]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	edd3 7a01 	vldr	s15, [r3, #4]
 800bdc2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800bdc6:	ee77 6a27 	vadd.f32	s13, s14, s15
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	ed93 7a07 	vldr	s14, [r3, #28]
 800bdd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdd4:	edc7 7a03 	vstr	s15, [r7, #12]
    // 保存变量以待将来使用
    encoder->vel_angle_prev = encoder->angle_prev;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	605a      	str	r2, [r3, #4]
    encoder->vel_full_rotations = encoder->full_rotations;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	689a      	ldr	r2, [r3, #8]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	60da      	str	r2, [r3, #12]
    encoder->velocity = val;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	68fa      	ldr	r2, [r7, #12]
 800bdec:	619a      	str	r2, [r3, #24]
}
 800bdee:	bf00      	nop
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	40a0d97c 	.word	0x40a0d97c
 800bdfc:	40c90fdb 	.word	0x40c90fdb

0800be00 <lpfInit>:
#include "lowpass_filter.h"

void lpfInit(LowPassFilter *filter, const float _Tf, const float _dt)
{
 800be00:	b480      	push	{r7}
 800be02:	b085      	sub	sp, #20
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	ed87 0a02 	vstr	s0, [r7, #8]
 800be0c:	edc7 0a01 	vstr	s1, [r7, #4]
    filter->Tf = _Tf;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	68ba      	ldr	r2, [r7, #8]
 800be14:	601a      	str	r2, [r3, #0]
    filter->dt = _dt;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	605a      	str	r2, [r3, #4]
    filter->y_prev = 0;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f04f 0200 	mov.w	r2, #0
 800be22:	609a      	str	r2, [r3, #8]
}
 800be24:	bf00      	nop
 800be26:	3714      	adds	r7, #20
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr

0800be30 <lpfOperator>:

float lpfOperator(LowPassFilter *filter, float x)
{
 800be30:	b480      	push	{r7}
 800be32:	b085      	sub	sp, #20
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	ed87 0a00 	vstr	s0, [r7]

    float alpha = filter->Tf / (filter->Tf + filter->dt);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	edd3 6a00 	vldr	s13, [r3]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	ed93 7a00 	vldr	s14, [r3]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	edd3 7a01 	vldr	s15, [r3, #4]
 800be4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800be52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be56:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha * filter->y_prev + (1.0f - alpha) * x;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	ed93 7a02 	vldr	s14, [r3, #8]
 800be60:	edd7 7a03 	vldr	s15, [r7, #12]
 800be64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be6c:	edd7 7a03 	vldr	s15, [r7, #12]
 800be70:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800be74:	edd7 7a00 	vldr	s15, [r7]
 800be78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be80:	edc7 7a02 	vstr	s15, [r7, #8]
    filter->y_prev = y;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	68ba      	ldr	r2, [r7, #8]
 800be88:	609a      	str	r2, [r3, #8]

    return y;
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	ee07 3a90 	vmov	s15, r3
}
 800be90:	eeb0 0a67 	vmov.f32	s0, s15
 800be94:	3714      	adds	r7, #20
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
	...

0800bea0 <_sin>:
#include "focLib.h"
// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b086      	sub	sp, #24
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f7f4 fb74 	bl	8000598 <__aeabi_f2d>
 800beb0:	a339      	add	r3, pc, #228	@ (adr r3, 800bf98 <_sin+0xf8>)
 800beb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb6:	f7f4 fbc7 	bl	8000648 <__aeabi_dmul>
 800beba:	4602      	mov	r2, r0
 800bebc:	460b      	mov	r3, r1
 800bebe:	4610      	mov	r0, r2
 800bec0:	4619      	mov	r1, r3
 800bec2:	f7f4 fe99 	bl	8000bf8 <__aeabi_d2uiz>
 800bec6:	4603      	mov	r3, r0
 800bec8:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	b2db      	uxtb	r3, r3
 800bece:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	0a1b      	lsrs	r3, r3, #8
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2b3f      	cmp	r3, #63	@ 0x3f
 800bedc:	d80b      	bhi.n	800bef6 <_sin+0x56>
  {
    t1 = sine_array[i];
 800bede:	4a2c      	ldr	r2, [pc, #176]	@ (800bf90 <_sin+0xf0>)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bee6:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	3301      	adds	r3, #1
 800beec:	4a28      	ldr	r2, [pc, #160]	@ (800bf90 <_sin+0xf0>)
 800beee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bef2:	613b      	str	r3, [r7, #16]
 800bef4:	e033      	b.n	800bf5e <_sin+0xbe>
  }
  else if (i < 128)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2b7f      	cmp	r3, #127	@ 0x7f
 800befa:	d80e      	bhi.n	800bf1a <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800bf02:	4a23      	ldr	r2, [pc, #140]	@ (800bf90 <_sin+0xf0>)
 800bf04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf08:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800bf10:	4a1f      	ldr	r2, [pc, #124]	@ (800bf90 <_sin+0xf0>)
 800bf12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf16:	613b      	str	r3, [r7, #16]
 800bf18:	e021      	b.n	800bf5e <_sin+0xbe>
  }
  else if (i < 192)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2bbf      	cmp	r3, #191	@ 0xbf
 800bf1e:	d80e      	bhi.n	800bf3e <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	3b80      	subs	r3, #128	@ 0x80
 800bf24:	4a1a      	ldr	r2, [pc, #104]	@ (800bf90 <_sin+0xf0>)
 800bf26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf2a:	425b      	negs	r3, r3
 800bf2c:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	3b7f      	subs	r3, #127	@ 0x7f
 800bf32:	4a17      	ldr	r2, [pc, #92]	@ (800bf90 <_sin+0xf0>)
 800bf34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf38:	425b      	negs	r3, r3
 800bf3a:	613b      	str	r3, [r7, #16]
 800bf3c:	e00f      	b.n	800bf5e <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800bf44:	4a12      	ldr	r2, [pc, #72]	@ (800bf90 <_sin+0xf0>)
 800bf46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf4a:	425b      	negs	r3, r3
 800bf4c:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800bf54:	4a0e      	ldr	r2, [pc, #56]	@ (800bf90 <_sin+0xf0>)
 800bf56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf5a:	425b      	negs	r3, r3
 800bf5c:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800bf5e:	693a      	ldr	r2, [r7, #16]
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	1ad3      	subs	r3, r2, r3
 800bf64:	68ba      	ldr	r2, [r7, #8]
 800bf66:	fb02 f303 	mul.w	r3, r2, r3
 800bf6a:	121a      	asrs	r2, r3, #8
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	4413      	add	r3, r2
 800bf70:	ee07 3a90 	vmov	s15, r3
 800bf74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf78:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800bf94 <_sin+0xf4>
 800bf7c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800bf80:	eeb0 0a67 	vmov.f32	s0, s15
 800bf84:	3718      	adds	r7, #24
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	f3af 8000 	nop.w
 800bf90:	2000000c 	.word	0x2000000c
 800bf94:	38000000 	.word	0x38000000
 800bf98:	6446f9b4 	.word	0x6446f9b4
 800bf9c:	40c45f30 	.word	0x40c45f30

0800bfa0 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800bfaa:	edd7 7a01 	vldr	s15, [r7, #4]
 800bfae:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800bff8 <_cos+0x58>
 800bfb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bfb6:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800bfba:	edd7 7a03 	vldr	s15, [r7, #12]
 800bfbe:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800bffc <_cos+0x5c>
 800bfc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bfc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfca:	dd06      	ble.n	800bfda <_cos+0x3a>
 800bfcc:	edd7 7a03 	vldr	s15, [r7, #12]
 800bfd0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800bffc <_cos+0x5c>
 800bfd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bfd8:	e001      	b.n	800bfde <_cos+0x3e>
 800bfda:	edd7 7a03 	vldr	s15, [r7, #12]
 800bfde:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800bfe2:	ed97 0a03 	vldr	s0, [r7, #12]
 800bfe6:	f7ff ff5b 	bl	800bea0 <_sin>
 800bfea:	eef0 7a40 	vmov.f32	s15, s0
}
 800bfee:	eeb0 0a67 	vmov.f32	s0, s15
 800bff2:	3710      	adds	r7, #16
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	3fc90fdb 	.word	0x3fc90fdb
 800bffc:	40c90fdb 	.word	0x40c90fdb

0800c000 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	ed87 0a03 	vstr	s0, [r7, #12]
 800c00a:	60b8      	str	r0, [r7, #8]
 800c00c:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800c00e:	ed97 0a03 	vldr	s0, [r7, #12]
 800c012:	f7ff ff45 	bl	800bea0 <_sin>
 800c016:	eef0 7a40 	vmov.f32	s15, s0
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800c020:	ed97 0a03 	vldr	s0, [r7, #12]
 800c024:	f7ff ffbc 	bl	800bfa0 <_cos>
 800c028:	eef0 7a40 	vmov.f32	s15, s0
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	edc3 7a00 	vstr	s15, [r3]
}
 800c032:	bf00      	nop
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	0000      	movs	r0, r0
 800c03c:	0000      	movs	r0, r0
	...

0800c040 <_normalizeAngle>:
  return r;
}

// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f7f4 faa4 	bl	8000598 <__aeabi_f2d>
 800c050:	4602      	mov	r2, r0
 800c052:	460b      	mov	r3, r1
 800c054:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 800c0a0 <_normalizeAngle+0x60>
 800c058:	ec43 2b10 	vmov	d0, r2, r3
 800c05c:	f007 faf8 	bl	8013650 <fmod>
 800c060:	ec53 2b10 	vmov	r2, r3, d0
 800c064:	4610      	mov	r0, r2
 800c066:	4619      	mov	r1, r3
 800c068:	f7f4 fde6 	bl	8000c38 <__aeabi_d2f>
 800c06c:	4603      	mov	r3, r0
 800c06e:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 800c070:	edd7 7a03 	vldr	s15, [r7, #12]
 800c074:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c07c:	db02      	blt.n	800c084 <_normalizeAngle+0x44>
 800c07e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c082:	e005      	b.n	800c090 <_normalizeAngle+0x50>
 800c084:	edd7 7a03 	vldr	s15, [r7, #12]
 800c088:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800c0a8 <_normalizeAngle+0x68>
 800c08c:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800c090:	eeb0 0a67 	vmov.f32	s0, s15
 800c094:	3710      	adds	r7, #16
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	f3af 8000 	nop.w
 800c0a0:	60000000 	.word	0x60000000
 800c0a4:	401921fb 	.word	0x401921fb
 800c0a8:	40c90fdb 	.word	0x40c90fdb

0800c0ac <_electricalAngle>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	ed87 0a01 	vstr	s0, [r7, #4]
 800c0b6:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	ee07 3a90 	vmov	s15, r3
 800c0be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c0c2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800c0ca:	eeb0 0a67 	vmov.f32	s0, s15
 800c0ce:	370c      	adds	r7, #12
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr

0800c0d8 <pidInit>:
#include "pid.h"
#include "math_utils.h"

void pidInit(PidController *pidController, float _P, float _I, float _D, float _ramp, float _limit, float _Ts)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b089      	sub	sp, #36	@ 0x24
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	61f8      	str	r0, [r7, #28]
 800c0e0:	ed87 0a06 	vstr	s0, [r7, #24]
 800c0e4:	edc7 0a05 	vstr	s1, [r7, #20]
 800c0e8:	ed87 1a04 	vstr	s2, [r7, #16]
 800c0ec:	edc7 1a03 	vstr	s3, [r7, #12]
 800c0f0:	ed87 2a02 	vstr	s4, [r7, #8]
 800c0f4:	edc7 2a01 	vstr	s5, [r7, #4]
    pidController->P = _P;
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	69ba      	ldr	r2, [r7, #24]
 800c0fc:	601a      	str	r2, [r3, #0]
    pidController->I = _I;
 800c0fe:	69fb      	ldr	r3, [r7, #28]
 800c100:	697a      	ldr	r2, [r7, #20]
 800c102:	605a      	str	r2, [r3, #4]
    pidController->D = _D;
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	693a      	ldr	r2, [r7, #16]
 800c108:	609a      	str	r2, [r3, #8]
    pidController->output_ramp = _ramp;
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	60da      	str	r2, [r3, #12]
    pidController->limit = _limit;
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	611a      	str	r2, [r3, #16]
    pidController->Ts = _Ts;
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	621a      	str	r2, [r3, #32]
    pidController->error_prev = 0;
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	f04f 0200 	mov.w	r2, #0
 800c122:	615a      	str	r2, [r3, #20]
    pidController->output_prev = 0;
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	f04f 0200 	mov.w	r2, #0
 800c12a:	619a      	str	r2, [r3, #24]
    pidController->integral_prev = 0;
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	f04f 0200 	mov.w	r2, #0
 800c132:	61da      	str	r2, [r3, #28]
}
 800c134:	bf00      	nop
 800c136:	3724      	adds	r7, #36	@ 0x24
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <pidOperator>:

// PID controller function
float pidOperator(PidController *pidController, float error)
{
 800c140:	b480      	push	{r7}
 800c142:	b08b      	sub	sp, #44	@ 0x2c
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	ed87 0a00 	vstr	s0, [r7]
    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = pidController->P * error;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	edd3 7a00 	vldr	s15, [r3]
 800c152:	ed97 7a00 	vldr	s14, [r7]
 800c156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c15a:	edc7 7a08 	vstr	s15, [r7, #32]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float a = 0.5f * (error + pidController->error_prev);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	ed93 7a05 	vldr	s14, [r3, #20]
 800c164:	edd7 7a00 	vldr	s15, [r7]
 800c168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c16c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c170:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c174:	edc7 7a07 	vstr	s15, [r7, #28]
    float b = pidController->I * pidController->Ts;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	ed93 7a01 	vldr	s14, [r3, #4]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	edd3 7a08 	vldr	s15, [r3, #32]
 800c184:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c188:	edc7 7a06 	vstr	s15, [r7, #24]
    float integral = pidController->integral_prev + pidController->I * pidController->Ts * 0.5f * (error + pidController->error_prev);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	ed93 7a07 	vldr	s14, [r3, #28]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	edd3 6a01 	vldr	s13, [r3, #4]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	edd3 7a08 	vldr	s15, [r3, #32]
 800c19e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1a2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800c1a6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	ed93 6a05 	vldr	s12, [r3, #20]
 800c1b0:	edd7 7a00 	vldr	s15, [r7]
 800c1b4:	ee76 7a27 	vadd.f32	s15, s12, s15
 800c1b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1c0:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -pidController->limit, pidController->limit);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	edd3 7a04 	vldr	s15, [r3, #16]
 800c1ca:	eef1 7a67 	vneg.f32	s15, s15
 800c1ce:	ed97 7a05 	vldr	s14, [r7, #20]
 800c1d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1da:	d505      	bpl.n	800c1e8 <pidOperator+0xa8>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	edd3 7a04 	vldr	s15, [r3, #16]
 800c1e2:	eef1 7a67 	vneg.f32	s15, s15
 800c1e6:	e00f      	b.n	800c208 <pidOperator+0xc8>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	edd3 7a04 	vldr	s15, [r3, #16]
 800c1ee:	ed97 7a05 	vldr	s14, [r7, #20]
 800c1f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1fa:	dd03      	ble.n	800c204 <pidOperator+0xc4>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	edd3 7a04 	vldr	s15, [r3, #16]
 800c202:	e001      	b.n	800c208 <pidOperator+0xc8>
 800c204:	edd7 7a05 	vldr	s15, [r7, #20]
 800c208:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = pidController->D * (error - pidController->error_prev) / pidController->Ts;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	ed93 7a02 	vldr	s14, [r3, #8]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	edd3 7a05 	vldr	s15, [r3, #20]
 800c218:	edd7 6a00 	vldr	s13, [r7]
 800c21c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c220:	ee67 6a27 	vmul.f32	s13, s14, s15
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	ed93 7a08 	vldr	s14, [r3, #32]
 800c22a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c22e:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 800c232:	ed97 7a08 	vldr	s14, [r7, #32]
 800c236:	edd7 7a05 	vldr	s15, [r7, #20]
 800c23a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c23e:	ed97 7a04 	vldr	s14, [r7, #16]
 800c242:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c246:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // antiwindup - limit the output variable
    output = _constrain(output, -pidController->limit, pidController->limit);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	edd3 7a04 	vldr	s15, [r3, #16]
 800c250:	eef1 7a67 	vneg.f32	s15, s15
 800c254:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c258:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c260:	d505      	bpl.n	800c26e <pidOperator+0x12e>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	edd3 7a04 	vldr	s15, [r3, #16]
 800c268:	eef1 7a67 	vneg.f32	s15, s15
 800c26c:	e00f      	b.n	800c28e <pidOperator+0x14e>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	edd3 7a04 	vldr	s15, [r3, #16]
 800c274:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c280:	dd03      	ble.n	800c28a <pidOperator+0x14a>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	edd3 7a04 	vldr	s15, [r3, #16]
 800c288:	e001      	b.n	800c28e <pidOperator+0x14e>
 800c28a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c28e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // if output ramp defined
    if (pidController->output_ramp > 0)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	edd3 7a03 	vldr	s15, [r3, #12]
 800c298:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a0:	dd42      	ble.n	800c328 <pidOperator+0x1e8>
    {
        // limit the acceleration by ramping the output
        float output_rate = (output - pidController->output_prev) / pidController->Ts;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	edd3 7a06 	vldr	s15, [r3, #24]
 800c2a8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c2ac:	ee77 6a67 	vsub.f32	s13, s14, s15
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	ed93 7a08 	vldr	s14, [r3, #32]
 800c2b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2ba:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > pidController->output_ramp)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	edd3 7a03 	vldr	s15, [r3, #12]
 800c2c4:	ed97 7a03 	vldr	s14, [r7, #12]
 800c2c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2d0:	dd0f      	ble.n	800c2f2 <pidOperator+0x1b2>
            output = pidController->output_prev + pidController->output_ramp * pidController->Ts;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	ed93 7a06 	vldr	s14, [r3, #24]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	edd3 6a03 	vldr	s13, [r3, #12]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	edd3 7a08 	vldr	s15, [r3, #32]
 800c2e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800c2f0:	e01a      	b.n	800c328 <pidOperator+0x1e8>
        else if (output_rate < -pidController->output_ramp)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	edd3 7a03 	vldr	s15, [r3, #12]
 800c2f8:	eef1 7a67 	vneg.f32	s15, s15
 800c2fc:	ed97 7a03 	vldr	s14, [r7, #12]
 800c300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c308:	d50e      	bpl.n	800c328 <pidOperator+0x1e8>
            output = pidController->output_prev - pidController->output_ramp * pidController->Ts;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	ed93 7a06 	vldr	s14, [r3, #24]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	edd3 6a03 	vldr	s13, [r3, #12]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	edd3 7a08 	vldr	s15, [r3, #32]
 800c31c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c320:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c324:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    // saving for the next pass
    pidController->integral_prev = integral;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	697a      	ldr	r2, [r7, #20]
 800c32c:	61da      	str	r2, [r3, #28]
    pidController->output_prev = output;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c332:	619a      	str	r2, [r3, #24]
    pidController->error_prev = error;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	615a      	str	r2, [r3, #20]
    return output;
 800c33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33c:	ee07 3a90 	vmov	s15, r3
}
 800c340:	eeb0 0a67 	vmov.f32	s0, s15
 800c344:	372c      	adds	r7, #44	@ 0x2c
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr
	...

0800c350 <setTorque>:
    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
}
#elif 1

void setTorque(BldcMotor *motor, float Uq, float Ud, float angle_el)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b08e      	sub	sp, #56	@ 0x38
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	ed87 0a02 	vstr	s0, [r7, #8]
 800c35c:	edc7 0a01 	vstr	s1, [r7, #4]
 800c360:	ed87 1a00 	vstr	s2, [r7]
    float Ualpha, Ubeta;
    float Ua, Ub, Uc;

    // Sinusoidal PWM modulation
    // Inverse Park + Clarke transformation
    _sincos(angle_el, &_sa, &_ca);
 800c364:	f107 0214 	add.w	r2, r7, #20
 800c368:	f107 0310 	add.w	r3, r7, #16
 800c36c:	4611      	mov	r1, r2
 800c36e:	4618      	mov	r0, r3
 800c370:	ed97 0a00 	vldr	s0, [r7]
 800c374:	f7ff fe44 	bl	800c000 <_sincos>

    // Inverse park transform
    Ualpha = _ca * Ud - _sa * Uq; // -sin(angle) * Uq;
 800c378:	ed97 7a05 	vldr	s14, [r7, #20]
 800c37c:	edd7 7a01 	vldr	s15, [r7, #4]
 800c380:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c384:	edd7 6a04 	vldr	s13, [r7, #16]
 800c388:	edd7 7a02 	vldr	s15, [r7, #8]
 800c38c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c390:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c394:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Ubeta = _sa * Ud + _ca * Uq;  //  cos(angle) * Uq;
 800c398:	ed97 7a04 	vldr	s14, [r7, #16]
 800c39c:	edd7 7a01 	vldr	s15, [r7, #4]
 800c3a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3a4:	edd7 6a05 	vldr	s13, [r7, #20]
 800c3a8:	edd7 7a02 	vldr	s15, [r7, #8]
 800c3ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c3b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3b4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Clarke transform
    Ua = Ualpha;
 800c3b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Ub = -0.5f * Ualpha + _SQRT3_2 * Ubeta;
 800c3bc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800c3c0:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800c3c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c3c8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c3cc:	eddf 6a95 	vldr	s13, [pc, #596]	@ 800c624 <setTorque+0x2d4>
 800c3d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c3d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3d8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc = -0.5f * Ualpha - _SQRT3_2 * Ubeta;
 800c3dc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800c3e0:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800c3e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c3e8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c3ec:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 800c624 <setTorque+0x2d4>
 800c3f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c3f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3f8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    center = U_DC / 2;
 800c3fc:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 800c400:	623b      	str	r3, [r7, #32]

    // discussed here: https://community.simplefoc.com/t/embedded-world-2023-stm32-cordic-co-processor/3107/165?u=candas1
    // a bit more info here: https://microchipdeveloper.com/mct5001:which-zsm-is-best
    // Midpoint Clamp
    float Umin = min(Ua, min(Ub, Uc));
 800c402:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c406:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c40a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c412:	d502      	bpl.n	800c41a <setTorque+0xca>
 800c414:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800c418:	e001      	b.n	800c41e <setTorque+0xce>
 800c41a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c41e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800c422:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c42a:	dd01      	ble.n	800c430 <setTorque+0xe0>
 800c42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c42e:	e00b      	b.n	800c448 <setTorque+0xf8>
 800c430:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c434:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c438:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c440:	d501      	bpl.n	800c446 <setTorque+0xf6>
 800c442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c444:	e000      	b.n	800c448 <setTorque+0xf8>
 800c446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c448:	61fb      	str	r3, [r7, #28]
    float Umax = max(Ua, max(Ub, Uc));
 800c44a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c44e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c45a:	dd02      	ble.n	800c462 <setTorque+0x112>
 800c45c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800c460:	e001      	b.n	800c466 <setTorque+0x116>
 800c462:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c466:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800c46a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c472:	d501      	bpl.n	800c478 <setTorque+0x128>
 800c474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c476:	e00b      	b.n	800c490 <setTorque+0x140>
 800c478:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c47c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c480:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c488:	dd01      	ble.n	800c48e <setTorque+0x13e>
 800c48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c48c:	e000      	b.n	800c490 <setTorque+0x140>
 800c48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c490:	61bb      	str	r3, [r7, #24]
    center -= (Umax + Umin) / 2;
 800c492:	ed97 7a06 	vldr	s14, [r7, #24]
 800c496:	edd7 7a07 	vldr	s15, [r7, #28]
 800c49a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c49e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800c4a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c4a6:	ed97 7a08 	vldr	s14, [r7, #32]
 800c4aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4ae:	edc7 7a08 	vstr	s15, [r7, #32]

    Ua += center;
 800c4b2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800c4b6:	edd7 7a08 	vldr	s15, [r7, #32]
 800c4ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4be:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    Ub += center;
 800c4c2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c4c6:	edd7 7a08 	vldr	s15, [r7, #32]
 800c4ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4ce:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc += center;
 800c4d2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c4d6:	edd7 7a08 	vldr	s15, [r7, #32]
 800c4da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4de:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    motor->Ta = _constrain(Ua / U_DC, 0.0f, 1.0f);
 800c4e2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800c4e6:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c4ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c4ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4f6:	d502      	bpl.n	800c4fe <setTorque+0x1ae>
 800c4f8:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 800c628 <setTorque+0x2d8>
 800c4fc:	e015      	b.n	800c52a <setTorque+0x1da>
 800c4fe:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800c502:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c506:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c50a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c50e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c516:	dd02      	ble.n	800c51e <setTorque+0x1ce>
 800c518:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c51c:	e005      	b.n	800c52a <setTorque+0x1da>
 800c51e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800c522:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c526:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
    motor->Tb = _constrain(Ub / U_DC, 0.0f, 1.0f);
 800c530:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c534:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c538:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c53c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c544:	d502      	bpl.n	800c54c <setTorque+0x1fc>
 800c546:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800c628 <setTorque+0x2d8>
 800c54a:	e015      	b.n	800c578 <setTorque+0x228>
 800c54c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c550:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c558:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c55c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c564:	dd02      	ble.n	800c56c <setTorque+0x21c>
 800c566:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c56a:	e005      	b.n	800c578 <setTorque+0x228>
 800c56c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c570:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c574:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
    motor->Tc = _constrain(Uc / U_DC, 0.0f, 1.0f);
 800c57e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c582:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c586:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c58a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c592:	d502      	bpl.n	800c59a <setTorque+0x24a>
 800c594:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800c628 <setTorque+0x2d8>
 800c598:	e015      	b.n	800c5c6 <setTorque+0x276>
 800c59a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c59e:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c5a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c5a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c5aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b2:	dd02      	ble.n	800c5ba <setTorque+0x26a>
 800c5b4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c5b8:	e005      	b.n	800c5c6 <setTorque+0x276>
 800c5ba:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c5be:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c5c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	edc3 7a4c 	vstr	s15, [r3, #304]	@ 0x130

    motor->updatePwm(HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tc);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800c5d2:	68fa      	ldr	r2, [r7, #12]
 800c5d4:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 800c5d8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800c62c <setTorque+0x2dc>
 800c5dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5e4:	ee17 2a90 	vmov	r2, s15
 800c5e8:	b290      	uxth	r0, r2
 800c5ea:	68fa      	ldr	r2, [r7, #12]
 800c5ec:	edd2 7a4a 	vldr	s15, [r2, #296]	@ 0x128
 800c5f0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c62c <setTorque+0x2dc>
 800c5f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5fc:	ee17 2a90 	vmov	r2, s15
 800c600:	b291      	uxth	r1, r2
 800c602:	68fa      	ldr	r2, [r7, #12]
 800c604:	edd2 7a4c 	vldr	s15, [r2, #304]	@ 0x130
 800c608:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800c62c <setTorque+0x2dc>
 800c60c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c614:	ee17 2a90 	vmov	r2, s15
 800c618:	b292      	uxth	r2, r2
 800c61a:	4798      	blx	r3
    // set the voltages in driver
    // driver->setPwm(Ua, Ub, Uc);
}
 800c61c:	bf00      	nop
 800c61e:	3738      	adds	r7, #56	@ 0x38
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	3f5db3d7 	.word	0x3f5db3d7
 800c628:	00000000 	.word	0x00000000
 800c62c:	45fa0000 	.word	0x45fa0000

0800c630 <motorInit>:
static void working(void);

// should be called before interruption enabled

static void motorInit()
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b08c      	sub	sp, #48	@ 0x30
 800c634:	af00      	add	r7, sp, #0
#if 1
    motor1.pole_pairs = 7;
 800c636:	4bc6      	ldr	r3, [pc, #792]	@ (800c950 <motorInit+0x320>)
 800c638:	2207      	movs	r2, #7
 800c63a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    motor1.updatePwm = updatePwm1;
 800c63e:	4bc4      	ldr	r3, [pc, #784]	@ (800c950 <motorInit+0x320>)
 800c640:	4ac4      	ldr	r2, [pc, #784]	@ (800c954 <motorInit+0x324>)
 800c642:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor1.startPwm = startPwm1;
 800c646:	4bc2      	ldr	r3, [pc, #776]	@ (800c950 <motorInit+0x320>)
 800c648:	4ac3      	ldr	r2, [pc, #780]	@ (800c958 <motorInit+0x328>)
 800c64a:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor1.stopPwm = stopPwm1;
 800c64e:	4bc0      	ldr	r3, [pc, #768]	@ (800c950 <motorInit+0x320>)
 800c650:	4ac2      	ldr	r2, [pc, #776]	@ (800c95c <motorInit+0x32c>)
 800c652:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    motor1.zeroElectricAngleOffSet = 0;
 800c656:	4bbe      	ldr	r3, [pc, #760]	@ (800c950 <motorInit+0x320>)
 800c658:	f04f 0200 	mov.w	r2, #0
 800c65c:	635a      	str	r2, [r3, #52]	@ 0x34
    motor1.Ts = 100 * 1e-6f;
 800c65e:	4bbc      	ldr	r3, [pc, #752]	@ (800c950 <motorInit+0x320>)
 800c660:	4abf      	ldr	r2, [pc, #764]	@ (800c960 <motorInit+0x330>)
 800c662:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor1.torqueType = VOLTAGE;
 800c664:	4bba      	ldr	r3, [pc, #744]	@ (800c950 <motorInit+0x320>)
 800c666:	2200      	movs	r2, #0
 800c668:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    motor1.controlType = VELOCITY_OPEN_LOOP;
 800c66c:	4bb8      	ldr	r3, [pc, #736]	@ (800c950 <motorInit+0x320>)
 800c66e:	2201      	movs	r2, #1
 800c670:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    motor1.state = MOTOR_CALIBRATE;
 800c674:	4bb6      	ldr	r3, [pc, #728]	@ (800c950 <motorInit+0x320>)
 800c676:	2200      	movs	r2, #0
 800c678:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor1.magEncoder, motor1.Ts, _1_MT6701_GetRawAngle, UNKNOWN);
 800c67c:	4bb4      	ldr	r3, [pc, #720]	@ (800c950 <motorInit+0x320>)
 800c67e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c682:	2201      	movs	r2, #1
 800c684:	49b7      	ldr	r1, [pc, #732]	@ (800c964 <motorInit+0x334>)
 800c686:	eeb0 0a67 	vmov.f32	s0, s15
 800c68a:	48b1      	ldr	r0, [pc, #708]	@ (800c950 <motorInit+0x320>)
 800c68c:	f7ff fb03 	bl	800bc96 <encoderInit>

    if (motor1.controlType == TORQUE && motor1.torqueType == CURRENT)
 800c690:	4baf      	ldr	r3, [pc, #700]	@ (800c950 <motorInit+0x320>)
 800c692:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c696:	2b00      	cmp	r3, #0
 800c698:	d11b      	bne.n	800c6d2 <motorInit+0xa2>
 800c69a:	4bad      	ldr	r3, [pc, #692]	@ (800c950 <motorInit+0x320>)
 800c69c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d116      	bne.n	800c6d2 <motorInit+0xa2>
    {
        float kp, ki;
        kp = 500.0f;
 800c6a4:	4bb0      	ldr	r3, [pc, #704]	@ (800c968 <motorInit+0x338>)
 800c6a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ki = 50.0f;
 800c6a8:	4bb0      	ldr	r3, [pc, #704]	@ (800c96c <motorInit+0x33c>)
 800c6aa:	62bb      	str	r3, [r7, #40]	@ 0x28
        pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800c6ac:	4ba8      	ldr	r3, [pc, #672]	@ (800c950 <motorInit+0x320>)
 800c6ae:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c6b2:	eef0 2a67 	vmov.f32	s5, s15
 800c6b6:	ed9f 2aae 	vldr	s4, [pc, #696]	@ 800c970 <motorInit+0x340>
 800c6ba:	eddf 1aae 	vldr	s3, [pc, #696]	@ 800c974 <motorInit+0x344>
 800c6be:	ed9f 1aad 	vldr	s2, [pc, #692]	@ 800c974 <motorInit+0x344>
 800c6c2:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 800c6c6:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800c6ca:	48ab      	ldr	r0, [pc, #684]	@ (800c978 <motorInit+0x348>)
 800c6cc:	f7ff fd04 	bl	800c0d8 <pidInit>
    {
 800c6d0:	e0c0      	b.n	800c854 <motorInit+0x224>
        // pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
    }
    else if (motor1.controlType == VELOCITY)
 800c6d2:	4b9f      	ldr	r3, [pc, #636]	@ (800c950 <motorInit+0x320>)
 800c6d4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	d152      	bne.n	800c782 <motorInit+0x152>
    {
        if (motor1.torqueType == CURRENT)
 800c6dc:	4b9c      	ldr	r3, [pc, #624]	@ (800c950 <motorInit+0x320>)
 800c6de:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	d13a      	bne.n	800c75c <motorInit+0x12c>
        {
            pidInit(&motor1.velocityPID, 0.02, 0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800c6e6:	4b9a      	ldr	r3, [pc, #616]	@ (800c950 <motorInit+0x320>)
 800c6e8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c6ec:	eef0 2a67 	vmov.f32	s5, s15
 800c6f0:	ed9f 2aa2 	vldr	s4, [pc, #648]	@ 800c97c <motorInit+0x34c>
 800c6f4:	eddf 1a9f 	vldr	s3, [pc, #636]	@ 800c974 <motorInit+0x344>
 800c6f8:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 800c974 <motorInit+0x344>
 800c6fc:	eddf 0aa0 	vldr	s1, [pc, #640]	@ 800c980 <motorInit+0x350>
 800c700:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 800c984 <motorInit+0x354>
 800c704:	48a0      	ldr	r0, [pc, #640]	@ (800c988 <motorInit+0x358>)
 800c706:	f7ff fce7 	bl	800c0d8 <pidInit>

            float kp, ki;
            kp = 500.0f;
 800c70a:	4b97      	ldr	r3, [pc, #604]	@ (800c968 <motorInit+0x338>)
 800c70c:	61fb      	str	r3, [r7, #28]
            ki = 50.0f;
 800c70e:	4b97      	ldr	r3, [pc, #604]	@ (800c96c <motorInit+0x33c>)
 800c710:	61bb      	str	r3, [r7, #24]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800c712:	4b8f      	ldr	r3, [pc, #572]	@ (800c950 <motorInit+0x320>)
 800c714:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c718:	eef0 2a67 	vmov.f32	s5, s15
 800c71c:	ed9f 2a94 	vldr	s4, [pc, #592]	@ 800c970 <motorInit+0x340>
 800c720:	eddf 1a94 	vldr	s3, [pc, #592]	@ 800c974 <motorInit+0x344>
 800c724:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 800c974 <motorInit+0x344>
 800c728:	edd7 0a06 	vldr	s1, [r7, #24]
 800c72c:	ed97 0a07 	vldr	s0, [r7, #28]
 800c730:	4891      	ldr	r0, [pc, #580]	@ (800c978 <motorInit+0x348>)
 800c732:	f7ff fcd1 	bl	800c0d8 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800c736:	4b86      	ldr	r3, [pc, #536]	@ (800c950 <motorInit+0x320>)
 800c738:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c73c:	eef0 2a67 	vmov.f32	s5, s15
 800c740:	ed9f 2a8b 	vldr	s4, [pc, #556]	@ 800c970 <motorInit+0x340>
 800c744:	eddf 1a8b 	vldr	s3, [pc, #556]	@ 800c974 <motorInit+0x344>
 800c748:	ed9f 1a8a 	vldr	s2, [pc, #552]	@ 800c974 <motorInit+0x344>
 800c74c:	edd7 0a06 	vldr	s1, [r7, #24]
 800c750:	ed97 0a07 	vldr	s0, [r7, #28]
 800c754:	488d      	ldr	r0, [pc, #564]	@ (800c98c <motorInit+0x35c>)
 800c756:	f7ff fcbf 	bl	800c0d8 <pidInit>
 800c75a:	e07b      	b.n	800c854 <motorInit+0x224>
        }
        else
        {
            pidInit(&motor1.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor1.Ts);
 800c75c:	4b7c      	ldr	r3, [pc, #496]	@ (800c950 <motorInit+0x320>)
 800c75e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c762:	eef0 2a67 	vmov.f32	s5, s15
 800c766:	ed9f 2a82 	vldr	s4, [pc, #520]	@ 800c970 <motorInit+0x340>
 800c76a:	eddf 1a82 	vldr	s3, [pc, #520]	@ 800c974 <motorInit+0x344>
 800c76e:	ed9f 1a81 	vldr	s2, [pc, #516]	@ 800c974 <motorInit+0x344>
 800c772:	eddf 0a87 	vldr	s1, [pc, #540]	@ 800c990 <motorInit+0x360>
 800c776:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 800c994 <motorInit+0x364>
 800c77a:	4883      	ldr	r0, [pc, #524]	@ (800c988 <motorInit+0x358>)
 800c77c:	f7ff fcac 	bl	800c0d8 <pidInit>
 800c780:	e068      	b.n	800c854 <motorInit+0x224>
        }
    }
    else if (motor1.controlType == ANGLE)
 800c782:	4b73      	ldr	r3, [pc, #460]	@ (800c950 <motorInit+0x320>)
 800c784:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c788:	2b03      	cmp	r3, #3
 800c78a:	d163      	bne.n	800c854 <motorInit+0x224>
    {
        if (motor1.torqueType == CURRENT)
 800c78c:	4b70      	ldr	r3, [pc, #448]	@ (800c950 <motorInit+0x320>)
 800c78e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c792:	2b01      	cmp	r3, #1
 800c794:	d14c      	bne.n	800c830 <motorInit+0x200>
        {
            pidInit(&motor1.anglePID, 2, 0, 0, 0, MAX_VELOCITY, motor1.Ts);
 800c796:	4b6e      	ldr	r3, [pc, #440]	@ (800c950 <motorInit+0x320>)
 800c798:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c79c:	eef0 2a67 	vmov.f32	s5, s15
 800c7a0:	ed9f 2a7d 	vldr	s4, [pc, #500]	@ 800c998 <motorInit+0x368>
 800c7a4:	eddf 1a73 	vldr	s3, [pc, #460]	@ 800c974 <motorInit+0x344>
 800c7a8:	ed9f 1a72 	vldr	s2, [pc, #456]	@ 800c974 <motorInit+0x344>
 800c7ac:	eddf 0a71 	vldr	s1, [pc, #452]	@ 800c974 <motorInit+0x344>
 800c7b0:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800c7b4:	4879      	ldr	r0, [pc, #484]	@ (800c99c <motorInit+0x36c>)
 800c7b6:	f7ff fc8f 	bl	800c0d8 <pidInit>

            pidInit(&motor1.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800c7ba:	4b65      	ldr	r3, [pc, #404]	@ (800c950 <motorInit+0x320>)
 800c7bc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c7c0:	eef0 2a67 	vmov.f32	s5, s15
 800c7c4:	ed9f 2a6d 	vldr	s4, [pc, #436]	@ 800c97c <motorInit+0x34c>
 800c7c8:	eddf 1a6a 	vldr	s3, [pc, #424]	@ 800c974 <motorInit+0x344>
 800c7cc:	ed9f 1a69 	vldr	s2, [pc, #420]	@ 800c974 <motorInit+0x344>
 800c7d0:	eddf 0a73 	vldr	s1, [pc, #460]	@ 800c9a0 <motorInit+0x370>
 800c7d4:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 800c9a4 <motorInit+0x374>
 800c7d8:	486b      	ldr	r0, [pc, #428]	@ (800c988 <motorInit+0x358>)
 800c7da:	f7ff fc7d 	bl	800c0d8 <pidInit>

            // pidInit(&motor1.anglePID, -0.001, -0.0001, 0, 0, CURRENT_MAX / 2, motor1.Ts);

            float kp, ki;
            kp = -200;
 800c7de:	4b72      	ldr	r3, [pc, #456]	@ (800c9a8 <motorInit+0x378>)
 800c7e0:	627b      	str	r3, [r7, #36]	@ 0x24
            ki = -20;
 800c7e2:	4b72      	ldr	r3, [pc, #456]	@ (800c9ac <motorInit+0x37c>)
 800c7e4:	623b      	str	r3, [r7, #32]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800c7e6:	4b5a      	ldr	r3, [pc, #360]	@ (800c950 <motorInit+0x320>)
 800c7e8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c7ec:	eef0 2a67 	vmov.f32	s5, s15
 800c7f0:	ed9f 2a5f 	vldr	s4, [pc, #380]	@ 800c970 <motorInit+0x340>
 800c7f4:	eddf 1a5f 	vldr	s3, [pc, #380]	@ 800c974 <motorInit+0x344>
 800c7f8:	ed9f 1a5e 	vldr	s2, [pc, #376]	@ 800c974 <motorInit+0x344>
 800c7fc:	edd7 0a08 	vldr	s1, [r7, #32]
 800c800:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800c804:	485c      	ldr	r0, [pc, #368]	@ (800c978 <motorInit+0x348>)
 800c806:	f7ff fc67 	bl	800c0d8 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800c80a:	4b51      	ldr	r3, [pc, #324]	@ (800c950 <motorInit+0x320>)
 800c80c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c810:	eef0 2a67 	vmov.f32	s5, s15
 800c814:	ed9f 2a56 	vldr	s4, [pc, #344]	@ 800c970 <motorInit+0x340>
 800c818:	eddf 1a56 	vldr	s3, [pc, #344]	@ 800c974 <motorInit+0x344>
 800c81c:	ed9f 1a55 	vldr	s2, [pc, #340]	@ 800c974 <motorInit+0x344>
 800c820:	edd7 0a08 	vldr	s1, [r7, #32]
 800c824:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800c828:	4858      	ldr	r0, [pc, #352]	@ (800c98c <motorInit+0x35c>)
 800c82a:	f7ff fc55 	bl	800c0d8 <pidInit>
 800c82e:	e011      	b.n	800c854 <motorInit+0x224>
        }
        else
        {
            pidInit(&motor1.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor1.Ts);
 800c830:	4b47      	ldr	r3, [pc, #284]	@ (800c950 <motorInit+0x320>)
 800c832:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c836:	eef0 2a67 	vmov.f32	s5, s15
 800c83a:	ed9f 2a5d 	vldr	s4, [pc, #372]	@ 800c9b0 <motorInit+0x380>
 800c83e:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 800c974 <motorInit+0x344>
 800c842:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 800c974 <motorInit+0x344>
 800c846:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 800c9b4 <motorInit+0x384>
 800c84a:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 800c9b8 <motorInit+0x388>
 800c84e:	4853      	ldr	r0, [pc, #332]	@ (800c99c <motorInit+0x36c>)
 800c850:	f7ff fc42 	bl	800c0d8 <pidInit>
        }
    }

    lpfInit(&motor1.IqFilter, 0.05, motor1.Ts);
 800c854:	4b3e      	ldr	r3, [pc, #248]	@ (800c950 <motorInit+0x320>)
 800c856:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c85a:	eef0 0a67 	vmov.f32	s1, s15
 800c85e:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 800c990 <motorInit+0x360>
 800c862:	4856      	ldr	r0, [pc, #344]	@ (800c9bc <motorInit+0x38c>)
 800c864:	f7ff facc 	bl	800be00 <lpfInit>
    lpfInit(&motor1.IdFilter, 0.05, motor1.Ts);
 800c868:	4b39      	ldr	r3, [pc, #228]	@ (800c950 <motorInit+0x320>)
 800c86a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c86e:	eef0 0a67 	vmov.f32	s1, s15
 800c872:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 800c990 <motorInit+0x360>
 800c876:	4852      	ldr	r0, [pc, #328]	@ (800c9c0 <motorInit+0x390>)
 800c878:	f7ff fac2 	bl	800be00 <lpfInit>
    lpfInit(&motor1.velocityFilter, 0.01, motor1.Ts);
 800c87c:	4b34      	ldr	r3, [pc, #208]	@ (800c950 <motorInit+0x320>)
 800c87e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c882:	eef0 0a67 	vmov.f32	s1, s15
 800c886:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800c980 <motorInit+0x350>
 800c88a:	484e      	ldr	r0, [pc, #312]	@ (800c9c4 <motorInit+0x394>)
 800c88c:	f7ff fab8 	bl	800be00 <lpfInit>

#endif
    motor2.pole_pairs = 7;
 800c890:	4b4d      	ldr	r3, [pc, #308]	@ (800c9c8 <motorInit+0x398>)
 800c892:	2207      	movs	r2, #7
 800c894:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    motor2.updatePwm = updatePwm2;
 800c898:	4b4b      	ldr	r3, [pc, #300]	@ (800c9c8 <motorInit+0x398>)
 800c89a:	4a4c      	ldr	r2, [pc, #304]	@ (800c9cc <motorInit+0x39c>)
 800c89c:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor2.startPwm = startPwm2;
 800c8a0:	4b49      	ldr	r3, [pc, #292]	@ (800c9c8 <motorInit+0x398>)
 800c8a2:	4a4b      	ldr	r2, [pc, #300]	@ (800c9d0 <motorInit+0x3a0>)
 800c8a4:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor2.stopPwm = stopPwm2;
 800c8a8:	4b47      	ldr	r3, [pc, #284]	@ (800c9c8 <motorInit+0x398>)
 800c8aa:	4a4a      	ldr	r2, [pc, #296]	@ (800c9d4 <motorInit+0x3a4>)
 800c8ac:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    motor2.zeroElectricAngleOffSet = 0;
 800c8b0:	4b45      	ldr	r3, [pc, #276]	@ (800c9c8 <motorInit+0x398>)
 800c8b2:	f04f 0200 	mov.w	r2, #0
 800c8b6:	635a      	str	r2, [r3, #52]	@ 0x34
    motor2.Ts = 100 * 1e-6f;
 800c8b8:	4b43      	ldr	r3, [pc, #268]	@ (800c9c8 <motorInit+0x398>)
 800c8ba:	4a29      	ldr	r2, [pc, #164]	@ (800c960 <motorInit+0x330>)
 800c8bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor2.torqueType = VOLTAGE;
 800c8be:	4b42      	ldr	r3, [pc, #264]	@ (800c9c8 <motorInit+0x398>)
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    motor2.controlType = VELOCITY_OPEN_LOOP;
 800c8c6:	4b40      	ldr	r3, [pc, #256]	@ (800c9c8 <motorInit+0x398>)
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    motor2.state = MOTOR_CALIBRATE;
 800c8ce:	4b3e      	ldr	r3, [pc, #248]	@ (800c9c8 <motorInit+0x398>)
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor2.magEncoder, motor2.Ts, _2_MT6701_GetRawAngle, UNKNOWN);
 800c8d6:	4b3c      	ldr	r3, [pc, #240]	@ (800c9c8 <motorInit+0x398>)
 800c8d8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c8dc:	2201      	movs	r2, #1
 800c8de:	493e      	ldr	r1, [pc, #248]	@ (800c9d8 <motorInit+0x3a8>)
 800c8e0:	eeb0 0a67 	vmov.f32	s0, s15
 800c8e4:	4838      	ldr	r0, [pc, #224]	@ (800c9c8 <motorInit+0x398>)
 800c8e6:	f7ff f9d6 	bl	800bc96 <encoderInit>
    if (motor2.controlType == TORQUE && motor2.torqueType == CURRENT)
 800c8ea:	4b37      	ldr	r3, [pc, #220]	@ (800c9c8 <motorInit+0x398>)
 800c8ec:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d177      	bne.n	800c9e4 <motorInit+0x3b4>
 800c8f4:	4b34      	ldr	r3, [pc, #208]	@ (800c9c8 <motorInit+0x398>)
 800c8f6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d172      	bne.n	800c9e4 <motorInit+0x3b4>
    {
        float kp, ki;
        kp = -200;
 800c8fe:	4b2a      	ldr	r3, [pc, #168]	@ (800c9a8 <motorInit+0x378>)
 800c900:	617b      	str	r3, [r7, #20]
        ki = -20;
 800c902:	4b2a      	ldr	r3, [pc, #168]	@ (800c9ac <motorInit+0x37c>)
 800c904:	613b      	str	r3, [r7, #16]
        pidInit(&motor2.pidId, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800c906:	4b30      	ldr	r3, [pc, #192]	@ (800c9c8 <motorInit+0x398>)
 800c908:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c90c:	eef0 2a67 	vmov.f32	s5, s15
 800c910:	ed9f 2a17 	vldr	s4, [pc, #92]	@ 800c970 <motorInit+0x340>
 800c914:	eddf 1a17 	vldr	s3, [pc, #92]	@ 800c974 <motorInit+0x344>
 800c918:	ed9f 1a16 	vldr	s2, [pc, #88]	@ 800c974 <motorInit+0x344>
 800c91c:	edd7 0a04 	vldr	s1, [r7, #16]
 800c920:	ed97 0a05 	vldr	s0, [r7, #20]
 800c924:	482d      	ldr	r0, [pc, #180]	@ (800c9dc <motorInit+0x3ac>)
 800c926:	f7ff fbd7 	bl	800c0d8 <pidInit>
        pidInit(&motor2.pidIq, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800c92a:	4b27      	ldr	r3, [pc, #156]	@ (800c9c8 <motorInit+0x398>)
 800c92c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c930:	eef0 2a67 	vmov.f32	s5, s15
 800c934:	ed9f 2a0e 	vldr	s4, [pc, #56]	@ 800c970 <motorInit+0x340>
 800c938:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 800c974 <motorInit+0x344>
 800c93c:	ed9f 1a0d 	vldr	s2, [pc, #52]	@ 800c974 <motorInit+0x344>
 800c940:	edd7 0a04 	vldr	s1, [r7, #16]
 800c944:	ed97 0a05 	vldr	s0, [r7, #20]
 800c948:	4825      	ldr	r0, [pc, #148]	@ (800c9e0 <motorInit+0x3b0>)
 800c94a:	f7ff fbc5 	bl	800c0d8 <pidInit>
    {
 800c94e:	e10a      	b.n	800cb66 <motorInit+0x536>
 800c950:	200008d8 	.word	0x200008d8
 800c954:	0800ea5d 	.word	0x0800ea5d
 800c958:	0800ea15 	.word	0x0800ea15
 800c95c:	0800ea39 	.word	0x0800ea39
 800c960:	38d1b717 	.word	0x38d1b717
 800c964:	0800e909 	.word	0x0800e909
 800c968:	43fa0000 	.word	0x43fa0000
 800c96c:	42480000 	.word	0x42480000
 800c970:	4093cd3a 	.word	0x4093cd3a
 800c974:	00000000 	.word	0x00000000
 800c978:	2000093c 	.word	0x2000093c
 800c97c:	3e4ccccd 	.word	0x3e4ccccd
 800c980:	3c23d70a 	.word	0x3c23d70a
 800c984:	3ca3d70a 	.word	0x3ca3d70a
 800c988:	20000984 	.word	0x20000984
 800c98c:	20000960 	.word	0x20000960
 800c990:	3d4ccccd 	.word	0x3d4ccccd
 800c994:	3e19999a 	.word	0x3e19999a
 800c998:	43c80000 	.word	0x43c80000
 800c99c:	200009a8 	.word	0x200009a8
 800c9a0:	bc23d70a 	.word	0xbc23d70a
 800c9a4:	bca3d70a 	.word	0xbca3d70a
 800c9a8:	c3480000 	.word	0xc3480000
 800c9ac:	c1a00000 	.word	0xc1a00000
 800c9b0:	4013cd3a 	.word	0x4013cd3a
 800c9b4:	3a83126f 	.word	0x3a83126f
 800c9b8:	3e99999a 	.word	0x3e99999a
 800c9bc:	200009cc 	.word	0x200009cc
 800c9c0:	200009d8 	.word	0x200009d8
 800c9c4:	200009e4 	.word	0x200009e4
 800c9c8:	20000a18 	.word	0x20000a18
 800c9cc:	0800ead9 	.word	0x0800ead9
 800c9d0:	0800ea91 	.word	0x0800ea91
 800c9d4:	0800eab5 	.word	0x0800eab5
 800c9d8:	0800e9d9 	.word	0x0800e9d9
 800c9dc:	20000a7c 	.word	0x20000a7c
 800c9e0:	20000aa0 	.word	0x20000aa0
    }
    else if (motor2.controlType == VELOCITY)
 800c9e4:	4b71      	ldr	r3, [pc, #452]	@ (800cbac <motorInit+0x57c>)
 800c9e6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d152      	bne.n	800ca94 <motorInit+0x464>
    {
        if (motor2.torqueType == CURRENT)
 800c9ee:	4b6f      	ldr	r3, [pc, #444]	@ (800cbac <motorInit+0x57c>)
 800c9f0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d13a      	bne.n	800ca6e <motorInit+0x43e>
        {
            pidInit(&motor2.velocityPID, 0.02, 0.01, 0, 0, CURRENT_MAX, motor2.Ts);
 800c9f8:	4b6c      	ldr	r3, [pc, #432]	@ (800cbac <motorInit+0x57c>)
 800c9fa:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c9fe:	eef0 2a67 	vmov.f32	s5, s15
 800ca02:	ed9f 2a6b 	vldr	s4, [pc, #428]	@ 800cbb0 <motorInit+0x580>
 800ca06:	eddf 1a6b 	vldr	s3, [pc, #428]	@ 800cbb4 <motorInit+0x584>
 800ca0a:	ed9f 1a6a 	vldr	s2, [pc, #424]	@ 800cbb4 <motorInit+0x584>
 800ca0e:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 800cbb8 <motorInit+0x588>
 800ca12:	ed9f 0a6a 	vldr	s0, [pc, #424]	@ 800cbbc <motorInit+0x58c>
 800ca16:	486a      	ldr	r0, [pc, #424]	@ (800cbc0 <motorInit+0x590>)
 800ca18:	f7ff fb5e 	bl	800c0d8 <pidInit>

            float kp, ki;
            kp = 500.0f;
 800ca1c:	4b69      	ldr	r3, [pc, #420]	@ (800cbc4 <motorInit+0x594>)
 800ca1e:	607b      	str	r3, [r7, #4]
            ki = 50.0f;
 800ca20:	4b69      	ldr	r3, [pc, #420]	@ (800cbc8 <motorInit+0x598>)
 800ca22:	603b      	str	r3, [r7, #0]
            pidInit(&motor2.pidId, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800ca24:	4b61      	ldr	r3, [pc, #388]	@ (800cbac <motorInit+0x57c>)
 800ca26:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ca2a:	eef0 2a67 	vmov.f32	s5, s15
 800ca2e:	ed9f 2a67 	vldr	s4, [pc, #412]	@ 800cbcc <motorInit+0x59c>
 800ca32:	eddf 1a60 	vldr	s3, [pc, #384]	@ 800cbb4 <motorInit+0x584>
 800ca36:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 800cbb4 <motorInit+0x584>
 800ca3a:	edd7 0a00 	vldr	s1, [r7]
 800ca3e:	ed97 0a01 	vldr	s0, [r7, #4]
 800ca42:	4863      	ldr	r0, [pc, #396]	@ (800cbd0 <motorInit+0x5a0>)
 800ca44:	f7ff fb48 	bl	800c0d8 <pidInit>
            pidInit(&motor2.pidIq, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800ca48:	4b58      	ldr	r3, [pc, #352]	@ (800cbac <motorInit+0x57c>)
 800ca4a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ca4e:	eef0 2a67 	vmov.f32	s5, s15
 800ca52:	ed9f 2a5e 	vldr	s4, [pc, #376]	@ 800cbcc <motorInit+0x59c>
 800ca56:	eddf 1a57 	vldr	s3, [pc, #348]	@ 800cbb4 <motorInit+0x584>
 800ca5a:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 800cbb4 <motorInit+0x584>
 800ca5e:	edd7 0a00 	vldr	s1, [r7]
 800ca62:	ed97 0a01 	vldr	s0, [r7, #4]
 800ca66:	485b      	ldr	r0, [pc, #364]	@ (800cbd4 <motorInit+0x5a4>)
 800ca68:	f7ff fb36 	bl	800c0d8 <pidInit>
 800ca6c:	e07b      	b.n	800cb66 <motorInit+0x536>
        }
        else
        {
            pidInit(&motor2.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor2.Ts);
 800ca6e:	4b4f      	ldr	r3, [pc, #316]	@ (800cbac <motorInit+0x57c>)
 800ca70:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ca74:	eef0 2a67 	vmov.f32	s5, s15
 800ca78:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 800cbcc <motorInit+0x59c>
 800ca7c:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 800cbb4 <motorInit+0x584>
 800ca80:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 800cbb4 <motorInit+0x584>
 800ca84:	eddf 0a54 	vldr	s1, [pc, #336]	@ 800cbd8 <motorInit+0x5a8>
 800ca88:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 800cbdc <motorInit+0x5ac>
 800ca8c:	484c      	ldr	r0, [pc, #304]	@ (800cbc0 <motorInit+0x590>)
 800ca8e:	f7ff fb23 	bl	800c0d8 <pidInit>
 800ca92:	e068      	b.n	800cb66 <motorInit+0x536>
        }
    }
    else if (motor2.controlType == ANGLE)
 800ca94:	4b45      	ldr	r3, [pc, #276]	@ (800cbac <motorInit+0x57c>)
 800ca96:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800ca9a:	2b03      	cmp	r3, #3
 800ca9c:	d163      	bne.n	800cb66 <motorInit+0x536>
    {
        if (motor2.torqueType == CURRENT)
 800ca9e:	4b43      	ldr	r3, [pc, #268]	@ (800cbac <motorInit+0x57c>)
 800caa0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d14c      	bne.n	800cb42 <motorInit+0x512>
        {
            pidInit(&motor2.anglePID, 2, 0, 0, 0, MAX_VELOCITY, motor2.Ts);
 800caa8:	4b40      	ldr	r3, [pc, #256]	@ (800cbac <motorInit+0x57c>)
 800caaa:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800caae:	eef0 2a67 	vmov.f32	s5, s15
 800cab2:	ed9f 2a4b 	vldr	s4, [pc, #300]	@ 800cbe0 <motorInit+0x5b0>
 800cab6:	eddf 1a3f 	vldr	s3, [pc, #252]	@ 800cbb4 <motorInit+0x584>
 800caba:	ed9f 1a3e 	vldr	s2, [pc, #248]	@ 800cbb4 <motorInit+0x584>
 800cabe:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 800cbb4 <motorInit+0x584>
 800cac2:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800cac6:	4847      	ldr	r0, [pc, #284]	@ (800cbe4 <motorInit+0x5b4>)
 800cac8:	f7ff fb06 	bl	800c0d8 <pidInit>

            pidInit(&motor2.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor2.Ts);
 800cacc:	4b37      	ldr	r3, [pc, #220]	@ (800cbac <motorInit+0x57c>)
 800cace:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cad2:	eef0 2a67 	vmov.f32	s5, s15
 800cad6:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 800cbb0 <motorInit+0x580>
 800cada:	eddf 1a36 	vldr	s3, [pc, #216]	@ 800cbb4 <motorInit+0x584>
 800cade:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 800cbb4 <motorInit+0x584>
 800cae2:	eddf 0a41 	vldr	s1, [pc, #260]	@ 800cbe8 <motorInit+0x5b8>
 800cae6:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 800cbec <motorInit+0x5bc>
 800caea:	4835      	ldr	r0, [pc, #212]	@ (800cbc0 <motorInit+0x590>)
 800caec:	f7ff faf4 	bl	800c0d8 <pidInit>

            // pidInit(&motor1.anglePID, -0.001, -0.0001, 0, 0, CURRENT_MAX / 2, motor1.Ts);

            float kp, ki;
            kp = -200;
 800caf0:	4b3f      	ldr	r3, [pc, #252]	@ (800cbf0 <motorInit+0x5c0>)
 800caf2:	60fb      	str	r3, [r7, #12]
            ki = -20;
 800caf4:	4b3f      	ldr	r3, [pc, #252]	@ (800cbf4 <motorInit+0x5c4>)
 800caf6:	60bb      	str	r3, [r7, #8]
            pidInit(&motor2.pidId, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800caf8:	4b2c      	ldr	r3, [pc, #176]	@ (800cbac <motorInit+0x57c>)
 800cafa:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cafe:	eef0 2a67 	vmov.f32	s5, s15
 800cb02:	ed9f 2a32 	vldr	s4, [pc, #200]	@ 800cbcc <motorInit+0x59c>
 800cb06:	eddf 1a2b 	vldr	s3, [pc, #172]	@ 800cbb4 <motorInit+0x584>
 800cb0a:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 800cbb4 <motorInit+0x584>
 800cb0e:	edd7 0a02 	vldr	s1, [r7, #8]
 800cb12:	ed97 0a03 	vldr	s0, [r7, #12]
 800cb16:	482e      	ldr	r0, [pc, #184]	@ (800cbd0 <motorInit+0x5a0>)
 800cb18:	f7ff fade 	bl	800c0d8 <pidInit>
            pidInit(&motor2.pidIq, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800cb1c:	4b23      	ldr	r3, [pc, #140]	@ (800cbac <motorInit+0x57c>)
 800cb1e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cb22:	eef0 2a67 	vmov.f32	s5, s15
 800cb26:	ed9f 2a29 	vldr	s4, [pc, #164]	@ 800cbcc <motorInit+0x59c>
 800cb2a:	eddf 1a22 	vldr	s3, [pc, #136]	@ 800cbb4 <motorInit+0x584>
 800cb2e:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 800cbb4 <motorInit+0x584>
 800cb32:	edd7 0a02 	vldr	s1, [r7, #8]
 800cb36:	ed97 0a03 	vldr	s0, [r7, #12]
 800cb3a:	4826      	ldr	r0, [pc, #152]	@ (800cbd4 <motorInit+0x5a4>)
 800cb3c:	f7ff facc 	bl	800c0d8 <pidInit>
 800cb40:	e011      	b.n	800cb66 <motorInit+0x536>
        }
        else
        {
            pidInit(&motor2.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor2.Ts);
 800cb42:	4b1a      	ldr	r3, [pc, #104]	@ (800cbac <motorInit+0x57c>)
 800cb44:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cb48:	eef0 2a67 	vmov.f32	s5, s15
 800cb4c:	ed9f 2a2a 	vldr	s4, [pc, #168]	@ 800cbf8 <motorInit+0x5c8>
 800cb50:	eddf 1a18 	vldr	s3, [pc, #96]	@ 800cbb4 <motorInit+0x584>
 800cb54:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 800cbb4 <motorInit+0x584>
 800cb58:	eddf 0a28 	vldr	s1, [pc, #160]	@ 800cbfc <motorInit+0x5cc>
 800cb5c:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 800cc00 <motorInit+0x5d0>
 800cb60:	4820      	ldr	r0, [pc, #128]	@ (800cbe4 <motorInit+0x5b4>)
 800cb62:	f7ff fab9 	bl	800c0d8 <pidInit>
        }
    }

    lpfInit(&motor2.IqFilter, 0.05, motor1.Ts);
 800cb66:	4b27      	ldr	r3, [pc, #156]	@ (800cc04 <motorInit+0x5d4>)
 800cb68:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cb6c:	eef0 0a67 	vmov.f32	s1, s15
 800cb70:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800cbd8 <motorInit+0x5a8>
 800cb74:	4824      	ldr	r0, [pc, #144]	@ (800cc08 <motorInit+0x5d8>)
 800cb76:	f7ff f943 	bl	800be00 <lpfInit>
    lpfInit(&motor2.IdFilter, 0.05, motor1.Ts);
 800cb7a:	4b22      	ldr	r3, [pc, #136]	@ (800cc04 <motorInit+0x5d4>)
 800cb7c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cb80:	eef0 0a67 	vmov.f32	s1, s15
 800cb84:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 800cbd8 <motorInit+0x5a8>
 800cb88:	4820      	ldr	r0, [pc, #128]	@ (800cc0c <motorInit+0x5dc>)
 800cb8a:	f7ff f939 	bl	800be00 <lpfInit>
    lpfInit(&motor2.velocityFilter, 0.01, motor1.Ts);
 800cb8e:	4b1d      	ldr	r3, [pc, #116]	@ (800cc04 <motorInit+0x5d4>)
 800cb90:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cb94:	eef0 0a67 	vmov.f32	s1, s15
 800cb98:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800cbb8 <motorInit+0x588>
 800cb9c:	481c      	ldr	r0, [pc, #112]	@ (800cc10 <motorInit+0x5e0>)
 800cb9e:	f7ff f92f 	bl	800be00 <lpfInit>
}
 800cba2:	bf00      	nop
 800cba4:	3730      	adds	r7, #48	@ 0x30
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	20000a18 	.word	0x20000a18
 800cbb0:	3e4ccccd 	.word	0x3e4ccccd
 800cbb4:	00000000 	.word	0x00000000
 800cbb8:	3c23d70a 	.word	0x3c23d70a
 800cbbc:	3ca3d70a 	.word	0x3ca3d70a
 800cbc0:	20000ac4 	.word	0x20000ac4
 800cbc4:	43fa0000 	.word	0x43fa0000
 800cbc8:	42480000 	.word	0x42480000
 800cbcc:	4093cd3a 	.word	0x4093cd3a
 800cbd0:	20000a7c 	.word	0x20000a7c
 800cbd4:	20000aa0 	.word	0x20000aa0
 800cbd8:	3d4ccccd 	.word	0x3d4ccccd
 800cbdc:	3e19999a 	.word	0x3e19999a
 800cbe0:	43c80000 	.word	0x43c80000
 800cbe4:	20000ae8 	.word	0x20000ae8
 800cbe8:	bc23d70a 	.word	0xbc23d70a
 800cbec:	bca3d70a 	.word	0xbca3d70a
 800cbf0:	c3480000 	.word	0xc3480000
 800cbf4:	c1a00000 	.word	0xc1a00000
 800cbf8:	4013cd3a 	.word	0x4013cd3a
 800cbfc:	3a83126f 	.word	0x3a83126f
 800cc00:	3e99999a 	.word	0x3e99999a
 800cc04:	200008d8 	.word	0x200008d8
 800cc08:	20000b0c 	.word	0x20000b0c
 800cc0c:	20000b18 	.word	0x20000b18
 800cc10:	20000b24 	.word	0x20000b24

0800cc14 <appInit>:

static float v;
void appInit()
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	af00      	add	r7, sp, #0

    motorInit();
 800cc18:	f7ff fd0a 	bl	800c630 <motorInit>
    devState = STANDBY;
 800cc1c:	4b0b      	ldr	r3, [pc, #44]	@ (800cc4c <appInit+0x38>)
 800cc1e:	2200      	movs	r2, #0
 800cc20:	701a      	strb	r2, [r3, #0]
    v = 2400;
 800cc22:	4b0b      	ldr	r3, [pc, #44]	@ (800cc50 <appInit+0x3c>)
 800cc24:	4a0b      	ldr	r2, [pc, #44]	@ (800cc54 <appInit+0x40>)
 800cc26:	601a      	str	r2, [r3, #0]
    // balance
    pidInit(&balancePid, 20, 0, 0, 0, VELOCITY_MAX, 100 * 1e-6f);
 800cc28:	eddf 2a0b 	vldr	s5, [pc, #44]	@ 800cc58 <appInit+0x44>
 800cc2c:	ed9f 2a0b 	vldr	s4, [pc, #44]	@ 800cc5c <appInit+0x48>
 800cc30:	eddf 1a0b 	vldr	s3, [pc, #44]	@ 800cc60 <appInit+0x4c>
 800cc34:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 800cc60 <appInit+0x4c>
 800cc38:	eddf 0a09 	vldr	s1, [pc, #36]	@ 800cc60 <appInit+0x4c>
 800cc3c:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 800cc40:	4808      	ldr	r0, [pc, #32]	@ (800cc64 <appInit+0x50>)
 800cc42:	f7ff fa49 	bl	800c0d8 <pidInit>
}
 800cc46:	bf00      	nop
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	2000008e 	.word	0x2000008e
 800cc50:	20000b7c 	.word	0x20000b7c
 800cc54:	45160000 	.word	0x45160000
 800cc58:	38d1b717 	.word	0x38d1b717
 800cc5c:	43c80000 	.word	0x43c80000
 800cc60:	00000000 	.word	0x00000000
 800cc64:	20000b58 	.word	0x20000b58

0800cc68 <appRunning>:
static bool zeroReset, _1s;
uint32_t rgbColor;
void appRunning()
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	af00      	add	r7, sp, #0
    _1s = getOneSecFlag();
 800cc6c:	f002 f8d2 	bl	800ee14 <getOneSecFlag>
 800cc70:	4603      	mov	r3, r0
 800cc72:	461a      	mov	r2, r3
 800cc74:	4b14      	ldr	r3, [pc, #80]	@ (800ccc8 <appRunning+0x60>)
 800cc76:	701a      	strb	r2, [r3, #0]
    getKeyState(&keyState);
 800cc78:	4814      	ldr	r0, [pc, #80]	@ (800cccc <appRunning+0x64>)
 800cc7a:	f000 fc1b 	bl	800d4b4 <getKeyState>
    commander_run(&motor1, &motor2);
 800cc7e:	4914      	ldr	r1, [pc, #80]	@ (800ccd0 <appRunning+0x68>)
 800cc80:	4814      	ldr	r0, [pc, #80]	@ (800ccd4 <appRunning+0x6c>)
 800cc82:	f000 f9d1 	bl	800d028 <commander_run>
    if (++flashCnt >= 10)
 800cc86:	4b14      	ldr	r3, [pc, #80]	@ (800ccd8 <appRunning+0x70>)
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	b2da      	uxtb	r2, r3
 800cc8e:	4b12      	ldr	r3, [pc, #72]	@ (800ccd8 <appRunning+0x70>)
 800cc90:	701a      	strb	r2, [r3, #0]
 800cc92:	4b11      	ldr	r3, [pc, #68]	@ (800ccd8 <appRunning+0x70>)
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	2b09      	cmp	r3, #9
 800cc98:	d902      	bls.n	800cca0 <appRunning+0x38>
        flashCnt = 0;
 800cc9a:	4b0f      	ldr	r3, [pc, #60]	@ (800ccd8 <appRunning+0x70>)
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	701a      	strb	r2, [r3, #0]

    ledOn = 0;
 800cca0:	4b0e      	ldr	r3, [pc, #56]	@ (800ccdc <appRunning+0x74>)
 800cca2:	2200      	movs	r2, #0
 800cca4:	701a      	strb	r2, [r3, #0]
            motor2.target = goalTorqueC;
        }
    }
#endif

    switch (devState)
 800cca6:	4b0e      	ldr	r3, [pc, #56]	@ (800cce0 <appRunning+0x78>)
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d002      	beq.n	800ccb4 <appRunning+0x4c>
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d003      	beq.n	800ccba <appRunning+0x52>
 800ccb2:	e005      	b.n	800ccc0 <appRunning+0x58>
    {
    case STANDBY:
        standingBy();
 800ccb4:	f000 f816 	bl	800cce4 <standingBy>
        break;
 800ccb8:	e002      	b.n	800ccc0 <appRunning+0x58>

    case WORK:
        working();
 800ccba:	f000 f85d 	bl	800cd78 <working>
        break;
 800ccbe:	bf00      	nop
    if (_1s)
    {
        // v -= 20;
        // HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v);
    }
    LED_drive();
 800ccc0:	f000 fc36 	bl	800d530 <LED_drive>
}
 800ccc4:	bf00      	nop
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	20000b81 	.word	0x20000b81
 800cccc:	200008b4 	.word	0x200008b4
 800ccd0:	20000a18 	.word	0x20000a18
 800ccd4:	200008d8 	.word	0x200008d8
 800ccd8:	200008b5 	.word	0x200008b5
 800ccdc:	20000c78 	.word	0x20000c78
 800cce0:	2000008e 	.word	0x2000008e

0800cce4 <standingBy>:
static void standingBy()
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	af00      	add	r7, sp, #0
    static bool notFirstTime;
    static uchar cnt;
    ledOn = 1;
 800cce8:	4b1b      	ldr	r3, [pc, #108]	@ (800cd58 <standingBy+0x74>)
 800ccea:	2201      	movs	r2, #1
 800ccec:	701a      	strb	r2, [r3, #0]
    //     goToZeroElecAngle(&motor2);
    //     zeroReset = 1;
    // }
    // else
    // {
    motor1.stopPwm();
 800ccee:	4b1b      	ldr	r3, [pc, #108]	@ (800cd5c <standingBy+0x78>)
 800ccf0:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800ccf4:	4798      	blx	r3
    motor2.stopPwm();
 800ccf6:	4b1a      	ldr	r3, [pc, #104]	@ (800cd60 <standingBy+0x7c>)
 800ccf8:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800ccfc:	4798      	blx	r3
    // }

    if ((++cnt >= 10 && notFirstTime == 0) || keyState == USER1_SHORT)
 800ccfe:	4b19      	ldr	r3, [pc, #100]	@ (800cd64 <standingBy+0x80>)
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	3301      	adds	r3, #1
 800cd04:	b2da      	uxtb	r2, r3
 800cd06:	4b17      	ldr	r3, [pc, #92]	@ (800cd64 <standingBy+0x80>)
 800cd08:	701a      	strb	r2, [r3, #0]
 800cd0a:	4b16      	ldr	r3, [pc, #88]	@ (800cd64 <standingBy+0x80>)
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	2b09      	cmp	r3, #9
 800cd10:	d903      	bls.n	800cd1a <standingBy+0x36>
 800cd12:	4b15      	ldr	r3, [pc, #84]	@ (800cd68 <standingBy+0x84>)
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d003      	beq.n	800cd22 <standingBy+0x3e>
 800cd1a:	4b14      	ldr	r3, [pc, #80]	@ (800cd6c <standingBy+0x88>)
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d118      	bne.n	800cd54 <standingBy+0x70>
    {
        notFirstTime = 1;
 800cd22:	4b11      	ldr	r3, [pc, #68]	@ (800cd68 <standingBy+0x84>)
 800cd24:	2201      	movs	r2, #1
 800cd26:	701a      	strb	r2, [r3, #0]
        WORK_INIT;
 800cd28:	4b11      	ldr	r3, [pc, #68]	@ (800cd70 <standingBy+0x8c>)
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	701a      	strb	r2, [r3, #0]
 800cd2e:	4b11      	ldr	r3, [pc, #68]	@ (800cd74 <standingBy+0x90>)
 800cd30:	2200      	movs	r2, #0
 800cd32:	701a      	strb	r2, [r3, #0]
 800cd34:	4b09      	ldr	r3, [pc, #36]	@ (800cd5c <standingBy+0x78>)
 800cd36:	2202      	movs	r2, #2
 800cd38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800cd3c:	4b07      	ldr	r3, [pc, #28]	@ (800cd5c <standingBy+0x78>)
 800cd3e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800cd42:	4798      	blx	r3
 800cd44:	4b06      	ldr	r3, [pc, #24]	@ (800cd60 <standingBy+0x7c>)
 800cd46:	2202      	movs	r2, #2
 800cd48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800cd4c:	4b04      	ldr	r3, [pc, #16]	@ (800cd60 <standingBy+0x7c>)
 800cd4e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800cd52:	4798      	blx	r3
    }
}
 800cd54:	bf00      	nop
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	20000c78 	.word	0x20000c78
 800cd5c:	200008d8 	.word	0x200008d8
 800cd60:	20000a18 	.word	0x20000a18
 800cd64:	20000b82 	.word	0x20000b82
 800cd68:	20000b83 	.word	0x20000b83
 800cd6c:	200008b4 	.word	0x200008b4
 800cd70:	2000008e 	.word	0x2000008e
 800cd74:	200008b5 	.word	0x200008b5

0800cd78 <working>:

static void working(void)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	af00      	add	r7, sp, #0
    zeroReset = 0;
 800cd7c:	4b10      	ldr	r3, [pc, #64]	@ (800cdc0 <working+0x48>)
 800cd7e:	2200      	movs	r2, #0
 800cd80:	701a      	strb	r2, [r3, #0]
    if (flashCnt < 5)
 800cd82:	4b10      	ldr	r3, [pc, #64]	@ (800cdc4 <working+0x4c>)
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	2b04      	cmp	r3, #4
 800cd88:	d802      	bhi.n	800cd90 <working+0x18>
        ledOn = 1;
 800cd8a:	4b0f      	ldr	r3, [pc, #60]	@ (800cdc8 <working+0x50>)
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	701a      	strb	r2, [r3, #0]

    if (keyState == USER1_SHORT)
 800cd90:	4b0e      	ldr	r3, [pc, #56]	@ (800cdcc <working+0x54>)
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	d10d      	bne.n	800cdb4 <working+0x3c>
    {
        STANDBY_INIT;
 800cd98:	4b0d      	ldr	r3, [pc, #52]	@ (800cdd0 <working+0x58>)
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	701a      	strb	r2, [r3, #0]
 800cd9e:	4b09      	ldr	r3, [pc, #36]	@ (800cdc4 <working+0x4c>)
 800cda0:	2200      	movs	r2, #0
 800cda2:	701a      	strb	r2, [r3, #0]
 800cda4:	4b0b      	ldr	r3, [pc, #44]	@ (800cdd4 <working+0x5c>)
 800cda6:	2201      	movs	r2, #1
 800cda8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800cdac:	4b0a      	ldr	r3, [pc, #40]	@ (800cdd8 <working+0x60>)
 800cdae:	2201      	movs	r2, #1
 800cdb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    //        //     {
    //        //         bldcMotor.focTarget = 23;
    //        //     }
    //        // }
    //    }
}
 800cdb4:	bf00      	nop
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr
 800cdbe:	bf00      	nop
 800cdc0:	20000b80 	.word	0x20000b80
 800cdc4:	200008b5 	.word	0x200008b5
 800cdc8:	20000c78 	.word	0x20000c78
 800cdcc:	200008b4 	.word	0x200008b4
 800cdd0:	2000008e 	.word	0x2000008e
 800cdd4:	200008d8 	.word	0x200008d8
 800cdd8:	20000a18 	.word	0x20000a18

0800cddc <HAL_ADCEx_InjectedConvCpltCallback>:

    // sprintf(txBuffer, "pitch : %.2f,  P: %.2f,  I:%.2f, D:%.2f, V1:%.2f, T2:%.2f\n", imu.pit, balancePid.P, balancePid.I, balancePid.D, motor1.magEncoder.velocity, motor2.target);
}

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800cddc:	b5b0      	push	{r4, r5, r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
 800cde4:	2201      	movs	r2, #1
 800cde6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800cdea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800cdee:	f7f9 fda1 	bl	8006934 <HAL_GPIO_WritePin>
    if (hadc == &hadc1)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	4a38      	ldr	r2, [pc, #224]	@ (800ced8 <HAL_ADCEx_InjectedConvCpltCallback+0xfc>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d163      	bne.n	800cec2 <HAL_ADCEx_InjectedConvCpltCallback+0xe6>
    {
        static bool shift;
        shift = !shift;
 800cdfa:	4b38      	ldr	r3, [pc, #224]	@ (800cedc <HAL_ADCEx_InjectedConvCpltCallback+0x100>)
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	bf0c      	ite	eq
 800ce02:	2301      	moveq	r3, #1
 800ce04:	2300      	movne	r3, #0
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	461a      	mov	r2, r3
 800ce0a:	4b34      	ldr	r3, [pc, #208]	@ (800cedc <HAL_ADCEx_InjectedConvCpltCallback+0x100>)
 800ce0c:	701a      	strb	r2, [r3, #0]
        if (shift)
 800ce0e:	4b33      	ldr	r3, [pc, #204]	@ (800cedc <HAL_ADCEx_InjectedConvCpltCallback+0x100>)
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d00c      	beq.n	800ce30 <HAL_ADCEx_InjectedConvCpltCallback+0x54>
        {
            foc(&motor1, hadc1.Instance->JDR3, hadc2.Instance->JDR1); // tim8
 800ce16:	4b30      	ldr	r3, [pc, #192]	@ (800ced8 <HAL_ADCEx_InjectedConvCpltCallback+0xfc>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 800ce1e:	4b30      	ldr	r3, [pc, #192]	@ (800cee0 <HAL_ADCEx_InjectedConvCpltCallback+0x104>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce26:	461a      	mov	r2, r3
 800ce28:	482e      	ldr	r0, [pc, #184]	@ (800cee4 <HAL_ADCEx_InjectedConvCpltCallback+0x108>)
 800ce2a:	f7fe fba1 	bl	800b570 <foc>
 800ce2e:	e00b      	b.n	800ce48 <HAL_ADCEx_InjectedConvCpltCallback+0x6c>
        }
        else
        {
            foc(&motor2, hadc1.Instance->JDR1, hadc1.Instance->JDR2); // tim1
 800ce30:	4b29      	ldr	r3, [pc, #164]	@ (800ced8 <HAL_ADCEx_InjectedConvCpltCallback+0xfc>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800ce38:	4b27      	ldr	r3, [pc, #156]	@ (800ced8 <HAL_ADCEx_InjectedConvCpltCallback+0xfc>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce40:	461a      	mov	r2, r3
 800ce42:	4829      	ldr	r0, [pc, #164]	@ (800cee8 <HAL_ADCEx_InjectedConvCpltCallback+0x10c>)
 800ce44:	f7fe fb94 	bl	800b570 <foc>
        }

        dealPer100us();
 800ce48:	f001 ff1e 	bl	800ec88 <dealPer100us>
        balancerControl();
 800ce4c:	f000 f856 	bl	800cefc <balancerControl>
        // HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
#if SHOW_WAVE
        // #if SHOW_SVPWM
        load_data[0] = motor1.Ta;
 800ce50:	4b24      	ldr	r3, [pc, #144]	@ (800cee4 <HAL_ADCEx_InjectedConvCpltCallback+0x108>)
 800ce52:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800ce56:	4a25      	ldr	r2, [pc, #148]	@ (800ceec <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 800ce58:	6013      	str	r3, [r2, #0]
        load_data[1] = motor1.Tb;
 800ce5a:	4b22      	ldr	r3, [pc, #136]	@ (800cee4 <HAL_ADCEx_InjectedConvCpltCallback+0x108>)
 800ce5c:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800ce60:	4a22      	ldr	r2, [pc, #136]	@ (800ceec <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 800ce62:	6053      	str	r3, [r2, #4]
        load_data[2] = motor1.Tc;
 800ce64:	4b1f      	ldr	r3, [pc, #124]	@ (800cee4 <HAL_ADCEx_InjectedConvCpltCallback+0x108>)
 800ce66:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800ce6a:	4a20      	ldr	r2, [pc, #128]	@ (800ceec <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 800ce6c:	6093      	str	r3, [r2, #8]

        //         load_data[2] = motor1.Uq;

        // show current

        load_data[3] = motor1.Ia;
 800ce6e:	4b1d      	ldr	r3, [pc, #116]	@ (800cee4 <HAL_ADCEx_InjectedConvCpltCallback+0x108>)
 800ce70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ce72:	4a1e      	ldr	r2, [pc, #120]	@ (800ceec <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 800ce74:	60d3      	str	r3, [r2, #12]
        load_data[4] = motor1.Ib;
 800ce76:	4b1b      	ldr	r3, [pc, #108]	@ (800cee4 <HAL_ADCEx_InjectedConvCpltCallback+0x108>)
 800ce78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce7a:	4a1c      	ldr	r2, [pc, #112]	@ (800ceec <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 800ce7c:	6113      	str	r3, [r2, #16]
        load_data[5] = motor1.Ic;
 800ce7e:	4b19      	ldr	r3, [pc, #100]	@ (800cee4 <HAL_ADCEx_InjectedConvCpltCallback+0x108>)
 800ce80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce82:	4a1a      	ldr	r2, [pc, #104]	@ (800ceec <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 800ce84:	6153      	str	r3, [r2, #20]
        // load_data[0] = motor1.target;
        // load_data[1] = motor1.magEncoder.velocity;
        // load_data[2] = motor2.magEncoder.velocity;
        // load_data[3] = motor1.Uq;
        // load_data[4] = motor2.Uq;
        load_data[6] = v;
 800ce86:	4b1a      	ldr	r3, [pc, #104]	@ (800cef0 <HAL_ADCEx_InjectedConvCpltCallback+0x114>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a18      	ldr	r2, [pc, #96]	@ (800ceec <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 800ce8c:	6193      	str	r3, [r2, #24]
        load_data[7] = hadc1.Instance->JDR3;
 800ce8e:	4b12      	ldr	r3, [pc, #72]	@ (800ced8 <HAL_ADCEx_InjectedConvCpltCallback+0xfc>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce96:	ee07 3a90 	vmov	s15, r3
 800ce9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce9e:	4b13      	ldr	r3, [pc, #76]	@ (800ceec <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 800cea0:	edc3 7a07 	vstr	s15, [r3, #28]
        memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
 800cea4:	4a13      	ldr	r2, [pc, #76]	@ (800cef4 <HAL_ADCEx_InjectedConvCpltCallback+0x118>)
 800cea6:	4b11      	ldr	r3, [pc, #68]	@ (800ceec <HAL_ADCEx_InjectedConvCpltCallback+0x110>)
 800cea8:	4614      	mov	r4, r2
 800ceaa:	461d      	mov	r5, r3
 800ceac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ceae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ceb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ceb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, sizeof(tempData));
 800ceb8:	2224      	movs	r2, #36	@ 0x24
 800ceba:	490e      	ldr	r1, [pc, #56]	@ (800cef4 <HAL_ADCEx_InjectedConvCpltCallback+0x118>)
 800cebc:	480e      	ldr	r0, [pc, #56]	@ (800cef8 <HAL_ADCEx_InjectedConvCpltCallback+0x11c>)
 800cebe:	f7fc fd3b 	bl	8009938 <HAL_UART_Transmit_DMA>
#endif
    }
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 800cec2:	2200      	movs	r2, #0
 800cec4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800cec8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800cecc:	f7f9 fd32 	bl	8006934 <HAL_GPIO_WritePin>
}
 800ced0:	bf00      	nop
 800ced2:	3708      	adds	r7, #8
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bdb0      	pop	{r4, r5, r7, pc}
 800ced8:	200002bc 	.word	0x200002bc
 800cedc:	20000b84 	.word	0x20000b84
 800cee0:	20000328 	.word	0x20000328
 800cee4:	200008d8 	.word	0x200008d8
 800cee8:	20000a18 	.word	0x20000a18
 800ceec:	200008b8 	.word	0x200008b8
 800cef0:	20000b7c 	.word	0x20000b7c
 800cef4:	20000090 	.word	0x20000090
 800cef8:	20000698 	.word	0x20000698

0800cefc <balancerControl>:

void balancerControl()
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	af00      	add	r7, sp, #0
    motor1.target = pidOperator(&balancePid, 0 - imu.pit);
 800cf00:	4b11      	ldr	r3, [pc, #68]	@ (800cf48 <balancerControl+0x4c>)
 800cf02:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cf06:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800cf4c <balancerControl+0x50>
 800cf0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf0e:	eeb0 0a67 	vmov.f32	s0, s15
 800cf12:	480f      	ldr	r0, [pc, #60]	@ (800cf50 <balancerControl+0x54>)
 800cf14:	f7ff f914 	bl	800c140 <pidOperator>
 800cf18:	eef0 7a40 	vmov.f32	s15, s0
 800cf1c:	4b0d      	ldr	r3, [pc, #52]	@ (800cf54 <balancerControl+0x58>)
 800cf1e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    motor2.target = pidOperator(&balancePid, 0 - imu.pit);
 800cf22:	4b09      	ldr	r3, [pc, #36]	@ (800cf48 <balancerControl+0x4c>)
 800cf24:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cf28:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800cf4c <balancerControl+0x50>
 800cf2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf30:	eeb0 0a67 	vmov.f32	s0, s15
 800cf34:	4806      	ldr	r0, [pc, #24]	@ (800cf50 <balancerControl+0x54>)
 800cf36:	f7ff f903 	bl	800c140 <pidOperator>
 800cf3a:	eef0 7a40 	vmov.f32	s15, s0
 800cf3e:	4b06      	ldr	r3, [pc, #24]	@ (800cf58 <balancerControl+0x5c>)
 800cf40:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800cf44:	bf00      	nop
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	20000cc4 	.word	0x20000cc4
 800cf4c:	00000000 	.word	0x00000000
 800cf50:	20000b58 	.word	0x20000b58
 800cf54:	200008d8 	.word	0x200008d8
 800cf58:	20000a18 	.word	0x20000a18

0800cf5c <HAL_UARTEx_RxEventCallback>:
uint8_t aRxBuffer;
float comm1, comm2, comm3, comm4, comm5, comm6, comm7, comm8, comm9, comm10, comm11;
extern DMA_HandleTypeDef hdma_usart2_rx;
extern DMA_HandleTypeDef hdma_usart3_rx;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	460b      	mov	r3, r1
 800cf66:	807b      	strh	r3, [r7, #2]
  // memset(rxBuffer, '\0', sizeof(rxBuffer));
  if (huart == &huart2)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	4a16      	ldr	r2, [pc, #88]	@ (800cfc4 <HAL_UARTEx_RxEventCallback+0x68>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d110      	bne.n	800cf92 <HAL_UARTEx_RxEventCallback+0x36>
  {
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, sizeof(rxBuffer));
 800cf70:	2264      	movs	r2, #100	@ 0x64
 800cf72:	4915      	ldr	r1, [pc, #84]	@ (800cfc8 <HAL_UARTEx_RxEventCallback+0x6c>)
 800cf74:	4813      	ldr	r0, [pc, #76]	@ (800cfc4 <HAL_UARTEx_RxEventCallback+0x68>)
 800cf76:	f7fe f8ec 	bl	800b152 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800cf7a:	4b14      	ldr	r3, [pc, #80]	@ (800cfcc <HAL_UARTEx_RxEventCallback+0x70>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	4b12      	ldr	r3, [pc, #72]	@ (800cfcc <HAL_UARTEx_RxEventCallback+0x70>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f022 0204 	bic.w	r2, r2, #4
 800cf88:	601a      	str	r2, [r3, #0]
    toProcessData = 1;
 800cf8a:	4b11      	ldr	r3, [pc, #68]	@ (800cfd0 <HAL_UARTEx_RxEventCallback+0x74>)
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	701a      	strb	r2, [r3, #0]
  {
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
    toProcessData = 1;
  }
}
 800cf90:	e013      	b.n	800cfba <HAL_UARTEx_RxEventCallback+0x5e>
  else if (huart == &huart3)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	4a0f      	ldr	r2, [pc, #60]	@ (800cfd4 <HAL_UARTEx_RxEventCallback+0x78>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d10f      	bne.n	800cfba <HAL_UARTEx_RxEventCallback+0x5e>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 800cf9a:	2264      	movs	r2, #100	@ 0x64
 800cf9c:	490a      	ldr	r1, [pc, #40]	@ (800cfc8 <HAL_UARTEx_RxEventCallback+0x6c>)
 800cf9e:	480d      	ldr	r0, [pc, #52]	@ (800cfd4 <HAL_UARTEx_RxEventCallback+0x78>)
 800cfa0:	f7fe f8d7 	bl	800b152 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800cfa4:	4b0c      	ldr	r3, [pc, #48]	@ (800cfd8 <HAL_UARTEx_RxEventCallback+0x7c>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	4b0b      	ldr	r3, [pc, #44]	@ (800cfd8 <HAL_UARTEx_RxEventCallback+0x7c>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f022 0204 	bic.w	r2, r2, #4
 800cfb2:	601a      	str	r2, [r3, #0]
    toProcessData = 1;
 800cfb4:	4b06      	ldr	r3, [pc, #24]	@ (800cfd0 <HAL_UARTEx_RxEventCallback+0x74>)
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	701a      	strb	r2, [r3, #0]
}
 800cfba:	bf00      	nop
 800cfbc:	3708      	adds	r7, #8
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	20000604 	.word	0x20000604
 800cfc8:	20000bec 	.word	0x20000bec
 800cfcc:	2000072c 	.word	0x2000072c
 800cfd0:	20000c50 	.word	0x20000c50
 800cfd4:	20000698 	.word	0x20000698
 800cfd8:	2000084c 	.word	0x2000084c

0800cfdc <printLog>:

// DMA模式
void printLog(const char *format, ...)
{
 800cfdc:	b40f      	push	{r0, r1, r2, r3}
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b0c2      	sub	sp, #264	@ 0x108
 800cfe2:	af00      	add	r7, sp, #0

  va_list args;           // 定义参数列表变量
  va_start(args, format); // 从format位置开始接收参数表，放在arg里面
 800cfe4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800cfe8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

  char strBuf[256];               // 定义输出的字符串
  vsprintf(strBuf, format, args); // 使用vsprintf将格式化的数据写入缓冲区
 800cfec:	1d3b      	adds	r3, r7, #4
 800cfee:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800cff2:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800cff6:	4618      	mov	r0, r3
 800cff8:	f003 fd1c 	bl	8010a34 <vsiprintf>
  // while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX)
  // {
  //   // Wait for DMA transfer to complete
  // }
  // HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf));
  HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf), 1000);
 800cffc:	1d3b      	adds	r3, r7, #4
 800cffe:	4618      	mov	r0, r3
 800d000:	f7f3 f95e 	bl	80002c0 <strlen>
 800d004:	4603      	mov	r3, r0
 800d006:	b29a      	uxth	r2, r3
 800d008:	1d39      	adds	r1, r7, #4
 800d00a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d00e:	4805      	ldr	r0, [pc, #20]	@ (800d024 <printLog+0x48>)
 800d010:	f7fc fc04 	bl	800981c <HAL_UART_Transmit>
}
 800d014:	bf00      	nop
 800d016:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d01a:	46bd      	mov	sp, r7
 800d01c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d020:	b004      	add	sp, #16
 800d022:	4770      	bx	lr
 800d024:	20000698 	.word	0x20000698

0800d028 <commander_run>:
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
#endif
}

void commander_run(BldcMotor *motor1, BldcMotor *motor2)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
  if (toProcessData == 1)
 800d032:	4b2f      	ldr	r3, [pc, #188]	@ (800d0f0 <commander_run+0xc8>)
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	2b01      	cmp	r3, #1
 800d038:	d156      	bne.n	800d0e8 <commander_run+0xc0>
  {
    memset(txBuffer, '\0', sizeof(txBuffer));
 800d03a:	2264      	movs	r2, #100	@ 0x64
 800d03c:	2100      	movs	r1, #0
 800d03e:	482d      	ldr	r0, [pc, #180]	@ (800d0f4 <commander_run+0xcc>)
 800d040:	f003 fd02 	bl	8010a48 <memset>
    printLog(rxBuffer);
 800d044:	482c      	ldr	r0, [pc, #176]	@ (800d0f8 <commander_run+0xd0>)
 800d046:	f7ff ffc9 	bl	800cfdc <printLog>
    switch (rxBuffer[0])
 800d04a:	4b2b      	ldr	r3, [pc, #172]	@ (800d0f8 <commander_run+0xd0>)
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	2b54      	cmp	r3, #84	@ 0x54
 800d050:	d00b      	beq.n	800d06a <commander_run+0x42>
 800d052:	2b54      	cmp	r3, #84	@ 0x54
 800d054:	dc3b      	bgt.n	800d0ce <commander_run+0xa6>
 800d056:	2b48      	cmp	r3, #72	@ 0x48
 800d058:	d002      	beq.n	800d060 <commander_run+0x38>
 800d05a:	2b50      	cmp	r3, #80	@ 0x50
 800d05c:	d01e      	beq.n	800d09c <commander_run+0x74>
 800d05e:	e036      	b.n	800d0ce <commander_run+0xa6>
      //   sprintf(txBuffer, "engine start!\r\n");
      //   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
      //   break;

    case 'H':
      sprintf(txBuffer, "Hello World!\r\n");
 800d060:	4926      	ldr	r1, [pc, #152]	@ (800d0fc <commander_run+0xd4>)
 800d062:	4824      	ldr	r0, [pc, #144]	@ (800d0f4 <commander_run+0xcc>)
 800d064:	f003 fc6c 	bl	8010940 <siprintf>
      break;
 800d068:	e031      	b.n	800d0ce <commander_run+0xa6>

    case 'T': // T6.28
      motor1->target = atof((const char *)(rxBuffer + 1));
 800d06a:	4b25      	ldr	r3, [pc, #148]	@ (800d100 <commander_run+0xd8>)
 800d06c:	4618      	mov	r0, r3
 800d06e:	f001 ff21 	bl	800eeb4 <atof>
 800d072:	ec53 2b10 	vmov	r2, r3, d0
 800d076:	4610      	mov	r0, r2
 800d078:	4619      	mov	r1, r3
 800d07a:	f7f3 fddd 	bl	8000c38 <__aeabi_d2f>
 800d07e:	4602      	mov	r2, r0
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	631a      	str	r2, [r3, #48]	@ 0x30
      sprintf(txBuffer, "Target=%.2f\r\n", motor1->target);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d088:	4618      	mov	r0, r3
 800d08a:	f7f3 fa85 	bl	8000598 <__aeabi_f2d>
 800d08e:	4602      	mov	r2, r0
 800d090:	460b      	mov	r3, r1
 800d092:	491c      	ldr	r1, [pc, #112]	@ (800d104 <commander_run+0xdc>)
 800d094:	4817      	ldr	r0, [pc, #92]	@ (800d0f4 <commander_run+0xcc>)
 800d096:	f003 fc53 	bl	8010940 <siprintf>
      // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
      break;
 800d09a:	e018      	b.n	800d0ce <commander_run+0xa6>
    case 'P': // P0.5
#if CALI_BALANCE
      balancePid.P = atof((const char *)(rxBuffer + 1));
 800d09c:	4b18      	ldr	r3, [pc, #96]	@ (800d100 <commander_run+0xd8>)
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f001 ff08 	bl	800eeb4 <atof>
 800d0a4:	ec53 2b10 	vmov	r2, r3, d0
 800d0a8:	4610      	mov	r0, r2
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	f7f3 fdc4 	bl	8000c38 <__aeabi_d2f>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	4a15      	ldr	r2, [pc, #84]	@ (800d108 <commander_run+0xe0>)
 800d0b4:	6013      	str	r3, [r2, #0]
      sprintf(txBuffer, "P=%.2f\r\n", balancePid.P);
 800d0b6:	4b14      	ldr	r3, [pc, #80]	@ (800d108 <commander_run+0xe0>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7f3 fa6c 	bl	8000598 <__aeabi_f2d>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	4911      	ldr	r1, [pc, #68]	@ (800d10c <commander_run+0xe4>)
 800d0c6:	480b      	ldr	r0, [pc, #44]	@ (800d0f4 <commander_run+0xcc>)
 800d0c8:	f003 fc3a 	bl	8010940 <siprintf>
      //   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
#else

#endif

      break;
 800d0cc:	bf00      	nop
      // case 'A': // A
      //   sprintf(sndBuff, "Ang=%.2f\r\n", shaftAngle);
      //   printf("%s", sndBuff);
      //   break;
    }
    HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800d0ce:	2264      	movs	r2, #100	@ 0x64
 800d0d0:	4908      	ldr	r1, [pc, #32]	@ (800d0f4 <commander_run+0xcc>)
 800d0d2:	480f      	ldr	r0, [pc, #60]	@ (800d110 <commander_run+0xe8>)
 800d0d4:	f7fc fc30 	bl	8009938 <HAL_UART_Transmit_DMA>
    memset(rxBuffer, '\0', sizeof(rxBuffer));
 800d0d8:	2264      	movs	r2, #100	@ 0x64
 800d0da:	2100      	movs	r1, #0
 800d0dc:	4806      	ldr	r0, [pc, #24]	@ (800d0f8 <commander_run+0xd0>)
 800d0de:	f003 fcb3 	bl	8010a48 <memset>
    toProcessData = 0;
 800d0e2:	4b03      	ldr	r3, [pc, #12]	@ (800d0f0 <commander_run+0xc8>)
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	701a      	strb	r2, [r3, #0]
  }
}
 800d0e8:	bf00      	nop
 800d0ea:	3708      	adds	r7, #8
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	20000c50 	.word	0x20000c50
 800d0f4:	20000b88 	.word	0x20000b88
 800d0f8:	20000bec 	.word	0x20000bec
 800d0fc:	080144b4 	.word	0x080144b4
 800d100:	20000bed 	.word	0x20000bed
 800d104:	080144c4 	.word	0x080144c4
 800d108:	20000b58 	.word	0x20000b58
 800d10c:	080144d4 	.word	0x080144d4
 800d110:	20000698 	.word	0x20000698

0800d114 <getKeyFlags>:
#include "key.h"

static KeyStruct keyStruct[KEY_NUM];

uint getKeyFlags()
{
 800d114:	b580      	push	{r7, lr}
 800d116:	af00      	add	r7, sp, #0
    static uint keyFlagsBak; // back up keyflags for filtering
    static uchar filterCnt;
    static Byte flags;       // real time key flags with bits operation
    static uint keyFlagsBuf; // return key flags after filtering

    flags.byte = 0;
 800d118:	4b1a      	ldr	r3, [pc, #104]	@ (800d184 <getKeyFlags+0x70>)
 800d11a:	2200      	movs	r2, #0
 800d11c:	701a      	strb	r2, [r3, #0]

    // when IO been multiplexed
    if (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == 0)
 800d11e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800d122:	4819      	ldr	r0, [pc, #100]	@ (800d188 <getKeyFlags+0x74>)
 800d124:	f7f9 fbee 	bl	8006904 <HAL_GPIO_ReadPin>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d104      	bne.n	800d138 <getKeyFlags+0x24>
    {
        flags.bits.b0 = 1; // SW1
 800d12e:	4a15      	ldr	r2, [pc, #84]	@ (800d184 <getKeyFlags+0x70>)
 800d130:	7813      	ldrb	r3, [r2, #0]
 800d132:	f043 0301 	orr.w	r3, r3, #1
 800d136:	7013      	strb	r3, [r2, #0]
    }

  
    if (flags.byte == keyFlagsBak)
 800d138:	4b12      	ldr	r3, [pc, #72]	@ (800d184 <getKeyFlags+0x70>)
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	461a      	mov	r2, r3
 800d13e:	4b13      	ldr	r3, [pc, #76]	@ (800d18c <getKeyFlags+0x78>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	429a      	cmp	r2, r3
 800d144:	d114      	bne.n	800d170 <getKeyFlags+0x5c>
    {
        if (flags.bits.b0)
 800d146:	4b0f      	ldr	r3, [pc, #60]	@ (800d184 <getKeyFlags+0x70>)
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	f003 0301 	and.w	r3, r3, #1
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	2b00      	cmp	r3, #0
 800d152:	d006      	beq.n	800d162 <getKeyFlags+0x4e>
            keyFlagsBuf |= 1;
 800d154:	4b0e      	ldr	r3, [pc, #56]	@ (800d190 <getKeyFlags+0x7c>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f043 0301 	orr.w	r3, r3, #1
 800d15c:	4a0c      	ldr	r2, [pc, #48]	@ (800d190 <getKeyFlags+0x7c>)
 800d15e:	6013      	str	r3, [r2, #0]
 800d160:	e00b      	b.n	800d17a <getKeyFlags+0x66>
        else
            keyFlagsBuf &= ~1;
 800d162:	4b0b      	ldr	r3, [pc, #44]	@ (800d190 <getKeyFlags+0x7c>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f023 0301 	bic.w	r3, r3, #1
 800d16a:	4a09      	ldr	r2, [pc, #36]	@ (800d190 <getKeyFlags+0x7c>)
 800d16c:	6013      	str	r3, [r2, #0]
 800d16e:	e004      	b.n	800d17a <getKeyFlags+0x66>
        // else
        //     keyFlagsBuf &= ~(1 << 2);
    }
    else
    {
        keyFlagsBak = flags.byte;
 800d170:	4b04      	ldr	r3, [pc, #16]	@ (800d184 <getKeyFlags+0x70>)
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	461a      	mov	r2, r3
 800d176:	4b05      	ldr	r3, [pc, #20]	@ (800d18c <getKeyFlags+0x78>)
 800d178:	601a      	str	r2, [r3, #0]
    }
#if DEBUG_KEY
    // displayStuff = keyFlagsBuf;
#endif

    return keyFlagsBuf;
 800d17a:	4b05      	ldr	r3, [pc, #20]	@ (800d190 <getKeyFlags+0x7c>)
 800d17c:	681b      	ldr	r3, [r3, #0]
}
 800d17e:	4618      	mov	r0, r3
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	20000c6c 	.word	0x20000c6c
 800d188:	48000800 	.word	0x48000800
 800d18c:	20000c70 	.word	0x20000c70
 800d190:	20000c74 	.word	0x20000c74

0800d194 <keyScan>:

void keyScan()
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0

    uint keyFlags;

    keyFlags = getKeyFlags();
 800d19a:	f7ff ffbb 	bl	800d114 <getKeyFlags>
 800d19e:	6038      	str	r0, [r7, #0]

    if (keyFlags == 0)
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d13b      	bne.n	800d21e <keyScan+0x8a>
    {
        uchar i;
        for (i = 0; i < KEY_NUM; i++)
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	71fb      	strb	r3, [r7, #7]
 800d1aa:	e035      	b.n	800d218 <keyScan+0x84>
        {
            if (keyStruct[i].keyType == LONG_WITH_SHORT && keyStruct[i].trigCnt > 0)
 800d1ac:	79fa      	ldrb	r2, [r7, #7]
 800d1ae:	4992      	ldr	r1, [pc, #584]	@ (800d3f8 <keyScan+0x264>)
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	005b      	lsls	r3, r3, #1
 800d1b4:	4413      	add	r3, r2
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	440b      	add	r3, r1
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d114      	bne.n	800d1ea <keyScan+0x56>
 800d1c0:	79fa      	ldrb	r2, [r7, #7]
 800d1c2:	498d      	ldr	r1, [pc, #564]	@ (800d3f8 <keyScan+0x264>)
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	005b      	lsls	r3, r3, #1
 800d1c8:	4413      	add	r3, r2
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	440b      	add	r3, r1
 800d1ce:	3304      	adds	r3, #4
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d009      	beq.n	800d1ea <keyScan+0x56>
            {
                keyStruct[i].trigType = TRIG_SHORT;
 800d1d6:	79fa      	ldrb	r2, [r7, #7]
 800d1d8:	4987      	ldr	r1, [pc, #540]	@ (800d3f8 <keyScan+0x264>)
 800d1da:	4613      	mov	r3, r2
 800d1dc:	005b      	lsls	r3, r3, #1
 800d1de:	4413      	add	r3, r2
 800d1e0:	009b      	lsls	r3, r3, #2
 800d1e2:	440b      	add	r3, r1
 800d1e4:	3308      	adds	r3, #8
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	701a      	strb	r2, [r3, #0]
            }
            keyStruct[i].trigCnt = 0;
 800d1ea:	79fa      	ldrb	r2, [r7, #7]
 800d1ec:	4982      	ldr	r1, [pc, #520]	@ (800d3f8 <keyScan+0x264>)
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	005b      	lsls	r3, r3, #1
 800d1f2:	4413      	add	r3, r2
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	440b      	add	r3, r1
 800d1f8:	3304      	adds	r3, #4
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	601a      	str	r2, [r3, #0]
            keyStruct[i].preKeyValue = NO_TRIG;
 800d1fe:	79fa      	ldrb	r2, [r7, #7]
 800d200:	497d      	ldr	r1, [pc, #500]	@ (800d3f8 <keyScan+0x264>)
 800d202:	4613      	mov	r3, r2
 800d204:	005b      	lsls	r3, r3, #1
 800d206:	4413      	add	r3, r2
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	440b      	add	r3, r1
 800d20c:	3309      	adds	r3, #9
 800d20e:	2200      	movs	r2, #0
 800d210:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < KEY_NUM; i++)
 800d212:	79fb      	ldrb	r3, [r7, #7]
 800d214:	3301      	adds	r3, #1
 800d216:	71fb      	strb	r3, [r7, #7]
 800d218:	79fb      	ldrb	r3, [r7, #7]
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d9c6      	bls.n	800d1ac <keyScan+0x18>
        }
    }


    if (keyStruct[1].preKeyValue == NO_TRIG)
 800d21e:	4b76      	ldr	r3, [pc, #472]	@ (800d3f8 <keyScan+0x264>)
 800d220:	7d5b      	ldrb	r3, [r3, #21]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d131      	bne.n	800d28a <keyScan+0xf6>
    {
        if (keyFlags == K(1))
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d15d      	bne.n	800d2e8 <keyScan+0x154>
        {
            if (keyStruct[1].preKeyValue == NO_TRIG)
 800d22c:	4b72      	ldr	r3, [pc, #456]	@ (800d3f8 <keyScan+0x264>)
 800d22e:	7d5b      	ldrb	r3, [r3, #21]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d159      	bne.n	800d2e8 <keyScan+0x154>
            {
                if (keyStruct[1].keyType == SHORT || keyStruct[1].keyType == CONTINUOUS)
 800d234:	4b70      	ldr	r3, [pc, #448]	@ (800d3f8 <keyScan+0x264>)
 800d236:	7b1b      	ldrb	r3, [r3, #12]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d003      	beq.n	800d244 <keyScan+0xb0>
 800d23c:	4b6e      	ldr	r3, [pc, #440]	@ (800d3f8 <keyScan+0x264>)
 800d23e:	7b1b      	ldrb	r3, [r3, #12]
 800d240:	2b02      	cmp	r3, #2
 800d242:	d106      	bne.n	800d252 <keyScan+0xbe>
                {
                    keyStruct[1].trigType = TRIG_SHORT;
 800d244:	4b6c      	ldr	r3, [pc, #432]	@ (800d3f8 <keyScan+0x264>)
 800d246:	2201      	movs	r2, #1
 800d248:	751a      	strb	r2, [r3, #20]
                    keyStruct[1].preKeyValue = TRIG_SHORT;
 800d24a:	4b6b      	ldr	r3, [pc, #428]	@ (800d3f8 <keyScan+0x264>)
 800d24c:	2201      	movs	r2, #1
 800d24e:	755a      	strb	r2, [r3, #21]
 800d250:	e04a      	b.n	800d2e8 <keyScan+0x154>
                }
                else if (keyStruct[1].keyType == LONG_WITH_SHORT || keyStruct[1].keyType == LONG)
 800d252:	4b69      	ldr	r3, [pc, #420]	@ (800d3f8 <keyScan+0x264>)
 800d254:	7b1b      	ldrb	r3, [r3, #12]
 800d256:	2b01      	cmp	r3, #1
 800d258:	d003      	beq.n	800d262 <keyScan+0xce>
 800d25a:	4b67      	ldr	r3, [pc, #412]	@ (800d3f8 <keyScan+0x264>)
 800d25c:	7b1b      	ldrb	r3, [r3, #12]
 800d25e:	2b03      	cmp	r3, #3
 800d260:	d142      	bne.n	800d2e8 <keyScan+0x154>
                {
                    if (++keyStruct[1].trigCnt >= KEY1_LONG_CNT)
 800d262:	4b65      	ldr	r3, [pc, #404]	@ (800d3f8 <keyScan+0x264>)
 800d264:	691b      	ldr	r3, [r3, #16]
 800d266:	3301      	adds	r3, #1
 800d268:	4a63      	ldr	r2, [pc, #396]	@ (800d3f8 <keyScan+0x264>)
 800d26a:	6113      	str	r3, [r2, #16]
 800d26c:	4b62      	ldr	r3, [pc, #392]	@ (800d3f8 <keyScan+0x264>)
 800d26e:	691b      	ldr	r3, [r3, #16]
 800d270:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d274:	d338      	bcc.n	800d2e8 <keyScan+0x154>
                    {
                        keyStruct[1].trigCnt = 0;
 800d276:	4b60      	ldr	r3, [pc, #384]	@ (800d3f8 <keyScan+0x264>)
 800d278:	2200      	movs	r2, #0
 800d27a:	611a      	str	r2, [r3, #16]
                        keyStruct[1].trigType = TRIG_LONG;
 800d27c:	4b5e      	ldr	r3, [pc, #376]	@ (800d3f8 <keyScan+0x264>)
 800d27e:	2202      	movs	r2, #2
 800d280:	751a      	strb	r2, [r3, #20]
                        keyStruct[1].preKeyValue = TRIG_LONG;
 800d282:	4b5d      	ldr	r3, [pc, #372]	@ (800d3f8 <keyScan+0x264>)
 800d284:	2202      	movs	r2, #2
 800d286:	755a      	strb	r2, [r3, #21]
 800d288:	e02e      	b.n	800d2e8 <keyScan+0x154>
                    }
                }
            }
        }
    }
    else if (keyStruct[1].keyType == CONTINUOUS)
 800d28a:	4b5b      	ldr	r3, [pc, #364]	@ (800d3f8 <keyScan+0x264>)
 800d28c:	7b1b      	ldrb	r3, [r3, #12]
 800d28e:	2b02      	cmp	r3, #2
 800d290:	d12a      	bne.n	800d2e8 <keyScan+0x154>
    {
        if (keyStruct[1].preKeyValue == TRIG_SHORT) // short key
 800d292:	4b59      	ldr	r3, [pc, #356]	@ (800d3f8 <keyScan+0x264>)
 800d294:	7d5b      	ldrb	r3, [r3, #21]
 800d296:	2b01      	cmp	r3, #1
 800d298:	d112      	bne.n	800d2c0 <keyScan+0x12c>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_TRIG_CNT)
 800d29a:	4b57      	ldr	r3, [pc, #348]	@ (800d3f8 <keyScan+0x264>)
 800d29c:	691b      	ldr	r3, [r3, #16]
 800d29e:	3301      	adds	r3, #1
 800d2a0:	4a55      	ldr	r2, [pc, #340]	@ (800d3f8 <keyScan+0x264>)
 800d2a2:	6113      	str	r3, [r2, #16]
 800d2a4:	4b54      	ldr	r3, [pc, #336]	@ (800d3f8 <keyScan+0x264>)
 800d2a6:	691b      	ldr	r3, [r3, #16]
 800d2a8:	2b63      	cmp	r3, #99	@ 0x63
 800d2aa:	d91d      	bls.n	800d2e8 <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800d2ac:	4b52      	ldr	r3, [pc, #328]	@ (800d3f8 <keyScan+0x264>)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = TRIG_LONG; // long
 800d2b2:	4b51      	ldr	r3, [pc, #324]	@ (800d3f8 <keyScan+0x264>)
 800d2b4:	2202      	movs	r2, #2
 800d2b6:	751a      	strb	r2, [r3, #20]
                keyStruct[1].preKeyValue = TRIG_LONG;
 800d2b8:	4b4f      	ldr	r3, [pc, #316]	@ (800d3f8 <keyScan+0x264>)
 800d2ba:	2202      	movs	r2, #2
 800d2bc:	755a      	strb	r2, [r3, #21]
 800d2be:	e013      	b.n	800d2e8 <keyScan+0x154>
            }
        }
        else if (keyStruct[1].preKeyValue == TRIG_LONG) // long key
 800d2c0:	4b4d      	ldr	r3, [pc, #308]	@ (800d3f8 <keyScan+0x264>)
 800d2c2:	7d5b      	ldrb	r3, [r3, #21]
 800d2c4:	2b02      	cmp	r3, #2
 800d2c6:	d10f      	bne.n	800d2e8 <keyScan+0x154>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_INTEVAL)
 800d2c8:	4b4b      	ldr	r3, [pc, #300]	@ (800d3f8 <keyScan+0x264>)
 800d2ca:	691b      	ldr	r3, [r3, #16]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	4a4a      	ldr	r2, [pc, #296]	@ (800d3f8 <keyScan+0x264>)
 800d2d0:	6113      	str	r3, [r2, #16]
 800d2d2:	4b49      	ldr	r3, [pc, #292]	@ (800d3f8 <keyScan+0x264>)
 800d2d4:	691b      	ldr	r3, [r3, #16]
 800d2d6:	2b27      	cmp	r3, #39	@ 0x27
 800d2d8:	d906      	bls.n	800d2e8 <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800d2da:	4b47      	ldr	r3, [pc, #284]	@ (800d3f8 <keyScan+0x264>)
 800d2dc:	2200      	movs	r2, #0
 800d2de:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = keyStruct[1].preKeyValue;
 800d2e0:	4b45      	ldr	r3, [pc, #276]	@ (800d3f8 <keyScan+0x264>)
 800d2e2:	7d5a      	ldrb	r2, [r3, #21]
 800d2e4:	4b44      	ldr	r3, [pc, #272]	@ (800d3f8 <keyScan+0x264>)
 800d2e6:	751a      	strb	r2, [r3, #20]
            }
        }
    }

    if (keyStruct[2].preKeyValue == NO_TRIG)
 800d2e8:	4b43      	ldr	r3, [pc, #268]	@ (800d3f8 <keyScan+0x264>)
 800d2ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d131      	bne.n	800d356 <keyScan+0x1c2>
    {
        if (keyFlags == K(2))
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	2b02      	cmp	r3, #2
 800d2f6:	d163      	bne.n	800d3c0 <keyScan+0x22c>
        {

            if (keyStruct[2].keyType == SHORT || keyStruct[2].keyType == CONTINUOUS)
 800d2f8:	4b3f      	ldr	r3, [pc, #252]	@ (800d3f8 <keyScan+0x264>)
 800d2fa:	7e1b      	ldrb	r3, [r3, #24]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d003      	beq.n	800d308 <keyScan+0x174>
 800d300:	4b3d      	ldr	r3, [pc, #244]	@ (800d3f8 <keyScan+0x264>)
 800d302:	7e1b      	ldrb	r3, [r3, #24]
 800d304:	2b02      	cmp	r3, #2
 800d306:	d108      	bne.n	800d31a <keyScan+0x186>
            {
                keyStruct[2].trigType = TRIG_SHORT;
 800d308:	4b3b      	ldr	r3, [pc, #236]	@ (800d3f8 <keyScan+0x264>)
 800d30a:	2201      	movs	r2, #1
 800d30c:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_SHORT;
 800d310:	4b39      	ldr	r3, [pc, #228]	@ (800d3f8 <keyScan+0x264>)
 800d312:	2201      	movs	r2, #1
 800d314:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800d318:	e052      	b.n	800d3c0 <keyScan+0x22c>
            }
            else if (keyStruct[2].keyType == LONG_WITH_SHORT || keyStruct[2].keyType == LONG)
 800d31a:	4b37      	ldr	r3, [pc, #220]	@ (800d3f8 <keyScan+0x264>)
 800d31c:	7e1b      	ldrb	r3, [r3, #24]
 800d31e:	2b01      	cmp	r3, #1
 800d320:	d003      	beq.n	800d32a <keyScan+0x196>
 800d322:	4b35      	ldr	r3, [pc, #212]	@ (800d3f8 <keyScan+0x264>)
 800d324:	7e1b      	ldrb	r3, [r3, #24]
 800d326:	2b03      	cmp	r3, #3
 800d328:	d14a      	bne.n	800d3c0 <keyScan+0x22c>
            {
                if (++keyStruct[2].trigCnt >= KEY2_LONG_CNT)
 800d32a:	4b33      	ldr	r3, [pc, #204]	@ (800d3f8 <keyScan+0x264>)
 800d32c:	69db      	ldr	r3, [r3, #28]
 800d32e:	3301      	adds	r3, #1
 800d330:	4a31      	ldr	r2, [pc, #196]	@ (800d3f8 <keyScan+0x264>)
 800d332:	61d3      	str	r3, [r2, #28]
 800d334:	4b30      	ldr	r3, [pc, #192]	@ (800d3f8 <keyScan+0x264>)
 800d336:	69db      	ldr	r3, [r3, #28]
 800d338:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d33c:	d340      	bcc.n	800d3c0 <keyScan+0x22c>
                {
                    keyStruct[2].trigCnt = 0;
 800d33e:	4b2e      	ldr	r3, [pc, #184]	@ (800d3f8 <keyScan+0x264>)
 800d340:	2200      	movs	r2, #0
 800d342:	61da      	str	r2, [r3, #28]
                    keyStruct[2].trigType = TRIG_LONG;
 800d344:	4b2c      	ldr	r3, [pc, #176]	@ (800d3f8 <keyScan+0x264>)
 800d346:	2202      	movs	r2, #2
 800d348:	f883 2020 	strb.w	r2, [r3, #32]
                    keyStruct[2].preKeyValue = TRIG_LONG;
 800d34c:	4b2a      	ldr	r3, [pc, #168]	@ (800d3f8 <keyScan+0x264>)
 800d34e:	2202      	movs	r2, #2
 800d350:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800d354:	e034      	b.n	800d3c0 <keyScan+0x22c>
                }
            }
        }
    }
    else if (keyStruct[2].keyType == CONTINUOUS)
 800d356:	4b28      	ldr	r3, [pc, #160]	@ (800d3f8 <keyScan+0x264>)
 800d358:	7e1b      	ldrb	r3, [r3, #24]
 800d35a:	2b02      	cmp	r3, #2
 800d35c:	d130      	bne.n	800d3c0 <keyScan+0x22c>
    {
        if (keyStruct[2].preKeyValue == TRIG_SHORT) // short key
 800d35e:	4b26      	ldr	r3, [pc, #152]	@ (800d3f8 <keyScan+0x264>)
 800d360:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d364:	2b01      	cmp	r3, #1
 800d366:	d114      	bne.n	800d392 <keyScan+0x1fe>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_TRIG_CNT)
 800d368:	4b23      	ldr	r3, [pc, #140]	@ (800d3f8 <keyScan+0x264>)
 800d36a:	69db      	ldr	r3, [r3, #28]
 800d36c:	3301      	adds	r3, #1
 800d36e:	4a22      	ldr	r2, [pc, #136]	@ (800d3f8 <keyScan+0x264>)
 800d370:	61d3      	str	r3, [r2, #28]
 800d372:	4b21      	ldr	r3, [pc, #132]	@ (800d3f8 <keyScan+0x264>)
 800d374:	69db      	ldr	r3, [r3, #28]
 800d376:	2b63      	cmp	r3, #99	@ 0x63
 800d378:	d922      	bls.n	800d3c0 <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800d37a:	4b1f      	ldr	r3, [pc, #124]	@ (800d3f8 <keyScan+0x264>)
 800d37c:	2200      	movs	r2, #0
 800d37e:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = TRIG_LONG; // long
 800d380:	4b1d      	ldr	r3, [pc, #116]	@ (800d3f8 <keyScan+0x264>)
 800d382:	2202      	movs	r2, #2
 800d384:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_LONG;
 800d388:	4b1b      	ldr	r3, [pc, #108]	@ (800d3f8 <keyScan+0x264>)
 800d38a:	2202      	movs	r2, #2
 800d38c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800d390:	e016      	b.n	800d3c0 <keyScan+0x22c>
            }
        }
        else if (keyStruct[2].preKeyValue == TRIG_LONG) // long key
 800d392:	4b19      	ldr	r3, [pc, #100]	@ (800d3f8 <keyScan+0x264>)
 800d394:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d398:	2b02      	cmp	r3, #2
 800d39a:	d111      	bne.n	800d3c0 <keyScan+0x22c>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_INTEVAL)
 800d39c:	4b16      	ldr	r3, [pc, #88]	@ (800d3f8 <keyScan+0x264>)
 800d39e:	69db      	ldr	r3, [r3, #28]
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	4a15      	ldr	r2, [pc, #84]	@ (800d3f8 <keyScan+0x264>)
 800d3a4:	61d3      	str	r3, [r2, #28]
 800d3a6:	4b14      	ldr	r3, [pc, #80]	@ (800d3f8 <keyScan+0x264>)
 800d3a8:	69db      	ldr	r3, [r3, #28]
 800d3aa:	2b27      	cmp	r3, #39	@ 0x27
 800d3ac:	d908      	bls.n	800d3c0 <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800d3ae:	4b12      	ldr	r3, [pc, #72]	@ (800d3f8 <keyScan+0x264>)
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = keyStruct[2].preKeyValue;
 800d3b4:	4b10      	ldr	r3, [pc, #64]	@ (800d3f8 <keyScan+0x264>)
 800d3b6:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800d3ba:	4b0f      	ldr	r3, [pc, #60]	@ (800d3f8 <keyScan+0x264>)
 800d3bc:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }

    if (keyStruct[3].preKeyValue == NO_TRIG)
 800d3c0:	4b0d      	ldr	r3, [pc, #52]	@ (800d3f8 <keyScan+0x264>)
 800d3c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d137      	bne.n	800d43a <keyScan+0x2a6>
    {
        if (keyFlags == K(3))
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	2b04      	cmp	r3, #4
 800d3ce:	d16a      	bne.n	800d4a6 <keyScan+0x312>
        {
            if (keyStruct[3].keyType == SHORT || keyStruct[3].keyType == CONTINUOUS)
 800d3d0:	4b09      	ldr	r3, [pc, #36]	@ (800d3f8 <keyScan+0x264>)
 800d3d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d004      	beq.n	800d3e4 <keyScan+0x250>
 800d3da:	4b07      	ldr	r3, [pc, #28]	@ (800d3f8 <keyScan+0x264>)
 800d3dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d3e0:	2b02      	cmp	r3, #2
 800d3e2:	d10b      	bne.n	800d3fc <keyScan+0x268>
            {
                keyStruct[3].trigType = TRIG_SHORT;
 800d3e4:	4b04      	ldr	r3, [pc, #16]	@ (800d3f8 <keyScan+0x264>)
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_SHORT;
 800d3ec:	4b02      	ldr	r3, [pc, #8]	@ (800d3f8 <keyScan+0x264>)
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                keyStruct[3].trigCnt = 0;
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
            }
        }
    }
}
 800d3f4:	e057      	b.n	800d4a6 <keyScan+0x312>
 800d3f6:	bf00      	nop
 800d3f8:	20000c54 	.word	0x20000c54
            else if (keyStruct[3].keyType == LONG_WITH_SHORT || keyStruct[3].keyType == LONG)
 800d3fc:	4b2c      	ldr	r3, [pc, #176]	@ (800d4b0 <keyScan+0x31c>)
 800d3fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d402:	2b01      	cmp	r3, #1
 800d404:	d004      	beq.n	800d410 <keyScan+0x27c>
 800d406:	4b2a      	ldr	r3, [pc, #168]	@ (800d4b0 <keyScan+0x31c>)
 800d408:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d40c:	2b03      	cmp	r3, #3
 800d40e:	d14a      	bne.n	800d4a6 <keyScan+0x312>
                if (++keyStruct[3].trigCnt >= KEY3_LONG_CNT)
 800d410:	4b27      	ldr	r3, [pc, #156]	@ (800d4b0 <keyScan+0x31c>)
 800d412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d414:	3301      	adds	r3, #1
 800d416:	4a26      	ldr	r2, [pc, #152]	@ (800d4b0 <keyScan+0x31c>)
 800d418:	6293      	str	r3, [r2, #40]	@ 0x28
 800d41a:	4b25      	ldr	r3, [pc, #148]	@ (800d4b0 <keyScan+0x31c>)
 800d41c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d041      	beq.n	800d4a6 <keyScan+0x312>
                    keyStruct[3].trigCnt = 0;
 800d422:	4b23      	ldr	r3, [pc, #140]	@ (800d4b0 <keyScan+0x31c>)
 800d424:	2200      	movs	r2, #0
 800d426:	629a      	str	r2, [r3, #40]	@ 0x28
                    keyStruct[3].trigType = TRIG_LONG;
 800d428:	4b21      	ldr	r3, [pc, #132]	@ (800d4b0 <keyScan+0x31c>)
 800d42a:	2202      	movs	r2, #2
 800d42c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                    keyStruct[3].preKeyValue = TRIG_LONG;
 800d430:	4b1f      	ldr	r3, [pc, #124]	@ (800d4b0 <keyScan+0x31c>)
 800d432:	2202      	movs	r2, #2
 800d434:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800d438:	e035      	b.n	800d4a6 <keyScan+0x312>
    else if (keyStruct[3].keyType == CONTINUOUS)
 800d43a:	4b1d      	ldr	r3, [pc, #116]	@ (800d4b0 <keyScan+0x31c>)
 800d43c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d440:	2b02      	cmp	r3, #2
 800d442:	d130      	bne.n	800d4a6 <keyScan+0x312>
        if (keyStruct[3].preKeyValue == TRIG_SHORT) // short key
 800d444:	4b1a      	ldr	r3, [pc, #104]	@ (800d4b0 <keyScan+0x31c>)
 800d446:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	d114      	bne.n	800d478 <keyScan+0x2e4>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_TRIG_CNT)
 800d44e:	4b18      	ldr	r3, [pc, #96]	@ (800d4b0 <keyScan+0x31c>)
 800d450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d452:	3301      	adds	r3, #1
 800d454:	4a16      	ldr	r2, [pc, #88]	@ (800d4b0 <keyScan+0x31c>)
 800d456:	6293      	str	r3, [r2, #40]	@ 0x28
 800d458:	4b15      	ldr	r3, [pc, #84]	@ (800d4b0 <keyScan+0x31c>)
 800d45a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d45c:	2b63      	cmp	r3, #99	@ 0x63
 800d45e:	d922      	bls.n	800d4a6 <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800d460:	4b13      	ldr	r3, [pc, #76]	@ (800d4b0 <keyScan+0x31c>)
 800d462:	2200      	movs	r2, #0
 800d464:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = TRIG_LONG; // long
 800d466:	4b12      	ldr	r3, [pc, #72]	@ (800d4b0 <keyScan+0x31c>)
 800d468:	2202      	movs	r2, #2
 800d46a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_LONG;
 800d46e:	4b10      	ldr	r3, [pc, #64]	@ (800d4b0 <keyScan+0x31c>)
 800d470:	2202      	movs	r2, #2
 800d472:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800d476:	e016      	b.n	800d4a6 <keyScan+0x312>
        else if (keyStruct[3].preKeyValue == TRIG_LONG) // long key
 800d478:	4b0d      	ldr	r3, [pc, #52]	@ (800d4b0 <keyScan+0x31c>)
 800d47a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d47e:	2b02      	cmp	r3, #2
 800d480:	d111      	bne.n	800d4a6 <keyScan+0x312>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_INTEVAL)
 800d482:	4b0b      	ldr	r3, [pc, #44]	@ (800d4b0 <keyScan+0x31c>)
 800d484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d486:	3301      	adds	r3, #1
 800d488:	4a09      	ldr	r2, [pc, #36]	@ (800d4b0 <keyScan+0x31c>)
 800d48a:	6293      	str	r3, [r2, #40]	@ 0x28
 800d48c:	4b08      	ldr	r3, [pc, #32]	@ (800d4b0 <keyScan+0x31c>)
 800d48e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d490:	2b27      	cmp	r3, #39	@ 0x27
 800d492:	d908      	bls.n	800d4a6 <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800d494:	4b06      	ldr	r3, [pc, #24]	@ (800d4b0 <keyScan+0x31c>)
 800d496:	2200      	movs	r2, #0
 800d498:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
 800d49a:	4b05      	ldr	r3, [pc, #20]	@ (800d4b0 <keyScan+0x31c>)
 800d49c:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800d4a0:	4b03      	ldr	r3, [pc, #12]	@ (800d4b0 <keyScan+0x31c>)
 800d4a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 800d4a6:	bf00      	nop
 800d4a8:	3708      	adds	r7, #8
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	20000c54 	.word	0x20000c54

0800d4b4 <getKeyState>:

/*
将物理按键转化为逻辑按键
 */
void getKeyState(KeyState *keyState)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b085      	sub	sp, #20
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
    uchar i;

    if (keyStruct[1].trigType == TRIG_SHORT)
 800d4bc:	4b1b      	ldr	r3, [pc, #108]	@ (800d52c <getKeyState+0x78>)
 800d4be:	7d1b      	ldrb	r3, [r3, #20]
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d103      	bne.n	800d4cc <getKeyState+0x18>
        *keyState = USER1_SHORT;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	701a      	strb	r2, [r3, #0]
 800d4ca:	e014      	b.n	800d4f6 <getKeyState+0x42>
    else if (keyStruct[2].trigType == TRIG_SHORT)
 800d4cc:	4b17      	ldr	r3, [pc, #92]	@ (800d52c <getKeyState+0x78>)
 800d4ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d103      	bne.n	800d4de <getKeyState+0x2a>
        *keyState = USER2_SHORT;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2202      	movs	r2, #2
 800d4da:	701a      	strb	r2, [r3, #0]
 800d4dc:	e00b      	b.n	800d4f6 <getKeyState+0x42>
    else if (keyStruct[3].trigType == TRIG_SHORT)
 800d4de:	4b13      	ldr	r3, [pc, #76]	@ (800d52c <getKeyState+0x78>)
 800d4e0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d103      	bne.n	800d4f0 <getKeyState+0x3c>
        *keyState = USER3_SHORT;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2203      	movs	r2, #3
 800d4ec:	701a      	strb	r2, [r3, #0]
 800d4ee:	e002      	b.n	800d4f6 <getKeyState+0x42>
    else
        *keyState = NONE_KEY;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < KEY_NUM; i++)
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	73fb      	strb	r3, [r7, #15]
 800d4fa:	e00c      	b.n	800d516 <getKeyState+0x62>
    {
        keyStruct[i].trigType = NO_TRIG;
 800d4fc:	7bfa      	ldrb	r2, [r7, #15]
 800d4fe:	490b      	ldr	r1, [pc, #44]	@ (800d52c <getKeyState+0x78>)
 800d500:	4613      	mov	r3, r2
 800d502:	005b      	lsls	r3, r3, #1
 800d504:	4413      	add	r3, r2
 800d506:	009b      	lsls	r3, r3, #2
 800d508:	440b      	add	r3, r1
 800d50a:	3308      	adds	r3, #8
 800d50c:	2200      	movs	r2, #0
 800d50e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < KEY_NUM; i++)
 800d510:	7bfb      	ldrb	r3, [r7, #15]
 800d512:	3301      	adds	r3, #1
 800d514:	73fb      	strb	r3, [r7, #15]
 800d516:	7bfb      	ldrb	r3, [r7, #15]
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d9ef      	bls.n	800d4fc <getKeyState+0x48>
    }
}
 800d51c:	bf00      	nop
 800d51e:	bf00      	nop
 800d520:	3714      	adds	r7, #20
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr
 800d52a:	bf00      	nop
 800d52c:	20000c54 	.word	0x20000c54

0800d530 <LED_drive>:
#include "led.h"

bool ledOn;

void LED_drive()
{
 800d530:	b480      	push	{r7}
 800d532:	af00      	add	r7, sp, #0
    // if (ledOn)
    //     LED_ON;
    // else
    //     LED_OFF;
}
 800d534:	bf00      	nop
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr
	...

0800d540 <inv_sqrt>:

// 快速平方根倒数，计算 1/Sqrt(x)
// X:数字还需要计算
// 调用imu ahrs update()函数
float inv_sqrt(float x)
{
 800d540:	b480      	push	{r7}
 800d542:	b087      	sub	sp, #28
 800d544:	af00      	add	r7, sp, #0
 800d546:	ed87 0a01 	vstr	s0, [r7, #4]
    float halfx = 0.5f * x;
 800d54a:	edd7 7a01 	vldr	s15, [r7, #4]
 800d54e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d552:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d556:	edc7 7a05 	vstr	s15, [r7, #20]
    float y = x;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	613b      	str	r3, [r7, #16]
    long i = *(long *)&y;
 800d55e:	f107 0310 	add.w	r3, r7, #16
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	60fb      	str	r3, [r7, #12]

    i = 0x5f3759df - (i >> 1);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	105a      	asrs	r2, r3, #1
 800d56a:	4b12      	ldr	r3, [pc, #72]	@ (800d5b4 <inv_sqrt+0x74>)
 800d56c:	1a9b      	subs	r3, r3, r2
 800d56e:	60fb      	str	r3, [r7, #12]
    y = *(float *)&i;
 800d570:	f107 030c 	add.w	r3, r7, #12
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	613b      	str	r3, [r7, #16]
    y = y * (1.5f - (halfx * y * y));
 800d578:	ed97 7a04 	vldr	s14, [r7, #16]
 800d57c:	edd7 7a05 	vldr	s15, [r7, #20]
 800d580:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d584:	edd7 7a04 	vldr	s15, [r7, #16]
 800d588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d58c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800d590:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d594:	edd7 7a04 	vldr	s15, [r7, #16]
 800d598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d59c:	edc7 7a04 	vstr	s15, [r7, #16]

    return y;
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	ee07 3a90 	vmov	s15, r3
}
 800d5a6:	eeb0 0a67 	vmov.f32	s0, s15
 800d5aa:	371c      	adds	r7, #28
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr
 800d5b4:	5f3759df 	.word	0x5f3759df

0800d5b8 <mpu_write_byte>:
// MPU6500单次写命令
uint8_t mpu_write_byte(uint8_t const reg, uint8_t const data)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af02      	add	r7, sp, #8
 800d5be:	4603      	mov	r3, r0
 800d5c0:	460a      	mov	r2, r1
 800d5c2:	71fb      	strb	r3, [r7, #7]
 800d5c4:	4613      	mov	r3, r2
 800d5c6:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;                                         // 开始通讯
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	2110      	movs	r1, #16
 800d5cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d5d0:	f7f9 f9b0 	bl	8006934 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;                                     // 使第一位为0（写模式）
 800d5d4:	79fb      	ldrb	r3, [r7, #7]
 800d5d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5da:	b2da      	uxtb	r2, r3
 800d5dc:	4b0f      	ldr	r3, [pc, #60]	@ (800d61c <mpu_write_byte+0x64>)
 800d5de:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入命令地址
 800d5e0:	2337      	movs	r3, #55	@ 0x37
 800d5e2:	9300      	str	r3, [sp, #0]
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	4a0e      	ldr	r2, [pc, #56]	@ (800d620 <mpu_write_byte+0x68>)
 800d5e8:	490c      	ldr	r1, [pc, #48]	@ (800d61c <mpu_write_byte+0x64>)
 800d5ea:	480e      	ldr	r0, [pc, #56]	@ (800d624 <mpu_write_byte+0x6c>)
 800d5ec:	f7fa fa37 	bl	8007a5e <HAL_SPI_TransmitReceive>
    tx = data;
 800d5f0:	4a0a      	ldr	r2, [pc, #40]	@ (800d61c <mpu_write_byte+0x64>)
 800d5f2:	79bb      	ldrb	r3, [r7, #6]
 800d5f4:	7013      	strb	r3, [r2, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入数据
 800d5f6:	2337      	movs	r3, #55	@ 0x37
 800d5f8:	9300      	str	r3, [sp, #0]
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	4a08      	ldr	r2, [pc, #32]	@ (800d620 <mpu_write_byte+0x68>)
 800d5fe:	4907      	ldr	r1, [pc, #28]	@ (800d61c <mpu_write_byte+0x64>)
 800d600:	4808      	ldr	r0, [pc, #32]	@ (800d624 <mpu_write_byte+0x6c>)
 800d602:	f7fa fa2c 	bl	8007a5e <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;                                        // 结束通讯
 800d606:	2201      	movs	r2, #1
 800d608:	2110      	movs	r1, #16
 800d60a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d60e:	f7f9 f991 	bl	8006934 <HAL_GPIO_WritePin>
    return 0;
 800d612:	2300      	movs	r3, #0
}
 800d614:	4618      	mov	r0, r3
 800d616:	3708      	adds	r7, #8
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	20000c79 	.word	0x20000c79
 800d620:	20000c7a 	.word	0x20000c7a
 800d624:	200003f4 	.word	0x200003f4

0800d628 <mpu_read_byte>:
// MPU6500单次读取单字节数据
uint8_t mpu_read_byte(uint8_t const reg)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af02      	add	r7, sp, #8
 800d62e:	4603      	mov	r3, r0
 800d630:	71fb      	strb	r3, [r7, #7]
    MPU_NSS_LOW;
 800d632:	2200      	movs	r2, #0
 800d634:	2110      	movs	r1, #16
 800d636:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d63a:	f7f9 f97b 	bl	8006934 <HAL_GPIO_WritePin>
    tx = reg | 0x80;                                     // 使地址第一位为1（读模式）
 800d63e:	79fb      	ldrb	r3, [r7, #7]
 800d640:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d644:	b2da      	uxtb	r2, r3
 800d646:	4b0f      	ldr	r3, [pc, #60]	@ (800d684 <mpu_read_byte+0x5c>)
 800d648:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入需要读取的地址
 800d64a:	2337      	movs	r3, #55	@ 0x37
 800d64c:	9300      	str	r3, [sp, #0]
 800d64e:	2301      	movs	r3, #1
 800d650:	4a0d      	ldr	r2, [pc, #52]	@ (800d688 <mpu_read_byte+0x60>)
 800d652:	490c      	ldr	r1, [pc, #48]	@ (800d684 <mpu_read_byte+0x5c>)
 800d654:	480d      	ldr	r0, [pc, #52]	@ (800d68c <mpu_read_byte+0x64>)
 800d656:	f7fa fa02 	bl	8007a5e <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 为读取的数据提供存储空间
 800d65a:	2337      	movs	r3, #55	@ 0x37
 800d65c:	9300      	str	r3, [sp, #0]
 800d65e:	2301      	movs	r3, #1
 800d660:	4a09      	ldr	r2, [pc, #36]	@ (800d688 <mpu_read_byte+0x60>)
 800d662:	4908      	ldr	r1, [pc, #32]	@ (800d684 <mpu_read_byte+0x5c>)
 800d664:	4809      	ldr	r0, [pc, #36]	@ (800d68c <mpu_read_byte+0x64>)
 800d666:	f7fa f9fa 	bl	8007a5e <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800d66a:	2201      	movs	r2, #1
 800d66c:	2110      	movs	r1, #16
 800d66e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d672:	f7f9 f95f 	bl	8006934 <HAL_GPIO_WritePin>
    return rx;
 800d676:	4b04      	ldr	r3, [pc, #16]	@ (800d688 <mpu_read_byte+0x60>)
 800d678:	781b      	ldrb	r3, [r3, #0]
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	20000c79 	.word	0x20000c79
 800d688:	20000c7a 	.word	0x20000c7a
 800d68c:	200003f4 	.word	0x200003f4

0800d690 <mpu_read_bytes>:

// MPU6500单次读取多字节数据
uint8_t mpu_read_bytes(uint8_t const regAddr, uint8_t *pData, uint8_t len)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af02      	add	r7, sp, #8
 800d696:	4603      	mov	r3, r0
 800d698:	6039      	str	r1, [r7, #0]
 800d69a:	71fb      	strb	r3, [r7, #7]
 800d69c:	4613      	mov	r3, r2
 800d69e:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	2110      	movs	r1, #16
 800d6a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d6a8:	f7f9 f944 	bl	8006934 <HAL_GPIO_WritePin>
    tx = regAddr | 0x80;
 800d6ac:	79fb      	ldrb	r3, [r7, #7]
 800d6ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d6b2:	b2da      	uxtb	r2, r3
 800d6b4:	4b10      	ldr	r3, [pc, #64]	@ (800d6f8 <mpu_read_bytes+0x68>)
 800d6b6:	701a      	strb	r2, [r3, #0]
    tx_buff[0] = tx;
 800d6b8:	4b0f      	ldr	r3, [pc, #60]	@ (800d6f8 <mpu_read_bytes+0x68>)
 800d6ba:	781a      	ldrb	r2, [r3, #0]
 800d6bc:	4b0f      	ldr	r3, [pc, #60]	@ (800d6fc <mpu_read_bytes+0x6c>)
 800d6be:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800d6c0:	2337      	movs	r3, #55	@ 0x37
 800d6c2:	9300      	str	r3, [sp, #0]
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	4a0e      	ldr	r2, [pc, #56]	@ (800d700 <mpu_read_bytes+0x70>)
 800d6c8:	490b      	ldr	r1, [pc, #44]	@ (800d6f8 <mpu_read_bytes+0x68>)
 800d6ca:	480e      	ldr	r0, [pc, #56]	@ (800d704 <mpu_read_bytes+0x74>)
 800d6cc:	f7fa f9c7 	bl	8007a5e <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 800d6d0:	79bb      	ldrb	r3, [r7, #6]
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	2237      	movs	r2, #55	@ 0x37
 800d6d6:	9200      	str	r2, [sp, #0]
 800d6d8:	683a      	ldr	r2, [r7, #0]
 800d6da:	4908      	ldr	r1, [pc, #32]	@ (800d6fc <mpu_read_bytes+0x6c>)
 800d6dc:	4809      	ldr	r0, [pc, #36]	@ (800d704 <mpu_read_bytes+0x74>)
 800d6de:	f7fa f9be 	bl	8007a5e <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	2110      	movs	r1, #16
 800d6e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d6ea:	f7f9 f923 	bl	8006934 <HAL_GPIO_WritePin>
    return 0;
 800d6ee:	2300      	movs	r3, #0
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3708      	adds	r7, #8
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}
 800d6f8:	20000c79 	.word	0x20000c79
 800d6fc:	200000b8 	.word	0x200000b8
 800d700:	20000c7a 	.word	0x20000c7a
 800d704:	200003f4 	.word	0x200003f4

0800d708 <mpu_set_gyro_fsr>:

// 设置imu 6500陀螺仪测量范围
uint8_t mpu_set_gyro_fsr(uint8_t fsr)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	4603      	mov	r3, r0
 800d710:	71fb      	strb	r3, [r7, #7]
    return mpu_write_byte(MPU6500_GYRO_CONFIG, fsr << 3);
 800d712:	79fb      	ldrb	r3, [r7, #7]
 800d714:	00db      	lsls	r3, r3, #3
 800d716:	b2db      	uxtb	r3, r3
 800d718:	4619      	mov	r1, r3
 800d71a:	201b      	movs	r0, #27
 800d71c:	f7ff ff4c 	bl	800d5b8 <mpu_write_byte>
 800d720:	4603      	mov	r3, r0
}
 800d722:	4618      	mov	r0, r3
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <mpu_set_accel_fsr>:
// 设置imu 6050/6500加速测量范围
uint8_t mpu_set_accel_fsr(uint8_t fsr)
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b082      	sub	sp, #8
 800d72e:	af00      	add	r7, sp, #0
 800d730:	4603      	mov	r3, r0
 800d732:	71fb      	strb	r3, [r7, #7]
    return mpu_write_byte(MPU6500_ACCEL_CONFIG, fsr << 3);
 800d734:	79fb      	ldrb	r3, [r7, #7]
 800d736:	00db      	lsls	r3, r3, #3
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	4619      	mov	r1, r3
 800d73c:	201c      	movs	r0, #28
 800d73e:	f7ff ff3b 	bl	800d5b8 <mpu_write_byte>
 800d742:	4603      	mov	r3, r0
}
 800d744:	4618      	mov	r0, r3
 800d746:	3708      	adds	r7, #8
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <mpu_get_data>:
// 获取IMU数据
void mpu_get_data()
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	af00      	add	r7, sp, #0
    mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800d750:	220e      	movs	r2, #14
 800d752:	495c      	ldr	r1, [pc, #368]	@ (800d8c4 <mpu_get_data+0x178>)
 800d754:	203b      	movs	r0, #59	@ 0x3b
 800d756:	f7ff ff9b 	bl	800d690 <mpu_read_bytes>

    mpu_data.ax = mpu_buff[0] << 8 | mpu_buff[1];
 800d75a:	4b5a      	ldr	r3, [pc, #360]	@ (800d8c4 <mpu_get_data+0x178>)
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	021b      	lsls	r3, r3, #8
 800d760:	b21a      	sxth	r2, r3
 800d762:	4b58      	ldr	r3, [pc, #352]	@ (800d8c4 <mpu_get_data+0x178>)
 800d764:	785b      	ldrb	r3, [r3, #1]
 800d766:	b21b      	sxth	r3, r3
 800d768:	4313      	orrs	r3, r2
 800d76a:	b21a      	sxth	r2, r3
 800d76c:	4b56      	ldr	r3, [pc, #344]	@ (800d8c8 <mpu_get_data+0x17c>)
 800d76e:	801a      	strh	r2, [r3, #0]
    mpu_data.ay = mpu_buff[2] << 8 | mpu_buff[3];
 800d770:	4b54      	ldr	r3, [pc, #336]	@ (800d8c4 <mpu_get_data+0x178>)
 800d772:	789b      	ldrb	r3, [r3, #2]
 800d774:	021b      	lsls	r3, r3, #8
 800d776:	b21a      	sxth	r2, r3
 800d778:	4b52      	ldr	r3, [pc, #328]	@ (800d8c4 <mpu_get_data+0x178>)
 800d77a:	78db      	ldrb	r3, [r3, #3]
 800d77c:	b21b      	sxth	r3, r3
 800d77e:	4313      	orrs	r3, r2
 800d780:	b21a      	sxth	r2, r3
 800d782:	4b51      	ldr	r3, [pc, #324]	@ (800d8c8 <mpu_get_data+0x17c>)
 800d784:	805a      	strh	r2, [r3, #2]
    mpu_data.az = mpu_buff[4] << 8 | mpu_buff[5];
 800d786:	4b4f      	ldr	r3, [pc, #316]	@ (800d8c4 <mpu_get_data+0x178>)
 800d788:	791b      	ldrb	r3, [r3, #4]
 800d78a:	021b      	lsls	r3, r3, #8
 800d78c:	b21a      	sxth	r2, r3
 800d78e:	4b4d      	ldr	r3, [pc, #308]	@ (800d8c4 <mpu_get_data+0x178>)
 800d790:	795b      	ldrb	r3, [r3, #5]
 800d792:	b21b      	sxth	r3, r3
 800d794:	4313      	orrs	r3, r2
 800d796:	b21a      	sxth	r2, r3
 800d798:	4b4b      	ldr	r3, [pc, #300]	@ (800d8c8 <mpu_get_data+0x17c>)
 800d79a:	809a      	strh	r2, [r3, #4]
    mpu_data.temp = mpu_buff[6] << 8 | mpu_buff[7];
 800d79c:	4b49      	ldr	r3, [pc, #292]	@ (800d8c4 <mpu_get_data+0x178>)
 800d79e:	799b      	ldrb	r3, [r3, #6]
 800d7a0:	021b      	lsls	r3, r3, #8
 800d7a2:	b21a      	sxth	r2, r3
 800d7a4:	4b47      	ldr	r3, [pc, #284]	@ (800d8c4 <mpu_get_data+0x178>)
 800d7a6:	79db      	ldrb	r3, [r3, #7]
 800d7a8:	b21b      	sxth	r3, r3
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	b21a      	sxth	r2, r3
 800d7ae:	4b46      	ldr	r3, [pc, #280]	@ (800d8c8 <mpu_get_data+0x17c>)
 800d7b0:	819a      	strh	r2, [r3, #12]

    mpu_data.gx = ((mpu_buff[8] << 8 | mpu_buff[9]) - mpu_data.gx_offset);
 800d7b2:	4b44      	ldr	r3, [pc, #272]	@ (800d8c4 <mpu_get_data+0x178>)
 800d7b4:	7a1b      	ldrb	r3, [r3, #8]
 800d7b6:	021b      	lsls	r3, r3, #8
 800d7b8:	b21a      	sxth	r2, r3
 800d7ba:	4b42      	ldr	r3, [pc, #264]	@ (800d8c4 <mpu_get_data+0x178>)
 800d7bc:	7a5b      	ldrb	r3, [r3, #9]
 800d7be:	b21b      	sxth	r3, r3
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	b21b      	sxth	r3, r3
 800d7c4:	b29a      	uxth	r2, r3
 800d7c6:	4b40      	ldr	r3, [pc, #256]	@ (800d8c8 <mpu_get_data+0x17c>)
 800d7c8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	1ad3      	subs	r3, r2, r3
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	b21a      	sxth	r2, r3
 800d7d4:	4b3c      	ldr	r3, [pc, #240]	@ (800d8c8 <mpu_get_data+0x17c>)
 800d7d6:	81da      	strh	r2, [r3, #14]
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 800d7d8:	4b3a      	ldr	r3, [pc, #232]	@ (800d8c4 <mpu_get_data+0x178>)
 800d7da:	7a9b      	ldrb	r3, [r3, #10]
 800d7dc:	021b      	lsls	r3, r3, #8
 800d7de:	b21a      	sxth	r2, r3
 800d7e0:	4b38      	ldr	r3, [pc, #224]	@ (800d8c4 <mpu_get_data+0x178>)
 800d7e2:	7adb      	ldrb	r3, [r3, #11]
 800d7e4:	b21b      	sxth	r3, r3
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	b21b      	sxth	r3, r3
 800d7ea:	b29a      	uxth	r2, r3
 800d7ec:	4b36      	ldr	r3, [pc, #216]	@ (800d8c8 <mpu_get_data+0x17c>)
 800d7ee:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	1ad3      	subs	r3, r2, r3
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	b21a      	sxth	r2, r3
 800d7fa:	4b33      	ldr	r3, [pc, #204]	@ (800d8c8 <mpu_get_data+0x17c>)
 800d7fc:	821a      	strh	r2, [r3, #16]
    mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 800d7fe:	4b31      	ldr	r3, [pc, #196]	@ (800d8c4 <mpu_get_data+0x178>)
 800d800:	7b1b      	ldrb	r3, [r3, #12]
 800d802:	021b      	lsls	r3, r3, #8
 800d804:	b21a      	sxth	r2, r3
 800d806:	4b2f      	ldr	r3, [pc, #188]	@ (800d8c4 <mpu_get_data+0x178>)
 800d808:	7b5b      	ldrb	r3, [r3, #13]
 800d80a:	b21b      	sxth	r3, r3
 800d80c:	4313      	orrs	r3, r2
 800d80e:	b21b      	sxth	r3, r3
 800d810:	b29a      	uxth	r2, r3
 800d812:	4b2d      	ldr	r3, [pc, #180]	@ (800d8c8 <mpu_get_data+0x17c>)
 800d814:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800d818:	b29b      	uxth	r3, r3
 800d81a:	1ad3      	subs	r3, r2, r3
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	b21a      	sxth	r2, r3
 800d820:	4b29      	ldr	r3, [pc, #164]	@ (800d8c8 <mpu_get_data+0x17c>)
 800d822:	825a      	strh	r2, [r3, #18]

    // ist8310_get_data(ist_buff);
    // memcpy(&mpu_data.mx, ist_buff, 6);

    memcpy(&imu.ax, &mpu_data.ax, 6 * sizeof(int16_t));
 800d824:	220c      	movs	r2, #12
 800d826:	4928      	ldr	r1, [pc, #160]	@ (800d8c8 <mpu_get_data+0x17c>)
 800d828:	4828      	ldr	r0, [pc, #160]	@ (800d8cc <mpu_get_data+0x180>)
 800d82a:	f003 f99e 	bl	8010b6a <memcpy>

    imu.temp = 21 + mpu_data.temp / 333.87f;
 800d82e:	4b26      	ldr	r3, [pc, #152]	@ (800d8c8 <mpu_get_data+0x17c>)
 800d830:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800d834:	ee07 3a90 	vmov	s15, r3
 800d838:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d83c:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800d8d0 <mpu_get_data+0x184>
 800d840:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d844:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 800d848:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d84c:	4b1f      	ldr	r3, [pc, #124]	@ (800d8cc <mpu_get_data+0x180>)
 800d84e:	edc3 7a03 	vstr	s15, [r3, #12]
    /* 2000dps -> rad/s */
    imu.wx = mpu_data.gx / 16.384f / 57.3f;
 800d852:	4b1d      	ldr	r3, [pc, #116]	@ (800d8c8 <mpu_get_data+0x17c>)
 800d854:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d858:	ee07 3a90 	vmov	s15, r3
 800d85c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d860:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800d8d4 <mpu_get_data+0x188>
 800d864:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d868:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 800d8d8 <mpu_get_data+0x18c>
 800d86c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d870:	4b16      	ldr	r3, [pc, #88]	@ (800d8cc <mpu_get_data+0x180>)
 800d872:	edc3 7a04 	vstr	s15, [r3, #16]
    imu.wy = mpu_data.gy / 16.384f / 57.3f;
 800d876:	4b14      	ldr	r3, [pc, #80]	@ (800d8c8 <mpu_get_data+0x17c>)
 800d878:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800d87c:	ee07 3a90 	vmov	s15, r3
 800d880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d884:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800d8d4 <mpu_get_data+0x188>
 800d888:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d88c:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800d8d8 <mpu_get_data+0x18c>
 800d890:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d894:	4b0d      	ldr	r3, [pc, #52]	@ (800d8cc <mpu_get_data+0x180>)
 800d896:	edc3 7a05 	vstr	s15, [r3, #20]
    imu.wz = mpu_data.gz / 16.384f / 57.3f;
 800d89a:	4b0b      	ldr	r3, [pc, #44]	@ (800d8c8 <mpu_get_data+0x17c>)
 800d89c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d8a0:	ee07 3a90 	vmov	s15, r3
 800d8a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8a8:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800d8d4 <mpu_get_data+0x188>
 800d8ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d8b0:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800d8d8 <mpu_get_data+0x18c>
 800d8b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d8b8:	4b04      	ldr	r3, [pc, #16]	@ (800d8cc <mpu_get_data+0x180>)
 800d8ba:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800d8be:	bf00      	nop
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	20000c94 	.word	0x20000c94
 800d8c8:	20000ca4 	.word	0x20000ca4
 800d8cc:	20000cc4 	.word	0x20000cc4
 800d8d0:	43a6ef5c 	.word	0x43a6ef5c
 800d8d4:	4183126f 	.word	0x4183126f
 800d8d8:	42653333 	.word	0x42653333

0800d8dc <mpu_offset_call>:
// 获取MPU6500的偏移量数据
void mpu_offset_call(void)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 300; i++)
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	607b      	str	r3, [r7, #4]
 800d8e6:	e07c      	b.n	800d9e2 <mpu_offset_call+0x106>
    {
        mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800d8e8:	220e      	movs	r2, #14
 800d8ea:	4966      	ldr	r1, [pc, #408]	@ (800da84 <mpu_offset_call+0x1a8>)
 800d8ec:	203b      	movs	r0, #59	@ 0x3b
 800d8ee:	f7ff fecf 	bl	800d690 <mpu_read_bytes>

        mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 800d8f2:	4b65      	ldr	r3, [pc, #404]	@ (800da88 <mpu_offset_call+0x1ac>)
 800d8f4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800d8f8:	b29a      	uxth	r2, r3
 800d8fa:	4b62      	ldr	r3, [pc, #392]	@ (800da84 <mpu_offset_call+0x1a8>)
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	021b      	lsls	r3, r3, #8
 800d900:	b219      	sxth	r1, r3
 800d902:	4b60      	ldr	r3, [pc, #384]	@ (800da84 <mpu_offset_call+0x1a8>)
 800d904:	785b      	ldrb	r3, [r3, #1]
 800d906:	b21b      	sxth	r3, r3
 800d908:	430b      	orrs	r3, r1
 800d90a:	b21b      	sxth	r3, r3
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	4413      	add	r3, r2
 800d910:	b29b      	uxth	r3, r3
 800d912:	b21a      	sxth	r2, r3
 800d914:	4b5c      	ldr	r3, [pc, #368]	@ (800da88 <mpu_offset_call+0x1ac>)
 800d916:	829a      	strh	r2, [r3, #20]
        mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 800d918:	4b5b      	ldr	r3, [pc, #364]	@ (800da88 <mpu_offset_call+0x1ac>)
 800d91a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800d91e:	b29a      	uxth	r2, r3
 800d920:	4b58      	ldr	r3, [pc, #352]	@ (800da84 <mpu_offset_call+0x1a8>)
 800d922:	789b      	ldrb	r3, [r3, #2]
 800d924:	021b      	lsls	r3, r3, #8
 800d926:	b219      	sxth	r1, r3
 800d928:	4b56      	ldr	r3, [pc, #344]	@ (800da84 <mpu_offset_call+0x1a8>)
 800d92a:	78db      	ldrb	r3, [r3, #3]
 800d92c:	b21b      	sxth	r3, r3
 800d92e:	430b      	orrs	r3, r1
 800d930:	b21b      	sxth	r3, r3
 800d932:	b29b      	uxth	r3, r3
 800d934:	4413      	add	r3, r2
 800d936:	b29b      	uxth	r3, r3
 800d938:	b21a      	sxth	r2, r3
 800d93a:	4b53      	ldr	r3, [pc, #332]	@ (800da88 <mpu_offset_call+0x1ac>)
 800d93c:	82da      	strh	r2, [r3, #22]
        mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
 800d93e:	4b52      	ldr	r3, [pc, #328]	@ (800da88 <mpu_offset_call+0x1ac>)
 800d940:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800d944:	b29a      	uxth	r2, r3
 800d946:	4b4f      	ldr	r3, [pc, #316]	@ (800da84 <mpu_offset_call+0x1a8>)
 800d948:	791b      	ldrb	r3, [r3, #4]
 800d94a:	021b      	lsls	r3, r3, #8
 800d94c:	b219      	sxth	r1, r3
 800d94e:	4b4d      	ldr	r3, [pc, #308]	@ (800da84 <mpu_offset_call+0x1a8>)
 800d950:	795b      	ldrb	r3, [r3, #5]
 800d952:	b21b      	sxth	r3, r3
 800d954:	430b      	orrs	r3, r1
 800d956:	b21b      	sxth	r3, r3
 800d958:	b29b      	uxth	r3, r3
 800d95a:	4413      	add	r3, r2
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	b21a      	sxth	r2, r3
 800d960:	4b49      	ldr	r3, [pc, #292]	@ (800da88 <mpu_offset_call+0x1ac>)
 800d962:	831a      	strh	r2, [r3, #24]

        mpu_data.gx_offset += mpu_buff[8] << 8 | mpu_buff[9];
 800d964:	4b48      	ldr	r3, [pc, #288]	@ (800da88 <mpu_offset_call+0x1ac>)
 800d966:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	4b45      	ldr	r3, [pc, #276]	@ (800da84 <mpu_offset_call+0x1a8>)
 800d96e:	7a1b      	ldrb	r3, [r3, #8]
 800d970:	021b      	lsls	r3, r3, #8
 800d972:	b219      	sxth	r1, r3
 800d974:	4b43      	ldr	r3, [pc, #268]	@ (800da84 <mpu_offset_call+0x1a8>)
 800d976:	7a5b      	ldrb	r3, [r3, #9]
 800d978:	b21b      	sxth	r3, r3
 800d97a:	430b      	orrs	r3, r1
 800d97c:	b21b      	sxth	r3, r3
 800d97e:	b29b      	uxth	r3, r3
 800d980:	4413      	add	r3, r2
 800d982:	b29b      	uxth	r3, r3
 800d984:	b21a      	sxth	r2, r3
 800d986:	4b40      	ldr	r3, [pc, #256]	@ (800da88 <mpu_offset_call+0x1ac>)
 800d988:	835a      	strh	r2, [r3, #26]
        mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 800d98a:	4b3f      	ldr	r3, [pc, #252]	@ (800da88 <mpu_offset_call+0x1ac>)
 800d98c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800d990:	b29a      	uxth	r2, r3
 800d992:	4b3c      	ldr	r3, [pc, #240]	@ (800da84 <mpu_offset_call+0x1a8>)
 800d994:	7a9b      	ldrb	r3, [r3, #10]
 800d996:	021b      	lsls	r3, r3, #8
 800d998:	b219      	sxth	r1, r3
 800d99a:	4b3a      	ldr	r3, [pc, #232]	@ (800da84 <mpu_offset_call+0x1a8>)
 800d99c:	7adb      	ldrb	r3, [r3, #11]
 800d99e:	b21b      	sxth	r3, r3
 800d9a0:	430b      	orrs	r3, r1
 800d9a2:	b21b      	sxth	r3, r3
 800d9a4:	b29b      	uxth	r3, r3
 800d9a6:	4413      	add	r3, r2
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	b21a      	sxth	r2, r3
 800d9ac:	4b36      	ldr	r3, [pc, #216]	@ (800da88 <mpu_offset_call+0x1ac>)
 800d9ae:	839a      	strh	r2, [r3, #28]
        mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 800d9b0:	4b35      	ldr	r3, [pc, #212]	@ (800da88 <mpu_offset_call+0x1ac>)
 800d9b2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800d9b6:	b29a      	uxth	r2, r3
 800d9b8:	4b32      	ldr	r3, [pc, #200]	@ (800da84 <mpu_offset_call+0x1a8>)
 800d9ba:	7b1b      	ldrb	r3, [r3, #12]
 800d9bc:	021b      	lsls	r3, r3, #8
 800d9be:	b219      	sxth	r1, r3
 800d9c0:	4b30      	ldr	r3, [pc, #192]	@ (800da84 <mpu_offset_call+0x1a8>)
 800d9c2:	7b5b      	ldrb	r3, [r3, #13]
 800d9c4:	b21b      	sxth	r3, r3
 800d9c6:	430b      	orrs	r3, r1
 800d9c8:	b21b      	sxth	r3, r3
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	4413      	add	r3, r2
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	b21a      	sxth	r2, r3
 800d9d2:	4b2d      	ldr	r3, [pc, #180]	@ (800da88 <mpu_offset_call+0x1ac>)
 800d9d4:	83da      	strh	r2, [r3, #30]

        HAL_Delay(5);
 800d9d6:	2005      	movs	r0, #5
 800d9d8:	f7f5 f8e6 	bl	8002ba8 <HAL_Delay>
    for (i = 0; i < 300; i++)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	3301      	adds	r3, #1
 800d9e0:	607b      	str	r3, [r7, #4]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d9e8:	f6ff af7e 	blt.w	800d8e8 <mpu_offset_call+0xc>
    }
    mpu_data.ax_offset = mpu_data.ax_offset / 300;
 800d9ec:	4b26      	ldr	r3, [pc, #152]	@ (800da88 <mpu_offset_call+0x1ac>)
 800d9ee:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800d9f2:	4a26      	ldr	r2, [pc, #152]	@ (800da8c <mpu_offset_call+0x1b0>)
 800d9f4:	fb82 1203 	smull	r1, r2, r2, r3
 800d9f8:	1152      	asrs	r2, r2, #5
 800d9fa:	17db      	asrs	r3, r3, #31
 800d9fc:	1ad3      	subs	r3, r2, r3
 800d9fe:	b21a      	sxth	r2, r3
 800da00:	4b21      	ldr	r3, [pc, #132]	@ (800da88 <mpu_offset_call+0x1ac>)
 800da02:	829a      	strh	r2, [r3, #20]
    mpu_data.ay_offset = mpu_data.ay_offset / 300;
 800da04:	4b20      	ldr	r3, [pc, #128]	@ (800da88 <mpu_offset_call+0x1ac>)
 800da06:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800da0a:	4a20      	ldr	r2, [pc, #128]	@ (800da8c <mpu_offset_call+0x1b0>)
 800da0c:	fb82 1203 	smull	r1, r2, r2, r3
 800da10:	1152      	asrs	r2, r2, #5
 800da12:	17db      	asrs	r3, r3, #31
 800da14:	1ad3      	subs	r3, r2, r3
 800da16:	b21a      	sxth	r2, r3
 800da18:	4b1b      	ldr	r3, [pc, #108]	@ (800da88 <mpu_offset_call+0x1ac>)
 800da1a:	82da      	strh	r2, [r3, #22]
    mpu_data.az_offset = mpu_data.az_offset / 300;
 800da1c:	4b1a      	ldr	r3, [pc, #104]	@ (800da88 <mpu_offset_call+0x1ac>)
 800da1e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800da22:	4a1a      	ldr	r2, [pc, #104]	@ (800da8c <mpu_offset_call+0x1b0>)
 800da24:	fb82 1203 	smull	r1, r2, r2, r3
 800da28:	1152      	asrs	r2, r2, #5
 800da2a:	17db      	asrs	r3, r3, #31
 800da2c:	1ad3      	subs	r3, r2, r3
 800da2e:	b21a      	sxth	r2, r3
 800da30:	4b15      	ldr	r3, [pc, #84]	@ (800da88 <mpu_offset_call+0x1ac>)
 800da32:	831a      	strh	r2, [r3, #24]
    mpu_data.gx_offset = mpu_data.gx_offset / 300;
 800da34:	4b14      	ldr	r3, [pc, #80]	@ (800da88 <mpu_offset_call+0x1ac>)
 800da36:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800da3a:	4a14      	ldr	r2, [pc, #80]	@ (800da8c <mpu_offset_call+0x1b0>)
 800da3c:	fb82 1203 	smull	r1, r2, r2, r3
 800da40:	1152      	asrs	r2, r2, #5
 800da42:	17db      	asrs	r3, r3, #31
 800da44:	1ad3      	subs	r3, r2, r3
 800da46:	b21a      	sxth	r2, r3
 800da48:	4b0f      	ldr	r3, [pc, #60]	@ (800da88 <mpu_offset_call+0x1ac>)
 800da4a:	835a      	strh	r2, [r3, #26]
    mpu_data.gy_offset = mpu_data.gx_offset / 300;
 800da4c:	4b0e      	ldr	r3, [pc, #56]	@ (800da88 <mpu_offset_call+0x1ac>)
 800da4e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800da52:	4a0e      	ldr	r2, [pc, #56]	@ (800da8c <mpu_offset_call+0x1b0>)
 800da54:	fb82 1203 	smull	r1, r2, r2, r3
 800da58:	1152      	asrs	r2, r2, #5
 800da5a:	17db      	asrs	r3, r3, #31
 800da5c:	1ad3      	subs	r3, r2, r3
 800da5e:	b21a      	sxth	r2, r3
 800da60:	4b09      	ldr	r3, [pc, #36]	@ (800da88 <mpu_offset_call+0x1ac>)
 800da62:	839a      	strh	r2, [r3, #28]
    mpu_data.gz_offset = mpu_data.gz_offset / 300;
 800da64:	4b08      	ldr	r3, [pc, #32]	@ (800da88 <mpu_offset_call+0x1ac>)
 800da66:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800da6a:	4a08      	ldr	r2, [pc, #32]	@ (800da8c <mpu_offset_call+0x1b0>)
 800da6c:	fb82 1203 	smull	r1, r2, r2, r3
 800da70:	1152      	asrs	r2, r2, #5
 800da72:	17db      	asrs	r3, r3, #31
 800da74:	1ad3      	subs	r3, r2, r3
 800da76:	b21a      	sxth	r2, r3
 800da78:	4b03      	ldr	r3, [pc, #12]	@ (800da88 <mpu_offset_call+0x1ac>)
 800da7a:	83da      	strh	r2, [r3, #30]
}
 800da7c:	bf00      	nop
 800da7e:	3708      	adds	r7, #8
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}
 800da84:	20000c94 	.word	0x20000c94
 800da88:	20000ca4 	.word	0x20000ca4
 800da8c:	1b4e81b5 	.word	0x1b4e81b5

0800da90 <IMU_Init>:

// 初始化mpu6500和ist3810
uint8_t IMU_Init(void)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b086      	sub	sp, #24
 800da94:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 800da96:	2064      	movs	r0, #100	@ 0x64
 800da98:	f7f5 f886 	bl	8002ba8 <HAL_Delay>

    id = mpu_read_byte(MPU6500_ID);
 800da9c:	2075      	movs	r0, #117	@ 0x75
 800da9e:	f7ff fdc3 	bl	800d628 <mpu_read_byte>
 800daa2:	4603      	mov	r3, r0
 800daa4:	461a      	mov	r2, r3
 800daa6:	4b28      	ldr	r3, [pc, #160]	@ (800db48 <IMU_Init+0xb8>)
 800daa8:	701a      	strb	r2, [r3, #0]
    if (id != 0x70)
 800daaa:	4b27      	ldr	r3, [pc, #156]	@ (800db48 <IMU_Init+0xb8>)
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	2b70      	cmp	r3, #112	@ 0x70
 800dab0:	d001      	beq.n	800dab6 <IMU_Init+0x26>
        return 1;
 800dab2:	2301      	movs	r3, #1
 800dab4:	e044      	b.n	800db40 <IMU_Init+0xb0>
    uint8_t i = 0;
 800dab6:	2300      	movs	r3, #0
 800dab8:	75fb      	strb	r3, [r7, #23]
    uint8_t MPU6500_Init_Data[10][2] = {
 800daba:	463b      	mov	r3, r7
 800dabc:	2200      	movs	r2, #0
 800dabe:	601a      	str	r2, [r3, #0]
 800dac0:	605a      	str	r2, [r3, #4]
 800dac2:	609a      	str	r2, [r3, #8]
 800dac4:	60da      	str	r2, [r3, #12]
 800dac6:	611a      	str	r2, [r3, #16]
 800dac8:	f248 036b 	movw	r3, #32875	@ 0x806b
 800dacc:	803b      	strh	r3, [r7, #0]
 800dace:	f240 336b 	movw	r3, #875	@ 0x36b
 800dad2:	807b      	strh	r3, [r7, #2]
 800dad4:	236c      	movs	r3, #108	@ 0x6c
 800dad6:	80bb      	strh	r3, [r7, #4]
 800dad8:	f240 431a 	movw	r3, #1050	@ 0x41a
 800dadc:	80fb      	strh	r3, [r7, #6]
 800dade:	f641 031b 	movw	r3, #6171	@ 0x181b
 800dae2:	813b      	strh	r3, [r7, #8]
 800dae4:	f241 031c 	movw	r3, #4124	@ 0x101c
 800dae8:	817b      	strh	r3, [r7, #10]
 800daea:	f240 231d 	movw	r3, #541	@ 0x21d
 800daee:	81bb      	strh	r3, [r7, #12]
 800daf0:	f242 036a 	movw	r3, #8298	@ 0x206a
 800daf4:	81fb      	strh	r3, [r7, #14]
        {MPU6500_GYRO_CONFIG, 0x18},    /* +-2000dps */
        {MPU6500_ACCEL_CONFIG, 0x10},   /* +-8G */
        {MPU6500_ACCEL_CONFIG_2, 0x02}, /* 使能低通滤波器  设置 Acc 低通滤波 */
        {MPU6500_USER_CTRL, 0x20},
    }; /* 使能 AUX */
    for (i = 0; i < 10; i++)
 800daf6:	2300      	movs	r3, #0
 800daf8:	75fb      	strb	r3, [r7, #23]
 800dafa:	e015      	b.n	800db28 <IMU_Init+0x98>
    {
        mpu_write_byte(MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 800dafc:	7dfb      	ldrb	r3, [r7, #23]
 800dafe:	005b      	lsls	r3, r3, #1
 800db00:	3318      	adds	r3, #24
 800db02:	443b      	add	r3, r7
 800db04:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800db08:	7dfb      	ldrb	r3, [r7, #23]
 800db0a:	005b      	lsls	r3, r3, #1
 800db0c:	3318      	adds	r3, #24
 800db0e:	443b      	add	r3, r7
 800db10:	f813 3c17 	ldrb.w	r3, [r3, #-23]
 800db14:	4619      	mov	r1, r3
 800db16:	4610      	mov	r0, r2
 800db18:	f7ff fd4e 	bl	800d5b8 <mpu_write_byte>
        HAL_Delay(1);
 800db1c:	2001      	movs	r0, #1
 800db1e:	f7f5 f843 	bl	8002ba8 <HAL_Delay>
    for (i = 0; i < 10; i++)
 800db22:	7dfb      	ldrb	r3, [r7, #23]
 800db24:	3301      	adds	r3, #1
 800db26:	75fb      	strb	r3, [r7, #23]
 800db28:	7dfb      	ldrb	r3, [r7, #23]
 800db2a:	2b09      	cmp	r3, #9
 800db2c:	d9e6      	bls.n	800dafc <IMU_Init+0x6c>
    }

    mpu_set_gyro_fsr(3);
 800db2e:	2003      	movs	r0, #3
 800db30:	f7ff fdea 	bl	800d708 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(2);
 800db34:	2002      	movs	r0, #2
 800db36:	f7ff fdf8 	bl	800d72a <mpu_set_accel_fsr>

    // ist8310_init();
    mpu_offset_call();
 800db3a:	f7ff fecf 	bl	800d8dc <mpu_offset_call>
    return 0;
 800db3e:	2300      	movs	r3, #0
}
 800db40:	4618      	mov	r0, r3
 800db42:	3718      	adds	r7, #24
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	20000cf8 	.word	0x20000cf8

0800db4c <init_quaternion>:

// 初始化四元数
void init_quaternion(void)
{
 800db4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db50:	b084      	sub	sp, #16
 800db52:	af00      	add	r7, sp, #0
    int16_t hx, hy; // hz;

    hx = imu.mx;
 800db54:	4b79      	ldr	r3, [pc, #484]	@ (800dd3c <init_quaternion+0x1f0>)
 800db56:	88db      	ldrh	r3, [r3, #6]
 800db58:	81fb      	strh	r3, [r7, #14]
    hy = imu.my;
 800db5a:	4b78      	ldr	r3, [pc, #480]	@ (800dd3c <init_quaternion+0x1f0>)
 800db5c:	891b      	ldrh	r3, [r3, #8]
 800db5e:	81bb      	strh	r3, [r7, #12]
            q2 = -0.56;
            q3 = 0.0045;
        }
    }
#else
    if (hx < 0 && hy < 0)
 800db60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800db64:	2b00      	cmp	r3, #0
 800db66:	da36      	bge.n	800dbd6 <init_quaternion+0x8a>
 800db68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	da32      	bge.n	800dbd6 <init_quaternion+0x8a>
    {
        if (fabs(hx / hy) >= 1)
 800db70:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800db74:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800db78:	fb92 f3f3 	sdiv	r3, r2, r3
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7f2 fcf9 	bl	8000574 <__aeabi_i2d>
 800db82:	4602      	mov	r2, r0
 800db84:	460b      	mov	r3, r1
 800db86:	603a      	str	r2, [r7, #0]
 800db88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800db8c:	607b      	str	r3, [r7, #4]
 800db8e:	f04f 0200 	mov.w	r2, #0
 800db92:	4b6b      	ldr	r3, [pc, #428]	@ (800dd40 <init_quaternion+0x1f4>)
 800db94:	e9d7 0100 	ldrd	r0, r1, [r7]
 800db98:	f7f2 ffdc 	bl	8000b54 <__aeabi_dcmpge>
 800db9c:	4603      	mov	r3, r0
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d00c      	beq.n	800dbbc <init_quaternion+0x70>
        {
            q0 = 0.195;
 800dba2:	4b68      	ldr	r3, [pc, #416]	@ (800dd44 <init_quaternion+0x1f8>)
 800dba4:	4a68      	ldr	r2, [pc, #416]	@ (800dd48 <init_quaternion+0x1fc>)
 800dba6:	601a      	str	r2, [r3, #0]
            q1 = -0.015;
 800dba8:	4b68      	ldr	r3, [pc, #416]	@ (800dd4c <init_quaternion+0x200>)
 800dbaa:	4a69      	ldr	r2, [pc, #420]	@ (800dd50 <init_quaternion+0x204>)
 800dbac:	601a      	str	r2, [r3, #0]
            q2 = 0.0043;
 800dbae:	4b69      	ldr	r3, [pc, #420]	@ (800dd54 <init_quaternion+0x208>)
 800dbb0:	4a69      	ldr	r2, [pc, #420]	@ (800dd58 <init_quaternion+0x20c>)
 800dbb2:	601a      	str	r2, [r3, #0]
            q3 = 0.979;
 800dbb4:	4b69      	ldr	r3, [pc, #420]	@ (800dd5c <init_quaternion+0x210>)
 800dbb6:	4a6a      	ldr	r2, [pc, #424]	@ (800dd60 <init_quaternion+0x214>)
 800dbb8:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800dbba:	e0ba      	b.n	800dd32 <init_quaternion+0x1e6>
        }
        else
        {
            q0 = 0.555;
 800dbbc:	4b61      	ldr	r3, [pc, #388]	@ (800dd44 <init_quaternion+0x1f8>)
 800dbbe:	4a69      	ldr	r2, [pc, #420]	@ (800dd64 <init_quaternion+0x218>)
 800dbc0:	601a      	str	r2, [r3, #0]
            q1 = -0.015;
 800dbc2:	4b62      	ldr	r3, [pc, #392]	@ (800dd4c <init_quaternion+0x200>)
 800dbc4:	4a62      	ldr	r2, [pc, #392]	@ (800dd50 <init_quaternion+0x204>)
 800dbc6:	601a      	str	r2, [r3, #0]
            q2 = 0.006;
 800dbc8:	4b62      	ldr	r3, [pc, #392]	@ (800dd54 <init_quaternion+0x208>)
 800dbca:	4a67      	ldr	r2, [pc, #412]	@ (800dd68 <init_quaternion+0x21c>)
 800dbcc:	601a      	str	r2, [r3, #0]
            q3 = 0.829;
 800dbce:	4b63      	ldr	r3, [pc, #396]	@ (800dd5c <init_quaternion+0x210>)
 800dbd0:	4a66      	ldr	r2, [pc, #408]	@ (800dd6c <init_quaternion+0x220>)
 800dbd2:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800dbd4:	e0ad      	b.n	800dd32 <init_quaternion+0x1e6>
        }
    }
    else if (hx < 0 && hy > 0)
 800dbd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	da35      	bge.n	800dc4a <init_quaternion+0xfe>
 800dbde:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	dd31      	ble.n	800dc4a <init_quaternion+0xfe>
    {
        if (fabs(hx / hy) >= 1)
 800dbe6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800dbea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dbee:	fb92 f3f3 	sdiv	r3, r2, r3
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7f2 fcbe 	bl	8000574 <__aeabi_i2d>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	4692      	mov	sl, r2
 800dbfe:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800dc02:	f04f 0200 	mov.w	r2, #0
 800dc06:	4b4e      	ldr	r3, [pc, #312]	@ (800dd40 <init_quaternion+0x1f4>)
 800dc08:	4650      	mov	r0, sl
 800dc0a:	4659      	mov	r1, fp
 800dc0c:	f7f2 ffa2 	bl	8000b54 <__aeabi_dcmpge>
 800dc10:	4603      	mov	r3, r0
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d00c      	beq.n	800dc30 <init_quaternion+0xe4>
        {
            q0 = -0.193;
 800dc16:	4b4b      	ldr	r3, [pc, #300]	@ (800dd44 <init_quaternion+0x1f8>)
 800dc18:	4a55      	ldr	r2, [pc, #340]	@ (800dd70 <init_quaternion+0x224>)
 800dc1a:	601a      	str	r2, [r3, #0]
            q1 = -0.009;
 800dc1c:	4b4b      	ldr	r3, [pc, #300]	@ (800dd4c <init_quaternion+0x200>)
 800dc1e:	4a55      	ldr	r2, [pc, #340]	@ (800dd74 <init_quaternion+0x228>)
 800dc20:	601a      	str	r2, [r3, #0]
            q2 = -0.006;
 800dc22:	4b4c      	ldr	r3, [pc, #304]	@ (800dd54 <init_quaternion+0x208>)
 800dc24:	4a54      	ldr	r2, [pc, #336]	@ (800dd78 <init_quaternion+0x22c>)
 800dc26:	601a      	str	r2, [r3, #0]
            q3 = 0.979;
 800dc28:	4b4c      	ldr	r3, [pc, #304]	@ (800dd5c <init_quaternion+0x210>)
 800dc2a:	4a4d      	ldr	r2, [pc, #308]	@ (800dd60 <init_quaternion+0x214>)
 800dc2c:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800dc2e:	e080      	b.n	800dd32 <init_quaternion+0x1e6>
        }
        else
        {
            q0 = -0.552;
 800dc30:	4b44      	ldr	r3, [pc, #272]	@ (800dd44 <init_quaternion+0x1f8>)
 800dc32:	4a52      	ldr	r2, [pc, #328]	@ (800dd7c <init_quaternion+0x230>)
 800dc34:	601a      	str	r2, [r3, #0]
            q1 = -0.0048;
 800dc36:	4b45      	ldr	r3, [pc, #276]	@ (800dd4c <init_quaternion+0x200>)
 800dc38:	4a51      	ldr	r2, [pc, #324]	@ (800dd80 <init_quaternion+0x234>)
 800dc3a:	601a      	str	r2, [r3, #0]
            q2 = -0.0115;
 800dc3c:	4b45      	ldr	r3, [pc, #276]	@ (800dd54 <init_quaternion+0x208>)
 800dc3e:	4a51      	ldr	r2, [pc, #324]	@ (800dd84 <init_quaternion+0x238>)
 800dc40:	601a      	str	r2, [r3, #0]
            q3 = 0.8313;
 800dc42:	4b46      	ldr	r3, [pc, #280]	@ (800dd5c <init_quaternion+0x210>)
 800dc44:	4a50      	ldr	r2, [pc, #320]	@ (800dd88 <init_quaternion+0x23c>)
 800dc46:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800dc48:	e073      	b.n	800dd32 <init_quaternion+0x1e6>
        }
    }
    else if (hx > 0 && hy > 0)
 800dc4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	dd35      	ble.n	800dcbe <init_quaternion+0x172>
 800dc52:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	dd31      	ble.n	800dcbe <init_quaternion+0x172>
    {
        if (fabs(hx / hy) >= 1)
 800dc5a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800dc5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dc62:	fb92 f3f3 	sdiv	r3, r2, r3
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7f2 fc84 	bl	8000574 <__aeabi_i2d>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	460b      	mov	r3, r1
 800dc70:	4690      	mov	r8, r2
 800dc72:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800dc76:	f04f 0200 	mov.w	r2, #0
 800dc7a:	4b31      	ldr	r3, [pc, #196]	@ (800dd40 <init_quaternion+0x1f4>)
 800dc7c:	4640      	mov	r0, r8
 800dc7e:	4649      	mov	r1, r9
 800dc80:	f7f2 ff68 	bl	8000b54 <__aeabi_dcmpge>
 800dc84:	4603      	mov	r3, r0
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d00c      	beq.n	800dca4 <init_quaternion+0x158>
        {
            q0 = -0.9785;
 800dc8a:	4b2e      	ldr	r3, [pc, #184]	@ (800dd44 <init_quaternion+0x1f8>)
 800dc8c:	4a3f      	ldr	r2, [pc, #252]	@ (800dd8c <init_quaternion+0x240>)
 800dc8e:	601a      	str	r2, [r3, #0]
            q1 = 0.008;
 800dc90:	4b2e      	ldr	r3, [pc, #184]	@ (800dd4c <init_quaternion+0x200>)
 800dc92:	4a3f      	ldr	r2, [pc, #252]	@ (800dd90 <init_quaternion+0x244>)
 800dc94:	601a      	str	r2, [r3, #0]
            q2 = -0.02;
 800dc96:	4b2f      	ldr	r3, [pc, #188]	@ (800dd54 <init_quaternion+0x208>)
 800dc98:	4a3e      	ldr	r2, [pc, #248]	@ (800dd94 <init_quaternion+0x248>)
 800dc9a:	601a      	str	r2, [r3, #0]
            q3 = 0.195;
 800dc9c:	4b2f      	ldr	r3, [pc, #188]	@ (800dd5c <init_quaternion+0x210>)
 800dc9e:	4a2a      	ldr	r2, [pc, #168]	@ (800dd48 <init_quaternion+0x1fc>)
 800dca0:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800dca2:	e046      	b.n	800dd32 <init_quaternion+0x1e6>
        }
        else
        {
            q0 = -0.9828;
 800dca4:	4b27      	ldr	r3, [pc, #156]	@ (800dd44 <init_quaternion+0x1f8>)
 800dca6:	4a3c      	ldr	r2, [pc, #240]	@ (800dd98 <init_quaternion+0x24c>)
 800dca8:	601a      	str	r2, [r3, #0]
            q1 = 0.002;
 800dcaa:	4b28      	ldr	r3, [pc, #160]	@ (800dd4c <init_quaternion+0x200>)
 800dcac:	4a3b      	ldr	r2, [pc, #236]	@ (800dd9c <init_quaternion+0x250>)
 800dcae:	601a      	str	r2, [r3, #0]
            q2 = -0.0167;
 800dcb0:	4b28      	ldr	r3, [pc, #160]	@ (800dd54 <init_quaternion+0x208>)
 800dcb2:	4a3b      	ldr	r2, [pc, #236]	@ (800dda0 <init_quaternion+0x254>)
 800dcb4:	601a      	str	r2, [r3, #0]
            q3 = 0.5557;
 800dcb6:	4b29      	ldr	r3, [pc, #164]	@ (800dd5c <init_quaternion+0x210>)
 800dcb8:	4a3a      	ldr	r2, [pc, #232]	@ (800dda4 <init_quaternion+0x258>)
 800dcba:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800dcbc:	e039      	b.n	800dd32 <init_quaternion+0x1e6>
        }
    }
    else if (hx > 0 && hy < 0)
 800dcbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	dd35      	ble.n	800dd32 <init_quaternion+0x1e6>
 800dcc6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	da31      	bge.n	800dd32 <init_quaternion+0x1e6>
    {
        if (fabs(hx / hy) >= 1)
 800dcce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800dcd2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dcd6:	fb92 f3f3 	sdiv	r3, r2, r3
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7f2 fc4a 	bl	8000574 <__aeabi_i2d>
 800dce0:	4602      	mov	r2, r0
 800dce2:	460b      	mov	r3, r1
 800dce4:	4614      	mov	r4, r2
 800dce6:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800dcea:	f04f 0200 	mov.w	r2, #0
 800dcee:	4b14      	ldr	r3, [pc, #80]	@ (800dd40 <init_quaternion+0x1f4>)
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	4629      	mov	r1, r5
 800dcf4:	f7f2 ff2e 	bl	8000b54 <__aeabi_dcmpge>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00c      	beq.n	800dd18 <init_quaternion+0x1cc>
        {
            q0 = -0.979;
 800dcfe:	4b11      	ldr	r3, [pc, #68]	@ (800dd44 <init_quaternion+0x1f8>)
 800dd00:	4a29      	ldr	r2, [pc, #164]	@ (800dda8 <init_quaternion+0x25c>)
 800dd02:	601a      	str	r2, [r3, #0]
            q1 = 0.0116;
 800dd04:	4b11      	ldr	r3, [pc, #68]	@ (800dd4c <init_quaternion+0x200>)
 800dd06:	4a29      	ldr	r2, [pc, #164]	@ (800ddac <init_quaternion+0x260>)
 800dd08:	601a      	str	r2, [r3, #0]
            q2 = -0.0167;
 800dd0a:	4b12      	ldr	r3, [pc, #72]	@ (800dd54 <init_quaternion+0x208>)
 800dd0c:	4a24      	ldr	r2, [pc, #144]	@ (800dda0 <init_quaternion+0x254>)
 800dd0e:	601a      	str	r2, [r3, #0]
            q3 = -0.195;
 800dd10:	4b12      	ldr	r3, [pc, #72]	@ (800dd5c <init_quaternion+0x210>)
 800dd12:	4a27      	ldr	r2, [pc, #156]	@ (800ddb0 <init_quaternion+0x264>)
 800dd14:	601a      	str	r2, [r3, #0]
            q2 = -0.012;
            q3 = -0.556;
        }
    }
#endif
}
 800dd16:	e00c      	b.n	800dd32 <init_quaternion+0x1e6>
            q0 = -0.83;
 800dd18:	4b0a      	ldr	r3, [pc, #40]	@ (800dd44 <init_quaternion+0x1f8>)
 800dd1a:	4a26      	ldr	r2, [pc, #152]	@ (800ddb4 <init_quaternion+0x268>)
 800dd1c:	601a      	str	r2, [r3, #0]
            q1 = 0.014;
 800dd1e:	4b0b      	ldr	r3, [pc, #44]	@ (800dd4c <init_quaternion+0x200>)
 800dd20:	4a25      	ldr	r2, [pc, #148]	@ (800ddb8 <init_quaternion+0x26c>)
 800dd22:	601a      	str	r2, [r3, #0]
            q2 = -0.012;
 800dd24:	4b0b      	ldr	r3, [pc, #44]	@ (800dd54 <init_quaternion+0x208>)
 800dd26:	4a25      	ldr	r2, [pc, #148]	@ (800ddbc <init_quaternion+0x270>)
 800dd28:	601a      	str	r2, [r3, #0]
            q3 = -0.556;
 800dd2a:	4b0c      	ldr	r3, [pc, #48]	@ (800dd5c <init_quaternion+0x210>)
 800dd2c:	4a24      	ldr	r2, [pc, #144]	@ (800ddc0 <init_quaternion+0x274>)
 800dd2e:	601a      	str	r2, [r3, #0]
}
 800dd30:	e7ff      	b.n	800dd32 <init_quaternion+0x1e6>
 800dd32:	bf00      	nop
 800dd34:	3710      	adds	r7, #16
 800dd36:	46bd      	mov	sp, r7
 800dd38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dd3c:	20000cc4 	.word	0x20000cc4
 800dd40:	3ff00000 	.word	0x3ff00000
 800dd44:	200000b4 	.word	0x200000b4
 800dd48:	3e47ae14 	.word	0x3e47ae14
 800dd4c:	20000c7c 	.word	0x20000c7c
 800dd50:	bc75c28f 	.word	0xbc75c28f
 800dd54:	20000c80 	.word	0x20000c80
 800dd58:	3b8ce704 	.word	0x3b8ce704
 800dd5c:	20000c84 	.word	0x20000c84
 800dd60:	3f7a9fbe 	.word	0x3f7a9fbe
 800dd64:	3f0e147b 	.word	0x3f0e147b
 800dd68:	3bc49ba6 	.word	0x3bc49ba6
 800dd6c:	3f543958 	.word	0x3f543958
 800dd70:	be45a1cb 	.word	0xbe45a1cb
 800dd74:	bc1374bc 	.word	0xbc1374bc
 800dd78:	bbc49ba6 	.word	0xbbc49ba6
 800dd7c:	bf0d4fdf 	.word	0xbf0d4fdf
 800dd80:	bb9d4952 	.word	0xbb9d4952
 800dd84:	bc3c6a7f 	.word	0xbc3c6a7f
 800dd88:	3f54d014 	.word	0x3f54d014
 800dd8c:	bf7a7efa 	.word	0xbf7a7efa
 800dd90:	3c03126f 	.word	0x3c03126f
 800dd94:	bca3d70a 	.word	0xbca3d70a
 800dd98:	bf7b98c8 	.word	0xbf7b98c8
 800dd9c:	3b03126f 	.word	0x3b03126f
 800dda0:	bc88ce70 	.word	0xbc88ce70
 800dda4:	3f0e425b 	.word	0x3f0e425b
 800dda8:	bf7a9fbe 	.word	0xbf7a9fbe
 800ddac:	3c3e0ded 	.word	0x3c3e0ded
 800ddb0:	be47ae14 	.word	0xbe47ae14
 800ddb4:	bf547ae1 	.word	0xbf547ae1
 800ddb8:	3c656042 	.word	0x3c656042
 800ddbc:	bc449ba6 	.word	0xbc449ba6
 800ddc0:	bf0e5604 	.word	0xbf0e5604

0800ddc4 <imu_ahrs_update>:

// 更新IMU数值
void imu_ahrs_update(void)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b09e      	sub	sp, #120	@ 0x78
 800ddc8:	af00      	add	r7, sp, #0
    float hx, hy, hz, bx, bz;
    float vx, vy, vz, wx, wy, wz;
    float ex, ey, ez, halfT;
    float tempq0, tempq1, tempq2, tempq3;

    float q0q0 = q0 * q0;
 800ddca:	4bd6      	ldr	r3, [pc, #856]	@ (800e124 <imu_ahrs_update+0x360>)
 800ddcc:	ed93 7a00 	vldr	s14, [r3]
 800ddd0:	4bd4      	ldr	r3, [pc, #848]	@ (800e124 <imu_ahrs_update+0x360>)
 800ddd2:	edd3 7a00 	vldr	s15, [r3]
 800ddd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddda:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    float q0q1 = q0 * q1;
 800ddde:	4bd1      	ldr	r3, [pc, #836]	@ (800e124 <imu_ahrs_update+0x360>)
 800dde0:	ed93 7a00 	vldr	s14, [r3]
 800dde4:	4bd0      	ldr	r3, [pc, #832]	@ (800e128 <imu_ahrs_update+0x364>)
 800dde6:	edd3 7a00 	vldr	s15, [r3]
 800ddea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddee:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    float q0q2 = q0 * q2;
 800ddf2:	4bcc      	ldr	r3, [pc, #816]	@ (800e124 <imu_ahrs_update+0x360>)
 800ddf4:	ed93 7a00 	vldr	s14, [r3]
 800ddf8:	4bcc      	ldr	r3, [pc, #816]	@ (800e12c <imu_ahrs_update+0x368>)
 800ddfa:	edd3 7a00 	vldr	s15, [r3]
 800ddfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de02:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    float q0q3 = q0 * q3;
 800de06:	4bc7      	ldr	r3, [pc, #796]	@ (800e124 <imu_ahrs_update+0x360>)
 800de08:	ed93 7a00 	vldr	s14, [r3]
 800de0c:	4bc8      	ldr	r3, [pc, #800]	@ (800e130 <imu_ahrs_update+0x36c>)
 800de0e:	edd3 7a00 	vldr	s15, [r3]
 800de12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de16:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    float q1q1 = q1 * q1;
 800de1a:	4bc3      	ldr	r3, [pc, #780]	@ (800e128 <imu_ahrs_update+0x364>)
 800de1c:	ed93 7a00 	vldr	s14, [r3]
 800de20:	4bc1      	ldr	r3, [pc, #772]	@ (800e128 <imu_ahrs_update+0x364>)
 800de22:	edd3 7a00 	vldr	s15, [r3]
 800de26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de2a:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    float q1q2 = q1 * q2;
 800de2e:	4bbe      	ldr	r3, [pc, #760]	@ (800e128 <imu_ahrs_update+0x364>)
 800de30:	ed93 7a00 	vldr	s14, [r3]
 800de34:	4bbd      	ldr	r3, [pc, #756]	@ (800e12c <imu_ahrs_update+0x368>)
 800de36:	edd3 7a00 	vldr	s15, [r3]
 800de3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de3e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    float q1q3 = q1 * q3;
 800de42:	4bb9      	ldr	r3, [pc, #740]	@ (800e128 <imu_ahrs_update+0x364>)
 800de44:	ed93 7a00 	vldr	s14, [r3]
 800de48:	4bb9      	ldr	r3, [pc, #740]	@ (800e130 <imu_ahrs_update+0x36c>)
 800de4a:	edd3 7a00 	vldr	s15, [r3]
 800de4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de52:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    float q2q2 = q2 * q2;
 800de56:	4bb5      	ldr	r3, [pc, #724]	@ (800e12c <imu_ahrs_update+0x368>)
 800de58:	ed93 7a00 	vldr	s14, [r3]
 800de5c:	4bb3      	ldr	r3, [pc, #716]	@ (800e12c <imu_ahrs_update+0x368>)
 800de5e:	edd3 7a00 	vldr	s15, [r3]
 800de62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de66:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    float q2q3 = q2 * q3;
 800de6a:	4bb0      	ldr	r3, [pc, #704]	@ (800e12c <imu_ahrs_update+0x368>)
 800de6c:	ed93 7a00 	vldr	s14, [r3]
 800de70:	4baf      	ldr	r3, [pc, #700]	@ (800e130 <imu_ahrs_update+0x36c>)
 800de72:	edd3 7a00 	vldr	s15, [r3]
 800de76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de7a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    float q3q3 = q3 * q3;
 800de7e:	4bac      	ldr	r3, [pc, #688]	@ (800e130 <imu_ahrs_update+0x36c>)
 800de80:	ed93 7a00 	vldr	s14, [r3]
 800de84:	4baa      	ldr	r3, [pc, #680]	@ (800e130 <imu_ahrs_update+0x36c>)
 800de86:	edd3 7a00 	vldr	s15, [r3]
 800de8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de8e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    gx = imu.wx;
 800de92:	4ba8      	ldr	r3, [pc, #672]	@ (800e134 <imu_ahrs_update+0x370>)
 800de94:	691b      	ldr	r3, [r3, #16]
 800de96:	4aa8      	ldr	r2, [pc, #672]	@ (800e138 <imu_ahrs_update+0x374>)
 800de98:	6013      	str	r3, [r2, #0]
    gy = imu.wy;
 800de9a:	4ba6      	ldr	r3, [pc, #664]	@ (800e134 <imu_ahrs_update+0x370>)
 800de9c:	695b      	ldr	r3, [r3, #20]
 800de9e:	4aa7      	ldr	r2, [pc, #668]	@ (800e13c <imu_ahrs_update+0x378>)
 800dea0:	6013      	str	r3, [r2, #0]
    gz = imu.wz;
 800dea2:	4ba4      	ldr	r3, [pc, #656]	@ (800e134 <imu_ahrs_update+0x370>)
 800dea4:	699b      	ldr	r3, [r3, #24]
 800dea6:	4aa6      	ldr	r2, [pc, #664]	@ (800e140 <imu_ahrs_update+0x37c>)
 800dea8:	6013      	str	r3, [r2, #0]
    ax = imu.ax;
 800deaa:	4ba2      	ldr	r3, [pc, #648]	@ (800e134 <imu_ahrs_update+0x370>)
 800deac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800deb0:	ee07 3a90 	vmov	s15, r3
 800deb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800deb8:	4ba2      	ldr	r3, [pc, #648]	@ (800e144 <imu_ahrs_update+0x380>)
 800deba:	edc3 7a00 	vstr	s15, [r3]
    ay = imu.ay;
 800debe:	4b9d      	ldr	r3, [pc, #628]	@ (800e134 <imu_ahrs_update+0x370>)
 800dec0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dec4:	ee07 3a90 	vmov	s15, r3
 800dec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800decc:	4b9e      	ldr	r3, [pc, #632]	@ (800e148 <imu_ahrs_update+0x384>)
 800dece:	edc3 7a00 	vstr	s15, [r3]
    az = imu.az;
 800ded2:	4b98      	ldr	r3, [pc, #608]	@ (800e134 <imu_ahrs_update+0x370>)
 800ded4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ded8:	ee07 3a90 	vmov	s15, r3
 800dedc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dee0:	4b9a      	ldr	r3, [pc, #616]	@ (800e14c <imu_ahrs_update+0x388>)
 800dee2:	edc3 7a00 	vstr	s15, [r3]
    mx = imu.mx;
 800dee6:	4b93      	ldr	r3, [pc, #588]	@ (800e134 <imu_ahrs_update+0x370>)
 800dee8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800deec:	ee07 3a90 	vmov	s15, r3
 800def0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800def4:	4b96      	ldr	r3, [pc, #600]	@ (800e150 <imu_ahrs_update+0x38c>)
 800def6:	edc3 7a00 	vstr	s15, [r3]
    my = imu.my;
 800defa:	4b8e      	ldr	r3, [pc, #568]	@ (800e134 <imu_ahrs_update+0x370>)
 800defc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800df00:	ee07 3a90 	vmov	s15, r3
 800df04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df08:	4b92      	ldr	r3, [pc, #584]	@ (800e154 <imu_ahrs_update+0x390>)
 800df0a:	edc3 7a00 	vstr	s15, [r3]
    mz = imu.mz;
 800df0e:	4b89      	ldr	r3, [pc, #548]	@ (800e134 <imu_ahrs_update+0x370>)
 800df10:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800df14:	ee07 3a90 	vmov	s15, r3
 800df18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df1c:	4b8e      	ldr	r3, [pc, #568]	@ (800e158 <imu_ahrs_update+0x394>)
 800df1e:	edc3 7a00 	vstr	s15, [r3]

    now_update = HAL_GetTick(); // ms
 800df22:	f7f4 fe35 	bl	8002b90 <HAL_GetTick>
 800df26:	4603      	mov	r3, r0
 800df28:	4a8c      	ldr	r2, [pc, #560]	@ (800e15c <imu_ahrs_update+0x398>)
 800df2a:	6013      	str	r3, [r2, #0]
    halfT = ((float)(now_update - last_update) / 2000.0f);
 800df2c:	4b8b      	ldr	r3, [pc, #556]	@ (800e15c <imu_ahrs_update+0x398>)
 800df2e:	681a      	ldr	r2, [r3, #0]
 800df30:	4b8b      	ldr	r3, [pc, #556]	@ (800e160 <imu_ahrs_update+0x39c>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	1ad3      	subs	r3, r2, r3
 800df36:	ee07 3a90 	vmov	s15, r3
 800df3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800df3e:	eddf 6a89 	vldr	s13, [pc, #548]	@ 800e164 <imu_ahrs_update+0x3a0>
 800df42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800df46:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    last_update = now_update;
 800df4a:	4b84      	ldr	r3, [pc, #528]	@ (800e15c <imu_ahrs_update+0x398>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	4a84      	ldr	r2, [pc, #528]	@ (800e160 <imu_ahrs_update+0x39c>)
 800df50:	6013      	str	r3, [r2, #0]

    /* 快速逆平方根 */
    norm = inv_sqrt(ax * ax + ay * ay + az * az);
 800df52:	4b7c      	ldr	r3, [pc, #496]	@ (800e144 <imu_ahrs_update+0x380>)
 800df54:	ed93 7a00 	vldr	s14, [r3]
 800df58:	4b7a      	ldr	r3, [pc, #488]	@ (800e144 <imu_ahrs_update+0x380>)
 800df5a:	edd3 7a00 	vldr	s15, [r3]
 800df5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df62:	4b79      	ldr	r3, [pc, #484]	@ (800e148 <imu_ahrs_update+0x384>)
 800df64:	edd3 6a00 	vldr	s13, [r3]
 800df68:	4b77      	ldr	r3, [pc, #476]	@ (800e148 <imu_ahrs_update+0x384>)
 800df6a:	edd3 7a00 	vldr	s15, [r3]
 800df6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df72:	ee37 7a27 	vadd.f32	s14, s14, s15
 800df76:	4b75      	ldr	r3, [pc, #468]	@ (800e14c <imu_ahrs_update+0x388>)
 800df78:	edd3 6a00 	vldr	s13, [r3]
 800df7c:	4b73      	ldr	r3, [pc, #460]	@ (800e14c <imu_ahrs_update+0x388>)
 800df7e:	edd3 7a00 	vldr	s15, [r3]
 800df82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df86:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df8a:	eeb0 0a67 	vmov.f32	s0, s15
 800df8e:	f7ff fad7 	bl	800d540 <inv_sqrt>
 800df92:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    ax = ax * norm;
 800df96:	4b6b      	ldr	r3, [pc, #428]	@ (800e144 <imu_ahrs_update+0x380>)
 800df98:	ed93 7a00 	vldr	s14, [r3]
 800df9c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800dfa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfa4:	4b67      	ldr	r3, [pc, #412]	@ (800e144 <imu_ahrs_update+0x380>)
 800dfa6:	edc3 7a00 	vstr	s15, [r3]
    ay = ay * norm;
 800dfaa:	4b67      	ldr	r3, [pc, #412]	@ (800e148 <imu_ahrs_update+0x384>)
 800dfac:	ed93 7a00 	vldr	s14, [r3]
 800dfb0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800dfb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfb8:	4b63      	ldr	r3, [pc, #396]	@ (800e148 <imu_ahrs_update+0x384>)
 800dfba:	edc3 7a00 	vstr	s15, [r3]
    az = az * norm;
 800dfbe:	4b63      	ldr	r3, [pc, #396]	@ (800e14c <imu_ahrs_update+0x388>)
 800dfc0:	ed93 7a00 	vldr	s14, [r3]
 800dfc4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800dfc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfcc:	4b5f      	ldr	r3, [pc, #380]	@ (800e14c <imu_ahrs_update+0x388>)
 800dfce:	edc3 7a00 	vstr	s15, [r3]
    norm = inv_sqrt(mx * mx + my * my + mz * mz);
    mx = mx * norm;
    my = my * norm;
    mz = mz * norm;
#else
    mx = 0;
 800dfd2:	4b5f      	ldr	r3, [pc, #380]	@ (800e150 <imu_ahrs_update+0x38c>)
 800dfd4:	f04f 0200 	mov.w	r2, #0
 800dfd8:	601a      	str	r2, [r3, #0]
    my = 0;
 800dfda:	4b5e      	ldr	r3, [pc, #376]	@ (800e154 <imu_ahrs_update+0x390>)
 800dfdc:	f04f 0200 	mov.w	r2, #0
 800dfe0:	601a      	str	r2, [r3, #0]
    mz = 0;
 800dfe2:	4b5d      	ldr	r3, [pc, #372]	@ (800e158 <imu_ahrs_update+0x394>)
 800dfe4:	f04f 0200 	mov.w	r2, #0
 800dfe8:	601a      	str	r2, [r3, #0]
#endif
    /* 计算通量的参考方向*/
    hx = 2.0f * mx * (0.5f - q2q2 - q3q3) + 2.0f * my * (q1q2 - q0q3) + 2.0f * mz * (q1q3 + q0q2);
 800dfea:	4b59      	ldr	r3, [pc, #356]	@ (800e150 <imu_ahrs_update+0x38c>)
 800dfec:	edd3 7a00 	vldr	s15, [r3]
 800dff0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800dff4:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800dff8:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800dffc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e000:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800e004:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e008:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e00c:	4b51      	ldr	r3, [pc, #324]	@ (800e154 <imu_ahrs_update+0x390>)
 800e00e:	edd3 7a00 	vldr	s15, [r3]
 800e012:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e016:	ed97 6a18 	vldr	s12, [r7, #96]	@ 0x60
 800e01a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800e01e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e022:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e026:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e02a:	4b4b      	ldr	r3, [pc, #300]	@ (800e158 <imu_ahrs_update+0x394>)
 800e02c:	edd3 7a00 	vldr	s15, [r3]
 800e030:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e034:	ed97 6a17 	vldr	s12, [r7, #92]	@ 0x5c
 800e038:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800e03c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e044:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e048:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    hy = 2.0f * mx * (q1q2 + q0q3) + 2.0f * my * (0.5f - q1q1 - q3q3) + 2.0f * mz * (q2q3 - q0q1);
 800e04c:	4b40      	ldr	r3, [pc, #256]	@ (800e150 <imu_ahrs_update+0x38c>)
 800e04e:	edd3 7a00 	vldr	s15, [r3]
 800e052:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e056:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 800e05a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800e05e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e062:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e066:	4b3b      	ldr	r3, [pc, #236]	@ (800e154 <imu_ahrs_update+0x390>)
 800e068:	edd3 7a00 	vldr	s15, [r3]
 800e06c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e070:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800e074:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800e078:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e07c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800e080:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e088:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e08c:	4b32      	ldr	r3, [pc, #200]	@ (800e158 <imu_ahrs_update+0x394>)
 800e08e:	edd3 7a00 	vldr	s15, [r3]
 800e092:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e096:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 800e09a:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800e09e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e0a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e0a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e0aa:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    hz = 2.0f * mx * (q1q3 - q0q2) + 2.0f * my * (q2q3 + q0q1) + 2.0f * mz * (0.5f - q1q1 - q2q2);
 800e0ae:	4b28      	ldr	r3, [pc, #160]	@ (800e150 <imu_ahrs_update+0x38c>)
 800e0b0:	edd3 7a00 	vldr	s15, [r3]
 800e0b4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e0b8:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800e0bc:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800e0c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e0c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0c8:	4b22      	ldr	r3, [pc, #136]	@ (800e154 <imu_ahrs_update+0x390>)
 800e0ca:	edd3 7a00 	vldr	s15, [r3]
 800e0ce:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e0d2:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 800e0d6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800e0da:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e0de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e0e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e0e6:	4b1c      	ldr	r3, [pc, #112]	@ (800e158 <imu_ahrs_update+0x394>)
 800e0e8:	edd3 7a00 	vldr	s15, [r3]
 800e0ec:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e0f0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800e0f4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800e0f8:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e0fc:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800e100:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e10c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    bx = sqrt((hx * hx) + (hy * hy));
 800e110:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800e114:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800e118:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800e11c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e120:	e022      	b.n	800e168 <imu_ahrs_update+0x3a4>
 800e122:	bf00      	nop
 800e124:	200000b4 	.word	0x200000b4
 800e128:	20000c7c 	.word	0x20000c7c
 800e12c:	20000c80 	.word	0x20000c80
 800e130:	20000c84 	.word	0x20000c84
 800e134:	20000cc4 	.word	0x20000cc4
 800e138:	20000cfc 	.word	0x20000cfc
 800e13c:	20000d00 	.word	0x20000d00
 800e140:	20000d04 	.word	0x20000d04
 800e144:	20000d08 	.word	0x20000d08
 800e148:	20000d0c 	.word	0x20000d0c
 800e14c:	20000d10 	.word	0x20000d10
 800e150:	20000d14 	.word	0x20000d14
 800e154:	20000d18 	.word	0x20000d18
 800e158:	20000d1c 	.word	0x20000d1c
 800e15c:	20000d24 	.word	0x20000d24
 800e160:	20000d20 	.word	0x20000d20
 800e164:	44fa0000 	.word	0x44fa0000
 800e168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e16c:	ee17 0a90 	vmov	r0, s15
 800e170:	f7f2 fa12 	bl	8000598 <__aeabi_f2d>
 800e174:	4602      	mov	r2, r0
 800e176:	460b      	mov	r3, r1
 800e178:	ec43 2b10 	vmov	d0, r2, r3
 800e17c:	f005 fa96 	bl	80136ac <sqrt>
 800e180:	ec53 2b10 	vmov	r2, r3, d0
 800e184:	4610      	mov	r0, r2
 800e186:	4619      	mov	r1, r3
 800e188:	f7f2 fd56 	bl	8000c38 <__aeabi_d2f>
 800e18c:	4603      	mov	r3, r0
 800e18e:	63bb      	str	r3, [r7, #56]	@ 0x38
    bz = hz;
 800e190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e192:	637b      	str	r3, [r7, #52]	@ 0x34

    /* 估计重力和通量方向(v和w)   */
    vx = 2.0f * (q1q3 - q0q2);
 800e194:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800e198:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800e19c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e1a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e1a4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    vy = 2.0f * (q0q1 + q2q3);
 800e1a8:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800e1ac:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800e1b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e1b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e1b8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    vz = q0q0 - q1q1 - q2q2 + q3q3;
 800e1bc:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800e1c0:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800e1c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e1c8:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800e1cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e1d0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800e1d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e1d8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    wx = 2.0f * bx * (0.5f - q2q2 - q3q3) + 2.0f * bz * (q1q3 - q0q2);
 800e1dc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800e1e0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e1e4:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800e1e8:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800e1ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e1f0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800e1f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e1f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1fc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800e200:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e204:	ed97 6a17 	vldr	s12, [r7, #92]	@ 0x5c
 800e208:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800e20c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e214:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e218:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    wy = 2.0f * bx * (q1q2 - q0q3) + 2.0f * bz * (q0q1 + q2q3);
 800e21c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800e220:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e224:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 800e228:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800e22c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e230:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e234:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800e238:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e23c:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 800e240:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800e244:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e248:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e24c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e250:	edc7 7a08 	vstr	s15, [r7, #32]
    wz = 2.0f * bx * (q0q2 + q1q3) + 2.0f * bz * (0.5f - q1q1 - q2q2);
 800e254:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800e258:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e25c:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800e260:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800e264:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e26c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800e270:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e274:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800e278:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800e27c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e280:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800e284:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e28c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e290:	edc7 7a07 	vstr	s15, [r7, #28]

    /*
     * 误差是场的参考方向与传感器测量方向的叉积之和
     */
    ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 800e294:	4bde      	ldr	r3, [pc, #888]	@ (800e610 <imu_ahrs_update+0x84c>)
 800e296:	ed93 7a00 	vldr	s14, [r3]
 800e29a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800e29e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e2a2:	4bdc      	ldr	r3, [pc, #880]	@ (800e614 <imu_ahrs_update+0x850>)
 800e2a4:	edd3 6a00 	vldr	s13, [r3]
 800e2a8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800e2ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e2b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e2b4:	4bd8      	ldr	r3, [pc, #864]	@ (800e618 <imu_ahrs_update+0x854>)
 800e2b6:	edd3 6a00 	vldr	s13, [r3]
 800e2ba:	edd7 7a07 	vldr	s15, [r7, #28]
 800e2be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e2c2:	4bd6      	ldr	r3, [pc, #856]	@ (800e61c <imu_ahrs_update+0x858>)
 800e2c4:	ed93 6a00 	vldr	s12, [r3]
 800e2c8:	edd7 7a08 	vldr	s15, [r7, #32]
 800e2cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e2d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e2d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2d8:	edc7 7a06 	vstr	s15, [r7, #24]
    ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 800e2dc:	4bcd      	ldr	r3, [pc, #820]	@ (800e614 <imu_ahrs_update+0x850>)
 800e2de:	ed93 7a00 	vldr	s14, [r3]
 800e2e2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800e2e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e2ea:	4bcd      	ldr	r3, [pc, #820]	@ (800e620 <imu_ahrs_update+0x85c>)
 800e2ec:	edd3 6a00 	vldr	s13, [r3]
 800e2f0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800e2f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e2f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e2fc:	4bc7      	ldr	r3, [pc, #796]	@ (800e61c <imu_ahrs_update+0x858>)
 800e2fe:	edd3 6a00 	vldr	s13, [r3]
 800e302:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e306:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e30a:	4bc6      	ldr	r3, [pc, #792]	@ (800e624 <imu_ahrs_update+0x860>)
 800e30c:	ed93 6a00 	vldr	s12, [r3]
 800e310:	edd7 7a07 	vldr	s15, [r7, #28]
 800e314:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e318:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e31c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e320:	edc7 7a05 	vstr	s15, [r7, #20]
    ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 800e324:	4bbe      	ldr	r3, [pc, #760]	@ (800e620 <imu_ahrs_update+0x85c>)
 800e326:	ed93 7a00 	vldr	s14, [r3]
 800e32a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800e32e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e332:	4bb7      	ldr	r3, [pc, #732]	@ (800e610 <imu_ahrs_update+0x84c>)
 800e334:	edd3 6a00 	vldr	s13, [r3]
 800e338:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800e33c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e340:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e344:	4bb7      	ldr	r3, [pc, #732]	@ (800e624 <imu_ahrs_update+0x860>)
 800e346:	edd3 6a00 	vldr	s13, [r3]
 800e34a:	edd7 7a08 	vldr	s15, [r7, #32]
 800e34e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e352:	4bb1      	ldr	r3, [pc, #708]	@ (800e618 <imu_ahrs_update+0x854>)
 800e354:	ed93 6a00 	vldr	s12, [r3]
 800e358:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e35c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e360:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e364:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e368:	edc7 7a04 	vstr	s15, [r7, #16]

    /* PI */
    if (ex != 0.0f && ey != 0.0f && ez != 0.0f)
 800e36c:	edd7 7a06 	vldr	s15, [r7, #24]
 800e370:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e378:	d076      	beq.n	800e468 <imu_ahrs_update+0x6a4>
 800e37a:	edd7 7a05 	vldr	s15, [r7, #20]
 800e37e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e386:	d06f      	beq.n	800e468 <imu_ahrs_update+0x6a4>
 800e388:	edd7 7a04 	vldr	s15, [r7, #16]
 800e38c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e394:	d068      	beq.n	800e468 <imu_ahrs_update+0x6a4>
    {
        exInt = exInt + ex * Ki * halfT;
 800e396:	edd7 7a06 	vldr	s15, [r7, #24]
 800e39a:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 800e628 <imu_ahrs_update+0x864>
 800e39e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e3a2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e3a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e3aa:	4ba0      	ldr	r3, [pc, #640]	@ (800e62c <imu_ahrs_update+0x868>)
 800e3ac:	edd3 7a00 	vldr	s15, [r3]
 800e3b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e3b4:	4b9d      	ldr	r3, [pc, #628]	@ (800e62c <imu_ahrs_update+0x868>)
 800e3b6:	edc3 7a00 	vstr	s15, [r3]
        eyInt = eyInt + ey * Ki * halfT;
 800e3ba:	edd7 7a05 	vldr	s15, [r7, #20]
 800e3be:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800e628 <imu_ahrs_update+0x864>
 800e3c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e3c6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e3ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e3ce:	4b98      	ldr	r3, [pc, #608]	@ (800e630 <imu_ahrs_update+0x86c>)
 800e3d0:	edd3 7a00 	vldr	s15, [r3]
 800e3d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e3d8:	4b95      	ldr	r3, [pc, #596]	@ (800e630 <imu_ahrs_update+0x86c>)
 800e3da:	edc3 7a00 	vstr	s15, [r3]
        ezInt = ezInt + ez * Ki * halfT;
 800e3de:	edd7 7a04 	vldr	s15, [r7, #16]
 800e3e2:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800e628 <imu_ahrs_update+0x864>
 800e3e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e3ea:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e3ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e3f2:	4b90      	ldr	r3, [pc, #576]	@ (800e634 <imu_ahrs_update+0x870>)
 800e3f4:	edd3 7a00 	vldr	s15, [r3]
 800e3f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e3fc:	4b8d      	ldr	r3, [pc, #564]	@ (800e634 <imu_ahrs_update+0x870>)
 800e3fe:	edc3 7a00 	vstr	s15, [r3]

        gx = gx + Kp * ex + exInt;
 800e402:	edd7 7a06 	vldr	s15, [r7, #24]
 800e406:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e40a:	4b8b      	ldr	r3, [pc, #556]	@ (800e638 <imu_ahrs_update+0x874>)
 800e40c:	edd3 7a00 	vldr	s15, [r3]
 800e410:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e414:	4b85      	ldr	r3, [pc, #532]	@ (800e62c <imu_ahrs_update+0x868>)
 800e416:	edd3 7a00 	vldr	s15, [r3]
 800e41a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e41e:	4b86      	ldr	r3, [pc, #536]	@ (800e638 <imu_ahrs_update+0x874>)
 800e420:	edc3 7a00 	vstr	s15, [r3]
        gy = gy + Kp * ey + eyInt;
 800e424:	edd7 7a05 	vldr	s15, [r7, #20]
 800e428:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e42c:	4b83      	ldr	r3, [pc, #524]	@ (800e63c <imu_ahrs_update+0x878>)
 800e42e:	edd3 7a00 	vldr	s15, [r3]
 800e432:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e436:	4b7e      	ldr	r3, [pc, #504]	@ (800e630 <imu_ahrs_update+0x86c>)
 800e438:	edd3 7a00 	vldr	s15, [r3]
 800e43c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e440:	4b7e      	ldr	r3, [pc, #504]	@ (800e63c <imu_ahrs_update+0x878>)
 800e442:	edc3 7a00 	vstr	s15, [r3]
        gz = gz + Kp * ez + ezInt;
 800e446:	edd7 7a04 	vldr	s15, [r7, #16]
 800e44a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e44e:	4b7c      	ldr	r3, [pc, #496]	@ (800e640 <imu_ahrs_update+0x87c>)
 800e450:	edd3 7a00 	vldr	s15, [r3]
 800e454:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e458:	4b76      	ldr	r3, [pc, #472]	@ (800e634 <imu_ahrs_update+0x870>)
 800e45a:	edd3 7a00 	vldr	s15, [r3]
 800e45e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e462:	4b77      	ldr	r3, [pc, #476]	@ (800e640 <imu_ahrs_update+0x87c>)
 800e464:	edc3 7a00 	vstr	s15, [r3]
    }

    tempq0 = q0 + (-q1 * gx - q2 * gy - q3 * gz) * halfT;
 800e468:	4b76      	ldr	r3, [pc, #472]	@ (800e644 <imu_ahrs_update+0x880>)
 800e46a:	edd3 7a00 	vldr	s15, [r3]
 800e46e:	eeb1 7a67 	vneg.f32	s14, s15
 800e472:	4b71      	ldr	r3, [pc, #452]	@ (800e638 <imu_ahrs_update+0x874>)
 800e474:	edd3 7a00 	vldr	s15, [r3]
 800e478:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e47c:	4b72      	ldr	r3, [pc, #456]	@ (800e648 <imu_ahrs_update+0x884>)
 800e47e:	edd3 6a00 	vldr	s13, [r3]
 800e482:	4b6e      	ldr	r3, [pc, #440]	@ (800e63c <imu_ahrs_update+0x878>)
 800e484:	edd3 7a00 	vldr	s15, [r3]
 800e488:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e48c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e490:	4b6e      	ldr	r3, [pc, #440]	@ (800e64c <imu_ahrs_update+0x888>)
 800e492:	edd3 6a00 	vldr	s13, [r3]
 800e496:	4b6a      	ldr	r3, [pc, #424]	@ (800e640 <imu_ahrs_update+0x87c>)
 800e498:	edd3 7a00 	vldr	s15, [r3]
 800e49c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e4a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e4a4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e4a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e4ac:	4b68      	ldr	r3, [pc, #416]	@ (800e650 <imu_ahrs_update+0x88c>)
 800e4ae:	edd3 7a00 	vldr	s15, [r3]
 800e4b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e4b6:	edc7 7a03 	vstr	s15, [r7, #12]
    tempq1 = q1 + (q0 * gx + q2 * gz - q3 * gy) * halfT;
 800e4ba:	4b65      	ldr	r3, [pc, #404]	@ (800e650 <imu_ahrs_update+0x88c>)
 800e4bc:	ed93 7a00 	vldr	s14, [r3]
 800e4c0:	4b5d      	ldr	r3, [pc, #372]	@ (800e638 <imu_ahrs_update+0x874>)
 800e4c2:	edd3 7a00 	vldr	s15, [r3]
 800e4c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e4ca:	4b5f      	ldr	r3, [pc, #380]	@ (800e648 <imu_ahrs_update+0x884>)
 800e4cc:	edd3 6a00 	vldr	s13, [r3]
 800e4d0:	4b5b      	ldr	r3, [pc, #364]	@ (800e640 <imu_ahrs_update+0x87c>)
 800e4d2:	edd3 7a00 	vldr	s15, [r3]
 800e4d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e4da:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e4de:	4b5b      	ldr	r3, [pc, #364]	@ (800e64c <imu_ahrs_update+0x888>)
 800e4e0:	edd3 6a00 	vldr	s13, [r3]
 800e4e4:	4b55      	ldr	r3, [pc, #340]	@ (800e63c <imu_ahrs_update+0x878>)
 800e4e6:	edd3 7a00 	vldr	s15, [r3]
 800e4ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e4ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e4f2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e4f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e4fa:	4b52      	ldr	r3, [pc, #328]	@ (800e644 <imu_ahrs_update+0x880>)
 800e4fc:	edd3 7a00 	vldr	s15, [r3]
 800e500:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e504:	edc7 7a02 	vstr	s15, [r7, #8]
    tempq2 = q2 + (q0 * gy - q1 * gz + q3 * gx) * halfT;
 800e508:	4b51      	ldr	r3, [pc, #324]	@ (800e650 <imu_ahrs_update+0x88c>)
 800e50a:	ed93 7a00 	vldr	s14, [r3]
 800e50e:	4b4b      	ldr	r3, [pc, #300]	@ (800e63c <imu_ahrs_update+0x878>)
 800e510:	edd3 7a00 	vldr	s15, [r3]
 800e514:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e518:	4b4a      	ldr	r3, [pc, #296]	@ (800e644 <imu_ahrs_update+0x880>)
 800e51a:	edd3 6a00 	vldr	s13, [r3]
 800e51e:	4b48      	ldr	r3, [pc, #288]	@ (800e640 <imu_ahrs_update+0x87c>)
 800e520:	edd3 7a00 	vldr	s15, [r3]
 800e524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e528:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e52c:	4b47      	ldr	r3, [pc, #284]	@ (800e64c <imu_ahrs_update+0x888>)
 800e52e:	edd3 6a00 	vldr	s13, [r3]
 800e532:	4b41      	ldr	r3, [pc, #260]	@ (800e638 <imu_ahrs_update+0x874>)
 800e534:	edd3 7a00 	vldr	s15, [r3]
 800e538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e53c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e540:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e544:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e548:	4b3f      	ldr	r3, [pc, #252]	@ (800e648 <imu_ahrs_update+0x884>)
 800e54a:	edd3 7a00 	vldr	s15, [r3]
 800e54e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e552:	edc7 7a01 	vstr	s15, [r7, #4]
    tempq3 = q3 + (q0 * gz + q1 * gy - q2 * gx) * halfT;
 800e556:	4b3e      	ldr	r3, [pc, #248]	@ (800e650 <imu_ahrs_update+0x88c>)
 800e558:	ed93 7a00 	vldr	s14, [r3]
 800e55c:	4b38      	ldr	r3, [pc, #224]	@ (800e640 <imu_ahrs_update+0x87c>)
 800e55e:	edd3 7a00 	vldr	s15, [r3]
 800e562:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e566:	4b37      	ldr	r3, [pc, #220]	@ (800e644 <imu_ahrs_update+0x880>)
 800e568:	edd3 6a00 	vldr	s13, [r3]
 800e56c:	4b33      	ldr	r3, [pc, #204]	@ (800e63c <imu_ahrs_update+0x878>)
 800e56e:	edd3 7a00 	vldr	s15, [r3]
 800e572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e576:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e57a:	4b33      	ldr	r3, [pc, #204]	@ (800e648 <imu_ahrs_update+0x884>)
 800e57c:	edd3 6a00 	vldr	s13, [r3]
 800e580:	4b2d      	ldr	r3, [pc, #180]	@ (800e638 <imu_ahrs_update+0x874>)
 800e582:	edd3 7a00 	vldr	s15, [r3]
 800e586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e58a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e58e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e592:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e596:	4b2d      	ldr	r3, [pc, #180]	@ (800e64c <imu_ahrs_update+0x888>)
 800e598:	edd3 7a00 	vldr	s15, [r3]
 800e59c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5a0:	edc7 7a00 	vstr	s15, [r7]

    /*将四元数标准化 */
    norm = inv_sqrt(tempq0 * tempq0 + tempq1 * tempq1 + tempq2 * tempq2 + tempq3 * tempq3);
 800e5a4:	edd7 7a03 	vldr	s15, [r7, #12]
 800e5a8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800e5ac:	edd7 7a02 	vldr	s15, [r7, #8]
 800e5b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e5b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e5b8:	edd7 7a01 	vldr	s15, [r7, #4]
 800e5bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e5c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e5c4:	edd7 7a00 	vldr	s15, [r7]
 800e5c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e5cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5d0:	eeb0 0a67 	vmov.f32	s0, s15
 800e5d4:	f7fe ffb4 	bl	800d540 <inv_sqrt>
 800e5d8:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    q0 = tempq0 * norm;
 800e5dc:	ed97 7a03 	vldr	s14, [r7, #12]
 800e5e0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800e5e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5e8:	4b19      	ldr	r3, [pc, #100]	@ (800e650 <imu_ahrs_update+0x88c>)
 800e5ea:	edc3 7a00 	vstr	s15, [r3]
    q1 = tempq1 * norm;
 800e5ee:	ed97 7a02 	vldr	s14, [r7, #8]
 800e5f2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800e5f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5fa:	4b12      	ldr	r3, [pc, #72]	@ (800e644 <imu_ahrs_update+0x880>)
 800e5fc:	edc3 7a00 	vstr	s15, [r3]
    q2 = tempq2 * norm;
 800e600:	ed97 7a01 	vldr	s14, [r7, #4]
 800e604:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800e608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e60c:	e022      	b.n	800e654 <imu_ahrs_update+0x890>
 800e60e:	bf00      	nop
 800e610:	20000d0c 	.word	0x20000d0c
 800e614:	20000d10 	.word	0x20000d10
 800e618:	20000d18 	.word	0x20000d18
 800e61c:	20000d1c 	.word	0x20000d1c
 800e620:	20000d08 	.word	0x20000d08
 800e624:	20000d14 	.word	0x20000d14
 800e628:	3c23d70a 	.word	0x3c23d70a
 800e62c:	20000c88 	.word	0x20000c88
 800e630:	20000c8c 	.word	0x20000c8c
 800e634:	20000c90 	.word	0x20000c90
 800e638:	20000cfc 	.word	0x20000cfc
 800e63c:	20000d00 	.word	0x20000d00
 800e640:	20000d04 	.word	0x20000d04
 800e644:	20000c7c 	.word	0x20000c7c
 800e648:	20000c80 	.word	0x20000c80
 800e64c:	20000c84 	.word	0x20000c84
 800e650:	200000b4 	.word	0x200000b4
 800e654:	4b07      	ldr	r3, [pc, #28]	@ (800e674 <imu_ahrs_update+0x8b0>)
 800e656:	edc3 7a00 	vstr	s15, [r3]
    q3 = tempq3 * norm;
 800e65a:	ed97 7a00 	vldr	s14, [r7]
 800e65e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800e662:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e666:	4b04      	ldr	r3, [pc, #16]	@ (800e678 <imu_ahrs_update+0x8b4>)
 800e668:	edc3 7a00 	vstr	s15, [r3]
}
 800e66c:	bf00      	nop
 800e66e:	3778      	adds	r7, #120	@ 0x78
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	20000c80 	.word	0x20000c80
 800e678:	20000c84 	.word	0x20000c84
 800e67c:	00000000 	.word	0x00000000

0800e680 <imu_attitude_update>:

// 更新imu的态度
void imu_attitude_update(void)
{
 800e680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e684:	af00      	add	r7, sp, #0
    /* yaw    -pi----pi */
    imu.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3, -2 * q2 * q2 - 2 * q3 * q3 + 1) * 57.3;
 800e686:	4b76      	ldr	r3, [pc, #472]	@ (800e860 <imu_attitude_update+0x1e0>)
 800e688:	edd3 7a00 	vldr	s15, [r3]
 800e68c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e690:	4b74      	ldr	r3, [pc, #464]	@ (800e864 <imu_attitude_update+0x1e4>)
 800e692:	edd3 7a00 	vldr	s15, [r3]
 800e696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e69a:	4b73      	ldr	r3, [pc, #460]	@ (800e868 <imu_attitude_update+0x1e8>)
 800e69c:	edd3 7a00 	vldr	s15, [r3]
 800e6a0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e6a4:	4b71      	ldr	r3, [pc, #452]	@ (800e86c <imu_attitude_update+0x1ec>)
 800e6a6:	edd3 7a00 	vldr	s15, [r3]
 800e6aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6b2:	ee17 0a90 	vmov	r0, s15
 800e6b6:	f7f1 ff6f 	bl	8000598 <__aeabi_f2d>
 800e6ba:	4682      	mov	sl, r0
 800e6bc:	468b      	mov	fp, r1
 800e6be:	4b69      	ldr	r3, [pc, #420]	@ (800e864 <imu_attitude_update+0x1e4>)
 800e6c0:	edd3 7a00 	vldr	s15, [r3]
 800e6c4:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800e6c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e6cc:	4b65      	ldr	r3, [pc, #404]	@ (800e864 <imu_attitude_update+0x1e4>)
 800e6ce:	edd3 7a00 	vldr	s15, [r3]
 800e6d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e6d6:	4b65      	ldr	r3, [pc, #404]	@ (800e86c <imu_attitude_update+0x1ec>)
 800e6d8:	edd3 7a00 	vldr	s15, [r3]
 800e6dc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e6e0:	4b62      	ldr	r3, [pc, #392]	@ (800e86c <imu_attitude_update+0x1ec>)
 800e6e2:	edd3 7a00 	vldr	s15, [r3]
 800e6e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e6ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e6f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e6f6:	ee17 0a90 	vmov	r0, s15
 800e6fa:	f7f1 ff4d 	bl	8000598 <__aeabi_f2d>
 800e6fe:	4602      	mov	r2, r0
 800e700:	460b      	mov	r3, r1
 800e702:	ec43 2b11 	vmov	d1, r2, r3
 800e706:	ec4b ab10 	vmov	d0, sl, fp
 800e70a:	f004 ff9f 	bl	801364c <atan2>
 800e70e:	ec53 2b10 	vmov	r2, r3, d0
 800e712:	4690      	mov	r8, r2
 800e714:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800e718:	a34f      	add	r3, pc, #316	@ (adr r3, 800e858 <imu_attitude_update+0x1d8>)
 800e71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e71e:	4640      	mov	r0, r8
 800e720:	4649      	mov	r1, r9
 800e722:	f7f1 ff91 	bl	8000648 <__aeabi_dmul>
 800e726:	4602      	mov	r2, r0
 800e728:	460b      	mov	r3, r1
 800e72a:	4610      	mov	r0, r2
 800e72c:	4619      	mov	r1, r3
 800e72e:	f7f2 fa83 	bl	8000c38 <__aeabi_d2f>
 800e732:	4603      	mov	r3, r0
 800e734:	4a4e      	ldr	r2, [pc, #312]	@ (800e870 <imu_attitude_update+0x1f0>)
 800e736:	6313      	str	r3, [r2, #48]	@ 0x30
    /* pitch  -pi/2----pi/2 */
    imu.pit = -asin(-2 * q1 * q3 + 2 * q0 * q2) * 57.3;
 800e738:	4b49      	ldr	r3, [pc, #292]	@ (800e860 <imu_attitude_update+0x1e0>)
 800e73a:	edd3 7a00 	vldr	s15, [r3]
 800e73e:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800e742:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e746:	4b49      	ldr	r3, [pc, #292]	@ (800e86c <imu_attitude_update+0x1ec>)
 800e748:	edd3 7a00 	vldr	s15, [r3]
 800e74c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e750:	4b45      	ldr	r3, [pc, #276]	@ (800e868 <imu_attitude_update+0x1e8>)
 800e752:	edd3 7a00 	vldr	s15, [r3]
 800e756:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e75a:	4b42      	ldr	r3, [pc, #264]	@ (800e864 <imu_attitude_update+0x1e4>)
 800e75c:	edd3 7a00 	vldr	s15, [r3]
 800e760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e764:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e768:	ee17 0a90 	vmov	r0, s15
 800e76c:	f7f1 ff14 	bl	8000598 <__aeabi_f2d>
 800e770:	4602      	mov	r2, r0
 800e772:	460b      	mov	r3, r1
 800e774:	ec43 2b10 	vmov	d0, r2, r3
 800e778:	f004 ff34 	bl	80135e4 <asin>
 800e77c:	ec53 2b10 	vmov	r2, r3, d0
 800e780:	4614      	mov	r4, r2
 800e782:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800e786:	a334      	add	r3, pc, #208	@ (adr r3, 800e858 <imu_attitude_update+0x1d8>)
 800e788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78c:	4620      	mov	r0, r4
 800e78e:	4629      	mov	r1, r5
 800e790:	f7f1 ff5a 	bl	8000648 <__aeabi_dmul>
 800e794:	4602      	mov	r2, r0
 800e796:	460b      	mov	r3, r1
 800e798:	4610      	mov	r0, r2
 800e79a:	4619      	mov	r1, r3
 800e79c:	f7f2 fa4c 	bl	8000c38 <__aeabi_d2f>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	4a33      	ldr	r2, [pc, #204]	@ (800e870 <imu_attitude_update+0x1f0>)
 800e7a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    /* roll   -pi----pi  */
    imu.rol = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2 * q2 + 1) * 57.3;
 800e7a6:	4b2f      	ldr	r3, [pc, #188]	@ (800e864 <imu_attitude_update+0x1e4>)
 800e7a8:	edd3 7a00 	vldr	s15, [r3]
 800e7ac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e7b0:	4b2e      	ldr	r3, [pc, #184]	@ (800e86c <imu_attitude_update+0x1ec>)
 800e7b2:	edd3 7a00 	vldr	s15, [r3]
 800e7b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e7ba:	4b2b      	ldr	r3, [pc, #172]	@ (800e868 <imu_attitude_update+0x1e8>)
 800e7bc:	edd3 7a00 	vldr	s15, [r3]
 800e7c0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e7c4:	4b26      	ldr	r3, [pc, #152]	@ (800e860 <imu_attitude_update+0x1e0>)
 800e7c6:	edd3 7a00 	vldr	s15, [r3]
 800e7ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e7ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e7d2:	ee17 0a90 	vmov	r0, s15
 800e7d6:	f7f1 fedf 	bl	8000598 <__aeabi_f2d>
 800e7da:	4604      	mov	r4, r0
 800e7dc:	460d      	mov	r5, r1
 800e7de:	4b20      	ldr	r3, [pc, #128]	@ (800e860 <imu_attitude_update+0x1e0>)
 800e7e0:	edd3 7a00 	vldr	s15, [r3]
 800e7e4:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800e7e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e7ec:	4b1c      	ldr	r3, [pc, #112]	@ (800e860 <imu_attitude_update+0x1e0>)
 800e7ee:	edd3 7a00 	vldr	s15, [r3]
 800e7f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e7f6:	4b1b      	ldr	r3, [pc, #108]	@ (800e864 <imu_attitude_update+0x1e4>)
 800e7f8:	edd3 7a00 	vldr	s15, [r3]
 800e7fc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e800:	4b18      	ldr	r3, [pc, #96]	@ (800e864 <imu_attitude_update+0x1e4>)
 800e802:	edd3 7a00 	vldr	s15, [r3]
 800e806:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e80a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e80e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e812:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e816:	ee17 0a90 	vmov	r0, s15
 800e81a:	f7f1 febd 	bl	8000598 <__aeabi_f2d>
 800e81e:	4602      	mov	r2, r0
 800e820:	460b      	mov	r3, r1
 800e822:	ec43 2b11 	vmov	d1, r2, r3
 800e826:	ec45 4b10 	vmov	d0, r4, r5
 800e82a:	f004 ff0f 	bl	801364c <atan2>
 800e82e:	ec51 0b10 	vmov	r0, r1, d0
 800e832:	a309      	add	r3, pc, #36	@ (adr r3, 800e858 <imu_attitude_update+0x1d8>)
 800e834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e838:	f7f1 ff06 	bl	8000648 <__aeabi_dmul>
 800e83c:	4602      	mov	r2, r0
 800e83e:	460b      	mov	r3, r1
 800e840:	4610      	mov	r0, r2
 800e842:	4619      	mov	r1, r3
 800e844:	f7f2 f9f8 	bl	8000c38 <__aeabi_d2f>
 800e848:	4603      	mov	r3, r0
 800e84a:	4a09      	ldr	r2, [pc, #36]	@ (800e870 <imu_attitude_update+0x1f0>)
 800e84c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800e84e:	bf00      	nop
 800e850:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e854:	f3af 8000 	nop.w
 800e858:	66666666 	.word	0x66666666
 800e85c:	404ca666 	.word	0x404ca666
 800e860:	20000c7c 	.word	0x20000c7c
 800e864:	20000c80 	.word	0x20000c80
 800e868:	200000b4 	.word	0x200000b4
 800e86c:	20000c84 	.word	0x20000c84
 800e870:	20000cc4 	.word	0x20000cc4

0800e874 <_1_MT6701_GetRawData>:
#include "focLib.h"
#include "time_utils.h"
// static unsigned int rotationCount, rotationCount_Last;

uint16_t _1_MT6701_GetRawData(void)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b084      	sub	sp, #16
 800e878:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800e87a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e87e:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800e880:	23c8      	movs	r3, #200	@ 0xc8
 800e882:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800e884:	e009      	b.n	800e89a <_1_MT6701_GetRawData+0x26>
    {
        if (timeOut-- == 0)
 800e886:	88fb      	ldrh	r3, [r7, #6]
 800e888:	1e5a      	subs	r2, r3, #1
 800e88a:	80fa      	strh	r2, [r7, #6]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d104      	bne.n	800e89a <_1_MT6701_GetRawData+0x26>
        {
            printLog("SPI state error!\r\n");
 800e890:	4819      	ldr	r0, [pc, #100]	@ (800e8f8 <_1_MT6701_GetRawData+0x84>)
 800e892:	f7fe fba3 	bl	800cfdc <printLog>
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800e896:	2300      	movs	r3, #0
 800e898:	e02a      	b.n	800e8f0 <_1_MT6701_GetRawData+0x7c>
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800e89a:	4818      	ldr	r0, [pc, #96]	@ (800e8fc <_1_MT6701_GetRawData+0x88>)
 800e89c:	f7f9 fb01 	bl	8007ea2 <HAL_SPI_GetState>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d1ef      	bne.n	800e886 <_1_MT6701_GetRawData+0x12>
        }
    }

    _1_MT6701_CS_Enable;
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	2108      	movs	r1, #8
 800e8aa:	4815      	ldr	r0, [pc, #84]	@ (800e900 <_1_MT6701_GetRawData+0x8c>)
 800e8ac:	f7f8 f842 	bl	8006934 <HAL_GPIO_WritePin>

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800e8b0:	1cba      	adds	r2, r7, #2
 800e8b2:	4639      	mov	r1, r7
 800e8b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e8b8:	9300      	str	r3, [sp, #0]
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	480f      	ldr	r0, [pc, #60]	@ (800e8fc <_1_MT6701_GetRawData+0x88>)
 800e8be:	f7f9 f8ce 	bl	8007a5e <HAL_SPI_TransmitReceive>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800e8c6:	797b      	ldrb	r3, [r7, #5]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d009      	beq.n	800e8e0 <_1_MT6701_GetRawData+0x6c>
    {
        _1_MT6701_CS_Disable;
 800e8cc:	2201      	movs	r2, #1
 800e8ce:	2108      	movs	r1, #8
 800e8d0:	480b      	ldr	r0, [pc, #44]	@ (800e900 <_1_MT6701_GetRawData+0x8c>)
 800e8d2:	f7f8 f82f 	bl	8006934 <HAL_GPIO_WritePin>
        printLog("MT6701 read data error!\r\n");
 800e8d6:	480b      	ldr	r0, [pc, #44]	@ (800e904 <_1_MT6701_GetRawData+0x90>)
 800e8d8:	f7fe fb80 	bl	800cfdc <printLog>
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800e8dc:	2300      	movs	r3, #0
 800e8de:	e007      	b.n	800e8f0 <_1_MT6701_GetRawData+0x7c>
    }

    _1_MT6701_CS_Disable;
 800e8e0:	2201      	movs	r2, #1
 800e8e2:	2108      	movs	r1, #8
 800e8e4:	4806      	ldr	r0, [pc, #24]	@ (800e900 <_1_MT6701_GetRawData+0x8c>)
 800e8e6:	f7f8 f825 	bl	8006934 <HAL_GPIO_WritePin>

    return rawData >> 2; // 取高14位的角度数据
 800e8ea:	887b      	ldrh	r3, [r7, #2]
 800e8ec:	089b      	lsrs	r3, r3, #2
 800e8ee:	b29b      	uxth	r3, r3
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3708      	adds	r7, #8
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}
 800e8f8:	080144e0 	.word	0x080144e0
 800e8fc:	20000458 	.word	0x20000458
 800e900:	48000400 	.word	0x48000400
 800e904:	080144f4 	.word	0x080144f4

0800e908 <_1_MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float _1_MT6701_GetRawAngle(void)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
    uint16_t rawData = _1_MT6701_GetRawData();
 800e90e:	f7ff ffb1 	bl	800e874 <_1_MT6701_GetRawData>
 800e912:	4603      	mov	r3, r0
 800e914:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800e916:	88fb      	ldrh	r3, [r7, #6]
 800e918:	ee07 3a90 	vmov	s15, r3
 800e91c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e920:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800e93c <_1_MT6701_GetRawAngle+0x34>
 800e924:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e928:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800e940 <_1_MT6701_GetRawAngle+0x38>
 800e92c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800e930:	eeb0 0a67 	vmov.f32	s0, s15
 800e934:	3708      	adds	r7, #8
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	bf00      	nop
 800e93c:	46800000 	.word	0x46800000
 800e940:	40c90fdb 	.word	0x40c90fdb

0800e944 <_2_MT6701_GetRawData>:

uint16_t _2_MT6701_GetRawData(void)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800e94a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e94e:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800e950:	23c8      	movs	r3, #200	@ 0xc8
 800e952:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800e954:	e009      	b.n	800e96a <_2_MT6701_GetRawData+0x26>
    {
        if (timeOut-- == 0)
 800e956:	88fb      	ldrh	r3, [r7, #6]
 800e958:	1e5a      	subs	r2, r3, #1
 800e95a:	80fa      	strh	r2, [r7, #6]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d104      	bne.n	800e96a <_2_MT6701_GetRawData+0x26>
        {
            printLog("SPI state error!\r\n");
 800e960:	4819      	ldr	r0, [pc, #100]	@ (800e9c8 <_2_MT6701_GetRawData+0x84>)
 800e962:	f7fe fb3b 	bl	800cfdc <printLog>
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800e966:	2300      	movs	r3, #0
 800e968:	e02a      	b.n	800e9c0 <_2_MT6701_GetRawData+0x7c>
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800e96a:	4818      	ldr	r0, [pc, #96]	@ (800e9cc <_2_MT6701_GetRawData+0x88>)
 800e96c:	f7f9 fa99 	bl	8007ea2 <HAL_SPI_GetState>
 800e970:	4603      	mov	r3, r0
 800e972:	2b01      	cmp	r3, #1
 800e974:	d1ef      	bne.n	800e956 <_2_MT6701_GetRawData+0x12>
        }
    }

    _2_MT6701_CS_Enable;
 800e976:	2200      	movs	r2, #0
 800e978:	2110      	movs	r1, #16
 800e97a:	4815      	ldr	r0, [pc, #84]	@ (800e9d0 <_2_MT6701_GetRawData+0x8c>)
 800e97c:	f7f7 ffda 	bl	8006934 <HAL_GPIO_WritePin>

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800e980:	1cba      	adds	r2, r7, #2
 800e982:	4639      	mov	r1, r7
 800e984:	f04f 33ff 	mov.w	r3, #4294967295
 800e988:	9300      	str	r3, [sp, #0]
 800e98a:	2301      	movs	r3, #1
 800e98c:	480f      	ldr	r0, [pc, #60]	@ (800e9cc <_2_MT6701_GetRawData+0x88>)
 800e98e:	f7f9 f866 	bl	8007a5e <HAL_SPI_TransmitReceive>
 800e992:	4603      	mov	r3, r0
 800e994:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800e996:	797b      	ldrb	r3, [r7, #5]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d009      	beq.n	800e9b0 <_2_MT6701_GetRawData+0x6c>
    {
        _2_MT6701_CS_Disable;
 800e99c:	2201      	movs	r2, #1
 800e99e:	2110      	movs	r1, #16
 800e9a0:	480b      	ldr	r0, [pc, #44]	@ (800e9d0 <_2_MT6701_GetRawData+0x8c>)
 800e9a2:	f7f7 ffc7 	bl	8006934 <HAL_GPIO_WritePin>
        printLog("MT6701 read data error!\r\n");
 800e9a6:	480b      	ldr	r0, [pc, #44]	@ (800e9d4 <_2_MT6701_GetRawData+0x90>)
 800e9a8:	f7fe fb18 	bl	800cfdc <printLog>
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	e007      	b.n	800e9c0 <_2_MT6701_GetRawData+0x7c>
    }

    _2_MT6701_CS_Disable;
 800e9b0:	2201      	movs	r2, #1
 800e9b2:	2110      	movs	r1, #16
 800e9b4:	4806      	ldr	r0, [pc, #24]	@ (800e9d0 <_2_MT6701_GetRawData+0x8c>)
 800e9b6:	f7f7 ffbd 	bl	8006934 <HAL_GPIO_WritePin>

    return rawData >> 2; // 取高14位的角度数据
 800e9ba:	887b      	ldrh	r3, [r7, #2]
 800e9bc:	089b      	lsrs	r3, r3, #2
 800e9be:	b29b      	uxth	r3, r3
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3708      	adds	r7, #8
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	080144e0 	.word	0x080144e0
 800e9cc:	20000458 	.word	0x20000458
 800e9d0:	48000800 	.word	0x48000800
 800e9d4:	080144f4 	.word	0x080144f4

0800e9d8 <_2_MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float _2_MT6701_GetRawAngle(void)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
    uint16_t rawData = _2_MT6701_GetRawData();
 800e9de:	f7ff ffb1 	bl	800e944 <_2_MT6701_GetRawData>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800e9e6:	88fb      	ldrh	r3, [r7, #6]
 800e9e8:	ee07 3a90 	vmov	s15, r3
 800e9ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e9f0:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800ea0c <_2_MT6701_GetRawAngle+0x34>
 800e9f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e9f8:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800ea10 <_2_MT6701_GetRawAngle+0x38>
 800e9fc:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800ea00:	eeb0 0a67 	vmov.f32	s0, s15
 800ea04:	3708      	adds	r7, #8
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}
 800ea0a:	bf00      	nop
 800ea0c:	46800000 	.word	0x46800000
 800ea10:	40c90fdb 	.word	0x40c90fdb

0800ea14 <startPwm1>:
#include "pwm.h"

 void startPwm1()
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800ea18:	2100      	movs	r1, #0
 800ea1a:	4806      	ldr	r0, [pc, #24]	@ (800ea34 <startPwm1+0x20>)
 800ea1c:	f7f9 fcd0 	bl	80083c0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800ea20:	2104      	movs	r1, #4
 800ea22:	4804      	ldr	r0, [pc, #16]	@ (800ea34 <startPwm1+0x20>)
 800ea24:	f7f9 fccc 	bl	80083c0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800ea28:	2108      	movs	r1, #8
 800ea2a:	4802      	ldr	r0, [pc, #8]	@ (800ea34 <startPwm1+0x20>)
 800ea2c:	f7f9 fcc8 	bl	80083c0 <HAL_TIM_PWM_Start>

}
 800ea30:	bf00      	nop
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	20000558 	.word	0x20000558

0800ea38 <stopPwm1>:
 void stopPwm1()
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800ea3c:	2100      	movs	r1, #0
 800ea3e:	4806      	ldr	r0, [pc, #24]	@ (800ea58 <stopPwm1+0x20>)
 800ea40:	f7f9 fdbe 	bl	80085c0 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 800ea44:	2104      	movs	r1, #4
 800ea46:	4804      	ldr	r0, [pc, #16]	@ (800ea58 <stopPwm1+0x20>)
 800ea48:	f7f9 fdba 	bl	80085c0 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 800ea4c:	2108      	movs	r1, #8
 800ea4e:	4802      	ldr	r0, [pc, #8]	@ (800ea58 <stopPwm1+0x20>)
 800ea50:	f7f9 fdb6 	bl	80085c0 <HAL_TIM_PWM_Stop>

}
 800ea54:	bf00      	nop
 800ea56:	bd80      	pop	{r7, pc}
 800ea58:	20000558 	.word	0x20000558

0800ea5c <updatePwm1>:
 void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b083      	sub	sp, #12
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	4603      	mov	r3, r0
 800ea64:	80fb      	strh	r3, [r7, #6]
 800ea66:	460b      	mov	r3, r1
 800ea68:	80bb      	strh	r3, [r7, #4]
 800ea6a:	4613      	mov	r3, r2
 800ea6c:	807b      	strh	r3, [r7, #2]
    TIM8->CCR1 = a;
 800ea6e:	4a07      	ldr	r2, [pc, #28]	@ (800ea8c <updatePwm1+0x30>)
 800ea70:	88fb      	ldrh	r3, [r7, #6]
 800ea72:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM8->CCR2 = b;
 800ea74:	4a05      	ldr	r2, [pc, #20]	@ (800ea8c <updatePwm1+0x30>)
 800ea76:	88bb      	ldrh	r3, [r7, #4]
 800ea78:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM8->CCR3 = c;
 800ea7a:	4a04      	ldr	r2, [pc, #16]	@ (800ea8c <updatePwm1+0x30>)
 800ea7c:	887b      	ldrh	r3, [r7, #2]
 800ea7e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800ea80:	bf00      	nop
 800ea82:	370c      	adds	r7, #12
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr
 800ea8c:	40013400 	.word	0x40013400

0800ea90 <startPwm2>:

 void startPwm2()
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800ea94:	2100      	movs	r1, #0
 800ea96:	4806      	ldr	r0, [pc, #24]	@ (800eab0 <startPwm2+0x20>)
 800ea98:	f7f9 fc92 	bl	80083c0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800ea9c:	2104      	movs	r1, #4
 800ea9e:	4804      	ldr	r0, [pc, #16]	@ (800eab0 <startPwm2+0x20>)
 800eaa0:	f7f9 fc8e 	bl	80083c0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800eaa4:	2108      	movs	r1, #8
 800eaa6:	4802      	ldr	r0, [pc, #8]	@ (800eab0 <startPwm2+0x20>)
 800eaa8:	f7f9 fc8a 	bl	80083c0 <HAL_TIM_PWM_Start>
 
}
 800eaac:	bf00      	nop
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	200004c0 	.word	0x200004c0

0800eab4 <stopPwm2>:
 void stopPwm2()
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800eab8:	2100      	movs	r1, #0
 800eaba:	4806      	ldr	r0, [pc, #24]	@ (800ead4 <stopPwm2+0x20>)
 800eabc:	f7f9 fd80 	bl	80085c0 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800eac0:	2104      	movs	r1, #4
 800eac2:	4804      	ldr	r0, [pc, #16]	@ (800ead4 <stopPwm2+0x20>)
 800eac4:	f7f9 fd7c 	bl	80085c0 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800eac8:	2108      	movs	r1, #8
 800eaca:	4802      	ldr	r0, [pc, #8]	@ (800ead4 <stopPwm2+0x20>)
 800eacc:	f7f9 fd78 	bl	80085c0 <HAL_TIM_PWM_Stop>
 
}
 800ead0:	bf00      	nop
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	200004c0 	.word	0x200004c0

0800ead8 <updatePwm2>:

 void updatePwm2(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800ead8:	b480      	push	{r7}
 800eada:	b083      	sub	sp, #12
 800eadc:	af00      	add	r7, sp, #0
 800eade:	4603      	mov	r3, r0
 800eae0:	80fb      	strh	r3, [r7, #6]
 800eae2:	460b      	mov	r3, r1
 800eae4:	80bb      	strh	r3, [r7, #4]
 800eae6:	4613      	mov	r3, r2
 800eae8:	807b      	strh	r3, [r7, #2]
    TIM1->CCR1 = a;
 800eaea:	4a07      	ldr	r2, [pc, #28]	@ (800eb08 <updatePwm2+0x30>)
 800eaec:	88fb      	ldrh	r3, [r7, #6]
 800eaee:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = b;
 800eaf0:	4a05      	ldr	r2, [pc, #20]	@ (800eb08 <updatePwm2+0x30>)
 800eaf2:	88bb      	ldrh	r3, [r7, #4]
 800eaf4:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = c;
 800eaf6:	4a04      	ldr	r2, [pc, #16]	@ (800eb08 <updatePwm2+0x30>)
 800eaf8:	887b      	ldrh	r3, [r7, #2]
 800eafa:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800eafc:	bf00      	nop
 800eafe:	370c      	adds	r7, #12
 800eb00:	46bd      	mov	sp, r7
 800eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb06:	4770      	bx	lr
 800eb08:	40012c00 	.word	0x40012c00

0800eb0c <delay>:
#include "time_utils.h"

__IO uint32_t m, tms, u, t0;

void delay(uint32_t _ms)
{
 800eb0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eb10:	b082      	sub	sp, #8
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	6078      	str	r0, [r7, #4]
    t0 = micros();
 800eb16:	f000 f83b 	bl	800eb90 <micros>
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	460b      	mov	r3, r1
 800eb1e:	4b11      	ldr	r3, [pc, #68]	@ (800eb64 <delay+0x58>)
 800eb20:	601a      	str	r2, [r3, #0]
    while (micros() - t0 < _ms * 1000)
 800eb22:	e000      	b.n	800eb26 <delay+0x1a>
        __NOP();
 800eb24:	bf00      	nop
    while (micros() - t0 < _ms * 1000)
 800eb26:	f000 f833 	bl	800eb90 <micros>
 800eb2a:	4602      	mov	r2, r0
 800eb2c:	460b      	mov	r3, r1
 800eb2e:	490d      	ldr	r1, [pc, #52]	@ (800eb64 <delay+0x58>)
 800eb30:	6809      	ldr	r1, [r1, #0]
 800eb32:	2000      	movs	r0, #0
 800eb34:	468a      	mov	sl, r1
 800eb36:	4683      	mov	fp, r0
 800eb38:	ebb2 040a 	subs.w	r4, r2, sl
 800eb3c:	eb63 050b 	sbc.w	r5, r3, fp
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800eb46:	fb02 f303 	mul.w	r3, r2, r3
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	4698      	mov	r8, r3
 800eb4e:	4691      	mov	r9, r2
 800eb50:	4544      	cmp	r4, r8
 800eb52:	eb75 0309 	sbcs.w	r3, r5, r9
 800eb56:	d3e5      	bcc.n	800eb24 <delay+0x18>
}
 800eb58:	bf00      	nop
 800eb5a:	bf00      	nop
 800eb5c:	3708      	adds	r7, #8
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb64:	20000d34 	.word	0x20000d34

0800eb68 <LL_SYSTICK_IsActiveCounterFlag>:
    while (_us--)
        __NOP();
}

__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag()
{
 800eb68:	b480      	push	{r7}
 800eb6a:	af00      	add	r7, sp, #0
    return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800eb6c:	4b07      	ldr	r3, [pc, #28]	@ (800eb8c <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800eb74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eb78:	bf0c      	ite	eq
 800eb7a:	2301      	moveq	r3, #1
 800eb7c:	2300      	movne	r3, #0
 800eb7e:	b2db      	uxtb	r3, r3
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	46bd      	mov	sp, r7
 800eb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb88:	4770      	bx	lr
 800eb8a:	bf00      	nop
 800eb8c:	e000e010 	.word	0xe000e010

0800eb90 <micros>:

uint64_t micros()
{
 800eb90:	b5b0      	push	{r4, r5, r7, lr}
 800eb92:	af00      	add	r7, sp, #0
    /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
    LL_SYSTICK_IsActiveCounterFlag();
 800eb94:	f7ff ffe8 	bl	800eb68 <LL_SYSTICK_IsActiveCounterFlag>
    m = HAL_GetTick();
 800eb98:	f7f3 fffa 	bl	8002b90 <HAL_GetTick>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	4a1c      	ldr	r2, [pc, #112]	@ (800ec10 <micros+0x80>)
 800eba0:	6013      	str	r3, [r2, #0]
    tms = SysTick->LOAD + 1;
 800eba2:	4b1c      	ldr	r3, [pc, #112]	@ (800ec14 <micros+0x84>)
 800eba4:	685b      	ldr	r3, [r3, #4]
 800eba6:	3301      	adds	r3, #1
 800eba8:	4a1b      	ldr	r2, [pc, #108]	@ (800ec18 <micros+0x88>)
 800ebaa:	6013      	str	r3, [r2, #0]
    u = tms - SysTick->VAL;
 800ebac:	4b1a      	ldr	r3, [pc, #104]	@ (800ec18 <micros+0x88>)
 800ebae:	681a      	ldr	r2, [r3, #0]
 800ebb0:	4b18      	ldr	r3, [pc, #96]	@ (800ec14 <micros+0x84>)
 800ebb2:	689b      	ldr	r3, [r3, #8]
 800ebb4:	1ad3      	subs	r3, r2, r3
 800ebb6:	4a19      	ldr	r2, [pc, #100]	@ (800ec1c <micros+0x8c>)
 800ebb8:	6013      	str	r3, [r2, #0]
    if (LL_SYSTICK_IsActiveCounterFlag())
 800ebba:	f7ff ffd5 	bl	800eb68 <LL_SYSTICK_IsActiveCounterFlag>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d00b      	beq.n	800ebdc <micros+0x4c>
    {
        m = HAL_GetTick();
 800ebc4:	f7f3 ffe4 	bl	8002b90 <HAL_GetTick>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	4a11      	ldr	r2, [pc, #68]	@ (800ec10 <micros+0x80>)
 800ebcc:	6013      	str	r3, [r2, #0]
        u = tms - SysTick->VAL;
 800ebce:	4b12      	ldr	r3, [pc, #72]	@ (800ec18 <micros+0x88>)
 800ebd0:	681a      	ldr	r2, [r3, #0]
 800ebd2:	4b10      	ldr	r3, [pc, #64]	@ (800ec14 <micros+0x84>)
 800ebd4:	689b      	ldr	r3, [r3, #8]
 800ebd6:	1ad3      	subs	r3, r2, r3
 800ebd8:	4a10      	ldr	r2, [pc, #64]	@ (800ec1c <micros+0x8c>)
 800ebda:	6013      	str	r3, [r2, #0]
    }
    return (m * 1000 + (u * 1000) / tms);
 800ebdc:	4b0c      	ldr	r3, [pc, #48]	@ (800ec10 <micros+0x80>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ebe4:	fb03 f202 	mul.w	r2, r3, r2
 800ebe8:	4b0c      	ldr	r3, [pc, #48]	@ (800ec1c <micros+0x8c>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ebf0:	fb03 f101 	mul.w	r1, r3, r1
 800ebf4:	4b08      	ldr	r3, [pc, #32]	@ (800ec18 <micros+0x88>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	fbb1 f3f3 	udiv	r3, r1, r3
 800ebfc:	4413      	add	r3, r2
 800ebfe:	2200      	movs	r2, #0
 800ec00:	461c      	mov	r4, r3
 800ec02:	4615      	mov	r5, r2
 800ec04:	4622      	mov	r2, r4
 800ec06:	462b      	mov	r3, r5
}
 800ec08:	4610      	mov	r0, r2
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	bdb0      	pop	{r4, r5, r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	20000d28 	.word	0x20000d28
 800ec14:	e000e010 	.word	0xe000e010
 800ec18:	20000d2c 	.word	0x20000d2c
 800ec1c:	20000d30 	.word	0x20000d30

0800ec20 <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
// static bool powerLost;
void userMain(void)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	af00      	add	r7, sp, #0

	if (get5MsFlag())
 800ec24:	f000 f91e 	bl	800ee64 <get5MsFlag>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d001      	beq.n	800ec32 <userMain+0x12>
	{
		keyScan();
 800ec2e:	f7fe fab1 	bl	800d194 <keyScan>
	}
	if (getOneMsFlag())
 800ec32:	f000 f903 	bl	800ee3c <getOneMsFlag>
 800ec36:	4603      	mov	r3, r0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d017      	beq.n	800ec6c <userMain+0x4c>
	{
		static bool imuInited;

		if (imuInited == false)
 800ec3c:	4b10      	ldr	r3, [pc, #64]	@ (800ec80 <userMain+0x60>)
 800ec3e:	781b      	ldrb	r3, [r3, #0]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d10d      	bne.n	800ec60 <userMain+0x40>
		{
			if (IMU_Init() == 0)
 800ec44:	f7fe ff24 	bl	800da90 <IMU_Init>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d10e      	bne.n	800ec6c <userMain+0x4c>
			{
				init_quaternion();
 800ec4e:	f7fe ff7d 	bl	800db4c <init_quaternion>
				imuInited = true;
 800ec52:	4b0b      	ldr	r3, [pc, #44]	@ (800ec80 <userMain+0x60>)
 800ec54:	2201      	movs	r2, #1
 800ec56:	701a      	strb	r2, [r3, #0]
				printLog("mpu init done\n");
 800ec58:	480a      	ldr	r0, [pc, #40]	@ (800ec84 <userMain+0x64>)
 800ec5a:	f7fe f9bf 	bl	800cfdc <printLog>
 800ec5e:	e005      	b.n	800ec6c <userMain+0x4c>
			}
		}
		else
		{
			// IMU_handle();
			mpu_get_data();
 800ec60:	f7fe fd74 	bl	800d74c <mpu_get_data>
			imu_ahrs_update();
 800ec64:	f7ff f8ae 	bl	800ddc4 <imu_ahrs_update>
			imu_attitude_update();
 800ec68:	f7ff fd0a 	bl	800e680 <imu_attitude_update>
			
		}
	}

	if (get100MsFlag())
 800ec6c:	f000 f90e 	bl	800ee8c <get100MsFlag>
 800ec70:	4603      	mov	r3, r0
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d001      	beq.n	800ec7a <userMain+0x5a>
	{
		appRunning();
 800ec76:	f7fd fff7 	bl	800cc68 <appRunning>
	if (get500MsFlag())
	{
		uartTx();
	}
#endif
}
 800ec7a:	bf00      	nop
 800ec7c:	bd80      	pop	{r7, pc}
 800ec7e:	bf00      	nop
 800ec80:	20000d38 	.word	0x20000d38
 800ec84:	08014510 	.word	0x08014510

0800ec88 <dealPer100us>:


static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag, _1s;
static void dealPerMs();
void dealPer100us()
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800ec8c:	4b08      	ldr	r3, [pc, #32]	@ (800ecb0 <dealPer100us+0x28>)
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	3301      	adds	r3, #1
 800ec92:	b2da      	uxtb	r2, r3
 800ec94:	4b06      	ldr	r3, [pc, #24]	@ (800ecb0 <dealPer100us+0x28>)
 800ec96:	701a      	strb	r2, [r3, #0]
 800ec98:	4b05      	ldr	r3, [pc, #20]	@ (800ecb0 <dealPer100us+0x28>)
 800ec9a:	781b      	ldrb	r3, [r3, #0]
 800ec9c:	2b09      	cmp	r3, #9
 800ec9e:	d904      	bls.n	800ecaa <dealPer100us+0x22>
    {
        cnt = 0;
 800eca0:	4b03      	ldr	r3, [pc, #12]	@ (800ecb0 <dealPer100us+0x28>)
 800eca2:	2200      	movs	r2, #0
 800eca4:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800eca6:	f000 f805 	bl	800ecb4 <dealPerMs>
    }

}
 800ecaa:	bf00      	nop
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	20000d47 	.word	0x20000d47

0800ecb4 <dealPerMs>:

static void dealPerMs()
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt, _1000msCnt;
    if (++_5msCnt >= 5)
 800ecb8:	4b45      	ldr	r3, [pc, #276]	@ (800edd0 <dealPerMs+0x11c>)
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	b2da      	uxtb	r2, r3
 800ecc0:	4b43      	ldr	r3, [pc, #268]	@ (800edd0 <dealPerMs+0x11c>)
 800ecc2:	701a      	strb	r2, [r3, #0]
 800ecc4:	4b42      	ldr	r3, [pc, #264]	@ (800edd0 <dealPerMs+0x11c>)
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	2b04      	cmp	r3, #4
 800ecca:	d905      	bls.n	800ecd8 <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800eccc:	4b40      	ldr	r3, [pc, #256]	@ (800edd0 <dealPerMs+0x11c>)
 800ecce:	2200      	movs	r2, #0
 800ecd0:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800ecd2:	4b40      	ldr	r3, [pc, #256]	@ (800edd4 <dealPerMs+0x120>)
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800ecd8:	4b3f      	ldr	r3, [pc, #252]	@ (800edd8 <dealPerMs+0x124>)
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	3301      	adds	r3, #1
 800ecde:	b2da      	uxtb	r2, r3
 800ece0:	4b3d      	ldr	r3, [pc, #244]	@ (800edd8 <dealPerMs+0x124>)
 800ece2:	701a      	strb	r2, [r3, #0]
 800ece4:	4b3c      	ldr	r3, [pc, #240]	@ (800edd8 <dealPerMs+0x124>)
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	2b09      	cmp	r3, #9
 800ecea:	d905      	bls.n	800ecf8 <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800ecec:	4b3a      	ldr	r3, [pc, #232]	@ (800edd8 <dealPerMs+0x124>)
 800ecee:	2200      	movs	r2, #0
 800ecf0:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800ecf2:	4b3a      	ldr	r3, [pc, #232]	@ (800eddc <dealPerMs+0x128>)
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800ecf8:	4b39      	ldr	r3, [pc, #228]	@ (800ede0 <dealPerMs+0x12c>)
 800ecfa:	781b      	ldrb	r3, [r3, #0]
 800ecfc:	3301      	adds	r3, #1
 800ecfe:	b2da      	uxtb	r2, r3
 800ed00:	4b37      	ldr	r3, [pc, #220]	@ (800ede0 <dealPerMs+0x12c>)
 800ed02:	701a      	strb	r2, [r3, #0]
 800ed04:	4b36      	ldr	r3, [pc, #216]	@ (800ede0 <dealPerMs+0x12c>)
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	2b13      	cmp	r3, #19
 800ed0a:	d905      	bls.n	800ed18 <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800ed0c:	4b34      	ldr	r3, [pc, #208]	@ (800ede0 <dealPerMs+0x12c>)
 800ed0e:	2200      	movs	r2, #0
 800ed10:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800ed12:	4b34      	ldr	r3, [pc, #208]	@ (800ede4 <dealPerMs+0x130>)
 800ed14:	2201      	movs	r2, #1
 800ed16:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800ed18:	4b33      	ldr	r3, [pc, #204]	@ (800ede8 <dealPerMs+0x134>)
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	b2da      	uxtb	r2, r3
 800ed20:	4b31      	ldr	r3, [pc, #196]	@ (800ede8 <dealPerMs+0x134>)
 800ed22:	701a      	strb	r2, [r3, #0]
 800ed24:	4b30      	ldr	r3, [pc, #192]	@ (800ede8 <dealPerMs+0x134>)
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	2b1d      	cmp	r3, #29
 800ed2a:	d905      	bls.n	800ed38 <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800ed2c:	4b2e      	ldr	r3, [pc, #184]	@ (800ede8 <dealPerMs+0x134>)
 800ed2e:	2200      	movs	r2, #0
 800ed30:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800ed32:	4b2e      	ldr	r3, [pc, #184]	@ (800edec <dealPerMs+0x138>)
 800ed34:	2201      	movs	r2, #1
 800ed36:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800ed38:	4b2d      	ldr	r3, [pc, #180]	@ (800edf0 <dealPerMs+0x13c>)
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	b2da      	uxtb	r2, r3
 800ed40:	4b2b      	ldr	r3, [pc, #172]	@ (800edf0 <dealPerMs+0x13c>)
 800ed42:	701a      	strb	r2, [r3, #0]
 800ed44:	4b2a      	ldr	r3, [pc, #168]	@ (800edf0 <dealPerMs+0x13c>)
 800ed46:	781b      	ldrb	r3, [r3, #0]
 800ed48:	2b63      	cmp	r3, #99	@ 0x63
 800ed4a:	d905      	bls.n	800ed58 <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800ed4c:	4b28      	ldr	r3, [pc, #160]	@ (800edf0 <dealPerMs+0x13c>)
 800ed4e:	2200      	movs	r2, #0
 800ed50:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800ed52:	4b28      	ldr	r3, [pc, #160]	@ (800edf4 <dealPerMs+0x140>)
 800ed54:	2201      	movs	r2, #1
 800ed56:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800ed58:	4b27      	ldr	r3, [pc, #156]	@ (800edf8 <dealPerMs+0x144>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	4a26      	ldr	r2, [pc, #152]	@ (800edf8 <dealPerMs+0x144>)
 800ed60:	6013      	str	r3, [r2, #0]
 800ed62:	4b25      	ldr	r3, [pc, #148]	@ (800edf8 <dealPerMs+0x144>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800ed6a:	d305      	bcc.n	800ed78 <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800ed6c:	4b22      	ldr	r3, [pc, #136]	@ (800edf8 <dealPerMs+0x144>)
 800ed6e:	2200      	movs	r2, #0
 800ed70:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800ed72:	4b22      	ldr	r3, [pc, #136]	@ (800edfc <dealPerMs+0x148>)
 800ed74:	2201      	movs	r2, #1
 800ed76:	701a      	strb	r2, [r3, #0]
    }
    if (++_1000msCnt >= 1000)
 800ed78:	4b21      	ldr	r3, [pc, #132]	@ (800ee00 <dealPerMs+0x14c>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	3301      	adds	r3, #1
 800ed7e:	4a20      	ldr	r2, [pc, #128]	@ (800ee00 <dealPerMs+0x14c>)
 800ed80:	6013      	str	r3, [r2, #0]
 800ed82:	4b1f      	ldr	r3, [pc, #124]	@ (800ee00 <dealPerMs+0x14c>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ed8a:	d305      	bcc.n	800ed98 <dealPerMs+0xe4>
    {
        _1000msCnt = 0;
 800ed8c:	4b1c      	ldr	r3, [pc, #112]	@ (800ee00 <dealPerMs+0x14c>)
 800ed8e:	2200      	movs	r2, #0
 800ed90:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800ed92:	4b1c      	ldr	r3, [pc, #112]	@ (800ee04 <dealPerMs+0x150>)
 800ed94:	2201      	movs	r2, #1
 800ed96:	701a      	strb	r2, [r3, #0]

        cnt = 0;
    }

#else
    frequence = 50;
 800ed98:	4b1b      	ldr	r3, [pc, #108]	@ (800ee08 <dealPerMs+0x154>)
 800ed9a:	2232      	movs	r2, #50	@ 0x32
 800ed9c:	701a      	strb	r2, [r3, #0]
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
 800ed9e:	4b1b      	ldr	r3, [pc, #108]	@ (800ee0c <dealPerMs+0x158>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	3301      	adds	r3, #1
 800eda4:	4a19      	ldr	r2, [pc, #100]	@ (800ee0c <dealPerMs+0x158>)
 800eda6:	6013      	str	r3, [r2, #0]
 800eda8:	4b18      	ldr	r3, [pc, #96]	@ (800ee0c <dealPerMs+0x158>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800edb0:	d305      	bcc.n	800edbe <dealPerMs+0x10a>
    {
        _1msCnt = 0;
 800edb2:	4b16      	ldr	r3, [pc, #88]	@ (800ee0c <dealPerMs+0x158>)
 800edb4:	2200      	movs	r2, #0
 800edb6:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800edb8:	4b12      	ldr	r3, [pc, #72]	@ (800ee04 <dealPerMs+0x150>)
 800edba:	2201      	movs	r2, #1
 800edbc:	701a      	strb	r2, [r3, #0]
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
 800edbe:	4b14      	ldr	r3, [pc, #80]	@ (800ee10 <dealPerMs+0x15c>)
 800edc0:	2201      	movs	r2, #1
 800edc2:	701a      	strb	r2, [r3, #0]

}
 800edc4:	bf00      	nop
 800edc6:	46bd      	mov	sp, r7
 800edc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edcc:	4770      	bx	lr
 800edce:	bf00      	nop
 800edd0:	20000d48 	.word	0x20000d48
 800edd4:	20000d41 	.word	0x20000d41
 800edd8:	20000d49 	.word	0x20000d49
 800eddc:	20000d42 	.word	0x20000d42
 800ede0:	20000d4a 	.word	0x20000d4a
 800ede4:	20000d43 	.word	0x20000d43
 800ede8:	20000d4b 	.word	0x20000d4b
 800edec:	20000d44 	.word	0x20000d44
 800edf0:	20000d4c 	.word	0x20000d4c
 800edf4:	20000d45 	.word	0x20000d45
 800edf8:	20000d50 	.word	0x20000d50
 800edfc:	20000d46 	.word	0x20000d46
 800ee00:	20000d54 	.word	0x20000d54
 800ee04:	20000d39 	.word	0x20000d39
 800ee08:	20000d40 	.word	0x20000d40
 800ee0c:	20000d3c 	.word	0x20000d3c
 800ee10:	20000d3a 	.word	0x20000d3a

0800ee14 <getOneSecFlag>:
}



bool getOneSecFlag()
{
 800ee14:	b480      	push	{r7}
 800ee16:	af00      	add	r7, sp, #0
    if (_1s)
 800ee18:	4b07      	ldr	r3, [pc, #28]	@ (800ee38 <getOneSecFlag+0x24>)
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d004      	beq.n	800ee2a <getOneSecFlag+0x16>
    {
        _1s = 0;
 800ee20:	4b05      	ldr	r3, [pc, #20]	@ (800ee38 <getOneSecFlag+0x24>)
 800ee22:	2200      	movs	r2, #0
 800ee24:	701a      	strb	r2, [r3, #0]
        return 1;
 800ee26:	2301      	movs	r3, #1
 800ee28:	e000      	b.n	800ee2c <getOneSecFlag+0x18>
    }
    else
        return 0;
 800ee2a:	2300      	movs	r3, #0
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee34:	4770      	bx	lr
 800ee36:	bf00      	nop
 800ee38:	20000d39 	.word	0x20000d39

0800ee3c <getOneMsFlag>:

bool getOneMsFlag()
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	af00      	add	r7, sp, #0
    if (_1ms)
 800ee40:	4b07      	ldr	r3, [pc, #28]	@ (800ee60 <getOneMsFlag+0x24>)
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d004      	beq.n	800ee52 <getOneMsFlag+0x16>
    {
        _1ms = 0;
 800ee48:	4b05      	ldr	r3, [pc, #20]	@ (800ee60 <getOneMsFlag+0x24>)
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	701a      	strb	r2, [r3, #0]
        return 1;
 800ee4e:	2301      	movs	r3, #1
 800ee50:	e000      	b.n	800ee54 <getOneMsFlag+0x18>
    }
    else
        return 0;
 800ee52:	2300      	movs	r3, #0
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	46bd      	mov	sp, r7
 800ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5c:	4770      	bx	lr
 800ee5e:	bf00      	nop
 800ee60:	20000d3a 	.word	0x20000d3a

0800ee64 <get5MsFlag>:
bool getCrossZero()
{
    return crossZero;
}
bool get5MsFlag()
{
 800ee64:	b480      	push	{r7}
 800ee66:	af00      	add	r7, sp, #0
    if (_5msFlag)
 800ee68:	4b07      	ldr	r3, [pc, #28]	@ (800ee88 <get5MsFlag+0x24>)
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d004      	beq.n	800ee7a <get5MsFlag+0x16>
    {
        _5msFlag = 0;
 800ee70:	4b05      	ldr	r3, [pc, #20]	@ (800ee88 <get5MsFlag+0x24>)
 800ee72:	2200      	movs	r2, #0
 800ee74:	701a      	strb	r2, [r3, #0]
        return 1;
 800ee76:	2301      	movs	r3, #1
 800ee78:	e000      	b.n	800ee7c <get5MsFlag+0x18>
    }
    else
    {
        return 0;
 800ee7a:	2300      	movs	r3, #0
    }
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	20000d41 	.word	0x20000d41

0800ee8c <get100MsFlag>:
        return 0;
    }
}

bool get100MsFlag()
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800ee90:	4b07      	ldr	r3, [pc, #28]	@ (800eeb0 <get100MsFlag+0x24>)
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d004      	beq.n	800eea2 <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800ee98:	4b05      	ldr	r3, [pc, #20]	@ (800eeb0 <get100MsFlag+0x24>)
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	701a      	strb	r2, [r3, #0]
        return 1;
 800ee9e:	2301      	movs	r3, #1
 800eea0:	e000      	b.n	800eea4 <get100MsFlag+0x18>
    }
    else
    {
        return 0;
 800eea2:	2300      	movs	r3, #0
    }
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	46bd      	mov	sp, r7
 800eea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeac:	4770      	bx	lr
 800eeae:	bf00      	nop
 800eeb0:	20000d45 	.word	0x20000d45

0800eeb4 <atof>:
 800eeb4:	2100      	movs	r1, #0
 800eeb6:	f000 be09 	b.w	800facc <strtod>

0800eeba <sulp>:
 800eeba:	b570      	push	{r4, r5, r6, lr}
 800eebc:	4604      	mov	r4, r0
 800eebe:	460d      	mov	r5, r1
 800eec0:	ec45 4b10 	vmov	d0, r4, r5
 800eec4:	4616      	mov	r6, r2
 800eec6:	f003 fc7b 	bl	80127c0 <__ulp>
 800eeca:	ec51 0b10 	vmov	r0, r1, d0
 800eece:	b17e      	cbz	r6, 800eef0 <sulp+0x36>
 800eed0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eed4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	dd09      	ble.n	800eef0 <sulp+0x36>
 800eedc:	051b      	lsls	r3, r3, #20
 800eede:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800eee2:	2400      	movs	r4, #0
 800eee4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800eee8:	4622      	mov	r2, r4
 800eeea:	462b      	mov	r3, r5
 800eeec:	f7f1 fbac 	bl	8000648 <__aeabi_dmul>
 800eef0:	ec41 0b10 	vmov	d0, r0, r1
 800eef4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eef8 <_strtod_l>:
 800eef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eefc:	b09f      	sub	sp, #124	@ 0x7c
 800eefe:	460c      	mov	r4, r1
 800ef00:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ef02:	2200      	movs	r2, #0
 800ef04:	921a      	str	r2, [sp, #104]	@ 0x68
 800ef06:	9005      	str	r0, [sp, #20]
 800ef08:	f04f 0a00 	mov.w	sl, #0
 800ef0c:	f04f 0b00 	mov.w	fp, #0
 800ef10:	460a      	mov	r2, r1
 800ef12:	9219      	str	r2, [sp, #100]	@ 0x64
 800ef14:	7811      	ldrb	r1, [r2, #0]
 800ef16:	292b      	cmp	r1, #43	@ 0x2b
 800ef18:	d04a      	beq.n	800efb0 <_strtod_l+0xb8>
 800ef1a:	d838      	bhi.n	800ef8e <_strtod_l+0x96>
 800ef1c:	290d      	cmp	r1, #13
 800ef1e:	d832      	bhi.n	800ef86 <_strtod_l+0x8e>
 800ef20:	2908      	cmp	r1, #8
 800ef22:	d832      	bhi.n	800ef8a <_strtod_l+0x92>
 800ef24:	2900      	cmp	r1, #0
 800ef26:	d03b      	beq.n	800efa0 <_strtod_l+0xa8>
 800ef28:	2200      	movs	r2, #0
 800ef2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ef2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ef2e:	782a      	ldrb	r2, [r5, #0]
 800ef30:	2a30      	cmp	r2, #48	@ 0x30
 800ef32:	f040 80b3 	bne.w	800f09c <_strtod_l+0x1a4>
 800ef36:	786a      	ldrb	r2, [r5, #1]
 800ef38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ef3c:	2a58      	cmp	r2, #88	@ 0x58
 800ef3e:	d16e      	bne.n	800f01e <_strtod_l+0x126>
 800ef40:	9302      	str	r3, [sp, #8]
 800ef42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef44:	9301      	str	r3, [sp, #4]
 800ef46:	ab1a      	add	r3, sp, #104	@ 0x68
 800ef48:	9300      	str	r3, [sp, #0]
 800ef4a:	4a8e      	ldr	r2, [pc, #568]	@ (800f184 <_strtod_l+0x28c>)
 800ef4c:	9805      	ldr	r0, [sp, #20]
 800ef4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ef50:	a919      	add	r1, sp, #100	@ 0x64
 800ef52:	f002 fd27 	bl	80119a4 <__gethex>
 800ef56:	f010 060f 	ands.w	r6, r0, #15
 800ef5a:	4604      	mov	r4, r0
 800ef5c:	d005      	beq.n	800ef6a <_strtod_l+0x72>
 800ef5e:	2e06      	cmp	r6, #6
 800ef60:	d128      	bne.n	800efb4 <_strtod_l+0xbc>
 800ef62:	3501      	adds	r5, #1
 800ef64:	2300      	movs	r3, #0
 800ef66:	9519      	str	r5, [sp, #100]	@ 0x64
 800ef68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	f040 858e 	bne.w	800fa8e <_strtod_l+0xb96>
 800ef72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef74:	b1cb      	cbz	r3, 800efaa <_strtod_l+0xb2>
 800ef76:	4652      	mov	r2, sl
 800ef78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ef7c:	ec43 2b10 	vmov	d0, r2, r3
 800ef80:	b01f      	add	sp, #124	@ 0x7c
 800ef82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef86:	2920      	cmp	r1, #32
 800ef88:	d1ce      	bne.n	800ef28 <_strtod_l+0x30>
 800ef8a:	3201      	adds	r2, #1
 800ef8c:	e7c1      	b.n	800ef12 <_strtod_l+0x1a>
 800ef8e:	292d      	cmp	r1, #45	@ 0x2d
 800ef90:	d1ca      	bne.n	800ef28 <_strtod_l+0x30>
 800ef92:	2101      	movs	r1, #1
 800ef94:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ef96:	1c51      	adds	r1, r2, #1
 800ef98:	9119      	str	r1, [sp, #100]	@ 0x64
 800ef9a:	7852      	ldrb	r2, [r2, #1]
 800ef9c:	2a00      	cmp	r2, #0
 800ef9e:	d1c5      	bne.n	800ef2c <_strtod_l+0x34>
 800efa0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800efa2:	9419      	str	r4, [sp, #100]	@ 0x64
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	f040 8570 	bne.w	800fa8a <_strtod_l+0xb92>
 800efaa:	4652      	mov	r2, sl
 800efac:	465b      	mov	r3, fp
 800efae:	e7e5      	b.n	800ef7c <_strtod_l+0x84>
 800efb0:	2100      	movs	r1, #0
 800efb2:	e7ef      	b.n	800ef94 <_strtod_l+0x9c>
 800efb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800efb6:	b13a      	cbz	r2, 800efc8 <_strtod_l+0xd0>
 800efb8:	2135      	movs	r1, #53	@ 0x35
 800efba:	a81c      	add	r0, sp, #112	@ 0x70
 800efbc:	f003 fcfa 	bl	80129b4 <__copybits>
 800efc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800efc2:	9805      	ldr	r0, [sp, #20]
 800efc4:	f003 f8c8 	bl	8012158 <_Bfree>
 800efc8:	3e01      	subs	r6, #1
 800efca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800efcc:	2e04      	cmp	r6, #4
 800efce:	d806      	bhi.n	800efde <_strtod_l+0xe6>
 800efd0:	e8df f006 	tbb	[pc, r6]
 800efd4:	201d0314 	.word	0x201d0314
 800efd8:	14          	.byte	0x14
 800efd9:	00          	.byte	0x00
 800efda:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800efde:	05e1      	lsls	r1, r4, #23
 800efe0:	bf48      	it	mi
 800efe2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800efe6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800efea:	0d1b      	lsrs	r3, r3, #20
 800efec:	051b      	lsls	r3, r3, #20
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d1bb      	bne.n	800ef6a <_strtod_l+0x72>
 800eff2:	f001 fd8d 	bl	8010b10 <__errno>
 800eff6:	2322      	movs	r3, #34	@ 0x22
 800eff8:	6003      	str	r3, [r0, #0]
 800effa:	e7b6      	b.n	800ef6a <_strtod_l+0x72>
 800effc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f000:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f004:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f008:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f00c:	e7e7      	b.n	800efde <_strtod_l+0xe6>
 800f00e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f18c <_strtod_l+0x294>
 800f012:	e7e4      	b.n	800efde <_strtod_l+0xe6>
 800f014:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f018:	f04f 3aff 	mov.w	sl, #4294967295
 800f01c:	e7df      	b.n	800efde <_strtod_l+0xe6>
 800f01e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f020:	1c5a      	adds	r2, r3, #1
 800f022:	9219      	str	r2, [sp, #100]	@ 0x64
 800f024:	785b      	ldrb	r3, [r3, #1]
 800f026:	2b30      	cmp	r3, #48	@ 0x30
 800f028:	d0f9      	beq.n	800f01e <_strtod_l+0x126>
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d09d      	beq.n	800ef6a <_strtod_l+0x72>
 800f02e:	2301      	movs	r3, #1
 800f030:	9309      	str	r3, [sp, #36]	@ 0x24
 800f032:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f034:	930c      	str	r3, [sp, #48]	@ 0x30
 800f036:	2300      	movs	r3, #0
 800f038:	9308      	str	r3, [sp, #32]
 800f03a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f03c:	461f      	mov	r7, r3
 800f03e:	220a      	movs	r2, #10
 800f040:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f042:	7805      	ldrb	r5, [r0, #0]
 800f044:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f048:	b2d9      	uxtb	r1, r3
 800f04a:	2909      	cmp	r1, #9
 800f04c:	d928      	bls.n	800f0a0 <_strtod_l+0x1a8>
 800f04e:	494e      	ldr	r1, [pc, #312]	@ (800f188 <_strtod_l+0x290>)
 800f050:	2201      	movs	r2, #1
 800f052:	f001 fd01 	bl	8010a58 <strncmp>
 800f056:	2800      	cmp	r0, #0
 800f058:	d032      	beq.n	800f0c0 <_strtod_l+0x1c8>
 800f05a:	2000      	movs	r0, #0
 800f05c:	462a      	mov	r2, r5
 800f05e:	4681      	mov	r9, r0
 800f060:	463d      	mov	r5, r7
 800f062:	4603      	mov	r3, r0
 800f064:	2a65      	cmp	r2, #101	@ 0x65
 800f066:	d001      	beq.n	800f06c <_strtod_l+0x174>
 800f068:	2a45      	cmp	r2, #69	@ 0x45
 800f06a:	d114      	bne.n	800f096 <_strtod_l+0x19e>
 800f06c:	b91d      	cbnz	r5, 800f076 <_strtod_l+0x17e>
 800f06e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f070:	4302      	orrs	r2, r0
 800f072:	d095      	beq.n	800efa0 <_strtod_l+0xa8>
 800f074:	2500      	movs	r5, #0
 800f076:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f078:	1c62      	adds	r2, r4, #1
 800f07a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f07c:	7862      	ldrb	r2, [r4, #1]
 800f07e:	2a2b      	cmp	r2, #43	@ 0x2b
 800f080:	d077      	beq.n	800f172 <_strtod_l+0x27a>
 800f082:	2a2d      	cmp	r2, #45	@ 0x2d
 800f084:	d07b      	beq.n	800f17e <_strtod_l+0x286>
 800f086:	f04f 0c00 	mov.w	ip, #0
 800f08a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f08e:	2909      	cmp	r1, #9
 800f090:	f240 8082 	bls.w	800f198 <_strtod_l+0x2a0>
 800f094:	9419      	str	r4, [sp, #100]	@ 0x64
 800f096:	f04f 0800 	mov.w	r8, #0
 800f09a:	e0a2      	b.n	800f1e2 <_strtod_l+0x2ea>
 800f09c:	2300      	movs	r3, #0
 800f09e:	e7c7      	b.n	800f030 <_strtod_l+0x138>
 800f0a0:	2f08      	cmp	r7, #8
 800f0a2:	bfd5      	itete	le
 800f0a4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f0a6:	9908      	ldrgt	r1, [sp, #32]
 800f0a8:	fb02 3301 	mlale	r3, r2, r1, r3
 800f0ac:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f0b0:	f100 0001 	add.w	r0, r0, #1
 800f0b4:	bfd4      	ite	le
 800f0b6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f0b8:	9308      	strgt	r3, [sp, #32]
 800f0ba:	3701      	adds	r7, #1
 800f0bc:	9019      	str	r0, [sp, #100]	@ 0x64
 800f0be:	e7bf      	b.n	800f040 <_strtod_l+0x148>
 800f0c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f0c2:	1c5a      	adds	r2, r3, #1
 800f0c4:	9219      	str	r2, [sp, #100]	@ 0x64
 800f0c6:	785a      	ldrb	r2, [r3, #1]
 800f0c8:	b37f      	cbz	r7, 800f12a <_strtod_l+0x232>
 800f0ca:	4681      	mov	r9, r0
 800f0cc:	463d      	mov	r5, r7
 800f0ce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f0d2:	2b09      	cmp	r3, #9
 800f0d4:	d912      	bls.n	800f0fc <_strtod_l+0x204>
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	e7c4      	b.n	800f064 <_strtod_l+0x16c>
 800f0da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f0dc:	1c5a      	adds	r2, r3, #1
 800f0de:	9219      	str	r2, [sp, #100]	@ 0x64
 800f0e0:	785a      	ldrb	r2, [r3, #1]
 800f0e2:	3001      	adds	r0, #1
 800f0e4:	2a30      	cmp	r2, #48	@ 0x30
 800f0e6:	d0f8      	beq.n	800f0da <_strtod_l+0x1e2>
 800f0e8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f0ec:	2b08      	cmp	r3, #8
 800f0ee:	f200 84d3 	bhi.w	800fa98 <_strtod_l+0xba0>
 800f0f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f0f4:	930c      	str	r3, [sp, #48]	@ 0x30
 800f0f6:	4681      	mov	r9, r0
 800f0f8:	2000      	movs	r0, #0
 800f0fa:	4605      	mov	r5, r0
 800f0fc:	3a30      	subs	r2, #48	@ 0x30
 800f0fe:	f100 0301 	add.w	r3, r0, #1
 800f102:	d02a      	beq.n	800f15a <_strtod_l+0x262>
 800f104:	4499      	add	r9, r3
 800f106:	eb00 0c05 	add.w	ip, r0, r5
 800f10a:	462b      	mov	r3, r5
 800f10c:	210a      	movs	r1, #10
 800f10e:	4563      	cmp	r3, ip
 800f110:	d10d      	bne.n	800f12e <_strtod_l+0x236>
 800f112:	1c69      	adds	r1, r5, #1
 800f114:	4401      	add	r1, r0
 800f116:	4428      	add	r0, r5
 800f118:	2808      	cmp	r0, #8
 800f11a:	dc16      	bgt.n	800f14a <_strtod_l+0x252>
 800f11c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f11e:	230a      	movs	r3, #10
 800f120:	fb03 2300 	mla	r3, r3, r0, r2
 800f124:	930a      	str	r3, [sp, #40]	@ 0x28
 800f126:	2300      	movs	r3, #0
 800f128:	e018      	b.n	800f15c <_strtod_l+0x264>
 800f12a:	4638      	mov	r0, r7
 800f12c:	e7da      	b.n	800f0e4 <_strtod_l+0x1ec>
 800f12e:	2b08      	cmp	r3, #8
 800f130:	f103 0301 	add.w	r3, r3, #1
 800f134:	dc03      	bgt.n	800f13e <_strtod_l+0x246>
 800f136:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f138:	434e      	muls	r6, r1
 800f13a:	960a      	str	r6, [sp, #40]	@ 0x28
 800f13c:	e7e7      	b.n	800f10e <_strtod_l+0x216>
 800f13e:	2b10      	cmp	r3, #16
 800f140:	bfde      	ittt	le
 800f142:	9e08      	ldrle	r6, [sp, #32]
 800f144:	434e      	mulle	r6, r1
 800f146:	9608      	strle	r6, [sp, #32]
 800f148:	e7e1      	b.n	800f10e <_strtod_l+0x216>
 800f14a:	280f      	cmp	r0, #15
 800f14c:	dceb      	bgt.n	800f126 <_strtod_l+0x22e>
 800f14e:	9808      	ldr	r0, [sp, #32]
 800f150:	230a      	movs	r3, #10
 800f152:	fb03 2300 	mla	r3, r3, r0, r2
 800f156:	9308      	str	r3, [sp, #32]
 800f158:	e7e5      	b.n	800f126 <_strtod_l+0x22e>
 800f15a:	4629      	mov	r1, r5
 800f15c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f15e:	1c50      	adds	r0, r2, #1
 800f160:	9019      	str	r0, [sp, #100]	@ 0x64
 800f162:	7852      	ldrb	r2, [r2, #1]
 800f164:	4618      	mov	r0, r3
 800f166:	460d      	mov	r5, r1
 800f168:	e7b1      	b.n	800f0ce <_strtod_l+0x1d6>
 800f16a:	f04f 0900 	mov.w	r9, #0
 800f16e:	2301      	movs	r3, #1
 800f170:	e77d      	b.n	800f06e <_strtod_l+0x176>
 800f172:	f04f 0c00 	mov.w	ip, #0
 800f176:	1ca2      	adds	r2, r4, #2
 800f178:	9219      	str	r2, [sp, #100]	@ 0x64
 800f17a:	78a2      	ldrb	r2, [r4, #2]
 800f17c:	e785      	b.n	800f08a <_strtod_l+0x192>
 800f17e:	f04f 0c01 	mov.w	ip, #1
 800f182:	e7f8      	b.n	800f176 <_strtod_l+0x27e>
 800f184:	08014578 	.word	0x08014578
 800f188:	08014560 	.word	0x08014560
 800f18c:	7ff00000 	.word	0x7ff00000
 800f190:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f192:	1c51      	adds	r1, r2, #1
 800f194:	9119      	str	r1, [sp, #100]	@ 0x64
 800f196:	7852      	ldrb	r2, [r2, #1]
 800f198:	2a30      	cmp	r2, #48	@ 0x30
 800f19a:	d0f9      	beq.n	800f190 <_strtod_l+0x298>
 800f19c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f1a0:	2908      	cmp	r1, #8
 800f1a2:	f63f af78 	bhi.w	800f096 <_strtod_l+0x19e>
 800f1a6:	3a30      	subs	r2, #48	@ 0x30
 800f1a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f1aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f1ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f1ae:	f04f 080a 	mov.w	r8, #10
 800f1b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f1b4:	1c56      	adds	r6, r2, #1
 800f1b6:	9619      	str	r6, [sp, #100]	@ 0x64
 800f1b8:	7852      	ldrb	r2, [r2, #1]
 800f1ba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f1be:	f1be 0f09 	cmp.w	lr, #9
 800f1c2:	d939      	bls.n	800f238 <_strtod_l+0x340>
 800f1c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f1c6:	1a76      	subs	r6, r6, r1
 800f1c8:	2e08      	cmp	r6, #8
 800f1ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f1ce:	dc03      	bgt.n	800f1d8 <_strtod_l+0x2e0>
 800f1d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f1d2:	4588      	cmp	r8, r1
 800f1d4:	bfa8      	it	ge
 800f1d6:	4688      	movge	r8, r1
 800f1d8:	f1bc 0f00 	cmp.w	ip, #0
 800f1dc:	d001      	beq.n	800f1e2 <_strtod_l+0x2ea>
 800f1de:	f1c8 0800 	rsb	r8, r8, #0
 800f1e2:	2d00      	cmp	r5, #0
 800f1e4:	d14e      	bne.n	800f284 <_strtod_l+0x38c>
 800f1e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f1e8:	4308      	orrs	r0, r1
 800f1ea:	f47f aebe 	bne.w	800ef6a <_strtod_l+0x72>
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	f47f aed6 	bne.w	800efa0 <_strtod_l+0xa8>
 800f1f4:	2a69      	cmp	r2, #105	@ 0x69
 800f1f6:	d028      	beq.n	800f24a <_strtod_l+0x352>
 800f1f8:	dc25      	bgt.n	800f246 <_strtod_l+0x34e>
 800f1fa:	2a49      	cmp	r2, #73	@ 0x49
 800f1fc:	d025      	beq.n	800f24a <_strtod_l+0x352>
 800f1fe:	2a4e      	cmp	r2, #78	@ 0x4e
 800f200:	f47f aece 	bne.w	800efa0 <_strtod_l+0xa8>
 800f204:	499b      	ldr	r1, [pc, #620]	@ (800f474 <_strtod_l+0x57c>)
 800f206:	a819      	add	r0, sp, #100	@ 0x64
 800f208:	f002 fdee 	bl	8011de8 <__match>
 800f20c:	2800      	cmp	r0, #0
 800f20e:	f43f aec7 	beq.w	800efa0 <_strtod_l+0xa8>
 800f212:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f214:	781b      	ldrb	r3, [r3, #0]
 800f216:	2b28      	cmp	r3, #40	@ 0x28
 800f218:	d12e      	bne.n	800f278 <_strtod_l+0x380>
 800f21a:	4997      	ldr	r1, [pc, #604]	@ (800f478 <_strtod_l+0x580>)
 800f21c:	aa1c      	add	r2, sp, #112	@ 0x70
 800f21e:	a819      	add	r0, sp, #100	@ 0x64
 800f220:	f002 fdf6 	bl	8011e10 <__hexnan>
 800f224:	2805      	cmp	r0, #5
 800f226:	d127      	bne.n	800f278 <_strtod_l+0x380>
 800f228:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f22a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f22e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f232:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f236:	e698      	b.n	800ef6a <_strtod_l+0x72>
 800f238:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f23a:	fb08 2101 	mla	r1, r8, r1, r2
 800f23e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f242:	920e      	str	r2, [sp, #56]	@ 0x38
 800f244:	e7b5      	b.n	800f1b2 <_strtod_l+0x2ba>
 800f246:	2a6e      	cmp	r2, #110	@ 0x6e
 800f248:	e7da      	b.n	800f200 <_strtod_l+0x308>
 800f24a:	498c      	ldr	r1, [pc, #560]	@ (800f47c <_strtod_l+0x584>)
 800f24c:	a819      	add	r0, sp, #100	@ 0x64
 800f24e:	f002 fdcb 	bl	8011de8 <__match>
 800f252:	2800      	cmp	r0, #0
 800f254:	f43f aea4 	beq.w	800efa0 <_strtod_l+0xa8>
 800f258:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f25a:	4989      	ldr	r1, [pc, #548]	@ (800f480 <_strtod_l+0x588>)
 800f25c:	3b01      	subs	r3, #1
 800f25e:	a819      	add	r0, sp, #100	@ 0x64
 800f260:	9319      	str	r3, [sp, #100]	@ 0x64
 800f262:	f002 fdc1 	bl	8011de8 <__match>
 800f266:	b910      	cbnz	r0, 800f26e <_strtod_l+0x376>
 800f268:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f26a:	3301      	adds	r3, #1
 800f26c:	9319      	str	r3, [sp, #100]	@ 0x64
 800f26e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f490 <_strtod_l+0x598>
 800f272:	f04f 0a00 	mov.w	sl, #0
 800f276:	e678      	b.n	800ef6a <_strtod_l+0x72>
 800f278:	4882      	ldr	r0, [pc, #520]	@ (800f484 <_strtod_l+0x58c>)
 800f27a:	f001 fc85 	bl	8010b88 <nan>
 800f27e:	ec5b ab10 	vmov	sl, fp, d0
 800f282:	e672      	b.n	800ef6a <_strtod_l+0x72>
 800f284:	eba8 0309 	sub.w	r3, r8, r9
 800f288:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f28a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f28c:	2f00      	cmp	r7, #0
 800f28e:	bf08      	it	eq
 800f290:	462f      	moveq	r7, r5
 800f292:	2d10      	cmp	r5, #16
 800f294:	462c      	mov	r4, r5
 800f296:	bfa8      	it	ge
 800f298:	2410      	movge	r4, #16
 800f29a:	f7f1 f95b 	bl	8000554 <__aeabi_ui2d>
 800f29e:	2d09      	cmp	r5, #9
 800f2a0:	4682      	mov	sl, r0
 800f2a2:	468b      	mov	fp, r1
 800f2a4:	dc13      	bgt.n	800f2ce <_strtod_l+0x3d6>
 800f2a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	f43f ae5e 	beq.w	800ef6a <_strtod_l+0x72>
 800f2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2b0:	dd78      	ble.n	800f3a4 <_strtod_l+0x4ac>
 800f2b2:	2b16      	cmp	r3, #22
 800f2b4:	dc5f      	bgt.n	800f376 <_strtod_l+0x47e>
 800f2b6:	4974      	ldr	r1, [pc, #464]	@ (800f488 <_strtod_l+0x590>)
 800f2b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f2bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2c0:	4652      	mov	r2, sl
 800f2c2:	465b      	mov	r3, fp
 800f2c4:	f7f1 f9c0 	bl	8000648 <__aeabi_dmul>
 800f2c8:	4682      	mov	sl, r0
 800f2ca:	468b      	mov	fp, r1
 800f2cc:	e64d      	b.n	800ef6a <_strtod_l+0x72>
 800f2ce:	4b6e      	ldr	r3, [pc, #440]	@ (800f488 <_strtod_l+0x590>)
 800f2d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f2d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f2d8:	f7f1 f9b6 	bl	8000648 <__aeabi_dmul>
 800f2dc:	4682      	mov	sl, r0
 800f2de:	9808      	ldr	r0, [sp, #32]
 800f2e0:	468b      	mov	fp, r1
 800f2e2:	f7f1 f937 	bl	8000554 <__aeabi_ui2d>
 800f2e6:	4602      	mov	r2, r0
 800f2e8:	460b      	mov	r3, r1
 800f2ea:	4650      	mov	r0, sl
 800f2ec:	4659      	mov	r1, fp
 800f2ee:	f7f0 fff5 	bl	80002dc <__adddf3>
 800f2f2:	2d0f      	cmp	r5, #15
 800f2f4:	4682      	mov	sl, r0
 800f2f6:	468b      	mov	fp, r1
 800f2f8:	ddd5      	ble.n	800f2a6 <_strtod_l+0x3ae>
 800f2fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2fc:	1b2c      	subs	r4, r5, r4
 800f2fe:	441c      	add	r4, r3
 800f300:	2c00      	cmp	r4, #0
 800f302:	f340 8096 	ble.w	800f432 <_strtod_l+0x53a>
 800f306:	f014 030f 	ands.w	r3, r4, #15
 800f30a:	d00a      	beq.n	800f322 <_strtod_l+0x42a>
 800f30c:	495e      	ldr	r1, [pc, #376]	@ (800f488 <_strtod_l+0x590>)
 800f30e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f312:	4652      	mov	r2, sl
 800f314:	465b      	mov	r3, fp
 800f316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f31a:	f7f1 f995 	bl	8000648 <__aeabi_dmul>
 800f31e:	4682      	mov	sl, r0
 800f320:	468b      	mov	fp, r1
 800f322:	f034 040f 	bics.w	r4, r4, #15
 800f326:	d073      	beq.n	800f410 <_strtod_l+0x518>
 800f328:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f32c:	dd48      	ble.n	800f3c0 <_strtod_l+0x4c8>
 800f32e:	2400      	movs	r4, #0
 800f330:	46a0      	mov	r8, r4
 800f332:	940a      	str	r4, [sp, #40]	@ 0x28
 800f334:	46a1      	mov	r9, r4
 800f336:	9a05      	ldr	r2, [sp, #20]
 800f338:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f490 <_strtod_l+0x598>
 800f33c:	2322      	movs	r3, #34	@ 0x22
 800f33e:	6013      	str	r3, [r2, #0]
 800f340:	f04f 0a00 	mov.w	sl, #0
 800f344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f346:	2b00      	cmp	r3, #0
 800f348:	f43f ae0f 	beq.w	800ef6a <_strtod_l+0x72>
 800f34c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f34e:	9805      	ldr	r0, [sp, #20]
 800f350:	f002 ff02 	bl	8012158 <_Bfree>
 800f354:	9805      	ldr	r0, [sp, #20]
 800f356:	4649      	mov	r1, r9
 800f358:	f002 fefe 	bl	8012158 <_Bfree>
 800f35c:	9805      	ldr	r0, [sp, #20]
 800f35e:	4641      	mov	r1, r8
 800f360:	f002 fefa 	bl	8012158 <_Bfree>
 800f364:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f366:	9805      	ldr	r0, [sp, #20]
 800f368:	f002 fef6 	bl	8012158 <_Bfree>
 800f36c:	9805      	ldr	r0, [sp, #20]
 800f36e:	4621      	mov	r1, r4
 800f370:	f002 fef2 	bl	8012158 <_Bfree>
 800f374:	e5f9      	b.n	800ef6a <_strtod_l+0x72>
 800f376:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f378:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f37c:	4293      	cmp	r3, r2
 800f37e:	dbbc      	blt.n	800f2fa <_strtod_l+0x402>
 800f380:	4c41      	ldr	r4, [pc, #260]	@ (800f488 <_strtod_l+0x590>)
 800f382:	f1c5 050f 	rsb	r5, r5, #15
 800f386:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f38a:	4652      	mov	r2, sl
 800f38c:	465b      	mov	r3, fp
 800f38e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f392:	f7f1 f959 	bl	8000648 <__aeabi_dmul>
 800f396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f398:	1b5d      	subs	r5, r3, r5
 800f39a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f39e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f3a2:	e78f      	b.n	800f2c4 <_strtod_l+0x3cc>
 800f3a4:	3316      	adds	r3, #22
 800f3a6:	dba8      	blt.n	800f2fa <_strtod_l+0x402>
 800f3a8:	4b37      	ldr	r3, [pc, #220]	@ (800f488 <_strtod_l+0x590>)
 800f3aa:	eba9 0808 	sub.w	r8, r9, r8
 800f3ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f3b2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f3b6:	4650      	mov	r0, sl
 800f3b8:	4659      	mov	r1, fp
 800f3ba:	f7f1 fa6f 	bl	800089c <__aeabi_ddiv>
 800f3be:	e783      	b.n	800f2c8 <_strtod_l+0x3d0>
 800f3c0:	4b32      	ldr	r3, [pc, #200]	@ (800f48c <_strtod_l+0x594>)
 800f3c2:	9308      	str	r3, [sp, #32]
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	1124      	asrs	r4, r4, #4
 800f3c8:	4650      	mov	r0, sl
 800f3ca:	4659      	mov	r1, fp
 800f3cc:	461e      	mov	r6, r3
 800f3ce:	2c01      	cmp	r4, #1
 800f3d0:	dc21      	bgt.n	800f416 <_strtod_l+0x51e>
 800f3d2:	b10b      	cbz	r3, 800f3d8 <_strtod_l+0x4e0>
 800f3d4:	4682      	mov	sl, r0
 800f3d6:	468b      	mov	fp, r1
 800f3d8:	492c      	ldr	r1, [pc, #176]	@ (800f48c <_strtod_l+0x594>)
 800f3da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f3de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f3e2:	4652      	mov	r2, sl
 800f3e4:	465b      	mov	r3, fp
 800f3e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3ea:	f7f1 f92d 	bl	8000648 <__aeabi_dmul>
 800f3ee:	4b28      	ldr	r3, [pc, #160]	@ (800f490 <_strtod_l+0x598>)
 800f3f0:	460a      	mov	r2, r1
 800f3f2:	400b      	ands	r3, r1
 800f3f4:	4927      	ldr	r1, [pc, #156]	@ (800f494 <_strtod_l+0x59c>)
 800f3f6:	428b      	cmp	r3, r1
 800f3f8:	4682      	mov	sl, r0
 800f3fa:	d898      	bhi.n	800f32e <_strtod_l+0x436>
 800f3fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f400:	428b      	cmp	r3, r1
 800f402:	bf86      	itte	hi
 800f404:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f498 <_strtod_l+0x5a0>
 800f408:	f04f 3aff 	movhi.w	sl, #4294967295
 800f40c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f410:	2300      	movs	r3, #0
 800f412:	9308      	str	r3, [sp, #32]
 800f414:	e07a      	b.n	800f50c <_strtod_l+0x614>
 800f416:	07e2      	lsls	r2, r4, #31
 800f418:	d505      	bpl.n	800f426 <_strtod_l+0x52e>
 800f41a:	9b08      	ldr	r3, [sp, #32]
 800f41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f420:	f7f1 f912 	bl	8000648 <__aeabi_dmul>
 800f424:	2301      	movs	r3, #1
 800f426:	9a08      	ldr	r2, [sp, #32]
 800f428:	3208      	adds	r2, #8
 800f42a:	3601      	adds	r6, #1
 800f42c:	1064      	asrs	r4, r4, #1
 800f42e:	9208      	str	r2, [sp, #32]
 800f430:	e7cd      	b.n	800f3ce <_strtod_l+0x4d6>
 800f432:	d0ed      	beq.n	800f410 <_strtod_l+0x518>
 800f434:	4264      	negs	r4, r4
 800f436:	f014 020f 	ands.w	r2, r4, #15
 800f43a:	d00a      	beq.n	800f452 <_strtod_l+0x55a>
 800f43c:	4b12      	ldr	r3, [pc, #72]	@ (800f488 <_strtod_l+0x590>)
 800f43e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f442:	4650      	mov	r0, sl
 800f444:	4659      	mov	r1, fp
 800f446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44a:	f7f1 fa27 	bl	800089c <__aeabi_ddiv>
 800f44e:	4682      	mov	sl, r0
 800f450:	468b      	mov	fp, r1
 800f452:	1124      	asrs	r4, r4, #4
 800f454:	d0dc      	beq.n	800f410 <_strtod_l+0x518>
 800f456:	2c1f      	cmp	r4, #31
 800f458:	dd20      	ble.n	800f49c <_strtod_l+0x5a4>
 800f45a:	2400      	movs	r4, #0
 800f45c:	46a0      	mov	r8, r4
 800f45e:	940a      	str	r4, [sp, #40]	@ 0x28
 800f460:	46a1      	mov	r9, r4
 800f462:	9a05      	ldr	r2, [sp, #20]
 800f464:	2322      	movs	r3, #34	@ 0x22
 800f466:	f04f 0a00 	mov.w	sl, #0
 800f46a:	f04f 0b00 	mov.w	fp, #0
 800f46e:	6013      	str	r3, [r2, #0]
 800f470:	e768      	b.n	800f344 <_strtod_l+0x44c>
 800f472:	bf00      	nop
 800f474:	080145c5 	.word	0x080145c5
 800f478:	08014564 	.word	0x08014564
 800f47c:	080145bd 	.word	0x080145bd
 800f480:	080145fc 	.word	0x080145fc
 800f484:	0801498d 	.word	0x0801498d
 800f488:	08014778 	.word	0x08014778
 800f48c:	08014750 	.word	0x08014750
 800f490:	7ff00000 	.word	0x7ff00000
 800f494:	7ca00000 	.word	0x7ca00000
 800f498:	7fefffff 	.word	0x7fefffff
 800f49c:	f014 0310 	ands.w	r3, r4, #16
 800f4a0:	bf18      	it	ne
 800f4a2:	236a      	movne	r3, #106	@ 0x6a
 800f4a4:	4ea9      	ldr	r6, [pc, #676]	@ (800f74c <_strtod_l+0x854>)
 800f4a6:	9308      	str	r3, [sp, #32]
 800f4a8:	4650      	mov	r0, sl
 800f4aa:	4659      	mov	r1, fp
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	07e2      	lsls	r2, r4, #31
 800f4b0:	d504      	bpl.n	800f4bc <_strtod_l+0x5c4>
 800f4b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f4b6:	f7f1 f8c7 	bl	8000648 <__aeabi_dmul>
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	1064      	asrs	r4, r4, #1
 800f4be:	f106 0608 	add.w	r6, r6, #8
 800f4c2:	d1f4      	bne.n	800f4ae <_strtod_l+0x5b6>
 800f4c4:	b10b      	cbz	r3, 800f4ca <_strtod_l+0x5d2>
 800f4c6:	4682      	mov	sl, r0
 800f4c8:	468b      	mov	fp, r1
 800f4ca:	9b08      	ldr	r3, [sp, #32]
 800f4cc:	b1b3      	cbz	r3, 800f4fc <_strtod_l+0x604>
 800f4ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f4d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	4659      	mov	r1, fp
 800f4da:	dd0f      	ble.n	800f4fc <_strtod_l+0x604>
 800f4dc:	2b1f      	cmp	r3, #31
 800f4de:	dd55      	ble.n	800f58c <_strtod_l+0x694>
 800f4e0:	2b34      	cmp	r3, #52	@ 0x34
 800f4e2:	bfde      	ittt	le
 800f4e4:	f04f 33ff 	movle.w	r3, #4294967295
 800f4e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f4ec:	4093      	lslle	r3, r2
 800f4ee:	f04f 0a00 	mov.w	sl, #0
 800f4f2:	bfcc      	ite	gt
 800f4f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f4f8:	ea03 0b01 	andle.w	fp, r3, r1
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	2300      	movs	r3, #0
 800f500:	4650      	mov	r0, sl
 800f502:	4659      	mov	r1, fp
 800f504:	f7f1 fb08 	bl	8000b18 <__aeabi_dcmpeq>
 800f508:	2800      	cmp	r0, #0
 800f50a:	d1a6      	bne.n	800f45a <_strtod_l+0x562>
 800f50c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f50e:	9300      	str	r3, [sp, #0]
 800f510:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f512:	9805      	ldr	r0, [sp, #20]
 800f514:	462b      	mov	r3, r5
 800f516:	463a      	mov	r2, r7
 800f518:	f002 fe86 	bl	8012228 <__s2b>
 800f51c:	900a      	str	r0, [sp, #40]	@ 0x28
 800f51e:	2800      	cmp	r0, #0
 800f520:	f43f af05 	beq.w	800f32e <_strtod_l+0x436>
 800f524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f526:	2a00      	cmp	r2, #0
 800f528:	eba9 0308 	sub.w	r3, r9, r8
 800f52c:	bfa8      	it	ge
 800f52e:	2300      	movge	r3, #0
 800f530:	9312      	str	r3, [sp, #72]	@ 0x48
 800f532:	2400      	movs	r4, #0
 800f534:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f538:	9316      	str	r3, [sp, #88]	@ 0x58
 800f53a:	46a0      	mov	r8, r4
 800f53c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f53e:	9805      	ldr	r0, [sp, #20]
 800f540:	6859      	ldr	r1, [r3, #4]
 800f542:	f002 fdc9 	bl	80120d8 <_Balloc>
 800f546:	4681      	mov	r9, r0
 800f548:	2800      	cmp	r0, #0
 800f54a:	f43f aef4 	beq.w	800f336 <_strtod_l+0x43e>
 800f54e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f550:	691a      	ldr	r2, [r3, #16]
 800f552:	3202      	adds	r2, #2
 800f554:	f103 010c 	add.w	r1, r3, #12
 800f558:	0092      	lsls	r2, r2, #2
 800f55a:	300c      	adds	r0, #12
 800f55c:	f001 fb05 	bl	8010b6a <memcpy>
 800f560:	ec4b ab10 	vmov	d0, sl, fp
 800f564:	9805      	ldr	r0, [sp, #20]
 800f566:	aa1c      	add	r2, sp, #112	@ 0x70
 800f568:	a91b      	add	r1, sp, #108	@ 0x6c
 800f56a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f56e:	f003 f997 	bl	80128a0 <__d2b>
 800f572:	901a      	str	r0, [sp, #104]	@ 0x68
 800f574:	2800      	cmp	r0, #0
 800f576:	f43f aede 	beq.w	800f336 <_strtod_l+0x43e>
 800f57a:	9805      	ldr	r0, [sp, #20]
 800f57c:	2101      	movs	r1, #1
 800f57e:	f002 fee9 	bl	8012354 <__i2b>
 800f582:	4680      	mov	r8, r0
 800f584:	b948      	cbnz	r0, 800f59a <_strtod_l+0x6a2>
 800f586:	f04f 0800 	mov.w	r8, #0
 800f58a:	e6d4      	b.n	800f336 <_strtod_l+0x43e>
 800f58c:	f04f 32ff 	mov.w	r2, #4294967295
 800f590:	fa02 f303 	lsl.w	r3, r2, r3
 800f594:	ea03 0a0a 	and.w	sl, r3, sl
 800f598:	e7b0      	b.n	800f4fc <_strtod_l+0x604>
 800f59a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f59c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f59e:	2d00      	cmp	r5, #0
 800f5a0:	bfab      	itete	ge
 800f5a2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f5a4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f5a6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f5a8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f5aa:	bfac      	ite	ge
 800f5ac:	18ef      	addge	r7, r5, r3
 800f5ae:	1b5e      	sublt	r6, r3, r5
 800f5b0:	9b08      	ldr	r3, [sp, #32]
 800f5b2:	1aed      	subs	r5, r5, r3
 800f5b4:	4415      	add	r5, r2
 800f5b6:	4b66      	ldr	r3, [pc, #408]	@ (800f750 <_strtod_l+0x858>)
 800f5b8:	3d01      	subs	r5, #1
 800f5ba:	429d      	cmp	r5, r3
 800f5bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f5c0:	da50      	bge.n	800f664 <_strtod_l+0x76c>
 800f5c2:	1b5b      	subs	r3, r3, r5
 800f5c4:	2b1f      	cmp	r3, #31
 800f5c6:	eba2 0203 	sub.w	r2, r2, r3
 800f5ca:	f04f 0101 	mov.w	r1, #1
 800f5ce:	dc3d      	bgt.n	800f64c <_strtod_l+0x754>
 800f5d0:	fa01 f303 	lsl.w	r3, r1, r3
 800f5d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	9310      	str	r3, [sp, #64]	@ 0x40
 800f5da:	18bd      	adds	r5, r7, r2
 800f5dc:	9b08      	ldr	r3, [sp, #32]
 800f5de:	42af      	cmp	r7, r5
 800f5e0:	4416      	add	r6, r2
 800f5e2:	441e      	add	r6, r3
 800f5e4:	463b      	mov	r3, r7
 800f5e6:	bfa8      	it	ge
 800f5e8:	462b      	movge	r3, r5
 800f5ea:	42b3      	cmp	r3, r6
 800f5ec:	bfa8      	it	ge
 800f5ee:	4633      	movge	r3, r6
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	bfc2      	ittt	gt
 800f5f4:	1aed      	subgt	r5, r5, r3
 800f5f6:	1af6      	subgt	r6, r6, r3
 800f5f8:	1aff      	subgt	r7, r7, r3
 800f5fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	dd16      	ble.n	800f62e <_strtod_l+0x736>
 800f600:	4641      	mov	r1, r8
 800f602:	9805      	ldr	r0, [sp, #20]
 800f604:	461a      	mov	r2, r3
 800f606:	f002 ff65 	bl	80124d4 <__pow5mult>
 800f60a:	4680      	mov	r8, r0
 800f60c:	2800      	cmp	r0, #0
 800f60e:	d0ba      	beq.n	800f586 <_strtod_l+0x68e>
 800f610:	4601      	mov	r1, r0
 800f612:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f614:	9805      	ldr	r0, [sp, #20]
 800f616:	f002 feb3 	bl	8012380 <__multiply>
 800f61a:	900e      	str	r0, [sp, #56]	@ 0x38
 800f61c:	2800      	cmp	r0, #0
 800f61e:	f43f ae8a 	beq.w	800f336 <_strtod_l+0x43e>
 800f622:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f624:	9805      	ldr	r0, [sp, #20]
 800f626:	f002 fd97 	bl	8012158 <_Bfree>
 800f62a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f62c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f62e:	2d00      	cmp	r5, #0
 800f630:	dc1d      	bgt.n	800f66e <_strtod_l+0x776>
 800f632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f634:	2b00      	cmp	r3, #0
 800f636:	dd23      	ble.n	800f680 <_strtod_l+0x788>
 800f638:	4649      	mov	r1, r9
 800f63a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f63c:	9805      	ldr	r0, [sp, #20]
 800f63e:	f002 ff49 	bl	80124d4 <__pow5mult>
 800f642:	4681      	mov	r9, r0
 800f644:	b9e0      	cbnz	r0, 800f680 <_strtod_l+0x788>
 800f646:	f04f 0900 	mov.w	r9, #0
 800f64a:	e674      	b.n	800f336 <_strtod_l+0x43e>
 800f64c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f650:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f654:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f658:	35e2      	adds	r5, #226	@ 0xe2
 800f65a:	fa01 f305 	lsl.w	r3, r1, r5
 800f65e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f660:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f662:	e7ba      	b.n	800f5da <_strtod_l+0x6e2>
 800f664:	2300      	movs	r3, #0
 800f666:	9310      	str	r3, [sp, #64]	@ 0x40
 800f668:	2301      	movs	r3, #1
 800f66a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f66c:	e7b5      	b.n	800f5da <_strtod_l+0x6e2>
 800f66e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f670:	9805      	ldr	r0, [sp, #20]
 800f672:	462a      	mov	r2, r5
 800f674:	f002 ff88 	bl	8012588 <__lshift>
 800f678:	901a      	str	r0, [sp, #104]	@ 0x68
 800f67a:	2800      	cmp	r0, #0
 800f67c:	d1d9      	bne.n	800f632 <_strtod_l+0x73a>
 800f67e:	e65a      	b.n	800f336 <_strtod_l+0x43e>
 800f680:	2e00      	cmp	r6, #0
 800f682:	dd07      	ble.n	800f694 <_strtod_l+0x79c>
 800f684:	4649      	mov	r1, r9
 800f686:	9805      	ldr	r0, [sp, #20]
 800f688:	4632      	mov	r2, r6
 800f68a:	f002 ff7d 	bl	8012588 <__lshift>
 800f68e:	4681      	mov	r9, r0
 800f690:	2800      	cmp	r0, #0
 800f692:	d0d8      	beq.n	800f646 <_strtod_l+0x74e>
 800f694:	2f00      	cmp	r7, #0
 800f696:	dd08      	ble.n	800f6aa <_strtod_l+0x7b2>
 800f698:	4641      	mov	r1, r8
 800f69a:	9805      	ldr	r0, [sp, #20]
 800f69c:	463a      	mov	r2, r7
 800f69e:	f002 ff73 	bl	8012588 <__lshift>
 800f6a2:	4680      	mov	r8, r0
 800f6a4:	2800      	cmp	r0, #0
 800f6a6:	f43f ae46 	beq.w	800f336 <_strtod_l+0x43e>
 800f6aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f6ac:	9805      	ldr	r0, [sp, #20]
 800f6ae:	464a      	mov	r2, r9
 800f6b0:	f002 fff2 	bl	8012698 <__mdiff>
 800f6b4:	4604      	mov	r4, r0
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	f43f ae3d 	beq.w	800f336 <_strtod_l+0x43e>
 800f6bc:	68c3      	ldr	r3, [r0, #12]
 800f6be:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	60c3      	str	r3, [r0, #12]
 800f6c4:	4641      	mov	r1, r8
 800f6c6:	f002 ffcb 	bl	8012660 <__mcmp>
 800f6ca:	2800      	cmp	r0, #0
 800f6cc:	da46      	bge.n	800f75c <_strtod_l+0x864>
 800f6ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6d0:	ea53 030a 	orrs.w	r3, r3, sl
 800f6d4:	d16c      	bne.n	800f7b0 <_strtod_l+0x8b8>
 800f6d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d168      	bne.n	800f7b0 <_strtod_l+0x8b8>
 800f6de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f6e2:	0d1b      	lsrs	r3, r3, #20
 800f6e4:	051b      	lsls	r3, r3, #20
 800f6e6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f6ea:	d961      	bls.n	800f7b0 <_strtod_l+0x8b8>
 800f6ec:	6963      	ldr	r3, [r4, #20]
 800f6ee:	b913      	cbnz	r3, 800f6f6 <_strtod_l+0x7fe>
 800f6f0:	6923      	ldr	r3, [r4, #16]
 800f6f2:	2b01      	cmp	r3, #1
 800f6f4:	dd5c      	ble.n	800f7b0 <_strtod_l+0x8b8>
 800f6f6:	4621      	mov	r1, r4
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	9805      	ldr	r0, [sp, #20]
 800f6fc:	f002 ff44 	bl	8012588 <__lshift>
 800f700:	4641      	mov	r1, r8
 800f702:	4604      	mov	r4, r0
 800f704:	f002 ffac 	bl	8012660 <__mcmp>
 800f708:	2800      	cmp	r0, #0
 800f70a:	dd51      	ble.n	800f7b0 <_strtod_l+0x8b8>
 800f70c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f710:	9a08      	ldr	r2, [sp, #32]
 800f712:	0d1b      	lsrs	r3, r3, #20
 800f714:	051b      	lsls	r3, r3, #20
 800f716:	2a00      	cmp	r2, #0
 800f718:	d06b      	beq.n	800f7f2 <_strtod_l+0x8fa>
 800f71a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f71e:	d868      	bhi.n	800f7f2 <_strtod_l+0x8fa>
 800f720:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f724:	f67f ae9d 	bls.w	800f462 <_strtod_l+0x56a>
 800f728:	4b0a      	ldr	r3, [pc, #40]	@ (800f754 <_strtod_l+0x85c>)
 800f72a:	4650      	mov	r0, sl
 800f72c:	4659      	mov	r1, fp
 800f72e:	2200      	movs	r2, #0
 800f730:	f7f0 ff8a 	bl	8000648 <__aeabi_dmul>
 800f734:	4b08      	ldr	r3, [pc, #32]	@ (800f758 <_strtod_l+0x860>)
 800f736:	400b      	ands	r3, r1
 800f738:	4682      	mov	sl, r0
 800f73a:	468b      	mov	fp, r1
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	f47f ae05 	bne.w	800f34c <_strtod_l+0x454>
 800f742:	9a05      	ldr	r2, [sp, #20]
 800f744:	2322      	movs	r3, #34	@ 0x22
 800f746:	6013      	str	r3, [r2, #0]
 800f748:	e600      	b.n	800f34c <_strtod_l+0x454>
 800f74a:	bf00      	nop
 800f74c:	08014590 	.word	0x08014590
 800f750:	fffffc02 	.word	0xfffffc02
 800f754:	39500000 	.word	0x39500000
 800f758:	7ff00000 	.word	0x7ff00000
 800f75c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f760:	d165      	bne.n	800f82e <_strtod_l+0x936>
 800f762:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f764:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f768:	b35a      	cbz	r2, 800f7c2 <_strtod_l+0x8ca>
 800f76a:	4a9f      	ldr	r2, [pc, #636]	@ (800f9e8 <_strtod_l+0xaf0>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d12b      	bne.n	800f7c8 <_strtod_l+0x8d0>
 800f770:	9b08      	ldr	r3, [sp, #32]
 800f772:	4651      	mov	r1, sl
 800f774:	b303      	cbz	r3, 800f7b8 <_strtod_l+0x8c0>
 800f776:	4b9d      	ldr	r3, [pc, #628]	@ (800f9ec <_strtod_l+0xaf4>)
 800f778:	465a      	mov	r2, fp
 800f77a:	4013      	ands	r3, r2
 800f77c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f780:	f04f 32ff 	mov.w	r2, #4294967295
 800f784:	d81b      	bhi.n	800f7be <_strtod_l+0x8c6>
 800f786:	0d1b      	lsrs	r3, r3, #20
 800f788:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f78c:	fa02 f303 	lsl.w	r3, r2, r3
 800f790:	4299      	cmp	r1, r3
 800f792:	d119      	bne.n	800f7c8 <_strtod_l+0x8d0>
 800f794:	4b96      	ldr	r3, [pc, #600]	@ (800f9f0 <_strtod_l+0xaf8>)
 800f796:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f798:	429a      	cmp	r2, r3
 800f79a:	d102      	bne.n	800f7a2 <_strtod_l+0x8aa>
 800f79c:	3101      	adds	r1, #1
 800f79e:	f43f adca 	beq.w	800f336 <_strtod_l+0x43e>
 800f7a2:	4b92      	ldr	r3, [pc, #584]	@ (800f9ec <_strtod_l+0xaf4>)
 800f7a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f7a6:	401a      	ands	r2, r3
 800f7a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f7ac:	f04f 0a00 	mov.w	sl, #0
 800f7b0:	9b08      	ldr	r3, [sp, #32]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d1b8      	bne.n	800f728 <_strtod_l+0x830>
 800f7b6:	e5c9      	b.n	800f34c <_strtod_l+0x454>
 800f7b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f7bc:	e7e8      	b.n	800f790 <_strtod_l+0x898>
 800f7be:	4613      	mov	r3, r2
 800f7c0:	e7e6      	b.n	800f790 <_strtod_l+0x898>
 800f7c2:	ea53 030a 	orrs.w	r3, r3, sl
 800f7c6:	d0a1      	beq.n	800f70c <_strtod_l+0x814>
 800f7c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f7ca:	b1db      	cbz	r3, 800f804 <_strtod_l+0x90c>
 800f7cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f7ce:	4213      	tst	r3, r2
 800f7d0:	d0ee      	beq.n	800f7b0 <_strtod_l+0x8b8>
 800f7d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7d4:	9a08      	ldr	r2, [sp, #32]
 800f7d6:	4650      	mov	r0, sl
 800f7d8:	4659      	mov	r1, fp
 800f7da:	b1bb      	cbz	r3, 800f80c <_strtod_l+0x914>
 800f7dc:	f7ff fb6d 	bl	800eeba <sulp>
 800f7e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f7e4:	ec53 2b10 	vmov	r2, r3, d0
 800f7e8:	f7f0 fd78 	bl	80002dc <__adddf3>
 800f7ec:	4682      	mov	sl, r0
 800f7ee:	468b      	mov	fp, r1
 800f7f0:	e7de      	b.n	800f7b0 <_strtod_l+0x8b8>
 800f7f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f7f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f7fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f7fe:	f04f 3aff 	mov.w	sl, #4294967295
 800f802:	e7d5      	b.n	800f7b0 <_strtod_l+0x8b8>
 800f804:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f806:	ea13 0f0a 	tst.w	r3, sl
 800f80a:	e7e1      	b.n	800f7d0 <_strtod_l+0x8d8>
 800f80c:	f7ff fb55 	bl	800eeba <sulp>
 800f810:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f814:	ec53 2b10 	vmov	r2, r3, d0
 800f818:	f7f0 fd5e 	bl	80002d8 <__aeabi_dsub>
 800f81c:	2200      	movs	r2, #0
 800f81e:	2300      	movs	r3, #0
 800f820:	4682      	mov	sl, r0
 800f822:	468b      	mov	fp, r1
 800f824:	f7f1 f978 	bl	8000b18 <__aeabi_dcmpeq>
 800f828:	2800      	cmp	r0, #0
 800f82a:	d0c1      	beq.n	800f7b0 <_strtod_l+0x8b8>
 800f82c:	e619      	b.n	800f462 <_strtod_l+0x56a>
 800f82e:	4641      	mov	r1, r8
 800f830:	4620      	mov	r0, r4
 800f832:	f003 f88d 	bl	8012950 <__ratio>
 800f836:	ec57 6b10 	vmov	r6, r7, d0
 800f83a:	2200      	movs	r2, #0
 800f83c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f840:	4630      	mov	r0, r6
 800f842:	4639      	mov	r1, r7
 800f844:	f7f1 f97c 	bl	8000b40 <__aeabi_dcmple>
 800f848:	2800      	cmp	r0, #0
 800f84a:	d06f      	beq.n	800f92c <_strtod_l+0xa34>
 800f84c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d17a      	bne.n	800f948 <_strtod_l+0xa50>
 800f852:	f1ba 0f00 	cmp.w	sl, #0
 800f856:	d158      	bne.n	800f90a <_strtod_l+0xa12>
 800f858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f85a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d15a      	bne.n	800f918 <_strtod_l+0xa20>
 800f862:	4b64      	ldr	r3, [pc, #400]	@ (800f9f4 <_strtod_l+0xafc>)
 800f864:	2200      	movs	r2, #0
 800f866:	4630      	mov	r0, r6
 800f868:	4639      	mov	r1, r7
 800f86a:	f7f1 f95f 	bl	8000b2c <__aeabi_dcmplt>
 800f86e:	2800      	cmp	r0, #0
 800f870:	d159      	bne.n	800f926 <_strtod_l+0xa2e>
 800f872:	4630      	mov	r0, r6
 800f874:	4639      	mov	r1, r7
 800f876:	4b60      	ldr	r3, [pc, #384]	@ (800f9f8 <_strtod_l+0xb00>)
 800f878:	2200      	movs	r2, #0
 800f87a:	f7f0 fee5 	bl	8000648 <__aeabi_dmul>
 800f87e:	4606      	mov	r6, r0
 800f880:	460f      	mov	r7, r1
 800f882:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f886:	9606      	str	r6, [sp, #24]
 800f888:	9307      	str	r3, [sp, #28]
 800f88a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f88e:	4d57      	ldr	r5, [pc, #348]	@ (800f9ec <_strtod_l+0xaf4>)
 800f890:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f894:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f896:	401d      	ands	r5, r3
 800f898:	4b58      	ldr	r3, [pc, #352]	@ (800f9fc <_strtod_l+0xb04>)
 800f89a:	429d      	cmp	r5, r3
 800f89c:	f040 80b2 	bne.w	800fa04 <_strtod_l+0xb0c>
 800f8a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f8a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f8a6:	ec4b ab10 	vmov	d0, sl, fp
 800f8aa:	f002 ff89 	bl	80127c0 <__ulp>
 800f8ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f8b2:	ec51 0b10 	vmov	r0, r1, d0
 800f8b6:	f7f0 fec7 	bl	8000648 <__aeabi_dmul>
 800f8ba:	4652      	mov	r2, sl
 800f8bc:	465b      	mov	r3, fp
 800f8be:	f7f0 fd0d 	bl	80002dc <__adddf3>
 800f8c2:	460b      	mov	r3, r1
 800f8c4:	4949      	ldr	r1, [pc, #292]	@ (800f9ec <_strtod_l+0xaf4>)
 800f8c6:	4a4e      	ldr	r2, [pc, #312]	@ (800fa00 <_strtod_l+0xb08>)
 800f8c8:	4019      	ands	r1, r3
 800f8ca:	4291      	cmp	r1, r2
 800f8cc:	4682      	mov	sl, r0
 800f8ce:	d942      	bls.n	800f956 <_strtod_l+0xa5e>
 800f8d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f8d2:	4b47      	ldr	r3, [pc, #284]	@ (800f9f0 <_strtod_l+0xaf8>)
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d103      	bne.n	800f8e0 <_strtod_l+0x9e8>
 800f8d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f8da:	3301      	adds	r3, #1
 800f8dc:	f43f ad2b 	beq.w	800f336 <_strtod_l+0x43e>
 800f8e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f9f0 <_strtod_l+0xaf8>
 800f8e4:	f04f 3aff 	mov.w	sl, #4294967295
 800f8e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f8ea:	9805      	ldr	r0, [sp, #20]
 800f8ec:	f002 fc34 	bl	8012158 <_Bfree>
 800f8f0:	9805      	ldr	r0, [sp, #20]
 800f8f2:	4649      	mov	r1, r9
 800f8f4:	f002 fc30 	bl	8012158 <_Bfree>
 800f8f8:	9805      	ldr	r0, [sp, #20]
 800f8fa:	4641      	mov	r1, r8
 800f8fc:	f002 fc2c 	bl	8012158 <_Bfree>
 800f900:	9805      	ldr	r0, [sp, #20]
 800f902:	4621      	mov	r1, r4
 800f904:	f002 fc28 	bl	8012158 <_Bfree>
 800f908:	e618      	b.n	800f53c <_strtod_l+0x644>
 800f90a:	f1ba 0f01 	cmp.w	sl, #1
 800f90e:	d103      	bne.n	800f918 <_strtod_l+0xa20>
 800f910:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f912:	2b00      	cmp	r3, #0
 800f914:	f43f ada5 	beq.w	800f462 <_strtod_l+0x56a>
 800f918:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f9c8 <_strtod_l+0xad0>
 800f91c:	4f35      	ldr	r7, [pc, #212]	@ (800f9f4 <_strtod_l+0xafc>)
 800f91e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f922:	2600      	movs	r6, #0
 800f924:	e7b1      	b.n	800f88a <_strtod_l+0x992>
 800f926:	4f34      	ldr	r7, [pc, #208]	@ (800f9f8 <_strtod_l+0xb00>)
 800f928:	2600      	movs	r6, #0
 800f92a:	e7aa      	b.n	800f882 <_strtod_l+0x98a>
 800f92c:	4b32      	ldr	r3, [pc, #200]	@ (800f9f8 <_strtod_l+0xb00>)
 800f92e:	4630      	mov	r0, r6
 800f930:	4639      	mov	r1, r7
 800f932:	2200      	movs	r2, #0
 800f934:	f7f0 fe88 	bl	8000648 <__aeabi_dmul>
 800f938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f93a:	4606      	mov	r6, r0
 800f93c:	460f      	mov	r7, r1
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d09f      	beq.n	800f882 <_strtod_l+0x98a>
 800f942:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f946:	e7a0      	b.n	800f88a <_strtod_l+0x992>
 800f948:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f9d0 <_strtod_l+0xad8>
 800f94c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f950:	ec57 6b17 	vmov	r6, r7, d7
 800f954:	e799      	b.n	800f88a <_strtod_l+0x992>
 800f956:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f95a:	9b08      	ldr	r3, [sp, #32]
 800f95c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f960:	2b00      	cmp	r3, #0
 800f962:	d1c1      	bne.n	800f8e8 <_strtod_l+0x9f0>
 800f964:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f968:	0d1b      	lsrs	r3, r3, #20
 800f96a:	051b      	lsls	r3, r3, #20
 800f96c:	429d      	cmp	r5, r3
 800f96e:	d1bb      	bne.n	800f8e8 <_strtod_l+0x9f0>
 800f970:	4630      	mov	r0, r6
 800f972:	4639      	mov	r1, r7
 800f974:	f7f1 f9c8 	bl	8000d08 <__aeabi_d2lz>
 800f978:	f7f0 fe38 	bl	80005ec <__aeabi_l2d>
 800f97c:	4602      	mov	r2, r0
 800f97e:	460b      	mov	r3, r1
 800f980:	4630      	mov	r0, r6
 800f982:	4639      	mov	r1, r7
 800f984:	f7f0 fca8 	bl	80002d8 <__aeabi_dsub>
 800f988:	460b      	mov	r3, r1
 800f98a:	4602      	mov	r2, r0
 800f98c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f990:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f996:	ea46 060a 	orr.w	r6, r6, sl
 800f99a:	431e      	orrs	r6, r3
 800f99c:	d06f      	beq.n	800fa7e <_strtod_l+0xb86>
 800f99e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f9d8 <_strtod_l+0xae0>)
 800f9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a4:	f7f1 f8c2 	bl	8000b2c <__aeabi_dcmplt>
 800f9a8:	2800      	cmp	r0, #0
 800f9aa:	f47f accf 	bne.w	800f34c <_strtod_l+0x454>
 800f9ae:	a30c      	add	r3, pc, #48	@ (adr r3, 800f9e0 <_strtod_l+0xae8>)
 800f9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f9b8:	f7f1 f8d6 	bl	8000b68 <__aeabi_dcmpgt>
 800f9bc:	2800      	cmp	r0, #0
 800f9be:	d093      	beq.n	800f8e8 <_strtod_l+0x9f0>
 800f9c0:	e4c4      	b.n	800f34c <_strtod_l+0x454>
 800f9c2:	bf00      	nop
 800f9c4:	f3af 8000 	nop.w
 800f9c8:	00000000 	.word	0x00000000
 800f9cc:	bff00000 	.word	0xbff00000
 800f9d0:	00000000 	.word	0x00000000
 800f9d4:	3ff00000 	.word	0x3ff00000
 800f9d8:	94a03595 	.word	0x94a03595
 800f9dc:	3fdfffff 	.word	0x3fdfffff
 800f9e0:	35afe535 	.word	0x35afe535
 800f9e4:	3fe00000 	.word	0x3fe00000
 800f9e8:	000fffff 	.word	0x000fffff
 800f9ec:	7ff00000 	.word	0x7ff00000
 800f9f0:	7fefffff 	.word	0x7fefffff
 800f9f4:	3ff00000 	.word	0x3ff00000
 800f9f8:	3fe00000 	.word	0x3fe00000
 800f9fc:	7fe00000 	.word	0x7fe00000
 800fa00:	7c9fffff 	.word	0x7c9fffff
 800fa04:	9b08      	ldr	r3, [sp, #32]
 800fa06:	b323      	cbz	r3, 800fa52 <_strtod_l+0xb5a>
 800fa08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800fa0c:	d821      	bhi.n	800fa52 <_strtod_l+0xb5a>
 800fa0e:	a328      	add	r3, pc, #160	@ (adr r3, 800fab0 <_strtod_l+0xbb8>)
 800fa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa14:	4630      	mov	r0, r6
 800fa16:	4639      	mov	r1, r7
 800fa18:	f7f1 f892 	bl	8000b40 <__aeabi_dcmple>
 800fa1c:	b1a0      	cbz	r0, 800fa48 <_strtod_l+0xb50>
 800fa1e:	4639      	mov	r1, r7
 800fa20:	4630      	mov	r0, r6
 800fa22:	f7f1 f8e9 	bl	8000bf8 <__aeabi_d2uiz>
 800fa26:	2801      	cmp	r0, #1
 800fa28:	bf38      	it	cc
 800fa2a:	2001      	movcc	r0, #1
 800fa2c:	f7f0 fd92 	bl	8000554 <__aeabi_ui2d>
 800fa30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa32:	4606      	mov	r6, r0
 800fa34:	460f      	mov	r7, r1
 800fa36:	b9fb      	cbnz	r3, 800fa78 <_strtod_l+0xb80>
 800fa38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fa3c:	9014      	str	r0, [sp, #80]	@ 0x50
 800fa3e:	9315      	str	r3, [sp, #84]	@ 0x54
 800fa40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800fa44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fa48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fa4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800fa4e:	1b5b      	subs	r3, r3, r5
 800fa50:	9311      	str	r3, [sp, #68]	@ 0x44
 800fa52:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fa56:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800fa5a:	f002 feb1 	bl	80127c0 <__ulp>
 800fa5e:	4650      	mov	r0, sl
 800fa60:	ec53 2b10 	vmov	r2, r3, d0
 800fa64:	4659      	mov	r1, fp
 800fa66:	f7f0 fdef 	bl	8000648 <__aeabi_dmul>
 800fa6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fa6e:	f7f0 fc35 	bl	80002dc <__adddf3>
 800fa72:	4682      	mov	sl, r0
 800fa74:	468b      	mov	fp, r1
 800fa76:	e770      	b.n	800f95a <_strtod_l+0xa62>
 800fa78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800fa7c:	e7e0      	b.n	800fa40 <_strtod_l+0xb48>
 800fa7e:	a30e      	add	r3, pc, #56	@ (adr r3, 800fab8 <_strtod_l+0xbc0>)
 800fa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa84:	f7f1 f852 	bl	8000b2c <__aeabi_dcmplt>
 800fa88:	e798      	b.n	800f9bc <_strtod_l+0xac4>
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa8e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800fa90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fa92:	6013      	str	r3, [r2, #0]
 800fa94:	f7ff ba6d 	b.w	800ef72 <_strtod_l+0x7a>
 800fa98:	2a65      	cmp	r2, #101	@ 0x65
 800fa9a:	f43f ab66 	beq.w	800f16a <_strtod_l+0x272>
 800fa9e:	2a45      	cmp	r2, #69	@ 0x45
 800faa0:	f43f ab63 	beq.w	800f16a <_strtod_l+0x272>
 800faa4:	2301      	movs	r3, #1
 800faa6:	f7ff bb9e 	b.w	800f1e6 <_strtod_l+0x2ee>
 800faaa:	bf00      	nop
 800faac:	f3af 8000 	nop.w
 800fab0:	ffc00000 	.word	0xffc00000
 800fab4:	41dfffff 	.word	0x41dfffff
 800fab8:	94a03595 	.word	0x94a03595
 800fabc:	3fcfffff 	.word	0x3fcfffff

0800fac0 <_strtod_r>:
 800fac0:	4b01      	ldr	r3, [pc, #4]	@ (800fac8 <_strtod_r+0x8>)
 800fac2:	f7ff ba19 	b.w	800eef8 <_strtod_l>
 800fac6:	bf00      	nop
 800fac8:	200000d4 	.word	0x200000d4

0800facc <strtod>:
 800facc:	460a      	mov	r2, r1
 800face:	4601      	mov	r1, r0
 800fad0:	4802      	ldr	r0, [pc, #8]	@ (800fadc <strtod+0x10>)
 800fad2:	4b03      	ldr	r3, [pc, #12]	@ (800fae0 <strtod+0x14>)
 800fad4:	6800      	ldr	r0, [r0, #0]
 800fad6:	f7ff ba0f 	b.w	800eef8 <_strtod_l>
 800fada:	bf00      	nop
 800fadc:	20000240 	.word	0x20000240
 800fae0:	200000d4 	.word	0x200000d4

0800fae4 <__cvt>:
 800fae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fae8:	ec57 6b10 	vmov	r6, r7, d0
 800faec:	2f00      	cmp	r7, #0
 800faee:	460c      	mov	r4, r1
 800faf0:	4619      	mov	r1, r3
 800faf2:	463b      	mov	r3, r7
 800faf4:	bfbb      	ittet	lt
 800faf6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fafa:	461f      	movlt	r7, r3
 800fafc:	2300      	movge	r3, #0
 800fafe:	232d      	movlt	r3, #45	@ 0x2d
 800fb00:	700b      	strb	r3, [r1, #0]
 800fb02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fb04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fb08:	4691      	mov	r9, r2
 800fb0a:	f023 0820 	bic.w	r8, r3, #32
 800fb0e:	bfbc      	itt	lt
 800fb10:	4632      	movlt	r2, r6
 800fb12:	4616      	movlt	r6, r2
 800fb14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fb18:	d005      	beq.n	800fb26 <__cvt+0x42>
 800fb1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800fb1e:	d100      	bne.n	800fb22 <__cvt+0x3e>
 800fb20:	3401      	adds	r4, #1
 800fb22:	2102      	movs	r1, #2
 800fb24:	e000      	b.n	800fb28 <__cvt+0x44>
 800fb26:	2103      	movs	r1, #3
 800fb28:	ab03      	add	r3, sp, #12
 800fb2a:	9301      	str	r3, [sp, #4]
 800fb2c:	ab02      	add	r3, sp, #8
 800fb2e:	9300      	str	r3, [sp, #0]
 800fb30:	ec47 6b10 	vmov	d0, r6, r7
 800fb34:	4653      	mov	r3, sl
 800fb36:	4622      	mov	r2, r4
 800fb38:	f001 f8be 	bl	8010cb8 <_dtoa_r>
 800fb3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fb40:	4605      	mov	r5, r0
 800fb42:	d119      	bne.n	800fb78 <__cvt+0x94>
 800fb44:	f019 0f01 	tst.w	r9, #1
 800fb48:	d00e      	beq.n	800fb68 <__cvt+0x84>
 800fb4a:	eb00 0904 	add.w	r9, r0, r4
 800fb4e:	2200      	movs	r2, #0
 800fb50:	2300      	movs	r3, #0
 800fb52:	4630      	mov	r0, r6
 800fb54:	4639      	mov	r1, r7
 800fb56:	f7f0 ffdf 	bl	8000b18 <__aeabi_dcmpeq>
 800fb5a:	b108      	cbz	r0, 800fb60 <__cvt+0x7c>
 800fb5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800fb60:	2230      	movs	r2, #48	@ 0x30
 800fb62:	9b03      	ldr	r3, [sp, #12]
 800fb64:	454b      	cmp	r3, r9
 800fb66:	d31e      	bcc.n	800fba6 <__cvt+0xc2>
 800fb68:	9b03      	ldr	r3, [sp, #12]
 800fb6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fb6c:	1b5b      	subs	r3, r3, r5
 800fb6e:	4628      	mov	r0, r5
 800fb70:	6013      	str	r3, [r2, #0]
 800fb72:	b004      	add	sp, #16
 800fb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fb7c:	eb00 0904 	add.w	r9, r0, r4
 800fb80:	d1e5      	bne.n	800fb4e <__cvt+0x6a>
 800fb82:	7803      	ldrb	r3, [r0, #0]
 800fb84:	2b30      	cmp	r3, #48	@ 0x30
 800fb86:	d10a      	bne.n	800fb9e <__cvt+0xba>
 800fb88:	2200      	movs	r2, #0
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	4630      	mov	r0, r6
 800fb8e:	4639      	mov	r1, r7
 800fb90:	f7f0 ffc2 	bl	8000b18 <__aeabi_dcmpeq>
 800fb94:	b918      	cbnz	r0, 800fb9e <__cvt+0xba>
 800fb96:	f1c4 0401 	rsb	r4, r4, #1
 800fb9a:	f8ca 4000 	str.w	r4, [sl]
 800fb9e:	f8da 3000 	ldr.w	r3, [sl]
 800fba2:	4499      	add	r9, r3
 800fba4:	e7d3      	b.n	800fb4e <__cvt+0x6a>
 800fba6:	1c59      	adds	r1, r3, #1
 800fba8:	9103      	str	r1, [sp, #12]
 800fbaa:	701a      	strb	r2, [r3, #0]
 800fbac:	e7d9      	b.n	800fb62 <__cvt+0x7e>

0800fbae <__exponent>:
 800fbae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fbb0:	2900      	cmp	r1, #0
 800fbb2:	bfba      	itte	lt
 800fbb4:	4249      	neglt	r1, r1
 800fbb6:	232d      	movlt	r3, #45	@ 0x2d
 800fbb8:	232b      	movge	r3, #43	@ 0x2b
 800fbba:	2909      	cmp	r1, #9
 800fbbc:	7002      	strb	r2, [r0, #0]
 800fbbe:	7043      	strb	r3, [r0, #1]
 800fbc0:	dd29      	ble.n	800fc16 <__exponent+0x68>
 800fbc2:	f10d 0307 	add.w	r3, sp, #7
 800fbc6:	461d      	mov	r5, r3
 800fbc8:	270a      	movs	r7, #10
 800fbca:	461a      	mov	r2, r3
 800fbcc:	fbb1 f6f7 	udiv	r6, r1, r7
 800fbd0:	fb07 1416 	mls	r4, r7, r6, r1
 800fbd4:	3430      	adds	r4, #48	@ 0x30
 800fbd6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fbda:	460c      	mov	r4, r1
 800fbdc:	2c63      	cmp	r4, #99	@ 0x63
 800fbde:	f103 33ff 	add.w	r3, r3, #4294967295
 800fbe2:	4631      	mov	r1, r6
 800fbe4:	dcf1      	bgt.n	800fbca <__exponent+0x1c>
 800fbe6:	3130      	adds	r1, #48	@ 0x30
 800fbe8:	1e94      	subs	r4, r2, #2
 800fbea:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fbee:	1c41      	adds	r1, r0, #1
 800fbf0:	4623      	mov	r3, r4
 800fbf2:	42ab      	cmp	r3, r5
 800fbf4:	d30a      	bcc.n	800fc0c <__exponent+0x5e>
 800fbf6:	f10d 0309 	add.w	r3, sp, #9
 800fbfa:	1a9b      	subs	r3, r3, r2
 800fbfc:	42ac      	cmp	r4, r5
 800fbfe:	bf88      	it	hi
 800fc00:	2300      	movhi	r3, #0
 800fc02:	3302      	adds	r3, #2
 800fc04:	4403      	add	r3, r0
 800fc06:	1a18      	subs	r0, r3, r0
 800fc08:	b003      	add	sp, #12
 800fc0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fc10:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fc14:	e7ed      	b.n	800fbf2 <__exponent+0x44>
 800fc16:	2330      	movs	r3, #48	@ 0x30
 800fc18:	3130      	adds	r1, #48	@ 0x30
 800fc1a:	7083      	strb	r3, [r0, #2]
 800fc1c:	70c1      	strb	r1, [r0, #3]
 800fc1e:	1d03      	adds	r3, r0, #4
 800fc20:	e7f1      	b.n	800fc06 <__exponent+0x58>
	...

0800fc24 <_printf_float>:
 800fc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc28:	b08d      	sub	sp, #52	@ 0x34
 800fc2a:	460c      	mov	r4, r1
 800fc2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fc30:	4616      	mov	r6, r2
 800fc32:	461f      	mov	r7, r3
 800fc34:	4605      	mov	r5, r0
 800fc36:	f000 ff21 	bl	8010a7c <_localeconv_r>
 800fc3a:	6803      	ldr	r3, [r0, #0]
 800fc3c:	9304      	str	r3, [sp, #16]
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f7f0 fb3e 	bl	80002c0 <strlen>
 800fc44:	2300      	movs	r3, #0
 800fc46:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc48:	f8d8 3000 	ldr.w	r3, [r8]
 800fc4c:	9005      	str	r0, [sp, #20]
 800fc4e:	3307      	adds	r3, #7
 800fc50:	f023 0307 	bic.w	r3, r3, #7
 800fc54:	f103 0208 	add.w	r2, r3, #8
 800fc58:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fc5c:	f8d4 b000 	ldr.w	fp, [r4]
 800fc60:	f8c8 2000 	str.w	r2, [r8]
 800fc64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fc68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fc6c:	9307      	str	r3, [sp, #28]
 800fc6e:	f8cd 8018 	str.w	r8, [sp, #24]
 800fc72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fc76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc7a:	4b9c      	ldr	r3, [pc, #624]	@ (800feec <_printf_float+0x2c8>)
 800fc7c:	f04f 32ff 	mov.w	r2, #4294967295
 800fc80:	f7f0 ff7c 	bl	8000b7c <__aeabi_dcmpun>
 800fc84:	bb70      	cbnz	r0, 800fce4 <_printf_float+0xc0>
 800fc86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc8a:	4b98      	ldr	r3, [pc, #608]	@ (800feec <_printf_float+0x2c8>)
 800fc8c:	f04f 32ff 	mov.w	r2, #4294967295
 800fc90:	f7f0 ff56 	bl	8000b40 <__aeabi_dcmple>
 800fc94:	bb30      	cbnz	r0, 800fce4 <_printf_float+0xc0>
 800fc96:	2200      	movs	r2, #0
 800fc98:	2300      	movs	r3, #0
 800fc9a:	4640      	mov	r0, r8
 800fc9c:	4649      	mov	r1, r9
 800fc9e:	f7f0 ff45 	bl	8000b2c <__aeabi_dcmplt>
 800fca2:	b110      	cbz	r0, 800fcaa <_printf_float+0x86>
 800fca4:	232d      	movs	r3, #45	@ 0x2d
 800fca6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fcaa:	4a91      	ldr	r2, [pc, #580]	@ (800fef0 <_printf_float+0x2cc>)
 800fcac:	4b91      	ldr	r3, [pc, #580]	@ (800fef4 <_printf_float+0x2d0>)
 800fcae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fcb2:	bf94      	ite	ls
 800fcb4:	4690      	movls	r8, r2
 800fcb6:	4698      	movhi	r8, r3
 800fcb8:	2303      	movs	r3, #3
 800fcba:	6123      	str	r3, [r4, #16]
 800fcbc:	f02b 0304 	bic.w	r3, fp, #4
 800fcc0:	6023      	str	r3, [r4, #0]
 800fcc2:	f04f 0900 	mov.w	r9, #0
 800fcc6:	9700      	str	r7, [sp, #0]
 800fcc8:	4633      	mov	r3, r6
 800fcca:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fccc:	4621      	mov	r1, r4
 800fcce:	4628      	mov	r0, r5
 800fcd0:	f000 f9d2 	bl	8010078 <_printf_common>
 800fcd4:	3001      	adds	r0, #1
 800fcd6:	f040 808d 	bne.w	800fdf4 <_printf_float+0x1d0>
 800fcda:	f04f 30ff 	mov.w	r0, #4294967295
 800fcde:	b00d      	add	sp, #52	@ 0x34
 800fce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fce4:	4642      	mov	r2, r8
 800fce6:	464b      	mov	r3, r9
 800fce8:	4640      	mov	r0, r8
 800fcea:	4649      	mov	r1, r9
 800fcec:	f7f0 ff46 	bl	8000b7c <__aeabi_dcmpun>
 800fcf0:	b140      	cbz	r0, 800fd04 <_printf_float+0xe0>
 800fcf2:	464b      	mov	r3, r9
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	bfbc      	itt	lt
 800fcf8:	232d      	movlt	r3, #45	@ 0x2d
 800fcfa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fcfe:	4a7e      	ldr	r2, [pc, #504]	@ (800fef8 <_printf_float+0x2d4>)
 800fd00:	4b7e      	ldr	r3, [pc, #504]	@ (800fefc <_printf_float+0x2d8>)
 800fd02:	e7d4      	b.n	800fcae <_printf_float+0x8a>
 800fd04:	6863      	ldr	r3, [r4, #4]
 800fd06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fd0a:	9206      	str	r2, [sp, #24]
 800fd0c:	1c5a      	adds	r2, r3, #1
 800fd0e:	d13b      	bne.n	800fd88 <_printf_float+0x164>
 800fd10:	2306      	movs	r3, #6
 800fd12:	6063      	str	r3, [r4, #4]
 800fd14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800fd18:	2300      	movs	r3, #0
 800fd1a:	6022      	str	r2, [r4, #0]
 800fd1c:	9303      	str	r3, [sp, #12]
 800fd1e:	ab0a      	add	r3, sp, #40	@ 0x28
 800fd20:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fd24:	ab09      	add	r3, sp, #36	@ 0x24
 800fd26:	9300      	str	r3, [sp, #0]
 800fd28:	6861      	ldr	r1, [r4, #4]
 800fd2a:	ec49 8b10 	vmov	d0, r8, r9
 800fd2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fd32:	4628      	mov	r0, r5
 800fd34:	f7ff fed6 	bl	800fae4 <__cvt>
 800fd38:	9b06      	ldr	r3, [sp, #24]
 800fd3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fd3c:	2b47      	cmp	r3, #71	@ 0x47
 800fd3e:	4680      	mov	r8, r0
 800fd40:	d129      	bne.n	800fd96 <_printf_float+0x172>
 800fd42:	1cc8      	adds	r0, r1, #3
 800fd44:	db02      	blt.n	800fd4c <_printf_float+0x128>
 800fd46:	6863      	ldr	r3, [r4, #4]
 800fd48:	4299      	cmp	r1, r3
 800fd4a:	dd41      	ble.n	800fdd0 <_printf_float+0x1ac>
 800fd4c:	f1aa 0a02 	sub.w	sl, sl, #2
 800fd50:	fa5f fa8a 	uxtb.w	sl, sl
 800fd54:	3901      	subs	r1, #1
 800fd56:	4652      	mov	r2, sl
 800fd58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fd5c:	9109      	str	r1, [sp, #36]	@ 0x24
 800fd5e:	f7ff ff26 	bl	800fbae <__exponent>
 800fd62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fd64:	1813      	adds	r3, r2, r0
 800fd66:	2a01      	cmp	r2, #1
 800fd68:	4681      	mov	r9, r0
 800fd6a:	6123      	str	r3, [r4, #16]
 800fd6c:	dc02      	bgt.n	800fd74 <_printf_float+0x150>
 800fd6e:	6822      	ldr	r2, [r4, #0]
 800fd70:	07d2      	lsls	r2, r2, #31
 800fd72:	d501      	bpl.n	800fd78 <_printf_float+0x154>
 800fd74:	3301      	adds	r3, #1
 800fd76:	6123      	str	r3, [r4, #16]
 800fd78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d0a2      	beq.n	800fcc6 <_printf_float+0xa2>
 800fd80:	232d      	movs	r3, #45	@ 0x2d
 800fd82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd86:	e79e      	b.n	800fcc6 <_printf_float+0xa2>
 800fd88:	9a06      	ldr	r2, [sp, #24]
 800fd8a:	2a47      	cmp	r2, #71	@ 0x47
 800fd8c:	d1c2      	bne.n	800fd14 <_printf_float+0xf0>
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d1c0      	bne.n	800fd14 <_printf_float+0xf0>
 800fd92:	2301      	movs	r3, #1
 800fd94:	e7bd      	b.n	800fd12 <_printf_float+0xee>
 800fd96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fd9a:	d9db      	bls.n	800fd54 <_printf_float+0x130>
 800fd9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fda0:	d118      	bne.n	800fdd4 <_printf_float+0x1b0>
 800fda2:	2900      	cmp	r1, #0
 800fda4:	6863      	ldr	r3, [r4, #4]
 800fda6:	dd0b      	ble.n	800fdc0 <_printf_float+0x19c>
 800fda8:	6121      	str	r1, [r4, #16]
 800fdaa:	b913      	cbnz	r3, 800fdb2 <_printf_float+0x18e>
 800fdac:	6822      	ldr	r2, [r4, #0]
 800fdae:	07d0      	lsls	r0, r2, #31
 800fdb0:	d502      	bpl.n	800fdb8 <_printf_float+0x194>
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	440b      	add	r3, r1
 800fdb6:	6123      	str	r3, [r4, #16]
 800fdb8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fdba:	f04f 0900 	mov.w	r9, #0
 800fdbe:	e7db      	b.n	800fd78 <_printf_float+0x154>
 800fdc0:	b913      	cbnz	r3, 800fdc8 <_printf_float+0x1a4>
 800fdc2:	6822      	ldr	r2, [r4, #0]
 800fdc4:	07d2      	lsls	r2, r2, #31
 800fdc6:	d501      	bpl.n	800fdcc <_printf_float+0x1a8>
 800fdc8:	3302      	adds	r3, #2
 800fdca:	e7f4      	b.n	800fdb6 <_printf_float+0x192>
 800fdcc:	2301      	movs	r3, #1
 800fdce:	e7f2      	b.n	800fdb6 <_printf_float+0x192>
 800fdd0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fdd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdd6:	4299      	cmp	r1, r3
 800fdd8:	db05      	blt.n	800fde6 <_printf_float+0x1c2>
 800fdda:	6823      	ldr	r3, [r4, #0]
 800fddc:	6121      	str	r1, [r4, #16]
 800fdde:	07d8      	lsls	r0, r3, #31
 800fde0:	d5ea      	bpl.n	800fdb8 <_printf_float+0x194>
 800fde2:	1c4b      	adds	r3, r1, #1
 800fde4:	e7e7      	b.n	800fdb6 <_printf_float+0x192>
 800fde6:	2900      	cmp	r1, #0
 800fde8:	bfd4      	ite	le
 800fdea:	f1c1 0202 	rsble	r2, r1, #2
 800fdee:	2201      	movgt	r2, #1
 800fdf0:	4413      	add	r3, r2
 800fdf2:	e7e0      	b.n	800fdb6 <_printf_float+0x192>
 800fdf4:	6823      	ldr	r3, [r4, #0]
 800fdf6:	055a      	lsls	r2, r3, #21
 800fdf8:	d407      	bmi.n	800fe0a <_printf_float+0x1e6>
 800fdfa:	6923      	ldr	r3, [r4, #16]
 800fdfc:	4642      	mov	r2, r8
 800fdfe:	4631      	mov	r1, r6
 800fe00:	4628      	mov	r0, r5
 800fe02:	47b8      	blx	r7
 800fe04:	3001      	adds	r0, #1
 800fe06:	d12b      	bne.n	800fe60 <_printf_float+0x23c>
 800fe08:	e767      	b.n	800fcda <_printf_float+0xb6>
 800fe0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fe0e:	f240 80dd 	bls.w	800ffcc <_printf_float+0x3a8>
 800fe12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fe16:	2200      	movs	r2, #0
 800fe18:	2300      	movs	r3, #0
 800fe1a:	f7f0 fe7d 	bl	8000b18 <__aeabi_dcmpeq>
 800fe1e:	2800      	cmp	r0, #0
 800fe20:	d033      	beq.n	800fe8a <_printf_float+0x266>
 800fe22:	4a37      	ldr	r2, [pc, #220]	@ (800ff00 <_printf_float+0x2dc>)
 800fe24:	2301      	movs	r3, #1
 800fe26:	4631      	mov	r1, r6
 800fe28:	4628      	mov	r0, r5
 800fe2a:	47b8      	blx	r7
 800fe2c:	3001      	adds	r0, #1
 800fe2e:	f43f af54 	beq.w	800fcda <_printf_float+0xb6>
 800fe32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fe36:	4543      	cmp	r3, r8
 800fe38:	db02      	blt.n	800fe40 <_printf_float+0x21c>
 800fe3a:	6823      	ldr	r3, [r4, #0]
 800fe3c:	07d8      	lsls	r0, r3, #31
 800fe3e:	d50f      	bpl.n	800fe60 <_printf_float+0x23c>
 800fe40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe44:	4631      	mov	r1, r6
 800fe46:	4628      	mov	r0, r5
 800fe48:	47b8      	blx	r7
 800fe4a:	3001      	adds	r0, #1
 800fe4c:	f43f af45 	beq.w	800fcda <_printf_float+0xb6>
 800fe50:	f04f 0900 	mov.w	r9, #0
 800fe54:	f108 38ff 	add.w	r8, r8, #4294967295
 800fe58:	f104 0a1a 	add.w	sl, r4, #26
 800fe5c:	45c8      	cmp	r8, r9
 800fe5e:	dc09      	bgt.n	800fe74 <_printf_float+0x250>
 800fe60:	6823      	ldr	r3, [r4, #0]
 800fe62:	079b      	lsls	r3, r3, #30
 800fe64:	f100 8103 	bmi.w	801006e <_printf_float+0x44a>
 800fe68:	68e0      	ldr	r0, [r4, #12]
 800fe6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fe6c:	4298      	cmp	r0, r3
 800fe6e:	bfb8      	it	lt
 800fe70:	4618      	movlt	r0, r3
 800fe72:	e734      	b.n	800fcde <_printf_float+0xba>
 800fe74:	2301      	movs	r3, #1
 800fe76:	4652      	mov	r2, sl
 800fe78:	4631      	mov	r1, r6
 800fe7a:	4628      	mov	r0, r5
 800fe7c:	47b8      	blx	r7
 800fe7e:	3001      	adds	r0, #1
 800fe80:	f43f af2b 	beq.w	800fcda <_printf_float+0xb6>
 800fe84:	f109 0901 	add.w	r9, r9, #1
 800fe88:	e7e8      	b.n	800fe5c <_printf_float+0x238>
 800fe8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	dc39      	bgt.n	800ff04 <_printf_float+0x2e0>
 800fe90:	4a1b      	ldr	r2, [pc, #108]	@ (800ff00 <_printf_float+0x2dc>)
 800fe92:	2301      	movs	r3, #1
 800fe94:	4631      	mov	r1, r6
 800fe96:	4628      	mov	r0, r5
 800fe98:	47b8      	blx	r7
 800fe9a:	3001      	adds	r0, #1
 800fe9c:	f43f af1d 	beq.w	800fcda <_printf_float+0xb6>
 800fea0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fea4:	ea59 0303 	orrs.w	r3, r9, r3
 800fea8:	d102      	bne.n	800feb0 <_printf_float+0x28c>
 800feaa:	6823      	ldr	r3, [r4, #0]
 800feac:	07d9      	lsls	r1, r3, #31
 800feae:	d5d7      	bpl.n	800fe60 <_printf_float+0x23c>
 800feb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800feb4:	4631      	mov	r1, r6
 800feb6:	4628      	mov	r0, r5
 800feb8:	47b8      	blx	r7
 800feba:	3001      	adds	r0, #1
 800febc:	f43f af0d 	beq.w	800fcda <_printf_float+0xb6>
 800fec0:	f04f 0a00 	mov.w	sl, #0
 800fec4:	f104 0b1a 	add.w	fp, r4, #26
 800fec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800feca:	425b      	negs	r3, r3
 800fecc:	4553      	cmp	r3, sl
 800fece:	dc01      	bgt.n	800fed4 <_printf_float+0x2b0>
 800fed0:	464b      	mov	r3, r9
 800fed2:	e793      	b.n	800fdfc <_printf_float+0x1d8>
 800fed4:	2301      	movs	r3, #1
 800fed6:	465a      	mov	r2, fp
 800fed8:	4631      	mov	r1, r6
 800feda:	4628      	mov	r0, r5
 800fedc:	47b8      	blx	r7
 800fede:	3001      	adds	r0, #1
 800fee0:	f43f aefb 	beq.w	800fcda <_printf_float+0xb6>
 800fee4:	f10a 0a01 	add.w	sl, sl, #1
 800fee8:	e7ee      	b.n	800fec8 <_printf_float+0x2a4>
 800feea:	bf00      	nop
 800feec:	7fefffff 	.word	0x7fefffff
 800fef0:	080145b8 	.word	0x080145b8
 800fef4:	080145bc 	.word	0x080145bc
 800fef8:	080145c0 	.word	0x080145c0
 800fefc:	080145c4 	.word	0x080145c4
 800ff00:	080145c8 	.word	0x080145c8
 800ff04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ff06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ff0a:	4553      	cmp	r3, sl
 800ff0c:	bfa8      	it	ge
 800ff0e:	4653      	movge	r3, sl
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	4699      	mov	r9, r3
 800ff14:	dc36      	bgt.n	800ff84 <_printf_float+0x360>
 800ff16:	f04f 0b00 	mov.w	fp, #0
 800ff1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff1e:	f104 021a 	add.w	r2, r4, #26
 800ff22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ff24:	9306      	str	r3, [sp, #24]
 800ff26:	eba3 0309 	sub.w	r3, r3, r9
 800ff2a:	455b      	cmp	r3, fp
 800ff2c:	dc31      	bgt.n	800ff92 <_printf_float+0x36e>
 800ff2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff30:	459a      	cmp	sl, r3
 800ff32:	dc3a      	bgt.n	800ffaa <_printf_float+0x386>
 800ff34:	6823      	ldr	r3, [r4, #0]
 800ff36:	07da      	lsls	r2, r3, #31
 800ff38:	d437      	bmi.n	800ffaa <_printf_float+0x386>
 800ff3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff3c:	ebaa 0903 	sub.w	r9, sl, r3
 800ff40:	9b06      	ldr	r3, [sp, #24]
 800ff42:	ebaa 0303 	sub.w	r3, sl, r3
 800ff46:	4599      	cmp	r9, r3
 800ff48:	bfa8      	it	ge
 800ff4a:	4699      	movge	r9, r3
 800ff4c:	f1b9 0f00 	cmp.w	r9, #0
 800ff50:	dc33      	bgt.n	800ffba <_printf_float+0x396>
 800ff52:	f04f 0800 	mov.w	r8, #0
 800ff56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff5a:	f104 0b1a 	add.w	fp, r4, #26
 800ff5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff60:	ebaa 0303 	sub.w	r3, sl, r3
 800ff64:	eba3 0309 	sub.w	r3, r3, r9
 800ff68:	4543      	cmp	r3, r8
 800ff6a:	f77f af79 	ble.w	800fe60 <_printf_float+0x23c>
 800ff6e:	2301      	movs	r3, #1
 800ff70:	465a      	mov	r2, fp
 800ff72:	4631      	mov	r1, r6
 800ff74:	4628      	mov	r0, r5
 800ff76:	47b8      	blx	r7
 800ff78:	3001      	adds	r0, #1
 800ff7a:	f43f aeae 	beq.w	800fcda <_printf_float+0xb6>
 800ff7e:	f108 0801 	add.w	r8, r8, #1
 800ff82:	e7ec      	b.n	800ff5e <_printf_float+0x33a>
 800ff84:	4642      	mov	r2, r8
 800ff86:	4631      	mov	r1, r6
 800ff88:	4628      	mov	r0, r5
 800ff8a:	47b8      	blx	r7
 800ff8c:	3001      	adds	r0, #1
 800ff8e:	d1c2      	bne.n	800ff16 <_printf_float+0x2f2>
 800ff90:	e6a3      	b.n	800fcda <_printf_float+0xb6>
 800ff92:	2301      	movs	r3, #1
 800ff94:	4631      	mov	r1, r6
 800ff96:	4628      	mov	r0, r5
 800ff98:	9206      	str	r2, [sp, #24]
 800ff9a:	47b8      	blx	r7
 800ff9c:	3001      	adds	r0, #1
 800ff9e:	f43f ae9c 	beq.w	800fcda <_printf_float+0xb6>
 800ffa2:	9a06      	ldr	r2, [sp, #24]
 800ffa4:	f10b 0b01 	add.w	fp, fp, #1
 800ffa8:	e7bb      	b.n	800ff22 <_printf_float+0x2fe>
 800ffaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ffae:	4631      	mov	r1, r6
 800ffb0:	4628      	mov	r0, r5
 800ffb2:	47b8      	blx	r7
 800ffb4:	3001      	adds	r0, #1
 800ffb6:	d1c0      	bne.n	800ff3a <_printf_float+0x316>
 800ffb8:	e68f      	b.n	800fcda <_printf_float+0xb6>
 800ffba:	9a06      	ldr	r2, [sp, #24]
 800ffbc:	464b      	mov	r3, r9
 800ffbe:	4442      	add	r2, r8
 800ffc0:	4631      	mov	r1, r6
 800ffc2:	4628      	mov	r0, r5
 800ffc4:	47b8      	blx	r7
 800ffc6:	3001      	adds	r0, #1
 800ffc8:	d1c3      	bne.n	800ff52 <_printf_float+0x32e>
 800ffca:	e686      	b.n	800fcda <_printf_float+0xb6>
 800ffcc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ffd0:	f1ba 0f01 	cmp.w	sl, #1
 800ffd4:	dc01      	bgt.n	800ffda <_printf_float+0x3b6>
 800ffd6:	07db      	lsls	r3, r3, #31
 800ffd8:	d536      	bpl.n	8010048 <_printf_float+0x424>
 800ffda:	2301      	movs	r3, #1
 800ffdc:	4642      	mov	r2, r8
 800ffde:	4631      	mov	r1, r6
 800ffe0:	4628      	mov	r0, r5
 800ffe2:	47b8      	blx	r7
 800ffe4:	3001      	adds	r0, #1
 800ffe6:	f43f ae78 	beq.w	800fcda <_printf_float+0xb6>
 800ffea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ffee:	4631      	mov	r1, r6
 800fff0:	4628      	mov	r0, r5
 800fff2:	47b8      	blx	r7
 800fff4:	3001      	adds	r0, #1
 800fff6:	f43f ae70 	beq.w	800fcda <_printf_float+0xb6>
 800fffa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fffe:	2200      	movs	r2, #0
 8010000:	2300      	movs	r3, #0
 8010002:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010006:	f7f0 fd87 	bl	8000b18 <__aeabi_dcmpeq>
 801000a:	b9c0      	cbnz	r0, 801003e <_printf_float+0x41a>
 801000c:	4653      	mov	r3, sl
 801000e:	f108 0201 	add.w	r2, r8, #1
 8010012:	4631      	mov	r1, r6
 8010014:	4628      	mov	r0, r5
 8010016:	47b8      	blx	r7
 8010018:	3001      	adds	r0, #1
 801001a:	d10c      	bne.n	8010036 <_printf_float+0x412>
 801001c:	e65d      	b.n	800fcda <_printf_float+0xb6>
 801001e:	2301      	movs	r3, #1
 8010020:	465a      	mov	r2, fp
 8010022:	4631      	mov	r1, r6
 8010024:	4628      	mov	r0, r5
 8010026:	47b8      	blx	r7
 8010028:	3001      	adds	r0, #1
 801002a:	f43f ae56 	beq.w	800fcda <_printf_float+0xb6>
 801002e:	f108 0801 	add.w	r8, r8, #1
 8010032:	45d0      	cmp	r8, sl
 8010034:	dbf3      	blt.n	801001e <_printf_float+0x3fa>
 8010036:	464b      	mov	r3, r9
 8010038:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801003c:	e6df      	b.n	800fdfe <_printf_float+0x1da>
 801003e:	f04f 0800 	mov.w	r8, #0
 8010042:	f104 0b1a 	add.w	fp, r4, #26
 8010046:	e7f4      	b.n	8010032 <_printf_float+0x40e>
 8010048:	2301      	movs	r3, #1
 801004a:	4642      	mov	r2, r8
 801004c:	e7e1      	b.n	8010012 <_printf_float+0x3ee>
 801004e:	2301      	movs	r3, #1
 8010050:	464a      	mov	r2, r9
 8010052:	4631      	mov	r1, r6
 8010054:	4628      	mov	r0, r5
 8010056:	47b8      	blx	r7
 8010058:	3001      	adds	r0, #1
 801005a:	f43f ae3e 	beq.w	800fcda <_printf_float+0xb6>
 801005e:	f108 0801 	add.w	r8, r8, #1
 8010062:	68e3      	ldr	r3, [r4, #12]
 8010064:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010066:	1a5b      	subs	r3, r3, r1
 8010068:	4543      	cmp	r3, r8
 801006a:	dcf0      	bgt.n	801004e <_printf_float+0x42a>
 801006c:	e6fc      	b.n	800fe68 <_printf_float+0x244>
 801006e:	f04f 0800 	mov.w	r8, #0
 8010072:	f104 0919 	add.w	r9, r4, #25
 8010076:	e7f4      	b.n	8010062 <_printf_float+0x43e>

08010078 <_printf_common>:
 8010078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801007c:	4616      	mov	r6, r2
 801007e:	4698      	mov	r8, r3
 8010080:	688a      	ldr	r2, [r1, #8]
 8010082:	690b      	ldr	r3, [r1, #16]
 8010084:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010088:	4293      	cmp	r3, r2
 801008a:	bfb8      	it	lt
 801008c:	4613      	movlt	r3, r2
 801008e:	6033      	str	r3, [r6, #0]
 8010090:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010094:	4607      	mov	r7, r0
 8010096:	460c      	mov	r4, r1
 8010098:	b10a      	cbz	r2, 801009e <_printf_common+0x26>
 801009a:	3301      	adds	r3, #1
 801009c:	6033      	str	r3, [r6, #0]
 801009e:	6823      	ldr	r3, [r4, #0]
 80100a0:	0699      	lsls	r1, r3, #26
 80100a2:	bf42      	ittt	mi
 80100a4:	6833      	ldrmi	r3, [r6, #0]
 80100a6:	3302      	addmi	r3, #2
 80100a8:	6033      	strmi	r3, [r6, #0]
 80100aa:	6825      	ldr	r5, [r4, #0]
 80100ac:	f015 0506 	ands.w	r5, r5, #6
 80100b0:	d106      	bne.n	80100c0 <_printf_common+0x48>
 80100b2:	f104 0a19 	add.w	sl, r4, #25
 80100b6:	68e3      	ldr	r3, [r4, #12]
 80100b8:	6832      	ldr	r2, [r6, #0]
 80100ba:	1a9b      	subs	r3, r3, r2
 80100bc:	42ab      	cmp	r3, r5
 80100be:	dc26      	bgt.n	801010e <_printf_common+0x96>
 80100c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80100c4:	6822      	ldr	r2, [r4, #0]
 80100c6:	3b00      	subs	r3, #0
 80100c8:	bf18      	it	ne
 80100ca:	2301      	movne	r3, #1
 80100cc:	0692      	lsls	r2, r2, #26
 80100ce:	d42b      	bmi.n	8010128 <_printf_common+0xb0>
 80100d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80100d4:	4641      	mov	r1, r8
 80100d6:	4638      	mov	r0, r7
 80100d8:	47c8      	blx	r9
 80100da:	3001      	adds	r0, #1
 80100dc:	d01e      	beq.n	801011c <_printf_common+0xa4>
 80100de:	6823      	ldr	r3, [r4, #0]
 80100e0:	6922      	ldr	r2, [r4, #16]
 80100e2:	f003 0306 	and.w	r3, r3, #6
 80100e6:	2b04      	cmp	r3, #4
 80100e8:	bf02      	ittt	eq
 80100ea:	68e5      	ldreq	r5, [r4, #12]
 80100ec:	6833      	ldreq	r3, [r6, #0]
 80100ee:	1aed      	subeq	r5, r5, r3
 80100f0:	68a3      	ldr	r3, [r4, #8]
 80100f2:	bf0c      	ite	eq
 80100f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80100f8:	2500      	movne	r5, #0
 80100fa:	4293      	cmp	r3, r2
 80100fc:	bfc4      	itt	gt
 80100fe:	1a9b      	subgt	r3, r3, r2
 8010100:	18ed      	addgt	r5, r5, r3
 8010102:	2600      	movs	r6, #0
 8010104:	341a      	adds	r4, #26
 8010106:	42b5      	cmp	r5, r6
 8010108:	d11a      	bne.n	8010140 <_printf_common+0xc8>
 801010a:	2000      	movs	r0, #0
 801010c:	e008      	b.n	8010120 <_printf_common+0xa8>
 801010e:	2301      	movs	r3, #1
 8010110:	4652      	mov	r2, sl
 8010112:	4641      	mov	r1, r8
 8010114:	4638      	mov	r0, r7
 8010116:	47c8      	blx	r9
 8010118:	3001      	adds	r0, #1
 801011a:	d103      	bne.n	8010124 <_printf_common+0xac>
 801011c:	f04f 30ff 	mov.w	r0, #4294967295
 8010120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010124:	3501      	adds	r5, #1
 8010126:	e7c6      	b.n	80100b6 <_printf_common+0x3e>
 8010128:	18e1      	adds	r1, r4, r3
 801012a:	1c5a      	adds	r2, r3, #1
 801012c:	2030      	movs	r0, #48	@ 0x30
 801012e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010132:	4422      	add	r2, r4
 8010134:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010138:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801013c:	3302      	adds	r3, #2
 801013e:	e7c7      	b.n	80100d0 <_printf_common+0x58>
 8010140:	2301      	movs	r3, #1
 8010142:	4622      	mov	r2, r4
 8010144:	4641      	mov	r1, r8
 8010146:	4638      	mov	r0, r7
 8010148:	47c8      	blx	r9
 801014a:	3001      	adds	r0, #1
 801014c:	d0e6      	beq.n	801011c <_printf_common+0xa4>
 801014e:	3601      	adds	r6, #1
 8010150:	e7d9      	b.n	8010106 <_printf_common+0x8e>
	...

08010154 <_printf_i>:
 8010154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010158:	7e0f      	ldrb	r7, [r1, #24]
 801015a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801015c:	2f78      	cmp	r7, #120	@ 0x78
 801015e:	4691      	mov	r9, r2
 8010160:	4680      	mov	r8, r0
 8010162:	460c      	mov	r4, r1
 8010164:	469a      	mov	sl, r3
 8010166:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801016a:	d807      	bhi.n	801017c <_printf_i+0x28>
 801016c:	2f62      	cmp	r7, #98	@ 0x62
 801016e:	d80a      	bhi.n	8010186 <_printf_i+0x32>
 8010170:	2f00      	cmp	r7, #0
 8010172:	f000 80d2 	beq.w	801031a <_printf_i+0x1c6>
 8010176:	2f58      	cmp	r7, #88	@ 0x58
 8010178:	f000 80b9 	beq.w	80102ee <_printf_i+0x19a>
 801017c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010180:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010184:	e03a      	b.n	80101fc <_printf_i+0xa8>
 8010186:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801018a:	2b15      	cmp	r3, #21
 801018c:	d8f6      	bhi.n	801017c <_printf_i+0x28>
 801018e:	a101      	add	r1, pc, #4	@ (adr r1, 8010194 <_printf_i+0x40>)
 8010190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010194:	080101ed 	.word	0x080101ed
 8010198:	08010201 	.word	0x08010201
 801019c:	0801017d 	.word	0x0801017d
 80101a0:	0801017d 	.word	0x0801017d
 80101a4:	0801017d 	.word	0x0801017d
 80101a8:	0801017d 	.word	0x0801017d
 80101ac:	08010201 	.word	0x08010201
 80101b0:	0801017d 	.word	0x0801017d
 80101b4:	0801017d 	.word	0x0801017d
 80101b8:	0801017d 	.word	0x0801017d
 80101bc:	0801017d 	.word	0x0801017d
 80101c0:	08010301 	.word	0x08010301
 80101c4:	0801022b 	.word	0x0801022b
 80101c8:	080102bb 	.word	0x080102bb
 80101cc:	0801017d 	.word	0x0801017d
 80101d0:	0801017d 	.word	0x0801017d
 80101d4:	08010323 	.word	0x08010323
 80101d8:	0801017d 	.word	0x0801017d
 80101dc:	0801022b 	.word	0x0801022b
 80101e0:	0801017d 	.word	0x0801017d
 80101e4:	0801017d 	.word	0x0801017d
 80101e8:	080102c3 	.word	0x080102c3
 80101ec:	6833      	ldr	r3, [r6, #0]
 80101ee:	1d1a      	adds	r2, r3, #4
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	6032      	str	r2, [r6, #0]
 80101f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80101f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80101fc:	2301      	movs	r3, #1
 80101fe:	e09d      	b.n	801033c <_printf_i+0x1e8>
 8010200:	6833      	ldr	r3, [r6, #0]
 8010202:	6820      	ldr	r0, [r4, #0]
 8010204:	1d19      	adds	r1, r3, #4
 8010206:	6031      	str	r1, [r6, #0]
 8010208:	0606      	lsls	r6, r0, #24
 801020a:	d501      	bpl.n	8010210 <_printf_i+0xbc>
 801020c:	681d      	ldr	r5, [r3, #0]
 801020e:	e003      	b.n	8010218 <_printf_i+0xc4>
 8010210:	0645      	lsls	r5, r0, #25
 8010212:	d5fb      	bpl.n	801020c <_printf_i+0xb8>
 8010214:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010218:	2d00      	cmp	r5, #0
 801021a:	da03      	bge.n	8010224 <_printf_i+0xd0>
 801021c:	232d      	movs	r3, #45	@ 0x2d
 801021e:	426d      	negs	r5, r5
 8010220:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010224:	4859      	ldr	r0, [pc, #356]	@ (801038c <_printf_i+0x238>)
 8010226:	230a      	movs	r3, #10
 8010228:	e011      	b.n	801024e <_printf_i+0xfa>
 801022a:	6821      	ldr	r1, [r4, #0]
 801022c:	6833      	ldr	r3, [r6, #0]
 801022e:	0608      	lsls	r0, r1, #24
 8010230:	f853 5b04 	ldr.w	r5, [r3], #4
 8010234:	d402      	bmi.n	801023c <_printf_i+0xe8>
 8010236:	0649      	lsls	r1, r1, #25
 8010238:	bf48      	it	mi
 801023a:	b2ad      	uxthmi	r5, r5
 801023c:	2f6f      	cmp	r7, #111	@ 0x6f
 801023e:	4853      	ldr	r0, [pc, #332]	@ (801038c <_printf_i+0x238>)
 8010240:	6033      	str	r3, [r6, #0]
 8010242:	bf14      	ite	ne
 8010244:	230a      	movne	r3, #10
 8010246:	2308      	moveq	r3, #8
 8010248:	2100      	movs	r1, #0
 801024a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801024e:	6866      	ldr	r6, [r4, #4]
 8010250:	60a6      	str	r6, [r4, #8]
 8010252:	2e00      	cmp	r6, #0
 8010254:	bfa2      	ittt	ge
 8010256:	6821      	ldrge	r1, [r4, #0]
 8010258:	f021 0104 	bicge.w	r1, r1, #4
 801025c:	6021      	strge	r1, [r4, #0]
 801025e:	b90d      	cbnz	r5, 8010264 <_printf_i+0x110>
 8010260:	2e00      	cmp	r6, #0
 8010262:	d04b      	beq.n	80102fc <_printf_i+0x1a8>
 8010264:	4616      	mov	r6, r2
 8010266:	fbb5 f1f3 	udiv	r1, r5, r3
 801026a:	fb03 5711 	mls	r7, r3, r1, r5
 801026e:	5dc7      	ldrb	r7, [r0, r7]
 8010270:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010274:	462f      	mov	r7, r5
 8010276:	42bb      	cmp	r3, r7
 8010278:	460d      	mov	r5, r1
 801027a:	d9f4      	bls.n	8010266 <_printf_i+0x112>
 801027c:	2b08      	cmp	r3, #8
 801027e:	d10b      	bne.n	8010298 <_printf_i+0x144>
 8010280:	6823      	ldr	r3, [r4, #0]
 8010282:	07df      	lsls	r7, r3, #31
 8010284:	d508      	bpl.n	8010298 <_printf_i+0x144>
 8010286:	6923      	ldr	r3, [r4, #16]
 8010288:	6861      	ldr	r1, [r4, #4]
 801028a:	4299      	cmp	r1, r3
 801028c:	bfde      	ittt	le
 801028e:	2330      	movle	r3, #48	@ 0x30
 8010290:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010294:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010298:	1b92      	subs	r2, r2, r6
 801029a:	6122      	str	r2, [r4, #16]
 801029c:	f8cd a000 	str.w	sl, [sp]
 80102a0:	464b      	mov	r3, r9
 80102a2:	aa03      	add	r2, sp, #12
 80102a4:	4621      	mov	r1, r4
 80102a6:	4640      	mov	r0, r8
 80102a8:	f7ff fee6 	bl	8010078 <_printf_common>
 80102ac:	3001      	adds	r0, #1
 80102ae:	d14a      	bne.n	8010346 <_printf_i+0x1f2>
 80102b0:	f04f 30ff 	mov.w	r0, #4294967295
 80102b4:	b004      	add	sp, #16
 80102b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102ba:	6823      	ldr	r3, [r4, #0]
 80102bc:	f043 0320 	orr.w	r3, r3, #32
 80102c0:	6023      	str	r3, [r4, #0]
 80102c2:	4833      	ldr	r0, [pc, #204]	@ (8010390 <_printf_i+0x23c>)
 80102c4:	2778      	movs	r7, #120	@ 0x78
 80102c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80102ca:	6823      	ldr	r3, [r4, #0]
 80102cc:	6831      	ldr	r1, [r6, #0]
 80102ce:	061f      	lsls	r7, r3, #24
 80102d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80102d4:	d402      	bmi.n	80102dc <_printf_i+0x188>
 80102d6:	065f      	lsls	r7, r3, #25
 80102d8:	bf48      	it	mi
 80102da:	b2ad      	uxthmi	r5, r5
 80102dc:	6031      	str	r1, [r6, #0]
 80102de:	07d9      	lsls	r1, r3, #31
 80102e0:	bf44      	itt	mi
 80102e2:	f043 0320 	orrmi.w	r3, r3, #32
 80102e6:	6023      	strmi	r3, [r4, #0]
 80102e8:	b11d      	cbz	r5, 80102f2 <_printf_i+0x19e>
 80102ea:	2310      	movs	r3, #16
 80102ec:	e7ac      	b.n	8010248 <_printf_i+0xf4>
 80102ee:	4827      	ldr	r0, [pc, #156]	@ (801038c <_printf_i+0x238>)
 80102f0:	e7e9      	b.n	80102c6 <_printf_i+0x172>
 80102f2:	6823      	ldr	r3, [r4, #0]
 80102f4:	f023 0320 	bic.w	r3, r3, #32
 80102f8:	6023      	str	r3, [r4, #0]
 80102fa:	e7f6      	b.n	80102ea <_printf_i+0x196>
 80102fc:	4616      	mov	r6, r2
 80102fe:	e7bd      	b.n	801027c <_printf_i+0x128>
 8010300:	6833      	ldr	r3, [r6, #0]
 8010302:	6825      	ldr	r5, [r4, #0]
 8010304:	6961      	ldr	r1, [r4, #20]
 8010306:	1d18      	adds	r0, r3, #4
 8010308:	6030      	str	r0, [r6, #0]
 801030a:	062e      	lsls	r6, r5, #24
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	d501      	bpl.n	8010314 <_printf_i+0x1c0>
 8010310:	6019      	str	r1, [r3, #0]
 8010312:	e002      	b.n	801031a <_printf_i+0x1c6>
 8010314:	0668      	lsls	r0, r5, #25
 8010316:	d5fb      	bpl.n	8010310 <_printf_i+0x1bc>
 8010318:	8019      	strh	r1, [r3, #0]
 801031a:	2300      	movs	r3, #0
 801031c:	6123      	str	r3, [r4, #16]
 801031e:	4616      	mov	r6, r2
 8010320:	e7bc      	b.n	801029c <_printf_i+0x148>
 8010322:	6833      	ldr	r3, [r6, #0]
 8010324:	1d1a      	adds	r2, r3, #4
 8010326:	6032      	str	r2, [r6, #0]
 8010328:	681e      	ldr	r6, [r3, #0]
 801032a:	6862      	ldr	r2, [r4, #4]
 801032c:	2100      	movs	r1, #0
 801032e:	4630      	mov	r0, r6
 8010330:	f7ef ff76 	bl	8000220 <memchr>
 8010334:	b108      	cbz	r0, 801033a <_printf_i+0x1e6>
 8010336:	1b80      	subs	r0, r0, r6
 8010338:	6060      	str	r0, [r4, #4]
 801033a:	6863      	ldr	r3, [r4, #4]
 801033c:	6123      	str	r3, [r4, #16]
 801033e:	2300      	movs	r3, #0
 8010340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010344:	e7aa      	b.n	801029c <_printf_i+0x148>
 8010346:	6923      	ldr	r3, [r4, #16]
 8010348:	4632      	mov	r2, r6
 801034a:	4649      	mov	r1, r9
 801034c:	4640      	mov	r0, r8
 801034e:	47d0      	blx	sl
 8010350:	3001      	adds	r0, #1
 8010352:	d0ad      	beq.n	80102b0 <_printf_i+0x15c>
 8010354:	6823      	ldr	r3, [r4, #0]
 8010356:	079b      	lsls	r3, r3, #30
 8010358:	d413      	bmi.n	8010382 <_printf_i+0x22e>
 801035a:	68e0      	ldr	r0, [r4, #12]
 801035c:	9b03      	ldr	r3, [sp, #12]
 801035e:	4298      	cmp	r0, r3
 8010360:	bfb8      	it	lt
 8010362:	4618      	movlt	r0, r3
 8010364:	e7a6      	b.n	80102b4 <_printf_i+0x160>
 8010366:	2301      	movs	r3, #1
 8010368:	4632      	mov	r2, r6
 801036a:	4649      	mov	r1, r9
 801036c:	4640      	mov	r0, r8
 801036e:	47d0      	blx	sl
 8010370:	3001      	adds	r0, #1
 8010372:	d09d      	beq.n	80102b0 <_printf_i+0x15c>
 8010374:	3501      	adds	r5, #1
 8010376:	68e3      	ldr	r3, [r4, #12]
 8010378:	9903      	ldr	r1, [sp, #12]
 801037a:	1a5b      	subs	r3, r3, r1
 801037c:	42ab      	cmp	r3, r5
 801037e:	dcf2      	bgt.n	8010366 <_printf_i+0x212>
 8010380:	e7eb      	b.n	801035a <_printf_i+0x206>
 8010382:	2500      	movs	r5, #0
 8010384:	f104 0619 	add.w	r6, r4, #25
 8010388:	e7f5      	b.n	8010376 <_printf_i+0x222>
 801038a:	bf00      	nop
 801038c:	080145ca 	.word	0x080145ca
 8010390:	080145db 	.word	0x080145db

08010394 <_scanf_float>:
 8010394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010398:	b087      	sub	sp, #28
 801039a:	4617      	mov	r7, r2
 801039c:	9303      	str	r3, [sp, #12]
 801039e:	688b      	ldr	r3, [r1, #8]
 80103a0:	1e5a      	subs	r2, r3, #1
 80103a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80103a6:	bf81      	itttt	hi
 80103a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80103ac:	eb03 0b05 	addhi.w	fp, r3, r5
 80103b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80103b4:	608b      	strhi	r3, [r1, #8]
 80103b6:	680b      	ldr	r3, [r1, #0]
 80103b8:	460a      	mov	r2, r1
 80103ba:	f04f 0500 	mov.w	r5, #0
 80103be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80103c2:	f842 3b1c 	str.w	r3, [r2], #28
 80103c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80103ca:	4680      	mov	r8, r0
 80103cc:	460c      	mov	r4, r1
 80103ce:	bf98      	it	ls
 80103d0:	f04f 0b00 	movls.w	fp, #0
 80103d4:	9201      	str	r2, [sp, #4]
 80103d6:	4616      	mov	r6, r2
 80103d8:	46aa      	mov	sl, r5
 80103da:	46a9      	mov	r9, r5
 80103dc:	9502      	str	r5, [sp, #8]
 80103de:	68a2      	ldr	r2, [r4, #8]
 80103e0:	b152      	cbz	r2, 80103f8 <_scanf_float+0x64>
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	781b      	ldrb	r3, [r3, #0]
 80103e6:	2b4e      	cmp	r3, #78	@ 0x4e
 80103e8:	d864      	bhi.n	80104b4 <_scanf_float+0x120>
 80103ea:	2b40      	cmp	r3, #64	@ 0x40
 80103ec:	d83c      	bhi.n	8010468 <_scanf_float+0xd4>
 80103ee:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80103f2:	b2c8      	uxtb	r0, r1
 80103f4:	280e      	cmp	r0, #14
 80103f6:	d93a      	bls.n	801046e <_scanf_float+0xda>
 80103f8:	f1b9 0f00 	cmp.w	r9, #0
 80103fc:	d003      	beq.n	8010406 <_scanf_float+0x72>
 80103fe:	6823      	ldr	r3, [r4, #0]
 8010400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010404:	6023      	str	r3, [r4, #0]
 8010406:	f10a 3aff 	add.w	sl, sl, #4294967295
 801040a:	f1ba 0f01 	cmp.w	sl, #1
 801040e:	f200 8117 	bhi.w	8010640 <_scanf_float+0x2ac>
 8010412:	9b01      	ldr	r3, [sp, #4]
 8010414:	429e      	cmp	r6, r3
 8010416:	f200 8108 	bhi.w	801062a <_scanf_float+0x296>
 801041a:	2001      	movs	r0, #1
 801041c:	b007      	add	sp, #28
 801041e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010422:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8010426:	2a0d      	cmp	r2, #13
 8010428:	d8e6      	bhi.n	80103f8 <_scanf_float+0x64>
 801042a:	a101      	add	r1, pc, #4	@ (adr r1, 8010430 <_scanf_float+0x9c>)
 801042c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010430:	08010577 	.word	0x08010577
 8010434:	080103f9 	.word	0x080103f9
 8010438:	080103f9 	.word	0x080103f9
 801043c:	080103f9 	.word	0x080103f9
 8010440:	080105d7 	.word	0x080105d7
 8010444:	080105af 	.word	0x080105af
 8010448:	080103f9 	.word	0x080103f9
 801044c:	080103f9 	.word	0x080103f9
 8010450:	08010585 	.word	0x08010585
 8010454:	080103f9 	.word	0x080103f9
 8010458:	080103f9 	.word	0x080103f9
 801045c:	080103f9 	.word	0x080103f9
 8010460:	080103f9 	.word	0x080103f9
 8010464:	0801053d 	.word	0x0801053d
 8010468:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801046c:	e7db      	b.n	8010426 <_scanf_float+0x92>
 801046e:	290e      	cmp	r1, #14
 8010470:	d8c2      	bhi.n	80103f8 <_scanf_float+0x64>
 8010472:	a001      	add	r0, pc, #4	@ (adr r0, 8010478 <_scanf_float+0xe4>)
 8010474:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010478:	0801052d 	.word	0x0801052d
 801047c:	080103f9 	.word	0x080103f9
 8010480:	0801052d 	.word	0x0801052d
 8010484:	080105c3 	.word	0x080105c3
 8010488:	080103f9 	.word	0x080103f9
 801048c:	080104d5 	.word	0x080104d5
 8010490:	08010513 	.word	0x08010513
 8010494:	08010513 	.word	0x08010513
 8010498:	08010513 	.word	0x08010513
 801049c:	08010513 	.word	0x08010513
 80104a0:	08010513 	.word	0x08010513
 80104a4:	08010513 	.word	0x08010513
 80104a8:	08010513 	.word	0x08010513
 80104ac:	08010513 	.word	0x08010513
 80104b0:	08010513 	.word	0x08010513
 80104b4:	2b6e      	cmp	r3, #110	@ 0x6e
 80104b6:	d809      	bhi.n	80104cc <_scanf_float+0x138>
 80104b8:	2b60      	cmp	r3, #96	@ 0x60
 80104ba:	d8b2      	bhi.n	8010422 <_scanf_float+0x8e>
 80104bc:	2b54      	cmp	r3, #84	@ 0x54
 80104be:	d07b      	beq.n	80105b8 <_scanf_float+0x224>
 80104c0:	2b59      	cmp	r3, #89	@ 0x59
 80104c2:	d199      	bne.n	80103f8 <_scanf_float+0x64>
 80104c4:	2d07      	cmp	r5, #7
 80104c6:	d197      	bne.n	80103f8 <_scanf_float+0x64>
 80104c8:	2508      	movs	r5, #8
 80104ca:	e02c      	b.n	8010526 <_scanf_float+0x192>
 80104cc:	2b74      	cmp	r3, #116	@ 0x74
 80104ce:	d073      	beq.n	80105b8 <_scanf_float+0x224>
 80104d0:	2b79      	cmp	r3, #121	@ 0x79
 80104d2:	e7f6      	b.n	80104c2 <_scanf_float+0x12e>
 80104d4:	6821      	ldr	r1, [r4, #0]
 80104d6:	05c8      	lsls	r0, r1, #23
 80104d8:	d51b      	bpl.n	8010512 <_scanf_float+0x17e>
 80104da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80104de:	6021      	str	r1, [r4, #0]
 80104e0:	f109 0901 	add.w	r9, r9, #1
 80104e4:	f1bb 0f00 	cmp.w	fp, #0
 80104e8:	d003      	beq.n	80104f2 <_scanf_float+0x15e>
 80104ea:	3201      	adds	r2, #1
 80104ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80104f0:	60a2      	str	r2, [r4, #8]
 80104f2:	68a3      	ldr	r3, [r4, #8]
 80104f4:	3b01      	subs	r3, #1
 80104f6:	60a3      	str	r3, [r4, #8]
 80104f8:	6923      	ldr	r3, [r4, #16]
 80104fa:	3301      	adds	r3, #1
 80104fc:	6123      	str	r3, [r4, #16]
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	3b01      	subs	r3, #1
 8010502:	2b00      	cmp	r3, #0
 8010504:	607b      	str	r3, [r7, #4]
 8010506:	f340 8087 	ble.w	8010618 <_scanf_float+0x284>
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	3301      	adds	r3, #1
 801050e:	603b      	str	r3, [r7, #0]
 8010510:	e765      	b.n	80103de <_scanf_float+0x4a>
 8010512:	eb1a 0105 	adds.w	r1, sl, r5
 8010516:	f47f af6f 	bne.w	80103f8 <_scanf_float+0x64>
 801051a:	6822      	ldr	r2, [r4, #0]
 801051c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010520:	6022      	str	r2, [r4, #0]
 8010522:	460d      	mov	r5, r1
 8010524:	468a      	mov	sl, r1
 8010526:	f806 3b01 	strb.w	r3, [r6], #1
 801052a:	e7e2      	b.n	80104f2 <_scanf_float+0x15e>
 801052c:	6822      	ldr	r2, [r4, #0]
 801052e:	0610      	lsls	r0, r2, #24
 8010530:	f57f af62 	bpl.w	80103f8 <_scanf_float+0x64>
 8010534:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010538:	6022      	str	r2, [r4, #0]
 801053a:	e7f4      	b.n	8010526 <_scanf_float+0x192>
 801053c:	f1ba 0f00 	cmp.w	sl, #0
 8010540:	d10e      	bne.n	8010560 <_scanf_float+0x1cc>
 8010542:	f1b9 0f00 	cmp.w	r9, #0
 8010546:	d10e      	bne.n	8010566 <_scanf_float+0x1d2>
 8010548:	6822      	ldr	r2, [r4, #0]
 801054a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801054e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010552:	d108      	bne.n	8010566 <_scanf_float+0x1d2>
 8010554:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010558:	6022      	str	r2, [r4, #0]
 801055a:	f04f 0a01 	mov.w	sl, #1
 801055e:	e7e2      	b.n	8010526 <_scanf_float+0x192>
 8010560:	f1ba 0f02 	cmp.w	sl, #2
 8010564:	d055      	beq.n	8010612 <_scanf_float+0x27e>
 8010566:	2d01      	cmp	r5, #1
 8010568:	d002      	beq.n	8010570 <_scanf_float+0x1dc>
 801056a:	2d04      	cmp	r5, #4
 801056c:	f47f af44 	bne.w	80103f8 <_scanf_float+0x64>
 8010570:	3501      	adds	r5, #1
 8010572:	b2ed      	uxtb	r5, r5
 8010574:	e7d7      	b.n	8010526 <_scanf_float+0x192>
 8010576:	f1ba 0f01 	cmp.w	sl, #1
 801057a:	f47f af3d 	bne.w	80103f8 <_scanf_float+0x64>
 801057e:	f04f 0a02 	mov.w	sl, #2
 8010582:	e7d0      	b.n	8010526 <_scanf_float+0x192>
 8010584:	b97d      	cbnz	r5, 80105a6 <_scanf_float+0x212>
 8010586:	f1b9 0f00 	cmp.w	r9, #0
 801058a:	f47f af38 	bne.w	80103fe <_scanf_float+0x6a>
 801058e:	6822      	ldr	r2, [r4, #0]
 8010590:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010594:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010598:	f040 8108 	bne.w	80107ac <_scanf_float+0x418>
 801059c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80105a0:	6022      	str	r2, [r4, #0]
 80105a2:	2501      	movs	r5, #1
 80105a4:	e7bf      	b.n	8010526 <_scanf_float+0x192>
 80105a6:	2d03      	cmp	r5, #3
 80105a8:	d0e2      	beq.n	8010570 <_scanf_float+0x1dc>
 80105aa:	2d05      	cmp	r5, #5
 80105ac:	e7de      	b.n	801056c <_scanf_float+0x1d8>
 80105ae:	2d02      	cmp	r5, #2
 80105b0:	f47f af22 	bne.w	80103f8 <_scanf_float+0x64>
 80105b4:	2503      	movs	r5, #3
 80105b6:	e7b6      	b.n	8010526 <_scanf_float+0x192>
 80105b8:	2d06      	cmp	r5, #6
 80105ba:	f47f af1d 	bne.w	80103f8 <_scanf_float+0x64>
 80105be:	2507      	movs	r5, #7
 80105c0:	e7b1      	b.n	8010526 <_scanf_float+0x192>
 80105c2:	6822      	ldr	r2, [r4, #0]
 80105c4:	0591      	lsls	r1, r2, #22
 80105c6:	f57f af17 	bpl.w	80103f8 <_scanf_float+0x64>
 80105ca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80105ce:	6022      	str	r2, [r4, #0]
 80105d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80105d4:	e7a7      	b.n	8010526 <_scanf_float+0x192>
 80105d6:	6822      	ldr	r2, [r4, #0]
 80105d8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80105dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80105e0:	d006      	beq.n	80105f0 <_scanf_float+0x25c>
 80105e2:	0550      	lsls	r0, r2, #21
 80105e4:	f57f af08 	bpl.w	80103f8 <_scanf_float+0x64>
 80105e8:	f1b9 0f00 	cmp.w	r9, #0
 80105ec:	f000 80de 	beq.w	80107ac <_scanf_float+0x418>
 80105f0:	0591      	lsls	r1, r2, #22
 80105f2:	bf58      	it	pl
 80105f4:	9902      	ldrpl	r1, [sp, #8]
 80105f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80105fa:	bf58      	it	pl
 80105fc:	eba9 0101 	subpl.w	r1, r9, r1
 8010600:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8010604:	bf58      	it	pl
 8010606:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801060a:	6022      	str	r2, [r4, #0]
 801060c:	f04f 0900 	mov.w	r9, #0
 8010610:	e789      	b.n	8010526 <_scanf_float+0x192>
 8010612:	f04f 0a03 	mov.w	sl, #3
 8010616:	e786      	b.n	8010526 <_scanf_float+0x192>
 8010618:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801061c:	4639      	mov	r1, r7
 801061e:	4640      	mov	r0, r8
 8010620:	4798      	blx	r3
 8010622:	2800      	cmp	r0, #0
 8010624:	f43f aedb 	beq.w	80103de <_scanf_float+0x4a>
 8010628:	e6e6      	b.n	80103f8 <_scanf_float+0x64>
 801062a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801062e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010632:	463a      	mov	r2, r7
 8010634:	4640      	mov	r0, r8
 8010636:	4798      	blx	r3
 8010638:	6923      	ldr	r3, [r4, #16]
 801063a:	3b01      	subs	r3, #1
 801063c:	6123      	str	r3, [r4, #16]
 801063e:	e6e8      	b.n	8010412 <_scanf_float+0x7e>
 8010640:	1e6b      	subs	r3, r5, #1
 8010642:	2b06      	cmp	r3, #6
 8010644:	d824      	bhi.n	8010690 <_scanf_float+0x2fc>
 8010646:	2d02      	cmp	r5, #2
 8010648:	d836      	bhi.n	80106b8 <_scanf_float+0x324>
 801064a:	9b01      	ldr	r3, [sp, #4]
 801064c:	429e      	cmp	r6, r3
 801064e:	f67f aee4 	bls.w	801041a <_scanf_float+0x86>
 8010652:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010656:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801065a:	463a      	mov	r2, r7
 801065c:	4640      	mov	r0, r8
 801065e:	4798      	blx	r3
 8010660:	6923      	ldr	r3, [r4, #16]
 8010662:	3b01      	subs	r3, #1
 8010664:	6123      	str	r3, [r4, #16]
 8010666:	e7f0      	b.n	801064a <_scanf_float+0x2b6>
 8010668:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801066c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010670:	463a      	mov	r2, r7
 8010672:	4640      	mov	r0, r8
 8010674:	4798      	blx	r3
 8010676:	6923      	ldr	r3, [r4, #16]
 8010678:	3b01      	subs	r3, #1
 801067a:	6123      	str	r3, [r4, #16]
 801067c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010680:	fa5f fa8a 	uxtb.w	sl, sl
 8010684:	f1ba 0f02 	cmp.w	sl, #2
 8010688:	d1ee      	bne.n	8010668 <_scanf_float+0x2d4>
 801068a:	3d03      	subs	r5, #3
 801068c:	b2ed      	uxtb	r5, r5
 801068e:	1b76      	subs	r6, r6, r5
 8010690:	6823      	ldr	r3, [r4, #0]
 8010692:	05da      	lsls	r2, r3, #23
 8010694:	d530      	bpl.n	80106f8 <_scanf_float+0x364>
 8010696:	055b      	lsls	r3, r3, #21
 8010698:	d511      	bpl.n	80106be <_scanf_float+0x32a>
 801069a:	9b01      	ldr	r3, [sp, #4]
 801069c:	429e      	cmp	r6, r3
 801069e:	f67f aebc 	bls.w	801041a <_scanf_float+0x86>
 80106a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80106a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80106aa:	463a      	mov	r2, r7
 80106ac:	4640      	mov	r0, r8
 80106ae:	4798      	blx	r3
 80106b0:	6923      	ldr	r3, [r4, #16]
 80106b2:	3b01      	subs	r3, #1
 80106b4:	6123      	str	r3, [r4, #16]
 80106b6:	e7f0      	b.n	801069a <_scanf_float+0x306>
 80106b8:	46aa      	mov	sl, r5
 80106ba:	46b3      	mov	fp, r6
 80106bc:	e7de      	b.n	801067c <_scanf_float+0x2e8>
 80106be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80106c2:	6923      	ldr	r3, [r4, #16]
 80106c4:	2965      	cmp	r1, #101	@ 0x65
 80106c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80106ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80106ce:	6123      	str	r3, [r4, #16]
 80106d0:	d00c      	beq.n	80106ec <_scanf_float+0x358>
 80106d2:	2945      	cmp	r1, #69	@ 0x45
 80106d4:	d00a      	beq.n	80106ec <_scanf_float+0x358>
 80106d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80106da:	463a      	mov	r2, r7
 80106dc:	4640      	mov	r0, r8
 80106de:	4798      	blx	r3
 80106e0:	6923      	ldr	r3, [r4, #16]
 80106e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80106e6:	3b01      	subs	r3, #1
 80106e8:	1eb5      	subs	r5, r6, #2
 80106ea:	6123      	str	r3, [r4, #16]
 80106ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80106f0:	463a      	mov	r2, r7
 80106f2:	4640      	mov	r0, r8
 80106f4:	4798      	blx	r3
 80106f6:	462e      	mov	r6, r5
 80106f8:	6822      	ldr	r2, [r4, #0]
 80106fa:	f012 0210 	ands.w	r2, r2, #16
 80106fe:	d001      	beq.n	8010704 <_scanf_float+0x370>
 8010700:	2000      	movs	r0, #0
 8010702:	e68b      	b.n	801041c <_scanf_float+0x88>
 8010704:	7032      	strb	r2, [r6, #0]
 8010706:	6823      	ldr	r3, [r4, #0]
 8010708:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801070c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010710:	d11c      	bne.n	801074c <_scanf_float+0x3b8>
 8010712:	9b02      	ldr	r3, [sp, #8]
 8010714:	454b      	cmp	r3, r9
 8010716:	eba3 0209 	sub.w	r2, r3, r9
 801071a:	d123      	bne.n	8010764 <_scanf_float+0x3d0>
 801071c:	9901      	ldr	r1, [sp, #4]
 801071e:	2200      	movs	r2, #0
 8010720:	4640      	mov	r0, r8
 8010722:	f7ff f9cd 	bl	800fac0 <_strtod_r>
 8010726:	9b03      	ldr	r3, [sp, #12]
 8010728:	6821      	ldr	r1, [r4, #0]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	f011 0f02 	tst.w	r1, #2
 8010730:	ec57 6b10 	vmov	r6, r7, d0
 8010734:	f103 0204 	add.w	r2, r3, #4
 8010738:	d01f      	beq.n	801077a <_scanf_float+0x3e6>
 801073a:	9903      	ldr	r1, [sp, #12]
 801073c:	600a      	str	r2, [r1, #0]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	e9c3 6700 	strd	r6, r7, [r3]
 8010744:	68e3      	ldr	r3, [r4, #12]
 8010746:	3301      	adds	r3, #1
 8010748:	60e3      	str	r3, [r4, #12]
 801074a:	e7d9      	b.n	8010700 <_scanf_float+0x36c>
 801074c:	9b04      	ldr	r3, [sp, #16]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d0e4      	beq.n	801071c <_scanf_float+0x388>
 8010752:	9905      	ldr	r1, [sp, #20]
 8010754:	230a      	movs	r3, #10
 8010756:	3101      	adds	r1, #1
 8010758:	4640      	mov	r0, r8
 801075a:	f002 f9e9 	bl	8012b30 <_strtol_r>
 801075e:	9b04      	ldr	r3, [sp, #16]
 8010760:	9e05      	ldr	r6, [sp, #20]
 8010762:	1ac2      	subs	r2, r0, r3
 8010764:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010768:	429e      	cmp	r6, r3
 801076a:	bf28      	it	cs
 801076c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010770:	4910      	ldr	r1, [pc, #64]	@ (80107b4 <_scanf_float+0x420>)
 8010772:	4630      	mov	r0, r6
 8010774:	f000 f8e4 	bl	8010940 <siprintf>
 8010778:	e7d0      	b.n	801071c <_scanf_float+0x388>
 801077a:	f011 0f04 	tst.w	r1, #4
 801077e:	9903      	ldr	r1, [sp, #12]
 8010780:	600a      	str	r2, [r1, #0]
 8010782:	d1dc      	bne.n	801073e <_scanf_float+0x3aa>
 8010784:	681d      	ldr	r5, [r3, #0]
 8010786:	4632      	mov	r2, r6
 8010788:	463b      	mov	r3, r7
 801078a:	4630      	mov	r0, r6
 801078c:	4639      	mov	r1, r7
 801078e:	f7f0 f9f5 	bl	8000b7c <__aeabi_dcmpun>
 8010792:	b128      	cbz	r0, 80107a0 <_scanf_float+0x40c>
 8010794:	4808      	ldr	r0, [pc, #32]	@ (80107b8 <_scanf_float+0x424>)
 8010796:	f000 f9ff 	bl	8010b98 <nanf>
 801079a:	ed85 0a00 	vstr	s0, [r5]
 801079e:	e7d1      	b.n	8010744 <_scanf_float+0x3b0>
 80107a0:	4630      	mov	r0, r6
 80107a2:	4639      	mov	r1, r7
 80107a4:	f7f0 fa48 	bl	8000c38 <__aeabi_d2f>
 80107a8:	6028      	str	r0, [r5, #0]
 80107aa:	e7cb      	b.n	8010744 <_scanf_float+0x3b0>
 80107ac:	f04f 0900 	mov.w	r9, #0
 80107b0:	e629      	b.n	8010406 <_scanf_float+0x72>
 80107b2:	bf00      	nop
 80107b4:	080145ec 	.word	0x080145ec
 80107b8:	0801498d 	.word	0x0801498d

080107bc <std>:
 80107bc:	2300      	movs	r3, #0
 80107be:	b510      	push	{r4, lr}
 80107c0:	4604      	mov	r4, r0
 80107c2:	e9c0 3300 	strd	r3, r3, [r0]
 80107c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80107ca:	6083      	str	r3, [r0, #8]
 80107cc:	8181      	strh	r1, [r0, #12]
 80107ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80107d0:	81c2      	strh	r2, [r0, #14]
 80107d2:	6183      	str	r3, [r0, #24]
 80107d4:	4619      	mov	r1, r3
 80107d6:	2208      	movs	r2, #8
 80107d8:	305c      	adds	r0, #92	@ 0x5c
 80107da:	f000 f935 	bl	8010a48 <memset>
 80107de:	4b0d      	ldr	r3, [pc, #52]	@ (8010814 <std+0x58>)
 80107e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80107e2:	4b0d      	ldr	r3, [pc, #52]	@ (8010818 <std+0x5c>)
 80107e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80107e6:	4b0d      	ldr	r3, [pc, #52]	@ (801081c <std+0x60>)
 80107e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80107ea:	4b0d      	ldr	r3, [pc, #52]	@ (8010820 <std+0x64>)
 80107ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80107ee:	4b0d      	ldr	r3, [pc, #52]	@ (8010824 <std+0x68>)
 80107f0:	6224      	str	r4, [r4, #32]
 80107f2:	429c      	cmp	r4, r3
 80107f4:	d006      	beq.n	8010804 <std+0x48>
 80107f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80107fa:	4294      	cmp	r4, r2
 80107fc:	d002      	beq.n	8010804 <std+0x48>
 80107fe:	33d0      	adds	r3, #208	@ 0xd0
 8010800:	429c      	cmp	r4, r3
 8010802:	d105      	bne.n	8010810 <std+0x54>
 8010804:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801080c:	f000 b9aa 	b.w	8010b64 <__retarget_lock_init_recursive>
 8010810:	bd10      	pop	{r4, pc}
 8010812:	bf00      	nop
 8010814:	08010981 	.word	0x08010981
 8010818:	080109a3 	.word	0x080109a3
 801081c:	080109db 	.word	0x080109db
 8010820:	080109ff 	.word	0x080109ff
 8010824:	20000d58 	.word	0x20000d58

08010828 <stdio_exit_handler>:
 8010828:	4a02      	ldr	r2, [pc, #8]	@ (8010834 <stdio_exit_handler+0xc>)
 801082a:	4903      	ldr	r1, [pc, #12]	@ (8010838 <stdio_exit_handler+0x10>)
 801082c:	4803      	ldr	r0, [pc, #12]	@ (801083c <stdio_exit_handler+0x14>)
 801082e:	f000 b869 	b.w	8010904 <_fwalk_sglue>
 8010832:	bf00      	nop
 8010834:	200000c8 	.word	0x200000c8
 8010838:	08012f05 	.word	0x08012f05
 801083c:	20000244 	.word	0x20000244

08010840 <cleanup_stdio>:
 8010840:	6841      	ldr	r1, [r0, #4]
 8010842:	4b0c      	ldr	r3, [pc, #48]	@ (8010874 <cleanup_stdio+0x34>)
 8010844:	4299      	cmp	r1, r3
 8010846:	b510      	push	{r4, lr}
 8010848:	4604      	mov	r4, r0
 801084a:	d001      	beq.n	8010850 <cleanup_stdio+0x10>
 801084c:	f002 fb5a 	bl	8012f04 <_fflush_r>
 8010850:	68a1      	ldr	r1, [r4, #8]
 8010852:	4b09      	ldr	r3, [pc, #36]	@ (8010878 <cleanup_stdio+0x38>)
 8010854:	4299      	cmp	r1, r3
 8010856:	d002      	beq.n	801085e <cleanup_stdio+0x1e>
 8010858:	4620      	mov	r0, r4
 801085a:	f002 fb53 	bl	8012f04 <_fflush_r>
 801085e:	68e1      	ldr	r1, [r4, #12]
 8010860:	4b06      	ldr	r3, [pc, #24]	@ (801087c <cleanup_stdio+0x3c>)
 8010862:	4299      	cmp	r1, r3
 8010864:	d004      	beq.n	8010870 <cleanup_stdio+0x30>
 8010866:	4620      	mov	r0, r4
 8010868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801086c:	f002 bb4a 	b.w	8012f04 <_fflush_r>
 8010870:	bd10      	pop	{r4, pc}
 8010872:	bf00      	nop
 8010874:	20000d58 	.word	0x20000d58
 8010878:	20000dc0 	.word	0x20000dc0
 801087c:	20000e28 	.word	0x20000e28

08010880 <global_stdio_init.part.0>:
 8010880:	b510      	push	{r4, lr}
 8010882:	4b0b      	ldr	r3, [pc, #44]	@ (80108b0 <global_stdio_init.part.0+0x30>)
 8010884:	4c0b      	ldr	r4, [pc, #44]	@ (80108b4 <global_stdio_init.part.0+0x34>)
 8010886:	4a0c      	ldr	r2, [pc, #48]	@ (80108b8 <global_stdio_init.part.0+0x38>)
 8010888:	601a      	str	r2, [r3, #0]
 801088a:	4620      	mov	r0, r4
 801088c:	2200      	movs	r2, #0
 801088e:	2104      	movs	r1, #4
 8010890:	f7ff ff94 	bl	80107bc <std>
 8010894:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010898:	2201      	movs	r2, #1
 801089a:	2109      	movs	r1, #9
 801089c:	f7ff ff8e 	bl	80107bc <std>
 80108a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80108a4:	2202      	movs	r2, #2
 80108a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108aa:	2112      	movs	r1, #18
 80108ac:	f7ff bf86 	b.w	80107bc <std>
 80108b0:	20000e90 	.word	0x20000e90
 80108b4:	20000d58 	.word	0x20000d58
 80108b8:	08010829 	.word	0x08010829

080108bc <__sfp_lock_acquire>:
 80108bc:	4801      	ldr	r0, [pc, #4]	@ (80108c4 <__sfp_lock_acquire+0x8>)
 80108be:	f000 b952 	b.w	8010b66 <__retarget_lock_acquire_recursive>
 80108c2:	bf00      	nop
 80108c4:	20000e99 	.word	0x20000e99

080108c8 <__sfp_lock_release>:
 80108c8:	4801      	ldr	r0, [pc, #4]	@ (80108d0 <__sfp_lock_release+0x8>)
 80108ca:	f000 b94d 	b.w	8010b68 <__retarget_lock_release_recursive>
 80108ce:	bf00      	nop
 80108d0:	20000e99 	.word	0x20000e99

080108d4 <__sinit>:
 80108d4:	b510      	push	{r4, lr}
 80108d6:	4604      	mov	r4, r0
 80108d8:	f7ff fff0 	bl	80108bc <__sfp_lock_acquire>
 80108dc:	6a23      	ldr	r3, [r4, #32]
 80108de:	b11b      	cbz	r3, 80108e8 <__sinit+0x14>
 80108e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108e4:	f7ff bff0 	b.w	80108c8 <__sfp_lock_release>
 80108e8:	4b04      	ldr	r3, [pc, #16]	@ (80108fc <__sinit+0x28>)
 80108ea:	6223      	str	r3, [r4, #32]
 80108ec:	4b04      	ldr	r3, [pc, #16]	@ (8010900 <__sinit+0x2c>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d1f5      	bne.n	80108e0 <__sinit+0xc>
 80108f4:	f7ff ffc4 	bl	8010880 <global_stdio_init.part.0>
 80108f8:	e7f2      	b.n	80108e0 <__sinit+0xc>
 80108fa:	bf00      	nop
 80108fc:	08010841 	.word	0x08010841
 8010900:	20000e90 	.word	0x20000e90

08010904 <_fwalk_sglue>:
 8010904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010908:	4607      	mov	r7, r0
 801090a:	4688      	mov	r8, r1
 801090c:	4614      	mov	r4, r2
 801090e:	2600      	movs	r6, #0
 8010910:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010914:	f1b9 0901 	subs.w	r9, r9, #1
 8010918:	d505      	bpl.n	8010926 <_fwalk_sglue+0x22>
 801091a:	6824      	ldr	r4, [r4, #0]
 801091c:	2c00      	cmp	r4, #0
 801091e:	d1f7      	bne.n	8010910 <_fwalk_sglue+0xc>
 8010920:	4630      	mov	r0, r6
 8010922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010926:	89ab      	ldrh	r3, [r5, #12]
 8010928:	2b01      	cmp	r3, #1
 801092a:	d907      	bls.n	801093c <_fwalk_sglue+0x38>
 801092c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010930:	3301      	adds	r3, #1
 8010932:	d003      	beq.n	801093c <_fwalk_sglue+0x38>
 8010934:	4629      	mov	r1, r5
 8010936:	4638      	mov	r0, r7
 8010938:	47c0      	blx	r8
 801093a:	4306      	orrs	r6, r0
 801093c:	3568      	adds	r5, #104	@ 0x68
 801093e:	e7e9      	b.n	8010914 <_fwalk_sglue+0x10>

08010940 <siprintf>:
 8010940:	b40e      	push	{r1, r2, r3}
 8010942:	b500      	push	{lr}
 8010944:	b09c      	sub	sp, #112	@ 0x70
 8010946:	ab1d      	add	r3, sp, #116	@ 0x74
 8010948:	9002      	str	r0, [sp, #8]
 801094a:	9006      	str	r0, [sp, #24]
 801094c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010950:	4809      	ldr	r0, [pc, #36]	@ (8010978 <siprintf+0x38>)
 8010952:	9107      	str	r1, [sp, #28]
 8010954:	9104      	str	r1, [sp, #16]
 8010956:	4909      	ldr	r1, [pc, #36]	@ (801097c <siprintf+0x3c>)
 8010958:	f853 2b04 	ldr.w	r2, [r3], #4
 801095c:	9105      	str	r1, [sp, #20]
 801095e:	6800      	ldr	r0, [r0, #0]
 8010960:	9301      	str	r3, [sp, #4]
 8010962:	a902      	add	r1, sp, #8
 8010964:	f002 f94e 	bl	8012c04 <_svfiprintf_r>
 8010968:	9b02      	ldr	r3, [sp, #8]
 801096a:	2200      	movs	r2, #0
 801096c:	701a      	strb	r2, [r3, #0]
 801096e:	b01c      	add	sp, #112	@ 0x70
 8010970:	f85d eb04 	ldr.w	lr, [sp], #4
 8010974:	b003      	add	sp, #12
 8010976:	4770      	bx	lr
 8010978:	20000240 	.word	0x20000240
 801097c:	ffff0208 	.word	0xffff0208

08010980 <__sread>:
 8010980:	b510      	push	{r4, lr}
 8010982:	460c      	mov	r4, r1
 8010984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010988:	f000 f89e 	bl	8010ac8 <_read_r>
 801098c:	2800      	cmp	r0, #0
 801098e:	bfab      	itete	ge
 8010990:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010992:	89a3      	ldrhlt	r3, [r4, #12]
 8010994:	181b      	addge	r3, r3, r0
 8010996:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801099a:	bfac      	ite	ge
 801099c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801099e:	81a3      	strhlt	r3, [r4, #12]
 80109a0:	bd10      	pop	{r4, pc}

080109a2 <__swrite>:
 80109a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109a6:	461f      	mov	r7, r3
 80109a8:	898b      	ldrh	r3, [r1, #12]
 80109aa:	05db      	lsls	r3, r3, #23
 80109ac:	4605      	mov	r5, r0
 80109ae:	460c      	mov	r4, r1
 80109b0:	4616      	mov	r6, r2
 80109b2:	d505      	bpl.n	80109c0 <__swrite+0x1e>
 80109b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109b8:	2302      	movs	r3, #2
 80109ba:	2200      	movs	r2, #0
 80109bc:	f000 f872 	bl	8010aa4 <_lseek_r>
 80109c0:	89a3      	ldrh	r3, [r4, #12]
 80109c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80109ca:	81a3      	strh	r3, [r4, #12]
 80109cc:	4632      	mov	r2, r6
 80109ce:	463b      	mov	r3, r7
 80109d0:	4628      	mov	r0, r5
 80109d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109d6:	f000 b889 	b.w	8010aec <_write_r>

080109da <__sseek>:
 80109da:	b510      	push	{r4, lr}
 80109dc:	460c      	mov	r4, r1
 80109de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109e2:	f000 f85f 	bl	8010aa4 <_lseek_r>
 80109e6:	1c43      	adds	r3, r0, #1
 80109e8:	89a3      	ldrh	r3, [r4, #12]
 80109ea:	bf15      	itete	ne
 80109ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80109ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80109f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80109f6:	81a3      	strheq	r3, [r4, #12]
 80109f8:	bf18      	it	ne
 80109fa:	81a3      	strhne	r3, [r4, #12]
 80109fc:	bd10      	pop	{r4, pc}

080109fe <__sclose>:
 80109fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a02:	f000 b83f 	b.w	8010a84 <_close_r>
	...

08010a08 <_vsiprintf_r>:
 8010a08:	b500      	push	{lr}
 8010a0a:	b09b      	sub	sp, #108	@ 0x6c
 8010a0c:	9100      	str	r1, [sp, #0]
 8010a0e:	9104      	str	r1, [sp, #16]
 8010a10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010a14:	9105      	str	r1, [sp, #20]
 8010a16:	9102      	str	r1, [sp, #8]
 8010a18:	4905      	ldr	r1, [pc, #20]	@ (8010a30 <_vsiprintf_r+0x28>)
 8010a1a:	9103      	str	r1, [sp, #12]
 8010a1c:	4669      	mov	r1, sp
 8010a1e:	f002 f8f1 	bl	8012c04 <_svfiprintf_r>
 8010a22:	9b00      	ldr	r3, [sp, #0]
 8010a24:	2200      	movs	r2, #0
 8010a26:	701a      	strb	r2, [r3, #0]
 8010a28:	b01b      	add	sp, #108	@ 0x6c
 8010a2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a2e:	bf00      	nop
 8010a30:	ffff0208 	.word	0xffff0208

08010a34 <vsiprintf>:
 8010a34:	4613      	mov	r3, r2
 8010a36:	460a      	mov	r2, r1
 8010a38:	4601      	mov	r1, r0
 8010a3a:	4802      	ldr	r0, [pc, #8]	@ (8010a44 <vsiprintf+0x10>)
 8010a3c:	6800      	ldr	r0, [r0, #0]
 8010a3e:	f7ff bfe3 	b.w	8010a08 <_vsiprintf_r>
 8010a42:	bf00      	nop
 8010a44:	20000240 	.word	0x20000240

08010a48 <memset>:
 8010a48:	4402      	add	r2, r0
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d100      	bne.n	8010a52 <memset+0xa>
 8010a50:	4770      	bx	lr
 8010a52:	f803 1b01 	strb.w	r1, [r3], #1
 8010a56:	e7f9      	b.n	8010a4c <memset+0x4>

08010a58 <strncmp>:
 8010a58:	b510      	push	{r4, lr}
 8010a5a:	b16a      	cbz	r2, 8010a78 <strncmp+0x20>
 8010a5c:	3901      	subs	r1, #1
 8010a5e:	1884      	adds	r4, r0, r2
 8010a60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a64:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d103      	bne.n	8010a74 <strncmp+0x1c>
 8010a6c:	42a0      	cmp	r0, r4
 8010a6e:	d001      	beq.n	8010a74 <strncmp+0x1c>
 8010a70:	2a00      	cmp	r2, #0
 8010a72:	d1f5      	bne.n	8010a60 <strncmp+0x8>
 8010a74:	1ad0      	subs	r0, r2, r3
 8010a76:	bd10      	pop	{r4, pc}
 8010a78:	4610      	mov	r0, r2
 8010a7a:	e7fc      	b.n	8010a76 <strncmp+0x1e>

08010a7c <_localeconv_r>:
 8010a7c:	4800      	ldr	r0, [pc, #0]	@ (8010a80 <_localeconv_r+0x4>)
 8010a7e:	4770      	bx	lr
 8010a80:	200001c4 	.word	0x200001c4

08010a84 <_close_r>:
 8010a84:	b538      	push	{r3, r4, r5, lr}
 8010a86:	4d06      	ldr	r5, [pc, #24]	@ (8010aa0 <_close_r+0x1c>)
 8010a88:	2300      	movs	r3, #0
 8010a8a:	4604      	mov	r4, r0
 8010a8c:	4608      	mov	r0, r1
 8010a8e:	602b      	str	r3, [r5, #0]
 8010a90:	f7f1 fa18 	bl	8001ec4 <_close>
 8010a94:	1c43      	adds	r3, r0, #1
 8010a96:	d102      	bne.n	8010a9e <_close_r+0x1a>
 8010a98:	682b      	ldr	r3, [r5, #0]
 8010a9a:	b103      	cbz	r3, 8010a9e <_close_r+0x1a>
 8010a9c:	6023      	str	r3, [r4, #0]
 8010a9e:	bd38      	pop	{r3, r4, r5, pc}
 8010aa0:	20000e94 	.word	0x20000e94

08010aa4 <_lseek_r>:
 8010aa4:	b538      	push	{r3, r4, r5, lr}
 8010aa6:	4d07      	ldr	r5, [pc, #28]	@ (8010ac4 <_lseek_r+0x20>)
 8010aa8:	4604      	mov	r4, r0
 8010aaa:	4608      	mov	r0, r1
 8010aac:	4611      	mov	r1, r2
 8010aae:	2200      	movs	r2, #0
 8010ab0:	602a      	str	r2, [r5, #0]
 8010ab2:	461a      	mov	r2, r3
 8010ab4:	f7f1 fa2d 	bl	8001f12 <_lseek>
 8010ab8:	1c43      	adds	r3, r0, #1
 8010aba:	d102      	bne.n	8010ac2 <_lseek_r+0x1e>
 8010abc:	682b      	ldr	r3, [r5, #0]
 8010abe:	b103      	cbz	r3, 8010ac2 <_lseek_r+0x1e>
 8010ac0:	6023      	str	r3, [r4, #0]
 8010ac2:	bd38      	pop	{r3, r4, r5, pc}
 8010ac4:	20000e94 	.word	0x20000e94

08010ac8 <_read_r>:
 8010ac8:	b538      	push	{r3, r4, r5, lr}
 8010aca:	4d07      	ldr	r5, [pc, #28]	@ (8010ae8 <_read_r+0x20>)
 8010acc:	4604      	mov	r4, r0
 8010ace:	4608      	mov	r0, r1
 8010ad0:	4611      	mov	r1, r2
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	602a      	str	r2, [r5, #0]
 8010ad6:	461a      	mov	r2, r3
 8010ad8:	f7f1 f9bb 	bl	8001e52 <_read>
 8010adc:	1c43      	adds	r3, r0, #1
 8010ade:	d102      	bne.n	8010ae6 <_read_r+0x1e>
 8010ae0:	682b      	ldr	r3, [r5, #0]
 8010ae2:	b103      	cbz	r3, 8010ae6 <_read_r+0x1e>
 8010ae4:	6023      	str	r3, [r4, #0]
 8010ae6:	bd38      	pop	{r3, r4, r5, pc}
 8010ae8:	20000e94 	.word	0x20000e94

08010aec <_write_r>:
 8010aec:	b538      	push	{r3, r4, r5, lr}
 8010aee:	4d07      	ldr	r5, [pc, #28]	@ (8010b0c <_write_r+0x20>)
 8010af0:	4604      	mov	r4, r0
 8010af2:	4608      	mov	r0, r1
 8010af4:	4611      	mov	r1, r2
 8010af6:	2200      	movs	r2, #0
 8010af8:	602a      	str	r2, [r5, #0]
 8010afa:	461a      	mov	r2, r3
 8010afc:	f7f1 f9c6 	bl	8001e8c <_write>
 8010b00:	1c43      	adds	r3, r0, #1
 8010b02:	d102      	bne.n	8010b0a <_write_r+0x1e>
 8010b04:	682b      	ldr	r3, [r5, #0]
 8010b06:	b103      	cbz	r3, 8010b0a <_write_r+0x1e>
 8010b08:	6023      	str	r3, [r4, #0]
 8010b0a:	bd38      	pop	{r3, r4, r5, pc}
 8010b0c:	20000e94 	.word	0x20000e94

08010b10 <__errno>:
 8010b10:	4b01      	ldr	r3, [pc, #4]	@ (8010b18 <__errno+0x8>)
 8010b12:	6818      	ldr	r0, [r3, #0]
 8010b14:	4770      	bx	lr
 8010b16:	bf00      	nop
 8010b18:	20000240 	.word	0x20000240

08010b1c <__libc_init_array>:
 8010b1c:	b570      	push	{r4, r5, r6, lr}
 8010b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8010b54 <__libc_init_array+0x38>)
 8010b20:	4c0d      	ldr	r4, [pc, #52]	@ (8010b58 <__libc_init_array+0x3c>)
 8010b22:	1b64      	subs	r4, r4, r5
 8010b24:	10a4      	asrs	r4, r4, #2
 8010b26:	2600      	movs	r6, #0
 8010b28:	42a6      	cmp	r6, r4
 8010b2a:	d109      	bne.n	8010b40 <__libc_init_array+0x24>
 8010b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8010b5c <__libc_init_array+0x40>)
 8010b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8010b60 <__libc_init_array+0x44>)
 8010b30:	f003 fc36 	bl	80143a0 <_init>
 8010b34:	1b64      	subs	r4, r4, r5
 8010b36:	10a4      	asrs	r4, r4, #2
 8010b38:	2600      	movs	r6, #0
 8010b3a:	42a6      	cmp	r6, r4
 8010b3c:	d105      	bne.n	8010b4a <__libc_init_array+0x2e>
 8010b3e:	bd70      	pop	{r4, r5, r6, pc}
 8010b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b44:	4798      	blx	r3
 8010b46:	3601      	adds	r6, #1
 8010b48:	e7ee      	b.n	8010b28 <__libc_init_array+0xc>
 8010b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b4e:	4798      	blx	r3
 8010b50:	3601      	adds	r6, #1
 8010b52:	e7f2      	b.n	8010b3a <__libc_init_array+0x1e>
 8010b54:	08014a18 	.word	0x08014a18
 8010b58:	08014a18 	.word	0x08014a18
 8010b5c:	08014a18 	.word	0x08014a18
 8010b60:	08014a1c 	.word	0x08014a1c

08010b64 <__retarget_lock_init_recursive>:
 8010b64:	4770      	bx	lr

08010b66 <__retarget_lock_acquire_recursive>:
 8010b66:	4770      	bx	lr

08010b68 <__retarget_lock_release_recursive>:
 8010b68:	4770      	bx	lr

08010b6a <memcpy>:
 8010b6a:	440a      	add	r2, r1
 8010b6c:	4291      	cmp	r1, r2
 8010b6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b72:	d100      	bne.n	8010b76 <memcpy+0xc>
 8010b74:	4770      	bx	lr
 8010b76:	b510      	push	{r4, lr}
 8010b78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b80:	4291      	cmp	r1, r2
 8010b82:	d1f9      	bne.n	8010b78 <memcpy+0xe>
 8010b84:	bd10      	pop	{r4, pc}
	...

08010b88 <nan>:
 8010b88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010b90 <nan+0x8>
 8010b8c:	4770      	bx	lr
 8010b8e:	bf00      	nop
 8010b90:	00000000 	.word	0x00000000
 8010b94:	7ff80000 	.word	0x7ff80000

08010b98 <nanf>:
 8010b98:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010ba0 <nanf+0x8>
 8010b9c:	4770      	bx	lr
 8010b9e:	bf00      	nop
 8010ba0:	7fc00000 	.word	0x7fc00000

08010ba4 <quorem>:
 8010ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ba8:	6903      	ldr	r3, [r0, #16]
 8010baa:	690c      	ldr	r4, [r1, #16]
 8010bac:	42a3      	cmp	r3, r4
 8010bae:	4607      	mov	r7, r0
 8010bb0:	db7e      	blt.n	8010cb0 <quorem+0x10c>
 8010bb2:	3c01      	subs	r4, #1
 8010bb4:	f101 0814 	add.w	r8, r1, #20
 8010bb8:	00a3      	lsls	r3, r4, #2
 8010bba:	f100 0514 	add.w	r5, r0, #20
 8010bbe:	9300      	str	r3, [sp, #0]
 8010bc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010bc4:	9301      	str	r3, [sp, #4]
 8010bc6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010bca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010bce:	3301      	adds	r3, #1
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010bd6:	fbb2 f6f3 	udiv	r6, r2, r3
 8010bda:	d32e      	bcc.n	8010c3a <quorem+0x96>
 8010bdc:	f04f 0a00 	mov.w	sl, #0
 8010be0:	46c4      	mov	ip, r8
 8010be2:	46ae      	mov	lr, r5
 8010be4:	46d3      	mov	fp, sl
 8010be6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010bea:	b298      	uxth	r0, r3
 8010bec:	fb06 a000 	mla	r0, r6, r0, sl
 8010bf0:	0c02      	lsrs	r2, r0, #16
 8010bf2:	0c1b      	lsrs	r3, r3, #16
 8010bf4:	fb06 2303 	mla	r3, r6, r3, r2
 8010bf8:	f8de 2000 	ldr.w	r2, [lr]
 8010bfc:	b280      	uxth	r0, r0
 8010bfe:	b292      	uxth	r2, r2
 8010c00:	1a12      	subs	r2, r2, r0
 8010c02:	445a      	add	r2, fp
 8010c04:	f8de 0000 	ldr.w	r0, [lr]
 8010c08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010c0c:	b29b      	uxth	r3, r3
 8010c0e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010c12:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010c16:	b292      	uxth	r2, r2
 8010c18:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010c1c:	45e1      	cmp	r9, ip
 8010c1e:	f84e 2b04 	str.w	r2, [lr], #4
 8010c22:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010c26:	d2de      	bcs.n	8010be6 <quorem+0x42>
 8010c28:	9b00      	ldr	r3, [sp, #0]
 8010c2a:	58eb      	ldr	r3, [r5, r3]
 8010c2c:	b92b      	cbnz	r3, 8010c3a <quorem+0x96>
 8010c2e:	9b01      	ldr	r3, [sp, #4]
 8010c30:	3b04      	subs	r3, #4
 8010c32:	429d      	cmp	r5, r3
 8010c34:	461a      	mov	r2, r3
 8010c36:	d32f      	bcc.n	8010c98 <quorem+0xf4>
 8010c38:	613c      	str	r4, [r7, #16]
 8010c3a:	4638      	mov	r0, r7
 8010c3c:	f001 fd10 	bl	8012660 <__mcmp>
 8010c40:	2800      	cmp	r0, #0
 8010c42:	db25      	blt.n	8010c90 <quorem+0xec>
 8010c44:	4629      	mov	r1, r5
 8010c46:	2000      	movs	r0, #0
 8010c48:	f858 2b04 	ldr.w	r2, [r8], #4
 8010c4c:	f8d1 c000 	ldr.w	ip, [r1]
 8010c50:	fa1f fe82 	uxth.w	lr, r2
 8010c54:	fa1f f38c 	uxth.w	r3, ip
 8010c58:	eba3 030e 	sub.w	r3, r3, lr
 8010c5c:	4403      	add	r3, r0
 8010c5e:	0c12      	lsrs	r2, r2, #16
 8010c60:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010c64:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010c68:	b29b      	uxth	r3, r3
 8010c6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c6e:	45c1      	cmp	r9, r8
 8010c70:	f841 3b04 	str.w	r3, [r1], #4
 8010c74:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010c78:	d2e6      	bcs.n	8010c48 <quorem+0xa4>
 8010c7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010c7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010c82:	b922      	cbnz	r2, 8010c8e <quorem+0xea>
 8010c84:	3b04      	subs	r3, #4
 8010c86:	429d      	cmp	r5, r3
 8010c88:	461a      	mov	r2, r3
 8010c8a:	d30b      	bcc.n	8010ca4 <quorem+0x100>
 8010c8c:	613c      	str	r4, [r7, #16]
 8010c8e:	3601      	adds	r6, #1
 8010c90:	4630      	mov	r0, r6
 8010c92:	b003      	add	sp, #12
 8010c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c98:	6812      	ldr	r2, [r2, #0]
 8010c9a:	3b04      	subs	r3, #4
 8010c9c:	2a00      	cmp	r2, #0
 8010c9e:	d1cb      	bne.n	8010c38 <quorem+0x94>
 8010ca0:	3c01      	subs	r4, #1
 8010ca2:	e7c6      	b.n	8010c32 <quorem+0x8e>
 8010ca4:	6812      	ldr	r2, [r2, #0]
 8010ca6:	3b04      	subs	r3, #4
 8010ca8:	2a00      	cmp	r2, #0
 8010caa:	d1ef      	bne.n	8010c8c <quorem+0xe8>
 8010cac:	3c01      	subs	r4, #1
 8010cae:	e7ea      	b.n	8010c86 <quorem+0xe2>
 8010cb0:	2000      	movs	r0, #0
 8010cb2:	e7ee      	b.n	8010c92 <quorem+0xee>
 8010cb4:	0000      	movs	r0, r0
	...

08010cb8 <_dtoa_r>:
 8010cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cbc:	69c7      	ldr	r7, [r0, #28]
 8010cbe:	b099      	sub	sp, #100	@ 0x64
 8010cc0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010cc4:	ec55 4b10 	vmov	r4, r5, d0
 8010cc8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010cca:	9109      	str	r1, [sp, #36]	@ 0x24
 8010ccc:	4683      	mov	fp, r0
 8010cce:	920e      	str	r2, [sp, #56]	@ 0x38
 8010cd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010cd2:	b97f      	cbnz	r7, 8010cf4 <_dtoa_r+0x3c>
 8010cd4:	2010      	movs	r0, #16
 8010cd6:	f001 f937 	bl	8011f48 <malloc>
 8010cda:	4602      	mov	r2, r0
 8010cdc:	f8cb 001c 	str.w	r0, [fp, #28]
 8010ce0:	b920      	cbnz	r0, 8010cec <_dtoa_r+0x34>
 8010ce2:	4ba7      	ldr	r3, [pc, #668]	@ (8010f80 <_dtoa_r+0x2c8>)
 8010ce4:	21ef      	movs	r1, #239	@ 0xef
 8010ce6:	48a7      	ldr	r0, [pc, #668]	@ (8010f84 <_dtoa_r+0x2cc>)
 8010ce8:	f002 f95e 	bl	8012fa8 <__assert_func>
 8010cec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010cf0:	6007      	str	r7, [r0, #0]
 8010cf2:	60c7      	str	r7, [r0, #12]
 8010cf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010cf8:	6819      	ldr	r1, [r3, #0]
 8010cfa:	b159      	cbz	r1, 8010d14 <_dtoa_r+0x5c>
 8010cfc:	685a      	ldr	r2, [r3, #4]
 8010cfe:	604a      	str	r2, [r1, #4]
 8010d00:	2301      	movs	r3, #1
 8010d02:	4093      	lsls	r3, r2
 8010d04:	608b      	str	r3, [r1, #8]
 8010d06:	4658      	mov	r0, fp
 8010d08:	f001 fa26 	bl	8012158 <_Bfree>
 8010d0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010d10:	2200      	movs	r2, #0
 8010d12:	601a      	str	r2, [r3, #0]
 8010d14:	1e2b      	subs	r3, r5, #0
 8010d16:	bfb9      	ittee	lt
 8010d18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010d1c:	9303      	strlt	r3, [sp, #12]
 8010d1e:	2300      	movge	r3, #0
 8010d20:	6033      	strge	r3, [r6, #0]
 8010d22:	9f03      	ldr	r7, [sp, #12]
 8010d24:	4b98      	ldr	r3, [pc, #608]	@ (8010f88 <_dtoa_r+0x2d0>)
 8010d26:	bfbc      	itt	lt
 8010d28:	2201      	movlt	r2, #1
 8010d2a:	6032      	strlt	r2, [r6, #0]
 8010d2c:	43bb      	bics	r3, r7
 8010d2e:	d112      	bne.n	8010d56 <_dtoa_r+0x9e>
 8010d30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010d32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010d36:	6013      	str	r3, [r2, #0]
 8010d38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010d3c:	4323      	orrs	r3, r4
 8010d3e:	f000 854d 	beq.w	80117dc <_dtoa_r+0xb24>
 8010d42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010d44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010f9c <_dtoa_r+0x2e4>
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	f000 854f 	beq.w	80117ec <_dtoa_r+0xb34>
 8010d4e:	f10a 0303 	add.w	r3, sl, #3
 8010d52:	f000 bd49 	b.w	80117e8 <_dtoa_r+0xb30>
 8010d56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	ec51 0b17 	vmov	r0, r1, d7
 8010d60:	2300      	movs	r3, #0
 8010d62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010d66:	f7ef fed7 	bl	8000b18 <__aeabi_dcmpeq>
 8010d6a:	4680      	mov	r8, r0
 8010d6c:	b158      	cbz	r0, 8010d86 <_dtoa_r+0xce>
 8010d6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010d70:	2301      	movs	r3, #1
 8010d72:	6013      	str	r3, [r2, #0]
 8010d74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010d76:	b113      	cbz	r3, 8010d7e <_dtoa_r+0xc6>
 8010d78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010d7a:	4b84      	ldr	r3, [pc, #528]	@ (8010f8c <_dtoa_r+0x2d4>)
 8010d7c:	6013      	str	r3, [r2, #0]
 8010d7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010fa0 <_dtoa_r+0x2e8>
 8010d82:	f000 bd33 	b.w	80117ec <_dtoa_r+0xb34>
 8010d86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010d8a:	aa16      	add	r2, sp, #88	@ 0x58
 8010d8c:	a917      	add	r1, sp, #92	@ 0x5c
 8010d8e:	4658      	mov	r0, fp
 8010d90:	f001 fd86 	bl	80128a0 <__d2b>
 8010d94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010d98:	4681      	mov	r9, r0
 8010d9a:	2e00      	cmp	r6, #0
 8010d9c:	d077      	beq.n	8010e8e <_dtoa_r+0x1d6>
 8010d9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010da0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010da8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010dac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010db0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010db4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010db8:	4619      	mov	r1, r3
 8010dba:	2200      	movs	r2, #0
 8010dbc:	4b74      	ldr	r3, [pc, #464]	@ (8010f90 <_dtoa_r+0x2d8>)
 8010dbe:	f7ef fa8b 	bl	80002d8 <__aeabi_dsub>
 8010dc2:	a369      	add	r3, pc, #420	@ (adr r3, 8010f68 <_dtoa_r+0x2b0>)
 8010dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc8:	f7ef fc3e 	bl	8000648 <__aeabi_dmul>
 8010dcc:	a368      	add	r3, pc, #416	@ (adr r3, 8010f70 <_dtoa_r+0x2b8>)
 8010dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd2:	f7ef fa83 	bl	80002dc <__adddf3>
 8010dd6:	4604      	mov	r4, r0
 8010dd8:	4630      	mov	r0, r6
 8010dda:	460d      	mov	r5, r1
 8010ddc:	f7ef fbca 	bl	8000574 <__aeabi_i2d>
 8010de0:	a365      	add	r3, pc, #404	@ (adr r3, 8010f78 <_dtoa_r+0x2c0>)
 8010de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de6:	f7ef fc2f 	bl	8000648 <__aeabi_dmul>
 8010dea:	4602      	mov	r2, r0
 8010dec:	460b      	mov	r3, r1
 8010dee:	4620      	mov	r0, r4
 8010df0:	4629      	mov	r1, r5
 8010df2:	f7ef fa73 	bl	80002dc <__adddf3>
 8010df6:	4604      	mov	r4, r0
 8010df8:	460d      	mov	r5, r1
 8010dfa:	f7ef fed5 	bl	8000ba8 <__aeabi_d2iz>
 8010dfe:	2200      	movs	r2, #0
 8010e00:	4607      	mov	r7, r0
 8010e02:	2300      	movs	r3, #0
 8010e04:	4620      	mov	r0, r4
 8010e06:	4629      	mov	r1, r5
 8010e08:	f7ef fe90 	bl	8000b2c <__aeabi_dcmplt>
 8010e0c:	b140      	cbz	r0, 8010e20 <_dtoa_r+0x168>
 8010e0e:	4638      	mov	r0, r7
 8010e10:	f7ef fbb0 	bl	8000574 <__aeabi_i2d>
 8010e14:	4622      	mov	r2, r4
 8010e16:	462b      	mov	r3, r5
 8010e18:	f7ef fe7e 	bl	8000b18 <__aeabi_dcmpeq>
 8010e1c:	b900      	cbnz	r0, 8010e20 <_dtoa_r+0x168>
 8010e1e:	3f01      	subs	r7, #1
 8010e20:	2f16      	cmp	r7, #22
 8010e22:	d851      	bhi.n	8010ec8 <_dtoa_r+0x210>
 8010e24:	4b5b      	ldr	r3, [pc, #364]	@ (8010f94 <_dtoa_r+0x2dc>)
 8010e26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e32:	f7ef fe7b 	bl	8000b2c <__aeabi_dcmplt>
 8010e36:	2800      	cmp	r0, #0
 8010e38:	d048      	beq.n	8010ecc <_dtoa_r+0x214>
 8010e3a:	3f01      	subs	r7, #1
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010e40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010e42:	1b9b      	subs	r3, r3, r6
 8010e44:	1e5a      	subs	r2, r3, #1
 8010e46:	bf44      	itt	mi
 8010e48:	f1c3 0801 	rsbmi	r8, r3, #1
 8010e4c:	2300      	movmi	r3, #0
 8010e4e:	9208      	str	r2, [sp, #32]
 8010e50:	bf54      	ite	pl
 8010e52:	f04f 0800 	movpl.w	r8, #0
 8010e56:	9308      	strmi	r3, [sp, #32]
 8010e58:	2f00      	cmp	r7, #0
 8010e5a:	db39      	blt.n	8010ed0 <_dtoa_r+0x218>
 8010e5c:	9b08      	ldr	r3, [sp, #32]
 8010e5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010e60:	443b      	add	r3, r7
 8010e62:	9308      	str	r3, [sp, #32]
 8010e64:	2300      	movs	r3, #0
 8010e66:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e6a:	2b09      	cmp	r3, #9
 8010e6c:	d864      	bhi.n	8010f38 <_dtoa_r+0x280>
 8010e6e:	2b05      	cmp	r3, #5
 8010e70:	bfc4      	itt	gt
 8010e72:	3b04      	subgt	r3, #4
 8010e74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e78:	f1a3 0302 	sub.w	r3, r3, #2
 8010e7c:	bfcc      	ite	gt
 8010e7e:	2400      	movgt	r4, #0
 8010e80:	2401      	movle	r4, #1
 8010e82:	2b03      	cmp	r3, #3
 8010e84:	d863      	bhi.n	8010f4e <_dtoa_r+0x296>
 8010e86:	e8df f003 	tbb	[pc, r3]
 8010e8a:	372a      	.short	0x372a
 8010e8c:	5535      	.short	0x5535
 8010e8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010e92:	441e      	add	r6, r3
 8010e94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010e98:	2b20      	cmp	r3, #32
 8010e9a:	bfc1      	itttt	gt
 8010e9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010ea0:	409f      	lslgt	r7, r3
 8010ea2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010ea6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010eaa:	bfd6      	itet	le
 8010eac:	f1c3 0320 	rsble	r3, r3, #32
 8010eb0:	ea47 0003 	orrgt.w	r0, r7, r3
 8010eb4:	fa04 f003 	lslle.w	r0, r4, r3
 8010eb8:	f7ef fb4c 	bl	8000554 <__aeabi_ui2d>
 8010ebc:	2201      	movs	r2, #1
 8010ebe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010ec2:	3e01      	subs	r6, #1
 8010ec4:	9214      	str	r2, [sp, #80]	@ 0x50
 8010ec6:	e777      	b.n	8010db8 <_dtoa_r+0x100>
 8010ec8:	2301      	movs	r3, #1
 8010eca:	e7b8      	b.n	8010e3e <_dtoa_r+0x186>
 8010ecc:	9012      	str	r0, [sp, #72]	@ 0x48
 8010ece:	e7b7      	b.n	8010e40 <_dtoa_r+0x188>
 8010ed0:	427b      	negs	r3, r7
 8010ed2:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	eba8 0807 	sub.w	r8, r8, r7
 8010eda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010edc:	e7c4      	b.n	8010e68 <_dtoa_r+0x1b0>
 8010ede:	2300      	movs	r3, #0
 8010ee0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ee2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	dc35      	bgt.n	8010f54 <_dtoa_r+0x29c>
 8010ee8:	2301      	movs	r3, #1
 8010eea:	9300      	str	r3, [sp, #0]
 8010eec:	9307      	str	r3, [sp, #28]
 8010eee:	461a      	mov	r2, r3
 8010ef0:	920e      	str	r2, [sp, #56]	@ 0x38
 8010ef2:	e00b      	b.n	8010f0c <_dtoa_r+0x254>
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	e7f3      	b.n	8010ee0 <_dtoa_r+0x228>
 8010ef8:	2300      	movs	r3, #0
 8010efa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010efc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010efe:	18fb      	adds	r3, r7, r3
 8010f00:	9300      	str	r3, [sp, #0]
 8010f02:	3301      	adds	r3, #1
 8010f04:	2b01      	cmp	r3, #1
 8010f06:	9307      	str	r3, [sp, #28]
 8010f08:	bfb8      	it	lt
 8010f0a:	2301      	movlt	r3, #1
 8010f0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010f10:	2100      	movs	r1, #0
 8010f12:	2204      	movs	r2, #4
 8010f14:	f102 0514 	add.w	r5, r2, #20
 8010f18:	429d      	cmp	r5, r3
 8010f1a:	d91f      	bls.n	8010f5c <_dtoa_r+0x2a4>
 8010f1c:	6041      	str	r1, [r0, #4]
 8010f1e:	4658      	mov	r0, fp
 8010f20:	f001 f8da 	bl	80120d8 <_Balloc>
 8010f24:	4682      	mov	sl, r0
 8010f26:	2800      	cmp	r0, #0
 8010f28:	d13c      	bne.n	8010fa4 <_dtoa_r+0x2ec>
 8010f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8010f98 <_dtoa_r+0x2e0>)
 8010f2c:	4602      	mov	r2, r0
 8010f2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010f32:	e6d8      	b.n	8010ce6 <_dtoa_r+0x2e>
 8010f34:	2301      	movs	r3, #1
 8010f36:	e7e0      	b.n	8010efa <_dtoa_r+0x242>
 8010f38:	2401      	movs	r4, #1
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010f40:	f04f 33ff 	mov.w	r3, #4294967295
 8010f44:	9300      	str	r3, [sp, #0]
 8010f46:	9307      	str	r3, [sp, #28]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	2312      	movs	r3, #18
 8010f4c:	e7d0      	b.n	8010ef0 <_dtoa_r+0x238>
 8010f4e:	2301      	movs	r3, #1
 8010f50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f52:	e7f5      	b.n	8010f40 <_dtoa_r+0x288>
 8010f54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f56:	9300      	str	r3, [sp, #0]
 8010f58:	9307      	str	r3, [sp, #28]
 8010f5a:	e7d7      	b.n	8010f0c <_dtoa_r+0x254>
 8010f5c:	3101      	adds	r1, #1
 8010f5e:	0052      	lsls	r2, r2, #1
 8010f60:	e7d8      	b.n	8010f14 <_dtoa_r+0x25c>
 8010f62:	bf00      	nop
 8010f64:	f3af 8000 	nop.w
 8010f68:	636f4361 	.word	0x636f4361
 8010f6c:	3fd287a7 	.word	0x3fd287a7
 8010f70:	8b60c8b3 	.word	0x8b60c8b3
 8010f74:	3fc68a28 	.word	0x3fc68a28
 8010f78:	509f79fb 	.word	0x509f79fb
 8010f7c:	3fd34413 	.word	0x3fd34413
 8010f80:	08014606 	.word	0x08014606
 8010f84:	0801461d 	.word	0x0801461d
 8010f88:	7ff00000 	.word	0x7ff00000
 8010f8c:	080145c9 	.word	0x080145c9
 8010f90:	3ff80000 	.word	0x3ff80000
 8010f94:	08014778 	.word	0x08014778
 8010f98:	08014675 	.word	0x08014675
 8010f9c:	08014602 	.word	0x08014602
 8010fa0:	080145c8 	.word	0x080145c8
 8010fa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010fa8:	6018      	str	r0, [r3, #0]
 8010faa:	9b07      	ldr	r3, [sp, #28]
 8010fac:	2b0e      	cmp	r3, #14
 8010fae:	f200 80a4 	bhi.w	80110fa <_dtoa_r+0x442>
 8010fb2:	2c00      	cmp	r4, #0
 8010fb4:	f000 80a1 	beq.w	80110fa <_dtoa_r+0x442>
 8010fb8:	2f00      	cmp	r7, #0
 8010fba:	dd33      	ble.n	8011024 <_dtoa_r+0x36c>
 8010fbc:	4bad      	ldr	r3, [pc, #692]	@ (8011274 <_dtoa_r+0x5bc>)
 8010fbe:	f007 020f 	and.w	r2, r7, #15
 8010fc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010fc6:	ed93 7b00 	vldr	d7, [r3]
 8010fca:	05f8      	lsls	r0, r7, #23
 8010fcc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010fd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010fd4:	d516      	bpl.n	8011004 <_dtoa_r+0x34c>
 8010fd6:	4ba8      	ldr	r3, [pc, #672]	@ (8011278 <_dtoa_r+0x5c0>)
 8010fd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010fdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010fe0:	f7ef fc5c 	bl	800089c <__aeabi_ddiv>
 8010fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010fe8:	f004 040f 	and.w	r4, r4, #15
 8010fec:	2603      	movs	r6, #3
 8010fee:	4da2      	ldr	r5, [pc, #648]	@ (8011278 <_dtoa_r+0x5c0>)
 8010ff0:	b954      	cbnz	r4, 8011008 <_dtoa_r+0x350>
 8010ff2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ffa:	f7ef fc4f 	bl	800089c <__aeabi_ddiv>
 8010ffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011002:	e028      	b.n	8011056 <_dtoa_r+0x39e>
 8011004:	2602      	movs	r6, #2
 8011006:	e7f2      	b.n	8010fee <_dtoa_r+0x336>
 8011008:	07e1      	lsls	r1, r4, #31
 801100a:	d508      	bpl.n	801101e <_dtoa_r+0x366>
 801100c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011010:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011014:	f7ef fb18 	bl	8000648 <__aeabi_dmul>
 8011018:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801101c:	3601      	adds	r6, #1
 801101e:	1064      	asrs	r4, r4, #1
 8011020:	3508      	adds	r5, #8
 8011022:	e7e5      	b.n	8010ff0 <_dtoa_r+0x338>
 8011024:	f000 80d2 	beq.w	80111cc <_dtoa_r+0x514>
 8011028:	427c      	negs	r4, r7
 801102a:	4b92      	ldr	r3, [pc, #584]	@ (8011274 <_dtoa_r+0x5bc>)
 801102c:	4d92      	ldr	r5, [pc, #584]	@ (8011278 <_dtoa_r+0x5c0>)
 801102e:	f004 020f 	and.w	r2, r4, #15
 8011032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801103a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801103e:	f7ef fb03 	bl	8000648 <__aeabi_dmul>
 8011042:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011046:	1124      	asrs	r4, r4, #4
 8011048:	2300      	movs	r3, #0
 801104a:	2602      	movs	r6, #2
 801104c:	2c00      	cmp	r4, #0
 801104e:	f040 80b2 	bne.w	80111b6 <_dtoa_r+0x4fe>
 8011052:	2b00      	cmp	r3, #0
 8011054:	d1d3      	bne.n	8010ffe <_dtoa_r+0x346>
 8011056:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011058:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801105c:	2b00      	cmp	r3, #0
 801105e:	f000 80b7 	beq.w	80111d0 <_dtoa_r+0x518>
 8011062:	4b86      	ldr	r3, [pc, #536]	@ (801127c <_dtoa_r+0x5c4>)
 8011064:	2200      	movs	r2, #0
 8011066:	4620      	mov	r0, r4
 8011068:	4629      	mov	r1, r5
 801106a:	f7ef fd5f 	bl	8000b2c <__aeabi_dcmplt>
 801106e:	2800      	cmp	r0, #0
 8011070:	f000 80ae 	beq.w	80111d0 <_dtoa_r+0x518>
 8011074:	9b07      	ldr	r3, [sp, #28]
 8011076:	2b00      	cmp	r3, #0
 8011078:	f000 80aa 	beq.w	80111d0 <_dtoa_r+0x518>
 801107c:	9b00      	ldr	r3, [sp, #0]
 801107e:	2b00      	cmp	r3, #0
 8011080:	dd37      	ble.n	80110f2 <_dtoa_r+0x43a>
 8011082:	1e7b      	subs	r3, r7, #1
 8011084:	9304      	str	r3, [sp, #16]
 8011086:	4620      	mov	r0, r4
 8011088:	4b7d      	ldr	r3, [pc, #500]	@ (8011280 <_dtoa_r+0x5c8>)
 801108a:	2200      	movs	r2, #0
 801108c:	4629      	mov	r1, r5
 801108e:	f7ef fadb 	bl	8000648 <__aeabi_dmul>
 8011092:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011096:	9c00      	ldr	r4, [sp, #0]
 8011098:	3601      	adds	r6, #1
 801109a:	4630      	mov	r0, r6
 801109c:	f7ef fa6a 	bl	8000574 <__aeabi_i2d>
 80110a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80110a4:	f7ef fad0 	bl	8000648 <__aeabi_dmul>
 80110a8:	4b76      	ldr	r3, [pc, #472]	@ (8011284 <_dtoa_r+0x5cc>)
 80110aa:	2200      	movs	r2, #0
 80110ac:	f7ef f916 	bl	80002dc <__adddf3>
 80110b0:	4605      	mov	r5, r0
 80110b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80110b6:	2c00      	cmp	r4, #0
 80110b8:	f040 808d 	bne.w	80111d6 <_dtoa_r+0x51e>
 80110bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110c0:	4b71      	ldr	r3, [pc, #452]	@ (8011288 <_dtoa_r+0x5d0>)
 80110c2:	2200      	movs	r2, #0
 80110c4:	f7ef f908 	bl	80002d8 <__aeabi_dsub>
 80110c8:	4602      	mov	r2, r0
 80110ca:	460b      	mov	r3, r1
 80110cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80110d0:	462a      	mov	r2, r5
 80110d2:	4633      	mov	r3, r6
 80110d4:	f7ef fd48 	bl	8000b68 <__aeabi_dcmpgt>
 80110d8:	2800      	cmp	r0, #0
 80110da:	f040 828b 	bne.w	80115f4 <_dtoa_r+0x93c>
 80110de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110e2:	462a      	mov	r2, r5
 80110e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80110e8:	f7ef fd20 	bl	8000b2c <__aeabi_dcmplt>
 80110ec:	2800      	cmp	r0, #0
 80110ee:	f040 8128 	bne.w	8011342 <_dtoa_r+0x68a>
 80110f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80110f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80110fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	f2c0 815a 	blt.w	80113b6 <_dtoa_r+0x6fe>
 8011102:	2f0e      	cmp	r7, #14
 8011104:	f300 8157 	bgt.w	80113b6 <_dtoa_r+0x6fe>
 8011108:	4b5a      	ldr	r3, [pc, #360]	@ (8011274 <_dtoa_r+0x5bc>)
 801110a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801110e:	ed93 7b00 	vldr	d7, [r3]
 8011112:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011114:	2b00      	cmp	r3, #0
 8011116:	ed8d 7b00 	vstr	d7, [sp]
 801111a:	da03      	bge.n	8011124 <_dtoa_r+0x46c>
 801111c:	9b07      	ldr	r3, [sp, #28]
 801111e:	2b00      	cmp	r3, #0
 8011120:	f340 8101 	ble.w	8011326 <_dtoa_r+0x66e>
 8011124:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011128:	4656      	mov	r6, sl
 801112a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801112e:	4620      	mov	r0, r4
 8011130:	4629      	mov	r1, r5
 8011132:	f7ef fbb3 	bl	800089c <__aeabi_ddiv>
 8011136:	f7ef fd37 	bl	8000ba8 <__aeabi_d2iz>
 801113a:	4680      	mov	r8, r0
 801113c:	f7ef fa1a 	bl	8000574 <__aeabi_i2d>
 8011140:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011144:	f7ef fa80 	bl	8000648 <__aeabi_dmul>
 8011148:	4602      	mov	r2, r0
 801114a:	460b      	mov	r3, r1
 801114c:	4620      	mov	r0, r4
 801114e:	4629      	mov	r1, r5
 8011150:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011154:	f7ef f8c0 	bl	80002d8 <__aeabi_dsub>
 8011158:	f806 4b01 	strb.w	r4, [r6], #1
 801115c:	9d07      	ldr	r5, [sp, #28]
 801115e:	eba6 040a 	sub.w	r4, r6, sl
 8011162:	42a5      	cmp	r5, r4
 8011164:	4602      	mov	r2, r0
 8011166:	460b      	mov	r3, r1
 8011168:	f040 8117 	bne.w	801139a <_dtoa_r+0x6e2>
 801116c:	f7ef f8b6 	bl	80002dc <__adddf3>
 8011170:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011174:	4604      	mov	r4, r0
 8011176:	460d      	mov	r5, r1
 8011178:	f7ef fcf6 	bl	8000b68 <__aeabi_dcmpgt>
 801117c:	2800      	cmp	r0, #0
 801117e:	f040 80f9 	bne.w	8011374 <_dtoa_r+0x6bc>
 8011182:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011186:	4620      	mov	r0, r4
 8011188:	4629      	mov	r1, r5
 801118a:	f7ef fcc5 	bl	8000b18 <__aeabi_dcmpeq>
 801118e:	b118      	cbz	r0, 8011198 <_dtoa_r+0x4e0>
 8011190:	f018 0f01 	tst.w	r8, #1
 8011194:	f040 80ee 	bne.w	8011374 <_dtoa_r+0x6bc>
 8011198:	4649      	mov	r1, r9
 801119a:	4658      	mov	r0, fp
 801119c:	f000 ffdc 	bl	8012158 <_Bfree>
 80111a0:	2300      	movs	r3, #0
 80111a2:	7033      	strb	r3, [r6, #0]
 80111a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80111a6:	3701      	adds	r7, #1
 80111a8:	601f      	str	r7, [r3, #0]
 80111aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	f000 831d 	beq.w	80117ec <_dtoa_r+0xb34>
 80111b2:	601e      	str	r6, [r3, #0]
 80111b4:	e31a      	b.n	80117ec <_dtoa_r+0xb34>
 80111b6:	07e2      	lsls	r2, r4, #31
 80111b8:	d505      	bpl.n	80111c6 <_dtoa_r+0x50e>
 80111ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80111be:	f7ef fa43 	bl	8000648 <__aeabi_dmul>
 80111c2:	3601      	adds	r6, #1
 80111c4:	2301      	movs	r3, #1
 80111c6:	1064      	asrs	r4, r4, #1
 80111c8:	3508      	adds	r5, #8
 80111ca:	e73f      	b.n	801104c <_dtoa_r+0x394>
 80111cc:	2602      	movs	r6, #2
 80111ce:	e742      	b.n	8011056 <_dtoa_r+0x39e>
 80111d0:	9c07      	ldr	r4, [sp, #28]
 80111d2:	9704      	str	r7, [sp, #16]
 80111d4:	e761      	b.n	801109a <_dtoa_r+0x3e2>
 80111d6:	4b27      	ldr	r3, [pc, #156]	@ (8011274 <_dtoa_r+0x5bc>)
 80111d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80111da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80111de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80111e2:	4454      	add	r4, sl
 80111e4:	2900      	cmp	r1, #0
 80111e6:	d053      	beq.n	8011290 <_dtoa_r+0x5d8>
 80111e8:	4928      	ldr	r1, [pc, #160]	@ (801128c <_dtoa_r+0x5d4>)
 80111ea:	2000      	movs	r0, #0
 80111ec:	f7ef fb56 	bl	800089c <__aeabi_ddiv>
 80111f0:	4633      	mov	r3, r6
 80111f2:	462a      	mov	r2, r5
 80111f4:	f7ef f870 	bl	80002d8 <__aeabi_dsub>
 80111f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80111fc:	4656      	mov	r6, sl
 80111fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011202:	f7ef fcd1 	bl	8000ba8 <__aeabi_d2iz>
 8011206:	4605      	mov	r5, r0
 8011208:	f7ef f9b4 	bl	8000574 <__aeabi_i2d>
 801120c:	4602      	mov	r2, r0
 801120e:	460b      	mov	r3, r1
 8011210:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011214:	f7ef f860 	bl	80002d8 <__aeabi_dsub>
 8011218:	3530      	adds	r5, #48	@ 0x30
 801121a:	4602      	mov	r2, r0
 801121c:	460b      	mov	r3, r1
 801121e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011222:	f806 5b01 	strb.w	r5, [r6], #1
 8011226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801122a:	f7ef fc7f 	bl	8000b2c <__aeabi_dcmplt>
 801122e:	2800      	cmp	r0, #0
 8011230:	d171      	bne.n	8011316 <_dtoa_r+0x65e>
 8011232:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011236:	4911      	ldr	r1, [pc, #68]	@ (801127c <_dtoa_r+0x5c4>)
 8011238:	2000      	movs	r0, #0
 801123a:	f7ef f84d 	bl	80002d8 <__aeabi_dsub>
 801123e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011242:	f7ef fc73 	bl	8000b2c <__aeabi_dcmplt>
 8011246:	2800      	cmp	r0, #0
 8011248:	f040 8095 	bne.w	8011376 <_dtoa_r+0x6be>
 801124c:	42a6      	cmp	r6, r4
 801124e:	f43f af50 	beq.w	80110f2 <_dtoa_r+0x43a>
 8011252:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011256:	4b0a      	ldr	r3, [pc, #40]	@ (8011280 <_dtoa_r+0x5c8>)
 8011258:	2200      	movs	r2, #0
 801125a:	f7ef f9f5 	bl	8000648 <__aeabi_dmul>
 801125e:	4b08      	ldr	r3, [pc, #32]	@ (8011280 <_dtoa_r+0x5c8>)
 8011260:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011264:	2200      	movs	r2, #0
 8011266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801126a:	f7ef f9ed 	bl	8000648 <__aeabi_dmul>
 801126e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011272:	e7c4      	b.n	80111fe <_dtoa_r+0x546>
 8011274:	08014778 	.word	0x08014778
 8011278:	08014750 	.word	0x08014750
 801127c:	3ff00000 	.word	0x3ff00000
 8011280:	40240000 	.word	0x40240000
 8011284:	401c0000 	.word	0x401c0000
 8011288:	40140000 	.word	0x40140000
 801128c:	3fe00000 	.word	0x3fe00000
 8011290:	4631      	mov	r1, r6
 8011292:	4628      	mov	r0, r5
 8011294:	f7ef f9d8 	bl	8000648 <__aeabi_dmul>
 8011298:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801129c:	9415      	str	r4, [sp, #84]	@ 0x54
 801129e:	4656      	mov	r6, sl
 80112a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112a4:	f7ef fc80 	bl	8000ba8 <__aeabi_d2iz>
 80112a8:	4605      	mov	r5, r0
 80112aa:	f7ef f963 	bl	8000574 <__aeabi_i2d>
 80112ae:	4602      	mov	r2, r0
 80112b0:	460b      	mov	r3, r1
 80112b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112b6:	f7ef f80f 	bl	80002d8 <__aeabi_dsub>
 80112ba:	3530      	adds	r5, #48	@ 0x30
 80112bc:	f806 5b01 	strb.w	r5, [r6], #1
 80112c0:	4602      	mov	r2, r0
 80112c2:	460b      	mov	r3, r1
 80112c4:	42a6      	cmp	r6, r4
 80112c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80112ca:	f04f 0200 	mov.w	r2, #0
 80112ce:	d124      	bne.n	801131a <_dtoa_r+0x662>
 80112d0:	4bac      	ldr	r3, [pc, #688]	@ (8011584 <_dtoa_r+0x8cc>)
 80112d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80112d6:	f7ef f801 	bl	80002dc <__adddf3>
 80112da:	4602      	mov	r2, r0
 80112dc:	460b      	mov	r3, r1
 80112de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112e2:	f7ef fc41 	bl	8000b68 <__aeabi_dcmpgt>
 80112e6:	2800      	cmp	r0, #0
 80112e8:	d145      	bne.n	8011376 <_dtoa_r+0x6be>
 80112ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80112ee:	49a5      	ldr	r1, [pc, #660]	@ (8011584 <_dtoa_r+0x8cc>)
 80112f0:	2000      	movs	r0, #0
 80112f2:	f7ee fff1 	bl	80002d8 <__aeabi_dsub>
 80112f6:	4602      	mov	r2, r0
 80112f8:	460b      	mov	r3, r1
 80112fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112fe:	f7ef fc15 	bl	8000b2c <__aeabi_dcmplt>
 8011302:	2800      	cmp	r0, #0
 8011304:	f43f aef5 	beq.w	80110f2 <_dtoa_r+0x43a>
 8011308:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801130a:	1e73      	subs	r3, r6, #1
 801130c:	9315      	str	r3, [sp, #84]	@ 0x54
 801130e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011312:	2b30      	cmp	r3, #48	@ 0x30
 8011314:	d0f8      	beq.n	8011308 <_dtoa_r+0x650>
 8011316:	9f04      	ldr	r7, [sp, #16]
 8011318:	e73e      	b.n	8011198 <_dtoa_r+0x4e0>
 801131a:	4b9b      	ldr	r3, [pc, #620]	@ (8011588 <_dtoa_r+0x8d0>)
 801131c:	f7ef f994 	bl	8000648 <__aeabi_dmul>
 8011320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011324:	e7bc      	b.n	80112a0 <_dtoa_r+0x5e8>
 8011326:	d10c      	bne.n	8011342 <_dtoa_r+0x68a>
 8011328:	4b98      	ldr	r3, [pc, #608]	@ (801158c <_dtoa_r+0x8d4>)
 801132a:	2200      	movs	r2, #0
 801132c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011330:	f7ef f98a 	bl	8000648 <__aeabi_dmul>
 8011334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011338:	f7ef fc0c 	bl	8000b54 <__aeabi_dcmpge>
 801133c:	2800      	cmp	r0, #0
 801133e:	f000 8157 	beq.w	80115f0 <_dtoa_r+0x938>
 8011342:	2400      	movs	r4, #0
 8011344:	4625      	mov	r5, r4
 8011346:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011348:	43db      	mvns	r3, r3
 801134a:	9304      	str	r3, [sp, #16]
 801134c:	4656      	mov	r6, sl
 801134e:	2700      	movs	r7, #0
 8011350:	4621      	mov	r1, r4
 8011352:	4658      	mov	r0, fp
 8011354:	f000 ff00 	bl	8012158 <_Bfree>
 8011358:	2d00      	cmp	r5, #0
 801135a:	d0dc      	beq.n	8011316 <_dtoa_r+0x65e>
 801135c:	b12f      	cbz	r7, 801136a <_dtoa_r+0x6b2>
 801135e:	42af      	cmp	r7, r5
 8011360:	d003      	beq.n	801136a <_dtoa_r+0x6b2>
 8011362:	4639      	mov	r1, r7
 8011364:	4658      	mov	r0, fp
 8011366:	f000 fef7 	bl	8012158 <_Bfree>
 801136a:	4629      	mov	r1, r5
 801136c:	4658      	mov	r0, fp
 801136e:	f000 fef3 	bl	8012158 <_Bfree>
 8011372:	e7d0      	b.n	8011316 <_dtoa_r+0x65e>
 8011374:	9704      	str	r7, [sp, #16]
 8011376:	4633      	mov	r3, r6
 8011378:	461e      	mov	r6, r3
 801137a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801137e:	2a39      	cmp	r2, #57	@ 0x39
 8011380:	d107      	bne.n	8011392 <_dtoa_r+0x6da>
 8011382:	459a      	cmp	sl, r3
 8011384:	d1f8      	bne.n	8011378 <_dtoa_r+0x6c0>
 8011386:	9a04      	ldr	r2, [sp, #16]
 8011388:	3201      	adds	r2, #1
 801138a:	9204      	str	r2, [sp, #16]
 801138c:	2230      	movs	r2, #48	@ 0x30
 801138e:	f88a 2000 	strb.w	r2, [sl]
 8011392:	781a      	ldrb	r2, [r3, #0]
 8011394:	3201      	adds	r2, #1
 8011396:	701a      	strb	r2, [r3, #0]
 8011398:	e7bd      	b.n	8011316 <_dtoa_r+0x65e>
 801139a:	4b7b      	ldr	r3, [pc, #492]	@ (8011588 <_dtoa_r+0x8d0>)
 801139c:	2200      	movs	r2, #0
 801139e:	f7ef f953 	bl	8000648 <__aeabi_dmul>
 80113a2:	2200      	movs	r2, #0
 80113a4:	2300      	movs	r3, #0
 80113a6:	4604      	mov	r4, r0
 80113a8:	460d      	mov	r5, r1
 80113aa:	f7ef fbb5 	bl	8000b18 <__aeabi_dcmpeq>
 80113ae:	2800      	cmp	r0, #0
 80113b0:	f43f aebb 	beq.w	801112a <_dtoa_r+0x472>
 80113b4:	e6f0      	b.n	8011198 <_dtoa_r+0x4e0>
 80113b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80113b8:	2a00      	cmp	r2, #0
 80113ba:	f000 80db 	beq.w	8011574 <_dtoa_r+0x8bc>
 80113be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80113c0:	2a01      	cmp	r2, #1
 80113c2:	f300 80bf 	bgt.w	8011544 <_dtoa_r+0x88c>
 80113c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80113c8:	2a00      	cmp	r2, #0
 80113ca:	f000 80b7 	beq.w	801153c <_dtoa_r+0x884>
 80113ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80113d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80113d4:	4646      	mov	r6, r8
 80113d6:	9a08      	ldr	r2, [sp, #32]
 80113d8:	2101      	movs	r1, #1
 80113da:	441a      	add	r2, r3
 80113dc:	4658      	mov	r0, fp
 80113de:	4498      	add	r8, r3
 80113e0:	9208      	str	r2, [sp, #32]
 80113e2:	f000 ffb7 	bl	8012354 <__i2b>
 80113e6:	4605      	mov	r5, r0
 80113e8:	b15e      	cbz	r6, 8011402 <_dtoa_r+0x74a>
 80113ea:	9b08      	ldr	r3, [sp, #32]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	dd08      	ble.n	8011402 <_dtoa_r+0x74a>
 80113f0:	42b3      	cmp	r3, r6
 80113f2:	9a08      	ldr	r2, [sp, #32]
 80113f4:	bfa8      	it	ge
 80113f6:	4633      	movge	r3, r6
 80113f8:	eba8 0803 	sub.w	r8, r8, r3
 80113fc:	1af6      	subs	r6, r6, r3
 80113fe:	1ad3      	subs	r3, r2, r3
 8011400:	9308      	str	r3, [sp, #32]
 8011402:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011404:	b1f3      	cbz	r3, 8011444 <_dtoa_r+0x78c>
 8011406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011408:	2b00      	cmp	r3, #0
 801140a:	f000 80b7 	beq.w	801157c <_dtoa_r+0x8c4>
 801140e:	b18c      	cbz	r4, 8011434 <_dtoa_r+0x77c>
 8011410:	4629      	mov	r1, r5
 8011412:	4622      	mov	r2, r4
 8011414:	4658      	mov	r0, fp
 8011416:	f001 f85d 	bl	80124d4 <__pow5mult>
 801141a:	464a      	mov	r2, r9
 801141c:	4601      	mov	r1, r0
 801141e:	4605      	mov	r5, r0
 8011420:	4658      	mov	r0, fp
 8011422:	f000 ffad 	bl	8012380 <__multiply>
 8011426:	4649      	mov	r1, r9
 8011428:	9004      	str	r0, [sp, #16]
 801142a:	4658      	mov	r0, fp
 801142c:	f000 fe94 	bl	8012158 <_Bfree>
 8011430:	9b04      	ldr	r3, [sp, #16]
 8011432:	4699      	mov	r9, r3
 8011434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011436:	1b1a      	subs	r2, r3, r4
 8011438:	d004      	beq.n	8011444 <_dtoa_r+0x78c>
 801143a:	4649      	mov	r1, r9
 801143c:	4658      	mov	r0, fp
 801143e:	f001 f849 	bl	80124d4 <__pow5mult>
 8011442:	4681      	mov	r9, r0
 8011444:	2101      	movs	r1, #1
 8011446:	4658      	mov	r0, fp
 8011448:	f000 ff84 	bl	8012354 <__i2b>
 801144c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801144e:	4604      	mov	r4, r0
 8011450:	2b00      	cmp	r3, #0
 8011452:	f000 81cf 	beq.w	80117f4 <_dtoa_r+0xb3c>
 8011456:	461a      	mov	r2, r3
 8011458:	4601      	mov	r1, r0
 801145a:	4658      	mov	r0, fp
 801145c:	f001 f83a 	bl	80124d4 <__pow5mult>
 8011460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011462:	2b01      	cmp	r3, #1
 8011464:	4604      	mov	r4, r0
 8011466:	f300 8095 	bgt.w	8011594 <_dtoa_r+0x8dc>
 801146a:	9b02      	ldr	r3, [sp, #8]
 801146c:	2b00      	cmp	r3, #0
 801146e:	f040 8087 	bne.w	8011580 <_dtoa_r+0x8c8>
 8011472:	9b03      	ldr	r3, [sp, #12]
 8011474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011478:	2b00      	cmp	r3, #0
 801147a:	f040 8089 	bne.w	8011590 <_dtoa_r+0x8d8>
 801147e:	9b03      	ldr	r3, [sp, #12]
 8011480:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011484:	0d1b      	lsrs	r3, r3, #20
 8011486:	051b      	lsls	r3, r3, #20
 8011488:	b12b      	cbz	r3, 8011496 <_dtoa_r+0x7de>
 801148a:	9b08      	ldr	r3, [sp, #32]
 801148c:	3301      	adds	r3, #1
 801148e:	9308      	str	r3, [sp, #32]
 8011490:	f108 0801 	add.w	r8, r8, #1
 8011494:	2301      	movs	r3, #1
 8011496:	930a      	str	r3, [sp, #40]	@ 0x28
 8011498:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801149a:	2b00      	cmp	r3, #0
 801149c:	f000 81b0 	beq.w	8011800 <_dtoa_r+0xb48>
 80114a0:	6923      	ldr	r3, [r4, #16]
 80114a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80114a6:	6918      	ldr	r0, [r3, #16]
 80114a8:	f000 ff08 	bl	80122bc <__hi0bits>
 80114ac:	f1c0 0020 	rsb	r0, r0, #32
 80114b0:	9b08      	ldr	r3, [sp, #32]
 80114b2:	4418      	add	r0, r3
 80114b4:	f010 001f 	ands.w	r0, r0, #31
 80114b8:	d077      	beq.n	80115aa <_dtoa_r+0x8f2>
 80114ba:	f1c0 0320 	rsb	r3, r0, #32
 80114be:	2b04      	cmp	r3, #4
 80114c0:	dd6b      	ble.n	801159a <_dtoa_r+0x8e2>
 80114c2:	9b08      	ldr	r3, [sp, #32]
 80114c4:	f1c0 001c 	rsb	r0, r0, #28
 80114c8:	4403      	add	r3, r0
 80114ca:	4480      	add	r8, r0
 80114cc:	4406      	add	r6, r0
 80114ce:	9308      	str	r3, [sp, #32]
 80114d0:	f1b8 0f00 	cmp.w	r8, #0
 80114d4:	dd05      	ble.n	80114e2 <_dtoa_r+0x82a>
 80114d6:	4649      	mov	r1, r9
 80114d8:	4642      	mov	r2, r8
 80114da:	4658      	mov	r0, fp
 80114dc:	f001 f854 	bl	8012588 <__lshift>
 80114e0:	4681      	mov	r9, r0
 80114e2:	9b08      	ldr	r3, [sp, #32]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	dd05      	ble.n	80114f4 <_dtoa_r+0x83c>
 80114e8:	4621      	mov	r1, r4
 80114ea:	461a      	mov	r2, r3
 80114ec:	4658      	mov	r0, fp
 80114ee:	f001 f84b 	bl	8012588 <__lshift>
 80114f2:	4604      	mov	r4, r0
 80114f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d059      	beq.n	80115ae <_dtoa_r+0x8f6>
 80114fa:	4621      	mov	r1, r4
 80114fc:	4648      	mov	r0, r9
 80114fe:	f001 f8af 	bl	8012660 <__mcmp>
 8011502:	2800      	cmp	r0, #0
 8011504:	da53      	bge.n	80115ae <_dtoa_r+0x8f6>
 8011506:	1e7b      	subs	r3, r7, #1
 8011508:	9304      	str	r3, [sp, #16]
 801150a:	4649      	mov	r1, r9
 801150c:	2300      	movs	r3, #0
 801150e:	220a      	movs	r2, #10
 8011510:	4658      	mov	r0, fp
 8011512:	f000 fe43 	bl	801219c <__multadd>
 8011516:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011518:	4681      	mov	r9, r0
 801151a:	2b00      	cmp	r3, #0
 801151c:	f000 8172 	beq.w	8011804 <_dtoa_r+0xb4c>
 8011520:	2300      	movs	r3, #0
 8011522:	4629      	mov	r1, r5
 8011524:	220a      	movs	r2, #10
 8011526:	4658      	mov	r0, fp
 8011528:	f000 fe38 	bl	801219c <__multadd>
 801152c:	9b00      	ldr	r3, [sp, #0]
 801152e:	2b00      	cmp	r3, #0
 8011530:	4605      	mov	r5, r0
 8011532:	dc67      	bgt.n	8011604 <_dtoa_r+0x94c>
 8011534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011536:	2b02      	cmp	r3, #2
 8011538:	dc41      	bgt.n	80115be <_dtoa_r+0x906>
 801153a:	e063      	b.n	8011604 <_dtoa_r+0x94c>
 801153c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801153e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011542:	e746      	b.n	80113d2 <_dtoa_r+0x71a>
 8011544:	9b07      	ldr	r3, [sp, #28]
 8011546:	1e5c      	subs	r4, r3, #1
 8011548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801154a:	42a3      	cmp	r3, r4
 801154c:	bfbf      	itttt	lt
 801154e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011550:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011552:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011554:	1ae3      	sublt	r3, r4, r3
 8011556:	bfb4      	ite	lt
 8011558:	18d2      	addlt	r2, r2, r3
 801155a:	1b1c      	subge	r4, r3, r4
 801155c:	9b07      	ldr	r3, [sp, #28]
 801155e:	bfbc      	itt	lt
 8011560:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011562:	2400      	movlt	r4, #0
 8011564:	2b00      	cmp	r3, #0
 8011566:	bfb5      	itete	lt
 8011568:	eba8 0603 	sublt.w	r6, r8, r3
 801156c:	9b07      	ldrge	r3, [sp, #28]
 801156e:	2300      	movlt	r3, #0
 8011570:	4646      	movge	r6, r8
 8011572:	e730      	b.n	80113d6 <_dtoa_r+0x71e>
 8011574:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011576:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011578:	4646      	mov	r6, r8
 801157a:	e735      	b.n	80113e8 <_dtoa_r+0x730>
 801157c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801157e:	e75c      	b.n	801143a <_dtoa_r+0x782>
 8011580:	2300      	movs	r3, #0
 8011582:	e788      	b.n	8011496 <_dtoa_r+0x7de>
 8011584:	3fe00000 	.word	0x3fe00000
 8011588:	40240000 	.word	0x40240000
 801158c:	40140000 	.word	0x40140000
 8011590:	9b02      	ldr	r3, [sp, #8]
 8011592:	e780      	b.n	8011496 <_dtoa_r+0x7de>
 8011594:	2300      	movs	r3, #0
 8011596:	930a      	str	r3, [sp, #40]	@ 0x28
 8011598:	e782      	b.n	80114a0 <_dtoa_r+0x7e8>
 801159a:	d099      	beq.n	80114d0 <_dtoa_r+0x818>
 801159c:	9a08      	ldr	r2, [sp, #32]
 801159e:	331c      	adds	r3, #28
 80115a0:	441a      	add	r2, r3
 80115a2:	4498      	add	r8, r3
 80115a4:	441e      	add	r6, r3
 80115a6:	9208      	str	r2, [sp, #32]
 80115a8:	e792      	b.n	80114d0 <_dtoa_r+0x818>
 80115aa:	4603      	mov	r3, r0
 80115ac:	e7f6      	b.n	801159c <_dtoa_r+0x8e4>
 80115ae:	9b07      	ldr	r3, [sp, #28]
 80115b0:	9704      	str	r7, [sp, #16]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	dc20      	bgt.n	80115f8 <_dtoa_r+0x940>
 80115b6:	9300      	str	r3, [sp, #0]
 80115b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115ba:	2b02      	cmp	r3, #2
 80115bc:	dd1e      	ble.n	80115fc <_dtoa_r+0x944>
 80115be:	9b00      	ldr	r3, [sp, #0]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	f47f aec0 	bne.w	8011346 <_dtoa_r+0x68e>
 80115c6:	4621      	mov	r1, r4
 80115c8:	2205      	movs	r2, #5
 80115ca:	4658      	mov	r0, fp
 80115cc:	f000 fde6 	bl	801219c <__multadd>
 80115d0:	4601      	mov	r1, r0
 80115d2:	4604      	mov	r4, r0
 80115d4:	4648      	mov	r0, r9
 80115d6:	f001 f843 	bl	8012660 <__mcmp>
 80115da:	2800      	cmp	r0, #0
 80115dc:	f77f aeb3 	ble.w	8011346 <_dtoa_r+0x68e>
 80115e0:	4656      	mov	r6, sl
 80115e2:	2331      	movs	r3, #49	@ 0x31
 80115e4:	f806 3b01 	strb.w	r3, [r6], #1
 80115e8:	9b04      	ldr	r3, [sp, #16]
 80115ea:	3301      	adds	r3, #1
 80115ec:	9304      	str	r3, [sp, #16]
 80115ee:	e6ae      	b.n	801134e <_dtoa_r+0x696>
 80115f0:	9c07      	ldr	r4, [sp, #28]
 80115f2:	9704      	str	r7, [sp, #16]
 80115f4:	4625      	mov	r5, r4
 80115f6:	e7f3      	b.n	80115e0 <_dtoa_r+0x928>
 80115f8:	9b07      	ldr	r3, [sp, #28]
 80115fa:	9300      	str	r3, [sp, #0]
 80115fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80115fe:	2b00      	cmp	r3, #0
 8011600:	f000 8104 	beq.w	801180c <_dtoa_r+0xb54>
 8011604:	2e00      	cmp	r6, #0
 8011606:	dd05      	ble.n	8011614 <_dtoa_r+0x95c>
 8011608:	4629      	mov	r1, r5
 801160a:	4632      	mov	r2, r6
 801160c:	4658      	mov	r0, fp
 801160e:	f000 ffbb 	bl	8012588 <__lshift>
 8011612:	4605      	mov	r5, r0
 8011614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011616:	2b00      	cmp	r3, #0
 8011618:	d05a      	beq.n	80116d0 <_dtoa_r+0xa18>
 801161a:	6869      	ldr	r1, [r5, #4]
 801161c:	4658      	mov	r0, fp
 801161e:	f000 fd5b 	bl	80120d8 <_Balloc>
 8011622:	4606      	mov	r6, r0
 8011624:	b928      	cbnz	r0, 8011632 <_dtoa_r+0x97a>
 8011626:	4b84      	ldr	r3, [pc, #528]	@ (8011838 <_dtoa_r+0xb80>)
 8011628:	4602      	mov	r2, r0
 801162a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801162e:	f7ff bb5a 	b.w	8010ce6 <_dtoa_r+0x2e>
 8011632:	692a      	ldr	r2, [r5, #16]
 8011634:	3202      	adds	r2, #2
 8011636:	0092      	lsls	r2, r2, #2
 8011638:	f105 010c 	add.w	r1, r5, #12
 801163c:	300c      	adds	r0, #12
 801163e:	f7ff fa94 	bl	8010b6a <memcpy>
 8011642:	2201      	movs	r2, #1
 8011644:	4631      	mov	r1, r6
 8011646:	4658      	mov	r0, fp
 8011648:	f000 ff9e 	bl	8012588 <__lshift>
 801164c:	f10a 0301 	add.w	r3, sl, #1
 8011650:	9307      	str	r3, [sp, #28]
 8011652:	9b00      	ldr	r3, [sp, #0]
 8011654:	4453      	add	r3, sl
 8011656:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011658:	9b02      	ldr	r3, [sp, #8]
 801165a:	f003 0301 	and.w	r3, r3, #1
 801165e:	462f      	mov	r7, r5
 8011660:	930a      	str	r3, [sp, #40]	@ 0x28
 8011662:	4605      	mov	r5, r0
 8011664:	9b07      	ldr	r3, [sp, #28]
 8011666:	4621      	mov	r1, r4
 8011668:	3b01      	subs	r3, #1
 801166a:	4648      	mov	r0, r9
 801166c:	9300      	str	r3, [sp, #0]
 801166e:	f7ff fa99 	bl	8010ba4 <quorem>
 8011672:	4639      	mov	r1, r7
 8011674:	9002      	str	r0, [sp, #8]
 8011676:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801167a:	4648      	mov	r0, r9
 801167c:	f000 fff0 	bl	8012660 <__mcmp>
 8011680:	462a      	mov	r2, r5
 8011682:	9008      	str	r0, [sp, #32]
 8011684:	4621      	mov	r1, r4
 8011686:	4658      	mov	r0, fp
 8011688:	f001 f806 	bl	8012698 <__mdiff>
 801168c:	68c2      	ldr	r2, [r0, #12]
 801168e:	4606      	mov	r6, r0
 8011690:	bb02      	cbnz	r2, 80116d4 <_dtoa_r+0xa1c>
 8011692:	4601      	mov	r1, r0
 8011694:	4648      	mov	r0, r9
 8011696:	f000 ffe3 	bl	8012660 <__mcmp>
 801169a:	4602      	mov	r2, r0
 801169c:	4631      	mov	r1, r6
 801169e:	4658      	mov	r0, fp
 80116a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80116a2:	f000 fd59 	bl	8012158 <_Bfree>
 80116a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80116aa:	9e07      	ldr	r6, [sp, #28]
 80116ac:	ea43 0102 	orr.w	r1, r3, r2
 80116b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116b2:	4319      	orrs	r1, r3
 80116b4:	d110      	bne.n	80116d8 <_dtoa_r+0xa20>
 80116b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80116ba:	d029      	beq.n	8011710 <_dtoa_r+0xa58>
 80116bc:	9b08      	ldr	r3, [sp, #32]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	dd02      	ble.n	80116c8 <_dtoa_r+0xa10>
 80116c2:	9b02      	ldr	r3, [sp, #8]
 80116c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80116c8:	9b00      	ldr	r3, [sp, #0]
 80116ca:	f883 8000 	strb.w	r8, [r3]
 80116ce:	e63f      	b.n	8011350 <_dtoa_r+0x698>
 80116d0:	4628      	mov	r0, r5
 80116d2:	e7bb      	b.n	801164c <_dtoa_r+0x994>
 80116d4:	2201      	movs	r2, #1
 80116d6:	e7e1      	b.n	801169c <_dtoa_r+0x9e4>
 80116d8:	9b08      	ldr	r3, [sp, #32]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	db04      	blt.n	80116e8 <_dtoa_r+0xa30>
 80116de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80116e0:	430b      	orrs	r3, r1
 80116e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80116e4:	430b      	orrs	r3, r1
 80116e6:	d120      	bne.n	801172a <_dtoa_r+0xa72>
 80116e8:	2a00      	cmp	r2, #0
 80116ea:	dded      	ble.n	80116c8 <_dtoa_r+0xa10>
 80116ec:	4649      	mov	r1, r9
 80116ee:	2201      	movs	r2, #1
 80116f0:	4658      	mov	r0, fp
 80116f2:	f000 ff49 	bl	8012588 <__lshift>
 80116f6:	4621      	mov	r1, r4
 80116f8:	4681      	mov	r9, r0
 80116fa:	f000 ffb1 	bl	8012660 <__mcmp>
 80116fe:	2800      	cmp	r0, #0
 8011700:	dc03      	bgt.n	801170a <_dtoa_r+0xa52>
 8011702:	d1e1      	bne.n	80116c8 <_dtoa_r+0xa10>
 8011704:	f018 0f01 	tst.w	r8, #1
 8011708:	d0de      	beq.n	80116c8 <_dtoa_r+0xa10>
 801170a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801170e:	d1d8      	bne.n	80116c2 <_dtoa_r+0xa0a>
 8011710:	9a00      	ldr	r2, [sp, #0]
 8011712:	2339      	movs	r3, #57	@ 0x39
 8011714:	7013      	strb	r3, [r2, #0]
 8011716:	4633      	mov	r3, r6
 8011718:	461e      	mov	r6, r3
 801171a:	3b01      	subs	r3, #1
 801171c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011720:	2a39      	cmp	r2, #57	@ 0x39
 8011722:	d052      	beq.n	80117ca <_dtoa_r+0xb12>
 8011724:	3201      	adds	r2, #1
 8011726:	701a      	strb	r2, [r3, #0]
 8011728:	e612      	b.n	8011350 <_dtoa_r+0x698>
 801172a:	2a00      	cmp	r2, #0
 801172c:	dd07      	ble.n	801173e <_dtoa_r+0xa86>
 801172e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011732:	d0ed      	beq.n	8011710 <_dtoa_r+0xa58>
 8011734:	9a00      	ldr	r2, [sp, #0]
 8011736:	f108 0301 	add.w	r3, r8, #1
 801173a:	7013      	strb	r3, [r2, #0]
 801173c:	e608      	b.n	8011350 <_dtoa_r+0x698>
 801173e:	9b07      	ldr	r3, [sp, #28]
 8011740:	9a07      	ldr	r2, [sp, #28]
 8011742:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011746:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011748:	4293      	cmp	r3, r2
 801174a:	d028      	beq.n	801179e <_dtoa_r+0xae6>
 801174c:	4649      	mov	r1, r9
 801174e:	2300      	movs	r3, #0
 8011750:	220a      	movs	r2, #10
 8011752:	4658      	mov	r0, fp
 8011754:	f000 fd22 	bl	801219c <__multadd>
 8011758:	42af      	cmp	r7, r5
 801175a:	4681      	mov	r9, r0
 801175c:	f04f 0300 	mov.w	r3, #0
 8011760:	f04f 020a 	mov.w	r2, #10
 8011764:	4639      	mov	r1, r7
 8011766:	4658      	mov	r0, fp
 8011768:	d107      	bne.n	801177a <_dtoa_r+0xac2>
 801176a:	f000 fd17 	bl	801219c <__multadd>
 801176e:	4607      	mov	r7, r0
 8011770:	4605      	mov	r5, r0
 8011772:	9b07      	ldr	r3, [sp, #28]
 8011774:	3301      	adds	r3, #1
 8011776:	9307      	str	r3, [sp, #28]
 8011778:	e774      	b.n	8011664 <_dtoa_r+0x9ac>
 801177a:	f000 fd0f 	bl	801219c <__multadd>
 801177e:	4629      	mov	r1, r5
 8011780:	4607      	mov	r7, r0
 8011782:	2300      	movs	r3, #0
 8011784:	220a      	movs	r2, #10
 8011786:	4658      	mov	r0, fp
 8011788:	f000 fd08 	bl	801219c <__multadd>
 801178c:	4605      	mov	r5, r0
 801178e:	e7f0      	b.n	8011772 <_dtoa_r+0xaba>
 8011790:	9b00      	ldr	r3, [sp, #0]
 8011792:	2b00      	cmp	r3, #0
 8011794:	bfcc      	ite	gt
 8011796:	461e      	movgt	r6, r3
 8011798:	2601      	movle	r6, #1
 801179a:	4456      	add	r6, sl
 801179c:	2700      	movs	r7, #0
 801179e:	4649      	mov	r1, r9
 80117a0:	2201      	movs	r2, #1
 80117a2:	4658      	mov	r0, fp
 80117a4:	f000 fef0 	bl	8012588 <__lshift>
 80117a8:	4621      	mov	r1, r4
 80117aa:	4681      	mov	r9, r0
 80117ac:	f000 ff58 	bl	8012660 <__mcmp>
 80117b0:	2800      	cmp	r0, #0
 80117b2:	dcb0      	bgt.n	8011716 <_dtoa_r+0xa5e>
 80117b4:	d102      	bne.n	80117bc <_dtoa_r+0xb04>
 80117b6:	f018 0f01 	tst.w	r8, #1
 80117ba:	d1ac      	bne.n	8011716 <_dtoa_r+0xa5e>
 80117bc:	4633      	mov	r3, r6
 80117be:	461e      	mov	r6, r3
 80117c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80117c4:	2a30      	cmp	r2, #48	@ 0x30
 80117c6:	d0fa      	beq.n	80117be <_dtoa_r+0xb06>
 80117c8:	e5c2      	b.n	8011350 <_dtoa_r+0x698>
 80117ca:	459a      	cmp	sl, r3
 80117cc:	d1a4      	bne.n	8011718 <_dtoa_r+0xa60>
 80117ce:	9b04      	ldr	r3, [sp, #16]
 80117d0:	3301      	adds	r3, #1
 80117d2:	9304      	str	r3, [sp, #16]
 80117d4:	2331      	movs	r3, #49	@ 0x31
 80117d6:	f88a 3000 	strb.w	r3, [sl]
 80117da:	e5b9      	b.n	8011350 <_dtoa_r+0x698>
 80117dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80117de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801183c <_dtoa_r+0xb84>
 80117e2:	b11b      	cbz	r3, 80117ec <_dtoa_r+0xb34>
 80117e4:	f10a 0308 	add.w	r3, sl, #8
 80117e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80117ea:	6013      	str	r3, [r2, #0]
 80117ec:	4650      	mov	r0, sl
 80117ee:	b019      	add	sp, #100	@ 0x64
 80117f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117f6:	2b01      	cmp	r3, #1
 80117f8:	f77f ae37 	ble.w	801146a <_dtoa_r+0x7b2>
 80117fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80117fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8011800:	2001      	movs	r0, #1
 8011802:	e655      	b.n	80114b0 <_dtoa_r+0x7f8>
 8011804:	9b00      	ldr	r3, [sp, #0]
 8011806:	2b00      	cmp	r3, #0
 8011808:	f77f aed6 	ble.w	80115b8 <_dtoa_r+0x900>
 801180c:	4656      	mov	r6, sl
 801180e:	4621      	mov	r1, r4
 8011810:	4648      	mov	r0, r9
 8011812:	f7ff f9c7 	bl	8010ba4 <quorem>
 8011816:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801181a:	f806 8b01 	strb.w	r8, [r6], #1
 801181e:	9b00      	ldr	r3, [sp, #0]
 8011820:	eba6 020a 	sub.w	r2, r6, sl
 8011824:	4293      	cmp	r3, r2
 8011826:	ddb3      	ble.n	8011790 <_dtoa_r+0xad8>
 8011828:	4649      	mov	r1, r9
 801182a:	2300      	movs	r3, #0
 801182c:	220a      	movs	r2, #10
 801182e:	4658      	mov	r0, fp
 8011830:	f000 fcb4 	bl	801219c <__multadd>
 8011834:	4681      	mov	r9, r0
 8011836:	e7ea      	b.n	801180e <_dtoa_r+0xb56>
 8011838:	08014675 	.word	0x08014675
 801183c:	080145f9 	.word	0x080145f9

08011840 <_free_r>:
 8011840:	b538      	push	{r3, r4, r5, lr}
 8011842:	4605      	mov	r5, r0
 8011844:	2900      	cmp	r1, #0
 8011846:	d041      	beq.n	80118cc <_free_r+0x8c>
 8011848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801184c:	1f0c      	subs	r4, r1, #4
 801184e:	2b00      	cmp	r3, #0
 8011850:	bfb8      	it	lt
 8011852:	18e4      	addlt	r4, r4, r3
 8011854:	f000 fc34 	bl	80120c0 <__malloc_lock>
 8011858:	4a1d      	ldr	r2, [pc, #116]	@ (80118d0 <_free_r+0x90>)
 801185a:	6813      	ldr	r3, [r2, #0]
 801185c:	b933      	cbnz	r3, 801186c <_free_r+0x2c>
 801185e:	6063      	str	r3, [r4, #4]
 8011860:	6014      	str	r4, [r2, #0]
 8011862:	4628      	mov	r0, r5
 8011864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011868:	f000 bc30 	b.w	80120cc <__malloc_unlock>
 801186c:	42a3      	cmp	r3, r4
 801186e:	d908      	bls.n	8011882 <_free_r+0x42>
 8011870:	6820      	ldr	r0, [r4, #0]
 8011872:	1821      	adds	r1, r4, r0
 8011874:	428b      	cmp	r3, r1
 8011876:	bf01      	itttt	eq
 8011878:	6819      	ldreq	r1, [r3, #0]
 801187a:	685b      	ldreq	r3, [r3, #4]
 801187c:	1809      	addeq	r1, r1, r0
 801187e:	6021      	streq	r1, [r4, #0]
 8011880:	e7ed      	b.n	801185e <_free_r+0x1e>
 8011882:	461a      	mov	r2, r3
 8011884:	685b      	ldr	r3, [r3, #4]
 8011886:	b10b      	cbz	r3, 801188c <_free_r+0x4c>
 8011888:	42a3      	cmp	r3, r4
 801188a:	d9fa      	bls.n	8011882 <_free_r+0x42>
 801188c:	6811      	ldr	r1, [r2, #0]
 801188e:	1850      	adds	r0, r2, r1
 8011890:	42a0      	cmp	r0, r4
 8011892:	d10b      	bne.n	80118ac <_free_r+0x6c>
 8011894:	6820      	ldr	r0, [r4, #0]
 8011896:	4401      	add	r1, r0
 8011898:	1850      	adds	r0, r2, r1
 801189a:	4283      	cmp	r3, r0
 801189c:	6011      	str	r1, [r2, #0]
 801189e:	d1e0      	bne.n	8011862 <_free_r+0x22>
 80118a0:	6818      	ldr	r0, [r3, #0]
 80118a2:	685b      	ldr	r3, [r3, #4]
 80118a4:	6053      	str	r3, [r2, #4]
 80118a6:	4408      	add	r0, r1
 80118a8:	6010      	str	r0, [r2, #0]
 80118aa:	e7da      	b.n	8011862 <_free_r+0x22>
 80118ac:	d902      	bls.n	80118b4 <_free_r+0x74>
 80118ae:	230c      	movs	r3, #12
 80118b0:	602b      	str	r3, [r5, #0]
 80118b2:	e7d6      	b.n	8011862 <_free_r+0x22>
 80118b4:	6820      	ldr	r0, [r4, #0]
 80118b6:	1821      	adds	r1, r4, r0
 80118b8:	428b      	cmp	r3, r1
 80118ba:	bf04      	itt	eq
 80118bc:	6819      	ldreq	r1, [r3, #0]
 80118be:	685b      	ldreq	r3, [r3, #4]
 80118c0:	6063      	str	r3, [r4, #4]
 80118c2:	bf04      	itt	eq
 80118c4:	1809      	addeq	r1, r1, r0
 80118c6:	6021      	streq	r1, [r4, #0]
 80118c8:	6054      	str	r4, [r2, #4]
 80118ca:	e7ca      	b.n	8011862 <_free_r+0x22>
 80118cc:	bd38      	pop	{r3, r4, r5, pc}
 80118ce:	bf00      	nop
 80118d0:	20000ea0 	.word	0x20000ea0

080118d4 <rshift>:
 80118d4:	6903      	ldr	r3, [r0, #16]
 80118d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80118da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80118de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80118e2:	f100 0414 	add.w	r4, r0, #20
 80118e6:	dd45      	ble.n	8011974 <rshift+0xa0>
 80118e8:	f011 011f 	ands.w	r1, r1, #31
 80118ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80118f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80118f4:	d10c      	bne.n	8011910 <rshift+0x3c>
 80118f6:	f100 0710 	add.w	r7, r0, #16
 80118fa:	4629      	mov	r1, r5
 80118fc:	42b1      	cmp	r1, r6
 80118fe:	d334      	bcc.n	801196a <rshift+0x96>
 8011900:	1a9b      	subs	r3, r3, r2
 8011902:	009b      	lsls	r3, r3, #2
 8011904:	1eea      	subs	r2, r5, #3
 8011906:	4296      	cmp	r6, r2
 8011908:	bf38      	it	cc
 801190a:	2300      	movcc	r3, #0
 801190c:	4423      	add	r3, r4
 801190e:	e015      	b.n	801193c <rshift+0x68>
 8011910:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011914:	f1c1 0820 	rsb	r8, r1, #32
 8011918:	40cf      	lsrs	r7, r1
 801191a:	f105 0e04 	add.w	lr, r5, #4
 801191e:	46a1      	mov	r9, r4
 8011920:	4576      	cmp	r6, lr
 8011922:	46f4      	mov	ip, lr
 8011924:	d815      	bhi.n	8011952 <rshift+0x7e>
 8011926:	1a9a      	subs	r2, r3, r2
 8011928:	0092      	lsls	r2, r2, #2
 801192a:	3a04      	subs	r2, #4
 801192c:	3501      	adds	r5, #1
 801192e:	42ae      	cmp	r6, r5
 8011930:	bf38      	it	cc
 8011932:	2200      	movcc	r2, #0
 8011934:	18a3      	adds	r3, r4, r2
 8011936:	50a7      	str	r7, [r4, r2]
 8011938:	b107      	cbz	r7, 801193c <rshift+0x68>
 801193a:	3304      	adds	r3, #4
 801193c:	1b1a      	subs	r2, r3, r4
 801193e:	42a3      	cmp	r3, r4
 8011940:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011944:	bf08      	it	eq
 8011946:	2300      	moveq	r3, #0
 8011948:	6102      	str	r2, [r0, #16]
 801194a:	bf08      	it	eq
 801194c:	6143      	streq	r3, [r0, #20]
 801194e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011952:	f8dc c000 	ldr.w	ip, [ip]
 8011956:	fa0c fc08 	lsl.w	ip, ip, r8
 801195a:	ea4c 0707 	orr.w	r7, ip, r7
 801195e:	f849 7b04 	str.w	r7, [r9], #4
 8011962:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011966:	40cf      	lsrs	r7, r1
 8011968:	e7da      	b.n	8011920 <rshift+0x4c>
 801196a:	f851 cb04 	ldr.w	ip, [r1], #4
 801196e:	f847 cf04 	str.w	ip, [r7, #4]!
 8011972:	e7c3      	b.n	80118fc <rshift+0x28>
 8011974:	4623      	mov	r3, r4
 8011976:	e7e1      	b.n	801193c <rshift+0x68>

08011978 <__hexdig_fun>:
 8011978:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801197c:	2b09      	cmp	r3, #9
 801197e:	d802      	bhi.n	8011986 <__hexdig_fun+0xe>
 8011980:	3820      	subs	r0, #32
 8011982:	b2c0      	uxtb	r0, r0
 8011984:	4770      	bx	lr
 8011986:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801198a:	2b05      	cmp	r3, #5
 801198c:	d801      	bhi.n	8011992 <__hexdig_fun+0x1a>
 801198e:	3847      	subs	r0, #71	@ 0x47
 8011990:	e7f7      	b.n	8011982 <__hexdig_fun+0xa>
 8011992:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011996:	2b05      	cmp	r3, #5
 8011998:	d801      	bhi.n	801199e <__hexdig_fun+0x26>
 801199a:	3827      	subs	r0, #39	@ 0x27
 801199c:	e7f1      	b.n	8011982 <__hexdig_fun+0xa>
 801199e:	2000      	movs	r0, #0
 80119a0:	4770      	bx	lr
	...

080119a4 <__gethex>:
 80119a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119a8:	b085      	sub	sp, #20
 80119aa:	468a      	mov	sl, r1
 80119ac:	9302      	str	r3, [sp, #8]
 80119ae:	680b      	ldr	r3, [r1, #0]
 80119b0:	9001      	str	r0, [sp, #4]
 80119b2:	4690      	mov	r8, r2
 80119b4:	1c9c      	adds	r4, r3, #2
 80119b6:	46a1      	mov	r9, r4
 80119b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80119bc:	2830      	cmp	r0, #48	@ 0x30
 80119be:	d0fa      	beq.n	80119b6 <__gethex+0x12>
 80119c0:	eba9 0303 	sub.w	r3, r9, r3
 80119c4:	f1a3 0b02 	sub.w	fp, r3, #2
 80119c8:	f7ff ffd6 	bl	8011978 <__hexdig_fun>
 80119cc:	4605      	mov	r5, r0
 80119ce:	2800      	cmp	r0, #0
 80119d0:	d168      	bne.n	8011aa4 <__gethex+0x100>
 80119d2:	49a0      	ldr	r1, [pc, #640]	@ (8011c54 <__gethex+0x2b0>)
 80119d4:	2201      	movs	r2, #1
 80119d6:	4648      	mov	r0, r9
 80119d8:	f7ff f83e 	bl	8010a58 <strncmp>
 80119dc:	4607      	mov	r7, r0
 80119de:	2800      	cmp	r0, #0
 80119e0:	d167      	bne.n	8011ab2 <__gethex+0x10e>
 80119e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80119e6:	4626      	mov	r6, r4
 80119e8:	f7ff ffc6 	bl	8011978 <__hexdig_fun>
 80119ec:	2800      	cmp	r0, #0
 80119ee:	d062      	beq.n	8011ab6 <__gethex+0x112>
 80119f0:	4623      	mov	r3, r4
 80119f2:	7818      	ldrb	r0, [r3, #0]
 80119f4:	2830      	cmp	r0, #48	@ 0x30
 80119f6:	4699      	mov	r9, r3
 80119f8:	f103 0301 	add.w	r3, r3, #1
 80119fc:	d0f9      	beq.n	80119f2 <__gethex+0x4e>
 80119fe:	f7ff ffbb 	bl	8011978 <__hexdig_fun>
 8011a02:	fab0 f580 	clz	r5, r0
 8011a06:	096d      	lsrs	r5, r5, #5
 8011a08:	f04f 0b01 	mov.w	fp, #1
 8011a0c:	464a      	mov	r2, r9
 8011a0e:	4616      	mov	r6, r2
 8011a10:	3201      	adds	r2, #1
 8011a12:	7830      	ldrb	r0, [r6, #0]
 8011a14:	f7ff ffb0 	bl	8011978 <__hexdig_fun>
 8011a18:	2800      	cmp	r0, #0
 8011a1a:	d1f8      	bne.n	8011a0e <__gethex+0x6a>
 8011a1c:	498d      	ldr	r1, [pc, #564]	@ (8011c54 <__gethex+0x2b0>)
 8011a1e:	2201      	movs	r2, #1
 8011a20:	4630      	mov	r0, r6
 8011a22:	f7ff f819 	bl	8010a58 <strncmp>
 8011a26:	2800      	cmp	r0, #0
 8011a28:	d13f      	bne.n	8011aaa <__gethex+0x106>
 8011a2a:	b944      	cbnz	r4, 8011a3e <__gethex+0x9a>
 8011a2c:	1c74      	adds	r4, r6, #1
 8011a2e:	4622      	mov	r2, r4
 8011a30:	4616      	mov	r6, r2
 8011a32:	3201      	adds	r2, #1
 8011a34:	7830      	ldrb	r0, [r6, #0]
 8011a36:	f7ff ff9f 	bl	8011978 <__hexdig_fun>
 8011a3a:	2800      	cmp	r0, #0
 8011a3c:	d1f8      	bne.n	8011a30 <__gethex+0x8c>
 8011a3e:	1ba4      	subs	r4, r4, r6
 8011a40:	00a7      	lsls	r7, r4, #2
 8011a42:	7833      	ldrb	r3, [r6, #0]
 8011a44:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011a48:	2b50      	cmp	r3, #80	@ 0x50
 8011a4a:	d13e      	bne.n	8011aca <__gethex+0x126>
 8011a4c:	7873      	ldrb	r3, [r6, #1]
 8011a4e:	2b2b      	cmp	r3, #43	@ 0x2b
 8011a50:	d033      	beq.n	8011aba <__gethex+0x116>
 8011a52:	2b2d      	cmp	r3, #45	@ 0x2d
 8011a54:	d034      	beq.n	8011ac0 <__gethex+0x11c>
 8011a56:	1c71      	adds	r1, r6, #1
 8011a58:	2400      	movs	r4, #0
 8011a5a:	7808      	ldrb	r0, [r1, #0]
 8011a5c:	f7ff ff8c 	bl	8011978 <__hexdig_fun>
 8011a60:	1e43      	subs	r3, r0, #1
 8011a62:	b2db      	uxtb	r3, r3
 8011a64:	2b18      	cmp	r3, #24
 8011a66:	d830      	bhi.n	8011aca <__gethex+0x126>
 8011a68:	f1a0 0210 	sub.w	r2, r0, #16
 8011a6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011a70:	f7ff ff82 	bl	8011978 <__hexdig_fun>
 8011a74:	f100 3cff 	add.w	ip, r0, #4294967295
 8011a78:	fa5f fc8c 	uxtb.w	ip, ip
 8011a7c:	f1bc 0f18 	cmp.w	ip, #24
 8011a80:	f04f 030a 	mov.w	r3, #10
 8011a84:	d91e      	bls.n	8011ac4 <__gethex+0x120>
 8011a86:	b104      	cbz	r4, 8011a8a <__gethex+0xe6>
 8011a88:	4252      	negs	r2, r2
 8011a8a:	4417      	add	r7, r2
 8011a8c:	f8ca 1000 	str.w	r1, [sl]
 8011a90:	b1ed      	cbz	r5, 8011ace <__gethex+0x12a>
 8011a92:	f1bb 0f00 	cmp.w	fp, #0
 8011a96:	bf0c      	ite	eq
 8011a98:	2506      	moveq	r5, #6
 8011a9a:	2500      	movne	r5, #0
 8011a9c:	4628      	mov	r0, r5
 8011a9e:	b005      	add	sp, #20
 8011aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aa4:	2500      	movs	r5, #0
 8011aa6:	462c      	mov	r4, r5
 8011aa8:	e7b0      	b.n	8011a0c <__gethex+0x68>
 8011aaa:	2c00      	cmp	r4, #0
 8011aac:	d1c7      	bne.n	8011a3e <__gethex+0x9a>
 8011aae:	4627      	mov	r7, r4
 8011ab0:	e7c7      	b.n	8011a42 <__gethex+0x9e>
 8011ab2:	464e      	mov	r6, r9
 8011ab4:	462f      	mov	r7, r5
 8011ab6:	2501      	movs	r5, #1
 8011ab8:	e7c3      	b.n	8011a42 <__gethex+0x9e>
 8011aba:	2400      	movs	r4, #0
 8011abc:	1cb1      	adds	r1, r6, #2
 8011abe:	e7cc      	b.n	8011a5a <__gethex+0xb6>
 8011ac0:	2401      	movs	r4, #1
 8011ac2:	e7fb      	b.n	8011abc <__gethex+0x118>
 8011ac4:	fb03 0002 	mla	r0, r3, r2, r0
 8011ac8:	e7ce      	b.n	8011a68 <__gethex+0xc4>
 8011aca:	4631      	mov	r1, r6
 8011acc:	e7de      	b.n	8011a8c <__gethex+0xe8>
 8011ace:	eba6 0309 	sub.w	r3, r6, r9
 8011ad2:	3b01      	subs	r3, #1
 8011ad4:	4629      	mov	r1, r5
 8011ad6:	2b07      	cmp	r3, #7
 8011ad8:	dc0a      	bgt.n	8011af0 <__gethex+0x14c>
 8011ada:	9801      	ldr	r0, [sp, #4]
 8011adc:	f000 fafc 	bl	80120d8 <_Balloc>
 8011ae0:	4604      	mov	r4, r0
 8011ae2:	b940      	cbnz	r0, 8011af6 <__gethex+0x152>
 8011ae4:	4b5c      	ldr	r3, [pc, #368]	@ (8011c58 <__gethex+0x2b4>)
 8011ae6:	4602      	mov	r2, r0
 8011ae8:	21e4      	movs	r1, #228	@ 0xe4
 8011aea:	485c      	ldr	r0, [pc, #368]	@ (8011c5c <__gethex+0x2b8>)
 8011aec:	f001 fa5c 	bl	8012fa8 <__assert_func>
 8011af0:	3101      	adds	r1, #1
 8011af2:	105b      	asrs	r3, r3, #1
 8011af4:	e7ef      	b.n	8011ad6 <__gethex+0x132>
 8011af6:	f100 0a14 	add.w	sl, r0, #20
 8011afa:	2300      	movs	r3, #0
 8011afc:	4655      	mov	r5, sl
 8011afe:	469b      	mov	fp, r3
 8011b00:	45b1      	cmp	r9, r6
 8011b02:	d337      	bcc.n	8011b74 <__gethex+0x1d0>
 8011b04:	f845 bb04 	str.w	fp, [r5], #4
 8011b08:	eba5 050a 	sub.w	r5, r5, sl
 8011b0c:	10ad      	asrs	r5, r5, #2
 8011b0e:	6125      	str	r5, [r4, #16]
 8011b10:	4658      	mov	r0, fp
 8011b12:	f000 fbd3 	bl	80122bc <__hi0bits>
 8011b16:	016d      	lsls	r5, r5, #5
 8011b18:	f8d8 6000 	ldr.w	r6, [r8]
 8011b1c:	1a2d      	subs	r5, r5, r0
 8011b1e:	42b5      	cmp	r5, r6
 8011b20:	dd54      	ble.n	8011bcc <__gethex+0x228>
 8011b22:	1bad      	subs	r5, r5, r6
 8011b24:	4629      	mov	r1, r5
 8011b26:	4620      	mov	r0, r4
 8011b28:	f000 ff67 	bl	80129fa <__any_on>
 8011b2c:	4681      	mov	r9, r0
 8011b2e:	b178      	cbz	r0, 8011b50 <__gethex+0x1ac>
 8011b30:	1e6b      	subs	r3, r5, #1
 8011b32:	1159      	asrs	r1, r3, #5
 8011b34:	f003 021f 	and.w	r2, r3, #31
 8011b38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011b3c:	f04f 0901 	mov.w	r9, #1
 8011b40:	fa09 f202 	lsl.w	r2, r9, r2
 8011b44:	420a      	tst	r2, r1
 8011b46:	d003      	beq.n	8011b50 <__gethex+0x1ac>
 8011b48:	454b      	cmp	r3, r9
 8011b4a:	dc36      	bgt.n	8011bba <__gethex+0x216>
 8011b4c:	f04f 0902 	mov.w	r9, #2
 8011b50:	4629      	mov	r1, r5
 8011b52:	4620      	mov	r0, r4
 8011b54:	f7ff febe 	bl	80118d4 <rshift>
 8011b58:	442f      	add	r7, r5
 8011b5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011b5e:	42bb      	cmp	r3, r7
 8011b60:	da42      	bge.n	8011be8 <__gethex+0x244>
 8011b62:	9801      	ldr	r0, [sp, #4]
 8011b64:	4621      	mov	r1, r4
 8011b66:	f000 faf7 	bl	8012158 <_Bfree>
 8011b6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	6013      	str	r3, [r2, #0]
 8011b70:	25a3      	movs	r5, #163	@ 0xa3
 8011b72:	e793      	b.n	8011a9c <__gethex+0xf8>
 8011b74:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011b78:	2a2e      	cmp	r2, #46	@ 0x2e
 8011b7a:	d012      	beq.n	8011ba2 <__gethex+0x1fe>
 8011b7c:	2b20      	cmp	r3, #32
 8011b7e:	d104      	bne.n	8011b8a <__gethex+0x1e6>
 8011b80:	f845 bb04 	str.w	fp, [r5], #4
 8011b84:	f04f 0b00 	mov.w	fp, #0
 8011b88:	465b      	mov	r3, fp
 8011b8a:	7830      	ldrb	r0, [r6, #0]
 8011b8c:	9303      	str	r3, [sp, #12]
 8011b8e:	f7ff fef3 	bl	8011978 <__hexdig_fun>
 8011b92:	9b03      	ldr	r3, [sp, #12]
 8011b94:	f000 000f 	and.w	r0, r0, #15
 8011b98:	4098      	lsls	r0, r3
 8011b9a:	ea4b 0b00 	orr.w	fp, fp, r0
 8011b9e:	3304      	adds	r3, #4
 8011ba0:	e7ae      	b.n	8011b00 <__gethex+0x15c>
 8011ba2:	45b1      	cmp	r9, r6
 8011ba4:	d8ea      	bhi.n	8011b7c <__gethex+0x1d8>
 8011ba6:	492b      	ldr	r1, [pc, #172]	@ (8011c54 <__gethex+0x2b0>)
 8011ba8:	9303      	str	r3, [sp, #12]
 8011baa:	2201      	movs	r2, #1
 8011bac:	4630      	mov	r0, r6
 8011bae:	f7fe ff53 	bl	8010a58 <strncmp>
 8011bb2:	9b03      	ldr	r3, [sp, #12]
 8011bb4:	2800      	cmp	r0, #0
 8011bb6:	d1e1      	bne.n	8011b7c <__gethex+0x1d8>
 8011bb8:	e7a2      	b.n	8011b00 <__gethex+0x15c>
 8011bba:	1ea9      	subs	r1, r5, #2
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	f000 ff1c 	bl	80129fa <__any_on>
 8011bc2:	2800      	cmp	r0, #0
 8011bc4:	d0c2      	beq.n	8011b4c <__gethex+0x1a8>
 8011bc6:	f04f 0903 	mov.w	r9, #3
 8011bca:	e7c1      	b.n	8011b50 <__gethex+0x1ac>
 8011bcc:	da09      	bge.n	8011be2 <__gethex+0x23e>
 8011bce:	1b75      	subs	r5, r6, r5
 8011bd0:	4621      	mov	r1, r4
 8011bd2:	9801      	ldr	r0, [sp, #4]
 8011bd4:	462a      	mov	r2, r5
 8011bd6:	f000 fcd7 	bl	8012588 <__lshift>
 8011bda:	1b7f      	subs	r7, r7, r5
 8011bdc:	4604      	mov	r4, r0
 8011bde:	f100 0a14 	add.w	sl, r0, #20
 8011be2:	f04f 0900 	mov.w	r9, #0
 8011be6:	e7b8      	b.n	8011b5a <__gethex+0x1b6>
 8011be8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011bec:	42bd      	cmp	r5, r7
 8011bee:	dd6f      	ble.n	8011cd0 <__gethex+0x32c>
 8011bf0:	1bed      	subs	r5, r5, r7
 8011bf2:	42ae      	cmp	r6, r5
 8011bf4:	dc34      	bgt.n	8011c60 <__gethex+0x2bc>
 8011bf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011bfa:	2b02      	cmp	r3, #2
 8011bfc:	d022      	beq.n	8011c44 <__gethex+0x2a0>
 8011bfe:	2b03      	cmp	r3, #3
 8011c00:	d024      	beq.n	8011c4c <__gethex+0x2a8>
 8011c02:	2b01      	cmp	r3, #1
 8011c04:	d115      	bne.n	8011c32 <__gethex+0x28e>
 8011c06:	42ae      	cmp	r6, r5
 8011c08:	d113      	bne.n	8011c32 <__gethex+0x28e>
 8011c0a:	2e01      	cmp	r6, #1
 8011c0c:	d10b      	bne.n	8011c26 <__gethex+0x282>
 8011c0e:	9a02      	ldr	r2, [sp, #8]
 8011c10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011c14:	6013      	str	r3, [r2, #0]
 8011c16:	2301      	movs	r3, #1
 8011c18:	6123      	str	r3, [r4, #16]
 8011c1a:	f8ca 3000 	str.w	r3, [sl]
 8011c1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c20:	2562      	movs	r5, #98	@ 0x62
 8011c22:	601c      	str	r4, [r3, #0]
 8011c24:	e73a      	b.n	8011a9c <__gethex+0xf8>
 8011c26:	1e71      	subs	r1, r6, #1
 8011c28:	4620      	mov	r0, r4
 8011c2a:	f000 fee6 	bl	80129fa <__any_on>
 8011c2e:	2800      	cmp	r0, #0
 8011c30:	d1ed      	bne.n	8011c0e <__gethex+0x26a>
 8011c32:	9801      	ldr	r0, [sp, #4]
 8011c34:	4621      	mov	r1, r4
 8011c36:	f000 fa8f 	bl	8012158 <_Bfree>
 8011c3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	6013      	str	r3, [r2, #0]
 8011c40:	2550      	movs	r5, #80	@ 0x50
 8011c42:	e72b      	b.n	8011a9c <__gethex+0xf8>
 8011c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d1f3      	bne.n	8011c32 <__gethex+0x28e>
 8011c4a:	e7e0      	b.n	8011c0e <__gethex+0x26a>
 8011c4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d1dd      	bne.n	8011c0e <__gethex+0x26a>
 8011c52:	e7ee      	b.n	8011c32 <__gethex+0x28e>
 8011c54:	08014560 	.word	0x08014560
 8011c58:	08014675 	.word	0x08014675
 8011c5c:	08014686 	.word	0x08014686
 8011c60:	1e6f      	subs	r7, r5, #1
 8011c62:	f1b9 0f00 	cmp.w	r9, #0
 8011c66:	d130      	bne.n	8011cca <__gethex+0x326>
 8011c68:	b127      	cbz	r7, 8011c74 <__gethex+0x2d0>
 8011c6a:	4639      	mov	r1, r7
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	f000 fec4 	bl	80129fa <__any_on>
 8011c72:	4681      	mov	r9, r0
 8011c74:	117a      	asrs	r2, r7, #5
 8011c76:	2301      	movs	r3, #1
 8011c78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011c7c:	f007 071f 	and.w	r7, r7, #31
 8011c80:	40bb      	lsls	r3, r7
 8011c82:	4213      	tst	r3, r2
 8011c84:	4629      	mov	r1, r5
 8011c86:	4620      	mov	r0, r4
 8011c88:	bf18      	it	ne
 8011c8a:	f049 0902 	orrne.w	r9, r9, #2
 8011c8e:	f7ff fe21 	bl	80118d4 <rshift>
 8011c92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011c96:	1b76      	subs	r6, r6, r5
 8011c98:	2502      	movs	r5, #2
 8011c9a:	f1b9 0f00 	cmp.w	r9, #0
 8011c9e:	d047      	beq.n	8011d30 <__gethex+0x38c>
 8011ca0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011ca4:	2b02      	cmp	r3, #2
 8011ca6:	d015      	beq.n	8011cd4 <__gethex+0x330>
 8011ca8:	2b03      	cmp	r3, #3
 8011caa:	d017      	beq.n	8011cdc <__gethex+0x338>
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	d109      	bne.n	8011cc4 <__gethex+0x320>
 8011cb0:	f019 0f02 	tst.w	r9, #2
 8011cb4:	d006      	beq.n	8011cc4 <__gethex+0x320>
 8011cb6:	f8da 3000 	ldr.w	r3, [sl]
 8011cba:	ea49 0903 	orr.w	r9, r9, r3
 8011cbe:	f019 0f01 	tst.w	r9, #1
 8011cc2:	d10e      	bne.n	8011ce2 <__gethex+0x33e>
 8011cc4:	f045 0510 	orr.w	r5, r5, #16
 8011cc8:	e032      	b.n	8011d30 <__gethex+0x38c>
 8011cca:	f04f 0901 	mov.w	r9, #1
 8011cce:	e7d1      	b.n	8011c74 <__gethex+0x2d0>
 8011cd0:	2501      	movs	r5, #1
 8011cd2:	e7e2      	b.n	8011c9a <__gethex+0x2f6>
 8011cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cd6:	f1c3 0301 	rsb	r3, r3, #1
 8011cda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011cdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d0f0      	beq.n	8011cc4 <__gethex+0x320>
 8011ce2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011ce6:	f104 0314 	add.w	r3, r4, #20
 8011cea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011cee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011cf2:	f04f 0c00 	mov.w	ip, #0
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cfc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011d00:	d01b      	beq.n	8011d3a <__gethex+0x396>
 8011d02:	3201      	adds	r2, #1
 8011d04:	6002      	str	r2, [r0, #0]
 8011d06:	2d02      	cmp	r5, #2
 8011d08:	f104 0314 	add.w	r3, r4, #20
 8011d0c:	d13c      	bne.n	8011d88 <__gethex+0x3e4>
 8011d0e:	f8d8 2000 	ldr.w	r2, [r8]
 8011d12:	3a01      	subs	r2, #1
 8011d14:	42b2      	cmp	r2, r6
 8011d16:	d109      	bne.n	8011d2c <__gethex+0x388>
 8011d18:	1171      	asrs	r1, r6, #5
 8011d1a:	2201      	movs	r2, #1
 8011d1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011d20:	f006 061f 	and.w	r6, r6, #31
 8011d24:	fa02 f606 	lsl.w	r6, r2, r6
 8011d28:	421e      	tst	r6, r3
 8011d2a:	d13a      	bne.n	8011da2 <__gethex+0x3fe>
 8011d2c:	f045 0520 	orr.w	r5, r5, #32
 8011d30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d32:	601c      	str	r4, [r3, #0]
 8011d34:	9b02      	ldr	r3, [sp, #8]
 8011d36:	601f      	str	r7, [r3, #0]
 8011d38:	e6b0      	b.n	8011a9c <__gethex+0xf8>
 8011d3a:	4299      	cmp	r1, r3
 8011d3c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011d40:	d8d9      	bhi.n	8011cf6 <__gethex+0x352>
 8011d42:	68a3      	ldr	r3, [r4, #8]
 8011d44:	459b      	cmp	fp, r3
 8011d46:	db17      	blt.n	8011d78 <__gethex+0x3d4>
 8011d48:	6861      	ldr	r1, [r4, #4]
 8011d4a:	9801      	ldr	r0, [sp, #4]
 8011d4c:	3101      	adds	r1, #1
 8011d4e:	f000 f9c3 	bl	80120d8 <_Balloc>
 8011d52:	4681      	mov	r9, r0
 8011d54:	b918      	cbnz	r0, 8011d5e <__gethex+0x3ba>
 8011d56:	4b1a      	ldr	r3, [pc, #104]	@ (8011dc0 <__gethex+0x41c>)
 8011d58:	4602      	mov	r2, r0
 8011d5a:	2184      	movs	r1, #132	@ 0x84
 8011d5c:	e6c5      	b.n	8011aea <__gethex+0x146>
 8011d5e:	6922      	ldr	r2, [r4, #16]
 8011d60:	3202      	adds	r2, #2
 8011d62:	f104 010c 	add.w	r1, r4, #12
 8011d66:	0092      	lsls	r2, r2, #2
 8011d68:	300c      	adds	r0, #12
 8011d6a:	f7fe fefe 	bl	8010b6a <memcpy>
 8011d6e:	4621      	mov	r1, r4
 8011d70:	9801      	ldr	r0, [sp, #4]
 8011d72:	f000 f9f1 	bl	8012158 <_Bfree>
 8011d76:	464c      	mov	r4, r9
 8011d78:	6923      	ldr	r3, [r4, #16]
 8011d7a:	1c5a      	adds	r2, r3, #1
 8011d7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011d80:	6122      	str	r2, [r4, #16]
 8011d82:	2201      	movs	r2, #1
 8011d84:	615a      	str	r2, [r3, #20]
 8011d86:	e7be      	b.n	8011d06 <__gethex+0x362>
 8011d88:	6922      	ldr	r2, [r4, #16]
 8011d8a:	455a      	cmp	r2, fp
 8011d8c:	dd0b      	ble.n	8011da6 <__gethex+0x402>
 8011d8e:	2101      	movs	r1, #1
 8011d90:	4620      	mov	r0, r4
 8011d92:	f7ff fd9f 	bl	80118d4 <rshift>
 8011d96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011d9a:	3701      	adds	r7, #1
 8011d9c:	42bb      	cmp	r3, r7
 8011d9e:	f6ff aee0 	blt.w	8011b62 <__gethex+0x1be>
 8011da2:	2501      	movs	r5, #1
 8011da4:	e7c2      	b.n	8011d2c <__gethex+0x388>
 8011da6:	f016 061f 	ands.w	r6, r6, #31
 8011daa:	d0fa      	beq.n	8011da2 <__gethex+0x3fe>
 8011dac:	4453      	add	r3, sl
 8011dae:	f1c6 0620 	rsb	r6, r6, #32
 8011db2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011db6:	f000 fa81 	bl	80122bc <__hi0bits>
 8011dba:	42b0      	cmp	r0, r6
 8011dbc:	dbe7      	blt.n	8011d8e <__gethex+0x3ea>
 8011dbe:	e7f0      	b.n	8011da2 <__gethex+0x3fe>
 8011dc0:	08014675 	.word	0x08014675

08011dc4 <L_shift>:
 8011dc4:	f1c2 0208 	rsb	r2, r2, #8
 8011dc8:	0092      	lsls	r2, r2, #2
 8011dca:	b570      	push	{r4, r5, r6, lr}
 8011dcc:	f1c2 0620 	rsb	r6, r2, #32
 8011dd0:	6843      	ldr	r3, [r0, #4]
 8011dd2:	6804      	ldr	r4, [r0, #0]
 8011dd4:	fa03 f506 	lsl.w	r5, r3, r6
 8011dd8:	432c      	orrs	r4, r5
 8011dda:	40d3      	lsrs	r3, r2
 8011ddc:	6004      	str	r4, [r0, #0]
 8011dde:	f840 3f04 	str.w	r3, [r0, #4]!
 8011de2:	4288      	cmp	r0, r1
 8011de4:	d3f4      	bcc.n	8011dd0 <L_shift+0xc>
 8011de6:	bd70      	pop	{r4, r5, r6, pc}

08011de8 <__match>:
 8011de8:	b530      	push	{r4, r5, lr}
 8011dea:	6803      	ldr	r3, [r0, #0]
 8011dec:	3301      	adds	r3, #1
 8011dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011df2:	b914      	cbnz	r4, 8011dfa <__match+0x12>
 8011df4:	6003      	str	r3, [r0, #0]
 8011df6:	2001      	movs	r0, #1
 8011df8:	bd30      	pop	{r4, r5, pc}
 8011dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011dfe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011e02:	2d19      	cmp	r5, #25
 8011e04:	bf98      	it	ls
 8011e06:	3220      	addls	r2, #32
 8011e08:	42a2      	cmp	r2, r4
 8011e0a:	d0f0      	beq.n	8011dee <__match+0x6>
 8011e0c:	2000      	movs	r0, #0
 8011e0e:	e7f3      	b.n	8011df8 <__match+0x10>

08011e10 <__hexnan>:
 8011e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e14:	680b      	ldr	r3, [r1, #0]
 8011e16:	6801      	ldr	r1, [r0, #0]
 8011e18:	115e      	asrs	r6, r3, #5
 8011e1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011e1e:	f013 031f 	ands.w	r3, r3, #31
 8011e22:	b087      	sub	sp, #28
 8011e24:	bf18      	it	ne
 8011e26:	3604      	addne	r6, #4
 8011e28:	2500      	movs	r5, #0
 8011e2a:	1f37      	subs	r7, r6, #4
 8011e2c:	4682      	mov	sl, r0
 8011e2e:	4690      	mov	r8, r2
 8011e30:	9301      	str	r3, [sp, #4]
 8011e32:	f846 5c04 	str.w	r5, [r6, #-4]
 8011e36:	46b9      	mov	r9, r7
 8011e38:	463c      	mov	r4, r7
 8011e3a:	9502      	str	r5, [sp, #8]
 8011e3c:	46ab      	mov	fp, r5
 8011e3e:	784a      	ldrb	r2, [r1, #1]
 8011e40:	1c4b      	adds	r3, r1, #1
 8011e42:	9303      	str	r3, [sp, #12]
 8011e44:	b342      	cbz	r2, 8011e98 <__hexnan+0x88>
 8011e46:	4610      	mov	r0, r2
 8011e48:	9105      	str	r1, [sp, #20]
 8011e4a:	9204      	str	r2, [sp, #16]
 8011e4c:	f7ff fd94 	bl	8011978 <__hexdig_fun>
 8011e50:	2800      	cmp	r0, #0
 8011e52:	d151      	bne.n	8011ef8 <__hexnan+0xe8>
 8011e54:	9a04      	ldr	r2, [sp, #16]
 8011e56:	9905      	ldr	r1, [sp, #20]
 8011e58:	2a20      	cmp	r2, #32
 8011e5a:	d818      	bhi.n	8011e8e <__hexnan+0x7e>
 8011e5c:	9b02      	ldr	r3, [sp, #8]
 8011e5e:	459b      	cmp	fp, r3
 8011e60:	dd13      	ble.n	8011e8a <__hexnan+0x7a>
 8011e62:	454c      	cmp	r4, r9
 8011e64:	d206      	bcs.n	8011e74 <__hexnan+0x64>
 8011e66:	2d07      	cmp	r5, #7
 8011e68:	dc04      	bgt.n	8011e74 <__hexnan+0x64>
 8011e6a:	462a      	mov	r2, r5
 8011e6c:	4649      	mov	r1, r9
 8011e6e:	4620      	mov	r0, r4
 8011e70:	f7ff ffa8 	bl	8011dc4 <L_shift>
 8011e74:	4544      	cmp	r4, r8
 8011e76:	d952      	bls.n	8011f1e <__hexnan+0x10e>
 8011e78:	2300      	movs	r3, #0
 8011e7a:	f1a4 0904 	sub.w	r9, r4, #4
 8011e7e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011e82:	f8cd b008 	str.w	fp, [sp, #8]
 8011e86:	464c      	mov	r4, r9
 8011e88:	461d      	mov	r5, r3
 8011e8a:	9903      	ldr	r1, [sp, #12]
 8011e8c:	e7d7      	b.n	8011e3e <__hexnan+0x2e>
 8011e8e:	2a29      	cmp	r2, #41	@ 0x29
 8011e90:	d157      	bne.n	8011f42 <__hexnan+0x132>
 8011e92:	3102      	adds	r1, #2
 8011e94:	f8ca 1000 	str.w	r1, [sl]
 8011e98:	f1bb 0f00 	cmp.w	fp, #0
 8011e9c:	d051      	beq.n	8011f42 <__hexnan+0x132>
 8011e9e:	454c      	cmp	r4, r9
 8011ea0:	d206      	bcs.n	8011eb0 <__hexnan+0xa0>
 8011ea2:	2d07      	cmp	r5, #7
 8011ea4:	dc04      	bgt.n	8011eb0 <__hexnan+0xa0>
 8011ea6:	462a      	mov	r2, r5
 8011ea8:	4649      	mov	r1, r9
 8011eaa:	4620      	mov	r0, r4
 8011eac:	f7ff ff8a 	bl	8011dc4 <L_shift>
 8011eb0:	4544      	cmp	r4, r8
 8011eb2:	d936      	bls.n	8011f22 <__hexnan+0x112>
 8011eb4:	f1a8 0204 	sub.w	r2, r8, #4
 8011eb8:	4623      	mov	r3, r4
 8011eba:	f853 1b04 	ldr.w	r1, [r3], #4
 8011ebe:	f842 1f04 	str.w	r1, [r2, #4]!
 8011ec2:	429f      	cmp	r7, r3
 8011ec4:	d2f9      	bcs.n	8011eba <__hexnan+0xaa>
 8011ec6:	1b3b      	subs	r3, r7, r4
 8011ec8:	f023 0303 	bic.w	r3, r3, #3
 8011ecc:	3304      	adds	r3, #4
 8011ece:	3401      	adds	r4, #1
 8011ed0:	3e03      	subs	r6, #3
 8011ed2:	42b4      	cmp	r4, r6
 8011ed4:	bf88      	it	hi
 8011ed6:	2304      	movhi	r3, #4
 8011ed8:	4443      	add	r3, r8
 8011eda:	2200      	movs	r2, #0
 8011edc:	f843 2b04 	str.w	r2, [r3], #4
 8011ee0:	429f      	cmp	r7, r3
 8011ee2:	d2fb      	bcs.n	8011edc <__hexnan+0xcc>
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	b91b      	cbnz	r3, 8011ef0 <__hexnan+0xe0>
 8011ee8:	4547      	cmp	r7, r8
 8011eea:	d128      	bne.n	8011f3e <__hexnan+0x12e>
 8011eec:	2301      	movs	r3, #1
 8011eee:	603b      	str	r3, [r7, #0]
 8011ef0:	2005      	movs	r0, #5
 8011ef2:	b007      	add	sp, #28
 8011ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ef8:	3501      	adds	r5, #1
 8011efa:	2d08      	cmp	r5, #8
 8011efc:	f10b 0b01 	add.w	fp, fp, #1
 8011f00:	dd06      	ble.n	8011f10 <__hexnan+0x100>
 8011f02:	4544      	cmp	r4, r8
 8011f04:	d9c1      	bls.n	8011e8a <__hexnan+0x7a>
 8011f06:	2300      	movs	r3, #0
 8011f08:	f844 3c04 	str.w	r3, [r4, #-4]
 8011f0c:	2501      	movs	r5, #1
 8011f0e:	3c04      	subs	r4, #4
 8011f10:	6822      	ldr	r2, [r4, #0]
 8011f12:	f000 000f 	and.w	r0, r0, #15
 8011f16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011f1a:	6020      	str	r0, [r4, #0]
 8011f1c:	e7b5      	b.n	8011e8a <__hexnan+0x7a>
 8011f1e:	2508      	movs	r5, #8
 8011f20:	e7b3      	b.n	8011e8a <__hexnan+0x7a>
 8011f22:	9b01      	ldr	r3, [sp, #4]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d0dd      	beq.n	8011ee4 <__hexnan+0xd4>
 8011f28:	f1c3 0320 	rsb	r3, r3, #32
 8011f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8011f30:	40da      	lsrs	r2, r3
 8011f32:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011f36:	4013      	ands	r3, r2
 8011f38:	f846 3c04 	str.w	r3, [r6, #-4]
 8011f3c:	e7d2      	b.n	8011ee4 <__hexnan+0xd4>
 8011f3e:	3f04      	subs	r7, #4
 8011f40:	e7d0      	b.n	8011ee4 <__hexnan+0xd4>
 8011f42:	2004      	movs	r0, #4
 8011f44:	e7d5      	b.n	8011ef2 <__hexnan+0xe2>
	...

08011f48 <malloc>:
 8011f48:	4b02      	ldr	r3, [pc, #8]	@ (8011f54 <malloc+0xc>)
 8011f4a:	4601      	mov	r1, r0
 8011f4c:	6818      	ldr	r0, [r3, #0]
 8011f4e:	f000 b825 	b.w	8011f9c <_malloc_r>
 8011f52:	bf00      	nop
 8011f54:	20000240 	.word	0x20000240

08011f58 <sbrk_aligned>:
 8011f58:	b570      	push	{r4, r5, r6, lr}
 8011f5a:	4e0f      	ldr	r6, [pc, #60]	@ (8011f98 <sbrk_aligned+0x40>)
 8011f5c:	460c      	mov	r4, r1
 8011f5e:	6831      	ldr	r1, [r6, #0]
 8011f60:	4605      	mov	r5, r0
 8011f62:	b911      	cbnz	r1, 8011f6a <sbrk_aligned+0x12>
 8011f64:	f001 f810 	bl	8012f88 <_sbrk_r>
 8011f68:	6030      	str	r0, [r6, #0]
 8011f6a:	4621      	mov	r1, r4
 8011f6c:	4628      	mov	r0, r5
 8011f6e:	f001 f80b 	bl	8012f88 <_sbrk_r>
 8011f72:	1c43      	adds	r3, r0, #1
 8011f74:	d103      	bne.n	8011f7e <sbrk_aligned+0x26>
 8011f76:	f04f 34ff 	mov.w	r4, #4294967295
 8011f7a:	4620      	mov	r0, r4
 8011f7c:	bd70      	pop	{r4, r5, r6, pc}
 8011f7e:	1cc4      	adds	r4, r0, #3
 8011f80:	f024 0403 	bic.w	r4, r4, #3
 8011f84:	42a0      	cmp	r0, r4
 8011f86:	d0f8      	beq.n	8011f7a <sbrk_aligned+0x22>
 8011f88:	1a21      	subs	r1, r4, r0
 8011f8a:	4628      	mov	r0, r5
 8011f8c:	f000 fffc 	bl	8012f88 <_sbrk_r>
 8011f90:	3001      	adds	r0, #1
 8011f92:	d1f2      	bne.n	8011f7a <sbrk_aligned+0x22>
 8011f94:	e7ef      	b.n	8011f76 <sbrk_aligned+0x1e>
 8011f96:	bf00      	nop
 8011f98:	20000e9c 	.word	0x20000e9c

08011f9c <_malloc_r>:
 8011f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fa0:	1ccd      	adds	r5, r1, #3
 8011fa2:	f025 0503 	bic.w	r5, r5, #3
 8011fa6:	3508      	adds	r5, #8
 8011fa8:	2d0c      	cmp	r5, #12
 8011faa:	bf38      	it	cc
 8011fac:	250c      	movcc	r5, #12
 8011fae:	2d00      	cmp	r5, #0
 8011fb0:	4606      	mov	r6, r0
 8011fb2:	db01      	blt.n	8011fb8 <_malloc_r+0x1c>
 8011fb4:	42a9      	cmp	r1, r5
 8011fb6:	d904      	bls.n	8011fc2 <_malloc_r+0x26>
 8011fb8:	230c      	movs	r3, #12
 8011fba:	6033      	str	r3, [r6, #0]
 8011fbc:	2000      	movs	r0, #0
 8011fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012098 <_malloc_r+0xfc>
 8011fc6:	f000 f87b 	bl	80120c0 <__malloc_lock>
 8011fca:	f8d8 3000 	ldr.w	r3, [r8]
 8011fce:	461c      	mov	r4, r3
 8011fd0:	bb44      	cbnz	r4, 8012024 <_malloc_r+0x88>
 8011fd2:	4629      	mov	r1, r5
 8011fd4:	4630      	mov	r0, r6
 8011fd6:	f7ff ffbf 	bl	8011f58 <sbrk_aligned>
 8011fda:	1c43      	adds	r3, r0, #1
 8011fdc:	4604      	mov	r4, r0
 8011fde:	d158      	bne.n	8012092 <_malloc_r+0xf6>
 8011fe0:	f8d8 4000 	ldr.w	r4, [r8]
 8011fe4:	4627      	mov	r7, r4
 8011fe6:	2f00      	cmp	r7, #0
 8011fe8:	d143      	bne.n	8012072 <_malloc_r+0xd6>
 8011fea:	2c00      	cmp	r4, #0
 8011fec:	d04b      	beq.n	8012086 <_malloc_r+0xea>
 8011fee:	6823      	ldr	r3, [r4, #0]
 8011ff0:	4639      	mov	r1, r7
 8011ff2:	4630      	mov	r0, r6
 8011ff4:	eb04 0903 	add.w	r9, r4, r3
 8011ff8:	f000 ffc6 	bl	8012f88 <_sbrk_r>
 8011ffc:	4581      	cmp	r9, r0
 8011ffe:	d142      	bne.n	8012086 <_malloc_r+0xea>
 8012000:	6821      	ldr	r1, [r4, #0]
 8012002:	1a6d      	subs	r5, r5, r1
 8012004:	4629      	mov	r1, r5
 8012006:	4630      	mov	r0, r6
 8012008:	f7ff ffa6 	bl	8011f58 <sbrk_aligned>
 801200c:	3001      	adds	r0, #1
 801200e:	d03a      	beq.n	8012086 <_malloc_r+0xea>
 8012010:	6823      	ldr	r3, [r4, #0]
 8012012:	442b      	add	r3, r5
 8012014:	6023      	str	r3, [r4, #0]
 8012016:	f8d8 3000 	ldr.w	r3, [r8]
 801201a:	685a      	ldr	r2, [r3, #4]
 801201c:	bb62      	cbnz	r2, 8012078 <_malloc_r+0xdc>
 801201e:	f8c8 7000 	str.w	r7, [r8]
 8012022:	e00f      	b.n	8012044 <_malloc_r+0xa8>
 8012024:	6822      	ldr	r2, [r4, #0]
 8012026:	1b52      	subs	r2, r2, r5
 8012028:	d420      	bmi.n	801206c <_malloc_r+0xd0>
 801202a:	2a0b      	cmp	r2, #11
 801202c:	d917      	bls.n	801205e <_malloc_r+0xc2>
 801202e:	1961      	adds	r1, r4, r5
 8012030:	42a3      	cmp	r3, r4
 8012032:	6025      	str	r5, [r4, #0]
 8012034:	bf18      	it	ne
 8012036:	6059      	strne	r1, [r3, #4]
 8012038:	6863      	ldr	r3, [r4, #4]
 801203a:	bf08      	it	eq
 801203c:	f8c8 1000 	streq.w	r1, [r8]
 8012040:	5162      	str	r2, [r4, r5]
 8012042:	604b      	str	r3, [r1, #4]
 8012044:	4630      	mov	r0, r6
 8012046:	f000 f841 	bl	80120cc <__malloc_unlock>
 801204a:	f104 000b 	add.w	r0, r4, #11
 801204e:	1d23      	adds	r3, r4, #4
 8012050:	f020 0007 	bic.w	r0, r0, #7
 8012054:	1ac2      	subs	r2, r0, r3
 8012056:	bf1c      	itt	ne
 8012058:	1a1b      	subne	r3, r3, r0
 801205a:	50a3      	strne	r3, [r4, r2]
 801205c:	e7af      	b.n	8011fbe <_malloc_r+0x22>
 801205e:	6862      	ldr	r2, [r4, #4]
 8012060:	42a3      	cmp	r3, r4
 8012062:	bf0c      	ite	eq
 8012064:	f8c8 2000 	streq.w	r2, [r8]
 8012068:	605a      	strne	r2, [r3, #4]
 801206a:	e7eb      	b.n	8012044 <_malloc_r+0xa8>
 801206c:	4623      	mov	r3, r4
 801206e:	6864      	ldr	r4, [r4, #4]
 8012070:	e7ae      	b.n	8011fd0 <_malloc_r+0x34>
 8012072:	463c      	mov	r4, r7
 8012074:	687f      	ldr	r7, [r7, #4]
 8012076:	e7b6      	b.n	8011fe6 <_malloc_r+0x4a>
 8012078:	461a      	mov	r2, r3
 801207a:	685b      	ldr	r3, [r3, #4]
 801207c:	42a3      	cmp	r3, r4
 801207e:	d1fb      	bne.n	8012078 <_malloc_r+0xdc>
 8012080:	2300      	movs	r3, #0
 8012082:	6053      	str	r3, [r2, #4]
 8012084:	e7de      	b.n	8012044 <_malloc_r+0xa8>
 8012086:	230c      	movs	r3, #12
 8012088:	6033      	str	r3, [r6, #0]
 801208a:	4630      	mov	r0, r6
 801208c:	f000 f81e 	bl	80120cc <__malloc_unlock>
 8012090:	e794      	b.n	8011fbc <_malloc_r+0x20>
 8012092:	6005      	str	r5, [r0, #0]
 8012094:	e7d6      	b.n	8012044 <_malloc_r+0xa8>
 8012096:	bf00      	nop
 8012098:	20000ea0 	.word	0x20000ea0

0801209c <__ascii_mbtowc>:
 801209c:	b082      	sub	sp, #8
 801209e:	b901      	cbnz	r1, 80120a2 <__ascii_mbtowc+0x6>
 80120a0:	a901      	add	r1, sp, #4
 80120a2:	b142      	cbz	r2, 80120b6 <__ascii_mbtowc+0x1a>
 80120a4:	b14b      	cbz	r3, 80120ba <__ascii_mbtowc+0x1e>
 80120a6:	7813      	ldrb	r3, [r2, #0]
 80120a8:	600b      	str	r3, [r1, #0]
 80120aa:	7812      	ldrb	r2, [r2, #0]
 80120ac:	1e10      	subs	r0, r2, #0
 80120ae:	bf18      	it	ne
 80120b0:	2001      	movne	r0, #1
 80120b2:	b002      	add	sp, #8
 80120b4:	4770      	bx	lr
 80120b6:	4610      	mov	r0, r2
 80120b8:	e7fb      	b.n	80120b2 <__ascii_mbtowc+0x16>
 80120ba:	f06f 0001 	mvn.w	r0, #1
 80120be:	e7f8      	b.n	80120b2 <__ascii_mbtowc+0x16>

080120c0 <__malloc_lock>:
 80120c0:	4801      	ldr	r0, [pc, #4]	@ (80120c8 <__malloc_lock+0x8>)
 80120c2:	f7fe bd50 	b.w	8010b66 <__retarget_lock_acquire_recursive>
 80120c6:	bf00      	nop
 80120c8:	20000e98 	.word	0x20000e98

080120cc <__malloc_unlock>:
 80120cc:	4801      	ldr	r0, [pc, #4]	@ (80120d4 <__malloc_unlock+0x8>)
 80120ce:	f7fe bd4b 	b.w	8010b68 <__retarget_lock_release_recursive>
 80120d2:	bf00      	nop
 80120d4:	20000e98 	.word	0x20000e98

080120d8 <_Balloc>:
 80120d8:	b570      	push	{r4, r5, r6, lr}
 80120da:	69c6      	ldr	r6, [r0, #28]
 80120dc:	4604      	mov	r4, r0
 80120de:	460d      	mov	r5, r1
 80120e0:	b976      	cbnz	r6, 8012100 <_Balloc+0x28>
 80120e2:	2010      	movs	r0, #16
 80120e4:	f7ff ff30 	bl	8011f48 <malloc>
 80120e8:	4602      	mov	r2, r0
 80120ea:	61e0      	str	r0, [r4, #28]
 80120ec:	b920      	cbnz	r0, 80120f8 <_Balloc+0x20>
 80120ee:	4b18      	ldr	r3, [pc, #96]	@ (8012150 <_Balloc+0x78>)
 80120f0:	4818      	ldr	r0, [pc, #96]	@ (8012154 <_Balloc+0x7c>)
 80120f2:	216b      	movs	r1, #107	@ 0x6b
 80120f4:	f000 ff58 	bl	8012fa8 <__assert_func>
 80120f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120fc:	6006      	str	r6, [r0, #0]
 80120fe:	60c6      	str	r6, [r0, #12]
 8012100:	69e6      	ldr	r6, [r4, #28]
 8012102:	68f3      	ldr	r3, [r6, #12]
 8012104:	b183      	cbz	r3, 8012128 <_Balloc+0x50>
 8012106:	69e3      	ldr	r3, [r4, #28]
 8012108:	68db      	ldr	r3, [r3, #12]
 801210a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801210e:	b9b8      	cbnz	r0, 8012140 <_Balloc+0x68>
 8012110:	2101      	movs	r1, #1
 8012112:	fa01 f605 	lsl.w	r6, r1, r5
 8012116:	1d72      	adds	r2, r6, #5
 8012118:	0092      	lsls	r2, r2, #2
 801211a:	4620      	mov	r0, r4
 801211c:	f000 ff62 	bl	8012fe4 <_calloc_r>
 8012120:	b160      	cbz	r0, 801213c <_Balloc+0x64>
 8012122:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012126:	e00e      	b.n	8012146 <_Balloc+0x6e>
 8012128:	2221      	movs	r2, #33	@ 0x21
 801212a:	2104      	movs	r1, #4
 801212c:	4620      	mov	r0, r4
 801212e:	f000 ff59 	bl	8012fe4 <_calloc_r>
 8012132:	69e3      	ldr	r3, [r4, #28]
 8012134:	60f0      	str	r0, [r6, #12]
 8012136:	68db      	ldr	r3, [r3, #12]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d1e4      	bne.n	8012106 <_Balloc+0x2e>
 801213c:	2000      	movs	r0, #0
 801213e:	bd70      	pop	{r4, r5, r6, pc}
 8012140:	6802      	ldr	r2, [r0, #0]
 8012142:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012146:	2300      	movs	r3, #0
 8012148:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801214c:	e7f7      	b.n	801213e <_Balloc+0x66>
 801214e:	bf00      	nop
 8012150:	08014606 	.word	0x08014606
 8012154:	080146e6 	.word	0x080146e6

08012158 <_Bfree>:
 8012158:	b570      	push	{r4, r5, r6, lr}
 801215a:	69c6      	ldr	r6, [r0, #28]
 801215c:	4605      	mov	r5, r0
 801215e:	460c      	mov	r4, r1
 8012160:	b976      	cbnz	r6, 8012180 <_Bfree+0x28>
 8012162:	2010      	movs	r0, #16
 8012164:	f7ff fef0 	bl	8011f48 <malloc>
 8012168:	4602      	mov	r2, r0
 801216a:	61e8      	str	r0, [r5, #28]
 801216c:	b920      	cbnz	r0, 8012178 <_Bfree+0x20>
 801216e:	4b09      	ldr	r3, [pc, #36]	@ (8012194 <_Bfree+0x3c>)
 8012170:	4809      	ldr	r0, [pc, #36]	@ (8012198 <_Bfree+0x40>)
 8012172:	218f      	movs	r1, #143	@ 0x8f
 8012174:	f000 ff18 	bl	8012fa8 <__assert_func>
 8012178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801217c:	6006      	str	r6, [r0, #0]
 801217e:	60c6      	str	r6, [r0, #12]
 8012180:	b13c      	cbz	r4, 8012192 <_Bfree+0x3a>
 8012182:	69eb      	ldr	r3, [r5, #28]
 8012184:	6862      	ldr	r2, [r4, #4]
 8012186:	68db      	ldr	r3, [r3, #12]
 8012188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801218c:	6021      	str	r1, [r4, #0]
 801218e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012192:	bd70      	pop	{r4, r5, r6, pc}
 8012194:	08014606 	.word	0x08014606
 8012198:	080146e6 	.word	0x080146e6

0801219c <__multadd>:
 801219c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121a0:	690d      	ldr	r5, [r1, #16]
 80121a2:	4607      	mov	r7, r0
 80121a4:	460c      	mov	r4, r1
 80121a6:	461e      	mov	r6, r3
 80121a8:	f101 0c14 	add.w	ip, r1, #20
 80121ac:	2000      	movs	r0, #0
 80121ae:	f8dc 3000 	ldr.w	r3, [ip]
 80121b2:	b299      	uxth	r1, r3
 80121b4:	fb02 6101 	mla	r1, r2, r1, r6
 80121b8:	0c1e      	lsrs	r6, r3, #16
 80121ba:	0c0b      	lsrs	r3, r1, #16
 80121bc:	fb02 3306 	mla	r3, r2, r6, r3
 80121c0:	b289      	uxth	r1, r1
 80121c2:	3001      	adds	r0, #1
 80121c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80121c8:	4285      	cmp	r5, r0
 80121ca:	f84c 1b04 	str.w	r1, [ip], #4
 80121ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80121d2:	dcec      	bgt.n	80121ae <__multadd+0x12>
 80121d4:	b30e      	cbz	r6, 801221a <__multadd+0x7e>
 80121d6:	68a3      	ldr	r3, [r4, #8]
 80121d8:	42ab      	cmp	r3, r5
 80121da:	dc19      	bgt.n	8012210 <__multadd+0x74>
 80121dc:	6861      	ldr	r1, [r4, #4]
 80121de:	4638      	mov	r0, r7
 80121e0:	3101      	adds	r1, #1
 80121e2:	f7ff ff79 	bl	80120d8 <_Balloc>
 80121e6:	4680      	mov	r8, r0
 80121e8:	b928      	cbnz	r0, 80121f6 <__multadd+0x5a>
 80121ea:	4602      	mov	r2, r0
 80121ec:	4b0c      	ldr	r3, [pc, #48]	@ (8012220 <__multadd+0x84>)
 80121ee:	480d      	ldr	r0, [pc, #52]	@ (8012224 <__multadd+0x88>)
 80121f0:	21ba      	movs	r1, #186	@ 0xba
 80121f2:	f000 fed9 	bl	8012fa8 <__assert_func>
 80121f6:	6922      	ldr	r2, [r4, #16]
 80121f8:	3202      	adds	r2, #2
 80121fa:	f104 010c 	add.w	r1, r4, #12
 80121fe:	0092      	lsls	r2, r2, #2
 8012200:	300c      	adds	r0, #12
 8012202:	f7fe fcb2 	bl	8010b6a <memcpy>
 8012206:	4621      	mov	r1, r4
 8012208:	4638      	mov	r0, r7
 801220a:	f7ff ffa5 	bl	8012158 <_Bfree>
 801220e:	4644      	mov	r4, r8
 8012210:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012214:	3501      	adds	r5, #1
 8012216:	615e      	str	r6, [r3, #20]
 8012218:	6125      	str	r5, [r4, #16]
 801221a:	4620      	mov	r0, r4
 801221c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012220:	08014675 	.word	0x08014675
 8012224:	080146e6 	.word	0x080146e6

08012228 <__s2b>:
 8012228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801222c:	460c      	mov	r4, r1
 801222e:	4615      	mov	r5, r2
 8012230:	461f      	mov	r7, r3
 8012232:	2209      	movs	r2, #9
 8012234:	3308      	adds	r3, #8
 8012236:	4606      	mov	r6, r0
 8012238:	fb93 f3f2 	sdiv	r3, r3, r2
 801223c:	2100      	movs	r1, #0
 801223e:	2201      	movs	r2, #1
 8012240:	429a      	cmp	r2, r3
 8012242:	db09      	blt.n	8012258 <__s2b+0x30>
 8012244:	4630      	mov	r0, r6
 8012246:	f7ff ff47 	bl	80120d8 <_Balloc>
 801224a:	b940      	cbnz	r0, 801225e <__s2b+0x36>
 801224c:	4602      	mov	r2, r0
 801224e:	4b19      	ldr	r3, [pc, #100]	@ (80122b4 <__s2b+0x8c>)
 8012250:	4819      	ldr	r0, [pc, #100]	@ (80122b8 <__s2b+0x90>)
 8012252:	21d3      	movs	r1, #211	@ 0xd3
 8012254:	f000 fea8 	bl	8012fa8 <__assert_func>
 8012258:	0052      	lsls	r2, r2, #1
 801225a:	3101      	adds	r1, #1
 801225c:	e7f0      	b.n	8012240 <__s2b+0x18>
 801225e:	9b08      	ldr	r3, [sp, #32]
 8012260:	6143      	str	r3, [r0, #20]
 8012262:	2d09      	cmp	r5, #9
 8012264:	f04f 0301 	mov.w	r3, #1
 8012268:	6103      	str	r3, [r0, #16]
 801226a:	dd16      	ble.n	801229a <__s2b+0x72>
 801226c:	f104 0909 	add.w	r9, r4, #9
 8012270:	46c8      	mov	r8, r9
 8012272:	442c      	add	r4, r5
 8012274:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012278:	4601      	mov	r1, r0
 801227a:	3b30      	subs	r3, #48	@ 0x30
 801227c:	220a      	movs	r2, #10
 801227e:	4630      	mov	r0, r6
 8012280:	f7ff ff8c 	bl	801219c <__multadd>
 8012284:	45a0      	cmp	r8, r4
 8012286:	d1f5      	bne.n	8012274 <__s2b+0x4c>
 8012288:	f1a5 0408 	sub.w	r4, r5, #8
 801228c:	444c      	add	r4, r9
 801228e:	1b2d      	subs	r5, r5, r4
 8012290:	1963      	adds	r3, r4, r5
 8012292:	42bb      	cmp	r3, r7
 8012294:	db04      	blt.n	80122a0 <__s2b+0x78>
 8012296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801229a:	340a      	adds	r4, #10
 801229c:	2509      	movs	r5, #9
 801229e:	e7f6      	b.n	801228e <__s2b+0x66>
 80122a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80122a4:	4601      	mov	r1, r0
 80122a6:	3b30      	subs	r3, #48	@ 0x30
 80122a8:	220a      	movs	r2, #10
 80122aa:	4630      	mov	r0, r6
 80122ac:	f7ff ff76 	bl	801219c <__multadd>
 80122b0:	e7ee      	b.n	8012290 <__s2b+0x68>
 80122b2:	bf00      	nop
 80122b4:	08014675 	.word	0x08014675
 80122b8:	080146e6 	.word	0x080146e6

080122bc <__hi0bits>:
 80122bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80122c0:	4603      	mov	r3, r0
 80122c2:	bf36      	itet	cc
 80122c4:	0403      	lslcc	r3, r0, #16
 80122c6:	2000      	movcs	r0, #0
 80122c8:	2010      	movcc	r0, #16
 80122ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80122ce:	bf3c      	itt	cc
 80122d0:	021b      	lslcc	r3, r3, #8
 80122d2:	3008      	addcc	r0, #8
 80122d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80122d8:	bf3c      	itt	cc
 80122da:	011b      	lslcc	r3, r3, #4
 80122dc:	3004      	addcc	r0, #4
 80122de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80122e2:	bf3c      	itt	cc
 80122e4:	009b      	lslcc	r3, r3, #2
 80122e6:	3002      	addcc	r0, #2
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	db05      	blt.n	80122f8 <__hi0bits+0x3c>
 80122ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80122f0:	f100 0001 	add.w	r0, r0, #1
 80122f4:	bf08      	it	eq
 80122f6:	2020      	moveq	r0, #32
 80122f8:	4770      	bx	lr

080122fa <__lo0bits>:
 80122fa:	6803      	ldr	r3, [r0, #0]
 80122fc:	4602      	mov	r2, r0
 80122fe:	f013 0007 	ands.w	r0, r3, #7
 8012302:	d00b      	beq.n	801231c <__lo0bits+0x22>
 8012304:	07d9      	lsls	r1, r3, #31
 8012306:	d421      	bmi.n	801234c <__lo0bits+0x52>
 8012308:	0798      	lsls	r0, r3, #30
 801230a:	bf49      	itett	mi
 801230c:	085b      	lsrmi	r3, r3, #1
 801230e:	089b      	lsrpl	r3, r3, #2
 8012310:	2001      	movmi	r0, #1
 8012312:	6013      	strmi	r3, [r2, #0]
 8012314:	bf5c      	itt	pl
 8012316:	6013      	strpl	r3, [r2, #0]
 8012318:	2002      	movpl	r0, #2
 801231a:	4770      	bx	lr
 801231c:	b299      	uxth	r1, r3
 801231e:	b909      	cbnz	r1, 8012324 <__lo0bits+0x2a>
 8012320:	0c1b      	lsrs	r3, r3, #16
 8012322:	2010      	movs	r0, #16
 8012324:	b2d9      	uxtb	r1, r3
 8012326:	b909      	cbnz	r1, 801232c <__lo0bits+0x32>
 8012328:	3008      	adds	r0, #8
 801232a:	0a1b      	lsrs	r3, r3, #8
 801232c:	0719      	lsls	r1, r3, #28
 801232e:	bf04      	itt	eq
 8012330:	091b      	lsreq	r3, r3, #4
 8012332:	3004      	addeq	r0, #4
 8012334:	0799      	lsls	r1, r3, #30
 8012336:	bf04      	itt	eq
 8012338:	089b      	lsreq	r3, r3, #2
 801233a:	3002      	addeq	r0, #2
 801233c:	07d9      	lsls	r1, r3, #31
 801233e:	d403      	bmi.n	8012348 <__lo0bits+0x4e>
 8012340:	085b      	lsrs	r3, r3, #1
 8012342:	f100 0001 	add.w	r0, r0, #1
 8012346:	d003      	beq.n	8012350 <__lo0bits+0x56>
 8012348:	6013      	str	r3, [r2, #0]
 801234a:	4770      	bx	lr
 801234c:	2000      	movs	r0, #0
 801234e:	4770      	bx	lr
 8012350:	2020      	movs	r0, #32
 8012352:	4770      	bx	lr

08012354 <__i2b>:
 8012354:	b510      	push	{r4, lr}
 8012356:	460c      	mov	r4, r1
 8012358:	2101      	movs	r1, #1
 801235a:	f7ff febd 	bl	80120d8 <_Balloc>
 801235e:	4602      	mov	r2, r0
 8012360:	b928      	cbnz	r0, 801236e <__i2b+0x1a>
 8012362:	4b05      	ldr	r3, [pc, #20]	@ (8012378 <__i2b+0x24>)
 8012364:	4805      	ldr	r0, [pc, #20]	@ (801237c <__i2b+0x28>)
 8012366:	f240 1145 	movw	r1, #325	@ 0x145
 801236a:	f000 fe1d 	bl	8012fa8 <__assert_func>
 801236e:	2301      	movs	r3, #1
 8012370:	6144      	str	r4, [r0, #20]
 8012372:	6103      	str	r3, [r0, #16]
 8012374:	bd10      	pop	{r4, pc}
 8012376:	bf00      	nop
 8012378:	08014675 	.word	0x08014675
 801237c:	080146e6 	.word	0x080146e6

08012380 <__multiply>:
 8012380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012384:	4614      	mov	r4, r2
 8012386:	690a      	ldr	r2, [r1, #16]
 8012388:	6923      	ldr	r3, [r4, #16]
 801238a:	429a      	cmp	r2, r3
 801238c:	bfa8      	it	ge
 801238e:	4623      	movge	r3, r4
 8012390:	460f      	mov	r7, r1
 8012392:	bfa4      	itt	ge
 8012394:	460c      	movge	r4, r1
 8012396:	461f      	movge	r7, r3
 8012398:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801239c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80123a0:	68a3      	ldr	r3, [r4, #8]
 80123a2:	6861      	ldr	r1, [r4, #4]
 80123a4:	eb0a 0609 	add.w	r6, sl, r9
 80123a8:	42b3      	cmp	r3, r6
 80123aa:	b085      	sub	sp, #20
 80123ac:	bfb8      	it	lt
 80123ae:	3101      	addlt	r1, #1
 80123b0:	f7ff fe92 	bl	80120d8 <_Balloc>
 80123b4:	b930      	cbnz	r0, 80123c4 <__multiply+0x44>
 80123b6:	4602      	mov	r2, r0
 80123b8:	4b44      	ldr	r3, [pc, #272]	@ (80124cc <__multiply+0x14c>)
 80123ba:	4845      	ldr	r0, [pc, #276]	@ (80124d0 <__multiply+0x150>)
 80123bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80123c0:	f000 fdf2 	bl	8012fa8 <__assert_func>
 80123c4:	f100 0514 	add.w	r5, r0, #20
 80123c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80123cc:	462b      	mov	r3, r5
 80123ce:	2200      	movs	r2, #0
 80123d0:	4543      	cmp	r3, r8
 80123d2:	d321      	bcc.n	8012418 <__multiply+0x98>
 80123d4:	f107 0114 	add.w	r1, r7, #20
 80123d8:	f104 0214 	add.w	r2, r4, #20
 80123dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80123e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80123e4:	9302      	str	r3, [sp, #8]
 80123e6:	1b13      	subs	r3, r2, r4
 80123e8:	3b15      	subs	r3, #21
 80123ea:	f023 0303 	bic.w	r3, r3, #3
 80123ee:	3304      	adds	r3, #4
 80123f0:	f104 0715 	add.w	r7, r4, #21
 80123f4:	42ba      	cmp	r2, r7
 80123f6:	bf38      	it	cc
 80123f8:	2304      	movcc	r3, #4
 80123fa:	9301      	str	r3, [sp, #4]
 80123fc:	9b02      	ldr	r3, [sp, #8]
 80123fe:	9103      	str	r1, [sp, #12]
 8012400:	428b      	cmp	r3, r1
 8012402:	d80c      	bhi.n	801241e <__multiply+0x9e>
 8012404:	2e00      	cmp	r6, #0
 8012406:	dd03      	ble.n	8012410 <__multiply+0x90>
 8012408:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801240c:	2b00      	cmp	r3, #0
 801240e:	d05b      	beq.n	80124c8 <__multiply+0x148>
 8012410:	6106      	str	r6, [r0, #16]
 8012412:	b005      	add	sp, #20
 8012414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012418:	f843 2b04 	str.w	r2, [r3], #4
 801241c:	e7d8      	b.n	80123d0 <__multiply+0x50>
 801241e:	f8b1 a000 	ldrh.w	sl, [r1]
 8012422:	f1ba 0f00 	cmp.w	sl, #0
 8012426:	d024      	beq.n	8012472 <__multiply+0xf2>
 8012428:	f104 0e14 	add.w	lr, r4, #20
 801242c:	46a9      	mov	r9, r5
 801242e:	f04f 0c00 	mov.w	ip, #0
 8012432:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012436:	f8d9 3000 	ldr.w	r3, [r9]
 801243a:	fa1f fb87 	uxth.w	fp, r7
 801243e:	b29b      	uxth	r3, r3
 8012440:	fb0a 330b 	mla	r3, sl, fp, r3
 8012444:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012448:	f8d9 7000 	ldr.w	r7, [r9]
 801244c:	4463      	add	r3, ip
 801244e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012452:	fb0a c70b 	mla	r7, sl, fp, ip
 8012456:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801245a:	b29b      	uxth	r3, r3
 801245c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012460:	4572      	cmp	r2, lr
 8012462:	f849 3b04 	str.w	r3, [r9], #4
 8012466:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801246a:	d8e2      	bhi.n	8012432 <__multiply+0xb2>
 801246c:	9b01      	ldr	r3, [sp, #4]
 801246e:	f845 c003 	str.w	ip, [r5, r3]
 8012472:	9b03      	ldr	r3, [sp, #12]
 8012474:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012478:	3104      	adds	r1, #4
 801247a:	f1b9 0f00 	cmp.w	r9, #0
 801247e:	d021      	beq.n	80124c4 <__multiply+0x144>
 8012480:	682b      	ldr	r3, [r5, #0]
 8012482:	f104 0c14 	add.w	ip, r4, #20
 8012486:	46ae      	mov	lr, r5
 8012488:	f04f 0a00 	mov.w	sl, #0
 801248c:	f8bc b000 	ldrh.w	fp, [ip]
 8012490:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012494:	fb09 770b 	mla	r7, r9, fp, r7
 8012498:	4457      	add	r7, sl
 801249a:	b29b      	uxth	r3, r3
 801249c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80124a0:	f84e 3b04 	str.w	r3, [lr], #4
 80124a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80124a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80124ac:	f8be 3000 	ldrh.w	r3, [lr]
 80124b0:	fb09 330a 	mla	r3, r9, sl, r3
 80124b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80124b8:	4562      	cmp	r2, ip
 80124ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80124be:	d8e5      	bhi.n	801248c <__multiply+0x10c>
 80124c0:	9f01      	ldr	r7, [sp, #4]
 80124c2:	51eb      	str	r3, [r5, r7]
 80124c4:	3504      	adds	r5, #4
 80124c6:	e799      	b.n	80123fc <__multiply+0x7c>
 80124c8:	3e01      	subs	r6, #1
 80124ca:	e79b      	b.n	8012404 <__multiply+0x84>
 80124cc:	08014675 	.word	0x08014675
 80124d0:	080146e6 	.word	0x080146e6

080124d4 <__pow5mult>:
 80124d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124d8:	4615      	mov	r5, r2
 80124da:	f012 0203 	ands.w	r2, r2, #3
 80124de:	4607      	mov	r7, r0
 80124e0:	460e      	mov	r6, r1
 80124e2:	d007      	beq.n	80124f4 <__pow5mult+0x20>
 80124e4:	4c25      	ldr	r4, [pc, #148]	@ (801257c <__pow5mult+0xa8>)
 80124e6:	3a01      	subs	r2, #1
 80124e8:	2300      	movs	r3, #0
 80124ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80124ee:	f7ff fe55 	bl	801219c <__multadd>
 80124f2:	4606      	mov	r6, r0
 80124f4:	10ad      	asrs	r5, r5, #2
 80124f6:	d03d      	beq.n	8012574 <__pow5mult+0xa0>
 80124f8:	69fc      	ldr	r4, [r7, #28]
 80124fa:	b97c      	cbnz	r4, 801251c <__pow5mult+0x48>
 80124fc:	2010      	movs	r0, #16
 80124fe:	f7ff fd23 	bl	8011f48 <malloc>
 8012502:	4602      	mov	r2, r0
 8012504:	61f8      	str	r0, [r7, #28]
 8012506:	b928      	cbnz	r0, 8012514 <__pow5mult+0x40>
 8012508:	4b1d      	ldr	r3, [pc, #116]	@ (8012580 <__pow5mult+0xac>)
 801250a:	481e      	ldr	r0, [pc, #120]	@ (8012584 <__pow5mult+0xb0>)
 801250c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012510:	f000 fd4a 	bl	8012fa8 <__assert_func>
 8012514:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012518:	6004      	str	r4, [r0, #0]
 801251a:	60c4      	str	r4, [r0, #12]
 801251c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012520:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012524:	b94c      	cbnz	r4, 801253a <__pow5mult+0x66>
 8012526:	f240 2171 	movw	r1, #625	@ 0x271
 801252a:	4638      	mov	r0, r7
 801252c:	f7ff ff12 	bl	8012354 <__i2b>
 8012530:	2300      	movs	r3, #0
 8012532:	f8c8 0008 	str.w	r0, [r8, #8]
 8012536:	4604      	mov	r4, r0
 8012538:	6003      	str	r3, [r0, #0]
 801253a:	f04f 0900 	mov.w	r9, #0
 801253e:	07eb      	lsls	r3, r5, #31
 8012540:	d50a      	bpl.n	8012558 <__pow5mult+0x84>
 8012542:	4631      	mov	r1, r6
 8012544:	4622      	mov	r2, r4
 8012546:	4638      	mov	r0, r7
 8012548:	f7ff ff1a 	bl	8012380 <__multiply>
 801254c:	4631      	mov	r1, r6
 801254e:	4680      	mov	r8, r0
 8012550:	4638      	mov	r0, r7
 8012552:	f7ff fe01 	bl	8012158 <_Bfree>
 8012556:	4646      	mov	r6, r8
 8012558:	106d      	asrs	r5, r5, #1
 801255a:	d00b      	beq.n	8012574 <__pow5mult+0xa0>
 801255c:	6820      	ldr	r0, [r4, #0]
 801255e:	b938      	cbnz	r0, 8012570 <__pow5mult+0x9c>
 8012560:	4622      	mov	r2, r4
 8012562:	4621      	mov	r1, r4
 8012564:	4638      	mov	r0, r7
 8012566:	f7ff ff0b 	bl	8012380 <__multiply>
 801256a:	6020      	str	r0, [r4, #0]
 801256c:	f8c0 9000 	str.w	r9, [r0]
 8012570:	4604      	mov	r4, r0
 8012572:	e7e4      	b.n	801253e <__pow5mult+0x6a>
 8012574:	4630      	mov	r0, r6
 8012576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801257a:	bf00      	nop
 801257c:	08014740 	.word	0x08014740
 8012580:	08014606 	.word	0x08014606
 8012584:	080146e6 	.word	0x080146e6

08012588 <__lshift>:
 8012588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801258c:	460c      	mov	r4, r1
 801258e:	6849      	ldr	r1, [r1, #4]
 8012590:	6923      	ldr	r3, [r4, #16]
 8012592:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012596:	68a3      	ldr	r3, [r4, #8]
 8012598:	4607      	mov	r7, r0
 801259a:	4691      	mov	r9, r2
 801259c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80125a0:	f108 0601 	add.w	r6, r8, #1
 80125a4:	42b3      	cmp	r3, r6
 80125a6:	db0b      	blt.n	80125c0 <__lshift+0x38>
 80125a8:	4638      	mov	r0, r7
 80125aa:	f7ff fd95 	bl	80120d8 <_Balloc>
 80125ae:	4605      	mov	r5, r0
 80125b0:	b948      	cbnz	r0, 80125c6 <__lshift+0x3e>
 80125b2:	4602      	mov	r2, r0
 80125b4:	4b28      	ldr	r3, [pc, #160]	@ (8012658 <__lshift+0xd0>)
 80125b6:	4829      	ldr	r0, [pc, #164]	@ (801265c <__lshift+0xd4>)
 80125b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80125bc:	f000 fcf4 	bl	8012fa8 <__assert_func>
 80125c0:	3101      	adds	r1, #1
 80125c2:	005b      	lsls	r3, r3, #1
 80125c4:	e7ee      	b.n	80125a4 <__lshift+0x1c>
 80125c6:	2300      	movs	r3, #0
 80125c8:	f100 0114 	add.w	r1, r0, #20
 80125cc:	f100 0210 	add.w	r2, r0, #16
 80125d0:	4618      	mov	r0, r3
 80125d2:	4553      	cmp	r3, sl
 80125d4:	db33      	blt.n	801263e <__lshift+0xb6>
 80125d6:	6920      	ldr	r0, [r4, #16]
 80125d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80125dc:	f104 0314 	add.w	r3, r4, #20
 80125e0:	f019 091f 	ands.w	r9, r9, #31
 80125e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80125e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80125ec:	d02b      	beq.n	8012646 <__lshift+0xbe>
 80125ee:	f1c9 0e20 	rsb	lr, r9, #32
 80125f2:	468a      	mov	sl, r1
 80125f4:	2200      	movs	r2, #0
 80125f6:	6818      	ldr	r0, [r3, #0]
 80125f8:	fa00 f009 	lsl.w	r0, r0, r9
 80125fc:	4310      	orrs	r0, r2
 80125fe:	f84a 0b04 	str.w	r0, [sl], #4
 8012602:	f853 2b04 	ldr.w	r2, [r3], #4
 8012606:	459c      	cmp	ip, r3
 8012608:	fa22 f20e 	lsr.w	r2, r2, lr
 801260c:	d8f3      	bhi.n	80125f6 <__lshift+0x6e>
 801260e:	ebac 0304 	sub.w	r3, ip, r4
 8012612:	3b15      	subs	r3, #21
 8012614:	f023 0303 	bic.w	r3, r3, #3
 8012618:	3304      	adds	r3, #4
 801261a:	f104 0015 	add.w	r0, r4, #21
 801261e:	4584      	cmp	ip, r0
 8012620:	bf38      	it	cc
 8012622:	2304      	movcc	r3, #4
 8012624:	50ca      	str	r2, [r1, r3]
 8012626:	b10a      	cbz	r2, 801262c <__lshift+0xa4>
 8012628:	f108 0602 	add.w	r6, r8, #2
 801262c:	3e01      	subs	r6, #1
 801262e:	4638      	mov	r0, r7
 8012630:	612e      	str	r6, [r5, #16]
 8012632:	4621      	mov	r1, r4
 8012634:	f7ff fd90 	bl	8012158 <_Bfree>
 8012638:	4628      	mov	r0, r5
 801263a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801263e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012642:	3301      	adds	r3, #1
 8012644:	e7c5      	b.n	80125d2 <__lshift+0x4a>
 8012646:	3904      	subs	r1, #4
 8012648:	f853 2b04 	ldr.w	r2, [r3], #4
 801264c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012650:	459c      	cmp	ip, r3
 8012652:	d8f9      	bhi.n	8012648 <__lshift+0xc0>
 8012654:	e7ea      	b.n	801262c <__lshift+0xa4>
 8012656:	bf00      	nop
 8012658:	08014675 	.word	0x08014675
 801265c:	080146e6 	.word	0x080146e6

08012660 <__mcmp>:
 8012660:	690a      	ldr	r2, [r1, #16]
 8012662:	4603      	mov	r3, r0
 8012664:	6900      	ldr	r0, [r0, #16]
 8012666:	1a80      	subs	r0, r0, r2
 8012668:	b530      	push	{r4, r5, lr}
 801266a:	d10e      	bne.n	801268a <__mcmp+0x2a>
 801266c:	3314      	adds	r3, #20
 801266e:	3114      	adds	r1, #20
 8012670:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012674:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012678:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801267c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012680:	4295      	cmp	r5, r2
 8012682:	d003      	beq.n	801268c <__mcmp+0x2c>
 8012684:	d205      	bcs.n	8012692 <__mcmp+0x32>
 8012686:	f04f 30ff 	mov.w	r0, #4294967295
 801268a:	bd30      	pop	{r4, r5, pc}
 801268c:	42a3      	cmp	r3, r4
 801268e:	d3f3      	bcc.n	8012678 <__mcmp+0x18>
 8012690:	e7fb      	b.n	801268a <__mcmp+0x2a>
 8012692:	2001      	movs	r0, #1
 8012694:	e7f9      	b.n	801268a <__mcmp+0x2a>
	...

08012698 <__mdiff>:
 8012698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801269c:	4689      	mov	r9, r1
 801269e:	4606      	mov	r6, r0
 80126a0:	4611      	mov	r1, r2
 80126a2:	4648      	mov	r0, r9
 80126a4:	4614      	mov	r4, r2
 80126a6:	f7ff ffdb 	bl	8012660 <__mcmp>
 80126aa:	1e05      	subs	r5, r0, #0
 80126ac:	d112      	bne.n	80126d4 <__mdiff+0x3c>
 80126ae:	4629      	mov	r1, r5
 80126b0:	4630      	mov	r0, r6
 80126b2:	f7ff fd11 	bl	80120d8 <_Balloc>
 80126b6:	4602      	mov	r2, r0
 80126b8:	b928      	cbnz	r0, 80126c6 <__mdiff+0x2e>
 80126ba:	4b3f      	ldr	r3, [pc, #252]	@ (80127b8 <__mdiff+0x120>)
 80126bc:	f240 2137 	movw	r1, #567	@ 0x237
 80126c0:	483e      	ldr	r0, [pc, #248]	@ (80127bc <__mdiff+0x124>)
 80126c2:	f000 fc71 	bl	8012fa8 <__assert_func>
 80126c6:	2301      	movs	r3, #1
 80126c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80126cc:	4610      	mov	r0, r2
 80126ce:	b003      	add	sp, #12
 80126d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126d4:	bfbc      	itt	lt
 80126d6:	464b      	movlt	r3, r9
 80126d8:	46a1      	movlt	r9, r4
 80126da:	4630      	mov	r0, r6
 80126dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80126e0:	bfba      	itte	lt
 80126e2:	461c      	movlt	r4, r3
 80126e4:	2501      	movlt	r5, #1
 80126e6:	2500      	movge	r5, #0
 80126e8:	f7ff fcf6 	bl	80120d8 <_Balloc>
 80126ec:	4602      	mov	r2, r0
 80126ee:	b918      	cbnz	r0, 80126f8 <__mdiff+0x60>
 80126f0:	4b31      	ldr	r3, [pc, #196]	@ (80127b8 <__mdiff+0x120>)
 80126f2:	f240 2145 	movw	r1, #581	@ 0x245
 80126f6:	e7e3      	b.n	80126c0 <__mdiff+0x28>
 80126f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80126fc:	6926      	ldr	r6, [r4, #16]
 80126fe:	60c5      	str	r5, [r0, #12]
 8012700:	f109 0310 	add.w	r3, r9, #16
 8012704:	f109 0514 	add.w	r5, r9, #20
 8012708:	f104 0e14 	add.w	lr, r4, #20
 801270c:	f100 0b14 	add.w	fp, r0, #20
 8012710:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012714:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012718:	9301      	str	r3, [sp, #4]
 801271a:	46d9      	mov	r9, fp
 801271c:	f04f 0c00 	mov.w	ip, #0
 8012720:	9b01      	ldr	r3, [sp, #4]
 8012722:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012726:	f853 af04 	ldr.w	sl, [r3, #4]!
 801272a:	9301      	str	r3, [sp, #4]
 801272c:	fa1f f38a 	uxth.w	r3, sl
 8012730:	4619      	mov	r1, r3
 8012732:	b283      	uxth	r3, r0
 8012734:	1acb      	subs	r3, r1, r3
 8012736:	0c00      	lsrs	r0, r0, #16
 8012738:	4463      	add	r3, ip
 801273a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801273e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012742:	b29b      	uxth	r3, r3
 8012744:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012748:	4576      	cmp	r6, lr
 801274a:	f849 3b04 	str.w	r3, [r9], #4
 801274e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012752:	d8e5      	bhi.n	8012720 <__mdiff+0x88>
 8012754:	1b33      	subs	r3, r6, r4
 8012756:	3b15      	subs	r3, #21
 8012758:	f023 0303 	bic.w	r3, r3, #3
 801275c:	3415      	adds	r4, #21
 801275e:	3304      	adds	r3, #4
 8012760:	42a6      	cmp	r6, r4
 8012762:	bf38      	it	cc
 8012764:	2304      	movcc	r3, #4
 8012766:	441d      	add	r5, r3
 8012768:	445b      	add	r3, fp
 801276a:	461e      	mov	r6, r3
 801276c:	462c      	mov	r4, r5
 801276e:	4544      	cmp	r4, r8
 8012770:	d30e      	bcc.n	8012790 <__mdiff+0xf8>
 8012772:	f108 0103 	add.w	r1, r8, #3
 8012776:	1b49      	subs	r1, r1, r5
 8012778:	f021 0103 	bic.w	r1, r1, #3
 801277c:	3d03      	subs	r5, #3
 801277e:	45a8      	cmp	r8, r5
 8012780:	bf38      	it	cc
 8012782:	2100      	movcc	r1, #0
 8012784:	440b      	add	r3, r1
 8012786:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801278a:	b191      	cbz	r1, 80127b2 <__mdiff+0x11a>
 801278c:	6117      	str	r7, [r2, #16]
 801278e:	e79d      	b.n	80126cc <__mdiff+0x34>
 8012790:	f854 1b04 	ldr.w	r1, [r4], #4
 8012794:	46e6      	mov	lr, ip
 8012796:	0c08      	lsrs	r0, r1, #16
 8012798:	fa1c fc81 	uxtah	ip, ip, r1
 801279c:	4471      	add	r1, lr
 801279e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80127a2:	b289      	uxth	r1, r1
 80127a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80127a8:	f846 1b04 	str.w	r1, [r6], #4
 80127ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80127b0:	e7dd      	b.n	801276e <__mdiff+0xd6>
 80127b2:	3f01      	subs	r7, #1
 80127b4:	e7e7      	b.n	8012786 <__mdiff+0xee>
 80127b6:	bf00      	nop
 80127b8:	08014675 	.word	0x08014675
 80127bc:	080146e6 	.word	0x080146e6

080127c0 <__ulp>:
 80127c0:	b082      	sub	sp, #8
 80127c2:	ed8d 0b00 	vstr	d0, [sp]
 80127c6:	9a01      	ldr	r2, [sp, #4]
 80127c8:	4b0f      	ldr	r3, [pc, #60]	@ (8012808 <__ulp+0x48>)
 80127ca:	4013      	ands	r3, r2
 80127cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	dc08      	bgt.n	80127e6 <__ulp+0x26>
 80127d4:	425b      	negs	r3, r3
 80127d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80127da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80127de:	da04      	bge.n	80127ea <__ulp+0x2a>
 80127e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80127e4:	4113      	asrs	r3, r2
 80127e6:	2200      	movs	r2, #0
 80127e8:	e008      	b.n	80127fc <__ulp+0x3c>
 80127ea:	f1a2 0314 	sub.w	r3, r2, #20
 80127ee:	2b1e      	cmp	r3, #30
 80127f0:	bfda      	itte	le
 80127f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80127f6:	40da      	lsrle	r2, r3
 80127f8:	2201      	movgt	r2, #1
 80127fa:	2300      	movs	r3, #0
 80127fc:	4619      	mov	r1, r3
 80127fe:	4610      	mov	r0, r2
 8012800:	ec41 0b10 	vmov	d0, r0, r1
 8012804:	b002      	add	sp, #8
 8012806:	4770      	bx	lr
 8012808:	7ff00000 	.word	0x7ff00000

0801280c <__b2d>:
 801280c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012810:	6906      	ldr	r6, [r0, #16]
 8012812:	f100 0814 	add.w	r8, r0, #20
 8012816:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801281a:	1f37      	subs	r7, r6, #4
 801281c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012820:	4610      	mov	r0, r2
 8012822:	f7ff fd4b 	bl	80122bc <__hi0bits>
 8012826:	f1c0 0320 	rsb	r3, r0, #32
 801282a:	280a      	cmp	r0, #10
 801282c:	600b      	str	r3, [r1, #0]
 801282e:	491b      	ldr	r1, [pc, #108]	@ (801289c <__b2d+0x90>)
 8012830:	dc15      	bgt.n	801285e <__b2d+0x52>
 8012832:	f1c0 0c0b 	rsb	ip, r0, #11
 8012836:	fa22 f30c 	lsr.w	r3, r2, ip
 801283a:	45b8      	cmp	r8, r7
 801283c:	ea43 0501 	orr.w	r5, r3, r1
 8012840:	bf34      	ite	cc
 8012842:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012846:	2300      	movcs	r3, #0
 8012848:	3015      	adds	r0, #21
 801284a:	fa02 f000 	lsl.w	r0, r2, r0
 801284e:	fa23 f30c 	lsr.w	r3, r3, ip
 8012852:	4303      	orrs	r3, r0
 8012854:	461c      	mov	r4, r3
 8012856:	ec45 4b10 	vmov	d0, r4, r5
 801285a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801285e:	45b8      	cmp	r8, r7
 8012860:	bf3a      	itte	cc
 8012862:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012866:	f1a6 0708 	subcc.w	r7, r6, #8
 801286a:	2300      	movcs	r3, #0
 801286c:	380b      	subs	r0, #11
 801286e:	d012      	beq.n	8012896 <__b2d+0x8a>
 8012870:	f1c0 0120 	rsb	r1, r0, #32
 8012874:	fa23 f401 	lsr.w	r4, r3, r1
 8012878:	4082      	lsls	r2, r0
 801287a:	4322      	orrs	r2, r4
 801287c:	4547      	cmp	r7, r8
 801287e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012882:	bf8c      	ite	hi
 8012884:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012888:	2200      	movls	r2, #0
 801288a:	4083      	lsls	r3, r0
 801288c:	40ca      	lsrs	r2, r1
 801288e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012892:	4313      	orrs	r3, r2
 8012894:	e7de      	b.n	8012854 <__b2d+0x48>
 8012896:	ea42 0501 	orr.w	r5, r2, r1
 801289a:	e7db      	b.n	8012854 <__b2d+0x48>
 801289c:	3ff00000 	.word	0x3ff00000

080128a0 <__d2b>:
 80128a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80128a4:	460f      	mov	r7, r1
 80128a6:	2101      	movs	r1, #1
 80128a8:	ec59 8b10 	vmov	r8, r9, d0
 80128ac:	4616      	mov	r6, r2
 80128ae:	f7ff fc13 	bl	80120d8 <_Balloc>
 80128b2:	4604      	mov	r4, r0
 80128b4:	b930      	cbnz	r0, 80128c4 <__d2b+0x24>
 80128b6:	4602      	mov	r2, r0
 80128b8:	4b23      	ldr	r3, [pc, #140]	@ (8012948 <__d2b+0xa8>)
 80128ba:	4824      	ldr	r0, [pc, #144]	@ (801294c <__d2b+0xac>)
 80128bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80128c0:	f000 fb72 	bl	8012fa8 <__assert_func>
 80128c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80128c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80128cc:	b10d      	cbz	r5, 80128d2 <__d2b+0x32>
 80128ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80128d2:	9301      	str	r3, [sp, #4]
 80128d4:	f1b8 0300 	subs.w	r3, r8, #0
 80128d8:	d023      	beq.n	8012922 <__d2b+0x82>
 80128da:	4668      	mov	r0, sp
 80128dc:	9300      	str	r3, [sp, #0]
 80128de:	f7ff fd0c 	bl	80122fa <__lo0bits>
 80128e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80128e6:	b1d0      	cbz	r0, 801291e <__d2b+0x7e>
 80128e8:	f1c0 0320 	rsb	r3, r0, #32
 80128ec:	fa02 f303 	lsl.w	r3, r2, r3
 80128f0:	430b      	orrs	r3, r1
 80128f2:	40c2      	lsrs	r2, r0
 80128f4:	6163      	str	r3, [r4, #20]
 80128f6:	9201      	str	r2, [sp, #4]
 80128f8:	9b01      	ldr	r3, [sp, #4]
 80128fa:	61a3      	str	r3, [r4, #24]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	bf0c      	ite	eq
 8012900:	2201      	moveq	r2, #1
 8012902:	2202      	movne	r2, #2
 8012904:	6122      	str	r2, [r4, #16]
 8012906:	b1a5      	cbz	r5, 8012932 <__d2b+0x92>
 8012908:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801290c:	4405      	add	r5, r0
 801290e:	603d      	str	r5, [r7, #0]
 8012910:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012914:	6030      	str	r0, [r6, #0]
 8012916:	4620      	mov	r0, r4
 8012918:	b003      	add	sp, #12
 801291a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801291e:	6161      	str	r1, [r4, #20]
 8012920:	e7ea      	b.n	80128f8 <__d2b+0x58>
 8012922:	a801      	add	r0, sp, #4
 8012924:	f7ff fce9 	bl	80122fa <__lo0bits>
 8012928:	9b01      	ldr	r3, [sp, #4]
 801292a:	6163      	str	r3, [r4, #20]
 801292c:	3020      	adds	r0, #32
 801292e:	2201      	movs	r2, #1
 8012930:	e7e8      	b.n	8012904 <__d2b+0x64>
 8012932:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012936:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801293a:	6038      	str	r0, [r7, #0]
 801293c:	6918      	ldr	r0, [r3, #16]
 801293e:	f7ff fcbd 	bl	80122bc <__hi0bits>
 8012942:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012946:	e7e5      	b.n	8012914 <__d2b+0x74>
 8012948:	08014675 	.word	0x08014675
 801294c:	080146e6 	.word	0x080146e6

08012950 <__ratio>:
 8012950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012954:	b085      	sub	sp, #20
 8012956:	e9cd 1000 	strd	r1, r0, [sp]
 801295a:	a902      	add	r1, sp, #8
 801295c:	f7ff ff56 	bl	801280c <__b2d>
 8012960:	9800      	ldr	r0, [sp, #0]
 8012962:	a903      	add	r1, sp, #12
 8012964:	ec55 4b10 	vmov	r4, r5, d0
 8012968:	f7ff ff50 	bl	801280c <__b2d>
 801296c:	9b01      	ldr	r3, [sp, #4]
 801296e:	6919      	ldr	r1, [r3, #16]
 8012970:	9b00      	ldr	r3, [sp, #0]
 8012972:	691b      	ldr	r3, [r3, #16]
 8012974:	1ac9      	subs	r1, r1, r3
 8012976:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801297a:	1a9b      	subs	r3, r3, r2
 801297c:	ec5b ab10 	vmov	sl, fp, d0
 8012980:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012984:	2b00      	cmp	r3, #0
 8012986:	bfce      	itee	gt
 8012988:	462a      	movgt	r2, r5
 801298a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801298e:	465a      	movle	r2, fp
 8012990:	462f      	mov	r7, r5
 8012992:	46d9      	mov	r9, fp
 8012994:	bfcc      	ite	gt
 8012996:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801299a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801299e:	464b      	mov	r3, r9
 80129a0:	4652      	mov	r2, sl
 80129a2:	4620      	mov	r0, r4
 80129a4:	4639      	mov	r1, r7
 80129a6:	f7ed ff79 	bl	800089c <__aeabi_ddiv>
 80129aa:	ec41 0b10 	vmov	d0, r0, r1
 80129ae:	b005      	add	sp, #20
 80129b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080129b4 <__copybits>:
 80129b4:	3901      	subs	r1, #1
 80129b6:	b570      	push	{r4, r5, r6, lr}
 80129b8:	1149      	asrs	r1, r1, #5
 80129ba:	6914      	ldr	r4, [r2, #16]
 80129bc:	3101      	adds	r1, #1
 80129be:	f102 0314 	add.w	r3, r2, #20
 80129c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80129c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80129ca:	1f05      	subs	r5, r0, #4
 80129cc:	42a3      	cmp	r3, r4
 80129ce:	d30c      	bcc.n	80129ea <__copybits+0x36>
 80129d0:	1aa3      	subs	r3, r4, r2
 80129d2:	3b11      	subs	r3, #17
 80129d4:	f023 0303 	bic.w	r3, r3, #3
 80129d8:	3211      	adds	r2, #17
 80129da:	42a2      	cmp	r2, r4
 80129dc:	bf88      	it	hi
 80129de:	2300      	movhi	r3, #0
 80129e0:	4418      	add	r0, r3
 80129e2:	2300      	movs	r3, #0
 80129e4:	4288      	cmp	r0, r1
 80129e6:	d305      	bcc.n	80129f4 <__copybits+0x40>
 80129e8:	bd70      	pop	{r4, r5, r6, pc}
 80129ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80129ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80129f2:	e7eb      	b.n	80129cc <__copybits+0x18>
 80129f4:	f840 3b04 	str.w	r3, [r0], #4
 80129f8:	e7f4      	b.n	80129e4 <__copybits+0x30>

080129fa <__any_on>:
 80129fa:	f100 0214 	add.w	r2, r0, #20
 80129fe:	6900      	ldr	r0, [r0, #16]
 8012a00:	114b      	asrs	r3, r1, #5
 8012a02:	4298      	cmp	r0, r3
 8012a04:	b510      	push	{r4, lr}
 8012a06:	db11      	blt.n	8012a2c <__any_on+0x32>
 8012a08:	dd0a      	ble.n	8012a20 <__any_on+0x26>
 8012a0a:	f011 011f 	ands.w	r1, r1, #31
 8012a0e:	d007      	beq.n	8012a20 <__any_on+0x26>
 8012a10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012a14:	fa24 f001 	lsr.w	r0, r4, r1
 8012a18:	fa00 f101 	lsl.w	r1, r0, r1
 8012a1c:	428c      	cmp	r4, r1
 8012a1e:	d10b      	bne.n	8012a38 <__any_on+0x3e>
 8012a20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012a24:	4293      	cmp	r3, r2
 8012a26:	d803      	bhi.n	8012a30 <__any_on+0x36>
 8012a28:	2000      	movs	r0, #0
 8012a2a:	bd10      	pop	{r4, pc}
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	e7f7      	b.n	8012a20 <__any_on+0x26>
 8012a30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012a34:	2900      	cmp	r1, #0
 8012a36:	d0f5      	beq.n	8012a24 <__any_on+0x2a>
 8012a38:	2001      	movs	r0, #1
 8012a3a:	e7f6      	b.n	8012a2a <__any_on+0x30>

08012a3c <_strtol_l.constprop.0>:
 8012a3c:	2b24      	cmp	r3, #36	@ 0x24
 8012a3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a42:	4686      	mov	lr, r0
 8012a44:	4690      	mov	r8, r2
 8012a46:	d801      	bhi.n	8012a4c <_strtol_l.constprop.0+0x10>
 8012a48:	2b01      	cmp	r3, #1
 8012a4a:	d106      	bne.n	8012a5a <_strtol_l.constprop.0+0x1e>
 8012a4c:	f7fe f860 	bl	8010b10 <__errno>
 8012a50:	2316      	movs	r3, #22
 8012a52:	6003      	str	r3, [r0, #0]
 8012a54:	2000      	movs	r0, #0
 8012a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a5a:	4834      	ldr	r0, [pc, #208]	@ (8012b2c <_strtol_l.constprop.0+0xf0>)
 8012a5c:	460d      	mov	r5, r1
 8012a5e:	462a      	mov	r2, r5
 8012a60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012a64:	5d06      	ldrb	r6, [r0, r4]
 8012a66:	f016 0608 	ands.w	r6, r6, #8
 8012a6a:	d1f8      	bne.n	8012a5e <_strtol_l.constprop.0+0x22>
 8012a6c:	2c2d      	cmp	r4, #45	@ 0x2d
 8012a6e:	d12d      	bne.n	8012acc <_strtol_l.constprop.0+0x90>
 8012a70:	782c      	ldrb	r4, [r5, #0]
 8012a72:	2601      	movs	r6, #1
 8012a74:	1c95      	adds	r5, r2, #2
 8012a76:	f033 0210 	bics.w	r2, r3, #16
 8012a7a:	d109      	bne.n	8012a90 <_strtol_l.constprop.0+0x54>
 8012a7c:	2c30      	cmp	r4, #48	@ 0x30
 8012a7e:	d12a      	bne.n	8012ad6 <_strtol_l.constprop.0+0x9a>
 8012a80:	782a      	ldrb	r2, [r5, #0]
 8012a82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012a86:	2a58      	cmp	r2, #88	@ 0x58
 8012a88:	d125      	bne.n	8012ad6 <_strtol_l.constprop.0+0x9a>
 8012a8a:	786c      	ldrb	r4, [r5, #1]
 8012a8c:	2310      	movs	r3, #16
 8012a8e:	3502      	adds	r5, #2
 8012a90:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012a94:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012a98:	2200      	movs	r2, #0
 8012a9a:	fbbc f9f3 	udiv	r9, ip, r3
 8012a9e:	4610      	mov	r0, r2
 8012aa0:	fb03 ca19 	mls	sl, r3, r9, ip
 8012aa4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012aa8:	2f09      	cmp	r7, #9
 8012aaa:	d81b      	bhi.n	8012ae4 <_strtol_l.constprop.0+0xa8>
 8012aac:	463c      	mov	r4, r7
 8012aae:	42a3      	cmp	r3, r4
 8012ab0:	dd27      	ble.n	8012b02 <_strtol_l.constprop.0+0xc6>
 8012ab2:	1c57      	adds	r7, r2, #1
 8012ab4:	d007      	beq.n	8012ac6 <_strtol_l.constprop.0+0x8a>
 8012ab6:	4581      	cmp	r9, r0
 8012ab8:	d320      	bcc.n	8012afc <_strtol_l.constprop.0+0xc0>
 8012aba:	d101      	bne.n	8012ac0 <_strtol_l.constprop.0+0x84>
 8012abc:	45a2      	cmp	sl, r4
 8012abe:	db1d      	blt.n	8012afc <_strtol_l.constprop.0+0xc0>
 8012ac0:	fb00 4003 	mla	r0, r0, r3, r4
 8012ac4:	2201      	movs	r2, #1
 8012ac6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012aca:	e7eb      	b.n	8012aa4 <_strtol_l.constprop.0+0x68>
 8012acc:	2c2b      	cmp	r4, #43	@ 0x2b
 8012ace:	bf04      	itt	eq
 8012ad0:	782c      	ldrbeq	r4, [r5, #0]
 8012ad2:	1c95      	addeq	r5, r2, #2
 8012ad4:	e7cf      	b.n	8012a76 <_strtol_l.constprop.0+0x3a>
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d1da      	bne.n	8012a90 <_strtol_l.constprop.0+0x54>
 8012ada:	2c30      	cmp	r4, #48	@ 0x30
 8012adc:	bf0c      	ite	eq
 8012ade:	2308      	moveq	r3, #8
 8012ae0:	230a      	movne	r3, #10
 8012ae2:	e7d5      	b.n	8012a90 <_strtol_l.constprop.0+0x54>
 8012ae4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012ae8:	2f19      	cmp	r7, #25
 8012aea:	d801      	bhi.n	8012af0 <_strtol_l.constprop.0+0xb4>
 8012aec:	3c37      	subs	r4, #55	@ 0x37
 8012aee:	e7de      	b.n	8012aae <_strtol_l.constprop.0+0x72>
 8012af0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012af4:	2f19      	cmp	r7, #25
 8012af6:	d804      	bhi.n	8012b02 <_strtol_l.constprop.0+0xc6>
 8012af8:	3c57      	subs	r4, #87	@ 0x57
 8012afa:	e7d8      	b.n	8012aae <_strtol_l.constprop.0+0x72>
 8012afc:	f04f 32ff 	mov.w	r2, #4294967295
 8012b00:	e7e1      	b.n	8012ac6 <_strtol_l.constprop.0+0x8a>
 8012b02:	1c53      	adds	r3, r2, #1
 8012b04:	d108      	bne.n	8012b18 <_strtol_l.constprop.0+0xdc>
 8012b06:	2322      	movs	r3, #34	@ 0x22
 8012b08:	f8ce 3000 	str.w	r3, [lr]
 8012b0c:	4660      	mov	r0, ip
 8012b0e:	f1b8 0f00 	cmp.w	r8, #0
 8012b12:	d0a0      	beq.n	8012a56 <_strtol_l.constprop.0+0x1a>
 8012b14:	1e69      	subs	r1, r5, #1
 8012b16:	e006      	b.n	8012b26 <_strtol_l.constprop.0+0xea>
 8012b18:	b106      	cbz	r6, 8012b1c <_strtol_l.constprop.0+0xe0>
 8012b1a:	4240      	negs	r0, r0
 8012b1c:	f1b8 0f00 	cmp.w	r8, #0
 8012b20:	d099      	beq.n	8012a56 <_strtol_l.constprop.0+0x1a>
 8012b22:	2a00      	cmp	r2, #0
 8012b24:	d1f6      	bne.n	8012b14 <_strtol_l.constprop.0+0xd8>
 8012b26:	f8c8 1000 	str.w	r1, [r8]
 8012b2a:	e794      	b.n	8012a56 <_strtol_l.constprop.0+0x1a>
 8012b2c:	08014841 	.word	0x08014841

08012b30 <_strtol_r>:
 8012b30:	f7ff bf84 	b.w	8012a3c <_strtol_l.constprop.0>

08012b34 <__ascii_wctomb>:
 8012b34:	4603      	mov	r3, r0
 8012b36:	4608      	mov	r0, r1
 8012b38:	b141      	cbz	r1, 8012b4c <__ascii_wctomb+0x18>
 8012b3a:	2aff      	cmp	r2, #255	@ 0xff
 8012b3c:	d904      	bls.n	8012b48 <__ascii_wctomb+0x14>
 8012b3e:	228a      	movs	r2, #138	@ 0x8a
 8012b40:	601a      	str	r2, [r3, #0]
 8012b42:	f04f 30ff 	mov.w	r0, #4294967295
 8012b46:	4770      	bx	lr
 8012b48:	700a      	strb	r2, [r1, #0]
 8012b4a:	2001      	movs	r0, #1
 8012b4c:	4770      	bx	lr

08012b4e <__ssputs_r>:
 8012b4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b52:	688e      	ldr	r6, [r1, #8]
 8012b54:	461f      	mov	r7, r3
 8012b56:	42be      	cmp	r6, r7
 8012b58:	680b      	ldr	r3, [r1, #0]
 8012b5a:	4682      	mov	sl, r0
 8012b5c:	460c      	mov	r4, r1
 8012b5e:	4690      	mov	r8, r2
 8012b60:	d82d      	bhi.n	8012bbe <__ssputs_r+0x70>
 8012b62:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012b66:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012b6a:	d026      	beq.n	8012bba <__ssputs_r+0x6c>
 8012b6c:	6965      	ldr	r5, [r4, #20]
 8012b6e:	6909      	ldr	r1, [r1, #16]
 8012b70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b74:	eba3 0901 	sub.w	r9, r3, r1
 8012b78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012b7c:	1c7b      	adds	r3, r7, #1
 8012b7e:	444b      	add	r3, r9
 8012b80:	106d      	asrs	r5, r5, #1
 8012b82:	429d      	cmp	r5, r3
 8012b84:	bf38      	it	cc
 8012b86:	461d      	movcc	r5, r3
 8012b88:	0553      	lsls	r3, r2, #21
 8012b8a:	d527      	bpl.n	8012bdc <__ssputs_r+0x8e>
 8012b8c:	4629      	mov	r1, r5
 8012b8e:	f7ff fa05 	bl	8011f9c <_malloc_r>
 8012b92:	4606      	mov	r6, r0
 8012b94:	b360      	cbz	r0, 8012bf0 <__ssputs_r+0xa2>
 8012b96:	6921      	ldr	r1, [r4, #16]
 8012b98:	464a      	mov	r2, r9
 8012b9a:	f7fd ffe6 	bl	8010b6a <memcpy>
 8012b9e:	89a3      	ldrh	r3, [r4, #12]
 8012ba0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ba8:	81a3      	strh	r3, [r4, #12]
 8012baa:	6126      	str	r6, [r4, #16]
 8012bac:	6165      	str	r5, [r4, #20]
 8012bae:	444e      	add	r6, r9
 8012bb0:	eba5 0509 	sub.w	r5, r5, r9
 8012bb4:	6026      	str	r6, [r4, #0]
 8012bb6:	60a5      	str	r5, [r4, #8]
 8012bb8:	463e      	mov	r6, r7
 8012bba:	42be      	cmp	r6, r7
 8012bbc:	d900      	bls.n	8012bc0 <__ssputs_r+0x72>
 8012bbe:	463e      	mov	r6, r7
 8012bc0:	6820      	ldr	r0, [r4, #0]
 8012bc2:	4632      	mov	r2, r6
 8012bc4:	4641      	mov	r1, r8
 8012bc6:	f000 f9c5 	bl	8012f54 <memmove>
 8012bca:	68a3      	ldr	r3, [r4, #8]
 8012bcc:	1b9b      	subs	r3, r3, r6
 8012bce:	60a3      	str	r3, [r4, #8]
 8012bd0:	6823      	ldr	r3, [r4, #0]
 8012bd2:	4433      	add	r3, r6
 8012bd4:	6023      	str	r3, [r4, #0]
 8012bd6:	2000      	movs	r0, #0
 8012bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bdc:	462a      	mov	r2, r5
 8012bde:	f000 fa15 	bl	801300c <_realloc_r>
 8012be2:	4606      	mov	r6, r0
 8012be4:	2800      	cmp	r0, #0
 8012be6:	d1e0      	bne.n	8012baa <__ssputs_r+0x5c>
 8012be8:	6921      	ldr	r1, [r4, #16]
 8012bea:	4650      	mov	r0, sl
 8012bec:	f7fe fe28 	bl	8011840 <_free_r>
 8012bf0:	230c      	movs	r3, #12
 8012bf2:	f8ca 3000 	str.w	r3, [sl]
 8012bf6:	89a3      	ldrh	r3, [r4, #12]
 8012bf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012bfc:	81a3      	strh	r3, [r4, #12]
 8012bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8012c02:	e7e9      	b.n	8012bd8 <__ssputs_r+0x8a>

08012c04 <_svfiprintf_r>:
 8012c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c08:	4698      	mov	r8, r3
 8012c0a:	898b      	ldrh	r3, [r1, #12]
 8012c0c:	061b      	lsls	r3, r3, #24
 8012c0e:	b09d      	sub	sp, #116	@ 0x74
 8012c10:	4607      	mov	r7, r0
 8012c12:	460d      	mov	r5, r1
 8012c14:	4614      	mov	r4, r2
 8012c16:	d510      	bpl.n	8012c3a <_svfiprintf_r+0x36>
 8012c18:	690b      	ldr	r3, [r1, #16]
 8012c1a:	b973      	cbnz	r3, 8012c3a <_svfiprintf_r+0x36>
 8012c1c:	2140      	movs	r1, #64	@ 0x40
 8012c1e:	f7ff f9bd 	bl	8011f9c <_malloc_r>
 8012c22:	6028      	str	r0, [r5, #0]
 8012c24:	6128      	str	r0, [r5, #16]
 8012c26:	b930      	cbnz	r0, 8012c36 <_svfiprintf_r+0x32>
 8012c28:	230c      	movs	r3, #12
 8012c2a:	603b      	str	r3, [r7, #0]
 8012c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c30:	b01d      	add	sp, #116	@ 0x74
 8012c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c36:	2340      	movs	r3, #64	@ 0x40
 8012c38:	616b      	str	r3, [r5, #20]
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c3e:	2320      	movs	r3, #32
 8012c40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012c44:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c48:	2330      	movs	r3, #48	@ 0x30
 8012c4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012de8 <_svfiprintf_r+0x1e4>
 8012c4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012c52:	f04f 0901 	mov.w	r9, #1
 8012c56:	4623      	mov	r3, r4
 8012c58:	469a      	mov	sl, r3
 8012c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c5e:	b10a      	cbz	r2, 8012c64 <_svfiprintf_r+0x60>
 8012c60:	2a25      	cmp	r2, #37	@ 0x25
 8012c62:	d1f9      	bne.n	8012c58 <_svfiprintf_r+0x54>
 8012c64:	ebba 0b04 	subs.w	fp, sl, r4
 8012c68:	d00b      	beq.n	8012c82 <_svfiprintf_r+0x7e>
 8012c6a:	465b      	mov	r3, fp
 8012c6c:	4622      	mov	r2, r4
 8012c6e:	4629      	mov	r1, r5
 8012c70:	4638      	mov	r0, r7
 8012c72:	f7ff ff6c 	bl	8012b4e <__ssputs_r>
 8012c76:	3001      	adds	r0, #1
 8012c78:	f000 80a7 	beq.w	8012dca <_svfiprintf_r+0x1c6>
 8012c7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c7e:	445a      	add	r2, fp
 8012c80:	9209      	str	r2, [sp, #36]	@ 0x24
 8012c82:	f89a 3000 	ldrb.w	r3, [sl]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	f000 809f 	beq.w	8012dca <_svfiprintf_r+0x1c6>
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8012c92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c96:	f10a 0a01 	add.w	sl, sl, #1
 8012c9a:	9304      	str	r3, [sp, #16]
 8012c9c:	9307      	str	r3, [sp, #28]
 8012c9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012ca2:	931a      	str	r3, [sp, #104]	@ 0x68
 8012ca4:	4654      	mov	r4, sl
 8012ca6:	2205      	movs	r2, #5
 8012ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cac:	484e      	ldr	r0, [pc, #312]	@ (8012de8 <_svfiprintf_r+0x1e4>)
 8012cae:	f7ed fab7 	bl	8000220 <memchr>
 8012cb2:	9a04      	ldr	r2, [sp, #16]
 8012cb4:	b9d8      	cbnz	r0, 8012cee <_svfiprintf_r+0xea>
 8012cb6:	06d0      	lsls	r0, r2, #27
 8012cb8:	bf44      	itt	mi
 8012cba:	2320      	movmi	r3, #32
 8012cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012cc0:	0711      	lsls	r1, r2, #28
 8012cc2:	bf44      	itt	mi
 8012cc4:	232b      	movmi	r3, #43	@ 0x2b
 8012cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012cca:	f89a 3000 	ldrb.w	r3, [sl]
 8012cce:	2b2a      	cmp	r3, #42	@ 0x2a
 8012cd0:	d015      	beq.n	8012cfe <_svfiprintf_r+0xfa>
 8012cd2:	9a07      	ldr	r2, [sp, #28]
 8012cd4:	4654      	mov	r4, sl
 8012cd6:	2000      	movs	r0, #0
 8012cd8:	f04f 0c0a 	mov.w	ip, #10
 8012cdc:	4621      	mov	r1, r4
 8012cde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ce2:	3b30      	subs	r3, #48	@ 0x30
 8012ce4:	2b09      	cmp	r3, #9
 8012ce6:	d94b      	bls.n	8012d80 <_svfiprintf_r+0x17c>
 8012ce8:	b1b0      	cbz	r0, 8012d18 <_svfiprintf_r+0x114>
 8012cea:	9207      	str	r2, [sp, #28]
 8012cec:	e014      	b.n	8012d18 <_svfiprintf_r+0x114>
 8012cee:	eba0 0308 	sub.w	r3, r0, r8
 8012cf2:	fa09 f303 	lsl.w	r3, r9, r3
 8012cf6:	4313      	orrs	r3, r2
 8012cf8:	9304      	str	r3, [sp, #16]
 8012cfa:	46a2      	mov	sl, r4
 8012cfc:	e7d2      	b.n	8012ca4 <_svfiprintf_r+0xa0>
 8012cfe:	9b03      	ldr	r3, [sp, #12]
 8012d00:	1d19      	adds	r1, r3, #4
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	9103      	str	r1, [sp, #12]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	bfbb      	ittet	lt
 8012d0a:	425b      	neglt	r3, r3
 8012d0c:	f042 0202 	orrlt.w	r2, r2, #2
 8012d10:	9307      	strge	r3, [sp, #28]
 8012d12:	9307      	strlt	r3, [sp, #28]
 8012d14:	bfb8      	it	lt
 8012d16:	9204      	strlt	r2, [sp, #16]
 8012d18:	7823      	ldrb	r3, [r4, #0]
 8012d1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8012d1c:	d10a      	bne.n	8012d34 <_svfiprintf_r+0x130>
 8012d1e:	7863      	ldrb	r3, [r4, #1]
 8012d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d22:	d132      	bne.n	8012d8a <_svfiprintf_r+0x186>
 8012d24:	9b03      	ldr	r3, [sp, #12]
 8012d26:	1d1a      	adds	r2, r3, #4
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	9203      	str	r2, [sp, #12]
 8012d2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012d30:	3402      	adds	r4, #2
 8012d32:	9305      	str	r3, [sp, #20]
 8012d34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012df8 <_svfiprintf_r+0x1f4>
 8012d38:	7821      	ldrb	r1, [r4, #0]
 8012d3a:	2203      	movs	r2, #3
 8012d3c:	4650      	mov	r0, sl
 8012d3e:	f7ed fa6f 	bl	8000220 <memchr>
 8012d42:	b138      	cbz	r0, 8012d54 <_svfiprintf_r+0x150>
 8012d44:	9b04      	ldr	r3, [sp, #16]
 8012d46:	eba0 000a 	sub.w	r0, r0, sl
 8012d4a:	2240      	movs	r2, #64	@ 0x40
 8012d4c:	4082      	lsls	r2, r0
 8012d4e:	4313      	orrs	r3, r2
 8012d50:	3401      	adds	r4, #1
 8012d52:	9304      	str	r3, [sp, #16]
 8012d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d58:	4824      	ldr	r0, [pc, #144]	@ (8012dec <_svfiprintf_r+0x1e8>)
 8012d5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012d5e:	2206      	movs	r2, #6
 8012d60:	f7ed fa5e 	bl	8000220 <memchr>
 8012d64:	2800      	cmp	r0, #0
 8012d66:	d036      	beq.n	8012dd6 <_svfiprintf_r+0x1d2>
 8012d68:	4b21      	ldr	r3, [pc, #132]	@ (8012df0 <_svfiprintf_r+0x1ec>)
 8012d6a:	bb1b      	cbnz	r3, 8012db4 <_svfiprintf_r+0x1b0>
 8012d6c:	9b03      	ldr	r3, [sp, #12]
 8012d6e:	3307      	adds	r3, #7
 8012d70:	f023 0307 	bic.w	r3, r3, #7
 8012d74:	3308      	adds	r3, #8
 8012d76:	9303      	str	r3, [sp, #12]
 8012d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d7a:	4433      	add	r3, r6
 8012d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d7e:	e76a      	b.n	8012c56 <_svfiprintf_r+0x52>
 8012d80:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d84:	460c      	mov	r4, r1
 8012d86:	2001      	movs	r0, #1
 8012d88:	e7a8      	b.n	8012cdc <_svfiprintf_r+0xd8>
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	3401      	adds	r4, #1
 8012d8e:	9305      	str	r3, [sp, #20]
 8012d90:	4619      	mov	r1, r3
 8012d92:	f04f 0c0a 	mov.w	ip, #10
 8012d96:	4620      	mov	r0, r4
 8012d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d9c:	3a30      	subs	r2, #48	@ 0x30
 8012d9e:	2a09      	cmp	r2, #9
 8012da0:	d903      	bls.n	8012daa <_svfiprintf_r+0x1a6>
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d0c6      	beq.n	8012d34 <_svfiprintf_r+0x130>
 8012da6:	9105      	str	r1, [sp, #20]
 8012da8:	e7c4      	b.n	8012d34 <_svfiprintf_r+0x130>
 8012daa:	fb0c 2101 	mla	r1, ip, r1, r2
 8012dae:	4604      	mov	r4, r0
 8012db0:	2301      	movs	r3, #1
 8012db2:	e7f0      	b.n	8012d96 <_svfiprintf_r+0x192>
 8012db4:	ab03      	add	r3, sp, #12
 8012db6:	9300      	str	r3, [sp, #0]
 8012db8:	462a      	mov	r2, r5
 8012dba:	4b0e      	ldr	r3, [pc, #56]	@ (8012df4 <_svfiprintf_r+0x1f0>)
 8012dbc:	a904      	add	r1, sp, #16
 8012dbe:	4638      	mov	r0, r7
 8012dc0:	f7fc ff30 	bl	800fc24 <_printf_float>
 8012dc4:	1c42      	adds	r2, r0, #1
 8012dc6:	4606      	mov	r6, r0
 8012dc8:	d1d6      	bne.n	8012d78 <_svfiprintf_r+0x174>
 8012dca:	89ab      	ldrh	r3, [r5, #12]
 8012dcc:	065b      	lsls	r3, r3, #25
 8012dce:	f53f af2d 	bmi.w	8012c2c <_svfiprintf_r+0x28>
 8012dd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012dd4:	e72c      	b.n	8012c30 <_svfiprintf_r+0x2c>
 8012dd6:	ab03      	add	r3, sp, #12
 8012dd8:	9300      	str	r3, [sp, #0]
 8012dda:	462a      	mov	r2, r5
 8012ddc:	4b05      	ldr	r3, [pc, #20]	@ (8012df4 <_svfiprintf_r+0x1f0>)
 8012dde:	a904      	add	r1, sp, #16
 8012de0:	4638      	mov	r0, r7
 8012de2:	f7fd f9b7 	bl	8010154 <_printf_i>
 8012de6:	e7ed      	b.n	8012dc4 <_svfiprintf_r+0x1c0>
 8012de8:	08014941 	.word	0x08014941
 8012dec:	0801494b 	.word	0x0801494b
 8012df0:	0800fc25 	.word	0x0800fc25
 8012df4:	08012b4f 	.word	0x08012b4f
 8012df8:	08014947 	.word	0x08014947

08012dfc <__sflush_r>:
 8012dfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e04:	0716      	lsls	r6, r2, #28
 8012e06:	4605      	mov	r5, r0
 8012e08:	460c      	mov	r4, r1
 8012e0a:	d454      	bmi.n	8012eb6 <__sflush_r+0xba>
 8012e0c:	684b      	ldr	r3, [r1, #4]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	dc02      	bgt.n	8012e18 <__sflush_r+0x1c>
 8012e12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	dd48      	ble.n	8012eaa <__sflush_r+0xae>
 8012e18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012e1a:	2e00      	cmp	r6, #0
 8012e1c:	d045      	beq.n	8012eaa <__sflush_r+0xae>
 8012e1e:	2300      	movs	r3, #0
 8012e20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012e24:	682f      	ldr	r7, [r5, #0]
 8012e26:	6a21      	ldr	r1, [r4, #32]
 8012e28:	602b      	str	r3, [r5, #0]
 8012e2a:	d030      	beq.n	8012e8e <__sflush_r+0x92>
 8012e2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012e2e:	89a3      	ldrh	r3, [r4, #12]
 8012e30:	0759      	lsls	r1, r3, #29
 8012e32:	d505      	bpl.n	8012e40 <__sflush_r+0x44>
 8012e34:	6863      	ldr	r3, [r4, #4]
 8012e36:	1ad2      	subs	r2, r2, r3
 8012e38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012e3a:	b10b      	cbz	r3, 8012e40 <__sflush_r+0x44>
 8012e3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012e3e:	1ad2      	subs	r2, r2, r3
 8012e40:	2300      	movs	r3, #0
 8012e42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012e44:	6a21      	ldr	r1, [r4, #32]
 8012e46:	4628      	mov	r0, r5
 8012e48:	47b0      	blx	r6
 8012e4a:	1c43      	adds	r3, r0, #1
 8012e4c:	89a3      	ldrh	r3, [r4, #12]
 8012e4e:	d106      	bne.n	8012e5e <__sflush_r+0x62>
 8012e50:	6829      	ldr	r1, [r5, #0]
 8012e52:	291d      	cmp	r1, #29
 8012e54:	d82b      	bhi.n	8012eae <__sflush_r+0xb2>
 8012e56:	4a2a      	ldr	r2, [pc, #168]	@ (8012f00 <__sflush_r+0x104>)
 8012e58:	410a      	asrs	r2, r1
 8012e5a:	07d6      	lsls	r6, r2, #31
 8012e5c:	d427      	bmi.n	8012eae <__sflush_r+0xb2>
 8012e5e:	2200      	movs	r2, #0
 8012e60:	6062      	str	r2, [r4, #4]
 8012e62:	04d9      	lsls	r1, r3, #19
 8012e64:	6922      	ldr	r2, [r4, #16]
 8012e66:	6022      	str	r2, [r4, #0]
 8012e68:	d504      	bpl.n	8012e74 <__sflush_r+0x78>
 8012e6a:	1c42      	adds	r2, r0, #1
 8012e6c:	d101      	bne.n	8012e72 <__sflush_r+0x76>
 8012e6e:	682b      	ldr	r3, [r5, #0]
 8012e70:	b903      	cbnz	r3, 8012e74 <__sflush_r+0x78>
 8012e72:	6560      	str	r0, [r4, #84]	@ 0x54
 8012e74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012e76:	602f      	str	r7, [r5, #0]
 8012e78:	b1b9      	cbz	r1, 8012eaa <__sflush_r+0xae>
 8012e7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012e7e:	4299      	cmp	r1, r3
 8012e80:	d002      	beq.n	8012e88 <__sflush_r+0x8c>
 8012e82:	4628      	mov	r0, r5
 8012e84:	f7fe fcdc 	bl	8011840 <_free_r>
 8012e88:	2300      	movs	r3, #0
 8012e8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8012e8c:	e00d      	b.n	8012eaa <__sflush_r+0xae>
 8012e8e:	2301      	movs	r3, #1
 8012e90:	4628      	mov	r0, r5
 8012e92:	47b0      	blx	r6
 8012e94:	4602      	mov	r2, r0
 8012e96:	1c50      	adds	r0, r2, #1
 8012e98:	d1c9      	bne.n	8012e2e <__sflush_r+0x32>
 8012e9a:	682b      	ldr	r3, [r5, #0]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d0c6      	beq.n	8012e2e <__sflush_r+0x32>
 8012ea0:	2b1d      	cmp	r3, #29
 8012ea2:	d001      	beq.n	8012ea8 <__sflush_r+0xac>
 8012ea4:	2b16      	cmp	r3, #22
 8012ea6:	d11e      	bne.n	8012ee6 <__sflush_r+0xea>
 8012ea8:	602f      	str	r7, [r5, #0]
 8012eaa:	2000      	movs	r0, #0
 8012eac:	e022      	b.n	8012ef4 <__sflush_r+0xf8>
 8012eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012eb2:	b21b      	sxth	r3, r3
 8012eb4:	e01b      	b.n	8012eee <__sflush_r+0xf2>
 8012eb6:	690f      	ldr	r7, [r1, #16]
 8012eb8:	2f00      	cmp	r7, #0
 8012eba:	d0f6      	beq.n	8012eaa <__sflush_r+0xae>
 8012ebc:	0793      	lsls	r3, r2, #30
 8012ebe:	680e      	ldr	r6, [r1, #0]
 8012ec0:	bf08      	it	eq
 8012ec2:	694b      	ldreq	r3, [r1, #20]
 8012ec4:	600f      	str	r7, [r1, #0]
 8012ec6:	bf18      	it	ne
 8012ec8:	2300      	movne	r3, #0
 8012eca:	eba6 0807 	sub.w	r8, r6, r7
 8012ece:	608b      	str	r3, [r1, #8]
 8012ed0:	f1b8 0f00 	cmp.w	r8, #0
 8012ed4:	dde9      	ble.n	8012eaa <__sflush_r+0xae>
 8012ed6:	6a21      	ldr	r1, [r4, #32]
 8012ed8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012eda:	4643      	mov	r3, r8
 8012edc:	463a      	mov	r2, r7
 8012ede:	4628      	mov	r0, r5
 8012ee0:	47b0      	blx	r6
 8012ee2:	2800      	cmp	r0, #0
 8012ee4:	dc08      	bgt.n	8012ef8 <__sflush_r+0xfc>
 8012ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012eee:	81a3      	strh	r3, [r4, #12]
 8012ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ef8:	4407      	add	r7, r0
 8012efa:	eba8 0800 	sub.w	r8, r8, r0
 8012efe:	e7e7      	b.n	8012ed0 <__sflush_r+0xd4>
 8012f00:	dfbffffe 	.word	0xdfbffffe

08012f04 <_fflush_r>:
 8012f04:	b538      	push	{r3, r4, r5, lr}
 8012f06:	690b      	ldr	r3, [r1, #16]
 8012f08:	4605      	mov	r5, r0
 8012f0a:	460c      	mov	r4, r1
 8012f0c:	b913      	cbnz	r3, 8012f14 <_fflush_r+0x10>
 8012f0e:	2500      	movs	r5, #0
 8012f10:	4628      	mov	r0, r5
 8012f12:	bd38      	pop	{r3, r4, r5, pc}
 8012f14:	b118      	cbz	r0, 8012f1e <_fflush_r+0x1a>
 8012f16:	6a03      	ldr	r3, [r0, #32]
 8012f18:	b90b      	cbnz	r3, 8012f1e <_fflush_r+0x1a>
 8012f1a:	f7fd fcdb 	bl	80108d4 <__sinit>
 8012f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d0f3      	beq.n	8012f0e <_fflush_r+0xa>
 8012f26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012f28:	07d0      	lsls	r0, r2, #31
 8012f2a:	d404      	bmi.n	8012f36 <_fflush_r+0x32>
 8012f2c:	0599      	lsls	r1, r3, #22
 8012f2e:	d402      	bmi.n	8012f36 <_fflush_r+0x32>
 8012f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f32:	f7fd fe18 	bl	8010b66 <__retarget_lock_acquire_recursive>
 8012f36:	4628      	mov	r0, r5
 8012f38:	4621      	mov	r1, r4
 8012f3a:	f7ff ff5f 	bl	8012dfc <__sflush_r>
 8012f3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012f40:	07da      	lsls	r2, r3, #31
 8012f42:	4605      	mov	r5, r0
 8012f44:	d4e4      	bmi.n	8012f10 <_fflush_r+0xc>
 8012f46:	89a3      	ldrh	r3, [r4, #12]
 8012f48:	059b      	lsls	r3, r3, #22
 8012f4a:	d4e1      	bmi.n	8012f10 <_fflush_r+0xc>
 8012f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f4e:	f7fd fe0b 	bl	8010b68 <__retarget_lock_release_recursive>
 8012f52:	e7dd      	b.n	8012f10 <_fflush_r+0xc>

08012f54 <memmove>:
 8012f54:	4288      	cmp	r0, r1
 8012f56:	b510      	push	{r4, lr}
 8012f58:	eb01 0402 	add.w	r4, r1, r2
 8012f5c:	d902      	bls.n	8012f64 <memmove+0x10>
 8012f5e:	4284      	cmp	r4, r0
 8012f60:	4623      	mov	r3, r4
 8012f62:	d807      	bhi.n	8012f74 <memmove+0x20>
 8012f64:	1e43      	subs	r3, r0, #1
 8012f66:	42a1      	cmp	r1, r4
 8012f68:	d008      	beq.n	8012f7c <memmove+0x28>
 8012f6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012f6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012f72:	e7f8      	b.n	8012f66 <memmove+0x12>
 8012f74:	4402      	add	r2, r0
 8012f76:	4601      	mov	r1, r0
 8012f78:	428a      	cmp	r2, r1
 8012f7a:	d100      	bne.n	8012f7e <memmove+0x2a>
 8012f7c:	bd10      	pop	{r4, pc}
 8012f7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012f82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012f86:	e7f7      	b.n	8012f78 <memmove+0x24>

08012f88 <_sbrk_r>:
 8012f88:	b538      	push	{r3, r4, r5, lr}
 8012f8a:	4d06      	ldr	r5, [pc, #24]	@ (8012fa4 <_sbrk_r+0x1c>)
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	4604      	mov	r4, r0
 8012f90:	4608      	mov	r0, r1
 8012f92:	602b      	str	r3, [r5, #0]
 8012f94:	f7ee ffca 	bl	8001f2c <_sbrk>
 8012f98:	1c43      	adds	r3, r0, #1
 8012f9a:	d102      	bne.n	8012fa2 <_sbrk_r+0x1a>
 8012f9c:	682b      	ldr	r3, [r5, #0]
 8012f9e:	b103      	cbz	r3, 8012fa2 <_sbrk_r+0x1a>
 8012fa0:	6023      	str	r3, [r4, #0]
 8012fa2:	bd38      	pop	{r3, r4, r5, pc}
 8012fa4:	20000e94 	.word	0x20000e94

08012fa8 <__assert_func>:
 8012fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012faa:	4614      	mov	r4, r2
 8012fac:	461a      	mov	r2, r3
 8012fae:	4b09      	ldr	r3, [pc, #36]	@ (8012fd4 <__assert_func+0x2c>)
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	4605      	mov	r5, r0
 8012fb4:	68d8      	ldr	r0, [r3, #12]
 8012fb6:	b954      	cbnz	r4, 8012fce <__assert_func+0x26>
 8012fb8:	4b07      	ldr	r3, [pc, #28]	@ (8012fd8 <__assert_func+0x30>)
 8012fba:	461c      	mov	r4, r3
 8012fbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012fc0:	9100      	str	r1, [sp, #0]
 8012fc2:	462b      	mov	r3, r5
 8012fc4:	4905      	ldr	r1, [pc, #20]	@ (8012fdc <__assert_func+0x34>)
 8012fc6:	f000 f84f 	bl	8013068 <fiprintf>
 8012fca:	f000 f85f 	bl	801308c <abort>
 8012fce:	4b04      	ldr	r3, [pc, #16]	@ (8012fe0 <__assert_func+0x38>)
 8012fd0:	e7f4      	b.n	8012fbc <__assert_func+0x14>
 8012fd2:	bf00      	nop
 8012fd4:	20000240 	.word	0x20000240
 8012fd8:	0801498d 	.word	0x0801498d
 8012fdc:	0801495f 	.word	0x0801495f
 8012fe0:	08014952 	.word	0x08014952

08012fe4 <_calloc_r>:
 8012fe4:	b570      	push	{r4, r5, r6, lr}
 8012fe6:	fba1 5402 	umull	r5, r4, r1, r2
 8012fea:	b93c      	cbnz	r4, 8012ffc <_calloc_r+0x18>
 8012fec:	4629      	mov	r1, r5
 8012fee:	f7fe ffd5 	bl	8011f9c <_malloc_r>
 8012ff2:	4606      	mov	r6, r0
 8012ff4:	b928      	cbnz	r0, 8013002 <_calloc_r+0x1e>
 8012ff6:	2600      	movs	r6, #0
 8012ff8:	4630      	mov	r0, r6
 8012ffa:	bd70      	pop	{r4, r5, r6, pc}
 8012ffc:	220c      	movs	r2, #12
 8012ffe:	6002      	str	r2, [r0, #0]
 8013000:	e7f9      	b.n	8012ff6 <_calloc_r+0x12>
 8013002:	462a      	mov	r2, r5
 8013004:	4621      	mov	r1, r4
 8013006:	f7fd fd1f 	bl	8010a48 <memset>
 801300a:	e7f5      	b.n	8012ff8 <_calloc_r+0x14>

0801300c <_realloc_r>:
 801300c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013010:	4680      	mov	r8, r0
 8013012:	4615      	mov	r5, r2
 8013014:	460c      	mov	r4, r1
 8013016:	b921      	cbnz	r1, 8013022 <_realloc_r+0x16>
 8013018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801301c:	4611      	mov	r1, r2
 801301e:	f7fe bfbd 	b.w	8011f9c <_malloc_r>
 8013022:	b92a      	cbnz	r2, 8013030 <_realloc_r+0x24>
 8013024:	f7fe fc0c 	bl	8011840 <_free_r>
 8013028:	2400      	movs	r4, #0
 801302a:	4620      	mov	r0, r4
 801302c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013030:	f000 f833 	bl	801309a <_malloc_usable_size_r>
 8013034:	4285      	cmp	r5, r0
 8013036:	4606      	mov	r6, r0
 8013038:	d802      	bhi.n	8013040 <_realloc_r+0x34>
 801303a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801303e:	d8f4      	bhi.n	801302a <_realloc_r+0x1e>
 8013040:	4629      	mov	r1, r5
 8013042:	4640      	mov	r0, r8
 8013044:	f7fe ffaa 	bl	8011f9c <_malloc_r>
 8013048:	4607      	mov	r7, r0
 801304a:	2800      	cmp	r0, #0
 801304c:	d0ec      	beq.n	8013028 <_realloc_r+0x1c>
 801304e:	42b5      	cmp	r5, r6
 8013050:	462a      	mov	r2, r5
 8013052:	4621      	mov	r1, r4
 8013054:	bf28      	it	cs
 8013056:	4632      	movcs	r2, r6
 8013058:	f7fd fd87 	bl	8010b6a <memcpy>
 801305c:	4621      	mov	r1, r4
 801305e:	4640      	mov	r0, r8
 8013060:	f7fe fbee 	bl	8011840 <_free_r>
 8013064:	463c      	mov	r4, r7
 8013066:	e7e0      	b.n	801302a <_realloc_r+0x1e>

08013068 <fiprintf>:
 8013068:	b40e      	push	{r1, r2, r3}
 801306a:	b503      	push	{r0, r1, lr}
 801306c:	4601      	mov	r1, r0
 801306e:	ab03      	add	r3, sp, #12
 8013070:	4805      	ldr	r0, [pc, #20]	@ (8013088 <fiprintf+0x20>)
 8013072:	f853 2b04 	ldr.w	r2, [r3], #4
 8013076:	6800      	ldr	r0, [r0, #0]
 8013078:	9301      	str	r3, [sp, #4]
 801307a:	f000 f83f 	bl	80130fc <_vfiprintf_r>
 801307e:	b002      	add	sp, #8
 8013080:	f85d eb04 	ldr.w	lr, [sp], #4
 8013084:	b003      	add	sp, #12
 8013086:	4770      	bx	lr
 8013088:	20000240 	.word	0x20000240

0801308c <abort>:
 801308c:	b508      	push	{r3, lr}
 801308e:	2006      	movs	r0, #6
 8013090:	f000 fa08 	bl	80134a4 <raise>
 8013094:	2001      	movs	r0, #1
 8013096:	f7ee fed1 	bl	8001e3c <_exit>

0801309a <_malloc_usable_size_r>:
 801309a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801309e:	1f18      	subs	r0, r3, #4
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	bfbc      	itt	lt
 80130a4:	580b      	ldrlt	r3, [r1, r0]
 80130a6:	18c0      	addlt	r0, r0, r3
 80130a8:	4770      	bx	lr

080130aa <__sfputc_r>:
 80130aa:	6893      	ldr	r3, [r2, #8]
 80130ac:	3b01      	subs	r3, #1
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	b410      	push	{r4}
 80130b2:	6093      	str	r3, [r2, #8]
 80130b4:	da08      	bge.n	80130c8 <__sfputc_r+0x1e>
 80130b6:	6994      	ldr	r4, [r2, #24]
 80130b8:	42a3      	cmp	r3, r4
 80130ba:	db01      	blt.n	80130c0 <__sfputc_r+0x16>
 80130bc:	290a      	cmp	r1, #10
 80130be:	d103      	bne.n	80130c8 <__sfputc_r+0x1e>
 80130c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130c4:	f000 b932 	b.w	801332c <__swbuf_r>
 80130c8:	6813      	ldr	r3, [r2, #0]
 80130ca:	1c58      	adds	r0, r3, #1
 80130cc:	6010      	str	r0, [r2, #0]
 80130ce:	7019      	strb	r1, [r3, #0]
 80130d0:	4608      	mov	r0, r1
 80130d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130d6:	4770      	bx	lr

080130d8 <__sfputs_r>:
 80130d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130da:	4606      	mov	r6, r0
 80130dc:	460f      	mov	r7, r1
 80130de:	4614      	mov	r4, r2
 80130e0:	18d5      	adds	r5, r2, r3
 80130e2:	42ac      	cmp	r4, r5
 80130e4:	d101      	bne.n	80130ea <__sfputs_r+0x12>
 80130e6:	2000      	movs	r0, #0
 80130e8:	e007      	b.n	80130fa <__sfputs_r+0x22>
 80130ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130ee:	463a      	mov	r2, r7
 80130f0:	4630      	mov	r0, r6
 80130f2:	f7ff ffda 	bl	80130aa <__sfputc_r>
 80130f6:	1c43      	adds	r3, r0, #1
 80130f8:	d1f3      	bne.n	80130e2 <__sfputs_r+0xa>
 80130fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080130fc <_vfiprintf_r>:
 80130fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013100:	460d      	mov	r5, r1
 8013102:	b09d      	sub	sp, #116	@ 0x74
 8013104:	4614      	mov	r4, r2
 8013106:	4698      	mov	r8, r3
 8013108:	4606      	mov	r6, r0
 801310a:	b118      	cbz	r0, 8013114 <_vfiprintf_r+0x18>
 801310c:	6a03      	ldr	r3, [r0, #32]
 801310e:	b90b      	cbnz	r3, 8013114 <_vfiprintf_r+0x18>
 8013110:	f7fd fbe0 	bl	80108d4 <__sinit>
 8013114:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013116:	07d9      	lsls	r1, r3, #31
 8013118:	d405      	bmi.n	8013126 <_vfiprintf_r+0x2a>
 801311a:	89ab      	ldrh	r3, [r5, #12]
 801311c:	059a      	lsls	r2, r3, #22
 801311e:	d402      	bmi.n	8013126 <_vfiprintf_r+0x2a>
 8013120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013122:	f7fd fd20 	bl	8010b66 <__retarget_lock_acquire_recursive>
 8013126:	89ab      	ldrh	r3, [r5, #12]
 8013128:	071b      	lsls	r3, r3, #28
 801312a:	d501      	bpl.n	8013130 <_vfiprintf_r+0x34>
 801312c:	692b      	ldr	r3, [r5, #16]
 801312e:	b99b      	cbnz	r3, 8013158 <_vfiprintf_r+0x5c>
 8013130:	4629      	mov	r1, r5
 8013132:	4630      	mov	r0, r6
 8013134:	f000 f938 	bl	80133a8 <__swsetup_r>
 8013138:	b170      	cbz	r0, 8013158 <_vfiprintf_r+0x5c>
 801313a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801313c:	07dc      	lsls	r4, r3, #31
 801313e:	d504      	bpl.n	801314a <_vfiprintf_r+0x4e>
 8013140:	f04f 30ff 	mov.w	r0, #4294967295
 8013144:	b01d      	add	sp, #116	@ 0x74
 8013146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801314a:	89ab      	ldrh	r3, [r5, #12]
 801314c:	0598      	lsls	r0, r3, #22
 801314e:	d4f7      	bmi.n	8013140 <_vfiprintf_r+0x44>
 8013150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013152:	f7fd fd09 	bl	8010b68 <__retarget_lock_release_recursive>
 8013156:	e7f3      	b.n	8013140 <_vfiprintf_r+0x44>
 8013158:	2300      	movs	r3, #0
 801315a:	9309      	str	r3, [sp, #36]	@ 0x24
 801315c:	2320      	movs	r3, #32
 801315e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013162:	f8cd 800c 	str.w	r8, [sp, #12]
 8013166:	2330      	movs	r3, #48	@ 0x30
 8013168:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013318 <_vfiprintf_r+0x21c>
 801316c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013170:	f04f 0901 	mov.w	r9, #1
 8013174:	4623      	mov	r3, r4
 8013176:	469a      	mov	sl, r3
 8013178:	f813 2b01 	ldrb.w	r2, [r3], #1
 801317c:	b10a      	cbz	r2, 8013182 <_vfiprintf_r+0x86>
 801317e:	2a25      	cmp	r2, #37	@ 0x25
 8013180:	d1f9      	bne.n	8013176 <_vfiprintf_r+0x7a>
 8013182:	ebba 0b04 	subs.w	fp, sl, r4
 8013186:	d00b      	beq.n	80131a0 <_vfiprintf_r+0xa4>
 8013188:	465b      	mov	r3, fp
 801318a:	4622      	mov	r2, r4
 801318c:	4629      	mov	r1, r5
 801318e:	4630      	mov	r0, r6
 8013190:	f7ff ffa2 	bl	80130d8 <__sfputs_r>
 8013194:	3001      	adds	r0, #1
 8013196:	f000 80a7 	beq.w	80132e8 <_vfiprintf_r+0x1ec>
 801319a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801319c:	445a      	add	r2, fp
 801319e:	9209      	str	r2, [sp, #36]	@ 0x24
 80131a0:	f89a 3000 	ldrb.w	r3, [sl]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	f000 809f 	beq.w	80132e8 <_vfiprintf_r+0x1ec>
 80131aa:	2300      	movs	r3, #0
 80131ac:	f04f 32ff 	mov.w	r2, #4294967295
 80131b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131b4:	f10a 0a01 	add.w	sl, sl, #1
 80131b8:	9304      	str	r3, [sp, #16]
 80131ba:	9307      	str	r3, [sp, #28]
 80131bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80131c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80131c2:	4654      	mov	r4, sl
 80131c4:	2205      	movs	r2, #5
 80131c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131ca:	4853      	ldr	r0, [pc, #332]	@ (8013318 <_vfiprintf_r+0x21c>)
 80131cc:	f7ed f828 	bl	8000220 <memchr>
 80131d0:	9a04      	ldr	r2, [sp, #16]
 80131d2:	b9d8      	cbnz	r0, 801320c <_vfiprintf_r+0x110>
 80131d4:	06d1      	lsls	r1, r2, #27
 80131d6:	bf44      	itt	mi
 80131d8:	2320      	movmi	r3, #32
 80131da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80131de:	0713      	lsls	r3, r2, #28
 80131e0:	bf44      	itt	mi
 80131e2:	232b      	movmi	r3, #43	@ 0x2b
 80131e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80131e8:	f89a 3000 	ldrb.w	r3, [sl]
 80131ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80131ee:	d015      	beq.n	801321c <_vfiprintf_r+0x120>
 80131f0:	9a07      	ldr	r2, [sp, #28]
 80131f2:	4654      	mov	r4, sl
 80131f4:	2000      	movs	r0, #0
 80131f6:	f04f 0c0a 	mov.w	ip, #10
 80131fa:	4621      	mov	r1, r4
 80131fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013200:	3b30      	subs	r3, #48	@ 0x30
 8013202:	2b09      	cmp	r3, #9
 8013204:	d94b      	bls.n	801329e <_vfiprintf_r+0x1a2>
 8013206:	b1b0      	cbz	r0, 8013236 <_vfiprintf_r+0x13a>
 8013208:	9207      	str	r2, [sp, #28]
 801320a:	e014      	b.n	8013236 <_vfiprintf_r+0x13a>
 801320c:	eba0 0308 	sub.w	r3, r0, r8
 8013210:	fa09 f303 	lsl.w	r3, r9, r3
 8013214:	4313      	orrs	r3, r2
 8013216:	9304      	str	r3, [sp, #16]
 8013218:	46a2      	mov	sl, r4
 801321a:	e7d2      	b.n	80131c2 <_vfiprintf_r+0xc6>
 801321c:	9b03      	ldr	r3, [sp, #12]
 801321e:	1d19      	adds	r1, r3, #4
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	9103      	str	r1, [sp, #12]
 8013224:	2b00      	cmp	r3, #0
 8013226:	bfbb      	ittet	lt
 8013228:	425b      	neglt	r3, r3
 801322a:	f042 0202 	orrlt.w	r2, r2, #2
 801322e:	9307      	strge	r3, [sp, #28]
 8013230:	9307      	strlt	r3, [sp, #28]
 8013232:	bfb8      	it	lt
 8013234:	9204      	strlt	r2, [sp, #16]
 8013236:	7823      	ldrb	r3, [r4, #0]
 8013238:	2b2e      	cmp	r3, #46	@ 0x2e
 801323a:	d10a      	bne.n	8013252 <_vfiprintf_r+0x156>
 801323c:	7863      	ldrb	r3, [r4, #1]
 801323e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013240:	d132      	bne.n	80132a8 <_vfiprintf_r+0x1ac>
 8013242:	9b03      	ldr	r3, [sp, #12]
 8013244:	1d1a      	adds	r2, r3, #4
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	9203      	str	r2, [sp, #12]
 801324a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801324e:	3402      	adds	r4, #2
 8013250:	9305      	str	r3, [sp, #20]
 8013252:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013328 <_vfiprintf_r+0x22c>
 8013256:	7821      	ldrb	r1, [r4, #0]
 8013258:	2203      	movs	r2, #3
 801325a:	4650      	mov	r0, sl
 801325c:	f7ec ffe0 	bl	8000220 <memchr>
 8013260:	b138      	cbz	r0, 8013272 <_vfiprintf_r+0x176>
 8013262:	9b04      	ldr	r3, [sp, #16]
 8013264:	eba0 000a 	sub.w	r0, r0, sl
 8013268:	2240      	movs	r2, #64	@ 0x40
 801326a:	4082      	lsls	r2, r0
 801326c:	4313      	orrs	r3, r2
 801326e:	3401      	adds	r4, #1
 8013270:	9304      	str	r3, [sp, #16]
 8013272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013276:	4829      	ldr	r0, [pc, #164]	@ (801331c <_vfiprintf_r+0x220>)
 8013278:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801327c:	2206      	movs	r2, #6
 801327e:	f7ec ffcf 	bl	8000220 <memchr>
 8013282:	2800      	cmp	r0, #0
 8013284:	d03f      	beq.n	8013306 <_vfiprintf_r+0x20a>
 8013286:	4b26      	ldr	r3, [pc, #152]	@ (8013320 <_vfiprintf_r+0x224>)
 8013288:	bb1b      	cbnz	r3, 80132d2 <_vfiprintf_r+0x1d6>
 801328a:	9b03      	ldr	r3, [sp, #12]
 801328c:	3307      	adds	r3, #7
 801328e:	f023 0307 	bic.w	r3, r3, #7
 8013292:	3308      	adds	r3, #8
 8013294:	9303      	str	r3, [sp, #12]
 8013296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013298:	443b      	add	r3, r7
 801329a:	9309      	str	r3, [sp, #36]	@ 0x24
 801329c:	e76a      	b.n	8013174 <_vfiprintf_r+0x78>
 801329e:	fb0c 3202 	mla	r2, ip, r2, r3
 80132a2:	460c      	mov	r4, r1
 80132a4:	2001      	movs	r0, #1
 80132a6:	e7a8      	b.n	80131fa <_vfiprintf_r+0xfe>
 80132a8:	2300      	movs	r3, #0
 80132aa:	3401      	adds	r4, #1
 80132ac:	9305      	str	r3, [sp, #20]
 80132ae:	4619      	mov	r1, r3
 80132b0:	f04f 0c0a 	mov.w	ip, #10
 80132b4:	4620      	mov	r0, r4
 80132b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132ba:	3a30      	subs	r2, #48	@ 0x30
 80132bc:	2a09      	cmp	r2, #9
 80132be:	d903      	bls.n	80132c8 <_vfiprintf_r+0x1cc>
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d0c6      	beq.n	8013252 <_vfiprintf_r+0x156>
 80132c4:	9105      	str	r1, [sp, #20]
 80132c6:	e7c4      	b.n	8013252 <_vfiprintf_r+0x156>
 80132c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80132cc:	4604      	mov	r4, r0
 80132ce:	2301      	movs	r3, #1
 80132d0:	e7f0      	b.n	80132b4 <_vfiprintf_r+0x1b8>
 80132d2:	ab03      	add	r3, sp, #12
 80132d4:	9300      	str	r3, [sp, #0]
 80132d6:	462a      	mov	r2, r5
 80132d8:	4b12      	ldr	r3, [pc, #72]	@ (8013324 <_vfiprintf_r+0x228>)
 80132da:	a904      	add	r1, sp, #16
 80132dc:	4630      	mov	r0, r6
 80132de:	f7fc fca1 	bl	800fc24 <_printf_float>
 80132e2:	4607      	mov	r7, r0
 80132e4:	1c78      	adds	r0, r7, #1
 80132e6:	d1d6      	bne.n	8013296 <_vfiprintf_r+0x19a>
 80132e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80132ea:	07d9      	lsls	r1, r3, #31
 80132ec:	d405      	bmi.n	80132fa <_vfiprintf_r+0x1fe>
 80132ee:	89ab      	ldrh	r3, [r5, #12]
 80132f0:	059a      	lsls	r2, r3, #22
 80132f2:	d402      	bmi.n	80132fa <_vfiprintf_r+0x1fe>
 80132f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80132f6:	f7fd fc37 	bl	8010b68 <__retarget_lock_release_recursive>
 80132fa:	89ab      	ldrh	r3, [r5, #12]
 80132fc:	065b      	lsls	r3, r3, #25
 80132fe:	f53f af1f 	bmi.w	8013140 <_vfiprintf_r+0x44>
 8013302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013304:	e71e      	b.n	8013144 <_vfiprintf_r+0x48>
 8013306:	ab03      	add	r3, sp, #12
 8013308:	9300      	str	r3, [sp, #0]
 801330a:	462a      	mov	r2, r5
 801330c:	4b05      	ldr	r3, [pc, #20]	@ (8013324 <_vfiprintf_r+0x228>)
 801330e:	a904      	add	r1, sp, #16
 8013310:	4630      	mov	r0, r6
 8013312:	f7fc ff1f 	bl	8010154 <_printf_i>
 8013316:	e7e4      	b.n	80132e2 <_vfiprintf_r+0x1e6>
 8013318:	08014941 	.word	0x08014941
 801331c:	0801494b 	.word	0x0801494b
 8013320:	0800fc25 	.word	0x0800fc25
 8013324:	080130d9 	.word	0x080130d9
 8013328:	08014947 	.word	0x08014947

0801332c <__swbuf_r>:
 801332c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801332e:	460e      	mov	r6, r1
 8013330:	4614      	mov	r4, r2
 8013332:	4605      	mov	r5, r0
 8013334:	b118      	cbz	r0, 801333e <__swbuf_r+0x12>
 8013336:	6a03      	ldr	r3, [r0, #32]
 8013338:	b90b      	cbnz	r3, 801333e <__swbuf_r+0x12>
 801333a:	f7fd facb 	bl	80108d4 <__sinit>
 801333e:	69a3      	ldr	r3, [r4, #24]
 8013340:	60a3      	str	r3, [r4, #8]
 8013342:	89a3      	ldrh	r3, [r4, #12]
 8013344:	071a      	lsls	r2, r3, #28
 8013346:	d501      	bpl.n	801334c <__swbuf_r+0x20>
 8013348:	6923      	ldr	r3, [r4, #16]
 801334a:	b943      	cbnz	r3, 801335e <__swbuf_r+0x32>
 801334c:	4621      	mov	r1, r4
 801334e:	4628      	mov	r0, r5
 8013350:	f000 f82a 	bl	80133a8 <__swsetup_r>
 8013354:	b118      	cbz	r0, 801335e <__swbuf_r+0x32>
 8013356:	f04f 37ff 	mov.w	r7, #4294967295
 801335a:	4638      	mov	r0, r7
 801335c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801335e:	6823      	ldr	r3, [r4, #0]
 8013360:	6922      	ldr	r2, [r4, #16]
 8013362:	1a98      	subs	r0, r3, r2
 8013364:	6963      	ldr	r3, [r4, #20]
 8013366:	b2f6      	uxtb	r6, r6
 8013368:	4283      	cmp	r3, r0
 801336a:	4637      	mov	r7, r6
 801336c:	dc05      	bgt.n	801337a <__swbuf_r+0x4e>
 801336e:	4621      	mov	r1, r4
 8013370:	4628      	mov	r0, r5
 8013372:	f7ff fdc7 	bl	8012f04 <_fflush_r>
 8013376:	2800      	cmp	r0, #0
 8013378:	d1ed      	bne.n	8013356 <__swbuf_r+0x2a>
 801337a:	68a3      	ldr	r3, [r4, #8]
 801337c:	3b01      	subs	r3, #1
 801337e:	60a3      	str	r3, [r4, #8]
 8013380:	6823      	ldr	r3, [r4, #0]
 8013382:	1c5a      	adds	r2, r3, #1
 8013384:	6022      	str	r2, [r4, #0]
 8013386:	701e      	strb	r6, [r3, #0]
 8013388:	6962      	ldr	r2, [r4, #20]
 801338a:	1c43      	adds	r3, r0, #1
 801338c:	429a      	cmp	r2, r3
 801338e:	d004      	beq.n	801339a <__swbuf_r+0x6e>
 8013390:	89a3      	ldrh	r3, [r4, #12]
 8013392:	07db      	lsls	r3, r3, #31
 8013394:	d5e1      	bpl.n	801335a <__swbuf_r+0x2e>
 8013396:	2e0a      	cmp	r6, #10
 8013398:	d1df      	bne.n	801335a <__swbuf_r+0x2e>
 801339a:	4621      	mov	r1, r4
 801339c:	4628      	mov	r0, r5
 801339e:	f7ff fdb1 	bl	8012f04 <_fflush_r>
 80133a2:	2800      	cmp	r0, #0
 80133a4:	d0d9      	beq.n	801335a <__swbuf_r+0x2e>
 80133a6:	e7d6      	b.n	8013356 <__swbuf_r+0x2a>

080133a8 <__swsetup_r>:
 80133a8:	b538      	push	{r3, r4, r5, lr}
 80133aa:	4b29      	ldr	r3, [pc, #164]	@ (8013450 <__swsetup_r+0xa8>)
 80133ac:	4605      	mov	r5, r0
 80133ae:	6818      	ldr	r0, [r3, #0]
 80133b0:	460c      	mov	r4, r1
 80133b2:	b118      	cbz	r0, 80133bc <__swsetup_r+0x14>
 80133b4:	6a03      	ldr	r3, [r0, #32]
 80133b6:	b90b      	cbnz	r3, 80133bc <__swsetup_r+0x14>
 80133b8:	f7fd fa8c 	bl	80108d4 <__sinit>
 80133bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133c0:	0719      	lsls	r1, r3, #28
 80133c2:	d422      	bmi.n	801340a <__swsetup_r+0x62>
 80133c4:	06da      	lsls	r2, r3, #27
 80133c6:	d407      	bmi.n	80133d8 <__swsetup_r+0x30>
 80133c8:	2209      	movs	r2, #9
 80133ca:	602a      	str	r2, [r5, #0]
 80133cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80133d0:	81a3      	strh	r3, [r4, #12]
 80133d2:	f04f 30ff 	mov.w	r0, #4294967295
 80133d6:	e033      	b.n	8013440 <__swsetup_r+0x98>
 80133d8:	0758      	lsls	r0, r3, #29
 80133da:	d512      	bpl.n	8013402 <__swsetup_r+0x5a>
 80133dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80133de:	b141      	cbz	r1, 80133f2 <__swsetup_r+0x4a>
 80133e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80133e4:	4299      	cmp	r1, r3
 80133e6:	d002      	beq.n	80133ee <__swsetup_r+0x46>
 80133e8:	4628      	mov	r0, r5
 80133ea:	f7fe fa29 	bl	8011840 <_free_r>
 80133ee:	2300      	movs	r3, #0
 80133f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80133f2:	89a3      	ldrh	r3, [r4, #12]
 80133f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80133f8:	81a3      	strh	r3, [r4, #12]
 80133fa:	2300      	movs	r3, #0
 80133fc:	6063      	str	r3, [r4, #4]
 80133fe:	6923      	ldr	r3, [r4, #16]
 8013400:	6023      	str	r3, [r4, #0]
 8013402:	89a3      	ldrh	r3, [r4, #12]
 8013404:	f043 0308 	orr.w	r3, r3, #8
 8013408:	81a3      	strh	r3, [r4, #12]
 801340a:	6923      	ldr	r3, [r4, #16]
 801340c:	b94b      	cbnz	r3, 8013422 <__swsetup_r+0x7a>
 801340e:	89a3      	ldrh	r3, [r4, #12]
 8013410:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013418:	d003      	beq.n	8013422 <__swsetup_r+0x7a>
 801341a:	4621      	mov	r1, r4
 801341c:	4628      	mov	r0, r5
 801341e:	f000 f883 	bl	8013528 <__smakebuf_r>
 8013422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013426:	f013 0201 	ands.w	r2, r3, #1
 801342a:	d00a      	beq.n	8013442 <__swsetup_r+0x9a>
 801342c:	2200      	movs	r2, #0
 801342e:	60a2      	str	r2, [r4, #8]
 8013430:	6962      	ldr	r2, [r4, #20]
 8013432:	4252      	negs	r2, r2
 8013434:	61a2      	str	r2, [r4, #24]
 8013436:	6922      	ldr	r2, [r4, #16]
 8013438:	b942      	cbnz	r2, 801344c <__swsetup_r+0xa4>
 801343a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801343e:	d1c5      	bne.n	80133cc <__swsetup_r+0x24>
 8013440:	bd38      	pop	{r3, r4, r5, pc}
 8013442:	0799      	lsls	r1, r3, #30
 8013444:	bf58      	it	pl
 8013446:	6962      	ldrpl	r2, [r4, #20]
 8013448:	60a2      	str	r2, [r4, #8]
 801344a:	e7f4      	b.n	8013436 <__swsetup_r+0x8e>
 801344c:	2000      	movs	r0, #0
 801344e:	e7f7      	b.n	8013440 <__swsetup_r+0x98>
 8013450:	20000240 	.word	0x20000240

08013454 <_raise_r>:
 8013454:	291f      	cmp	r1, #31
 8013456:	b538      	push	{r3, r4, r5, lr}
 8013458:	4605      	mov	r5, r0
 801345a:	460c      	mov	r4, r1
 801345c:	d904      	bls.n	8013468 <_raise_r+0x14>
 801345e:	2316      	movs	r3, #22
 8013460:	6003      	str	r3, [r0, #0]
 8013462:	f04f 30ff 	mov.w	r0, #4294967295
 8013466:	bd38      	pop	{r3, r4, r5, pc}
 8013468:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801346a:	b112      	cbz	r2, 8013472 <_raise_r+0x1e>
 801346c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013470:	b94b      	cbnz	r3, 8013486 <_raise_r+0x32>
 8013472:	4628      	mov	r0, r5
 8013474:	f000 f830 	bl	80134d8 <_getpid_r>
 8013478:	4622      	mov	r2, r4
 801347a:	4601      	mov	r1, r0
 801347c:	4628      	mov	r0, r5
 801347e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013482:	f000 b817 	b.w	80134b4 <_kill_r>
 8013486:	2b01      	cmp	r3, #1
 8013488:	d00a      	beq.n	80134a0 <_raise_r+0x4c>
 801348a:	1c59      	adds	r1, r3, #1
 801348c:	d103      	bne.n	8013496 <_raise_r+0x42>
 801348e:	2316      	movs	r3, #22
 8013490:	6003      	str	r3, [r0, #0]
 8013492:	2001      	movs	r0, #1
 8013494:	e7e7      	b.n	8013466 <_raise_r+0x12>
 8013496:	2100      	movs	r1, #0
 8013498:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801349c:	4620      	mov	r0, r4
 801349e:	4798      	blx	r3
 80134a0:	2000      	movs	r0, #0
 80134a2:	e7e0      	b.n	8013466 <_raise_r+0x12>

080134a4 <raise>:
 80134a4:	4b02      	ldr	r3, [pc, #8]	@ (80134b0 <raise+0xc>)
 80134a6:	4601      	mov	r1, r0
 80134a8:	6818      	ldr	r0, [r3, #0]
 80134aa:	f7ff bfd3 	b.w	8013454 <_raise_r>
 80134ae:	bf00      	nop
 80134b0:	20000240 	.word	0x20000240

080134b4 <_kill_r>:
 80134b4:	b538      	push	{r3, r4, r5, lr}
 80134b6:	4d07      	ldr	r5, [pc, #28]	@ (80134d4 <_kill_r+0x20>)
 80134b8:	2300      	movs	r3, #0
 80134ba:	4604      	mov	r4, r0
 80134bc:	4608      	mov	r0, r1
 80134be:	4611      	mov	r1, r2
 80134c0:	602b      	str	r3, [r5, #0]
 80134c2:	f7ee fcab 	bl	8001e1c <_kill>
 80134c6:	1c43      	adds	r3, r0, #1
 80134c8:	d102      	bne.n	80134d0 <_kill_r+0x1c>
 80134ca:	682b      	ldr	r3, [r5, #0]
 80134cc:	b103      	cbz	r3, 80134d0 <_kill_r+0x1c>
 80134ce:	6023      	str	r3, [r4, #0]
 80134d0:	bd38      	pop	{r3, r4, r5, pc}
 80134d2:	bf00      	nop
 80134d4:	20000e94 	.word	0x20000e94

080134d8 <_getpid_r>:
 80134d8:	f7ee bc98 	b.w	8001e0c <_getpid>

080134dc <__swhatbuf_r>:
 80134dc:	b570      	push	{r4, r5, r6, lr}
 80134de:	460c      	mov	r4, r1
 80134e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134e4:	2900      	cmp	r1, #0
 80134e6:	b096      	sub	sp, #88	@ 0x58
 80134e8:	4615      	mov	r5, r2
 80134ea:	461e      	mov	r6, r3
 80134ec:	da0d      	bge.n	801350a <__swhatbuf_r+0x2e>
 80134ee:	89a3      	ldrh	r3, [r4, #12]
 80134f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80134f4:	f04f 0100 	mov.w	r1, #0
 80134f8:	bf14      	ite	ne
 80134fa:	2340      	movne	r3, #64	@ 0x40
 80134fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013500:	2000      	movs	r0, #0
 8013502:	6031      	str	r1, [r6, #0]
 8013504:	602b      	str	r3, [r5, #0]
 8013506:	b016      	add	sp, #88	@ 0x58
 8013508:	bd70      	pop	{r4, r5, r6, pc}
 801350a:	466a      	mov	r2, sp
 801350c:	f000 f848 	bl	80135a0 <_fstat_r>
 8013510:	2800      	cmp	r0, #0
 8013512:	dbec      	blt.n	80134ee <__swhatbuf_r+0x12>
 8013514:	9901      	ldr	r1, [sp, #4]
 8013516:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801351a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801351e:	4259      	negs	r1, r3
 8013520:	4159      	adcs	r1, r3
 8013522:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013526:	e7eb      	b.n	8013500 <__swhatbuf_r+0x24>

08013528 <__smakebuf_r>:
 8013528:	898b      	ldrh	r3, [r1, #12]
 801352a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801352c:	079d      	lsls	r5, r3, #30
 801352e:	4606      	mov	r6, r0
 8013530:	460c      	mov	r4, r1
 8013532:	d507      	bpl.n	8013544 <__smakebuf_r+0x1c>
 8013534:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013538:	6023      	str	r3, [r4, #0]
 801353a:	6123      	str	r3, [r4, #16]
 801353c:	2301      	movs	r3, #1
 801353e:	6163      	str	r3, [r4, #20]
 8013540:	b003      	add	sp, #12
 8013542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013544:	ab01      	add	r3, sp, #4
 8013546:	466a      	mov	r2, sp
 8013548:	f7ff ffc8 	bl	80134dc <__swhatbuf_r>
 801354c:	9f00      	ldr	r7, [sp, #0]
 801354e:	4605      	mov	r5, r0
 8013550:	4639      	mov	r1, r7
 8013552:	4630      	mov	r0, r6
 8013554:	f7fe fd22 	bl	8011f9c <_malloc_r>
 8013558:	b948      	cbnz	r0, 801356e <__smakebuf_r+0x46>
 801355a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801355e:	059a      	lsls	r2, r3, #22
 8013560:	d4ee      	bmi.n	8013540 <__smakebuf_r+0x18>
 8013562:	f023 0303 	bic.w	r3, r3, #3
 8013566:	f043 0302 	orr.w	r3, r3, #2
 801356a:	81a3      	strh	r3, [r4, #12]
 801356c:	e7e2      	b.n	8013534 <__smakebuf_r+0xc>
 801356e:	89a3      	ldrh	r3, [r4, #12]
 8013570:	6020      	str	r0, [r4, #0]
 8013572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013576:	81a3      	strh	r3, [r4, #12]
 8013578:	9b01      	ldr	r3, [sp, #4]
 801357a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801357e:	b15b      	cbz	r3, 8013598 <__smakebuf_r+0x70>
 8013580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013584:	4630      	mov	r0, r6
 8013586:	f000 f81d 	bl	80135c4 <_isatty_r>
 801358a:	b128      	cbz	r0, 8013598 <__smakebuf_r+0x70>
 801358c:	89a3      	ldrh	r3, [r4, #12]
 801358e:	f023 0303 	bic.w	r3, r3, #3
 8013592:	f043 0301 	orr.w	r3, r3, #1
 8013596:	81a3      	strh	r3, [r4, #12]
 8013598:	89a3      	ldrh	r3, [r4, #12]
 801359a:	431d      	orrs	r5, r3
 801359c:	81a5      	strh	r5, [r4, #12]
 801359e:	e7cf      	b.n	8013540 <__smakebuf_r+0x18>

080135a0 <_fstat_r>:
 80135a0:	b538      	push	{r3, r4, r5, lr}
 80135a2:	4d07      	ldr	r5, [pc, #28]	@ (80135c0 <_fstat_r+0x20>)
 80135a4:	2300      	movs	r3, #0
 80135a6:	4604      	mov	r4, r0
 80135a8:	4608      	mov	r0, r1
 80135aa:	4611      	mov	r1, r2
 80135ac:	602b      	str	r3, [r5, #0]
 80135ae:	f7ee fc95 	bl	8001edc <_fstat>
 80135b2:	1c43      	adds	r3, r0, #1
 80135b4:	d102      	bne.n	80135bc <_fstat_r+0x1c>
 80135b6:	682b      	ldr	r3, [r5, #0]
 80135b8:	b103      	cbz	r3, 80135bc <_fstat_r+0x1c>
 80135ba:	6023      	str	r3, [r4, #0]
 80135bc:	bd38      	pop	{r3, r4, r5, pc}
 80135be:	bf00      	nop
 80135c0:	20000e94 	.word	0x20000e94

080135c4 <_isatty_r>:
 80135c4:	b538      	push	{r3, r4, r5, lr}
 80135c6:	4d06      	ldr	r5, [pc, #24]	@ (80135e0 <_isatty_r+0x1c>)
 80135c8:	2300      	movs	r3, #0
 80135ca:	4604      	mov	r4, r0
 80135cc:	4608      	mov	r0, r1
 80135ce:	602b      	str	r3, [r5, #0]
 80135d0:	f7ee fc94 	bl	8001efc <_isatty>
 80135d4:	1c43      	adds	r3, r0, #1
 80135d6:	d102      	bne.n	80135de <_isatty_r+0x1a>
 80135d8:	682b      	ldr	r3, [r5, #0]
 80135da:	b103      	cbz	r3, 80135de <_isatty_r+0x1a>
 80135dc:	6023      	str	r3, [r4, #0]
 80135de:	bd38      	pop	{r3, r4, r5, pc}
 80135e0:	20000e94 	.word	0x20000e94

080135e4 <asin>:
 80135e4:	b538      	push	{r3, r4, r5, lr}
 80135e6:	ed2d 8b02 	vpush	{d8}
 80135ea:	ec55 4b10 	vmov	r4, r5, d0
 80135ee:	f000 f96b 	bl	80138c8 <__ieee754_asin>
 80135f2:	4622      	mov	r2, r4
 80135f4:	462b      	mov	r3, r5
 80135f6:	4620      	mov	r0, r4
 80135f8:	4629      	mov	r1, r5
 80135fa:	eeb0 8a40 	vmov.f32	s16, s0
 80135fe:	eef0 8a60 	vmov.f32	s17, s1
 8013602:	f7ed fabb 	bl	8000b7c <__aeabi_dcmpun>
 8013606:	b9a8      	cbnz	r0, 8013634 <asin+0x50>
 8013608:	ec45 4b10 	vmov	d0, r4, r5
 801360c:	f000 f87a 	bl	8013704 <fabs>
 8013610:	4b0c      	ldr	r3, [pc, #48]	@ (8013644 <asin+0x60>)
 8013612:	ec51 0b10 	vmov	r0, r1, d0
 8013616:	2200      	movs	r2, #0
 8013618:	f7ed faa6 	bl	8000b68 <__aeabi_dcmpgt>
 801361c:	b150      	cbz	r0, 8013634 <asin+0x50>
 801361e:	f7fd fa77 	bl	8010b10 <__errno>
 8013622:	ecbd 8b02 	vpop	{d8}
 8013626:	2321      	movs	r3, #33	@ 0x21
 8013628:	6003      	str	r3, [r0, #0]
 801362a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801362e:	4806      	ldr	r0, [pc, #24]	@ (8013648 <asin+0x64>)
 8013630:	f7fd baaa 	b.w	8010b88 <nan>
 8013634:	eeb0 0a48 	vmov.f32	s0, s16
 8013638:	eef0 0a68 	vmov.f32	s1, s17
 801363c:	ecbd 8b02 	vpop	{d8}
 8013640:	bd38      	pop	{r3, r4, r5, pc}
 8013642:	bf00      	nop
 8013644:	3ff00000 	.word	0x3ff00000
 8013648:	0801498d 	.word	0x0801498d

0801364c <atan2>:
 801364c:	f000 bb40 	b.w	8013cd0 <__ieee754_atan2>

08013650 <fmod>:
 8013650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013652:	ed2d 8b02 	vpush	{d8}
 8013656:	ec57 6b10 	vmov	r6, r7, d0
 801365a:	ec55 4b11 	vmov	r4, r5, d1
 801365e:	f000 fbfd 	bl	8013e5c <__ieee754_fmod>
 8013662:	4622      	mov	r2, r4
 8013664:	462b      	mov	r3, r5
 8013666:	4630      	mov	r0, r6
 8013668:	4639      	mov	r1, r7
 801366a:	eeb0 8a40 	vmov.f32	s16, s0
 801366e:	eef0 8a60 	vmov.f32	s17, s1
 8013672:	f7ed fa83 	bl	8000b7c <__aeabi_dcmpun>
 8013676:	b990      	cbnz	r0, 801369e <fmod+0x4e>
 8013678:	2200      	movs	r2, #0
 801367a:	2300      	movs	r3, #0
 801367c:	4620      	mov	r0, r4
 801367e:	4629      	mov	r1, r5
 8013680:	f7ed fa4a 	bl	8000b18 <__aeabi_dcmpeq>
 8013684:	b158      	cbz	r0, 801369e <fmod+0x4e>
 8013686:	f7fd fa43 	bl	8010b10 <__errno>
 801368a:	2321      	movs	r3, #33	@ 0x21
 801368c:	6003      	str	r3, [r0, #0]
 801368e:	2200      	movs	r2, #0
 8013690:	2300      	movs	r3, #0
 8013692:	4610      	mov	r0, r2
 8013694:	4619      	mov	r1, r3
 8013696:	f7ed f901 	bl	800089c <__aeabi_ddiv>
 801369a:	ec41 0b18 	vmov	d8, r0, r1
 801369e:	eeb0 0a48 	vmov.f32	s0, s16
 80136a2:	eef0 0a68 	vmov.f32	s1, s17
 80136a6:	ecbd 8b02 	vpop	{d8}
 80136aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080136ac <sqrt>:
 80136ac:	b538      	push	{r3, r4, r5, lr}
 80136ae:	ed2d 8b02 	vpush	{d8}
 80136b2:	ec55 4b10 	vmov	r4, r5, d0
 80136b6:	f000 f82d 	bl	8013714 <__ieee754_sqrt>
 80136ba:	4622      	mov	r2, r4
 80136bc:	462b      	mov	r3, r5
 80136be:	4620      	mov	r0, r4
 80136c0:	4629      	mov	r1, r5
 80136c2:	eeb0 8a40 	vmov.f32	s16, s0
 80136c6:	eef0 8a60 	vmov.f32	s17, s1
 80136ca:	f7ed fa57 	bl	8000b7c <__aeabi_dcmpun>
 80136ce:	b990      	cbnz	r0, 80136f6 <sqrt+0x4a>
 80136d0:	2200      	movs	r2, #0
 80136d2:	2300      	movs	r3, #0
 80136d4:	4620      	mov	r0, r4
 80136d6:	4629      	mov	r1, r5
 80136d8:	f7ed fa28 	bl	8000b2c <__aeabi_dcmplt>
 80136dc:	b158      	cbz	r0, 80136f6 <sqrt+0x4a>
 80136de:	f7fd fa17 	bl	8010b10 <__errno>
 80136e2:	2321      	movs	r3, #33	@ 0x21
 80136e4:	6003      	str	r3, [r0, #0]
 80136e6:	2200      	movs	r2, #0
 80136e8:	2300      	movs	r3, #0
 80136ea:	4610      	mov	r0, r2
 80136ec:	4619      	mov	r1, r3
 80136ee:	f7ed f8d5 	bl	800089c <__aeabi_ddiv>
 80136f2:	ec41 0b18 	vmov	d8, r0, r1
 80136f6:	eeb0 0a48 	vmov.f32	s0, s16
 80136fa:	eef0 0a68 	vmov.f32	s1, s17
 80136fe:	ecbd 8b02 	vpop	{d8}
 8013702:	bd38      	pop	{r3, r4, r5, pc}

08013704 <fabs>:
 8013704:	ec51 0b10 	vmov	r0, r1, d0
 8013708:	4602      	mov	r2, r0
 801370a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801370e:	ec43 2b10 	vmov	d0, r2, r3
 8013712:	4770      	bx	lr

08013714 <__ieee754_sqrt>:
 8013714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013718:	4a68      	ldr	r2, [pc, #416]	@ (80138bc <__ieee754_sqrt+0x1a8>)
 801371a:	ec55 4b10 	vmov	r4, r5, d0
 801371e:	43aa      	bics	r2, r5
 8013720:	462b      	mov	r3, r5
 8013722:	4621      	mov	r1, r4
 8013724:	d110      	bne.n	8013748 <__ieee754_sqrt+0x34>
 8013726:	4622      	mov	r2, r4
 8013728:	4620      	mov	r0, r4
 801372a:	4629      	mov	r1, r5
 801372c:	f7ec ff8c 	bl	8000648 <__aeabi_dmul>
 8013730:	4602      	mov	r2, r0
 8013732:	460b      	mov	r3, r1
 8013734:	4620      	mov	r0, r4
 8013736:	4629      	mov	r1, r5
 8013738:	f7ec fdd0 	bl	80002dc <__adddf3>
 801373c:	4604      	mov	r4, r0
 801373e:	460d      	mov	r5, r1
 8013740:	ec45 4b10 	vmov	d0, r4, r5
 8013744:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013748:	2d00      	cmp	r5, #0
 801374a:	dc0e      	bgt.n	801376a <__ieee754_sqrt+0x56>
 801374c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8013750:	4322      	orrs	r2, r4
 8013752:	d0f5      	beq.n	8013740 <__ieee754_sqrt+0x2c>
 8013754:	b19d      	cbz	r5, 801377e <__ieee754_sqrt+0x6a>
 8013756:	4622      	mov	r2, r4
 8013758:	4620      	mov	r0, r4
 801375a:	4629      	mov	r1, r5
 801375c:	f7ec fdbc 	bl	80002d8 <__aeabi_dsub>
 8013760:	4602      	mov	r2, r0
 8013762:	460b      	mov	r3, r1
 8013764:	f7ed f89a 	bl	800089c <__aeabi_ddiv>
 8013768:	e7e8      	b.n	801373c <__ieee754_sqrt+0x28>
 801376a:	152a      	asrs	r2, r5, #20
 801376c:	d115      	bne.n	801379a <__ieee754_sqrt+0x86>
 801376e:	2000      	movs	r0, #0
 8013770:	e009      	b.n	8013786 <__ieee754_sqrt+0x72>
 8013772:	0acb      	lsrs	r3, r1, #11
 8013774:	3a15      	subs	r2, #21
 8013776:	0549      	lsls	r1, r1, #21
 8013778:	2b00      	cmp	r3, #0
 801377a:	d0fa      	beq.n	8013772 <__ieee754_sqrt+0x5e>
 801377c:	e7f7      	b.n	801376e <__ieee754_sqrt+0x5a>
 801377e:	462a      	mov	r2, r5
 8013780:	e7fa      	b.n	8013778 <__ieee754_sqrt+0x64>
 8013782:	005b      	lsls	r3, r3, #1
 8013784:	3001      	adds	r0, #1
 8013786:	02dc      	lsls	r4, r3, #11
 8013788:	d5fb      	bpl.n	8013782 <__ieee754_sqrt+0x6e>
 801378a:	1e44      	subs	r4, r0, #1
 801378c:	1b12      	subs	r2, r2, r4
 801378e:	f1c0 0420 	rsb	r4, r0, #32
 8013792:	fa21 f404 	lsr.w	r4, r1, r4
 8013796:	4323      	orrs	r3, r4
 8013798:	4081      	lsls	r1, r0
 801379a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801379e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80137a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80137a6:	07d2      	lsls	r2, r2, #31
 80137a8:	bf5c      	itt	pl
 80137aa:	005b      	lslpl	r3, r3, #1
 80137ac:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80137b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80137b4:	bf58      	it	pl
 80137b6:	0049      	lslpl	r1, r1, #1
 80137b8:	2600      	movs	r6, #0
 80137ba:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80137be:	106d      	asrs	r5, r5, #1
 80137c0:	0049      	lsls	r1, r1, #1
 80137c2:	2016      	movs	r0, #22
 80137c4:	4632      	mov	r2, r6
 80137c6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80137ca:	1917      	adds	r7, r2, r4
 80137cc:	429f      	cmp	r7, r3
 80137ce:	bfde      	ittt	le
 80137d0:	193a      	addle	r2, r7, r4
 80137d2:	1bdb      	suble	r3, r3, r7
 80137d4:	1936      	addle	r6, r6, r4
 80137d6:	0fcf      	lsrs	r7, r1, #31
 80137d8:	3801      	subs	r0, #1
 80137da:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80137de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80137e2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80137e6:	d1f0      	bne.n	80137ca <__ieee754_sqrt+0xb6>
 80137e8:	4604      	mov	r4, r0
 80137ea:	2720      	movs	r7, #32
 80137ec:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80137f0:	429a      	cmp	r2, r3
 80137f2:	eb00 0e0c 	add.w	lr, r0, ip
 80137f6:	db02      	blt.n	80137fe <__ieee754_sqrt+0xea>
 80137f8:	d113      	bne.n	8013822 <__ieee754_sqrt+0x10e>
 80137fa:	458e      	cmp	lr, r1
 80137fc:	d811      	bhi.n	8013822 <__ieee754_sqrt+0x10e>
 80137fe:	f1be 0f00 	cmp.w	lr, #0
 8013802:	eb0e 000c 	add.w	r0, lr, ip
 8013806:	da42      	bge.n	801388e <__ieee754_sqrt+0x17a>
 8013808:	2800      	cmp	r0, #0
 801380a:	db40      	blt.n	801388e <__ieee754_sqrt+0x17a>
 801380c:	f102 0801 	add.w	r8, r2, #1
 8013810:	1a9b      	subs	r3, r3, r2
 8013812:	458e      	cmp	lr, r1
 8013814:	bf88      	it	hi
 8013816:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801381a:	eba1 010e 	sub.w	r1, r1, lr
 801381e:	4464      	add	r4, ip
 8013820:	4642      	mov	r2, r8
 8013822:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8013826:	3f01      	subs	r7, #1
 8013828:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801382c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013830:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013834:	d1dc      	bne.n	80137f0 <__ieee754_sqrt+0xdc>
 8013836:	4319      	orrs	r1, r3
 8013838:	d01b      	beq.n	8013872 <__ieee754_sqrt+0x15e>
 801383a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80138c0 <__ieee754_sqrt+0x1ac>
 801383e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80138c4 <__ieee754_sqrt+0x1b0>
 8013842:	e9da 0100 	ldrd	r0, r1, [sl]
 8013846:	e9db 2300 	ldrd	r2, r3, [fp]
 801384a:	f7ec fd45 	bl	80002d8 <__aeabi_dsub>
 801384e:	e9da 8900 	ldrd	r8, r9, [sl]
 8013852:	4602      	mov	r2, r0
 8013854:	460b      	mov	r3, r1
 8013856:	4640      	mov	r0, r8
 8013858:	4649      	mov	r1, r9
 801385a:	f7ed f971 	bl	8000b40 <__aeabi_dcmple>
 801385e:	b140      	cbz	r0, 8013872 <__ieee754_sqrt+0x15e>
 8013860:	f1b4 3fff 	cmp.w	r4, #4294967295
 8013864:	e9da 0100 	ldrd	r0, r1, [sl]
 8013868:	e9db 2300 	ldrd	r2, r3, [fp]
 801386c:	d111      	bne.n	8013892 <__ieee754_sqrt+0x17e>
 801386e:	3601      	adds	r6, #1
 8013870:	463c      	mov	r4, r7
 8013872:	1072      	asrs	r2, r6, #1
 8013874:	0863      	lsrs	r3, r4, #1
 8013876:	07f1      	lsls	r1, r6, #31
 8013878:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801387c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8013880:	bf48      	it	mi
 8013882:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8013886:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801388a:	4618      	mov	r0, r3
 801388c:	e756      	b.n	801373c <__ieee754_sqrt+0x28>
 801388e:	4690      	mov	r8, r2
 8013890:	e7be      	b.n	8013810 <__ieee754_sqrt+0xfc>
 8013892:	f7ec fd23 	bl	80002dc <__adddf3>
 8013896:	e9da 8900 	ldrd	r8, r9, [sl]
 801389a:	4602      	mov	r2, r0
 801389c:	460b      	mov	r3, r1
 801389e:	4640      	mov	r0, r8
 80138a0:	4649      	mov	r1, r9
 80138a2:	f7ed f943 	bl	8000b2c <__aeabi_dcmplt>
 80138a6:	b120      	cbz	r0, 80138b2 <__ieee754_sqrt+0x19e>
 80138a8:	1ca0      	adds	r0, r4, #2
 80138aa:	bf08      	it	eq
 80138ac:	3601      	addeq	r6, #1
 80138ae:	3402      	adds	r4, #2
 80138b0:	e7df      	b.n	8013872 <__ieee754_sqrt+0x15e>
 80138b2:	1c63      	adds	r3, r4, #1
 80138b4:	f023 0401 	bic.w	r4, r3, #1
 80138b8:	e7db      	b.n	8013872 <__ieee754_sqrt+0x15e>
 80138ba:	bf00      	nop
 80138bc:	7ff00000 	.word	0x7ff00000
 80138c0:	20000298 	.word	0x20000298
 80138c4:	20000290 	.word	0x20000290

080138c8 <__ieee754_asin>:
 80138c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138cc:	ec55 4b10 	vmov	r4, r5, d0
 80138d0:	4bc7      	ldr	r3, [pc, #796]	@ (8013bf0 <__ieee754_asin+0x328>)
 80138d2:	b087      	sub	sp, #28
 80138d4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80138d8:	429e      	cmp	r6, r3
 80138da:	9501      	str	r5, [sp, #4]
 80138dc:	d92d      	bls.n	801393a <__ieee754_asin+0x72>
 80138de:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80138e2:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80138e6:	4326      	orrs	r6, r4
 80138e8:	d116      	bne.n	8013918 <__ieee754_asin+0x50>
 80138ea:	a3a7      	add	r3, pc, #668	@ (adr r3, 8013b88 <__ieee754_asin+0x2c0>)
 80138ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138f0:	4620      	mov	r0, r4
 80138f2:	4629      	mov	r1, r5
 80138f4:	f7ec fea8 	bl	8000648 <__aeabi_dmul>
 80138f8:	a3a5      	add	r3, pc, #660	@ (adr r3, 8013b90 <__ieee754_asin+0x2c8>)
 80138fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138fe:	4606      	mov	r6, r0
 8013900:	460f      	mov	r7, r1
 8013902:	4620      	mov	r0, r4
 8013904:	4629      	mov	r1, r5
 8013906:	f7ec fe9f 	bl	8000648 <__aeabi_dmul>
 801390a:	4602      	mov	r2, r0
 801390c:	460b      	mov	r3, r1
 801390e:	4630      	mov	r0, r6
 8013910:	4639      	mov	r1, r7
 8013912:	f7ec fce3 	bl	80002dc <__adddf3>
 8013916:	e009      	b.n	801392c <__ieee754_asin+0x64>
 8013918:	4622      	mov	r2, r4
 801391a:	462b      	mov	r3, r5
 801391c:	4620      	mov	r0, r4
 801391e:	4629      	mov	r1, r5
 8013920:	f7ec fcda 	bl	80002d8 <__aeabi_dsub>
 8013924:	4602      	mov	r2, r0
 8013926:	460b      	mov	r3, r1
 8013928:	f7ec ffb8 	bl	800089c <__aeabi_ddiv>
 801392c:	4604      	mov	r4, r0
 801392e:	460d      	mov	r5, r1
 8013930:	ec45 4b10 	vmov	d0, r4, r5
 8013934:	b007      	add	sp, #28
 8013936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801393a:	4bae      	ldr	r3, [pc, #696]	@ (8013bf4 <__ieee754_asin+0x32c>)
 801393c:	429e      	cmp	r6, r3
 801393e:	d810      	bhi.n	8013962 <__ieee754_asin+0x9a>
 8013940:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8013944:	f080 80ad 	bcs.w	8013aa2 <__ieee754_asin+0x1da>
 8013948:	a393      	add	r3, pc, #588	@ (adr r3, 8013b98 <__ieee754_asin+0x2d0>)
 801394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801394e:	4620      	mov	r0, r4
 8013950:	4629      	mov	r1, r5
 8013952:	f7ec fcc3 	bl	80002dc <__adddf3>
 8013956:	4ba8      	ldr	r3, [pc, #672]	@ (8013bf8 <__ieee754_asin+0x330>)
 8013958:	2200      	movs	r2, #0
 801395a:	f7ed f905 	bl	8000b68 <__aeabi_dcmpgt>
 801395e:	2800      	cmp	r0, #0
 8013960:	d1e6      	bne.n	8013930 <__ieee754_asin+0x68>
 8013962:	ec45 4b10 	vmov	d0, r4, r5
 8013966:	f7ff fecd 	bl	8013704 <fabs>
 801396a:	49a3      	ldr	r1, [pc, #652]	@ (8013bf8 <__ieee754_asin+0x330>)
 801396c:	ec53 2b10 	vmov	r2, r3, d0
 8013970:	2000      	movs	r0, #0
 8013972:	f7ec fcb1 	bl	80002d8 <__aeabi_dsub>
 8013976:	4ba1      	ldr	r3, [pc, #644]	@ (8013bfc <__ieee754_asin+0x334>)
 8013978:	2200      	movs	r2, #0
 801397a:	f7ec fe65 	bl	8000648 <__aeabi_dmul>
 801397e:	a388      	add	r3, pc, #544	@ (adr r3, 8013ba0 <__ieee754_asin+0x2d8>)
 8013980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013984:	4604      	mov	r4, r0
 8013986:	460d      	mov	r5, r1
 8013988:	f7ec fe5e 	bl	8000648 <__aeabi_dmul>
 801398c:	a386      	add	r3, pc, #536	@ (adr r3, 8013ba8 <__ieee754_asin+0x2e0>)
 801398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013992:	f7ec fca3 	bl	80002dc <__adddf3>
 8013996:	4622      	mov	r2, r4
 8013998:	462b      	mov	r3, r5
 801399a:	f7ec fe55 	bl	8000648 <__aeabi_dmul>
 801399e:	a384      	add	r3, pc, #528	@ (adr r3, 8013bb0 <__ieee754_asin+0x2e8>)
 80139a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139a4:	f7ec fc98 	bl	80002d8 <__aeabi_dsub>
 80139a8:	4622      	mov	r2, r4
 80139aa:	462b      	mov	r3, r5
 80139ac:	f7ec fe4c 	bl	8000648 <__aeabi_dmul>
 80139b0:	a381      	add	r3, pc, #516	@ (adr r3, 8013bb8 <__ieee754_asin+0x2f0>)
 80139b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139b6:	f7ec fc91 	bl	80002dc <__adddf3>
 80139ba:	4622      	mov	r2, r4
 80139bc:	462b      	mov	r3, r5
 80139be:	f7ec fe43 	bl	8000648 <__aeabi_dmul>
 80139c2:	a37f      	add	r3, pc, #508	@ (adr r3, 8013bc0 <__ieee754_asin+0x2f8>)
 80139c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c8:	f7ec fc86 	bl	80002d8 <__aeabi_dsub>
 80139cc:	4622      	mov	r2, r4
 80139ce:	462b      	mov	r3, r5
 80139d0:	f7ec fe3a 	bl	8000648 <__aeabi_dmul>
 80139d4:	a37c      	add	r3, pc, #496	@ (adr r3, 8013bc8 <__ieee754_asin+0x300>)
 80139d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139da:	f7ec fc7f 	bl	80002dc <__adddf3>
 80139de:	4622      	mov	r2, r4
 80139e0:	462b      	mov	r3, r5
 80139e2:	f7ec fe31 	bl	8000648 <__aeabi_dmul>
 80139e6:	a37a      	add	r3, pc, #488	@ (adr r3, 8013bd0 <__ieee754_asin+0x308>)
 80139e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80139f0:	4620      	mov	r0, r4
 80139f2:	4629      	mov	r1, r5
 80139f4:	f7ec fe28 	bl	8000648 <__aeabi_dmul>
 80139f8:	a377      	add	r3, pc, #476	@ (adr r3, 8013bd8 <__ieee754_asin+0x310>)
 80139fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139fe:	f7ec fc6b 	bl	80002d8 <__aeabi_dsub>
 8013a02:	4622      	mov	r2, r4
 8013a04:	462b      	mov	r3, r5
 8013a06:	f7ec fe1f 	bl	8000648 <__aeabi_dmul>
 8013a0a:	a375      	add	r3, pc, #468	@ (adr r3, 8013be0 <__ieee754_asin+0x318>)
 8013a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a10:	f7ec fc64 	bl	80002dc <__adddf3>
 8013a14:	4622      	mov	r2, r4
 8013a16:	462b      	mov	r3, r5
 8013a18:	f7ec fe16 	bl	8000648 <__aeabi_dmul>
 8013a1c:	a372      	add	r3, pc, #456	@ (adr r3, 8013be8 <__ieee754_asin+0x320>)
 8013a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a22:	f7ec fc59 	bl	80002d8 <__aeabi_dsub>
 8013a26:	4622      	mov	r2, r4
 8013a28:	462b      	mov	r3, r5
 8013a2a:	f7ec fe0d 	bl	8000648 <__aeabi_dmul>
 8013a2e:	4b72      	ldr	r3, [pc, #456]	@ (8013bf8 <__ieee754_asin+0x330>)
 8013a30:	2200      	movs	r2, #0
 8013a32:	f7ec fc53 	bl	80002dc <__adddf3>
 8013a36:	ec45 4b10 	vmov	d0, r4, r5
 8013a3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a3e:	f7ff fe69 	bl	8013714 <__ieee754_sqrt>
 8013a42:	4b6f      	ldr	r3, [pc, #444]	@ (8013c00 <__ieee754_asin+0x338>)
 8013a44:	429e      	cmp	r6, r3
 8013a46:	ec5b ab10 	vmov	sl, fp, d0
 8013a4a:	f240 80db 	bls.w	8013c04 <__ieee754_asin+0x33c>
 8013a4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a56:	f7ec ff21 	bl	800089c <__aeabi_ddiv>
 8013a5a:	4652      	mov	r2, sl
 8013a5c:	465b      	mov	r3, fp
 8013a5e:	f7ec fdf3 	bl	8000648 <__aeabi_dmul>
 8013a62:	4652      	mov	r2, sl
 8013a64:	465b      	mov	r3, fp
 8013a66:	f7ec fc39 	bl	80002dc <__adddf3>
 8013a6a:	4602      	mov	r2, r0
 8013a6c:	460b      	mov	r3, r1
 8013a6e:	f7ec fc35 	bl	80002dc <__adddf3>
 8013a72:	a347      	add	r3, pc, #284	@ (adr r3, 8013b90 <__ieee754_asin+0x2c8>)
 8013a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a78:	f7ec fc2e 	bl	80002d8 <__aeabi_dsub>
 8013a7c:	4602      	mov	r2, r0
 8013a7e:	460b      	mov	r3, r1
 8013a80:	a141      	add	r1, pc, #260	@ (adr r1, 8013b88 <__ieee754_asin+0x2c0>)
 8013a82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a86:	f7ec fc27 	bl	80002d8 <__aeabi_dsub>
 8013a8a:	9b01      	ldr	r3, [sp, #4]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	bfdc      	itt	le
 8013a90:	4602      	movle	r2, r0
 8013a92:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8013a96:	4604      	mov	r4, r0
 8013a98:	460d      	mov	r5, r1
 8013a9a:	bfdc      	itt	le
 8013a9c:	4614      	movle	r4, r2
 8013a9e:	461d      	movle	r5, r3
 8013aa0:	e746      	b.n	8013930 <__ieee754_asin+0x68>
 8013aa2:	4622      	mov	r2, r4
 8013aa4:	462b      	mov	r3, r5
 8013aa6:	4620      	mov	r0, r4
 8013aa8:	4629      	mov	r1, r5
 8013aaa:	f7ec fdcd 	bl	8000648 <__aeabi_dmul>
 8013aae:	a33c      	add	r3, pc, #240	@ (adr r3, 8013ba0 <__ieee754_asin+0x2d8>)
 8013ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ab4:	4606      	mov	r6, r0
 8013ab6:	460f      	mov	r7, r1
 8013ab8:	f7ec fdc6 	bl	8000648 <__aeabi_dmul>
 8013abc:	a33a      	add	r3, pc, #232	@ (adr r3, 8013ba8 <__ieee754_asin+0x2e0>)
 8013abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ac2:	f7ec fc0b 	bl	80002dc <__adddf3>
 8013ac6:	4632      	mov	r2, r6
 8013ac8:	463b      	mov	r3, r7
 8013aca:	f7ec fdbd 	bl	8000648 <__aeabi_dmul>
 8013ace:	a338      	add	r3, pc, #224	@ (adr r3, 8013bb0 <__ieee754_asin+0x2e8>)
 8013ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ad4:	f7ec fc00 	bl	80002d8 <__aeabi_dsub>
 8013ad8:	4632      	mov	r2, r6
 8013ada:	463b      	mov	r3, r7
 8013adc:	f7ec fdb4 	bl	8000648 <__aeabi_dmul>
 8013ae0:	a335      	add	r3, pc, #212	@ (adr r3, 8013bb8 <__ieee754_asin+0x2f0>)
 8013ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ae6:	f7ec fbf9 	bl	80002dc <__adddf3>
 8013aea:	4632      	mov	r2, r6
 8013aec:	463b      	mov	r3, r7
 8013aee:	f7ec fdab 	bl	8000648 <__aeabi_dmul>
 8013af2:	a333      	add	r3, pc, #204	@ (adr r3, 8013bc0 <__ieee754_asin+0x2f8>)
 8013af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013af8:	f7ec fbee 	bl	80002d8 <__aeabi_dsub>
 8013afc:	4632      	mov	r2, r6
 8013afe:	463b      	mov	r3, r7
 8013b00:	f7ec fda2 	bl	8000648 <__aeabi_dmul>
 8013b04:	a330      	add	r3, pc, #192	@ (adr r3, 8013bc8 <__ieee754_asin+0x300>)
 8013b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b0a:	f7ec fbe7 	bl	80002dc <__adddf3>
 8013b0e:	4632      	mov	r2, r6
 8013b10:	463b      	mov	r3, r7
 8013b12:	f7ec fd99 	bl	8000648 <__aeabi_dmul>
 8013b16:	a32e      	add	r3, pc, #184	@ (adr r3, 8013bd0 <__ieee754_asin+0x308>)
 8013b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b1c:	4680      	mov	r8, r0
 8013b1e:	4689      	mov	r9, r1
 8013b20:	4630      	mov	r0, r6
 8013b22:	4639      	mov	r1, r7
 8013b24:	f7ec fd90 	bl	8000648 <__aeabi_dmul>
 8013b28:	a32b      	add	r3, pc, #172	@ (adr r3, 8013bd8 <__ieee754_asin+0x310>)
 8013b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b2e:	f7ec fbd3 	bl	80002d8 <__aeabi_dsub>
 8013b32:	4632      	mov	r2, r6
 8013b34:	463b      	mov	r3, r7
 8013b36:	f7ec fd87 	bl	8000648 <__aeabi_dmul>
 8013b3a:	a329      	add	r3, pc, #164	@ (adr r3, 8013be0 <__ieee754_asin+0x318>)
 8013b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b40:	f7ec fbcc 	bl	80002dc <__adddf3>
 8013b44:	4632      	mov	r2, r6
 8013b46:	463b      	mov	r3, r7
 8013b48:	f7ec fd7e 	bl	8000648 <__aeabi_dmul>
 8013b4c:	a326      	add	r3, pc, #152	@ (adr r3, 8013be8 <__ieee754_asin+0x320>)
 8013b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b52:	f7ec fbc1 	bl	80002d8 <__aeabi_dsub>
 8013b56:	4632      	mov	r2, r6
 8013b58:	463b      	mov	r3, r7
 8013b5a:	f7ec fd75 	bl	8000648 <__aeabi_dmul>
 8013b5e:	4b26      	ldr	r3, [pc, #152]	@ (8013bf8 <__ieee754_asin+0x330>)
 8013b60:	2200      	movs	r2, #0
 8013b62:	f7ec fbbb 	bl	80002dc <__adddf3>
 8013b66:	4602      	mov	r2, r0
 8013b68:	460b      	mov	r3, r1
 8013b6a:	4640      	mov	r0, r8
 8013b6c:	4649      	mov	r1, r9
 8013b6e:	f7ec fe95 	bl	800089c <__aeabi_ddiv>
 8013b72:	4622      	mov	r2, r4
 8013b74:	462b      	mov	r3, r5
 8013b76:	f7ec fd67 	bl	8000648 <__aeabi_dmul>
 8013b7a:	4602      	mov	r2, r0
 8013b7c:	460b      	mov	r3, r1
 8013b7e:	4620      	mov	r0, r4
 8013b80:	4629      	mov	r1, r5
 8013b82:	e6c6      	b.n	8013912 <__ieee754_asin+0x4a>
 8013b84:	f3af 8000 	nop.w
 8013b88:	54442d18 	.word	0x54442d18
 8013b8c:	3ff921fb 	.word	0x3ff921fb
 8013b90:	33145c07 	.word	0x33145c07
 8013b94:	3c91a626 	.word	0x3c91a626
 8013b98:	8800759c 	.word	0x8800759c
 8013b9c:	7e37e43c 	.word	0x7e37e43c
 8013ba0:	0dfdf709 	.word	0x0dfdf709
 8013ba4:	3f023de1 	.word	0x3f023de1
 8013ba8:	7501b288 	.word	0x7501b288
 8013bac:	3f49efe0 	.word	0x3f49efe0
 8013bb0:	b5688f3b 	.word	0xb5688f3b
 8013bb4:	3fa48228 	.word	0x3fa48228
 8013bb8:	0e884455 	.word	0x0e884455
 8013bbc:	3fc9c155 	.word	0x3fc9c155
 8013bc0:	03eb6f7d 	.word	0x03eb6f7d
 8013bc4:	3fd4d612 	.word	0x3fd4d612
 8013bc8:	55555555 	.word	0x55555555
 8013bcc:	3fc55555 	.word	0x3fc55555
 8013bd0:	b12e9282 	.word	0xb12e9282
 8013bd4:	3fb3b8c5 	.word	0x3fb3b8c5
 8013bd8:	1b8d0159 	.word	0x1b8d0159
 8013bdc:	3fe6066c 	.word	0x3fe6066c
 8013be0:	9c598ac8 	.word	0x9c598ac8
 8013be4:	40002ae5 	.word	0x40002ae5
 8013be8:	1c8a2d4b 	.word	0x1c8a2d4b
 8013bec:	40033a27 	.word	0x40033a27
 8013bf0:	3fefffff 	.word	0x3fefffff
 8013bf4:	3fdfffff 	.word	0x3fdfffff
 8013bf8:	3ff00000 	.word	0x3ff00000
 8013bfc:	3fe00000 	.word	0x3fe00000
 8013c00:	3fef3332 	.word	0x3fef3332
 8013c04:	4652      	mov	r2, sl
 8013c06:	465b      	mov	r3, fp
 8013c08:	4650      	mov	r0, sl
 8013c0a:	4659      	mov	r1, fp
 8013c0c:	f7ec fb66 	bl	80002dc <__adddf3>
 8013c10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013c14:	4606      	mov	r6, r0
 8013c16:	460f      	mov	r7, r1
 8013c18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c1c:	f7ec fe3e 	bl	800089c <__aeabi_ddiv>
 8013c20:	4602      	mov	r2, r0
 8013c22:	460b      	mov	r3, r1
 8013c24:	4630      	mov	r0, r6
 8013c26:	4639      	mov	r1, r7
 8013c28:	f7ec fd0e 	bl	8000648 <__aeabi_dmul>
 8013c2c:	f04f 0800 	mov.w	r8, #0
 8013c30:	4606      	mov	r6, r0
 8013c32:	460f      	mov	r7, r1
 8013c34:	4642      	mov	r2, r8
 8013c36:	465b      	mov	r3, fp
 8013c38:	4640      	mov	r0, r8
 8013c3a:	4659      	mov	r1, fp
 8013c3c:	f7ec fd04 	bl	8000648 <__aeabi_dmul>
 8013c40:	4602      	mov	r2, r0
 8013c42:	460b      	mov	r3, r1
 8013c44:	4620      	mov	r0, r4
 8013c46:	4629      	mov	r1, r5
 8013c48:	f7ec fb46 	bl	80002d8 <__aeabi_dsub>
 8013c4c:	4642      	mov	r2, r8
 8013c4e:	4604      	mov	r4, r0
 8013c50:	460d      	mov	r5, r1
 8013c52:	465b      	mov	r3, fp
 8013c54:	4650      	mov	r0, sl
 8013c56:	4659      	mov	r1, fp
 8013c58:	f7ec fb40 	bl	80002dc <__adddf3>
 8013c5c:	4602      	mov	r2, r0
 8013c5e:	460b      	mov	r3, r1
 8013c60:	4620      	mov	r0, r4
 8013c62:	4629      	mov	r1, r5
 8013c64:	f7ec fe1a 	bl	800089c <__aeabi_ddiv>
 8013c68:	4602      	mov	r2, r0
 8013c6a:	460b      	mov	r3, r1
 8013c6c:	f7ec fb36 	bl	80002dc <__adddf3>
 8013c70:	4602      	mov	r2, r0
 8013c72:	460b      	mov	r3, r1
 8013c74:	a112      	add	r1, pc, #72	@ (adr r1, 8013cc0 <__ieee754_asin+0x3f8>)
 8013c76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c7a:	f7ec fb2d 	bl	80002d8 <__aeabi_dsub>
 8013c7e:	4602      	mov	r2, r0
 8013c80:	460b      	mov	r3, r1
 8013c82:	4630      	mov	r0, r6
 8013c84:	4639      	mov	r1, r7
 8013c86:	f7ec fb27 	bl	80002d8 <__aeabi_dsub>
 8013c8a:	4642      	mov	r2, r8
 8013c8c:	4604      	mov	r4, r0
 8013c8e:	460d      	mov	r5, r1
 8013c90:	465b      	mov	r3, fp
 8013c92:	4640      	mov	r0, r8
 8013c94:	4659      	mov	r1, fp
 8013c96:	f7ec fb21 	bl	80002dc <__adddf3>
 8013c9a:	4602      	mov	r2, r0
 8013c9c:	460b      	mov	r3, r1
 8013c9e:	a10a      	add	r1, pc, #40	@ (adr r1, 8013cc8 <__ieee754_asin+0x400>)
 8013ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ca4:	f7ec fb18 	bl	80002d8 <__aeabi_dsub>
 8013ca8:	4602      	mov	r2, r0
 8013caa:	460b      	mov	r3, r1
 8013cac:	4620      	mov	r0, r4
 8013cae:	4629      	mov	r1, r5
 8013cb0:	f7ec fb12 	bl	80002d8 <__aeabi_dsub>
 8013cb4:	4602      	mov	r2, r0
 8013cb6:	460b      	mov	r3, r1
 8013cb8:	a103      	add	r1, pc, #12	@ (adr r1, 8013cc8 <__ieee754_asin+0x400>)
 8013cba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013cbe:	e6e2      	b.n	8013a86 <__ieee754_asin+0x1be>
 8013cc0:	33145c07 	.word	0x33145c07
 8013cc4:	3c91a626 	.word	0x3c91a626
 8013cc8:	54442d18 	.word	0x54442d18
 8013ccc:	3fe921fb 	.word	0x3fe921fb

08013cd0 <__ieee754_atan2>:
 8013cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cd4:	ec57 6b11 	vmov	r6, r7, d1
 8013cd8:	4273      	negs	r3, r6
 8013cda:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8013e58 <__ieee754_atan2+0x188>
 8013cde:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8013ce2:	4333      	orrs	r3, r6
 8013ce4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013ce8:	4543      	cmp	r3, r8
 8013cea:	ec51 0b10 	vmov	r0, r1, d0
 8013cee:	4635      	mov	r5, r6
 8013cf0:	d809      	bhi.n	8013d06 <__ieee754_atan2+0x36>
 8013cf2:	4244      	negs	r4, r0
 8013cf4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013cf8:	4304      	orrs	r4, r0
 8013cfa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8013cfe:	4544      	cmp	r4, r8
 8013d00:	468e      	mov	lr, r1
 8013d02:	4681      	mov	r9, r0
 8013d04:	d907      	bls.n	8013d16 <__ieee754_atan2+0x46>
 8013d06:	4632      	mov	r2, r6
 8013d08:	463b      	mov	r3, r7
 8013d0a:	f7ec fae7 	bl	80002dc <__adddf3>
 8013d0e:	ec41 0b10 	vmov	d0, r0, r1
 8013d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d16:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8013d1a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8013d1e:	4334      	orrs	r4, r6
 8013d20:	d103      	bne.n	8013d2a <__ieee754_atan2+0x5a>
 8013d22:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d26:	f000 b9a3 	b.w	8014070 <atan>
 8013d2a:	17bc      	asrs	r4, r7, #30
 8013d2c:	f004 0402 	and.w	r4, r4, #2
 8013d30:	ea53 0909 	orrs.w	r9, r3, r9
 8013d34:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013d38:	d107      	bne.n	8013d4a <__ieee754_atan2+0x7a>
 8013d3a:	2c02      	cmp	r4, #2
 8013d3c:	d05f      	beq.n	8013dfe <__ieee754_atan2+0x12e>
 8013d3e:	2c03      	cmp	r4, #3
 8013d40:	d1e5      	bne.n	8013d0e <__ieee754_atan2+0x3e>
 8013d42:	a141      	add	r1, pc, #260	@ (adr r1, 8013e48 <__ieee754_atan2+0x178>)
 8013d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d48:	e7e1      	b.n	8013d0e <__ieee754_atan2+0x3e>
 8013d4a:	4315      	orrs	r5, r2
 8013d4c:	d106      	bne.n	8013d5c <__ieee754_atan2+0x8c>
 8013d4e:	f1be 0f00 	cmp.w	lr, #0
 8013d52:	da5f      	bge.n	8013e14 <__ieee754_atan2+0x144>
 8013d54:	a13e      	add	r1, pc, #248	@ (adr r1, 8013e50 <__ieee754_atan2+0x180>)
 8013d56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d5a:	e7d8      	b.n	8013d0e <__ieee754_atan2+0x3e>
 8013d5c:	4542      	cmp	r2, r8
 8013d5e:	d10f      	bne.n	8013d80 <__ieee754_atan2+0xb0>
 8013d60:	4293      	cmp	r3, r2
 8013d62:	f104 34ff 	add.w	r4, r4, #4294967295
 8013d66:	d107      	bne.n	8013d78 <__ieee754_atan2+0xa8>
 8013d68:	2c02      	cmp	r4, #2
 8013d6a:	d84c      	bhi.n	8013e06 <__ieee754_atan2+0x136>
 8013d6c:	4b34      	ldr	r3, [pc, #208]	@ (8013e40 <__ieee754_atan2+0x170>)
 8013d6e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013d72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013d76:	e7ca      	b.n	8013d0e <__ieee754_atan2+0x3e>
 8013d78:	2c02      	cmp	r4, #2
 8013d7a:	d848      	bhi.n	8013e0e <__ieee754_atan2+0x13e>
 8013d7c:	4b31      	ldr	r3, [pc, #196]	@ (8013e44 <__ieee754_atan2+0x174>)
 8013d7e:	e7f6      	b.n	8013d6e <__ieee754_atan2+0x9e>
 8013d80:	4543      	cmp	r3, r8
 8013d82:	d0e4      	beq.n	8013d4e <__ieee754_atan2+0x7e>
 8013d84:	1a9b      	subs	r3, r3, r2
 8013d86:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8013d8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013d8e:	da1e      	bge.n	8013dce <__ieee754_atan2+0xfe>
 8013d90:	2f00      	cmp	r7, #0
 8013d92:	da01      	bge.n	8013d98 <__ieee754_atan2+0xc8>
 8013d94:	323c      	adds	r2, #60	@ 0x3c
 8013d96:	db1e      	blt.n	8013dd6 <__ieee754_atan2+0x106>
 8013d98:	4632      	mov	r2, r6
 8013d9a:	463b      	mov	r3, r7
 8013d9c:	f7ec fd7e 	bl	800089c <__aeabi_ddiv>
 8013da0:	ec41 0b10 	vmov	d0, r0, r1
 8013da4:	f7ff fcae 	bl	8013704 <fabs>
 8013da8:	f000 f962 	bl	8014070 <atan>
 8013dac:	ec51 0b10 	vmov	r0, r1, d0
 8013db0:	2c01      	cmp	r4, #1
 8013db2:	d013      	beq.n	8013ddc <__ieee754_atan2+0x10c>
 8013db4:	2c02      	cmp	r4, #2
 8013db6:	d015      	beq.n	8013de4 <__ieee754_atan2+0x114>
 8013db8:	2c00      	cmp	r4, #0
 8013dba:	d0a8      	beq.n	8013d0e <__ieee754_atan2+0x3e>
 8013dbc:	a318      	add	r3, pc, #96	@ (adr r3, 8013e20 <__ieee754_atan2+0x150>)
 8013dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dc2:	f7ec fa89 	bl	80002d8 <__aeabi_dsub>
 8013dc6:	a318      	add	r3, pc, #96	@ (adr r3, 8013e28 <__ieee754_atan2+0x158>)
 8013dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dcc:	e014      	b.n	8013df8 <__ieee754_atan2+0x128>
 8013dce:	a118      	add	r1, pc, #96	@ (adr r1, 8013e30 <__ieee754_atan2+0x160>)
 8013dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013dd4:	e7ec      	b.n	8013db0 <__ieee754_atan2+0xe0>
 8013dd6:	2000      	movs	r0, #0
 8013dd8:	2100      	movs	r1, #0
 8013dda:	e7e9      	b.n	8013db0 <__ieee754_atan2+0xe0>
 8013ddc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013de0:	4619      	mov	r1, r3
 8013de2:	e794      	b.n	8013d0e <__ieee754_atan2+0x3e>
 8013de4:	a30e      	add	r3, pc, #56	@ (adr r3, 8013e20 <__ieee754_atan2+0x150>)
 8013de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dea:	f7ec fa75 	bl	80002d8 <__aeabi_dsub>
 8013dee:	4602      	mov	r2, r0
 8013df0:	460b      	mov	r3, r1
 8013df2:	a10d      	add	r1, pc, #52	@ (adr r1, 8013e28 <__ieee754_atan2+0x158>)
 8013df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013df8:	f7ec fa6e 	bl	80002d8 <__aeabi_dsub>
 8013dfc:	e787      	b.n	8013d0e <__ieee754_atan2+0x3e>
 8013dfe:	a10a      	add	r1, pc, #40	@ (adr r1, 8013e28 <__ieee754_atan2+0x158>)
 8013e00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e04:	e783      	b.n	8013d0e <__ieee754_atan2+0x3e>
 8013e06:	a10c      	add	r1, pc, #48	@ (adr r1, 8013e38 <__ieee754_atan2+0x168>)
 8013e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e0c:	e77f      	b.n	8013d0e <__ieee754_atan2+0x3e>
 8013e0e:	2000      	movs	r0, #0
 8013e10:	2100      	movs	r1, #0
 8013e12:	e77c      	b.n	8013d0e <__ieee754_atan2+0x3e>
 8013e14:	a106      	add	r1, pc, #24	@ (adr r1, 8013e30 <__ieee754_atan2+0x160>)
 8013e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e1a:	e778      	b.n	8013d0e <__ieee754_atan2+0x3e>
 8013e1c:	f3af 8000 	nop.w
 8013e20:	33145c07 	.word	0x33145c07
 8013e24:	3ca1a626 	.word	0x3ca1a626
 8013e28:	54442d18 	.word	0x54442d18
 8013e2c:	400921fb 	.word	0x400921fb
 8013e30:	54442d18 	.word	0x54442d18
 8013e34:	3ff921fb 	.word	0x3ff921fb
 8013e38:	54442d18 	.word	0x54442d18
 8013e3c:	3fe921fb 	.word	0x3fe921fb
 8013e40:	080149a8 	.word	0x080149a8
 8013e44:	08014990 	.word	0x08014990
 8013e48:	54442d18 	.word	0x54442d18
 8013e4c:	c00921fb 	.word	0xc00921fb
 8013e50:	54442d18 	.word	0x54442d18
 8013e54:	bff921fb 	.word	0xbff921fb
 8013e58:	7ff00000 	.word	0x7ff00000

08013e5c <__ieee754_fmod>:
 8013e5c:	ec53 2b11 	vmov	r2, r3, d1
 8013e60:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8013e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e68:	ea52 040c 	orrs.w	r4, r2, ip
 8013e6c:	ec51 0b10 	vmov	r0, r1, d0
 8013e70:	461e      	mov	r6, r3
 8013e72:	4617      	mov	r7, r2
 8013e74:	4696      	mov	lr, r2
 8013e76:	d00c      	beq.n	8013e92 <__ieee754_fmod+0x36>
 8013e78:	4c77      	ldr	r4, [pc, #476]	@ (8014058 <__ieee754_fmod+0x1fc>)
 8013e7a:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8013e7e:	45a0      	cmp	r8, r4
 8013e80:	4689      	mov	r9, r1
 8013e82:	d806      	bhi.n	8013e92 <__ieee754_fmod+0x36>
 8013e84:	4254      	negs	r4, r2
 8013e86:	4d75      	ldr	r5, [pc, #468]	@ (801405c <__ieee754_fmod+0x200>)
 8013e88:	4314      	orrs	r4, r2
 8013e8a:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8013e8e:	42ac      	cmp	r4, r5
 8013e90:	d909      	bls.n	8013ea6 <__ieee754_fmod+0x4a>
 8013e92:	f7ec fbd9 	bl	8000648 <__aeabi_dmul>
 8013e96:	4602      	mov	r2, r0
 8013e98:	460b      	mov	r3, r1
 8013e9a:	f7ec fcff 	bl	800089c <__aeabi_ddiv>
 8013e9e:	ec41 0b10 	vmov	d0, r0, r1
 8013ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ea6:	45e0      	cmp	r8, ip
 8013ea8:	4682      	mov	sl, r0
 8013eaa:	4604      	mov	r4, r0
 8013eac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8013eb0:	dc09      	bgt.n	8013ec6 <__ieee754_fmod+0x6a>
 8013eb2:	dbf4      	blt.n	8013e9e <__ieee754_fmod+0x42>
 8013eb4:	4282      	cmp	r2, r0
 8013eb6:	d8f2      	bhi.n	8013e9e <__ieee754_fmod+0x42>
 8013eb8:	d105      	bne.n	8013ec6 <__ieee754_fmod+0x6a>
 8013eba:	4b69      	ldr	r3, [pc, #420]	@ (8014060 <__ieee754_fmod+0x204>)
 8013ebc:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8013ec0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013ec4:	e7eb      	b.n	8013e9e <__ieee754_fmod+0x42>
 8013ec6:	4a65      	ldr	r2, [pc, #404]	@ (801405c <__ieee754_fmod+0x200>)
 8013ec8:	ea19 0f02 	tst.w	r9, r2
 8013ecc:	d148      	bne.n	8013f60 <__ieee754_fmod+0x104>
 8013ece:	f1b8 0f00 	cmp.w	r8, #0
 8013ed2:	d13d      	bne.n	8013f50 <__ieee754_fmod+0xf4>
 8013ed4:	4963      	ldr	r1, [pc, #396]	@ (8014064 <__ieee754_fmod+0x208>)
 8013ed6:	4653      	mov	r3, sl
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	dc36      	bgt.n	8013f4a <__ieee754_fmod+0xee>
 8013edc:	4216      	tst	r6, r2
 8013ede:	d14f      	bne.n	8013f80 <__ieee754_fmod+0x124>
 8013ee0:	f1bc 0f00 	cmp.w	ip, #0
 8013ee4:	d144      	bne.n	8013f70 <__ieee754_fmod+0x114>
 8013ee6:	4a5f      	ldr	r2, [pc, #380]	@ (8014064 <__ieee754_fmod+0x208>)
 8013ee8:	463b      	mov	r3, r7
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	dc3d      	bgt.n	8013f6a <__ieee754_fmod+0x10e>
 8013eee:	485e      	ldr	r0, [pc, #376]	@ (8014068 <__ieee754_fmod+0x20c>)
 8013ef0:	4281      	cmp	r1, r0
 8013ef2:	db4a      	blt.n	8013f8a <__ieee754_fmod+0x12e>
 8013ef4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013ef8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013efc:	485a      	ldr	r0, [pc, #360]	@ (8014068 <__ieee754_fmod+0x20c>)
 8013efe:	4282      	cmp	r2, r0
 8013f00:	db57      	blt.n	8013fb2 <__ieee754_fmod+0x156>
 8013f02:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8013f06:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8013f0a:	1a89      	subs	r1, r1, r2
 8013f0c:	1b98      	subs	r0, r3, r6
 8013f0e:	eba4 070e 	sub.w	r7, r4, lr
 8013f12:	2900      	cmp	r1, #0
 8013f14:	d162      	bne.n	8013fdc <__ieee754_fmod+0x180>
 8013f16:	4574      	cmp	r4, lr
 8013f18:	bf38      	it	cc
 8013f1a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8013f1e:	2800      	cmp	r0, #0
 8013f20:	bfa4      	itt	ge
 8013f22:	463c      	movge	r4, r7
 8013f24:	4603      	movge	r3, r0
 8013f26:	ea53 0104 	orrs.w	r1, r3, r4
 8013f2a:	d0c6      	beq.n	8013eba <__ieee754_fmod+0x5e>
 8013f2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013f30:	db69      	blt.n	8014006 <__ieee754_fmod+0x1aa>
 8013f32:	494d      	ldr	r1, [pc, #308]	@ (8014068 <__ieee754_fmod+0x20c>)
 8013f34:	428a      	cmp	r2, r1
 8013f36:	db6c      	blt.n	8014012 <__ieee754_fmod+0x1b6>
 8013f38:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013f3c:	432b      	orrs	r3, r5
 8013f3e:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8013f42:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013f46:	4620      	mov	r0, r4
 8013f48:	e7a9      	b.n	8013e9e <__ieee754_fmod+0x42>
 8013f4a:	3901      	subs	r1, #1
 8013f4c:	005b      	lsls	r3, r3, #1
 8013f4e:	e7c3      	b.n	8013ed8 <__ieee754_fmod+0x7c>
 8013f50:	4945      	ldr	r1, [pc, #276]	@ (8014068 <__ieee754_fmod+0x20c>)
 8013f52:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	ddc0      	ble.n	8013edc <__ieee754_fmod+0x80>
 8013f5a:	3901      	subs	r1, #1
 8013f5c:	005b      	lsls	r3, r3, #1
 8013f5e:	e7fa      	b.n	8013f56 <__ieee754_fmod+0xfa>
 8013f60:	ea4f 5128 	mov.w	r1, r8, asr #20
 8013f64:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8013f68:	e7b8      	b.n	8013edc <__ieee754_fmod+0x80>
 8013f6a:	3a01      	subs	r2, #1
 8013f6c:	005b      	lsls	r3, r3, #1
 8013f6e:	e7bc      	b.n	8013eea <__ieee754_fmod+0x8e>
 8013f70:	4a3d      	ldr	r2, [pc, #244]	@ (8014068 <__ieee754_fmod+0x20c>)
 8013f72:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	ddb9      	ble.n	8013eee <__ieee754_fmod+0x92>
 8013f7a:	3a01      	subs	r2, #1
 8013f7c:	005b      	lsls	r3, r3, #1
 8013f7e:	e7fa      	b.n	8013f76 <__ieee754_fmod+0x11a>
 8013f80:	ea4f 522c 	mov.w	r2, ip, asr #20
 8013f84:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8013f88:	e7b1      	b.n	8013eee <__ieee754_fmod+0x92>
 8013f8a:	1a40      	subs	r0, r0, r1
 8013f8c:	281f      	cmp	r0, #31
 8013f8e:	dc0a      	bgt.n	8013fa6 <__ieee754_fmod+0x14a>
 8013f90:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8013f94:	fa08 f800 	lsl.w	r8, r8, r0
 8013f98:	fa2a f303 	lsr.w	r3, sl, r3
 8013f9c:	ea43 0308 	orr.w	r3, r3, r8
 8013fa0:	fa0a f400 	lsl.w	r4, sl, r0
 8013fa4:	e7aa      	b.n	8013efc <__ieee754_fmod+0xa0>
 8013fa6:	4b31      	ldr	r3, [pc, #196]	@ (801406c <__ieee754_fmod+0x210>)
 8013fa8:	1a5b      	subs	r3, r3, r1
 8013faa:	fa0a f303 	lsl.w	r3, sl, r3
 8013fae:	2400      	movs	r4, #0
 8013fb0:	e7a4      	b.n	8013efc <__ieee754_fmod+0xa0>
 8013fb2:	1a80      	subs	r0, r0, r2
 8013fb4:	281f      	cmp	r0, #31
 8013fb6:	dc0a      	bgt.n	8013fce <__ieee754_fmod+0x172>
 8013fb8:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8013fbc:	fa0c fc00 	lsl.w	ip, ip, r0
 8013fc0:	fa27 f606 	lsr.w	r6, r7, r6
 8013fc4:	ea46 060c 	orr.w	r6, r6, ip
 8013fc8:	fa07 fe00 	lsl.w	lr, r7, r0
 8013fcc:	e79d      	b.n	8013f0a <__ieee754_fmod+0xae>
 8013fce:	4e27      	ldr	r6, [pc, #156]	@ (801406c <__ieee754_fmod+0x210>)
 8013fd0:	1ab6      	subs	r6, r6, r2
 8013fd2:	fa07 f606 	lsl.w	r6, r7, r6
 8013fd6:	f04f 0e00 	mov.w	lr, #0
 8013fda:	e796      	b.n	8013f0a <__ieee754_fmod+0xae>
 8013fdc:	4574      	cmp	r4, lr
 8013fde:	bf38      	it	cc
 8013fe0:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8013fe4:	2800      	cmp	r0, #0
 8013fe6:	da05      	bge.n	8013ff4 <__ieee754_fmod+0x198>
 8013fe8:	0fe0      	lsrs	r0, r4, #31
 8013fea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8013fee:	0064      	lsls	r4, r4, #1
 8013ff0:	3901      	subs	r1, #1
 8013ff2:	e78b      	b.n	8013f0c <__ieee754_fmod+0xb0>
 8013ff4:	ea50 0307 	orrs.w	r3, r0, r7
 8013ff8:	f43f af5f 	beq.w	8013eba <__ieee754_fmod+0x5e>
 8013ffc:	0ffb      	lsrs	r3, r7, #31
 8013ffe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8014002:	007c      	lsls	r4, r7, #1
 8014004:	e7f4      	b.n	8013ff0 <__ieee754_fmod+0x194>
 8014006:	0fe1      	lsrs	r1, r4, #31
 8014008:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801400c:	0064      	lsls	r4, r4, #1
 801400e:	3a01      	subs	r2, #1
 8014010:	e78c      	b.n	8013f2c <__ieee754_fmod+0xd0>
 8014012:	1a89      	subs	r1, r1, r2
 8014014:	2914      	cmp	r1, #20
 8014016:	dc0a      	bgt.n	801402e <__ieee754_fmod+0x1d2>
 8014018:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 801401c:	fa03 f202 	lsl.w	r2, r3, r2
 8014020:	40cc      	lsrs	r4, r1
 8014022:	4322      	orrs	r2, r4
 8014024:	410b      	asrs	r3, r1
 8014026:	ea43 0105 	orr.w	r1, r3, r5
 801402a:	4610      	mov	r0, r2
 801402c:	e737      	b.n	8013e9e <__ieee754_fmod+0x42>
 801402e:	291f      	cmp	r1, #31
 8014030:	dc07      	bgt.n	8014042 <__ieee754_fmod+0x1e6>
 8014032:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8014036:	40cc      	lsrs	r4, r1
 8014038:	fa03 f202 	lsl.w	r2, r3, r2
 801403c:	4322      	orrs	r2, r4
 801403e:	462b      	mov	r3, r5
 8014040:	e7f1      	b.n	8014026 <__ieee754_fmod+0x1ca>
 8014042:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8014046:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 801404a:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 801404e:	32e2      	adds	r2, #226	@ 0xe2
 8014050:	fa43 f202 	asr.w	r2, r3, r2
 8014054:	e7f3      	b.n	801403e <__ieee754_fmod+0x1e2>
 8014056:	bf00      	nop
 8014058:	7fefffff 	.word	0x7fefffff
 801405c:	7ff00000 	.word	0x7ff00000
 8014060:	080149c0 	.word	0x080149c0
 8014064:	fffffbed 	.word	0xfffffbed
 8014068:	fffffc02 	.word	0xfffffc02
 801406c:	fffffbe2 	.word	0xfffffbe2

08014070 <atan>:
 8014070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014074:	ec55 4b10 	vmov	r4, r5, d0
 8014078:	4bbf      	ldr	r3, [pc, #764]	@ (8014378 <atan+0x308>)
 801407a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801407e:	429e      	cmp	r6, r3
 8014080:	46ab      	mov	fp, r5
 8014082:	d918      	bls.n	80140b6 <atan+0x46>
 8014084:	4bbd      	ldr	r3, [pc, #756]	@ (801437c <atan+0x30c>)
 8014086:	429e      	cmp	r6, r3
 8014088:	d801      	bhi.n	801408e <atan+0x1e>
 801408a:	d109      	bne.n	80140a0 <atan+0x30>
 801408c:	b144      	cbz	r4, 80140a0 <atan+0x30>
 801408e:	4622      	mov	r2, r4
 8014090:	462b      	mov	r3, r5
 8014092:	4620      	mov	r0, r4
 8014094:	4629      	mov	r1, r5
 8014096:	f7ec f921 	bl	80002dc <__adddf3>
 801409a:	4604      	mov	r4, r0
 801409c:	460d      	mov	r5, r1
 801409e:	e006      	b.n	80140ae <atan+0x3e>
 80140a0:	f1bb 0f00 	cmp.w	fp, #0
 80140a4:	f340 812b 	ble.w	80142fe <atan+0x28e>
 80140a8:	a597      	add	r5, pc, #604	@ (adr r5, 8014308 <atan+0x298>)
 80140aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80140ae:	ec45 4b10 	vmov	d0, r4, r5
 80140b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140b6:	4bb2      	ldr	r3, [pc, #712]	@ (8014380 <atan+0x310>)
 80140b8:	429e      	cmp	r6, r3
 80140ba:	d813      	bhi.n	80140e4 <atan+0x74>
 80140bc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80140c0:	429e      	cmp	r6, r3
 80140c2:	d80c      	bhi.n	80140de <atan+0x6e>
 80140c4:	a392      	add	r3, pc, #584	@ (adr r3, 8014310 <atan+0x2a0>)
 80140c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ca:	4620      	mov	r0, r4
 80140cc:	4629      	mov	r1, r5
 80140ce:	f7ec f905 	bl	80002dc <__adddf3>
 80140d2:	4bac      	ldr	r3, [pc, #688]	@ (8014384 <atan+0x314>)
 80140d4:	2200      	movs	r2, #0
 80140d6:	f7ec fd47 	bl	8000b68 <__aeabi_dcmpgt>
 80140da:	2800      	cmp	r0, #0
 80140dc:	d1e7      	bne.n	80140ae <atan+0x3e>
 80140de:	f04f 3aff 	mov.w	sl, #4294967295
 80140e2:	e029      	b.n	8014138 <atan+0xc8>
 80140e4:	f7ff fb0e 	bl	8013704 <fabs>
 80140e8:	4ba7      	ldr	r3, [pc, #668]	@ (8014388 <atan+0x318>)
 80140ea:	429e      	cmp	r6, r3
 80140ec:	ec55 4b10 	vmov	r4, r5, d0
 80140f0:	f200 80bc 	bhi.w	801426c <atan+0x1fc>
 80140f4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80140f8:	429e      	cmp	r6, r3
 80140fa:	f200 809e 	bhi.w	801423a <atan+0x1ca>
 80140fe:	4622      	mov	r2, r4
 8014100:	462b      	mov	r3, r5
 8014102:	4620      	mov	r0, r4
 8014104:	4629      	mov	r1, r5
 8014106:	f7ec f8e9 	bl	80002dc <__adddf3>
 801410a:	4b9e      	ldr	r3, [pc, #632]	@ (8014384 <atan+0x314>)
 801410c:	2200      	movs	r2, #0
 801410e:	f7ec f8e3 	bl	80002d8 <__aeabi_dsub>
 8014112:	2200      	movs	r2, #0
 8014114:	4606      	mov	r6, r0
 8014116:	460f      	mov	r7, r1
 8014118:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801411c:	4620      	mov	r0, r4
 801411e:	4629      	mov	r1, r5
 8014120:	f7ec f8dc 	bl	80002dc <__adddf3>
 8014124:	4602      	mov	r2, r0
 8014126:	460b      	mov	r3, r1
 8014128:	4630      	mov	r0, r6
 801412a:	4639      	mov	r1, r7
 801412c:	f7ec fbb6 	bl	800089c <__aeabi_ddiv>
 8014130:	f04f 0a00 	mov.w	sl, #0
 8014134:	4604      	mov	r4, r0
 8014136:	460d      	mov	r5, r1
 8014138:	4622      	mov	r2, r4
 801413a:	462b      	mov	r3, r5
 801413c:	4620      	mov	r0, r4
 801413e:	4629      	mov	r1, r5
 8014140:	f7ec fa82 	bl	8000648 <__aeabi_dmul>
 8014144:	4602      	mov	r2, r0
 8014146:	460b      	mov	r3, r1
 8014148:	4680      	mov	r8, r0
 801414a:	4689      	mov	r9, r1
 801414c:	f7ec fa7c 	bl	8000648 <__aeabi_dmul>
 8014150:	a371      	add	r3, pc, #452	@ (adr r3, 8014318 <atan+0x2a8>)
 8014152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014156:	4606      	mov	r6, r0
 8014158:	460f      	mov	r7, r1
 801415a:	f7ec fa75 	bl	8000648 <__aeabi_dmul>
 801415e:	a370      	add	r3, pc, #448	@ (adr r3, 8014320 <atan+0x2b0>)
 8014160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014164:	f7ec f8ba 	bl	80002dc <__adddf3>
 8014168:	4632      	mov	r2, r6
 801416a:	463b      	mov	r3, r7
 801416c:	f7ec fa6c 	bl	8000648 <__aeabi_dmul>
 8014170:	a36d      	add	r3, pc, #436	@ (adr r3, 8014328 <atan+0x2b8>)
 8014172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014176:	f7ec f8b1 	bl	80002dc <__adddf3>
 801417a:	4632      	mov	r2, r6
 801417c:	463b      	mov	r3, r7
 801417e:	f7ec fa63 	bl	8000648 <__aeabi_dmul>
 8014182:	a36b      	add	r3, pc, #428	@ (adr r3, 8014330 <atan+0x2c0>)
 8014184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014188:	f7ec f8a8 	bl	80002dc <__adddf3>
 801418c:	4632      	mov	r2, r6
 801418e:	463b      	mov	r3, r7
 8014190:	f7ec fa5a 	bl	8000648 <__aeabi_dmul>
 8014194:	a368      	add	r3, pc, #416	@ (adr r3, 8014338 <atan+0x2c8>)
 8014196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801419a:	f7ec f89f 	bl	80002dc <__adddf3>
 801419e:	4632      	mov	r2, r6
 80141a0:	463b      	mov	r3, r7
 80141a2:	f7ec fa51 	bl	8000648 <__aeabi_dmul>
 80141a6:	a366      	add	r3, pc, #408	@ (adr r3, 8014340 <atan+0x2d0>)
 80141a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ac:	f7ec f896 	bl	80002dc <__adddf3>
 80141b0:	4642      	mov	r2, r8
 80141b2:	464b      	mov	r3, r9
 80141b4:	f7ec fa48 	bl	8000648 <__aeabi_dmul>
 80141b8:	a363      	add	r3, pc, #396	@ (adr r3, 8014348 <atan+0x2d8>)
 80141ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141be:	4680      	mov	r8, r0
 80141c0:	4689      	mov	r9, r1
 80141c2:	4630      	mov	r0, r6
 80141c4:	4639      	mov	r1, r7
 80141c6:	f7ec fa3f 	bl	8000648 <__aeabi_dmul>
 80141ca:	a361      	add	r3, pc, #388	@ (adr r3, 8014350 <atan+0x2e0>)
 80141cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141d0:	f7ec f882 	bl	80002d8 <__aeabi_dsub>
 80141d4:	4632      	mov	r2, r6
 80141d6:	463b      	mov	r3, r7
 80141d8:	f7ec fa36 	bl	8000648 <__aeabi_dmul>
 80141dc:	a35e      	add	r3, pc, #376	@ (adr r3, 8014358 <atan+0x2e8>)
 80141de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141e2:	f7ec f879 	bl	80002d8 <__aeabi_dsub>
 80141e6:	4632      	mov	r2, r6
 80141e8:	463b      	mov	r3, r7
 80141ea:	f7ec fa2d 	bl	8000648 <__aeabi_dmul>
 80141ee:	a35c      	add	r3, pc, #368	@ (adr r3, 8014360 <atan+0x2f0>)
 80141f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141f4:	f7ec f870 	bl	80002d8 <__aeabi_dsub>
 80141f8:	4632      	mov	r2, r6
 80141fa:	463b      	mov	r3, r7
 80141fc:	f7ec fa24 	bl	8000648 <__aeabi_dmul>
 8014200:	a359      	add	r3, pc, #356	@ (adr r3, 8014368 <atan+0x2f8>)
 8014202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014206:	f7ec f867 	bl	80002d8 <__aeabi_dsub>
 801420a:	4632      	mov	r2, r6
 801420c:	463b      	mov	r3, r7
 801420e:	f7ec fa1b 	bl	8000648 <__aeabi_dmul>
 8014212:	4602      	mov	r2, r0
 8014214:	460b      	mov	r3, r1
 8014216:	4640      	mov	r0, r8
 8014218:	4649      	mov	r1, r9
 801421a:	f7ec f85f 	bl	80002dc <__adddf3>
 801421e:	4622      	mov	r2, r4
 8014220:	462b      	mov	r3, r5
 8014222:	f7ec fa11 	bl	8000648 <__aeabi_dmul>
 8014226:	f1ba 3fff 	cmp.w	sl, #4294967295
 801422a:	4602      	mov	r2, r0
 801422c:	460b      	mov	r3, r1
 801422e:	d148      	bne.n	80142c2 <atan+0x252>
 8014230:	4620      	mov	r0, r4
 8014232:	4629      	mov	r1, r5
 8014234:	f7ec f850 	bl	80002d8 <__aeabi_dsub>
 8014238:	e72f      	b.n	801409a <atan+0x2a>
 801423a:	4b52      	ldr	r3, [pc, #328]	@ (8014384 <atan+0x314>)
 801423c:	2200      	movs	r2, #0
 801423e:	4620      	mov	r0, r4
 8014240:	4629      	mov	r1, r5
 8014242:	f7ec f849 	bl	80002d8 <__aeabi_dsub>
 8014246:	4b4f      	ldr	r3, [pc, #316]	@ (8014384 <atan+0x314>)
 8014248:	4606      	mov	r6, r0
 801424a:	460f      	mov	r7, r1
 801424c:	2200      	movs	r2, #0
 801424e:	4620      	mov	r0, r4
 8014250:	4629      	mov	r1, r5
 8014252:	f7ec f843 	bl	80002dc <__adddf3>
 8014256:	4602      	mov	r2, r0
 8014258:	460b      	mov	r3, r1
 801425a:	4630      	mov	r0, r6
 801425c:	4639      	mov	r1, r7
 801425e:	f7ec fb1d 	bl	800089c <__aeabi_ddiv>
 8014262:	f04f 0a01 	mov.w	sl, #1
 8014266:	4604      	mov	r4, r0
 8014268:	460d      	mov	r5, r1
 801426a:	e765      	b.n	8014138 <atan+0xc8>
 801426c:	4b47      	ldr	r3, [pc, #284]	@ (801438c <atan+0x31c>)
 801426e:	429e      	cmp	r6, r3
 8014270:	d21c      	bcs.n	80142ac <atan+0x23c>
 8014272:	4b47      	ldr	r3, [pc, #284]	@ (8014390 <atan+0x320>)
 8014274:	2200      	movs	r2, #0
 8014276:	4620      	mov	r0, r4
 8014278:	4629      	mov	r1, r5
 801427a:	f7ec f82d 	bl	80002d8 <__aeabi_dsub>
 801427e:	4b44      	ldr	r3, [pc, #272]	@ (8014390 <atan+0x320>)
 8014280:	4606      	mov	r6, r0
 8014282:	460f      	mov	r7, r1
 8014284:	2200      	movs	r2, #0
 8014286:	4620      	mov	r0, r4
 8014288:	4629      	mov	r1, r5
 801428a:	f7ec f9dd 	bl	8000648 <__aeabi_dmul>
 801428e:	4b3d      	ldr	r3, [pc, #244]	@ (8014384 <atan+0x314>)
 8014290:	2200      	movs	r2, #0
 8014292:	f7ec f823 	bl	80002dc <__adddf3>
 8014296:	4602      	mov	r2, r0
 8014298:	460b      	mov	r3, r1
 801429a:	4630      	mov	r0, r6
 801429c:	4639      	mov	r1, r7
 801429e:	f7ec fafd 	bl	800089c <__aeabi_ddiv>
 80142a2:	f04f 0a02 	mov.w	sl, #2
 80142a6:	4604      	mov	r4, r0
 80142a8:	460d      	mov	r5, r1
 80142aa:	e745      	b.n	8014138 <atan+0xc8>
 80142ac:	4622      	mov	r2, r4
 80142ae:	462b      	mov	r3, r5
 80142b0:	4938      	ldr	r1, [pc, #224]	@ (8014394 <atan+0x324>)
 80142b2:	2000      	movs	r0, #0
 80142b4:	f7ec faf2 	bl	800089c <__aeabi_ddiv>
 80142b8:	f04f 0a03 	mov.w	sl, #3
 80142bc:	4604      	mov	r4, r0
 80142be:	460d      	mov	r5, r1
 80142c0:	e73a      	b.n	8014138 <atan+0xc8>
 80142c2:	4b35      	ldr	r3, [pc, #212]	@ (8014398 <atan+0x328>)
 80142c4:	4e35      	ldr	r6, [pc, #212]	@ (801439c <atan+0x32c>)
 80142c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80142ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ce:	f7ec f803 	bl	80002d8 <__aeabi_dsub>
 80142d2:	4622      	mov	r2, r4
 80142d4:	462b      	mov	r3, r5
 80142d6:	f7eb ffff 	bl	80002d8 <__aeabi_dsub>
 80142da:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80142de:	4602      	mov	r2, r0
 80142e0:	460b      	mov	r3, r1
 80142e2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80142e6:	f7eb fff7 	bl	80002d8 <__aeabi_dsub>
 80142ea:	f1bb 0f00 	cmp.w	fp, #0
 80142ee:	4604      	mov	r4, r0
 80142f0:	460d      	mov	r5, r1
 80142f2:	f6bf aedc 	bge.w	80140ae <atan+0x3e>
 80142f6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80142fa:	461d      	mov	r5, r3
 80142fc:	e6d7      	b.n	80140ae <atan+0x3e>
 80142fe:	a51c      	add	r5, pc, #112	@ (adr r5, 8014370 <atan+0x300>)
 8014300:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014304:	e6d3      	b.n	80140ae <atan+0x3e>
 8014306:	bf00      	nop
 8014308:	54442d18 	.word	0x54442d18
 801430c:	3ff921fb 	.word	0x3ff921fb
 8014310:	8800759c 	.word	0x8800759c
 8014314:	7e37e43c 	.word	0x7e37e43c
 8014318:	e322da11 	.word	0xe322da11
 801431c:	3f90ad3a 	.word	0x3f90ad3a
 8014320:	24760deb 	.word	0x24760deb
 8014324:	3fa97b4b 	.word	0x3fa97b4b
 8014328:	a0d03d51 	.word	0xa0d03d51
 801432c:	3fb10d66 	.word	0x3fb10d66
 8014330:	c54c206e 	.word	0xc54c206e
 8014334:	3fb745cd 	.word	0x3fb745cd
 8014338:	920083ff 	.word	0x920083ff
 801433c:	3fc24924 	.word	0x3fc24924
 8014340:	5555550d 	.word	0x5555550d
 8014344:	3fd55555 	.word	0x3fd55555
 8014348:	2c6a6c2f 	.word	0x2c6a6c2f
 801434c:	bfa2b444 	.word	0xbfa2b444
 8014350:	52defd9a 	.word	0x52defd9a
 8014354:	3fadde2d 	.word	0x3fadde2d
 8014358:	af749a6d 	.word	0xaf749a6d
 801435c:	3fb3b0f2 	.word	0x3fb3b0f2
 8014360:	fe231671 	.word	0xfe231671
 8014364:	3fbc71c6 	.word	0x3fbc71c6
 8014368:	9998ebc4 	.word	0x9998ebc4
 801436c:	3fc99999 	.word	0x3fc99999
 8014370:	54442d18 	.word	0x54442d18
 8014374:	bff921fb 	.word	0xbff921fb
 8014378:	440fffff 	.word	0x440fffff
 801437c:	7ff00000 	.word	0x7ff00000
 8014380:	3fdbffff 	.word	0x3fdbffff
 8014384:	3ff00000 	.word	0x3ff00000
 8014388:	3ff2ffff 	.word	0x3ff2ffff
 801438c:	40038000 	.word	0x40038000
 8014390:	3ff80000 	.word	0x3ff80000
 8014394:	bff00000 	.word	0xbff00000
 8014398:	080149d0 	.word	0x080149d0
 801439c:	080149f0 	.word	0x080149f0

080143a0 <_init>:
 80143a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143a2:	bf00      	nop
 80143a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143a6:	bc08      	pop	{r3}
 80143a8:	469e      	mov	lr, r3
 80143aa:	4770      	bx	lr

080143ac <_fini>:
 80143ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ae:	bf00      	nop
 80143b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143b2:	bc08      	pop	{r3}
 80143b4:	469e      	mov	lr, r3
 80143b6:	4770      	bx	lr
