
motorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013718  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  080138f8  080138f8  000148f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f88  08013f88  00015280  2**0
                  CONTENTS
  4 .ARM          00000008  08013f88  08013f88  00014f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f90  08013f90  00015280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f90  08013f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013f94  08013f94  00014f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000280  20000000  08013f98  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aec  20000280  08014218  00015280  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d6c  08014218  00015d6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015280  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024f04  00000000  00000000  000152b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a50  00000000  00000000  0003a1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d28  00000000  00000000  0003fc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001639  00000000  00000000  00041930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002770a  00000000  00000000  00042f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a841  00000000  00000000  0006a673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5107  00000000  00000000  00094eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00179fbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e24  00000000  00000000  0017a000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00182e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000280 	.word	0x20000280
 80001fc:	00000000 	.word	0x00000000
 8000200:	080138e0 	.word	0x080138e0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000284 	.word	0x20000284
 800021c:	080138e0 	.word	0x080138e0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00e ff9a 	bl	800ff88 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	223c      	movs	r2, #60	@ 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00e ff94 	bl	800ff88 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001068:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <MX_ADC1_Init+0x164>)
 800106a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b48      	ldr	r3, [pc, #288]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107c:	4b46      	ldr	r3, [pc, #280]	@ (8001198 <MX_ADC1_Init+0x164>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001082:	4b45      	ldr	r3, [pc, #276]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <MX_ADC1_Init+0x164>)
 800108a:	2204      	movs	r2, #4
 800108c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001096:	2200      	movs	r2, #0
 8001098:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109a:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <MX_ADC1_Init+0x164>)
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ca:	4833      	ldr	r0, [pc, #204]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010cc:	f001 fdd6 	bl	8002c7c <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fbe6 	bl	80018a6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e2:	4619      	mov	r1, r3
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <MX_ADC1_Init+0x164>)
 80010e6:	f003 feff 	bl	8004ee8 <HAL_ADCEx_MultiModeConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f000 fbd9 	bl	80018a6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <MX_ADC1_Init+0x168>)
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001110:	4619      	mov	r1, r3
 8001112:	4821      	ldr	r0, [pc, #132]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001114:	f002 f96e 	bl	80033f4 <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800111e:	f000 fbc2 	bl	80018a6 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_ADC1_Init+0x16c>)
 8001124:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001126:	2309      	movs	r3, #9
 8001128:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800112a:	2301      	movs	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001150:	2384      	movs	r3, #132	@ 0x84
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001164:	f003 f9e0 	bl	8004528 <HAL_ADCEx_InjectedConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800116e:	f000 fb9a 	bl	80018a6 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_ADC1_Init+0x170>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001176:	f240 130f 	movw	r3, #271	@ 0x10f
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_ADC1_Init+0x164>)
 8001182:	f003 f9d1 	bl	8004528 <HAL_ADCEx_InjectedConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800118c:	f000 fb8b 	bl	80018a6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3768      	adds	r7, #104	@ 0x68
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2000029c 	.word	0x2000029c
 800119c:	08600004 	.word	0x08600004
 80011a0:	14f00020 	.word	0x14f00020
 80011a4:	2e300800 	.word	0x2e300800

080011a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b090      	sub	sp, #64	@ 0x40
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	223c      	movs	r2, #60	@ 0x3c
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00e fee7 	bl	800ff88 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011ba:	4b38      	ldr	r3, [pc, #224]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011bc:	4a38      	ldr	r2, [pc, #224]	@ (80012a0 <MX_ADC2_Init+0xf8>)
 80011be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011c0:	4b36      	ldr	r3, [pc, #216]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011c2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011c8:	4b34      	ldr	r3, [pc, #208]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ce:	4b33      	ldr	r3, [pc, #204]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011d4:	4b31      	ldr	r3, [pc, #196]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011da:	4b30      	ldr	r3, [pc, #192]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011dc:	2201      	movs	r2, #1
 80011de:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e0:	4b2e      	ldr	r3, [pc, #184]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011e2:	2204      	movs	r2, #4
 80011e4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011e6:	4b2d      	ldr	r3, [pc, #180]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011ec:	4b2b      	ldr	r3, [pc, #172]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80011f2:	4b2a      	ldr	r3, [pc, #168]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011f8:	4b28      	ldr	r3, [pc, #160]	@ (800129c <MX_ADC2_Init+0xf4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001200:	4b26      	ldr	r3, [pc, #152]	@ (800129c <MX_ADC2_Init+0xf4>)
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001208:	4b24      	ldr	r3, [pc, #144]	@ (800129c <MX_ADC2_Init+0xf4>)
 800120a:	2200      	movs	r2, #0
 800120c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800120e:	4b23      	ldr	r3, [pc, #140]	@ (800129c <MX_ADC2_Init+0xf4>)
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001216:	4821      	ldr	r0, [pc, #132]	@ (800129c <MX_ADC2_Init+0xf4>)
 8001218:	f001 fd30 	bl	8002c7c <HAL_ADC_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001222:	f000 fb40 	bl	80018a6 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 8001226:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <MX_ADC2_Init+0xfc>)
 8001228:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800122a:	2309      	movs	r3, #9
 800122c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800122e:	2301      	movs	r3, #1
 8001230:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001232:	237f      	movs	r3, #127	@ 0x7f
 8001234:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001236:	2304      	movs	r3, #4
 8001238:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800123e:	2302      	movs	r3, #2
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T8_CC4;
 8001254:	239c      	movs	r3, #156	@ 0x9c
 8001256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001258:	2380      	movs	r3, #128	@ 0x80
 800125a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	4619      	mov	r1, r3
 8001266:	480d      	ldr	r0, [pc, #52]	@ (800129c <MX_ADC2_Init+0xf4>)
 8001268:	f003 f95e 	bl	8004528 <HAL_ADCEx_InjectedConfigChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8001272:	f000 fb18 	bl	80018a6 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <MX_ADC2_Init+0x100>)
 8001278:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800127a:	f240 130f 	movw	r3, #271	@ 0x10f
 800127e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	@ (800129c <MX_ADC2_Init+0xf4>)
 8001286:	f003 f94f 	bl	8004528 <HAL_ADCEx_InjectedConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_ADC2_Init+0xec>
  {
    Error_Handler();
 8001290:	f000 fb09 	bl	80018a6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	3740      	adds	r7, #64	@ 0x40
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000308 	.word	0x20000308
 80012a0:	50000100 	.word	0x50000100
 80012a4:	3ef08000 	.word	0x3ef08000
 80012a8:	32601000 	.word	0x32601000

080012ac <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b09e      	sub	sp, #120	@ 0x78
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c4:	f107 0320 	add.w	r3, r7, #32
 80012c8:	2244      	movs	r2, #68	@ 0x44
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f00e fe5b 	bl	800ff88 <memset>
  if(adcHandle->Instance==ADC1)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012da:	d15f      	bne.n	800139c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012e0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012e2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	4618      	mov	r0, r3
 80012ee:	f005 fc4f 	bl	8006b90 <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012f8:	f000 fad5 	bl	80018a6 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012fc:	4b4f      	ldr	r3, [pc, #316]	@ (800143c <HAL_ADC_MspInit+0x190>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	4a4e      	ldr	r2, [pc, #312]	@ (800143c <HAL_ADC_MspInit+0x190>)
 8001304:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001306:	4b4d      	ldr	r3, [pc, #308]	@ (800143c <HAL_ADC_MspInit+0x190>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d10b      	bne.n	8001326 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800130e:	4b4c      	ldr	r3, [pc, #304]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	4a4b      	ldr	r2, [pc, #300]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 8001314:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131a:	4b49      	ldr	r3, [pc, #292]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	4b46      	ldr	r3, [pc, #280]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a45      	ldr	r2, [pc, #276]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b43      	ldr	r3, [pc, #268]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	4b40      	ldr	r3, [pc, #256]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	4a3f      	ldr	r2, [pc, #252]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134a:	4b3d      	ldr	r3, [pc, #244]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001356:	2302      	movs	r3, #2
 8001358:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135a:	2303      	movs	r3, #3
 800135c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001366:	4619      	mov	r1, r3
 8001368:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800136c:	f004 fc7c 	bl	8005c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001370:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001374:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001376:	2303      	movs	r3, #3
 8001378:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001382:	4619      	mov	r1, r3
 8001384:	482f      	ldr	r0, [pc, #188]	@ (8001444 <HAL_ADC_MspInit+0x198>)
 8001386:	f004 fc6f 	bl	8005c68 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	2012      	movs	r0, #18
 8001390:	f003 ff29 	bl	80051e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001394:	2012      	movs	r0, #18
 8001396:	f003 ff40 	bl	800521a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800139a:	e04a      	b.n	8001432 <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a29      	ldr	r2, [pc, #164]	@ (8001448 <HAL_ADC_MspInit+0x19c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d145      	bne.n	8001432 <HAL_ADC_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013aa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013ac:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	4618      	mov	r0, r3
 80013b8:	f005 fbea 	bl	8006b90 <HAL_RCCEx_PeriphCLKConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80013c2:	f000 fa70 	bl	80018a6 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013c6:	4b1d      	ldr	r3, [pc, #116]	@ (800143c <HAL_ADC_MspInit+0x190>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	4a1b      	ldr	r2, [pc, #108]	@ (800143c <HAL_ADC_MspInit+0x190>)
 80013ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013d0:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <HAL_ADC_MspInit+0x190>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d10b      	bne.n	80013f0 <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013d8:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 80013da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013dc:	4a18      	ldr	r2, [pc, #96]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 80013de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 80013e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f0:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 80013f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f4:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 80013f6:	f043 0302 	orr.w	r3, r3, #2
 80013fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fc:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <HAL_ADC_MspInit+0x194>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001408:	f248 0304 	movw	r3, #32772	@ 0x8004
 800140c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140e:	2303      	movs	r3, #3
 8001410:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001416:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800141a:	4619      	mov	r1, r3
 800141c:	4809      	ldr	r0, [pc, #36]	@ (8001444 <HAL_ADC_MspInit+0x198>)
 800141e:	f004 fc23 	bl	8005c68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2012      	movs	r0, #18
 8001428:	f003 fedd 	bl	80051e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800142c:	2012      	movs	r0, #18
 800142e:	f003 fef4 	bl	800521a <HAL_NVIC_EnableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3778      	adds	r7, #120	@ 0x78
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000374 	.word	0x20000374
 8001440:	40021000 	.word	0x40021000
 8001444:	48000400 	.word	0x48000400
 8001448:	50000100 	.word	0x50000100

0800144c <MX_DAC3_Init>:

DAC_HandleTypeDef hdac3;

/* DAC3 init function */
void MX_DAC3_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08c      	sub	sp, #48	@ 0x30
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001452:	463b      	mov	r3, r7
 8001454:	2230      	movs	r2, #48	@ 0x30
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f00e fd95 	bl	800ff88 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <MX_DAC3_Init+0x6c>)
 8001460:	4a16      	ldr	r2, [pc, #88]	@ (80014bc <MX_DAC3_Init+0x70>)
 8001462:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001464:	4814      	ldr	r0, [pc, #80]	@ (80014b8 <MX_DAC3_Init+0x6c>)
 8001466:	f003 fef2 	bl	800524e <HAL_DAC_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001470:	f000 fa19 	bl	80018a6 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001474:	2302      	movs	r3, #2
 8001476:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800148c:	2302      	movs	r3, #2
 800148e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001490:	2302      	movs	r3, #2
 8001492:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	@ (80014b8 <MX_DAC3_Init+0x6c>)
 80014a0:	f003 fef8 	bl	8005294 <HAL_DAC_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 80014aa:	f000 f9fc 	bl	80018a6 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	3730      	adds	r7, #48	@ 0x30
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000378 	.word	0x20000378
 80014bc:	50001000 	.word	0x50001000

080014c0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC3)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <HAL_DAC_MspInit+0x38>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d10b      	bne.n	80014ea <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* DAC3 clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80014d2:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <HAL_DAC_MspInit+0x3c>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	4a09      	ldr	r2, [pc, #36]	@ (80014fc <HAL_DAC_MspInit+0x3c>)
 80014d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014de:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <HAL_DAC_MspInit+0x3c>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	50001000 	.word	0x50001000
 80014fc:	40021000 	.word	0x40021000

08001500 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001506:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <MX_DMA_Init+0x80>)
 8001508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800150a:	4a1d      	ldr	r2, [pc, #116]	@ (8001580 <MX_DMA_Init+0x80>)
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	6493      	str	r3, [r2, #72]	@ 0x48
 8001512:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <MX_DMA_Init+0x80>)
 8001514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800151e:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <MX_DMA_Init+0x80>)
 8001520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001522:	4a17      	ldr	r2, [pc, #92]	@ (8001580 <MX_DMA_Init+0x80>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6493      	str	r3, [r2, #72]	@ 0x48
 800152a:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <MX_DMA_Init+0x80>)
 800152c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2101      	movs	r1, #1
 800153a:	200b      	movs	r0, #11
 800153c:	f003 fe53 	bl	80051e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001540:	200b      	movs	r0, #11
 8001542:	f003 fe6a 	bl	800521a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2101      	movs	r1, #1
 800154a:	200c      	movs	r0, #12
 800154c:	f003 fe4b 	bl	80051e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001550:	200c      	movs	r0, #12
 8001552:	f003 fe62 	bl	800521a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	200d      	movs	r0, #13
 800155c:	f003 fe43 	bl	80051e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001560:	200d      	movs	r0, #13
 8001562:	f003 fe5a 	bl	800521a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	200e      	movs	r0, #14
 800156c:	f003 fe3b 	bl	80051e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001570:	200e      	movs	r0, #14
 8001572:	f003 fe52 	bl	800521a <HAL_NVIC_EnableIRQ>

}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000

08001584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	@ 0x28
 8001588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	4b54      	ldr	r3, [pc, #336]	@ (80016ec <MX_GPIO_Init+0x168>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	4a53      	ldr	r2, [pc, #332]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a6:	4b51      	ldr	r3, [pc, #324]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b2:	4b4e      	ldr	r3, [pc, #312]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	4a4d      	ldr	r2, [pc, #308]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015b8:	f043 0320 	orr.w	r3, r3, #32
 80015bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015be:	4b4b      	ldr	r3, [pc, #300]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	f003 0320 	and.w	r3, r3, #32
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b48      	ldr	r3, [pc, #288]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	4a47      	ldr	r2, [pc, #284]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d6:	4b45      	ldr	r3, [pc, #276]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	4b42      	ldr	r3, [pc, #264]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e6:	4a41      	ldr	r2, [pc, #260]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ee:	4b3f      	ldr	r3, [pc, #252]	@ (80016ec <MX_GPIO_Init+0x168>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|TEST_Pin, GPIO_PIN_SET);
 80015fa:	2201      	movs	r2, #1
 80015fc:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 8001600:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001604:	f004 fcca 	bl	8005f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS2_GPIO_Port, NSS2_Pin, GPIO_PIN_SET);
 8001608:	2201      	movs	r2, #1
 800160a:	2110      	movs	r1, #16
 800160c:	4838      	ldr	r0, [pc, #224]	@ (80016f0 <MX_GPIO_Init+0x16c>)
 800160e:	f004 fcc5 	bl	8005f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|NSS1_Pin, GPIO_PIN_SET);
 8001612:	2201      	movs	r2, #1
 8001614:	2109      	movs	r1, #9
 8001616:	4837      	ldr	r0, [pc, #220]	@ (80016f4 <MX_GPIO_Init+0x170>)
 8001618:	f004 fcc0 	bl	8005f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800161c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	482f      	ldr	r0, [pc, #188]	@ (80016f0 <MX_GPIO_Init+0x16c>)
 8001632:	f004 fb19 	bl	8005c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8001636:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001640:	2301      	movs	r3, #1
 8001642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4829      	ldr	r0, [pc, #164]	@ (80016f0 <MX_GPIO_Init+0x16c>)
 800164c:	f004 fb0c 	bl	8005c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001650:	2310      	movs	r3, #16
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800166a:	f004 fafd 	bl	8005c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS2_Pin;
 800166e:	2310      	movs	r3, #16
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167a:	2302      	movs	r3, #2
 800167c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS2_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	481a      	ldr	r0, [pc, #104]	@ (80016f0 <MX_GPIO_Init+0x16c>)
 8001686:	f004 faef 	bl	8005c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800168a:	2301      	movs	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4814      	ldr	r0, [pc, #80]	@ (80016f4 <MX_GPIO_Init+0x170>)
 80016a2:	f004 fae1 	bl	8005c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
 80016a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b4:	2302      	movs	r3, #2
 80016b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c2:	f004 fad1 	bl	8005c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS1_Pin;
 80016c6:	2308      	movs	r3, #8
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d2:	2302      	movs	r3, #2
 80016d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS1_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <MX_GPIO_Init+0x170>)
 80016de:	f004 fac3 	bl	8005c68 <HAL_GPIO_Init>

}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	@ 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000
 80016f0:	48000800 	.word	0x48000800
 80016f4:	48000400 	.word	0x48000400

080016f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016fc:	f000 ffd9 	bl	80026b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001700:	f000 f888 	bl	8001814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001704:	f7ff ff3e 	bl	8001584 <MX_GPIO_Init>
  MX_DMA_Init();
 8001708:	f7ff fefa 	bl	8001500 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800170c:	f000 fdfc 	bl	8002308 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001710:	f7ff fc90 	bl	8001034 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001714:	f7ff fd48 	bl	80011a8 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001718:	f000 fb52 	bl	8001dc0 <MX_TIM1_Init>
  MX_DAC3_Init();
 800171c:	f7ff fe96 	bl	800144c <MX_DAC3_Init>
  MX_SPI1_Init();
 8001720:	f000 f8c8 	bl	80018b4 <MX_SPI1_Init>
  MX_TIM8_Init();
 8001724:	f000 fc28 	bl	8001f78 <MX_TIM8_Init>
  MX_SPI3_Init();
 8001728:	f000 f902 	bl	8001930 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 800172c:	f000 fda0 	bl	8002270 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 8001730:	f00a fccc 	bl	800c0cc <appInit>
#if 1
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, sizeof(rxBuffer));
 8001734:	2264      	movs	r2, #100	@ 0x64
 8001736:	492e      	ldr	r1, [pc, #184]	@ (80017f0 <main+0xf8>)
 8001738:	482e      	ldr	r0, [pc, #184]	@ (80017f4 <main+0xfc>)
 800173a:	f008 ff66 	bl	800a60a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800173e:	4b2e      	ldr	r3, [pc, #184]	@ (80017f8 <main+0x100>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b2c      	ldr	r3, [pc, #176]	@ (80017f8 <main+0x100>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0204 	bic.w	r2, r2, #4
 800174c:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 800174e:	2264      	movs	r2, #100	@ 0x64
 8001750:	4927      	ldr	r1, [pc, #156]	@ (80017f0 <main+0xf8>)
 8001752:	482a      	ldr	r0, [pc, #168]	@ (80017fc <main+0x104>)
 8001754:	f008 ff59 	bl	800a60a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001758:	4b29      	ldr	r3, [pc, #164]	@ (8001800 <main+0x108>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b28      	ldr	r3, [pc, #160]	@ (8001800 <main+0x108>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0204 	bic.w	r2, r2, #4
 8001766:	601a      	str	r2, [r3, #0]
  // HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001768:	217f      	movs	r1, #127	@ 0x7f
 800176a:	4826      	ldr	r0, [pc, #152]	@ (8001804 <main+0x10c>)
 800176c:	f002 fcbc 	bl	80040e8 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001770:	217f      	movs	r1, #127	@ 0x7f
 8001772:	4825      	ldr	r0, [pc, #148]	@ (8001808 <main+0x110>)
 8001774:	f002 fcb8 	bl	80040e8 <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 8001778:	4b22      	ldr	r3, [pc, #136]	@ (8001804 <main+0x10c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2220      	movs	r2, #32
 800177e:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 8001780:	4b20      	ldr	r3, [pc, #128]	@ (8001804 <main+0x10c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2204      	movs	r2, #4
 8001786:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 8001788:	4b1f      	ldr	r3, [pc, #124]	@ (8001808 <main+0x110>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2220      	movs	r2, #32
 800178e:	601a      	str	r2, [r3, #0]
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001790:	481c      	ldr	r0, [pc, #112]	@ (8001804 <main+0x10c>)
 8001792:	f002 fdbb 	bl	800430c <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 8001796:	481c      	ldr	r0, [pc, #112]	@ (8001808 <main+0x110>)
 8001798:	f002 fd08 	bl	80041ac <HAL_ADCEx_InjectedStart>
  HAL_TIM_Base_Start(&htim8);
 800179c:	481b      	ldr	r0, [pc, #108]	@ (800180c <main+0x114>)
 800179e:	f006 f87f 	bl	80078a0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80017a2:	210c      	movs	r1, #12
 80017a4:	4819      	ldr	r0, [pc, #100]	@ (800180c <main+0x114>)
 80017a6:	f006 f93f 	bl	8007a28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80017aa:	2100      	movs	r1, #0
 80017ac:	4817      	ldr	r0, [pc, #92]	@ (800180c <main+0x114>)
 80017ae:	f006 f93b 	bl	8007a28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80017b2:	2104      	movs	r1, #4
 80017b4:	4815      	ldr	r0, [pc, #84]	@ (800180c <main+0x114>)
 80017b6:	f006 f937 	bl	8007a28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80017ba:	2108      	movs	r1, #8
 80017bc:	4813      	ldr	r0, [pc, #76]	@ (800180c <main+0x114>)
 80017be:	f006 f933 	bl	8007a28 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1);
 80017c2:	4813      	ldr	r0, [pc, #76]	@ (8001810 <main+0x118>)
 80017c4:	f006 f86c 	bl	80078a0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80017c8:	210c      	movs	r1, #12
 80017ca:	4811      	ldr	r0, [pc, #68]	@ (8001810 <main+0x118>)
 80017cc:	f006 f92c 	bl	8007a28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017d0:	2100      	movs	r1, #0
 80017d2:	480f      	ldr	r0, [pc, #60]	@ (8001810 <main+0x118>)
 80017d4:	f006 f928 	bl	8007a28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80017d8:	2104      	movs	r1, #4
 80017da:	480d      	ldr	r0, [pc, #52]	@ (8001810 <main+0x118>)
 80017dc:	f006 f924 	bl	8007a28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80017e0:	2108      	movs	r1, #8
 80017e2:	480b      	ldr	r0, [pc, #44]	@ (8001810 <main+0x118>)
 80017e4:	f006 f920 	bl	8007a28 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
 80017e8:	f00c fc9e 	bl	800e128 <userMain>
 80017ec:	e7fc      	b.n	80017e8 <main+0xf0>
 80017ee:	bf00      	nop
 80017f0:	20000ab4 	.word	0x20000ab4
 80017f4:	200004f0 	.word	0x200004f0
 80017f8:	20000618 	.word	0x20000618
 80017fc:	20000584 	.word	0x20000584
 8001800:	20000738 	.word	0x20000738
 8001804:	2000029c 	.word	0x2000029c
 8001808:	20000308 	.word	0x20000308
 800180c:	200004a4 	.word	0x200004a4
 8001810:	20000458 	.word	0x20000458

08001814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b094      	sub	sp, #80	@ 0x50
 8001818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181a:	f107 0318 	add.w	r3, r7, #24
 800181e:	2238      	movs	r2, #56	@ 0x38
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f00e fbb0 	bl	800ff88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001836:	2000      	movs	r0, #0
 8001838:	f004 fbc8 	bl	8005fcc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800183c:	2301      	movs	r3, #1
 800183e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001840:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001844:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001846:	2302      	movs	r3, #2
 8001848:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800184a:	2303      	movs	r3, #3
 800184c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 800184e:	2303      	movs	r3, #3
 8001850:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001852:	2328      	movs	r3, #40	@ 0x28
 8001854:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001856:	2302      	movs	r3, #2
 8001858:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800185a:	2302      	movs	r3, #2
 800185c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800185e:	2302      	movs	r3, #2
 8001860:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001862:	f107 0318 	add.w	r3, r7, #24
 8001866:	4618      	mov	r0, r3
 8001868:	f004 fc64 	bl	8006134 <HAL_RCC_OscConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001872:	f000 f818 	bl	80018a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001876:	230f      	movs	r3, #15
 8001878:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800187a:	2303      	movs	r3, #3
 800187c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2104      	movs	r1, #4
 800188e:	4618      	mov	r0, r3
 8001890:	f004 ff62 	bl	8006758 <HAL_RCC_ClockConfig>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800189a:	f000 f804 	bl	80018a6 <Error_Handler>
  }
}
 800189e:	bf00      	nop
 80018a0:	3750      	adds	r7, #80	@ 0x50
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018aa:	b672      	cpsid	i
}
 80018ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ae:	bf00      	nop
 80018b0:	e7fd      	b.n	80018ae <Error_Handler+0x8>
	...

080018b4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <MX_SPI1_Init+0x74>)
 80018ba:	4a1c      	ldr	r2, [pc, #112]	@ (800192c <MX_SPI1_Init+0x78>)
 80018bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018be:	4b1a      	ldr	r3, [pc, #104]	@ (8001928 <MX_SPI1_Init+0x74>)
 80018c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018c6:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <MX_SPI1_Init+0x74>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018cc:	4b16      	ldr	r3, [pc, #88]	@ (8001928 <MX_SPI1_Init+0x74>)
 80018ce:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80018d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80018d4:	4b14      	ldr	r3, [pc, #80]	@ (8001928 <MX_SPI1_Init+0x74>)
 80018d6:	2202      	movs	r2, #2
 80018d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018da:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <MX_SPI1_Init+0x74>)
 80018dc:	2201      	movs	r2, #1
 80018de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <MX_SPI1_Init+0x74>)
 80018e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <MX_SPI1_Init+0x74>)
 80018ea:	2238      	movs	r2, #56	@ 0x38
 80018ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <MX_SPI1_Init+0x74>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <MX_SPI1_Init+0x74>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <MX_SPI1_Init+0x74>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001900:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <MX_SPI1_Init+0x74>)
 8001902:	2207      	movs	r2, #7
 8001904:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <MX_SPI1_Init+0x74>)
 8001908:	2200      	movs	r2, #0
 800190a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <MX_SPI1_Init+0x74>)
 800190e:	2200      	movs	r2, #0
 8001910:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	@ (8001928 <MX_SPI1_Init+0x74>)
 8001914:	f005 fb2c 	bl	8006f70 <HAL_SPI_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800191e:	f7ff ffc2 	bl	80018a6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000038c 	.word	0x2000038c
 800192c:	40013000 	.word	0x40013000

08001930 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001934:	4b1b      	ldr	r3, [pc, #108]	@ (80019a4 <MX_SPI3_Init+0x74>)
 8001936:	4a1c      	ldr	r2, [pc, #112]	@ (80019a8 <MX_SPI3_Init+0x78>)
 8001938:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800193a:	4b1a      	ldr	r3, [pc, #104]	@ (80019a4 <MX_SPI3_Init+0x74>)
 800193c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001940:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001942:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <MX_SPI3_Init+0x74>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001948:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <MX_SPI3_Init+0x74>)
 800194a:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800194e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001950:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <MX_SPI3_Init+0x74>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001956:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <MX_SPI3_Init+0x74>)
 8001958:	2201      	movs	r2, #1
 800195a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <MX_SPI3_Init+0x74>)
 800195e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001962:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001964:	4b0f      	ldr	r3, [pc, #60]	@ (80019a4 <MX_SPI3_Init+0x74>)
 8001966:	2210      	movs	r2, #16
 8001968:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <MX_SPI3_Init+0x74>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001970:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <MX_SPI3_Init+0x74>)
 8001972:	2200      	movs	r2, #0
 8001974:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <MX_SPI3_Init+0x74>)
 8001978:	2200      	movs	r2, #0
 800197a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800197c:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <MX_SPI3_Init+0x74>)
 800197e:	2207      	movs	r2, #7
 8001980:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001982:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <MX_SPI3_Init+0x74>)
 8001984:	2200      	movs	r2, #0
 8001986:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <MX_SPI3_Init+0x74>)
 800198a:	2200      	movs	r2, #0
 800198c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	@ (80019a4 <MX_SPI3_Init+0x74>)
 8001990:	f005 faee 	bl	8006f70 <HAL_SPI_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800199a:	f7ff ff84 	bl	80018a6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200003f0 	.word	0x200003f0
 80019a8:	40003c00 	.word	0x40003c00

080019ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08c      	sub	sp, #48	@ 0x30
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a3d      	ldr	r2, [pc, #244]	@ (8001ac0 <HAL_SPI_MspInit+0x114>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d129      	bne.n	8001a22 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ce:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac4 <HAL_SPI_MspInit+0x118>)
 80019d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d2:	4a3c      	ldr	r2, [pc, #240]	@ (8001ac4 <HAL_SPI_MspInit+0x118>)
 80019d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019da:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac4 <HAL_SPI_MspInit+0x118>)
 80019dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019e2:	61bb      	str	r3, [r7, #24]
 80019e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	4b37      	ldr	r3, [pc, #220]	@ (8001ac4 <HAL_SPI_MspInit+0x118>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ea:	4a36      	ldr	r2, [pc, #216]	@ (8001ac4 <HAL_SPI_MspInit+0x118>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f2:	4b34      	ldr	r3, [pc, #208]	@ (8001ac4 <HAL_SPI_MspInit+0x118>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019fe:	23e0      	movs	r3, #224	@ 0xe0
 8001a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a0e:	2305      	movs	r3, #5
 8001a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a1c:	f004 f924 	bl	8005c68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001a20:	e049      	b.n	8001ab6 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a28      	ldr	r2, [pc, #160]	@ (8001ac8 <HAL_SPI_MspInit+0x11c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d144      	bne.n	8001ab6 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <HAL_SPI_MspInit+0x118>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a30:	4a24      	ldr	r2, [pc, #144]	@ (8001ac4 <HAL_SPI_MspInit+0x118>)
 8001a32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a38:	4b22      	ldr	r3, [pc, #136]	@ (8001ac4 <HAL_SPI_MspInit+0x118>)
 8001a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a44:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac4 <HAL_SPI_MspInit+0x118>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a48:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac4 <HAL_SPI_MspInit+0x118>)
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a50:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac4 <HAL_SPI_MspInit+0x118>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <HAL_SPI_MspInit+0x118>)
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a60:	4a18      	ldr	r2, [pc, #96]	@ (8001ac4 <HAL_SPI_MspInit+0x118>)
 8001a62:	f043 0302 	orr.w	r3, r3, #2
 8001a66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a68:	4b16      	ldr	r3, [pc, #88]	@ (8001ac4 <HAL_SPI_MspInit+0x118>)
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a74:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2300      	movs	r3, #0
 8001a84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a86:	2306      	movs	r3, #6
 8001a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480e      	ldr	r0, [pc, #56]	@ (8001acc <HAL_SPI_MspInit+0x120>)
 8001a92:	f004 f8e9 	bl	8005c68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a96:	2320      	movs	r3, #32
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001aa6:	2306      	movs	r3, #6
 8001aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4807      	ldr	r0, [pc, #28]	@ (8001ad0 <HAL_SPI_MspInit+0x124>)
 8001ab2:	f004 f8d9 	bl	8005c68 <HAL_GPIO_Init>
}
 8001ab6:	bf00      	nop
 8001ab8:	3730      	adds	r7, #48	@ 0x30
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40013000 	.word	0x40013000
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40003c00 	.word	0x40003c00
 8001acc:	48000800 	.word	0x48000800
 8001ad0:	48000400 	.word	0x48000400

08001ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <HAL_MspInit+0x44>)
 8001adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ade:	4a0e      	ldr	r2, [pc, #56]	@ (8001b18 <HAL_MspInit+0x44>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <HAL_MspInit+0x44>)
 8001ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <HAL_MspInit+0x44>)
 8001af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af6:	4a08      	ldr	r2, [pc, #32]	@ (8001b18 <HAL_MspInit+0x44>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001afc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001afe:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <HAL_MspInit+0x44>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b0a:	f004 fb03 	bl	8006114 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000

08001b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <NMI_Handler+0x4>

08001b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <MemManage_Handler+0x4>

08001b34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <BusFault_Handler+0x4>

08001b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <UsageFault_Handler+0x4>

08001b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b72:	f000 fdf1 	bl	8002758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b80:	4802      	ldr	r0, [pc, #8]	@ (8001b8c <DMA1_Channel1_IRQHandler+0x10>)
 8001b82:	f003 ff22 	bl	80059ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200006d8 	.word	0x200006d8

08001b90 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b94:	4802      	ldr	r0, [pc, #8]	@ (8001ba0 <DMA1_Channel2_IRQHandler+0x10>)
 8001b96:	f003 ff18 	bl	80059ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000738 	.word	0x20000738

08001ba4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ba8:	4802      	ldr	r0, [pc, #8]	@ (8001bb4 <DMA1_Channel3_IRQHandler+0x10>)
 8001baa:	f003 ff0e 	bl	80059ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000618 	.word	0x20000618

08001bb8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001bbc:	4802      	ldr	r0, [pc, #8]	@ (8001bc8 <DMA1_Channel4_IRQHandler+0x10>)
 8001bbe:	f003 ff04 	bl	80059ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000678 	.word	0x20000678

08001bcc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001bd0:	4803      	ldr	r0, [pc, #12]	@ (8001be0 <ADC1_2_IRQHandler+0x14>)
 8001bd2:	f001 f9d7 	bl	8002f84 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001bd6:	4803      	ldr	r0, [pc, #12]	@ (8001be4 <ADC1_2_IRQHandler+0x18>)
 8001bd8:	f001 f9d4 	bl	8002f84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	2000029c 	.word	0x2000029c
 8001be4:	20000308 	.word	0x20000308

08001be8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bec:	4802      	ldr	r0, [pc, #8]	@ (8001bf8 <USART2_IRQHandler+0x10>)
 8001bee:	f007 f97f 	bl	8008ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200004f0 	.word	0x200004f0

08001bfc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c00:	4802      	ldr	r0, [pc, #8]	@ (8001c0c <USART3_IRQHandler+0x10>)
 8001c02:	f007 f975 	bl	8008ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000584 	.word	0x20000584

08001c10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return 1;
 8001c14:	2301      	movs	r3, #1
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <_kill>:

int _kill(int pid, int sig)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c2a:	f00e fa11 	bl	8010050 <__errno>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2216      	movs	r2, #22
 8001c32:	601a      	str	r2, [r3, #0]
  return -1;
 8001c34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_exit>:

void _exit (int status)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c48:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ffe7 	bl	8001c20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c52:	bf00      	nop
 8001c54:	e7fd      	b.n	8001c52 <_exit+0x12>

08001c56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	e00a      	b.n	8001c7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c68:	f3af 8000 	nop.w
 8001c6c:	4601      	mov	r1, r0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	60ba      	str	r2, [r7, #8]
 8001c74:	b2ca      	uxtb	r2, r1
 8001c76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	dbf0      	blt.n	8001c68 <_read+0x12>
  }

  return len;
 8001c86:	687b      	ldr	r3, [r7, #4]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	e009      	b.n	8001cb6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	60ba      	str	r2, [r7, #8]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	dbf1      	blt.n	8001ca2 <_write+0x12>
  }
  return len;
 8001cbe:	687b      	ldr	r3, [r7, #4]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_close>:

int _close(int file)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cf0:	605a      	str	r2, [r3, #4]
  return 0;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <_isatty>:

int _isatty(int file)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d08:	2301      	movs	r3, #1
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d38:	4a14      	ldr	r2, [pc, #80]	@ (8001d8c <_sbrk+0x5c>)
 8001d3a:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <_sbrk+0x60>)
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d44:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <_sbrk+0x64>)
 8001d4e:	4a12      	ldr	r2, [pc, #72]	@ (8001d98 <_sbrk+0x68>)
 8001d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d52:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d207      	bcs.n	8001d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d60:	f00e f976 	bl	8010050 <__errno>
 8001d64:	4603      	mov	r3, r0
 8001d66:	220c      	movs	r2, #12
 8001d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6e:	e009      	b.n	8001d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d70:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d76:	4b07      	ldr	r3, [pc, #28]	@ (8001d94 <_sbrk+0x64>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4a05      	ldr	r2, [pc, #20]	@ (8001d94 <_sbrk+0x64>)
 8001d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d82:	68fb      	ldr	r3, [r7, #12]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20008000 	.word	0x20008000
 8001d90:	00000400 	.word	0x00000400
 8001d94:	20000454 	.word	0x20000454
 8001d98:	20000d70 	.word	0x20000d70

08001d9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001da0:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <SystemInit+0x20>)
 8001da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001da6:	4a05      	ldr	r2, [pc, #20]	@ (8001dbc <SystemInit+0x20>)
 8001da8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b09c      	sub	sp, #112	@ 0x70
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
 8001df0:	615a      	str	r2, [r3, #20]
 8001df2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	2234      	movs	r2, #52	@ 0x34
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f00e f8c4 	bl	800ff88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e00:	4b5b      	ldr	r3, [pc, #364]	@ (8001f70 <MX_TIM1_Init+0x1b0>)
 8001e02:	4a5c      	ldr	r2, [pc, #368]	@ (8001f74 <MX_TIM1_Init+0x1b4>)
 8001e04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8001e06:	4b5a      	ldr	r3, [pc, #360]	@ (8001f70 <MX_TIM1_Init+0x1b0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e0c:	4b58      	ldr	r3, [pc, #352]	@ (8001f70 <MX_TIM1_Init+0x1b0>)
 8001e0e:	2220      	movs	r2, #32
 8001e10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8001e12:	4b57      	ldr	r3, [pc, #348]	@ (8001f70 <MX_TIM1_Init+0x1b0>)
 8001e14:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001e18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001e1a:	4b55      	ldr	r3, [pc, #340]	@ (8001f70 <MX_TIM1_Init+0x1b0>)
 8001e1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e20:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001e22:	4b53      	ldr	r3, [pc, #332]	@ (8001f70 <MX_TIM1_Init+0x1b0>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e28:	4b51      	ldr	r3, [pc, #324]	@ (8001f70 <MX_TIM1_Init+0x1b0>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e2e:	4850      	ldr	r0, [pc, #320]	@ (8001f70 <MX_TIM1_Init+0x1b0>)
 8001e30:	f005 fcde 	bl	80077f0 <HAL_TIM_Base_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001e3a:	f7ff fd34 	bl	80018a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e42:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e44:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4849      	ldr	r0, [pc, #292]	@ (8001f70 <MX_TIM1_Init+0x1b0>)
 8001e4c:	f006 f896 	bl	8007f7c <HAL_TIM_ConfigClockSource>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001e56:	f7ff fd26 	bl	80018a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e5a:	4845      	ldr	r0, [pc, #276]	@ (8001f70 <MX_TIM1_Init+0x1b0>)
 8001e5c:	f005 fd82 	bl	8007964 <HAL_TIM_PWM_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001e66:	f7ff fd1e 	bl	80018a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001e6a:	2370      	movs	r3, #112	@ 0x70
 8001e6c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e76:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	483c      	ldr	r0, [pc, #240]	@ (8001f70 <MX_TIM1_Init+0x1b0>)
 8001e7e:	f006 fdcb 	bl	8008a18 <HAL_TIMEx_MasterConfigSynchronization>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001e88:	f7ff fd0d 	bl	80018a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e8c:	2360      	movs	r3, #96	@ 0x60
 8001e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e94:	2300      	movs	r3, #0
 8001e96:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ea8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001eac:	2200      	movs	r2, #0
 8001eae:	4619      	mov	r1, r3
 8001eb0:	482f      	ldr	r0, [pc, #188]	@ (8001f70 <MX_TIM1_Init+0x1b0>)
 8001eb2:	f005 ff4f 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001ebc:	f7ff fcf3 	bl	80018a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ec0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4829      	ldr	r0, [pc, #164]	@ (8001f70 <MX_TIM1_Init+0x1b0>)
 8001eca:	f005 ff43 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001ed4:	f7ff fce7 	bl	80018a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ed8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001edc:	2208      	movs	r2, #8
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4823      	ldr	r0, [pc, #140]	@ (8001f70 <MX_TIM1_Init+0x1b0>)
 8001ee2:	f005 ff37 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001eec:	f7ff fcdb 	bl	80018a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001ef0:	2370      	movs	r3, #112	@ 0x70
 8001ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 8001ef4:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8001ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001efa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001efe:	220c      	movs	r2, #12
 8001f00:	4619      	mov	r1, r3
 8001f02:	481b      	ldr	r0, [pc, #108]	@ (8001f70 <MX_TIM1_Init+0x1b0>)
 8001f04:	f005 ff26 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8001f0e:	f7ff fcca 	bl	80018a6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001f22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 2;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f32:	2300      	movs	r3, #0
 8001f34:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f44:	2300      	movs	r3, #0
 8001f46:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4807      	ldr	r0, [pc, #28]	@ (8001f70 <MX_TIM1_Init+0x1b0>)
 8001f52:	f006 fde3 	bl	8008b1c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM1_Init+0x1a0>
  {
    Error_Handler();
 8001f5c:	f7ff fca3 	bl	80018a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f60:	4803      	ldr	r0, [pc, #12]	@ (8001f70 <MX_TIM1_Init+0x1b0>)
 8001f62:	f000 f917 	bl	8002194 <HAL_TIM_MspPostInit>

}
 8001f66:	bf00      	nop
 8001f68:	3770      	adds	r7, #112	@ 0x70
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000458 	.word	0x20000458
 8001f74:	40012c00 	.word	0x40012c00

08001f78 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b09c      	sub	sp, #112	@ 0x70
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f7e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f98:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
 8001fa8:	615a      	str	r2, [r3, #20]
 8001faa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	2234      	movs	r2, #52	@ 0x34
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f00d ffe8 	bl	800ff88 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001fb8:	4b5a      	ldr	r3, [pc, #360]	@ (8002124 <MX_TIM8_Init+0x1ac>)
 8001fba:	4a5b      	ldr	r2, [pc, #364]	@ (8002128 <MX_TIM8_Init+0x1b0>)
 8001fbc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001fbe:	4b59      	ldr	r3, [pc, #356]	@ (8002124 <MX_TIM8_Init+0x1ac>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001fc4:	4b57      	ldr	r3, [pc, #348]	@ (8002124 <MX_TIM8_Init+0x1ac>)
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7999;
 8001fca:	4b56      	ldr	r3, [pc, #344]	@ (8002124 <MX_TIM8_Init+0x1ac>)
 8001fcc:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001fd0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001fd2:	4b54      	ldr	r3, [pc, #336]	@ (8002124 <MX_TIM8_Init+0x1ac>)
 8001fd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fd8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 8001fda:	4b52      	ldr	r3, [pc, #328]	@ (8002124 <MX_TIM8_Init+0x1ac>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe0:	4b50      	ldr	r3, [pc, #320]	@ (8002124 <MX_TIM8_Init+0x1ac>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001fe6:	484f      	ldr	r0, [pc, #316]	@ (8002124 <MX_TIM8_Init+0x1ac>)
 8001fe8:	f005 fc02 	bl	80077f0 <HAL_TIM_Base_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001ff2:	f7ff fc58 	bl	80018a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ffa:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ffc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002000:	4619      	mov	r1, r3
 8002002:	4848      	ldr	r0, [pc, #288]	@ (8002124 <MX_TIM8_Init+0x1ac>)
 8002004:	f005 ffba 	bl	8007f7c <HAL_TIM_ConfigClockSource>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800200e:	f7ff fc4a 	bl	80018a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002012:	4844      	ldr	r0, [pc, #272]	@ (8002124 <MX_TIM8_Init+0x1ac>)
 8002014:	f005 fca6 	bl	8007964 <HAL_TIM_PWM_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800201e:	f7ff fc42 	bl	80018a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002022:	2370      	movs	r3, #112	@ 0x70
 8002024:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800202e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002032:	4619      	mov	r1, r3
 8002034:	483b      	ldr	r0, [pc, #236]	@ (8002124 <MX_TIM8_Init+0x1ac>)
 8002036:	f006 fcef 	bl	8008a18 <HAL_TIMEx_MasterConfigSynchronization>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8002040:	f7ff fc31 	bl	80018a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002044:	2360      	movs	r3, #96	@ 0x60
 8002046:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800204c:	2300      	movs	r3, #0
 800204e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002050:	2300      	movs	r3, #0
 8002052:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002058:	2300      	movs	r3, #0
 800205a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800205c:	2300      	movs	r3, #0
 800205e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002060:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002064:	2200      	movs	r2, #0
 8002066:	4619      	mov	r1, r3
 8002068:	482e      	ldr	r0, [pc, #184]	@ (8002124 <MX_TIM8_Init+0x1ac>)
 800206a:	f005 fe73 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8002074:	f7ff fc17 	bl	80018a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002078:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800207c:	2204      	movs	r2, #4
 800207e:	4619      	mov	r1, r3
 8002080:	4828      	ldr	r0, [pc, #160]	@ (8002124 <MX_TIM8_Init+0x1ac>)
 8002082:	f005 fe67 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 800208c:	f7ff fc0b 	bl	80018a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002090:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002094:	2208      	movs	r2, #8
 8002096:	4619      	mov	r1, r3
 8002098:	4822      	ldr	r0, [pc, #136]	@ (8002124 <MX_TIM8_Init+0x1ac>)
 800209a:	f005 fe5b 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 80020a4:	f7ff fbff 	bl	80018a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80020a8:	2370      	movs	r3, #112	@ 0x70
 80020aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 80020ac:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 80020b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020b6:	220c      	movs	r2, #12
 80020b8:	4619      	mov	r1, r3
 80020ba:	481a      	ldr	r0, [pc, #104]	@ (8002124 <MX_TIM8_Init+0x1ac>)
 80020bc:	f005 fe4a 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM8_Init+0x152>
  {
    Error_Handler();
 80020c6:	f7ff fbee 	bl	80018a6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80020e8:	2300      	movs	r3, #0
 80020ea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80020fa:	2300      	movs	r3, #0
 80020fc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	4619      	mov	r1, r3
 8002106:	4807      	ldr	r0, [pc, #28]	@ (8002124 <MX_TIM8_Init+0x1ac>)
 8002108:	f006 fd08 	bl	8008b1c <HAL_TIMEx_ConfigBreakDeadTime>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM8_Init+0x19e>
  {
    Error_Handler();
 8002112:	f7ff fbc8 	bl	80018a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002116:	4803      	ldr	r0, [pc, #12]	@ (8002124 <MX_TIM8_Init+0x1ac>)
 8002118:	f000 f83c 	bl	8002194 <HAL_TIM_MspPostInit>

}
 800211c:	bf00      	nop
 800211e:	3770      	adds	r7, #112	@ 0x70
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200004a4 	.word	0x200004a4
 8002128:	40013400 	.word	0x40013400

0800212c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a13      	ldr	r2, [pc, #76]	@ (8002188 <HAL_TIM_Base_MspInit+0x5c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d10c      	bne.n	8002158 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800213e:	4b13      	ldr	r3, [pc, #76]	@ (800218c <HAL_TIM_Base_MspInit+0x60>)
 8002140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002142:	4a12      	ldr	r2, [pc, #72]	@ (800218c <HAL_TIM_Base_MspInit+0x60>)
 8002144:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002148:	6613      	str	r3, [r2, #96]	@ 0x60
 800214a:	4b10      	ldr	r3, [pc, #64]	@ (800218c <HAL_TIM_Base_MspInit+0x60>)
 800214c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800214e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002156:	e010      	b.n	800217a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM8)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0c      	ldr	r2, [pc, #48]	@ (8002190 <HAL_TIM_Base_MspInit+0x64>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d10b      	bne.n	800217a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002162:	4b0a      	ldr	r3, [pc, #40]	@ (800218c <HAL_TIM_Base_MspInit+0x60>)
 8002164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002166:	4a09      	ldr	r2, [pc, #36]	@ (800218c <HAL_TIM_Base_MspInit+0x60>)
 8002168:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800216c:	6613      	str	r3, [r2, #96]	@ 0x60
 800216e:	4b07      	ldr	r3, [pc, #28]	@ (800218c <HAL_TIM_Base_MspInit+0x60>)
 8002170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002172:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40012c00 	.word	0x40012c00
 800218c:	40021000 	.word	0x40021000
 8002190:	40013400 	.word	0x40013400

08002194 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	@ 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002260 <HAL_TIM_MspPostInit+0xcc>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d11e      	bne.n	80021f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002264 <HAL_TIM_MspPostInit+0xd0>)
 80021b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002264 <HAL_TIM_MspPostInit+0xd0>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021c2:	4b28      	ldr	r3, [pc, #160]	@ (8002264 <HAL_TIM_MspPostInit+0xd0>)
 80021c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80021ce:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80021d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80021e0:	2306      	movs	r3, #6
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	4619      	mov	r1, r3
 80021ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021ee:	f003 fd3b 	bl	8005c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80021f2:	e031      	b.n	8002258 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM8)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002268 <HAL_TIM_MspPostInit+0xd4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d12c      	bne.n	8002258 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	4b19      	ldr	r3, [pc, #100]	@ (8002264 <HAL_TIM_MspPostInit+0xd0>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002202:	4a18      	ldr	r2, [pc, #96]	@ (8002264 <HAL_TIM_MspPostInit+0xd0>)
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800220a:	4b16      	ldr	r3, [pc, #88]	@ (8002264 <HAL_TIM_MspPostInit+0xd0>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002216:	2340      	movs	r3, #64	@ 0x40
 8002218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8002226:	2305      	movs	r3, #5
 8002228:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	4619      	mov	r1, r3
 8002230:	480e      	ldr	r0, [pc, #56]	@ (800226c <HAL_TIM_MspPostInit+0xd8>)
 8002232:	f003 fd19 	bl	8005c68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002236:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800223a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002244:	2300      	movs	r3, #0
 8002246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002248:	230a      	movs	r3, #10
 800224a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	4619      	mov	r1, r3
 8002252:	4806      	ldr	r0, [pc, #24]	@ (800226c <HAL_TIM_MspPostInit+0xd8>)
 8002254:	f003 fd08 	bl	8005c68 <HAL_GPIO_Init>
}
 8002258:	bf00      	nop
 800225a:	3728      	adds	r7, #40	@ 0x28
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40012c00 	.word	0x40012c00
 8002264:	40021000 	.word	0x40021000
 8002268:	40013400 	.word	0x40013400
 800226c:	48000400 	.word	0x48000400

08002270 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002274:	4b22      	ldr	r3, [pc, #136]	@ (8002300 <MX_USART2_UART_Init+0x90>)
 8002276:	4a23      	ldr	r2, [pc, #140]	@ (8002304 <MX_USART2_UART_Init+0x94>)
 8002278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800227a:	4b21      	ldr	r3, [pc, #132]	@ (8002300 <MX_USART2_UART_Init+0x90>)
 800227c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002282:	4b1f      	ldr	r3, [pc, #124]	@ (8002300 <MX_USART2_UART_Init+0x90>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002288:	4b1d      	ldr	r3, [pc, #116]	@ (8002300 <MX_USART2_UART_Init+0x90>)
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800228e:	4b1c      	ldr	r3, [pc, #112]	@ (8002300 <MX_USART2_UART_Init+0x90>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002294:	4b1a      	ldr	r3, [pc, #104]	@ (8002300 <MX_USART2_UART_Init+0x90>)
 8002296:	220c      	movs	r2, #12
 8002298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800229a:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <MX_USART2_UART_Init+0x90>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a0:	4b17      	ldr	r3, [pc, #92]	@ (8002300 <MX_USART2_UART_Init+0x90>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022a6:	4b16      	ldr	r3, [pc, #88]	@ (8002300 <MX_USART2_UART_Init+0x90>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022ac:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <MX_USART2_UART_Init+0x90>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022b2:	4b13      	ldr	r3, [pc, #76]	@ (8002300 <MX_USART2_UART_Init+0x90>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022b8:	4811      	ldr	r0, [pc, #68]	@ (8002300 <MX_USART2_UART_Init+0x90>)
 80022ba:	f006 fcbb 	bl	8008c34 <HAL_UART_Init>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80022c4:	f7ff faef 	bl	80018a6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022c8:	2100      	movs	r1, #0
 80022ca:	480d      	ldr	r0, [pc, #52]	@ (8002300 <MX_USART2_UART_Init+0x90>)
 80022cc:	f008 f921 	bl	800a512 <HAL_UARTEx_SetTxFifoThreshold>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80022d6:	f7ff fae6 	bl	80018a6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022da:	2100      	movs	r1, #0
 80022dc:	4808      	ldr	r0, [pc, #32]	@ (8002300 <MX_USART2_UART_Init+0x90>)
 80022de:	f008 f956 	bl	800a58e <HAL_UARTEx_SetRxFifoThreshold>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80022e8:	f7ff fadd 	bl	80018a6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80022ec:	4804      	ldr	r0, [pc, #16]	@ (8002300 <MX_USART2_UART_Init+0x90>)
 80022ee:	f008 f8d7 	bl	800a4a0 <HAL_UARTEx_DisableFifoMode>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80022f8:	f7ff fad5 	bl	80018a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	200004f0 	.word	0x200004f0
 8002304:	40004400 	.word	0x40004400

08002308 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800230c:	4b22      	ldr	r3, [pc, #136]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 800230e:	4a23      	ldr	r2, [pc, #140]	@ (800239c <MX_USART3_UART_Init+0x94>)
 8002310:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002312:	4b21      	ldr	r3, [pc, #132]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002314:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002318:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800231a:	4b1f      	ldr	r3, [pc, #124]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002320:	4b1d      	ldr	r3, [pc, #116]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002322:	2200      	movs	r2, #0
 8002324:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002326:	4b1c      	ldr	r3, [pc, #112]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800232c:	4b1a      	ldr	r3, [pc, #104]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 800232e:	220c      	movs	r2, #12
 8002330:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002332:	4b19      	ldr	r3, [pc, #100]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002338:	4b17      	ldr	r3, [pc, #92]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800233e:	4b16      	ldr	r3, [pc, #88]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002340:	2200      	movs	r2, #0
 8002342:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002344:	4b14      	ldr	r3, [pc, #80]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002346:	2200      	movs	r2, #0
 8002348:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800234a:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 800234c:	2200      	movs	r2, #0
 800234e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002350:	4811      	ldr	r0, [pc, #68]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002352:	f006 fc6f 	bl	8008c34 <HAL_UART_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800235c:	f7ff faa3 	bl	80018a6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002360:	2100      	movs	r1, #0
 8002362:	480d      	ldr	r0, [pc, #52]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002364:	f008 f8d5 	bl	800a512 <HAL_UARTEx_SetTxFifoThreshold>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800236e:	f7ff fa9a 	bl	80018a6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002372:	2100      	movs	r1, #0
 8002374:	4808      	ldr	r0, [pc, #32]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002376:	f008 f90a 	bl	800a58e <HAL_UARTEx_SetRxFifoThreshold>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002380:	f7ff fa91 	bl	80018a6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002384:	4804      	ldr	r0, [pc, #16]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002386:	f008 f88b 	bl	800a4a0 <HAL_UARTEx_DisableFifoMode>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002390:	f7ff fa89 	bl	80018a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000584 	.word	0x20000584
 800239c:	40004800 	.word	0x40004800

080023a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b09c      	sub	sp, #112	@ 0x70
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023b8:	f107 0318 	add.w	r3, r7, #24
 80023bc:	2244      	movs	r2, #68	@ 0x44
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f00d fde1 	bl	800ff88 <memset>
  if(uartHandle->Instance==USART2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a99      	ldr	r2, [pc, #612]	@ (8002630 <HAL_UART_MspInit+0x290>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	f040 8093 	bne.w	80024f8 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023d2:	2302      	movs	r3, #2
 80023d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023d6:	2300      	movs	r3, #0
 80023d8:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023da:	f107 0318 	add.w	r3, r7, #24
 80023de:	4618      	mov	r0, r3
 80023e0:	f004 fbd6 	bl	8006b90 <HAL_RCCEx_PeriphCLKConfig>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023ea:	f7ff fa5c 	bl	80018a6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023ee:	4b91      	ldr	r3, [pc, #580]	@ (8002634 <HAL_UART_MspInit+0x294>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f2:	4a90      	ldr	r2, [pc, #576]	@ (8002634 <HAL_UART_MspInit+0x294>)
 80023f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80023fa:	4b8e      	ldr	r3, [pc, #568]	@ (8002634 <HAL_UART_MspInit+0x294>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002406:	4b8b      	ldr	r3, [pc, #556]	@ (8002634 <HAL_UART_MspInit+0x294>)
 8002408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240a:	4a8a      	ldr	r2, [pc, #552]	@ (8002634 <HAL_UART_MspInit+0x294>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002412:	4b88      	ldr	r3, [pc, #544]	@ (8002634 <HAL_UART_MspInit+0x294>)
 8002414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800241e:	230c      	movs	r3, #12
 8002420:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800242e:	2307      	movs	r3, #7
 8002430:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002432:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002436:	4619      	mov	r1, r3
 8002438:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800243c:	f003 fc14 	bl	8005c68 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8002440:	4b7d      	ldr	r3, [pc, #500]	@ (8002638 <HAL_UART_MspInit+0x298>)
 8002442:	4a7e      	ldr	r2, [pc, #504]	@ (800263c <HAL_UART_MspInit+0x29c>)
 8002444:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002446:	4b7c      	ldr	r3, [pc, #496]	@ (8002638 <HAL_UART_MspInit+0x298>)
 8002448:	221a      	movs	r2, #26
 800244a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800244c:	4b7a      	ldr	r3, [pc, #488]	@ (8002638 <HAL_UART_MspInit+0x298>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002452:	4b79      	ldr	r3, [pc, #484]	@ (8002638 <HAL_UART_MspInit+0x298>)
 8002454:	2200      	movs	r2, #0
 8002456:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002458:	4b77      	ldr	r3, [pc, #476]	@ (8002638 <HAL_UART_MspInit+0x298>)
 800245a:	2280      	movs	r2, #128	@ 0x80
 800245c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800245e:	4b76      	ldr	r3, [pc, #472]	@ (8002638 <HAL_UART_MspInit+0x298>)
 8002460:	2200      	movs	r2, #0
 8002462:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002464:	4b74      	ldr	r3, [pc, #464]	@ (8002638 <HAL_UART_MspInit+0x298>)
 8002466:	2200      	movs	r2, #0
 8002468:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800246a:	4b73      	ldr	r3, [pc, #460]	@ (8002638 <HAL_UART_MspInit+0x298>)
 800246c:	2200      	movs	r2, #0
 800246e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002470:	4b71      	ldr	r3, [pc, #452]	@ (8002638 <HAL_UART_MspInit+0x298>)
 8002472:	2200      	movs	r2, #0
 8002474:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002476:	4870      	ldr	r0, [pc, #448]	@ (8002638 <HAL_UART_MspInit+0x298>)
 8002478:	f003 f8c4 	bl	8005604 <HAL_DMA_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002482:	f7ff fa10 	bl	80018a6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a6b      	ldr	r2, [pc, #428]	@ (8002638 <HAL_UART_MspInit+0x298>)
 800248a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800248e:	4a6a      	ldr	r2, [pc, #424]	@ (8002638 <HAL_UART_MspInit+0x298>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8002494:	4b6a      	ldr	r3, [pc, #424]	@ (8002640 <HAL_UART_MspInit+0x2a0>)
 8002496:	4a6b      	ldr	r2, [pc, #428]	@ (8002644 <HAL_UART_MspInit+0x2a4>)
 8002498:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800249a:	4b69      	ldr	r3, [pc, #420]	@ (8002640 <HAL_UART_MspInit+0x2a0>)
 800249c:	221b      	movs	r2, #27
 800249e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024a0:	4b67      	ldr	r3, [pc, #412]	@ (8002640 <HAL_UART_MspInit+0x2a0>)
 80024a2:	2210      	movs	r2, #16
 80024a4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a6:	4b66      	ldr	r3, [pc, #408]	@ (8002640 <HAL_UART_MspInit+0x2a0>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024ac:	4b64      	ldr	r3, [pc, #400]	@ (8002640 <HAL_UART_MspInit+0x2a0>)
 80024ae:	2280      	movs	r2, #128	@ 0x80
 80024b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024b2:	4b63      	ldr	r3, [pc, #396]	@ (8002640 <HAL_UART_MspInit+0x2a0>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024b8:	4b61      	ldr	r3, [pc, #388]	@ (8002640 <HAL_UART_MspInit+0x2a0>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80024be:	4b60      	ldr	r3, [pc, #384]	@ (8002640 <HAL_UART_MspInit+0x2a0>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002640 <HAL_UART_MspInit+0x2a0>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80024ca:	485d      	ldr	r0, [pc, #372]	@ (8002640 <HAL_UART_MspInit+0x2a0>)
 80024cc:	f003 f89a 	bl	8005604 <HAL_DMA_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80024d6:	f7ff f9e6 	bl	80018a6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a58      	ldr	r2, [pc, #352]	@ (8002640 <HAL_UART_MspInit+0x2a0>)
 80024de:	67da      	str	r2, [r3, #124]	@ 0x7c
 80024e0:	4a57      	ldr	r2, [pc, #348]	@ (8002640 <HAL_UART_MspInit+0x2a0>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2100      	movs	r1, #0
 80024ea:	2026      	movs	r0, #38	@ 0x26
 80024ec:	f002 fe7b 	bl	80051e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024f0:	2026      	movs	r0, #38	@ 0x26
 80024f2:	f002 fe92 	bl	800521a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024f6:	e097      	b.n	8002628 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART3)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a52      	ldr	r2, [pc, #328]	@ (8002648 <HAL_UART_MspInit+0x2a8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	f040 8092 	bne.w	8002628 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002504:	2304      	movs	r3, #4
 8002506:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002508:	2300      	movs	r3, #0
 800250a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800250c:	f107 0318 	add.w	r3, r7, #24
 8002510:	4618      	mov	r0, r3
 8002512:	f004 fb3d 	bl	8006b90 <HAL_RCCEx_PeriphCLKConfig>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_UART_MspInit+0x180>
      Error_Handler();
 800251c:	f7ff f9c3 	bl	80018a6 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002520:	4b44      	ldr	r3, [pc, #272]	@ (8002634 <HAL_UART_MspInit+0x294>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002524:	4a43      	ldr	r2, [pc, #268]	@ (8002634 <HAL_UART_MspInit+0x294>)
 8002526:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800252a:	6593      	str	r3, [r2, #88]	@ 0x58
 800252c:	4b41      	ldr	r3, [pc, #260]	@ (8002634 <HAL_UART_MspInit+0x294>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002530:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002538:	4b3e      	ldr	r3, [pc, #248]	@ (8002634 <HAL_UART_MspInit+0x294>)
 800253a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253c:	4a3d      	ldr	r2, [pc, #244]	@ (8002634 <HAL_UART_MspInit+0x294>)
 800253e:	f043 0302 	orr.w	r3, r3, #2
 8002542:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002544:	4b3b      	ldr	r3, [pc, #236]	@ (8002634 <HAL_UART_MspInit+0x294>)
 8002546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002550:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002554:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	2302      	movs	r3, #2
 8002558:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2300      	movs	r3, #0
 8002560:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002562:	2307      	movs	r3, #7
 8002564:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002566:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800256a:	4619      	mov	r1, r3
 800256c:	4837      	ldr	r0, [pc, #220]	@ (800264c <HAL_UART_MspInit+0x2ac>)
 800256e:	f003 fb7b 	bl	8005c68 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel1;
 8002572:	4b37      	ldr	r3, [pc, #220]	@ (8002650 <HAL_UART_MspInit+0x2b0>)
 8002574:	4a37      	ldr	r2, [pc, #220]	@ (8002654 <HAL_UART_MspInit+0x2b4>)
 8002576:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002578:	4b35      	ldr	r3, [pc, #212]	@ (8002650 <HAL_UART_MspInit+0x2b0>)
 800257a:	221d      	movs	r2, #29
 800257c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800257e:	4b34      	ldr	r3, [pc, #208]	@ (8002650 <HAL_UART_MspInit+0x2b0>)
 8002580:	2210      	movs	r2, #16
 8002582:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002584:	4b32      	ldr	r3, [pc, #200]	@ (8002650 <HAL_UART_MspInit+0x2b0>)
 8002586:	2200      	movs	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800258a:	4b31      	ldr	r3, [pc, #196]	@ (8002650 <HAL_UART_MspInit+0x2b0>)
 800258c:	2280      	movs	r2, #128	@ 0x80
 800258e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002590:	4b2f      	ldr	r3, [pc, #188]	@ (8002650 <HAL_UART_MspInit+0x2b0>)
 8002592:	2200      	movs	r2, #0
 8002594:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002596:	4b2e      	ldr	r3, [pc, #184]	@ (8002650 <HAL_UART_MspInit+0x2b0>)
 8002598:	2200      	movs	r2, #0
 800259a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800259c:	4b2c      	ldr	r3, [pc, #176]	@ (8002650 <HAL_UART_MspInit+0x2b0>)
 800259e:	2200      	movs	r2, #0
 80025a0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002650 <HAL_UART_MspInit+0x2b0>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80025a8:	4829      	ldr	r0, [pc, #164]	@ (8002650 <HAL_UART_MspInit+0x2b0>)
 80025aa:	f003 f82b 	bl	8005604 <HAL_DMA_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_UART_MspInit+0x218>
      Error_Handler();
 80025b4:	f7ff f977 	bl	80018a6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a25      	ldr	r2, [pc, #148]	@ (8002650 <HAL_UART_MspInit+0x2b0>)
 80025bc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80025be:	4a24      	ldr	r2, [pc, #144]	@ (8002650 <HAL_UART_MspInit+0x2b0>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart3_rx.Instance = DMA1_Channel2;
 80025c4:	4b24      	ldr	r3, [pc, #144]	@ (8002658 <HAL_UART_MspInit+0x2b8>)
 80025c6:	4a25      	ldr	r2, [pc, #148]	@ (800265c <HAL_UART_MspInit+0x2bc>)
 80025c8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80025ca:	4b23      	ldr	r3, [pc, #140]	@ (8002658 <HAL_UART_MspInit+0x2b8>)
 80025cc:	221c      	movs	r2, #28
 80025ce:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025d0:	4b21      	ldr	r3, [pc, #132]	@ (8002658 <HAL_UART_MspInit+0x2b8>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d6:	4b20      	ldr	r3, [pc, #128]	@ (8002658 <HAL_UART_MspInit+0x2b8>)
 80025d8:	2200      	movs	r2, #0
 80025da:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <HAL_UART_MspInit+0x2b8>)
 80025de:	2280      	movs	r2, #128	@ 0x80
 80025e0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002658 <HAL_UART_MspInit+0x2b8>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002658 <HAL_UART_MspInit+0x2b8>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80025ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002658 <HAL_UART_MspInit+0x2b8>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025f4:	4b18      	ldr	r3, [pc, #96]	@ (8002658 <HAL_UART_MspInit+0x2b8>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80025fa:	4817      	ldr	r0, [pc, #92]	@ (8002658 <HAL_UART_MspInit+0x2b8>)
 80025fc:	f003 f802 	bl	8005604 <HAL_DMA_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_UART_MspInit+0x26a>
      Error_Handler();
 8002606:	f7ff f94e 	bl	80018a6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a12      	ldr	r2, [pc, #72]	@ (8002658 <HAL_UART_MspInit+0x2b8>)
 800260e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002612:	4a11      	ldr	r2, [pc, #68]	@ (8002658 <HAL_UART_MspInit+0x2b8>)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8002618:	2200      	movs	r2, #0
 800261a:	2101      	movs	r1, #1
 800261c:	2027      	movs	r0, #39	@ 0x27
 800261e:	f002 fde2 	bl	80051e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002622:	2027      	movs	r0, #39	@ 0x27
 8002624:	f002 fdf9 	bl	800521a <HAL_NVIC_EnableIRQ>
}
 8002628:	bf00      	nop
 800262a:	3770      	adds	r7, #112	@ 0x70
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40004400 	.word	0x40004400
 8002634:	40021000 	.word	0x40021000
 8002638:	20000618 	.word	0x20000618
 800263c:	40020030 	.word	0x40020030
 8002640:	20000678 	.word	0x20000678
 8002644:	40020044 	.word	0x40020044
 8002648:	40004800 	.word	0x40004800
 800264c:	48000400 	.word	0x48000400
 8002650:	200006d8 	.word	0x200006d8
 8002654:	40020008 	.word	0x40020008
 8002658:	20000738 	.word	0x20000738
 800265c:	4002001c 	.word	0x4002001c

08002660 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002660:	480d      	ldr	r0, [pc, #52]	@ (8002698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002662:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002664:	f7ff fb9a 	bl	8001d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002668:	480c      	ldr	r0, [pc, #48]	@ (800269c <LoopForever+0x6>)
  ldr r1, =_edata
 800266a:	490d      	ldr	r1, [pc, #52]	@ (80026a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800266c:	4a0d      	ldr	r2, [pc, #52]	@ (80026a4 <LoopForever+0xe>)
  movs r3, #0
 800266e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002670:	e002      	b.n	8002678 <LoopCopyDataInit>

08002672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002676:	3304      	adds	r3, #4

08002678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800267a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800267c:	d3f9      	bcc.n	8002672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267e:	4a0a      	ldr	r2, [pc, #40]	@ (80026a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002680:	4c0a      	ldr	r4, [pc, #40]	@ (80026ac <LoopForever+0x16>)
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002684:	e001      	b.n	800268a <LoopFillZerobss>

08002686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002688:	3204      	adds	r2, #4

0800268a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800268a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800268c:	d3fb      	bcc.n	8002686 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800268e:	f00d fce5 	bl	801005c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002692:	f7ff f831 	bl	80016f8 <main>

08002696 <LoopForever>:

LoopForever:
    b LoopForever
 8002696:	e7fe      	b.n	8002696 <LoopForever>
  ldr   r0, =_estack
 8002698:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800269c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a0:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 80026a4:	08013f98 	.word	0x08013f98
  ldr r2, =_sbss
 80026a8:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 80026ac:	20000d6c 	.word	0x20000d6c

080026b0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026b0:	e7fe      	b.n	80026b0 <COMP1_2_3_IRQHandler>

080026b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026bc:	2003      	movs	r0, #3
 80026be:	f002 fd87 	bl	80051d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026c2:	200f      	movs	r0, #15
 80026c4:	f000 f80e 	bl	80026e4 <HAL_InitTick>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	71fb      	strb	r3, [r7, #7]
 80026d2:	e001      	b.n	80026d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026d4:	f7ff f9fe 	bl	8001ad4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026d8:	79fb      	ldrb	r3, [r7, #7]

}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80026f0:	4b16      	ldr	r3, [pc, #88]	@ (800274c <HAL_InitTick+0x68>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d022      	beq.n	800273e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80026f8:	4b15      	ldr	r3, [pc, #84]	@ (8002750 <HAL_InitTick+0x6c>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4b13      	ldr	r3, [pc, #76]	@ (800274c <HAL_InitTick+0x68>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002704:	fbb1 f3f3 	udiv	r3, r1, r3
 8002708:	fbb2 f3f3 	udiv	r3, r2, r3
 800270c:	4618      	mov	r0, r3
 800270e:	f002 fd92 	bl	8005236 <HAL_SYSTICK_Config>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10f      	bne.n	8002738 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b0f      	cmp	r3, #15
 800271c:	d809      	bhi.n	8002732 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800271e:	2200      	movs	r2, #0
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	f04f 30ff 	mov.w	r0, #4294967295
 8002726:	f002 fd5e 	bl	80051e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800272a:	4a0a      	ldr	r2, [pc, #40]	@ (8002754 <HAL_InitTick+0x70>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	e007      	b.n	8002742 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
 8002736:	e004      	b.n	8002742 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	e001      	b.n	8002742 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002742:	7bfb      	ldrb	r3, [r7, #15]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000008 	.word	0x20000008
 8002750:	20000000 	.word	0x20000000
 8002754:	20000004 	.word	0x20000004

08002758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800275c:	4b05      	ldr	r3, [pc, #20]	@ (8002774 <HAL_IncTick+0x1c>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_IncTick+0x20>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4413      	add	r3, r2
 8002766:	4a03      	ldr	r2, [pc, #12]	@ (8002774 <HAL_IncTick+0x1c>)
 8002768:	6013      	str	r3, [r2, #0]
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	20000798 	.word	0x20000798
 8002778:	20000008 	.word	0x20000008

0800277c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return uwTick;
 8002780:	4b03      	ldr	r3, [pc, #12]	@ (8002790 <HAL_GetTick+0x14>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000798 	.word	0x20000798

08002794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800279c:	f7ff ffee 	bl	800277c <HAL_GetTick>
 80027a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ac:	d004      	beq.n	80027b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ae:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <HAL_Delay+0x40>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4413      	add	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027b8:	bf00      	nop
 80027ba:	f7ff ffdf 	bl	800277c <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d8f7      	bhi.n	80027ba <HAL_Delay+0x26>
  {
  }
}
 80027ca:	bf00      	nop
 80027cc:	bf00      	nop
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20000008 	.word	0x20000008

080027d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	609a      	str	r2, [r3, #8]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	609a      	str	r2, [r3, #8]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	3360      	adds	r3, #96	@ 0x60
 8002852:	461a      	mov	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b08      	ldr	r3, [pc, #32]	@ (8002884 <LL_ADC_SetOffset+0x44>)
 8002862:	4013      	ands	r3, r2
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	4313      	orrs	r3, r2
 8002870:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002878:	bf00      	nop
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	03fff000 	.word	0x03fff000

08002888 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3360      	adds	r3, #96	@ 0x60
 8002896:	461a      	mov	r2, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3360      	adds	r3, #96	@ 0x60
 80028c4:	461a      	mov	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	431a      	orrs	r2, r3
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028de:	bf00      	nop
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b087      	sub	sp, #28
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	3360      	adds	r3, #96	@ 0x60
 80028fa:	461a      	mov	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	431a      	orrs	r2, r3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	3360      	adds	r3, #96	@ 0x60
 8002930:	461a      	mov	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	431a      	orrs	r2, r3
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800294a:	bf00      	nop
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	615a      	str	r2, [r3, #20]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b087      	sub	sp, #28
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	3330      	adds	r3, #48	@ 0x30
 80029b2:	461a      	mov	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	4413      	add	r3, r2
 80029c0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	211f      	movs	r1, #31
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	401a      	ands	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	0e9b      	lsrs	r3, r3, #26
 80029da:	f003 011f 	and.w	r1, r3, #31
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	fa01 f303 	lsl.w	r3, r1, r3
 80029e8:	431a      	orrs	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a06:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3314      	adds	r3, #20
 8002a30:	461a      	mov	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	0e5b      	lsrs	r3, r3, #25
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	4413      	add	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	0d1b      	lsrs	r3, r3, #20
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	2107      	movs	r1, #7
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	401a      	ands	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	0d1b      	lsrs	r3, r3, #20
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	431a      	orrs	r2, r3
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a6a:	bf00      	nop
 8002a6c:	371c      	adds	r7, #28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a90:	43db      	mvns	r3, r3
 8002a92:	401a      	ands	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f003 0318 	and.w	r3, r3, #24
 8002a9a:	4908      	ldr	r1, [pc, #32]	@ (8002abc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a9c:	40d9      	lsrs	r1, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	400b      	ands	r3, r1
 8002aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	0007ffff 	.word	0x0007ffff

08002ac0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 031f 	and.w	r3, r3, #31
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002b08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6093      	str	r3, [r2, #8]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b30:	d101      	bne.n	8002b36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002b54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b58:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b80:	d101      	bne.n	8002b86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ba4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ba8:	f043 0201 	orr.w	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bcc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bd0:	f043 0202 	orr.w	r2, r3, #2
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <LL_ADC_IsEnabled+0x18>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <LL_ADC_IsEnabled+0x1a>
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d101      	bne.n	8002c22 <LL_ADC_IsDisableOngoing+0x18>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <LL_ADC_IsDisableOngoing+0x1a>
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d101      	bne.n	8002c48 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d101      	bne.n	8002c6e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b089      	sub	sp, #36	@ 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e167      	b.n	8002f66 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d109      	bne.n	8002cb8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7fe fb01 	bl	80012ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff2d 	bl	8002b1c <LL_ADC_IsDeepPowerDownEnabled>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ff13 	bl	8002af8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ff48 	bl	8002b6c <LL_ADC_IsInternalRegulatorEnabled>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d115      	bne.n	8002d0e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff ff2c 	bl	8002b44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cec:	4ba0      	ldr	r3, [pc, #640]	@ (8002f70 <HAL_ADC_Init+0x2f4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	099b      	lsrs	r3, r3, #6
 8002cf2:	4aa0      	ldr	r2, [pc, #640]	@ (8002f74 <HAL_ADC_Init+0x2f8>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d00:	e002      	b.n	8002d08 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	3b01      	subs	r3, #1
 8002d06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f9      	bne.n	8002d02 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ff2a 	bl	8002b6c <LL_ADC_IsInternalRegulatorEnabled>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10d      	bne.n	8002d3a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d22:	f043 0210 	orr.w	r2, r3, #16
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff ff76 	bl	8002c30 <LL_ADC_REG_IsConversionOngoing>
 8002d44:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f040 8100 	bne.w	8002f54 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 80fc 	bne.w	8002f54 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d60:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d64:	f043 0202 	orr.w	r2, r3, #2
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff37 	bl	8002be4 <LL_ADC_IsEnabled>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d111      	bne.n	8002da0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d7c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d80:	f7ff ff30 	bl	8002be4 <LL_ADC_IsEnabled>
 8002d84:	4604      	mov	r4, r0
 8002d86:	487c      	ldr	r0, [pc, #496]	@ (8002f78 <HAL_ADC_Init+0x2fc>)
 8002d88:	f7ff ff2c 	bl	8002be4 <LL_ADC_IsEnabled>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4323      	orrs	r3, r4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d105      	bne.n	8002da0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4878      	ldr	r0, [pc, #480]	@ (8002f7c <HAL_ADC_Init+0x300>)
 8002d9c:	f7ff fd1c 	bl	80027d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	7f5b      	ldrb	r3, [r3, #29]
 8002da4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002daa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002db0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002db6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dbe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d106      	bne.n	8002ddc <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	045b      	lsls	r3, r3, #17
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d009      	beq.n	8002df8 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	4b60      	ldr	r3, [pc, #384]	@ (8002f80 <HAL_ADC_Init+0x304>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	69b9      	ldr	r1, [r7, #24]
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff ff15 	bl	8002c56 <LL_ADC_INJ_IsConversionOngoing>
 8002e2c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d16d      	bne.n	8002f10 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d16a      	bne.n	8002f10 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e3e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e46:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e56:	f023 0302 	bic.w	r3, r3, #2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	69b9      	ldr	r1, [r7, #24]
 8002e60:	430b      	orrs	r3, r1
 8002e62:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d017      	beq.n	8002e9c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691a      	ldr	r2, [r3, #16]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002e7a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e84:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6911      	ldr	r1, [r2, #16]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	430b      	orrs	r3, r1
 8002e96:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002e9a:	e013      	b.n	8002ec4 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691a      	ldr	r2, [r3, #16]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002eaa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ebc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ec0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d118      	bne.n	8002f00 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002ed8:	f023 0304 	bic.w	r3, r3, #4
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ee4:	4311      	orrs	r1, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002eea:	4311      	orrs	r1, r2
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0201 	orr.w	r2, r2, #1
 8002efc:	611a      	str	r2, [r3, #16]
 8002efe:	e007      	b.n	8002f10 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691a      	ldr	r2, [r3, #16]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d10c      	bne.n	8002f32 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	f023 010f 	bic.w	r1, r3, #15
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	1e5a      	subs	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f30:	e007      	b.n	8002f42 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 020f 	bic.w	r2, r2, #15
 8002f40:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f46:	f023 0303 	bic.w	r3, r3, #3
 8002f4a:	f043 0201 	orr.w	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f52:	e007      	b.n	8002f64 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f58:	f043 0210 	orr.w	r2, r3, #16
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f64:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3724      	adds	r7, #36	@ 0x24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd90      	pop	{r4, r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000000 	.word	0x20000000
 8002f74:	053e2d63 	.word	0x053e2d63
 8002f78:	50000100 	.word	0x50000100
 8002f7c:	50000300 	.word	0x50000300
 8002f80:	fff04007 	.word	0xfff04007

08002f84 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	@ 0x28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fa0:	4883      	ldr	r0, [pc, #524]	@ (80031b0 <HAL_ADC_IRQHandler+0x22c>)
 8002fa2:	f7ff fd8d 	bl	8002ac0 <LL_ADC_GetMultimode>
 8002fa6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d017      	beq.n	8002fe2 <HAL_ADC_IRQHandler+0x5e>
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d012      	beq.n	8002fe2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fcc:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f001 fa9d 	bl	8004514 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d004      	beq.n	8002ff6 <HAL_ADC_IRQHandler+0x72>
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10a      	bne.n	800300c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 8085 	beq.w	800310c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d07f      	beq.n	800310c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b00      	cmp	r3, #0
 8003016:	d105      	bne.n	8003024 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fca7 	bl	800297c <LL_ADC_REG_IsTriggerSourceSWStart>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d064      	beq.n	80030fe <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a5e      	ldr	r2, [pc, #376]	@ (80031b4 <HAL_ADC_IRQHandler+0x230>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d002      	beq.n	8003044 <HAL_ADC_IRQHandler+0xc0>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	e001      	b.n	8003048 <HAL_ADC_IRQHandler+0xc4>
 8003044:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	4293      	cmp	r3, r2
 800304e:	d008      	beq.n	8003062 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b05      	cmp	r3, #5
 800305a:	d002      	beq.n	8003062 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2b09      	cmp	r3, #9
 8003060:	d104      	bne.n	800306c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	623b      	str	r3, [r7, #32]
 800306a:	e00d      	b.n	8003088 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a50      	ldr	r2, [pc, #320]	@ (80031b4 <HAL_ADC_IRQHandler+0x230>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d002      	beq.n	800307c <HAL_ADC_IRQHandler+0xf8>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	e001      	b.n	8003080 <HAL_ADC_IRQHandler+0xfc>
 800307c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003080:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d135      	bne.n	80030fe <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b08      	cmp	r3, #8
 800309e:	d12e      	bne.n	80030fe <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fdc3 	bl	8002c30 <LL_ADC_REG_IsConversionOngoing>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d11a      	bne.n	80030e6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 020c 	bic.w	r2, r2, #12
 80030be:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d112      	bne.n	80030fe <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030dc:	f043 0201 	orr.w	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030e4:	e00b      	b.n	80030fe <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ea:	f043 0210 	orr.w	r2, r3, #16
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f6:	f043 0201 	orr.w	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f95a 	bl	80033b8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	220c      	movs	r2, #12
 800310a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d004      	beq.n	8003120 <HAL_ADC_IRQHandler+0x19c>
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10b      	bne.n	8003138 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 809e 	beq.w	8003268 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8098 	beq.w	8003268 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	d105      	bne.n	8003150 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003148:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fc50 	bl	80029fa <LL_ADC_INJ_IsTriggerSourceSWStart>
 800315a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fc0b 	bl	800297c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003166:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a11      	ldr	r2, [pc, #68]	@ (80031b4 <HAL_ADC_IRQHandler+0x230>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d002      	beq.n	8003178 <HAL_ADC_IRQHandler+0x1f4>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	e001      	b.n	800317c <HAL_ADC_IRQHandler+0x1f8>
 8003178:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	4293      	cmp	r3, r2
 8003182:	d008      	beq.n	8003196 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b06      	cmp	r3, #6
 800318e:	d002      	beq.n	8003196 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b07      	cmp	r3, #7
 8003194:	d104      	bne.n	80031a0 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	623b      	str	r3, [r7, #32]
 800319e:	e011      	b.n	80031c4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a03      	ldr	r2, [pc, #12]	@ (80031b4 <HAL_ADC_IRQHandler+0x230>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d006      	beq.n	80031b8 <HAL_ADC_IRQHandler+0x234>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	e005      	b.n	80031bc <HAL_ADC_IRQHandler+0x238>
 80031b0:	50000300 	.word	0x50000300
 80031b4:	50000100 	.word	0x50000100
 80031b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80031bc:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d047      	beq.n	800325a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <HAL_ADC_IRQHandler+0x260>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d03f      	beq.n	800325a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d13a      	bne.n	800325a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ee:	2b40      	cmp	r3, #64	@ 0x40
 80031f0:	d133      	bne.n	800325a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d12e      	bne.n	800325a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fd28 	bl	8002c56 <LL_ADC_INJ_IsConversionOngoing>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d11a      	bne.n	8003242 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800321a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003220:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d112      	bne.n	800325a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003238:	f043 0201 	orr.w	r2, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003240:	e00b      	b.n	800325a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003246:	f043 0210 	orr.w	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003252:	f043 0201 	orr.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f009 f864 	bl	800c328 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2260      	movs	r2, #96	@ 0x60
 8003266:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800326e:	2b00      	cmp	r3, #0
 8003270:	d011      	beq.n	8003296 <HAL_ADC_IRQHandler+0x312>
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00c      	beq.n	8003296 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003280:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f89f 	bl	80033cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2280      	movs	r2, #128	@ 0x80
 8003294:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d012      	beq.n	80032c6 <HAL_ADC_IRQHandler+0x342>
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00d      	beq.n	80032c6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f001 f918 	bl	80044ec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d012      	beq.n	80032f6 <HAL_ADC_IRQHandler+0x372>
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00d      	beq.n	80032f6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032de:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f001 f90a 	bl	8004500 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d036      	beq.n	800336e <HAL_ADC_IRQHandler+0x3ea>
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	d031      	beq.n	800336e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330e:	2b00      	cmp	r3, #0
 8003310:	d102      	bne.n	8003318 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003312:	2301      	movs	r3, #1
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
 8003316:	e014      	b.n	8003342 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d008      	beq.n	8003330 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800331e:	4825      	ldr	r0, [pc, #148]	@ (80033b4 <HAL_ADC_IRQHandler+0x430>)
 8003320:	f7ff fbdc 	bl	8002adc <LL_ADC_GetMultiDMATransfer>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00b      	beq.n	8003342 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800332a:	2301      	movs	r3, #1
 800332c:	627b      	str	r3, [r7, #36]	@ 0x24
 800332e:	e008      	b.n	8003342 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800333e:	2301      	movs	r3, #1
 8003340:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	2b01      	cmp	r3, #1
 8003346:	d10e      	bne.n	8003366 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003358:	f043 0202 	orr.w	r2, r3, #2
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f83d 	bl	80033e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2210      	movs	r2, #16
 800336c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003374:	2b00      	cmp	r3, #0
 8003376:	d018      	beq.n	80033aa <HAL_ADC_IRQHandler+0x426>
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800337e:	2b00      	cmp	r3, #0
 8003380:	d013      	beq.n	80033aa <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003386:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003392:	f043 0208 	orr.w	r2, r3, #8
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033a2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f001 f897 	bl	80044d8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80033aa:	bf00      	nop
 80033ac:	3728      	adds	r7, #40	@ 0x28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	50000300 	.word	0x50000300

080033b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b0b6      	sub	sp, #216	@ 0xd8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x22>
 8003412:	2302      	movs	r3, #2
 8003414:	e3c8      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x7b4>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff fc04 	bl	8002c30 <LL_ADC_REG_IsConversionOngoing>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	f040 83ad 	bne.w	8003b8a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	461a      	mov	r2, r3
 800343e:	f7ff fab0 	bl	80029a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff fbf2 	bl	8002c30 <LL_ADC_REG_IsConversionOngoing>
 800344c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fbfe 	bl	8002c56 <LL_ADC_INJ_IsConversionOngoing>
 800345a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800345e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003462:	2b00      	cmp	r3, #0
 8003464:	f040 81d9 	bne.w	800381a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800346c:	2b00      	cmp	r3, #0
 800346e:	f040 81d4 	bne.w	800381a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800347a:	d10f      	bne.n	800349c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2200      	movs	r2, #0
 8003486:	4619      	mov	r1, r3
 8003488:	f7ff faca 	bl	8002a20 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fa5e 	bl	8002956 <LL_ADC_SetSamplingTimeCommonConfig>
 800349a:	e00e      	b.n	80034ba <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6818      	ldr	r0, [r3, #0]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	6819      	ldr	r1, [r3, #0]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	461a      	mov	r2, r3
 80034aa:	f7ff fab9 	bl	8002a20 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fa4e 	bl	8002956 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	08db      	lsrs	r3, r3, #3
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d022      	beq.n	8003522 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	6919      	ldr	r1, [r3, #16]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80034ec:	f7ff f9a8 	bl	8002840 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	6919      	ldr	r1, [r3, #16]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	461a      	mov	r2, r3
 80034fe:	f7ff f9f4 	bl	80028ea <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800350e:	2b01      	cmp	r3, #1
 8003510:	d102      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x124>
 8003512:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003516:	e000      	b.n	800351a <HAL_ADC_ConfigChannel+0x126>
 8003518:	2300      	movs	r3, #0
 800351a:	461a      	mov	r2, r3
 800351c:	f7ff fa00 	bl	8002920 <LL_ADC_SetOffsetSaturation>
 8003520:	e17b      	b.n	800381a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2100      	movs	r1, #0
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff f9ad 	bl	8002888 <LL_ADC_GetOffsetChannel>
 800352e:	4603      	mov	r3, r0
 8003530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <HAL_ADC_ConfigChannel+0x15a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2100      	movs	r1, #0
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff f9a2 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8003544:	4603      	mov	r3, r0
 8003546:	0e9b      	lsrs	r3, r3, #26
 8003548:	f003 021f 	and.w	r2, r3, #31
 800354c:	e01e      	b.n	800358c <HAL_ADC_ConfigChannel+0x198>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2100      	movs	r1, #0
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff f997 	bl	8002888 <LL_ADC_GetOffsetChannel>
 800355a:	4603      	mov	r3, r0
 800355c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003564:	fa93 f3a3 	rbit	r3, r3
 8003568:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800356c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003570:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003574:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800357c:	2320      	movs	r3, #32
 800357e:	e004      	b.n	800358a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003580:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003584:	fab3 f383 	clz	r3, r3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003594:	2b00      	cmp	r3, #0
 8003596:	d105      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x1b0>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	0e9b      	lsrs	r3, r3, #26
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	e018      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x1e2>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80035b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80035c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80035c8:	2320      	movs	r3, #32
 80035ca:	e004      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80035cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80035d0:	fab3 f383 	clz	r3, r3
 80035d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d106      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2200      	movs	r2, #0
 80035e0:	2100      	movs	r1, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff f966 	bl	80028b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2101      	movs	r1, #1
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff f94a 	bl	8002888 <LL_ADC_GetOffsetChannel>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x220>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2101      	movs	r1, #1
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff f93f 	bl	8002888 <LL_ADC_GetOffsetChannel>
 800360a:	4603      	mov	r3, r0
 800360c:	0e9b      	lsrs	r3, r3, #26
 800360e:	f003 021f 	and.w	r2, r3, #31
 8003612:	e01e      	b.n	8003652 <HAL_ADC_ConfigChannel+0x25e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2101      	movs	r1, #1
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff f934 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8003620:	4603      	mov	r3, r0
 8003622:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003636:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800363a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003642:	2320      	movs	r3, #32
 8003644:	e004      	b.n	8003650 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800364a:	fab3 f383 	clz	r3, r3
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365a:	2b00      	cmp	r3, #0
 800365c:	d105      	bne.n	800366a <HAL_ADC_ConfigChannel+0x276>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	0e9b      	lsrs	r3, r3, #26
 8003664:	f003 031f 	and.w	r3, r3, #31
 8003668:	e018      	b.n	800369c <HAL_ADC_ConfigChannel+0x2a8>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800367e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003682:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003686:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800368e:	2320      	movs	r3, #32
 8003690:	e004      	b.n	800369c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003692:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003696:	fab3 f383 	clz	r3, r3
 800369a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800369c:	429a      	cmp	r2, r3
 800369e:	d106      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2200      	movs	r2, #0
 80036a6:	2101      	movs	r1, #1
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff f903 	bl	80028b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2102      	movs	r1, #2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff f8e7 	bl	8002888 <LL_ADC_GetOffsetChannel>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10a      	bne.n	80036da <HAL_ADC_ConfigChannel+0x2e6>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2102      	movs	r1, #2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff f8dc 	bl	8002888 <LL_ADC_GetOffsetChannel>
 80036d0:	4603      	mov	r3, r0
 80036d2:	0e9b      	lsrs	r3, r3, #26
 80036d4:	f003 021f 	and.w	r2, r3, #31
 80036d8:	e01e      	b.n	8003718 <HAL_ADC_ConfigChannel+0x324>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2102      	movs	r1, #2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff f8d1 	bl	8002888 <LL_ADC_GetOffsetChannel>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036f0:	fa93 f3a3 	rbit	r3, r3
 80036f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80036f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003700:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003708:	2320      	movs	r3, #32
 800370a:	e004      	b.n	8003716 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800370c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003710:	fab3 f383 	clz	r3, r3
 8003714:	b2db      	uxtb	r3, r3
 8003716:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003720:	2b00      	cmp	r3, #0
 8003722:	d105      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x33c>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	0e9b      	lsrs	r3, r3, #26
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	e016      	b.n	800375e <HAL_ADC_ConfigChannel+0x36a>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003738:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800373c:	fa93 f3a3 	rbit	r3, r3
 8003740:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003742:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003744:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003748:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003750:	2320      	movs	r3, #32
 8003752:	e004      	b.n	800375e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003754:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003758:	fab3 f383 	clz	r3, r3
 800375c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800375e:	429a      	cmp	r2, r3
 8003760:	d106      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2200      	movs	r2, #0
 8003768:	2102      	movs	r1, #2
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff f8a2 	bl	80028b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2103      	movs	r1, #3
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff f886 	bl	8002888 <LL_ADC_GetOffsetChannel>
 800377c:	4603      	mov	r3, r0
 800377e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10a      	bne.n	800379c <HAL_ADC_ConfigChannel+0x3a8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2103      	movs	r1, #3
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff f87b 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8003792:	4603      	mov	r3, r0
 8003794:	0e9b      	lsrs	r3, r3, #26
 8003796:	f003 021f 	and.w	r2, r3, #31
 800379a:	e017      	b.n	80037cc <HAL_ADC_ConfigChannel+0x3d8>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2103      	movs	r1, #3
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff f870 	bl	8002888 <LL_ADC_GetOffsetChannel>
 80037a8:	4603      	mov	r3, r0
 80037aa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80037b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037b6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80037b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80037be:	2320      	movs	r3, #32
 80037c0:	e003      	b.n	80037ca <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80037c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037c4:	fab3 f383 	clz	r3, r3
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d105      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x3f0>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	0e9b      	lsrs	r3, r3, #26
 80037de:	f003 031f 	and.w	r3, r3, #31
 80037e2:	e011      	b.n	8003808 <HAL_ADC_ConfigChannel+0x414>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80037f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80037f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80037fc:	2320      	movs	r3, #32
 80037fe:	e003      	b.n	8003808 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003800:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003808:	429a      	cmp	r2, r3
 800380a:	d106      	bne.n	800381a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2200      	movs	r2, #0
 8003812:	2103      	movs	r1, #3
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff f84d 	bl	80028b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff f9e0 	bl	8002be4 <LL_ADC_IsEnabled>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	f040 8140 	bne.w	8003aac <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	6819      	ldr	r1, [r3, #0]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	461a      	mov	r2, r3
 800383a:	f7ff f91d 	bl	8002a78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	4a8f      	ldr	r2, [pc, #572]	@ (8003a80 <HAL_ADC_ConfigChannel+0x68c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	f040 8131 	bne.w	8003aac <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10b      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x47e>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	0e9b      	lsrs	r3, r3, #26
 8003860:	3301      	adds	r3, #1
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	2b09      	cmp	r3, #9
 8003868:	bf94      	ite	ls
 800386a:	2301      	movls	r3, #1
 800386c:	2300      	movhi	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	e019      	b.n	80038a6 <HAL_ADC_ConfigChannel+0x4b2>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800387a:	fa93 f3a3 	rbit	r3, r3
 800387e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003880:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003882:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003884:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800388a:	2320      	movs	r3, #32
 800388c:	e003      	b.n	8003896 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800388e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003890:	fab3 f383 	clz	r3, r3
 8003894:	b2db      	uxtb	r3, r3
 8003896:	3301      	adds	r3, #1
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	2b09      	cmp	r3, #9
 800389e:	bf94      	ite	ls
 80038a0:	2301      	movls	r3, #1
 80038a2:	2300      	movhi	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d079      	beq.n	800399e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d107      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x4d2>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	0e9b      	lsrs	r3, r3, #26
 80038bc:	3301      	adds	r3, #1
 80038be:	069b      	lsls	r3, r3, #26
 80038c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038c4:	e015      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x4fe>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038ce:	fa93 f3a3 	rbit	r3, r3
 80038d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80038d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038d6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80038d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80038de:	2320      	movs	r3, #32
 80038e0:	e003      	b.n	80038ea <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80038e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e4:	fab3 f383 	clz	r3, r3
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	3301      	adds	r3, #1
 80038ec:	069b      	lsls	r3, r3, #26
 80038ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x51e>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	0e9b      	lsrs	r3, r3, #26
 8003904:	3301      	adds	r3, #1
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	2101      	movs	r1, #1
 800390c:	fa01 f303 	lsl.w	r3, r1, r3
 8003910:	e017      	b.n	8003942 <HAL_ADC_ConfigChannel+0x54e>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003922:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800392a:	2320      	movs	r3, #32
 800392c:	e003      	b.n	8003936 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800392e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003930:	fab3 f383 	clz	r3, r3
 8003934:	b2db      	uxtb	r3, r3
 8003936:	3301      	adds	r3, #1
 8003938:	f003 031f 	and.w	r3, r3, #31
 800393c:	2101      	movs	r1, #1
 800393e:	fa01 f303 	lsl.w	r3, r1, r3
 8003942:	ea42 0103 	orr.w	r1, r2, r3
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10a      	bne.n	8003968 <HAL_ADC_ConfigChannel+0x574>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	0e9b      	lsrs	r3, r3, #26
 8003958:	3301      	adds	r3, #1
 800395a:	f003 021f 	and.w	r2, r3, #31
 800395e:	4613      	mov	r3, r2
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	4413      	add	r3, r2
 8003964:	051b      	lsls	r3, r3, #20
 8003966:	e018      	b.n	800399a <HAL_ADC_ConfigChannel+0x5a6>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003970:	fa93 f3a3 	rbit	r3, r3
 8003974:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003978:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800397a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003980:	2320      	movs	r3, #32
 8003982:	e003      	b.n	800398c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	3301      	adds	r3, #1
 800398e:	f003 021f 	and.w	r2, r3, #31
 8003992:	4613      	mov	r3, r2
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	4413      	add	r3, r2
 8003998:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800399a:	430b      	orrs	r3, r1
 800399c:	e081      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d107      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x5c6>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	0e9b      	lsrs	r3, r3, #26
 80039b0:	3301      	adds	r3, #1
 80039b2:	069b      	lsls	r3, r3, #26
 80039b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039b8:	e015      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x5f2>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80039c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ca:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80039cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80039d2:	2320      	movs	r3, #32
 80039d4:	e003      	b.n	80039de <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80039d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d8:	fab3 f383 	clz	r3, r3
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	3301      	adds	r3, #1
 80039e0:	069b      	lsls	r3, r3, #26
 80039e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x612>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	0e9b      	lsrs	r3, r3, #26
 80039f8:	3301      	adds	r3, #1
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	2101      	movs	r1, #1
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	e017      	b.n	8003a36 <HAL_ADC_ConfigChannel+0x642>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	61fb      	str	r3, [r7, #28]
  return result;
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003a1e:	2320      	movs	r3, #32
 8003a20:	e003      	b.n	8003a2a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	fab3 f383 	clz	r3, r3
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	2101      	movs	r1, #1
 8003a32:	fa01 f303 	lsl.w	r3, r1, r3
 8003a36:	ea42 0103 	orr.w	r1, r2, r3
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10d      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x66e>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	0e9b      	lsrs	r3, r3, #26
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	f003 021f 	and.w	r2, r3, #31
 8003a52:	4613      	mov	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4413      	add	r3, r2
 8003a58:	3b1e      	subs	r3, #30
 8003a5a:	051b      	lsls	r3, r3, #20
 8003a5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a60:	e01e      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x6ac>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	613b      	str	r3, [r7, #16]
  return result;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d104      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003a7a:	2320      	movs	r3, #32
 8003a7c:	e006      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x698>
 8003a7e:	bf00      	nop
 8003a80:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f003 021f 	and.w	r2, r3, #31
 8003a92:	4613      	mov	r3, r2
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	4413      	add	r3, r2
 8003a98:	3b1e      	subs	r3, #30
 8003a9a:	051b      	lsls	r3, r3, #20
 8003a9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aa0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	f7fe ffba 	bl	8002a20 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4b3f      	ldr	r3, [pc, #252]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x7bc>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d071      	beq.n	8003b9c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ab8:	483e      	ldr	r0, [pc, #248]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003aba:	f7fe feb3 	bl	8002824 <LL_ADC_GetCommonPathInternalCh>
 8003abe:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a3c      	ldr	r2, [pc, #240]	@ (8003bb8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d004      	beq.n	8003ad6 <HAL_ADC_ConfigChannel+0x6e2>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a3a      	ldr	r2, [pc, #232]	@ (8003bbc <HAL_ADC_ConfigChannel+0x7c8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d127      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ad6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ada:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d121      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aea:	d157      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003af0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003af4:	4619      	mov	r1, r3
 8003af6:	482f      	ldr	r0, [pc, #188]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003af8:	f7fe fe81 	bl	80027fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003afc:	4b30      	ldr	r3, [pc, #192]	@ (8003bc0 <HAL_ADC_ConfigChannel+0x7cc>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	4a30      	ldr	r2, [pc, #192]	@ (8003bc4 <HAL_ADC_ConfigChannel+0x7d0>)
 8003b04:	fba2 2303 	umull	r2, r3, r2, r3
 8003b08:	099b      	lsrs	r3, r3, #6
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b16:	e002      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f9      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b24:	e03a      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a27      	ldr	r2, [pc, #156]	@ (8003bc8 <HAL_ADC_ConfigChannel+0x7d4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d113      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10d      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a22      	ldr	r2, [pc, #136]	@ (8003bcc <HAL_ADC_ConfigChannel+0x7d8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d02a      	beq.n	8003b9c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4818      	ldr	r0, [pc, #96]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003b52:	f7fe fe54 	bl	80027fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b56:	e021      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d11c      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d116      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a16      	ldr	r2, [pc, #88]	@ (8003bcc <HAL_ADC_ConfigChannel+0x7d8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d011      	beq.n	8003b9c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b80:	4619      	mov	r1, r3
 8003b82:	480c      	ldr	r0, [pc, #48]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003b84:	f7fe fe3b 	bl	80027fe <LL_ADC_SetCommonPathInternalCh>
 8003b88:	e008      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8e:	f043 0220 	orr.w	r2, r3, #32
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ba4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	37d8      	adds	r7, #216	@ 0xd8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	80080000 	.word	0x80080000
 8003bb4:	50000300 	.word	0x50000300
 8003bb8:	c3210000 	.word	0xc3210000
 8003bbc:	90c00010 	.word	0x90c00010
 8003bc0:	20000000 	.word	0x20000000
 8003bc4:	053e2d63 	.word	0x053e2d63
 8003bc8:	c7520000 	.word	0xc7520000
 8003bcc:	50000100 	.word	0x50000100
 8003bd0:	cb840000 	.word	0xcb840000

08003bd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fe fffd 	bl	8002be4 <LL_ADC_IsEnabled>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d169      	bne.n	8003cc4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	4b36      	ldr	r3, [pc, #216]	@ (8003cd0 <ADC_Enable+0xfc>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c02:	f043 0210 	orr.w	r2, r3, #16
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c0e:	f043 0201 	orr.w	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e055      	b.n	8003cc6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe ffb8 	bl	8002b94 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c24:	482b      	ldr	r0, [pc, #172]	@ (8003cd4 <ADC_Enable+0x100>)
 8003c26:	f7fe fdfd 	bl	8002824 <LL_ADC_GetCommonPathInternalCh>
 8003c2a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003c2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d013      	beq.n	8003c5c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c34:	4b28      	ldr	r3, [pc, #160]	@ (8003cd8 <ADC_Enable+0x104>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	099b      	lsrs	r3, r3, #6
 8003c3a:	4a28      	ldr	r2, [pc, #160]	@ (8003cdc <ADC_Enable+0x108>)
 8003c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c40:	099b      	lsrs	r3, r3, #6
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	4613      	mov	r3, r2
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c4e:	e002      	b.n	8003c56 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f9      	bne.n	8003c50 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c5c:	f7fe fd8e 	bl	800277c <HAL_GetTick>
 8003c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c62:	e028      	b.n	8003cb6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fe ffbb 	bl	8002be4 <LL_ADC_IsEnabled>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d104      	bne.n	8003c7e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fe ff8b 	bl	8002b94 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c7e:	f7fe fd7d 	bl	800277c <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d914      	bls.n	8003cb6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d00d      	beq.n	8003cb6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c9e:	f043 0210 	orr.w	r2, r3, #16
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003caa:	f043 0201 	orr.w	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e007      	b.n	8003cc6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d1cf      	bne.n	8003c64 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	8000003f 	.word	0x8000003f
 8003cd4:	50000300 	.word	0x50000300
 8003cd8:	20000000 	.word	0x20000000
 8003cdc:	053e2d63 	.word	0x053e2d63

08003ce0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fe ff8c 	bl	8002c0a <LL_ADC_IsDisableOngoing>
 8003cf2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fe ff73 	bl	8002be4 <LL_ADC_IsEnabled>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d047      	beq.n	8003d94 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d144      	bne.n	8003d94 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030d 	and.w	r3, r3, #13
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d10c      	bne.n	8003d32 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fe ff4d 	bl	8002bbc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2203      	movs	r2, #3
 8003d28:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d2a:	f7fe fd27 	bl	800277c <HAL_GetTick>
 8003d2e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d30:	e029      	b.n	8003d86 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d36:	f043 0210 	orr.w	r2, r3, #16
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d42:	f043 0201 	orr.w	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e023      	b.n	8003d96 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d4e:	f7fe fd15 	bl	800277c <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d914      	bls.n	8003d86 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00d      	beq.n	8003d86 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6e:	f043 0210 	orr.w	r2, r3, #16
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d7a:	f043 0201 	orr.w	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e007      	b.n	8003d96 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1dc      	bne.n	8003d4e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <LL_ADC_SetCommonPathInternalCh>:
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	609a      	str	r2, [r3, #8]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <LL_ADC_GetCommonPathInternalCh>:
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <LL_ADC_SetOffset>:
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	3360      	adds	r3, #96	@ 0x60
 8003df2:	461a      	mov	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4b08      	ldr	r3, [pc, #32]	@ (8003e24 <LL_ADC_SetOffset+0x44>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	601a      	str	r2, [r3, #0]
}
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	03fff000 	.word	0x03fff000

08003e28 <LL_ADC_GetOffsetChannel>:
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3360      	adds	r3, #96	@ 0x60
 8003e36:	461a      	mov	r2, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <LL_ADC_SetOffsetState>:
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3360      	adds	r3, #96	@ 0x60
 8003e64:	461a      	mov	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	601a      	str	r2, [r3, #0]
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <LL_ADC_SetOffsetSign>:
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b087      	sub	sp, #28
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3360      	adds	r3, #96	@ 0x60
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	601a      	str	r2, [r3, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	371c      	adds	r7, #28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <LL_ADC_SetOffsetSaturation>:
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3360      	adds	r3, #96	@ 0x60
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	601a      	str	r2, [r3, #0]
}
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	615a      	str	r2, [r3, #20]
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <LL_ADC_INJ_GetTrigAuto>:
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <LL_ADC_SetChannelSamplingTime>:
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	3314      	adds	r3, #20
 8003f48:	461a      	mov	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	0e5b      	lsrs	r3, r3, #25
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	4413      	add	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	0d1b      	lsrs	r3, r3, #20
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	2107      	movs	r1, #7
 8003f66:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	401a      	ands	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	0d1b      	lsrs	r3, r3, #20
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	601a      	str	r2, [r3, #0]
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
	...

08003f90 <LL_ADC_SetChannelSingleDiff>:
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	401a      	ands	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f003 0318 	and.w	r3, r3, #24
 8003fb2:	4908      	ldr	r1, [pc, #32]	@ (8003fd4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003fb4:	40d9      	lsrs	r1, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	400b      	ands	r3, r1
 8003fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003fc6:	bf00      	nop
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	0007ffff 	.word	0x0007ffff

08003fd8 <LL_ADC_GetMultimode>:
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 031f 	and.w	r3, r3, #31
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <LL_ADC_IsEnabled>:
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <LL_ADC_IsEnabled+0x18>
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <LL_ADC_IsEnabled+0x1a>
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <LL_ADC_StartCalibration>:
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800402c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004036:	4313      	orrs	r3, r2
 8004038:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	609a      	str	r2, [r3, #8]
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <LL_ADC_IsCalibrationOnGoing>:
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800405c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004060:	d101      	bne.n	8004066 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <LL_ADC_REG_IsConversionOngoing>:
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b04      	cmp	r3, #4
 8004086:	d101      	bne.n	800408c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <LL_ADC_INJ_StartConversion>:
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040aa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80040ae:	f043 0208 	orr.w	r2, r3, #8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	609a      	str	r2, [r3, #8]
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <LL_ADC_INJ_IsConversionOngoing>:
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d101      	bne.n	80040da <LL_ADC_INJ_IsConversionOngoing+0x18>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_ADCEx_Calibration_Start+0x1c>
 8004100:	2302      	movs	r3, #2
 8004102:	e04d      	b.n	80041a0 <HAL_ADCEx_Calibration_Start+0xb8>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff fde7 	bl	8003ce0 <ADC_Disable>
 8004112:	4603      	mov	r3, r0
 8004114:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d136      	bne.n	800418a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004120:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004124:	f023 0302 	bic.w	r3, r3, #2
 8004128:	f043 0202 	orr.w	r2, r3, #2
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6839      	ldr	r1, [r7, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff ff6f 	bl	800401a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800413c:	e014      	b.n	8004168 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	3301      	adds	r3, #1
 8004142:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4a18      	ldr	r2, [pc, #96]	@ (80041a8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d90d      	bls.n	8004168 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004150:	f023 0312 	bic.w	r3, r3, #18
 8004154:	f043 0210 	orr.w	r2, r3, #16
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e01b      	b.n	80041a0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff ff6d 	bl	800404c <LL_ADC_IsCalibrationOnGoing>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e2      	bne.n	800413e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417c:	f023 0303 	bic.w	r3, r3, #3
 8004180:	f043 0201 	orr.w	r2, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004188:	e005      	b.n	8004196 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418e:	f043 0210 	orr.w	r2, r3, #16
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800419e:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	0004de01 	.word	0x0004de01

080041ac <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041b4:	4853      	ldr	r0, [pc, #332]	@ (8004304 <HAL_ADCEx_InjectedStart+0x158>)
 80041b6:	f7ff ff0f 	bl	8003fd8 <LL_ADC_GetMultimode>
 80041ba:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff ff7e 	bl	80040c2 <LL_ADC_INJ_IsConversionOngoing>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 80041cc:	2302      	movs	r3, #2
 80041ce:	e094      	b.n	80042fa <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041da:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041e2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10a      	bne.n	8004200 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d107      	bne.n	8004200 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f4:	f043 0220 	orr.w	r2, r3, #32
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e07c      	b.n	80042fa <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_ADCEx_InjectedStart+0x62>
 800420a:	2302      	movs	r3, #2
 800420c:	e075      	b.n	80042fa <HAL_ADCEx_InjectedStart+0x14e>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7ff fcdc 	bl	8003bd4 <ADC_Enable>
 800421c:	4603      	mov	r3, r0
 800421e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d164      	bne.n	80042f0 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800422a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800422e:	2b00      	cmp	r3, #0
 8004230:	d006      	beq.n	8004240 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004236:	f023 0208 	bic.w	r2, r3, #8
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	661a      	str	r2, [r3, #96]	@ 0x60
 800423e:	e002      	b.n	8004246 <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800424a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800424e:	f023 0301 	bic.w	r3, r3, #1
 8004252:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a2a      	ldr	r2, [pc, #168]	@ (8004308 <HAL_ADCEx_InjectedStart+0x15c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d002      	beq.n	800426a <HAL_ADCEx_InjectedStart+0xbe>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	e001      	b.n	800426e <HAL_ADCEx_InjectedStart+0xc2>
 800426a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	4293      	cmp	r3, r2
 8004274:	d002      	beq.n	800427c <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d105      	bne.n	8004288 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004280:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2260      	movs	r2, #96	@ 0x60
 800428e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1a      	ldr	r2, [pc, #104]	@ (8004308 <HAL_ADCEx_InjectedStart+0x15c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d002      	beq.n	80042a8 <HAL_ADCEx_InjectedStart+0xfc>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	e001      	b.n	80042ac <HAL_ADCEx_InjectedStart+0x100>
 80042a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d008      	beq.n	80042c6 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2b06      	cmp	r3, #6
 80042be:	d002      	beq.n	80042c6 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2b07      	cmp	r3, #7
 80042c4:	d10d      	bne.n	80042e2 <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff fe26 	bl	8003f1c <LL_ADC_INJ_GetTrigAuto>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d110      	bne.n	80042f8 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff fedd 	bl	800409a <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80042e0:	e00a      	b.n	80042f8 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042ee:	e003      	b.n	80042f8 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	50000300 	.word	0x50000300
 8004308:	50000100 	.word	0x50000100

0800430c <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004314:	486e      	ldr	r0, [pc, #440]	@ (80044d0 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8004316:	f7ff fe5f 	bl	8003fd8 <LL_ADC_GetMultimode>
 800431a:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff fece 	bl	80040c2 <LL_ADC_INJ_IsConversionOngoing>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 800432c:	2302      	movs	r3, #2
 800432e:	e0ca      	b.n	80044c6 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800433a:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004342:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10a      	bne.n	8004360 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d107      	bne.n	8004360 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004354:	f043 0220 	orr.w	r2, r3, #32
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e0b2      	b.n	80044c6 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_ADCEx_InjectedStart_IT+0x62>
 800436a:	2302      	movs	r3, #2
 800436c:	e0ab      	b.n	80044c6 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff fc2c 	bl	8003bd4 <ADC_Enable>
 800437c:	4603      	mov	r3, r0
 800437e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	2b00      	cmp	r3, #0
 8004384:	f040 809a 	bne.w	80044bc <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800438c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004390:	2b00      	cmp	r3, #0
 8004392:	d006      	beq.n	80043a2 <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004398:	f023 0208 	bic.w	r2, r3, #8
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	661a      	str	r2, [r3, #96]	@ 0x60
 80043a0:	e002      	b.n	80043a8 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80043b0:	f023 0301 	bic.w	r3, r3, #1
 80043b4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a44      	ldr	r2, [pc, #272]	@ (80044d4 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d002      	beq.n	80043cc <HAL_ADCEx_InjectedStart_IT+0xc0>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	e001      	b.n	80043d0 <HAL_ADCEx_InjectedStart_IT+0xc4>
 80043cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6812      	ldr	r2, [r2, #0]
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d002      	beq.n	80043de <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d105      	bne.n	80043ea <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2260      	movs	r2, #96	@ 0x60
 80043f0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004416:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	2b08      	cmp	r3, #8
 800441e:	d110      	bne.n	8004442 <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0220 	bic.w	r2, r2, #32
 800442e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800443e:	605a      	str	r2, [r3, #4]
          break;
 8004440:	e010      	b.n	8004464 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004450:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0220 	orr.w	r2, r2, #32
 8004460:	605a      	str	r2, [r3, #4]
          break;
 8004462:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1a      	ldr	r2, [pc, #104]	@ (80044d4 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d002      	beq.n	8004474 <HAL_ADCEx_InjectedStart_IT+0x168>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	e001      	b.n	8004478 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8004474:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	4293      	cmp	r3, r2
 800447e:	d008      	beq.n	8004492 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d005      	beq.n	8004492 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b06      	cmp	r3, #6
 800448a:	d002      	beq.n	8004492 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2b07      	cmp	r3, #7
 8004490:	d10d      	bne.n	80044ae <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff fd40 	bl	8003f1c <LL_ADC_INJ_GetTrigAuto>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d110      	bne.n	80044c4 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fdf7 	bl	800409a <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80044ac:	e00a      	b.n	80044c4 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044ba:	e003      	b.n	80044c4 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	50000300 	.word	0x50000300
 80044d4:	50000100 	.word	0x50000100

080044d8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b0b6      	sub	sp, #216	@ 0xd8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004548:	2b01      	cmp	r3, #1
 800454a:	d102      	bne.n	8004552 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 800454c:	2302      	movs	r3, #2
 800454e:	f000 bcb5 	b.w	8004ebc <HAL_ADCEx_InjectedConfigChannel+0x994>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004566:	2b01      	cmp	r3, #1
 8004568:	d130      	bne.n	80045cc <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b09      	cmp	r3, #9
 8004570:	d179      	bne.n	8004666 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004576:	2b00      	cmp	r3, #0
 8004578:	d010      	beq.n	800459c <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	0e9b      	lsrs	r3, r3, #26
 8004580:	025b      	lsls	r3, r3, #9
 8004582:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458a:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800458e:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800459a:	e007      	b.n	80045ac <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	0e9b      	lsrs	r3, r3, #26
 80045a2:	025b      	lsls	r3, r3, #9
 80045a4:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 80045a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045b2:	4b84      	ldr	r3, [pc, #528]	@ (80047c4 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6812      	ldr	r2, [r2, #0]
 80045ba:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80045be:	430b      	orrs	r3, r1
 80045c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80045c8:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80045ca:	e04c      	b.n	8004666 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d11d      	bne.n	8004610 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	6a1a      	ldr	r2, [r3, #32]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00d      	beq.n	8004606 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f4:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80045f8:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004604:	e004      	b.n	8004610 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	3b01      	subs	r3, #1
 800460c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	0e9b      	lsrs	r3, r3, #26
 8004616:	f003 021f 	and.w	r2, r3, #31
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 031f 	and.w	r3, r3, #31
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004634:	1e5a      	subs	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800463e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004656:	4b5b      	ldr	r3, [pc, #364]	@ (80047c4 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004658:	4013      	ands	r3, r2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	430b      	orrs	r3, r1
 8004664:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff fd29 	bl	80040c2 <LL_ADC_INJ_IsConversionOngoing>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d124      	bne.n	80046c0 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800467c:	2b00      	cmp	r3, #0
 800467e:	d112      	bne.n	80046a6 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004690:	055a      	lsls	r2, r3, #21
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004698:	051b      	lsls	r3, r3, #20
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	60da      	str	r2, [r3, #12]
 80046a4:	e00c      	b.n	80046c0 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80046b6:	055a      	lsls	r2, r3, #21
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff fcd5 	bl	8004074 <LL_ADC_REG_IsConversionOngoing>
 80046ca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fcf5 	bl	80040c2 <LL_ADC_INJ_IsConversionOngoing>
 80046d8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f040 822e 	bne.w	8004b42 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f040 8229 	bne.w	8004b42 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d116      	bne.n	800472e <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004706:	2b01      	cmp	r3, #1
 8004708:	d108      	bne.n	800471c <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8004718:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800471a:	e01f      	b.n	800475c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800472a:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800472c:	e016      	b.n	800475c <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004734:	2b01      	cmp	r3, #1
 8004736:	d109      	bne.n	800474c <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473c:	f043 0220 	orr.w	r2, r3, #32
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800474a:	e007      	b.n	800475c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800475a:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004762:	2b01      	cmp	r3, #1
 8004764:	d110      	bne.n	8004788 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004778:	430b      	orrs	r3, r1
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0202 	orr.w	r2, r2, #2
 8004784:	611a      	str	r2, [r3, #16]
 8004786:	e007      	b.n	8004798 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0202 	bic.w	r2, r2, #2
 8004796:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047a0:	d112      	bne.n	80047c8 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2200      	movs	r2, #0
 80047ac:	4619      	mov	r1, r3
 80047ae:	f7ff fbc3 	bl	8003f38 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fb9b 	bl	8003ef6 <LL_ADC_SetSamplingTimeCommonConfig>
 80047c0:	e011      	b.n	80047e6 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80047c2:	bf00      	nop
 80047c4:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80047d4:	461a      	mov	r2, r3
 80047d6:	f7ff fbaf 	bl	8003f38 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2100      	movs	r1, #0
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff fb88 	bl	8003ef6 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	695a      	ldr	r2, [r3, #20]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	08db      	lsrs	r3, r3, #3
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	2b04      	cmp	r3, #4
 8004806:	d022      	beq.n	800484e <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	6919      	ldr	r1, [r3, #16]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004818:	f7ff fae2 	bl	8003de0 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	6919      	ldr	r1, [r3, #16]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	461a      	mov	r2, r3
 800482a:	f7ff fb2e 	bl	8003e8a <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800483a:	2b01      	cmp	r3, #1
 800483c:	d102      	bne.n	8004844 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 800483e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004842:	e000      	b.n	8004846 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8004844:	2300      	movs	r3, #0
 8004846:	461a      	mov	r2, r3
 8004848:	f7ff fb3a 	bl	8003ec0 <LL_ADC_SetOffsetSaturation>
 800484c:	e179      	b.n	8004b42 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff fae7 	bl	8003e28 <LL_ADC_GetOffsetChannel>
 800485a:	4603      	mov	r3, r0
 800485c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2100      	movs	r1, #0
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff fadc 	bl	8003e28 <LL_ADC_GetOffsetChannel>
 8004870:	4603      	mov	r3, r0
 8004872:	0e9b      	lsrs	r3, r3, #26
 8004874:	f003 021f 	and.w	r2, r3, #31
 8004878:	e01e      	b.n	80048b8 <HAL_ADCEx_InjectedConfigChannel+0x390>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2100      	movs	r1, #0
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff fad1 	bl	8003e28 <LL_ADC_GetOffsetChannel>
 8004886:	4603      	mov	r3, r0
 8004888:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004890:	fa93 f3a3 	rbit	r3, r3
 8004894:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004898:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800489c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80048a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 80048a8:	2320      	movs	r3, #32
 80048aa:	e004      	b.n	80048b6 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 80048ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80048b0:	fab3 f383 	clz	r3, r3
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d105      	bne.n	80048d0 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	0e9b      	lsrs	r3, r3, #26
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	e018      	b.n	8004902 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048dc:	fa93 f3a3 	rbit	r3, r3
 80048e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80048e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80048ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80048f4:	2320      	movs	r3, #32
 80048f6:	e004      	b.n	8004902 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80048f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048fc:	fab3 f383 	clz	r3, r3
 8004900:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004902:	429a      	cmp	r2, r3
 8004904:	d106      	bne.n	8004914 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2200      	movs	r2, #0
 800490c:	2100      	movs	r1, #0
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff faa0 	bl	8003e54 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2101      	movs	r1, #1
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff fa84 	bl	8003e28 <LL_ADC_GetOffsetChannel>
 8004920:	4603      	mov	r3, r0
 8004922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <HAL_ADCEx_InjectedConfigChannel+0x418>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2101      	movs	r1, #1
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fa79 	bl	8003e28 <LL_ADC_GetOffsetChannel>
 8004936:	4603      	mov	r3, r0
 8004938:	0e9b      	lsrs	r3, r3, #26
 800493a:	f003 021f 	and.w	r2, r3, #31
 800493e:	e01e      	b.n	800497e <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2101      	movs	r1, #1
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fa6e 	bl	8003e28 <LL_ADC_GetOffsetChannel>
 800494c:	4603      	mov	r3, r0
 800494e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004956:	fa93 f3a3 	rbit	r3, r3
 800495a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800495e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004962:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004966:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 800496e:	2320      	movs	r3, #32
 8004970:	e004      	b.n	800497c <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8004972:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004976:	fab3 f383 	clz	r3, r3
 800497a:	b2db      	uxtb	r3, r3
 800497c:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004986:	2b00      	cmp	r3, #0
 8004988:	d105      	bne.n	8004996 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	0e9b      	lsrs	r3, r3, #26
 8004990:	f003 031f 	and.w	r3, r3, #31
 8004994:	e018      	b.n	80049c8 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049a2:	fa93 f3a3 	rbit	r3, r3
 80049a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80049aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80049ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80049b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80049ba:	2320      	movs	r3, #32
 80049bc:	e004      	b.n	80049c8 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80049be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049c2:	fab3 f383 	clz	r3, r3
 80049c6:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d106      	bne.n	80049da <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2200      	movs	r2, #0
 80049d2:	2101      	movs	r1, #1
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff fa3d 	bl	8003e54 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2102      	movs	r1, #2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fa21 	bl	8003e28 <LL_ADC_GetOffsetChannel>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2102      	movs	r1, #2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fa16 	bl	8003e28 <LL_ADC_GetOffsetChannel>
 80049fc:	4603      	mov	r3, r0
 80049fe:	0e9b      	lsrs	r3, r3, #26
 8004a00:	f003 021f 	and.w	r2, r3, #31
 8004a04:	e01e      	b.n	8004a44 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2102      	movs	r1, #2
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff fa0b 	bl	8003e28 <LL_ADC_GetOffsetChannel>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a1c:	fa93 f3a3 	rbit	r3, r3
 8004a20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004a34:	2320      	movs	r3, #32
 8004a36:	e004      	b.n	8004a42 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a3c:	fab3 f383 	clz	r3, r3
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	0e9b      	lsrs	r3, r3, #26
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	e014      	b.n	8004a86 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a64:	fa93 f3a3 	rbit	r3, r3
 8004a68:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004a6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004a70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004a78:	2320      	movs	r3, #32
 8004a7a:	e004      	b.n	8004a86 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004a7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a80:	fab3 f383 	clz	r3, r3
 8004a84:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d106      	bne.n	8004a98 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2102      	movs	r1, #2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff f9de 	bl	8003e54 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2103      	movs	r1, #3
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff f9c2 	bl	8003e28 <LL_ADC_GetOffsetChannel>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10a      	bne.n	8004ac4 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2103      	movs	r1, #3
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff f9b7 	bl	8003e28 <LL_ADC_GetOffsetChannel>
 8004aba:	4603      	mov	r3, r0
 8004abc:	0e9b      	lsrs	r3, r3, #26
 8004abe:	f003 021f 	and.w	r2, r3, #31
 8004ac2:	e017      	b.n	8004af4 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2103      	movs	r1, #3
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff f9ac 	bl	8003e28 <LL_ADC_GetOffsetChannel>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ad6:	fa93 f3a3 	rbit	r3, r3
 8004ada:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004adc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ade:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004ae0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004ae6:	2320      	movs	r3, #32
 8004ae8:	e003      	b.n	8004af2 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004aea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004aec:	fab3 f383 	clz	r3, r3
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d105      	bne.n	8004b0c <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	0e9b      	lsrs	r3, r3, #26
 8004b06:	f003 031f 	and.w	r3, r3, #31
 8004b0a:	e011      	b.n	8004b30 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b14:	fa93 f3a3 	rbit	r3, r3
 8004b18:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004b1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004b1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004b24:	2320      	movs	r3, #32
 8004b26:	e003      	b.n	8004b30 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004b28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b2a:	fab3 f383 	clz	r3, r3
 8004b2e:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d106      	bne.n	8004b42 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2103      	movs	r1, #3
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff f989 	bl	8003e54 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff fa54 	bl	8003ff4 <LL_ADC_IsEnabled>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f040 8140 	bne.w	8004dd4 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	6819      	ldr	r1, [r3, #0]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	461a      	mov	r2, r3
 8004b62:	f7ff fa15 	bl	8003f90 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	4a8f      	ldr	r2, [pc, #572]	@ (8004da8 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	f040 8131 	bne.w	8004dd4 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10b      	bne.n	8004b9a <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	0e9b      	lsrs	r3, r3, #26
 8004b88:	3301      	adds	r3, #1
 8004b8a:	f003 031f 	and.w	r3, r3, #31
 8004b8e:	2b09      	cmp	r3, #9
 8004b90:	bf94      	ite	ls
 8004b92:	2301      	movls	r3, #1
 8004b94:	2300      	movhi	r3, #0
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	e019      	b.n	8004bce <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ba2:	fa93 f3a3 	rbit	r3, r3
 8004ba6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004baa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004bac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004bb2:	2320      	movs	r3, #32
 8004bb4:	e003      	b.n	8004bbe <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004bb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bb8:	fab3 f383 	clz	r3, r3
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	f003 031f 	and.w	r3, r3, #31
 8004bc4:	2b09      	cmp	r3, #9
 8004bc6:	bf94      	ite	ls
 8004bc8:	2301      	movls	r3, #1
 8004bca:	2300      	movhi	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d079      	beq.n	8004cc6 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d107      	bne.n	8004bee <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	0e9b      	lsrs	r3, r3, #26
 8004be4:	3301      	adds	r3, #1
 8004be6:	069b      	lsls	r3, r3, #26
 8004be8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004bec:	e015      	b.n	8004c1a <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bf6:	fa93 f3a3 	rbit	r3, r3
 8004bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004bfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bfe:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004c00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004c06:	2320      	movs	r3, #32
 8004c08:	e003      	b.n	8004c12 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c0c:	fab3 f383 	clz	r3, r3
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	3301      	adds	r3, #1
 8004c14:	069b      	lsls	r3, r3, #26
 8004c16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	0e9b      	lsrs	r3, r3, #26
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	f003 031f 	and.w	r3, r3, #31
 8004c32:	2101      	movs	r1, #1
 8004c34:	fa01 f303 	lsl.w	r3, r1, r3
 8004c38:	e017      	b.n	8004c6a <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c42:	fa93 f3a3 	rbit	r3, r3
 8004c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c4a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004c52:	2320      	movs	r3, #32
 8004c54:	e003      	b.n	8004c5e <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8004c56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c58:	fab3 f383 	clz	r3, r3
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	3301      	adds	r3, #1
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	2101      	movs	r1, #1
 8004c66:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6a:	ea42 0103 	orr.w	r1, r2, r3
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10a      	bne.n	8004c90 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	0e9b      	lsrs	r3, r3, #26
 8004c80:	3301      	adds	r3, #1
 8004c82:	f003 021f 	and.w	r2, r3, #31
 8004c86:	4613      	mov	r3, r2
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	4413      	add	r3, r2
 8004c8c:	051b      	lsls	r3, r3, #20
 8004c8e:	e018      	b.n	8004cc2 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c98:	fa93 f3a3 	rbit	r3, r3
 8004c9c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004ca8:	2320      	movs	r3, #32
 8004caa:	e003      	b.n	8004cb4 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cae:	fab3 f383 	clz	r3, r3
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	f003 021f 	and.w	r2, r3, #31
 8004cba:	4613      	mov	r3, r2
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	4413      	add	r3, r2
 8004cc0:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cc2:	430b      	orrs	r3, r1
 8004cc4:	e081      	b.n	8004dca <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d107      	bne.n	8004ce2 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	0e9b      	lsrs	r3, r3, #26
 8004cd8:	3301      	adds	r3, #1
 8004cda:	069b      	lsls	r3, r3, #26
 8004cdc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ce0:	e015      	b.n	8004d0e <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cea:	fa93 f3a3 	rbit	r3, r3
 8004cee:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004cfa:	2320      	movs	r3, #32
 8004cfc:	e003      	b.n	8004d06 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d00:	fab3 f383 	clz	r3, r3
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	3301      	adds	r3, #1
 8004d08:	069b      	lsls	r3, r3, #26
 8004d0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d109      	bne.n	8004d2e <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	0e9b      	lsrs	r3, r3, #26
 8004d20:	3301      	adds	r3, #1
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	2101      	movs	r1, #1
 8004d28:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2c:	e017      	b.n	8004d5e <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	fa93 f3a3 	rbit	r3, r3
 8004d3a:	61bb      	str	r3, [r7, #24]
  return result;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004d46:	2320      	movs	r3, #32
 8004d48:	e003      	b.n	8004d52 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	fab3 f383 	clz	r3, r3
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	3301      	adds	r3, #1
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	2101      	movs	r1, #1
 8004d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5e:	ea42 0103 	orr.w	r1, r2, r3
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10d      	bne.n	8004d8a <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	0e9b      	lsrs	r3, r3, #26
 8004d74:	3301      	adds	r3, #1
 8004d76:	f003 021f 	and.w	r2, r3, #31
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	4413      	add	r3, r2
 8004d80:	3b1e      	subs	r3, #30
 8004d82:	051b      	lsls	r3, r3, #20
 8004d84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d88:	e01e      	b.n	8004dc8 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	fa93 f3a3 	rbit	r3, r3
 8004d96:	60fb      	str	r3, [r7, #12]
  return result;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d104      	bne.n	8004dac <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8004da2:	2320      	movs	r3, #32
 8004da4:	e006      	b.n	8004db4 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8004da6:	bf00      	nop
 8004da8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	fab3 f383 	clz	r3, r3
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	3301      	adds	r3, #1
 8004db6:	f003 021f 	and.w	r2, r3, #31
 8004dba:	4613      	mov	r3, r2
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	4413      	add	r3, r2
 8004dc0:	3b1e      	subs	r3, #30
 8004dc2:	051b      	lsls	r3, r3, #20
 8004dc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dc8:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dce:	4619      	mov	r1, r3
 8004dd0:	f7ff f8b2 	bl	8003f38 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ec4 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d067      	beq.n	8004eb0 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004de0:	4839      	ldr	r0, [pc, #228]	@ (8004ec8 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004de2:	f7fe ffef 	bl	8003dc4 <LL_ADC_GetCommonPathInternalCh>
 8004de6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a37      	ldr	r2, [pc, #220]	@ (8004ecc <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d004      	beq.n	8004dfe <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a35      	ldr	r2, [pc, #212]	@ (8004ed0 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d127      	bne.n	8004e4e <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004dfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d121      	bne.n	8004e4e <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e12:	d14d      	bne.n	8004eb0 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	482a      	ldr	r0, [pc, #168]	@ (8004ec8 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004e20:	f7fe ffbd 	bl	8003d9e <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004e24:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed4 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	099b      	lsrs	r3, r3, #6
 8004e2a:	4a2b      	ldr	r2, [pc, #172]	@ (8004ed8 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8004e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e30:	099a      	lsrs	r2, r3, #6
 8004e32:	4613      	mov	r3, r2
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004e3c:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004e3e:	e002      	b.n	8004e46 <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1f9      	bne.n	8004e40 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e4c:	e030      	b.n	8004eb0 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a22      	ldr	r2, [pc, #136]	@ (8004edc <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d113      	bne.n	8004e80 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10d      	bne.n	8004e80 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee0 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d020      	beq.n	8004eb0 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e76:	4619      	mov	r1, r3
 8004e78:	4813      	ldr	r0, [pc, #76]	@ (8004ec8 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004e7a:	f7fe ff90 	bl	8003d9e <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e7e:	e017      	b.n	8004eb0 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a17      	ldr	r2, [pc, #92]	@ (8004ee4 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d112      	bne.n	8004eb0 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10c      	bne.n	8004eb0 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a11      	ldr	r2, [pc, #68]	@ (8004ee0 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d007      	beq.n	8004eb0 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ea4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4807      	ldr	r0, [pc, #28]	@ (8004ec8 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004eac:	f7fe ff77 	bl	8003d9e <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004eb8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	37d8      	adds	r7, #216	@ 0xd8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	80080000 	.word	0x80080000
 8004ec8:	50000300 	.word	0x50000300
 8004ecc:	c3210000 	.word	0xc3210000
 8004ed0:	90c00010 	.word	0x90c00010
 8004ed4:	20000000 	.word	0x20000000
 8004ed8:	053e2d63 	.word	0x053e2d63
 8004edc:	c7520000 	.word	0xc7520000
 8004ee0:	50000100 	.word	0x50000100
 8004ee4:	cb840000 	.word	0xcb840000

08004ee8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004ee8:	b590      	push	{r4, r7, lr}
 8004eea:	b0a1      	sub	sp, #132	@ 0x84
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e08b      	b.n	800501e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004f0e:	2300      	movs	r3, #0
 8004f10:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004f12:	2300      	movs	r3, #0
 8004f14:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f1e:	d102      	bne.n	8004f26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f20:	4b41      	ldr	r3, [pc, #260]	@ (8005028 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	e001      	b.n	8004f2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004f26:	2300      	movs	r3, #0
 8004f28:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10b      	bne.n	8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f34:	f043 0220 	orr.w	r2, r3, #32
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e06a      	b.n	800501e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff f892 	bl	8004074 <LL_ADC_REG_IsConversionOngoing>
 8004f50:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff f88c 	bl	8004074 <LL_ADC_REG_IsConversionOngoing>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d14c      	bne.n	8004ffc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004f62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d149      	bne.n	8004ffc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f68:	4b30      	ldr	r3, [pc, #192]	@ (800502c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004f6a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d028      	beq.n	8004fc6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004f74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	6859      	ldr	r1, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f86:	035b      	lsls	r3, r3, #13
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f8e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f90:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004f94:	f7ff f82e 	bl	8003ff4 <LL_ADC_IsEnabled>
 8004f98:	4604      	mov	r4, r0
 8004f9a:	4823      	ldr	r0, [pc, #140]	@ (8005028 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004f9c:	f7ff f82a 	bl	8003ff4 <LL_ADC_IsEnabled>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	4323      	orrs	r3, r4
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d133      	bne.n	8005010 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004fa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004fb0:	f023 030f 	bic.w	r3, r3, #15
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	6811      	ldr	r1, [r2, #0]
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	6892      	ldr	r2, [r2, #8]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fc2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fc4:	e024      	b.n	8005010 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004fc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fd0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fd2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004fd6:	f7ff f80d 	bl	8003ff4 <LL_ADC_IsEnabled>
 8004fda:	4604      	mov	r4, r0
 8004fdc:	4812      	ldr	r0, [pc, #72]	@ (8005028 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004fde:	f7ff f809 	bl	8003ff4 <LL_ADC_IsEnabled>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	4323      	orrs	r3, r4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d112      	bne.n	8005010 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004fea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004ff2:	f023 030f 	bic.w	r3, r3, #15
 8004ff6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004ff8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ffa:	e009      	b.n	8005010 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005000:	f043 0220 	orr.w	r2, r3, #32
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800500e:	e000      	b.n	8005012 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005010:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800501a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800501e:	4618      	mov	r0, r3
 8005020:	3784      	adds	r7, #132	@ 0x84
 8005022:	46bd      	mov	sp, r7
 8005024:	bd90      	pop	{r4, r7, pc}
 8005026:	bf00      	nop
 8005028:	50000100 	.word	0x50000100
 800502c:	50000300 	.word	0x50000300

08005030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005040:	4b0c      	ldr	r3, [pc, #48]	@ (8005074 <__NVIC_SetPriorityGrouping+0x44>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800504c:	4013      	ands	r3, r2
 800504e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005058:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800505c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005062:	4a04      	ldr	r2, [pc, #16]	@ (8005074 <__NVIC_SetPriorityGrouping+0x44>)
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	60d3      	str	r3, [r2, #12]
}
 8005068:	bf00      	nop
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	e000ed00 	.word	0xe000ed00

08005078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800507c:	4b04      	ldr	r3, [pc, #16]	@ (8005090 <__NVIC_GetPriorityGrouping+0x18>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	0a1b      	lsrs	r3, r3, #8
 8005082:	f003 0307 	and.w	r3, r3, #7
}
 8005086:	4618      	mov	r0, r3
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	e000ed00 	.word	0xe000ed00

08005094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	4603      	mov	r3, r0
 800509c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800509e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	db0b      	blt.n	80050be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050a6:	79fb      	ldrb	r3, [r7, #7]
 80050a8:	f003 021f 	and.w	r2, r3, #31
 80050ac:	4907      	ldr	r1, [pc, #28]	@ (80050cc <__NVIC_EnableIRQ+0x38>)
 80050ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	2001      	movs	r0, #1
 80050b6:	fa00 f202 	lsl.w	r2, r0, r2
 80050ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	e000e100 	.word	0xe000e100

080050d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	6039      	str	r1, [r7, #0]
 80050da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	db0a      	blt.n	80050fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	490c      	ldr	r1, [pc, #48]	@ (800511c <__NVIC_SetPriority+0x4c>)
 80050ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ee:	0112      	lsls	r2, r2, #4
 80050f0:	b2d2      	uxtb	r2, r2
 80050f2:	440b      	add	r3, r1
 80050f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050f8:	e00a      	b.n	8005110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	4908      	ldr	r1, [pc, #32]	@ (8005120 <__NVIC_SetPriority+0x50>)
 8005100:	79fb      	ldrb	r3, [r7, #7]
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	3b04      	subs	r3, #4
 8005108:	0112      	lsls	r2, r2, #4
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	440b      	add	r3, r1
 800510e:	761a      	strb	r2, [r3, #24]
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	e000e100 	.word	0xe000e100
 8005120:	e000ed00 	.word	0xe000ed00

08005124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005124:	b480      	push	{r7}
 8005126:	b089      	sub	sp, #36	@ 0x24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	f1c3 0307 	rsb	r3, r3, #7
 800513e:	2b04      	cmp	r3, #4
 8005140:	bf28      	it	cs
 8005142:	2304      	movcs	r3, #4
 8005144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	3304      	adds	r3, #4
 800514a:	2b06      	cmp	r3, #6
 800514c:	d902      	bls.n	8005154 <NVIC_EncodePriority+0x30>
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	3b03      	subs	r3, #3
 8005152:	e000      	b.n	8005156 <NVIC_EncodePriority+0x32>
 8005154:	2300      	movs	r3, #0
 8005156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005158:	f04f 32ff 	mov.w	r2, #4294967295
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	43da      	mvns	r2, r3
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	401a      	ands	r2, r3
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800516c:	f04f 31ff 	mov.w	r1, #4294967295
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	fa01 f303 	lsl.w	r3, r1, r3
 8005176:	43d9      	mvns	r1, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800517c:	4313      	orrs	r3, r2
         );
}
 800517e:	4618      	mov	r0, r3
 8005180:	3724      	adds	r7, #36	@ 0x24
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
	...

0800518c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3b01      	subs	r3, #1
 8005198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800519c:	d301      	bcc.n	80051a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800519e:	2301      	movs	r3, #1
 80051a0:	e00f      	b.n	80051c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051a2:	4a0a      	ldr	r2, [pc, #40]	@ (80051cc <SysTick_Config+0x40>)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051aa:	210f      	movs	r1, #15
 80051ac:	f04f 30ff 	mov.w	r0, #4294967295
 80051b0:	f7ff ff8e 	bl	80050d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051b4:	4b05      	ldr	r3, [pc, #20]	@ (80051cc <SysTick_Config+0x40>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051ba:	4b04      	ldr	r3, [pc, #16]	@ (80051cc <SysTick_Config+0x40>)
 80051bc:	2207      	movs	r2, #7
 80051be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	e000e010 	.word	0xe000e010

080051d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff ff29 	bl	8005030 <__NVIC_SetPriorityGrouping>
}
 80051de:	bf00      	nop
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b086      	sub	sp, #24
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	4603      	mov	r3, r0
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	607a      	str	r2, [r7, #4]
 80051f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80051f4:	f7ff ff40 	bl	8005078 <__NVIC_GetPriorityGrouping>
 80051f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	6978      	ldr	r0, [r7, #20]
 8005200:	f7ff ff90 	bl	8005124 <NVIC_EncodePriority>
 8005204:	4602      	mov	r2, r0
 8005206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800520a:	4611      	mov	r1, r2
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff ff5f 	bl	80050d0 <__NVIC_SetPriority>
}
 8005212:	bf00      	nop
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b082      	sub	sp, #8
 800521e:	af00      	add	r7, sp, #0
 8005220:	4603      	mov	r3, r0
 8005222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff ff33 	bl	8005094 <__NVIC_EnableIRQ>
}
 800522e:	bf00      	nop
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b082      	sub	sp, #8
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff ffa4 	bl	800518c <SysTick_Config>
 8005244:	4603      	mov	r3, r0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e014      	b.n	800528a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	791b      	ldrb	r3, [r3, #4]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d105      	bne.n	8005276 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7fc f925 	bl	80014c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2202      	movs	r2, #2
 800527a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08a      	sub	sp, #40	@ 0x28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <HAL_DAC_ConfigChannel+0x1c>
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e19e      	b.n	80055f2 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	795b      	ldrb	r3, [r3, #5]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_DAC_ConfigChannel+0x2c>
 80052bc:	2302      	movs	r3, #2
 80052be:	e198      	b.n	80055f2 <HAL_DAC_ConfigChannel+0x35e>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2201      	movs	r2, #1
 80052c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2202      	movs	r2, #2
 80052ca:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d17a      	bne.n	80053ca <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80052d4:	f7fd fa52 	bl	800277c <HAL_GetTick>
 80052d8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d13d      	bne.n	800535c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80052e0:	e018      	b.n	8005314 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80052e2:	f7fd fa4b 	bl	800277c <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d911      	bls.n	8005314 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f043 0208 	orr.w	r2, r3, #8
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2203      	movs	r2, #3
 800530e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e16e      	b.n	80055f2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800531a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1df      	bne.n	80052e2 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800532a:	641a      	str	r2, [r3, #64]	@ 0x40
 800532c:	e020      	b.n	8005370 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800532e:	f7fd fa25 	bl	800277c <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	d90f      	bls.n	800535c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005342:	2b00      	cmp	r3, #0
 8005344:	da0a      	bge.n	800535c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f043 0208 	orr.w	r2, r3, #8
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2203      	movs	r2, #3
 8005356:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e14a      	b.n	80055f2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005362:	2b00      	cmp	r3, #0
 8005364:	dbe3      	blt.n	800532e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800536e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f003 0310 	and.w	r3, r3, #16
 800537c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005380:	fa01 f303 	lsl.w	r3, r1, r3
 8005384:	43db      	mvns	r3, r3
 8005386:	ea02 0103 	and.w	r1, r2, r3
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	409a      	lsls	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f003 0310 	and.w	r3, r3, #16
 80053aa:	21ff      	movs	r1, #255	@ 0xff
 80053ac:	fa01 f303 	lsl.w	r3, r1, r3
 80053b0:	43db      	mvns	r3, r3
 80053b2:	ea02 0103 	and.w	r1, r2, r3
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	409a      	lsls	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d11d      	bne.n	800540e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	221f      	movs	r2, #31
 80053e2:	fa02 f303 	lsl.w	r3, r2, r3
 80053e6:	43db      	mvns	r3, r3
 80053e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ea:	4013      	ands	r3, r2
 80053ec:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005402:	4313      	orrs	r3, r2
 8005404:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800540c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005414:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f003 0310 	and.w	r3, r3, #16
 800541c:	2207      	movs	r2, #7
 800541e:	fa02 f303 	lsl.w	r3, r2, r3
 8005422:	43db      	mvns	r3, r3
 8005424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005426:	4013      	ands	r3, r2
 8005428:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d102      	bne.n	8005438 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8005432:	2300      	movs	r3, #0
 8005434:	623b      	str	r3, [r7, #32]
 8005436:	e00f      	b.n	8005458 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	2b02      	cmp	r3, #2
 800543e:	d102      	bne.n	8005446 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005440:	2301      	movs	r3, #1
 8005442:	623b      	str	r3, [r7, #32]
 8005444:	e008      	b.n	8005458 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d102      	bne.n	8005454 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800544e:	2301      	movs	r3, #1
 8005450:	623b      	str	r3, [r7, #32]
 8005452:	e001      	b.n	8005458 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005454:	2300      	movs	r3, #0
 8005456:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	6a3a      	ldr	r2, [r7, #32]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f003 0310 	and.w	r3, r3, #16
 800546e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	43db      	mvns	r3, r3
 8005478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800547a:	4013      	ands	r3, r2
 800547c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	791b      	ldrb	r3, [r3, #4]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d102      	bne.n	800548c <HAL_DAC_ConfigChannel+0x1f8>
 8005486:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800548a:	e000      	b.n	800548e <HAL_DAC_ConfigChannel+0x1fa>
 800548c:	2300      	movs	r3, #0
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f003 0310 	and.w	r3, r3, #16
 800549a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800549e:	fa02 f303 	lsl.w	r3, r2, r3
 80054a2:	43db      	mvns	r3, r3
 80054a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054a6:	4013      	ands	r3, r2
 80054a8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	795b      	ldrb	r3, [r3, #5]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d102      	bne.n	80054b8 <HAL_DAC_ConfigChannel+0x224>
 80054b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054b6:	e000      	b.n	80054ba <HAL_DAC_ConfigChannel+0x226>
 80054b8:	2300      	movs	r3, #0
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80054c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80054c6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d114      	bne.n	80054fa <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80054d0:	f001 fae0 	bl	8006a94 <HAL_RCC_GetHCLKFreq>
 80054d4:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	4a48      	ldr	r2, [pc, #288]	@ (80055fc <HAL_DAC_ConfigChannel+0x368>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d904      	bls.n	80054e8 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80054de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80054e6:	e00f      	b.n	8005508 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4a45      	ldr	r2, [pc, #276]	@ (8005600 <HAL_DAC_ConfigChannel+0x36c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d90a      	bls.n	8005506 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80054f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f8:	e006      	b.n	8005508 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005500:	4313      	orrs	r3, r2
 8005502:	627b      	str	r3, [r7, #36]	@ 0x24
 8005504:	e000      	b.n	8005508 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005506:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f003 0310 	and.w	r3, r3, #16
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005516:	4313      	orrs	r3, r2
 8005518:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005520:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6819      	ldr	r1, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f003 0310 	and.w	r3, r3, #16
 800552e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	43da      	mvns	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	400a      	ands	r2, r1
 800553e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f003 0310 	and.w	r3, r3, #16
 800554e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	43db      	mvns	r3, r3
 8005558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800555a:	4013      	ands	r3, r2
 800555c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f003 0310 	and.w	r3, r3, #16
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	fa02 f303 	lsl.w	r3, r2, r3
 8005570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005572:	4313      	orrs	r3, r2
 8005574:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800557c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6819      	ldr	r1, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f003 0310 	and.w	r3, r3, #16
 800558a:	22c0      	movs	r2, #192	@ 0xc0
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	43da      	mvns	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	400a      	ands	r2, r1
 8005598:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	089b      	lsrs	r3, r3, #2
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	089b      	lsrs	r3, r3, #2
 80055ac:	021b      	lsls	r3, r3, #8
 80055ae:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f003 0310 	and.w	r3, r3, #16
 80055c4:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80055c8:	fa01 f303 	lsl.w	r3, r1, r3
 80055cc:	43db      	mvns	r3, r3
 80055ce:	ea02 0103 	and.w	r1, r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f003 0310 	and.w	r3, r3, #16
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	409a      	lsls	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80055f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3728      	adds	r7, #40	@ 0x28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	09896800 	.word	0x09896800
 8005600:	04c4b400 	.word	0x04c4b400

08005604 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e08d      	b.n	8005732 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	4b47      	ldr	r3, [pc, #284]	@ (800573c <HAL_DMA_Init+0x138>)
 800561e:	429a      	cmp	r2, r3
 8005620:	d80f      	bhi.n	8005642 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	4b45      	ldr	r3, [pc, #276]	@ (8005740 <HAL_DMA_Init+0x13c>)
 800562a:	4413      	add	r3, r2
 800562c:	4a45      	ldr	r2, [pc, #276]	@ (8005744 <HAL_DMA_Init+0x140>)
 800562e:	fba2 2303 	umull	r2, r3, r2, r3
 8005632:	091b      	lsrs	r3, r3, #4
 8005634:	009a      	lsls	r2, r3, #2
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a42      	ldr	r2, [pc, #264]	@ (8005748 <HAL_DMA_Init+0x144>)
 800563e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005640:	e00e      	b.n	8005660 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	4b40      	ldr	r3, [pc, #256]	@ (800574c <HAL_DMA_Init+0x148>)
 800564a:	4413      	add	r3, r2
 800564c:	4a3d      	ldr	r2, [pc, #244]	@ (8005744 <HAL_DMA_Init+0x140>)
 800564e:	fba2 2303 	umull	r2, r3, r2, r3
 8005652:	091b      	lsrs	r3, r3, #4
 8005654:	009a      	lsls	r2, r3, #2
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a3c      	ldr	r2, [pc, #240]	@ (8005750 <HAL_DMA_Init+0x14c>)
 800565e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800567a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005684:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005690:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800569c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fa76 	bl	8005ba4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056c0:	d102      	bne.n	80056c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056d0:	b2d2      	uxtb	r2, r2
 80056d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056dc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d010      	beq.n	8005708 <HAL_DMA_Init+0x104>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d80c      	bhi.n	8005708 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fa96 	bl	8005c20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005704:	605a      	str	r2, [r3, #4]
 8005706:	e008      	b.n	800571a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	40020407 	.word	0x40020407
 8005740:	bffdfff8 	.word	0xbffdfff8
 8005744:	cccccccd 	.word	0xcccccccd
 8005748:	40020000 	.word	0x40020000
 800574c:	bffdfbf8 	.word	0xbffdfbf8
 8005750:	40020400 	.word	0x40020400

08005754 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_DMA_Start_IT+0x20>
 8005770:	2302      	movs	r3, #2
 8005772:	e066      	b.n	8005842 <HAL_DMA_Start_IT+0xee>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	d155      	bne.n	8005834 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0201 	bic.w	r2, r2, #1
 80057a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	68b9      	ldr	r1, [r7, #8]
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f9bb 	bl	8005b28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d008      	beq.n	80057cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f042 020e 	orr.w	r2, r2, #14
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	e00f      	b.n	80057ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0204 	bic.w	r2, r2, #4
 80057da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 020a 	orr.w	r2, r2, #10
 80057ea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d007      	beq.n	800580a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005804:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005808:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800580e:	2b00      	cmp	r3, #0
 8005810:	d007      	beq.n	8005822 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800581c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005820:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f042 0201 	orr.w	r2, r2, #1
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	e005      	b.n	8005840 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800583c:	2302      	movs	r3, #2
 800583e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005840:	7dfb      	ldrb	r3, [r7, #23]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800584a:	b480      	push	{r7}
 800584c:	b085      	sub	sp, #20
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d005      	beq.n	800586e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2204      	movs	r2, #4
 8005866:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	73fb      	strb	r3, [r7, #15]
 800586c:	e037      	b.n	80058de <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 020e 	bic.w	r2, r2, #14
 800587c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005888:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800588c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0201 	bic.w	r2, r2, #1
 800589c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a2:	f003 021f 	and.w	r2, r3, #31
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	2101      	movs	r1, #1
 80058ac:	fa01 f202 	lsl.w	r2, r1, r2
 80058b0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80058ba:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00c      	beq.n	80058de <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058d2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80058dc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d00d      	beq.n	8005930 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2204      	movs	r2, #4
 8005918:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	73fb      	strb	r3, [r7, #15]
 800592e:	e047      	b.n	80059c0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 020e 	bic.w	r2, r2, #14
 800593e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0201 	bic.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800595a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800595e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005964:	f003 021f 	and.w	r2, r3, #31
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596c:	2101      	movs	r1, #1
 800596e:	fa01 f202 	lsl.w	r2, r1, r2
 8005972:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800597c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00c      	beq.n	80059a0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005990:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005994:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800599e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	4798      	blx	r3
    }
  }
  return status;
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b084      	sub	sp, #16
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	2204      	movs	r2, #4
 80059ec:	409a      	lsls	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d026      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x7a>
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d021      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d107      	bne.n	8005a1e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0204 	bic.w	r2, r2, #4
 8005a1c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a22:	f003 021f 	and.w	r2, r3, #31
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2a:	2104      	movs	r1, #4
 8005a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a30:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d071      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005a42:	e06c      	b.n	8005b1e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a48:	f003 031f 	and.w	r3, r3, #31
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	409a      	lsls	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4013      	ands	r3, r2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d02e      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d029      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10b      	bne.n	8005a88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 020a 	bic.w	r2, r2, #10
 8005a7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8c:	f003 021f 	and.w	r2, r3, #31
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a94:	2102      	movs	r1, #2
 8005a96:	fa01 f202 	lsl.w	r2, r1, r2
 8005a9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d038      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005ab4:	e033      	b.n	8005b1e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aba:	f003 031f 	and.w	r3, r3, #31
 8005abe:	2208      	movs	r2, #8
 8005ac0:	409a      	lsls	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d02a      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f003 0308 	and.w	r3, r3, #8
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d025      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 020e 	bic.w	r2, r2, #14
 8005ae2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae8:	f003 021f 	and.w	r2, r3, #31
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af0:	2101      	movs	r1, #1
 8005af2:	fa01 f202 	lsl.w	r2, r1, r2
 8005af6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d004      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005b1e:	bf00      	nop
 8005b20:	bf00      	nop
}
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005b3e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d004      	beq.n	8005b52 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005b50:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b56:	f003 021f 	and.w	r2, r3, #31
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5e:	2101      	movs	r1, #1
 8005b60:	fa01 f202 	lsl.w	r2, r1, r2
 8005b64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	2b10      	cmp	r3, #16
 8005b74:	d108      	bne.n	8005b88 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005b86:	e007      	b.n	8005b98 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	60da      	str	r2, [r3, #12]
}
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4b16      	ldr	r3, [pc, #88]	@ (8005c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d802      	bhi.n	8005bbe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005bb8:	4b15      	ldr	r3, [pc, #84]	@ (8005c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	e001      	b.n	8005bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005bbe:	4b15      	ldr	r3, [pc, #84]	@ (8005c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005bc0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	3b08      	subs	r3, #8
 8005bce:	4a12      	ldr	r2, [pc, #72]	@ (8005c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd4:	091b      	lsrs	r3, r3, #4
 8005bd6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bdc:	089b      	lsrs	r3, r3, #2
 8005bde:	009a      	lsls	r2, r3, #2
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	4413      	add	r3, r2
 8005be4:	461a      	mov	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a0b      	ldr	r2, [pc, #44]	@ (8005c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005bee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f003 031f 	and.w	r3, r3, #31
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	409a      	lsls	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005bfe:	bf00      	nop
 8005c00:	371c      	adds	r7, #28
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40020407 	.word	0x40020407
 8005c10:	40020800 	.word	0x40020800
 8005c14:	40020820 	.word	0x40020820
 8005c18:	cccccccd 	.word	0xcccccccd
 8005c1c:	40020880 	.word	0x40020880

08005c20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4b0b      	ldr	r3, [pc, #44]	@ (8005c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005c34:	4413      	add	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	461a      	mov	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a08      	ldr	r2, [pc, #32]	@ (8005c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005c42:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	f003 031f 	and.w	r3, r3, #31
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	409a      	lsls	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005c54:	bf00      	nop
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	1000823f 	.word	0x1000823f
 8005c64:	40020940 	.word	0x40020940

08005c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c76:	e15a      	b.n	8005f2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	fa01 f303 	lsl.w	r3, r1, r3
 8005c84:	4013      	ands	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 814c 	beq.w	8005f28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f003 0303 	and.w	r3, r3, #3
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d005      	beq.n	8005ca8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d130      	bne.n	8005d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	2203      	movs	r2, #3
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cde:	2201      	movs	r2, #1
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce6:	43db      	mvns	r3, r3
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4013      	ands	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	091b      	lsrs	r3, r3, #4
 8005cf4:	f003 0201 	and.w	r2, r3, #1
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d017      	beq.n	8005d46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	2203      	movs	r2, #3
 8005d22:	fa02 f303 	lsl.w	r3, r2, r3
 8005d26:	43db      	mvns	r3, r3
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d123      	bne.n	8005d9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	08da      	lsrs	r2, r3, #3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	3208      	adds	r2, #8
 8005d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	220f      	movs	r2, #15
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4013      	ands	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	08da      	lsrs	r2, r3, #3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3208      	adds	r2, #8
 8005d94:	6939      	ldr	r1, [r7, #16]
 8005d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	2203      	movs	r2, #3
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43db      	mvns	r3, r3
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4013      	ands	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f003 0203 	and.w	r2, r3, #3
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 80a6 	beq.w	8005f28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ddc:	4b5b      	ldr	r3, [pc, #364]	@ (8005f4c <HAL_GPIO_Init+0x2e4>)
 8005dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005de0:	4a5a      	ldr	r2, [pc, #360]	@ (8005f4c <HAL_GPIO_Init+0x2e4>)
 8005de2:	f043 0301 	orr.w	r3, r3, #1
 8005de6:	6613      	str	r3, [r2, #96]	@ 0x60
 8005de8:	4b58      	ldr	r3, [pc, #352]	@ (8005f4c <HAL_GPIO_Init+0x2e4>)
 8005dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	60bb      	str	r3, [r7, #8]
 8005df2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005df4:	4a56      	ldr	r2, [pc, #344]	@ (8005f50 <HAL_GPIO_Init+0x2e8>)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	089b      	lsrs	r3, r3, #2
 8005dfa:	3302      	adds	r3, #2
 8005dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f003 0303 	and.w	r3, r3, #3
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	220f      	movs	r2, #15
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	43db      	mvns	r3, r3
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4013      	ands	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005e1e:	d01f      	beq.n	8005e60 <HAL_GPIO_Init+0x1f8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a4c      	ldr	r2, [pc, #304]	@ (8005f54 <HAL_GPIO_Init+0x2ec>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d019      	beq.n	8005e5c <HAL_GPIO_Init+0x1f4>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a4b      	ldr	r2, [pc, #300]	@ (8005f58 <HAL_GPIO_Init+0x2f0>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d013      	beq.n	8005e58 <HAL_GPIO_Init+0x1f0>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a4a      	ldr	r2, [pc, #296]	@ (8005f5c <HAL_GPIO_Init+0x2f4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00d      	beq.n	8005e54 <HAL_GPIO_Init+0x1ec>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a49      	ldr	r2, [pc, #292]	@ (8005f60 <HAL_GPIO_Init+0x2f8>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d007      	beq.n	8005e50 <HAL_GPIO_Init+0x1e8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a48      	ldr	r2, [pc, #288]	@ (8005f64 <HAL_GPIO_Init+0x2fc>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d101      	bne.n	8005e4c <HAL_GPIO_Init+0x1e4>
 8005e48:	2305      	movs	r3, #5
 8005e4a:	e00a      	b.n	8005e62 <HAL_GPIO_Init+0x1fa>
 8005e4c:	2306      	movs	r3, #6
 8005e4e:	e008      	b.n	8005e62 <HAL_GPIO_Init+0x1fa>
 8005e50:	2304      	movs	r3, #4
 8005e52:	e006      	b.n	8005e62 <HAL_GPIO_Init+0x1fa>
 8005e54:	2303      	movs	r3, #3
 8005e56:	e004      	b.n	8005e62 <HAL_GPIO_Init+0x1fa>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e002      	b.n	8005e62 <HAL_GPIO_Init+0x1fa>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e000      	b.n	8005e62 <HAL_GPIO_Init+0x1fa>
 8005e60:	2300      	movs	r3, #0
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	f002 0203 	and.w	r2, r2, #3
 8005e68:	0092      	lsls	r2, r2, #2
 8005e6a:	4093      	lsls	r3, r2
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e72:	4937      	ldr	r1, [pc, #220]	@ (8005f50 <HAL_GPIO_Init+0x2e8>)
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	089b      	lsrs	r3, r3, #2
 8005e78:	3302      	adds	r3, #2
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e80:	4b39      	ldr	r3, [pc, #228]	@ (8005f68 <HAL_GPIO_Init+0x300>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ea4:	4a30      	ldr	r2, [pc, #192]	@ (8005f68 <HAL_GPIO_Init+0x300>)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005eaa:	4b2f      	ldr	r3, [pc, #188]	@ (8005f68 <HAL_GPIO_Init+0x300>)
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005ece:	4a26      	ldr	r2, [pc, #152]	@ (8005f68 <HAL_GPIO_Init+0x300>)
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005ed4:	4b24      	ldr	r3, [pc, #144]	@ (8005f68 <HAL_GPIO_Init+0x300>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	43db      	mvns	r3, r3
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8005f68 <HAL_GPIO_Init+0x300>)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005efe:	4b1a      	ldr	r3, [pc, #104]	@ (8005f68 <HAL_GPIO_Init+0x300>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	43db      	mvns	r3, r3
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f22:	4a11      	ldr	r2, [pc, #68]	@ (8005f68 <HAL_GPIO_Init+0x300>)
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	fa22 f303 	lsr.w	r3, r2, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f47f ae9d 	bne.w	8005c78 <HAL_GPIO_Init+0x10>
  }
}
 8005f3e:	bf00      	nop
 8005f40:	bf00      	nop
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	40010000 	.word	0x40010000
 8005f54:	48000400 	.word	0x48000400
 8005f58:	48000800 	.word	0x48000800
 8005f5c:	48000c00 	.word	0x48000c00
 8005f60:	48001000 	.word	0x48001000
 8005f64:	48001400 	.word	0x48001400
 8005f68:	40010400 	.word	0x40010400

08005f6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	691a      	ldr	r2, [r3, #16]
 8005f7c:	887b      	ldrh	r3, [r7, #2]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f84:	2301      	movs	r3, #1
 8005f86:	73fb      	strb	r3, [r7, #15]
 8005f88:	e001      	b.n	8005f8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	807b      	strh	r3, [r7, #2]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005fac:	787b      	ldrb	r3, [r7, #1]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005fb2:	887a      	ldrh	r2, [r7, #2]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005fb8:	e002      	b.n	8005fc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005fba:	887a      	ldrh	r2, [r7, #2]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d141      	bne.n	800605e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005fda:	4b4b      	ldr	r3, [pc, #300]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fe6:	d131      	bne.n	800604c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fe8:	4b47      	ldr	r3, [pc, #284]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fee:	4a46      	ldr	r2, [pc, #280]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ff0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ff4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ff8:	4b43      	ldr	r3, [pc, #268]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006000:	4a41      	ldr	r2, [pc, #260]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006002:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006006:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006008:	4b40      	ldr	r3, [pc, #256]	@ (800610c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2232      	movs	r2, #50	@ 0x32
 800600e:	fb02 f303 	mul.w	r3, r2, r3
 8006012:	4a3f      	ldr	r2, [pc, #252]	@ (8006110 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006014:	fba2 2303 	umull	r2, r3, r2, r3
 8006018:	0c9b      	lsrs	r3, r3, #18
 800601a:	3301      	adds	r3, #1
 800601c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800601e:	e002      	b.n	8006026 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3b01      	subs	r3, #1
 8006024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006026:	4b38      	ldr	r3, [pc, #224]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800602e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006032:	d102      	bne.n	800603a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1f2      	bne.n	8006020 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800603a:	4b33      	ldr	r3, [pc, #204]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006046:	d158      	bne.n	80060fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e057      	b.n	80060fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800604c:	4b2e      	ldr	r3, [pc, #184]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800604e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006052:	4a2d      	ldr	r2, [pc, #180]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006054:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006058:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800605c:	e04d      	b.n	80060fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006064:	d141      	bne.n	80060ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006066:	4b28      	ldr	r3, [pc, #160]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800606e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006072:	d131      	bne.n	80060d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006074:	4b24      	ldr	r3, [pc, #144]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800607a:	4a23      	ldr	r2, [pc, #140]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800607c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006080:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006084:	4b20      	ldr	r3, [pc, #128]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800608c:	4a1e      	ldr	r2, [pc, #120]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800608e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006092:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006094:	4b1d      	ldr	r3, [pc, #116]	@ (800610c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2232      	movs	r2, #50	@ 0x32
 800609a:	fb02 f303 	mul.w	r3, r2, r3
 800609e:	4a1c      	ldr	r2, [pc, #112]	@ (8006110 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80060a0:	fba2 2303 	umull	r2, r3, r2, r3
 80060a4:	0c9b      	lsrs	r3, r3, #18
 80060a6:	3301      	adds	r3, #1
 80060a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060aa:	e002      	b.n	80060b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060b2:	4b15      	ldr	r3, [pc, #84]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060be:	d102      	bne.n	80060c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1f2      	bne.n	80060ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80060c6:	4b10      	ldr	r3, [pc, #64]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060d2:	d112      	bne.n	80060fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e011      	b.n	80060fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060de:	4a0a      	ldr	r2, [pc, #40]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80060e8:	e007      	b.n	80060fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80060ea:	4b07      	ldr	r3, [pc, #28]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80060f2:	4a05      	ldr	r2, [pc, #20]	@ (8006108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80060f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	40007000 	.word	0x40007000
 800610c:	20000000 	.word	0x20000000
 8006110:	431bde83 	.word	0x431bde83

08006114 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006118:	4b05      	ldr	r3, [pc, #20]	@ (8006130 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	4a04      	ldr	r2, [pc, #16]	@ (8006130 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800611e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006122:	6093      	str	r3, [r2, #8]
}
 8006124:	bf00      	nop
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	40007000 	.word	0x40007000

08006134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b088      	sub	sp, #32
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e2fe      	b.n	8006744 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d075      	beq.n	800623e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006152:	4b97      	ldr	r3, [pc, #604]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 030c 	and.w	r3, r3, #12
 800615a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800615c:	4b94      	ldr	r3, [pc, #592]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f003 0303 	and.w	r3, r3, #3
 8006164:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	2b0c      	cmp	r3, #12
 800616a:	d102      	bne.n	8006172 <HAL_RCC_OscConfig+0x3e>
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	2b03      	cmp	r3, #3
 8006170:	d002      	beq.n	8006178 <HAL_RCC_OscConfig+0x44>
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	2b08      	cmp	r3, #8
 8006176:	d10b      	bne.n	8006190 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006178:	4b8d      	ldr	r3, [pc, #564]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d05b      	beq.n	800623c <HAL_RCC_OscConfig+0x108>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d157      	bne.n	800623c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e2d9      	b.n	8006744 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006198:	d106      	bne.n	80061a8 <HAL_RCC_OscConfig+0x74>
 800619a:	4b85      	ldr	r3, [pc, #532]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a84      	ldr	r2, [pc, #528]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 80061a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	e01d      	b.n	80061e4 <HAL_RCC_OscConfig+0xb0>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061b0:	d10c      	bne.n	80061cc <HAL_RCC_OscConfig+0x98>
 80061b2:	4b7f      	ldr	r3, [pc, #508]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a7e      	ldr	r2, [pc, #504]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 80061b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	4b7c      	ldr	r3, [pc, #496]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a7b      	ldr	r2, [pc, #492]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 80061c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	e00b      	b.n	80061e4 <HAL_RCC_OscConfig+0xb0>
 80061cc:	4b78      	ldr	r3, [pc, #480]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a77      	ldr	r2, [pc, #476]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 80061d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	4b75      	ldr	r3, [pc, #468]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a74      	ldr	r2, [pc, #464]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 80061de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d013      	beq.n	8006214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ec:	f7fc fac6 	bl	800277c <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061f4:	f7fc fac2 	bl	800277c <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b64      	cmp	r3, #100	@ 0x64
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e29e      	b.n	8006744 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006206:	4b6a      	ldr	r3, [pc, #424]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0f0      	beq.n	80061f4 <HAL_RCC_OscConfig+0xc0>
 8006212:	e014      	b.n	800623e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006214:	f7fc fab2 	bl	800277c <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800621c:	f7fc faae 	bl	800277c <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b64      	cmp	r3, #100	@ 0x64
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e28a      	b.n	8006744 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800622e:	4b60      	ldr	r3, [pc, #384]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f0      	bne.n	800621c <HAL_RCC_OscConfig+0xe8>
 800623a:	e000      	b.n	800623e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800623c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d075      	beq.n	8006336 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800624a:	4b59      	ldr	r3, [pc, #356]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 030c 	and.w	r3, r3, #12
 8006252:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006254:	4b56      	ldr	r3, [pc, #344]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f003 0303 	and.w	r3, r3, #3
 800625c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	2b0c      	cmp	r3, #12
 8006262:	d102      	bne.n	800626a <HAL_RCC_OscConfig+0x136>
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2b02      	cmp	r3, #2
 8006268:	d002      	beq.n	8006270 <HAL_RCC_OscConfig+0x13c>
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	2b04      	cmp	r3, #4
 800626e:	d11f      	bne.n	80062b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006270:	4b4f      	ldr	r3, [pc, #316]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006278:	2b00      	cmp	r3, #0
 800627a:	d005      	beq.n	8006288 <HAL_RCC_OscConfig+0x154>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e25d      	b.n	8006744 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006288:	4b49      	ldr	r3, [pc, #292]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	061b      	lsls	r3, r3, #24
 8006296:	4946      	ldr	r1, [pc, #280]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 8006298:	4313      	orrs	r3, r2
 800629a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800629c:	4b45      	ldr	r3, [pc, #276]	@ (80063b4 <HAL_RCC_OscConfig+0x280>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7fc fa1f 	bl	80026e4 <HAL_InitTick>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d043      	beq.n	8006334 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e249      	b.n	8006744 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d023      	beq.n	8006300 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062b8:	4b3d      	ldr	r3, [pc, #244]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a3c      	ldr	r2, [pc, #240]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 80062be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c4:	f7fc fa5a 	bl	800277c <HAL_GetTick>
 80062c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062ca:	e008      	b.n	80062de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062cc:	f7fc fa56 	bl	800277c <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e232      	b.n	8006744 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062de:	4b34      	ldr	r3, [pc, #208]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0f0      	beq.n	80062cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ea:	4b31      	ldr	r3, [pc, #196]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	061b      	lsls	r3, r3, #24
 80062f8:	492d      	ldr	r1, [pc, #180]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	604b      	str	r3, [r1, #4]
 80062fe:	e01a      	b.n	8006336 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006300:	4b2b      	ldr	r3, [pc, #172]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a2a      	ldr	r2, [pc, #168]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 8006306:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800630a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630c:	f7fc fa36 	bl	800277c <HAL_GetTick>
 8006310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006312:	e008      	b.n	8006326 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006314:	f7fc fa32 	bl	800277c <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b02      	cmp	r3, #2
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e20e      	b.n	8006744 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006326:	4b22      	ldr	r3, [pc, #136]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1f0      	bne.n	8006314 <HAL_RCC_OscConfig+0x1e0>
 8006332:	e000      	b.n	8006336 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006334:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0308 	and.w	r3, r3, #8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d041      	beq.n	80063c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d01c      	beq.n	8006384 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800634a:	4b19      	ldr	r3, [pc, #100]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 800634c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006350:	4a17      	ldr	r2, [pc, #92]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 8006352:	f043 0301 	orr.w	r3, r3, #1
 8006356:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800635a:	f7fc fa0f 	bl	800277c <HAL_GetTick>
 800635e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006360:	e008      	b.n	8006374 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006362:	f7fc fa0b 	bl	800277c <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e1e7      	b.n	8006744 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006374:	4b0e      	ldr	r3, [pc, #56]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 8006376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0ef      	beq.n	8006362 <HAL_RCC_OscConfig+0x22e>
 8006382:	e020      	b.n	80063c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006384:	4b0a      	ldr	r3, [pc, #40]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 8006386:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800638a:	4a09      	ldr	r2, [pc, #36]	@ (80063b0 <HAL_RCC_OscConfig+0x27c>)
 800638c:	f023 0301 	bic.w	r3, r3, #1
 8006390:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006394:	f7fc f9f2 	bl	800277c <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800639a:	e00d      	b.n	80063b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800639c:	f7fc f9ee 	bl	800277c <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d906      	bls.n	80063b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e1ca      	b.n	8006744 <HAL_RCC_OscConfig+0x610>
 80063ae:	bf00      	nop
 80063b0:	40021000 	.word	0x40021000
 80063b4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063b8:	4b8c      	ldr	r3, [pc, #560]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 80063ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1ea      	bne.n	800639c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 80a6 	beq.w	8006520 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063d4:	2300      	movs	r3, #0
 80063d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80063d8:	4b84      	ldr	r3, [pc, #528]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 80063da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <HAL_RCC_OscConfig+0x2b4>
 80063e4:	2301      	movs	r3, #1
 80063e6:	e000      	b.n	80063ea <HAL_RCC_OscConfig+0x2b6>
 80063e8:	2300      	movs	r3, #0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00d      	beq.n	800640a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063ee:	4b7f      	ldr	r3, [pc, #508]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 80063f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f2:	4a7e      	ldr	r2, [pc, #504]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 80063f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80063fa:	4b7c      	ldr	r3, [pc, #496]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 80063fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006406:	2301      	movs	r3, #1
 8006408:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800640a:	4b79      	ldr	r3, [pc, #484]	@ (80065f0 <HAL_RCC_OscConfig+0x4bc>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006412:	2b00      	cmp	r3, #0
 8006414:	d118      	bne.n	8006448 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006416:	4b76      	ldr	r3, [pc, #472]	@ (80065f0 <HAL_RCC_OscConfig+0x4bc>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a75      	ldr	r2, [pc, #468]	@ (80065f0 <HAL_RCC_OscConfig+0x4bc>)
 800641c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006422:	f7fc f9ab 	bl	800277c <HAL_GetTick>
 8006426:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006428:	e008      	b.n	800643c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800642a:	f7fc f9a7 	bl	800277c <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d901      	bls.n	800643c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e183      	b.n	8006744 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800643c:	4b6c      	ldr	r3, [pc, #432]	@ (80065f0 <HAL_RCC_OscConfig+0x4bc>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0f0      	beq.n	800642a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d108      	bne.n	8006462 <HAL_RCC_OscConfig+0x32e>
 8006450:	4b66      	ldr	r3, [pc, #408]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 8006452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006456:	4a65      	ldr	r2, [pc, #404]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 8006458:	f043 0301 	orr.w	r3, r3, #1
 800645c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006460:	e024      	b.n	80064ac <HAL_RCC_OscConfig+0x378>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	2b05      	cmp	r3, #5
 8006468:	d110      	bne.n	800648c <HAL_RCC_OscConfig+0x358>
 800646a:	4b60      	ldr	r3, [pc, #384]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 800646c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006470:	4a5e      	ldr	r2, [pc, #376]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 8006472:	f043 0304 	orr.w	r3, r3, #4
 8006476:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800647a:	4b5c      	ldr	r3, [pc, #368]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 800647c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006480:	4a5a      	ldr	r2, [pc, #360]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 8006482:	f043 0301 	orr.w	r3, r3, #1
 8006486:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800648a:	e00f      	b.n	80064ac <HAL_RCC_OscConfig+0x378>
 800648c:	4b57      	ldr	r3, [pc, #348]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 800648e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006492:	4a56      	ldr	r2, [pc, #344]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 8006494:	f023 0301 	bic.w	r3, r3, #1
 8006498:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800649c:	4b53      	ldr	r3, [pc, #332]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 800649e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a2:	4a52      	ldr	r2, [pc, #328]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 80064a4:	f023 0304 	bic.w	r3, r3, #4
 80064a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d016      	beq.n	80064e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b4:	f7fc f962 	bl	800277c <HAL_GetTick>
 80064b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064ba:	e00a      	b.n	80064d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064bc:	f7fc f95e 	bl	800277c <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e138      	b.n	8006744 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064d2:	4b46      	ldr	r3, [pc, #280]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 80064d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d0ed      	beq.n	80064bc <HAL_RCC_OscConfig+0x388>
 80064e0:	e015      	b.n	800650e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064e2:	f7fc f94b 	bl	800277c <HAL_GetTick>
 80064e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80064e8:	e00a      	b.n	8006500 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ea:	f7fc f947 	bl	800277c <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d901      	bls.n	8006500 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e121      	b.n	8006744 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006500:	4b3a      	ldr	r3, [pc, #232]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 8006502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1ed      	bne.n	80064ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800650e:	7ffb      	ldrb	r3, [r7, #31]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d105      	bne.n	8006520 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006514:	4b35      	ldr	r3, [pc, #212]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 8006516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006518:	4a34      	ldr	r2, [pc, #208]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 800651a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800651e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0320 	and.w	r3, r3, #32
 8006528:	2b00      	cmp	r3, #0
 800652a:	d03c      	beq.n	80065a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01c      	beq.n	800656e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006534:	4b2d      	ldr	r3, [pc, #180]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 8006536:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800653a:	4a2c      	ldr	r2, [pc, #176]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 800653c:	f043 0301 	orr.w	r3, r3, #1
 8006540:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006544:	f7fc f91a 	bl	800277c <HAL_GetTick>
 8006548:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800654c:	f7fc f916 	bl	800277c <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e0f2      	b.n	8006744 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800655e:	4b23      	ldr	r3, [pc, #140]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 8006560:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0ef      	beq.n	800654c <HAL_RCC_OscConfig+0x418>
 800656c:	e01b      	b.n	80065a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800656e:	4b1f      	ldr	r3, [pc, #124]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 8006570:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006574:	4a1d      	ldr	r2, [pc, #116]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 8006576:	f023 0301 	bic.w	r3, r3, #1
 800657a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800657e:	f7fc f8fd 	bl	800277c <HAL_GetTick>
 8006582:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006584:	e008      	b.n	8006598 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006586:	f7fc f8f9 	bl	800277c <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d901      	bls.n	8006598 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e0d5      	b.n	8006744 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006598:	4b14      	ldr	r3, [pc, #80]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 800659a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1ef      	bne.n	8006586 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 80c9 	beq.w	8006742 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065b0:	4b0e      	ldr	r3, [pc, #56]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f003 030c 	and.w	r3, r3, #12
 80065b8:	2b0c      	cmp	r3, #12
 80065ba:	f000 8083 	beq.w	80066c4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d15e      	bne.n	8006684 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065c6:	4b09      	ldr	r3, [pc, #36]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a08      	ldr	r2, [pc, #32]	@ (80065ec <HAL_RCC_OscConfig+0x4b8>)
 80065cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d2:	f7fc f8d3 	bl	800277c <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065d8:	e00c      	b.n	80065f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065da:	f7fc f8cf 	bl	800277c <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d905      	bls.n	80065f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e0ab      	b.n	8006744 <HAL_RCC_OscConfig+0x610>
 80065ec:	40021000 	.word	0x40021000
 80065f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065f4:	4b55      	ldr	r3, [pc, #340]	@ (800674c <HAL_RCC_OscConfig+0x618>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1ec      	bne.n	80065da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006600:	4b52      	ldr	r3, [pc, #328]	@ (800674c <HAL_RCC_OscConfig+0x618>)
 8006602:	68da      	ldr	r2, [r3, #12]
 8006604:	4b52      	ldr	r3, [pc, #328]	@ (8006750 <HAL_RCC_OscConfig+0x61c>)
 8006606:	4013      	ands	r3, r2
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	6a11      	ldr	r1, [r2, #32]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006610:	3a01      	subs	r2, #1
 8006612:	0112      	lsls	r2, r2, #4
 8006614:	4311      	orrs	r1, r2
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800661a:	0212      	lsls	r2, r2, #8
 800661c:	4311      	orrs	r1, r2
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006622:	0852      	lsrs	r2, r2, #1
 8006624:	3a01      	subs	r2, #1
 8006626:	0552      	lsls	r2, r2, #21
 8006628:	4311      	orrs	r1, r2
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800662e:	0852      	lsrs	r2, r2, #1
 8006630:	3a01      	subs	r2, #1
 8006632:	0652      	lsls	r2, r2, #25
 8006634:	4311      	orrs	r1, r2
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800663a:	06d2      	lsls	r2, r2, #27
 800663c:	430a      	orrs	r2, r1
 800663e:	4943      	ldr	r1, [pc, #268]	@ (800674c <HAL_RCC_OscConfig+0x618>)
 8006640:	4313      	orrs	r3, r2
 8006642:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006644:	4b41      	ldr	r3, [pc, #260]	@ (800674c <HAL_RCC_OscConfig+0x618>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a40      	ldr	r2, [pc, #256]	@ (800674c <HAL_RCC_OscConfig+0x618>)
 800664a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800664e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006650:	4b3e      	ldr	r3, [pc, #248]	@ (800674c <HAL_RCC_OscConfig+0x618>)
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	4a3d      	ldr	r2, [pc, #244]	@ (800674c <HAL_RCC_OscConfig+0x618>)
 8006656:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800665a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800665c:	f7fc f88e 	bl	800277c <HAL_GetTick>
 8006660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006662:	e008      	b.n	8006676 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006664:	f7fc f88a 	bl	800277c <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b02      	cmp	r3, #2
 8006670:	d901      	bls.n	8006676 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e066      	b.n	8006744 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006676:	4b35      	ldr	r3, [pc, #212]	@ (800674c <HAL_RCC_OscConfig+0x618>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0f0      	beq.n	8006664 <HAL_RCC_OscConfig+0x530>
 8006682:	e05e      	b.n	8006742 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006684:	4b31      	ldr	r3, [pc, #196]	@ (800674c <HAL_RCC_OscConfig+0x618>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a30      	ldr	r2, [pc, #192]	@ (800674c <HAL_RCC_OscConfig+0x618>)
 800668a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800668e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006690:	f7fc f874 	bl	800277c <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006698:	f7fc f870 	bl	800277c <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e04c      	b.n	8006744 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066aa:	4b28      	ldr	r3, [pc, #160]	@ (800674c <HAL_RCC_OscConfig+0x618>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1f0      	bne.n	8006698 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80066b6:	4b25      	ldr	r3, [pc, #148]	@ (800674c <HAL_RCC_OscConfig+0x618>)
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	4924      	ldr	r1, [pc, #144]	@ (800674c <HAL_RCC_OscConfig+0x618>)
 80066bc:	4b25      	ldr	r3, [pc, #148]	@ (8006754 <HAL_RCC_OscConfig+0x620>)
 80066be:	4013      	ands	r3, r2
 80066c0:	60cb      	str	r3, [r1, #12]
 80066c2:	e03e      	b.n	8006742 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d101      	bne.n	80066d0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e039      	b.n	8006744 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80066d0:	4b1e      	ldr	r3, [pc, #120]	@ (800674c <HAL_RCC_OscConfig+0x618>)
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f003 0203 	and.w	r2, r3, #3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d12c      	bne.n	800673e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ee:	3b01      	subs	r3, #1
 80066f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d123      	bne.n	800673e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006700:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006702:	429a      	cmp	r2, r3
 8006704:	d11b      	bne.n	800673e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006710:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006712:	429a      	cmp	r2, r3
 8006714:	d113      	bne.n	800673e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006720:	085b      	lsrs	r3, r3, #1
 8006722:	3b01      	subs	r3, #1
 8006724:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006726:	429a      	cmp	r2, r3
 8006728:	d109      	bne.n	800673e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006734:	085b      	lsrs	r3, r3, #1
 8006736:	3b01      	subs	r3, #1
 8006738:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800673a:	429a      	cmp	r2, r3
 800673c:	d001      	beq.n	8006742 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3720      	adds	r7, #32
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	40021000 	.word	0x40021000
 8006750:	019f800c 	.word	0x019f800c
 8006754:	feeefffc 	.word	0xfeeefffc

08006758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006762:	2300      	movs	r3, #0
 8006764:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e11e      	b.n	80069ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006770:	4b91      	ldr	r3, [pc, #580]	@ (80069b8 <HAL_RCC_ClockConfig+0x260>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 030f 	and.w	r3, r3, #15
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	429a      	cmp	r2, r3
 800677c:	d910      	bls.n	80067a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800677e:	4b8e      	ldr	r3, [pc, #568]	@ (80069b8 <HAL_RCC_ClockConfig+0x260>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f023 020f 	bic.w	r2, r3, #15
 8006786:	498c      	ldr	r1, [pc, #560]	@ (80069b8 <HAL_RCC_ClockConfig+0x260>)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	4313      	orrs	r3, r2
 800678c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800678e:	4b8a      	ldr	r3, [pc, #552]	@ (80069b8 <HAL_RCC_ClockConfig+0x260>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 030f 	and.w	r3, r3, #15
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	429a      	cmp	r2, r3
 800679a:	d001      	beq.n	80067a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e106      	b.n	80069ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d073      	beq.n	8006894 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d129      	bne.n	8006808 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067b4:	4b81      	ldr	r3, [pc, #516]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e0f4      	b.n	80069ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80067c4:	f000 f99e 	bl	8006b04 <RCC_GetSysClockFreqFromPLLSource>
 80067c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	4a7c      	ldr	r2, [pc, #496]	@ (80069c0 <HAL_RCC_ClockConfig+0x268>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d93f      	bls.n	8006852 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80067d2:	4b7a      	ldr	r3, [pc, #488]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d009      	beq.n	80067f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d033      	beq.n	8006852 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d12f      	bne.n	8006852 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80067f2:	4b72      	ldr	r3, [pc, #456]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067fa:	4a70      	ldr	r2, [pc, #448]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 80067fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006800:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006802:	2380      	movs	r3, #128	@ 0x80
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	e024      	b.n	8006852 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	2b02      	cmp	r3, #2
 800680e:	d107      	bne.n	8006820 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006810:	4b6a      	ldr	r3, [pc, #424]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d109      	bne.n	8006830 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e0c6      	b.n	80069ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006820:	4b66      	ldr	r3, [pc, #408]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e0be      	b.n	80069ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006830:	f000 f8ce 	bl	80069d0 <HAL_RCC_GetSysClockFreq>
 8006834:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	4a61      	ldr	r2, [pc, #388]	@ (80069c0 <HAL_RCC_ClockConfig+0x268>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d909      	bls.n	8006852 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800683e:	4b5f      	ldr	r3, [pc, #380]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006846:	4a5d      	ldr	r2, [pc, #372]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 8006848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800684c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800684e:	2380      	movs	r3, #128	@ 0x80
 8006850:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006852:	4b5a      	ldr	r3, [pc, #360]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f023 0203 	bic.w	r2, r3, #3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	4957      	ldr	r1, [pc, #348]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 8006860:	4313      	orrs	r3, r2
 8006862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006864:	f7fb ff8a 	bl	800277c <HAL_GetTick>
 8006868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800686a:	e00a      	b.n	8006882 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800686c:	f7fb ff86 	bl	800277c <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800687a:	4293      	cmp	r3, r2
 800687c:	d901      	bls.n	8006882 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e095      	b.n	80069ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006882:	4b4e      	ldr	r3, [pc, #312]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f003 020c 	and.w	r2, r3, #12
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	429a      	cmp	r2, r3
 8006892:	d1eb      	bne.n	800686c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d023      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d005      	beq.n	80068b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068ac:	4b43      	ldr	r3, [pc, #268]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	4a42      	ldr	r2, [pc, #264]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 80068b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80068b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d007      	beq.n	80068d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80068c4:	4b3d      	ldr	r3, [pc, #244]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80068cc:	4a3b      	ldr	r2, [pc, #236]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 80068ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80068d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068d4:	4b39      	ldr	r3, [pc, #228]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	4936      	ldr	r1, [pc, #216]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	608b      	str	r3, [r1, #8]
 80068e6:	e008      	b.n	80068fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	2b80      	cmp	r3, #128	@ 0x80
 80068ec:	d105      	bne.n	80068fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80068ee:	4b33      	ldr	r3, [pc, #204]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	4a32      	ldr	r2, [pc, #200]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 80068f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068fa:	4b2f      	ldr	r3, [pc, #188]	@ (80069b8 <HAL_RCC_ClockConfig+0x260>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 030f 	and.w	r3, r3, #15
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	429a      	cmp	r2, r3
 8006906:	d21d      	bcs.n	8006944 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006908:	4b2b      	ldr	r3, [pc, #172]	@ (80069b8 <HAL_RCC_ClockConfig+0x260>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f023 020f 	bic.w	r2, r3, #15
 8006910:	4929      	ldr	r1, [pc, #164]	@ (80069b8 <HAL_RCC_ClockConfig+0x260>)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	4313      	orrs	r3, r2
 8006916:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006918:	f7fb ff30 	bl	800277c <HAL_GetTick>
 800691c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800691e:	e00a      	b.n	8006936 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006920:	f7fb ff2c 	bl	800277c <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800692e:	4293      	cmp	r3, r2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e03b      	b.n	80069ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006936:	4b20      	ldr	r3, [pc, #128]	@ (80069b8 <HAL_RCC_ClockConfig+0x260>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d1ed      	bne.n	8006920 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0304 	and.w	r3, r3, #4
 800694c:	2b00      	cmp	r3, #0
 800694e:	d008      	beq.n	8006962 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006950:	4b1a      	ldr	r3, [pc, #104]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	4917      	ldr	r1, [pc, #92]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 800695e:	4313      	orrs	r3, r2
 8006960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0308 	and.w	r3, r3, #8
 800696a:	2b00      	cmp	r3, #0
 800696c:	d009      	beq.n	8006982 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800696e:	4b13      	ldr	r3, [pc, #76]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	490f      	ldr	r1, [pc, #60]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 800697e:	4313      	orrs	r3, r2
 8006980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006982:	f000 f825 	bl	80069d0 <HAL_RCC_GetSysClockFreq>
 8006986:	4602      	mov	r2, r0
 8006988:	4b0c      	ldr	r3, [pc, #48]	@ (80069bc <HAL_RCC_ClockConfig+0x264>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	091b      	lsrs	r3, r3, #4
 800698e:	f003 030f 	and.w	r3, r3, #15
 8006992:	490c      	ldr	r1, [pc, #48]	@ (80069c4 <HAL_RCC_ClockConfig+0x26c>)
 8006994:	5ccb      	ldrb	r3, [r1, r3]
 8006996:	f003 031f 	and.w	r3, r3, #31
 800699a:	fa22 f303 	lsr.w	r3, r2, r3
 800699e:	4a0a      	ldr	r2, [pc, #40]	@ (80069c8 <HAL_RCC_ClockConfig+0x270>)
 80069a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80069a2:	4b0a      	ldr	r3, [pc, #40]	@ (80069cc <HAL_RCC_ClockConfig+0x274>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fb fe9c 	bl	80026e4 <HAL_InitTick>
 80069ac:	4603      	mov	r3, r0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	40022000 	.word	0x40022000
 80069bc:	40021000 	.word	0x40021000
 80069c0:	04c4b400 	.word	0x04c4b400
 80069c4:	08013a9c 	.word	0x08013a9c
 80069c8:	20000000 	.word	0x20000000
 80069cc:	20000004 	.word	0x20000004

080069d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80069d6:	4b2c      	ldr	r3, [pc, #176]	@ (8006a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 030c 	and.w	r3, r3, #12
 80069de:	2b04      	cmp	r3, #4
 80069e0:	d102      	bne.n	80069e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80069e2:	4b2a      	ldr	r3, [pc, #168]	@ (8006a8c <HAL_RCC_GetSysClockFreq+0xbc>)
 80069e4:	613b      	str	r3, [r7, #16]
 80069e6:	e047      	b.n	8006a78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80069e8:	4b27      	ldr	r3, [pc, #156]	@ (8006a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 030c 	and.w	r3, r3, #12
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d102      	bne.n	80069fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80069f4:	4b26      	ldr	r3, [pc, #152]	@ (8006a90 <HAL_RCC_GetSysClockFreq+0xc0>)
 80069f6:	613b      	str	r3, [r7, #16]
 80069f8:	e03e      	b.n	8006a78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80069fa:	4b23      	ldr	r3, [pc, #140]	@ (8006a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 030c 	and.w	r3, r3, #12
 8006a02:	2b0c      	cmp	r3, #12
 8006a04:	d136      	bne.n	8006a74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a06:	4b20      	ldr	r3, [pc, #128]	@ (8006a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a10:	4b1d      	ldr	r3, [pc, #116]	@ (8006a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	091b      	lsrs	r3, r3, #4
 8006a16:	f003 030f 	and.w	r3, r3, #15
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d10c      	bne.n	8006a3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a24:	4a1a      	ldr	r2, [pc, #104]	@ (8006a90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a2c:	4a16      	ldr	r2, [pc, #88]	@ (8006a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a2e:	68d2      	ldr	r2, [r2, #12]
 8006a30:	0a12      	lsrs	r2, r2, #8
 8006a32:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006a36:	fb02 f303 	mul.w	r3, r2, r3
 8006a3a:	617b      	str	r3, [r7, #20]
      break;
 8006a3c:	e00c      	b.n	8006a58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a3e:	4a13      	ldr	r2, [pc, #76]	@ (8006a8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a46:	4a10      	ldr	r2, [pc, #64]	@ (8006a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a48:	68d2      	ldr	r2, [r2, #12]
 8006a4a:	0a12      	lsrs	r2, r2, #8
 8006a4c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006a50:	fb02 f303 	mul.w	r3, r2, r3
 8006a54:	617b      	str	r3, [r7, #20]
      break;
 8006a56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a58:	4b0b      	ldr	r3, [pc, #44]	@ (8006a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	0e5b      	lsrs	r3, r3, #25
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	3301      	adds	r3, #1
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a70:	613b      	str	r3, [r7, #16]
 8006a72:	e001      	b.n	8006a78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006a78:	693b      	ldr	r3, [r7, #16]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40021000 	.word	0x40021000
 8006a8c:	00f42400 	.word	0x00f42400
 8006a90:	016e3600 	.word	0x016e3600

08006a94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a94:	b480      	push	{r7}
 8006a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a98:	4b03      	ldr	r3, [pc, #12]	@ (8006aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	20000000 	.word	0x20000000

08006aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006ab0:	f7ff fff0 	bl	8006a94 <HAL_RCC_GetHCLKFreq>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	4b06      	ldr	r3, [pc, #24]	@ (8006ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	0a1b      	lsrs	r3, r3, #8
 8006abc:	f003 0307 	and.w	r3, r3, #7
 8006ac0:	4904      	ldr	r1, [pc, #16]	@ (8006ad4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ac2:	5ccb      	ldrb	r3, [r1, r3]
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	40021000 	.word	0x40021000
 8006ad4:	08013aac 	.word	0x08013aac

08006ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006adc:	f7ff ffda 	bl	8006a94 <HAL_RCC_GetHCLKFreq>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	4b06      	ldr	r3, [pc, #24]	@ (8006afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	0adb      	lsrs	r3, r3, #11
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	4904      	ldr	r1, [pc, #16]	@ (8006b00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006aee:	5ccb      	ldrb	r3, [r1, r3]
 8006af0:	f003 031f 	and.w	r3, r3, #31
 8006af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	40021000 	.word	0x40021000
 8006b00:	08013aac 	.word	0x08013aac

08006b04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8006b84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f003 0303 	and.w	r3, r3, #3
 8006b12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b14:	4b1b      	ldr	r3, [pc, #108]	@ (8006b84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	091b      	lsrs	r3, r3, #4
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	3301      	adds	r3, #1
 8006b20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d10c      	bne.n	8006b42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b28:	4a17      	ldr	r2, [pc, #92]	@ (8006b88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b30:	4a14      	ldr	r2, [pc, #80]	@ (8006b84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b32:	68d2      	ldr	r2, [r2, #12]
 8006b34:	0a12      	lsrs	r2, r2, #8
 8006b36:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006b3a:	fb02 f303 	mul.w	r3, r2, r3
 8006b3e:	617b      	str	r3, [r7, #20]
    break;
 8006b40:	e00c      	b.n	8006b5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b42:	4a12      	ldr	r2, [pc, #72]	@ (8006b8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8006b84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b4c:	68d2      	ldr	r2, [r2, #12]
 8006b4e:	0a12      	lsrs	r2, r2, #8
 8006b50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006b54:	fb02 f303 	mul.w	r3, r2, r3
 8006b58:	617b      	str	r3, [r7, #20]
    break;
 8006b5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b5c:	4b09      	ldr	r3, [pc, #36]	@ (8006b84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	0e5b      	lsrs	r3, r3, #25
 8006b62:	f003 0303 	and.w	r3, r3, #3
 8006b66:	3301      	adds	r3, #1
 8006b68:	005b      	lsls	r3, r3, #1
 8006b6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006b76:	687b      	ldr	r3, [r7, #4]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	371c      	adds	r7, #28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	40021000 	.word	0x40021000
 8006b88:	016e3600 	.word	0x016e3600
 8006b8c:	00f42400 	.word	0x00f42400

08006b90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b98:	2300      	movs	r3, #0
 8006b9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 8098 	beq.w	8006cde <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bb2:	4b43      	ldr	r3, [pc, #268]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10d      	bne.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bbe:	4b40      	ldr	r3, [pc, #256]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bc2:	4a3f      	ldr	r2, [pc, #252]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bca:	4b3d      	ldr	r3, [pc, #244]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bd2:	60bb      	str	r3, [r7, #8]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bda:	4b3a      	ldr	r3, [pc, #232]	@ (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a39      	ldr	r2, [pc, #228]	@ (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006be4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006be6:	f7fb fdc9 	bl	800277c <HAL_GetTick>
 8006bea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bec:	e009      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bee:	f7fb fdc5 	bl	800277c <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d902      	bls.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	74fb      	strb	r3, [r7, #19]
        break;
 8006c00:	e005      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c02:	4b30      	ldr	r3, [pc, #192]	@ (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0ef      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006c0e:	7cfb      	ldrb	r3, [r7, #19]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d159      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c14:	4b2a      	ldr	r3, [pc, #168]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c1e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d01e      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d019      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c30:	4b23      	ldr	r3, [pc, #140]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c3c:	4b20      	ldr	r3, [pc, #128]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c42:	4a1f      	ldr	r2, [pc, #124]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c52:	4a1b      	ldr	r2, [pc, #108]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c5c:	4a18      	ldr	r2, [pc, #96]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d016      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c6e:	f7fb fd85 	bl	800277c <HAL_GetTick>
 8006c72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c74:	e00b      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c76:	f7fb fd81 	bl	800277c <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d902      	bls.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	74fb      	strb	r3, [r7, #19]
            break;
 8006c8c:	e006      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0ec      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006c9c:	7cfb      	ldrb	r3, [r7, #19]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10b      	bne.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ca2:	4b07      	ldr	r3, [pc, #28]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ca8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb0:	4903      	ldr	r1, [pc, #12]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006cb8:	e008      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006cba:	7cfb      	ldrb	r3, [r7, #19]
 8006cbc:	74bb      	strb	r3, [r7, #18]
 8006cbe:	e005      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc8:	7cfb      	ldrb	r3, [r7, #19]
 8006cca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ccc:	7c7b      	ldrb	r3, [r7, #17]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d105      	bne.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cd2:	4ba6      	ldr	r3, [pc, #664]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cd6:	4aa5      	ldr	r2, [pc, #660]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cdc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00a      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006cea:	4ba0      	ldr	r3, [pc, #640]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cf0:	f023 0203 	bic.w	r2, r3, #3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	499c      	ldr	r1, [pc, #624]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00a      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d0c:	4b97      	ldr	r3, [pc, #604]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d12:	f023 020c 	bic.w	r2, r3, #12
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	4994      	ldr	r1, [pc, #592]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0304 	and.w	r3, r3, #4
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d2e:	4b8f      	ldr	r3, [pc, #572]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d34:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	498b      	ldr	r1, [pc, #556]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00a      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006d50:	4b86      	ldr	r3, [pc, #536]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	4983      	ldr	r1, [pc, #524]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00a      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d72:	4b7e      	ldr	r3, [pc, #504]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d78:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	497a      	ldr	r1, [pc, #488]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00a      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d94:	4b75      	ldr	r3, [pc, #468]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d9a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	4972      	ldr	r1, [pc, #456]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006db6:	4b6d      	ldr	r3, [pc, #436]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dbc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	4969      	ldr	r1, [pc, #420]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00a      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006dd8:	4b64      	ldr	r3, [pc, #400]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dde:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	4961      	ldr	r1, [pc, #388]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006dfa:	4b5c      	ldr	r3, [pc, #368]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e08:	4958      	ldr	r1, [pc, #352]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d015      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e1c:	4b53      	ldr	r3, [pc, #332]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e2a:	4950      	ldr	r1, [pc, #320]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e3a:	d105      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	4a4a      	ldr	r2, [pc, #296]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d015      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006e54:	4b45      	ldr	r3, [pc, #276]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e5a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e62:	4942      	ldr	r1, [pc, #264]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e72:	d105      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e74:	4b3d      	ldr	r3, [pc, #244]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	4a3c      	ldr	r2, [pc, #240]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e7e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d015      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e8c:	4b37      	ldr	r3, [pc, #220]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e92:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e9a:	4934      	ldr	r1, [pc, #208]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ea6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006eaa:	d105      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006eac:	4b2f      	ldr	r3, [pc, #188]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	4a2e      	ldr	r2, [pc, #184]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eb6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d015      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ec4:	4b29      	ldr	r3, [pc, #164]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed2:	4926      	ldr	r1, [pc, #152]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ede:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ee2:	d105      	bne.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ee4:	4b21      	ldr	r3, [pc, #132]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	4a20      	ldr	r2, [pc, #128]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d015      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006efc:	4b1b      	ldr	r3, [pc, #108]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f0a:	4918      	ldr	r1, [pc, #96]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f1a:	d105      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f1c:	4b13      	ldr	r3, [pc, #76]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	4a12      	ldr	r2, [pc, #72]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d015      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006f34:	4b0d      	ldr	r3, [pc, #52]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f3a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f42:	490a      	ldr	r1, [pc, #40]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f52:	d105      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006f54:	4b05      	ldr	r3, [pc, #20]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	4a04      	ldr	r2, [pc, #16]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f5e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006f60:	7cbb      	ldrb	r3, [r7, #18]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	40021000 	.word	0x40021000

08006f70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e09d      	b.n	80070be <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d108      	bne.n	8006f9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f92:	d009      	beq.n	8006fa8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	61da      	str	r2, [r3, #28]
 8006f9a:	e005      	b.n	8006fa8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d106      	bne.n	8006fc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7fa fcf2 	bl	80019ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fde:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006fe8:	d902      	bls.n	8006ff0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	e002      	b.n	8006ff6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ff0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ff4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006ffe:	d007      	beq.n	8007010 <HAL_SPI_Init+0xa0>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007008:	d002      	beq.n	8007010 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007020:	431a      	orrs	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	431a      	orrs	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	431a      	orrs	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800703e:	431a      	orrs	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007048:	431a      	orrs	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007052:	ea42 0103 	orr.w	r1, r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	0c1b      	lsrs	r3, r3, #16
 800706c:	f003 0204 	and.w	r2, r3, #4
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007074:	f003 0310 	and.w	r3, r3, #16
 8007078:	431a      	orrs	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800707e:	f003 0308 	and.w	r3, r3, #8
 8007082:	431a      	orrs	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800708c:	ea42 0103 	orr.w	r1, r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	69da      	ldr	r2, [r3, #28]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b08a      	sub	sp, #40	@ 0x28
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	60f8      	str	r0, [r7, #12]
 80070ce:	60b9      	str	r1, [r7, #8]
 80070d0:	607a      	str	r2, [r7, #4]
 80070d2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80070d4:	2301      	movs	r3, #1
 80070d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d101      	bne.n	80070ec <HAL_SPI_TransmitReceive+0x26>
 80070e8:	2302      	movs	r3, #2
 80070ea:	e20a      	b.n	8007502 <HAL_SPI_TransmitReceive+0x43c>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070f4:	f7fb fb42 	bl	800277c <HAL_GetTick>
 80070f8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007100:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007108:	887b      	ldrh	r3, [r7, #2]
 800710a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800710c:	887b      	ldrh	r3, [r7, #2]
 800710e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007110:	7efb      	ldrb	r3, [r7, #27]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d00e      	beq.n	8007134 <HAL_SPI_TransmitReceive+0x6e>
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800711c:	d106      	bne.n	800712c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d102      	bne.n	800712c <HAL_SPI_TransmitReceive+0x66>
 8007126:	7efb      	ldrb	r3, [r7, #27]
 8007128:	2b04      	cmp	r3, #4
 800712a:	d003      	beq.n	8007134 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800712c:	2302      	movs	r3, #2
 800712e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007132:	e1e0      	b.n	80074f6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d005      	beq.n	8007146 <HAL_SPI_TransmitReceive+0x80>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <HAL_SPI_TransmitReceive+0x80>
 8007140:	887b      	ldrh	r3, [r7, #2]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d103      	bne.n	800714e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800714c:	e1d3      	b.n	80074f6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b04      	cmp	r3, #4
 8007158:	d003      	beq.n	8007162 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2205      	movs	r2, #5
 800715e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	887a      	ldrh	r2, [r7, #2]
 8007172:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	887a      	ldrh	r2, [r7, #2]
 800717a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	887a      	ldrh	r2, [r7, #2]
 8007188:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	887a      	ldrh	r2, [r7, #2]
 800718e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80071a4:	d802      	bhi.n	80071ac <HAL_SPI_TransmitReceive+0xe6>
 80071a6:	8a3b      	ldrh	r3, [r7, #16]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d908      	bls.n	80071be <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80071ba:	605a      	str	r2, [r3, #4]
 80071bc:	e007      	b.n	80071ce <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80071cc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d8:	2b40      	cmp	r3, #64	@ 0x40
 80071da:	d007      	beq.n	80071ec <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80071f4:	f240 8081 	bls.w	80072fa <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <HAL_SPI_TransmitReceive+0x140>
 8007200:	8a7b      	ldrh	r3, [r7, #18]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d16d      	bne.n	80072e2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800720a:	881a      	ldrh	r2, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007216:	1c9a      	adds	r2, r3, #2
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007220:	b29b      	uxth	r3, r3
 8007222:	3b01      	subs	r3, #1
 8007224:	b29a      	uxth	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800722a:	e05a      	b.n	80072e2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	2b02      	cmp	r3, #2
 8007238:	d11b      	bne.n	8007272 <HAL_SPI_TransmitReceive+0x1ac>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800723e:	b29b      	uxth	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	d016      	beq.n	8007272 <HAL_SPI_TransmitReceive+0x1ac>
 8007244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007246:	2b01      	cmp	r3, #1
 8007248:	d113      	bne.n	8007272 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724e:	881a      	ldrh	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725a:	1c9a      	adds	r2, r3, #2
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007264:	b29b      	uxth	r3, r3
 8007266:	3b01      	subs	r3, #1
 8007268:	b29a      	uxth	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b01      	cmp	r3, #1
 800727e:	d11c      	bne.n	80072ba <HAL_SPI_TransmitReceive+0x1f4>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007286:	b29b      	uxth	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d016      	beq.n	80072ba <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007296:	b292      	uxth	r2, r2
 8007298:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729e:	1c9a      	adds	r2, r3, #2
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	3b01      	subs	r3, #1
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072b6:	2301      	movs	r3, #1
 80072b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072ba:	f7fb fa5f 	bl	800277c <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d80b      	bhi.n	80072e2 <HAL_SPI_TransmitReceive+0x21c>
 80072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d0:	d007      	beq.n	80072e2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80072e0:	e109      	b.n	80074f6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d19f      	bne.n	800722c <HAL_SPI_TransmitReceive+0x166>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d199      	bne.n	800722c <HAL_SPI_TransmitReceive+0x166>
 80072f8:	e0e3      	b.n	80074c2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_SPI_TransmitReceive+0x244>
 8007302:	8a7b      	ldrh	r3, [r7, #18]
 8007304:	2b01      	cmp	r3, #1
 8007306:	f040 80cf 	bne.w	80074a8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800730e:	b29b      	uxth	r3, r3
 8007310:	2b01      	cmp	r3, #1
 8007312:	d912      	bls.n	800733a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007318:	881a      	ldrh	r2, [r3, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007324:	1c9a      	adds	r2, r3, #2
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800732e:	b29b      	uxth	r3, r3
 8007330:	3b02      	subs	r3, #2
 8007332:	b29a      	uxth	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007338:	e0b6      	b.n	80074a8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	330c      	adds	r3, #12
 8007344:	7812      	ldrb	r2, [r2, #0]
 8007346:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007356:	b29b      	uxth	r3, r3
 8007358:	3b01      	subs	r3, #1
 800735a:	b29a      	uxth	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007360:	e0a2      	b.n	80074a8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	2b02      	cmp	r3, #2
 800736e:	d134      	bne.n	80073da <HAL_SPI_TransmitReceive+0x314>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007374:	b29b      	uxth	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d02f      	beq.n	80073da <HAL_SPI_TransmitReceive+0x314>
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	2b01      	cmp	r3, #1
 800737e:	d12c      	bne.n	80073da <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007384:	b29b      	uxth	r3, r3
 8007386:	2b01      	cmp	r3, #1
 8007388:	d912      	bls.n	80073b0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738e:	881a      	ldrh	r2, [r3, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739a:	1c9a      	adds	r2, r3, #2
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	3b02      	subs	r3, #2
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80073ae:	e012      	b.n	80073d6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	330c      	adds	r3, #12
 80073ba:	7812      	ldrb	r2, [r2, #0]
 80073bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	3b01      	subs	r3, #1
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d148      	bne.n	800747a <HAL_SPI_TransmitReceive+0x3b4>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d042      	beq.n	800747a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d923      	bls.n	8007448 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740a:	b292      	uxth	r2, r2
 800740c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007412:	1c9a      	adds	r2, r3, #2
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800741e:	b29b      	uxth	r3, r3
 8007420:	3b02      	subs	r3, #2
 8007422:	b29a      	uxth	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b01      	cmp	r3, #1
 8007434:	d81f      	bhi.n	8007476 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007444:	605a      	str	r2, [r3, #4]
 8007446:	e016      	b.n	8007476 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f103 020c 	add.w	r2, r3, #12
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007454:	7812      	ldrb	r2, [r2, #0]
 8007456:	b2d2      	uxtb	r2, r2
 8007458:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800746a:	b29b      	uxth	r3, r3
 800746c:	3b01      	subs	r3, #1
 800746e:	b29a      	uxth	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007476:	2301      	movs	r3, #1
 8007478:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800747a:	f7fb f97f 	bl	800277c <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007486:	429a      	cmp	r2, r3
 8007488:	d803      	bhi.n	8007492 <HAL_SPI_TransmitReceive+0x3cc>
 800748a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007490:	d102      	bne.n	8007498 <HAL_SPI_TransmitReceive+0x3d2>
 8007492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007494:	2b00      	cmp	r3, #0
 8007496:	d107      	bne.n	80074a8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80074a6:	e026      	b.n	80074f6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f47f af57 	bne.w	8007362 <HAL_SPI_TransmitReceive+0x29c>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f47f af50 	bne.w	8007362 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074c2:	69fa      	ldr	r2, [r7, #28]
 80074c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 f94c 	bl	8007764 <SPI_EndRxTxTransaction>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d005      	beq.n	80074de <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2220      	movs	r2, #32
 80074dc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074ec:	e003      	b.n	80074f6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80074fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007502:	4618      	mov	r0, r3
 8007504:	3728      	adds	r7, #40	@ 0x28
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800750a:	b480      	push	{r7}
 800750c:	b083      	sub	sp, #12
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007518:	b2db      	uxtb	r3, r3
}
 800751a:	4618      	mov	r0, r3
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
	...

08007528 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b088      	sub	sp, #32
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	603b      	str	r3, [r7, #0]
 8007534:	4613      	mov	r3, r2
 8007536:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007538:	f7fb f920 	bl	800277c <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007540:	1a9b      	subs	r3, r3, r2
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	4413      	add	r3, r2
 8007546:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007548:	f7fb f918 	bl	800277c <HAL_GetTick>
 800754c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800754e:	4b39      	ldr	r3, [pc, #228]	@ (8007634 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	015b      	lsls	r3, r3, #5
 8007554:	0d1b      	lsrs	r3, r3, #20
 8007556:	69fa      	ldr	r2, [r7, #28]
 8007558:	fb02 f303 	mul.w	r3, r2, r3
 800755c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800755e:	e054      	b.n	800760a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007566:	d050      	beq.n	800760a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007568:	f7fb f908 	bl	800277c <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	69fa      	ldr	r2, [r7, #28]
 8007574:	429a      	cmp	r2, r3
 8007576:	d902      	bls.n	800757e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d13d      	bne.n	80075fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800758c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007596:	d111      	bne.n	80075bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075a0:	d004      	beq.n	80075ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075aa:	d107      	bne.n	80075bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075c4:	d10f      	bne.n	80075e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e017      	b.n	800762a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007600:	2300      	movs	r3, #0
 8007602:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	3b01      	subs	r3, #1
 8007608:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	689a      	ldr	r2, [r3, #8]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	4013      	ands	r3, r2
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	429a      	cmp	r2, r3
 8007618:	bf0c      	ite	eq
 800761a:	2301      	moveq	r3, #1
 800761c:	2300      	movne	r3, #0
 800761e:	b2db      	uxtb	r3, r3
 8007620:	461a      	mov	r2, r3
 8007622:	79fb      	ldrb	r3, [r7, #7]
 8007624:	429a      	cmp	r2, r3
 8007626:	d19b      	bne.n	8007560 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3720      	adds	r7, #32
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	20000000 	.word	0x20000000

08007638 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b08a      	sub	sp, #40	@ 0x28
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
 8007644:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800764a:	f7fb f897 	bl	800277c <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007652:	1a9b      	subs	r3, r3, r2
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	4413      	add	r3, r2
 8007658:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800765a:	f7fb f88f 	bl	800277c <HAL_GetTick>
 800765e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	330c      	adds	r3, #12
 8007666:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007668:	4b3d      	ldr	r3, [pc, #244]	@ (8007760 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	4613      	mov	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	00da      	lsls	r2, r3, #3
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	0d1b      	lsrs	r3, r3, #20
 8007678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800767a:	fb02 f303 	mul.w	r3, r2, r3
 800767e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007680:	e060      	b.n	8007744 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007688:	d107      	bne.n	800769a <SPI_WaitFifoStateUntilTimeout+0x62>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d104      	bne.n	800769a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007698:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a0:	d050      	beq.n	8007744 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076a2:	f7fb f86b 	bl	800277c <HAL_GetTick>
 80076a6:	4602      	mov	r2, r0
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d902      	bls.n	80076b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80076b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d13d      	bne.n	8007734 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80076c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076d0:	d111      	bne.n	80076f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076da:	d004      	beq.n	80076e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076e4:	d107      	bne.n	80076f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076fe:	d10f      	bne.n	8007720 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800771e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e010      	b.n	8007756 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	3b01      	subs	r3, #1
 8007742:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689a      	ldr	r2, [r3, #8]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	4013      	ands	r3, r2
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	429a      	cmp	r2, r3
 8007752:	d196      	bne.n	8007682 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3728      	adds	r7, #40	@ 0x28
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20000000 	.word	0x20000000

08007764 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af02      	add	r7, sp, #8
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2200      	movs	r2, #0
 8007778:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f7ff ff5b 	bl	8007638 <SPI_WaitFifoStateUntilTimeout>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d007      	beq.n	8007798 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800778c:	f043 0220 	orr.w	r2, r3, #32
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e027      	b.n	80077e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2200      	movs	r2, #0
 80077a0:	2180      	movs	r1, #128	@ 0x80
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f7ff fec0 	bl	8007528 <SPI_WaitFlagStateUntilTimeout>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d007      	beq.n	80077be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077b2:	f043 0220 	orr.w	r2, r3, #32
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e014      	b.n	80077e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f7ff ff34 	bl	8007638 <SPI_WaitFifoStateUntilTimeout>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d007      	beq.n	80077e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077da:	f043 0220 	orr.w	r2, r3, #32
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e000      	b.n	80077e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e049      	b.n	8007896 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d106      	bne.n	800781c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7fa fc88 	bl	800212c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3304      	adds	r3, #4
 800782c:	4619      	mov	r1, r3
 800782e:	4610      	mov	r0, r2
 8007830:	f000 fc9e 	bl	8008170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d001      	beq.n	80078b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e042      	b.n	800793e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2202      	movs	r2, #2
 80078bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a21      	ldr	r2, [pc, #132]	@ (800794c <HAL_TIM_Base_Start+0xac>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d018      	beq.n	80078fc <HAL_TIM_Base_Start+0x5c>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078d2:	d013      	beq.n	80078fc <HAL_TIM_Base_Start+0x5c>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007950 <HAL_TIM_Base_Start+0xb0>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d00e      	beq.n	80078fc <HAL_TIM_Base_Start+0x5c>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a1c      	ldr	r2, [pc, #112]	@ (8007954 <HAL_TIM_Base_Start+0xb4>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d009      	beq.n	80078fc <HAL_TIM_Base_Start+0x5c>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a1a      	ldr	r2, [pc, #104]	@ (8007958 <HAL_TIM_Base_Start+0xb8>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d004      	beq.n	80078fc <HAL_TIM_Base_Start+0x5c>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a19      	ldr	r2, [pc, #100]	@ (800795c <HAL_TIM_Base_Start+0xbc>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d115      	bne.n	8007928 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	4b17      	ldr	r3, [pc, #92]	@ (8007960 <HAL_TIM_Base_Start+0xc0>)
 8007904:	4013      	ands	r3, r2
 8007906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b06      	cmp	r3, #6
 800790c:	d015      	beq.n	800793a <HAL_TIM_Base_Start+0x9a>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007914:	d011      	beq.n	800793a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f042 0201 	orr.w	r2, r2, #1
 8007924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007926:	e008      	b.n	800793a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f042 0201 	orr.w	r2, r2, #1
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	e000      	b.n	800793c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800793a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	40012c00 	.word	0x40012c00
 8007950:	40000400 	.word	0x40000400
 8007954:	40000800 	.word	0x40000800
 8007958:	40013400 	.word	0x40013400
 800795c:	40014000 	.word	0x40014000
 8007960:	00010007 	.word	0x00010007

08007964 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e049      	b.n	8007a0a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d106      	bne.n	8007990 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f841 	bl	8007a12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	3304      	adds	r3, #4
 80079a0:	4619      	mov	r1, r3
 80079a2:	4610      	mov	r0, r2
 80079a4:	f000 fbe4 	bl	8008170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b083      	sub	sp, #12
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a1a:	bf00      	nop
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
	...

08007a28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d109      	bne.n	8007a4c <HAL_TIM_PWM_Start+0x24>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	bf14      	ite	ne
 8007a44:	2301      	movne	r3, #1
 8007a46:	2300      	moveq	r3, #0
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	e03c      	b.n	8007ac6 <HAL_TIM_PWM_Start+0x9e>
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	d109      	bne.n	8007a66 <HAL_TIM_PWM_Start+0x3e>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	bf14      	ite	ne
 8007a5e:	2301      	movne	r3, #1
 8007a60:	2300      	moveq	r3, #0
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	e02f      	b.n	8007ac6 <HAL_TIM_PWM_Start+0x9e>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	2b08      	cmp	r3, #8
 8007a6a:	d109      	bne.n	8007a80 <HAL_TIM_PWM_Start+0x58>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	bf14      	ite	ne
 8007a78:	2301      	movne	r3, #1
 8007a7a:	2300      	moveq	r3, #0
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	e022      	b.n	8007ac6 <HAL_TIM_PWM_Start+0x9e>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2b0c      	cmp	r3, #12
 8007a84:	d109      	bne.n	8007a9a <HAL_TIM_PWM_Start+0x72>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	bf14      	ite	ne
 8007a92:	2301      	movne	r3, #1
 8007a94:	2300      	moveq	r3, #0
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	e015      	b.n	8007ac6 <HAL_TIM_PWM_Start+0x9e>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b10      	cmp	r3, #16
 8007a9e:	d109      	bne.n	8007ab4 <HAL_TIM_PWM_Start+0x8c>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	bf14      	ite	ne
 8007aac:	2301      	movne	r3, #1
 8007aae:	2300      	moveq	r3, #0
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	e008      	b.n	8007ac6 <HAL_TIM_PWM_Start+0x9e>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	bf14      	ite	ne
 8007ac0:	2301      	movne	r3, #1
 8007ac2:	2300      	moveq	r3, #0
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e097      	b.n	8007bfe <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d104      	bne.n	8007ade <HAL_TIM_PWM_Start+0xb6>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007adc:	e023      	b.n	8007b26 <HAL_TIM_PWM_Start+0xfe>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b04      	cmp	r3, #4
 8007ae2:	d104      	bne.n	8007aee <HAL_TIM_PWM_Start+0xc6>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007aec:	e01b      	b.n	8007b26 <HAL_TIM_PWM_Start+0xfe>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d104      	bne.n	8007afe <HAL_TIM_PWM_Start+0xd6>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007afc:	e013      	b.n	8007b26 <HAL_TIM_PWM_Start+0xfe>
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	2b0c      	cmp	r3, #12
 8007b02:	d104      	bne.n	8007b0e <HAL_TIM_PWM_Start+0xe6>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b0c:	e00b      	b.n	8007b26 <HAL_TIM_PWM_Start+0xfe>
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b10      	cmp	r3, #16
 8007b12:	d104      	bne.n	8007b1e <HAL_TIM_PWM_Start+0xf6>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b1c:	e003      	b.n	8007b26 <HAL_TIM_PWM_Start+0xfe>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2202      	movs	r2, #2
 8007b22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 ff4c 	bl	80089cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a33      	ldr	r2, [pc, #204]	@ (8007c08 <HAL_TIM_PWM_Start+0x1e0>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d013      	beq.n	8007b66 <HAL_TIM_PWM_Start+0x13e>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a32      	ldr	r2, [pc, #200]	@ (8007c0c <HAL_TIM_PWM_Start+0x1e4>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d00e      	beq.n	8007b66 <HAL_TIM_PWM_Start+0x13e>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a30      	ldr	r2, [pc, #192]	@ (8007c10 <HAL_TIM_PWM_Start+0x1e8>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d009      	beq.n	8007b66 <HAL_TIM_PWM_Start+0x13e>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a2f      	ldr	r2, [pc, #188]	@ (8007c14 <HAL_TIM_PWM_Start+0x1ec>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d004      	beq.n	8007b66 <HAL_TIM_PWM_Start+0x13e>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a2d      	ldr	r2, [pc, #180]	@ (8007c18 <HAL_TIM_PWM_Start+0x1f0>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d101      	bne.n	8007b6a <HAL_TIM_PWM_Start+0x142>
 8007b66:	2301      	movs	r3, #1
 8007b68:	e000      	b.n	8007b6c <HAL_TIM_PWM_Start+0x144>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d007      	beq.n	8007b80 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b7e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a20      	ldr	r2, [pc, #128]	@ (8007c08 <HAL_TIM_PWM_Start+0x1e0>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d018      	beq.n	8007bbc <HAL_TIM_PWM_Start+0x194>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b92:	d013      	beq.n	8007bbc <HAL_TIM_PWM_Start+0x194>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a20      	ldr	r2, [pc, #128]	@ (8007c1c <HAL_TIM_PWM_Start+0x1f4>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d00e      	beq.n	8007bbc <HAL_TIM_PWM_Start+0x194>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8007c20 <HAL_TIM_PWM_Start+0x1f8>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d009      	beq.n	8007bbc <HAL_TIM_PWM_Start+0x194>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a17      	ldr	r2, [pc, #92]	@ (8007c0c <HAL_TIM_PWM_Start+0x1e4>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d004      	beq.n	8007bbc <HAL_TIM_PWM_Start+0x194>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a16      	ldr	r2, [pc, #88]	@ (8007c10 <HAL_TIM_PWM_Start+0x1e8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d115      	bne.n	8007be8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	689a      	ldr	r2, [r3, #8]
 8007bc2:	4b18      	ldr	r3, [pc, #96]	@ (8007c24 <HAL_TIM_PWM_Start+0x1fc>)
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2b06      	cmp	r3, #6
 8007bcc:	d015      	beq.n	8007bfa <HAL_TIM_PWM_Start+0x1d2>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bd4:	d011      	beq.n	8007bfa <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f042 0201 	orr.w	r2, r2, #1
 8007be4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be6:	e008      	b.n	8007bfa <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f042 0201 	orr.w	r2, r2, #1
 8007bf6:	601a      	str	r2, [r3, #0]
 8007bf8:	e000      	b.n	8007bfc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	40012c00 	.word	0x40012c00
 8007c0c:	40013400 	.word	0x40013400
 8007c10:	40014000 	.word	0x40014000
 8007c14:	40014400 	.word	0x40014400
 8007c18:	40014800 	.word	0x40014800
 8007c1c:	40000400 	.word	0x40000400
 8007c20:	40000800 	.word	0x40000800
 8007c24:	00010007 	.word	0x00010007

08007c28 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2200      	movs	r2, #0
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 fec6 	bl	80089cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a3e      	ldr	r2, [pc, #248]	@ (8007d40 <HAL_TIM_PWM_Stop+0x118>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d013      	beq.n	8007c72 <HAL_TIM_PWM_Stop+0x4a>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a3d      	ldr	r2, [pc, #244]	@ (8007d44 <HAL_TIM_PWM_Stop+0x11c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d00e      	beq.n	8007c72 <HAL_TIM_PWM_Stop+0x4a>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a3b      	ldr	r2, [pc, #236]	@ (8007d48 <HAL_TIM_PWM_Stop+0x120>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d009      	beq.n	8007c72 <HAL_TIM_PWM_Stop+0x4a>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a3a      	ldr	r2, [pc, #232]	@ (8007d4c <HAL_TIM_PWM_Stop+0x124>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d004      	beq.n	8007c72 <HAL_TIM_PWM_Stop+0x4a>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a38      	ldr	r2, [pc, #224]	@ (8007d50 <HAL_TIM_PWM_Stop+0x128>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d101      	bne.n	8007c76 <HAL_TIM_PWM_Stop+0x4e>
 8007c72:	2301      	movs	r3, #1
 8007c74:	e000      	b.n	8007c78 <HAL_TIM_PWM_Stop+0x50>
 8007c76:	2300      	movs	r3, #0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d017      	beq.n	8007cac <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6a1a      	ldr	r2, [r3, #32]
 8007c82:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007c86:	4013      	ands	r3, r2
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10f      	bne.n	8007cac <HAL_TIM_PWM_Stop+0x84>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6a1a      	ldr	r2, [r3, #32]
 8007c92:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007c96:	4013      	ands	r3, r2
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d107      	bne.n	8007cac <HAL_TIM_PWM_Stop+0x84>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007caa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6a1a      	ldr	r2, [r3, #32]
 8007cb2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10f      	bne.n	8007cdc <HAL_TIM_PWM_Stop+0xb4>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6a1a      	ldr	r2, [r3, #32]
 8007cc2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d107      	bne.n	8007cdc <HAL_TIM_PWM_Stop+0xb4>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 0201 	bic.w	r2, r2, #1
 8007cda:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d104      	bne.n	8007cec <HAL_TIM_PWM_Stop+0xc4>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cea:	e023      	b.n	8007d34 <HAL_TIM_PWM_Stop+0x10c>
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2b04      	cmp	r3, #4
 8007cf0:	d104      	bne.n	8007cfc <HAL_TIM_PWM_Stop+0xd4>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cfa:	e01b      	b.n	8007d34 <HAL_TIM_PWM_Stop+0x10c>
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	2b08      	cmp	r3, #8
 8007d00:	d104      	bne.n	8007d0c <HAL_TIM_PWM_Stop+0xe4>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d0a:	e013      	b.n	8007d34 <HAL_TIM_PWM_Stop+0x10c>
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	2b0c      	cmp	r3, #12
 8007d10:	d104      	bne.n	8007d1c <HAL_TIM_PWM_Stop+0xf4>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d1a:	e00b      	b.n	8007d34 <HAL_TIM_PWM_Stop+0x10c>
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	2b10      	cmp	r3, #16
 8007d20:	d104      	bne.n	8007d2c <HAL_TIM_PWM_Stop+0x104>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d2a:	e003      	b.n	8007d34 <HAL_TIM_PWM_Stop+0x10c>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	40012c00 	.word	0x40012c00
 8007d44:	40013400 	.word	0x40013400
 8007d48:	40014000 	.word	0x40014000
 8007d4c:	40014400 	.word	0x40014400
 8007d50:	40014800 	.word	0x40014800

08007d54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d101      	bne.n	8007d72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d6e:	2302      	movs	r3, #2
 8007d70:	e0ff      	b.n	8007f72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b14      	cmp	r3, #20
 8007d7e:	f200 80f0 	bhi.w	8007f62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007d82:	a201      	add	r2, pc, #4	@ (adr r2, 8007d88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d88:	08007ddd 	.word	0x08007ddd
 8007d8c:	08007f63 	.word	0x08007f63
 8007d90:	08007f63 	.word	0x08007f63
 8007d94:	08007f63 	.word	0x08007f63
 8007d98:	08007e1d 	.word	0x08007e1d
 8007d9c:	08007f63 	.word	0x08007f63
 8007da0:	08007f63 	.word	0x08007f63
 8007da4:	08007f63 	.word	0x08007f63
 8007da8:	08007e5f 	.word	0x08007e5f
 8007dac:	08007f63 	.word	0x08007f63
 8007db0:	08007f63 	.word	0x08007f63
 8007db4:	08007f63 	.word	0x08007f63
 8007db8:	08007e9f 	.word	0x08007e9f
 8007dbc:	08007f63 	.word	0x08007f63
 8007dc0:	08007f63 	.word	0x08007f63
 8007dc4:	08007f63 	.word	0x08007f63
 8007dc8:	08007ee1 	.word	0x08007ee1
 8007dcc:	08007f63 	.word	0x08007f63
 8007dd0:	08007f63 	.word	0x08007f63
 8007dd4:	08007f63 	.word	0x08007f63
 8007dd8:	08007f21 	.word	0x08007f21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68b9      	ldr	r1, [r7, #8]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 fa60 	bl	80082a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	699a      	ldr	r2, [r3, #24]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f042 0208 	orr.w	r2, r2, #8
 8007df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699a      	ldr	r2, [r3, #24]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f022 0204 	bic.w	r2, r2, #4
 8007e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6999      	ldr	r1, [r3, #24]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	691a      	ldr	r2, [r3, #16]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	619a      	str	r2, [r3, #24]
      break;
 8007e1a:	e0a5      	b.n	8007f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68b9      	ldr	r1, [r7, #8]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 fad0 	bl	80083c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	699a      	ldr	r2, [r3, #24]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	699a      	ldr	r2, [r3, #24]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6999      	ldr	r1, [r3, #24]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	021a      	lsls	r2, r3, #8
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	619a      	str	r2, [r3, #24]
      break;
 8007e5c:	e084      	b.n	8007f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68b9      	ldr	r1, [r7, #8]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 fb39 	bl	80084dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	69da      	ldr	r2, [r3, #28]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f042 0208 	orr.w	r2, r2, #8
 8007e78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	69da      	ldr	r2, [r3, #28]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f022 0204 	bic.w	r2, r2, #4
 8007e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	69d9      	ldr	r1, [r3, #28]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	691a      	ldr	r2, [r3, #16]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	61da      	str	r2, [r3, #28]
      break;
 8007e9c:	e064      	b.n	8007f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68b9      	ldr	r1, [r7, #8]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 fba1 	bl	80085ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	69da      	ldr	r2, [r3, #28]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	69da      	ldr	r2, [r3, #28]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	69d9      	ldr	r1, [r3, #28]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	021a      	lsls	r2, r3, #8
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	61da      	str	r2, [r3, #28]
      break;
 8007ede:	e043      	b.n	8007f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68b9      	ldr	r1, [r7, #8]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 fc0a 	bl	8008700 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f042 0208 	orr.w	r2, r2, #8
 8007efa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f022 0204 	bic.w	r2, r2, #4
 8007f0a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	691a      	ldr	r2, [r3, #16]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007f1e:	e023      	b.n	8007f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68b9      	ldr	r1, [r7, #8]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 fc4e 	bl	80087c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f3a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f4a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	021a      	lsls	r2, r3, #8
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007f60:	e002      	b.n	8007f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	75fb      	strb	r3, [r7, #23]
      break;
 8007f66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop

08007f7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d101      	bne.n	8007f98 <HAL_TIM_ConfigClockSource+0x1c>
 8007f94:	2302      	movs	r3, #2
 8007f96:	e0de      	b.n	8008156 <HAL_TIM_ConfigClockSource+0x1da>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007fb6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a63      	ldr	r2, [pc, #396]	@ (8008160 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	f000 80a9 	beq.w	800812a <HAL_TIM_ConfigClockSource+0x1ae>
 8007fd8:	4a61      	ldr	r2, [pc, #388]	@ (8008160 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	f200 80ae 	bhi.w	800813c <HAL_TIM_ConfigClockSource+0x1c0>
 8007fe0:	4a60      	ldr	r2, [pc, #384]	@ (8008164 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	f000 80a1 	beq.w	800812a <HAL_TIM_ConfigClockSource+0x1ae>
 8007fe8:	4a5e      	ldr	r2, [pc, #376]	@ (8008164 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	f200 80a6 	bhi.w	800813c <HAL_TIM_ConfigClockSource+0x1c0>
 8007ff0:	4a5d      	ldr	r2, [pc, #372]	@ (8008168 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	f000 8099 	beq.w	800812a <HAL_TIM_ConfigClockSource+0x1ae>
 8007ff8:	4a5b      	ldr	r2, [pc, #364]	@ (8008168 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	f200 809e 	bhi.w	800813c <HAL_TIM_ConfigClockSource+0x1c0>
 8008000:	4a5a      	ldr	r2, [pc, #360]	@ (800816c <HAL_TIM_ConfigClockSource+0x1f0>)
 8008002:	4293      	cmp	r3, r2
 8008004:	f000 8091 	beq.w	800812a <HAL_TIM_ConfigClockSource+0x1ae>
 8008008:	4a58      	ldr	r2, [pc, #352]	@ (800816c <HAL_TIM_ConfigClockSource+0x1f0>)
 800800a:	4293      	cmp	r3, r2
 800800c:	f200 8096 	bhi.w	800813c <HAL_TIM_ConfigClockSource+0x1c0>
 8008010:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008014:	f000 8089 	beq.w	800812a <HAL_TIM_ConfigClockSource+0x1ae>
 8008018:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800801c:	f200 808e 	bhi.w	800813c <HAL_TIM_ConfigClockSource+0x1c0>
 8008020:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008024:	d03e      	beq.n	80080a4 <HAL_TIM_ConfigClockSource+0x128>
 8008026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800802a:	f200 8087 	bhi.w	800813c <HAL_TIM_ConfigClockSource+0x1c0>
 800802e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008032:	f000 8086 	beq.w	8008142 <HAL_TIM_ConfigClockSource+0x1c6>
 8008036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800803a:	d87f      	bhi.n	800813c <HAL_TIM_ConfigClockSource+0x1c0>
 800803c:	2b70      	cmp	r3, #112	@ 0x70
 800803e:	d01a      	beq.n	8008076 <HAL_TIM_ConfigClockSource+0xfa>
 8008040:	2b70      	cmp	r3, #112	@ 0x70
 8008042:	d87b      	bhi.n	800813c <HAL_TIM_ConfigClockSource+0x1c0>
 8008044:	2b60      	cmp	r3, #96	@ 0x60
 8008046:	d050      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0x16e>
 8008048:	2b60      	cmp	r3, #96	@ 0x60
 800804a:	d877      	bhi.n	800813c <HAL_TIM_ConfigClockSource+0x1c0>
 800804c:	2b50      	cmp	r3, #80	@ 0x50
 800804e:	d03c      	beq.n	80080ca <HAL_TIM_ConfigClockSource+0x14e>
 8008050:	2b50      	cmp	r3, #80	@ 0x50
 8008052:	d873      	bhi.n	800813c <HAL_TIM_ConfigClockSource+0x1c0>
 8008054:	2b40      	cmp	r3, #64	@ 0x40
 8008056:	d058      	beq.n	800810a <HAL_TIM_ConfigClockSource+0x18e>
 8008058:	2b40      	cmp	r3, #64	@ 0x40
 800805a:	d86f      	bhi.n	800813c <HAL_TIM_ConfigClockSource+0x1c0>
 800805c:	2b30      	cmp	r3, #48	@ 0x30
 800805e:	d064      	beq.n	800812a <HAL_TIM_ConfigClockSource+0x1ae>
 8008060:	2b30      	cmp	r3, #48	@ 0x30
 8008062:	d86b      	bhi.n	800813c <HAL_TIM_ConfigClockSource+0x1c0>
 8008064:	2b20      	cmp	r3, #32
 8008066:	d060      	beq.n	800812a <HAL_TIM_ConfigClockSource+0x1ae>
 8008068:	2b20      	cmp	r3, #32
 800806a:	d867      	bhi.n	800813c <HAL_TIM_ConfigClockSource+0x1c0>
 800806c:	2b00      	cmp	r3, #0
 800806e:	d05c      	beq.n	800812a <HAL_TIM_ConfigClockSource+0x1ae>
 8008070:	2b10      	cmp	r3, #16
 8008072:	d05a      	beq.n	800812a <HAL_TIM_ConfigClockSource+0x1ae>
 8008074:	e062      	b.n	800813c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008086:	f000 fc81 	bl	800898c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008098:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	609a      	str	r2, [r3, #8]
      break;
 80080a2:	e04f      	b.n	8008144 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080b4:	f000 fc6a 	bl	800898c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	689a      	ldr	r2, [r3, #8]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80080c6:	609a      	str	r2, [r3, #8]
      break;
 80080c8:	e03c      	b.n	8008144 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080d6:	461a      	mov	r2, r3
 80080d8:	f000 fbdc 	bl	8008894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2150      	movs	r1, #80	@ 0x50
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 fc35 	bl	8008952 <TIM_ITRx_SetConfig>
      break;
 80080e8:	e02c      	b.n	8008144 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080f6:	461a      	mov	r2, r3
 80080f8:	f000 fbfb 	bl	80088f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2160      	movs	r1, #96	@ 0x60
 8008102:	4618      	mov	r0, r3
 8008104:	f000 fc25 	bl	8008952 <TIM_ITRx_SetConfig>
      break;
 8008108:	e01c      	b.n	8008144 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008116:	461a      	mov	r2, r3
 8008118:	f000 fbbc 	bl	8008894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2140      	movs	r1, #64	@ 0x40
 8008122:	4618      	mov	r0, r3
 8008124:	f000 fc15 	bl	8008952 <TIM_ITRx_SetConfig>
      break;
 8008128:	e00c      	b.n	8008144 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4619      	mov	r1, r3
 8008134:	4610      	mov	r0, r2
 8008136:	f000 fc0c 	bl	8008952 <TIM_ITRx_SetConfig>
      break;
 800813a:	e003      	b.n	8008144 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	73fb      	strb	r3, [r7, #15]
      break;
 8008140:	e000      	b.n	8008144 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8008142:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008154:	7bfb      	ldrb	r3, [r7, #15]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	00100070 	.word	0x00100070
 8008164:	00100040 	.word	0x00100040
 8008168:	00100030 	.word	0x00100030
 800816c:	00100020 	.word	0x00100020

08008170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a42      	ldr	r2, [pc, #264]	@ (800828c <TIM_Base_SetConfig+0x11c>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d00f      	beq.n	80081a8 <TIM_Base_SetConfig+0x38>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800818e:	d00b      	beq.n	80081a8 <TIM_Base_SetConfig+0x38>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a3f      	ldr	r2, [pc, #252]	@ (8008290 <TIM_Base_SetConfig+0x120>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d007      	beq.n	80081a8 <TIM_Base_SetConfig+0x38>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a3e      	ldr	r2, [pc, #248]	@ (8008294 <TIM_Base_SetConfig+0x124>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d003      	beq.n	80081a8 <TIM_Base_SetConfig+0x38>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a3d      	ldr	r2, [pc, #244]	@ (8008298 <TIM_Base_SetConfig+0x128>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d108      	bne.n	80081ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a33      	ldr	r2, [pc, #204]	@ (800828c <TIM_Base_SetConfig+0x11c>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d01b      	beq.n	80081fa <TIM_Base_SetConfig+0x8a>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081c8:	d017      	beq.n	80081fa <TIM_Base_SetConfig+0x8a>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a30      	ldr	r2, [pc, #192]	@ (8008290 <TIM_Base_SetConfig+0x120>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d013      	beq.n	80081fa <TIM_Base_SetConfig+0x8a>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a2f      	ldr	r2, [pc, #188]	@ (8008294 <TIM_Base_SetConfig+0x124>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d00f      	beq.n	80081fa <TIM_Base_SetConfig+0x8a>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a2e      	ldr	r2, [pc, #184]	@ (8008298 <TIM_Base_SetConfig+0x128>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d00b      	beq.n	80081fa <TIM_Base_SetConfig+0x8a>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a2d      	ldr	r2, [pc, #180]	@ (800829c <TIM_Base_SetConfig+0x12c>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d007      	beq.n	80081fa <TIM_Base_SetConfig+0x8a>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a2c      	ldr	r2, [pc, #176]	@ (80082a0 <TIM_Base_SetConfig+0x130>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d003      	beq.n	80081fa <TIM_Base_SetConfig+0x8a>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a2b      	ldr	r2, [pc, #172]	@ (80082a4 <TIM_Base_SetConfig+0x134>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d108      	bne.n	800820c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	4313      	orrs	r3, r2
 800820a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	4313      	orrs	r3, r2
 8008218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	689a      	ldr	r2, [r3, #8]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a16      	ldr	r2, [pc, #88]	@ (800828c <TIM_Base_SetConfig+0x11c>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d00f      	beq.n	8008258 <TIM_Base_SetConfig+0xe8>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a17      	ldr	r2, [pc, #92]	@ (8008298 <TIM_Base_SetConfig+0x128>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d00b      	beq.n	8008258 <TIM_Base_SetConfig+0xe8>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a16      	ldr	r2, [pc, #88]	@ (800829c <TIM_Base_SetConfig+0x12c>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d007      	beq.n	8008258 <TIM_Base_SetConfig+0xe8>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a15      	ldr	r2, [pc, #84]	@ (80082a0 <TIM_Base_SetConfig+0x130>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d003      	beq.n	8008258 <TIM_Base_SetConfig+0xe8>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a14      	ldr	r2, [pc, #80]	@ (80082a4 <TIM_Base_SetConfig+0x134>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d103      	bne.n	8008260 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	691a      	ldr	r2, [r3, #16]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b01      	cmp	r3, #1
 8008270:	d105      	bne.n	800827e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f023 0201 	bic.w	r2, r3, #1
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	611a      	str	r2, [r3, #16]
  }
}
 800827e:	bf00      	nop
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	40012c00 	.word	0x40012c00
 8008290:	40000400 	.word	0x40000400
 8008294:	40000800 	.word	0x40000800
 8008298:	40013400 	.word	0x40013400
 800829c:	40014000 	.word	0x40014000
 80082a0:	40014400 	.word	0x40014400
 80082a4:	40014800 	.word	0x40014800

080082a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a1b      	ldr	r3, [r3, #32]
 80082bc:	f023 0201 	bic.w	r2, r3, #1
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f023 0303 	bic.w	r3, r3, #3
 80082e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f023 0302 	bic.w	r3, r3, #2
 80082f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a2c      	ldr	r2, [pc, #176]	@ (80083b4 <TIM_OC1_SetConfig+0x10c>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d00f      	beq.n	8008328 <TIM_OC1_SetConfig+0x80>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a2b      	ldr	r2, [pc, #172]	@ (80083b8 <TIM_OC1_SetConfig+0x110>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d00b      	beq.n	8008328 <TIM_OC1_SetConfig+0x80>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a2a      	ldr	r2, [pc, #168]	@ (80083bc <TIM_OC1_SetConfig+0x114>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d007      	beq.n	8008328 <TIM_OC1_SetConfig+0x80>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a29      	ldr	r2, [pc, #164]	@ (80083c0 <TIM_OC1_SetConfig+0x118>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d003      	beq.n	8008328 <TIM_OC1_SetConfig+0x80>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a28      	ldr	r2, [pc, #160]	@ (80083c4 <TIM_OC1_SetConfig+0x11c>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d10c      	bne.n	8008342 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	f023 0308 	bic.w	r3, r3, #8
 800832e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	4313      	orrs	r3, r2
 8008338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	f023 0304 	bic.w	r3, r3, #4
 8008340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a1b      	ldr	r2, [pc, #108]	@ (80083b4 <TIM_OC1_SetConfig+0x10c>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d00f      	beq.n	800836a <TIM_OC1_SetConfig+0xc2>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a1a      	ldr	r2, [pc, #104]	@ (80083b8 <TIM_OC1_SetConfig+0x110>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d00b      	beq.n	800836a <TIM_OC1_SetConfig+0xc2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a19      	ldr	r2, [pc, #100]	@ (80083bc <TIM_OC1_SetConfig+0x114>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d007      	beq.n	800836a <TIM_OC1_SetConfig+0xc2>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a18      	ldr	r2, [pc, #96]	@ (80083c0 <TIM_OC1_SetConfig+0x118>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d003      	beq.n	800836a <TIM_OC1_SetConfig+0xc2>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a17      	ldr	r2, [pc, #92]	@ (80083c4 <TIM_OC1_SetConfig+0x11c>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d111      	bne.n	800838e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	4313      	orrs	r3, r2
 8008382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	4313      	orrs	r3, r2
 800838c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	693a      	ldr	r2, [r7, #16]
 8008392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	697a      	ldr	r2, [r7, #20]
 80083a6:	621a      	str	r2, [r3, #32]
}
 80083a8:	bf00      	nop
 80083aa:	371c      	adds	r7, #28
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	40012c00 	.word	0x40012c00
 80083b8:	40013400 	.word	0x40013400
 80083bc:	40014000 	.word	0x40014000
 80083c0:	40014400 	.word	0x40014400
 80083c4:	40014800 	.word	0x40014800

080083c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a1b      	ldr	r3, [r3, #32]
 80083dc:	f023 0210 	bic.w	r2, r3, #16
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	021b      	lsls	r3, r3, #8
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	4313      	orrs	r3, r2
 800840e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f023 0320 	bic.w	r3, r3, #32
 8008416:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	011b      	lsls	r3, r3, #4
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	4313      	orrs	r3, r2
 8008422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a28      	ldr	r2, [pc, #160]	@ (80084c8 <TIM_OC2_SetConfig+0x100>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d003      	beq.n	8008434 <TIM_OC2_SetConfig+0x6c>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a27      	ldr	r2, [pc, #156]	@ (80084cc <TIM_OC2_SetConfig+0x104>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d10d      	bne.n	8008450 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800843a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	011b      	lsls	r3, r3, #4
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	4313      	orrs	r3, r2
 8008446:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800844e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a1d      	ldr	r2, [pc, #116]	@ (80084c8 <TIM_OC2_SetConfig+0x100>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d00f      	beq.n	8008478 <TIM_OC2_SetConfig+0xb0>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a1c      	ldr	r2, [pc, #112]	@ (80084cc <TIM_OC2_SetConfig+0x104>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00b      	beq.n	8008478 <TIM_OC2_SetConfig+0xb0>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a1b      	ldr	r2, [pc, #108]	@ (80084d0 <TIM_OC2_SetConfig+0x108>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d007      	beq.n	8008478 <TIM_OC2_SetConfig+0xb0>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a1a      	ldr	r2, [pc, #104]	@ (80084d4 <TIM_OC2_SetConfig+0x10c>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d003      	beq.n	8008478 <TIM_OC2_SetConfig+0xb0>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a19      	ldr	r2, [pc, #100]	@ (80084d8 <TIM_OC2_SetConfig+0x110>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d113      	bne.n	80084a0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800847e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	4313      	orrs	r3, r2
 8008492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	4313      	orrs	r3, r2
 800849e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	621a      	str	r2, [r3, #32]
}
 80084ba:	bf00      	nop
 80084bc:	371c      	adds	r7, #28
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	40012c00 	.word	0x40012c00
 80084cc:	40013400 	.word	0x40013400
 80084d0:	40014000 	.word	0x40014000
 80084d4:	40014400 	.word	0x40014400
 80084d8:	40014800 	.word	0x40014800

080084dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	69db      	ldr	r3, [r3, #28]
 8008502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800850a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800850e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f023 0303 	bic.w	r3, r3, #3
 8008516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	4313      	orrs	r3, r2
 8008520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	021b      	lsls	r3, r3, #8
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	4313      	orrs	r3, r2
 8008534:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a27      	ldr	r2, [pc, #156]	@ (80085d8 <TIM_OC3_SetConfig+0xfc>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d003      	beq.n	8008546 <TIM_OC3_SetConfig+0x6a>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a26      	ldr	r2, [pc, #152]	@ (80085dc <TIM_OC3_SetConfig+0x100>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d10d      	bne.n	8008562 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800854c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	021b      	lsls	r3, r3, #8
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	4313      	orrs	r3, r2
 8008558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a1c      	ldr	r2, [pc, #112]	@ (80085d8 <TIM_OC3_SetConfig+0xfc>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d00f      	beq.n	800858a <TIM_OC3_SetConfig+0xae>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a1b      	ldr	r2, [pc, #108]	@ (80085dc <TIM_OC3_SetConfig+0x100>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d00b      	beq.n	800858a <TIM_OC3_SetConfig+0xae>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a1a      	ldr	r2, [pc, #104]	@ (80085e0 <TIM_OC3_SetConfig+0x104>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d007      	beq.n	800858a <TIM_OC3_SetConfig+0xae>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a19      	ldr	r2, [pc, #100]	@ (80085e4 <TIM_OC3_SetConfig+0x108>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d003      	beq.n	800858a <TIM_OC3_SetConfig+0xae>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a18      	ldr	r2, [pc, #96]	@ (80085e8 <TIM_OC3_SetConfig+0x10c>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d113      	bne.n	80085b2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	011b      	lsls	r3, r3, #4
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	011b      	lsls	r3, r3, #4
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	621a      	str	r2, [r3, #32]
}
 80085cc:	bf00      	nop
 80085ce:	371c      	adds	r7, #28
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	40012c00 	.word	0x40012c00
 80085dc:	40013400 	.word	0x40013400
 80085e0:	40014000 	.word	0x40014000
 80085e4:	40014400 	.word	0x40014400
 80085e8:	40014800 	.word	0x40014800

080085ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a1b      	ldr	r3, [r3, #32]
 8008600:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	69db      	ldr	r3, [r3, #28]
 8008612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800861a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800861e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	021b      	lsls	r3, r3, #8
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	4313      	orrs	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800863a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	031b      	lsls	r3, r3, #12
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	4313      	orrs	r3, r2
 8008646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a28      	ldr	r2, [pc, #160]	@ (80086ec <TIM_OC4_SetConfig+0x100>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d003      	beq.n	8008658 <TIM_OC4_SetConfig+0x6c>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a27      	ldr	r2, [pc, #156]	@ (80086f0 <TIM_OC4_SetConfig+0x104>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d10d      	bne.n	8008674 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800865e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	031b      	lsls	r3, r3, #12
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	4313      	orrs	r3, r2
 800866a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008672:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a1d      	ldr	r2, [pc, #116]	@ (80086ec <TIM_OC4_SetConfig+0x100>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d00f      	beq.n	800869c <TIM_OC4_SetConfig+0xb0>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a1c      	ldr	r2, [pc, #112]	@ (80086f0 <TIM_OC4_SetConfig+0x104>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d00b      	beq.n	800869c <TIM_OC4_SetConfig+0xb0>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a1b      	ldr	r2, [pc, #108]	@ (80086f4 <TIM_OC4_SetConfig+0x108>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d007      	beq.n	800869c <TIM_OC4_SetConfig+0xb0>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a1a      	ldr	r2, [pc, #104]	@ (80086f8 <TIM_OC4_SetConfig+0x10c>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d003      	beq.n	800869c <TIM_OC4_SetConfig+0xb0>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a19      	ldr	r2, [pc, #100]	@ (80086fc <TIM_OC4_SetConfig+0x110>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d113      	bne.n	80086c4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086a2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086aa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	019b      	lsls	r3, r3, #6
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	019b      	lsls	r3, r3, #6
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	621a      	str	r2, [r3, #32]
}
 80086de:	bf00      	nop
 80086e0:	371c      	adds	r7, #28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	40012c00 	.word	0x40012c00
 80086f0:	40013400 	.word	0x40013400
 80086f4:	40014000 	.word	0x40014000
 80086f8:	40014400 	.word	0x40014400
 80086fc:	40014800 	.word	0x40014800

08008700 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a1b      	ldr	r3, [r3, #32]
 8008714:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800872e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	4313      	orrs	r3, r2
 800873c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008744:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	041b      	lsls	r3, r3, #16
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	4313      	orrs	r3, r2
 8008750:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a17      	ldr	r2, [pc, #92]	@ (80087b4 <TIM_OC5_SetConfig+0xb4>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d00f      	beq.n	800877a <TIM_OC5_SetConfig+0x7a>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a16      	ldr	r2, [pc, #88]	@ (80087b8 <TIM_OC5_SetConfig+0xb8>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d00b      	beq.n	800877a <TIM_OC5_SetConfig+0x7a>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a15      	ldr	r2, [pc, #84]	@ (80087bc <TIM_OC5_SetConfig+0xbc>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d007      	beq.n	800877a <TIM_OC5_SetConfig+0x7a>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a14      	ldr	r2, [pc, #80]	@ (80087c0 <TIM_OC5_SetConfig+0xc0>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d003      	beq.n	800877a <TIM_OC5_SetConfig+0x7a>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a13      	ldr	r2, [pc, #76]	@ (80087c4 <TIM_OC5_SetConfig+0xc4>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d109      	bne.n	800878e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008780:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	021b      	lsls	r3, r3, #8
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	4313      	orrs	r3, r2
 800878c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	621a      	str	r2, [r3, #32]
}
 80087a8:	bf00      	nop
 80087aa:	371c      	adds	r7, #28
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	40012c00 	.word	0x40012c00
 80087b8:	40013400 	.word	0x40013400
 80087bc:	40014000 	.word	0x40014000
 80087c0:	40014400 	.word	0x40014400
 80087c4:	40014800 	.word	0x40014800

080087c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a1b      	ldr	r3, [r3, #32]
 80087dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	021b      	lsls	r3, r3, #8
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	4313      	orrs	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800880e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	051b      	lsls	r3, r3, #20
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	4313      	orrs	r3, r2
 800881a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a18      	ldr	r2, [pc, #96]	@ (8008880 <TIM_OC6_SetConfig+0xb8>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d00f      	beq.n	8008844 <TIM_OC6_SetConfig+0x7c>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a17      	ldr	r2, [pc, #92]	@ (8008884 <TIM_OC6_SetConfig+0xbc>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d00b      	beq.n	8008844 <TIM_OC6_SetConfig+0x7c>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a16      	ldr	r2, [pc, #88]	@ (8008888 <TIM_OC6_SetConfig+0xc0>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d007      	beq.n	8008844 <TIM_OC6_SetConfig+0x7c>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a15      	ldr	r2, [pc, #84]	@ (800888c <TIM_OC6_SetConfig+0xc4>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d003      	beq.n	8008844 <TIM_OC6_SetConfig+0x7c>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a14      	ldr	r2, [pc, #80]	@ (8008890 <TIM_OC6_SetConfig+0xc8>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d109      	bne.n	8008858 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800884a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	029b      	lsls	r3, r3, #10
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	4313      	orrs	r3, r2
 8008856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	621a      	str	r2, [r3, #32]
}
 8008872:	bf00      	nop
 8008874:	371c      	adds	r7, #28
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	40012c00 	.word	0x40012c00
 8008884:	40013400 	.word	0x40013400
 8008888:	40014000 	.word	0x40014000
 800888c:	40014400 	.word	0x40014400
 8008890:	40014800 	.word	0x40014800

08008894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008894:	b480      	push	{r7}
 8008896:	b087      	sub	sp, #28
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6a1b      	ldr	r3, [r3, #32]
 80088a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	f023 0201 	bic.w	r2, r3, #1
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	011b      	lsls	r3, r3, #4
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f023 030a 	bic.w	r3, r3, #10
 80088d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	621a      	str	r2, [r3, #32]
}
 80088e6:	bf00      	nop
 80088e8:	371c      	adds	r7, #28
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088f2:	b480      	push	{r7}
 80088f4:	b087      	sub	sp, #28
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6a1b      	ldr	r3, [r3, #32]
 8008908:	f023 0210 	bic.w	r2, r3, #16
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	699b      	ldr	r3, [r3, #24]
 8008914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800891c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	031b      	lsls	r3, r3, #12
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	4313      	orrs	r3, r2
 8008926:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800892e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	011b      	lsls	r3, r3, #4
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	4313      	orrs	r3, r2
 8008938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	621a      	str	r2, [r3, #32]
}
 8008946:	bf00      	nop
 8008948:	371c      	adds	r7, #28
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008952:	b480      	push	{r7}
 8008954:	b085      	sub	sp, #20
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008968:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800896c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800896e:	683a      	ldr	r2, [r7, #0]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4313      	orrs	r3, r2
 8008974:	f043 0307 	orr.w	r3, r3, #7
 8008978:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	609a      	str	r2, [r3, #8]
}
 8008980:	bf00      	nop
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800898c:	b480      	push	{r7}
 800898e:	b087      	sub	sp, #28
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
 8008998:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	021a      	lsls	r2, r3, #8
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	431a      	orrs	r2, r3
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	697a      	ldr	r2, [r7, #20]
 80089be:	609a      	str	r2, [r3, #8]
}
 80089c0:	bf00      	nop
 80089c2:	371c      	adds	r7, #28
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	f003 031f 	and.w	r3, r3, #31
 80089de:	2201      	movs	r2, #1
 80089e0:	fa02 f303 	lsl.w	r3, r2, r3
 80089e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6a1a      	ldr	r2, [r3, #32]
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	43db      	mvns	r3, r3
 80089ee:	401a      	ands	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6a1a      	ldr	r2, [r3, #32]
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	f003 031f 	and.w	r3, r3, #31
 80089fe:	6879      	ldr	r1, [r7, #4]
 8008a00:	fa01 f303 	lsl.w	r3, r1, r3
 8008a04:	431a      	orrs	r2, r3
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	621a      	str	r2, [r3, #32]
}
 8008a0a:	bf00      	nop
 8008a0c:	371c      	adds	r7, #28
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
	...

08008a18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d101      	bne.n	8008a30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	e065      	b.n	8008afc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a2c      	ldr	r2, [pc, #176]	@ (8008b08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d004      	beq.n	8008a64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a2b      	ldr	r2, [pc, #172]	@ (8008b0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d108      	bne.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008a6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a1b      	ldr	r2, [pc, #108]	@ (8008b08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d018      	beq.n	8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aa6:	d013      	beq.n	8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a18      	ldr	r2, [pc, #96]	@ (8008b10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d00e      	beq.n	8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a17      	ldr	r2, [pc, #92]	@ (8008b14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d009      	beq.n	8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a12      	ldr	r2, [pc, #72]	@ (8008b0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d004      	beq.n	8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a13      	ldr	r2, [pc, #76]	@ (8008b18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d10c      	bne.n	8008aea <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ad6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	40012c00 	.word	0x40012c00
 8008b0c:	40013400 	.word	0x40013400
 8008b10:	40000400 	.word	0x40000400
 8008b14:	40000800 	.word	0x40000800
 8008b18:	40014000 	.word	0x40014000

08008b1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d101      	bne.n	8008b38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b34:	2302      	movs	r3, #2
 8008b36:	e073      	b.n	8008c20 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	041b      	lsls	r3, r3, #16
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	69db      	ldr	r3, [r3, #28]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a19      	ldr	r2, [pc, #100]	@ (8008c2c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d004      	beq.n	8008bd4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a18      	ldr	r2, [pc, #96]	@ (8008c30 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d11c      	bne.n	8008c0e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bde:	051b      	lsls	r3, r3, #20
 8008be0:	4313      	orrs	r3, r2
 8008be2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	40012c00 	.word	0x40012c00
 8008c30:	40013400 	.word	0x40013400

08008c34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e042      	b.n	8008ccc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d106      	bne.n	8008c5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7f9 fba1 	bl	80023a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2224      	movs	r2, #36	@ 0x24
 8008c62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f022 0201 	bic.w	r2, r2, #1
 8008c74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 ff58 	bl	8009b34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 fc89 	bl	800959c <UART_SetConfig>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d101      	bne.n	8008c94 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e01b      	b.n	8008ccc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	685a      	ldr	r2, [r3, #4]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689a      	ldr	r2, [r3, #8]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008cb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f042 0201 	orr.w	r2, r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 ffd7 	bl	8009c78 <UART_CheckIdleState>
 8008cca:	4603      	mov	r3, r0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b08a      	sub	sp, #40	@ 0x28
 8008cd8:	af02      	add	r7, sp, #8
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	603b      	str	r3, [r7, #0]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cea:	2b20      	cmp	r3, #32
 8008cec:	d17b      	bne.n	8008de6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <HAL_UART_Transmit+0x26>
 8008cf4:	88fb      	ldrh	r3, [r7, #6]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d101      	bne.n	8008cfe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e074      	b.n	8008de8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2221      	movs	r2, #33	@ 0x21
 8008d0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d0e:	f7f9 fd35 	bl	800277c <HAL_GetTick>
 8008d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	88fa      	ldrh	r2, [r7, #6]
 8008d18:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	88fa      	ldrh	r2, [r7, #6]
 8008d20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d2c:	d108      	bne.n	8008d40 <HAL_UART_Transmit+0x6c>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d104      	bne.n	8008d40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008d36:	2300      	movs	r3, #0
 8008d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	61bb      	str	r3, [r7, #24]
 8008d3e:	e003      	b.n	8008d48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d44:	2300      	movs	r3, #0
 8008d46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d48:	e030      	b.n	8008dac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	2200      	movs	r2, #0
 8008d52:	2180      	movs	r1, #128	@ 0x80
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f001 f839 	bl	8009dcc <UART_WaitOnFlagUntilTimeout>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d005      	beq.n	8008d6c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2220      	movs	r2, #32
 8008d64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e03d      	b.n	8008de8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10b      	bne.n	8008d8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	881b      	ldrh	r3, [r3, #0]
 8008d76:	461a      	mov	r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d80:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	3302      	adds	r3, #2
 8008d86:	61bb      	str	r3, [r7, #24]
 8008d88:	e007      	b.n	8008d9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	781a      	ldrb	r2, [r3, #0]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	3301      	adds	r3, #1
 8008d98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	3b01      	subs	r3, #1
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1c8      	bne.n	8008d4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	2140      	movs	r1, #64	@ 0x40
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f001 f802 	bl	8009dcc <UART_WaitOnFlagUntilTimeout>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d005      	beq.n	8008dda <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2220      	movs	r2, #32
 8008dd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e006      	b.n	8008de8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2220      	movs	r2, #32
 8008dde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	e000      	b.n	8008de8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008de6:	2302      	movs	r3, #2
  }
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3720      	adds	r7, #32
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b08a      	sub	sp, #40	@ 0x28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e04:	2b20      	cmp	r3, #32
 8008e06:	d167      	bne.n	8008ed8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d002      	beq.n	8008e14 <HAL_UART_Transmit_DMA+0x24>
 8008e0e:	88fb      	ldrh	r3, [r7, #6]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e060      	b.n	8008eda <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	88fa      	ldrh	r2, [r7, #6]
 8008e22:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	88fa      	ldrh	r2, [r7, #6]
 8008e2a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2221      	movs	r2, #33	@ 0x21
 8008e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d028      	beq.n	8008e98 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e4a:	4a26      	ldr	r2, [pc, #152]	@ (8008ee4 <HAL_UART_Transmit_DMA+0xf4>)
 8008e4c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e52:	4a25      	ldr	r2, [pc, #148]	@ (8008ee8 <HAL_UART_Transmit_DMA+0xf8>)
 8008e54:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e5a:	4a24      	ldr	r2, [pc, #144]	@ (8008eec <HAL_UART_Transmit_DMA+0xfc>)
 8008e5c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e62:	2200      	movs	r2, #0
 8008e64:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e6e:	4619      	mov	r1, r3
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3328      	adds	r3, #40	@ 0x28
 8008e76:	461a      	mov	r2, r3
 8008e78:	88fb      	ldrh	r3, [r7, #6]
 8008e7a:	f7fc fc6b 	bl	8005754 <HAL_DMA_Start_IT>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d009      	beq.n	8008e98 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2210      	movs	r2, #16
 8008e88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e020      	b.n	8008eda <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2240      	movs	r2, #64	@ 0x40
 8008e9e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	e853 3f00 	ldrex	r3, [r3]
 8008eae:	613b      	str	r3, [r7, #16]
   return(result);
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3308      	adds	r3, #8
 8008ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ec0:	623a      	str	r2, [r7, #32]
 8008ec2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec4:	69f9      	ldr	r1, [r7, #28]
 8008ec6:	6a3a      	ldr	r2, [r7, #32]
 8008ec8:	e841 2300 	strex	r3, r2, [r1]
 8008ecc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1e5      	bne.n	8008ea0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	e000      	b.n	8008eda <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008ed8:	2302      	movs	r3, #2
  }
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3728      	adds	r7, #40	@ 0x28
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	0800a143 	.word	0x0800a143
 8008ee8:	0800a1dd 	.word	0x0800a1dd
 8008eec:	0800a363 	.word	0x0800a363

08008ef0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b0ba      	sub	sp, #232	@ 0xe8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008f1a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008f1e:	4013      	ands	r3, r2
 8008f20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008f24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d11b      	bne.n	8008f64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f30:	f003 0320 	and.w	r3, r3, #32
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d015      	beq.n	8008f64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f3c:	f003 0320 	and.w	r3, r3, #32
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d105      	bne.n	8008f50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d009      	beq.n	8008f64 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f000 82e3 	beq.w	8009520 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	4798      	blx	r3
      }
      return;
 8008f62:	e2dd      	b.n	8009520 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008f64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f000 8123 	beq.w	80091b4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008f6e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008f72:	4b8d      	ldr	r3, [pc, #564]	@ (80091a8 <HAL_UART_IRQHandler+0x2b8>)
 8008f74:	4013      	ands	r3, r2
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d106      	bne.n	8008f88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008f7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008f7e:	4b8b      	ldr	r3, [pc, #556]	@ (80091ac <HAL_UART_IRQHandler+0x2bc>)
 8008f80:	4013      	ands	r3, r2
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 8116 	beq.w	80091b4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f8c:	f003 0301 	and.w	r3, r3, #1
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d011      	beq.n	8008fb8 <HAL_UART_IRQHandler+0xc8>
 8008f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00b      	beq.n	8008fb8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fae:	f043 0201 	orr.w	r2, r3, #1
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fbc:	f003 0302 	and.w	r3, r3, #2
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d011      	beq.n	8008fe8 <HAL_UART_IRQHandler+0xf8>
 8008fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00b      	beq.n	8008fe8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2202      	movs	r2, #2
 8008fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fde:	f043 0204 	orr.w	r2, r3, #4
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fec:	f003 0304 	and.w	r3, r3, #4
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d011      	beq.n	8009018 <HAL_UART_IRQHandler+0x128>
 8008ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00b      	beq.n	8009018 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2204      	movs	r2, #4
 8009006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800900e:	f043 0202 	orr.w	r2, r3, #2
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800901c:	f003 0308 	and.w	r3, r3, #8
 8009020:	2b00      	cmp	r3, #0
 8009022:	d017      	beq.n	8009054 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009028:	f003 0320 	and.w	r3, r3, #32
 800902c:	2b00      	cmp	r3, #0
 800902e:	d105      	bne.n	800903c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009030:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009034:	4b5c      	ldr	r3, [pc, #368]	@ (80091a8 <HAL_UART_IRQHandler+0x2b8>)
 8009036:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00b      	beq.n	8009054 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2208      	movs	r2, #8
 8009042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800904a:	f043 0208 	orr.w	r2, r3, #8
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800905c:	2b00      	cmp	r3, #0
 800905e:	d012      	beq.n	8009086 <HAL_UART_IRQHandler+0x196>
 8009060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009064:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00c      	beq.n	8009086 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800907c:	f043 0220 	orr.w	r2, r3, #32
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800908c:	2b00      	cmp	r3, #0
 800908e:	f000 8249 	beq.w	8009524 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009096:	f003 0320 	and.w	r3, r3, #32
 800909a:	2b00      	cmp	r3, #0
 800909c:	d013      	beq.n	80090c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800909e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090a2:	f003 0320 	and.w	r3, r3, #32
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d105      	bne.n	80090b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80090aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d007      	beq.n	80090c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d003      	beq.n	80090c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090da:	2b40      	cmp	r3, #64	@ 0x40
 80090dc:	d005      	beq.n	80090ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80090de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80090e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d054      	beq.n	8009194 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 ffc3 	bl	800a076 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090fa:	2b40      	cmp	r3, #64	@ 0x40
 80090fc:	d146      	bne.n	800918c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3308      	adds	r3, #8
 8009104:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009108:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800910c:	e853 3f00 	ldrex	r3, [r3]
 8009110:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009114:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009118:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800911c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3308      	adds	r3, #8
 8009126:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800912a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800912e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009132:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009136:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800913a:	e841 2300 	strex	r3, r2, [r1]
 800913e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1d9      	bne.n	80090fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009150:	2b00      	cmp	r3, #0
 8009152:	d017      	beq.n	8009184 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800915a:	4a15      	ldr	r2, [pc, #84]	@ (80091b0 <HAL_UART_IRQHandler+0x2c0>)
 800915c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009164:	4618      	mov	r0, r3
 8009166:	f7fc fbc9 	bl	80058fc <HAL_DMA_Abort_IT>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d019      	beq.n	80091a4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800917e:	4610      	mov	r0, r2
 8009180:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009182:	e00f      	b.n	80091a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f9ff 	bl	8009588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800918a:	e00b      	b.n	80091a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f9fb 	bl	8009588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009192:	e007      	b.n	80091a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f9f7 	bl	8009588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80091a2:	e1bf      	b.n	8009524 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091a4:	bf00      	nop
    return;
 80091a6:	e1bd      	b.n	8009524 <HAL_UART_IRQHandler+0x634>
 80091a8:	10000001 	.word	0x10000001
 80091ac:	04000120 	.word	0x04000120
 80091b0:	0800a3e3 	.word	0x0800a3e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	f040 8153 	bne.w	8009464 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80091be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091c2:	f003 0310 	and.w	r3, r3, #16
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f000 814c 	beq.w	8009464 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80091cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091d0:	f003 0310 	and.w	r3, r3, #16
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f000 8145 	beq.w	8009464 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2210      	movs	r2, #16
 80091e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091ec:	2b40      	cmp	r3, #64	@ 0x40
 80091ee:	f040 80bb 	bne.w	8009368 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009200:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009204:	2b00      	cmp	r3, #0
 8009206:	f000 818f 	beq.w	8009528 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009210:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009214:	429a      	cmp	r2, r3
 8009216:	f080 8187 	bcs.w	8009528 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009220:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 0320 	and.w	r3, r3, #32
 8009232:	2b00      	cmp	r3, #0
 8009234:	f040 8087 	bne.w	8009346 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009240:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009244:	e853 3f00 	ldrex	r3, [r3]
 8009248:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800924c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009250:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009254:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	461a      	mov	r2, r3
 800925e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009262:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009266:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800926e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009272:	e841 2300 	strex	r3, r2, [r1]
 8009276:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800927a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1da      	bne.n	8009238 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3308      	adds	r3, #8
 8009288:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800928c:	e853 3f00 	ldrex	r3, [r3]
 8009290:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009292:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009294:	f023 0301 	bic.w	r3, r3, #1
 8009298:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	3308      	adds	r3, #8
 80092a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80092a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80092aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80092ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80092b2:	e841 2300 	strex	r3, r2, [r1]
 80092b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80092b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1e1      	bne.n	8009282 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	3308      	adds	r3, #8
 80092c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092c8:	e853 3f00 	ldrex	r3, [r3]
 80092cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80092ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3308      	adds	r3, #8
 80092de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80092e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80092e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80092e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80092ea:	e841 2300 	strex	r3, r2, [r1]
 80092ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80092f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1e3      	bne.n	80092be <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2220      	movs	r2, #32
 80092fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009314:	f023 0310 	bic.w	r3, r3, #16
 8009318:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	461a      	mov	r2, r3
 8009322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009326:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009328:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800932c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800932e:	e841 2300 	strex	r3, r2, [r1]
 8009332:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1e4      	bne.n	8009304 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009340:	4618      	mov	r0, r3
 8009342:	f7fc fa82 	bl	800584a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2202      	movs	r2, #2
 800934a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009358:	b29b      	uxth	r3, r3
 800935a:	1ad3      	subs	r3, r2, r3
 800935c:	b29b      	uxth	r3, r3
 800935e:	4619      	mov	r1, r3
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f003 f861 	bl	800c428 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009366:	e0df      	b.n	8009528 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009374:	b29b      	uxth	r3, r3
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009382:	b29b      	uxth	r3, r3
 8009384:	2b00      	cmp	r3, #0
 8009386:	f000 80d1 	beq.w	800952c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800938a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800938e:	2b00      	cmp	r3, #0
 8009390:	f000 80cc 	beq.w	800952c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939c:	e853 3f00 	ldrex	r3, [r3]
 80093a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	461a      	mov	r2, r3
 80093b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80093b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80093b8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093be:	e841 2300 	strex	r3, r2, [r1]
 80093c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1e4      	bne.n	8009394 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	3308      	adds	r3, #8
 80093d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d4:	e853 3f00 	ldrex	r3, [r3]
 80093d8:	623b      	str	r3, [r7, #32]
   return(result);
 80093da:	6a3b      	ldr	r3, [r7, #32]
 80093dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093e0:	f023 0301 	bic.w	r3, r3, #1
 80093e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	3308      	adds	r3, #8
 80093ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80093f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80093f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093fa:	e841 2300 	strex	r3, r2, [r1]
 80093fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1e1      	bne.n	80093ca <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2220      	movs	r2, #32
 800940a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	e853 3f00 	ldrex	r3, [r3]
 8009426:	60fb      	str	r3, [r7, #12]
   return(result);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f023 0310 	bic.w	r3, r3, #16
 800942e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800943c:	61fb      	str	r3, [r7, #28]
 800943e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009440:	69b9      	ldr	r1, [r7, #24]
 8009442:	69fa      	ldr	r2, [r7, #28]
 8009444:	e841 2300 	strex	r3, r2, [r1]
 8009448:	617b      	str	r3, [r7, #20]
   return(result);
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1e4      	bne.n	800941a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2202      	movs	r2, #2
 8009454:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009456:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f002 ffe3 	bl	800c428 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009462:	e063      	b.n	800952c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009468:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00e      	beq.n	800948e <HAL_UART_IRQHandler+0x59e>
 8009470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009474:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009478:	2b00      	cmp	r3, #0
 800947a:	d008      	beq.n	800948e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009484:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 ffec 	bl	800a464 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800948c:	e051      	b.n	8009532 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800948e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009496:	2b00      	cmp	r3, #0
 8009498:	d014      	beq.n	80094c4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800949a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800949e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d105      	bne.n	80094b2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80094a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d008      	beq.n	80094c4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d03a      	beq.n	8009530 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	4798      	blx	r3
    }
    return;
 80094c2:	e035      	b.n	8009530 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80094c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d009      	beq.n	80094e4 <HAL_UART_IRQHandler+0x5f4>
 80094d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d003      	beq.n	80094e4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 ff96 	bl	800a40e <UART_EndTransmit_IT>
    return;
 80094e2:	e026      	b.n	8009532 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80094e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d009      	beq.n	8009504 <HAL_UART_IRQHandler+0x614>
 80094f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d003      	beq.n	8009504 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 ffc5 	bl	800a48c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009502:	e016      	b.n	8009532 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009508:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d010      	beq.n	8009532 <HAL_UART_IRQHandler+0x642>
 8009510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009514:	2b00      	cmp	r3, #0
 8009516:	da0c      	bge.n	8009532 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 ffad 	bl	800a478 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800951e:	e008      	b.n	8009532 <HAL_UART_IRQHandler+0x642>
      return;
 8009520:	bf00      	nop
 8009522:	e006      	b.n	8009532 <HAL_UART_IRQHandler+0x642>
    return;
 8009524:	bf00      	nop
 8009526:	e004      	b.n	8009532 <HAL_UART_IRQHandler+0x642>
      return;
 8009528:	bf00      	nop
 800952a:	e002      	b.n	8009532 <HAL_UART_IRQHandler+0x642>
      return;
 800952c:	bf00      	nop
 800952e:	e000      	b.n	8009532 <HAL_UART_IRQHandler+0x642>
    return;
 8009530:	bf00      	nop
  }
}
 8009532:	37e8      	adds	r7, #232	@ 0xe8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800959c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095a0:	b08c      	sub	sp, #48	@ 0x30
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	689a      	ldr	r2, [r3, #8]
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	431a      	orrs	r2, r3
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	431a      	orrs	r2, r3
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	69db      	ldr	r3, [r3, #28]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	4bab      	ldr	r3, [pc, #684]	@ (8009878 <UART_SetConfig+0x2dc>)
 80095cc:	4013      	ands	r3, r2
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	6812      	ldr	r2, [r2, #0]
 80095d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095d4:	430b      	orrs	r3, r1
 80095d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	68da      	ldr	r2, [r3, #12]
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	430a      	orrs	r2, r1
 80095ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4aa0      	ldr	r2, [pc, #640]	@ (800987c <UART_SetConfig+0x2e0>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d004      	beq.n	8009608 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009604:	4313      	orrs	r3, r2
 8009606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009612:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	6812      	ldr	r2, [r2, #0]
 800961a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800961c:	430b      	orrs	r3, r1
 800961e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009626:	f023 010f 	bic.w	r1, r3, #15
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	430a      	orrs	r2, r1
 8009634:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a91      	ldr	r2, [pc, #580]	@ (8009880 <UART_SetConfig+0x2e4>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d125      	bne.n	800968c <UART_SetConfig+0xf0>
 8009640:	4b90      	ldr	r3, [pc, #576]	@ (8009884 <UART_SetConfig+0x2e8>)
 8009642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009646:	f003 0303 	and.w	r3, r3, #3
 800964a:	2b03      	cmp	r3, #3
 800964c:	d81a      	bhi.n	8009684 <UART_SetConfig+0xe8>
 800964e:	a201      	add	r2, pc, #4	@ (adr r2, 8009654 <UART_SetConfig+0xb8>)
 8009650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009654:	08009665 	.word	0x08009665
 8009658:	08009675 	.word	0x08009675
 800965c:	0800966d 	.word	0x0800966d
 8009660:	0800967d 	.word	0x0800967d
 8009664:	2301      	movs	r3, #1
 8009666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800966a:	e0d6      	b.n	800981a <UART_SetConfig+0x27e>
 800966c:	2302      	movs	r3, #2
 800966e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009672:	e0d2      	b.n	800981a <UART_SetConfig+0x27e>
 8009674:	2304      	movs	r3, #4
 8009676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800967a:	e0ce      	b.n	800981a <UART_SetConfig+0x27e>
 800967c:	2308      	movs	r3, #8
 800967e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009682:	e0ca      	b.n	800981a <UART_SetConfig+0x27e>
 8009684:	2310      	movs	r3, #16
 8009686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800968a:	e0c6      	b.n	800981a <UART_SetConfig+0x27e>
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a7d      	ldr	r2, [pc, #500]	@ (8009888 <UART_SetConfig+0x2ec>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d138      	bne.n	8009708 <UART_SetConfig+0x16c>
 8009696:	4b7b      	ldr	r3, [pc, #492]	@ (8009884 <UART_SetConfig+0x2e8>)
 8009698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800969c:	f003 030c 	and.w	r3, r3, #12
 80096a0:	2b0c      	cmp	r3, #12
 80096a2:	d82d      	bhi.n	8009700 <UART_SetConfig+0x164>
 80096a4:	a201      	add	r2, pc, #4	@ (adr r2, 80096ac <UART_SetConfig+0x110>)
 80096a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096aa:	bf00      	nop
 80096ac:	080096e1 	.word	0x080096e1
 80096b0:	08009701 	.word	0x08009701
 80096b4:	08009701 	.word	0x08009701
 80096b8:	08009701 	.word	0x08009701
 80096bc:	080096f1 	.word	0x080096f1
 80096c0:	08009701 	.word	0x08009701
 80096c4:	08009701 	.word	0x08009701
 80096c8:	08009701 	.word	0x08009701
 80096cc:	080096e9 	.word	0x080096e9
 80096d0:	08009701 	.word	0x08009701
 80096d4:	08009701 	.word	0x08009701
 80096d8:	08009701 	.word	0x08009701
 80096dc:	080096f9 	.word	0x080096f9
 80096e0:	2300      	movs	r3, #0
 80096e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096e6:	e098      	b.n	800981a <UART_SetConfig+0x27e>
 80096e8:	2302      	movs	r3, #2
 80096ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096ee:	e094      	b.n	800981a <UART_SetConfig+0x27e>
 80096f0:	2304      	movs	r3, #4
 80096f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096f6:	e090      	b.n	800981a <UART_SetConfig+0x27e>
 80096f8:	2308      	movs	r3, #8
 80096fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096fe:	e08c      	b.n	800981a <UART_SetConfig+0x27e>
 8009700:	2310      	movs	r3, #16
 8009702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009706:	e088      	b.n	800981a <UART_SetConfig+0x27e>
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a5f      	ldr	r2, [pc, #380]	@ (800988c <UART_SetConfig+0x2f0>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d125      	bne.n	800975e <UART_SetConfig+0x1c2>
 8009712:	4b5c      	ldr	r3, [pc, #368]	@ (8009884 <UART_SetConfig+0x2e8>)
 8009714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009718:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800971c:	2b30      	cmp	r3, #48	@ 0x30
 800971e:	d016      	beq.n	800974e <UART_SetConfig+0x1b2>
 8009720:	2b30      	cmp	r3, #48	@ 0x30
 8009722:	d818      	bhi.n	8009756 <UART_SetConfig+0x1ba>
 8009724:	2b20      	cmp	r3, #32
 8009726:	d00a      	beq.n	800973e <UART_SetConfig+0x1a2>
 8009728:	2b20      	cmp	r3, #32
 800972a:	d814      	bhi.n	8009756 <UART_SetConfig+0x1ba>
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <UART_SetConfig+0x19a>
 8009730:	2b10      	cmp	r3, #16
 8009732:	d008      	beq.n	8009746 <UART_SetConfig+0x1aa>
 8009734:	e00f      	b.n	8009756 <UART_SetConfig+0x1ba>
 8009736:	2300      	movs	r3, #0
 8009738:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800973c:	e06d      	b.n	800981a <UART_SetConfig+0x27e>
 800973e:	2302      	movs	r3, #2
 8009740:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009744:	e069      	b.n	800981a <UART_SetConfig+0x27e>
 8009746:	2304      	movs	r3, #4
 8009748:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800974c:	e065      	b.n	800981a <UART_SetConfig+0x27e>
 800974e:	2308      	movs	r3, #8
 8009750:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009754:	e061      	b.n	800981a <UART_SetConfig+0x27e>
 8009756:	2310      	movs	r3, #16
 8009758:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800975c:	e05d      	b.n	800981a <UART_SetConfig+0x27e>
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a4b      	ldr	r2, [pc, #300]	@ (8009890 <UART_SetConfig+0x2f4>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d125      	bne.n	80097b4 <UART_SetConfig+0x218>
 8009768:	4b46      	ldr	r3, [pc, #280]	@ (8009884 <UART_SetConfig+0x2e8>)
 800976a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800976e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009772:	2bc0      	cmp	r3, #192	@ 0xc0
 8009774:	d016      	beq.n	80097a4 <UART_SetConfig+0x208>
 8009776:	2bc0      	cmp	r3, #192	@ 0xc0
 8009778:	d818      	bhi.n	80097ac <UART_SetConfig+0x210>
 800977a:	2b80      	cmp	r3, #128	@ 0x80
 800977c:	d00a      	beq.n	8009794 <UART_SetConfig+0x1f8>
 800977e:	2b80      	cmp	r3, #128	@ 0x80
 8009780:	d814      	bhi.n	80097ac <UART_SetConfig+0x210>
 8009782:	2b00      	cmp	r3, #0
 8009784:	d002      	beq.n	800978c <UART_SetConfig+0x1f0>
 8009786:	2b40      	cmp	r3, #64	@ 0x40
 8009788:	d008      	beq.n	800979c <UART_SetConfig+0x200>
 800978a:	e00f      	b.n	80097ac <UART_SetConfig+0x210>
 800978c:	2300      	movs	r3, #0
 800978e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009792:	e042      	b.n	800981a <UART_SetConfig+0x27e>
 8009794:	2302      	movs	r3, #2
 8009796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800979a:	e03e      	b.n	800981a <UART_SetConfig+0x27e>
 800979c:	2304      	movs	r3, #4
 800979e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097a2:	e03a      	b.n	800981a <UART_SetConfig+0x27e>
 80097a4:	2308      	movs	r3, #8
 80097a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097aa:	e036      	b.n	800981a <UART_SetConfig+0x27e>
 80097ac:	2310      	movs	r3, #16
 80097ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097b2:	e032      	b.n	800981a <UART_SetConfig+0x27e>
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a30      	ldr	r2, [pc, #192]	@ (800987c <UART_SetConfig+0x2e0>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d12a      	bne.n	8009814 <UART_SetConfig+0x278>
 80097be:	4b31      	ldr	r3, [pc, #196]	@ (8009884 <UART_SetConfig+0x2e8>)
 80097c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80097c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097cc:	d01a      	beq.n	8009804 <UART_SetConfig+0x268>
 80097ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097d2:	d81b      	bhi.n	800980c <UART_SetConfig+0x270>
 80097d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097d8:	d00c      	beq.n	80097f4 <UART_SetConfig+0x258>
 80097da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097de:	d815      	bhi.n	800980c <UART_SetConfig+0x270>
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d003      	beq.n	80097ec <UART_SetConfig+0x250>
 80097e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097e8:	d008      	beq.n	80097fc <UART_SetConfig+0x260>
 80097ea:	e00f      	b.n	800980c <UART_SetConfig+0x270>
 80097ec:	2300      	movs	r3, #0
 80097ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097f2:	e012      	b.n	800981a <UART_SetConfig+0x27e>
 80097f4:	2302      	movs	r3, #2
 80097f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097fa:	e00e      	b.n	800981a <UART_SetConfig+0x27e>
 80097fc:	2304      	movs	r3, #4
 80097fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009802:	e00a      	b.n	800981a <UART_SetConfig+0x27e>
 8009804:	2308      	movs	r3, #8
 8009806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800980a:	e006      	b.n	800981a <UART_SetConfig+0x27e>
 800980c:	2310      	movs	r3, #16
 800980e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009812:	e002      	b.n	800981a <UART_SetConfig+0x27e>
 8009814:	2310      	movs	r3, #16
 8009816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a17      	ldr	r2, [pc, #92]	@ (800987c <UART_SetConfig+0x2e0>)
 8009820:	4293      	cmp	r3, r2
 8009822:	f040 80a8 	bne.w	8009976 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009826:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800982a:	2b08      	cmp	r3, #8
 800982c:	d834      	bhi.n	8009898 <UART_SetConfig+0x2fc>
 800982e:	a201      	add	r2, pc, #4	@ (adr r2, 8009834 <UART_SetConfig+0x298>)
 8009830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009834:	08009859 	.word	0x08009859
 8009838:	08009899 	.word	0x08009899
 800983c:	08009861 	.word	0x08009861
 8009840:	08009899 	.word	0x08009899
 8009844:	08009867 	.word	0x08009867
 8009848:	08009899 	.word	0x08009899
 800984c:	08009899 	.word	0x08009899
 8009850:	08009899 	.word	0x08009899
 8009854:	0800986f 	.word	0x0800986f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009858:	f7fd f928 	bl	8006aac <HAL_RCC_GetPCLK1Freq>
 800985c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800985e:	e021      	b.n	80098a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009860:	4b0c      	ldr	r3, [pc, #48]	@ (8009894 <UART_SetConfig+0x2f8>)
 8009862:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009864:	e01e      	b.n	80098a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009866:	f7fd f8b3 	bl	80069d0 <HAL_RCC_GetSysClockFreq>
 800986a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800986c:	e01a      	b.n	80098a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800986e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009872:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009874:	e016      	b.n	80098a4 <UART_SetConfig+0x308>
 8009876:	bf00      	nop
 8009878:	cfff69f3 	.word	0xcfff69f3
 800987c:	40008000 	.word	0x40008000
 8009880:	40013800 	.word	0x40013800
 8009884:	40021000 	.word	0x40021000
 8009888:	40004400 	.word	0x40004400
 800988c:	40004800 	.word	0x40004800
 8009890:	40004c00 	.word	0x40004c00
 8009894:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009898:	2300      	movs	r3, #0
 800989a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80098a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80098a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f000 812a 	beq.w	8009b00 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b0:	4a9e      	ldr	r2, [pc, #632]	@ (8009b2c <UART_SetConfig+0x590>)
 80098b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098b6:	461a      	mov	r2, r3
 80098b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80098be:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	685a      	ldr	r2, [r3, #4]
 80098c4:	4613      	mov	r3, r2
 80098c6:	005b      	lsls	r3, r3, #1
 80098c8:	4413      	add	r3, r2
 80098ca:	69ba      	ldr	r2, [r7, #24]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d305      	bcc.n	80098dc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80098d6:	69ba      	ldr	r2, [r7, #24]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d903      	bls.n	80098e4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80098e2:	e10d      	b.n	8009b00 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e6:	2200      	movs	r2, #0
 80098e8:	60bb      	str	r3, [r7, #8]
 80098ea:	60fa      	str	r2, [r7, #12]
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098f0:	4a8e      	ldr	r2, [pc, #568]	@ (8009b2c <UART_SetConfig+0x590>)
 80098f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	2200      	movs	r2, #0
 80098fa:	603b      	str	r3, [r7, #0]
 80098fc:	607a      	str	r2, [r7, #4]
 80098fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009902:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009906:	f7f7 f9e7 	bl	8000cd8 <__aeabi_uldivmod>
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	4610      	mov	r0, r2
 8009910:	4619      	mov	r1, r3
 8009912:	f04f 0200 	mov.w	r2, #0
 8009916:	f04f 0300 	mov.w	r3, #0
 800991a:	020b      	lsls	r3, r1, #8
 800991c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009920:	0202      	lsls	r2, r0, #8
 8009922:	6979      	ldr	r1, [r7, #20]
 8009924:	6849      	ldr	r1, [r1, #4]
 8009926:	0849      	lsrs	r1, r1, #1
 8009928:	2000      	movs	r0, #0
 800992a:	460c      	mov	r4, r1
 800992c:	4605      	mov	r5, r0
 800992e:	eb12 0804 	adds.w	r8, r2, r4
 8009932:	eb43 0905 	adc.w	r9, r3, r5
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	469a      	mov	sl, r3
 800993e:	4693      	mov	fp, r2
 8009940:	4652      	mov	r2, sl
 8009942:	465b      	mov	r3, fp
 8009944:	4640      	mov	r0, r8
 8009946:	4649      	mov	r1, r9
 8009948:	f7f7 f9c6 	bl	8000cd8 <__aeabi_uldivmod>
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	4613      	mov	r3, r2
 8009952:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800995a:	d308      	bcc.n	800996e <UART_SetConfig+0x3d2>
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009962:	d204      	bcs.n	800996e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6a3a      	ldr	r2, [r7, #32]
 800996a:	60da      	str	r2, [r3, #12]
 800996c:	e0c8      	b.n	8009b00 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009974:	e0c4      	b.n	8009b00 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	69db      	ldr	r3, [r3, #28]
 800997a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800997e:	d167      	bne.n	8009a50 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009980:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009984:	2b08      	cmp	r3, #8
 8009986:	d828      	bhi.n	80099da <UART_SetConfig+0x43e>
 8009988:	a201      	add	r2, pc, #4	@ (adr r2, 8009990 <UART_SetConfig+0x3f4>)
 800998a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998e:	bf00      	nop
 8009990:	080099b5 	.word	0x080099b5
 8009994:	080099bd 	.word	0x080099bd
 8009998:	080099c5 	.word	0x080099c5
 800999c:	080099db 	.word	0x080099db
 80099a0:	080099cb 	.word	0x080099cb
 80099a4:	080099db 	.word	0x080099db
 80099a8:	080099db 	.word	0x080099db
 80099ac:	080099db 	.word	0x080099db
 80099b0:	080099d3 	.word	0x080099d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099b4:	f7fd f87a 	bl	8006aac <HAL_RCC_GetPCLK1Freq>
 80099b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099ba:	e014      	b.n	80099e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099bc:	f7fd f88c 	bl	8006ad8 <HAL_RCC_GetPCLK2Freq>
 80099c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099c2:	e010      	b.n	80099e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099c4:	4b5a      	ldr	r3, [pc, #360]	@ (8009b30 <UART_SetConfig+0x594>)
 80099c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099c8:	e00d      	b.n	80099e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099ca:	f7fd f801 	bl	80069d0 <HAL_RCC_GetSysClockFreq>
 80099ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099d0:	e009      	b.n	80099e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099d8:	e005      	b.n	80099e6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80099da:	2300      	movs	r3, #0
 80099dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80099e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80099e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 8089 	beq.w	8009b00 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f2:	4a4e      	ldr	r2, [pc, #312]	@ (8009b2c <UART_SetConfig+0x590>)
 80099f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099f8:	461a      	mov	r2, r3
 80099fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a00:	005a      	lsls	r2, r3, #1
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	085b      	lsrs	r3, r3, #1
 8009a08:	441a      	add	r2, r3
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a14:	6a3b      	ldr	r3, [r7, #32]
 8009a16:	2b0f      	cmp	r3, #15
 8009a18:	d916      	bls.n	8009a48 <UART_SetConfig+0x4ac>
 8009a1a:	6a3b      	ldr	r3, [r7, #32]
 8009a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a20:	d212      	bcs.n	8009a48 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a22:	6a3b      	ldr	r3, [r7, #32]
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	f023 030f 	bic.w	r3, r3, #15
 8009a2a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a2c:	6a3b      	ldr	r3, [r7, #32]
 8009a2e:	085b      	lsrs	r3, r3, #1
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	f003 0307 	and.w	r3, r3, #7
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	8bfb      	ldrh	r3, [r7, #30]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	8bfa      	ldrh	r2, [r7, #30]
 8009a44:	60da      	str	r2, [r3, #12]
 8009a46:	e05b      	b.n	8009b00 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009a4e:	e057      	b.n	8009b00 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a54:	2b08      	cmp	r3, #8
 8009a56:	d828      	bhi.n	8009aaa <UART_SetConfig+0x50e>
 8009a58:	a201      	add	r2, pc, #4	@ (adr r2, 8009a60 <UART_SetConfig+0x4c4>)
 8009a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a5e:	bf00      	nop
 8009a60:	08009a85 	.word	0x08009a85
 8009a64:	08009a8d 	.word	0x08009a8d
 8009a68:	08009a95 	.word	0x08009a95
 8009a6c:	08009aab 	.word	0x08009aab
 8009a70:	08009a9b 	.word	0x08009a9b
 8009a74:	08009aab 	.word	0x08009aab
 8009a78:	08009aab 	.word	0x08009aab
 8009a7c:	08009aab 	.word	0x08009aab
 8009a80:	08009aa3 	.word	0x08009aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a84:	f7fd f812 	bl	8006aac <HAL_RCC_GetPCLK1Freq>
 8009a88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a8a:	e014      	b.n	8009ab6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a8c:	f7fd f824 	bl	8006ad8 <HAL_RCC_GetPCLK2Freq>
 8009a90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a92:	e010      	b.n	8009ab6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a94:	4b26      	ldr	r3, [pc, #152]	@ (8009b30 <UART_SetConfig+0x594>)
 8009a96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a98:	e00d      	b.n	8009ab6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a9a:	f7fc ff99 	bl	80069d0 <HAL_RCC_GetSysClockFreq>
 8009a9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009aa0:	e009      	b.n	8009ab6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009aa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009aa8:	e005      	b.n	8009ab6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009ab4:	bf00      	nop
    }

    if (pclk != 0U)
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d021      	beq.n	8009b00 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8009b2c <UART_SetConfig+0x590>)
 8009ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aca:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	085b      	lsrs	r3, r3, #1
 8009ad4:	441a      	add	r2, r3
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ade:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	2b0f      	cmp	r3, #15
 8009ae4:	d909      	bls.n	8009afa <UART_SetConfig+0x55e>
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009aec:	d205      	bcs.n	8009afa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009aee:	6a3b      	ldr	r3, [r7, #32]
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	60da      	str	r2, [r3, #12]
 8009af8:	e002      	b.n	8009b00 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	2200      	movs	r2, #0
 8009b14:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009b1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3730      	adds	r7, #48	@ 0x30
 8009b24:	46bd      	mov	sp, r7
 8009b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b2a:	bf00      	nop
 8009b2c:	08013ab4 	.word	0x08013ab4
 8009b30:	00f42400 	.word	0x00f42400

08009b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b40:	f003 0308 	and.w	r3, r3, #8
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00a      	beq.n	8009b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00a      	beq.n	8009b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	430a      	orrs	r2, r1
 8009b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b84:	f003 0302 	and.w	r3, r3, #2
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00a      	beq.n	8009ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	430a      	orrs	r2, r1
 8009ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ba6:	f003 0304 	and.w	r3, r3, #4
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00a      	beq.n	8009bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	430a      	orrs	r2, r1
 8009bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc8:	f003 0310 	and.w	r3, r3, #16
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00a      	beq.n	8009be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bea:	f003 0320 	and.w	r3, r3, #32
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00a      	beq.n	8009c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	430a      	orrs	r2, r1
 8009c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d01a      	beq.n	8009c4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	430a      	orrs	r2, r1
 8009c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c32:	d10a      	bne.n	8009c4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	430a      	orrs	r2, r1
 8009c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00a      	beq.n	8009c6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	430a      	orrs	r2, r1
 8009c6a:	605a      	str	r2, [r3, #4]
  }
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b098      	sub	sp, #96	@ 0x60
 8009c7c:	af02      	add	r7, sp, #8
 8009c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c88:	f7f8 fd78 	bl	800277c <HAL_GetTick>
 8009c8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f003 0308 	and.w	r3, r3, #8
 8009c98:	2b08      	cmp	r3, #8
 8009c9a:	d12f      	bne.n	8009cfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f88e 	bl	8009dcc <UART_WaitOnFlagUntilTimeout>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d022      	beq.n	8009cfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cbe:	e853 3f00 	ldrex	r3, [r3]
 8009cc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cca:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cdc:	e841 2300 	strex	r3, r2, [r1]
 8009ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1e6      	bne.n	8009cb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2220      	movs	r2, #32
 8009cec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	e063      	b.n	8009dc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f003 0304 	and.w	r3, r3, #4
 8009d06:	2b04      	cmp	r3, #4
 8009d08:	d149      	bne.n	8009d9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d12:	2200      	movs	r2, #0
 8009d14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f857 	bl	8009dcc <UART_WaitOnFlagUntilTimeout>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d03c      	beq.n	8009d9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2c:	e853 3f00 	ldrex	r3, [r3]
 8009d30:	623b      	str	r3, [r7, #32]
   return(result);
 8009d32:	6a3b      	ldr	r3, [r7, #32]
 8009d34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d42:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d4a:	e841 2300 	strex	r3, r2, [r1]
 8009d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1e6      	bne.n	8009d24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3308      	adds	r3, #8
 8009d5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	e853 3f00 	ldrex	r3, [r3]
 8009d64:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f023 0301 	bic.w	r3, r3, #1
 8009d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3308      	adds	r3, #8
 8009d74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d76:	61fa      	str	r2, [r7, #28]
 8009d78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7a:	69b9      	ldr	r1, [r7, #24]
 8009d7c:	69fa      	ldr	r2, [r7, #28]
 8009d7e:	e841 2300 	strex	r3, r2, [r1]
 8009d82:	617b      	str	r3, [r7, #20]
   return(result);
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1e5      	bne.n	8009d56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2220      	movs	r2, #32
 8009d8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e012      	b.n	8009dc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2220      	movs	r2, #32
 8009da2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2220      	movs	r2, #32
 8009daa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3758      	adds	r7, #88	@ 0x58
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	603b      	str	r3, [r7, #0]
 8009dd8:	4613      	mov	r3, r2
 8009dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ddc:	e04f      	b.n	8009e7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de4:	d04b      	beq.n	8009e7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009de6:	f7f8 fcc9 	bl	800277c <HAL_GetTick>
 8009dea:	4602      	mov	r2, r0
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	1ad3      	subs	r3, r2, r3
 8009df0:	69ba      	ldr	r2, [r7, #24]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d302      	bcc.n	8009dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d101      	bne.n	8009e00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009dfc:	2303      	movs	r3, #3
 8009dfe:	e04e      	b.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 0304 	and.w	r3, r3, #4
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d037      	beq.n	8009e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	2b80      	cmp	r3, #128	@ 0x80
 8009e12:	d034      	beq.n	8009e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	2b40      	cmp	r3, #64	@ 0x40
 8009e18:	d031      	beq.n	8009e7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	69db      	ldr	r3, [r3, #28]
 8009e20:	f003 0308 	and.w	r3, r3, #8
 8009e24:	2b08      	cmp	r3, #8
 8009e26:	d110      	bne.n	8009e4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2208      	movs	r2, #8
 8009e2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f000 f920 	bl	800a076 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2208      	movs	r2, #8
 8009e3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e029      	b.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	69db      	ldr	r3, [r3, #28]
 8009e50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e58:	d111      	bne.n	8009e7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f000 f906 	bl	800a076 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2220      	movs	r2, #32
 8009e6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	e00f      	b.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	69da      	ldr	r2, [r3, #28]
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	4013      	ands	r3, r2
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	bf0c      	ite	eq
 8009e8e:	2301      	moveq	r3, #1
 8009e90:	2300      	movne	r3, #0
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	461a      	mov	r2, r3
 8009e96:	79fb      	ldrb	r3, [r7, #7]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d0a0      	beq.n	8009dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
	...

08009ea8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b096      	sub	sp, #88	@ 0x58
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	68ba      	ldr	r2, [r7, #8]
 8009eba:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	88fa      	ldrh	r2, [r7, #6]
 8009ec0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2222      	movs	r2, #34	@ 0x22
 8009ed0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d02d      	beq.n	8009f3a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ee4:	4a40      	ldr	r2, [pc, #256]	@ (8009fe8 <UART_Start_Receive_DMA+0x140>)
 8009ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eee:	4a3f      	ldr	r2, [pc, #252]	@ (8009fec <UART_Start_Receive_DMA+0x144>)
 8009ef0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ef8:	4a3d      	ldr	r2, [pc, #244]	@ (8009ff0 <UART_Start_Receive_DMA+0x148>)
 8009efa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f02:	2200      	movs	r2, #0
 8009f04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3324      	adds	r3, #36	@ 0x24
 8009f12:	4619      	mov	r1, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f18:	461a      	mov	r2, r3
 8009f1a:	88fb      	ldrh	r3, [r7, #6]
 8009f1c:	f7fb fc1a 	bl	8005754 <HAL_DMA_Start_IT>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d009      	beq.n	8009f3a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2210      	movs	r2, #16
 8009f2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2220      	movs	r2, #32
 8009f32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	e051      	b.n	8009fde <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d018      	beq.n	8009f74 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f4a:	e853 3f00 	ldrex	r3, [r3]
 8009f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f56:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f62:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f64:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f68:	e841 2300 	strex	r3, r2, [r1]
 8009f6c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009f6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1e6      	bne.n	8009f42 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	3308      	adds	r3, #8
 8009f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f7e:	e853 3f00 	ldrex	r3, [r3]
 8009f82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f86:	f043 0301 	orr.w	r3, r3, #1
 8009f8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	3308      	adds	r3, #8
 8009f92:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009f94:	637a      	str	r2, [r7, #52]	@ 0x34
 8009f96:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f9c:	e841 2300 	strex	r3, r2, [r1]
 8009fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1e5      	bne.n	8009f74 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	3308      	adds	r3, #8
 8009fae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	e853 3f00 	ldrex	r3, [r3]
 8009fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009fc8:	623a      	str	r2, [r7, #32]
 8009fca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fcc:	69f9      	ldr	r1, [r7, #28]
 8009fce:	6a3a      	ldr	r2, [r7, #32]
 8009fd0:	e841 2300 	strex	r3, r2, [r1]
 8009fd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1e5      	bne.n	8009fa8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3758      	adds	r7, #88	@ 0x58
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	0800a1f9 	.word	0x0800a1f9
 8009fec:	0800a325 	.word	0x0800a325
 8009ff0:	0800a363 	.word	0x0800a363

08009ff4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b08f      	sub	sp, #60	@ 0x3c
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	e853 3f00 	ldrex	r3, [r3]
 800a008:	61fb      	str	r3, [r7, #28]
   return(result);
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a010:	637b      	str	r3, [r7, #52]	@ 0x34
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	461a      	mov	r2, r3
 800a018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a01a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a01c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a020:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a022:	e841 2300 	strex	r3, r2, [r1]
 800a026:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1e6      	bne.n	8009ffc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3308      	adds	r3, #8
 800a034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	e853 3f00 	ldrex	r3, [r3]
 800a03c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a044:	633b      	str	r3, [r7, #48]	@ 0x30
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	3308      	adds	r3, #8
 800a04c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a04e:	61ba      	str	r2, [r7, #24]
 800a050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a052:	6979      	ldr	r1, [r7, #20]
 800a054:	69ba      	ldr	r2, [r7, #24]
 800a056:	e841 2300 	strex	r3, r2, [r1]
 800a05a:	613b      	str	r3, [r7, #16]
   return(result);
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1e5      	bne.n	800a02e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2220      	movs	r2, #32
 800a066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a06a:	bf00      	nop
 800a06c:	373c      	adds	r7, #60	@ 0x3c
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a076:	b480      	push	{r7}
 800a078:	b095      	sub	sp, #84	@ 0x54
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a086:	e853 3f00 	ldrex	r3, [r3]
 800a08a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a092:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	461a      	mov	r2, r3
 800a09a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a09c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a09e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a0a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a0a4:	e841 2300 	strex	r3, r2, [r1]
 800a0a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1e6      	bne.n	800a07e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3308      	adds	r3, #8
 800a0b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b8:	6a3b      	ldr	r3, [r7, #32]
 800a0ba:	e853 3f00 	ldrex	r3, [r3]
 800a0be:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0c6:	f023 0301 	bic.w	r3, r3, #1
 800a0ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	3308      	adds	r3, #8
 800a0d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0dc:	e841 2300 	strex	r3, r2, [r1]
 800a0e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1e3      	bne.n	800a0b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d118      	bne.n	800a122 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	e853 3f00 	ldrex	r3, [r3]
 800a0fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	f023 0310 	bic.w	r3, r3, #16
 800a104:	647b      	str	r3, [r7, #68]	@ 0x44
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	461a      	mov	r2, r3
 800a10c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a10e:	61bb      	str	r3, [r7, #24]
 800a110:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a112:	6979      	ldr	r1, [r7, #20]
 800a114:	69ba      	ldr	r2, [r7, #24]
 800a116:	e841 2300 	strex	r3, r2, [r1]
 800a11a:	613b      	str	r3, [r7, #16]
   return(result);
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1e6      	bne.n	800a0f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2220      	movs	r2, #32
 800a126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a136:	bf00      	nop
 800a138:	3754      	adds	r7, #84	@ 0x54
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr

0800a142 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b090      	sub	sp, #64	@ 0x40
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a14e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f003 0320 	and.w	r3, r3, #32
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d137      	bne.n	800a1ce <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a15e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a160:	2200      	movs	r2, #0
 800a162:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	3308      	adds	r3, #8
 800a16c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a170:	e853 3f00 	ldrex	r3, [r3]
 800a174:	623b      	str	r3, [r7, #32]
   return(result);
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a17c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a17e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	3308      	adds	r3, #8
 800a184:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a186:	633a      	str	r2, [r7, #48]	@ 0x30
 800a188:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a18c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a18e:	e841 2300 	strex	r3, r2, [r1]
 800a192:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1e5      	bne.n	800a166 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a19a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	e853 3f00 	ldrex	r3, [r3]
 800a1a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1b8:	61fb      	str	r3, [r7, #28]
 800a1ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1bc:	69b9      	ldr	r1, [r7, #24]
 800a1be:	69fa      	ldr	r2, [r7, #28]
 800a1c0:	e841 2300 	strex	r3, r2, [r1]
 800a1c4:	617b      	str	r3, [r7, #20]
   return(result);
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d1e6      	bne.n	800a19a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1cc:	e002      	b.n	800a1d4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a1ce:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a1d0:	f7ff f9b2 	bl	8009538 <HAL_UART_TxCpltCallback>
}
 800a1d4:	bf00      	nop
 800a1d6:	3740      	adds	r7, #64	@ 0x40
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f7ff f9ae 	bl	800954c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1f0:	bf00      	nop
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b09c      	sub	sp, #112	@ 0x70
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a204:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0320 	and.w	r3, r3, #32
 800a210:	2b00      	cmp	r3, #0
 800a212:	d171      	bne.n	800a2f8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a214:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a216:	2200      	movs	r2, #0
 800a218:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a21c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a222:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a224:	e853 3f00 	ldrex	r3, [r3]
 800a228:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a22a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a22c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a230:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a232:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	461a      	mov	r2, r3
 800a238:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a23a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a23c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a240:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a242:	e841 2300 	strex	r3, r2, [r1]
 800a246:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a248:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1e6      	bne.n	800a21c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a24e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	3308      	adds	r3, #8
 800a254:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a258:	e853 3f00 	ldrex	r3, [r3]
 800a25c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a25e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a260:	f023 0301 	bic.w	r3, r3, #1
 800a264:	667b      	str	r3, [r7, #100]	@ 0x64
 800a266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3308      	adds	r3, #8
 800a26c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a26e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a270:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a272:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a274:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a276:	e841 2300 	strex	r3, r2, [r1]
 800a27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a27c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1e5      	bne.n	800a24e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a282:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	3308      	adds	r3, #8
 800a288:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a28c:	e853 3f00 	ldrex	r3, [r3]
 800a290:	623b      	str	r3, [r7, #32]
   return(result);
 800a292:	6a3b      	ldr	r3, [r7, #32]
 800a294:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a298:	663b      	str	r3, [r7, #96]	@ 0x60
 800a29a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	3308      	adds	r3, #8
 800a2a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a2a2:	633a      	str	r2, [r7, #48]	@ 0x30
 800a2a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2aa:	e841 2300 	strex	r3, r2, [r1]
 800a2ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d1e5      	bne.n	800a282 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a2b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2b8:	2220      	movs	r2, #32
 800a2ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d118      	bne.n	800a2f8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	e853 3f00 	ldrex	r3, [r3]
 800a2d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f023 0310 	bic.w	r3, r3, #16
 800a2da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2e4:	61fb      	str	r3, [r7, #28]
 800a2e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e8:	69b9      	ldr	r1, [r7, #24]
 800a2ea:	69fa      	ldr	r2, [r7, #28]
 800a2ec:	e841 2300 	strex	r3, r2, [r1]
 800a2f0:	617b      	str	r3, [r7, #20]
   return(result);
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d1e6      	bne.n	800a2c6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a302:	2b01      	cmp	r3, #1
 800a304:	d107      	bne.n	800a316 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a308:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a30c:	4619      	mov	r1, r3
 800a30e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a310:	f002 f88a 	bl	800c428 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a314:	e002      	b.n	800a31c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a316:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a318:	f7ff f922 	bl	8009560 <HAL_UART_RxCpltCallback>
}
 800a31c:	bf00      	nop
 800a31e:	3770      	adds	r7, #112	@ 0x70
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a330:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2201      	movs	r2, #1
 800a336:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d109      	bne.n	800a354 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a346:	085b      	lsrs	r3, r3, #1
 800a348:	b29b      	uxth	r3, r3
 800a34a:	4619      	mov	r1, r3
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f002 f86b 	bl	800c428 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a352:	e002      	b.n	800a35a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f7ff f90d 	bl	8009574 <HAL_UART_RxHalfCpltCallback>
}
 800a35a:	bf00      	nop
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b086      	sub	sp, #24
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a36e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a376:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a37e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a38a:	2b80      	cmp	r3, #128	@ 0x80
 800a38c:	d109      	bne.n	800a3a2 <UART_DMAError+0x40>
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	2b21      	cmp	r3, #33	@ 0x21
 800a392:	d106      	bne.n	800a3a2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	2200      	movs	r2, #0
 800a398:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a39c:	6978      	ldr	r0, [r7, #20]
 800a39e:	f7ff fe29 	bl	8009ff4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3ac:	2b40      	cmp	r3, #64	@ 0x40
 800a3ae:	d109      	bne.n	800a3c4 <UART_DMAError+0x62>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2b22      	cmp	r3, #34	@ 0x22
 800a3b4:	d106      	bne.n	800a3c4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a3be:	6978      	ldr	r0, [r7, #20]
 800a3c0:	f7ff fe59 	bl	800a076 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3ca:	f043 0210 	orr.w	r2, r3, #16
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3d4:	6978      	ldr	r0, [r7, #20]
 800a3d6:	f7ff f8d7 	bl	8009588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3da:	bf00      	nop
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b084      	sub	sp, #16
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f7ff f8c1 	bl	8009588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a406:	bf00      	nop
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b088      	sub	sp, #32
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	e853 3f00 	ldrex	r3, [r3]
 800a422:	60bb      	str	r3, [r7, #8]
   return(result);
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a42a:	61fb      	str	r3, [r7, #28]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	461a      	mov	r2, r3
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	61bb      	str	r3, [r7, #24]
 800a436:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a438:	6979      	ldr	r1, [r7, #20]
 800a43a:	69ba      	ldr	r2, [r7, #24]
 800a43c:	e841 2300 	strex	r3, r2, [r1]
 800a440:	613b      	str	r3, [r7, #16]
   return(result);
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1e6      	bne.n	800a416 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2220      	movs	r2, #32
 800a44c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7ff f86e 	bl	8009538 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a45c:	bf00      	nop
 800a45e:	3720      	adds	r7, #32
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d101      	bne.n	800a4b6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	e027      	b.n	800a506 <HAL_UARTEx_DisableFifoMode+0x66>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2224      	movs	r2, #36	@ 0x24
 800a4c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f022 0201 	bic.w	r2, r2, #1
 800a4dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a4e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3714      	adds	r7, #20
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr

0800a512 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
 800a51a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a522:	2b01      	cmp	r3, #1
 800a524:	d101      	bne.n	800a52a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a526:	2302      	movs	r3, #2
 800a528:	e02d      	b.n	800a586 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2201      	movs	r2, #1
 800a52e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2224      	movs	r2, #36	@ 0x24
 800a536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f022 0201 	bic.w	r2, r2, #1
 800a550:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	430a      	orrs	r2, r1
 800a564:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f8a4 	bl	800a6b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2220      	movs	r2, #32
 800a578:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b084      	sub	sp, #16
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d101      	bne.n	800a5a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5a2:	2302      	movs	r3, #2
 800a5a4:	e02d      	b.n	800a602 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2224      	movs	r2, #36	@ 0x24
 800a5b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f022 0201 	bic.w	r2, r2, #1
 800a5cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	683a      	ldr	r2, [r7, #0]
 800a5de:	430a      	orrs	r2, r1
 800a5e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f866 	bl	800a6b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2220      	movs	r2, #32
 800a5f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b08c      	sub	sp, #48	@ 0x30
 800a60e:	af00      	add	r7, sp, #0
 800a610:	60f8      	str	r0, [r7, #12]
 800a612:	60b9      	str	r1, [r7, #8]
 800a614:	4613      	mov	r3, r2
 800a616:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a61e:	2b20      	cmp	r3, #32
 800a620:	d142      	bne.n	800a6a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d002      	beq.n	800a62e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a628:	88fb      	ldrh	r3, [r7, #6]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d101      	bne.n	800a632 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e03b      	b.n	800a6aa <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2201      	movs	r2, #1
 800a636:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a63e:	88fb      	ldrh	r3, [r7, #6]
 800a640:	461a      	mov	r2, r3
 800a642:	68b9      	ldr	r1, [r7, #8]
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f7ff fc2f 	bl	8009ea8 <UART_Start_Receive_DMA>
 800a64a:	4603      	mov	r3, r0
 800a64c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a650:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a654:	2b00      	cmp	r3, #0
 800a656:	d124      	bne.n	800a6a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d11d      	bne.n	800a69c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2210      	movs	r2, #16
 800a666:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	e853 3f00 	ldrex	r3, [r3]
 800a674:	617b      	str	r3, [r7, #20]
   return(result);
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	f043 0310 	orr.w	r3, r3, #16
 800a67c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a686:	627b      	str	r3, [r7, #36]	@ 0x24
 800a688:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68a:	6a39      	ldr	r1, [r7, #32]
 800a68c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a68e:	e841 2300 	strex	r3, r2, [r1]
 800a692:	61fb      	str	r3, [r7, #28]
   return(result);
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1e6      	bne.n	800a668 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a69a:	e002      	b.n	800a6a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a6a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a6a6:	e000      	b.n	800a6aa <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a6a8:	2302      	movs	r3, #2
  }
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3730      	adds	r7, #48	@ 0x30
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
	...

0800a6b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d108      	bne.n	800a6d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6d4:	e031      	b.n	800a73a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6d6:	2308      	movs	r3, #8
 800a6d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6da:	2308      	movs	r3, #8
 800a6dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	0e5b      	lsrs	r3, r3, #25
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	f003 0307 	and.w	r3, r3, #7
 800a6ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	0f5b      	lsrs	r3, r3, #29
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	f003 0307 	and.w	r3, r3, #7
 800a6fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6fe:	7bbb      	ldrb	r3, [r7, #14]
 800a700:	7b3a      	ldrb	r2, [r7, #12]
 800a702:	4911      	ldr	r1, [pc, #68]	@ (800a748 <UARTEx_SetNbDataToProcess+0x94>)
 800a704:	5c8a      	ldrb	r2, [r1, r2]
 800a706:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a70a:	7b3a      	ldrb	r2, [r7, #12]
 800a70c:	490f      	ldr	r1, [pc, #60]	@ (800a74c <UARTEx_SetNbDataToProcess+0x98>)
 800a70e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a710:	fb93 f3f2 	sdiv	r3, r3, r2
 800a714:	b29a      	uxth	r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
 800a71e:	7b7a      	ldrb	r2, [r7, #13]
 800a720:	4909      	ldr	r1, [pc, #36]	@ (800a748 <UARTEx_SetNbDataToProcess+0x94>)
 800a722:	5c8a      	ldrb	r2, [r1, r2]
 800a724:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a728:	7b7a      	ldrb	r2, [r7, #13]
 800a72a:	4908      	ldr	r1, [pc, #32]	@ (800a74c <UARTEx_SetNbDataToProcess+0x98>)
 800a72c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a72e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a732:	b29a      	uxth	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a73a:	bf00      	nop
 800a73c:	3714      	adds	r7, #20
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	08013acc 	.word	0x08013acc
 800a74c:	08013ad4 	.word	0x08013ad4

0800a750 <goToZeroElecAngle>:
#include "pid.h"
#include "lowpass_filter.h"
#include "focLib.h"

void goToZeroElecAngle(BldcMotor *motor)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
    setTorque(motor, 0, OPEN_LOOP_TORQUE, 0);
 800a758:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800a77c <goToZeroElecAngle+0x2c>
 800a75c:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800a780 <goToZeroElecAngle+0x30>
 800a760:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800a77c <goToZeroElecAngle+0x2c>
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f001 f84f 	bl	800b808 <setTorque>
    delay(700);
 800a76a:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800a76e:	f003 fc51 	bl	800e014 <delay>
}
 800a772:	bf00      	nop
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	00000000 	.word	0x00000000
 800a780:	3fc511a3 	.word	0x3fc511a3

0800a784 <alignSensor>:
int alignSensor(BldcMotor *motor)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b08a      	sub	sp, #40	@ 0x28
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
    // setTorque(motor, OPEN_LOOP_TORQUE, 0, _3PI_2);
    // delay(200);
    // encoderUpdate(&motor->magEncoder);
    // float start_angle = motor->magEncoder.fullAngle;
    // printLog("start_angle:%f\n", start_angle);
    for (int i = 0; i <= 500; i++)
 800a78c:	2300      	movs	r3, #0
 800a78e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a790:	e025      	b.n	800a7de <alignSensor+0x5a>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800a792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a794:	ee07 3a90 	vmov	s15, r3
 800a798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a79c:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800a9a4 <alignSensor+0x220>
 800a7a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a7a4:	eddf 6a80 	vldr	s13, [pc, #512]	@ 800a9a8 <alignSensor+0x224>
 800a7a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a7ac:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 800a9ac <alignSensor+0x228>
 800a7b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a7b4:	edc7 7a02 	vstr	s15, [r7, #8]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800a7b8:	ed97 1a02 	vldr	s2, [r7, #8]
 800a7bc:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 800a9b0 <alignSensor+0x22c>
 800a7c0:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 800a9b4 <alignSensor+0x230>
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f001 f81f 	bl	800b808 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 fcf1 	bl	800b1b4 <encoderUpdate>
        delay(2);
 800a7d2:	2002      	movs	r0, #2
 800a7d4:	f003 fc1e 	bl	800e014 <delay>
    for (int i = 0; i <= 500; i++)
 800a7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7da:	3301      	adds	r3, #1
 800a7dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a7e4:	ddd5      	ble.n	800a792 <alignSensor+0xe>
    }
    // encoderUpdate(&motor->magEncoder);

    float mid_angle = motor->magEncoder.fullAngle;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	695b      	ldr	r3, [r3, #20]
 800a7ea:	61fb      	str	r3, [r7, #28]
    printLog("mid_angle:%f\n", mid_angle);
 800a7ec:	69f8      	ldr	r0, [r7, #28]
 800a7ee:	f7f5 fed3 	bl	8000598 <__aeabi_f2d>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	4870      	ldr	r0, [pc, #448]	@ (800a9b8 <alignSensor+0x234>)
 800a7f8:	f001 fe56 	bl	800c4a8 <printLog>
    // move one electrical revolution backwards
    for (int i = 500; i >= 0; i--)
 800a7fc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800a800:	623b      	str	r3, [r7, #32]
 800a802:	e025      	b.n	800a850 <alignSensor+0xcc>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800a804:	6a3b      	ldr	r3, [r7, #32]
 800a806:	ee07 3a90 	vmov	s15, r3
 800a80a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a80e:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800a9a4 <alignSensor+0x220>
 800a812:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a816:	eddf 6a64 	vldr	s13, [pc, #400]	@ 800a9a8 <alignSensor+0x224>
 800a81a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a81e:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800a9ac <alignSensor+0x228>
 800a822:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a826:	edc7 7a03 	vstr	s15, [r7, #12]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800a82a:	ed97 1a03 	vldr	s2, [r7, #12]
 800a82e:	eddf 0a60 	vldr	s1, [pc, #384]	@ 800a9b0 <alignSensor+0x22c>
 800a832:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 800a9b4 <alignSensor+0x230>
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 ffe6 	bl	800b808 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 fcb8 	bl	800b1b4 <encoderUpdate>
        delay(2);
 800a844:	2002      	movs	r0, #2
 800a846:	f003 fbe5 	bl	800e014 <delay>
    for (int i = 500; i >= 0; i--)
 800a84a:	6a3b      	ldr	r3, [r7, #32]
 800a84c:	3b01      	subs	r3, #1
 800a84e:	623b      	str	r3, [r7, #32]
 800a850:	6a3b      	ldr	r3, [r7, #32]
 800a852:	2b00      	cmp	r3, #0
 800a854:	dad6      	bge.n	800a804 <alignSensor+0x80>
    }
    // encoderUpdate(&motor->magEncoder);

    float end_angle = motor->magEncoder.fullAngle;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	695b      	ldr	r3, [r3, #20]
 800a85a:	61bb      	str	r3, [r7, #24]
    printLog("end_angle:%f\n", end_angle);
 800a85c:	69b8      	ldr	r0, [r7, #24]
 800a85e:	f7f5 fe9b 	bl	8000598 <__aeabi_f2d>
 800a862:	4602      	mov	r2, r0
 800a864:	460b      	mov	r3, r1
 800a866:	4855      	ldr	r0, [pc, #340]	@ (800a9bc <alignSensor+0x238>)
 800a868:	f001 fe1e 	bl	800c4a8 <printLog>
    // setPhaseVoltage(0, 0, 0);
    delay(200);
 800a86c:	20c8      	movs	r0, #200	@ 0xc8
 800a86e:	f003 fbd1 	bl	800e014 <delay>

    // determine the direction the sensor moved
    float moved = fabsf(mid_angle - end_angle);
 800a872:	ed97 7a07 	vldr	s14, [r7, #28]
 800a876:	edd7 7a06 	vldr	s15, [r7, #24]
 800a87a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a87e:	eef0 7ae7 	vabs.f32	s15, s15
 800a882:	edc7 7a05 	vstr	s15, [r7, #20]
    printLog("moved:%f\n", moved);
 800a886:	6978      	ldr	r0, [r7, #20]
 800a888:	f7f5 fe86 	bl	8000598 <__aeabi_f2d>
 800a88c:	4602      	mov	r2, r0
 800a88e:	460b      	mov	r3, r1
 800a890:	484b      	ldr	r0, [pc, #300]	@ (800a9c0 <alignSensor+0x23c>)
 800a892:	f001 fe09 	bl	800c4a8 <printLog>
    if (moved < MIN_ANGLE_DETECT_MOVEMENT)
 800a896:	edd7 7a05 	vldr	s15, [r7, #20]
 800a89a:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800a9c4 <alignSensor+0x240>
 800a89e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8a6:	d504      	bpl.n	800a8b2 <alignSensor+0x12e>
    { // minimum angle to detect movement
        printLog("Failed to notice movement\n");
 800a8a8:	4847      	ldr	r0, [pc, #284]	@ (800a9c8 <alignSensor+0x244>)
 800a8aa:	f001 fdfd 	bl	800c4a8 <printLog>
        return 0; // failed calibration
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	e073      	b.n	800a99a <alignSensor+0x216>
    }
    else if (mid_angle < end_angle)
 800a8b2:	ed97 7a07 	vldr	s14, [r7, #28]
 800a8b6:	edd7 7a06 	vldr	s15, [r7, #24]
 800a8ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8c2:	d507      	bpl.n	800a8d4 <alignSensor+0x150>
    {
        printLog("sensor_direction==CCW\n");
 800a8c4:	4841      	ldr	r0, [pc, #260]	@ (800a9cc <alignSensor+0x248>)
 800a8c6:	f001 fdef 	bl	800c4a8 <printLog>
        motor->magEncoder.direction = CCW;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	22ff      	movs	r2, #255	@ 0xff
 800a8ce:	f883 2020 	strb.w	r2, [r3, #32]
 800a8d2:	e006      	b.n	800a8e2 <alignSensor+0x15e>
    }
    else
    {
        printLog("sensor_direction==CW\n");
 800a8d4:	483e      	ldr	r0, [pc, #248]	@ (800a9d0 <alignSensor+0x24c>)
 800a8d6:	f001 fde7 	bl	800c4a8 <printLog>
        motor->magEncoder.direction = CW;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	f883 2020 	strb.w	r2, [r3, #32]
    }
    // check pole pair number
    bool pp_check_result = !(fabsf(moved * motor->pole_pairs - _2PI) > 0.5f); // 0.5f is arbitrary number it can be lower or higher!
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a8e8:	ee07 3a90 	vmov	s15, r3
 800a8ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8f0:	edd7 7a05 	vldr	s15, [r7, #20]
 800a8f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8f8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800a9a4 <alignSensor+0x220>
 800a8fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a900:	eef0 7ae7 	vabs.f32	s15, s15
 800a904:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a910:	bfcc      	ite	gt
 800a912:	2301      	movgt	r3, #1
 800a914:	2300      	movle	r3, #0
 800a916:	b2db      	uxtb	r3, r3
 800a918:	f083 0301 	eor.w	r3, r3, #1
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	74fb      	strb	r3, [r7, #19]
    if (pp_check_result == false)
 800a920:	7cfb      	ldrb	r3, [r7, #19]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d10d      	bne.n	800a942 <alignSensor+0x1be>
    {
        printLog("PP check: fail - estimated pp: %d\n", (int)(_2PI / moved));
 800a926:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800a9a4 <alignSensor+0x220>
 800a92a:	ed97 7a05 	vldr	s14, [r7, #20]
 800a92e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a932:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a936:	ee17 1a90 	vmov	r1, s15
 800a93a:	4826      	ldr	r0, [pc, #152]	@ (800a9d4 <alignSensor+0x250>)
 800a93c:	f001 fdb4 	bl	800c4a8 <printLog>
 800a940:	e002      	b.n	800a948 <alignSensor+0x1c4>
    }
    else
    {
        printLog("PP check: OK!\n");
 800a942:	4825      	ldr	r0, [pc, #148]	@ (800a9d8 <alignSensor+0x254>)
 800a944:	f001 fdb0 	bl	800c4a8 <printLog>
    }

    // align the electrical phases of the motor and sensor
    // set angle -90(270 = 3PI/2) degrees
    goToZeroElecAngle(motor);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f7ff ff01 	bl	800a750 <goToZeroElecAngle>
    // read the sensor
    encoderUpdate(&motor->magEncoder);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4618      	mov	r0, r3
 800a952:	f000 fc2f 	bl	800b1b4 <encoderUpdate>
    // get the current zero electric angle
    motor->zeroElectricAngleOffSet = 0;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f04f 0200 	mov.w	r2, #0
 800a95c:	635a      	str	r2, [r3, #52]	@ 0x34
    getElecAngle(motor);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 f840 	bl	800a9e4 <getElecAngle>
    motor->zeroElectricAngleOffSet = motor->angle_el;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	635a      	str	r2, [r3, #52]	@ 0x34
    // zero_electric_angle =  _normalizeAngle(_electricalAngle(sensor_direction*sensor->getAngle(), pole_pairs));

    // encoderUpdate(&motor->magEncoder);
    getElecAngle(motor);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 f839 	bl	800a9e4 <getElecAngle>
    // motor->zeroElectricAngleOffSet = 0;
    // printLog("[zeroAngleOffset]:%f  [zeroAngle]:%f\r\n", motor->zeroElectricAngleOffSet, motor->angle_el);
    printLog("[zeroAngleOffset]:%f\n", motor->zeroElectricAngleOffSet);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a976:	4618      	mov	r0, r3
 800a978:	f7f5 fe0e 	bl	8000598 <__aeabi_f2d>
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	4816      	ldr	r0, [pc, #88]	@ (800a9dc <alignSensor+0x258>)
 800a982:	f001 fd91 	bl	800c4a8 <printLog>
    printLog("[zeroAngle]:%f\n", motor->angle_el);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7f5 fe04 	bl	8000598 <__aeabi_f2d>
 800a990:	4602      	mov	r2, r0
 800a992:	460b      	mov	r3, r1
 800a994:	4812      	ldr	r0, [pc, #72]	@ (800a9e0 <alignSensor+0x25c>)
 800a996:	f001 fd87 	bl	800c4a8 <printLog>
    // // make sure the angle_el is about zero

    // delay(200);
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3728      	adds	r7, #40	@ 0x28
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	40c90fdb 	.word	0x40c90fdb
 800a9a8:	43fa0000 	.word	0x43fa0000
 800a9ac:	4096cbe4 	.word	0x4096cbe4
 800a9b0:	00000000 	.word	0x00000000
 800a9b4:	3fc511a3 	.word	0x3fc511a3
 800a9b8:	080138f8 	.word	0x080138f8
 800a9bc:	08013908 	.word	0x08013908
 800a9c0:	08013918 	.word	0x08013918
 800a9c4:	3d7ecfa9 	.word	0x3d7ecfa9
 800a9c8:	08013924 	.word	0x08013924
 800a9cc:	08013940 	.word	0x08013940
 800a9d0:	08013958 	.word	0x08013958
 800a9d4:	08013970 	.word	0x08013970
 800a9d8:	08013994 	.word	0x08013994
 800a9dc:	080139a4 	.word	0x080139a4
 800a9e0:	080139bc 	.word	0x080139bc

0800a9e4 <getElecAngle>:

void getElecAngle(BldcMotor *motor)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
    motor->angle_el = _normalizeAngle(motor->pole_pairs * motor->magEncoder.shaftAngle - motor->zeroElectricAngleOffSet);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a9f2:	ee07 3a90 	vmov	s15, r3
 800a9f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	edd3 7a04 	vldr	s15, [r3, #16]
 800aa00:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800aa0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa0e:	eeb0 0a67 	vmov.f32	s0, s15
 800aa12:	f000 fd71 	bl	800b4f8 <_normalizeAngle>
 800aa16:	eef0 7a40 	vmov.f32	s15, s0
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
}
 800aa20:	bf00      	nop
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <foc>:

void foc(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b088      	sub	sp, #32
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]

    if (motor->state == MOTOR_CALIBRATE)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d111      	bne.n	800aa62 <foc+0x3a>
    {
        getCurrentOffsets(motor, adc_a, adc_b, 100);
 800aa3e:	2364      	movs	r3, #100	@ 0x64
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	68b9      	ldr	r1, [r7, #8]
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f000 f9af 	bl	800ada8 <getCurrentOffsets>
        alignSensor(motor);
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f7ff fe9a 	bl	800a784 <alignSensor>
        motor->state = MOTOR_READY;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        motor->stopPwm();
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800aa5e:	4798      	blx	r3
                break;
            }
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
        }
    }
}
 800aa60:	e194      	b.n	800ad8c <foc+0x364>
        getPhaseCurrents(motor, adc_a, adc_b);
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	68b9      	ldr	r1, [r7, #8]
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f000 fa6e 	bl	800af48 <getPhaseCurrents>
        getABCurrents(motor);
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f000 fb0d 	bl	800b08c <getABCurrents>
        getDQCurrents(motor);
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f000 fb30 	bl	800b0d8 <getDQCurrents>
        motor->Iq = lpfOperator(&motor->IqFilter, motor->Iq);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f103 02f4 	add.w	r2, r3, #244	@ 0xf4
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800aa84:	eeb0 0a67 	vmov.f32	s0, s15
 800aa88:	4610      	mov	r0, r2
 800aa8a:	f000 fc2d 	bl	800b2e8 <lpfOperator>
 800aa8e:	eef0 7a40 	vmov.f32	s15, s0
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
        motor->Id = lpfOperator(&motor->IdFilter, motor->Id);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800aaa4:	eeb0 0a67 	vmov.f32	s0, s15
 800aaa8:	4610      	mov	r0, r2
 800aaaa:	f000 fc1d 	bl	800b2e8 <lpfOperator>
 800aaae:	eef0 7a40 	vmov.f32	s15, s0
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
        encoderUpdate(&motor->magEncoder);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	4618      	mov	r0, r3
 800aabc:	f000 fb7a 	bl	800b1b4 <encoderUpdate>
        motor->magEncoder.velocity = lpfOperator(&motor->velocityFilter, motor->magEncoder.velocity);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f503 7286 	add.w	r2, r3, #268	@ 0x10c
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	edd3 7a06 	vldr	s15, [r3, #24]
 800aacc:	eeb0 0a67 	vmov.f32	s0, s15
 800aad0:	4610      	mov	r0, r2
 800aad2:	f000 fc09 	bl	800b2e8 <lpfOperator>
 800aad6:	eef0 7a40 	vmov.f32	s15, s0
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	edc3 7a06 	vstr	s15, [r3, #24]
        getElecAngle(motor);
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f7ff ff7f 	bl	800a9e4 <getElecAngle>
        if (motor->state == MOTOR_READY)
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	f000 814d 	beq.w	800ad8c <foc+0x364>
        else if (motor->state == MOTOR_START)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	f040 8147 	bne.w	800ad8c <foc+0x364>
            switch (motor->controlType)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800ab04:	2b03      	cmp	r3, #3
 800ab06:	f200 812f 	bhi.w	800ad68 <foc+0x340>
 800ab0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab10 <foc+0xe8>)
 800ab0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab10:	0800ab7d 	.word	0x0800ab7d
 800ab14:	0800ab21 	.word	0x0800ab21
 800ab18:	0800abe7 	.word	0x0800abe7
 800ab1c:	0800ac97 	.word	0x0800ac97
                motor->target = 50;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	4a9c      	ldr	r2, [pc, #624]	@ (800ad94 <foc+0x36c>)
 800ab24:	631a      	str	r2, [r3, #48]	@ 0x30
                shaftAngle = _normalizeAngle(shaftAngle + motor->target * motor->Ts);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ab32:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab36:	4b98      	ldr	r3, [pc, #608]	@ (800ad98 <foc+0x370>)
 800ab38:	edd3 7a00 	vldr	s15, [r3]
 800ab3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab40:	eeb0 0a67 	vmov.f32	s0, s15
 800ab44:	f000 fcd8 	bl	800b4f8 <_normalizeAngle>
 800ab48:	eef0 7a40 	vmov.f32	s15, s0
 800ab4c:	4b92      	ldr	r3, [pc, #584]	@ (800ad98 <foc+0x370>)
 800ab4e:	edc3 7a00 	vstr	s15, [r3]
                motor->angle_el = _electricalAngle(shaftAngle, motor->pole_pairs);
 800ab52:	4b91      	ldr	r3, [pc, #580]	@ (800ad98 <foc+0x370>)
 800ab54:	edd3 7a00 	vldr	s15, [r3]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ab5e:	4618      	mov	r0, r3
 800ab60:	eeb0 0a67 	vmov.f32	s0, s15
 800ab64:	f000 fcfe 	bl	800b564 <_electricalAngle>
 800ab68:	eef0 7a40 	vmov.f32	s15, s0
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                motor->Uq = OPEN_LOOP_TORQUE;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	4a89      	ldr	r2, [pc, #548]	@ (800ad9c <foc+0x374>)
 800ab76:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                break;
 800ab7a:	e0f5      	b.n	800ad68 <foc+0x340>
                if (motor->torqueType == VOLTAGE)
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d105      	bne.n	800ab92 <foc+0x16a>
                    motor->Uq = motor->target;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                break;
 800ab90:	e0ea      	b.n	800ad68 <foc+0x340>
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ab9e:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800ada0 <foc+0x378>
 800aba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aba6:	eeb0 0a67 	vmov.f32	s0, s15
 800abaa:	4610      	mov	r0, r2
 800abac:	f000 fd24 	bl	800b5f8 <pidOperator>
 800abb0:	eef0 7a40 	vmov.f32	s15, s0
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, motor->target - motor->Iq);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800abcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abd0:	eeb0 0a67 	vmov.f32	s0, s15
 800abd4:	4610      	mov	r0, r2
 800abd6:	f000 fd0f 	bl	800b5f8 <pidOperator>
 800abda:	eef0 7a40 	vmov.f32	s15, s0
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800abe4:	e0c0      	b.n	800ad68 <foc+0x340>
                if (motor->torqueType == VOLTAGE)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800abec:	2b00      	cmp	r3, #0
 800abee:	d116      	bne.n	800ac1e <foc+0x1f6>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	edd3 7a06 	vldr	s15, [r3, #24]
 800abfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac00:	edc7 7a04 	vstr	s15, [r7, #16]
                    motor->Uq = pidOperator(&motor->velocityPID, velocityErr);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	33ac      	adds	r3, #172	@ 0xac
 800ac08:	ed97 0a04 	vldr	s0, [r7, #16]
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f000 fcf3 	bl	800b5f8 <pidOperator>
 800ac12:	eef0 7a40 	vmov.f32	s15, s0
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800ac1c:	e0a4      	b.n	800ad68 <foc+0x340>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	edd3 7a06 	vldr	s15, [r3, #24]
 800ac2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac2e:	edc7 7a04 	vstr	s15, [r7, #16]
                    IqRef = pidOperator(&motor->velocityPID, velocityErr);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	33ac      	adds	r3, #172	@ 0xac
 800ac36:	ed97 0a04 	vldr	s0, [r7, #16]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 fcdc 	bl	800b5f8 <pidOperator>
 800ac40:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ac50:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800ada0 <foc+0x378>
 800ac54:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac58:	eeb0 0a67 	vmov.f32	s0, s15
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	f000 fccb 	bl	800b5f8 <pidOperator>
 800ac62:	eef0 7a40 	vmov.f32	s15, s0
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800ac78:	ed97 7a05 	vldr	s14, [r7, #20]
 800ac7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac80:	eeb0 0a67 	vmov.f32	s0, s15
 800ac84:	4610      	mov	r0, r2
 800ac86:	f000 fcb7 	bl	800b5f8 <pidOperator>
 800ac8a:	eef0 7a40 	vmov.f32	s15, s0
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800ac94:	e068      	b.n	800ad68 <foc+0x340>
                if (motor->torqueType == VOLTAGE)
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d116      	bne.n	800acce <foc+0x2a6>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	edd3 7a05 	vldr	s15, [r3, #20]
 800acac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acb0:	edc7 7a07 	vstr	s15, [r7, #28]
                    motor->Uq = pidOperator(&motor->anglePID, angleErr);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	33d0      	adds	r3, #208	@ 0xd0
 800acb8:	ed97 0a07 	vldr	s0, [r7, #28]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f000 fc9b 	bl	800b5f8 <pidOperator>
 800acc2:	eef0 7a40 	vmov.f32	s15, s0
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800accc:	e04b      	b.n	800ad66 <foc+0x33e>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	edd3 7a05 	vldr	s15, [r3, #20]
 800acda:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acde:	edc7 7a07 	vstr	s15, [r7, #28]
                    velocityRef = pidOperator(&motor->anglePID, angleErr);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	33d0      	adds	r3, #208	@ 0xd0
 800ace6:	ed97 0a07 	vldr	s0, [r7, #28]
 800acea:	4618      	mov	r0, r3
 800acec:	f000 fc84 	bl	800b5f8 <pidOperator>
 800acf0:	ed87 0a06 	vstr	s0, [r7, #24]
                    IqRef = pidOperator(&motor->velocityPID, velocityRef - motor->magEncoder.velocity);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	edd3 7a06 	vldr	s15, [r3, #24]
 800ad00:	ed97 7a06 	vldr	s14, [r7, #24]
 800ad04:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad08:	eeb0 0a67 	vmov.f32	s0, s15
 800ad0c:	4610      	mov	r0, r2
 800ad0e:	f000 fc73 	bl	800b5f8 <pidOperator>
 800ad12:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ad22:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800ada0 <foc+0x378>
 800ad26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad2a:	eeb0 0a67 	vmov.f32	s0, s15
 800ad2e:	4610      	mov	r0, r2
 800ad30:	f000 fc62 	bl	800b5f8 <pidOperator>
 800ad34:	eef0 7a40 	vmov.f32	s15, s0
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800ad4a:	ed97 7a05 	vldr	s14, [r7, #20]
 800ad4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad52:	eeb0 0a67 	vmov.f32	s0, s15
 800ad56:	4610      	mov	r0, r2
 800ad58:	f000 fc4e 	bl	800b5f8 <pidOperator>
 800ad5c:	eef0 7a40 	vmov.f32	s15, s0
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800ad66:	bf00      	nop
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800ad7a:	eeb0 1a66 	vmov.f32	s2, s13
 800ad7e:	eef0 0a47 	vmov.f32	s1, s14
 800ad82:	eeb0 0a67 	vmov.f32	s0, s15
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	f000 fd3e 	bl	800b808 <setTorque>
}
 800ad8c:	bf00      	nop
 800ad8e:	3720      	adds	r7, #32
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	42480000 	.word	0x42480000
 800ad98:	2000079c 	.word	0x2000079c
 800ad9c:	3fc511a3 	.word	0x3fc511a3
	...

0800ada8 <getCurrentOffsets>:
#include "math_utils.h"
#include "focLib.h"

// Function finding zero offsets of the ADC
void getCurrentOffsets(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b, uint32_t rounds)
{
 800ada8:	b5b0      	push	{r4, r5, r7, lr}
 800adaa:	b086      	sub	sp, #24
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
 800adb4:	603b      	str	r3, [r7, #0]
    // find adc offset = zero current voltage
    motor->offset_ia = 0;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f04f 0200 	mov.w	r2, #0
 800adbc:	641a      	str	r2, [r3, #64]	@ 0x40
    motor->offset_ib = 0;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f04f 0200 	mov.w	r2, #0
 800adc4:	645a      	str	r2, [r3, #68]	@ 0x44
    // read the adc voltage  times ( arbitrary number )
    for (int i = 0; i < rounds; i++)
 800adc6:	2300      	movs	r3, #0
 800adc8:	617b      	str	r3, [r7, #20]
 800adca:	e076      	b.n	800aeba <getCurrentOffsets+0x112>
    {
        motor->offset_ia += ADC_2_CURRENT(adc_a);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add0:	4618      	mov	r0, r3
 800add2:	f7f5 fbe1 	bl	8000598 <__aeabi_f2d>
 800add6:	4604      	mov	r4, r0
 800add8:	460d      	mov	r5, r1
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	ee07 3a90 	vmov	s15, r3
 800ade0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ade4:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800af38 <getCurrentOffsets+0x190>
 800ade8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800adec:	ee17 0a90 	vmov	r0, s15
 800adf0:	f7f5 fbd2 	bl	8000598 <__aeabi_f2d>
 800adf4:	a34c      	add	r3, pc, #304	@ (adr r3, 800af28 <getCurrentOffsets+0x180>)
 800adf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfa:	f7f5 fd4f 	bl	800089c <__aeabi_ddiv>
 800adfe:	4602      	mov	r2, r0
 800ae00:	460b      	mov	r3, r1
 800ae02:	4610      	mov	r0, r2
 800ae04:	4619      	mov	r1, r3
 800ae06:	a34a      	add	r3, pc, #296	@ (adr r3, 800af30 <getCurrentOffsets+0x188>)
 800ae08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0c:	f7f5 fd46 	bl	800089c <__aeabi_ddiv>
 800ae10:	4602      	mov	r2, r0
 800ae12:	460b      	mov	r3, r1
 800ae14:	4610      	mov	r0, r2
 800ae16:	4619      	mov	r1, r3
 800ae18:	f04f 0200 	mov.w	r2, #0
 800ae1c:	4b47      	ldr	r3, [pc, #284]	@ (800af3c <getCurrentOffsets+0x194>)
 800ae1e:	f7f5 fd3d 	bl	800089c <__aeabi_ddiv>
 800ae22:	4602      	mov	r2, r0
 800ae24:	460b      	mov	r3, r1
 800ae26:	4620      	mov	r0, r4
 800ae28:	4629      	mov	r1, r5
 800ae2a:	f7f5 fa57 	bl	80002dc <__adddf3>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	460b      	mov	r3, r1
 800ae32:	4610      	mov	r0, r2
 800ae34:	4619      	mov	r1, r3
 800ae36:	f7f5 feff 	bl	8000c38 <__aeabi_d2f>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	641a      	str	r2, [r3, #64]	@ 0x40
        motor->offset_ib += ADC_2_CURRENT(adc_b);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7f5 fba7 	bl	8000598 <__aeabi_f2d>
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	460d      	mov	r5, r1
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	ee07 3a90 	vmov	s15, r3
 800ae54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae58:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800af38 <getCurrentOffsets+0x190>
 800ae5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae60:	ee17 0a90 	vmov	r0, s15
 800ae64:	f7f5 fb98 	bl	8000598 <__aeabi_f2d>
 800ae68:	a32f      	add	r3, pc, #188	@ (adr r3, 800af28 <getCurrentOffsets+0x180>)
 800ae6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6e:	f7f5 fd15 	bl	800089c <__aeabi_ddiv>
 800ae72:	4602      	mov	r2, r0
 800ae74:	460b      	mov	r3, r1
 800ae76:	4610      	mov	r0, r2
 800ae78:	4619      	mov	r1, r3
 800ae7a:	a32d      	add	r3, pc, #180	@ (adr r3, 800af30 <getCurrentOffsets+0x188>)
 800ae7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae80:	f7f5 fd0c 	bl	800089c <__aeabi_ddiv>
 800ae84:	4602      	mov	r2, r0
 800ae86:	460b      	mov	r3, r1
 800ae88:	4610      	mov	r0, r2
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	f04f 0200 	mov.w	r2, #0
 800ae90:	4b2a      	ldr	r3, [pc, #168]	@ (800af3c <getCurrentOffsets+0x194>)
 800ae92:	f7f5 fd03 	bl	800089c <__aeabi_ddiv>
 800ae96:	4602      	mov	r2, r0
 800ae98:	460b      	mov	r3, r1
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	f7f5 fa1d 	bl	80002dc <__adddf3>
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	4610      	mov	r0, r2
 800aea8:	4619      	mov	r1, r3
 800aeaa:	f7f5 fec5 	bl	8000c38 <__aeabi_d2f>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	645a      	str	r2, [r3, #68]	@ 0x44
    for (int i = 0; i < rounds; i++)
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	617b      	str	r3, [r7, #20]
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	683a      	ldr	r2, [r7, #0]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d884      	bhi.n	800adcc <getCurrentOffsets+0x24>
    }
    // calculate the mean offsets
    motor->offset_ia = motor->offset_ia / rounds;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	ee07 3a90 	vmov	s15, r3
 800aece:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    motor->offset_ib = motor->offset_ib / rounds;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	ee07 3a90 	vmov	s15, r3
 800aee8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aeec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    // printLog("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    // printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    printLog("[offset_ia]:%f\r\n", motor->offset_ia);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7f5 fb4c 	bl	8000598 <__aeabi_f2d>
 800af00:	4602      	mov	r2, r0
 800af02:	460b      	mov	r3, r1
 800af04:	480e      	ldr	r0, [pc, #56]	@ (800af40 <getCurrentOffsets+0x198>)
 800af06:	f001 facf 	bl	800c4a8 <printLog>
    printLog("[offset_ib]:%f\r\n", motor->offset_ib);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af0e:	4618      	mov	r0, r3
 800af10:	f7f5 fb42 	bl	8000598 <__aeabi_f2d>
 800af14:	4602      	mov	r2, r0
 800af16:	460b      	mov	r3, r1
 800af18:	480a      	ldr	r0, [pc, #40]	@ (800af44 <getCurrentOffsets+0x19c>)
 800af1a:	f001 fac5 	bl	800c4a8 <printLog>
    // _dbg_printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
}
 800af1e:	bf00      	nop
 800af20:	3718      	adds	r7, #24
 800af22:	46bd      	mov	sp, r7
 800af24:	bdb0      	pop	{r4, r5, r7, pc}
 800af26:	bf00      	nop
 800af28:	00000000 	.word	0x00000000
 800af2c:	40affe00 	.word	0x40affe00
 800af30:	40000000 	.word	0x40000000
 800af34:	3f847ae1 	.word	0x3f847ae1
 800af38:	40533333 	.word	0x40533333
 800af3c:	40240000 	.word	0x40240000
 800af40:	080139cc 	.word	0x080139cc
 800af44:	080139e0 	.word	0x080139e0

0800af48 <getPhaseCurrents>:

// read all three phase currents (if possible 2 or 3)
void getPhaseCurrents(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800af48:	b5b0      	push	{r4, r5, r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
    motor->Ia = ADC_2_CURRENT(adc_a) - motor->offset_ia; // amps
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	ee07 3a90 	vmov	s15, r3
 800af5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af5e:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800b080 <getPhaseCurrents+0x138>
 800af62:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af66:	ee17 0a90 	vmov	r0, s15
 800af6a:	f7f5 fb15 	bl	8000598 <__aeabi_f2d>
 800af6e:	a340      	add	r3, pc, #256	@ (adr r3, 800b070 <getPhaseCurrents+0x128>)
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	f7f5 fc92 	bl	800089c <__aeabi_ddiv>
 800af78:	4602      	mov	r2, r0
 800af7a:	460b      	mov	r3, r1
 800af7c:	4610      	mov	r0, r2
 800af7e:	4619      	mov	r1, r3
 800af80:	a33d      	add	r3, pc, #244	@ (adr r3, 800b078 <getPhaseCurrents+0x130>)
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	f7f5 fc89 	bl	800089c <__aeabi_ddiv>
 800af8a:	4602      	mov	r2, r0
 800af8c:	460b      	mov	r3, r1
 800af8e:	4610      	mov	r0, r2
 800af90:	4619      	mov	r1, r3
 800af92:	f04f 0200 	mov.w	r2, #0
 800af96:	4b3b      	ldr	r3, [pc, #236]	@ (800b084 <getPhaseCurrents+0x13c>)
 800af98:	f7f5 fc80 	bl	800089c <__aeabi_ddiv>
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4614      	mov	r4, r2
 800afa2:	461d      	mov	r5, r3
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7f5 faf5 	bl	8000598 <__aeabi_f2d>
 800afae:	4602      	mov	r2, r0
 800afb0:	460b      	mov	r3, r1
 800afb2:	4620      	mov	r0, r4
 800afb4:	4629      	mov	r1, r5
 800afb6:	f7f5 f98f 	bl	80002d8 <__aeabi_dsub>
 800afba:	4602      	mov	r2, r0
 800afbc:	460b      	mov	r3, r1
 800afbe:	4610      	mov	r0, r2
 800afc0:	4619      	mov	r1, r3
 800afc2:	f7f5 fe39 	bl	8000c38 <__aeabi_d2f>
 800afc6:	4602      	mov	r2, r0
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	649a      	str	r2, [r3, #72]	@ 0x48
    motor->Ic = ADC_2_CURRENT(adc_b) - motor->offset_ib;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	ee07 3a90 	vmov	s15, r3
 800afd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afd6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800b080 <getPhaseCurrents+0x138>
 800afda:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afde:	ee17 0a90 	vmov	r0, s15
 800afe2:	f7f5 fad9 	bl	8000598 <__aeabi_f2d>
 800afe6:	a322      	add	r3, pc, #136	@ (adr r3, 800b070 <getPhaseCurrents+0x128>)
 800afe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afec:	f7f5 fc56 	bl	800089c <__aeabi_ddiv>
 800aff0:	4602      	mov	r2, r0
 800aff2:	460b      	mov	r3, r1
 800aff4:	4610      	mov	r0, r2
 800aff6:	4619      	mov	r1, r3
 800aff8:	a31f      	add	r3, pc, #124	@ (adr r3, 800b078 <getPhaseCurrents+0x130>)
 800affa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affe:	f7f5 fc4d 	bl	800089c <__aeabi_ddiv>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	4610      	mov	r0, r2
 800b008:	4619      	mov	r1, r3
 800b00a:	f04f 0200 	mov.w	r2, #0
 800b00e:	4b1d      	ldr	r3, [pc, #116]	@ (800b084 <getPhaseCurrents+0x13c>)
 800b010:	f7f5 fc44 	bl	800089c <__aeabi_ddiv>
 800b014:	4602      	mov	r2, r0
 800b016:	460b      	mov	r3, r1
 800b018:	4614      	mov	r4, r2
 800b01a:	461d      	mov	r5, r3
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b020:	4618      	mov	r0, r3
 800b022:	f7f5 fab9 	bl	8000598 <__aeabi_f2d>
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	4620      	mov	r0, r4
 800b02c:	4629      	mov	r1, r5
 800b02e:	f7f5 f953 	bl	80002d8 <__aeabi_dsub>
 800b032:	4602      	mov	r2, r0
 800b034:	460b      	mov	r3, r1
 800b036:	4610      	mov	r0, r2
 800b038:	4619      	mov	r1, r3
 800b03a:	f7f5 fdfd 	bl	8000c38 <__aeabi_d2f>
 800b03e:	4602      	mov	r2, r0
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	651a      	str	r2, [r3, #80]	@ 0x50
    motor->Ib = 0 - motor->Ia - motor->Ic;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800b04a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800b088 <getPhaseCurrents+0x140>
 800b04e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800b058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
}
 800b062:	bf00      	nop
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bdb0      	pop	{r4, r5, r7, pc}
 800b06a:	bf00      	nop
 800b06c:	f3af 8000 	nop.w
 800b070:	00000000 	.word	0x00000000
 800b074:	40affe00 	.word	0x40affe00
 800b078:	40000000 	.word	0x40000000
 800b07c:	3f847ae1 	.word	0x3f847ae1
 800b080:	40533333 	.word	0x40533333
 800b084:	40240000 	.word	0x40240000
 800b088:	00000000 	.word	0x00000000

0800b08c <getABCurrents>:
// Ibeta = 1/sqrt(3) * Ia + 1/sqrt(3) * 2Ib
/*============================================================================*/
//   calculating Alpha Beta currents from phase currents
//   - function calculating Clarke transform of the phase currents
void getABCurrents(BldcMotor *motor)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
    motor->Ialpha = motor->Ia;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	655a      	str	r2, [r3, #84]	@ 0x54
    motor->Ibeta = _1_SQRT3 * motor->Ia + _2_SQRT3 * motor->Ib;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800b0a2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800b0d0 <getABCurrents+0x44>
 800b0a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800b0b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800b0d4 <getABCurrents+0x48>
 800b0b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b0b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
}
 800b0c2:	bf00      	nop
 800b0c4:	370c      	adds	r7, #12
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	3f13cd3a 	.word	0x3f13cd3a
 800b0d4:	3f93cd3a 	.word	0x3f93cd3a

0800b0d8 <getDQCurrents>:
/*============================================================================*/
// function used with the foc algorihtm
//   calculating D and Q currents from Alpha Beta currents and electrical angle
//   - function calculating Clarke transform of the phase currents
void getDQCurrents(BldcMotor *motor)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
    float ct;
    float st;
    _sincos(motor->angle_el, &st, &ct);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800b0e6:	f107 020c 	add.w	r2, r7, #12
 800b0ea:	f107 0308 	add.w	r3, r7, #8
 800b0ee:	4611      	mov	r1, r2
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	eeb0 0a67 	vmov.f32	s0, s15
 800b0f6:	f000 f9df 	bl	800b4b8 <_sincos>
    motor->Id = motor->Ialpha * ct + motor->Ibeta * st;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800b100:	edd7 7a03 	vldr	s15, [r7, #12]
 800b104:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800b10e:	edd7 7a02 	vldr	s15, [r7, #8]
 800b112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
    motor->Iq = motor->Ibeta * ct - motor->Ialpha * st;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 800b126:	edd7 7a03 	vldr	s15, [r7, #12]
 800b12a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800b134:	edd7 7a02 	vldr	s15, [r7, #8]
 800b138:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b13c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
 800b146:	bf00      	nop
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <encoderInit>:

#include "encoder.h"
#include "math_utils.h"
#include "focLib.h"
void encoderInit(MagEncoder *encoder, float _Ts, float (*_getRawAngle)(void), Direction _direction)
{
 800b14e:	b480      	push	{r7}
 800b150:	b085      	sub	sp, #20
 800b152:	af00      	add	r7, sp, #0
 800b154:	60f8      	str	r0, [r7, #12]
 800b156:	ed87 0a02 	vstr	s0, [r7, #8]
 800b15a:	6079      	str	r1, [r7, #4]
 800b15c:	4613      	mov	r3, r2
 800b15e:	70fb      	strb	r3, [r7, #3]
    encoder->angle_prev = 0;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f04f 0200 	mov.w	r2, #0
 800b166:	601a      	str	r2, [r3, #0]
    encoder->vel_angle_prev = 0;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f04f 0200 	mov.w	r2, #0
 800b16e:	605a      	str	r2, [r3, #4]
    encoder->full_rotations = 0;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2200      	movs	r2, #0
 800b174:	609a      	str	r2, [r3, #8]
    encoder->vel_full_rotations = 0;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2200      	movs	r2, #0
 800b17a:	60da      	str	r2, [r3, #12]
    encoder->shaftAngle = 0;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f04f 0200 	mov.w	r2, #0
 800b182:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = 0;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f04f 0200 	mov.w	r2, #0
 800b18a:	615a      	str	r2, [r3, #20]
    encoder->velocity = 0;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f04f 0200 	mov.w	r2, #0
 800b192:	619a      	str	r2, [r3, #24]
    encoder->Ts = _Ts;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	68ba      	ldr	r2, [r7, #8]
 800b198:	61da      	str	r2, [r3, #28]
    encoder->getRawAngle = _getRawAngle;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	625a      	str	r2, [r3, #36]	@ 0x24
    encoder->direction = _direction;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	78fa      	ldrb	r2, [r7, #3]
 800b1a4:	f883 2020 	strb.w	r2, [r3, #32]
}
 800b1a8:	bf00      	nop
 800b1aa:	3714      	adds	r7, #20
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <encoderUpdate>:

void encoderUpdate(MagEncoder *encoder)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
    float val = encoder->getRawAngle() * encoder->direction;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1c0:	4798      	blx	r3
 800b1c2:	eeb0 7a40 	vmov.f32	s14, s0
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800b1cc:	ee07 3a90 	vmov	s15, r3
 800b1d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1d8:	edc7 7a03 	vstr	s15, [r7, #12]

    float d_angle = val - encoder->angle_prev;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	edd3 7a00 	vldr	s15, [r3]
 800b1e2:	ed97 7a03 	vldr	s14, [r7, #12]
 800b1e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1ea:	edc7 7a02 	vstr	s15, [r7, #8]
    // 圈数检测
    if (fabsf(d_angle) > (0.8f * _2PI))
 800b1ee:	edd7 7a02 	vldr	s15, [r7, #8]
 800b1f2:	eef0 7ae7 	vabs.f32	s15, s15
 800b1f6:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800b2b0 <encoderUpdate+0xfc>
 800b1fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b202:	dd0f      	ble.n	800b224 <encoderUpdate+0x70>
        encoder->full_rotations += (d_angle > 0) ? -1 : 1;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	edd7 7a02 	vldr	s15, [r7, #8]
 800b20c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b214:	dd02      	ble.n	800b21c <encoderUpdate+0x68>
 800b216:	f04f 32ff 	mov.w	r2, #4294967295
 800b21a:	e000      	b.n	800b21e <encoderUpdate+0x6a>
 800b21c:	2201      	movs	r2, #1
 800b21e:	441a      	add	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	609a      	str	r2, [r3, #8]

    // angle
    encoder->angle_prev = val;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	601a      	str	r2, [r3, #0]
    encoder->shaftAngle = val;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = (float)encoder->full_rotations * _2PI + encoder->angle_prev;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	ee07 3a90 	vmov	s15, r3
 800b238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b23c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800b2b4 <encoderUpdate+0x100>
 800b240:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	edd3 7a00 	vldr	s15, [r3]
 800b24a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	edc3 7a05 	vstr	s15, [r3, #20]

    // 速度计算
    val = ((float)(encoder->full_rotations - encoder->vel_full_rotations) * _2PI + (encoder->angle_prev - encoder->vel_angle_prev)) / encoder->Ts;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	689a      	ldr	r2, [r3, #8]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	1ad3      	subs	r3, r2, r3
 800b25e:	ee07 3a90 	vmov	s15, r3
 800b262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b266:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800b2b4 <encoderUpdate+0x100>
 800b26a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	edd3 6a00 	vldr	s13, [r3]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	edd3 7a01 	vldr	s15, [r3, #4]
 800b27a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b27e:	ee77 6a27 	vadd.f32	s13, s14, s15
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	ed93 7a07 	vldr	s14, [r3, #28]
 800b288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b28c:	edc7 7a03 	vstr	s15, [r7, #12]
    // 保存变量以待将来使用
    encoder->vel_angle_prev = encoder->angle_prev;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	605a      	str	r2, [r3, #4]
    encoder->vel_full_rotations = encoder->full_rotations;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	689a      	ldr	r2, [r3, #8]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	60da      	str	r2, [r3, #12]
    encoder->velocity = val;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	619a      	str	r2, [r3, #24]
}
 800b2a6:	bf00      	nop
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	40a0d97c 	.word	0x40a0d97c
 800b2b4:	40c90fdb 	.word	0x40c90fdb

0800b2b8 <lpfInit>:
#include "lowpass_filter.h"

void lpfInit(LowPassFilter *filter, const float _Tf, const float _dt)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	ed87 0a02 	vstr	s0, [r7, #8]
 800b2c4:	edc7 0a01 	vstr	s1, [r7, #4]
    filter->Tf = _Tf;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	601a      	str	r2, [r3, #0]
    filter->dt = _dt;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	605a      	str	r2, [r3, #4]
    filter->y_prev = 0;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f04f 0200 	mov.w	r2, #0
 800b2da:	609a      	str	r2, [r3, #8]
}
 800b2dc:	bf00      	nop
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <lpfOperator>:

float lpfOperator(LowPassFilter *filter, float x)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	ed87 0a00 	vstr	s0, [r7]

    float alpha = filter->Tf / (filter->Tf + filter->dt);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	edd3 6a00 	vldr	s13, [r3]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	ed93 7a00 	vldr	s14, [r3]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	edd3 7a01 	vldr	s15, [r3, #4]
 800b306:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b30a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b30e:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha * filter->y_prev + (1.0f - alpha) * x;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	ed93 7a02 	vldr	s14, [r3, #8]
 800b318:	edd7 7a03 	vldr	s15, [r7, #12]
 800b31c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b320:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b324:	edd7 7a03 	vldr	s15, [r7, #12]
 800b328:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b32c:	edd7 7a00 	vldr	s15, [r7]
 800b330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b334:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b338:	edc7 7a02 	vstr	s15, [r7, #8]
    filter->y_prev = y;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	68ba      	ldr	r2, [r7, #8]
 800b340:	609a      	str	r2, [r3, #8]

    return y;
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	ee07 3a90 	vmov	s15, r3
}
 800b348:	eeb0 0a67 	vmov.f32	s0, s15
 800b34c:	3714      	adds	r7, #20
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
	...

0800b358 <_sin>:
#include "focLib.h"
// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b086      	sub	sp, #24
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f7f5 f918 	bl	8000598 <__aeabi_f2d>
 800b368:	a339      	add	r3, pc, #228	@ (adr r3, 800b450 <_sin+0xf8>)
 800b36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36e:	f7f5 f96b 	bl	8000648 <__aeabi_dmul>
 800b372:	4602      	mov	r2, r0
 800b374:	460b      	mov	r3, r1
 800b376:	4610      	mov	r0, r2
 800b378:	4619      	mov	r1, r3
 800b37a:	f7f5 fc3d 	bl	8000bf8 <__aeabi_d2uiz>
 800b37e:	4603      	mov	r3, r0
 800b380:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	b2db      	uxtb	r3, r3
 800b386:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	0a1b      	lsrs	r3, r3, #8
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2b3f      	cmp	r3, #63	@ 0x3f
 800b394:	d80b      	bhi.n	800b3ae <_sin+0x56>
  {
    t1 = sine_array[i];
 800b396:	4a2c      	ldr	r2, [pc, #176]	@ (800b448 <_sin+0xf0>)
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b39e:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	4a28      	ldr	r2, [pc, #160]	@ (800b448 <_sin+0xf0>)
 800b3a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3aa:	613b      	str	r3, [r7, #16]
 800b3ac:	e033      	b.n	800b416 <_sin+0xbe>
  }
  else if (i < 128)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2b7f      	cmp	r3, #127	@ 0x7f
 800b3b2:	d80e      	bhi.n	800b3d2 <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800b3ba:	4a23      	ldr	r2, [pc, #140]	@ (800b448 <_sin+0xf0>)
 800b3bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3c0:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800b3c8:	4a1f      	ldr	r2, [pc, #124]	@ (800b448 <_sin+0xf0>)
 800b3ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3ce:	613b      	str	r3, [r7, #16]
 800b3d0:	e021      	b.n	800b416 <_sin+0xbe>
  }
  else if (i < 192)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2bbf      	cmp	r3, #191	@ 0xbf
 800b3d6:	d80e      	bhi.n	800b3f6 <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	3b80      	subs	r3, #128	@ 0x80
 800b3dc:	4a1a      	ldr	r2, [pc, #104]	@ (800b448 <_sin+0xf0>)
 800b3de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3e2:	425b      	negs	r3, r3
 800b3e4:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	3b7f      	subs	r3, #127	@ 0x7f
 800b3ea:	4a17      	ldr	r2, [pc, #92]	@ (800b448 <_sin+0xf0>)
 800b3ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3f0:	425b      	negs	r3, r3
 800b3f2:	613b      	str	r3, [r7, #16]
 800b3f4:	e00f      	b.n	800b416 <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800b3fc:	4a12      	ldr	r2, [pc, #72]	@ (800b448 <_sin+0xf0>)
 800b3fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b402:	425b      	negs	r3, r3
 800b404:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800b40c:	4a0e      	ldr	r2, [pc, #56]	@ (800b448 <_sin+0xf0>)
 800b40e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b412:	425b      	negs	r3, r3
 800b414:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	68ba      	ldr	r2, [r7, #8]
 800b41e:	fb02 f303 	mul.w	r3, r2, r3
 800b422:	121a      	asrs	r2, r3, #8
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	4413      	add	r3, r2
 800b428:	ee07 3a90 	vmov	s15, r3
 800b42c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b430:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800b44c <_sin+0xf4>
 800b434:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b438:	eeb0 0a67 	vmov.f32	s0, s15
 800b43c:	3718      	adds	r7, #24
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	f3af 8000 	nop.w
 800b448:	2000000c 	.word	0x2000000c
 800b44c:	38000000 	.word	0x38000000
 800b450:	6446f9b4 	.word	0x6446f9b4
 800b454:	40c45f30 	.word	0x40c45f30

0800b458 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800b462:	edd7 7a01 	vldr	s15, [r7, #4]
 800b466:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800b4b0 <_cos+0x58>
 800b46a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b46e:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800b472:	edd7 7a03 	vldr	s15, [r7, #12]
 800b476:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800b4b4 <_cos+0x5c>
 800b47a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b482:	dd06      	ble.n	800b492 <_cos+0x3a>
 800b484:	edd7 7a03 	vldr	s15, [r7, #12]
 800b488:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800b4b4 <_cos+0x5c>
 800b48c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b490:	e001      	b.n	800b496 <_cos+0x3e>
 800b492:	edd7 7a03 	vldr	s15, [r7, #12]
 800b496:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800b49a:	ed97 0a03 	vldr	s0, [r7, #12]
 800b49e:	f7ff ff5b 	bl	800b358 <_sin>
 800b4a2:	eef0 7a40 	vmov.f32	s15, s0
}
 800b4a6:	eeb0 0a67 	vmov.f32	s0, s15
 800b4aa:	3710      	adds	r7, #16
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	3fc90fdb 	.word	0x3fc90fdb
 800b4b4:	40c90fdb 	.word	0x40c90fdb

0800b4b8 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	ed87 0a03 	vstr	s0, [r7, #12]
 800b4c2:	60b8      	str	r0, [r7, #8]
 800b4c4:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800b4c6:	ed97 0a03 	vldr	s0, [r7, #12]
 800b4ca:	f7ff ff45 	bl	800b358 <_sin>
 800b4ce:	eef0 7a40 	vmov.f32	s15, s0
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800b4d8:	ed97 0a03 	vldr	s0, [r7, #12]
 800b4dc:	f7ff ffbc 	bl	800b458 <_cos>
 800b4e0:	eef0 7a40 	vmov.f32	s15, s0
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	edc3 7a00 	vstr	s15, [r3]
}
 800b4ea:	bf00      	nop
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	0000      	movs	r0, r0
 800b4f4:	0000      	movs	r0, r0
	...

0800b4f8 <_normalizeAngle>:
  return r;
}

// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f7f5 f848 	bl	8000598 <__aeabi_f2d>
 800b508:	4602      	mov	r2, r0
 800b50a:	460b      	mov	r3, r1
 800b50c:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 800b558 <_normalizeAngle+0x60>
 800b510:	ec43 2b10 	vmov	d0, r2, r3
 800b514:	f007 fb3c 	bl	8012b90 <fmod>
 800b518:	ec53 2b10 	vmov	r2, r3, d0
 800b51c:	4610      	mov	r0, r2
 800b51e:	4619      	mov	r1, r3
 800b520:	f7f5 fb8a 	bl	8000c38 <__aeabi_d2f>
 800b524:	4603      	mov	r3, r0
 800b526:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 800b528:	edd7 7a03 	vldr	s15, [r7, #12]
 800b52c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b534:	db02      	blt.n	800b53c <_normalizeAngle+0x44>
 800b536:	edd7 7a03 	vldr	s15, [r7, #12]
 800b53a:	e005      	b.n	800b548 <_normalizeAngle+0x50>
 800b53c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b540:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800b560 <_normalizeAngle+0x68>
 800b544:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800b548:	eeb0 0a67 	vmov.f32	s0, s15
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	f3af 8000 	nop.w
 800b558:	60000000 	.word	0x60000000
 800b55c:	401921fb 	.word	0x401921fb
 800b560:	40c90fdb 	.word	0x40c90fdb

0800b564 <_electricalAngle>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs)
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
 800b56a:	ed87 0a01 	vstr	s0, [r7, #4]
 800b56e:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	ee07 3a90 	vmov	s15, r3
 800b576:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b57a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b57e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800b582:	eeb0 0a67 	vmov.f32	s0, s15
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <pidInit>:
#include "pid.h"
#include "math_utils.h"

void pidInit(PidController *pidController, float _P, float _I, float _D, float _ramp, float _limit, float _Ts)
{
 800b590:	b480      	push	{r7}
 800b592:	b089      	sub	sp, #36	@ 0x24
 800b594:	af00      	add	r7, sp, #0
 800b596:	61f8      	str	r0, [r7, #28]
 800b598:	ed87 0a06 	vstr	s0, [r7, #24]
 800b59c:	edc7 0a05 	vstr	s1, [r7, #20]
 800b5a0:	ed87 1a04 	vstr	s2, [r7, #16]
 800b5a4:	edc7 1a03 	vstr	s3, [r7, #12]
 800b5a8:	ed87 2a02 	vstr	s4, [r7, #8]
 800b5ac:	edc7 2a01 	vstr	s5, [r7, #4]
    pidController->P = _P;
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	69ba      	ldr	r2, [r7, #24]
 800b5b4:	601a      	str	r2, [r3, #0]
    pidController->I = _I;
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	697a      	ldr	r2, [r7, #20]
 800b5ba:	605a      	str	r2, [r3, #4]
    pidController->D = _D;
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	693a      	ldr	r2, [r7, #16]
 800b5c0:	609a      	str	r2, [r3, #8]
    pidController->output_ramp = _ramp;
 800b5c2:	69fb      	ldr	r3, [r7, #28]
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	60da      	str	r2, [r3, #12]
    pidController->limit = _limit;
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	611a      	str	r2, [r3, #16]
    pidController->Ts = _Ts;
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	621a      	str	r2, [r3, #32]
    pidController->error_prev = 0;
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	f04f 0200 	mov.w	r2, #0
 800b5da:	615a      	str	r2, [r3, #20]
    pidController->output_prev = 0;
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	f04f 0200 	mov.w	r2, #0
 800b5e2:	619a      	str	r2, [r3, #24]
    pidController->integral_prev = 0;
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	f04f 0200 	mov.w	r2, #0
 800b5ea:	61da      	str	r2, [r3, #28]
}
 800b5ec:	bf00      	nop
 800b5ee:	3724      	adds	r7, #36	@ 0x24
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <pidOperator>:

// PID controller function
float pidOperator(PidController *pidController, float error)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b08b      	sub	sp, #44	@ 0x2c
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	ed87 0a00 	vstr	s0, [r7]
    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = pidController->P * error;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	edd3 7a00 	vldr	s15, [r3]
 800b60a:	ed97 7a00 	vldr	s14, [r7]
 800b60e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b612:	edc7 7a08 	vstr	s15, [r7, #32]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float a = 0.5f * (error + pidController->error_prev);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	ed93 7a05 	vldr	s14, [r3, #20]
 800b61c:	edd7 7a00 	vldr	s15, [r7]
 800b620:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b624:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b62c:	edc7 7a07 	vstr	s15, [r7, #28]
    float b = pidController->I * pidController->Ts;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	ed93 7a01 	vldr	s14, [r3, #4]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	edd3 7a08 	vldr	s15, [r3, #32]
 800b63c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b640:	edc7 7a06 	vstr	s15, [r7, #24]
    float integral = pidController->integral_prev + pidController->I * pidController->Ts * 0.5f * (error + pidController->error_prev);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	ed93 7a07 	vldr	s14, [r3, #28]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	edd3 6a01 	vldr	s13, [r3, #4]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	edd3 7a08 	vldr	s15, [r3, #32]
 800b656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b65a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800b65e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	ed93 6a05 	vldr	s12, [r3, #20]
 800b668:	edd7 7a00 	vldr	s15, [r7]
 800b66c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b670:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b674:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b678:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -pidController->limit, pidController->limit);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	edd3 7a04 	vldr	s15, [r3, #16]
 800b682:	eef1 7a67 	vneg.f32	s15, s15
 800b686:	ed97 7a05 	vldr	s14, [r7, #20]
 800b68a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b692:	d505      	bpl.n	800b6a0 <pidOperator+0xa8>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	edd3 7a04 	vldr	s15, [r3, #16]
 800b69a:	eef1 7a67 	vneg.f32	s15, s15
 800b69e:	e00f      	b.n	800b6c0 <pidOperator+0xc8>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	edd3 7a04 	vldr	s15, [r3, #16]
 800b6a6:	ed97 7a05 	vldr	s14, [r7, #20]
 800b6aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b2:	dd03      	ble.n	800b6bc <pidOperator+0xc4>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	edd3 7a04 	vldr	s15, [r3, #16]
 800b6ba:	e001      	b.n	800b6c0 <pidOperator+0xc8>
 800b6bc:	edd7 7a05 	vldr	s15, [r7, #20]
 800b6c0:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = pidController->D * (error - pidController->error_prev) / pidController->Ts;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	ed93 7a02 	vldr	s14, [r3, #8]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	edd3 7a05 	vldr	s15, [r3, #20]
 800b6d0:	edd7 6a00 	vldr	s13, [r7]
 800b6d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b6d8:	ee67 6a27 	vmul.f32	s13, s14, s15
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	ed93 7a08 	vldr	s14, [r3, #32]
 800b6e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6e6:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 800b6ea:	ed97 7a08 	vldr	s14, [r7, #32]
 800b6ee:	edd7 7a05 	vldr	s15, [r7, #20]
 800b6f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6f6:	ed97 7a04 	vldr	s14, [r7, #16]
 800b6fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // antiwindup - limit the output variable
    output = _constrain(output, -pidController->limit, pidController->limit);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	edd3 7a04 	vldr	s15, [r3, #16]
 800b708:	eef1 7a67 	vneg.f32	s15, s15
 800b70c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b710:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b718:	d505      	bpl.n	800b726 <pidOperator+0x12e>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	edd3 7a04 	vldr	s15, [r3, #16]
 800b720:	eef1 7a67 	vneg.f32	s15, s15
 800b724:	e00f      	b.n	800b746 <pidOperator+0x14e>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	edd3 7a04 	vldr	s15, [r3, #16]
 800b72c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b738:	dd03      	ble.n	800b742 <pidOperator+0x14a>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	edd3 7a04 	vldr	s15, [r3, #16]
 800b740:	e001      	b.n	800b746 <pidOperator+0x14e>
 800b742:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b746:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // if output ramp defined
    if (pidController->output_ramp > 0)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	edd3 7a03 	vldr	s15, [r3, #12]
 800b750:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b758:	dd42      	ble.n	800b7e0 <pidOperator+0x1e8>
    {
        // limit the acceleration by ramping the output
        float output_rate = (output - pidController->output_prev) / pidController->Ts;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	edd3 7a06 	vldr	s15, [r3, #24]
 800b760:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b764:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	ed93 7a08 	vldr	s14, [r3, #32]
 800b76e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b772:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > pidController->output_ramp)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	edd3 7a03 	vldr	s15, [r3, #12]
 800b77c:	ed97 7a03 	vldr	s14, [r7, #12]
 800b780:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b788:	dd0f      	ble.n	800b7aa <pidOperator+0x1b2>
            output = pidController->output_prev + pidController->output_ramp * pidController->Ts;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	ed93 7a06 	vldr	s14, [r3, #24]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	edd3 6a03 	vldr	s13, [r3, #12]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	edd3 7a08 	vldr	s15, [r3, #32]
 800b79c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b7a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7a4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800b7a8:	e01a      	b.n	800b7e0 <pidOperator+0x1e8>
        else if (output_rate < -pidController->output_ramp)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	edd3 7a03 	vldr	s15, [r3, #12]
 800b7b0:	eef1 7a67 	vneg.f32	s15, s15
 800b7b4:	ed97 7a03 	vldr	s14, [r7, #12]
 800b7b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c0:	d50e      	bpl.n	800b7e0 <pidOperator+0x1e8>
            output = pidController->output_prev - pidController->output_ramp * pidController->Ts;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	ed93 7a06 	vldr	s14, [r3, #24]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	edd3 6a03 	vldr	s13, [r3, #12]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	edd3 7a08 	vldr	s15, [r3, #32]
 800b7d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b7d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    // saving for the next pass
    pidController->integral_prev = integral;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	697a      	ldr	r2, [r7, #20]
 800b7e4:	61da      	str	r2, [r3, #28]
    pidController->output_prev = output;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7ea:	619a      	str	r2, [r3, #24]
    pidController->error_prev = error;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	683a      	ldr	r2, [r7, #0]
 800b7f0:	615a      	str	r2, [r3, #20]
    return output;
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f4:	ee07 3a90 	vmov	s15, r3
}
 800b7f8:	eeb0 0a67 	vmov.f32	s0, s15
 800b7fc:	372c      	adds	r7, #44	@ 0x2c
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
	...

0800b808 <setTorque>:
    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
}
#elif 1

void setTorque(BldcMotor *motor, float Uq, float Ud, float angle_el)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b08e      	sub	sp, #56	@ 0x38
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	ed87 0a02 	vstr	s0, [r7, #8]
 800b814:	edc7 0a01 	vstr	s1, [r7, #4]
 800b818:	ed87 1a00 	vstr	s2, [r7]
    float Ualpha, Ubeta;
    float Ua, Ub, Uc;

    // Sinusoidal PWM modulation
    // Inverse Park + Clarke transformation
    _sincos(angle_el, &_sa, &_ca);
 800b81c:	f107 0214 	add.w	r2, r7, #20
 800b820:	f107 0310 	add.w	r3, r7, #16
 800b824:	4611      	mov	r1, r2
 800b826:	4618      	mov	r0, r3
 800b828:	ed97 0a00 	vldr	s0, [r7]
 800b82c:	f7ff fe44 	bl	800b4b8 <_sincos>

    // Inverse park transform
    Ualpha = _ca * Ud - _sa * Uq; // -sin(angle) * Uq;
 800b830:	ed97 7a05 	vldr	s14, [r7, #20]
 800b834:	edd7 7a01 	vldr	s15, [r7, #4]
 800b838:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b83c:	edd7 6a04 	vldr	s13, [r7, #16]
 800b840:	edd7 7a02 	vldr	s15, [r7, #8]
 800b844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b848:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b84c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Ubeta = _sa * Ud + _ca * Uq;  //  cos(angle) * Uq;
 800b850:	ed97 7a04 	vldr	s14, [r7, #16]
 800b854:	edd7 7a01 	vldr	s15, [r7, #4]
 800b858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b85c:	edd7 6a05 	vldr	s13, [r7, #20]
 800b860:	edd7 7a02 	vldr	s15, [r7, #8]
 800b864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b86c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Clarke transform
    Ua = Ualpha;
 800b870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b872:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Ub = -0.5f * Ualpha + _SQRT3_2 * Ubeta;
 800b874:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800b878:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800b87c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b880:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b884:	eddf 6a95 	vldr	s13, [pc, #596]	@ 800badc <setTorque+0x2d4>
 800b888:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b88c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b890:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc = -0.5f * Ualpha - _SQRT3_2 * Ubeta;
 800b894:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800b898:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800b89c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b8a0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800b8a4:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 800badc <setTorque+0x2d4>
 800b8a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b8ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    center = U_DC / 2;
 800b8b4:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 800b8b8:	623b      	str	r3, [r7, #32]

    // discussed here: https://community.simplefoc.com/t/embedded-world-2023-stm32-cordic-co-processor/3107/165?u=candas1
    // a bit more info here: https://microchipdeveloper.com/mct5001:which-zsm-is-best
    // Midpoint Clamp
    float Umin = min(Ua, min(Ub, Uc));
 800b8ba:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b8be:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b8c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8ca:	d502      	bpl.n	800b8d2 <setTorque+0xca>
 800b8cc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b8d0:	e001      	b.n	800b8d6 <setTorque+0xce>
 800b8d2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b8d6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b8da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8e2:	dd01      	ble.n	800b8e8 <setTorque+0xe0>
 800b8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8e6:	e00b      	b.n	800b900 <setTorque+0xf8>
 800b8e8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b8ec:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b8f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8f8:	d501      	bpl.n	800b8fe <setTorque+0xf6>
 800b8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8fc:	e000      	b.n	800b900 <setTorque+0xf8>
 800b8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b900:	61fb      	str	r3, [r7, #28]
    float Umax = max(Ua, max(Ub, Uc));
 800b902:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b906:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b90a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b912:	dd02      	ble.n	800b91a <setTorque+0x112>
 800b914:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b918:	e001      	b.n	800b91e <setTorque+0x116>
 800b91a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b91e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b922:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b92a:	d501      	bpl.n	800b930 <setTorque+0x128>
 800b92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b92e:	e00b      	b.n	800b948 <setTorque+0x140>
 800b930:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b934:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b938:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b940:	dd01      	ble.n	800b946 <setTorque+0x13e>
 800b942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b944:	e000      	b.n	800b948 <setTorque+0x140>
 800b946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b948:	61bb      	str	r3, [r7, #24]
    center -= (Umax + Umin) / 2;
 800b94a:	ed97 7a06 	vldr	s14, [r7, #24]
 800b94e:	edd7 7a07 	vldr	s15, [r7, #28]
 800b952:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b956:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b95a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b95e:	ed97 7a08 	vldr	s14, [r7, #32]
 800b962:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b966:	edc7 7a08 	vstr	s15, [r7, #32]

    Ua += center;
 800b96a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b96e:	edd7 7a08 	vldr	s15, [r7, #32]
 800b972:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b976:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    Ub += center;
 800b97a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b97e:	edd7 7a08 	vldr	s15, [r7, #32]
 800b982:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b986:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc += center;
 800b98a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b98e:	edd7 7a08 	vldr	s15, [r7, #32]
 800b992:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b996:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    motor->Ta = _constrain(Ua / U_DC, 0.0f, 1.0f);
 800b99a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b99e:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b9a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b9a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ae:	d502      	bpl.n	800b9b6 <setTorque+0x1ae>
 800b9b0:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 800bae0 <setTorque+0x2d8>
 800b9b4:	e015      	b.n	800b9e2 <setTorque+0x1da>
 800b9b6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b9ba:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b9be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b9c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b9c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ce:	dd02      	ble.n	800b9d6 <setTorque+0x1ce>
 800b9d0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b9d4:	e005      	b.n	800b9e2 <setTorque+0x1da>
 800b9d6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b9da:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b9de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
    motor->Tb = _constrain(Ub / U_DC, 0.0f, 1.0f);
 800b9e8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b9ec:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800b9f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b9f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9fc:	d502      	bpl.n	800ba04 <setTorque+0x1fc>
 800b9fe:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800bae0 <setTorque+0x2d8>
 800ba02:	e015      	b.n	800ba30 <setTorque+0x228>
 800ba04:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800ba08:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800ba0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba14:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba1c:	dd02      	ble.n	800ba24 <setTorque+0x21c>
 800ba1e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ba22:	e005      	b.n	800ba30 <setTorque+0x228>
 800ba24:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800ba28:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800ba2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
    motor->Tc = _constrain(Uc / U_DC, 0.0f, 1.0f);
 800ba36:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800ba3a:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800ba3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4a:	d502      	bpl.n	800ba52 <setTorque+0x24a>
 800ba4c:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800bae0 <setTorque+0x2d8>
 800ba50:	e015      	b.n	800ba7e <setTorque+0x276>
 800ba52:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800ba56:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800ba5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba62:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6a:	dd02      	ble.n	800ba72 <setTorque+0x26a>
 800ba6c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ba70:	e005      	b.n	800ba7e <setTorque+0x276>
 800ba72:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800ba76:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800ba7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	edc3 7a4c 	vstr	s15, [r3, #304]	@ 0x130

    motor->updatePwm(HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tc);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800ba8a:	68fa      	ldr	r2, [r7, #12]
 800ba8c:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 800ba90:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800bae4 <setTorque+0x2dc>
 800ba94:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba9c:	ee17 2a90 	vmov	r2, s15
 800baa0:	b290      	uxth	r0, r2
 800baa2:	68fa      	ldr	r2, [r7, #12]
 800baa4:	edd2 7a4a 	vldr	s15, [r2, #296]	@ 0x128
 800baa8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800bae4 <setTorque+0x2dc>
 800baac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bab4:	ee17 2a90 	vmov	r2, s15
 800bab8:	b291      	uxth	r1, r2
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	edd2 7a4c 	vldr	s15, [r2, #304]	@ 0x130
 800bac0:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800bae4 <setTorque+0x2dc>
 800bac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bacc:	ee17 2a90 	vmov	r2, s15
 800bad0:	b292      	uxth	r2, r2
 800bad2:	4798      	blx	r3
    // set the voltages in driver
    // driver->setPwm(Ua, Ub, Uc);
}
 800bad4:	bf00      	nop
 800bad6:	3738      	adds	r7, #56	@ 0x38
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	3f5db3d7 	.word	0x3f5db3d7
 800bae0:	00000000 	.word	0x00000000
 800bae4:	45fa0000 	.word	0x45fa0000

0800bae8 <motorInit>:
static void working(void);

// should be called before interruption enabled

static void motorInit()
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b08c      	sub	sp, #48	@ 0x30
 800baec:	af00      	add	r7, sp, #0
#if 1
    motor1.pole_pairs = 7;
 800baee:	4bc6      	ldr	r3, [pc, #792]	@ (800be08 <motorInit+0x320>)
 800baf0:	2207      	movs	r2, #7
 800baf2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    motor1.updatePwm = updatePwm1;
 800baf6:	4bc4      	ldr	r3, [pc, #784]	@ (800be08 <motorInit+0x320>)
 800baf8:	4ac4      	ldr	r2, [pc, #784]	@ (800be0c <motorInit+0x324>)
 800bafa:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor1.startPwm = startPwm1;
 800bafe:	4bc2      	ldr	r3, [pc, #776]	@ (800be08 <motorInit+0x320>)
 800bb00:	4ac3      	ldr	r2, [pc, #780]	@ (800be10 <motorInit+0x328>)
 800bb02:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor1.stopPwm = stopPwm1;
 800bb06:	4bc0      	ldr	r3, [pc, #768]	@ (800be08 <motorInit+0x320>)
 800bb08:	4ac2      	ldr	r2, [pc, #776]	@ (800be14 <motorInit+0x32c>)
 800bb0a:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    motor1.zeroElectricAngleOffSet = 0;
 800bb0e:	4bbe      	ldr	r3, [pc, #760]	@ (800be08 <motorInit+0x320>)
 800bb10:	f04f 0200 	mov.w	r2, #0
 800bb14:	635a      	str	r2, [r3, #52]	@ 0x34
    motor1.Ts = 100 * 1e-6f;
 800bb16:	4bbc      	ldr	r3, [pc, #752]	@ (800be08 <motorInit+0x320>)
 800bb18:	4abf      	ldr	r2, [pc, #764]	@ (800be18 <motorInit+0x330>)
 800bb1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor1.torqueType = VOLTAGE;
 800bb1c:	4bba      	ldr	r3, [pc, #744]	@ (800be08 <motorInit+0x320>)
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    motor1.controlType = VELOCITY_OPEN_LOOP;
 800bb24:	4bb8      	ldr	r3, [pc, #736]	@ (800be08 <motorInit+0x320>)
 800bb26:	2201      	movs	r2, #1
 800bb28:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    motor1.state = MOTOR_CALIBRATE;
 800bb2c:	4bb6      	ldr	r3, [pc, #728]	@ (800be08 <motorInit+0x320>)
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor1.magEncoder, motor1.Ts, _1_MT6701_GetRawAngle, UNKNOWN);
 800bb34:	4bb4      	ldr	r3, [pc, #720]	@ (800be08 <motorInit+0x320>)
 800bb36:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	49b7      	ldr	r1, [pc, #732]	@ (800be1c <motorInit+0x334>)
 800bb3e:	eeb0 0a67 	vmov.f32	s0, s15
 800bb42:	48b1      	ldr	r0, [pc, #708]	@ (800be08 <motorInit+0x320>)
 800bb44:	f7ff fb03 	bl	800b14e <encoderInit>

    if (motor1.controlType == TORQUE && motor1.torqueType == CURRENT)
 800bb48:	4baf      	ldr	r3, [pc, #700]	@ (800be08 <motorInit+0x320>)
 800bb4a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d11b      	bne.n	800bb8a <motorInit+0xa2>
 800bb52:	4bad      	ldr	r3, [pc, #692]	@ (800be08 <motorInit+0x320>)
 800bb54:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d116      	bne.n	800bb8a <motorInit+0xa2>
    {
        float kp, ki;
        kp = 500.0f;
 800bb5c:	4bb0      	ldr	r3, [pc, #704]	@ (800be20 <motorInit+0x338>)
 800bb5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ki = 50.0f;
 800bb60:	4bb0      	ldr	r3, [pc, #704]	@ (800be24 <motorInit+0x33c>)
 800bb62:	62bb      	str	r3, [r7, #40]	@ 0x28
        pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bb64:	4ba8      	ldr	r3, [pc, #672]	@ (800be08 <motorInit+0x320>)
 800bb66:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bb6a:	eef0 2a67 	vmov.f32	s5, s15
 800bb6e:	ed9f 2aae 	vldr	s4, [pc, #696]	@ 800be28 <motorInit+0x340>
 800bb72:	eddf 1aae 	vldr	s3, [pc, #696]	@ 800be2c <motorInit+0x344>
 800bb76:	ed9f 1aad 	vldr	s2, [pc, #692]	@ 800be2c <motorInit+0x344>
 800bb7a:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 800bb7e:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800bb82:	48ab      	ldr	r0, [pc, #684]	@ (800be30 <motorInit+0x348>)
 800bb84:	f7ff fd04 	bl	800b590 <pidInit>
    {
 800bb88:	e0c0      	b.n	800bd0c <motorInit+0x224>
        // pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
    }
    else if (motor1.controlType == VELOCITY)
 800bb8a:	4b9f      	ldr	r3, [pc, #636]	@ (800be08 <motorInit+0x320>)
 800bb8c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bb90:	2b02      	cmp	r3, #2
 800bb92:	d152      	bne.n	800bc3a <motorInit+0x152>
    {
        if (motor1.torqueType == CURRENT)
 800bb94:	4b9c      	ldr	r3, [pc, #624]	@ (800be08 <motorInit+0x320>)
 800bb96:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d13a      	bne.n	800bc14 <motorInit+0x12c>
        {
            pidInit(&motor1.velocityPID, 0.02, 0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800bb9e:	4b9a      	ldr	r3, [pc, #616]	@ (800be08 <motorInit+0x320>)
 800bba0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bba4:	eef0 2a67 	vmov.f32	s5, s15
 800bba8:	ed9f 2aa2 	vldr	s4, [pc, #648]	@ 800be34 <motorInit+0x34c>
 800bbac:	eddf 1a9f 	vldr	s3, [pc, #636]	@ 800be2c <motorInit+0x344>
 800bbb0:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 800be2c <motorInit+0x344>
 800bbb4:	eddf 0aa0 	vldr	s1, [pc, #640]	@ 800be38 <motorInit+0x350>
 800bbb8:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 800be3c <motorInit+0x354>
 800bbbc:	48a0      	ldr	r0, [pc, #640]	@ (800be40 <motorInit+0x358>)
 800bbbe:	f7ff fce7 	bl	800b590 <pidInit>

            float kp, ki;
            kp = 500.0f;
 800bbc2:	4b97      	ldr	r3, [pc, #604]	@ (800be20 <motorInit+0x338>)
 800bbc4:	61fb      	str	r3, [r7, #28]
            ki = 50.0f;
 800bbc6:	4b97      	ldr	r3, [pc, #604]	@ (800be24 <motorInit+0x33c>)
 800bbc8:	61bb      	str	r3, [r7, #24]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bbca:	4b8f      	ldr	r3, [pc, #572]	@ (800be08 <motorInit+0x320>)
 800bbcc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bbd0:	eef0 2a67 	vmov.f32	s5, s15
 800bbd4:	ed9f 2a94 	vldr	s4, [pc, #592]	@ 800be28 <motorInit+0x340>
 800bbd8:	eddf 1a94 	vldr	s3, [pc, #592]	@ 800be2c <motorInit+0x344>
 800bbdc:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 800be2c <motorInit+0x344>
 800bbe0:	edd7 0a06 	vldr	s1, [r7, #24]
 800bbe4:	ed97 0a07 	vldr	s0, [r7, #28]
 800bbe8:	4891      	ldr	r0, [pc, #580]	@ (800be30 <motorInit+0x348>)
 800bbea:	f7ff fcd1 	bl	800b590 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bbee:	4b86      	ldr	r3, [pc, #536]	@ (800be08 <motorInit+0x320>)
 800bbf0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bbf4:	eef0 2a67 	vmov.f32	s5, s15
 800bbf8:	ed9f 2a8b 	vldr	s4, [pc, #556]	@ 800be28 <motorInit+0x340>
 800bbfc:	eddf 1a8b 	vldr	s3, [pc, #556]	@ 800be2c <motorInit+0x344>
 800bc00:	ed9f 1a8a 	vldr	s2, [pc, #552]	@ 800be2c <motorInit+0x344>
 800bc04:	edd7 0a06 	vldr	s1, [r7, #24]
 800bc08:	ed97 0a07 	vldr	s0, [r7, #28]
 800bc0c:	488d      	ldr	r0, [pc, #564]	@ (800be44 <motorInit+0x35c>)
 800bc0e:	f7ff fcbf 	bl	800b590 <pidInit>
 800bc12:	e07b      	b.n	800bd0c <motorInit+0x224>
        }
        else
        {
            pidInit(&motor1.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor1.Ts);
 800bc14:	4b7c      	ldr	r3, [pc, #496]	@ (800be08 <motorInit+0x320>)
 800bc16:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bc1a:	eef0 2a67 	vmov.f32	s5, s15
 800bc1e:	ed9f 2a82 	vldr	s4, [pc, #520]	@ 800be28 <motorInit+0x340>
 800bc22:	eddf 1a82 	vldr	s3, [pc, #520]	@ 800be2c <motorInit+0x344>
 800bc26:	ed9f 1a81 	vldr	s2, [pc, #516]	@ 800be2c <motorInit+0x344>
 800bc2a:	eddf 0a87 	vldr	s1, [pc, #540]	@ 800be48 <motorInit+0x360>
 800bc2e:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 800be4c <motorInit+0x364>
 800bc32:	4883      	ldr	r0, [pc, #524]	@ (800be40 <motorInit+0x358>)
 800bc34:	f7ff fcac 	bl	800b590 <pidInit>
 800bc38:	e068      	b.n	800bd0c <motorInit+0x224>
        }
    }
    else if (motor1.controlType == ANGLE)
 800bc3a:	4b73      	ldr	r3, [pc, #460]	@ (800be08 <motorInit+0x320>)
 800bc3c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bc40:	2b03      	cmp	r3, #3
 800bc42:	d163      	bne.n	800bd0c <motorInit+0x224>
    {
        if (motor1.torqueType == CURRENT)
 800bc44:	4b70      	ldr	r3, [pc, #448]	@ (800be08 <motorInit+0x320>)
 800bc46:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d14c      	bne.n	800bce8 <motorInit+0x200>
        {
            pidInit(&motor1.anglePID, 2, 0, 0, 0, MAX_VELOCITY, motor1.Ts);
 800bc4e:	4b6e      	ldr	r3, [pc, #440]	@ (800be08 <motorInit+0x320>)
 800bc50:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bc54:	eef0 2a67 	vmov.f32	s5, s15
 800bc58:	ed9f 2a7d 	vldr	s4, [pc, #500]	@ 800be50 <motorInit+0x368>
 800bc5c:	eddf 1a73 	vldr	s3, [pc, #460]	@ 800be2c <motorInit+0x344>
 800bc60:	ed9f 1a72 	vldr	s2, [pc, #456]	@ 800be2c <motorInit+0x344>
 800bc64:	eddf 0a71 	vldr	s1, [pc, #452]	@ 800be2c <motorInit+0x344>
 800bc68:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800bc6c:	4879      	ldr	r0, [pc, #484]	@ (800be54 <motorInit+0x36c>)
 800bc6e:	f7ff fc8f 	bl	800b590 <pidInit>

            pidInit(&motor1.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800bc72:	4b65      	ldr	r3, [pc, #404]	@ (800be08 <motorInit+0x320>)
 800bc74:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bc78:	eef0 2a67 	vmov.f32	s5, s15
 800bc7c:	ed9f 2a6d 	vldr	s4, [pc, #436]	@ 800be34 <motorInit+0x34c>
 800bc80:	eddf 1a6a 	vldr	s3, [pc, #424]	@ 800be2c <motorInit+0x344>
 800bc84:	ed9f 1a69 	vldr	s2, [pc, #420]	@ 800be2c <motorInit+0x344>
 800bc88:	eddf 0a73 	vldr	s1, [pc, #460]	@ 800be58 <motorInit+0x370>
 800bc8c:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 800be5c <motorInit+0x374>
 800bc90:	486b      	ldr	r0, [pc, #428]	@ (800be40 <motorInit+0x358>)
 800bc92:	f7ff fc7d 	bl	800b590 <pidInit>

            // pidInit(&motor1.anglePID, -0.001, -0.0001, 0, 0, CURRENT_MAX / 2, motor1.Ts);

            float kp, ki;
            kp = -200;
 800bc96:	4b72      	ldr	r3, [pc, #456]	@ (800be60 <motorInit+0x378>)
 800bc98:	627b      	str	r3, [r7, #36]	@ 0x24
            ki = -20;
 800bc9a:	4b72      	ldr	r3, [pc, #456]	@ (800be64 <motorInit+0x37c>)
 800bc9c:	623b      	str	r3, [r7, #32]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bc9e:	4b5a      	ldr	r3, [pc, #360]	@ (800be08 <motorInit+0x320>)
 800bca0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bca4:	eef0 2a67 	vmov.f32	s5, s15
 800bca8:	ed9f 2a5f 	vldr	s4, [pc, #380]	@ 800be28 <motorInit+0x340>
 800bcac:	eddf 1a5f 	vldr	s3, [pc, #380]	@ 800be2c <motorInit+0x344>
 800bcb0:	ed9f 1a5e 	vldr	s2, [pc, #376]	@ 800be2c <motorInit+0x344>
 800bcb4:	edd7 0a08 	vldr	s1, [r7, #32]
 800bcb8:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800bcbc:	485c      	ldr	r0, [pc, #368]	@ (800be30 <motorInit+0x348>)
 800bcbe:	f7ff fc67 	bl	800b590 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800bcc2:	4b51      	ldr	r3, [pc, #324]	@ (800be08 <motorInit+0x320>)
 800bcc4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bcc8:	eef0 2a67 	vmov.f32	s5, s15
 800bccc:	ed9f 2a56 	vldr	s4, [pc, #344]	@ 800be28 <motorInit+0x340>
 800bcd0:	eddf 1a56 	vldr	s3, [pc, #344]	@ 800be2c <motorInit+0x344>
 800bcd4:	ed9f 1a55 	vldr	s2, [pc, #340]	@ 800be2c <motorInit+0x344>
 800bcd8:	edd7 0a08 	vldr	s1, [r7, #32]
 800bcdc:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800bce0:	4858      	ldr	r0, [pc, #352]	@ (800be44 <motorInit+0x35c>)
 800bce2:	f7ff fc55 	bl	800b590 <pidInit>
 800bce6:	e011      	b.n	800bd0c <motorInit+0x224>
        }
        else
        {
            pidInit(&motor1.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor1.Ts);
 800bce8:	4b47      	ldr	r3, [pc, #284]	@ (800be08 <motorInit+0x320>)
 800bcea:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bcee:	eef0 2a67 	vmov.f32	s5, s15
 800bcf2:	ed9f 2a5d 	vldr	s4, [pc, #372]	@ 800be68 <motorInit+0x380>
 800bcf6:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 800be2c <motorInit+0x344>
 800bcfa:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 800be2c <motorInit+0x344>
 800bcfe:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 800be6c <motorInit+0x384>
 800bd02:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 800be70 <motorInit+0x388>
 800bd06:	4853      	ldr	r0, [pc, #332]	@ (800be54 <motorInit+0x36c>)
 800bd08:	f7ff fc42 	bl	800b590 <pidInit>
        }
    }

    lpfInit(&motor1.IqFilter, 0.05, motor1.Ts);
 800bd0c:	4b3e      	ldr	r3, [pc, #248]	@ (800be08 <motorInit+0x320>)
 800bd0e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bd12:	eef0 0a67 	vmov.f32	s1, s15
 800bd16:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 800be48 <motorInit+0x360>
 800bd1a:	4856      	ldr	r0, [pc, #344]	@ (800be74 <motorInit+0x38c>)
 800bd1c:	f7ff facc 	bl	800b2b8 <lpfInit>
    lpfInit(&motor1.IdFilter, 0.05, motor1.Ts);
 800bd20:	4b39      	ldr	r3, [pc, #228]	@ (800be08 <motorInit+0x320>)
 800bd22:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bd26:	eef0 0a67 	vmov.f32	s1, s15
 800bd2a:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 800be48 <motorInit+0x360>
 800bd2e:	4852      	ldr	r0, [pc, #328]	@ (800be78 <motorInit+0x390>)
 800bd30:	f7ff fac2 	bl	800b2b8 <lpfInit>
    lpfInit(&motor1.velocityFilter, 0.01, motor1.Ts);
 800bd34:	4b34      	ldr	r3, [pc, #208]	@ (800be08 <motorInit+0x320>)
 800bd36:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bd3a:	eef0 0a67 	vmov.f32	s1, s15
 800bd3e:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800be38 <motorInit+0x350>
 800bd42:	484e      	ldr	r0, [pc, #312]	@ (800be7c <motorInit+0x394>)
 800bd44:	f7ff fab8 	bl	800b2b8 <lpfInit>

#endif
    motor2.pole_pairs = 7;
 800bd48:	4b4d      	ldr	r3, [pc, #308]	@ (800be80 <motorInit+0x398>)
 800bd4a:	2207      	movs	r2, #7
 800bd4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    motor2.updatePwm = updatePwm2;
 800bd50:	4b4b      	ldr	r3, [pc, #300]	@ (800be80 <motorInit+0x398>)
 800bd52:	4a4c      	ldr	r2, [pc, #304]	@ (800be84 <motorInit+0x39c>)
 800bd54:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor2.startPwm = startPwm2;
 800bd58:	4b49      	ldr	r3, [pc, #292]	@ (800be80 <motorInit+0x398>)
 800bd5a:	4a4b      	ldr	r2, [pc, #300]	@ (800be88 <motorInit+0x3a0>)
 800bd5c:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor2.stopPwm = stopPwm2;
 800bd60:	4b47      	ldr	r3, [pc, #284]	@ (800be80 <motorInit+0x398>)
 800bd62:	4a4a      	ldr	r2, [pc, #296]	@ (800be8c <motorInit+0x3a4>)
 800bd64:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    motor2.zeroElectricAngleOffSet = 0;
 800bd68:	4b45      	ldr	r3, [pc, #276]	@ (800be80 <motorInit+0x398>)
 800bd6a:	f04f 0200 	mov.w	r2, #0
 800bd6e:	635a      	str	r2, [r3, #52]	@ 0x34
    motor2.Ts = 100 * 1e-6f;
 800bd70:	4b43      	ldr	r3, [pc, #268]	@ (800be80 <motorInit+0x398>)
 800bd72:	4a29      	ldr	r2, [pc, #164]	@ (800be18 <motorInit+0x330>)
 800bd74:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor2.torqueType = VOLTAGE;
 800bd76:	4b42      	ldr	r3, [pc, #264]	@ (800be80 <motorInit+0x398>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    motor2.controlType = VELOCITY_OPEN_LOOP;
 800bd7e:	4b40      	ldr	r3, [pc, #256]	@ (800be80 <motorInit+0x398>)
 800bd80:	2201      	movs	r2, #1
 800bd82:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    motor2.state = MOTOR_CALIBRATE;
 800bd86:	4b3e      	ldr	r3, [pc, #248]	@ (800be80 <motorInit+0x398>)
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor2.magEncoder, motor2.Ts, _2_MT6701_GetRawAngle, UNKNOWN);
 800bd8e:	4b3c      	ldr	r3, [pc, #240]	@ (800be80 <motorInit+0x398>)
 800bd90:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bd94:	2201      	movs	r2, #1
 800bd96:	493e      	ldr	r1, [pc, #248]	@ (800be90 <motorInit+0x3a8>)
 800bd98:	eeb0 0a67 	vmov.f32	s0, s15
 800bd9c:	4838      	ldr	r0, [pc, #224]	@ (800be80 <motorInit+0x398>)
 800bd9e:	f7ff f9d6 	bl	800b14e <encoderInit>
    if (motor2.controlType == TORQUE && motor2.torqueType == CURRENT)
 800bda2:	4b37      	ldr	r3, [pc, #220]	@ (800be80 <motorInit+0x398>)
 800bda4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d177      	bne.n	800be9c <motorInit+0x3b4>
 800bdac:	4b34      	ldr	r3, [pc, #208]	@ (800be80 <motorInit+0x398>)
 800bdae:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d172      	bne.n	800be9c <motorInit+0x3b4>
    {
        float kp, ki;
        kp = -200;
 800bdb6:	4b2a      	ldr	r3, [pc, #168]	@ (800be60 <motorInit+0x378>)
 800bdb8:	617b      	str	r3, [r7, #20]
        ki = -20;
 800bdba:	4b2a      	ldr	r3, [pc, #168]	@ (800be64 <motorInit+0x37c>)
 800bdbc:	613b      	str	r3, [r7, #16]
        pidInit(&motor2.pidId, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800bdbe:	4b30      	ldr	r3, [pc, #192]	@ (800be80 <motorInit+0x398>)
 800bdc0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bdc4:	eef0 2a67 	vmov.f32	s5, s15
 800bdc8:	ed9f 2a17 	vldr	s4, [pc, #92]	@ 800be28 <motorInit+0x340>
 800bdcc:	eddf 1a17 	vldr	s3, [pc, #92]	@ 800be2c <motorInit+0x344>
 800bdd0:	ed9f 1a16 	vldr	s2, [pc, #88]	@ 800be2c <motorInit+0x344>
 800bdd4:	edd7 0a04 	vldr	s1, [r7, #16]
 800bdd8:	ed97 0a05 	vldr	s0, [r7, #20]
 800bddc:	482d      	ldr	r0, [pc, #180]	@ (800be94 <motorInit+0x3ac>)
 800bdde:	f7ff fbd7 	bl	800b590 <pidInit>
        pidInit(&motor2.pidIq, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800bde2:	4b27      	ldr	r3, [pc, #156]	@ (800be80 <motorInit+0x398>)
 800bde4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bde8:	eef0 2a67 	vmov.f32	s5, s15
 800bdec:	ed9f 2a0e 	vldr	s4, [pc, #56]	@ 800be28 <motorInit+0x340>
 800bdf0:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 800be2c <motorInit+0x344>
 800bdf4:	ed9f 1a0d 	vldr	s2, [pc, #52]	@ 800be2c <motorInit+0x344>
 800bdf8:	edd7 0a04 	vldr	s1, [r7, #16]
 800bdfc:	ed97 0a05 	vldr	s0, [r7, #20]
 800be00:	4825      	ldr	r0, [pc, #148]	@ (800be98 <motorInit+0x3b0>)
 800be02:	f7ff fbc5 	bl	800b590 <pidInit>
    {
 800be06:	e10a      	b.n	800c01e <motorInit+0x536>
 800be08:	200007a4 	.word	0x200007a4
 800be0c:	0800df65 	.word	0x0800df65
 800be10:	0800df1d 	.word	0x0800df1d
 800be14:	0800df41 	.word	0x0800df41
 800be18:	38d1b717 	.word	0x38d1b717
 800be1c:	0800de11 	.word	0x0800de11
 800be20:	43fa0000 	.word	0x43fa0000
 800be24:	42480000 	.word	0x42480000
 800be28:	4093cd3a 	.word	0x4093cd3a
 800be2c:	00000000 	.word	0x00000000
 800be30:	20000808 	.word	0x20000808
 800be34:	3e4ccccd 	.word	0x3e4ccccd
 800be38:	3c23d70a 	.word	0x3c23d70a
 800be3c:	3ca3d70a 	.word	0x3ca3d70a
 800be40:	20000850 	.word	0x20000850
 800be44:	2000082c 	.word	0x2000082c
 800be48:	3d4ccccd 	.word	0x3d4ccccd
 800be4c:	3e19999a 	.word	0x3e19999a
 800be50:	43c80000 	.word	0x43c80000
 800be54:	20000874 	.word	0x20000874
 800be58:	bc23d70a 	.word	0xbc23d70a
 800be5c:	bca3d70a 	.word	0xbca3d70a
 800be60:	c3480000 	.word	0xc3480000
 800be64:	c1a00000 	.word	0xc1a00000
 800be68:	4013cd3a 	.word	0x4013cd3a
 800be6c:	3a83126f 	.word	0x3a83126f
 800be70:	3e99999a 	.word	0x3e99999a
 800be74:	20000898 	.word	0x20000898
 800be78:	200008a4 	.word	0x200008a4
 800be7c:	200008b0 	.word	0x200008b0
 800be80:	200008e4 	.word	0x200008e4
 800be84:	0800dfe1 	.word	0x0800dfe1
 800be88:	0800df99 	.word	0x0800df99
 800be8c:	0800dfbd 	.word	0x0800dfbd
 800be90:	0800dee1 	.word	0x0800dee1
 800be94:	20000948 	.word	0x20000948
 800be98:	2000096c 	.word	0x2000096c
    }
    else if (motor2.controlType == VELOCITY)
 800be9c:	4b71      	ldr	r3, [pc, #452]	@ (800c064 <motorInit+0x57c>)
 800be9e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bea2:	2b02      	cmp	r3, #2
 800bea4:	d152      	bne.n	800bf4c <motorInit+0x464>
    {
        if (motor2.torqueType == CURRENT)
 800bea6:	4b6f      	ldr	r3, [pc, #444]	@ (800c064 <motorInit+0x57c>)
 800bea8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800beac:	2b01      	cmp	r3, #1
 800beae:	d13a      	bne.n	800bf26 <motorInit+0x43e>
        {
            pidInit(&motor2.velocityPID, 0.02, 0.01, 0, 0, CURRENT_MAX, motor2.Ts);
 800beb0:	4b6c      	ldr	r3, [pc, #432]	@ (800c064 <motorInit+0x57c>)
 800beb2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800beb6:	eef0 2a67 	vmov.f32	s5, s15
 800beba:	ed9f 2a6b 	vldr	s4, [pc, #428]	@ 800c068 <motorInit+0x580>
 800bebe:	eddf 1a6b 	vldr	s3, [pc, #428]	@ 800c06c <motorInit+0x584>
 800bec2:	ed9f 1a6a 	vldr	s2, [pc, #424]	@ 800c06c <motorInit+0x584>
 800bec6:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 800c070 <motorInit+0x588>
 800beca:	ed9f 0a6a 	vldr	s0, [pc, #424]	@ 800c074 <motorInit+0x58c>
 800bece:	486a      	ldr	r0, [pc, #424]	@ (800c078 <motorInit+0x590>)
 800bed0:	f7ff fb5e 	bl	800b590 <pidInit>

            float kp, ki;
            kp = 500.0f;
 800bed4:	4b69      	ldr	r3, [pc, #420]	@ (800c07c <motorInit+0x594>)
 800bed6:	607b      	str	r3, [r7, #4]
            ki = 50.0f;
 800bed8:	4b69      	ldr	r3, [pc, #420]	@ (800c080 <motorInit+0x598>)
 800beda:	603b      	str	r3, [r7, #0]
            pidInit(&motor2.pidId, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800bedc:	4b61      	ldr	r3, [pc, #388]	@ (800c064 <motorInit+0x57c>)
 800bede:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bee2:	eef0 2a67 	vmov.f32	s5, s15
 800bee6:	ed9f 2a67 	vldr	s4, [pc, #412]	@ 800c084 <motorInit+0x59c>
 800beea:	eddf 1a60 	vldr	s3, [pc, #384]	@ 800c06c <motorInit+0x584>
 800beee:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 800c06c <motorInit+0x584>
 800bef2:	edd7 0a00 	vldr	s1, [r7]
 800bef6:	ed97 0a01 	vldr	s0, [r7, #4]
 800befa:	4863      	ldr	r0, [pc, #396]	@ (800c088 <motorInit+0x5a0>)
 800befc:	f7ff fb48 	bl	800b590 <pidInit>
            pidInit(&motor2.pidIq, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800bf00:	4b58      	ldr	r3, [pc, #352]	@ (800c064 <motorInit+0x57c>)
 800bf02:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bf06:	eef0 2a67 	vmov.f32	s5, s15
 800bf0a:	ed9f 2a5e 	vldr	s4, [pc, #376]	@ 800c084 <motorInit+0x59c>
 800bf0e:	eddf 1a57 	vldr	s3, [pc, #348]	@ 800c06c <motorInit+0x584>
 800bf12:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 800c06c <motorInit+0x584>
 800bf16:	edd7 0a00 	vldr	s1, [r7]
 800bf1a:	ed97 0a01 	vldr	s0, [r7, #4]
 800bf1e:	485b      	ldr	r0, [pc, #364]	@ (800c08c <motorInit+0x5a4>)
 800bf20:	f7ff fb36 	bl	800b590 <pidInit>
 800bf24:	e07b      	b.n	800c01e <motorInit+0x536>
        }
        else
        {
            pidInit(&motor2.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor2.Ts);
 800bf26:	4b4f      	ldr	r3, [pc, #316]	@ (800c064 <motorInit+0x57c>)
 800bf28:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bf2c:	eef0 2a67 	vmov.f32	s5, s15
 800bf30:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 800c084 <motorInit+0x59c>
 800bf34:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 800c06c <motorInit+0x584>
 800bf38:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 800c06c <motorInit+0x584>
 800bf3c:	eddf 0a54 	vldr	s1, [pc, #336]	@ 800c090 <motorInit+0x5a8>
 800bf40:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 800c094 <motorInit+0x5ac>
 800bf44:	484c      	ldr	r0, [pc, #304]	@ (800c078 <motorInit+0x590>)
 800bf46:	f7ff fb23 	bl	800b590 <pidInit>
 800bf4a:	e068      	b.n	800c01e <motorInit+0x536>
        }
    }
    else if (motor2.controlType == ANGLE)
 800bf4c:	4b45      	ldr	r3, [pc, #276]	@ (800c064 <motorInit+0x57c>)
 800bf4e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800bf52:	2b03      	cmp	r3, #3
 800bf54:	d163      	bne.n	800c01e <motorInit+0x536>
    {
        if (motor2.torqueType == CURRENT)
 800bf56:	4b43      	ldr	r3, [pc, #268]	@ (800c064 <motorInit+0x57c>)
 800bf58:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d14c      	bne.n	800bffa <motorInit+0x512>
        {
            pidInit(&motor2.anglePID, 2, 0, 0, 0, MAX_VELOCITY, motor2.Ts);
 800bf60:	4b40      	ldr	r3, [pc, #256]	@ (800c064 <motorInit+0x57c>)
 800bf62:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bf66:	eef0 2a67 	vmov.f32	s5, s15
 800bf6a:	ed9f 2a4b 	vldr	s4, [pc, #300]	@ 800c098 <motorInit+0x5b0>
 800bf6e:	eddf 1a3f 	vldr	s3, [pc, #252]	@ 800c06c <motorInit+0x584>
 800bf72:	ed9f 1a3e 	vldr	s2, [pc, #248]	@ 800c06c <motorInit+0x584>
 800bf76:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 800c06c <motorInit+0x584>
 800bf7a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800bf7e:	4847      	ldr	r0, [pc, #284]	@ (800c09c <motorInit+0x5b4>)
 800bf80:	f7ff fb06 	bl	800b590 <pidInit>

            pidInit(&motor2.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor2.Ts);
 800bf84:	4b37      	ldr	r3, [pc, #220]	@ (800c064 <motorInit+0x57c>)
 800bf86:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bf8a:	eef0 2a67 	vmov.f32	s5, s15
 800bf8e:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 800c068 <motorInit+0x580>
 800bf92:	eddf 1a36 	vldr	s3, [pc, #216]	@ 800c06c <motorInit+0x584>
 800bf96:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 800c06c <motorInit+0x584>
 800bf9a:	eddf 0a41 	vldr	s1, [pc, #260]	@ 800c0a0 <motorInit+0x5b8>
 800bf9e:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 800c0a4 <motorInit+0x5bc>
 800bfa2:	4835      	ldr	r0, [pc, #212]	@ (800c078 <motorInit+0x590>)
 800bfa4:	f7ff faf4 	bl	800b590 <pidInit>

            // pidInit(&motor1.anglePID, -0.001, -0.0001, 0, 0, CURRENT_MAX / 2, motor1.Ts);

            float kp, ki;
            kp = -200;
 800bfa8:	4b3f      	ldr	r3, [pc, #252]	@ (800c0a8 <motorInit+0x5c0>)
 800bfaa:	60fb      	str	r3, [r7, #12]
            ki = -20;
 800bfac:	4b3f      	ldr	r3, [pc, #252]	@ (800c0ac <motorInit+0x5c4>)
 800bfae:	60bb      	str	r3, [r7, #8]
            pidInit(&motor2.pidId, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800bfb0:	4b2c      	ldr	r3, [pc, #176]	@ (800c064 <motorInit+0x57c>)
 800bfb2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bfb6:	eef0 2a67 	vmov.f32	s5, s15
 800bfba:	ed9f 2a32 	vldr	s4, [pc, #200]	@ 800c084 <motorInit+0x59c>
 800bfbe:	eddf 1a2b 	vldr	s3, [pc, #172]	@ 800c06c <motorInit+0x584>
 800bfc2:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 800c06c <motorInit+0x584>
 800bfc6:	edd7 0a02 	vldr	s1, [r7, #8]
 800bfca:	ed97 0a03 	vldr	s0, [r7, #12]
 800bfce:	482e      	ldr	r0, [pc, #184]	@ (800c088 <motorInit+0x5a0>)
 800bfd0:	f7ff fade 	bl	800b590 <pidInit>
            pidInit(&motor2.pidIq, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800bfd4:	4b23      	ldr	r3, [pc, #140]	@ (800c064 <motorInit+0x57c>)
 800bfd6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bfda:	eef0 2a67 	vmov.f32	s5, s15
 800bfde:	ed9f 2a29 	vldr	s4, [pc, #164]	@ 800c084 <motorInit+0x59c>
 800bfe2:	eddf 1a22 	vldr	s3, [pc, #136]	@ 800c06c <motorInit+0x584>
 800bfe6:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 800c06c <motorInit+0x584>
 800bfea:	edd7 0a02 	vldr	s1, [r7, #8]
 800bfee:	ed97 0a03 	vldr	s0, [r7, #12]
 800bff2:	4826      	ldr	r0, [pc, #152]	@ (800c08c <motorInit+0x5a4>)
 800bff4:	f7ff facc 	bl	800b590 <pidInit>
 800bff8:	e011      	b.n	800c01e <motorInit+0x536>
        }
        else
        {
            pidInit(&motor2.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor2.Ts);
 800bffa:	4b1a      	ldr	r3, [pc, #104]	@ (800c064 <motorInit+0x57c>)
 800bffc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c000:	eef0 2a67 	vmov.f32	s5, s15
 800c004:	ed9f 2a2a 	vldr	s4, [pc, #168]	@ 800c0b0 <motorInit+0x5c8>
 800c008:	eddf 1a18 	vldr	s3, [pc, #96]	@ 800c06c <motorInit+0x584>
 800c00c:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 800c06c <motorInit+0x584>
 800c010:	eddf 0a28 	vldr	s1, [pc, #160]	@ 800c0b4 <motorInit+0x5cc>
 800c014:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 800c0b8 <motorInit+0x5d0>
 800c018:	4820      	ldr	r0, [pc, #128]	@ (800c09c <motorInit+0x5b4>)
 800c01a:	f7ff fab9 	bl	800b590 <pidInit>
        }
    }

    lpfInit(&motor2.IqFilter, 0.05, motor1.Ts);
 800c01e:	4b27      	ldr	r3, [pc, #156]	@ (800c0bc <motorInit+0x5d4>)
 800c020:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c024:	eef0 0a67 	vmov.f32	s1, s15
 800c028:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800c090 <motorInit+0x5a8>
 800c02c:	4824      	ldr	r0, [pc, #144]	@ (800c0c0 <motorInit+0x5d8>)
 800c02e:	f7ff f943 	bl	800b2b8 <lpfInit>
    lpfInit(&motor2.IdFilter, 0.05, motor1.Ts);
 800c032:	4b22      	ldr	r3, [pc, #136]	@ (800c0bc <motorInit+0x5d4>)
 800c034:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c038:	eef0 0a67 	vmov.f32	s1, s15
 800c03c:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 800c090 <motorInit+0x5a8>
 800c040:	4820      	ldr	r0, [pc, #128]	@ (800c0c4 <motorInit+0x5dc>)
 800c042:	f7ff f939 	bl	800b2b8 <lpfInit>
    lpfInit(&motor2.velocityFilter, 0.01, motor1.Ts);
 800c046:	4b1d      	ldr	r3, [pc, #116]	@ (800c0bc <motorInit+0x5d4>)
 800c048:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c04c:	eef0 0a67 	vmov.f32	s1, s15
 800c050:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800c070 <motorInit+0x588>
 800c054:	481c      	ldr	r0, [pc, #112]	@ (800c0c8 <motorInit+0x5e0>)
 800c056:	f7ff f92f 	bl	800b2b8 <lpfInit>
}
 800c05a:	bf00      	nop
 800c05c:	3730      	adds	r7, #48	@ 0x30
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	200008e4 	.word	0x200008e4
 800c068:	3e4ccccd 	.word	0x3e4ccccd
 800c06c:	00000000 	.word	0x00000000
 800c070:	3c23d70a 	.word	0x3c23d70a
 800c074:	3ca3d70a 	.word	0x3ca3d70a
 800c078:	20000990 	.word	0x20000990
 800c07c:	43fa0000 	.word	0x43fa0000
 800c080:	42480000 	.word	0x42480000
 800c084:	4093cd3a 	.word	0x4093cd3a
 800c088:	20000948 	.word	0x20000948
 800c08c:	2000096c 	.word	0x2000096c
 800c090:	3d4ccccd 	.word	0x3d4ccccd
 800c094:	3e19999a 	.word	0x3e19999a
 800c098:	43c80000 	.word	0x43c80000
 800c09c:	200009b4 	.word	0x200009b4
 800c0a0:	bc23d70a 	.word	0xbc23d70a
 800c0a4:	bca3d70a 	.word	0xbca3d70a
 800c0a8:	c3480000 	.word	0xc3480000
 800c0ac:	c1a00000 	.word	0xc1a00000
 800c0b0:	4013cd3a 	.word	0x4013cd3a
 800c0b4:	3a83126f 	.word	0x3a83126f
 800c0b8:	3e99999a 	.word	0x3e99999a
 800c0bc:	200007a4 	.word	0x200007a4
 800c0c0:	200009d8 	.word	0x200009d8
 800c0c4:	200009e4 	.word	0x200009e4
 800c0c8:	200009f0 	.word	0x200009f0

0800c0cc <appInit>:
void appInit()
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	af00      	add	r7, sp, #0

    motorInit();
 800c0d0:	f7ff fd0a 	bl	800bae8 <motorInit>
    devState = STANDBY;
 800c0d4:	4b09      	ldr	r3, [pc, #36]	@ (800c0fc <appInit+0x30>)
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	701a      	strb	r2, [r3, #0]

    // balance
    pidInit(&balancePid, 20, 0, 0, 0, VELOCITY_MAX, 100 * 1e-6f);
 800c0da:	eddf 2a09 	vldr	s5, [pc, #36]	@ 800c100 <appInit+0x34>
 800c0de:	ed9f 2a09 	vldr	s4, [pc, #36]	@ 800c104 <appInit+0x38>
 800c0e2:	eddf 1a09 	vldr	s3, [pc, #36]	@ 800c108 <appInit+0x3c>
 800c0e6:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800c108 <appInit+0x3c>
 800c0ea:	eddf 0a07 	vldr	s1, [pc, #28]	@ 800c108 <appInit+0x3c>
 800c0ee:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 800c0f2:	4806      	ldr	r0, [pc, #24]	@ (800c10c <appInit+0x40>)
 800c0f4:	f7ff fa4c 	bl	800b590 <pidInit>
}
 800c0f8:	bf00      	nop
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	2000008e 	.word	0x2000008e
 800c100:	38d1b717 	.word	0x38d1b717
 800c104:	43c80000 	.word	0x43c80000
 800c108:	00000000 	.word	0x00000000
 800c10c:	20000a24 	.word	0x20000a24

0800c110 <appRunning>:
static bool zeroReset, _1s;
void appRunning()
{
 800c110:	b580      	push	{r7, lr}
 800c112:	af00      	add	r7, sp, #0
    _1s = getOneSecFlag();
 800c114:	f002 f908 	bl	800e328 <getOneSecFlag>
 800c118:	4603      	mov	r3, r0
 800c11a:	461a      	mov	r2, r3
 800c11c:	4b14      	ldr	r3, [pc, #80]	@ (800c170 <appRunning+0x60>)
 800c11e:	701a      	strb	r2, [r3, #0]
    getKeyState(&keyState);
 800c120:	4814      	ldr	r0, [pc, #80]	@ (800c174 <appRunning+0x64>)
 800c122:	f000 fc3d 	bl	800c9a0 <getKeyState>
    commander_run(&motor1, &motor2);
 800c126:	4914      	ldr	r1, [pc, #80]	@ (800c178 <appRunning+0x68>)
 800c128:	4814      	ldr	r0, [pc, #80]	@ (800c17c <appRunning+0x6c>)
 800c12a:	f000 f9f3 	bl	800c514 <commander_run>
    if (++flashCnt >= 10)
 800c12e:	4b14      	ldr	r3, [pc, #80]	@ (800c180 <appRunning+0x70>)
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	3301      	adds	r3, #1
 800c134:	b2da      	uxtb	r2, r3
 800c136:	4b12      	ldr	r3, [pc, #72]	@ (800c180 <appRunning+0x70>)
 800c138:	701a      	strb	r2, [r3, #0]
 800c13a:	4b11      	ldr	r3, [pc, #68]	@ (800c180 <appRunning+0x70>)
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	2b09      	cmp	r3, #9
 800c140:	d902      	bls.n	800c148 <appRunning+0x38>
        flashCnt = 0;
 800c142:	4b0f      	ldr	r3, [pc, #60]	@ (800c180 <appRunning+0x70>)
 800c144:	2200      	movs	r2, #0
 800c146:	701a      	strb	r2, [r3, #0]

    ledOn = 0;
 800c148:	4b0e      	ldr	r3, [pc, #56]	@ (800c184 <appRunning+0x74>)
 800c14a:	2200      	movs	r2, #0
 800c14c:	701a      	strb	r2, [r3, #0]
            motor2.target = goalTorqueC;
        }
    }
#endif

    switch (devState)
 800c14e:	4b0e      	ldr	r3, [pc, #56]	@ (800c188 <appRunning+0x78>)
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d002      	beq.n	800c15c <appRunning+0x4c>
 800c156:	2b01      	cmp	r3, #1
 800c158:	d003      	beq.n	800c162 <appRunning+0x52>
 800c15a:	e005      	b.n	800c168 <appRunning+0x58>
    {
    case STANDBY:
        standingBy();
 800c15c:	f000 f816 	bl	800c18c <standingBy>
        break;
 800c160:	e002      	b.n	800c168 <appRunning+0x58>

    case WORK:
        working();
 800c162:	f000 f85d 	bl	800c220 <working>
        break;
 800c166:	bf00      	nop
    }

    LED_drive();
 800c168:	f000 fc58 	bl	800ca1c <LED_drive>
}
 800c16c:	bf00      	nop
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	20000a49 	.word	0x20000a49
 800c174:	200007a0 	.word	0x200007a0
 800c178:	200008e4 	.word	0x200008e4
 800c17c:	200007a4 	.word	0x200007a4
 800c180:	200007a1 	.word	0x200007a1
 800c184:	20000b40 	.word	0x20000b40
 800c188:	2000008e 	.word	0x2000008e

0800c18c <standingBy>:
static void standingBy()
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	af00      	add	r7, sp, #0
    static bool notFirstTime;
    static uchar cnt;
    ledOn = 1;
 800c190:	4b1b      	ldr	r3, [pc, #108]	@ (800c200 <standingBy+0x74>)
 800c192:	2201      	movs	r2, #1
 800c194:	701a      	strb	r2, [r3, #0]
    //     goToZeroElecAngle(&motor2);
    //     zeroReset = 1;
    // }
    // else
    // {
    motor1.stopPwm();
 800c196:	4b1b      	ldr	r3, [pc, #108]	@ (800c204 <standingBy+0x78>)
 800c198:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800c19c:	4798      	blx	r3
    motor2.stopPwm();
 800c19e:	4b1a      	ldr	r3, [pc, #104]	@ (800c208 <standingBy+0x7c>)
 800c1a0:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800c1a4:	4798      	blx	r3
    // }

    if ((++cnt >= 10 && notFirstTime == 0) || keyState == USER1_SHORT)
 800c1a6:	4b19      	ldr	r3, [pc, #100]	@ (800c20c <standingBy+0x80>)
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	b2da      	uxtb	r2, r3
 800c1ae:	4b17      	ldr	r3, [pc, #92]	@ (800c20c <standingBy+0x80>)
 800c1b0:	701a      	strb	r2, [r3, #0]
 800c1b2:	4b16      	ldr	r3, [pc, #88]	@ (800c20c <standingBy+0x80>)
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	2b09      	cmp	r3, #9
 800c1b8:	d903      	bls.n	800c1c2 <standingBy+0x36>
 800c1ba:	4b15      	ldr	r3, [pc, #84]	@ (800c210 <standingBy+0x84>)
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d003      	beq.n	800c1ca <standingBy+0x3e>
 800c1c2:	4b14      	ldr	r3, [pc, #80]	@ (800c214 <standingBy+0x88>)
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d118      	bne.n	800c1fc <standingBy+0x70>
    {
        notFirstTime = 1;
 800c1ca:	4b11      	ldr	r3, [pc, #68]	@ (800c210 <standingBy+0x84>)
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	701a      	strb	r2, [r3, #0]
        WORK_INIT;
 800c1d0:	4b11      	ldr	r3, [pc, #68]	@ (800c218 <standingBy+0x8c>)
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	701a      	strb	r2, [r3, #0]
 800c1d6:	4b11      	ldr	r3, [pc, #68]	@ (800c21c <standingBy+0x90>)
 800c1d8:	2200      	movs	r2, #0
 800c1da:	701a      	strb	r2, [r3, #0]
 800c1dc:	4b09      	ldr	r3, [pc, #36]	@ (800c204 <standingBy+0x78>)
 800c1de:	2202      	movs	r2, #2
 800c1e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800c1e4:	4b07      	ldr	r3, [pc, #28]	@ (800c204 <standingBy+0x78>)
 800c1e6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800c1ea:	4798      	blx	r3
 800c1ec:	4b06      	ldr	r3, [pc, #24]	@ (800c208 <standingBy+0x7c>)
 800c1ee:	2202      	movs	r2, #2
 800c1f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800c1f4:	4b04      	ldr	r3, [pc, #16]	@ (800c208 <standingBy+0x7c>)
 800c1f6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800c1fa:	4798      	blx	r3
    }
}
 800c1fc:	bf00      	nop
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	20000b40 	.word	0x20000b40
 800c204:	200007a4 	.word	0x200007a4
 800c208:	200008e4 	.word	0x200008e4
 800c20c:	20000a4a 	.word	0x20000a4a
 800c210:	20000a4b 	.word	0x20000a4b
 800c214:	200007a0 	.word	0x200007a0
 800c218:	2000008e 	.word	0x2000008e
 800c21c:	200007a1 	.word	0x200007a1

0800c220 <working>:

static void working(void)
{
 800c220:	b480      	push	{r7}
 800c222:	af00      	add	r7, sp, #0
    zeroReset = 0;
 800c224:	4b10      	ldr	r3, [pc, #64]	@ (800c268 <working+0x48>)
 800c226:	2200      	movs	r2, #0
 800c228:	701a      	strb	r2, [r3, #0]
    if (flashCnt < 5)
 800c22a:	4b10      	ldr	r3, [pc, #64]	@ (800c26c <working+0x4c>)
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	2b04      	cmp	r3, #4
 800c230:	d802      	bhi.n	800c238 <working+0x18>
        ledOn = 1;
 800c232:	4b0f      	ldr	r3, [pc, #60]	@ (800c270 <working+0x50>)
 800c234:	2201      	movs	r2, #1
 800c236:	701a      	strb	r2, [r3, #0]

    if (keyState == USER1_SHORT)
 800c238:	4b0e      	ldr	r3, [pc, #56]	@ (800c274 <working+0x54>)
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d10d      	bne.n	800c25c <working+0x3c>
    {
        STANDBY_INIT;
 800c240:	4b0d      	ldr	r3, [pc, #52]	@ (800c278 <working+0x58>)
 800c242:	2200      	movs	r2, #0
 800c244:	701a      	strb	r2, [r3, #0]
 800c246:	4b09      	ldr	r3, [pc, #36]	@ (800c26c <working+0x4c>)
 800c248:	2200      	movs	r2, #0
 800c24a:	701a      	strb	r2, [r3, #0]
 800c24c:	4b0b      	ldr	r3, [pc, #44]	@ (800c27c <working+0x5c>)
 800c24e:	2201      	movs	r2, #1
 800c250:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800c254:	4b0a      	ldr	r3, [pc, #40]	@ (800c280 <working+0x60>)
 800c256:	2201      	movs	r2, #1
 800c258:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    //        //     {
    //        //         bldcMotor.focTarget = 23;
    //        //     }
    //        // }
    //    }
}
 800c25c:	bf00      	nop
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	20000a48 	.word	0x20000a48
 800c26c:	200007a1 	.word	0x200007a1
 800c270:	20000b40 	.word	0x20000b40
 800c274:	200007a0 	.word	0x200007a0
 800c278:	2000008e 	.word	0x2000008e
 800c27c:	200007a4 	.word	0x200007a4
 800c280:	200008e4 	.word	0x200008e4

0800c284 <txDataProcess>:

void txDataProcess()
{
 800c284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c288:	b08e      	sub	sp, #56	@ 0x38
 800c28a:	af0a      	add	r7, sp, #40	@ 0x28
    //  sprintf(txBuffer, "rawData1: %d,rawData2: %d\n", rawData1, rawData2);
    // sprintf(txBuffer, "pitch : %.2f,  wy: %.2f,  velocity1:%.2f, velocity2:%.2f \n", imu.pit, imu.wy, motor1.magEncoder.velocity, motor2.magEncoder.velocity);
    // sprintf(txBuffer, "target:%.2f  velocity1:%.2f  Iq1:%.2f Id1:%.2f  velocity2:%.2f  Iq2:%.2f Id2:%.2f\n", motor1.target, motor1.magEncoder.velocity, motor1.Iq, motor1.Id, motor2.magEncoder.velocity, motor2.Iq, motor2.Id);
    // sprintf(txBuffer, "target:%.2f fullAngle:%.2f velocity:%.2f Uq:%.2f Ud:%.2f Iq:%.2f Id:%.2f elec_angle:%.2f\n", motor1.target, motor1.magEncoder.fullAngle, motor1.magEncoder.velocity, motor1.Uq, motor1.Ud, motor1.Iq, motor1.Id, motor1.angle_el);

    sprintf(txBuffer, "pitch : %.2f,  P: %.2f,  I:%.2f, D:%.2f, V1:%.2f, T2:%.2f\n", imu.pit, balancePid.P, balancePid.I, balancePid.D, motor1.magEncoder.velocity, motor2.target);
 800c28c:	4b20      	ldr	r3, [pc, #128]	@ (800c310 <txDataProcess+0x8c>)
 800c28e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c290:	4618      	mov	r0, r3
 800c292:	f7f4 f981 	bl	8000598 <__aeabi_f2d>
 800c296:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800c29a:	4b1e      	ldr	r3, [pc, #120]	@ (800c314 <txDataProcess+0x90>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7f4 f97a 	bl	8000598 <__aeabi_f2d>
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	460d      	mov	r5, r1
 800c2a8:	4b1a      	ldr	r3, [pc, #104]	@ (800c314 <txDataProcess+0x90>)
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7f4 f973 	bl	8000598 <__aeabi_f2d>
 800c2b2:	4680      	mov	r8, r0
 800c2b4:	4689      	mov	r9, r1
 800c2b6:	4b17      	ldr	r3, [pc, #92]	@ (800c314 <txDataProcess+0x90>)
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7f4 f96c 	bl	8000598 <__aeabi_f2d>
 800c2c0:	4682      	mov	sl, r0
 800c2c2:	468b      	mov	fp, r1
 800c2c4:	4b14      	ldr	r3, [pc, #80]	@ (800c318 <txDataProcess+0x94>)
 800c2c6:	699b      	ldr	r3, [r3, #24]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7f4 f965 	bl	8000598 <__aeabi_f2d>
 800c2ce:	e9c7 0100 	strd	r0, r1, [r7]
 800c2d2:	4b12      	ldr	r3, [pc, #72]	@ (800c31c <txDataProcess+0x98>)
 800c2d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7f4 f95e 	bl	8000598 <__aeabi_f2d>
 800c2dc:	4602      	mov	r2, r0
 800c2de:	460b      	mov	r3, r1
 800c2e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c2e4:	ed97 7b00 	vldr	d7, [r7]
 800c2e8:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c2ec:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800c2f0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c2f4:	e9cd 4500 	strd	r4, r5, [sp]
 800c2f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c2fc:	4908      	ldr	r1, [pc, #32]	@ (800c320 <txDataProcess+0x9c>)
 800c2fe:	4809      	ldr	r0, [pc, #36]	@ (800c324 <txDataProcess+0xa0>)
 800c300:	f003 fdbe 	bl	800fe80 <siprintf>
}
 800c304:	bf00      	nop
 800c306:	3710      	adds	r7, #16
 800c308:	46bd      	mov	sp, r7
 800c30a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c30e:	bf00      	nop
 800c310:	20000b8c 	.word	0x20000b8c
 800c314:	20000a24 	.word	0x20000a24
 800c318:	200007a4 	.word	0x200007a4
 800c31c:	200008e4 	.word	0x200008e4
 800c320:	080139f4 	.word	0x080139f4
 800c324:	20000a50 	.word	0x20000a50

0800c328 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
 800c330:	2201      	movs	r2, #1
 800c332:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c336:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c33a:	f7f9 fe2f 	bl	8005f9c <HAL_GPIO_WritePin>
    if (hadc == &hadc1)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4a1c      	ldr	r2, [pc, #112]	@ (800c3b4 <HAL_ADCEx_InjectedConvCpltCallback+0x8c>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d12a      	bne.n	800c39c <HAL_ADCEx_InjectedConvCpltCallback+0x74>
    {
        static bool shift;
        shift = !shift;
 800c346:	4b1c      	ldr	r3, [pc, #112]	@ (800c3b8 <HAL_ADCEx_InjectedConvCpltCallback+0x90>)
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	bf0c      	ite	eq
 800c34e:	2301      	moveq	r3, #1
 800c350:	2300      	movne	r3, #0
 800c352:	b2db      	uxtb	r3, r3
 800c354:	461a      	mov	r2, r3
 800c356:	4b18      	ldr	r3, [pc, #96]	@ (800c3b8 <HAL_ADCEx_InjectedConvCpltCallback+0x90>)
 800c358:	701a      	strb	r2, [r3, #0]
        if (shift)
 800c35a:	4b17      	ldr	r3, [pc, #92]	@ (800c3b8 <HAL_ADCEx_InjectedConvCpltCallback+0x90>)
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d00c      	beq.n	800c37c <HAL_ADCEx_InjectedConvCpltCallback+0x54>
        {
            foc(&motor1, hadc1.Instance->JDR1, hadc2.Instance->JDR1);
 800c362:	4b14      	ldr	r3, [pc, #80]	@ (800c3b4 <HAL_ADCEx_InjectedConvCpltCallback+0x8c>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800c36a:	4b14      	ldr	r3, [pc, #80]	@ (800c3bc <HAL_ADCEx_InjectedConvCpltCallback+0x94>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c372:	461a      	mov	r2, r3
 800c374:	4812      	ldr	r0, [pc, #72]	@ (800c3c0 <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 800c376:	f7fe fb57 	bl	800aa28 <foc>
 800c37a:	e00b      	b.n	800c394 <HAL_ADCEx_InjectedConvCpltCallback+0x6c>
        }
        else
        {
            foc(&motor2, hadc1.Instance->JDR2, hadc2.Instance->JDR2);
 800c37c:	4b0d      	ldr	r3, [pc, #52]	@ (800c3b4 <HAL_ADCEx_InjectedConvCpltCallback+0x8c>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 800c384:	4b0d      	ldr	r3, [pc, #52]	@ (800c3bc <HAL_ADCEx_InjectedConvCpltCallback+0x94>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c38c:	461a      	mov	r2, r3
 800c38e:	480d      	ldr	r0, [pc, #52]	@ (800c3c4 <HAL_ADCEx_InjectedConvCpltCallback+0x9c>)
 800c390:	f7fe fb4a 	bl	800aa28 <foc>
        }

        dealPer100us();
 800c394:	f001 ff02 	bl	800e19c <dealPer100us>
        balancerControl();
 800c398:	f000 f816 	bl	800c3c8 <balancerControl>
        load_data[4] = motor2.Uq;
        memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
        HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, sizeof(tempData));
#endif
    }
     HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 800c39c:	2200      	movs	r2, #0
 800c39e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c3a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c3a6:	f7f9 fdf9 	bl	8005f9c <HAL_GPIO_WritePin>
}
 800c3aa:	bf00      	nop
 800c3ac:	3708      	adds	r7, #8
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	2000029c 	.word	0x2000029c
 800c3b8:	20000a4c 	.word	0x20000a4c
 800c3bc:	20000308 	.word	0x20000308
 800c3c0:	200007a4 	.word	0x200007a4
 800c3c4:	200008e4 	.word	0x200008e4

0800c3c8 <balancerControl>:

void balancerControl()
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	af00      	add	r7, sp, #0
    motor1.target = pidOperator(&balancePid, 0 - imu.pit);
 800c3cc:	4b11      	ldr	r3, [pc, #68]	@ (800c414 <balancerControl+0x4c>)
 800c3ce:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c3d2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800c418 <balancerControl+0x50>
 800c3d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3da:	eeb0 0a67 	vmov.f32	s0, s15
 800c3de:	480f      	ldr	r0, [pc, #60]	@ (800c41c <balancerControl+0x54>)
 800c3e0:	f7ff f90a 	bl	800b5f8 <pidOperator>
 800c3e4:	eef0 7a40 	vmov.f32	s15, s0
 800c3e8:	4b0d      	ldr	r3, [pc, #52]	@ (800c420 <balancerControl+0x58>)
 800c3ea:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    motor2.target = pidOperator(&balancePid, 0 - imu.pit);
 800c3ee:	4b09      	ldr	r3, [pc, #36]	@ (800c414 <balancerControl+0x4c>)
 800c3f0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c3f4:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800c418 <balancerControl+0x50>
 800c3f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3fc:	eeb0 0a67 	vmov.f32	s0, s15
 800c400:	4806      	ldr	r0, [pc, #24]	@ (800c41c <balancerControl+0x54>)
 800c402:	f7ff f8f9 	bl	800b5f8 <pidOperator>
 800c406:	eef0 7a40 	vmov.f32	s15, s0
 800c40a:	4b06      	ldr	r3, [pc, #24]	@ (800c424 <balancerControl+0x5c>)
 800c40c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800c410:	bf00      	nop
 800c412:	bd80      	pop	{r7, pc}
 800c414:	20000b8c 	.word	0x20000b8c
 800c418:	00000000 	.word	0x00000000
 800c41c:	20000a24 	.word	0x20000a24
 800c420:	200007a4 	.word	0x200007a4
 800c424:	200008e4 	.word	0x200008e4

0800c428 <HAL_UARTEx_RxEventCallback>:
uint8_t aRxBuffer;
float comm1, comm2, comm3, comm4, comm5, comm6, comm7, comm8, comm9, comm10, comm11;
extern DMA_HandleTypeDef hdma_usart2_rx;
extern DMA_HandleTypeDef hdma_usart3_rx;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	460b      	mov	r3, r1
 800c432:	807b      	strh	r3, [r7, #2]
  // memset(rxBuffer, '\0', sizeof(rxBuffer));
  if (huart == &huart2)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4a16      	ldr	r2, [pc, #88]	@ (800c490 <HAL_UARTEx_RxEventCallback+0x68>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d110      	bne.n	800c45e <HAL_UARTEx_RxEventCallback+0x36>
  {
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, sizeof(rxBuffer));
 800c43c:	2264      	movs	r2, #100	@ 0x64
 800c43e:	4915      	ldr	r1, [pc, #84]	@ (800c494 <HAL_UARTEx_RxEventCallback+0x6c>)
 800c440:	4813      	ldr	r0, [pc, #76]	@ (800c490 <HAL_UARTEx_RxEventCallback+0x68>)
 800c442:	f7fe f8e2 	bl	800a60a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800c446:	4b14      	ldr	r3, [pc, #80]	@ (800c498 <HAL_UARTEx_RxEventCallback+0x70>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	681a      	ldr	r2, [r3, #0]
 800c44c:	4b12      	ldr	r3, [pc, #72]	@ (800c498 <HAL_UARTEx_RxEventCallback+0x70>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f022 0204 	bic.w	r2, r2, #4
 800c454:	601a      	str	r2, [r3, #0]
    toProcessData = 1;
 800c456:	4b11      	ldr	r3, [pc, #68]	@ (800c49c <HAL_UARTEx_RxEventCallback+0x74>)
 800c458:	2201      	movs	r2, #1
 800c45a:	701a      	strb	r2, [r3, #0]
  {
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
    toProcessData = 1;
  }
}
 800c45c:	e013      	b.n	800c486 <HAL_UARTEx_RxEventCallback+0x5e>
  else if (huart == &huart3)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	4a0f      	ldr	r2, [pc, #60]	@ (800c4a0 <HAL_UARTEx_RxEventCallback+0x78>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d10f      	bne.n	800c486 <HAL_UARTEx_RxEventCallback+0x5e>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 800c466:	2264      	movs	r2, #100	@ 0x64
 800c468:	490a      	ldr	r1, [pc, #40]	@ (800c494 <HAL_UARTEx_RxEventCallback+0x6c>)
 800c46a:	480d      	ldr	r0, [pc, #52]	@ (800c4a0 <HAL_UARTEx_RxEventCallback+0x78>)
 800c46c:	f7fe f8cd 	bl	800a60a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800c470:	4b0c      	ldr	r3, [pc, #48]	@ (800c4a4 <HAL_UARTEx_RxEventCallback+0x7c>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	4b0b      	ldr	r3, [pc, #44]	@ (800c4a4 <HAL_UARTEx_RxEventCallback+0x7c>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f022 0204 	bic.w	r2, r2, #4
 800c47e:	601a      	str	r2, [r3, #0]
    toProcessData = 1;
 800c480:	4b06      	ldr	r3, [pc, #24]	@ (800c49c <HAL_UARTEx_RxEventCallback+0x74>)
 800c482:	2201      	movs	r2, #1
 800c484:	701a      	strb	r2, [r3, #0]
}
 800c486:	bf00      	nop
 800c488:	3708      	adds	r7, #8
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	200004f0 	.word	0x200004f0
 800c494:	20000ab4 	.word	0x20000ab4
 800c498:	20000618 	.word	0x20000618
 800c49c:	20000b18 	.word	0x20000b18
 800c4a0:	20000584 	.word	0x20000584
 800c4a4:	20000738 	.word	0x20000738

0800c4a8 <printLog>:

// DMA模式
void printLog(const char *format, ...)
{
 800c4a8:	b40f      	push	{r0, r1, r2, r3}
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b0c2      	sub	sp, #264	@ 0x108
 800c4ae:	af00      	add	r7, sp, #0

  va_list args;           // 定义参数列表变量
  va_start(args, format); // 从format位置开始接收参数表，放在arg里面
 800c4b0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800c4b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

  char strBuf[256];               // 定义输出的字符串
  vsprintf(strBuf, format, args); // 使用vsprintf将格式化的数据写入缓冲区
 800c4b8:	1d3b      	adds	r3, r7, #4
 800c4ba:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800c4be:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f003 fd56 	bl	800ff74 <vsiprintf>
  // while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX)
  // {
  //   // Wait for DMA transfer to complete
  // }
  // HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf));
  HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf), 1000);
 800c4c8:	1d3b      	adds	r3, r7, #4
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7f3 fef8 	bl	80002c0 <strlen>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	1d39      	adds	r1, r7, #4
 800c4d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c4da:	4805      	ldr	r0, [pc, #20]	@ (800c4f0 <printLog+0x48>)
 800c4dc:	f7fc fbfa 	bl	8008cd4 <HAL_UART_Transmit>
}
 800c4e0:	bf00      	nop
 800c4e2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4ec:	b004      	add	sp, #16
 800c4ee:	4770      	bx	lr
 800c4f0:	20000584 	.word	0x20000584

0800c4f4 <uartTx>:

//   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
// }

void uartTx()
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	af00      	add	r7, sp, #0

#if SHOW_WAVE == 0
  txDataProcess();
 800c4f8:	f7ff fec4 	bl	800c284 <txDataProcess>
  // HAL_UART_Transmit_DMA(&huart2, (uint8_t *)txBuffer, 10);
  // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, 10);
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800c4fc:	2264      	movs	r2, #100	@ 0x64
 800c4fe:	4903      	ldr	r1, [pc, #12]	@ (800c50c <uartTx+0x18>)
 800c500:	4803      	ldr	r0, [pc, #12]	@ (800c510 <uartTx+0x1c>)
 800c502:	f7fc fc75 	bl	8008df0 <HAL_UART_Transmit_DMA>
#endif
}
 800c506:	bf00      	nop
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	20000a50 	.word	0x20000a50
 800c510:	20000584 	.word	0x20000584

0800c514 <commander_run>:

void commander_run(BldcMotor *motor1, BldcMotor *motor2)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  if (toProcessData == 1)
 800c51e:	4b2f      	ldr	r3, [pc, #188]	@ (800c5dc <commander_run+0xc8>)
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	2b01      	cmp	r3, #1
 800c524:	d156      	bne.n	800c5d4 <commander_run+0xc0>
  {
    memset(txBuffer, '\0', sizeof(txBuffer));
 800c526:	2264      	movs	r2, #100	@ 0x64
 800c528:	2100      	movs	r1, #0
 800c52a:	482d      	ldr	r0, [pc, #180]	@ (800c5e0 <commander_run+0xcc>)
 800c52c:	f003 fd2c 	bl	800ff88 <memset>
    printLog(rxBuffer);
 800c530:	482c      	ldr	r0, [pc, #176]	@ (800c5e4 <commander_run+0xd0>)
 800c532:	f7ff ffb9 	bl	800c4a8 <printLog>
    switch (rxBuffer[0])
 800c536:	4b2b      	ldr	r3, [pc, #172]	@ (800c5e4 <commander_run+0xd0>)
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	2b54      	cmp	r3, #84	@ 0x54
 800c53c:	d00b      	beq.n	800c556 <commander_run+0x42>
 800c53e:	2b54      	cmp	r3, #84	@ 0x54
 800c540:	dc3b      	bgt.n	800c5ba <commander_run+0xa6>
 800c542:	2b48      	cmp	r3, #72	@ 0x48
 800c544:	d002      	beq.n	800c54c <commander_run+0x38>
 800c546:	2b50      	cmp	r3, #80	@ 0x50
 800c548:	d01e      	beq.n	800c588 <commander_run+0x74>
 800c54a:	e036      	b.n	800c5ba <commander_run+0xa6>
      //   sprintf(txBuffer, "engine start!\r\n");
      //   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
      //   break;

    case 'H':
      sprintf(txBuffer, "Hello World!\r\n");
 800c54c:	4926      	ldr	r1, [pc, #152]	@ (800c5e8 <commander_run+0xd4>)
 800c54e:	4824      	ldr	r0, [pc, #144]	@ (800c5e0 <commander_run+0xcc>)
 800c550:	f003 fc96 	bl	800fe80 <siprintf>
      break;
 800c554:	e031      	b.n	800c5ba <commander_run+0xa6>

    case 'T': // T6.28
      motor1->target = atof((const char *)(rxBuffer + 1));
 800c556:	4b25      	ldr	r3, [pc, #148]	@ (800c5ec <commander_run+0xd8>)
 800c558:	4618      	mov	r0, r3
 800c55a:	f001 ff49 	bl	800e3f0 <atof>
 800c55e:	ec53 2b10 	vmov	r2, r3, d0
 800c562:	4610      	mov	r0, r2
 800c564:	4619      	mov	r1, r3
 800c566:	f7f4 fb67 	bl	8000c38 <__aeabi_d2f>
 800c56a:	4602      	mov	r2, r0
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	631a      	str	r2, [r3, #48]	@ 0x30
      sprintf(txBuffer, "Target=%.2f\r\n", motor1->target);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c574:	4618      	mov	r0, r3
 800c576:	f7f4 f80f 	bl	8000598 <__aeabi_f2d>
 800c57a:	4602      	mov	r2, r0
 800c57c:	460b      	mov	r3, r1
 800c57e:	491c      	ldr	r1, [pc, #112]	@ (800c5f0 <commander_run+0xdc>)
 800c580:	4817      	ldr	r0, [pc, #92]	@ (800c5e0 <commander_run+0xcc>)
 800c582:	f003 fc7d 	bl	800fe80 <siprintf>
      // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
      break;
 800c586:	e018      	b.n	800c5ba <commander_run+0xa6>
    case 'P': // P0.5
#if CALI_BALANCE
      balancePid.P = atof((const char *)(rxBuffer + 1));
 800c588:	4b18      	ldr	r3, [pc, #96]	@ (800c5ec <commander_run+0xd8>)
 800c58a:	4618      	mov	r0, r3
 800c58c:	f001 ff30 	bl	800e3f0 <atof>
 800c590:	ec53 2b10 	vmov	r2, r3, d0
 800c594:	4610      	mov	r0, r2
 800c596:	4619      	mov	r1, r3
 800c598:	f7f4 fb4e 	bl	8000c38 <__aeabi_d2f>
 800c59c:	4603      	mov	r3, r0
 800c59e:	4a15      	ldr	r2, [pc, #84]	@ (800c5f4 <commander_run+0xe0>)
 800c5a0:	6013      	str	r3, [r2, #0]
      sprintf(txBuffer, "P=%.2f\r\n", balancePid.P);
 800c5a2:	4b14      	ldr	r3, [pc, #80]	@ (800c5f4 <commander_run+0xe0>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7f3 fff6 	bl	8000598 <__aeabi_f2d>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	4911      	ldr	r1, [pc, #68]	@ (800c5f8 <commander_run+0xe4>)
 800c5b2:	480b      	ldr	r0, [pc, #44]	@ (800c5e0 <commander_run+0xcc>)
 800c5b4:	f003 fc64 	bl	800fe80 <siprintf>
      //   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
#else

#endif

      break;
 800c5b8:	bf00      	nop
      // case 'A': // A
      //   sprintf(sndBuff, "Ang=%.2f\r\n", shaftAngle);
      //   printf("%s", sndBuff);
      //   break;
    }
    HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800c5ba:	2264      	movs	r2, #100	@ 0x64
 800c5bc:	4908      	ldr	r1, [pc, #32]	@ (800c5e0 <commander_run+0xcc>)
 800c5be:	480f      	ldr	r0, [pc, #60]	@ (800c5fc <commander_run+0xe8>)
 800c5c0:	f7fc fc16 	bl	8008df0 <HAL_UART_Transmit_DMA>
    memset(rxBuffer, '\0', sizeof(rxBuffer));
 800c5c4:	2264      	movs	r2, #100	@ 0x64
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	4806      	ldr	r0, [pc, #24]	@ (800c5e4 <commander_run+0xd0>)
 800c5ca:	f003 fcdd 	bl	800ff88 <memset>
    toProcessData = 0;
 800c5ce:	4b03      	ldr	r3, [pc, #12]	@ (800c5dc <commander_run+0xc8>)
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	701a      	strb	r2, [r3, #0]
  }
}
 800c5d4:	bf00      	nop
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	20000b18 	.word	0x20000b18
 800c5e0:	20000a50 	.word	0x20000a50
 800c5e4:	20000ab4 	.word	0x20000ab4
 800c5e8:	08013a30 	.word	0x08013a30
 800c5ec:	20000ab5 	.word	0x20000ab5
 800c5f0:	08013a40 	.word	0x08013a40
 800c5f4:	20000a24 	.word	0x20000a24
 800c5f8:	08013a50 	.word	0x08013a50
 800c5fc:	20000584 	.word	0x20000584

0800c600 <getKeyFlags>:
#include "key.h"

static KeyStruct keyStruct[KEY_NUM];

uint getKeyFlags()
{
 800c600:	b580      	push	{r7, lr}
 800c602:	af00      	add	r7, sp, #0
    static uint keyFlagsBak; // back up keyflags for filtering
    static uchar filterCnt;
    static Byte flags;       // real time key flags with bits operation
    static uint keyFlagsBuf; // return key flags after filtering

    flags.byte = 0;
 800c604:	4b1a      	ldr	r3, [pc, #104]	@ (800c670 <getKeyFlags+0x70>)
 800c606:	2200      	movs	r2, #0
 800c608:	701a      	strb	r2, [r3, #0]

    // when IO been multiplexed
    if (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == 0)
 800c60a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c60e:	4819      	ldr	r0, [pc, #100]	@ (800c674 <getKeyFlags+0x74>)
 800c610:	f7f9 fcac 	bl	8005f6c <HAL_GPIO_ReadPin>
 800c614:	4603      	mov	r3, r0
 800c616:	2b00      	cmp	r3, #0
 800c618:	d104      	bne.n	800c624 <getKeyFlags+0x24>
    {
        flags.bits.b0 = 1; // SW1
 800c61a:	4a15      	ldr	r2, [pc, #84]	@ (800c670 <getKeyFlags+0x70>)
 800c61c:	7813      	ldrb	r3, [r2, #0]
 800c61e:	f043 0301 	orr.w	r3, r3, #1
 800c622:	7013      	strb	r3, [r2, #0]
    }

  
    if (flags.byte == keyFlagsBak)
 800c624:	4b12      	ldr	r3, [pc, #72]	@ (800c670 <getKeyFlags+0x70>)
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	461a      	mov	r2, r3
 800c62a:	4b13      	ldr	r3, [pc, #76]	@ (800c678 <getKeyFlags+0x78>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d114      	bne.n	800c65c <getKeyFlags+0x5c>
    {
        if (flags.bits.b0)
 800c632:	4b0f      	ldr	r3, [pc, #60]	@ (800c670 <getKeyFlags+0x70>)
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	f003 0301 	and.w	r3, r3, #1
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d006      	beq.n	800c64e <getKeyFlags+0x4e>
            keyFlagsBuf |= 1;
 800c640:	4b0e      	ldr	r3, [pc, #56]	@ (800c67c <getKeyFlags+0x7c>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f043 0301 	orr.w	r3, r3, #1
 800c648:	4a0c      	ldr	r2, [pc, #48]	@ (800c67c <getKeyFlags+0x7c>)
 800c64a:	6013      	str	r3, [r2, #0]
 800c64c:	e00b      	b.n	800c666 <getKeyFlags+0x66>
        else
            keyFlagsBuf &= ~1;
 800c64e:	4b0b      	ldr	r3, [pc, #44]	@ (800c67c <getKeyFlags+0x7c>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f023 0301 	bic.w	r3, r3, #1
 800c656:	4a09      	ldr	r2, [pc, #36]	@ (800c67c <getKeyFlags+0x7c>)
 800c658:	6013      	str	r3, [r2, #0]
 800c65a:	e004      	b.n	800c666 <getKeyFlags+0x66>
        // else
        //     keyFlagsBuf &= ~(1 << 2);
    }
    else
    {
        keyFlagsBak = flags.byte;
 800c65c:	4b04      	ldr	r3, [pc, #16]	@ (800c670 <getKeyFlags+0x70>)
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	461a      	mov	r2, r3
 800c662:	4b05      	ldr	r3, [pc, #20]	@ (800c678 <getKeyFlags+0x78>)
 800c664:	601a      	str	r2, [r3, #0]
    }
#if DEBUG_KEY
    // displayStuff = keyFlagsBuf;
#endif

    return keyFlagsBuf;
 800c666:	4b05      	ldr	r3, [pc, #20]	@ (800c67c <getKeyFlags+0x7c>)
 800c668:	681b      	ldr	r3, [r3, #0]
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	20000b34 	.word	0x20000b34
 800c674:	48000800 	.word	0x48000800
 800c678:	20000b38 	.word	0x20000b38
 800c67c:	20000b3c 	.word	0x20000b3c

0800c680 <keyScan>:

void keyScan()
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0

    uint keyFlags;

    keyFlags = getKeyFlags();
 800c686:	f7ff ffbb 	bl	800c600 <getKeyFlags>
 800c68a:	6038      	str	r0, [r7, #0]

    if (keyFlags == 0)
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d13b      	bne.n	800c70a <keyScan+0x8a>
    {
        uchar i;
        for (i = 0; i < KEY_NUM; i++)
 800c692:	2300      	movs	r3, #0
 800c694:	71fb      	strb	r3, [r7, #7]
 800c696:	e035      	b.n	800c704 <keyScan+0x84>
        {
            if (keyStruct[i].keyType == LONG_WITH_SHORT && keyStruct[i].trigCnt > 0)
 800c698:	79fa      	ldrb	r2, [r7, #7]
 800c69a:	4992      	ldr	r1, [pc, #584]	@ (800c8e4 <keyScan+0x264>)
 800c69c:	4613      	mov	r3, r2
 800c69e:	005b      	lsls	r3, r3, #1
 800c6a0:	4413      	add	r3, r2
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	440b      	add	r3, r1
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d114      	bne.n	800c6d6 <keyScan+0x56>
 800c6ac:	79fa      	ldrb	r2, [r7, #7]
 800c6ae:	498d      	ldr	r1, [pc, #564]	@ (800c8e4 <keyScan+0x264>)
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	4413      	add	r3, r2
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	440b      	add	r3, r1
 800c6ba:	3304      	adds	r3, #4
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d009      	beq.n	800c6d6 <keyScan+0x56>
            {
                keyStruct[i].trigType = TRIG_SHORT;
 800c6c2:	79fa      	ldrb	r2, [r7, #7]
 800c6c4:	4987      	ldr	r1, [pc, #540]	@ (800c8e4 <keyScan+0x264>)
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	005b      	lsls	r3, r3, #1
 800c6ca:	4413      	add	r3, r2
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	440b      	add	r3, r1
 800c6d0:	3308      	adds	r3, #8
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	701a      	strb	r2, [r3, #0]
            }
            keyStruct[i].trigCnt = 0;
 800c6d6:	79fa      	ldrb	r2, [r7, #7]
 800c6d8:	4982      	ldr	r1, [pc, #520]	@ (800c8e4 <keyScan+0x264>)
 800c6da:	4613      	mov	r3, r2
 800c6dc:	005b      	lsls	r3, r3, #1
 800c6de:	4413      	add	r3, r2
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	440b      	add	r3, r1
 800c6e4:	3304      	adds	r3, #4
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	601a      	str	r2, [r3, #0]
            keyStruct[i].preKeyValue = NO_TRIG;
 800c6ea:	79fa      	ldrb	r2, [r7, #7]
 800c6ec:	497d      	ldr	r1, [pc, #500]	@ (800c8e4 <keyScan+0x264>)
 800c6ee:	4613      	mov	r3, r2
 800c6f0:	005b      	lsls	r3, r3, #1
 800c6f2:	4413      	add	r3, r2
 800c6f4:	009b      	lsls	r3, r3, #2
 800c6f6:	440b      	add	r3, r1
 800c6f8:	3309      	adds	r3, #9
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < KEY_NUM; i++)
 800c6fe:	79fb      	ldrb	r3, [r7, #7]
 800c700:	3301      	adds	r3, #1
 800c702:	71fb      	strb	r3, [r7, #7]
 800c704:	79fb      	ldrb	r3, [r7, #7]
 800c706:	2b01      	cmp	r3, #1
 800c708:	d9c6      	bls.n	800c698 <keyScan+0x18>
        }
    }


    if (keyStruct[1].preKeyValue == NO_TRIG)
 800c70a:	4b76      	ldr	r3, [pc, #472]	@ (800c8e4 <keyScan+0x264>)
 800c70c:	7d5b      	ldrb	r3, [r3, #21]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d131      	bne.n	800c776 <keyScan+0xf6>
    {
        if (keyFlags == K(1))
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	2b01      	cmp	r3, #1
 800c716:	d15d      	bne.n	800c7d4 <keyScan+0x154>
        {
            if (keyStruct[1].preKeyValue == NO_TRIG)
 800c718:	4b72      	ldr	r3, [pc, #456]	@ (800c8e4 <keyScan+0x264>)
 800c71a:	7d5b      	ldrb	r3, [r3, #21]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d159      	bne.n	800c7d4 <keyScan+0x154>
            {
                if (keyStruct[1].keyType == SHORT || keyStruct[1].keyType == CONTINUOUS)
 800c720:	4b70      	ldr	r3, [pc, #448]	@ (800c8e4 <keyScan+0x264>)
 800c722:	7b1b      	ldrb	r3, [r3, #12]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d003      	beq.n	800c730 <keyScan+0xb0>
 800c728:	4b6e      	ldr	r3, [pc, #440]	@ (800c8e4 <keyScan+0x264>)
 800c72a:	7b1b      	ldrb	r3, [r3, #12]
 800c72c:	2b02      	cmp	r3, #2
 800c72e:	d106      	bne.n	800c73e <keyScan+0xbe>
                {
                    keyStruct[1].trigType = TRIG_SHORT;
 800c730:	4b6c      	ldr	r3, [pc, #432]	@ (800c8e4 <keyScan+0x264>)
 800c732:	2201      	movs	r2, #1
 800c734:	751a      	strb	r2, [r3, #20]
                    keyStruct[1].preKeyValue = TRIG_SHORT;
 800c736:	4b6b      	ldr	r3, [pc, #428]	@ (800c8e4 <keyScan+0x264>)
 800c738:	2201      	movs	r2, #1
 800c73a:	755a      	strb	r2, [r3, #21]
 800c73c:	e04a      	b.n	800c7d4 <keyScan+0x154>
                }
                else if (keyStruct[1].keyType == LONG_WITH_SHORT || keyStruct[1].keyType == LONG)
 800c73e:	4b69      	ldr	r3, [pc, #420]	@ (800c8e4 <keyScan+0x264>)
 800c740:	7b1b      	ldrb	r3, [r3, #12]
 800c742:	2b01      	cmp	r3, #1
 800c744:	d003      	beq.n	800c74e <keyScan+0xce>
 800c746:	4b67      	ldr	r3, [pc, #412]	@ (800c8e4 <keyScan+0x264>)
 800c748:	7b1b      	ldrb	r3, [r3, #12]
 800c74a:	2b03      	cmp	r3, #3
 800c74c:	d142      	bne.n	800c7d4 <keyScan+0x154>
                {
                    if (++keyStruct[1].trigCnt >= KEY1_LONG_CNT)
 800c74e:	4b65      	ldr	r3, [pc, #404]	@ (800c8e4 <keyScan+0x264>)
 800c750:	691b      	ldr	r3, [r3, #16]
 800c752:	3301      	adds	r3, #1
 800c754:	4a63      	ldr	r2, [pc, #396]	@ (800c8e4 <keyScan+0x264>)
 800c756:	6113      	str	r3, [r2, #16]
 800c758:	4b62      	ldr	r3, [pc, #392]	@ (800c8e4 <keyScan+0x264>)
 800c75a:	691b      	ldr	r3, [r3, #16]
 800c75c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800c760:	d338      	bcc.n	800c7d4 <keyScan+0x154>
                    {
                        keyStruct[1].trigCnt = 0;
 800c762:	4b60      	ldr	r3, [pc, #384]	@ (800c8e4 <keyScan+0x264>)
 800c764:	2200      	movs	r2, #0
 800c766:	611a      	str	r2, [r3, #16]
                        keyStruct[1].trigType = TRIG_LONG;
 800c768:	4b5e      	ldr	r3, [pc, #376]	@ (800c8e4 <keyScan+0x264>)
 800c76a:	2202      	movs	r2, #2
 800c76c:	751a      	strb	r2, [r3, #20]
                        keyStruct[1].preKeyValue = TRIG_LONG;
 800c76e:	4b5d      	ldr	r3, [pc, #372]	@ (800c8e4 <keyScan+0x264>)
 800c770:	2202      	movs	r2, #2
 800c772:	755a      	strb	r2, [r3, #21]
 800c774:	e02e      	b.n	800c7d4 <keyScan+0x154>
                    }
                }
            }
        }
    }
    else if (keyStruct[1].keyType == CONTINUOUS)
 800c776:	4b5b      	ldr	r3, [pc, #364]	@ (800c8e4 <keyScan+0x264>)
 800c778:	7b1b      	ldrb	r3, [r3, #12]
 800c77a:	2b02      	cmp	r3, #2
 800c77c:	d12a      	bne.n	800c7d4 <keyScan+0x154>
    {
        if (keyStruct[1].preKeyValue == TRIG_SHORT) // short key
 800c77e:	4b59      	ldr	r3, [pc, #356]	@ (800c8e4 <keyScan+0x264>)
 800c780:	7d5b      	ldrb	r3, [r3, #21]
 800c782:	2b01      	cmp	r3, #1
 800c784:	d112      	bne.n	800c7ac <keyScan+0x12c>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_TRIG_CNT)
 800c786:	4b57      	ldr	r3, [pc, #348]	@ (800c8e4 <keyScan+0x264>)
 800c788:	691b      	ldr	r3, [r3, #16]
 800c78a:	3301      	adds	r3, #1
 800c78c:	4a55      	ldr	r2, [pc, #340]	@ (800c8e4 <keyScan+0x264>)
 800c78e:	6113      	str	r3, [r2, #16]
 800c790:	4b54      	ldr	r3, [pc, #336]	@ (800c8e4 <keyScan+0x264>)
 800c792:	691b      	ldr	r3, [r3, #16]
 800c794:	2b63      	cmp	r3, #99	@ 0x63
 800c796:	d91d      	bls.n	800c7d4 <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800c798:	4b52      	ldr	r3, [pc, #328]	@ (800c8e4 <keyScan+0x264>)
 800c79a:	2200      	movs	r2, #0
 800c79c:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = TRIG_LONG; // long
 800c79e:	4b51      	ldr	r3, [pc, #324]	@ (800c8e4 <keyScan+0x264>)
 800c7a0:	2202      	movs	r2, #2
 800c7a2:	751a      	strb	r2, [r3, #20]
                keyStruct[1].preKeyValue = TRIG_LONG;
 800c7a4:	4b4f      	ldr	r3, [pc, #316]	@ (800c8e4 <keyScan+0x264>)
 800c7a6:	2202      	movs	r2, #2
 800c7a8:	755a      	strb	r2, [r3, #21]
 800c7aa:	e013      	b.n	800c7d4 <keyScan+0x154>
            }
        }
        else if (keyStruct[1].preKeyValue == TRIG_LONG) // long key
 800c7ac:	4b4d      	ldr	r3, [pc, #308]	@ (800c8e4 <keyScan+0x264>)
 800c7ae:	7d5b      	ldrb	r3, [r3, #21]
 800c7b0:	2b02      	cmp	r3, #2
 800c7b2:	d10f      	bne.n	800c7d4 <keyScan+0x154>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_INTEVAL)
 800c7b4:	4b4b      	ldr	r3, [pc, #300]	@ (800c8e4 <keyScan+0x264>)
 800c7b6:	691b      	ldr	r3, [r3, #16]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	4a4a      	ldr	r2, [pc, #296]	@ (800c8e4 <keyScan+0x264>)
 800c7bc:	6113      	str	r3, [r2, #16]
 800c7be:	4b49      	ldr	r3, [pc, #292]	@ (800c8e4 <keyScan+0x264>)
 800c7c0:	691b      	ldr	r3, [r3, #16]
 800c7c2:	2b27      	cmp	r3, #39	@ 0x27
 800c7c4:	d906      	bls.n	800c7d4 <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800c7c6:	4b47      	ldr	r3, [pc, #284]	@ (800c8e4 <keyScan+0x264>)
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = keyStruct[1].preKeyValue;
 800c7cc:	4b45      	ldr	r3, [pc, #276]	@ (800c8e4 <keyScan+0x264>)
 800c7ce:	7d5a      	ldrb	r2, [r3, #21]
 800c7d0:	4b44      	ldr	r3, [pc, #272]	@ (800c8e4 <keyScan+0x264>)
 800c7d2:	751a      	strb	r2, [r3, #20]
            }
        }
    }

    if (keyStruct[2].preKeyValue == NO_TRIG)
 800c7d4:	4b43      	ldr	r3, [pc, #268]	@ (800c8e4 <keyScan+0x264>)
 800c7d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d131      	bne.n	800c842 <keyScan+0x1c2>
    {
        if (keyFlags == K(2))
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	2b02      	cmp	r3, #2
 800c7e2:	d163      	bne.n	800c8ac <keyScan+0x22c>
        {

            if (keyStruct[2].keyType == SHORT || keyStruct[2].keyType == CONTINUOUS)
 800c7e4:	4b3f      	ldr	r3, [pc, #252]	@ (800c8e4 <keyScan+0x264>)
 800c7e6:	7e1b      	ldrb	r3, [r3, #24]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d003      	beq.n	800c7f4 <keyScan+0x174>
 800c7ec:	4b3d      	ldr	r3, [pc, #244]	@ (800c8e4 <keyScan+0x264>)
 800c7ee:	7e1b      	ldrb	r3, [r3, #24]
 800c7f0:	2b02      	cmp	r3, #2
 800c7f2:	d108      	bne.n	800c806 <keyScan+0x186>
            {
                keyStruct[2].trigType = TRIG_SHORT;
 800c7f4:	4b3b      	ldr	r3, [pc, #236]	@ (800c8e4 <keyScan+0x264>)
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_SHORT;
 800c7fc:	4b39      	ldr	r3, [pc, #228]	@ (800c8e4 <keyScan+0x264>)
 800c7fe:	2201      	movs	r2, #1
 800c800:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800c804:	e052      	b.n	800c8ac <keyScan+0x22c>
            }
            else if (keyStruct[2].keyType == LONG_WITH_SHORT || keyStruct[2].keyType == LONG)
 800c806:	4b37      	ldr	r3, [pc, #220]	@ (800c8e4 <keyScan+0x264>)
 800c808:	7e1b      	ldrb	r3, [r3, #24]
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d003      	beq.n	800c816 <keyScan+0x196>
 800c80e:	4b35      	ldr	r3, [pc, #212]	@ (800c8e4 <keyScan+0x264>)
 800c810:	7e1b      	ldrb	r3, [r3, #24]
 800c812:	2b03      	cmp	r3, #3
 800c814:	d14a      	bne.n	800c8ac <keyScan+0x22c>
            {
                if (++keyStruct[2].trigCnt >= KEY2_LONG_CNT)
 800c816:	4b33      	ldr	r3, [pc, #204]	@ (800c8e4 <keyScan+0x264>)
 800c818:	69db      	ldr	r3, [r3, #28]
 800c81a:	3301      	adds	r3, #1
 800c81c:	4a31      	ldr	r2, [pc, #196]	@ (800c8e4 <keyScan+0x264>)
 800c81e:	61d3      	str	r3, [r2, #28]
 800c820:	4b30      	ldr	r3, [pc, #192]	@ (800c8e4 <keyScan+0x264>)
 800c822:	69db      	ldr	r3, [r3, #28]
 800c824:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800c828:	d340      	bcc.n	800c8ac <keyScan+0x22c>
                {
                    keyStruct[2].trigCnt = 0;
 800c82a:	4b2e      	ldr	r3, [pc, #184]	@ (800c8e4 <keyScan+0x264>)
 800c82c:	2200      	movs	r2, #0
 800c82e:	61da      	str	r2, [r3, #28]
                    keyStruct[2].trigType = TRIG_LONG;
 800c830:	4b2c      	ldr	r3, [pc, #176]	@ (800c8e4 <keyScan+0x264>)
 800c832:	2202      	movs	r2, #2
 800c834:	f883 2020 	strb.w	r2, [r3, #32]
                    keyStruct[2].preKeyValue = TRIG_LONG;
 800c838:	4b2a      	ldr	r3, [pc, #168]	@ (800c8e4 <keyScan+0x264>)
 800c83a:	2202      	movs	r2, #2
 800c83c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800c840:	e034      	b.n	800c8ac <keyScan+0x22c>
                }
            }
        }
    }
    else if (keyStruct[2].keyType == CONTINUOUS)
 800c842:	4b28      	ldr	r3, [pc, #160]	@ (800c8e4 <keyScan+0x264>)
 800c844:	7e1b      	ldrb	r3, [r3, #24]
 800c846:	2b02      	cmp	r3, #2
 800c848:	d130      	bne.n	800c8ac <keyScan+0x22c>
    {
        if (keyStruct[2].preKeyValue == TRIG_SHORT) // short key
 800c84a:	4b26      	ldr	r3, [pc, #152]	@ (800c8e4 <keyScan+0x264>)
 800c84c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c850:	2b01      	cmp	r3, #1
 800c852:	d114      	bne.n	800c87e <keyScan+0x1fe>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_TRIG_CNT)
 800c854:	4b23      	ldr	r3, [pc, #140]	@ (800c8e4 <keyScan+0x264>)
 800c856:	69db      	ldr	r3, [r3, #28]
 800c858:	3301      	adds	r3, #1
 800c85a:	4a22      	ldr	r2, [pc, #136]	@ (800c8e4 <keyScan+0x264>)
 800c85c:	61d3      	str	r3, [r2, #28]
 800c85e:	4b21      	ldr	r3, [pc, #132]	@ (800c8e4 <keyScan+0x264>)
 800c860:	69db      	ldr	r3, [r3, #28]
 800c862:	2b63      	cmp	r3, #99	@ 0x63
 800c864:	d922      	bls.n	800c8ac <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800c866:	4b1f      	ldr	r3, [pc, #124]	@ (800c8e4 <keyScan+0x264>)
 800c868:	2200      	movs	r2, #0
 800c86a:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = TRIG_LONG; // long
 800c86c:	4b1d      	ldr	r3, [pc, #116]	@ (800c8e4 <keyScan+0x264>)
 800c86e:	2202      	movs	r2, #2
 800c870:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_LONG;
 800c874:	4b1b      	ldr	r3, [pc, #108]	@ (800c8e4 <keyScan+0x264>)
 800c876:	2202      	movs	r2, #2
 800c878:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800c87c:	e016      	b.n	800c8ac <keyScan+0x22c>
            }
        }
        else if (keyStruct[2].preKeyValue == TRIG_LONG) // long key
 800c87e:	4b19      	ldr	r3, [pc, #100]	@ (800c8e4 <keyScan+0x264>)
 800c880:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c884:	2b02      	cmp	r3, #2
 800c886:	d111      	bne.n	800c8ac <keyScan+0x22c>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_INTEVAL)
 800c888:	4b16      	ldr	r3, [pc, #88]	@ (800c8e4 <keyScan+0x264>)
 800c88a:	69db      	ldr	r3, [r3, #28]
 800c88c:	3301      	adds	r3, #1
 800c88e:	4a15      	ldr	r2, [pc, #84]	@ (800c8e4 <keyScan+0x264>)
 800c890:	61d3      	str	r3, [r2, #28]
 800c892:	4b14      	ldr	r3, [pc, #80]	@ (800c8e4 <keyScan+0x264>)
 800c894:	69db      	ldr	r3, [r3, #28]
 800c896:	2b27      	cmp	r3, #39	@ 0x27
 800c898:	d908      	bls.n	800c8ac <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800c89a:	4b12      	ldr	r3, [pc, #72]	@ (800c8e4 <keyScan+0x264>)
 800c89c:	2200      	movs	r2, #0
 800c89e:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = keyStruct[2].preKeyValue;
 800c8a0:	4b10      	ldr	r3, [pc, #64]	@ (800c8e4 <keyScan+0x264>)
 800c8a2:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800c8a6:	4b0f      	ldr	r3, [pc, #60]	@ (800c8e4 <keyScan+0x264>)
 800c8a8:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }

    if (keyStruct[3].preKeyValue == NO_TRIG)
 800c8ac:	4b0d      	ldr	r3, [pc, #52]	@ (800c8e4 <keyScan+0x264>)
 800c8ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d137      	bne.n	800c926 <keyScan+0x2a6>
    {
        if (keyFlags == K(3))
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	2b04      	cmp	r3, #4
 800c8ba:	d16a      	bne.n	800c992 <keyScan+0x312>
        {
            if (keyStruct[3].keyType == SHORT || keyStruct[3].keyType == CONTINUOUS)
 800c8bc:	4b09      	ldr	r3, [pc, #36]	@ (800c8e4 <keyScan+0x264>)
 800c8be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d004      	beq.n	800c8d0 <keyScan+0x250>
 800c8c6:	4b07      	ldr	r3, [pc, #28]	@ (800c8e4 <keyScan+0x264>)
 800c8c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c8cc:	2b02      	cmp	r3, #2
 800c8ce:	d10b      	bne.n	800c8e8 <keyScan+0x268>
            {
                keyStruct[3].trigType = TRIG_SHORT;
 800c8d0:	4b04      	ldr	r3, [pc, #16]	@ (800c8e4 <keyScan+0x264>)
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_SHORT;
 800c8d8:	4b02      	ldr	r3, [pc, #8]	@ (800c8e4 <keyScan+0x264>)
 800c8da:	2201      	movs	r2, #1
 800c8dc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                keyStruct[3].trigCnt = 0;
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
            }
        }
    }
}
 800c8e0:	e057      	b.n	800c992 <keyScan+0x312>
 800c8e2:	bf00      	nop
 800c8e4:	20000b1c 	.word	0x20000b1c
            else if (keyStruct[3].keyType == LONG_WITH_SHORT || keyStruct[3].keyType == LONG)
 800c8e8:	4b2c      	ldr	r3, [pc, #176]	@ (800c99c <keyScan+0x31c>)
 800c8ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d004      	beq.n	800c8fc <keyScan+0x27c>
 800c8f2:	4b2a      	ldr	r3, [pc, #168]	@ (800c99c <keyScan+0x31c>)
 800c8f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c8f8:	2b03      	cmp	r3, #3
 800c8fa:	d14a      	bne.n	800c992 <keyScan+0x312>
                if (++keyStruct[3].trigCnt >= KEY3_LONG_CNT)
 800c8fc:	4b27      	ldr	r3, [pc, #156]	@ (800c99c <keyScan+0x31c>)
 800c8fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c900:	3301      	adds	r3, #1
 800c902:	4a26      	ldr	r2, [pc, #152]	@ (800c99c <keyScan+0x31c>)
 800c904:	6293      	str	r3, [r2, #40]	@ 0x28
 800c906:	4b25      	ldr	r3, [pc, #148]	@ (800c99c <keyScan+0x31c>)
 800c908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d041      	beq.n	800c992 <keyScan+0x312>
                    keyStruct[3].trigCnt = 0;
 800c90e:	4b23      	ldr	r3, [pc, #140]	@ (800c99c <keyScan+0x31c>)
 800c910:	2200      	movs	r2, #0
 800c912:	629a      	str	r2, [r3, #40]	@ 0x28
                    keyStruct[3].trigType = TRIG_LONG;
 800c914:	4b21      	ldr	r3, [pc, #132]	@ (800c99c <keyScan+0x31c>)
 800c916:	2202      	movs	r2, #2
 800c918:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                    keyStruct[3].preKeyValue = TRIG_LONG;
 800c91c:	4b1f      	ldr	r3, [pc, #124]	@ (800c99c <keyScan+0x31c>)
 800c91e:	2202      	movs	r2, #2
 800c920:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800c924:	e035      	b.n	800c992 <keyScan+0x312>
    else if (keyStruct[3].keyType == CONTINUOUS)
 800c926:	4b1d      	ldr	r3, [pc, #116]	@ (800c99c <keyScan+0x31c>)
 800c928:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c92c:	2b02      	cmp	r3, #2
 800c92e:	d130      	bne.n	800c992 <keyScan+0x312>
        if (keyStruct[3].preKeyValue == TRIG_SHORT) // short key
 800c930:	4b1a      	ldr	r3, [pc, #104]	@ (800c99c <keyScan+0x31c>)
 800c932:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c936:	2b01      	cmp	r3, #1
 800c938:	d114      	bne.n	800c964 <keyScan+0x2e4>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_TRIG_CNT)
 800c93a:	4b18      	ldr	r3, [pc, #96]	@ (800c99c <keyScan+0x31c>)
 800c93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c93e:	3301      	adds	r3, #1
 800c940:	4a16      	ldr	r2, [pc, #88]	@ (800c99c <keyScan+0x31c>)
 800c942:	6293      	str	r3, [r2, #40]	@ 0x28
 800c944:	4b15      	ldr	r3, [pc, #84]	@ (800c99c <keyScan+0x31c>)
 800c946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c948:	2b63      	cmp	r3, #99	@ 0x63
 800c94a:	d922      	bls.n	800c992 <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800c94c:	4b13      	ldr	r3, [pc, #76]	@ (800c99c <keyScan+0x31c>)
 800c94e:	2200      	movs	r2, #0
 800c950:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = TRIG_LONG; // long
 800c952:	4b12      	ldr	r3, [pc, #72]	@ (800c99c <keyScan+0x31c>)
 800c954:	2202      	movs	r2, #2
 800c956:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_LONG;
 800c95a:	4b10      	ldr	r3, [pc, #64]	@ (800c99c <keyScan+0x31c>)
 800c95c:	2202      	movs	r2, #2
 800c95e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800c962:	e016      	b.n	800c992 <keyScan+0x312>
        else if (keyStruct[3].preKeyValue == TRIG_LONG) // long key
 800c964:	4b0d      	ldr	r3, [pc, #52]	@ (800c99c <keyScan+0x31c>)
 800c966:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c96a:	2b02      	cmp	r3, #2
 800c96c:	d111      	bne.n	800c992 <keyScan+0x312>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_INTEVAL)
 800c96e:	4b0b      	ldr	r3, [pc, #44]	@ (800c99c <keyScan+0x31c>)
 800c970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c972:	3301      	adds	r3, #1
 800c974:	4a09      	ldr	r2, [pc, #36]	@ (800c99c <keyScan+0x31c>)
 800c976:	6293      	str	r3, [r2, #40]	@ 0x28
 800c978:	4b08      	ldr	r3, [pc, #32]	@ (800c99c <keyScan+0x31c>)
 800c97a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c97c:	2b27      	cmp	r3, #39	@ 0x27
 800c97e:	d908      	bls.n	800c992 <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800c980:	4b06      	ldr	r3, [pc, #24]	@ (800c99c <keyScan+0x31c>)
 800c982:	2200      	movs	r2, #0
 800c984:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
 800c986:	4b05      	ldr	r3, [pc, #20]	@ (800c99c <keyScan+0x31c>)
 800c988:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800c98c:	4b03      	ldr	r3, [pc, #12]	@ (800c99c <keyScan+0x31c>)
 800c98e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 800c992:	bf00      	nop
 800c994:	3708      	adds	r7, #8
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	20000b1c 	.word	0x20000b1c

0800c9a0 <getKeyState>:

/*
将物理按键转化为逻辑按键
 */
void getKeyState(KeyState *keyState)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
    uchar i;

    if (keyStruct[1].trigType == TRIG_SHORT)
 800c9a8:	4b1b      	ldr	r3, [pc, #108]	@ (800ca18 <getKeyState+0x78>)
 800c9aa:	7d1b      	ldrb	r3, [r3, #20]
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d103      	bne.n	800c9b8 <getKeyState+0x18>
        *keyState = USER1_SHORT;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	701a      	strb	r2, [r3, #0]
 800c9b6:	e014      	b.n	800c9e2 <getKeyState+0x42>
    else if (keyStruct[2].trigType == TRIG_SHORT)
 800c9b8:	4b17      	ldr	r3, [pc, #92]	@ (800ca18 <getKeyState+0x78>)
 800c9ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c9be:	2b01      	cmp	r3, #1
 800c9c0:	d103      	bne.n	800c9ca <getKeyState+0x2a>
        *keyState = USER2_SHORT;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2202      	movs	r2, #2
 800c9c6:	701a      	strb	r2, [r3, #0]
 800c9c8:	e00b      	b.n	800c9e2 <getKeyState+0x42>
    else if (keyStruct[3].trigType == TRIG_SHORT)
 800c9ca:	4b13      	ldr	r3, [pc, #76]	@ (800ca18 <getKeyState+0x78>)
 800c9cc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d103      	bne.n	800c9dc <getKeyState+0x3c>
        *keyState = USER3_SHORT;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2203      	movs	r2, #3
 800c9d8:	701a      	strb	r2, [r3, #0]
 800c9da:	e002      	b.n	800c9e2 <getKeyState+0x42>
    else
        *keyState = NONE_KEY;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < KEY_NUM; i++)
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	73fb      	strb	r3, [r7, #15]
 800c9e6:	e00c      	b.n	800ca02 <getKeyState+0x62>
    {
        keyStruct[i].trigType = NO_TRIG;
 800c9e8:	7bfa      	ldrb	r2, [r7, #15]
 800c9ea:	490b      	ldr	r1, [pc, #44]	@ (800ca18 <getKeyState+0x78>)
 800c9ec:	4613      	mov	r3, r2
 800c9ee:	005b      	lsls	r3, r3, #1
 800c9f0:	4413      	add	r3, r2
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	440b      	add	r3, r1
 800c9f6:	3308      	adds	r3, #8
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < KEY_NUM; i++)
 800c9fc:	7bfb      	ldrb	r3, [r7, #15]
 800c9fe:	3301      	adds	r3, #1
 800ca00:	73fb      	strb	r3, [r7, #15]
 800ca02:	7bfb      	ldrb	r3, [r7, #15]
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d9ef      	bls.n	800c9e8 <getKeyState+0x48>
    }
}
 800ca08:	bf00      	nop
 800ca0a:	bf00      	nop
 800ca0c:	3714      	adds	r7, #20
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop
 800ca18:	20000b1c 	.word	0x20000b1c

0800ca1c <LED_drive>:
#include "led.h"

bool ledOn;

void LED_drive()
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	af00      	add	r7, sp, #0
    if (ledOn)
 800ca20:	4b08      	ldr	r3, [pc, #32]	@ (800ca44 <LED_drive+0x28>)
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d005      	beq.n	800ca34 <LED_drive+0x18>
        LED_ON;
 800ca28:	2200      	movs	r2, #0
 800ca2a:	2101      	movs	r1, #1
 800ca2c:	4806      	ldr	r0, [pc, #24]	@ (800ca48 <LED_drive+0x2c>)
 800ca2e:	f7f9 fab5 	bl	8005f9c <HAL_GPIO_WritePin>
    else
        LED_OFF;
}
 800ca32:	e004      	b.n	800ca3e <LED_drive+0x22>
        LED_OFF;
 800ca34:	2201      	movs	r2, #1
 800ca36:	2101      	movs	r1, #1
 800ca38:	4803      	ldr	r0, [pc, #12]	@ (800ca48 <LED_drive+0x2c>)
 800ca3a:	f7f9 faaf 	bl	8005f9c <HAL_GPIO_WritePin>
}
 800ca3e:	bf00      	nop
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	20000b40 	.word	0x20000b40
 800ca48:	48000400 	.word	0x48000400

0800ca4c <inv_sqrt>:

// 快速平方根倒数，计算 1/Sqrt(x)
// X:数字还需要计算
// 调用imu ahrs update()函数
float inv_sqrt(float x)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b087      	sub	sp, #28
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	ed87 0a01 	vstr	s0, [r7, #4]
    float halfx = 0.5f * x;
 800ca56:	edd7 7a01 	vldr	s15, [r7, #4]
 800ca5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ca5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ca62:	edc7 7a05 	vstr	s15, [r7, #20]
    float y = x;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	613b      	str	r3, [r7, #16]
    long i = *(long *)&y;
 800ca6a:	f107 0310 	add.w	r3, r7, #16
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	60fb      	str	r3, [r7, #12]

    i = 0x5f3759df - (i >> 1);
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	105a      	asrs	r2, r3, #1
 800ca76:	4b12      	ldr	r3, [pc, #72]	@ (800cac0 <inv_sqrt+0x74>)
 800ca78:	1a9b      	subs	r3, r3, r2
 800ca7a:	60fb      	str	r3, [r7, #12]
    y = *(float *)&i;
 800ca7c:	f107 030c 	add.w	r3, r7, #12
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	613b      	str	r3, [r7, #16]
    y = y * (1.5f - (halfx * y * y));
 800ca84:	ed97 7a04 	vldr	s14, [r7, #16]
 800ca88:	edd7 7a05 	vldr	s15, [r7, #20]
 800ca8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca90:	edd7 7a04 	vldr	s15, [r7, #16]
 800ca94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca98:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800ca9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800caa0:	edd7 7a04 	vldr	s15, [r7, #16]
 800caa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caa8:	edc7 7a04 	vstr	s15, [r7, #16]

    return y;
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	ee07 3a90 	vmov	s15, r3
}
 800cab2:	eeb0 0a67 	vmov.f32	s0, s15
 800cab6:	371c      	adds	r7, #28
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr
 800cac0:	5f3759df 	.word	0x5f3759df

0800cac4 <mpu_write_byte>:
// MPU6500单次写命令
uint8_t mpu_write_byte(uint8_t const reg, uint8_t const data)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af02      	add	r7, sp, #8
 800caca:	4603      	mov	r3, r0
 800cacc:	460a      	mov	r2, r1
 800cace:	71fb      	strb	r3, [r7, #7]
 800cad0:	4613      	mov	r3, r2
 800cad2:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;                                         // 开始通讯
 800cad4:	2200      	movs	r2, #0
 800cad6:	2110      	movs	r1, #16
 800cad8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800cadc:	f7f9 fa5e 	bl	8005f9c <HAL_GPIO_WritePin>
    tx = reg & 0x7F;                                     // 使第一位为0（写模式）
 800cae0:	79fb      	ldrb	r3, [r7, #7]
 800cae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	4b0f      	ldr	r3, [pc, #60]	@ (800cb28 <mpu_write_byte+0x64>)
 800caea:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入命令地址
 800caec:	2337      	movs	r3, #55	@ 0x37
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	2301      	movs	r3, #1
 800caf2:	4a0e      	ldr	r2, [pc, #56]	@ (800cb2c <mpu_write_byte+0x68>)
 800caf4:	490c      	ldr	r1, [pc, #48]	@ (800cb28 <mpu_write_byte+0x64>)
 800caf6:	480e      	ldr	r0, [pc, #56]	@ (800cb30 <mpu_write_byte+0x6c>)
 800caf8:	f7fa fae5 	bl	80070c6 <HAL_SPI_TransmitReceive>
    tx = data;
 800cafc:	4a0a      	ldr	r2, [pc, #40]	@ (800cb28 <mpu_write_byte+0x64>)
 800cafe:	79bb      	ldrb	r3, [r7, #6]
 800cb00:	7013      	strb	r3, [r2, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入数据
 800cb02:	2337      	movs	r3, #55	@ 0x37
 800cb04:	9300      	str	r3, [sp, #0]
 800cb06:	2301      	movs	r3, #1
 800cb08:	4a08      	ldr	r2, [pc, #32]	@ (800cb2c <mpu_write_byte+0x68>)
 800cb0a:	4907      	ldr	r1, [pc, #28]	@ (800cb28 <mpu_write_byte+0x64>)
 800cb0c:	4808      	ldr	r0, [pc, #32]	@ (800cb30 <mpu_write_byte+0x6c>)
 800cb0e:	f7fa fada 	bl	80070c6 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;                                        // 结束通讯
 800cb12:	2201      	movs	r2, #1
 800cb14:	2110      	movs	r1, #16
 800cb16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800cb1a:	f7f9 fa3f 	bl	8005f9c <HAL_GPIO_WritePin>
    return 0;
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3708      	adds	r7, #8
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}
 800cb28:	20000b41 	.word	0x20000b41
 800cb2c:	20000b42 	.word	0x20000b42
 800cb30:	2000038c 	.word	0x2000038c

0800cb34 <mpu_read_byte>:
// MPU6500单次读取单字节数据
uint8_t mpu_read_byte(uint8_t const reg)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af02      	add	r7, sp, #8
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	71fb      	strb	r3, [r7, #7]
    MPU_NSS_LOW;
 800cb3e:	2200      	movs	r2, #0
 800cb40:	2110      	movs	r1, #16
 800cb42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800cb46:	f7f9 fa29 	bl	8005f9c <HAL_GPIO_WritePin>
    tx = reg | 0x80;                                     // 使地址第一位为1（读模式）
 800cb4a:	79fb      	ldrb	r3, [r7, #7]
 800cb4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cb50:	b2da      	uxtb	r2, r3
 800cb52:	4b0f      	ldr	r3, [pc, #60]	@ (800cb90 <mpu_read_byte+0x5c>)
 800cb54:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入需要读取的地址
 800cb56:	2337      	movs	r3, #55	@ 0x37
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	4a0d      	ldr	r2, [pc, #52]	@ (800cb94 <mpu_read_byte+0x60>)
 800cb5e:	490c      	ldr	r1, [pc, #48]	@ (800cb90 <mpu_read_byte+0x5c>)
 800cb60:	480d      	ldr	r0, [pc, #52]	@ (800cb98 <mpu_read_byte+0x64>)
 800cb62:	f7fa fab0 	bl	80070c6 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 为读取的数据提供存储空间
 800cb66:	2337      	movs	r3, #55	@ 0x37
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	4a09      	ldr	r2, [pc, #36]	@ (800cb94 <mpu_read_byte+0x60>)
 800cb6e:	4908      	ldr	r1, [pc, #32]	@ (800cb90 <mpu_read_byte+0x5c>)
 800cb70:	4809      	ldr	r0, [pc, #36]	@ (800cb98 <mpu_read_byte+0x64>)
 800cb72:	f7fa faa8 	bl	80070c6 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800cb76:	2201      	movs	r2, #1
 800cb78:	2110      	movs	r1, #16
 800cb7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800cb7e:	f7f9 fa0d 	bl	8005f9c <HAL_GPIO_WritePin>
    return rx;
 800cb82:	4b04      	ldr	r3, [pc, #16]	@ (800cb94 <mpu_read_byte+0x60>)
 800cb84:	781b      	ldrb	r3, [r3, #0]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3708      	adds	r7, #8
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	20000b41 	.word	0x20000b41
 800cb94:	20000b42 	.word	0x20000b42
 800cb98:	2000038c 	.word	0x2000038c

0800cb9c <mpu_read_bytes>:

// MPU6500单次读取多字节数据
uint8_t mpu_read_bytes(uint8_t const regAddr, uint8_t *pData, uint8_t len)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af02      	add	r7, sp, #8
 800cba2:	4603      	mov	r3, r0
 800cba4:	6039      	str	r1, [r7, #0]
 800cba6:	71fb      	strb	r3, [r7, #7]
 800cba8:	4613      	mov	r3, r2
 800cbaa:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;
 800cbac:	2200      	movs	r2, #0
 800cbae:	2110      	movs	r1, #16
 800cbb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800cbb4:	f7f9 f9f2 	bl	8005f9c <HAL_GPIO_WritePin>
    tx = regAddr | 0x80;
 800cbb8:	79fb      	ldrb	r3, [r7, #7]
 800cbba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cbbe:	b2da      	uxtb	r2, r3
 800cbc0:	4b10      	ldr	r3, [pc, #64]	@ (800cc04 <mpu_read_bytes+0x68>)
 800cbc2:	701a      	strb	r2, [r3, #0]
    tx_buff[0] = tx;
 800cbc4:	4b0f      	ldr	r3, [pc, #60]	@ (800cc04 <mpu_read_bytes+0x68>)
 800cbc6:	781a      	ldrb	r2, [r3, #0]
 800cbc8:	4b0f      	ldr	r3, [pc, #60]	@ (800cc08 <mpu_read_bytes+0x6c>)
 800cbca:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800cbcc:	2337      	movs	r3, #55	@ 0x37
 800cbce:	9300      	str	r3, [sp, #0]
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	4a0e      	ldr	r2, [pc, #56]	@ (800cc0c <mpu_read_bytes+0x70>)
 800cbd4:	490b      	ldr	r1, [pc, #44]	@ (800cc04 <mpu_read_bytes+0x68>)
 800cbd6:	480e      	ldr	r0, [pc, #56]	@ (800cc10 <mpu_read_bytes+0x74>)
 800cbd8:	f7fa fa75 	bl	80070c6 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 800cbdc:	79bb      	ldrb	r3, [r7, #6]
 800cbde:	b29b      	uxth	r3, r3
 800cbe0:	2237      	movs	r2, #55	@ 0x37
 800cbe2:	9200      	str	r2, [sp, #0]
 800cbe4:	683a      	ldr	r2, [r7, #0]
 800cbe6:	4908      	ldr	r1, [pc, #32]	@ (800cc08 <mpu_read_bytes+0x6c>)
 800cbe8:	4809      	ldr	r0, [pc, #36]	@ (800cc10 <mpu_read_bytes+0x74>)
 800cbea:	f7fa fa6c 	bl	80070c6 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800cbee:	2201      	movs	r2, #1
 800cbf0:	2110      	movs	r1, #16
 800cbf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800cbf6:	f7f9 f9d1 	bl	8005f9c <HAL_GPIO_WritePin>
    return 0;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3708      	adds	r7, #8
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	20000b41 	.word	0x20000b41
 800cc08:	20000094 	.word	0x20000094
 800cc0c:	20000b42 	.word	0x20000b42
 800cc10:	2000038c 	.word	0x2000038c

0800cc14 <mpu_set_gyro_fsr>:

// 设置imu 6500陀螺仪测量范围
uint8_t mpu_set_gyro_fsr(uint8_t fsr)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	71fb      	strb	r3, [r7, #7]
    return mpu_write_byte(MPU6500_GYRO_CONFIG, fsr << 3);
 800cc1e:	79fb      	ldrb	r3, [r7, #7]
 800cc20:	00db      	lsls	r3, r3, #3
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	4619      	mov	r1, r3
 800cc26:	201b      	movs	r0, #27
 800cc28:	f7ff ff4c 	bl	800cac4 <mpu_write_byte>
 800cc2c:	4603      	mov	r3, r0
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3708      	adds	r7, #8
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <mpu_set_accel_fsr>:
// 设置imu 6050/6500加速测量范围
uint8_t mpu_set_accel_fsr(uint8_t fsr)
{
 800cc36:	b580      	push	{r7, lr}
 800cc38:	b082      	sub	sp, #8
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	71fb      	strb	r3, [r7, #7]
    return mpu_write_byte(MPU6500_ACCEL_CONFIG, fsr << 3);
 800cc40:	79fb      	ldrb	r3, [r7, #7]
 800cc42:	00db      	lsls	r3, r3, #3
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	4619      	mov	r1, r3
 800cc48:	201c      	movs	r0, #28
 800cc4a:	f7ff ff3b 	bl	800cac4 <mpu_write_byte>
 800cc4e:	4603      	mov	r3, r0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3708      	adds	r7, #8
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <mpu_get_data>:
// 获取IMU数据
void mpu_get_data()
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	af00      	add	r7, sp, #0
    mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800cc5c:	220e      	movs	r2, #14
 800cc5e:	495c      	ldr	r1, [pc, #368]	@ (800cdd0 <mpu_get_data+0x178>)
 800cc60:	203b      	movs	r0, #59	@ 0x3b
 800cc62:	f7ff ff9b 	bl	800cb9c <mpu_read_bytes>

    mpu_data.ax = mpu_buff[0] << 8 | mpu_buff[1];
 800cc66:	4b5a      	ldr	r3, [pc, #360]	@ (800cdd0 <mpu_get_data+0x178>)
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	021b      	lsls	r3, r3, #8
 800cc6c:	b21a      	sxth	r2, r3
 800cc6e:	4b58      	ldr	r3, [pc, #352]	@ (800cdd0 <mpu_get_data+0x178>)
 800cc70:	785b      	ldrb	r3, [r3, #1]
 800cc72:	b21b      	sxth	r3, r3
 800cc74:	4313      	orrs	r3, r2
 800cc76:	b21a      	sxth	r2, r3
 800cc78:	4b56      	ldr	r3, [pc, #344]	@ (800cdd4 <mpu_get_data+0x17c>)
 800cc7a:	801a      	strh	r2, [r3, #0]
    mpu_data.ay = mpu_buff[2] << 8 | mpu_buff[3];
 800cc7c:	4b54      	ldr	r3, [pc, #336]	@ (800cdd0 <mpu_get_data+0x178>)
 800cc7e:	789b      	ldrb	r3, [r3, #2]
 800cc80:	021b      	lsls	r3, r3, #8
 800cc82:	b21a      	sxth	r2, r3
 800cc84:	4b52      	ldr	r3, [pc, #328]	@ (800cdd0 <mpu_get_data+0x178>)
 800cc86:	78db      	ldrb	r3, [r3, #3]
 800cc88:	b21b      	sxth	r3, r3
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	b21a      	sxth	r2, r3
 800cc8e:	4b51      	ldr	r3, [pc, #324]	@ (800cdd4 <mpu_get_data+0x17c>)
 800cc90:	805a      	strh	r2, [r3, #2]
    mpu_data.az = mpu_buff[4] << 8 | mpu_buff[5];
 800cc92:	4b4f      	ldr	r3, [pc, #316]	@ (800cdd0 <mpu_get_data+0x178>)
 800cc94:	791b      	ldrb	r3, [r3, #4]
 800cc96:	021b      	lsls	r3, r3, #8
 800cc98:	b21a      	sxth	r2, r3
 800cc9a:	4b4d      	ldr	r3, [pc, #308]	@ (800cdd0 <mpu_get_data+0x178>)
 800cc9c:	795b      	ldrb	r3, [r3, #5]
 800cc9e:	b21b      	sxth	r3, r3
 800cca0:	4313      	orrs	r3, r2
 800cca2:	b21a      	sxth	r2, r3
 800cca4:	4b4b      	ldr	r3, [pc, #300]	@ (800cdd4 <mpu_get_data+0x17c>)
 800cca6:	809a      	strh	r2, [r3, #4]
    mpu_data.temp = mpu_buff[6] << 8 | mpu_buff[7];
 800cca8:	4b49      	ldr	r3, [pc, #292]	@ (800cdd0 <mpu_get_data+0x178>)
 800ccaa:	799b      	ldrb	r3, [r3, #6]
 800ccac:	021b      	lsls	r3, r3, #8
 800ccae:	b21a      	sxth	r2, r3
 800ccb0:	4b47      	ldr	r3, [pc, #284]	@ (800cdd0 <mpu_get_data+0x178>)
 800ccb2:	79db      	ldrb	r3, [r3, #7]
 800ccb4:	b21b      	sxth	r3, r3
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	b21a      	sxth	r2, r3
 800ccba:	4b46      	ldr	r3, [pc, #280]	@ (800cdd4 <mpu_get_data+0x17c>)
 800ccbc:	819a      	strh	r2, [r3, #12]

    mpu_data.gx = ((mpu_buff[8] << 8 | mpu_buff[9]) - mpu_data.gx_offset);
 800ccbe:	4b44      	ldr	r3, [pc, #272]	@ (800cdd0 <mpu_get_data+0x178>)
 800ccc0:	7a1b      	ldrb	r3, [r3, #8]
 800ccc2:	021b      	lsls	r3, r3, #8
 800ccc4:	b21a      	sxth	r2, r3
 800ccc6:	4b42      	ldr	r3, [pc, #264]	@ (800cdd0 <mpu_get_data+0x178>)
 800ccc8:	7a5b      	ldrb	r3, [r3, #9]
 800ccca:	b21b      	sxth	r3, r3
 800cccc:	4313      	orrs	r3, r2
 800ccce:	b21b      	sxth	r3, r3
 800ccd0:	b29a      	uxth	r2, r3
 800ccd2:	4b40      	ldr	r3, [pc, #256]	@ (800cdd4 <mpu_get_data+0x17c>)
 800ccd4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800ccd8:	b29b      	uxth	r3, r3
 800ccda:	1ad3      	subs	r3, r2, r3
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	b21a      	sxth	r2, r3
 800cce0:	4b3c      	ldr	r3, [pc, #240]	@ (800cdd4 <mpu_get_data+0x17c>)
 800cce2:	81da      	strh	r2, [r3, #14]
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 800cce4:	4b3a      	ldr	r3, [pc, #232]	@ (800cdd0 <mpu_get_data+0x178>)
 800cce6:	7a9b      	ldrb	r3, [r3, #10]
 800cce8:	021b      	lsls	r3, r3, #8
 800ccea:	b21a      	sxth	r2, r3
 800ccec:	4b38      	ldr	r3, [pc, #224]	@ (800cdd0 <mpu_get_data+0x178>)
 800ccee:	7adb      	ldrb	r3, [r3, #11]
 800ccf0:	b21b      	sxth	r3, r3
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	b21b      	sxth	r3, r3
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	4b36      	ldr	r3, [pc, #216]	@ (800cdd4 <mpu_get_data+0x17c>)
 800ccfa:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	b21a      	sxth	r2, r3
 800cd06:	4b33      	ldr	r3, [pc, #204]	@ (800cdd4 <mpu_get_data+0x17c>)
 800cd08:	821a      	strh	r2, [r3, #16]
    mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 800cd0a:	4b31      	ldr	r3, [pc, #196]	@ (800cdd0 <mpu_get_data+0x178>)
 800cd0c:	7b1b      	ldrb	r3, [r3, #12]
 800cd0e:	021b      	lsls	r3, r3, #8
 800cd10:	b21a      	sxth	r2, r3
 800cd12:	4b2f      	ldr	r3, [pc, #188]	@ (800cdd0 <mpu_get_data+0x178>)
 800cd14:	7b5b      	ldrb	r3, [r3, #13]
 800cd16:	b21b      	sxth	r3, r3
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	b21b      	sxth	r3, r3
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	4b2d      	ldr	r3, [pc, #180]	@ (800cdd4 <mpu_get_data+0x17c>)
 800cd20:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	1ad3      	subs	r3, r2, r3
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	b21a      	sxth	r2, r3
 800cd2c:	4b29      	ldr	r3, [pc, #164]	@ (800cdd4 <mpu_get_data+0x17c>)
 800cd2e:	825a      	strh	r2, [r3, #18]

    // ist8310_get_data(ist_buff);
    // memcpy(&mpu_data.mx, ist_buff, 6);

    memcpy(&imu.ax, &mpu_data.ax, 6 * sizeof(int16_t));
 800cd30:	220c      	movs	r2, #12
 800cd32:	4928      	ldr	r1, [pc, #160]	@ (800cdd4 <mpu_get_data+0x17c>)
 800cd34:	4828      	ldr	r0, [pc, #160]	@ (800cdd8 <mpu_get_data+0x180>)
 800cd36:	f003 f9b8 	bl	80100aa <memcpy>

    imu.temp = 21 + mpu_data.temp / 333.87f;
 800cd3a:	4b26      	ldr	r3, [pc, #152]	@ (800cdd4 <mpu_get_data+0x17c>)
 800cd3c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800cd40:	ee07 3a90 	vmov	s15, r3
 800cd44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cd48:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800cddc <mpu_get_data+0x184>
 800cd4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cd50:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 800cd54:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd58:	4b1f      	ldr	r3, [pc, #124]	@ (800cdd8 <mpu_get_data+0x180>)
 800cd5a:	edc3 7a03 	vstr	s15, [r3, #12]
    /* 2000dps -> rad/s */
    imu.wx = mpu_data.gx / 16.384f / 57.3f;
 800cd5e:	4b1d      	ldr	r3, [pc, #116]	@ (800cdd4 <mpu_get_data+0x17c>)
 800cd60:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800cd64:	ee07 3a90 	vmov	s15, r3
 800cd68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd6c:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800cde0 <mpu_get_data+0x188>
 800cd70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800cd74:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 800cde4 <mpu_get_data+0x18c>
 800cd78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cd7c:	4b16      	ldr	r3, [pc, #88]	@ (800cdd8 <mpu_get_data+0x180>)
 800cd7e:	edc3 7a04 	vstr	s15, [r3, #16]
    imu.wy = mpu_data.gy / 16.384f / 57.3f;
 800cd82:	4b14      	ldr	r3, [pc, #80]	@ (800cdd4 <mpu_get_data+0x17c>)
 800cd84:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800cd88:	ee07 3a90 	vmov	s15, r3
 800cd8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd90:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800cde0 <mpu_get_data+0x188>
 800cd94:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800cd98:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800cde4 <mpu_get_data+0x18c>
 800cd9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cda0:	4b0d      	ldr	r3, [pc, #52]	@ (800cdd8 <mpu_get_data+0x180>)
 800cda2:	edc3 7a05 	vstr	s15, [r3, #20]
    imu.wz = mpu_data.gz / 16.384f / 57.3f;
 800cda6:	4b0b      	ldr	r3, [pc, #44]	@ (800cdd4 <mpu_get_data+0x17c>)
 800cda8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800cdac:	ee07 3a90 	vmov	s15, r3
 800cdb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdb4:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800cde0 <mpu_get_data+0x188>
 800cdb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800cdbc:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800cde4 <mpu_get_data+0x18c>
 800cdc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cdc4:	4b04      	ldr	r3, [pc, #16]	@ (800cdd8 <mpu_get_data+0x180>)
 800cdc6:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800cdca:	bf00      	nop
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	20000b5c 	.word	0x20000b5c
 800cdd4:	20000b6c 	.word	0x20000b6c
 800cdd8:	20000b8c 	.word	0x20000b8c
 800cddc:	43a6ef5c 	.word	0x43a6ef5c
 800cde0:	4183126f 	.word	0x4183126f
 800cde4:	42653333 	.word	0x42653333

0800cde8 <mpu_offset_call>:
// 获取MPU6500的偏移量数据
void mpu_offset_call(void)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 300; i++)
 800cdee:	2300      	movs	r3, #0
 800cdf0:	607b      	str	r3, [r7, #4]
 800cdf2:	e07c      	b.n	800ceee <mpu_offset_call+0x106>
    {
        mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800cdf4:	220e      	movs	r2, #14
 800cdf6:	4966      	ldr	r1, [pc, #408]	@ (800cf90 <mpu_offset_call+0x1a8>)
 800cdf8:	203b      	movs	r0, #59	@ 0x3b
 800cdfa:	f7ff fecf 	bl	800cb9c <mpu_read_bytes>

        mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 800cdfe:	4b65      	ldr	r3, [pc, #404]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800ce00:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ce04:	b29a      	uxth	r2, r3
 800ce06:	4b62      	ldr	r3, [pc, #392]	@ (800cf90 <mpu_offset_call+0x1a8>)
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	021b      	lsls	r3, r3, #8
 800ce0c:	b219      	sxth	r1, r3
 800ce0e:	4b60      	ldr	r3, [pc, #384]	@ (800cf90 <mpu_offset_call+0x1a8>)
 800ce10:	785b      	ldrb	r3, [r3, #1]
 800ce12:	b21b      	sxth	r3, r3
 800ce14:	430b      	orrs	r3, r1
 800ce16:	b21b      	sxth	r3, r3
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	4413      	add	r3, r2
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	b21a      	sxth	r2, r3
 800ce20:	4b5c      	ldr	r3, [pc, #368]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800ce22:	829a      	strh	r2, [r3, #20]
        mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 800ce24:	4b5b      	ldr	r3, [pc, #364]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800ce26:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800ce2a:	b29a      	uxth	r2, r3
 800ce2c:	4b58      	ldr	r3, [pc, #352]	@ (800cf90 <mpu_offset_call+0x1a8>)
 800ce2e:	789b      	ldrb	r3, [r3, #2]
 800ce30:	021b      	lsls	r3, r3, #8
 800ce32:	b219      	sxth	r1, r3
 800ce34:	4b56      	ldr	r3, [pc, #344]	@ (800cf90 <mpu_offset_call+0x1a8>)
 800ce36:	78db      	ldrb	r3, [r3, #3]
 800ce38:	b21b      	sxth	r3, r3
 800ce3a:	430b      	orrs	r3, r1
 800ce3c:	b21b      	sxth	r3, r3
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	4413      	add	r3, r2
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	b21a      	sxth	r2, r3
 800ce46:	4b53      	ldr	r3, [pc, #332]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800ce48:	82da      	strh	r2, [r3, #22]
        mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
 800ce4a:	4b52      	ldr	r3, [pc, #328]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800ce4c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800ce50:	b29a      	uxth	r2, r3
 800ce52:	4b4f      	ldr	r3, [pc, #316]	@ (800cf90 <mpu_offset_call+0x1a8>)
 800ce54:	791b      	ldrb	r3, [r3, #4]
 800ce56:	021b      	lsls	r3, r3, #8
 800ce58:	b219      	sxth	r1, r3
 800ce5a:	4b4d      	ldr	r3, [pc, #308]	@ (800cf90 <mpu_offset_call+0x1a8>)
 800ce5c:	795b      	ldrb	r3, [r3, #5]
 800ce5e:	b21b      	sxth	r3, r3
 800ce60:	430b      	orrs	r3, r1
 800ce62:	b21b      	sxth	r3, r3
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	4413      	add	r3, r2
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	b21a      	sxth	r2, r3
 800ce6c:	4b49      	ldr	r3, [pc, #292]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800ce6e:	831a      	strh	r2, [r3, #24]

        mpu_data.gx_offset += mpu_buff[8] << 8 | mpu_buff[9];
 800ce70:	4b48      	ldr	r3, [pc, #288]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800ce72:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	4b45      	ldr	r3, [pc, #276]	@ (800cf90 <mpu_offset_call+0x1a8>)
 800ce7a:	7a1b      	ldrb	r3, [r3, #8]
 800ce7c:	021b      	lsls	r3, r3, #8
 800ce7e:	b219      	sxth	r1, r3
 800ce80:	4b43      	ldr	r3, [pc, #268]	@ (800cf90 <mpu_offset_call+0x1a8>)
 800ce82:	7a5b      	ldrb	r3, [r3, #9]
 800ce84:	b21b      	sxth	r3, r3
 800ce86:	430b      	orrs	r3, r1
 800ce88:	b21b      	sxth	r3, r3
 800ce8a:	b29b      	uxth	r3, r3
 800ce8c:	4413      	add	r3, r2
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	b21a      	sxth	r2, r3
 800ce92:	4b40      	ldr	r3, [pc, #256]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800ce94:	835a      	strh	r2, [r3, #26]
        mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 800ce96:	4b3f      	ldr	r3, [pc, #252]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800ce98:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800ce9c:	b29a      	uxth	r2, r3
 800ce9e:	4b3c      	ldr	r3, [pc, #240]	@ (800cf90 <mpu_offset_call+0x1a8>)
 800cea0:	7a9b      	ldrb	r3, [r3, #10]
 800cea2:	021b      	lsls	r3, r3, #8
 800cea4:	b219      	sxth	r1, r3
 800cea6:	4b3a      	ldr	r3, [pc, #232]	@ (800cf90 <mpu_offset_call+0x1a8>)
 800cea8:	7adb      	ldrb	r3, [r3, #11]
 800ceaa:	b21b      	sxth	r3, r3
 800ceac:	430b      	orrs	r3, r1
 800ceae:	b21b      	sxth	r3, r3
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	4413      	add	r3, r2
 800ceb4:	b29b      	uxth	r3, r3
 800ceb6:	b21a      	sxth	r2, r3
 800ceb8:	4b36      	ldr	r3, [pc, #216]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800ceba:	839a      	strh	r2, [r3, #28]
        mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 800cebc:	4b35      	ldr	r3, [pc, #212]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800cebe:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800cec2:	b29a      	uxth	r2, r3
 800cec4:	4b32      	ldr	r3, [pc, #200]	@ (800cf90 <mpu_offset_call+0x1a8>)
 800cec6:	7b1b      	ldrb	r3, [r3, #12]
 800cec8:	021b      	lsls	r3, r3, #8
 800ceca:	b219      	sxth	r1, r3
 800cecc:	4b30      	ldr	r3, [pc, #192]	@ (800cf90 <mpu_offset_call+0x1a8>)
 800cece:	7b5b      	ldrb	r3, [r3, #13]
 800ced0:	b21b      	sxth	r3, r3
 800ced2:	430b      	orrs	r3, r1
 800ced4:	b21b      	sxth	r3, r3
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	4413      	add	r3, r2
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	b21a      	sxth	r2, r3
 800cede:	4b2d      	ldr	r3, [pc, #180]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800cee0:	83da      	strh	r2, [r3, #30]

        HAL_Delay(5);
 800cee2:	2005      	movs	r0, #5
 800cee4:	f7f5 fc56 	bl	8002794 <HAL_Delay>
    for (i = 0; i < 300; i++)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	3301      	adds	r3, #1
 800ceec:	607b      	str	r3, [r7, #4]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800cef4:	f6ff af7e 	blt.w	800cdf4 <mpu_offset_call+0xc>
    }
    mpu_data.ax_offset = mpu_data.ax_offset / 300;
 800cef8:	4b26      	ldr	r3, [pc, #152]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800cefa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800cefe:	4a26      	ldr	r2, [pc, #152]	@ (800cf98 <mpu_offset_call+0x1b0>)
 800cf00:	fb82 1203 	smull	r1, r2, r2, r3
 800cf04:	1152      	asrs	r2, r2, #5
 800cf06:	17db      	asrs	r3, r3, #31
 800cf08:	1ad3      	subs	r3, r2, r3
 800cf0a:	b21a      	sxth	r2, r3
 800cf0c:	4b21      	ldr	r3, [pc, #132]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800cf0e:	829a      	strh	r2, [r3, #20]
    mpu_data.ay_offset = mpu_data.ay_offset / 300;
 800cf10:	4b20      	ldr	r3, [pc, #128]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800cf12:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800cf16:	4a20      	ldr	r2, [pc, #128]	@ (800cf98 <mpu_offset_call+0x1b0>)
 800cf18:	fb82 1203 	smull	r1, r2, r2, r3
 800cf1c:	1152      	asrs	r2, r2, #5
 800cf1e:	17db      	asrs	r3, r3, #31
 800cf20:	1ad3      	subs	r3, r2, r3
 800cf22:	b21a      	sxth	r2, r3
 800cf24:	4b1b      	ldr	r3, [pc, #108]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800cf26:	82da      	strh	r2, [r3, #22]
    mpu_data.az_offset = mpu_data.az_offset / 300;
 800cf28:	4b1a      	ldr	r3, [pc, #104]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800cf2a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800cf2e:	4a1a      	ldr	r2, [pc, #104]	@ (800cf98 <mpu_offset_call+0x1b0>)
 800cf30:	fb82 1203 	smull	r1, r2, r2, r3
 800cf34:	1152      	asrs	r2, r2, #5
 800cf36:	17db      	asrs	r3, r3, #31
 800cf38:	1ad3      	subs	r3, r2, r3
 800cf3a:	b21a      	sxth	r2, r3
 800cf3c:	4b15      	ldr	r3, [pc, #84]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800cf3e:	831a      	strh	r2, [r3, #24]
    mpu_data.gx_offset = mpu_data.gx_offset / 300;
 800cf40:	4b14      	ldr	r3, [pc, #80]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800cf42:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800cf46:	4a14      	ldr	r2, [pc, #80]	@ (800cf98 <mpu_offset_call+0x1b0>)
 800cf48:	fb82 1203 	smull	r1, r2, r2, r3
 800cf4c:	1152      	asrs	r2, r2, #5
 800cf4e:	17db      	asrs	r3, r3, #31
 800cf50:	1ad3      	subs	r3, r2, r3
 800cf52:	b21a      	sxth	r2, r3
 800cf54:	4b0f      	ldr	r3, [pc, #60]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800cf56:	835a      	strh	r2, [r3, #26]
    mpu_data.gy_offset = mpu_data.gx_offset / 300;
 800cf58:	4b0e      	ldr	r3, [pc, #56]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800cf5a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800cf5e:	4a0e      	ldr	r2, [pc, #56]	@ (800cf98 <mpu_offset_call+0x1b0>)
 800cf60:	fb82 1203 	smull	r1, r2, r2, r3
 800cf64:	1152      	asrs	r2, r2, #5
 800cf66:	17db      	asrs	r3, r3, #31
 800cf68:	1ad3      	subs	r3, r2, r3
 800cf6a:	b21a      	sxth	r2, r3
 800cf6c:	4b09      	ldr	r3, [pc, #36]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800cf6e:	839a      	strh	r2, [r3, #28]
    mpu_data.gz_offset = mpu_data.gz_offset / 300;
 800cf70:	4b08      	ldr	r3, [pc, #32]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800cf72:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800cf76:	4a08      	ldr	r2, [pc, #32]	@ (800cf98 <mpu_offset_call+0x1b0>)
 800cf78:	fb82 1203 	smull	r1, r2, r2, r3
 800cf7c:	1152      	asrs	r2, r2, #5
 800cf7e:	17db      	asrs	r3, r3, #31
 800cf80:	1ad3      	subs	r3, r2, r3
 800cf82:	b21a      	sxth	r2, r3
 800cf84:	4b03      	ldr	r3, [pc, #12]	@ (800cf94 <mpu_offset_call+0x1ac>)
 800cf86:	83da      	strh	r2, [r3, #30]
}
 800cf88:	bf00      	nop
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	20000b5c 	.word	0x20000b5c
 800cf94:	20000b6c 	.word	0x20000b6c
 800cf98:	1b4e81b5 	.word	0x1b4e81b5

0800cf9c <IMU_Init>:

// 初始化mpu6500和ist3810
uint8_t IMU_Init(void)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b086      	sub	sp, #24
 800cfa0:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 800cfa2:	2064      	movs	r0, #100	@ 0x64
 800cfa4:	f7f5 fbf6 	bl	8002794 <HAL_Delay>

    id = mpu_read_byte(MPU6500_ID);
 800cfa8:	2075      	movs	r0, #117	@ 0x75
 800cfaa:	f7ff fdc3 	bl	800cb34 <mpu_read_byte>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	4b28      	ldr	r3, [pc, #160]	@ (800d054 <IMU_Init+0xb8>)
 800cfb4:	701a      	strb	r2, [r3, #0]
    if (id != 0x70)
 800cfb6:	4b27      	ldr	r3, [pc, #156]	@ (800d054 <IMU_Init+0xb8>)
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	2b70      	cmp	r3, #112	@ 0x70
 800cfbc:	d001      	beq.n	800cfc2 <IMU_Init+0x26>
        return 1;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e044      	b.n	800d04c <IMU_Init+0xb0>
    uint8_t i = 0;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	75fb      	strb	r3, [r7, #23]
    uint8_t MPU6500_Init_Data[10][2] = {
 800cfc6:	463b      	mov	r3, r7
 800cfc8:	2200      	movs	r2, #0
 800cfca:	601a      	str	r2, [r3, #0]
 800cfcc:	605a      	str	r2, [r3, #4]
 800cfce:	609a      	str	r2, [r3, #8]
 800cfd0:	60da      	str	r2, [r3, #12]
 800cfd2:	611a      	str	r2, [r3, #16]
 800cfd4:	f248 036b 	movw	r3, #32875	@ 0x806b
 800cfd8:	803b      	strh	r3, [r7, #0]
 800cfda:	f240 336b 	movw	r3, #875	@ 0x36b
 800cfde:	807b      	strh	r3, [r7, #2]
 800cfe0:	236c      	movs	r3, #108	@ 0x6c
 800cfe2:	80bb      	strh	r3, [r7, #4]
 800cfe4:	f240 431a 	movw	r3, #1050	@ 0x41a
 800cfe8:	80fb      	strh	r3, [r7, #6]
 800cfea:	f641 031b 	movw	r3, #6171	@ 0x181b
 800cfee:	813b      	strh	r3, [r7, #8]
 800cff0:	f241 031c 	movw	r3, #4124	@ 0x101c
 800cff4:	817b      	strh	r3, [r7, #10]
 800cff6:	f240 231d 	movw	r3, #541	@ 0x21d
 800cffa:	81bb      	strh	r3, [r7, #12]
 800cffc:	f242 036a 	movw	r3, #8298	@ 0x206a
 800d000:	81fb      	strh	r3, [r7, #14]
        {MPU6500_GYRO_CONFIG, 0x18},    /* +-2000dps */
        {MPU6500_ACCEL_CONFIG, 0x10},   /* +-8G */
        {MPU6500_ACCEL_CONFIG_2, 0x02}, /* 使能低通滤波器  设置 Acc 低通滤波 */
        {MPU6500_USER_CTRL, 0x20},
    }; /* 使能 AUX */
    for (i = 0; i < 10; i++)
 800d002:	2300      	movs	r3, #0
 800d004:	75fb      	strb	r3, [r7, #23]
 800d006:	e015      	b.n	800d034 <IMU_Init+0x98>
    {
        mpu_write_byte(MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 800d008:	7dfb      	ldrb	r3, [r7, #23]
 800d00a:	005b      	lsls	r3, r3, #1
 800d00c:	3318      	adds	r3, #24
 800d00e:	443b      	add	r3, r7
 800d010:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800d014:	7dfb      	ldrb	r3, [r7, #23]
 800d016:	005b      	lsls	r3, r3, #1
 800d018:	3318      	adds	r3, #24
 800d01a:	443b      	add	r3, r7
 800d01c:	f813 3c17 	ldrb.w	r3, [r3, #-23]
 800d020:	4619      	mov	r1, r3
 800d022:	4610      	mov	r0, r2
 800d024:	f7ff fd4e 	bl	800cac4 <mpu_write_byte>
        HAL_Delay(1);
 800d028:	2001      	movs	r0, #1
 800d02a:	f7f5 fbb3 	bl	8002794 <HAL_Delay>
    for (i = 0; i < 10; i++)
 800d02e:	7dfb      	ldrb	r3, [r7, #23]
 800d030:	3301      	adds	r3, #1
 800d032:	75fb      	strb	r3, [r7, #23]
 800d034:	7dfb      	ldrb	r3, [r7, #23]
 800d036:	2b09      	cmp	r3, #9
 800d038:	d9e6      	bls.n	800d008 <IMU_Init+0x6c>
    }

    mpu_set_gyro_fsr(3);
 800d03a:	2003      	movs	r0, #3
 800d03c:	f7ff fdea 	bl	800cc14 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(2);
 800d040:	2002      	movs	r0, #2
 800d042:	f7ff fdf8 	bl	800cc36 <mpu_set_accel_fsr>

    // ist8310_init();
    mpu_offset_call();
 800d046:	f7ff fecf 	bl	800cde8 <mpu_offset_call>
    return 0;
 800d04a:	2300      	movs	r3, #0
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3718      	adds	r7, #24
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}
 800d054:	20000bc0 	.word	0x20000bc0

0800d058 <init_quaternion>:

// 初始化四元数
void init_quaternion(void)
{
 800d058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d05c:	b084      	sub	sp, #16
 800d05e:	af00      	add	r7, sp, #0
    int16_t hx, hy; // hz;

    hx = imu.mx;
 800d060:	4b79      	ldr	r3, [pc, #484]	@ (800d248 <init_quaternion+0x1f0>)
 800d062:	88db      	ldrh	r3, [r3, #6]
 800d064:	81fb      	strh	r3, [r7, #14]
    hy = imu.my;
 800d066:	4b78      	ldr	r3, [pc, #480]	@ (800d248 <init_quaternion+0x1f0>)
 800d068:	891b      	ldrh	r3, [r3, #8]
 800d06a:	81bb      	strh	r3, [r7, #12]
            q2 = -0.56;
            q3 = 0.0045;
        }
    }
#else
    if (hx < 0 && hy < 0)
 800d06c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d070:	2b00      	cmp	r3, #0
 800d072:	da36      	bge.n	800d0e2 <init_quaternion+0x8a>
 800d074:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	da32      	bge.n	800d0e2 <init_quaternion+0x8a>
    {
        if (fabs(hx / hy) >= 1)
 800d07c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d080:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d084:	fb92 f3f3 	sdiv	r3, r2, r3
 800d088:	4618      	mov	r0, r3
 800d08a:	f7f3 fa73 	bl	8000574 <__aeabi_i2d>
 800d08e:	4602      	mov	r2, r0
 800d090:	460b      	mov	r3, r1
 800d092:	603a      	str	r2, [r7, #0]
 800d094:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d098:	607b      	str	r3, [r7, #4]
 800d09a:	f04f 0200 	mov.w	r2, #0
 800d09e:	4b6b      	ldr	r3, [pc, #428]	@ (800d24c <init_quaternion+0x1f4>)
 800d0a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0a4:	f7f3 fd56 	bl	8000b54 <__aeabi_dcmpge>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d00c      	beq.n	800d0c8 <init_quaternion+0x70>
        {
            q0 = 0.195;
 800d0ae:	4b68      	ldr	r3, [pc, #416]	@ (800d250 <init_quaternion+0x1f8>)
 800d0b0:	4a68      	ldr	r2, [pc, #416]	@ (800d254 <init_quaternion+0x1fc>)
 800d0b2:	601a      	str	r2, [r3, #0]
            q1 = -0.015;
 800d0b4:	4b68      	ldr	r3, [pc, #416]	@ (800d258 <init_quaternion+0x200>)
 800d0b6:	4a69      	ldr	r2, [pc, #420]	@ (800d25c <init_quaternion+0x204>)
 800d0b8:	601a      	str	r2, [r3, #0]
            q2 = 0.0043;
 800d0ba:	4b69      	ldr	r3, [pc, #420]	@ (800d260 <init_quaternion+0x208>)
 800d0bc:	4a69      	ldr	r2, [pc, #420]	@ (800d264 <init_quaternion+0x20c>)
 800d0be:	601a      	str	r2, [r3, #0]
            q3 = 0.979;
 800d0c0:	4b69      	ldr	r3, [pc, #420]	@ (800d268 <init_quaternion+0x210>)
 800d0c2:	4a6a      	ldr	r2, [pc, #424]	@ (800d26c <init_quaternion+0x214>)
 800d0c4:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800d0c6:	e0ba      	b.n	800d23e <init_quaternion+0x1e6>
        }
        else
        {
            q0 = 0.555;
 800d0c8:	4b61      	ldr	r3, [pc, #388]	@ (800d250 <init_quaternion+0x1f8>)
 800d0ca:	4a69      	ldr	r2, [pc, #420]	@ (800d270 <init_quaternion+0x218>)
 800d0cc:	601a      	str	r2, [r3, #0]
            q1 = -0.015;
 800d0ce:	4b62      	ldr	r3, [pc, #392]	@ (800d258 <init_quaternion+0x200>)
 800d0d0:	4a62      	ldr	r2, [pc, #392]	@ (800d25c <init_quaternion+0x204>)
 800d0d2:	601a      	str	r2, [r3, #0]
            q2 = 0.006;
 800d0d4:	4b62      	ldr	r3, [pc, #392]	@ (800d260 <init_quaternion+0x208>)
 800d0d6:	4a67      	ldr	r2, [pc, #412]	@ (800d274 <init_quaternion+0x21c>)
 800d0d8:	601a      	str	r2, [r3, #0]
            q3 = 0.829;
 800d0da:	4b63      	ldr	r3, [pc, #396]	@ (800d268 <init_quaternion+0x210>)
 800d0dc:	4a66      	ldr	r2, [pc, #408]	@ (800d278 <init_quaternion+0x220>)
 800d0de:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800d0e0:	e0ad      	b.n	800d23e <init_quaternion+0x1e6>
        }
    }
    else if (hx < 0 && hy > 0)
 800d0e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	da35      	bge.n	800d156 <init_quaternion+0xfe>
 800d0ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	dd31      	ble.n	800d156 <init_quaternion+0xfe>
    {
        if (fabs(hx / hy) >= 1)
 800d0f2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d0f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d0fa:	fb92 f3f3 	sdiv	r3, r2, r3
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7f3 fa38 	bl	8000574 <__aeabi_i2d>
 800d104:	4602      	mov	r2, r0
 800d106:	460b      	mov	r3, r1
 800d108:	4692      	mov	sl, r2
 800d10a:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800d10e:	f04f 0200 	mov.w	r2, #0
 800d112:	4b4e      	ldr	r3, [pc, #312]	@ (800d24c <init_quaternion+0x1f4>)
 800d114:	4650      	mov	r0, sl
 800d116:	4659      	mov	r1, fp
 800d118:	f7f3 fd1c 	bl	8000b54 <__aeabi_dcmpge>
 800d11c:	4603      	mov	r3, r0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d00c      	beq.n	800d13c <init_quaternion+0xe4>
        {
            q0 = -0.193;
 800d122:	4b4b      	ldr	r3, [pc, #300]	@ (800d250 <init_quaternion+0x1f8>)
 800d124:	4a55      	ldr	r2, [pc, #340]	@ (800d27c <init_quaternion+0x224>)
 800d126:	601a      	str	r2, [r3, #0]
            q1 = -0.009;
 800d128:	4b4b      	ldr	r3, [pc, #300]	@ (800d258 <init_quaternion+0x200>)
 800d12a:	4a55      	ldr	r2, [pc, #340]	@ (800d280 <init_quaternion+0x228>)
 800d12c:	601a      	str	r2, [r3, #0]
            q2 = -0.006;
 800d12e:	4b4c      	ldr	r3, [pc, #304]	@ (800d260 <init_quaternion+0x208>)
 800d130:	4a54      	ldr	r2, [pc, #336]	@ (800d284 <init_quaternion+0x22c>)
 800d132:	601a      	str	r2, [r3, #0]
            q3 = 0.979;
 800d134:	4b4c      	ldr	r3, [pc, #304]	@ (800d268 <init_quaternion+0x210>)
 800d136:	4a4d      	ldr	r2, [pc, #308]	@ (800d26c <init_quaternion+0x214>)
 800d138:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800d13a:	e080      	b.n	800d23e <init_quaternion+0x1e6>
        }
        else
        {
            q0 = -0.552;
 800d13c:	4b44      	ldr	r3, [pc, #272]	@ (800d250 <init_quaternion+0x1f8>)
 800d13e:	4a52      	ldr	r2, [pc, #328]	@ (800d288 <init_quaternion+0x230>)
 800d140:	601a      	str	r2, [r3, #0]
            q1 = -0.0048;
 800d142:	4b45      	ldr	r3, [pc, #276]	@ (800d258 <init_quaternion+0x200>)
 800d144:	4a51      	ldr	r2, [pc, #324]	@ (800d28c <init_quaternion+0x234>)
 800d146:	601a      	str	r2, [r3, #0]
            q2 = -0.0115;
 800d148:	4b45      	ldr	r3, [pc, #276]	@ (800d260 <init_quaternion+0x208>)
 800d14a:	4a51      	ldr	r2, [pc, #324]	@ (800d290 <init_quaternion+0x238>)
 800d14c:	601a      	str	r2, [r3, #0]
            q3 = 0.8313;
 800d14e:	4b46      	ldr	r3, [pc, #280]	@ (800d268 <init_quaternion+0x210>)
 800d150:	4a50      	ldr	r2, [pc, #320]	@ (800d294 <init_quaternion+0x23c>)
 800d152:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800d154:	e073      	b.n	800d23e <init_quaternion+0x1e6>
        }
    }
    else if (hx > 0 && hy > 0)
 800d156:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	dd35      	ble.n	800d1ca <init_quaternion+0x172>
 800d15e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d162:	2b00      	cmp	r3, #0
 800d164:	dd31      	ble.n	800d1ca <init_quaternion+0x172>
    {
        if (fabs(hx / hy) >= 1)
 800d166:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d16a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d16e:	fb92 f3f3 	sdiv	r3, r2, r3
 800d172:	4618      	mov	r0, r3
 800d174:	f7f3 f9fe 	bl	8000574 <__aeabi_i2d>
 800d178:	4602      	mov	r2, r0
 800d17a:	460b      	mov	r3, r1
 800d17c:	4690      	mov	r8, r2
 800d17e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800d182:	f04f 0200 	mov.w	r2, #0
 800d186:	4b31      	ldr	r3, [pc, #196]	@ (800d24c <init_quaternion+0x1f4>)
 800d188:	4640      	mov	r0, r8
 800d18a:	4649      	mov	r1, r9
 800d18c:	f7f3 fce2 	bl	8000b54 <__aeabi_dcmpge>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d00c      	beq.n	800d1b0 <init_quaternion+0x158>
        {
            q0 = -0.9785;
 800d196:	4b2e      	ldr	r3, [pc, #184]	@ (800d250 <init_quaternion+0x1f8>)
 800d198:	4a3f      	ldr	r2, [pc, #252]	@ (800d298 <init_quaternion+0x240>)
 800d19a:	601a      	str	r2, [r3, #0]
            q1 = 0.008;
 800d19c:	4b2e      	ldr	r3, [pc, #184]	@ (800d258 <init_quaternion+0x200>)
 800d19e:	4a3f      	ldr	r2, [pc, #252]	@ (800d29c <init_quaternion+0x244>)
 800d1a0:	601a      	str	r2, [r3, #0]
            q2 = -0.02;
 800d1a2:	4b2f      	ldr	r3, [pc, #188]	@ (800d260 <init_quaternion+0x208>)
 800d1a4:	4a3e      	ldr	r2, [pc, #248]	@ (800d2a0 <init_quaternion+0x248>)
 800d1a6:	601a      	str	r2, [r3, #0]
            q3 = 0.195;
 800d1a8:	4b2f      	ldr	r3, [pc, #188]	@ (800d268 <init_quaternion+0x210>)
 800d1aa:	4a2a      	ldr	r2, [pc, #168]	@ (800d254 <init_quaternion+0x1fc>)
 800d1ac:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800d1ae:	e046      	b.n	800d23e <init_quaternion+0x1e6>
        }
        else
        {
            q0 = -0.9828;
 800d1b0:	4b27      	ldr	r3, [pc, #156]	@ (800d250 <init_quaternion+0x1f8>)
 800d1b2:	4a3c      	ldr	r2, [pc, #240]	@ (800d2a4 <init_quaternion+0x24c>)
 800d1b4:	601a      	str	r2, [r3, #0]
            q1 = 0.002;
 800d1b6:	4b28      	ldr	r3, [pc, #160]	@ (800d258 <init_quaternion+0x200>)
 800d1b8:	4a3b      	ldr	r2, [pc, #236]	@ (800d2a8 <init_quaternion+0x250>)
 800d1ba:	601a      	str	r2, [r3, #0]
            q2 = -0.0167;
 800d1bc:	4b28      	ldr	r3, [pc, #160]	@ (800d260 <init_quaternion+0x208>)
 800d1be:	4a3b      	ldr	r2, [pc, #236]	@ (800d2ac <init_quaternion+0x254>)
 800d1c0:	601a      	str	r2, [r3, #0]
            q3 = 0.5557;
 800d1c2:	4b29      	ldr	r3, [pc, #164]	@ (800d268 <init_quaternion+0x210>)
 800d1c4:	4a3a      	ldr	r2, [pc, #232]	@ (800d2b0 <init_quaternion+0x258>)
 800d1c6:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800d1c8:	e039      	b.n	800d23e <init_quaternion+0x1e6>
        }
    }
    else if (hx > 0 && hy < 0)
 800d1ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	dd35      	ble.n	800d23e <init_quaternion+0x1e6>
 800d1d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	da31      	bge.n	800d23e <init_quaternion+0x1e6>
    {
        if (fabs(hx / hy) >= 1)
 800d1da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d1de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d1e2:	fb92 f3f3 	sdiv	r3, r2, r3
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7f3 f9c4 	bl	8000574 <__aeabi_i2d>
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	4614      	mov	r4, r2
 800d1f2:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800d1f6:	f04f 0200 	mov.w	r2, #0
 800d1fa:	4b14      	ldr	r3, [pc, #80]	@ (800d24c <init_quaternion+0x1f4>)
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	4629      	mov	r1, r5
 800d200:	f7f3 fca8 	bl	8000b54 <__aeabi_dcmpge>
 800d204:	4603      	mov	r3, r0
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00c      	beq.n	800d224 <init_quaternion+0x1cc>
        {
            q0 = -0.979;
 800d20a:	4b11      	ldr	r3, [pc, #68]	@ (800d250 <init_quaternion+0x1f8>)
 800d20c:	4a29      	ldr	r2, [pc, #164]	@ (800d2b4 <init_quaternion+0x25c>)
 800d20e:	601a      	str	r2, [r3, #0]
            q1 = 0.0116;
 800d210:	4b11      	ldr	r3, [pc, #68]	@ (800d258 <init_quaternion+0x200>)
 800d212:	4a29      	ldr	r2, [pc, #164]	@ (800d2b8 <init_quaternion+0x260>)
 800d214:	601a      	str	r2, [r3, #0]
            q2 = -0.0167;
 800d216:	4b12      	ldr	r3, [pc, #72]	@ (800d260 <init_quaternion+0x208>)
 800d218:	4a24      	ldr	r2, [pc, #144]	@ (800d2ac <init_quaternion+0x254>)
 800d21a:	601a      	str	r2, [r3, #0]
            q3 = -0.195;
 800d21c:	4b12      	ldr	r3, [pc, #72]	@ (800d268 <init_quaternion+0x210>)
 800d21e:	4a27      	ldr	r2, [pc, #156]	@ (800d2bc <init_quaternion+0x264>)
 800d220:	601a      	str	r2, [r3, #0]
            q2 = -0.012;
            q3 = -0.556;
        }
    }
#endif
}
 800d222:	e00c      	b.n	800d23e <init_quaternion+0x1e6>
            q0 = -0.83;
 800d224:	4b0a      	ldr	r3, [pc, #40]	@ (800d250 <init_quaternion+0x1f8>)
 800d226:	4a26      	ldr	r2, [pc, #152]	@ (800d2c0 <init_quaternion+0x268>)
 800d228:	601a      	str	r2, [r3, #0]
            q1 = 0.014;
 800d22a:	4b0b      	ldr	r3, [pc, #44]	@ (800d258 <init_quaternion+0x200>)
 800d22c:	4a25      	ldr	r2, [pc, #148]	@ (800d2c4 <init_quaternion+0x26c>)
 800d22e:	601a      	str	r2, [r3, #0]
            q2 = -0.012;
 800d230:	4b0b      	ldr	r3, [pc, #44]	@ (800d260 <init_quaternion+0x208>)
 800d232:	4a25      	ldr	r2, [pc, #148]	@ (800d2c8 <init_quaternion+0x270>)
 800d234:	601a      	str	r2, [r3, #0]
            q3 = -0.556;
 800d236:	4b0c      	ldr	r3, [pc, #48]	@ (800d268 <init_quaternion+0x210>)
 800d238:	4a24      	ldr	r2, [pc, #144]	@ (800d2cc <init_quaternion+0x274>)
 800d23a:	601a      	str	r2, [r3, #0]
}
 800d23c:	e7ff      	b.n	800d23e <init_quaternion+0x1e6>
 800d23e:	bf00      	nop
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d248:	20000b8c 	.word	0x20000b8c
 800d24c:	3ff00000 	.word	0x3ff00000
 800d250:	20000090 	.word	0x20000090
 800d254:	3e47ae14 	.word	0x3e47ae14
 800d258:	20000b44 	.word	0x20000b44
 800d25c:	bc75c28f 	.word	0xbc75c28f
 800d260:	20000b48 	.word	0x20000b48
 800d264:	3b8ce704 	.word	0x3b8ce704
 800d268:	20000b4c 	.word	0x20000b4c
 800d26c:	3f7a9fbe 	.word	0x3f7a9fbe
 800d270:	3f0e147b 	.word	0x3f0e147b
 800d274:	3bc49ba6 	.word	0x3bc49ba6
 800d278:	3f543958 	.word	0x3f543958
 800d27c:	be45a1cb 	.word	0xbe45a1cb
 800d280:	bc1374bc 	.word	0xbc1374bc
 800d284:	bbc49ba6 	.word	0xbbc49ba6
 800d288:	bf0d4fdf 	.word	0xbf0d4fdf
 800d28c:	bb9d4952 	.word	0xbb9d4952
 800d290:	bc3c6a7f 	.word	0xbc3c6a7f
 800d294:	3f54d014 	.word	0x3f54d014
 800d298:	bf7a7efa 	.word	0xbf7a7efa
 800d29c:	3c03126f 	.word	0x3c03126f
 800d2a0:	bca3d70a 	.word	0xbca3d70a
 800d2a4:	bf7b98c8 	.word	0xbf7b98c8
 800d2a8:	3b03126f 	.word	0x3b03126f
 800d2ac:	bc88ce70 	.word	0xbc88ce70
 800d2b0:	3f0e425b 	.word	0x3f0e425b
 800d2b4:	bf7a9fbe 	.word	0xbf7a9fbe
 800d2b8:	3c3e0ded 	.word	0x3c3e0ded
 800d2bc:	be47ae14 	.word	0xbe47ae14
 800d2c0:	bf547ae1 	.word	0xbf547ae1
 800d2c4:	3c656042 	.word	0x3c656042
 800d2c8:	bc449ba6 	.word	0xbc449ba6
 800d2cc:	bf0e5604 	.word	0xbf0e5604

0800d2d0 <imu_ahrs_update>:

// 更新IMU数值
void imu_ahrs_update(void)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b09e      	sub	sp, #120	@ 0x78
 800d2d4:	af00      	add	r7, sp, #0
    float hx, hy, hz, bx, bz;
    float vx, vy, vz, wx, wy, wz;
    float ex, ey, ez, halfT;
    float tempq0, tempq1, tempq2, tempq3;

    float q0q0 = q0 * q0;
 800d2d6:	4bd6      	ldr	r3, [pc, #856]	@ (800d630 <imu_ahrs_update+0x360>)
 800d2d8:	ed93 7a00 	vldr	s14, [r3]
 800d2dc:	4bd4      	ldr	r3, [pc, #848]	@ (800d630 <imu_ahrs_update+0x360>)
 800d2de:	edd3 7a00 	vldr	s15, [r3]
 800d2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2e6:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    float q0q1 = q0 * q1;
 800d2ea:	4bd1      	ldr	r3, [pc, #836]	@ (800d630 <imu_ahrs_update+0x360>)
 800d2ec:	ed93 7a00 	vldr	s14, [r3]
 800d2f0:	4bd0      	ldr	r3, [pc, #832]	@ (800d634 <imu_ahrs_update+0x364>)
 800d2f2:	edd3 7a00 	vldr	s15, [r3]
 800d2f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2fa:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    float q0q2 = q0 * q2;
 800d2fe:	4bcc      	ldr	r3, [pc, #816]	@ (800d630 <imu_ahrs_update+0x360>)
 800d300:	ed93 7a00 	vldr	s14, [r3]
 800d304:	4bcc      	ldr	r3, [pc, #816]	@ (800d638 <imu_ahrs_update+0x368>)
 800d306:	edd3 7a00 	vldr	s15, [r3]
 800d30a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d30e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    float q0q3 = q0 * q3;
 800d312:	4bc7      	ldr	r3, [pc, #796]	@ (800d630 <imu_ahrs_update+0x360>)
 800d314:	ed93 7a00 	vldr	s14, [r3]
 800d318:	4bc8      	ldr	r3, [pc, #800]	@ (800d63c <imu_ahrs_update+0x36c>)
 800d31a:	edd3 7a00 	vldr	s15, [r3]
 800d31e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d322:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    float q1q1 = q1 * q1;
 800d326:	4bc3      	ldr	r3, [pc, #780]	@ (800d634 <imu_ahrs_update+0x364>)
 800d328:	ed93 7a00 	vldr	s14, [r3]
 800d32c:	4bc1      	ldr	r3, [pc, #772]	@ (800d634 <imu_ahrs_update+0x364>)
 800d32e:	edd3 7a00 	vldr	s15, [r3]
 800d332:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d336:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    float q1q2 = q1 * q2;
 800d33a:	4bbe      	ldr	r3, [pc, #760]	@ (800d634 <imu_ahrs_update+0x364>)
 800d33c:	ed93 7a00 	vldr	s14, [r3]
 800d340:	4bbd      	ldr	r3, [pc, #756]	@ (800d638 <imu_ahrs_update+0x368>)
 800d342:	edd3 7a00 	vldr	s15, [r3]
 800d346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d34a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    float q1q3 = q1 * q3;
 800d34e:	4bb9      	ldr	r3, [pc, #740]	@ (800d634 <imu_ahrs_update+0x364>)
 800d350:	ed93 7a00 	vldr	s14, [r3]
 800d354:	4bb9      	ldr	r3, [pc, #740]	@ (800d63c <imu_ahrs_update+0x36c>)
 800d356:	edd3 7a00 	vldr	s15, [r3]
 800d35a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d35e:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    float q2q2 = q2 * q2;
 800d362:	4bb5      	ldr	r3, [pc, #724]	@ (800d638 <imu_ahrs_update+0x368>)
 800d364:	ed93 7a00 	vldr	s14, [r3]
 800d368:	4bb3      	ldr	r3, [pc, #716]	@ (800d638 <imu_ahrs_update+0x368>)
 800d36a:	edd3 7a00 	vldr	s15, [r3]
 800d36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d372:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    float q2q3 = q2 * q3;
 800d376:	4bb0      	ldr	r3, [pc, #704]	@ (800d638 <imu_ahrs_update+0x368>)
 800d378:	ed93 7a00 	vldr	s14, [r3]
 800d37c:	4baf      	ldr	r3, [pc, #700]	@ (800d63c <imu_ahrs_update+0x36c>)
 800d37e:	edd3 7a00 	vldr	s15, [r3]
 800d382:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d386:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    float q3q3 = q3 * q3;
 800d38a:	4bac      	ldr	r3, [pc, #688]	@ (800d63c <imu_ahrs_update+0x36c>)
 800d38c:	ed93 7a00 	vldr	s14, [r3]
 800d390:	4baa      	ldr	r3, [pc, #680]	@ (800d63c <imu_ahrs_update+0x36c>)
 800d392:	edd3 7a00 	vldr	s15, [r3]
 800d396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d39a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    gx = imu.wx;
 800d39e:	4ba8      	ldr	r3, [pc, #672]	@ (800d640 <imu_ahrs_update+0x370>)
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	4aa8      	ldr	r2, [pc, #672]	@ (800d644 <imu_ahrs_update+0x374>)
 800d3a4:	6013      	str	r3, [r2, #0]
    gy = imu.wy;
 800d3a6:	4ba6      	ldr	r3, [pc, #664]	@ (800d640 <imu_ahrs_update+0x370>)
 800d3a8:	695b      	ldr	r3, [r3, #20]
 800d3aa:	4aa7      	ldr	r2, [pc, #668]	@ (800d648 <imu_ahrs_update+0x378>)
 800d3ac:	6013      	str	r3, [r2, #0]
    gz = imu.wz;
 800d3ae:	4ba4      	ldr	r3, [pc, #656]	@ (800d640 <imu_ahrs_update+0x370>)
 800d3b0:	699b      	ldr	r3, [r3, #24]
 800d3b2:	4aa6      	ldr	r2, [pc, #664]	@ (800d64c <imu_ahrs_update+0x37c>)
 800d3b4:	6013      	str	r3, [r2, #0]
    ax = imu.ax;
 800d3b6:	4ba2      	ldr	r3, [pc, #648]	@ (800d640 <imu_ahrs_update+0x370>)
 800d3b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d3bc:	ee07 3a90 	vmov	s15, r3
 800d3c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3c4:	4ba2      	ldr	r3, [pc, #648]	@ (800d650 <imu_ahrs_update+0x380>)
 800d3c6:	edc3 7a00 	vstr	s15, [r3]
    ay = imu.ay;
 800d3ca:	4b9d      	ldr	r3, [pc, #628]	@ (800d640 <imu_ahrs_update+0x370>)
 800d3cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d3d0:	ee07 3a90 	vmov	s15, r3
 800d3d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3d8:	4b9e      	ldr	r3, [pc, #632]	@ (800d654 <imu_ahrs_update+0x384>)
 800d3da:	edc3 7a00 	vstr	s15, [r3]
    az = imu.az;
 800d3de:	4b98      	ldr	r3, [pc, #608]	@ (800d640 <imu_ahrs_update+0x370>)
 800d3e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d3e4:	ee07 3a90 	vmov	s15, r3
 800d3e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3ec:	4b9a      	ldr	r3, [pc, #616]	@ (800d658 <imu_ahrs_update+0x388>)
 800d3ee:	edc3 7a00 	vstr	s15, [r3]
    mx = imu.mx;
 800d3f2:	4b93      	ldr	r3, [pc, #588]	@ (800d640 <imu_ahrs_update+0x370>)
 800d3f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d3f8:	ee07 3a90 	vmov	s15, r3
 800d3fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d400:	4b96      	ldr	r3, [pc, #600]	@ (800d65c <imu_ahrs_update+0x38c>)
 800d402:	edc3 7a00 	vstr	s15, [r3]
    my = imu.my;
 800d406:	4b8e      	ldr	r3, [pc, #568]	@ (800d640 <imu_ahrs_update+0x370>)
 800d408:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d40c:	ee07 3a90 	vmov	s15, r3
 800d410:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d414:	4b92      	ldr	r3, [pc, #584]	@ (800d660 <imu_ahrs_update+0x390>)
 800d416:	edc3 7a00 	vstr	s15, [r3]
    mz = imu.mz;
 800d41a:	4b89      	ldr	r3, [pc, #548]	@ (800d640 <imu_ahrs_update+0x370>)
 800d41c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800d420:	ee07 3a90 	vmov	s15, r3
 800d424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d428:	4b8e      	ldr	r3, [pc, #568]	@ (800d664 <imu_ahrs_update+0x394>)
 800d42a:	edc3 7a00 	vstr	s15, [r3]

    now_update = HAL_GetTick(); // ms
 800d42e:	f7f5 f9a5 	bl	800277c <HAL_GetTick>
 800d432:	4603      	mov	r3, r0
 800d434:	4a8c      	ldr	r2, [pc, #560]	@ (800d668 <imu_ahrs_update+0x398>)
 800d436:	6013      	str	r3, [r2, #0]
    halfT = ((float)(now_update - last_update) / 2000.0f);
 800d438:	4b8b      	ldr	r3, [pc, #556]	@ (800d668 <imu_ahrs_update+0x398>)
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	4b8b      	ldr	r3, [pc, #556]	@ (800d66c <imu_ahrs_update+0x39c>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	1ad3      	subs	r3, r2, r3
 800d442:	ee07 3a90 	vmov	s15, r3
 800d446:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d44a:	eddf 6a89 	vldr	s13, [pc, #548]	@ 800d670 <imu_ahrs_update+0x3a0>
 800d44e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d452:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    last_update = now_update;
 800d456:	4b84      	ldr	r3, [pc, #528]	@ (800d668 <imu_ahrs_update+0x398>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	4a84      	ldr	r2, [pc, #528]	@ (800d66c <imu_ahrs_update+0x39c>)
 800d45c:	6013      	str	r3, [r2, #0]

    /* 快速逆平方根 */
    norm = inv_sqrt(ax * ax + ay * ay + az * az);
 800d45e:	4b7c      	ldr	r3, [pc, #496]	@ (800d650 <imu_ahrs_update+0x380>)
 800d460:	ed93 7a00 	vldr	s14, [r3]
 800d464:	4b7a      	ldr	r3, [pc, #488]	@ (800d650 <imu_ahrs_update+0x380>)
 800d466:	edd3 7a00 	vldr	s15, [r3]
 800d46a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d46e:	4b79      	ldr	r3, [pc, #484]	@ (800d654 <imu_ahrs_update+0x384>)
 800d470:	edd3 6a00 	vldr	s13, [r3]
 800d474:	4b77      	ldr	r3, [pc, #476]	@ (800d654 <imu_ahrs_update+0x384>)
 800d476:	edd3 7a00 	vldr	s15, [r3]
 800d47a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d47e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d482:	4b75      	ldr	r3, [pc, #468]	@ (800d658 <imu_ahrs_update+0x388>)
 800d484:	edd3 6a00 	vldr	s13, [r3]
 800d488:	4b73      	ldr	r3, [pc, #460]	@ (800d658 <imu_ahrs_update+0x388>)
 800d48a:	edd3 7a00 	vldr	s15, [r3]
 800d48e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d492:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d496:	eeb0 0a67 	vmov.f32	s0, s15
 800d49a:	f7ff fad7 	bl	800ca4c <inv_sqrt>
 800d49e:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    ax = ax * norm;
 800d4a2:	4b6b      	ldr	r3, [pc, #428]	@ (800d650 <imu_ahrs_update+0x380>)
 800d4a4:	ed93 7a00 	vldr	s14, [r3]
 800d4a8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d4ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4b0:	4b67      	ldr	r3, [pc, #412]	@ (800d650 <imu_ahrs_update+0x380>)
 800d4b2:	edc3 7a00 	vstr	s15, [r3]
    ay = ay * norm;
 800d4b6:	4b67      	ldr	r3, [pc, #412]	@ (800d654 <imu_ahrs_update+0x384>)
 800d4b8:	ed93 7a00 	vldr	s14, [r3]
 800d4bc:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d4c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4c4:	4b63      	ldr	r3, [pc, #396]	@ (800d654 <imu_ahrs_update+0x384>)
 800d4c6:	edc3 7a00 	vstr	s15, [r3]
    az = az * norm;
 800d4ca:	4b63      	ldr	r3, [pc, #396]	@ (800d658 <imu_ahrs_update+0x388>)
 800d4cc:	ed93 7a00 	vldr	s14, [r3]
 800d4d0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d4d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4d8:	4b5f      	ldr	r3, [pc, #380]	@ (800d658 <imu_ahrs_update+0x388>)
 800d4da:	edc3 7a00 	vstr	s15, [r3]
    norm = inv_sqrt(mx * mx + my * my + mz * mz);
    mx = mx * norm;
    my = my * norm;
    mz = mz * norm;
#else
    mx = 0;
 800d4de:	4b5f      	ldr	r3, [pc, #380]	@ (800d65c <imu_ahrs_update+0x38c>)
 800d4e0:	f04f 0200 	mov.w	r2, #0
 800d4e4:	601a      	str	r2, [r3, #0]
    my = 0;
 800d4e6:	4b5e      	ldr	r3, [pc, #376]	@ (800d660 <imu_ahrs_update+0x390>)
 800d4e8:	f04f 0200 	mov.w	r2, #0
 800d4ec:	601a      	str	r2, [r3, #0]
    mz = 0;
 800d4ee:	4b5d      	ldr	r3, [pc, #372]	@ (800d664 <imu_ahrs_update+0x394>)
 800d4f0:	f04f 0200 	mov.w	r2, #0
 800d4f4:	601a      	str	r2, [r3, #0]
#endif
    /* 计算通量的参考方向*/
    hx = 2.0f * mx * (0.5f - q2q2 - q3q3) + 2.0f * my * (q1q2 - q0q3) + 2.0f * mz * (q1q3 + q0q2);
 800d4f6:	4b59      	ldr	r3, [pc, #356]	@ (800d65c <imu_ahrs_update+0x38c>)
 800d4f8:	edd3 7a00 	vldr	s15, [r3]
 800d4fc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d500:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800d504:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800d508:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d50c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800d510:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d514:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d518:	4b51      	ldr	r3, [pc, #324]	@ (800d660 <imu_ahrs_update+0x390>)
 800d51a:	edd3 7a00 	vldr	s15, [r3]
 800d51e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d522:	ed97 6a18 	vldr	s12, [r7, #96]	@ 0x60
 800d526:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800d52a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d52e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d532:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d536:	4b4b      	ldr	r3, [pc, #300]	@ (800d664 <imu_ahrs_update+0x394>)
 800d538:	edd3 7a00 	vldr	s15, [r3]
 800d53c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d540:	ed97 6a17 	vldr	s12, [r7, #92]	@ 0x5c
 800d544:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800d548:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d54c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d550:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d554:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    hy = 2.0f * mx * (q1q2 + q0q3) + 2.0f * my * (0.5f - q1q1 - q3q3) + 2.0f * mz * (q2q3 - q0q1);
 800d558:	4b40      	ldr	r3, [pc, #256]	@ (800d65c <imu_ahrs_update+0x38c>)
 800d55a:	edd3 7a00 	vldr	s15, [r3]
 800d55e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d562:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 800d566:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800d56a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d56e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d572:	4b3b      	ldr	r3, [pc, #236]	@ (800d660 <imu_ahrs_update+0x390>)
 800d574:	edd3 7a00 	vldr	s15, [r3]
 800d578:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d57c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d580:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800d584:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d588:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800d58c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d590:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d594:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d598:	4b32      	ldr	r3, [pc, #200]	@ (800d664 <imu_ahrs_update+0x394>)
 800d59a:	edd3 7a00 	vldr	s15, [r3]
 800d59e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d5a2:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 800d5a6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800d5aa:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d5ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5b6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    hz = 2.0f * mx * (q1q3 - q0q2) + 2.0f * my * (q2q3 + q0q1) + 2.0f * mz * (0.5f - q1q1 - q2q2);
 800d5ba:	4b28      	ldr	r3, [pc, #160]	@ (800d65c <imu_ahrs_update+0x38c>)
 800d5bc:	edd3 7a00 	vldr	s15, [r3]
 800d5c0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d5c4:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800d5c8:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800d5cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d5d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5d4:	4b22      	ldr	r3, [pc, #136]	@ (800d660 <imu_ahrs_update+0x390>)
 800d5d6:	edd3 7a00 	vldr	s15, [r3]
 800d5da:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d5de:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 800d5e2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800d5e6:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d5ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d5f2:	4b1c      	ldr	r3, [pc, #112]	@ (800d664 <imu_ahrs_update+0x394>)
 800d5f4:	edd3 7a00 	vldr	s15, [r3]
 800d5f8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d5fc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d600:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800d604:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d608:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800d60c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d614:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d618:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    bx = sqrt((hx * hx) + (hy * hy));
 800d61c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800d620:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800d624:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800d628:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d62c:	e022      	b.n	800d674 <imu_ahrs_update+0x3a4>
 800d62e:	bf00      	nop
 800d630:	20000090 	.word	0x20000090
 800d634:	20000b44 	.word	0x20000b44
 800d638:	20000b48 	.word	0x20000b48
 800d63c:	20000b4c 	.word	0x20000b4c
 800d640:	20000b8c 	.word	0x20000b8c
 800d644:	20000bc4 	.word	0x20000bc4
 800d648:	20000bc8 	.word	0x20000bc8
 800d64c:	20000bcc 	.word	0x20000bcc
 800d650:	20000bd0 	.word	0x20000bd0
 800d654:	20000bd4 	.word	0x20000bd4
 800d658:	20000bd8 	.word	0x20000bd8
 800d65c:	20000bdc 	.word	0x20000bdc
 800d660:	20000be0 	.word	0x20000be0
 800d664:	20000be4 	.word	0x20000be4
 800d668:	20000bec 	.word	0x20000bec
 800d66c:	20000be8 	.word	0x20000be8
 800d670:	44fa0000 	.word	0x44fa0000
 800d674:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d678:	ee17 0a90 	vmov	r0, s15
 800d67c:	f7f2 ff8c 	bl	8000598 <__aeabi_f2d>
 800d680:	4602      	mov	r2, r0
 800d682:	460b      	mov	r3, r1
 800d684:	ec43 2b10 	vmov	d0, r2, r3
 800d688:	f005 fab0 	bl	8012bec <sqrt>
 800d68c:	ec53 2b10 	vmov	r2, r3, d0
 800d690:	4610      	mov	r0, r2
 800d692:	4619      	mov	r1, r3
 800d694:	f7f3 fad0 	bl	8000c38 <__aeabi_d2f>
 800d698:	4603      	mov	r3, r0
 800d69a:	63bb      	str	r3, [r7, #56]	@ 0x38
    bz = hz;
 800d69c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d69e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* 估计重力和通量方向(v和w)   */
    vx = 2.0f * (q1q3 - q0q2);
 800d6a0:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800d6a4:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800d6a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d6b0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    vy = 2.0f * (q0q1 + q2q3);
 800d6b4:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800d6b8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800d6bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d6c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d6c4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    vz = q0q0 - q1q1 - q2q2 + q3q3;
 800d6c8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800d6cc:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800d6d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d6d4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800d6d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6dc:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800d6e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d6e4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    wx = 2.0f * bx * (0.5f - q2q2 - q3q3) + 2.0f * bz * (q1q3 - q0q2);
 800d6e8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d6ec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d6f0:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800d6f4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800d6f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d6fc:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800d700:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d704:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d708:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800d70c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d710:	ed97 6a17 	vldr	s12, [r7, #92]	@ 0x5c
 800d714:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800d718:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d71c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d720:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d724:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    wy = 2.0f * bx * (q1q2 - q0q3) + 2.0f * bz * (q0q1 + q2q3);
 800d728:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d72c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d730:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 800d734:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800d738:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d73c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d740:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800d744:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d748:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 800d74c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800d750:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d75c:	edc7 7a08 	vstr	s15, [r7, #32]
    wz = 2.0f * bx * (q0q2 + q1q3) + 2.0f * bz * (0.5f - q1q1 - q2q2);
 800d760:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d764:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d768:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800d76c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800d770:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d774:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d778:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800d77c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d780:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d784:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800d788:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d78c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800d790:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d79c:	edc7 7a07 	vstr	s15, [r7, #28]

    /*
     * 误差是场的参考方向与传感器测量方向的叉积之和
     */
    ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 800d7a0:	4bde      	ldr	r3, [pc, #888]	@ (800db1c <imu_ahrs_update+0x84c>)
 800d7a2:	ed93 7a00 	vldr	s14, [r3]
 800d7a6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800d7aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7ae:	4bdc      	ldr	r3, [pc, #880]	@ (800db20 <imu_ahrs_update+0x850>)
 800d7b0:	edd3 6a00 	vldr	s13, [r3]
 800d7b4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d7b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d7c0:	4bd8      	ldr	r3, [pc, #864]	@ (800db24 <imu_ahrs_update+0x854>)
 800d7c2:	edd3 6a00 	vldr	s13, [r3]
 800d7c6:	edd7 7a07 	vldr	s15, [r7, #28]
 800d7ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d7ce:	4bd6      	ldr	r3, [pc, #856]	@ (800db28 <imu_ahrs_update+0x858>)
 800d7d0:	ed93 6a00 	vldr	s12, [r3]
 800d7d4:	edd7 7a08 	vldr	s15, [r7, #32]
 800d7d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d7dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d7e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7e4:	edc7 7a06 	vstr	s15, [r7, #24]
    ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 800d7e8:	4bcd      	ldr	r3, [pc, #820]	@ (800db20 <imu_ahrs_update+0x850>)
 800d7ea:	ed93 7a00 	vldr	s14, [r3]
 800d7ee:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d7f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7f6:	4bcd      	ldr	r3, [pc, #820]	@ (800db2c <imu_ahrs_update+0x85c>)
 800d7f8:	edd3 6a00 	vldr	s13, [r3]
 800d7fc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800d800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d804:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d808:	4bc7      	ldr	r3, [pc, #796]	@ (800db28 <imu_ahrs_update+0x858>)
 800d80a:	edd3 6a00 	vldr	s13, [r3]
 800d80e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d812:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d816:	4bc6      	ldr	r3, [pc, #792]	@ (800db30 <imu_ahrs_update+0x860>)
 800d818:	ed93 6a00 	vldr	s12, [r3]
 800d81c:	edd7 7a07 	vldr	s15, [r7, #28]
 800d820:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d824:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d82c:	edc7 7a05 	vstr	s15, [r7, #20]
    ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 800d830:	4bbe      	ldr	r3, [pc, #760]	@ (800db2c <imu_ahrs_update+0x85c>)
 800d832:	ed93 7a00 	vldr	s14, [r3]
 800d836:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d83a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d83e:	4bb7      	ldr	r3, [pc, #732]	@ (800db1c <imu_ahrs_update+0x84c>)
 800d840:	edd3 6a00 	vldr	s13, [r3]
 800d844:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d84c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d850:	4bb7      	ldr	r3, [pc, #732]	@ (800db30 <imu_ahrs_update+0x860>)
 800d852:	edd3 6a00 	vldr	s13, [r3]
 800d856:	edd7 7a08 	vldr	s15, [r7, #32]
 800d85a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d85e:	4bb1      	ldr	r3, [pc, #708]	@ (800db24 <imu_ahrs_update+0x854>)
 800d860:	ed93 6a00 	vldr	s12, [r3]
 800d864:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d868:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d86c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d870:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d874:	edc7 7a04 	vstr	s15, [r7, #16]

    /* PI */
    if (ex != 0.0f && ey != 0.0f && ez != 0.0f)
 800d878:	edd7 7a06 	vldr	s15, [r7, #24]
 800d87c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d884:	d076      	beq.n	800d974 <imu_ahrs_update+0x6a4>
 800d886:	edd7 7a05 	vldr	s15, [r7, #20]
 800d88a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d892:	d06f      	beq.n	800d974 <imu_ahrs_update+0x6a4>
 800d894:	edd7 7a04 	vldr	s15, [r7, #16]
 800d898:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8a0:	d068      	beq.n	800d974 <imu_ahrs_update+0x6a4>
    {
        exInt = exInt + ex * Ki * halfT;
 800d8a2:	edd7 7a06 	vldr	s15, [r7, #24]
 800d8a6:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 800db34 <imu_ahrs_update+0x864>
 800d8aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d8ae:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d8b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8b6:	4ba0      	ldr	r3, [pc, #640]	@ (800db38 <imu_ahrs_update+0x868>)
 800d8b8:	edd3 7a00 	vldr	s15, [r3]
 800d8bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8c0:	4b9d      	ldr	r3, [pc, #628]	@ (800db38 <imu_ahrs_update+0x868>)
 800d8c2:	edc3 7a00 	vstr	s15, [r3]
        eyInt = eyInt + ey * Ki * halfT;
 800d8c6:	edd7 7a05 	vldr	s15, [r7, #20]
 800d8ca:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800db34 <imu_ahrs_update+0x864>
 800d8ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d8d2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d8d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8da:	4b98      	ldr	r3, [pc, #608]	@ (800db3c <imu_ahrs_update+0x86c>)
 800d8dc:	edd3 7a00 	vldr	s15, [r3]
 800d8e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8e4:	4b95      	ldr	r3, [pc, #596]	@ (800db3c <imu_ahrs_update+0x86c>)
 800d8e6:	edc3 7a00 	vstr	s15, [r3]
        ezInt = ezInt + ez * Ki * halfT;
 800d8ea:	edd7 7a04 	vldr	s15, [r7, #16]
 800d8ee:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800db34 <imu_ahrs_update+0x864>
 800d8f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d8f6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d8fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8fe:	4b90      	ldr	r3, [pc, #576]	@ (800db40 <imu_ahrs_update+0x870>)
 800d900:	edd3 7a00 	vldr	s15, [r3]
 800d904:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d908:	4b8d      	ldr	r3, [pc, #564]	@ (800db40 <imu_ahrs_update+0x870>)
 800d90a:	edc3 7a00 	vstr	s15, [r3]

        gx = gx + Kp * ex + exInt;
 800d90e:	edd7 7a06 	vldr	s15, [r7, #24]
 800d912:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d916:	4b8b      	ldr	r3, [pc, #556]	@ (800db44 <imu_ahrs_update+0x874>)
 800d918:	edd3 7a00 	vldr	s15, [r3]
 800d91c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d920:	4b85      	ldr	r3, [pc, #532]	@ (800db38 <imu_ahrs_update+0x868>)
 800d922:	edd3 7a00 	vldr	s15, [r3]
 800d926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d92a:	4b86      	ldr	r3, [pc, #536]	@ (800db44 <imu_ahrs_update+0x874>)
 800d92c:	edc3 7a00 	vstr	s15, [r3]
        gy = gy + Kp * ey + eyInt;
 800d930:	edd7 7a05 	vldr	s15, [r7, #20]
 800d934:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d938:	4b83      	ldr	r3, [pc, #524]	@ (800db48 <imu_ahrs_update+0x878>)
 800d93a:	edd3 7a00 	vldr	s15, [r3]
 800d93e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d942:	4b7e      	ldr	r3, [pc, #504]	@ (800db3c <imu_ahrs_update+0x86c>)
 800d944:	edd3 7a00 	vldr	s15, [r3]
 800d948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d94c:	4b7e      	ldr	r3, [pc, #504]	@ (800db48 <imu_ahrs_update+0x878>)
 800d94e:	edc3 7a00 	vstr	s15, [r3]
        gz = gz + Kp * ez + ezInt;
 800d952:	edd7 7a04 	vldr	s15, [r7, #16]
 800d956:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d95a:	4b7c      	ldr	r3, [pc, #496]	@ (800db4c <imu_ahrs_update+0x87c>)
 800d95c:	edd3 7a00 	vldr	s15, [r3]
 800d960:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d964:	4b76      	ldr	r3, [pc, #472]	@ (800db40 <imu_ahrs_update+0x870>)
 800d966:	edd3 7a00 	vldr	s15, [r3]
 800d96a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d96e:	4b77      	ldr	r3, [pc, #476]	@ (800db4c <imu_ahrs_update+0x87c>)
 800d970:	edc3 7a00 	vstr	s15, [r3]
    }

    tempq0 = q0 + (-q1 * gx - q2 * gy - q3 * gz) * halfT;
 800d974:	4b76      	ldr	r3, [pc, #472]	@ (800db50 <imu_ahrs_update+0x880>)
 800d976:	edd3 7a00 	vldr	s15, [r3]
 800d97a:	eeb1 7a67 	vneg.f32	s14, s15
 800d97e:	4b71      	ldr	r3, [pc, #452]	@ (800db44 <imu_ahrs_update+0x874>)
 800d980:	edd3 7a00 	vldr	s15, [r3]
 800d984:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d988:	4b72      	ldr	r3, [pc, #456]	@ (800db54 <imu_ahrs_update+0x884>)
 800d98a:	edd3 6a00 	vldr	s13, [r3]
 800d98e:	4b6e      	ldr	r3, [pc, #440]	@ (800db48 <imu_ahrs_update+0x878>)
 800d990:	edd3 7a00 	vldr	s15, [r3]
 800d994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d998:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d99c:	4b6e      	ldr	r3, [pc, #440]	@ (800db58 <imu_ahrs_update+0x888>)
 800d99e:	edd3 6a00 	vldr	s13, [r3]
 800d9a2:	4b6a      	ldr	r3, [pc, #424]	@ (800db4c <imu_ahrs_update+0x87c>)
 800d9a4:	edd3 7a00 	vldr	s15, [r3]
 800d9a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d9b0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d9b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9b8:	4b68      	ldr	r3, [pc, #416]	@ (800db5c <imu_ahrs_update+0x88c>)
 800d9ba:	edd3 7a00 	vldr	s15, [r3]
 800d9be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9c2:	edc7 7a03 	vstr	s15, [r7, #12]
    tempq1 = q1 + (q0 * gx + q2 * gz - q3 * gy) * halfT;
 800d9c6:	4b65      	ldr	r3, [pc, #404]	@ (800db5c <imu_ahrs_update+0x88c>)
 800d9c8:	ed93 7a00 	vldr	s14, [r3]
 800d9cc:	4b5d      	ldr	r3, [pc, #372]	@ (800db44 <imu_ahrs_update+0x874>)
 800d9ce:	edd3 7a00 	vldr	s15, [r3]
 800d9d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9d6:	4b5f      	ldr	r3, [pc, #380]	@ (800db54 <imu_ahrs_update+0x884>)
 800d9d8:	edd3 6a00 	vldr	s13, [r3]
 800d9dc:	4b5b      	ldr	r3, [pc, #364]	@ (800db4c <imu_ahrs_update+0x87c>)
 800d9de:	edd3 7a00 	vldr	s15, [r3]
 800d9e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d9ea:	4b5b      	ldr	r3, [pc, #364]	@ (800db58 <imu_ahrs_update+0x888>)
 800d9ec:	edd3 6a00 	vldr	s13, [r3]
 800d9f0:	4b55      	ldr	r3, [pc, #340]	@ (800db48 <imu_ahrs_update+0x878>)
 800d9f2:	edd3 7a00 	vldr	s15, [r3]
 800d9f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d9fe:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800da02:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da06:	4b52      	ldr	r3, [pc, #328]	@ (800db50 <imu_ahrs_update+0x880>)
 800da08:	edd3 7a00 	vldr	s15, [r3]
 800da0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da10:	edc7 7a02 	vstr	s15, [r7, #8]
    tempq2 = q2 + (q0 * gy - q1 * gz + q3 * gx) * halfT;
 800da14:	4b51      	ldr	r3, [pc, #324]	@ (800db5c <imu_ahrs_update+0x88c>)
 800da16:	ed93 7a00 	vldr	s14, [r3]
 800da1a:	4b4b      	ldr	r3, [pc, #300]	@ (800db48 <imu_ahrs_update+0x878>)
 800da1c:	edd3 7a00 	vldr	s15, [r3]
 800da20:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da24:	4b4a      	ldr	r3, [pc, #296]	@ (800db50 <imu_ahrs_update+0x880>)
 800da26:	edd3 6a00 	vldr	s13, [r3]
 800da2a:	4b48      	ldr	r3, [pc, #288]	@ (800db4c <imu_ahrs_update+0x87c>)
 800da2c:	edd3 7a00 	vldr	s15, [r3]
 800da30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da34:	ee37 7a67 	vsub.f32	s14, s14, s15
 800da38:	4b47      	ldr	r3, [pc, #284]	@ (800db58 <imu_ahrs_update+0x888>)
 800da3a:	edd3 6a00 	vldr	s13, [r3]
 800da3e:	4b41      	ldr	r3, [pc, #260]	@ (800db44 <imu_ahrs_update+0x874>)
 800da40:	edd3 7a00 	vldr	s15, [r3]
 800da44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da48:	ee37 7a27 	vadd.f32	s14, s14, s15
 800da4c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800da50:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da54:	4b3f      	ldr	r3, [pc, #252]	@ (800db54 <imu_ahrs_update+0x884>)
 800da56:	edd3 7a00 	vldr	s15, [r3]
 800da5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da5e:	edc7 7a01 	vstr	s15, [r7, #4]
    tempq3 = q3 + (q0 * gz + q1 * gy - q2 * gx) * halfT;
 800da62:	4b3e      	ldr	r3, [pc, #248]	@ (800db5c <imu_ahrs_update+0x88c>)
 800da64:	ed93 7a00 	vldr	s14, [r3]
 800da68:	4b38      	ldr	r3, [pc, #224]	@ (800db4c <imu_ahrs_update+0x87c>)
 800da6a:	edd3 7a00 	vldr	s15, [r3]
 800da6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da72:	4b37      	ldr	r3, [pc, #220]	@ (800db50 <imu_ahrs_update+0x880>)
 800da74:	edd3 6a00 	vldr	s13, [r3]
 800da78:	4b33      	ldr	r3, [pc, #204]	@ (800db48 <imu_ahrs_update+0x878>)
 800da7a:	edd3 7a00 	vldr	s15, [r3]
 800da7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da82:	ee37 7a27 	vadd.f32	s14, s14, s15
 800da86:	4b33      	ldr	r3, [pc, #204]	@ (800db54 <imu_ahrs_update+0x884>)
 800da88:	edd3 6a00 	vldr	s13, [r3]
 800da8c:	4b2d      	ldr	r3, [pc, #180]	@ (800db44 <imu_ahrs_update+0x874>)
 800da8e:	edd3 7a00 	vldr	s15, [r3]
 800da92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da96:	ee37 7a67 	vsub.f32	s14, s14, s15
 800da9a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800da9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800daa2:	4b2d      	ldr	r3, [pc, #180]	@ (800db58 <imu_ahrs_update+0x888>)
 800daa4:	edd3 7a00 	vldr	s15, [r3]
 800daa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800daac:	edc7 7a00 	vstr	s15, [r7]

    /*将四元数标准化 */
    norm = inv_sqrt(tempq0 * tempq0 + tempq1 * tempq1 + tempq2 * tempq2 + tempq3 * tempq3);
 800dab0:	edd7 7a03 	vldr	s15, [r7, #12]
 800dab4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800dab8:	edd7 7a02 	vldr	s15, [r7, #8]
 800dabc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dac0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dac4:	edd7 7a01 	vldr	s15, [r7, #4]
 800dac8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dacc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dad0:	edd7 7a00 	vldr	s15, [r7]
 800dad4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dadc:	eeb0 0a67 	vmov.f32	s0, s15
 800dae0:	f7fe ffb4 	bl	800ca4c <inv_sqrt>
 800dae4:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    q0 = tempq0 * norm;
 800dae8:	ed97 7a03 	vldr	s14, [r7, #12]
 800daec:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800daf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daf4:	4b19      	ldr	r3, [pc, #100]	@ (800db5c <imu_ahrs_update+0x88c>)
 800daf6:	edc3 7a00 	vstr	s15, [r3]
    q1 = tempq1 * norm;
 800dafa:	ed97 7a02 	vldr	s14, [r7, #8]
 800dafe:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800db02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db06:	4b12      	ldr	r3, [pc, #72]	@ (800db50 <imu_ahrs_update+0x880>)
 800db08:	edc3 7a00 	vstr	s15, [r3]
    q2 = tempq2 * norm;
 800db0c:	ed97 7a01 	vldr	s14, [r7, #4]
 800db10:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800db14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db18:	e022      	b.n	800db60 <imu_ahrs_update+0x890>
 800db1a:	bf00      	nop
 800db1c:	20000bd4 	.word	0x20000bd4
 800db20:	20000bd8 	.word	0x20000bd8
 800db24:	20000be0 	.word	0x20000be0
 800db28:	20000be4 	.word	0x20000be4
 800db2c:	20000bd0 	.word	0x20000bd0
 800db30:	20000bdc 	.word	0x20000bdc
 800db34:	3c23d70a 	.word	0x3c23d70a
 800db38:	20000b50 	.word	0x20000b50
 800db3c:	20000b54 	.word	0x20000b54
 800db40:	20000b58 	.word	0x20000b58
 800db44:	20000bc4 	.word	0x20000bc4
 800db48:	20000bc8 	.word	0x20000bc8
 800db4c:	20000bcc 	.word	0x20000bcc
 800db50:	20000b44 	.word	0x20000b44
 800db54:	20000b48 	.word	0x20000b48
 800db58:	20000b4c 	.word	0x20000b4c
 800db5c:	20000090 	.word	0x20000090
 800db60:	4b07      	ldr	r3, [pc, #28]	@ (800db80 <imu_ahrs_update+0x8b0>)
 800db62:	edc3 7a00 	vstr	s15, [r3]
    q3 = tempq3 * norm;
 800db66:	ed97 7a00 	vldr	s14, [r7]
 800db6a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800db6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db72:	4b04      	ldr	r3, [pc, #16]	@ (800db84 <imu_ahrs_update+0x8b4>)
 800db74:	edc3 7a00 	vstr	s15, [r3]
}
 800db78:	bf00      	nop
 800db7a:	3778      	adds	r7, #120	@ 0x78
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}
 800db80:	20000b48 	.word	0x20000b48
 800db84:	20000b4c 	.word	0x20000b4c

0800db88 <imu_attitude_update>:

// 更新imu的态度
void imu_attitude_update(void)
{
 800db88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db8c:	af00      	add	r7, sp, #0
    /* yaw    -pi----pi */
    imu.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3, -2 * q2 * q2 - 2 * q3 * q3 + 1) * 57.3;
 800db8e:	4b76      	ldr	r3, [pc, #472]	@ (800dd68 <imu_attitude_update+0x1e0>)
 800db90:	edd3 7a00 	vldr	s15, [r3]
 800db94:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800db98:	4b74      	ldr	r3, [pc, #464]	@ (800dd6c <imu_attitude_update+0x1e4>)
 800db9a:	edd3 7a00 	vldr	s15, [r3]
 800db9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dba2:	4b73      	ldr	r3, [pc, #460]	@ (800dd70 <imu_attitude_update+0x1e8>)
 800dba4:	edd3 7a00 	vldr	s15, [r3]
 800dba8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800dbac:	4b71      	ldr	r3, [pc, #452]	@ (800dd74 <imu_attitude_update+0x1ec>)
 800dbae:	edd3 7a00 	vldr	s15, [r3]
 800dbb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dbb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbba:	ee17 0a90 	vmov	r0, s15
 800dbbe:	f7f2 fceb 	bl	8000598 <__aeabi_f2d>
 800dbc2:	4682      	mov	sl, r0
 800dbc4:	468b      	mov	fp, r1
 800dbc6:	4b69      	ldr	r3, [pc, #420]	@ (800dd6c <imu_attitude_update+0x1e4>)
 800dbc8:	edd3 7a00 	vldr	s15, [r3]
 800dbcc:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800dbd0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dbd4:	4b65      	ldr	r3, [pc, #404]	@ (800dd6c <imu_attitude_update+0x1e4>)
 800dbd6:	edd3 7a00 	vldr	s15, [r3]
 800dbda:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dbde:	4b65      	ldr	r3, [pc, #404]	@ (800dd74 <imu_attitude_update+0x1ec>)
 800dbe0:	edd3 7a00 	vldr	s15, [r3]
 800dbe4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800dbe8:	4b62      	ldr	r3, [pc, #392]	@ (800dd74 <imu_attitude_update+0x1ec>)
 800dbea:	edd3 7a00 	vldr	s15, [r3]
 800dbee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dbf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dbf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dbfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dbfe:	ee17 0a90 	vmov	r0, s15
 800dc02:	f7f2 fcc9 	bl	8000598 <__aeabi_f2d>
 800dc06:	4602      	mov	r2, r0
 800dc08:	460b      	mov	r3, r1
 800dc0a:	ec43 2b11 	vmov	d1, r2, r3
 800dc0e:	ec4b ab10 	vmov	d0, sl, fp
 800dc12:	f004 ffbb 	bl	8012b8c <atan2>
 800dc16:	ec53 2b10 	vmov	r2, r3, d0
 800dc1a:	4690      	mov	r8, r2
 800dc1c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800dc20:	a34f      	add	r3, pc, #316	@ (adr r3, 800dd60 <imu_attitude_update+0x1d8>)
 800dc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc26:	4640      	mov	r0, r8
 800dc28:	4649      	mov	r1, r9
 800dc2a:	f7f2 fd0d 	bl	8000648 <__aeabi_dmul>
 800dc2e:	4602      	mov	r2, r0
 800dc30:	460b      	mov	r3, r1
 800dc32:	4610      	mov	r0, r2
 800dc34:	4619      	mov	r1, r3
 800dc36:	f7f2 ffff 	bl	8000c38 <__aeabi_d2f>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	4a4e      	ldr	r2, [pc, #312]	@ (800dd78 <imu_attitude_update+0x1f0>)
 800dc3e:	6313      	str	r3, [r2, #48]	@ 0x30
    /* pitch  -pi/2----pi/2 */
    imu.pit = -asin(-2 * q1 * q3 + 2 * q0 * q2) * 57.3;
 800dc40:	4b49      	ldr	r3, [pc, #292]	@ (800dd68 <imu_attitude_update+0x1e0>)
 800dc42:	edd3 7a00 	vldr	s15, [r3]
 800dc46:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800dc4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dc4e:	4b49      	ldr	r3, [pc, #292]	@ (800dd74 <imu_attitude_update+0x1ec>)
 800dc50:	edd3 7a00 	vldr	s15, [r3]
 800dc54:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc58:	4b45      	ldr	r3, [pc, #276]	@ (800dd70 <imu_attitude_update+0x1e8>)
 800dc5a:	edd3 7a00 	vldr	s15, [r3]
 800dc5e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800dc62:	4b42      	ldr	r3, [pc, #264]	@ (800dd6c <imu_attitude_update+0x1e4>)
 800dc64:	edd3 7a00 	vldr	s15, [r3]
 800dc68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc70:	ee17 0a90 	vmov	r0, s15
 800dc74:	f7f2 fc90 	bl	8000598 <__aeabi_f2d>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	ec43 2b10 	vmov	d0, r2, r3
 800dc80:	f004 ff50 	bl	8012b24 <asin>
 800dc84:	ec53 2b10 	vmov	r2, r3, d0
 800dc88:	4614      	mov	r4, r2
 800dc8a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800dc8e:	a334      	add	r3, pc, #208	@ (adr r3, 800dd60 <imu_attitude_update+0x1d8>)
 800dc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc94:	4620      	mov	r0, r4
 800dc96:	4629      	mov	r1, r5
 800dc98:	f7f2 fcd6 	bl	8000648 <__aeabi_dmul>
 800dc9c:	4602      	mov	r2, r0
 800dc9e:	460b      	mov	r3, r1
 800dca0:	4610      	mov	r0, r2
 800dca2:	4619      	mov	r1, r3
 800dca4:	f7f2 ffc8 	bl	8000c38 <__aeabi_d2f>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	4a33      	ldr	r2, [pc, #204]	@ (800dd78 <imu_attitude_update+0x1f0>)
 800dcac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    /* roll   -pi----pi  */
    imu.rol = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2 * q2 + 1) * 57.3;
 800dcae:	4b2f      	ldr	r3, [pc, #188]	@ (800dd6c <imu_attitude_update+0x1e4>)
 800dcb0:	edd3 7a00 	vldr	s15, [r3]
 800dcb4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800dcb8:	4b2e      	ldr	r3, [pc, #184]	@ (800dd74 <imu_attitude_update+0x1ec>)
 800dcba:	edd3 7a00 	vldr	s15, [r3]
 800dcbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dcc2:	4b2b      	ldr	r3, [pc, #172]	@ (800dd70 <imu_attitude_update+0x1e8>)
 800dcc4:	edd3 7a00 	vldr	s15, [r3]
 800dcc8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800dccc:	4b26      	ldr	r3, [pc, #152]	@ (800dd68 <imu_attitude_update+0x1e0>)
 800dcce:	edd3 7a00 	vldr	s15, [r3]
 800dcd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dcd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dcda:	ee17 0a90 	vmov	r0, s15
 800dcde:	f7f2 fc5b 	bl	8000598 <__aeabi_f2d>
 800dce2:	4604      	mov	r4, r0
 800dce4:	460d      	mov	r5, r1
 800dce6:	4b20      	ldr	r3, [pc, #128]	@ (800dd68 <imu_attitude_update+0x1e0>)
 800dce8:	edd3 7a00 	vldr	s15, [r3]
 800dcec:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800dcf0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dcf4:	4b1c      	ldr	r3, [pc, #112]	@ (800dd68 <imu_attitude_update+0x1e0>)
 800dcf6:	edd3 7a00 	vldr	s15, [r3]
 800dcfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dcfe:	4b1b      	ldr	r3, [pc, #108]	@ (800dd6c <imu_attitude_update+0x1e4>)
 800dd00:	edd3 7a00 	vldr	s15, [r3]
 800dd04:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800dd08:	4b18      	ldr	r3, [pc, #96]	@ (800dd6c <imu_attitude_update+0x1e4>)
 800dd0a:	edd3 7a00 	vldr	s15, [r3]
 800dd0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dd12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dd1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dd1e:	ee17 0a90 	vmov	r0, s15
 800dd22:	f7f2 fc39 	bl	8000598 <__aeabi_f2d>
 800dd26:	4602      	mov	r2, r0
 800dd28:	460b      	mov	r3, r1
 800dd2a:	ec43 2b11 	vmov	d1, r2, r3
 800dd2e:	ec45 4b10 	vmov	d0, r4, r5
 800dd32:	f004 ff2b 	bl	8012b8c <atan2>
 800dd36:	ec51 0b10 	vmov	r0, r1, d0
 800dd3a:	a309      	add	r3, pc, #36	@ (adr r3, 800dd60 <imu_attitude_update+0x1d8>)
 800dd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd40:	f7f2 fc82 	bl	8000648 <__aeabi_dmul>
 800dd44:	4602      	mov	r2, r0
 800dd46:	460b      	mov	r3, r1
 800dd48:	4610      	mov	r0, r2
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	f7f2 ff74 	bl	8000c38 <__aeabi_d2f>
 800dd50:	4603      	mov	r3, r0
 800dd52:	4a09      	ldr	r2, [pc, #36]	@ (800dd78 <imu_attitude_update+0x1f0>)
 800dd54:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800dd56:	bf00      	nop
 800dd58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dd5c:	f3af 8000 	nop.w
 800dd60:	66666666 	.word	0x66666666
 800dd64:	404ca666 	.word	0x404ca666
 800dd68:	20000b44 	.word	0x20000b44
 800dd6c:	20000b48 	.word	0x20000b48
 800dd70:	20000090 	.word	0x20000090
 800dd74:	20000b4c 	.word	0x20000b4c
 800dd78:	20000b8c 	.word	0x20000b8c

0800dd7c <_1_MT6701_GetRawData>:
#include "focLib.h"
#include "time_utils.h"
// static unsigned int rotationCount, rotationCount_Last;

uint16_t _1_MT6701_GetRawData(void)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800dd82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd86:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800dd88:	23c8      	movs	r3, #200	@ 0xc8
 800dd8a:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800dd8c:	e009      	b.n	800dda2 <_1_MT6701_GetRawData+0x26>
    {
        if (timeOut-- == 0)
 800dd8e:	88fb      	ldrh	r3, [r7, #6]
 800dd90:	1e5a      	subs	r2, r3, #1
 800dd92:	80fa      	strh	r2, [r7, #6]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d104      	bne.n	800dda2 <_1_MT6701_GetRawData+0x26>
        {
            printLog("SPI state error!\r\n");
 800dd98:	4819      	ldr	r0, [pc, #100]	@ (800de00 <_1_MT6701_GetRawData+0x84>)
 800dd9a:	f7fe fb85 	bl	800c4a8 <printLog>
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800dd9e:	2300      	movs	r3, #0
 800dda0:	e02a      	b.n	800ddf8 <_1_MT6701_GetRawData+0x7c>
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800dda2:	4818      	ldr	r0, [pc, #96]	@ (800de04 <_1_MT6701_GetRawData+0x88>)
 800dda4:	f7f9 fbb1 	bl	800750a <HAL_SPI_GetState>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	d1ef      	bne.n	800dd8e <_1_MT6701_GetRawData+0x12>
        }
    }

    _1_MT6701_CS_Enable;
 800ddae:	2200      	movs	r2, #0
 800ddb0:	2108      	movs	r1, #8
 800ddb2:	4815      	ldr	r0, [pc, #84]	@ (800de08 <_1_MT6701_GetRawData+0x8c>)
 800ddb4:	f7f8 f8f2 	bl	8005f9c <HAL_GPIO_WritePin>

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800ddb8:	1cba      	adds	r2, r7, #2
 800ddba:	4639      	mov	r1, r7
 800ddbc:	f04f 33ff 	mov.w	r3, #4294967295
 800ddc0:	9300      	str	r3, [sp, #0]
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	480f      	ldr	r0, [pc, #60]	@ (800de04 <_1_MT6701_GetRawData+0x88>)
 800ddc6:	f7f9 f97e 	bl	80070c6 <HAL_SPI_TransmitReceive>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800ddce:	797b      	ldrb	r3, [r7, #5]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d009      	beq.n	800dde8 <_1_MT6701_GetRawData+0x6c>
    {
        _1_MT6701_CS_Disable;
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	2108      	movs	r1, #8
 800ddd8:	480b      	ldr	r0, [pc, #44]	@ (800de08 <_1_MT6701_GetRawData+0x8c>)
 800ddda:	f7f8 f8df 	bl	8005f9c <HAL_GPIO_WritePin>
        printLog("MT6701 read data error!\r\n");
 800ddde:	480b      	ldr	r0, [pc, #44]	@ (800de0c <_1_MT6701_GetRawData+0x90>)
 800dde0:	f7fe fb62 	bl	800c4a8 <printLog>
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800dde4:	2300      	movs	r3, #0
 800dde6:	e007      	b.n	800ddf8 <_1_MT6701_GetRawData+0x7c>
    }

    _1_MT6701_CS_Disable;
 800dde8:	2201      	movs	r2, #1
 800ddea:	2108      	movs	r1, #8
 800ddec:	4806      	ldr	r0, [pc, #24]	@ (800de08 <_1_MT6701_GetRawData+0x8c>)
 800ddee:	f7f8 f8d5 	bl	8005f9c <HAL_GPIO_WritePin>

    return rawData >> 2; // 取高14位的角度数据
 800ddf2:	887b      	ldrh	r3, [r7, #2]
 800ddf4:	089b      	lsrs	r3, r3, #2
 800ddf6:	b29b      	uxth	r3, r3
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3708      	adds	r7, #8
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}
 800de00:	08013a5c 	.word	0x08013a5c
 800de04:	200003f0 	.word	0x200003f0
 800de08:	48000400 	.word	0x48000400
 800de0c:	08013a70 	.word	0x08013a70

0800de10 <_1_MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float _1_MT6701_GetRawAngle(void)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	af00      	add	r7, sp, #0
    uint16_t rawData = _1_MT6701_GetRawData();
 800de16:	f7ff ffb1 	bl	800dd7c <_1_MT6701_GetRawData>
 800de1a:	4603      	mov	r3, r0
 800de1c:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800de1e:	88fb      	ldrh	r3, [r7, #6]
 800de20:	ee07 3a90 	vmov	s15, r3
 800de24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800de28:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800de44 <_1_MT6701_GetRawAngle+0x34>
 800de2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800de30:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800de48 <_1_MT6701_GetRawAngle+0x38>
 800de34:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800de38:	eeb0 0a67 	vmov.f32	s0, s15
 800de3c:	3708      	adds	r7, #8
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	46800000 	.word	0x46800000
 800de48:	40c90fdb 	.word	0x40c90fdb

0800de4c <_2_MT6701_GetRawData>:

uint16_t _2_MT6701_GetRawData(void)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800de52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de56:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800de58:	23c8      	movs	r3, #200	@ 0xc8
 800de5a:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800de5c:	e009      	b.n	800de72 <_2_MT6701_GetRawData+0x26>
    {
        if (timeOut-- == 0)
 800de5e:	88fb      	ldrh	r3, [r7, #6]
 800de60:	1e5a      	subs	r2, r3, #1
 800de62:	80fa      	strh	r2, [r7, #6]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d104      	bne.n	800de72 <_2_MT6701_GetRawData+0x26>
        {
            printLog("SPI state error!\r\n");
 800de68:	4819      	ldr	r0, [pc, #100]	@ (800ded0 <_2_MT6701_GetRawData+0x84>)
 800de6a:	f7fe fb1d 	bl	800c4a8 <printLog>
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800de6e:	2300      	movs	r3, #0
 800de70:	e02a      	b.n	800dec8 <_2_MT6701_GetRawData+0x7c>
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800de72:	4818      	ldr	r0, [pc, #96]	@ (800ded4 <_2_MT6701_GetRawData+0x88>)
 800de74:	f7f9 fb49 	bl	800750a <HAL_SPI_GetState>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	d1ef      	bne.n	800de5e <_2_MT6701_GetRawData+0x12>
        }
    }

    _2_MT6701_CS_Enable;
 800de7e:	2200      	movs	r2, #0
 800de80:	2110      	movs	r1, #16
 800de82:	4815      	ldr	r0, [pc, #84]	@ (800ded8 <_2_MT6701_GetRawData+0x8c>)
 800de84:	f7f8 f88a 	bl	8005f9c <HAL_GPIO_WritePin>

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800de88:	1cba      	adds	r2, r7, #2
 800de8a:	4639      	mov	r1, r7
 800de8c:	f04f 33ff 	mov.w	r3, #4294967295
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	2301      	movs	r3, #1
 800de94:	480f      	ldr	r0, [pc, #60]	@ (800ded4 <_2_MT6701_GetRawData+0x88>)
 800de96:	f7f9 f916 	bl	80070c6 <HAL_SPI_TransmitReceive>
 800de9a:	4603      	mov	r3, r0
 800de9c:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800de9e:	797b      	ldrb	r3, [r7, #5]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d009      	beq.n	800deb8 <_2_MT6701_GetRawData+0x6c>
    {
        _2_MT6701_CS_Disable;
 800dea4:	2201      	movs	r2, #1
 800dea6:	2110      	movs	r1, #16
 800dea8:	480b      	ldr	r0, [pc, #44]	@ (800ded8 <_2_MT6701_GetRawData+0x8c>)
 800deaa:	f7f8 f877 	bl	8005f9c <HAL_GPIO_WritePin>
        printLog("MT6701 read data error!\r\n");
 800deae:	480b      	ldr	r0, [pc, #44]	@ (800dedc <_2_MT6701_GetRawData+0x90>)
 800deb0:	f7fe fafa 	bl	800c4a8 <printLog>
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800deb4:	2300      	movs	r3, #0
 800deb6:	e007      	b.n	800dec8 <_2_MT6701_GetRawData+0x7c>
    }

    _2_MT6701_CS_Disable;
 800deb8:	2201      	movs	r2, #1
 800deba:	2110      	movs	r1, #16
 800debc:	4806      	ldr	r0, [pc, #24]	@ (800ded8 <_2_MT6701_GetRawData+0x8c>)
 800debe:	f7f8 f86d 	bl	8005f9c <HAL_GPIO_WritePin>

    return rawData >> 2; // 取高14位的角度数据
 800dec2:	887b      	ldrh	r3, [r7, #2]
 800dec4:	089b      	lsrs	r3, r3, #2
 800dec6:	b29b      	uxth	r3, r3
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3708      	adds	r7, #8
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	08013a5c 	.word	0x08013a5c
 800ded4:	200003f0 	.word	0x200003f0
 800ded8:	48000800 	.word	0x48000800
 800dedc:	08013a70 	.word	0x08013a70

0800dee0 <_2_MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float _2_MT6701_GetRawAngle(void)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b082      	sub	sp, #8
 800dee4:	af00      	add	r7, sp, #0
    uint16_t rawData = _2_MT6701_GetRawData();
 800dee6:	f7ff ffb1 	bl	800de4c <_2_MT6701_GetRawData>
 800deea:	4603      	mov	r3, r0
 800deec:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800deee:	88fb      	ldrh	r3, [r7, #6]
 800def0:	ee07 3a90 	vmov	s15, r3
 800def4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800def8:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800df14 <_2_MT6701_GetRawAngle+0x34>
 800defc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800df00:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800df18 <_2_MT6701_GetRawAngle+0x38>
 800df04:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800df08:	eeb0 0a67 	vmov.f32	s0, s15
 800df0c:	3708      	adds	r7, #8
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	46800000 	.word	0x46800000
 800df18:	40c90fdb 	.word	0x40c90fdb

0800df1c <startPwm1>:
#include "pwm.h"

 void startPwm1()
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800df20:	2100      	movs	r1, #0
 800df22:	4806      	ldr	r0, [pc, #24]	@ (800df3c <startPwm1+0x20>)
 800df24:	f7f9 fd80 	bl	8007a28 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800df28:	2104      	movs	r1, #4
 800df2a:	4804      	ldr	r0, [pc, #16]	@ (800df3c <startPwm1+0x20>)
 800df2c:	f7f9 fd7c 	bl	8007a28 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800df30:	2108      	movs	r1, #8
 800df32:	4802      	ldr	r0, [pc, #8]	@ (800df3c <startPwm1+0x20>)
 800df34:	f7f9 fd78 	bl	8007a28 <HAL_TIM_PWM_Start>

}
 800df38:	bf00      	nop
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	200004a4 	.word	0x200004a4

0800df40 <stopPwm1>:
 void stopPwm1()
{
 800df40:	b580      	push	{r7, lr}
 800df42:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800df44:	2100      	movs	r1, #0
 800df46:	4806      	ldr	r0, [pc, #24]	@ (800df60 <stopPwm1+0x20>)
 800df48:	f7f9 fe6e 	bl	8007c28 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 800df4c:	2104      	movs	r1, #4
 800df4e:	4804      	ldr	r0, [pc, #16]	@ (800df60 <stopPwm1+0x20>)
 800df50:	f7f9 fe6a 	bl	8007c28 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 800df54:	2108      	movs	r1, #8
 800df56:	4802      	ldr	r0, [pc, #8]	@ (800df60 <stopPwm1+0x20>)
 800df58:	f7f9 fe66 	bl	8007c28 <HAL_TIM_PWM_Stop>

}
 800df5c:	bf00      	nop
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	200004a4 	.word	0x200004a4

0800df64 <updatePwm1>:
 void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800df64:	b480      	push	{r7}
 800df66:	b083      	sub	sp, #12
 800df68:	af00      	add	r7, sp, #0
 800df6a:	4603      	mov	r3, r0
 800df6c:	80fb      	strh	r3, [r7, #6]
 800df6e:	460b      	mov	r3, r1
 800df70:	80bb      	strh	r3, [r7, #4]
 800df72:	4613      	mov	r3, r2
 800df74:	807b      	strh	r3, [r7, #2]
    TIM8->CCR1 = a;
 800df76:	4a07      	ldr	r2, [pc, #28]	@ (800df94 <updatePwm1+0x30>)
 800df78:	88fb      	ldrh	r3, [r7, #6]
 800df7a:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM8->CCR2 = b;
 800df7c:	4a05      	ldr	r2, [pc, #20]	@ (800df94 <updatePwm1+0x30>)
 800df7e:	88bb      	ldrh	r3, [r7, #4]
 800df80:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM8->CCR3 = c;
 800df82:	4a04      	ldr	r2, [pc, #16]	@ (800df94 <updatePwm1+0x30>)
 800df84:	887b      	ldrh	r3, [r7, #2]
 800df86:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800df88:	bf00      	nop
 800df8a:	370c      	adds	r7, #12
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr
 800df94:	40013400 	.word	0x40013400

0800df98 <startPwm2>:

 void startPwm2()
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800df9c:	2100      	movs	r1, #0
 800df9e:	4806      	ldr	r0, [pc, #24]	@ (800dfb8 <startPwm2+0x20>)
 800dfa0:	f7f9 fd42 	bl	8007a28 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800dfa4:	2104      	movs	r1, #4
 800dfa6:	4804      	ldr	r0, [pc, #16]	@ (800dfb8 <startPwm2+0x20>)
 800dfa8:	f7f9 fd3e 	bl	8007a28 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800dfac:	2108      	movs	r1, #8
 800dfae:	4802      	ldr	r0, [pc, #8]	@ (800dfb8 <startPwm2+0x20>)
 800dfb0:	f7f9 fd3a 	bl	8007a28 <HAL_TIM_PWM_Start>
 
}
 800dfb4:	bf00      	nop
 800dfb6:	bd80      	pop	{r7, pc}
 800dfb8:	20000458 	.word	0x20000458

0800dfbc <stopPwm2>:
 void stopPwm2()
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800dfc0:	2100      	movs	r1, #0
 800dfc2:	4806      	ldr	r0, [pc, #24]	@ (800dfdc <stopPwm2+0x20>)
 800dfc4:	f7f9 fe30 	bl	8007c28 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800dfc8:	2104      	movs	r1, #4
 800dfca:	4804      	ldr	r0, [pc, #16]	@ (800dfdc <stopPwm2+0x20>)
 800dfcc:	f7f9 fe2c 	bl	8007c28 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800dfd0:	2108      	movs	r1, #8
 800dfd2:	4802      	ldr	r0, [pc, #8]	@ (800dfdc <stopPwm2+0x20>)
 800dfd4:	f7f9 fe28 	bl	8007c28 <HAL_TIM_PWM_Stop>
 
}
 800dfd8:	bf00      	nop
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	20000458 	.word	0x20000458

0800dfe0 <updatePwm2>:

 void updatePwm2(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	80fb      	strh	r3, [r7, #6]
 800dfea:	460b      	mov	r3, r1
 800dfec:	80bb      	strh	r3, [r7, #4]
 800dfee:	4613      	mov	r3, r2
 800dff0:	807b      	strh	r3, [r7, #2]
    TIM1->CCR1 = a;
 800dff2:	4a07      	ldr	r2, [pc, #28]	@ (800e010 <updatePwm2+0x30>)
 800dff4:	88fb      	ldrh	r3, [r7, #6]
 800dff6:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = b;
 800dff8:	4a05      	ldr	r2, [pc, #20]	@ (800e010 <updatePwm2+0x30>)
 800dffa:	88bb      	ldrh	r3, [r7, #4]
 800dffc:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = c;
 800dffe:	4a04      	ldr	r2, [pc, #16]	@ (800e010 <updatePwm2+0x30>)
 800e000:	887b      	ldrh	r3, [r7, #2]
 800e002:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800e004:	bf00      	nop
 800e006:	370c      	adds	r7, #12
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr
 800e010:	40012c00 	.word	0x40012c00

0800e014 <delay>:
#include "time_utils.h"

__IO uint32_t m, tms, u, t0;

void delay(uint32_t _ms)
{
 800e014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e018:	b082      	sub	sp, #8
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
    t0 = micros();
 800e01e:	f000 f83b 	bl	800e098 <micros>
 800e022:	4602      	mov	r2, r0
 800e024:	460b      	mov	r3, r1
 800e026:	4b11      	ldr	r3, [pc, #68]	@ (800e06c <delay+0x58>)
 800e028:	601a      	str	r2, [r3, #0]
    while (micros() - t0 < _ms * 1000)
 800e02a:	e000      	b.n	800e02e <delay+0x1a>
        __NOP();
 800e02c:	bf00      	nop
    while (micros() - t0 < _ms * 1000)
 800e02e:	f000 f833 	bl	800e098 <micros>
 800e032:	4602      	mov	r2, r0
 800e034:	460b      	mov	r3, r1
 800e036:	490d      	ldr	r1, [pc, #52]	@ (800e06c <delay+0x58>)
 800e038:	6809      	ldr	r1, [r1, #0]
 800e03a:	2000      	movs	r0, #0
 800e03c:	468a      	mov	sl, r1
 800e03e:	4683      	mov	fp, r0
 800e040:	ebb2 040a 	subs.w	r4, r2, sl
 800e044:	eb63 050b 	sbc.w	r5, r3, fp
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e04e:	fb02 f303 	mul.w	r3, r2, r3
 800e052:	2200      	movs	r2, #0
 800e054:	4698      	mov	r8, r3
 800e056:	4691      	mov	r9, r2
 800e058:	4544      	cmp	r4, r8
 800e05a:	eb75 0309 	sbcs.w	r3, r5, r9
 800e05e:	d3e5      	bcc.n	800e02c <delay+0x18>
}
 800e060:	bf00      	nop
 800e062:	bf00      	nop
 800e064:	3708      	adds	r7, #8
 800e066:	46bd      	mov	sp, r7
 800e068:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e06c:	20000bfc 	.word	0x20000bfc

0800e070 <LL_SYSTICK_IsActiveCounterFlag>:
    while (_us--)
        __NOP();
}

__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag()
{
 800e070:	b480      	push	{r7}
 800e072:	af00      	add	r7, sp, #0
    return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800e074:	4b07      	ldr	r3, [pc, #28]	@ (800e094 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e07c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e080:	bf0c      	ite	eq
 800e082:	2301      	moveq	r3, #1
 800e084:	2300      	movne	r3, #0
 800e086:	b2db      	uxtb	r3, r3
}
 800e088:	4618      	mov	r0, r3
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr
 800e092:	bf00      	nop
 800e094:	e000e010 	.word	0xe000e010

0800e098 <micros>:

uint64_t micros()
{
 800e098:	b5b0      	push	{r4, r5, r7, lr}
 800e09a:	af00      	add	r7, sp, #0
    /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
    LL_SYSTICK_IsActiveCounterFlag();
 800e09c:	f7ff ffe8 	bl	800e070 <LL_SYSTICK_IsActiveCounterFlag>
    m = HAL_GetTick();
 800e0a0:	f7f4 fb6c 	bl	800277c <HAL_GetTick>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	4a1c      	ldr	r2, [pc, #112]	@ (800e118 <micros+0x80>)
 800e0a8:	6013      	str	r3, [r2, #0]
    tms = SysTick->LOAD + 1;
 800e0aa:	4b1c      	ldr	r3, [pc, #112]	@ (800e11c <micros+0x84>)
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	3301      	adds	r3, #1
 800e0b0:	4a1b      	ldr	r2, [pc, #108]	@ (800e120 <micros+0x88>)
 800e0b2:	6013      	str	r3, [r2, #0]
    u = tms - SysTick->VAL;
 800e0b4:	4b1a      	ldr	r3, [pc, #104]	@ (800e120 <micros+0x88>)
 800e0b6:	681a      	ldr	r2, [r3, #0]
 800e0b8:	4b18      	ldr	r3, [pc, #96]	@ (800e11c <micros+0x84>)
 800e0ba:	689b      	ldr	r3, [r3, #8]
 800e0bc:	1ad3      	subs	r3, r2, r3
 800e0be:	4a19      	ldr	r2, [pc, #100]	@ (800e124 <micros+0x8c>)
 800e0c0:	6013      	str	r3, [r2, #0]
    if (LL_SYSTICK_IsActiveCounterFlag())
 800e0c2:	f7ff ffd5 	bl	800e070 <LL_SYSTICK_IsActiveCounterFlag>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d00b      	beq.n	800e0e4 <micros+0x4c>
    {
        m = HAL_GetTick();
 800e0cc:	f7f4 fb56 	bl	800277c <HAL_GetTick>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	4a11      	ldr	r2, [pc, #68]	@ (800e118 <micros+0x80>)
 800e0d4:	6013      	str	r3, [r2, #0]
        u = tms - SysTick->VAL;
 800e0d6:	4b12      	ldr	r3, [pc, #72]	@ (800e120 <micros+0x88>)
 800e0d8:	681a      	ldr	r2, [r3, #0]
 800e0da:	4b10      	ldr	r3, [pc, #64]	@ (800e11c <micros+0x84>)
 800e0dc:	689b      	ldr	r3, [r3, #8]
 800e0de:	1ad3      	subs	r3, r2, r3
 800e0e0:	4a10      	ldr	r2, [pc, #64]	@ (800e124 <micros+0x8c>)
 800e0e2:	6013      	str	r3, [r2, #0]
    }
    return (m * 1000 + (u * 1000) / tms);
 800e0e4:	4b0c      	ldr	r3, [pc, #48]	@ (800e118 <micros+0x80>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e0ec:	fb03 f202 	mul.w	r2, r3, r2
 800e0f0:	4b0c      	ldr	r3, [pc, #48]	@ (800e124 <micros+0x8c>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800e0f8:	fb03 f101 	mul.w	r1, r3, r1
 800e0fc:	4b08      	ldr	r3, [pc, #32]	@ (800e120 <micros+0x88>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	fbb1 f3f3 	udiv	r3, r1, r3
 800e104:	4413      	add	r3, r2
 800e106:	2200      	movs	r2, #0
 800e108:	461c      	mov	r4, r3
 800e10a:	4615      	mov	r5, r2
 800e10c:	4622      	mov	r2, r4
 800e10e:	462b      	mov	r3, r5
}
 800e110:	4610      	mov	r0, r2
 800e112:	4619      	mov	r1, r3
 800e114:	bdb0      	pop	{r4, r5, r7, pc}
 800e116:	bf00      	nop
 800e118:	20000bf0 	.word	0x20000bf0
 800e11c:	e000e010 	.word	0xe000e010
 800e120:	20000bf4 	.word	0x20000bf4
 800e124:	20000bf8 	.word	0x20000bf8

0800e128 <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
// static bool powerLost;
void userMain(void)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	af00      	add	r7, sp, #0

	if (get5MsFlag())
 800e12c:	f000 f924 	bl	800e378 <get5MsFlag>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d001      	beq.n	800e13a <userMain+0x12>
	{
		keyScan();
 800e136:	f7fe faa3 	bl	800c680 <keyScan>
	}
	if (getOneMsFlag())
 800e13a:	f000 f909 	bl	800e350 <getOneMsFlag>
 800e13e:	4603      	mov	r3, r0
 800e140:	2b00      	cmp	r3, #0
 800e142:	d017      	beq.n	800e174 <userMain+0x4c>
	{
		static bool imuInited;

		if (imuInited == false)
 800e144:	4b13      	ldr	r3, [pc, #76]	@ (800e194 <userMain+0x6c>)
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d10d      	bne.n	800e168 <userMain+0x40>
		{
			if (IMU_Init() == 0)
 800e14c:	f7fe ff26 	bl	800cf9c <IMU_Init>
 800e150:	4603      	mov	r3, r0
 800e152:	2b00      	cmp	r3, #0
 800e154:	d10e      	bne.n	800e174 <userMain+0x4c>
			{
				init_quaternion();
 800e156:	f7fe ff7f 	bl	800d058 <init_quaternion>
				imuInited = true;
 800e15a:	4b0e      	ldr	r3, [pc, #56]	@ (800e194 <userMain+0x6c>)
 800e15c:	2201      	movs	r2, #1
 800e15e:	701a      	strb	r2, [r3, #0]
				printLog("mpu init done\n");
 800e160:	480d      	ldr	r0, [pc, #52]	@ (800e198 <userMain+0x70>)
 800e162:	f7fe f9a1 	bl	800c4a8 <printLog>
 800e166:	e005      	b.n	800e174 <userMain+0x4c>
			}
		}
		else
		{
			// IMU_handle();
			mpu_get_data();
 800e168:	f7fe fd76 	bl	800cc58 <mpu_get_data>
			imu_ahrs_update();
 800e16c:	f7ff f8b0 	bl	800d2d0 <imu_ahrs_update>
			imu_attitude_update();
 800e170:	f7ff fd0a 	bl	800db88 <imu_attitude_update>
			
		}
	}

	if (get100MsFlag())
 800e174:	f000 f914 	bl	800e3a0 <get100MsFlag>
 800e178:	4603      	mov	r3, r0
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d001      	beq.n	800e182 <userMain+0x5a>
	{
		appRunning();
 800e17e:	f7fd ffc7 	bl	800c110 <appRunning>
	}
#if SHOW_WAVE == 0 && PRINT_RUNNING
	if (get500MsFlag())
 800e182:	f000 f921 	bl	800e3c8 <get500MsFlag>
 800e186:	4603      	mov	r3, r0
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d001      	beq.n	800e190 <userMain+0x68>
	{
		uartTx();
 800e18c:	f7fe f9b2 	bl	800c4f4 <uartTx>
	}
#endif
}
 800e190:	bf00      	nop
 800e192:	bd80      	pop	{r7, pc}
 800e194:	20000c00 	.word	0x20000c00
 800e198:	08013a8c 	.word	0x08013a8c

0800e19c <dealPer100us>:


static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag, _1s;
static void dealPerMs();
void dealPer100us()
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800e1a0:	4b08      	ldr	r3, [pc, #32]	@ (800e1c4 <dealPer100us+0x28>)
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	b2da      	uxtb	r2, r3
 800e1a8:	4b06      	ldr	r3, [pc, #24]	@ (800e1c4 <dealPer100us+0x28>)
 800e1aa:	701a      	strb	r2, [r3, #0]
 800e1ac:	4b05      	ldr	r3, [pc, #20]	@ (800e1c4 <dealPer100us+0x28>)
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	2b09      	cmp	r3, #9
 800e1b2:	d904      	bls.n	800e1be <dealPer100us+0x22>
    {
        cnt = 0;
 800e1b4:	4b03      	ldr	r3, [pc, #12]	@ (800e1c4 <dealPer100us+0x28>)
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800e1ba:	f000 f805 	bl	800e1c8 <dealPerMs>
    }

}
 800e1be:	bf00      	nop
 800e1c0:	bd80      	pop	{r7, pc}
 800e1c2:	bf00      	nop
 800e1c4:	20000c0f 	.word	0x20000c0f

0800e1c8 <dealPerMs>:

static void dealPerMs()
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt, _1000msCnt;
    if (++_5msCnt >= 5)
 800e1cc:	4b45      	ldr	r3, [pc, #276]	@ (800e2e4 <dealPerMs+0x11c>)
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	b2da      	uxtb	r2, r3
 800e1d4:	4b43      	ldr	r3, [pc, #268]	@ (800e2e4 <dealPerMs+0x11c>)
 800e1d6:	701a      	strb	r2, [r3, #0]
 800e1d8:	4b42      	ldr	r3, [pc, #264]	@ (800e2e4 <dealPerMs+0x11c>)
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	2b04      	cmp	r3, #4
 800e1de:	d905      	bls.n	800e1ec <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800e1e0:	4b40      	ldr	r3, [pc, #256]	@ (800e2e4 <dealPerMs+0x11c>)
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800e1e6:	4b40      	ldr	r3, [pc, #256]	@ (800e2e8 <dealPerMs+0x120>)
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800e1ec:	4b3f      	ldr	r3, [pc, #252]	@ (800e2ec <dealPerMs+0x124>)
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	3301      	adds	r3, #1
 800e1f2:	b2da      	uxtb	r2, r3
 800e1f4:	4b3d      	ldr	r3, [pc, #244]	@ (800e2ec <dealPerMs+0x124>)
 800e1f6:	701a      	strb	r2, [r3, #0]
 800e1f8:	4b3c      	ldr	r3, [pc, #240]	@ (800e2ec <dealPerMs+0x124>)
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	2b09      	cmp	r3, #9
 800e1fe:	d905      	bls.n	800e20c <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800e200:	4b3a      	ldr	r3, [pc, #232]	@ (800e2ec <dealPerMs+0x124>)
 800e202:	2200      	movs	r2, #0
 800e204:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800e206:	4b3a      	ldr	r3, [pc, #232]	@ (800e2f0 <dealPerMs+0x128>)
 800e208:	2201      	movs	r2, #1
 800e20a:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800e20c:	4b39      	ldr	r3, [pc, #228]	@ (800e2f4 <dealPerMs+0x12c>)
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	3301      	adds	r3, #1
 800e212:	b2da      	uxtb	r2, r3
 800e214:	4b37      	ldr	r3, [pc, #220]	@ (800e2f4 <dealPerMs+0x12c>)
 800e216:	701a      	strb	r2, [r3, #0]
 800e218:	4b36      	ldr	r3, [pc, #216]	@ (800e2f4 <dealPerMs+0x12c>)
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	2b13      	cmp	r3, #19
 800e21e:	d905      	bls.n	800e22c <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800e220:	4b34      	ldr	r3, [pc, #208]	@ (800e2f4 <dealPerMs+0x12c>)
 800e222:	2200      	movs	r2, #0
 800e224:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800e226:	4b34      	ldr	r3, [pc, #208]	@ (800e2f8 <dealPerMs+0x130>)
 800e228:	2201      	movs	r2, #1
 800e22a:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800e22c:	4b33      	ldr	r3, [pc, #204]	@ (800e2fc <dealPerMs+0x134>)
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	3301      	adds	r3, #1
 800e232:	b2da      	uxtb	r2, r3
 800e234:	4b31      	ldr	r3, [pc, #196]	@ (800e2fc <dealPerMs+0x134>)
 800e236:	701a      	strb	r2, [r3, #0]
 800e238:	4b30      	ldr	r3, [pc, #192]	@ (800e2fc <dealPerMs+0x134>)
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	2b1d      	cmp	r3, #29
 800e23e:	d905      	bls.n	800e24c <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800e240:	4b2e      	ldr	r3, [pc, #184]	@ (800e2fc <dealPerMs+0x134>)
 800e242:	2200      	movs	r2, #0
 800e244:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800e246:	4b2e      	ldr	r3, [pc, #184]	@ (800e300 <dealPerMs+0x138>)
 800e248:	2201      	movs	r2, #1
 800e24a:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800e24c:	4b2d      	ldr	r3, [pc, #180]	@ (800e304 <dealPerMs+0x13c>)
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	3301      	adds	r3, #1
 800e252:	b2da      	uxtb	r2, r3
 800e254:	4b2b      	ldr	r3, [pc, #172]	@ (800e304 <dealPerMs+0x13c>)
 800e256:	701a      	strb	r2, [r3, #0]
 800e258:	4b2a      	ldr	r3, [pc, #168]	@ (800e304 <dealPerMs+0x13c>)
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	2b63      	cmp	r3, #99	@ 0x63
 800e25e:	d905      	bls.n	800e26c <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800e260:	4b28      	ldr	r3, [pc, #160]	@ (800e304 <dealPerMs+0x13c>)
 800e262:	2200      	movs	r2, #0
 800e264:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800e266:	4b28      	ldr	r3, [pc, #160]	@ (800e308 <dealPerMs+0x140>)
 800e268:	2201      	movs	r2, #1
 800e26a:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800e26c:	4b27      	ldr	r3, [pc, #156]	@ (800e30c <dealPerMs+0x144>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	3301      	adds	r3, #1
 800e272:	4a26      	ldr	r2, [pc, #152]	@ (800e30c <dealPerMs+0x144>)
 800e274:	6013      	str	r3, [r2, #0]
 800e276:	4b25      	ldr	r3, [pc, #148]	@ (800e30c <dealPerMs+0x144>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800e27e:	d305      	bcc.n	800e28c <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800e280:	4b22      	ldr	r3, [pc, #136]	@ (800e30c <dealPerMs+0x144>)
 800e282:	2200      	movs	r2, #0
 800e284:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800e286:	4b22      	ldr	r3, [pc, #136]	@ (800e310 <dealPerMs+0x148>)
 800e288:	2201      	movs	r2, #1
 800e28a:	701a      	strb	r2, [r3, #0]
    }
    if (++_1000msCnt >= 1000)
 800e28c:	4b21      	ldr	r3, [pc, #132]	@ (800e314 <dealPerMs+0x14c>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	3301      	adds	r3, #1
 800e292:	4a20      	ldr	r2, [pc, #128]	@ (800e314 <dealPerMs+0x14c>)
 800e294:	6013      	str	r3, [r2, #0]
 800e296:	4b1f      	ldr	r3, [pc, #124]	@ (800e314 <dealPerMs+0x14c>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e29e:	d305      	bcc.n	800e2ac <dealPerMs+0xe4>
    {
        _1000msCnt = 0;
 800e2a0:	4b1c      	ldr	r3, [pc, #112]	@ (800e314 <dealPerMs+0x14c>)
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800e2a6:	4b1c      	ldr	r3, [pc, #112]	@ (800e318 <dealPerMs+0x150>)
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	701a      	strb	r2, [r3, #0]

        cnt = 0;
    }

#else
    frequence = 50;
 800e2ac:	4b1b      	ldr	r3, [pc, #108]	@ (800e31c <dealPerMs+0x154>)
 800e2ae:	2232      	movs	r2, #50	@ 0x32
 800e2b0:	701a      	strb	r2, [r3, #0]
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
 800e2b2:	4b1b      	ldr	r3, [pc, #108]	@ (800e320 <dealPerMs+0x158>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	4a19      	ldr	r2, [pc, #100]	@ (800e320 <dealPerMs+0x158>)
 800e2ba:	6013      	str	r3, [r2, #0]
 800e2bc:	4b18      	ldr	r3, [pc, #96]	@ (800e320 <dealPerMs+0x158>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e2c4:	d305      	bcc.n	800e2d2 <dealPerMs+0x10a>
    {
        _1msCnt = 0;
 800e2c6:	4b16      	ldr	r3, [pc, #88]	@ (800e320 <dealPerMs+0x158>)
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800e2cc:	4b12      	ldr	r3, [pc, #72]	@ (800e318 <dealPerMs+0x150>)
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	701a      	strb	r2, [r3, #0]
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
 800e2d2:	4b14      	ldr	r3, [pc, #80]	@ (800e324 <dealPerMs+0x15c>)
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	701a      	strb	r2, [r3, #0]

}
 800e2d8:	bf00      	nop
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr
 800e2e2:	bf00      	nop
 800e2e4:	20000c10 	.word	0x20000c10
 800e2e8:	20000c09 	.word	0x20000c09
 800e2ec:	20000c11 	.word	0x20000c11
 800e2f0:	20000c0a 	.word	0x20000c0a
 800e2f4:	20000c12 	.word	0x20000c12
 800e2f8:	20000c0b 	.word	0x20000c0b
 800e2fc:	20000c13 	.word	0x20000c13
 800e300:	20000c0c 	.word	0x20000c0c
 800e304:	20000c14 	.word	0x20000c14
 800e308:	20000c0d 	.word	0x20000c0d
 800e30c:	20000c18 	.word	0x20000c18
 800e310:	20000c0e 	.word	0x20000c0e
 800e314:	20000c1c 	.word	0x20000c1c
 800e318:	20000c01 	.word	0x20000c01
 800e31c:	20000c08 	.word	0x20000c08
 800e320:	20000c04 	.word	0x20000c04
 800e324:	20000c02 	.word	0x20000c02

0800e328 <getOneSecFlag>:
}



bool getOneSecFlag()
{
 800e328:	b480      	push	{r7}
 800e32a:	af00      	add	r7, sp, #0
    if (_1s)
 800e32c:	4b07      	ldr	r3, [pc, #28]	@ (800e34c <getOneSecFlag+0x24>)
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d004      	beq.n	800e33e <getOneSecFlag+0x16>
    {
        _1s = 0;
 800e334:	4b05      	ldr	r3, [pc, #20]	@ (800e34c <getOneSecFlag+0x24>)
 800e336:	2200      	movs	r2, #0
 800e338:	701a      	strb	r2, [r3, #0]
        return 1;
 800e33a:	2301      	movs	r3, #1
 800e33c:	e000      	b.n	800e340 <getOneSecFlag+0x18>
    }
    else
        return 0;
 800e33e:	2300      	movs	r3, #0
}
 800e340:	4618      	mov	r0, r3
 800e342:	46bd      	mov	sp, r7
 800e344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e348:	4770      	bx	lr
 800e34a:	bf00      	nop
 800e34c:	20000c01 	.word	0x20000c01

0800e350 <getOneMsFlag>:

bool getOneMsFlag()
{
 800e350:	b480      	push	{r7}
 800e352:	af00      	add	r7, sp, #0
    if (_1ms)
 800e354:	4b07      	ldr	r3, [pc, #28]	@ (800e374 <getOneMsFlag+0x24>)
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d004      	beq.n	800e366 <getOneMsFlag+0x16>
    {
        _1ms = 0;
 800e35c:	4b05      	ldr	r3, [pc, #20]	@ (800e374 <getOneMsFlag+0x24>)
 800e35e:	2200      	movs	r2, #0
 800e360:	701a      	strb	r2, [r3, #0]
        return 1;
 800e362:	2301      	movs	r3, #1
 800e364:	e000      	b.n	800e368 <getOneMsFlag+0x18>
    }
    else
        return 0;
 800e366:	2300      	movs	r3, #0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr
 800e372:	bf00      	nop
 800e374:	20000c02 	.word	0x20000c02

0800e378 <get5MsFlag>:
bool getCrossZero()
{
    return crossZero;
}
bool get5MsFlag()
{
 800e378:	b480      	push	{r7}
 800e37a:	af00      	add	r7, sp, #0
    if (_5msFlag)
 800e37c:	4b07      	ldr	r3, [pc, #28]	@ (800e39c <get5MsFlag+0x24>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d004      	beq.n	800e38e <get5MsFlag+0x16>
    {
        _5msFlag = 0;
 800e384:	4b05      	ldr	r3, [pc, #20]	@ (800e39c <get5MsFlag+0x24>)
 800e386:	2200      	movs	r2, #0
 800e388:	701a      	strb	r2, [r3, #0]
        return 1;
 800e38a:	2301      	movs	r3, #1
 800e38c:	e000      	b.n	800e390 <get5MsFlag+0x18>
    }
    else
    {
        return 0;
 800e38e:	2300      	movs	r3, #0
    }
}
 800e390:	4618      	mov	r0, r3
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr
 800e39a:	bf00      	nop
 800e39c:	20000c09 	.word	0x20000c09

0800e3a0 <get100MsFlag>:
        return 0;
    }
}

bool get100MsFlag()
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800e3a4:	4b07      	ldr	r3, [pc, #28]	@ (800e3c4 <get100MsFlag+0x24>)
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d004      	beq.n	800e3b6 <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800e3ac:	4b05      	ldr	r3, [pc, #20]	@ (800e3c4 <get100MsFlag+0x24>)
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	701a      	strb	r2, [r3, #0]
        return 1;
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e000      	b.n	800e3b8 <get100MsFlag+0x18>
    }
    else
    {
        return 0;
 800e3b6:	2300      	movs	r3, #0
    }
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr
 800e3c2:	bf00      	nop
 800e3c4:	20000c0d 	.word	0x20000c0d

0800e3c8 <get500MsFlag>:

bool get500MsFlag()
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	af00      	add	r7, sp, #0
    if (_500msFlag)
 800e3cc:	4b07      	ldr	r3, [pc, #28]	@ (800e3ec <get500MsFlag+0x24>)
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d004      	beq.n	800e3de <get500MsFlag+0x16>
    {
        _500msFlag = 0;
 800e3d4:	4b05      	ldr	r3, [pc, #20]	@ (800e3ec <get500MsFlag+0x24>)
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	701a      	strb	r2, [r3, #0]
        return 1;
 800e3da:	2301      	movs	r3, #1
 800e3dc:	e000      	b.n	800e3e0 <get500MsFlag+0x18>
    }
    else
    {
        return 0;
 800e3de:	2300      	movs	r3, #0
    }
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e8:	4770      	bx	lr
 800e3ea:	bf00      	nop
 800e3ec:	20000c0e 	.word	0x20000c0e

0800e3f0 <atof>:
 800e3f0:	2100      	movs	r1, #0
 800e3f2:	f000 be0b 	b.w	800f00c <strtod>

0800e3f6 <sulp>:
 800e3f6:	b570      	push	{r4, r5, r6, lr}
 800e3f8:	4604      	mov	r4, r0
 800e3fa:	460d      	mov	r5, r1
 800e3fc:	ec45 4b10 	vmov	d0, r4, r5
 800e400:	4616      	mov	r6, r2
 800e402:	f003 fc7d 	bl	8011d00 <__ulp>
 800e406:	ec51 0b10 	vmov	r0, r1, d0
 800e40a:	b17e      	cbz	r6, 800e42c <sulp+0x36>
 800e40c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e410:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e414:	2b00      	cmp	r3, #0
 800e416:	dd09      	ble.n	800e42c <sulp+0x36>
 800e418:	051b      	lsls	r3, r3, #20
 800e41a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e41e:	2400      	movs	r4, #0
 800e420:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e424:	4622      	mov	r2, r4
 800e426:	462b      	mov	r3, r5
 800e428:	f7f2 f90e 	bl	8000648 <__aeabi_dmul>
 800e42c:	ec41 0b10 	vmov	d0, r0, r1
 800e430:	bd70      	pop	{r4, r5, r6, pc}
 800e432:	0000      	movs	r0, r0
 800e434:	0000      	movs	r0, r0
	...

0800e438 <_strtod_l>:
 800e438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43c:	b09f      	sub	sp, #124	@ 0x7c
 800e43e:	460c      	mov	r4, r1
 800e440:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e442:	2200      	movs	r2, #0
 800e444:	921a      	str	r2, [sp, #104]	@ 0x68
 800e446:	9005      	str	r0, [sp, #20]
 800e448:	f04f 0a00 	mov.w	sl, #0
 800e44c:	f04f 0b00 	mov.w	fp, #0
 800e450:	460a      	mov	r2, r1
 800e452:	9219      	str	r2, [sp, #100]	@ 0x64
 800e454:	7811      	ldrb	r1, [r2, #0]
 800e456:	292b      	cmp	r1, #43	@ 0x2b
 800e458:	d04a      	beq.n	800e4f0 <_strtod_l+0xb8>
 800e45a:	d838      	bhi.n	800e4ce <_strtod_l+0x96>
 800e45c:	290d      	cmp	r1, #13
 800e45e:	d832      	bhi.n	800e4c6 <_strtod_l+0x8e>
 800e460:	2908      	cmp	r1, #8
 800e462:	d832      	bhi.n	800e4ca <_strtod_l+0x92>
 800e464:	2900      	cmp	r1, #0
 800e466:	d03b      	beq.n	800e4e0 <_strtod_l+0xa8>
 800e468:	2200      	movs	r2, #0
 800e46a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e46c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e46e:	782a      	ldrb	r2, [r5, #0]
 800e470:	2a30      	cmp	r2, #48	@ 0x30
 800e472:	f040 80b3 	bne.w	800e5dc <_strtod_l+0x1a4>
 800e476:	786a      	ldrb	r2, [r5, #1]
 800e478:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e47c:	2a58      	cmp	r2, #88	@ 0x58
 800e47e:	d16e      	bne.n	800e55e <_strtod_l+0x126>
 800e480:	9302      	str	r3, [sp, #8]
 800e482:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e484:	9301      	str	r3, [sp, #4]
 800e486:	ab1a      	add	r3, sp, #104	@ 0x68
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	4a8e      	ldr	r2, [pc, #568]	@ (800e6c4 <_strtod_l+0x28c>)
 800e48c:	9805      	ldr	r0, [sp, #20]
 800e48e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e490:	a919      	add	r1, sp, #100	@ 0x64
 800e492:	f002 fd27 	bl	8010ee4 <__gethex>
 800e496:	f010 060f 	ands.w	r6, r0, #15
 800e49a:	4604      	mov	r4, r0
 800e49c:	d005      	beq.n	800e4aa <_strtod_l+0x72>
 800e49e:	2e06      	cmp	r6, #6
 800e4a0:	d128      	bne.n	800e4f4 <_strtod_l+0xbc>
 800e4a2:	3501      	adds	r5, #1
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	9519      	str	r5, [sp, #100]	@ 0x64
 800e4a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	f040 858e 	bne.w	800efce <_strtod_l+0xb96>
 800e4b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4b4:	b1cb      	cbz	r3, 800e4ea <_strtod_l+0xb2>
 800e4b6:	4652      	mov	r2, sl
 800e4b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e4bc:	ec43 2b10 	vmov	d0, r2, r3
 800e4c0:	b01f      	add	sp, #124	@ 0x7c
 800e4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c6:	2920      	cmp	r1, #32
 800e4c8:	d1ce      	bne.n	800e468 <_strtod_l+0x30>
 800e4ca:	3201      	adds	r2, #1
 800e4cc:	e7c1      	b.n	800e452 <_strtod_l+0x1a>
 800e4ce:	292d      	cmp	r1, #45	@ 0x2d
 800e4d0:	d1ca      	bne.n	800e468 <_strtod_l+0x30>
 800e4d2:	2101      	movs	r1, #1
 800e4d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e4d6:	1c51      	adds	r1, r2, #1
 800e4d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800e4da:	7852      	ldrb	r2, [r2, #1]
 800e4dc:	2a00      	cmp	r2, #0
 800e4de:	d1c5      	bne.n	800e46c <_strtod_l+0x34>
 800e4e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e4e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	f040 8570 	bne.w	800efca <_strtod_l+0xb92>
 800e4ea:	4652      	mov	r2, sl
 800e4ec:	465b      	mov	r3, fp
 800e4ee:	e7e5      	b.n	800e4bc <_strtod_l+0x84>
 800e4f0:	2100      	movs	r1, #0
 800e4f2:	e7ef      	b.n	800e4d4 <_strtod_l+0x9c>
 800e4f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e4f6:	b13a      	cbz	r2, 800e508 <_strtod_l+0xd0>
 800e4f8:	2135      	movs	r1, #53	@ 0x35
 800e4fa:	a81c      	add	r0, sp, #112	@ 0x70
 800e4fc:	f003 fcfa 	bl	8011ef4 <__copybits>
 800e500:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e502:	9805      	ldr	r0, [sp, #20]
 800e504:	f003 f8c8 	bl	8011698 <_Bfree>
 800e508:	3e01      	subs	r6, #1
 800e50a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e50c:	2e04      	cmp	r6, #4
 800e50e:	d806      	bhi.n	800e51e <_strtod_l+0xe6>
 800e510:	e8df f006 	tbb	[pc, r6]
 800e514:	201d0314 	.word	0x201d0314
 800e518:	14          	.byte	0x14
 800e519:	00          	.byte	0x00
 800e51a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e51e:	05e1      	lsls	r1, r4, #23
 800e520:	bf48      	it	mi
 800e522:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e526:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e52a:	0d1b      	lsrs	r3, r3, #20
 800e52c:	051b      	lsls	r3, r3, #20
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d1bb      	bne.n	800e4aa <_strtod_l+0x72>
 800e532:	f001 fd8d 	bl	8010050 <__errno>
 800e536:	2322      	movs	r3, #34	@ 0x22
 800e538:	6003      	str	r3, [r0, #0]
 800e53a:	e7b6      	b.n	800e4aa <_strtod_l+0x72>
 800e53c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e540:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e544:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e548:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e54c:	e7e7      	b.n	800e51e <_strtod_l+0xe6>
 800e54e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e6cc <_strtod_l+0x294>
 800e552:	e7e4      	b.n	800e51e <_strtod_l+0xe6>
 800e554:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e558:	f04f 3aff 	mov.w	sl, #4294967295
 800e55c:	e7df      	b.n	800e51e <_strtod_l+0xe6>
 800e55e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e560:	1c5a      	adds	r2, r3, #1
 800e562:	9219      	str	r2, [sp, #100]	@ 0x64
 800e564:	785b      	ldrb	r3, [r3, #1]
 800e566:	2b30      	cmp	r3, #48	@ 0x30
 800e568:	d0f9      	beq.n	800e55e <_strtod_l+0x126>
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d09d      	beq.n	800e4aa <_strtod_l+0x72>
 800e56e:	2301      	movs	r3, #1
 800e570:	9309      	str	r3, [sp, #36]	@ 0x24
 800e572:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e574:	930c      	str	r3, [sp, #48]	@ 0x30
 800e576:	2300      	movs	r3, #0
 800e578:	9308      	str	r3, [sp, #32]
 800e57a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e57c:	461f      	mov	r7, r3
 800e57e:	220a      	movs	r2, #10
 800e580:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e582:	7805      	ldrb	r5, [r0, #0]
 800e584:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e588:	b2d9      	uxtb	r1, r3
 800e58a:	2909      	cmp	r1, #9
 800e58c:	d928      	bls.n	800e5e0 <_strtod_l+0x1a8>
 800e58e:	494e      	ldr	r1, [pc, #312]	@ (800e6c8 <_strtod_l+0x290>)
 800e590:	2201      	movs	r2, #1
 800e592:	f001 fd01 	bl	800ff98 <strncmp>
 800e596:	2800      	cmp	r0, #0
 800e598:	d032      	beq.n	800e600 <_strtod_l+0x1c8>
 800e59a:	2000      	movs	r0, #0
 800e59c:	462a      	mov	r2, r5
 800e59e:	4681      	mov	r9, r0
 800e5a0:	463d      	mov	r5, r7
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	2a65      	cmp	r2, #101	@ 0x65
 800e5a6:	d001      	beq.n	800e5ac <_strtod_l+0x174>
 800e5a8:	2a45      	cmp	r2, #69	@ 0x45
 800e5aa:	d114      	bne.n	800e5d6 <_strtod_l+0x19e>
 800e5ac:	b91d      	cbnz	r5, 800e5b6 <_strtod_l+0x17e>
 800e5ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5b0:	4302      	orrs	r2, r0
 800e5b2:	d095      	beq.n	800e4e0 <_strtod_l+0xa8>
 800e5b4:	2500      	movs	r5, #0
 800e5b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e5b8:	1c62      	adds	r2, r4, #1
 800e5ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800e5bc:	7862      	ldrb	r2, [r4, #1]
 800e5be:	2a2b      	cmp	r2, #43	@ 0x2b
 800e5c0:	d077      	beq.n	800e6b2 <_strtod_l+0x27a>
 800e5c2:	2a2d      	cmp	r2, #45	@ 0x2d
 800e5c4:	d07b      	beq.n	800e6be <_strtod_l+0x286>
 800e5c6:	f04f 0c00 	mov.w	ip, #0
 800e5ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e5ce:	2909      	cmp	r1, #9
 800e5d0:	f240 8082 	bls.w	800e6d8 <_strtod_l+0x2a0>
 800e5d4:	9419      	str	r4, [sp, #100]	@ 0x64
 800e5d6:	f04f 0800 	mov.w	r8, #0
 800e5da:	e0a2      	b.n	800e722 <_strtod_l+0x2ea>
 800e5dc:	2300      	movs	r3, #0
 800e5de:	e7c7      	b.n	800e570 <_strtod_l+0x138>
 800e5e0:	2f08      	cmp	r7, #8
 800e5e2:	bfd5      	itete	le
 800e5e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e5e6:	9908      	ldrgt	r1, [sp, #32]
 800e5e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800e5ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e5f0:	f100 0001 	add.w	r0, r0, #1
 800e5f4:	bfd4      	ite	le
 800e5f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e5f8:	9308      	strgt	r3, [sp, #32]
 800e5fa:	3701      	adds	r7, #1
 800e5fc:	9019      	str	r0, [sp, #100]	@ 0x64
 800e5fe:	e7bf      	b.n	800e580 <_strtod_l+0x148>
 800e600:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e602:	1c5a      	adds	r2, r3, #1
 800e604:	9219      	str	r2, [sp, #100]	@ 0x64
 800e606:	785a      	ldrb	r2, [r3, #1]
 800e608:	b37f      	cbz	r7, 800e66a <_strtod_l+0x232>
 800e60a:	4681      	mov	r9, r0
 800e60c:	463d      	mov	r5, r7
 800e60e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e612:	2b09      	cmp	r3, #9
 800e614:	d912      	bls.n	800e63c <_strtod_l+0x204>
 800e616:	2301      	movs	r3, #1
 800e618:	e7c4      	b.n	800e5a4 <_strtod_l+0x16c>
 800e61a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e61c:	1c5a      	adds	r2, r3, #1
 800e61e:	9219      	str	r2, [sp, #100]	@ 0x64
 800e620:	785a      	ldrb	r2, [r3, #1]
 800e622:	3001      	adds	r0, #1
 800e624:	2a30      	cmp	r2, #48	@ 0x30
 800e626:	d0f8      	beq.n	800e61a <_strtod_l+0x1e2>
 800e628:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e62c:	2b08      	cmp	r3, #8
 800e62e:	f200 84d3 	bhi.w	800efd8 <_strtod_l+0xba0>
 800e632:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e634:	930c      	str	r3, [sp, #48]	@ 0x30
 800e636:	4681      	mov	r9, r0
 800e638:	2000      	movs	r0, #0
 800e63a:	4605      	mov	r5, r0
 800e63c:	3a30      	subs	r2, #48	@ 0x30
 800e63e:	f100 0301 	add.w	r3, r0, #1
 800e642:	d02a      	beq.n	800e69a <_strtod_l+0x262>
 800e644:	4499      	add	r9, r3
 800e646:	eb00 0c05 	add.w	ip, r0, r5
 800e64a:	462b      	mov	r3, r5
 800e64c:	210a      	movs	r1, #10
 800e64e:	4563      	cmp	r3, ip
 800e650:	d10d      	bne.n	800e66e <_strtod_l+0x236>
 800e652:	1c69      	adds	r1, r5, #1
 800e654:	4401      	add	r1, r0
 800e656:	4428      	add	r0, r5
 800e658:	2808      	cmp	r0, #8
 800e65a:	dc16      	bgt.n	800e68a <_strtod_l+0x252>
 800e65c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e65e:	230a      	movs	r3, #10
 800e660:	fb03 2300 	mla	r3, r3, r0, r2
 800e664:	930a      	str	r3, [sp, #40]	@ 0x28
 800e666:	2300      	movs	r3, #0
 800e668:	e018      	b.n	800e69c <_strtod_l+0x264>
 800e66a:	4638      	mov	r0, r7
 800e66c:	e7da      	b.n	800e624 <_strtod_l+0x1ec>
 800e66e:	2b08      	cmp	r3, #8
 800e670:	f103 0301 	add.w	r3, r3, #1
 800e674:	dc03      	bgt.n	800e67e <_strtod_l+0x246>
 800e676:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e678:	434e      	muls	r6, r1
 800e67a:	960a      	str	r6, [sp, #40]	@ 0x28
 800e67c:	e7e7      	b.n	800e64e <_strtod_l+0x216>
 800e67e:	2b10      	cmp	r3, #16
 800e680:	bfde      	ittt	le
 800e682:	9e08      	ldrle	r6, [sp, #32]
 800e684:	434e      	mulle	r6, r1
 800e686:	9608      	strle	r6, [sp, #32]
 800e688:	e7e1      	b.n	800e64e <_strtod_l+0x216>
 800e68a:	280f      	cmp	r0, #15
 800e68c:	dceb      	bgt.n	800e666 <_strtod_l+0x22e>
 800e68e:	9808      	ldr	r0, [sp, #32]
 800e690:	230a      	movs	r3, #10
 800e692:	fb03 2300 	mla	r3, r3, r0, r2
 800e696:	9308      	str	r3, [sp, #32]
 800e698:	e7e5      	b.n	800e666 <_strtod_l+0x22e>
 800e69a:	4629      	mov	r1, r5
 800e69c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e69e:	1c50      	adds	r0, r2, #1
 800e6a0:	9019      	str	r0, [sp, #100]	@ 0x64
 800e6a2:	7852      	ldrb	r2, [r2, #1]
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	460d      	mov	r5, r1
 800e6a8:	e7b1      	b.n	800e60e <_strtod_l+0x1d6>
 800e6aa:	f04f 0900 	mov.w	r9, #0
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e77d      	b.n	800e5ae <_strtod_l+0x176>
 800e6b2:	f04f 0c00 	mov.w	ip, #0
 800e6b6:	1ca2      	adds	r2, r4, #2
 800e6b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800e6ba:	78a2      	ldrb	r2, [r4, #2]
 800e6bc:	e785      	b.n	800e5ca <_strtod_l+0x192>
 800e6be:	f04f 0c01 	mov.w	ip, #1
 800e6c2:	e7f8      	b.n	800e6b6 <_strtod_l+0x27e>
 800e6c4:	08013af4 	.word	0x08013af4
 800e6c8:	08013adc 	.word	0x08013adc
 800e6cc:	7ff00000 	.word	0x7ff00000
 800e6d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e6d2:	1c51      	adds	r1, r2, #1
 800e6d4:	9119      	str	r1, [sp, #100]	@ 0x64
 800e6d6:	7852      	ldrb	r2, [r2, #1]
 800e6d8:	2a30      	cmp	r2, #48	@ 0x30
 800e6da:	d0f9      	beq.n	800e6d0 <_strtod_l+0x298>
 800e6dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e6e0:	2908      	cmp	r1, #8
 800e6e2:	f63f af78 	bhi.w	800e5d6 <_strtod_l+0x19e>
 800e6e6:	3a30      	subs	r2, #48	@ 0x30
 800e6e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e6ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e6ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e6ee:	f04f 080a 	mov.w	r8, #10
 800e6f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e6f4:	1c56      	adds	r6, r2, #1
 800e6f6:	9619      	str	r6, [sp, #100]	@ 0x64
 800e6f8:	7852      	ldrb	r2, [r2, #1]
 800e6fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e6fe:	f1be 0f09 	cmp.w	lr, #9
 800e702:	d939      	bls.n	800e778 <_strtod_l+0x340>
 800e704:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e706:	1a76      	subs	r6, r6, r1
 800e708:	2e08      	cmp	r6, #8
 800e70a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e70e:	dc03      	bgt.n	800e718 <_strtod_l+0x2e0>
 800e710:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e712:	4588      	cmp	r8, r1
 800e714:	bfa8      	it	ge
 800e716:	4688      	movge	r8, r1
 800e718:	f1bc 0f00 	cmp.w	ip, #0
 800e71c:	d001      	beq.n	800e722 <_strtod_l+0x2ea>
 800e71e:	f1c8 0800 	rsb	r8, r8, #0
 800e722:	2d00      	cmp	r5, #0
 800e724:	d14e      	bne.n	800e7c4 <_strtod_l+0x38c>
 800e726:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e728:	4308      	orrs	r0, r1
 800e72a:	f47f aebe 	bne.w	800e4aa <_strtod_l+0x72>
 800e72e:	2b00      	cmp	r3, #0
 800e730:	f47f aed6 	bne.w	800e4e0 <_strtod_l+0xa8>
 800e734:	2a69      	cmp	r2, #105	@ 0x69
 800e736:	d028      	beq.n	800e78a <_strtod_l+0x352>
 800e738:	dc25      	bgt.n	800e786 <_strtod_l+0x34e>
 800e73a:	2a49      	cmp	r2, #73	@ 0x49
 800e73c:	d025      	beq.n	800e78a <_strtod_l+0x352>
 800e73e:	2a4e      	cmp	r2, #78	@ 0x4e
 800e740:	f47f aece 	bne.w	800e4e0 <_strtod_l+0xa8>
 800e744:	499b      	ldr	r1, [pc, #620]	@ (800e9b4 <_strtod_l+0x57c>)
 800e746:	a819      	add	r0, sp, #100	@ 0x64
 800e748:	f002 fdee 	bl	8011328 <__match>
 800e74c:	2800      	cmp	r0, #0
 800e74e:	f43f aec7 	beq.w	800e4e0 <_strtod_l+0xa8>
 800e752:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	2b28      	cmp	r3, #40	@ 0x28
 800e758:	d12e      	bne.n	800e7b8 <_strtod_l+0x380>
 800e75a:	4997      	ldr	r1, [pc, #604]	@ (800e9b8 <_strtod_l+0x580>)
 800e75c:	aa1c      	add	r2, sp, #112	@ 0x70
 800e75e:	a819      	add	r0, sp, #100	@ 0x64
 800e760:	f002 fdf6 	bl	8011350 <__hexnan>
 800e764:	2805      	cmp	r0, #5
 800e766:	d127      	bne.n	800e7b8 <_strtod_l+0x380>
 800e768:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e76a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e76e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e772:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e776:	e698      	b.n	800e4aa <_strtod_l+0x72>
 800e778:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e77a:	fb08 2101 	mla	r1, r8, r1, r2
 800e77e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e782:	920e      	str	r2, [sp, #56]	@ 0x38
 800e784:	e7b5      	b.n	800e6f2 <_strtod_l+0x2ba>
 800e786:	2a6e      	cmp	r2, #110	@ 0x6e
 800e788:	e7da      	b.n	800e740 <_strtod_l+0x308>
 800e78a:	498c      	ldr	r1, [pc, #560]	@ (800e9bc <_strtod_l+0x584>)
 800e78c:	a819      	add	r0, sp, #100	@ 0x64
 800e78e:	f002 fdcb 	bl	8011328 <__match>
 800e792:	2800      	cmp	r0, #0
 800e794:	f43f aea4 	beq.w	800e4e0 <_strtod_l+0xa8>
 800e798:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e79a:	4989      	ldr	r1, [pc, #548]	@ (800e9c0 <_strtod_l+0x588>)
 800e79c:	3b01      	subs	r3, #1
 800e79e:	a819      	add	r0, sp, #100	@ 0x64
 800e7a0:	9319      	str	r3, [sp, #100]	@ 0x64
 800e7a2:	f002 fdc1 	bl	8011328 <__match>
 800e7a6:	b910      	cbnz	r0, 800e7ae <_strtod_l+0x376>
 800e7a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	9319      	str	r3, [sp, #100]	@ 0x64
 800e7ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e9d0 <_strtod_l+0x598>
 800e7b2:	f04f 0a00 	mov.w	sl, #0
 800e7b6:	e678      	b.n	800e4aa <_strtod_l+0x72>
 800e7b8:	4882      	ldr	r0, [pc, #520]	@ (800e9c4 <_strtod_l+0x58c>)
 800e7ba:	f001 fc85 	bl	80100c8 <nan>
 800e7be:	ec5b ab10 	vmov	sl, fp, d0
 800e7c2:	e672      	b.n	800e4aa <_strtod_l+0x72>
 800e7c4:	eba8 0309 	sub.w	r3, r8, r9
 800e7c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e7ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7cc:	2f00      	cmp	r7, #0
 800e7ce:	bf08      	it	eq
 800e7d0:	462f      	moveq	r7, r5
 800e7d2:	2d10      	cmp	r5, #16
 800e7d4:	462c      	mov	r4, r5
 800e7d6:	bfa8      	it	ge
 800e7d8:	2410      	movge	r4, #16
 800e7da:	f7f1 febb 	bl	8000554 <__aeabi_ui2d>
 800e7de:	2d09      	cmp	r5, #9
 800e7e0:	4682      	mov	sl, r0
 800e7e2:	468b      	mov	fp, r1
 800e7e4:	dc13      	bgt.n	800e80e <_strtod_l+0x3d6>
 800e7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	f43f ae5e 	beq.w	800e4aa <_strtod_l+0x72>
 800e7ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7f0:	dd78      	ble.n	800e8e4 <_strtod_l+0x4ac>
 800e7f2:	2b16      	cmp	r3, #22
 800e7f4:	dc5f      	bgt.n	800e8b6 <_strtod_l+0x47e>
 800e7f6:	4974      	ldr	r1, [pc, #464]	@ (800e9c8 <_strtod_l+0x590>)
 800e7f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e7fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e800:	4652      	mov	r2, sl
 800e802:	465b      	mov	r3, fp
 800e804:	f7f1 ff20 	bl	8000648 <__aeabi_dmul>
 800e808:	4682      	mov	sl, r0
 800e80a:	468b      	mov	fp, r1
 800e80c:	e64d      	b.n	800e4aa <_strtod_l+0x72>
 800e80e:	4b6e      	ldr	r3, [pc, #440]	@ (800e9c8 <_strtod_l+0x590>)
 800e810:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e814:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e818:	f7f1 ff16 	bl	8000648 <__aeabi_dmul>
 800e81c:	4682      	mov	sl, r0
 800e81e:	9808      	ldr	r0, [sp, #32]
 800e820:	468b      	mov	fp, r1
 800e822:	f7f1 fe97 	bl	8000554 <__aeabi_ui2d>
 800e826:	4602      	mov	r2, r0
 800e828:	460b      	mov	r3, r1
 800e82a:	4650      	mov	r0, sl
 800e82c:	4659      	mov	r1, fp
 800e82e:	f7f1 fd55 	bl	80002dc <__adddf3>
 800e832:	2d0f      	cmp	r5, #15
 800e834:	4682      	mov	sl, r0
 800e836:	468b      	mov	fp, r1
 800e838:	ddd5      	ble.n	800e7e6 <_strtod_l+0x3ae>
 800e83a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e83c:	1b2c      	subs	r4, r5, r4
 800e83e:	441c      	add	r4, r3
 800e840:	2c00      	cmp	r4, #0
 800e842:	f340 8096 	ble.w	800e972 <_strtod_l+0x53a>
 800e846:	f014 030f 	ands.w	r3, r4, #15
 800e84a:	d00a      	beq.n	800e862 <_strtod_l+0x42a>
 800e84c:	495e      	ldr	r1, [pc, #376]	@ (800e9c8 <_strtod_l+0x590>)
 800e84e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e852:	4652      	mov	r2, sl
 800e854:	465b      	mov	r3, fp
 800e856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e85a:	f7f1 fef5 	bl	8000648 <__aeabi_dmul>
 800e85e:	4682      	mov	sl, r0
 800e860:	468b      	mov	fp, r1
 800e862:	f034 040f 	bics.w	r4, r4, #15
 800e866:	d073      	beq.n	800e950 <_strtod_l+0x518>
 800e868:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e86c:	dd48      	ble.n	800e900 <_strtod_l+0x4c8>
 800e86e:	2400      	movs	r4, #0
 800e870:	46a0      	mov	r8, r4
 800e872:	940a      	str	r4, [sp, #40]	@ 0x28
 800e874:	46a1      	mov	r9, r4
 800e876:	9a05      	ldr	r2, [sp, #20]
 800e878:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e9d0 <_strtod_l+0x598>
 800e87c:	2322      	movs	r3, #34	@ 0x22
 800e87e:	6013      	str	r3, [r2, #0]
 800e880:	f04f 0a00 	mov.w	sl, #0
 800e884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e886:	2b00      	cmp	r3, #0
 800e888:	f43f ae0f 	beq.w	800e4aa <_strtod_l+0x72>
 800e88c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e88e:	9805      	ldr	r0, [sp, #20]
 800e890:	f002 ff02 	bl	8011698 <_Bfree>
 800e894:	9805      	ldr	r0, [sp, #20]
 800e896:	4649      	mov	r1, r9
 800e898:	f002 fefe 	bl	8011698 <_Bfree>
 800e89c:	9805      	ldr	r0, [sp, #20]
 800e89e:	4641      	mov	r1, r8
 800e8a0:	f002 fefa 	bl	8011698 <_Bfree>
 800e8a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e8a6:	9805      	ldr	r0, [sp, #20]
 800e8a8:	f002 fef6 	bl	8011698 <_Bfree>
 800e8ac:	9805      	ldr	r0, [sp, #20]
 800e8ae:	4621      	mov	r1, r4
 800e8b0:	f002 fef2 	bl	8011698 <_Bfree>
 800e8b4:	e5f9      	b.n	800e4aa <_strtod_l+0x72>
 800e8b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e8bc:	4293      	cmp	r3, r2
 800e8be:	dbbc      	blt.n	800e83a <_strtod_l+0x402>
 800e8c0:	4c41      	ldr	r4, [pc, #260]	@ (800e9c8 <_strtod_l+0x590>)
 800e8c2:	f1c5 050f 	rsb	r5, r5, #15
 800e8c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e8ca:	4652      	mov	r2, sl
 800e8cc:	465b      	mov	r3, fp
 800e8ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8d2:	f7f1 feb9 	bl	8000648 <__aeabi_dmul>
 800e8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8d8:	1b5d      	subs	r5, r3, r5
 800e8da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e8de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e8e2:	e78f      	b.n	800e804 <_strtod_l+0x3cc>
 800e8e4:	3316      	adds	r3, #22
 800e8e6:	dba8      	blt.n	800e83a <_strtod_l+0x402>
 800e8e8:	4b37      	ldr	r3, [pc, #220]	@ (800e9c8 <_strtod_l+0x590>)
 800e8ea:	eba9 0808 	sub.w	r8, r9, r8
 800e8ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e8f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e8f6:	4650      	mov	r0, sl
 800e8f8:	4659      	mov	r1, fp
 800e8fa:	f7f1 ffcf 	bl	800089c <__aeabi_ddiv>
 800e8fe:	e783      	b.n	800e808 <_strtod_l+0x3d0>
 800e900:	4b32      	ldr	r3, [pc, #200]	@ (800e9cc <_strtod_l+0x594>)
 800e902:	9308      	str	r3, [sp, #32]
 800e904:	2300      	movs	r3, #0
 800e906:	1124      	asrs	r4, r4, #4
 800e908:	4650      	mov	r0, sl
 800e90a:	4659      	mov	r1, fp
 800e90c:	461e      	mov	r6, r3
 800e90e:	2c01      	cmp	r4, #1
 800e910:	dc21      	bgt.n	800e956 <_strtod_l+0x51e>
 800e912:	b10b      	cbz	r3, 800e918 <_strtod_l+0x4e0>
 800e914:	4682      	mov	sl, r0
 800e916:	468b      	mov	fp, r1
 800e918:	492c      	ldr	r1, [pc, #176]	@ (800e9cc <_strtod_l+0x594>)
 800e91a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e91e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e922:	4652      	mov	r2, sl
 800e924:	465b      	mov	r3, fp
 800e926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e92a:	f7f1 fe8d 	bl	8000648 <__aeabi_dmul>
 800e92e:	4b28      	ldr	r3, [pc, #160]	@ (800e9d0 <_strtod_l+0x598>)
 800e930:	460a      	mov	r2, r1
 800e932:	400b      	ands	r3, r1
 800e934:	4927      	ldr	r1, [pc, #156]	@ (800e9d4 <_strtod_l+0x59c>)
 800e936:	428b      	cmp	r3, r1
 800e938:	4682      	mov	sl, r0
 800e93a:	d898      	bhi.n	800e86e <_strtod_l+0x436>
 800e93c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e940:	428b      	cmp	r3, r1
 800e942:	bf86      	itte	hi
 800e944:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e9d8 <_strtod_l+0x5a0>
 800e948:	f04f 3aff 	movhi.w	sl, #4294967295
 800e94c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e950:	2300      	movs	r3, #0
 800e952:	9308      	str	r3, [sp, #32]
 800e954:	e07a      	b.n	800ea4c <_strtod_l+0x614>
 800e956:	07e2      	lsls	r2, r4, #31
 800e958:	d505      	bpl.n	800e966 <_strtod_l+0x52e>
 800e95a:	9b08      	ldr	r3, [sp, #32]
 800e95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e960:	f7f1 fe72 	bl	8000648 <__aeabi_dmul>
 800e964:	2301      	movs	r3, #1
 800e966:	9a08      	ldr	r2, [sp, #32]
 800e968:	3208      	adds	r2, #8
 800e96a:	3601      	adds	r6, #1
 800e96c:	1064      	asrs	r4, r4, #1
 800e96e:	9208      	str	r2, [sp, #32]
 800e970:	e7cd      	b.n	800e90e <_strtod_l+0x4d6>
 800e972:	d0ed      	beq.n	800e950 <_strtod_l+0x518>
 800e974:	4264      	negs	r4, r4
 800e976:	f014 020f 	ands.w	r2, r4, #15
 800e97a:	d00a      	beq.n	800e992 <_strtod_l+0x55a>
 800e97c:	4b12      	ldr	r3, [pc, #72]	@ (800e9c8 <_strtod_l+0x590>)
 800e97e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e982:	4650      	mov	r0, sl
 800e984:	4659      	mov	r1, fp
 800e986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98a:	f7f1 ff87 	bl	800089c <__aeabi_ddiv>
 800e98e:	4682      	mov	sl, r0
 800e990:	468b      	mov	fp, r1
 800e992:	1124      	asrs	r4, r4, #4
 800e994:	d0dc      	beq.n	800e950 <_strtod_l+0x518>
 800e996:	2c1f      	cmp	r4, #31
 800e998:	dd20      	ble.n	800e9dc <_strtod_l+0x5a4>
 800e99a:	2400      	movs	r4, #0
 800e99c:	46a0      	mov	r8, r4
 800e99e:	940a      	str	r4, [sp, #40]	@ 0x28
 800e9a0:	46a1      	mov	r9, r4
 800e9a2:	9a05      	ldr	r2, [sp, #20]
 800e9a4:	2322      	movs	r3, #34	@ 0x22
 800e9a6:	f04f 0a00 	mov.w	sl, #0
 800e9aa:	f04f 0b00 	mov.w	fp, #0
 800e9ae:	6013      	str	r3, [r2, #0]
 800e9b0:	e768      	b.n	800e884 <_strtod_l+0x44c>
 800e9b2:	bf00      	nop
 800e9b4:	08013b3d 	.word	0x08013b3d
 800e9b8:	08013ae0 	.word	0x08013ae0
 800e9bc:	08013b35 	.word	0x08013b35
 800e9c0:	08013b74 	.word	0x08013b74
 800e9c4:	08013f05 	.word	0x08013f05
 800e9c8:	08013cf0 	.word	0x08013cf0
 800e9cc:	08013cc8 	.word	0x08013cc8
 800e9d0:	7ff00000 	.word	0x7ff00000
 800e9d4:	7ca00000 	.word	0x7ca00000
 800e9d8:	7fefffff 	.word	0x7fefffff
 800e9dc:	f014 0310 	ands.w	r3, r4, #16
 800e9e0:	bf18      	it	ne
 800e9e2:	236a      	movne	r3, #106	@ 0x6a
 800e9e4:	4ea9      	ldr	r6, [pc, #676]	@ (800ec8c <_strtod_l+0x854>)
 800e9e6:	9308      	str	r3, [sp, #32]
 800e9e8:	4650      	mov	r0, sl
 800e9ea:	4659      	mov	r1, fp
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	07e2      	lsls	r2, r4, #31
 800e9f0:	d504      	bpl.n	800e9fc <_strtod_l+0x5c4>
 800e9f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e9f6:	f7f1 fe27 	bl	8000648 <__aeabi_dmul>
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	1064      	asrs	r4, r4, #1
 800e9fe:	f106 0608 	add.w	r6, r6, #8
 800ea02:	d1f4      	bne.n	800e9ee <_strtod_l+0x5b6>
 800ea04:	b10b      	cbz	r3, 800ea0a <_strtod_l+0x5d2>
 800ea06:	4682      	mov	sl, r0
 800ea08:	468b      	mov	fp, r1
 800ea0a:	9b08      	ldr	r3, [sp, #32]
 800ea0c:	b1b3      	cbz	r3, 800ea3c <_strtod_l+0x604>
 800ea0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ea12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	4659      	mov	r1, fp
 800ea1a:	dd0f      	ble.n	800ea3c <_strtod_l+0x604>
 800ea1c:	2b1f      	cmp	r3, #31
 800ea1e:	dd55      	ble.n	800eacc <_strtod_l+0x694>
 800ea20:	2b34      	cmp	r3, #52	@ 0x34
 800ea22:	bfde      	ittt	le
 800ea24:	f04f 33ff 	movle.w	r3, #4294967295
 800ea28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ea2c:	4093      	lslle	r3, r2
 800ea2e:	f04f 0a00 	mov.w	sl, #0
 800ea32:	bfcc      	ite	gt
 800ea34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ea38:	ea03 0b01 	andle.w	fp, r3, r1
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	2300      	movs	r3, #0
 800ea40:	4650      	mov	r0, sl
 800ea42:	4659      	mov	r1, fp
 800ea44:	f7f2 f868 	bl	8000b18 <__aeabi_dcmpeq>
 800ea48:	2800      	cmp	r0, #0
 800ea4a:	d1a6      	bne.n	800e99a <_strtod_l+0x562>
 800ea4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ea52:	9805      	ldr	r0, [sp, #20]
 800ea54:	462b      	mov	r3, r5
 800ea56:	463a      	mov	r2, r7
 800ea58:	f002 fe86 	bl	8011768 <__s2b>
 800ea5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ea5e:	2800      	cmp	r0, #0
 800ea60:	f43f af05 	beq.w	800e86e <_strtod_l+0x436>
 800ea64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea66:	2a00      	cmp	r2, #0
 800ea68:	eba9 0308 	sub.w	r3, r9, r8
 800ea6c:	bfa8      	it	ge
 800ea6e:	2300      	movge	r3, #0
 800ea70:	9312      	str	r3, [sp, #72]	@ 0x48
 800ea72:	2400      	movs	r4, #0
 800ea74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ea78:	9316      	str	r3, [sp, #88]	@ 0x58
 800ea7a:	46a0      	mov	r8, r4
 800ea7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea7e:	9805      	ldr	r0, [sp, #20]
 800ea80:	6859      	ldr	r1, [r3, #4]
 800ea82:	f002 fdc9 	bl	8011618 <_Balloc>
 800ea86:	4681      	mov	r9, r0
 800ea88:	2800      	cmp	r0, #0
 800ea8a:	f43f aef4 	beq.w	800e876 <_strtod_l+0x43e>
 800ea8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea90:	691a      	ldr	r2, [r3, #16]
 800ea92:	3202      	adds	r2, #2
 800ea94:	f103 010c 	add.w	r1, r3, #12
 800ea98:	0092      	lsls	r2, r2, #2
 800ea9a:	300c      	adds	r0, #12
 800ea9c:	f001 fb05 	bl	80100aa <memcpy>
 800eaa0:	ec4b ab10 	vmov	d0, sl, fp
 800eaa4:	9805      	ldr	r0, [sp, #20]
 800eaa6:	aa1c      	add	r2, sp, #112	@ 0x70
 800eaa8:	a91b      	add	r1, sp, #108	@ 0x6c
 800eaaa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800eaae:	f003 f997 	bl	8011de0 <__d2b>
 800eab2:	901a      	str	r0, [sp, #104]	@ 0x68
 800eab4:	2800      	cmp	r0, #0
 800eab6:	f43f aede 	beq.w	800e876 <_strtod_l+0x43e>
 800eaba:	9805      	ldr	r0, [sp, #20]
 800eabc:	2101      	movs	r1, #1
 800eabe:	f002 fee9 	bl	8011894 <__i2b>
 800eac2:	4680      	mov	r8, r0
 800eac4:	b948      	cbnz	r0, 800eada <_strtod_l+0x6a2>
 800eac6:	f04f 0800 	mov.w	r8, #0
 800eaca:	e6d4      	b.n	800e876 <_strtod_l+0x43e>
 800eacc:	f04f 32ff 	mov.w	r2, #4294967295
 800ead0:	fa02 f303 	lsl.w	r3, r2, r3
 800ead4:	ea03 0a0a 	and.w	sl, r3, sl
 800ead8:	e7b0      	b.n	800ea3c <_strtod_l+0x604>
 800eada:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800eadc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800eade:	2d00      	cmp	r5, #0
 800eae0:	bfab      	itete	ge
 800eae2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800eae4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800eae6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800eae8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800eaea:	bfac      	ite	ge
 800eaec:	18ef      	addge	r7, r5, r3
 800eaee:	1b5e      	sublt	r6, r3, r5
 800eaf0:	9b08      	ldr	r3, [sp, #32]
 800eaf2:	1aed      	subs	r5, r5, r3
 800eaf4:	4415      	add	r5, r2
 800eaf6:	4b66      	ldr	r3, [pc, #408]	@ (800ec90 <_strtod_l+0x858>)
 800eaf8:	3d01      	subs	r5, #1
 800eafa:	429d      	cmp	r5, r3
 800eafc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800eb00:	da50      	bge.n	800eba4 <_strtod_l+0x76c>
 800eb02:	1b5b      	subs	r3, r3, r5
 800eb04:	2b1f      	cmp	r3, #31
 800eb06:	eba2 0203 	sub.w	r2, r2, r3
 800eb0a:	f04f 0101 	mov.w	r1, #1
 800eb0e:	dc3d      	bgt.n	800eb8c <_strtod_l+0x754>
 800eb10:	fa01 f303 	lsl.w	r3, r1, r3
 800eb14:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eb16:	2300      	movs	r3, #0
 800eb18:	9310      	str	r3, [sp, #64]	@ 0x40
 800eb1a:	18bd      	adds	r5, r7, r2
 800eb1c:	9b08      	ldr	r3, [sp, #32]
 800eb1e:	42af      	cmp	r7, r5
 800eb20:	4416      	add	r6, r2
 800eb22:	441e      	add	r6, r3
 800eb24:	463b      	mov	r3, r7
 800eb26:	bfa8      	it	ge
 800eb28:	462b      	movge	r3, r5
 800eb2a:	42b3      	cmp	r3, r6
 800eb2c:	bfa8      	it	ge
 800eb2e:	4633      	movge	r3, r6
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	bfc2      	ittt	gt
 800eb34:	1aed      	subgt	r5, r5, r3
 800eb36:	1af6      	subgt	r6, r6, r3
 800eb38:	1aff      	subgt	r7, r7, r3
 800eb3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	dd16      	ble.n	800eb6e <_strtod_l+0x736>
 800eb40:	4641      	mov	r1, r8
 800eb42:	9805      	ldr	r0, [sp, #20]
 800eb44:	461a      	mov	r2, r3
 800eb46:	f002 ff65 	bl	8011a14 <__pow5mult>
 800eb4a:	4680      	mov	r8, r0
 800eb4c:	2800      	cmp	r0, #0
 800eb4e:	d0ba      	beq.n	800eac6 <_strtod_l+0x68e>
 800eb50:	4601      	mov	r1, r0
 800eb52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800eb54:	9805      	ldr	r0, [sp, #20]
 800eb56:	f002 feb3 	bl	80118c0 <__multiply>
 800eb5a:	900e      	str	r0, [sp, #56]	@ 0x38
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	f43f ae8a 	beq.w	800e876 <_strtod_l+0x43e>
 800eb62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eb64:	9805      	ldr	r0, [sp, #20]
 800eb66:	f002 fd97 	bl	8011698 <_Bfree>
 800eb6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb6c:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb6e:	2d00      	cmp	r5, #0
 800eb70:	dc1d      	bgt.n	800ebae <_strtod_l+0x776>
 800eb72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	dd23      	ble.n	800ebc0 <_strtod_l+0x788>
 800eb78:	4649      	mov	r1, r9
 800eb7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800eb7c:	9805      	ldr	r0, [sp, #20]
 800eb7e:	f002 ff49 	bl	8011a14 <__pow5mult>
 800eb82:	4681      	mov	r9, r0
 800eb84:	b9e0      	cbnz	r0, 800ebc0 <_strtod_l+0x788>
 800eb86:	f04f 0900 	mov.w	r9, #0
 800eb8a:	e674      	b.n	800e876 <_strtod_l+0x43e>
 800eb8c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800eb90:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800eb94:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800eb98:	35e2      	adds	r5, #226	@ 0xe2
 800eb9a:	fa01 f305 	lsl.w	r3, r1, r5
 800eb9e:	9310      	str	r3, [sp, #64]	@ 0x40
 800eba0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800eba2:	e7ba      	b.n	800eb1a <_strtod_l+0x6e2>
 800eba4:	2300      	movs	r3, #0
 800eba6:	9310      	str	r3, [sp, #64]	@ 0x40
 800eba8:	2301      	movs	r3, #1
 800ebaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ebac:	e7b5      	b.n	800eb1a <_strtod_l+0x6e2>
 800ebae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ebb0:	9805      	ldr	r0, [sp, #20]
 800ebb2:	462a      	mov	r2, r5
 800ebb4:	f002 ff88 	bl	8011ac8 <__lshift>
 800ebb8:	901a      	str	r0, [sp, #104]	@ 0x68
 800ebba:	2800      	cmp	r0, #0
 800ebbc:	d1d9      	bne.n	800eb72 <_strtod_l+0x73a>
 800ebbe:	e65a      	b.n	800e876 <_strtod_l+0x43e>
 800ebc0:	2e00      	cmp	r6, #0
 800ebc2:	dd07      	ble.n	800ebd4 <_strtod_l+0x79c>
 800ebc4:	4649      	mov	r1, r9
 800ebc6:	9805      	ldr	r0, [sp, #20]
 800ebc8:	4632      	mov	r2, r6
 800ebca:	f002 ff7d 	bl	8011ac8 <__lshift>
 800ebce:	4681      	mov	r9, r0
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	d0d8      	beq.n	800eb86 <_strtod_l+0x74e>
 800ebd4:	2f00      	cmp	r7, #0
 800ebd6:	dd08      	ble.n	800ebea <_strtod_l+0x7b2>
 800ebd8:	4641      	mov	r1, r8
 800ebda:	9805      	ldr	r0, [sp, #20]
 800ebdc:	463a      	mov	r2, r7
 800ebde:	f002 ff73 	bl	8011ac8 <__lshift>
 800ebe2:	4680      	mov	r8, r0
 800ebe4:	2800      	cmp	r0, #0
 800ebe6:	f43f ae46 	beq.w	800e876 <_strtod_l+0x43e>
 800ebea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ebec:	9805      	ldr	r0, [sp, #20]
 800ebee:	464a      	mov	r2, r9
 800ebf0:	f002 fff2 	bl	8011bd8 <__mdiff>
 800ebf4:	4604      	mov	r4, r0
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	f43f ae3d 	beq.w	800e876 <_strtod_l+0x43e>
 800ebfc:	68c3      	ldr	r3, [r0, #12]
 800ebfe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ec00:	2300      	movs	r3, #0
 800ec02:	60c3      	str	r3, [r0, #12]
 800ec04:	4641      	mov	r1, r8
 800ec06:	f002 ffcb 	bl	8011ba0 <__mcmp>
 800ec0a:	2800      	cmp	r0, #0
 800ec0c:	da46      	bge.n	800ec9c <_strtod_l+0x864>
 800ec0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec10:	ea53 030a 	orrs.w	r3, r3, sl
 800ec14:	d16c      	bne.n	800ecf0 <_strtod_l+0x8b8>
 800ec16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d168      	bne.n	800ecf0 <_strtod_l+0x8b8>
 800ec1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ec22:	0d1b      	lsrs	r3, r3, #20
 800ec24:	051b      	lsls	r3, r3, #20
 800ec26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ec2a:	d961      	bls.n	800ecf0 <_strtod_l+0x8b8>
 800ec2c:	6963      	ldr	r3, [r4, #20]
 800ec2e:	b913      	cbnz	r3, 800ec36 <_strtod_l+0x7fe>
 800ec30:	6923      	ldr	r3, [r4, #16]
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	dd5c      	ble.n	800ecf0 <_strtod_l+0x8b8>
 800ec36:	4621      	mov	r1, r4
 800ec38:	2201      	movs	r2, #1
 800ec3a:	9805      	ldr	r0, [sp, #20]
 800ec3c:	f002 ff44 	bl	8011ac8 <__lshift>
 800ec40:	4641      	mov	r1, r8
 800ec42:	4604      	mov	r4, r0
 800ec44:	f002 ffac 	bl	8011ba0 <__mcmp>
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	dd51      	ble.n	800ecf0 <_strtod_l+0x8b8>
 800ec4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ec50:	9a08      	ldr	r2, [sp, #32]
 800ec52:	0d1b      	lsrs	r3, r3, #20
 800ec54:	051b      	lsls	r3, r3, #20
 800ec56:	2a00      	cmp	r2, #0
 800ec58:	d06b      	beq.n	800ed32 <_strtod_l+0x8fa>
 800ec5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ec5e:	d868      	bhi.n	800ed32 <_strtod_l+0x8fa>
 800ec60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ec64:	f67f ae9d 	bls.w	800e9a2 <_strtod_l+0x56a>
 800ec68:	4b0a      	ldr	r3, [pc, #40]	@ (800ec94 <_strtod_l+0x85c>)
 800ec6a:	4650      	mov	r0, sl
 800ec6c:	4659      	mov	r1, fp
 800ec6e:	2200      	movs	r2, #0
 800ec70:	f7f1 fcea 	bl	8000648 <__aeabi_dmul>
 800ec74:	4b08      	ldr	r3, [pc, #32]	@ (800ec98 <_strtod_l+0x860>)
 800ec76:	400b      	ands	r3, r1
 800ec78:	4682      	mov	sl, r0
 800ec7a:	468b      	mov	fp, r1
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	f47f ae05 	bne.w	800e88c <_strtod_l+0x454>
 800ec82:	9a05      	ldr	r2, [sp, #20]
 800ec84:	2322      	movs	r3, #34	@ 0x22
 800ec86:	6013      	str	r3, [r2, #0]
 800ec88:	e600      	b.n	800e88c <_strtod_l+0x454>
 800ec8a:	bf00      	nop
 800ec8c:	08013b08 	.word	0x08013b08
 800ec90:	fffffc02 	.word	0xfffffc02
 800ec94:	39500000 	.word	0x39500000
 800ec98:	7ff00000 	.word	0x7ff00000
 800ec9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800eca0:	d165      	bne.n	800ed6e <_strtod_l+0x936>
 800eca2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800eca4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eca8:	b35a      	cbz	r2, 800ed02 <_strtod_l+0x8ca>
 800ecaa:	4a9f      	ldr	r2, [pc, #636]	@ (800ef28 <_strtod_l+0xaf0>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d12b      	bne.n	800ed08 <_strtod_l+0x8d0>
 800ecb0:	9b08      	ldr	r3, [sp, #32]
 800ecb2:	4651      	mov	r1, sl
 800ecb4:	b303      	cbz	r3, 800ecf8 <_strtod_l+0x8c0>
 800ecb6:	4b9d      	ldr	r3, [pc, #628]	@ (800ef2c <_strtod_l+0xaf4>)
 800ecb8:	465a      	mov	r2, fp
 800ecba:	4013      	ands	r3, r2
 800ecbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ecc0:	f04f 32ff 	mov.w	r2, #4294967295
 800ecc4:	d81b      	bhi.n	800ecfe <_strtod_l+0x8c6>
 800ecc6:	0d1b      	lsrs	r3, r3, #20
 800ecc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eccc:	fa02 f303 	lsl.w	r3, r2, r3
 800ecd0:	4299      	cmp	r1, r3
 800ecd2:	d119      	bne.n	800ed08 <_strtod_l+0x8d0>
 800ecd4:	4b96      	ldr	r3, [pc, #600]	@ (800ef30 <_strtod_l+0xaf8>)
 800ecd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d102      	bne.n	800ece2 <_strtod_l+0x8aa>
 800ecdc:	3101      	adds	r1, #1
 800ecde:	f43f adca 	beq.w	800e876 <_strtod_l+0x43e>
 800ece2:	4b92      	ldr	r3, [pc, #584]	@ (800ef2c <_strtod_l+0xaf4>)
 800ece4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ece6:	401a      	ands	r2, r3
 800ece8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ecec:	f04f 0a00 	mov.w	sl, #0
 800ecf0:	9b08      	ldr	r3, [sp, #32]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d1b8      	bne.n	800ec68 <_strtod_l+0x830>
 800ecf6:	e5c9      	b.n	800e88c <_strtod_l+0x454>
 800ecf8:	f04f 33ff 	mov.w	r3, #4294967295
 800ecfc:	e7e8      	b.n	800ecd0 <_strtod_l+0x898>
 800ecfe:	4613      	mov	r3, r2
 800ed00:	e7e6      	b.n	800ecd0 <_strtod_l+0x898>
 800ed02:	ea53 030a 	orrs.w	r3, r3, sl
 800ed06:	d0a1      	beq.n	800ec4c <_strtod_l+0x814>
 800ed08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed0a:	b1db      	cbz	r3, 800ed44 <_strtod_l+0x90c>
 800ed0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed0e:	4213      	tst	r3, r2
 800ed10:	d0ee      	beq.n	800ecf0 <_strtod_l+0x8b8>
 800ed12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed14:	9a08      	ldr	r2, [sp, #32]
 800ed16:	4650      	mov	r0, sl
 800ed18:	4659      	mov	r1, fp
 800ed1a:	b1bb      	cbz	r3, 800ed4c <_strtod_l+0x914>
 800ed1c:	f7ff fb6b 	bl	800e3f6 <sulp>
 800ed20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed24:	ec53 2b10 	vmov	r2, r3, d0
 800ed28:	f7f1 fad8 	bl	80002dc <__adddf3>
 800ed2c:	4682      	mov	sl, r0
 800ed2e:	468b      	mov	fp, r1
 800ed30:	e7de      	b.n	800ecf0 <_strtod_l+0x8b8>
 800ed32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ed36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ed3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ed3e:	f04f 3aff 	mov.w	sl, #4294967295
 800ed42:	e7d5      	b.n	800ecf0 <_strtod_l+0x8b8>
 800ed44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ed46:	ea13 0f0a 	tst.w	r3, sl
 800ed4a:	e7e1      	b.n	800ed10 <_strtod_l+0x8d8>
 800ed4c:	f7ff fb53 	bl	800e3f6 <sulp>
 800ed50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed54:	ec53 2b10 	vmov	r2, r3, d0
 800ed58:	f7f1 fabe 	bl	80002d8 <__aeabi_dsub>
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	2300      	movs	r3, #0
 800ed60:	4682      	mov	sl, r0
 800ed62:	468b      	mov	fp, r1
 800ed64:	f7f1 fed8 	bl	8000b18 <__aeabi_dcmpeq>
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	d0c1      	beq.n	800ecf0 <_strtod_l+0x8b8>
 800ed6c:	e619      	b.n	800e9a2 <_strtod_l+0x56a>
 800ed6e:	4641      	mov	r1, r8
 800ed70:	4620      	mov	r0, r4
 800ed72:	f003 f88d 	bl	8011e90 <__ratio>
 800ed76:	ec57 6b10 	vmov	r6, r7, d0
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ed80:	4630      	mov	r0, r6
 800ed82:	4639      	mov	r1, r7
 800ed84:	f7f1 fedc 	bl	8000b40 <__aeabi_dcmple>
 800ed88:	2800      	cmp	r0, #0
 800ed8a:	d06f      	beq.n	800ee6c <_strtod_l+0xa34>
 800ed8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d17a      	bne.n	800ee88 <_strtod_l+0xa50>
 800ed92:	f1ba 0f00 	cmp.w	sl, #0
 800ed96:	d158      	bne.n	800ee4a <_strtod_l+0xa12>
 800ed98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d15a      	bne.n	800ee58 <_strtod_l+0xa20>
 800eda2:	4b64      	ldr	r3, [pc, #400]	@ (800ef34 <_strtod_l+0xafc>)
 800eda4:	2200      	movs	r2, #0
 800eda6:	4630      	mov	r0, r6
 800eda8:	4639      	mov	r1, r7
 800edaa:	f7f1 febf 	bl	8000b2c <__aeabi_dcmplt>
 800edae:	2800      	cmp	r0, #0
 800edb0:	d159      	bne.n	800ee66 <_strtod_l+0xa2e>
 800edb2:	4630      	mov	r0, r6
 800edb4:	4639      	mov	r1, r7
 800edb6:	4b60      	ldr	r3, [pc, #384]	@ (800ef38 <_strtod_l+0xb00>)
 800edb8:	2200      	movs	r2, #0
 800edba:	f7f1 fc45 	bl	8000648 <__aeabi_dmul>
 800edbe:	4606      	mov	r6, r0
 800edc0:	460f      	mov	r7, r1
 800edc2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800edc6:	9606      	str	r6, [sp, #24]
 800edc8:	9307      	str	r3, [sp, #28]
 800edca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800edce:	4d57      	ldr	r5, [pc, #348]	@ (800ef2c <_strtod_l+0xaf4>)
 800edd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800edd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800edd6:	401d      	ands	r5, r3
 800edd8:	4b58      	ldr	r3, [pc, #352]	@ (800ef3c <_strtod_l+0xb04>)
 800edda:	429d      	cmp	r5, r3
 800eddc:	f040 80b2 	bne.w	800ef44 <_strtod_l+0xb0c>
 800ede0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ede2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ede6:	ec4b ab10 	vmov	d0, sl, fp
 800edea:	f002 ff89 	bl	8011d00 <__ulp>
 800edee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800edf2:	ec51 0b10 	vmov	r0, r1, d0
 800edf6:	f7f1 fc27 	bl	8000648 <__aeabi_dmul>
 800edfa:	4652      	mov	r2, sl
 800edfc:	465b      	mov	r3, fp
 800edfe:	f7f1 fa6d 	bl	80002dc <__adddf3>
 800ee02:	460b      	mov	r3, r1
 800ee04:	4949      	ldr	r1, [pc, #292]	@ (800ef2c <_strtod_l+0xaf4>)
 800ee06:	4a4e      	ldr	r2, [pc, #312]	@ (800ef40 <_strtod_l+0xb08>)
 800ee08:	4019      	ands	r1, r3
 800ee0a:	4291      	cmp	r1, r2
 800ee0c:	4682      	mov	sl, r0
 800ee0e:	d942      	bls.n	800ee96 <_strtod_l+0xa5e>
 800ee10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ee12:	4b47      	ldr	r3, [pc, #284]	@ (800ef30 <_strtod_l+0xaf8>)
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d103      	bne.n	800ee20 <_strtod_l+0x9e8>
 800ee18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	f43f ad2b 	beq.w	800e876 <_strtod_l+0x43e>
 800ee20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ef30 <_strtod_l+0xaf8>
 800ee24:	f04f 3aff 	mov.w	sl, #4294967295
 800ee28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ee2a:	9805      	ldr	r0, [sp, #20]
 800ee2c:	f002 fc34 	bl	8011698 <_Bfree>
 800ee30:	9805      	ldr	r0, [sp, #20]
 800ee32:	4649      	mov	r1, r9
 800ee34:	f002 fc30 	bl	8011698 <_Bfree>
 800ee38:	9805      	ldr	r0, [sp, #20]
 800ee3a:	4641      	mov	r1, r8
 800ee3c:	f002 fc2c 	bl	8011698 <_Bfree>
 800ee40:	9805      	ldr	r0, [sp, #20]
 800ee42:	4621      	mov	r1, r4
 800ee44:	f002 fc28 	bl	8011698 <_Bfree>
 800ee48:	e618      	b.n	800ea7c <_strtod_l+0x644>
 800ee4a:	f1ba 0f01 	cmp.w	sl, #1
 800ee4e:	d103      	bne.n	800ee58 <_strtod_l+0xa20>
 800ee50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	f43f ada5 	beq.w	800e9a2 <_strtod_l+0x56a>
 800ee58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ef08 <_strtod_l+0xad0>
 800ee5c:	4f35      	ldr	r7, [pc, #212]	@ (800ef34 <_strtod_l+0xafc>)
 800ee5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ee62:	2600      	movs	r6, #0
 800ee64:	e7b1      	b.n	800edca <_strtod_l+0x992>
 800ee66:	4f34      	ldr	r7, [pc, #208]	@ (800ef38 <_strtod_l+0xb00>)
 800ee68:	2600      	movs	r6, #0
 800ee6a:	e7aa      	b.n	800edc2 <_strtod_l+0x98a>
 800ee6c:	4b32      	ldr	r3, [pc, #200]	@ (800ef38 <_strtod_l+0xb00>)
 800ee6e:	4630      	mov	r0, r6
 800ee70:	4639      	mov	r1, r7
 800ee72:	2200      	movs	r2, #0
 800ee74:	f7f1 fbe8 	bl	8000648 <__aeabi_dmul>
 800ee78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee7a:	4606      	mov	r6, r0
 800ee7c:	460f      	mov	r7, r1
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d09f      	beq.n	800edc2 <_strtod_l+0x98a>
 800ee82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ee86:	e7a0      	b.n	800edca <_strtod_l+0x992>
 800ee88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ef10 <_strtod_l+0xad8>
 800ee8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ee90:	ec57 6b17 	vmov	r6, r7, d7
 800ee94:	e799      	b.n	800edca <_strtod_l+0x992>
 800ee96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ee9a:	9b08      	ldr	r3, [sp, #32]
 800ee9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d1c1      	bne.n	800ee28 <_strtod_l+0x9f0>
 800eea4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eea8:	0d1b      	lsrs	r3, r3, #20
 800eeaa:	051b      	lsls	r3, r3, #20
 800eeac:	429d      	cmp	r5, r3
 800eeae:	d1bb      	bne.n	800ee28 <_strtod_l+0x9f0>
 800eeb0:	4630      	mov	r0, r6
 800eeb2:	4639      	mov	r1, r7
 800eeb4:	f7f1 ff28 	bl	8000d08 <__aeabi_d2lz>
 800eeb8:	f7f1 fb98 	bl	80005ec <__aeabi_l2d>
 800eebc:	4602      	mov	r2, r0
 800eebe:	460b      	mov	r3, r1
 800eec0:	4630      	mov	r0, r6
 800eec2:	4639      	mov	r1, r7
 800eec4:	f7f1 fa08 	bl	80002d8 <__aeabi_dsub>
 800eec8:	460b      	mov	r3, r1
 800eeca:	4602      	mov	r2, r0
 800eecc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800eed0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800eed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eed6:	ea46 060a 	orr.w	r6, r6, sl
 800eeda:	431e      	orrs	r6, r3
 800eedc:	d06f      	beq.n	800efbe <_strtod_l+0xb86>
 800eede:	a30e      	add	r3, pc, #56	@ (adr r3, 800ef18 <_strtod_l+0xae0>)
 800eee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee4:	f7f1 fe22 	bl	8000b2c <__aeabi_dcmplt>
 800eee8:	2800      	cmp	r0, #0
 800eeea:	f47f accf 	bne.w	800e88c <_strtod_l+0x454>
 800eeee:	a30c      	add	r3, pc, #48	@ (adr r3, 800ef20 <_strtod_l+0xae8>)
 800eef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eef8:	f7f1 fe36 	bl	8000b68 <__aeabi_dcmpgt>
 800eefc:	2800      	cmp	r0, #0
 800eefe:	d093      	beq.n	800ee28 <_strtod_l+0x9f0>
 800ef00:	e4c4      	b.n	800e88c <_strtod_l+0x454>
 800ef02:	bf00      	nop
 800ef04:	f3af 8000 	nop.w
 800ef08:	00000000 	.word	0x00000000
 800ef0c:	bff00000 	.word	0xbff00000
 800ef10:	00000000 	.word	0x00000000
 800ef14:	3ff00000 	.word	0x3ff00000
 800ef18:	94a03595 	.word	0x94a03595
 800ef1c:	3fdfffff 	.word	0x3fdfffff
 800ef20:	35afe535 	.word	0x35afe535
 800ef24:	3fe00000 	.word	0x3fe00000
 800ef28:	000fffff 	.word	0x000fffff
 800ef2c:	7ff00000 	.word	0x7ff00000
 800ef30:	7fefffff 	.word	0x7fefffff
 800ef34:	3ff00000 	.word	0x3ff00000
 800ef38:	3fe00000 	.word	0x3fe00000
 800ef3c:	7fe00000 	.word	0x7fe00000
 800ef40:	7c9fffff 	.word	0x7c9fffff
 800ef44:	9b08      	ldr	r3, [sp, #32]
 800ef46:	b323      	cbz	r3, 800ef92 <_strtod_l+0xb5a>
 800ef48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ef4c:	d821      	bhi.n	800ef92 <_strtod_l+0xb5a>
 800ef4e:	a328      	add	r3, pc, #160	@ (adr r3, 800eff0 <_strtod_l+0xbb8>)
 800ef50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef54:	4630      	mov	r0, r6
 800ef56:	4639      	mov	r1, r7
 800ef58:	f7f1 fdf2 	bl	8000b40 <__aeabi_dcmple>
 800ef5c:	b1a0      	cbz	r0, 800ef88 <_strtod_l+0xb50>
 800ef5e:	4639      	mov	r1, r7
 800ef60:	4630      	mov	r0, r6
 800ef62:	f7f1 fe49 	bl	8000bf8 <__aeabi_d2uiz>
 800ef66:	2801      	cmp	r0, #1
 800ef68:	bf38      	it	cc
 800ef6a:	2001      	movcc	r0, #1
 800ef6c:	f7f1 faf2 	bl	8000554 <__aeabi_ui2d>
 800ef70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef72:	4606      	mov	r6, r0
 800ef74:	460f      	mov	r7, r1
 800ef76:	b9fb      	cbnz	r3, 800efb8 <_strtod_l+0xb80>
 800ef78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ef7c:	9014      	str	r0, [sp, #80]	@ 0x50
 800ef7e:	9315      	str	r3, [sp, #84]	@ 0x54
 800ef80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ef84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ef88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ef8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ef8e:	1b5b      	subs	r3, r3, r5
 800ef90:	9311      	str	r3, [sp, #68]	@ 0x44
 800ef92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ef96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ef9a:	f002 feb1 	bl	8011d00 <__ulp>
 800ef9e:	4650      	mov	r0, sl
 800efa0:	ec53 2b10 	vmov	r2, r3, d0
 800efa4:	4659      	mov	r1, fp
 800efa6:	f7f1 fb4f 	bl	8000648 <__aeabi_dmul>
 800efaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800efae:	f7f1 f995 	bl	80002dc <__adddf3>
 800efb2:	4682      	mov	sl, r0
 800efb4:	468b      	mov	fp, r1
 800efb6:	e770      	b.n	800ee9a <_strtod_l+0xa62>
 800efb8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800efbc:	e7e0      	b.n	800ef80 <_strtod_l+0xb48>
 800efbe:	a30e      	add	r3, pc, #56	@ (adr r3, 800eff8 <_strtod_l+0xbc0>)
 800efc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc4:	f7f1 fdb2 	bl	8000b2c <__aeabi_dcmplt>
 800efc8:	e798      	b.n	800eefc <_strtod_l+0xac4>
 800efca:	2300      	movs	r3, #0
 800efcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800efce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800efd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800efd2:	6013      	str	r3, [r2, #0]
 800efd4:	f7ff ba6d 	b.w	800e4b2 <_strtod_l+0x7a>
 800efd8:	2a65      	cmp	r2, #101	@ 0x65
 800efda:	f43f ab66 	beq.w	800e6aa <_strtod_l+0x272>
 800efde:	2a45      	cmp	r2, #69	@ 0x45
 800efe0:	f43f ab63 	beq.w	800e6aa <_strtod_l+0x272>
 800efe4:	2301      	movs	r3, #1
 800efe6:	f7ff bb9e 	b.w	800e726 <_strtod_l+0x2ee>
 800efea:	bf00      	nop
 800efec:	f3af 8000 	nop.w
 800eff0:	ffc00000 	.word	0xffc00000
 800eff4:	41dfffff 	.word	0x41dfffff
 800eff8:	94a03595 	.word	0x94a03595
 800effc:	3fcfffff 	.word	0x3fcfffff

0800f000 <_strtod_r>:
 800f000:	4b01      	ldr	r3, [pc, #4]	@ (800f008 <_strtod_r+0x8>)
 800f002:	f7ff ba19 	b.w	800e438 <_strtod_l>
 800f006:	bf00      	nop
 800f008:	200000b0 	.word	0x200000b0

0800f00c <strtod>:
 800f00c:	460a      	mov	r2, r1
 800f00e:	4601      	mov	r1, r0
 800f010:	4802      	ldr	r0, [pc, #8]	@ (800f01c <strtod+0x10>)
 800f012:	4b03      	ldr	r3, [pc, #12]	@ (800f020 <strtod+0x14>)
 800f014:	6800      	ldr	r0, [r0, #0]
 800f016:	f7ff ba0f 	b.w	800e438 <_strtod_l>
 800f01a:	bf00      	nop
 800f01c:	2000021c 	.word	0x2000021c
 800f020:	200000b0 	.word	0x200000b0

0800f024 <__cvt>:
 800f024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f028:	ec57 6b10 	vmov	r6, r7, d0
 800f02c:	2f00      	cmp	r7, #0
 800f02e:	460c      	mov	r4, r1
 800f030:	4619      	mov	r1, r3
 800f032:	463b      	mov	r3, r7
 800f034:	bfbb      	ittet	lt
 800f036:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f03a:	461f      	movlt	r7, r3
 800f03c:	2300      	movge	r3, #0
 800f03e:	232d      	movlt	r3, #45	@ 0x2d
 800f040:	700b      	strb	r3, [r1, #0]
 800f042:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f044:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f048:	4691      	mov	r9, r2
 800f04a:	f023 0820 	bic.w	r8, r3, #32
 800f04e:	bfbc      	itt	lt
 800f050:	4632      	movlt	r2, r6
 800f052:	4616      	movlt	r6, r2
 800f054:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f058:	d005      	beq.n	800f066 <__cvt+0x42>
 800f05a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f05e:	d100      	bne.n	800f062 <__cvt+0x3e>
 800f060:	3401      	adds	r4, #1
 800f062:	2102      	movs	r1, #2
 800f064:	e000      	b.n	800f068 <__cvt+0x44>
 800f066:	2103      	movs	r1, #3
 800f068:	ab03      	add	r3, sp, #12
 800f06a:	9301      	str	r3, [sp, #4]
 800f06c:	ab02      	add	r3, sp, #8
 800f06e:	9300      	str	r3, [sp, #0]
 800f070:	ec47 6b10 	vmov	d0, r6, r7
 800f074:	4653      	mov	r3, sl
 800f076:	4622      	mov	r2, r4
 800f078:	f001 f8be 	bl	80101f8 <_dtoa_r>
 800f07c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f080:	4605      	mov	r5, r0
 800f082:	d119      	bne.n	800f0b8 <__cvt+0x94>
 800f084:	f019 0f01 	tst.w	r9, #1
 800f088:	d00e      	beq.n	800f0a8 <__cvt+0x84>
 800f08a:	eb00 0904 	add.w	r9, r0, r4
 800f08e:	2200      	movs	r2, #0
 800f090:	2300      	movs	r3, #0
 800f092:	4630      	mov	r0, r6
 800f094:	4639      	mov	r1, r7
 800f096:	f7f1 fd3f 	bl	8000b18 <__aeabi_dcmpeq>
 800f09a:	b108      	cbz	r0, 800f0a0 <__cvt+0x7c>
 800f09c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f0a0:	2230      	movs	r2, #48	@ 0x30
 800f0a2:	9b03      	ldr	r3, [sp, #12]
 800f0a4:	454b      	cmp	r3, r9
 800f0a6:	d31e      	bcc.n	800f0e6 <__cvt+0xc2>
 800f0a8:	9b03      	ldr	r3, [sp, #12]
 800f0aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0ac:	1b5b      	subs	r3, r3, r5
 800f0ae:	4628      	mov	r0, r5
 800f0b0:	6013      	str	r3, [r2, #0]
 800f0b2:	b004      	add	sp, #16
 800f0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f0bc:	eb00 0904 	add.w	r9, r0, r4
 800f0c0:	d1e5      	bne.n	800f08e <__cvt+0x6a>
 800f0c2:	7803      	ldrb	r3, [r0, #0]
 800f0c4:	2b30      	cmp	r3, #48	@ 0x30
 800f0c6:	d10a      	bne.n	800f0de <__cvt+0xba>
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	4639      	mov	r1, r7
 800f0d0:	f7f1 fd22 	bl	8000b18 <__aeabi_dcmpeq>
 800f0d4:	b918      	cbnz	r0, 800f0de <__cvt+0xba>
 800f0d6:	f1c4 0401 	rsb	r4, r4, #1
 800f0da:	f8ca 4000 	str.w	r4, [sl]
 800f0de:	f8da 3000 	ldr.w	r3, [sl]
 800f0e2:	4499      	add	r9, r3
 800f0e4:	e7d3      	b.n	800f08e <__cvt+0x6a>
 800f0e6:	1c59      	adds	r1, r3, #1
 800f0e8:	9103      	str	r1, [sp, #12]
 800f0ea:	701a      	strb	r2, [r3, #0]
 800f0ec:	e7d9      	b.n	800f0a2 <__cvt+0x7e>

0800f0ee <__exponent>:
 800f0ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0f0:	2900      	cmp	r1, #0
 800f0f2:	bfba      	itte	lt
 800f0f4:	4249      	neglt	r1, r1
 800f0f6:	232d      	movlt	r3, #45	@ 0x2d
 800f0f8:	232b      	movge	r3, #43	@ 0x2b
 800f0fa:	2909      	cmp	r1, #9
 800f0fc:	7002      	strb	r2, [r0, #0]
 800f0fe:	7043      	strb	r3, [r0, #1]
 800f100:	dd29      	ble.n	800f156 <__exponent+0x68>
 800f102:	f10d 0307 	add.w	r3, sp, #7
 800f106:	461d      	mov	r5, r3
 800f108:	270a      	movs	r7, #10
 800f10a:	461a      	mov	r2, r3
 800f10c:	fbb1 f6f7 	udiv	r6, r1, r7
 800f110:	fb07 1416 	mls	r4, r7, r6, r1
 800f114:	3430      	adds	r4, #48	@ 0x30
 800f116:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f11a:	460c      	mov	r4, r1
 800f11c:	2c63      	cmp	r4, #99	@ 0x63
 800f11e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f122:	4631      	mov	r1, r6
 800f124:	dcf1      	bgt.n	800f10a <__exponent+0x1c>
 800f126:	3130      	adds	r1, #48	@ 0x30
 800f128:	1e94      	subs	r4, r2, #2
 800f12a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f12e:	1c41      	adds	r1, r0, #1
 800f130:	4623      	mov	r3, r4
 800f132:	42ab      	cmp	r3, r5
 800f134:	d30a      	bcc.n	800f14c <__exponent+0x5e>
 800f136:	f10d 0309 	add.w	r3, sp, #9
 800f13a:	1a9b      	subs	r3, r3, r2
 800f13c:	42ac      	cmp	r4, r5
 800f13e:	bf88      	it	hi
 800f140:	2300      	movhi	r3, #0
 800f142:	3302      	adds	r3, #2
 800f144:	4403      	add	r3, r0
 800f146:	1a18      	subs	r0, r3, r0
 800f148:	b003      	add	sp, #12
 800f14a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f14c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f150:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f154:	e7ed      	b.n	800f132 <__exponent+0x44>
 800f156:	2330      	movs	r3, #48	@ 0x30
 800f158:	3130      	adds	r1, #48	@ 0x30
 800f15a:	7083      	strb	r3, [r0, #2]
 800f15c:	70c1      	strb	r1, [r0, #3]
 800f15e:	1d03      	adds	r3, r0, #4
 800f160:	e7f1      	b.n	800f146 <__exponent+0x58>
	...

0800f164 <_printf_float>:
 800f164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f168:	b08d      	sub	sp, #52	@ 0x34
 800f16a:	460c      	mov	r4, r1
 800f16c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f170:	4616      	mov	r6, r2
 800f172:	461f      	mov	r7, r3
 800f174:	4605      	mov	r5, r0
 800f176:	f000 ff21 	bl	800ffbc <_localeconv_r>
 800f17a:	6803      	ldr	r3, [r0, #0]
 800f17c:	9304      	str	r3, [sp, #16]
 800f17e:	4618      	mov	r0, r3
 800f180:	f7f1 f89e 	bl	80002c0 <strlen>
 800f184:	2300      	movs	r3, #0
 800f186:	930a      	str	r3, [sp, #40]	@ 0x28
 800f188:	f8d8 3000 	ldr.w	r3, [r8]
 800f18c:	9005      	str	r0, [sp, #20]
 800f18e:	3307      	adds	r3, #7
 800f190:	f023 0307 	bic.w	r3, r3, #7
 800f194:	f103 0208 	add.w	r2, r3, #8
 800f198:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f19c:	f8d4 b000 	ldr.w	fp, [r4]
 800f1a0:	f8c8 2000 	str.w	r2, [r8]
 800f1a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f1a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f1ac:	9307      	str	r3, [sp, #28]
 800f1ae:	f8cd 8018 	str.w	r8, [sp, #24]
 800f1b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f1b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1ba:	4b9c      	ldr	r3, [pc, #624]	@ (800f42c <_printf_float+0x2c8>)
 800f1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f1c0:	f7f1 fcdc 	bl	8000b7c <__aeabi_dcmpun>
 800f1c4:	bb70      	cbnz	r0, 800f224 <_printf_float+0xc0>
 800f1c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1ca:	4b98      	ldr	r3, [pc, #608]	@ (800f42c <_printf_float+0x2c8>)
 800f1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800f1d0:	f7f1 fcb6 	bl	8000b40 <__aeabi_dcmple>
 800f1d4:	bb30      	cbnz	r0, 800f224 <_printf_float+0xc0>
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	2300      	movs	r3, #0
 800f1da:	4640      	mov	r0, r8
 800f1dc:	4649      	mov	r1, r9
 800f1de:	f7f1 fca5 	bl	8000b2c <__aeabi_dcmplt>
 800f1e2:	b110      	cbz	r0, 800f1ea <_printf_float+0x86>
 800f1e4:	232d      	movs	r3, #45	@ 0x2d
 800f1e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1ea:	4a91      	ldr	r2, [pc, #580]	@ (800f430 <_printf_float+0x2cc>)
 800f1ec:	4b91      	ldr	r3, [pc, #580]	@ (800f434 <_printf_float+0x2d0>)
 800f1ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f1f2:	bf94      	ite	ls
 800f1f4:	4690      	movls	r8, r2
 800f1f6:	4698      	movhi	r8, r3
 800f1f8:	2303      	movs	r3, #3
 800f1fa:	6123      	str	r3, [r4, #16]
 800f1fc:	f02b 0304 	bic.w	r3, fp, #4
 800f200:	6023      	str	r3, [r4, #0]
 800f202:	f04f 0900 	mov.w	r9, #0
 800f206:	9700      	str	r7, [sp, #0]
 800f208:	4633      	mov	r3, r6
 800f20a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f20c:	4621      	mov	r1, r4
 800f20e:	4628      	mov	r0, r5
 800f210:	f000 f9d2 	bl	800f5b8 <_printf_common>
 800f214:	3001      	adds	r0, #1
 800f216:	f040 808d 	bne.w	800f334 <_printf_float+0x1d0>
 800f21a:	f04f 30ff 	mov.w	r0, #4294967295
 800f21e:	b00d      	add	sp, #52	@ 0x34
 800f220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f224:	4642      	mov	r2, r8
 800f226:	464b      	mov	r3, r9
 800f228:	4640      	mov	r0, r8
 800f22a:	4649      	mov	r1, r9
 800f22c:	f7f1 fca6 	bl	8000b7c <__aeabi_dcmpun>
 800f230:	b140      	cbz	r0, 800f244 <_printf_float+0xe0>
 800f232:	464b      	mov	r3, r9
 800f234:	2b00      	cmp	r3, #0
 800f236:	bfbc      	itt	lt
 800f238:	232d      	movlt	r3, #45	@ 0x2d
 800f23a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f23e:	4a7e      	ldr	r2, [pc, #504]	@ (800f438 <_printf_float+0x2d4>)
 800f240:	4b7e      	ldr	r3, [pc, #504]	@ (800f43c <_printf_float+0x2d8>)
 800f242:	e7d4      	b.n	800f1ee <_printf_float+0x8a>
 800f244:	6863      	ldr	r3, [r4, #4]
 800f246:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f24a:	9206      	str	r2, [sp, #24]
 800f24c:	1c5a      	adds	r2, r3, #1
 800f24e:	d13b      	bne.n	800f2c8 <_printf_float+0x164>
 800f250:	2306      	movs	r3, #6
 800f252:	6063      	str	r3, [r4, #4]
 800f254:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f258:	2300      	movs	r3, #0
 800f25a:	6022      	str	r2, [r4, #0]
 800f25c:	9303      	str	r3, [sp, #12]
 800f25e:	ab0a      	add	r3, sp, #40	@ 0x28
 800f260:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f264:	ab09      	add	r3, sp, #36	@ 0x24
 800f266:	9300      	str	r3, [sp, #0]
 800f268:	6861      	ldr	r1, [r4, #4]
 800f26a:	ec49 8b10 	vmov	d0, r8, r9
 800f26e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f272:	4628      	mov	r0, r5
 800f274:	f7ff fed6 	bl	800f024 <__cvt>
 800f278:	9b06      	ldr	r3, [sp, #24]
 800f27a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f27c:	2b47      	cmp	r3, #71	@ 0x47
 800f27e:	4680      	mov	r8, r0
 800f280:	d129      	bne.n	800f2d6 <_printf_float+0x172>
 800f282:	1cc8      	adds	r0, r1, #3
 800f284:	db02      	blt.n	800f28c <_printf_float+0x128>
 800f286:	6863      	ldr	r3, [r4, #4]
 800f288:	4299      	cmp	r1, r3
 800f28a:	dd41      	ble.n	800f310 <_printf_float+0x1ac>
 800f28c:	f1aa 0a02 	sub.w	sl, sl, #2
 800f290:	fa5f fa8a 	uxtb.w	sl, sl
 800f294:	3901      	subs	r1, #1
 800f296:	4652      	mov	r2, sl
 800f298:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f29c:	9109      	str	r1, [sp, #36]	@ 0x24
 800f29e:	f7ff ff26 	bl	800f0ee <__exponent>
 800f2a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f2a4:	1813      	adds	r3, r2, r0
 800f2a6:	2a01      	cmp	r2, #1
 800f2a8:	4681      	mov	r9, r0
 800f2aa:	6123      	str	r3, [r4, #16]
 800f2ac:	dc02      	bgt.n	800f2b4 <_printf_float+0x150>
 800f2ae:	6822      	ldr	r2, [r4, #0]
 800f2b0:	07d2      	lsls	r2, r2, #31
 800f2b2:	d501      	bpl.n	800f2b8 <_printf_float+0x154>
 800f2b4:	3301      	adds	r3, #1
 800f2b6:	6123      	str	r3, [r4, #16]
 800f2b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d0a2      	beq.n	800f206 <_printf_float+0xa2>
 800f2c0:	232d      	movs	r3, #45	@ 0x2d
 800f2c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2c6:	e79e      	b.n	800f206 <_printf_float+0xa2>
 800f2c8:	9a06      	ldr	r2, [sp, #24]
 800f2ca:	2a47      	cmp	r2, #71	@ 0x47
 800f2cc:	d1c2      	bne.n	800f254 <_printf_float+0xf0>
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d1c0      	bne.n	800f254 <_printf_float+0xf0>
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	e7bd      	b.n	800f252 <_printf_float+0xee>
 800f2d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f2da:	d9db      	bls.n	800f294 <_printf_float+0x130>
 800f2dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f2e0:	d118      	bne.n	800f314 <_printf_float+0x1b0>
 800f2e2:	2900      	cmp	r1, #0
 800f2e4:	6863      	ldr	r3, [r4, #4]
 800f2e6:	dd0b      	ble.n	800f300 <_printf_float+0x19c>
 800f2e8:	6121      	str	r1, [r4, #16]
 800f2ea:	b913      	cbnz	r3, 800f2f2 <_printf_float+0x18e>
 800f2ec:	6822      	ldr	r2, [r4, #0]
 800f2ee:	07d0      	lsls	r0, r2, #31
 800f2f0:	d502      	bpl.n	800f2f8 <_printf_float+0x194>
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	440b      	add	r3, r1
 800f2f6:	6123      	str	r3, [r4, #16]
 800f2f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f2fa:	f04f 0900 	mov.w	r9, #0
 800f2fe:	e7db      	b.n	800f2b8 <_printf_float+0x154>
 800f300:	b913      	cbnz	r3, 800f308 <_printf_float+0x1a4>
 800f302:	6822      	ldr	r2, [r4, #0]
 800f304:	07d2      	lsls	r2, r2, #31
 800f306:	d501      	bpl.n	800f30c <_printf_float+0x1a8>
 800f308:	3302      	adds	r3, #2
 800f30a:	e7f4      	b.n	800f2f6 <_printf_float+0x192>
 800f30c:	2301      	movs	r3, #1
 800f30e:	e7f2      	b.n	800f2f6 <_printf_float+0x192>
 800f310:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f316:	4299      	cmp	r1, r3
 800f318:	db05      	blt.n	800f326 <_printf_float+0x1c2>
 800f31a:	6823      	ldr	r3, [r4, #0]
 800f31c:	6121      	str	r1, [r4, #16]
 800f31e:	07d8      	lsls	r0, r3, #31
 800f320:	d5ea      	bpl.n	800f2f8 <_printf_float+0x194>
 800f322:	1c4b      	adds	r3, r1, #1
 800f324:	e7e7      	b.n	800f2f6 <_printf_float+0x192>
 800f326:	2900      	cmp	r1, #0
 800f328:	bfd4      	ite	le
 800f32a:	f1c1 0202 	rsble	r2, r1, #2
 800f32e:	2201      	movgt	r2, #1
 800f330:	4413      	add	r3, r2
 800f332:	e7e0      	b.n	800f2f6 <_printf_float+0x192>
 800f334:	6823      	ldr	r3, [r4, #0]
 800f336:	055a      	lsls	r2, r3, #21
 800f338:	d407      	bmi.n	800f34a <_printf_float+0x1e6>
 800f33a:	6923      	ldr	r3, [r4, #16]
 800f33c:	4642      	mov	r2, r8
 800f33e:	4631      	mov	r1, r6
 800f340:	4628      	mov	r0, r5
 800f342:	47b8      	blx	r7
 800f344:	3001      	adds	r0, #1
 800f346:	d12b      	bne.n	800f3a0 <_printf_float+0x23c>
 800f348:	e767      	b.n	800f21a <_printf_float+0xb6>
 800f34a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f34e:	f240 80dd 	bls.w	800f50c <_printf_float+0x3a8>
 800f352:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f356:	2200      	movs	r2, #0
 800f358:	2300      	movs	r3, #0
 800f35a:	f7f1 fbdd 	bl	8000b18 <__aeabi_dcmpeq>
 800f35e:	2800      	cmp	r0, #0
 800f360:	d033      	beq.n	800f3ca <_printf_float+0x266>
 800f362:	4a37      	ldr	r2, [pc, #220]	@ (800f440 <_printf_float+0x2dc>)
 800f364:	2301      	movs	r3, #1
 800f366:	4631      	mov	r1, r6
 800f368:	4628      	mov	r0, r5
 800f36a:	47b8      	blx	r7
 800f36c:	3001      	adds	r0, #1
 800f36e:	f43f af54 	beq.w	800f21a <_printf_float+0xb6>
 800f372:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f376:	4543      	cmp	r3, r8
 800f378:	db02      	blt.n	800f380 <_printf_float+0x21c>
 800f37a:	6823      	ldr	r3, [r4, #0]
 800f37c:	07d8      	lsls	r0, r3, #31
 800f37e:	d50f      	bpl.n	800f3a0 <_printf_float+0x23c>
 800f380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f384:	4631      	mov	r1, r6
 800f386:	4628      	mov	r0, r5
 800f388:	47b8      	blx	r7
 800f38a:	3001      	adds	r0, #1
 800f38c:	f43f af45 	beq.w	800f21a <_printf_float+0xb6>
 800f390:	f04f 0900 	mov.w	r9, #0
 800f394:	f108 38ff 	add.w	r8, r8, #4294967295
 800f398:	f104 0a1a 	add.w	sl, r4, #26
 800f39c:	45c8      	cmp	r8, r9
 800f39e:	dc09      	bgt.n	800f3b4 <_printf_float+0x250>
 800f3a0:	6823      	ldr	r3, [r4, #0]
 800f3a2:	079b      	lsls	r3, r3, #30
 800f3a4:	f100 8103 	bmi.w	800f5ae <_printf_float+0x44a>
 800f3a8:	68e0      	ldr	r0, [r4, #12]
 800f3aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3ac:	4298      	cmp	r0, r3
 800f3ae:	bfb8      	it	lt
 800f3b0:	4618      	movlt	r0, r3
 800f3b2:	e734      	b.n	800f21e <_printf_float+0xba>
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	4652      	mov	r2, sl
 800f3b8:	4631      	mov	r1, r6
 800f3ba:	4628      	mov	r0, r5
 800f3bc:	47b8      	blx	r7
 800f3be:	3001      	adds	r0, #1
 800f3c0:	f43f af2b 	beq.w	800f21a <_printf_float+0xb6>
 800f3c4:	f109 0901 	add.w	r9, r9, #1
 800f3c8:	e7e8      	b.n	800f39c <_printf_float+0x238>
 800f3ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	dc39      	bgt.n	800f444 <_printf_float+0x2e0>
 800f3d0:	4a1b      	ldr	r2, [pc, #108]	@ (800f440 <_printf_float+0x2dc>)
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	4631      	mov	r1, r6
 800f3d6:	4628      	mov	r0, r5
 800f3d8:	47b8      	blx	r7
 800f3da:	3001      	adds	r0, #1
 800f3dc:	f43f af1d 	beq.w	800f21a <_printf_float+0xb6>
 800f3e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f3e4:	ea59 0303 	orrs.w	r3, r9, r3
 800f3e8:	d102      	bne.n	800f3f0 <_printf_float+0x28c>
 800f3ea:	6823      	ldr	r3, [r4, #0]
 800f3ec:	07d9      	lsls	r1, r3, #31
 800f3ee:	d5d7      	bpl.n	800f3a0 <_printf_float+0x23c>
 800f3f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3f4:	4631      	mov	r1, r6
 800f3f6:	4628      	mov	r0, r5
 800f3f8:	47b8      	blx	r7
 800f3fa:	3001      	adds	r0, #1
 800f3fc:	f43f af0d 	beq.w	800f21a <_printf_float+0xb6>
 800f400:	f04f 0a00 	mov.w	sl, #0
 800f404:	f104 0b1a 	add.w	fp, r4, #26
 800f408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f40a:	425b      	negs	r3, r3
 800f40c:	4553      	cmp	r3, sl
 800f40e:	dc01      	bgt.n	800f414 <_printf_float+0x2b0>
 800f410:	464b      	mov	r3, r9
 800f412:	e793      	b.n	800f33c <_printf_float+0x1d8>
 800f414:	2301      	movs	r3, #1
 800f416:	465a      	mov	r2, fp
 800f418:	4631      	mov	r1, r6
 800f41a:	4628      	mov	r0, r5
 800f41c:	47b8      	blx	r7
 800f41e:	3001      	adds	r0, #1
 800f420:	f43f aefb 	beq.w	800f21a <_printf_float+0xb6>
 800f424:	f10a 0a01 	add.w	sl, sl, #1
 800f428:	e7ee      	b.n	800f408 <_printf_float+0x2a4>
 800f42a:	bf00      	nop
 800f42c:	7fefffff 	.word	0x7fefffff
 800f430:	08013b30 	.word	0x08013b30
 800f434:	08013b34 	.word	0x08013b34
 800f438:	08013b38 	.word	0x08013b38
 800f43c:	08013b3c 	.word	0x08013b3c
 800f440:	08013b40 	.word	0x08013b40
 800f444:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f446:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f44a:	4553      	cmp	r3, sl
 800f44c:	bfa8      	it	ge
 800f44e:	4653      	movge	r3, sl
 800f450:	2b00      	cmp	r3, #0
 800f452:	4699      	mov	r9, r3
 800f454:	dc36      	bgt.n	800f4c4 <_printf_float+0x360>
 800f456:	f04f 0b00 	mov.w	fp, #0
 800f45a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f45e:	f104 021a 	add.w	r2, r4, #26
 800f462:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f464:	9306      	str	r3, [sp, #24]
 800f466:	eba3 0309 	sub.w	r3, r3, r9
 800f46a:	455b      	cmp	r3, fp
 800f46c:	dc31      	bgt.n	800f4d2 <_printf_float+0x36e>
 800f46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f470:	459a      	cmp	sl, r3
 800f472:	dc3a      	bgt.n	800f4ea <_printf_float+0x386>
 800f474:	6823      	ldr	r3, [r4, #0]
 800f476:	07da      	lsls	r2, r3, #31
 800f478:	d437      	bmi.n	800f4ea <_printf_float+0x386>
 800f47a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f47c:	ebaa 0903 	sub.w	r9, sl, r3
 800f480:	9b06      	ldr	r3, [sp, #24]
 800f482:	ebaa 0303 	sub.w	r3, sl, r3
 800f486:	4599      	cmp	r9, r3
 800f488:	bfa8      	it	ge
 800f48a:	4699      	movge	r9, r3
 800f48c:	f1b9 0f00 	cmp.w	r9, #0
 800f490:	dc33      	bgt.n	800f4fa <_printf_float+0x396>
 800f492:	f04f 0800 	mov.w	r8, #0
 800f496:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f49a:	f104 0b1a 	add.w	fp, r4, #26
 800f49e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4a0:	ebaa 0303 	sub.w	r3, sl, r3
 800f4a4:	eba3 0309 	sub.w	r3, r3, r9
 800f4a8:	4543      	cmp	r3, r8
 800f4aa:	f77f af79 	ble.w	800f3a0 <_printf_float+0x23c>
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	465a      	mov	r2, fp
 800f4b2:	4631      	mov	r1, r6
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	47b8      	blx	r7
 800f4b8:	3001      	adds	r0, #1
 800f4ba:	f43f aeae 	beq.w	800f21a <_printf_float+0xb6>
 800f4be:	f108 0801 	add.w	r8, r8, #1
 800f4c2:	e7ec      	b.n	800f49e <_printf_float+0x33a>
 800f4c4:	4642      	mov	r2, r8
 800f4c6:	4631      	mov	r1, r6
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	47b8      	blx	r7
 800f4cc:	3001      	adds	r0, #1
 800f4ce:	d1c2      	bne.n	800f456 <_printf_float+0x2f2>
 800f4d0:	e6a3      	b.n	800f21a <_printf_float+0xb6>
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	4631      	mov	r1, r6
 800f4d6:	4628      	mov	r0, r5
 800f4d8:	9206      	str	r2, [sp, #24]
 800f4da:	47b8      	blx	r7
 800f4dc:	3001      	adds	r0, #1
 800f4de:	f43f ae9c 	beq.w	800f21a <_printf_float+0xb6>
 800f4e2:	9a06      	ldr	r2, [sp, #24]
 800f4e4:	f10b 0b01 	add.w	fp, fp, #1
 800f4e8:	e7bb      	b.n	800f462 <_printf_float+0x2fe>
 800f4ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4ee:	4631      	mov	r1, r6
 800f4f0:	4628      	mov	r0, r5
 800f4f2:	47b8      	blx	r7
 800f4f4:	3001      	adds	r0, #1
 800f4f6:	d1c0      	bne.n	800f47a <_printf_float+0x316>
 800f4f8:	e68f      	b.n	800f21a <_printf_float+0xb6>
 800f4fa:	9a06      	ldr	r2, [sp, #24]
 800f4fc:	464b      	mov	r3, r9
 800f4fe:	4442      	add	r2, r8
 800f500:	4631      	mov	r1, r6
 800f502:	4628      	mov	r0, r5
 800f504:	47b8      	blx	r7
 800f506:	3001      	adds	r0, #1
 800f508:	d1c3      	bne.n	800f492 <_printf_float+0x32e>
 800f50a:	e686      	b.n	800f21a <_printf_float+0xb6>
 800f50c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f510:	f1ba 0f01 	cmp.w	sl, #1
 800f514:	dc01      	bgt.n	800f51a <_printf_float+0x3b6>
 800f516:	07db      	lsls	r3, r3, #31
 800f518:	d536      	bpl.n	800f588 <_printf_float+0x424>
 800f51a:	2301      	movs	r3, #1
 800f51c:	4642      	mov	r2, r8
 800f51e:	4631      	mov	r1, r6
 800f520:	4628      	mov	r0, r5
 800f522:	47b8      	blx	r7
 800f524:	3001      	adds	r0, #1
 800f526:	f43f ae78 	beq.w	800f21a <_printf_float+0xb6>
 800f52a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f52e:	4631      	mov	r1, r6
 800f530:	4628      	mov	r0, r5
 800f532:	47b8      	blx	r7
 800f534:	3001      	adds	r0, #1
 800f536:	f43f ae70 	beq.w	800f21a <_printf_float+0xb6>
 800f53a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f53e:	2200      	movs	r2, #0
 800f540:	2300      	movs	r3, #0
 800f542:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f546:	f7f1 fae7 	bl	8000b18 <__aeabi_dcmpeq>
 800f54a:	b9c0      	cbnz	r0, 800f57e <_printf_float+0x41a>
 800f54c:	4653      	mov	r3, sl
 800f54e:	f108 0201 	add.w	r2, r8, #1
 800f552:	4631      	mov	r1, r6
 800f554:	4628      	mov	r0, r5
 800f556:	47b8      	blx	r7
 800f558:	3001      	adds	r0, #1
 800f55a:	d10c      	bne.n	800f576 <_printf_float+0x412>
 800f55c:	e65d      	b.n	800f21a <_printf_float+0xb6>
 800f55e:	2301      	movs	r3, #1
 800f560:	465a      	mov	r2, fp
 800f562:	4631      	mov	r1, r6
 800f564:	4628      	mov	r0, r5
 800f566:	47b8      	blx	r7
 800f568:	3001      	adds	r0, #1
 800f56a:	f43f ae56 	beq.w	800f21a <_printf_float+0xb6>
 800f56e:	f108 0801 	add.w	r8, r8, #1
 800f572:	45d0      	cmp	r8, sl
 800f574:	dbf3      	blt.n	800f55e <_printf_float+0x3fa>
 800f576:	464b      	mov	r3, r9
 800f578:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f57c:	e6df      	b.n	800f33e <_printf_float+0x1da>
 800f57e:	f04f 0800 	mov.w	r8, #0
 800f582:	f104 0b1a 	add.w	fp, r4, #26
 800f586:	e7f4      	b.n	800f572 <_printf_float+0x40e>
 800f588:	2301      	movs	r3, #1
 800f58a:	4642      	mov	r2, r8
 800f58c:	e7e1      	b.n	800f552 <_printf_float+0x3ee>
 800f58e:	2301      	movs	r3, #1
 800f590:	464a      	mov	r2, r9
 800f592:	4631      	mov	r1, r6
 800f594:	4628      	mov	r0, r5
 800f596:	47b8      	blx	r7
 800f598:	3001      	adds	r0, #1
 800f59a:	f43f ae3e 	beq.w	800f21a <_printf_float+0xb6>
 800f59e:	f108 0801 	add.w	r8, r8, #1
 800f5a2:	68e3      	ldr	r3, [r4, #12]
 800f5a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f5a6:	1a5b      	subs	r3, r3, r1
 800f5a8:	4543      	cmp	r3, r8
 800f5aa:	dcf0      	bgt.n	800f58e <_printf_float+0x42a>
 800f5ac:	e6fc      	b.n	800f3a8 <_printf_float+0x244>
 800f5ae:	f04f 0800 	mov.w	r8, #0
 800f5b2:	f104 0919 	add.w	r9, r4, #25
 800f5b6:	e7f4      	b.n	800f5a2 <_printf_float+0x43e>

0800f5b8 <_printf_common>:
 800f5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5bc:	4616      	mov	r6, r2
 800f5be:	4698      	mov	r8, r3
 800f5c0:	688a      	ldr	r2, [r1, #8]
 800f5c2:	690b      	ldr	r3, [r1, #16]
 800f5c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	bfb8      	it	lt
 800f5cc:	4613      	movlt	r3, r2
 800f5ce:	6033      	str	r3, [r6, #0]
 800f5d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f5d4:	4607      	mov	r7, r0
 800f5d6:	460c      	mov	r4, r1
 800f5d8:	b10a      	cbz	r2, 800f5de <_printf_common+0x26>
 800f5da:	3301      	adds	r3, #1
 800f5dc:	6033      	str	r3, [r6, #0]
 800f5de:	6823      	ldr	r3, [r4, #0]
 800f5e0:	0699      	lsls	r1, r3, #26
 800f5e2:	bf42      	ittt	mi
 800f5e4:	6833      	ldrmi	r3, [r6, #0]
 800f5e6:	3302      	addmi	r3, #2
 800f5e8:	6033      	strmi	r3, [r6, #0]
 800f5ea:	6825      	ldr	r5, [r4, #0]
 800f5ec:	f015 0506 	ands.w	r5, r5, #6
 800f5f0:	d106      	bne.n	800f600 <_printf_common+0x48>
 800f5f2:	f104 0a19 	add.w	sl, r4, #25
 800f5f6:	68e3      	ldr	r3, [r4, #12]
 800f5f8:	6832      	ldr	r2, [r6, #0]
 800f5fa:	1a9b      	subs	r3, r3, r2
 800f5fc:	42ab      	cmp	r3, r5
 800f5fe:	dc26      	bgt.n	800f64e <_printf_common+0x96>
 800f600:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f604:	6822      	ldr	r2, [r4, #0]
 800f606:	3b00      	subs	r3, #0
 800f608:	bf18      	it	ne
 800f60a:	2301      	movne	r3, #1
 800f60c:	0692      	lsls	r2, r2, #26
 800f60e:	d42b      	bmi.n	800f668 <_printf_common+0xb0>
 800f610:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f614:	4641      	mov	r1, r8
 800f616:	4638      	mov	r0, r7
 800f618:	47c8      	blx	r9
 800f61a:	3001      	adds	r0, #1
 800f61c:	d01e      	beq.n	800f65c <_printf_common+0xa4>
 800f61e:	6823      	ldr	r3, [r4, #0]
 800f620:	6922      	ldr	r2, [r4, #16]
 800f622:	f003 0306 	and.w	r3, r3, #6
 800f626:	2b04      	cmp	r3, #4
 800f628:	bf02      	ittt	eq
 800f62a:	68e5      	ldreq	r5, [r4, #12]
 800f62c:	6833      	ldreq	r3, [r6, #0]
 800f62e:	1aed      	subeq	r5, r5, r3
 800f630:	68a3      	ldr	r3, [r4, #8]
 800f632:	bf0c      	ite	eq
 800f634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f638:	2500      	movne	r5, #0
 800f63a:	4293      	cmp	r3, r2
 800f63c:	bfc4      	itt	gt
 800f63e:	1a9b      	subgt	r3, r3, r2
 800f640:	18ed      	addgt	r5, r5, r3
 800f642:	2600      	movs	r6, #0
 800f644:	341a      	adds	r4, #26
 800f646:	42b5      	cmp	r5, r6
 800f648:	d11a      	bne.n	800f680 <_printf_common+0xc8>
 800f64a:	2000      	movs	r0, #0
 800f64c:	e008      	b.n	800f660 <_printf_common+0xa8>
 800f64e:	2301      	movs	r3, #1
 800f650:	4652      	mov	r2, sl
 800f652:	4641      	mov	r1, r8
 800f654:	4638      	mov	r0, r7
 800f656:	47c8      	blx	r9
 800f658:	3001      	adds	r0, #1
 800f65a:	d103      	bne.n	800f664 <_printf_common+0xac>
 800f65c:	f04f 30ff 	mov.w	r0, #4294967295
 800f660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f664:	3501      	adds	r5, #1
 800f666:	e7c6      	b.n	800f5f6 <_printf_common+0x3e>
 800f668:	18e1      	adds	r1, r4, r3
 800f66a:	1c5a      	adds	r2, r3, #1
 800f66c:	2030      	movs	r0, #48	@ 0x30
 800f66e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f672:	4422      	add	r2, r4
 800f674:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f678:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f67c:	3302      	adds	r3, #2
 800f67e:	e7c7      	b.n	800f610 <_printf_common+0x58>
 800f680:	2301      	movs	r3, #1
 800f682:	4622      	mov	r2, r4
 800f684:	4641      	mov	r1, r8
 800f686:	4638      	mov	r0, r7
 800f688:	47c8      	blx	r9
 800f68a:	3001      	adds	r0, #1
 800f68c:	d0e6      	beq.n	800f65c <_printf_common+0xa4>
 800f68e:	3601      	adds	r6, #1
 800f690:	e7d9      	b.n	800f646 <_printf_common+0x8e>
	...

0800f694 <_printf_i>:
 800f694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f698:	7e0f      	ldrb	r7, [r1, #24]
 800f69a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f69c:	2f78      	cmp	r7, #120	@ 0x78
 800f69e:	4691      	mov	r9, r2
 800f6a0:	4680      	mov	r8, r0
 800f6a2:	460c      	mov	r4, r1
 800f6a4:	469a      	mov	sl, r3
 800f6a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f6aa:	d807      	bhi.n	800f6bc <_printf_i+0x28>
 800f6ac:	2f62      	cmp	r7, #98	@ 0x62
 800f6ae:	d80a      	bhi.n	800f6c6 <_printf_i+0x32>
 800f6b0:	2f00      	cmp	r7, #0
 800f6b2:	f000 80d2 	beq.w	800f85a <_printf_i+0x1c6>
 800f6b6:	2f58      	cmp	r7, #88	@ 0x58
 800f6b8:	f000 80b9 	beq.w	800f82e <_printf_i+0x19a>
 800f6bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f6c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f6c4:	e03a      	b.n	800f73c <_printf_i+0xa8>
 800f6c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f6ca:	2b15      	cmp	r3, #21
 800f6cc:	d8f6      	bhi.n	800f6bc <_printf_i+0x28>
 800f6ce:	a101      	add	r1, pc, #4	@ (adr r1, 800f6d4 <_printf_i+0x40>)
 800f6d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f6d4:	0800f72d 	.word	0x0800f72d
 800f6d8:	0800f741 	.word	0x0800f741
 800f6dc:	0800f6bd 	.word	0x0800f6bd
 800f6e0:	0800f6bd 	.word	0x0800f6bd
 800f6e4:	0800f6bd 	.word	0x0800f6bd
 800f6e8:	0800f6bd 	.word	0x0800f6bd
 800f6ec:	0800f741 	.word	0x0800f741
 800f6f0:	0800f6bd 	.word	0x0800f6bd
 800f6f4:	0800f6bd 	.word	0x0800f6bd
 800f6f8:	0800f6bd 	.word	0x0800f6bd
 800f6fc:	0800f6bd 	.word	0x0800f6bd
 800f700:	0800f841 	.word	0x0800f841
 800f704:	0800f76b 	.word	0x0800f76b
 800f708:	0800f7fb 	.word	0x0800f7fb
 800f70c:	0800f6bd 	.word	0x0800f6bd
 800f710:	0800f6bd 	.word	0x0800f6bd
 800f714:	0800f863 	.word	0x0800f863
 800f718:	0800f6bd 	.word	0x0800f6bd
 800f71c:	0800f76b 	.word	0x0800f76b
 800f720:	0800f6bd 	.word	0x0800f6bd
 800f724:	0800f6bd 	.word	0x0800f6bd
 800f728:	0800f803 	.word	0x0800f803
 800f72c:	6833      	ldr	r3, [r6, #0]
 800f72e:	1d1a      	adds	r2, r3, #4
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	6032      	str	r2, [r6, #0]
 800f734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f738:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f73c:	2301      	movs	r3, #1
 800f73e:	e09d      	b.n	800f87c <_printf_i+0x1e8>
 800f740:	6833      	ldr	r3, [r6, #0]
 800f742:	6820      	ldr	r0, [r4, #0]
 800f744:	1d19      	adds	r1, r3, #4
 800f746:	6031      	str	r1, [r6, #0]
 800f748:	0606      	lsls	r6, r0, #24
 800f74a:	d501      	bpl.n	800f750 <_printf_i+0xbc>
 800f74c:	681d      	ldr	r5, [r3, #0]
 800f74e:	e003      	b.n	800f758 <_printf_i+0xc4>
 800f750:	0645      	lsls	r5, r0, #25
 800f752:	d5fb      	bpl.n	800f74c <_printf_i+0xb8>
 800f754:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f758:	2d00      	cmp	r5, #0
 800f75a:	da03      	bge.n	800f764 <_printf_i+0xd0>
 800f75c:	232d      	movs	r3, #45	@ 0x2d
 800f75e:	426d      	negs	r5, r5
 800f760:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f764:	4859      	ldr	r0, [pc, #356]	@ (800f8cc <_printf_i+0x238>)
 800f766:	230a      	movs	r3, #10
 800f768:	e011      	b.n	800f78e <_printf_i+0xfa>
 800f76a:	6821      	ldr	r1, [r4, #0]
 800f76c:	6833      	ldr	r3, [r6, #0]
 800f76e:	0608      	lsls	r0, r1, #24
 800f770:	f853 5b04 	ldr.w	r5, [r3], #4
 800f774:	d402      	bmi.n	800f77c <_printf_i+0xe8>
 800f776:	0649      	lsls	r1, r1, #25
 800f778:	bf48      	it	mi
 800f77a:	b2ad      	uxthmi	r5, r5
 800f77c:	2f6f      	cmp	r7, #111	@ 0x6f
 800f77e:	4853      	ldr	r0, [pc, #332]	@ (800f8cc <_printf_i+0x238>)
 800f780:	6033      	str	r3, [r6, #0]
 800f782:	bf14      	ite	ne
 800f784:	230a      	movne	r3, #10
 800f786:	2308      	moveq	r3, #8
 800f788:	2100      	movs	r1, #0
 800f78a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f78e:	6866      	ldr	r6, [r4, #4]
 800f790:	60a6      	str	r6, [r4, #8]
 800f792:	2e00      	cmp	r6, #0
 800f794:	bfa2      	ittt	ge
 800f796:	6821      	ldrge	r1, [r4, #0]
 800f798:	f021 0104 	bicge.w	r1, r1, #4
 800f79c:	6021      	strge	r1, [r4, #0]
 800f79e:	b90d      	cbnz	r5, 800f7a4 <_printf_i+0x110>
 800f7a0:	2e00      	cmp	r6, #0
 800f7a2:	d04b      	beq.n	800f83c <_printf_i+0x1a8>
 800f7a4:	4616      	mov	r6, r2
 800f7a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800f7aa:	fb03 5711 	mls	r7, r3, r1, r5
 800f7ae:	5dc7      	ldrb	r7, [r0, r7]
 800f7b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f7b4:	462f      	mov	r7, r5
 800f7b6:	42bb      	cmp	r3, r7
 800f7b8:	460d      	mov	r5, r1
 800f7ba:	d9f4      	bls.n	800f7a6 <_printf_i+0x112>
 800f7bc:	2b08      	cmp	r3, #8
 800f7be:	d10b      	bne.n	800f7d8 <_printf_i+0x144>
 800f7c0:	6823      	ldr	r3, [r4, #0]
 800f7c2:	07df      	lsls	r7, r3, #31
 800f7c4:	d508      	bpl.n	800f7d8 <_printf_i+0x144>
 800f7c6:	6923      	ldr	r3, [r4, #16]
 800f7c8:	6861      	ldr	r1, [r4, #4]
 800f7ca:	4299      	cmp	r1, r3
 800f7cc:	bfde      	ittt	le
 800f7ce:	2330      	movle	r3, #48	@ 0x30
 800f7d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f7d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f7d8:	1b92      	subs	r2, r2, r6
 800f7da:	6122      	str	r2, [r4, #16]
 800f7dc:	f8cd a000 	str.w	sl, [sp]
 800f7e0:	464b      	mov	r3, r9
 800f7e2:	aa03      	add	r2, sp, #12
 800f7e4:	4621      	mov	r1, r4
 800f7e6:	4640      	mov	r0, r8
 800f7e8:	f7ff fee6 	bl	800f5b8 <_printf_common>
 800f7ec:	3001      	adds	r0, #1
 800f7ee:	d14a      	bne.n	800f886 <_printf_i+0x1f2>
 800f7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f4:	b004      	add	sp, #16
 800f7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7fa:	6823      	ldr	r3, [r4, #0]
 800f7fc:	f043 0320 	orr.w	r3, r3, #32
 800f800:	6023      	str	r3, [r4, #0]
 800f802:	4833      	ldr	r0, [pc, #204]	@ (800f8d0 <_printf_i+0x23c>)
 800f804:	2778      	movs	r7, #120	@ 0x78
 800f806:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f80a:	6823      	ldr	r3, [r4, #0]
 800f80c:	6831      	ldr	r1, [r6, #0]
 800f80e:	061f      	lsls	r7, r3, #24
 800f810:	f851 5b04 	ldr.w	r5, [r1], #4
 800f814:	d402      	bmi.n	800f81c <_printf_i+0x188>
 800f816:	065f      	lsls	r7, r3, #25
 800f818:	bf48      	it	mi
 800f81a:	b2ad      	uxthmi	r5, r5
 800f81c:	6031      	str	r1, [r6, #0]
 800f81e:	07d9      	lsls	r1, r3, #31
 800f820:	bf44      	itt	mi
 800f822:	f043 0320 	orrmi.w	r3, r3, #32
 800f826:	6023      	strmi	r3, [r4, #0]
 800f828:	b11d      	cbz	r5, 800f832 <_printf_i+0x19e>
 800f82a:	2310      	movs	r3, #16
 800f82c:	e7ac      	b.n	800f788 <_printf_i+0xf4>
 800f82e:	4827      	ldr	r0, [pc, #156]	@ (800f8cc <_printf_i+0x238>)
 800f830:	e7e9      	b.n	800f806 <_printf_i+0x172>
 800f832:	6823      	ldr	r3, [r4, #0]
 800f834:	f023 0320 	bic.w	r3, r3, #32
 800f838:	6023      	str	r3, [r4, #0]
 800f83a:	e7f6      	b.n	800f82a <_printf_i+0x196>
 800f83c:	4616      	mov	r6, r2
 800f83e:	e7bd      	b.n	800f7bc <_printf_i+0x128>
 800f840:	6833      	ldr	r3, [r6, #0]
 800f842:	6825      	ldr	r5, [r4, #0]
 800f844:	6961      	ldr	r1, [r4, #20]
 800f846:	1d18      	adds	r0, r3, #4
 800f848:	6030      	str	r0, [r6, #0]
 800f84a:	062e      	lsls	r6, r5, #24
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	d501      	bpl.n	800f854 <_printf_i+0x1c0>
 800f850:	6019      	str	r1, [r3, #0]
 800f852:	e002      	b.n	800f85a <_printf_i+0x1c6>
 800f854:	0668      	lsls	r0, r5, #25
 800f856:	d5fb      	bpl.n	800f850 <_printf_i+0x1bc>
 800f858:	8019      	strh	r1, [r3, #0]
 800f85a:	2300      	movs	r3, #0
 800f85c:	6123      	str	r3, [r4, #16]
 800f85e:	4616      	mov	r6, r2
 800f860:	e7bc      	b.n	800f7dc <_printf_i+0x148>
 800f862:	6833      	ldr	r3, [r6, #0]
 800f864:	1d1a      	adds	r2, r3, #4
 800f866:	6032      	str	r2, [r6, #0]
 800f868:	681e      	ldr	r6, [r3, #0]
 800f86a:	6862      	ldr	r2, [r4, #4]
 800f86c:	2100      	movs	r1, #0
 800f86e:	4630      	mov	r0, r6
 800f870:	f7f0 fcd6 	bl	8000220 <memchr>
 800f874:	b108      	cbz	r0, 800f87a <_printf_i+0x1e6>
 800f876:	1b80      	subs	r0, r0, r6
 800f878:	6060      	str	r0, [r4, #4]
 800f87a:	6863      	ldr	r3, [r4, #4]
 800f87c:	6123      	str	r3, [r4, #16]
 800f87e:	2300      	movs	r3, #0
 800f880:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f884:	e7aa      	b.n	800f7dc <_printf_i+0x148>
 800f886:	6923      	ldr	r3, [r4, #16]
 800f888:	4632      	mov	r2, r6
 800f88a:	4649      	mov	r1, r9
 800f88c:	4640      	mov	r0, r8
 800f88e:	47d0      	blx	sl
 800f890:	3001      	adds	r0, #1
 800f892:	d0ad      	beq.n	800f7f0 <_printf_i+0x15c>
 800f894:	6823      	ldr	r3, [r4, #0]
 800f896:	079b      	lsls	r3, r3, #30
 800f898:	d413      	bmi.n	800f8c2 <_printf_i+0x22e>
 800f89a:	68e0      	ldr	r0, [r4, #12]
 800f89c:	9b03      	ldr	r3, [sp, #12]
 800f89e:	4298      	cmp	r0, r3
 800f8a0:	bfb8      	it	lt
 800f8a2:	4618      	movlt	r0, r3
 800f8a4:	e7a6      	b.n	800f7f4 <_printf_i+0x160>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	4632      	mov	r2, r6
 800f8aa:	4649      	mov	r1, r9
 800f8ac:	4640      	mov	r0, r8
 800f8ae:	47d0      	blx	sl
 800f8b0:	3001      	adds	r0, #1
 800f8b2:	d09d      	beq.n	800f7f0 <_printf_i+0x15c>
 800f8b4:	3501      	adds	r5, #1
 800f8b6:	68e3      	ldr	r3, [r4, #12]
 800f8b8:	9903      	ldr	r1, [sp, #12]
 800f8ba:	1a5b      	subs	r3, r3, r1
 800f8bc:	42ab      	cmp	r3, r5
 800f8be:	dcf2      	bgt.n	800f8a6 <_printf_i+0x212>
 800f8c0:	e7eb      	b.n	800f89a <_printf_i+0x206>
 800f8c2:	2500      	movs	r5, #0
 800f8c4:	f104 0619 	add.w	r6, r4, #25
 800f8c8:	e7f5      	b.n	800f8b6 <_printf_i+0x222>
 800f8ca:	bf00      	nop
 800f8cc:	08013b42 	.word	0x08013b42
 800f8d0:	08013b53 	.word	0x08013b53

0800f8d4 <_scanf_float>:
 800f8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d8:	b087      	sub	sp, #28
 800f8da:	4617      	mov	r7, r2
 800f8dc:	9303      	str	r3, [sp, #12]
 800f8de:	688b      	ldr	r3, [r1, #8]
 800f8e0:	1e5a      	subs	r2, r3, #1
 800f8e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f8e6:	bf81      	itttt	hi
 800f8e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f8ec:	eb03 0b05 	addhi.w	fp, r3, r5
 800f8f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f8f4:	608b      	strhi	r3, [r1, #8]
 800f8f6:	680b      	ldr	r3, [r1, #0]
 800f8f8:	460a      	mov	r2, r1
 800f8fa:	f04f 0500 	mov.w	r5, #0
 800f8fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f902:	f842 3b1c 	str.w	r3, [r2], #28
 800f906:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f90a:	4680      	mov	r8, r0
 800f90c:	460c      	mov	r4, r1
 800f90e:	bf98      	it	ls
 800f910:	f04f 0b00 	movls.w	fp, #0
 800f914:	9201      	str	r2, [sp, #4]
 800f916:	4616      	mov	r6, r2
 800f918:	46aa      	mov	sl, r5
 800f91a:	46a9      	mov	r9, r5
 800f91c:	9502      	str	r5, [sp, #8]
 800f91e:	68a2      	ldr	r2, [r4, #8]
 800f920:	b152      	cbz	r2, 800f938 <_scanf_float+0x64>
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	2b4e      	cmp	r3, #78	@ 0x4e
 800f928:	d864      	bhi.n	800f9f4 <_scanf_float+0x120>
 800f92a:	2b40      	cmp	r3, #64	@ 0x40
 800f92c:	d83c      	bhi.n	800f9a8 <_scanf_float+0xd4>
 800f92e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f932:	b2c8      	uxtb	r0, r1
 800f934:	280e      	cmp	r0, #14
 800f936:	d93a      	bls.n	800f9ae <_scanf_float+0xda>
 800f938:	f1b9 0f00 	cmp.w	r9, #0
 800f93c:	d003      	beq.n	800f946 <_scanf_float+0x72>
 800f93e:	6823      	ldr	r3, [r4, #0]
 800f940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f944:	6023      	str	r3, [r4, #0]
 800f946:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f94a:	f1ba 0f01 	cmp.w	sl, #1
 800f94e:	f200 8117 	bhi.w	800fb80 <_scanf_float+0x2ac>
 800f952:	9b01      	ldr	r3, [sp, #4]
 800f954:	429e      	cmp	r6, r3
 800f956:	f200 8108 	bhi.w	800fb6a <_scanf_float+0x296>
 800f95a:	2001      	movs	r0, #1
 800f95c:	b007      	add	sp, #28
 800f95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f962:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f966:	2a0d      	cmp	r2, #13
 800f968:	d8e6      	bhi.n	800f938 <_scanf_float+0x64>
 800f96a:	a101      	add	r1, pc, #4	@ (adr r1, 800f970 <_scanf_float+0x9c>)
 800f96c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f970:	0800fab7 	.word	0x0800fab7
 800f974:	0800f939 	.word	0x0800f939
 800f978:	0800f939 	.word	0x0800f939
 800f97c:	0800f939 	.word	0x0800f939
 800f980:	0800fb17 	.word	0x0800fb17
 800f984:	0800faef 	.word	0x0800faef
 800f988:	0800f939 	.word	0x0800f939
 800f98c:	0800f939 	.word	0x0800f939
 800f990:	0800fac5 	.word	0x0800fac5
 800f994:	0800f939 	.word	0x0800f939
 800f998:	0800f939 	.word	0x0800f939
 800f99c:	0800f939 	.word	0x0800f939
 800f9a0:	0800f939 	.word	0x0800f939
 800f9a4:	0800fa7d 	.word	0x0800fa7d
 800f9a8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f9ac:	e7db      	b.n	800f966 <_scanf_float+0x92>
 800f9ae:	290e      	cmp	r1, #14
 800f9b0:	d8c2      	bhi.n	800f938 <_scanf_float+0x64>
 800f9b2:	a001      	add	r0, pc, #4	@ (adr r0, 800f9b8 <_scanf_float+0xe4>)
 800f9b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f9b8:	0800fa6d 	.word	0x0800fa6d
 800f9bc:	0800f939 	.word	0x0800f939
 800f9c0:	0800fa6d 	.word	0x0800fa6d
 800f9c4:	0800fb03 	.word	0x0800fb03
 800f9c8:	0800f939 	.word	0x0800f939
 800f9cc:	0800fa15 	.word	0x0800fa15
 800f9d0:	0800fa53 	.word	0x0800fa53
 800f9d4:	0800fa53 	.word	0x0800fa53
 800f9d8:	0800fa53 	.word	0x0800fa53
 800f9dc:	0800fa53 	.word	0x0800fa53
 800f9e0:	0800fa53 	.word	0x0800fa53
 800f9e4:	0800fa53 	.word	0x0800fa53
 800f9e8:	0800fa53 	.word	0x0800fa53
 800f9ec:	0800fa53 	.word	0x0800fa53
 800f9f0:	0800fa53 	.word	0x0800fa53
 800f9f4:	2b6e      	cmp	r3, #110	@ 0x6e
 800f9f6:	d809      	bhi.n	800fa0c <_scanf_float+0x138>
 800f9f8:	2b60      	cmp	r3, #96	@ 0x60
 800f9fa:	d8b2      	bhi.n	800f962 <_scanf_float+0x8e>
 800f9fc:	2b54      	cmp	r3, #84	@ 0x54
 800f9fe:	d07b      	beq.n	800faf8 <_scanf_float+0x224>
 800fa00:	2b59      	cmp	r3, #89	@ 0x59
 800fa02:	d199      	bne.n	800f938 <_scanf_float+0x64>
 800fa04:	2d07      	cmp	r5, #7
 800fa06:	d197      	bne.n	800f938 <_scanf_float+0x64>
 800fa08:	2508      	movs	r5, #8
 800fa0a:	e02c      	b.n	800fa66 <_scanf_float+0x192>
 800fa0c:	2b74      	cmp	r3, #116	@ 0x74
 800fa0e:	d073      	beq.n	800faf8 <_scanf_float+0x224>
 800fa10:	2b79      	cmp	r3, #121	@ 0x79
 800fa12:	e7f6      	b.n	800fa02 <_scanf_float+0x12e>
 800fa14:	6821      	ldr	r1, [r4, #0]
 800fa16:	05c8      	lsls	r0, r1, #23
 800fa18:	d51b      	bpl.n	800fa52 <_scanf_float+0x17e>
 800fa1a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800fa1e:	6021      	str	r1, [r4, #0]
 800fa20:	f109 0901 	add.w	r9, r9, #1
 800fa24:	f1bb 0f00 	cmp.w	fp, #0
 800fa28:	d003      	beq.n	800fa32 <_scanf_float+0x15e>
 800fa2a:	3201      	adds	r2, #1
 800fa2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fa30:	60a2      	str	r2, [r4, #8]
 800fa32:	68a3      	ldr	r3, [r4, #8]
 800fa34:	3b01      	subs	r3, #1
 800fa36:	60a3      	str	r3, [r4, #8]
 800fa38:	6923      	ldr	r3, [r4, #16]
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	6123      	str	r3, [r4, #16]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	3b01      	subs	r3, #1
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	607b      	str	r3, [r7, #4]
 800fa46:	f340 8087 	ble.w	800fb58 <_scanf_float+0x284>
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	603b      	str	r3, [r7, #0]
 800fa50:	e765      	b.n	800f91e <_scanf_float+0x4a>
 800fa52:	eb1a 0105 	adds.w	r1, sl, r5
 800fa56:	f47f af6f 	bne.w	800f938 <_scanf_float+0x64>
 800fa5a:	6822      	ldr	r2, [r4, #0]
 800fa5c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800fa60:	6022      	str	r2, [r4, #0]
 800fa62:	460d      	mov	r5, r1
 800fa64:	468a      	mov	sl, r1
 800fa66:	f806 3b01 	strb.w	r3, [r6], #1
 800fa6a:	e7e2      	b.n	800fa32 <_scanf_float+0x15e>
 800fa6c:	6822      	ldr	r2, [r4, #0]
 800fa6e:	0610      	lsls	r0, r2, #24
 800fa70:	f57f af62 	bpl.w	800f938 <_scanf_float+0x64>
 800fa74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fa78:	6022      	str	r2, [r4, #0]
 800fa7a:	e7f4      	b.n	800fa66 <_scanf_float+0x192>
 800fa7c:	f1ba 0f00 	cmp.w	sl, #0
 800fa80:	d10e      	bne.n	800faa0 <_scanf_float+0x1cc>
 800fa82:	f1b9 0f00 	cmp.w	r9, #0
 800fa86:	d10e      	bne.n	800faa6 <_scanf_float+0x1d2>
 800fa88:	6822      	ldr	r2, [r4, #0]
 800fa8a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fa8e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fa92:	d108      	bne.n	800faa6 <_scanf_float+0x1d2>
 800fa94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fa98:	6022      	str	r2, [r4, #0]
 800fa9a:	f04f 0a01 	mov.w	sl, #1
 800fa9e:	e7e2      	b.n	800fa66 <_scanf_float+0x192>
 800faa0:	f1ba 0f02 	cmp.w	sl, #2
 800faa4:	d055      	beq.n	800fb52 <_scanf_float+0x27e>
 800faa6:	2d01      	cmp	r5, #1
 800faa8:	d002      	beq.n	800fab0 <_scanf_float+0x1dc>
 800faaa:	2d04      	cmp	r5, #4
 800faac:	f47f af44 	bne.w	800f938 <_scanf_float+0x64>
 800fab0:	3501      	adds	r5, #1
 800fab2:	b2ed      	uxtb	r5, r5
 800fab4:	e7d7      	b.n	800fa66 <_scanf_float+0x192>
 800fab6:	f1ba 0f01 	cmp.w	sl, #1
 800faba:	f47f af3d 	bne.w	800f938 <_scanf_float+0x64>
 800fabe:	f04f 0a02 	mov.w	sl, #2
 800fac2:	e7d0      	b.n	800fa66 <_scanf_float+0x192>
 800fac4:	b97d      	cbnz	r5, 800fae6 <_scanf_float+0x212>
 800fac6:	f1b9 0f00 	cmp.w	r9, #0
 800faca:	f47f af38 	bne.w	800f93e <_scanf_float+0x6a>
 800face:	6822      	ldr	r2, [r4, #0]
 800fad0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fad4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fad8:	f040 8108 	bne.w	800fcec <_scanf_float+0x418>
 800fadc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fae0:	6022      	str	r2, [r4, #0]
 800fae2:	2501      	movs	r5, #1
 800fae4:	e7bf      	b.n	800fa66 <_scanf_float+0x192>
 800fae6:	2d03      	cmp	r5, #3
 800fae8:	d0e2      	beq.n	800fab0 <_scanf_float+0x1dc>
 800faea:	2d05      	cmp	r5, #5
 800faec:	e7de      	b.n	800faac <_scanf_float+0x1d8>
 800faee:	2d02      	cmp	r5, #2
 800faf0:	f47f af22 	bne.w	800f938 <_scanf_float+0x64>
 800faf4:	2503      	movs	r5, #3
 800faf6:	e7b6      	b.n	800fa66 <_scanf_float+0x192>
 800faf8:	2d06      	cmp	r5, #6
 800fafa:	f47f af1d 	bne.w	800f938 <_scanf_float+0x64>
 800fafe:	2507      	movs	r5, #7
 800fb00:	e7b1      	b.n	800fa66 <_scanf_float+0x192>
 800fb02:	6822      	ldr	r2, [r4, #0]
 800fb04:	0591      	lsls	r1, r2, #22
 800fb06:	f57f af17 	bpl.w	800f938 <_scanf_float+0x64>
 800fb0a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800fb0e:	6022      	str	r2, [r4, #0]
 800fb10:	f8cd 9008 	str.w	r9, [sp, #8]
 800fb14:	e7a7      	b.n	800fa66 <_scanf_float+0x192>
 800fb16:	6822      	ldr	r2, [r4, #0]
 800fb18:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800fb1c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800fb20:	d006      	beq.n	800fb30 <_scanf_float+0x25c>
 800fb22:	0550      	lsls	r0, r2, #21
 800fb24:	f57f af08 	bpl.w	800f938 <_scanf_float+0x64>
 800fb28:	f1b9 0f00 	cmp.w	r9, #0
 800fb2c:	f000 80de 	beq.w	800fcec <_scanf_float+0x418>
 800fb30:	0591      	lsls	r1, r2, #22
 800fb32:	bf58      	it	pl
 800fb34:	9902      	ldrpl	r1, [sp, #8]
 800fb36:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fb3a:	bf58      	it	pl
 800fb3c:	eba9 0101 	subpl.w	r1, r9, r1
 800fb40:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800fb44:	bf58      	it	pl
 800fb46:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fb4a:	6022      	str	r2, [r4, #0]
 800fb4c:	f04f 0900 	mov.w	r9, #0
 800fb50:	e789      	b.n	800fa66 <_scanf_float+0x192>
 800fb52:	f04f 0a03 	mov.w	sl, #3
 800fb56:	e786      	b.n	800fa66 <_scanf_float+0x192>
 800fb58:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fb5c:	4639      	mov	r1, r7
 800fb5e:	4640      	mov	r0, r8
 800fb60:	4798      	blx	r3
 800fb62:	2800      	cmp	r0, #0
 800fb64:	f43f aedb 	beq.w	800f91e <_scanf_float+0x4a>
 800fb68:	e6e6      	b.n	800f938 <_scanf_float+0x64>
 800fb6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fb6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb72:	463a      	mov	r2, r7
 800fb74:	4640      	mov	r0, r8
 800fb76:	4798      	blx	r3
 800fb78:	6923      	ldr	r3, [r4, #16]
 800fb7a:	3b01      	subs	r3, #1
 800fb7c:	6123      	str	r3, [r4, #16]
 800fb7e:	e6e8      	b.n	800f952 <_scanf_float+0x7e>
 800fb80:	1e6b      	subs	r3, r5, #1
 800fb82:	2b06      	cmp	r3, #6
 800fb84:	d824      	bhi.n	800fbd0 <_scanf_float+0x2fc>
 800fb86:	2d02      	cmp	r5, #2
 800fb88:	d836      	bhi.n	800fbf8 <_scanf_float+0x324>
 800fb8a:	9b01      	ldr	r3, [sp, #4]
 800fb8c:	429e      	cmp	r6, r3
 800fb8e:	f67f aee4 	bls.w	800f95a <_scanf_float+0x86>
 800fb92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fb96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb9a:	463a      	mov	r2, r7
 800fb9c:	4640      	mov	r0, r8
 800fb9e:	4798      	blx	r3
 800fba0:	6923      	ldr	r3, [r4, #16]
 800fba2:	3b01      	subs	r3, #1
 800fba4:	6123      	str	r3, [r4, #16]
 800fba6:	e7f0      	b.n	800fb8a <_scanf_float+0x2b6>
 800fba8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fbac:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fbb0:	463a      	mov	r2, r7
 800fbb2:	4640      	mov	r0, r8
 800fbb4:	4798      	blx	r3
 800fbb6:	6923      	ldr	r3, [r4, #16]
 800fbb8:	3b01      	subs	r3, #1
 800fbba:	6123      	str	r3, [r4, #16]
 800fbbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbc0:	fa5f fa8a 	uxtb.w	sl, sl
 800fbc4:	f1ba 0f02 	cmp.w	sl, #2
 800fbc8:	d1ee      	bne.n	800fba8 <_scanf_float+0x2d4>
 800fbca:	3d03      	subs	r5, #3
 800fbcc:	b2ed      	uxtb	r5, r5
 800fbce:	1b76      	subs	r6, r6, r5
 800fbd0:	6823      	ldr	r3, [r4, #0]
 800fbd2:	05da      	lsls	r2, r3, #23
 800fbd4:	d530      	bpl.n	800fc38 <_scanf_float+0x364>
 800fbd6:	055b      	lsls	r3, r3, #21
 800fbd8:	d511      	bpl.n	800fbfe <_scanf_float+0x32a>
 800fbda:	9b01      	ldr	r3, [sp, #4]
 800fbdc:	429e      	cmp	r6, r3
 800fbde:	f67f aebc 	bls.w	800f95a <_scanf_float+0x86>
 800fbe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fbe6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fbea:	463a      	mov	r2, r7
 800fbec:	4640      	mov	r0, r8
 800fbee:	4798      	blx	r3
 800fbf0:	6923      	ldr	r3, [r4, #16]
 800fbf2:	3b01      	subs	r3, #1
 800fbf4:	6123      	str	r3, [r4, #16]
 800fbf6:	e7f0      	b.n	800fbda <_scanf_float+0x306>
 800fbf8:	46aa      	mov	sl, r5
 800fbfa:	46b3      	mov	fp, r6
 800fbfc:	e7de      	b.n	800fbbc <_scanf_float+0x2e8>
 800fbfe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fc02:	6923      	ldr	r3, [r4, #16]
 800fc04:	2965      	cmp	r1, #101	@ 0x65
 800fc06:	f103 33ff 	add.w	r3, r3, #4294967295
 800fc0a:	f106 35ff 	add.w	r5, r6, #4294967295
 800fc0e:	6123      	str	r3, [r4, #16]
 800fc10:	d00c      	beq.n	800fc2c <_scanf_float+0x358>
 800fc12:	2945      	cmp	r1, #69	@ 0x45
 800fc14:	d00a      	beq.n	800fc2c <_scanf_float+0x358>
 800fc16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc1a:	463a      	mov	r2, r7
 800fc1c:	4640      	mov	r0, r8
 800fc1e:	4798      	blx	r3
 800fc20:	6923      	ldr	r3, [r4, #16]
 800fc22:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fc26:	3b01      	subs	r3, #1
 800fc28:	1eb5      	subs	r5, r6, #2
 800fc2a:	6123      	str	r3, [r4, #16]
 800fc2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc30:	463a      	mov	r2, r7
 800fc32:	4640      	mov	r0, r8
 800fc34:	4798      	blx	r3
 800fc36:	462e      	mov	r6, r5
 800fc38:	6822      	ldr	r2, [r4, #0]
 800fc3a:	f012 0210 	ands.w	r2, r2, #16
 800fc3e:	d001      	beq.n	800fc44 <_scanf_float+0x370>
 800fc40:	2000      	movs	r0, #0
 800fc42:	e68b      	b.n	800f95c <_scanf_float+0x88>
 800fc44:	7032      	strb	r2, [r6, #0]
 800fc46:	6823      	ldr	r3, [r4, #0]
 800fc48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fc4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fc50:	d11c      	bne.n	800fc8c <_scanf_float+0x3b8>
 800fc52:	9b02      	ldr	r3, [sp, #8]
 800fc54:	454b      	cmp	r3, r9
 800fc56:	eba3 0209 	sub.w	r2, r3, r9
 800fc5a:	d123      	bne.n	800fca4 <_scanf_float+0x3d0>
 800fc5c:	9901      	ldr	r1, [sp, #4]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	4640      	mov	r0, r8
 800fc62:	f7ff f9cd 	bl	800f000 <_strtod_r>
 800fc66:	9b03      	ldr	r3, [sp, #12]
 800fc68:	6821      	ldr	r1, [r4, #0]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	f011 0f02 	tst.w	r1, #2
 800fc70:	ec57 6b10 	vmov	r6, r7, d0
 800fc74:	f103 0204 	add.w	r2, r3, #4
 800fc78:	d01f      	beq.n	800fcba <_scanf_float+0x3e6>
 800fc7a:	9903      	ldr	r1, [sp, #12]
 800fc7c:	600a      	str	r2, [r1, #0]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	e9c3 6700 	strd	r6, r7, [r3]
 800fc84:	68e3      	ldr	r3, [r4, #12]
 800fc86:	3301      	adds	r3, #1
 800fc88:	60e3      	str	r3, [r4, #12]
 800fc8a:	e7d9      	b.n	800fc40 <_scanf_float+0x36c>
 800fc8c:	9b04      	ldr	r3, [sp, #16]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d0e4      	beq.n	800fc5c <_scanf_float+0x388>
 800fc92:	9905      	ldr	r1, [sp, #20]
 800fc94:	230a      	movs	r3, #10
 800fc96:	3101      	adds	r1, #1
 800fc98:	4640      	mov	r0, r8
 800fc9a:	f002 f9e9 	bl	8012070 <_strtol_r>
 800fc9e:	9b04      	ldr	r3, [sp, #16]
 800fca0:	9e05      	ldr	r6, [sp, #20]
 800fca2:	1ac2      	subs	r2, r0, r3
 800fca4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800fca8:	429e      	cmp	r6, r3
 800fcaa:	bf28      	it	cs
 800fcac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fcb0:	4910      	ldr	r1, [pc, #64]	@ (800fcf4 <_scanf_float+0x420>)
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	f000 f8e4 	bl	800fe80 <siprintf>
 800fcb8:	e7d0      	b.n	800fc5c <_scanf_float+0x388>
 800fcba:	f011 0f04 	tst.w	r1, #4
 800fcbe:	9903      	ldr	r1, [sp, #12]
 800fcc0:	600a      	str	r2, [r1, #0]
 800fcc2:	d1dc      	bne.n	800fc7e <_scanf_float+0x3aa>
 800fcc4:	681d      	ldr	r5, [r3, #0]
 800fcc6:	4632      	mov	r2, r6
 800fcc8:	463b      	mov	r3, r7
 800fcca:	4630      	mov	r0, r6
 800fccc:	4639      	mov	r1, r7
 800fcce:	f7f0 ff55 	bl	8000b7c <__aeabi_dcmpun>
 800fcd2:	b128      	cbz	r0, 800fce0 <_scanf_float+0x40c>
 800fcd4:	4808      	ldr	r0, [pc, #32]	@ (800fcf8 <_scanf_float+0x424>)
 800fcd6:	f000 f9ff 	bl	80100d8 <nanf>
 800fcda:	ed85 0a00 	vstr	s0, [r5]
 800fcde:	e7d1      	b.n	800fc84 <_scanf_float+0x3b0>
 800fce0:	4630      	mov	r0, r6
 800fce2:	4639      	mov	r1, r7
 800fce4:	f7f0 ffa8 	bl	8000c38 <__aeabi_d2f>
 800fce8:	6028      	str	r0, [r5, #0]
 800fcea:	e7cb      	b.n	800fc84 <_scanf_float+0x3b0>
 800fcec:	f04f 0900 	mov.w	r9, #0
 800fcf0:	e629      	b.n	800f946 <_scanf_float+0x72>
 800fcf2:	bf00      	nop
 800fcf4:	08013b64 	.word	0x08013b64
 800fcf8:	08013f05 	.word	0x08013f05

0800fcfc <std>:
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	b510      	push	{r4, lr}
 800fd00:	4604      	mov	r4, r0
 800fd02:	e9c0 3300 	strd	r3, r3, [r0]
 800fd06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd0a:	6083      	str	r3, [r0, #8]
 800fd0c:	8181      	strh	r1, [r0, #12]
 800fd0e:	6643      	str	r3, [r0, #100]	@ 0x64
 800fd10:	81c2      	strh	r2, [r0, #14]
 800fd12:	6183      	str	r3, [r0, #24]
 800fd14:	4619      	mov	r1, r3
 800fd16:	2208      	movs	r2, #8
 800fd18:	305c      	adds	r0, #92	@ 0x5c
 800fd1a:	f000 f935 	bl	800ff88 <memset>
 800fd1e:	4b0d      	ldr	r3, [pc, #52]	@ (800fd54 <std+0x58>)
 800fd20:	6263      	str	r3, [r4, #36]	@ 0x24
 800fd22:	4b0d      	ldr	r3, [pc, #52]	@ (800fd58 <std+0x5c>)
 800fd24:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fd26:	4b0d      	ldr	r3, [pc, #52]	@ (800fd5c <std+0x60>)
 800fd28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fd2a:	4b0d      	ldr	r3, [pc, #52]	@ (800fd60 <std+0x64>)
 800fd2c:	6323      	str	r3, [r4, #48]	@ 0x30
 800fd2e:	4b0d      	ldr	r3, [pc, #52]	@ (800fd64 <std+0x68>)
 800fd30:	6224      	str	r4, [r4, #32]
 800fd32:	429c      	cmp	r4, r3
 800fd34:	d006      	beq.n	800fd44 <std+0x48>
 800fd36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fd3a:	4294      	cmp	r4, r2
 800fd3c:	d002      	beq.n	800fd44 <std+0x48>
 800fd3e:	33d0      	adds	r3, #208	@ 0xd0
 800fd40:	429c      	cmp	r4, r3
 800fd42:	d105      	bne.n	800fd50 <std+0x54>
 800fd44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fd48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd4c:	f000 b9aa 	b.w	80100a4 <__retarget_lock_init_recursive>
 800fd50:	bd10      	pop	{r4, pc}
 800fd52:	bf00      	nop
 800fd54:	0800fec1 	.word	0x0800fec1
 800fd58:	0800fee3 	.word	0x0800fee3
 800fd5c:	0800ff1b 	.word	0x0800ff1b
 800fd60:	0800ff3f 	.word	0x0800ff3f
 800fd64:	20000c20 	.word	0x20000c20

0800fd68 <stdio_exit_handler>:
 800fd68:	4a02      	ldr	r2, [pc, #8]	@ (800fd74 <stdio_exit_handler+0xc>)
 800fd6a:	4903      	ldr	r1, [pc, #12]	@ (800fd78 <stdio_exit_handler+0x10>)
 800fd6c:	4803      	ldr	r0, [pc, #12]	@ (800fd7c <stdio_exit_handler+0x14>)
 800fd6e:	f000 b869 	b.w	800fe44 <_fwalk_sglue>
 800fd72:	bf00      	nop
 800fd74:	200000a4 	.word	0x200000a4
 800fd78:	08012445 	.word	0x08012445
 800fd7c:	20000220 	.word	0x20000220

0800fd80 <cleanup_stdio>:
 800fd80:	6841      	ldr	r1, [r0, #4]
 800fd82:	4b0c      	ldr	r3, [pc, #48]	@ (800fdb4 <cleanup_stdio+0x34>)
 800fd84:	4299      	cmp	r1, r3
 800fd86:	b510      	push	{r4, lr}
 800fd88:	4604      	mov	r4, r0
 800fd8a:	d001      	beq.n	800fd90 <cleanup_stdio+0x10>
 800fd8c:	f002 fb5a 	bl	8012444 <_fflush_r>
 800fd90:	68a1      	ldr	r1, [r4, #8]
 800fd92:	4b09      	ldr	r3, [pc, #36]	@ (800fdb8 <cleanup_stdio+0x38>)
 800fd94:	4299      	cmp	r1, r3
 800fd96:	d002      	beq.n	800fd9e <cleanup_stdio+0x1e>
 800fd98:	4620      	mov	r0, r4
 800fd9a:	f002 fb53 	bl	8012444 <_fflush_r>
 800fd9e:	68e1      	ldr	r1, [r4, #12]
 800fda0:	4b06      	ldr	r3, [pc, #24]	@ (800fdbc <cleanup_stdio+0x3c>)
 800fda2:	4299      	cmp	r1, r3
 800fda4:	d004      	beq.n	800fdb0 <cleanup_stdio+0x30>
 800fda6:	4620      	mov	r0, r4
 800fda8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdac:	f002 bb4a 	b.w	8012444 <_fflush_r>
 800fdb0:	bd10      	pop	{r4, pc}
 800fdb2:	bf00      	nop
 800fdb4:	20000c20 	.word	0x20000c20
 800fdb8:	20000c88 	.word	0x20000c88
 800fdbc:	20000cf0 	.word	0x20000cf0

0800fdc0 <global_stdio_init.part.0>:
 800fdc0:	b510      	push	{r4, lr}
 800fdc2:	4b0b      	ldr	r3, [pc, #44]	@ (800fdf0 <global_stdio_init.part.0+0x30>)
 800fdc4:	4c0b      	ldr	r4, [pc, #44]	@ (800fdf4 <global_stdio_init.part.0+0x34>)
 800fdc6:	4a0c      	ldr	r2, [pc, #48]	@ (800fdf8 <global_stdio_init.part.0+0x38>)
 800fdc8:	601a      	str	r2, [r3, #0]
 800fdca:	4620      	mov	r0, r4
 800fdcc:	2200      	movs	r2, #0
 800fdce:	2104      	movs	r1, #4
 800fdd0:	f7ff ff94 	bl	800fcfc <std>
 800fdd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fdd8:	2201      	movs	r2, #1
 800fdda:	2109      	movs	r1, #9
 800fddc:	f7ff ff8e 	bl	800fcfc <std>
 800fde0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fde4:	2202      	movs	r2, #2
 800fde6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdea:	2112      	movs	r1, #18
 800fdec:	f7ff bf86 	b.w	800fcfc <std>
 800fdf0:	20000d58 	.word	0x20000d58
 800fdf4:	20000c20 	.word	0x20000c20
 800fdf8:	0800fd69 	.word	0x0800fd69

0800fdfc <__sfp_lock_acquire>:
 800fdfc:	4801      	ldr	r0, [pc, #4]	@ (800fe04 <__sfp_lock_acquire+0x8>)
 800fdfe:	f000 b952 	b.w	80100a6 <__retarget_lock_acquire_recursive>
 800fe02:	bf00      	nop
 800fe04:	20000d61 	.word	0x20000d61

0800fe08 <__sfp_lock_release>:
 800fe08:	4801      	ldr	r0, [pc, #4]	@ (800fe10 <__sfp_lock_release+0x8>)
 800fe0a:	f000 b94d 	b.w	80100a8 <__retarget_lock_release_recursive>
 800fe0e:	bf00      	nop
 800fe10:	20000d61 	.word	0x20000d61

0800fe14 <__sinit>:
 800fe14:	b510      	push	{r4, lr}
 800fe16:	4604      	mov	r4, r0
 800fe18:	f7ff fff0 	bl	800fdfc <__sfp_lock_acquire>
 800fe1c:	6a23      	ldr	r3, [r4, #32]
 800fe1e:	b11b      	cbz	r3, 800fe28 <__sinit+0x14>
 800fe20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe24:	f7ff bff0 	b.w	800fe08 <__sfp_lock_release>
 800fe28:	4b04      	ldr	r3, [pc, #16]	@ (800fe3c <__sinit+0x28>)
 800fe2a:	6223      	str	r3, [r4, #32]
 800fe2c:	4b04      	ldr	r3, [pc, #16]	@ (800fe40 <__sinit+0x2c>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d1f5      	bne.n	800fe20 <__sinit+0xc>
 800fe34:	f7ff ffc4 	bl	800fdc0 <global_stdio_init.part.0>
 800fe38:	e7f2      	b.n	800fe20 <__sinit+0xc>
 800fe3a:	bf00      	nop
 800fe3c:	0800fd81 	.word	0x0800fd81
 800fe40:	20000d58 	.word	0x20000d58

0800fe44 <_fwalk_sglue>:
 800fe44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe48:	4607      	mov	r7, r0
 800fe4a:	4688      	mov	r8, r1
 800fe4c:	4614      	mov	r4, r2
 800fe4e:	2600      	movs	r6, #0
 800fe50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe54:	f1b9 0901 	subs.w	r9, r9, #1
 800fe58:	d505      	bpl.n	800fe66 <_fwalk_sglue+0x22>
 800fe5a:	6824      	ldr	r4, [r4, #0]
 800fe5c:	2c00      	cmp	r4, #0
 800fe5e:	d1f7      	bne.n	800fe50 <_fwalk_sglue+0xc>
 800fe60:	4630      	mov	r0, r6
 800fe62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe66:	89ab      	ldrh	r3, [r5, #12]
 800fe68:	2b01      	cmp	r3, #1
 800fe6a:	d907      	bls.n	800fe7c <_fwalk_sglue+0x38>
 800fe6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe70:	3301      	adds	r3, #1
 800fe72:	d003      	beq.n	800fe7c <_fwalk_sglue+0x38>
 800fe74:	4629      	mov	r1, r5
 800fe76:	4638      	mov	r0, r7
 800fe78:	47c0      	blx	r8
 800fe7a:	4306      	orrs	r6, r0
 800fe7c:	3568      	adds	r5, #104	@ 0x68
 800fe7e:	e7e9      	b.n	800fe54 <_fwalk_sglue+0x10>

0800fe80 <siprintf>:
 800fe80:	b40e      	push	{r1, r2, r3}
 800fe82:	b500      	push	{lr}
 800fe84:	b09c      	sub	sp, #112	@ 0x70
 800fe86:	ab1d      	add	r3, sp, #116	@ 0x74
 800fe88:	9002      	str	r0, [sp, #8]
 800fe8a:	9006      	str	r0, [sp, #24]
 800fe8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fe90:	4809      	ldr	r0, [pc, #36]	@ (800feb8 <siprintf+0x38>)
 800fe92:	9107      	str	r1, [sp, #28]
 800fe94:	9104      	str	r1, [sp, #16]
 800fe96:	4909      	ldr	r1, [pc, #36]	@ (800febc <siprintf+0x3c>)
 800fe98:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe9c:	9105      	str	r1, [sp, #20]
 800fe9e:	6800      	ldr	r0, [r0, #0]
 800fea0:	9301      	str	r3, [sp, #4]
 800fea2:	a902      	add	r1, sp, #8
 800fea4:	f002 f94e 	bl	8012144 <_svfiprintf_r>
 800fea8:	9b02      	ldr	r3, [sp, #8]
 800feaa:	2200      	movs	r2, #0
 800feac:	701a      	strb	r2, [r3, #0]
 800feae:	b01c      	add	sp, #112	@ 0x70
 800feb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800feb4:	b003      	add	sp, #12
 800feb6:	4770      	bx	lr
 800feb8:	2000021c 	.word	0x2000021c
 800febc:	ffff0208 	.word	0xffff0208

0800fec0 <__sread>:
 800fec0:	b510      	push	{r4, lr}
 800fec2:	460c      	mov	r4, r1
 800fec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fec8:	f000 f89e 	bl	8010008 <_read_r>
 800fecc:	2800      	cmp	r0, #0
 800fece:	bfab      	itete	ge
 800fed0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fed2:	89a3      	ldrhlt	r3, [r4, #12]
 800fed4:	181b      	addge	r3, r3, r0
 800fed6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800feda:	bfac      	ite	ge
 800fedc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fede:	81a3      	strhlt	r3, [r4, #12]
 800fee0:	bd10      	pop	{r4, pc}

0800fee2 <__swrite>:
 800fee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fee6:	461f      	mov	r7, r3
 800fee8:	898b      	ldrh	r3, [r1, #12]
 800feea:	05db      	lsls	r3, r3, #23
 800feec:	4605      	mov	r5, r0
 800feee:	460c      	mov	r4, r1
 800fef0:	4616      	mov	r6, r2
 800fef2:	d505      	bpl.n	800ff00 <__swrite+0x1e>
 800fef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fef8:	2302      	movs	r3, #2
 800fefa:	2200      	movs	r2, #0
 800fefc:	f000 f872 	bl	800ffe4 <_lseek_r>
 800ff00:	89a3      	ldrh	r3, [r4, #12]
 800ff02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ff0a:	81a3      	strh	r3, [r4, #12]
 800ff0c:	4632      	mov	r2, r6
 800ff0e:	463b      	mov	r3, r7
 800ff10:	4628      	mov	r0, r5
 800ff12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff16:	f000 b889 	b.w	801002c <_write_r>

0800ff1a <__sseek>:
 800ff1a:	b510      	push	{r4, lr}
 800ff1c:	460c      	mov	r4, r1
 800ff1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff22:	f000 f85f 	bl	800ffe4 <_lseek_r>
 800ff26:	1c43      	adds	r3, r0, #1
 800ff28:	89a3      	ldrh	r3, [r4, #12]
 800ff2a:	bf15      	itete	ne
 800ff2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ff2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ff32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ff36:	81a3      	strheq	r3, [r4, #12]
 800ff38:	bf18      	it	ne
 800ff3a:	81a3      	strhne	r3, [r4, #12]
 800ff3c:	bd10      	pop	{r4, pc}

0800ff3e <__sclose>:
 800ff3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff42:	f000 b83f 	b.w	800ffc4 <_close_r>
	...

0800ff48 <_vsiprintf_r>:
 800ff48:	b500      	push	{lr}
 800ff4a:	b09b      	sub	sp, #108	@ 0x6c
 800ff4c:	9100      	str	r1, [sp, #0]
 800ff4e:	9104      	str	r1, [sp, #16]
 800ff50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ff54:	9105      	str	r1, [sp, #20]
 800ff56:	9102      	str	r1, [sp, #8]
 800ff58:	4905      	ldr	r1, [pc, #20]	@ (800ff70 <_vsiprintf_r+0x28>)
 800ff5a:	9103      	str	r1, [sp, #12]
 800ff5c:	4669      	mov	r1, sp
 800ff5e:	f002 f8f1 	bl	8012144 <_svfiprintf_r>
 800ff62:	9b00      	ldr	r3, [sp, #0]
 800ff64:	2200      	movs	r2, #0
 800ff66:	701a      	strb	r2, [r3, #0]
 800ff68:	b01b      	add	sp, #108	@ 0x6c
 800ff6a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ff6e:	bf00      	nop
 800ff70:	ffff0208 	.word	0xffff0208

0800ff74 <vsiprintf>:
 800ff74:	4613      	mov	r3, r2
 800ff76:	460a      	mov	r2, r1
 800ff78:	4601      	mov	r1, r0
 800ff7a:	4802      	ldr	r0, [pc, #8]	@ (800ff84 <vsiprintf+0x10>)
 800ff7c:	6800      	ldr	r0, [r0, #0]
 800ff7e:	f7ff bfe3 	b.w	800ff48 <_vsiprintf_r>
 800ff82:	bf00      	nop
 800ff84:	2000021c 	.word	0x2000021c

0800ff88 <memset>:
 800ff88:	4402      	add	r2, r0
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d100      	bne.n	800ff92 <memset+0xa>
 800ff90:	4770      	bx	lr
 800ff92:	f803 1b01 	strb.w	r1, [r3], #1
 800ff96:	e7f9      	b.n	800ff8c <memset+0x4>

0800ff98 <strncmp>:
 800ff98:	b510      	push	{r4, lr}
 800ff9a:	b16a      	cbz	r2, 800ffb8 <strncmp+0x20>
 800ff9c:	3901      	subs	r1, #1
 800ff9e:	1884      	adds	r4, r0, r2
 800ffa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffa4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d103      	bne.n	800ffb4 <strncmp+0x1c>
 800ffac:	42a0      	cmp	r0, r4
 800ffae:	d001      	beq.n	800ffb4 <strncmp+0x1c>
 800ffb0:	2a00      	cmp	r2, #0
 800ffb2:	d1f5      	bne.n	800ffa0 <strncmp+0x8>
 800ffb4:	1ad0      	subs	r0, r2, r3
 800ffb6:	bd10      	pop	{r4, pc}
 800ffb8:	4610      	mov	r0, r2
 800ffba:	e7fc      	b.n	800ffb6 <strncmp+0x1e>

0800ffbc <_localeconv_r>:
 800ffbc:	4800      	ldr	r0, [pc, #0]	@ (800ffc0 <_localeconv_r+0x4>)
 800ffbe:	4770      	bx	lr
 800ffc0:	200001a0 	.word	0x200001a0

0800ffc4 <_close_r>:
 800ffc4:	b538      	push	{r3, r4, r5, lr}
 800ffc6:	4d06      	ldr	r5, [pc, #24]	@ (800ffe0 <_close_r+0x1c>)
 800ffc8:	2300      	movs	r3, #0
 800ffca:	4604      	mov	r4, r0
 800ffcc:	4608      	mov	r0, r1
 800ffce:	602b      	str	r3, [r5, #0]
 800ffd0:	f7f1 fe7a 	bl	8001cc8 <_close>
 800ffd4:	1c43      	adds	r3, r0, #1
 800ffd6:	d102      	bne.n	800ffde <_close_r+0x1a>
 800ffd8:	682b      	ldr	r3, [r5, #0]
 800ffda:	b103      	cbz	r3, 800ffde <_close_r+0x1a>
 800ffdc:	6023      	str	r3, [r4, #0]
 800ffde:	bd38      	pop	{r3, r4, r5, pc}
 800ffe0:	20000d5c 	.word	0x20000d5c

0800ffe4 <_lseek_r>:
 800ffe4:	b538      	push	{r3, r4, r5, lr}
 800ffe6:	4d07      	ldr	r5, [pc, #28]	@ (8010004 <_lseek_r+0x20>)
 800ffe8:	4604      	mov	r4, r0
 800ffea:	4608      	mov	r0, r1
 800ffec:	4611      	mov	r1, r2
 800ffee:	2200      	movs	r2, #0
 800fff0:	602a      	str	r2, [r5, #0]
 800fff2:	461a      	mov	r2, r3
 800fff4:	f7f1 fe8f 	bl	8001d16 <_lseek>
 800fff8:	1c43      	adds	r3, r0, #1
 800fffa:	d102      	bne.n	8010002 <_lseek_r+0x1e>
 800fffc:	682b      	ldr	r3, [r5, #0]
 800fffe:	b103      	cbz	r3, 8010002 <_lseek_r+0x1e>
 8010000:	6023      	str	r3, [r4, #0]
 8010002:	bd38      	pop	{r3, r4, r5, pc}
 8010004:	20000d5c 	.word	0x20000d5c

08010008 <_read_r>:
 8010008:	b538      	push	{r3, r4, r5, lr}
 801000a:	4d07      	ldr	r5, [pc, #28]	@ (8010028 <_read_r+0x20>)
 801000c:	4604      	mov	r4, r0
 801000e:	4608      	mov	r0, r1
 8010010:	4611      	mov	r1, r2
 8010012:	2200      	movs	r2, #0
 8010014:	602a      	str	r2, [r5, #0]
 8010016:	461a      	mov	r2, r3
 8010018:	f7f1 fe1d 	bl	8001c56 <_read>
 801001c:	1c43      	adds	r3, r0, #1
 801001e:	d102      	bne.n	8010026 <_read_r+0x1e>
 8010020:	682b      	ldr	r3, [r5, #0]
 8010022:	b103      	cbz	r3, 8010026 <_read_r+0x1e>
 8010024:	6023      	str	r3, [r4, #0]
 8010026:	bd38      	pop	{r3, r4, r5, pc}
 8010028:	20000d5c 	.word	0x20000d5c

0801002c <_write_r>:
 801002c:	b538      	push	{r3, r4, r5, lr}
 801002e:	4d07      	ldr	r5, [pc, #28]	@ (801004c <_write_r+0x20>)
 8010030:	4604      	mov	r4, r0
 8010032:	4608      	mov	r0, r1
 8010034:	4611      	mov	r1, r2
 8010036:	2200      	movs	r2, #0
 8010038:	602a      	str	r2, [r5, #0]
 801003a:	461a      	mov	r2, r3
 801003c:	f7f1 fe28 	bl	8001c90 <_write>
 8010040:	1c43      	adds	r3, r0, #1
 8010042:	d102      	bne.n	801004a <_write_r+0x1e>
 8010044:	682b      	ldr	r3, [r5, #0]
 8010046:	b103      	cbz	r3, 801004a <_write_r+0x1e>
 8010048:	6023      	str	r3, [r4, #0]
 801004a:	bd38      	pop	{r3, r4, r5, pc}
 801004c:	20000d5c 	.word	0x20000d5c

08010050 <__errno>:
 8010050:	4b01      	ldr	r3, [pc, #4]	@ (8010058 <__errno+0x8>)
 8010052:	6818      	ldr	r0, [r3, #0]
 8010054:	4770      	bx	lr
 8010056:	bf00      	nop
 8010058:	2000021c 	.word	0x2000021c

0801005c <__libc_init_array>:
 801005c:	b570      	push	{r4, r5, r6, lr}
 801005e:	4d0d      	ldr	r5, [pc, #52]	@ (8010094 <__libc_init_array+0x38>)
 8010060:	4c0d      	ldr	r4, [pc, #52]	@ (8010098 <__libc_init_array+0x3c>)
 8010062:	1b64      	subs	r4, r4, r5
 8010064:	10a4      	asrs	r4, r4, #2
 8010066:	2600      	movs	r6, #0
 8010068:	42a6      	cmp	r6, r4
 801006a:	d109      	bne.n	8010080 <__libc_init_array+0x24>
 801006c:	4d0b      	ldr	r5, [pc, #44]	@ (801009c <__libc_init_array+0x40>)
 801006e:	4c0c      	ldr	r4, [pc, #48]	@ (80100a0 <__libc_init_array+0x44>)
 8010070:	f003 fc36 	bl	80138e0 <_init>
 8010074:	1b64      	subs	r4, r4, r5
 8010076:	10a4      	asrs	r4, r4, #2
 8010078:	2600      	movs	r6, #0
 801007a:	42a6      	cmp	r6, r4
 801007c:	d105      	bne.n	801008a <__libc_init_array+0x2e>
 801007e:	bd70      	pop	{r4, r5, r6, pc}
 8010080:	f855 3b04 	ldr.w	r3, [r5], #4
 8010084:	4798      	blx	r3
 8010086:	3601      	adds	r6, #1
 8010088:	e7ee      	b.n	8010068 <__libc_init_array+0xc>
 801008a:	f855 3b04 	ldr.w	r3, [r5], #4
 801008e:	4798      	blx	r3
 8010090:	3601      	adds	r6, #1
 8010092:	e7f2      	b.n	801007a <__libc_init_array+0x1e>
 8010094:	08013f90 	.word	0x08013f90
 8010098:	08013f90 	.word	0x08013f90
 801009c:	08013f90 	.word	0x08013f90
 80100a0:	08013f94 	.word	0x08013f94

080100a4 <__retarget_lock_init_recursive>:
 80100a4:	4770      	bx	lr

080100a6 <__retarget_lock_acquire_recursive>:
 80100a6:	4770      	bx	lr

080100a8 <__retarget_lock_release_recursive>:
 80100a8:	4770      	bx	lr

080100aa <memcpy>:
 80100aa:	440a      	add	r2, r1
 80100ac:	4291      	cmp	r1, r2
 80100ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80100b2:	d100      	bne.n	80100b6 <memcpy+0xc>
 80100b4:	4770      	bx	lr
 80100b6:	b510      	push	{r4, lr}
 80100b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100c0:	4291      	cmp	r1, r2
 80100c2:	d1f9      	bne.n	80100b8 <memcpy+0xe>
 80100c4:	bd10      	pop	{r4, pc}
	...

080100c8 <nan>:
 80100c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80100d0 <nan+0x8>
 80100cc:	4770      	bx	lr
 80100ce:	bf00      	nop
 80100d0:	00000000 	.word	0x00000000
 80100d4:	7ff80000 	.word	0x7ff80000

080100d8 <nanf>:
 80100d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80100e0 <nanf+0x8>
 80100dc:	4770      	bx	lr
 80100de:	bf00      	nop
 80100e0:	7fc00000 	.word	0x7fc00000

080100e4 <quorem>:
 80100e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100e8:	6903      	ldr	r3, [r0, #16]
 80100ea:	690c      	ldr	r4, [r1, #16]
 80100ec:	42a3      	cmp	r3, r4
 80100ee:	4607      	mov	r7, r0
 80100f0:	db7e      	blt.n	80101f0 <quorem+0x10c>
 80100f2:	3c01      	subs	r4, #1
 80100f4:	f101 0814 	add.w	r8, r1, #20
 80100f8:	00a3      	lsls	r3, r4, #2
 80100fa:	f100 0514 	add.w	r5, r0, #20
 80100fe:	9300      	str	r3, [sp, #0]
 8010100:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010104:	9301      	str	r3, [sp, #4]
 8010106:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801010a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801010e:	3301      	adds	r3, #1
 8010110:	429a      	cmp	r2, r3
 8010112:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010116:	fbb2 f6f3 	udiv	r6, r2, r3
 801011a:	d32e      	bcc.n	801017a <quorem+0x96>
 801011c:	f04f 0a00 	mov.w	sl, #0
 8010120:	46c4      	mov	ip, r8
 8010122:	46ae      	mov	lr, r5
 8010124:	46d3      	mov	fp, sl
 8010126:	f85c 3b04 	ldr.w	r3, [ip], #4
 801012a:	b298      	uxth	r0, r3
 801012c:	fb06 a000 	mla	r0, r6, r0, sl
 8010130:	0c02      	lsrs	r2, r0, #16
 8010132:	0c1b      	lsrs	r3, r3, #16
 8010134:	fb06 2303 	mla	r3, r6, r3, r2
 8010138:	f8de 2000 	ldr.w	r2, [lr]
 801013c:	b280      	uxth	r0, r0
 801013e:	b292      	uxth	r2, r2
 8010140:	1a12      	subs	r2, r2, r0
 8010142:	445a      	add	r2, fp
 8010144:	f8de 0000 	ldr.w	r0, [lr]
 8010148:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801014c:	b29b      	uxth	r3, r3
 801014e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010152:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010156:	b292      	uxth	r2, r2
 8010158:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801015c:	45e1      	cmp	r9, ip
 801015e:	f84e 2b04 	str.w	r2, [lr], #4
 8010162:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010166:	d2de      	bcs.n	8010126 <quorem+0x42>
 8010168:	9b00      	ldr	r3, [sp, #0]
 801016a:	58eb      	ldr	r3, [r5, r3]
 801016c:	b92b      	cbnz	r3, 801017a <quorem+0x96>
 801016e:	9b01      	ldr	r3, [sp, #4]
 8010170:	3b04      	subs	r3, #4
 8010172:	429d      	cmp	r5, r3
 8010174:	461a      	mov	r2, r3
 8010176:	d32f      	bcc.n	80101d8 <quorem+0xf4>
 8010178:	613c      	str	r4, [r7, #16]
 801017a:	4638      	mov	r0, r7
 801017c:	f001 fd10 	bl	8011ba0 <__mcmp>
 8010180:	2800      	cmp	r0, #0
 8010182:	db25      	blt.n	80101d0 <quorem+0xec>
 8010184:	4629      	mov	r1, r5
 8010186:	2000      	movs	r0, #0
 8010188:	f858 2b04 	ldr.w	r2, [r8], #4
 801018c:	f8d1 c000 	ldr.w	ip, [r1]
 8010190:	fa1f fe82 	uxth.w	lr, r2
 8010194:	fa1f f38c 	uxth.w	r3, ip
 8010198:	eba3 030e 	sub.w	r3, r3, lr
 801019c:	4403      	add	r3, r0
 801019e:	0c12      	lsrs	r2, r2, #16
 80101a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80101a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80101a8:	b29b      	uxth	r3, r3
 80101aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80101ae:	45c1      	cmp	r9, r8
 80101b0:	f841 3b04 	str.w	r3, [r1], #4
 80101b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80101b8:	d2e6      	bcs.n	8010188 <quorem+0xa4>
 80101ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80101be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80101c2:	b922      	cbnz	r2, 80101ce <quorem+0xea>
 80101c4:	3b04      	subs	r3, #4
 80101c6:	429d      	cmp	r5, r3
 80101c8:	461a      	mov	r2, r3
 80101ca:	d30b      	bcc.n	80101e4 <quorem+0x100>
 80101cc:	613c      	str	r4, [r7, #16]
 80101ce:	3601      	adds	r6, #1
 80101d0:	4630      	mov	r0, r6
 80101d2:	b003      	add	sp, #12
 80101d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101d8:	6812      	ldr	r2, [r2, #0]
 80101da:	3b04      	subs	r3, #4
 80101dc:	2a00      	cmp	r2, #0
 80101de:	d1cb      	bne.n	8010178 <quorem+0x94>
 80101e0:	3c01      	subs	r4, #1
 80101e2:	e7c6      	b.n	8010172 <quorem+0x8e>
 80101e4:	6812      	ldr	r2, [r2, #0]
 80101e6:	3b04      	subs	r3, #4
 80101e8:	2a00      	cmp	r2, #0
 80101ea:	d1ef      	bne.n	80101cc <quorem+0xe8>
 80101ec:	3c01      	subs	r4, #1
 80101ee:	e7ea      	b.n	80101c6 <quorem+0xe2>
 80101f0:	2000      	movs	r0, #0
 80101f2:	e7ee      	b.n	80101d2 <quorem+0xee>
 80101f4:	0000      	movs	r0, r0
	...

080101f8 <_dtoa_r>:
 80101f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101fc:	69c7      	ldr	r7, [r0, #28]
 80101fe:	b099      	sub	sp, #100	@ 0x64
 8010200:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010204:	ec55 4b10 	vmov	r4, r5, d0
 8010208:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801020a:	9109      	str	r1, [sp, #36]	@ 0x24
 801020c:	4683      	mov	fp, r0
 801020e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010210:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010212:	b97f      	cbnz	r7, 8010234 <_dtoa_r+0x3c>
 8010214:	2010      	movs	r0, #16
 8010216:	f001 f937 	bl	8011488 <malloc>
 801021a:	4602      	mov	r2, r0
 801021c:	f8cb 001c 	str.w	r0, [fp, #28]
 8010220:	b920      	cbnz	r0, 801022c <_dtoa_r+0x34>
 8010222:	4ba7      	ldr	r3, [pc, #668]	@ (80104c0 <_dtoa_r+0x2c8>)
 8010224:	21ef      	movs	r1, #239	@ 0xef
 8010226:	48a7      	ldr	r0, [pc, #668]	@ (80104c4 <_dtoa_r+0x2cc>)
 8010228:	f002 f95e 	bl	80124e8 <__assert_func>
 801022c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010230:	6007      	str	r7, [r0, #0]
 8010232:	60c7      	str	r7, [r0, #12]
 8010234:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010238:	6819      	ldr	r1, [r3, #0]
 801023a:	b159      	cbz	r1, 8010254 <_dtoa_r+0x5c>
 801023c:	685a      	ldr	r2, [r3, #4]
 801023e:	604a      	str	r2, [r1, #4]
 8010240:	2301      	movs	r3, #1
 8010242:	4093      	lsls	r3, r2
 8010244:	608b      	str	r3, [r1, #8]
 8010246:	4658      	mov	r0, fp
 8010248:	f001 fa26 	bl	8011698 <_Bfree>
 801024c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010250:	2200      	movs	r2, #0
 8010252:	601a      	str	r2, [r3, #0]
 8010254:	1e2b      	subs	r3, r5, #0
 8010256:	bfb9      	ittee	lt
 8010258:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801025c:	9303      	strlt	r3, [sp, #12]
 801025e:	2300      	movge	r3, #0
 8010260:	6033      	strge	r3, [r6, #0]
 8010262:	9f03      	ldr	r7, [sp, #12]
 8010264:	4b98      	ldr	r3, [pc, #608]	@ (80104c8 <_dtoa_r+0x2d0>)
 8010266:	bfbc      	itt	lt
 8010268:	2201      	movlt	r2, #1
 801026a:	6032      	strlt	r2, [r6, #0]
 801026c:	43bb      	bics	r3, r7
 801026e:	d112      	bne.n	8010296 <_dtoa_r+0x9e>
 8010270:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010272:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010276:	6013      	str	r3, [r2, #0]
 8010278:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801027c:	4323      	orrs	r3, r4
 801027e:	f000 854d 	beq.w	8010d1c <_dtoa_r+0xb24>
 8010282:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010284:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80104dc <_dtoa_r+0x2e4>
 8010288:	2b00      	cmp	r3, #0
 801028a:	f000 854f 	beq.w	8010d2c <_dtoa_r+0xb34>
 801028e:	f10a 0303 	add.w	r3, sl, #3
 8010292:	f000 bd49 	b.w	8010d28 <_dtoa_r+0xb30>
 8010296:	ed9d 7b02 	vldr	d7, [sp, #8]
 801029a:	2200      	movs	r2, #0
 801029c:	ec51 0b17 	vmov	r0, r1, d7
 80102a0:	2300      	movs	r3, #0
 80102a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80102a6:	f7f0 fc37 	bl	8000b18 <__aeabi_dcmpeq>
 80102aa:	4680      	mov	r8, r0
 80102ac:	b158      	cbz	r0, 80102c6 <_dtoa_r+0xce>
 80102ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80102b0:	2301      	movs	r3, #1
 80102b2:	6013      	str	r3, [r2, #0]
 80102b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80102b6:	b113      	cbz	r3, 80102be <_dtoa_r+0xc6>
 80102b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80102ba:	4b84      	ldr	r3, [pc, #528]	@ (80104cc <_dtoa_r+0x2d4>)
 80102bc:	6013      	str	r3, [r2, #0]
 80102be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80104e0 <_dtoa_r+0x2e8>
 80102c2:	f000 bd33 	b.w	8010d2c <_dtoa_r+0xb34>
 80102c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80102ca:	aa16      	add	r2, sp, #88	@ 0x58
 80102cc:	a917      	add	r1, sp, #92	@ 0x5c
 80102ce:	4658      	mov	r0, fp
 80102d0:	f001 fd86 	bl	8011de0 <__d2b>
 80102d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80102d8:	4681      	mov	r9, r0
 80102da:	2e00      	cmp	r6, #0
 80102dc:	d077      	beq.n	80103ce <_dtoa_r+0x1d6>
 80102de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80102e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80102e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80102ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80102f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80102f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80102f8:	4619      	mov	r1, r3
 80102fa:	2200      	movs	r2, #0
 80102fc:	4b74      	ldr	r3, [pc, #464]	@ (80104d0 <_dtoa_r+0x2d8>)
 80102fe:	f7ef ffeb 	bl	80002d8 <__aeabi_dsub>
 8010302:	a369      	add	r3, pc, #420	@ (adr r3, 80104a8 <_dtoa_r+0x2b0>)
 8010304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010308:	f7f0 f99e 	bl	8000648 <__aeabi_dmul>
 801030c:	a368      	add	r3, pc, #416	@ (adr r3, 80104b0 <_dtoa_r+0x2b8>)
 801030e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010312:	f7ef ffe3 	bl	80002dc <__adddf3>
 8010316:	4604      	mov	r4, r0
 8010318:	4630      	mov	r0, r6
 801031a:	460d      	mov	r5, r1
 801031c:	f7f0 f92a 	bl	8000574 <__aeabi_i2d>
 8010320:	a365      	add	r3, pc, #404	@ (adr r3, 80104b8 <_dtoa_r+0x2c0>)
 8010322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010326:	f7f0 f98f 	bl	8000648 <__aeabi_dmul>
 801032a:	4602      	mov	r2, r0
 801032c:	460b      	mov	r3, r1
 801032e:	4620      	mov	r0, r4
 8010330:	4629      	mov	r1, r5
 8010332:	f7ef ffd3 	bl	80002dc <__adddf3>
 8010336:	4604      	mov	r4, r0
 8010338:	460d      	mov	r5, r1
 801033a:	f7f0 fc35 	bl	8000ba8 <__aeabi_d2iz>
 801033e:	2200      	movs	r2, #0
 8010340:	4607      	mov	r7, r0
 8010342:	2300      	movs	r3, #0
 8010344:	4620      	mov	r0, r4
 8010346:	4629      	mov	r1, r5
 8010348:	f7f0 fbf0 	bl	8000b2c <__aeabi_dcmplt>
 801034c:	b140      	cbz	r0, 8010360 <_dtoa_r+0x168>
 801034e:	4638      	mov	r0, r7
 8010350:	f7f0 f910 	bl	8000574 <__aeabi_i2d>
 8010354:	4622      	mov	r2, r4
 8010356:	462b      	mov	r3, r5
 8010358:	f7f0 fbde 	bl	8000b18 <__aeabi_dcmpeq>
 801035c:	b900      	cbnz	r0, 8010360 <_dtoa_r+0x168>
 801035e:	3f01      	subs	r7, #1
 8010360:	2f16      	cmp	r7, #22
 8010362:	d851      	bhi.n	8010408 <_dtoa_r+0x210>
 8010364:	4b5b      	ldr	r3, [pc, #364]	@ (80104d4 <_dtoa_r+0x2dc>)
 8010366:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801036a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801036e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010372:	f7f0 fbdb 	bl	8000b2c <__aeabi_dcmplt>
 8010376:	2800      	cmp	r0, #0
 8010378:	d048      	beq.n	801040c <_dtoa_r+0x214>
 801037a:	3f01      	subs	r7, #1
 801037c:	2300      	movs	r3, #0
 801037e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010380:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010382:	1b9b      	subs	r3, r3, r6
 8010384:	1e5a      	subs	r2, r3, #1
 8010386:	bf44      	itt	mi
 8010388:	f1c3 0801 	rsbmi	r8, r3, #1
 801038c:	2300      	movmi	r3, #0
 801038e:	9208      	str	r2, [sp, #32]
 8010390:	bf54      	ite	pl
 8010392:	f04f 0800 	movpl.w	r8, #0
 8010396:	9308      	strmi	r3, [sp, #32]
 8010398:	2f00      	cmp	r7, #0
 801039a:	db39      	blt.n	8010410 <_dtoa_r+0x218>
 801039c:	9b08      	ldr	r3, [sp, #32]
 801039e:	970f      	str	r7, [sp, #60]	@ 0x3c
 80103a0:	443b      	add	r3, r7
 80103a2:	9308      	str	r3, [sp, #32]
 80103a4:	2300      	movs	r3, #0
 80103a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80103a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103aa:	2b09      	cmp	r3, #9
 80103ac:	d864      	bhi.n	8010478 <_dtoa_r+0x280>
 80103ae:	2b05      	cmp	r3, #5
 80103b0:	bfc4      	itt	gt
 80103b2:	3b04      	subgt	r3, #4
 80103b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80103b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103b8:	f1a3 0302 	sub.w	r3, r3, #2
 80103bc:	bfcc      	ite	gt
 80103be:	2400      	movgt	r4, #0
 80103c0:	2401      	movle	r4, #1
 80103c2:	2b03      	cmp	r3, #3
 80103c4:	d863      	bhi.n	801048e <_dtoa_r+0x296>
 80103c6:	e8df f003 	tbb	[pc, r3]
 80103ca:	372a      	.short	0x372a
 80103cc:	5535      	.short	0x5535
 80103ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80103d2:	441e      	add	r6, r3
 80103d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80103d8:	2b20      	cmp	r3, #32
 80103da:	bfc1      	itttt	gt
 80103dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80103e0:	409f      	lslgt	r7, r3
 80103e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80103e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80103ea:	bfd6      	itet	le
 80103ec:	f1c3 0320 	rsble	r3, r3, #32
 80103f0:	ea47 0003 	orrgt.w	r0, r7, r3
 80103f4:	fa04 f003 	lslle.w	r0, r4, r3
 80103f8:	f7f0 f8ac 	bl	8000554 <__aeabi_ui2d>
 80103fc:	2201      	movs	r2, #1
 80103fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010402:	3e01      	subs	r6, #1
 8010404:	9214      	str	r2, [sp, #80]	@ 0x50
 8010406:	e777      	b.n	80102f8 <_dtoa_r+0x100>
 8010408:	2301      	movs	r3, #1
 801040a:	e7b8      	b.n	801037e <_dtoa_r+0x186>
 801040c:	9012      	str	r0, [sp, #72]	@ 0x48
 801040e:	e7b7      	b.n	8010380 <_dtoa_r+0x188>
 8010410:	427b      	negs	r3, r7
 8010412:	930a      	str	r3, [sp, #40]	@ 0x28
 8010414:	2300      	movs	r3, #0
 8010416:	eba8 0807 	sub.w	r8, r8, r7
 801041a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801041c:	e7c4      	b.n	80103a8 <_dtoa_r+0x1b0>
 801041e:	2300      	movs	r3, #0
 8010420:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010422:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010424:	2b00      	cmp	r3, #0
 8010426:	dc35      	bgt.n	8010494 <_dtoa_r+0x29c>
 8010428:	2301      	movs	r3, #1
 801042a:	9300      	str	r3, [sp, #0]
 801042c:	9307      	str	r3, [sp, #28]
 801042e:	461a      	mov	r2, r3
 8010430:	920e      	str	r2, [sp, #56]	@ 0x38
 8010432:	e00b      	b.n	801044c <_dtoa_r+0x254>
 8010434:	2301      	movs	r3, #1
 8010436:	e7f3      	b.n	8010420 <_dtoa_r+0x228>
 8010438:	2300      	movs	r3, #0
 801043a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801043c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801043e:	18fb      	adds	r3, r7, r3
 8010440:	9300      	str	r3, [sp, #0]
 8010442:	3301      	adds	r3, #1
 8010444:	2b01      	cmp	r3, #1
 8010446:	9307      	str	r3, [sp, #28]
 8010448:	bfb8      	it	lt
 801044a:	2301      	movlt	r3, #1
 801044c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010450:	2100      	movs	r1, #0
 8010452:	2204      	movs	r2, #4
 8010454:	f102 0514 	add.w	r5, r2, #20
 8010458:	429d      	cmp	r5, r3
 801045a:	d91f      	bls.n	801049c <_dtoa_r+0x2a4>
 801045c:	6041      	str	r1, [r0, #4]
 801045e:	4658      	mov	r0, fp
 8010460:	f001 f8da 	bl	8011618 <_Balloc>
 8010464:	4682      	mov	sl, r0
 8010466:	2800      	cmp	r0, #0
 8010468:	d13c      	bne.n	80104e4 <_dtoa_r+0x2ec>
 801046a:	4b1b      	ldr	r3, [pc, #108]	@ (80104d8 <_dtoa_r+0x2e0>)
 801046c:	4602      	mov	r2, r0
 801046e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010472:	e6d8      	b.n	8010226 <_dtoa_r+0x2e>
 8010474:	2301      	movs	r3, #1
 8010476:	e7e0      	b.n	801043a <_dtoa_r+0x242>
 8010478:	2401      	movs	r4, #1
 801047a:	2300      	movs	r3, #0
 801047c:	9309      	str	r3, [sp, #36]	@ 0x24
 801047e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010480:	f04f 33ff 	mov.w	r3, #4294967295
 8010484:	9300      	str	r3, [sp, #0]
 8010486:	9307      	str	r3, [sp, #28]
 8010488:	2200      	movs	r2, #0
 801048a:	2312      	movs	r3, #18
 801048c:	e7d0      	b.n	8010430 <_dtoa_r+0x238>
 801048e:	2301      	movs	r3, #1
 8010490:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010492:	e7f5      	b.n	8010480 <_dtoa_r+0x288>
 8010494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010496:	9300      	str	r3, [sp, #0]
 8010498:	9307      	str	r3, [sp, #28]
 801049a:	e7d7      	b.n	801044c <_dtoa_r+0x254>
 801049c:	3101      	adds	r1, #1
 801049e:	0052      	lsls	r2, r2, #1
 80104a0:	e7d8      	b.n	8010454 <_dtoa_r+0x25c>
 80104a2:	bf00      	nop
 80104a4:	f3af 8000 	nop.w
 80104a8:	636f4361 	.word	0x636f4361
 80104ac:	3fd287a7 	.word	0x3fd287a7
 80104b0:	8b60c8b3 	.word	0x8b60c8b3
 80104b4:	3fc68a28 	.word	0x3fc68a28
 80104b8:	509f79fb 	.word	0x509f79fb
 80104bc:	3fd34413 	.word	0x3fd34413
 80104c0:	08013b7e 	.word	0x08013b7e
 80104c4:	08013b95 	.word	0x08013b95
 80104c8:	7ff00000 	.word	0x7ff00000
 80104cc:	08013b41 	.word	0x08013b41
 80104d0:	3ff80000 	.word	0x3ff80000
 80104d4:	08013cf0 	.word	0x08013cf0
 80104d8:	08013bed 	.word	0x08013bed
 80104dc:	08013b7a 	.word	0x08013b7a
 80104e0:	08013b40 	.word	0x08013b40
 80104e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80104e8:	6018      	str	r0, [r3, #0]
 80104ea:	9b07      	ldr	r3, [sp, #28]
 80104ec:	2b0e      	cmp	r3, #14
 80104ee:	f200 80a4 	bhi.w	801063a <_dtoa_r+0x442>
 80104f2:	2c00      	cmp	r4, #0
 80104f4:	f000 80a1 	beq.w	801063a <_dtoa_r+0x442>
 80104f8:	2f00      	cmp	r7, #0
 80104fa:	dd33      	ble.n	8010564 <_dtoa_r+0x36c>
 80104fc:	4bad      	ldr	r3, [pc, #692]	@ (80107b4 <_dtoa_r+0x5bc>)
 80104fe:	f007 020f 	and.w	r2, r7, #15
 8010502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010506:	ed93 7b00 	vldr	d7, [r3]
 801050a:	05f8      	lsls	r0, r7, #23
 801050c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010510:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010514:	d516      	bpl.n	8010544 <_dtoa_r+0x34c>
 8010516:	4ba8      	ldr	r3, [pc, #672]	@ (80107b8 <_dtoa_r+0x5c0>)
 8010518:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801051c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010520:	f7f0 f9bc 	bl	800089c <__aeabi_ddiv>
 8010524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010528:	f004 040f 	and.w	r4, r4, #15
 801052c:	2603      	movs	r6, #3
 801052e:	4da2      	ldr	r5, [pc, #648]	@ (80107b8 <_dtoa_r+0x5c0>)
 8010530:	b954      	cbnz	r4, 8010548 <_dtoa_r+0x350>
 8010532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801053a:	f7f0 f9af 	bl	800089c <__aeabi_ddiv>
 801053e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010542:	e028      	b.n	8010596 <_dtoa_r+0x39e>
 8010544:	2602      	movs	r6, #2
 8010546:	e7f2      	b.n	801052e <_dtoa_r+0x336>
 8010548:	07e1      	lsls	r1, r4, #31
 801054a:	d508      	bpl.n	801055e <_dtoa_r+0x366>
 801054c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010550:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010554:	f7f0 f878 	bl	8000648 <__aeabi_dmul>
 8010558:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801055c:	3601      	adds	r6, #1
 801055e:	1064      	asrs	r4, r4, #1
 8010560:	3508      	adds	r5, #8
 8010562:	e7e5      	b.n	8010530 <_dtoa_r+0x338>
 8010564:	f000 80d2 	beq.w	801070c <_dtoa_r+0x514>
 8010568:	427c      	negs	r4, r7
 801056a:	4b92      	ldr	r3, [pc, #584]	@ (80107b4 <_dtoa_r+0x5bc>)
 801056c:	4d92      	ldr	r5, [pc, #584]	@ (80107b8 <_dtoa_r+0x5c0>)
 801056e:	f004 020f 	and.w	r2, r4, #15
 8010572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801057a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801057e:	f7f0 f863 	bl	8000648 <__aeabi_dmul>
 8010582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010586:	1124      	asrs	r4, r4, #4
 8010588:	2300      	movs	r3, #0
 801058a:	2602      	movs	r6, #2
 801058c:	2c00      	cmp	r4, #0
 801058e:	f040 80b2 	bne.w	80106f6 <_dtoa_r+0x4fe>
 8010592:	2b00      	cmp	r3, #0
 8010594:	d1d3      	bne.n	801053e <_dtoa_r+0x346>
 8010596:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010598:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801059c:	2b00      	cmp	r3, #0
 801059e:	f000 80b7 	beq.w	8010710 <_dtoa_r+0x518>
 80105a2:	4b86      	ldr	r3, [pc, #536]	@ (80107bc <_dtoa_r+0x5c4>)
 80105a4:	2200      	movs	r2, #0
 80105a6:	4620      	mov	r0, r4
 80105a8:	4629      	mov	r1, r5
 80105aa:	f7f0 fabf 	bl	8000b2c <__aeabi_dcmplt>
 80105ae:	2800      	cmp	r0, #0
 80105b0:	f000 80ae 	beq.w	8010710 <_dtoa_r+0x518>
 80105b4:	9b07      	ldr	r3, [sp, #28]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	f000 80aa 	beq.w	8010710 <_dtoa_r+0x518>
 80105bc:	9b00      	ldr	r3, [sp, #0]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	dd37      	ble.n	8010632 <_dtoa_r+0x43a>
 80105c2:	1e7b      	subs	r3, r7, #1
 80105c4:	9304      	str	r3, [sp, #16]
 80105c6:	4620      	mov	r0, r4
 80105c8:	4b7d      	ldr	r3, [pc, #500]	@ (80107c0 <_dtoa_r+0x5c8>)
 80105ca:	2200      	movs	r2, #0
 80105cc:	4629      	mov	r1, r5
 80105ce:	f7f0 f83b 	bl	8000648 <__aeabi_dmul>
 80105d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105d6:	9c00      	ldr	r4, [sp, #0]
 80105d8:	3601      	adds	r6, #1
 80105da:	4630      	mov	r0, r6
 80105dc:	f7ef ffca 	bl	8000574 <__aeabi_i2d>
 80105e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80105e4:	f7f0 f830 	bl	8000648 <__aeabi_dmul>
 80105e8:	4b76      	ldr	r3, [pc, #472]	@ (80107c4 <_dtoa_r+0x5cc>)
 80105ea:	2200      	movs	r2, #0
 80105ec:	f7ef fe76 	bl	80002dc <__adddf3>
 80105f0:	4605      	mov	r5, r0
 80105f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80105f6:	2c00      	cmp	r4, #0
 80105f8:	f040 808d 	bne.w	8010716 <_dtoa_r+0x51e>
 80105fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010600:	4b71      	ldr	r3, [pc, #452]	@ (80107c8 <_dtoa_r+0x5d0>)
 8010602:	2200      	movs	r2, #0
 8010604:	f7ef fe68 	bl	80002d8 <__aeabi_dsub>
 8010608:	4602      	mov	r2, r0
 801060a:	460b      	mov	r3, r1
 801060c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010610:	462a      	mov	r2, r5
 8010612:	4633      	mov	r3, r6
 8010614:	f7f0 faa8 	bl	8000b68 <__aeabi_dcmpgt>
 8010618:	2800      	cmp	r0, #0
 801061a:	f040 828b 	bne.w	8010b34 <_dtoa_r+0x93c>
 801061e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010622:	462a      	mov	r2, r5
 8010624:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010628:	f7f0 fa80 	bl	8000b2c <__aeabi_dcmplt>
 801062c:	2800      	cmp	r0, #0
 801062e:	f040 8128 	bne.w	8010882 <_dtoa_r+0x68a>
 8010632:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010636:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801063a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801063c:	2b00      	cmp	r3, #0
 801063e:	f2c0 815a 	blt.w	80108f6 <_dtoa_r+0x6fe>
 8010642:	2f0e      	cmp	r7, #14
 8010644:	f300 8157 	bgt.w	80108f6 <_dtoa_r+0x6fe>
 8010648:	4b5a      	ldr	r3, [pc, #360]	@ (80107b4 <_dtoa_r+0x5bc>)
 801064a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801064e:	ed93 7b00 	vldr	d7, [r3]
 8010652:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010654:	2b00      	cmp	r3, #0
 8010656:	ed8d 7b00 	vstr	d7, [sp]
 801065a:	da03      	bge.n	8010664 <_dtoa_r+0x46c>
 801065c:	9b07      	ldr	r3, [sp, #28]
 801065e:	2b00      	cmp	r3, #0
 8010660:	f340 8101 	ble.w	8010866 <_dtoa_r+0x66e>
 8010664:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010668:	4656      	mov	r6, sl
 801066a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801066e:	4620      	mov	r0, r4
 8010670:	4629      	mov	r1, r5
 8010672:	f7f0 f913 	bl	800089c <__aeabi_ddiv>
 8010676:	f7f0 fa97 	bl	8000ba8 <__aeabi_d2iz>
 801067a:	4680      	mov	r8, r0
 801067c:	f7ef ff7a 	bl	8000574 <__aeabi_i2d>
 8010680:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010684:	f7ef ffe0 	bl	8000648 <__aeabi_dmul>
 8010688:	4602      	mov	r2, r0
 801068a:	460b      	mov	r3, r1
 801068c:	4620      	mov	r0, r4
 801068e:	4629      	mov	r1, r5
 8010690:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010694:	f7ef fe20 	bl	80002d8 <__aeabi_dsub>
 8010698:	f806 4b01 	strb.w	r4, [r6], #1
 801069c:	9d07      	ldr	r5, [sp, #28]
 801069e:	eba6 040a 	sub.w	r4, r6, sl
 80106a2:	42a5      	cmp	r5, r4
 80106a4:	4602      	mov	r2, r0
 80106a6:	460b      	mov	r3, r1
 80106a8:	f040 8117 	bne.w	80108da <_dtoa_r+0x6e2>
 80106ac:	f7ef fe16 	bl	80002dc <__adddf3>
 80106b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106b4:	4604      	mov	r4, r0
 80106b6:	460d      	mov	r5, r1
 80106b8:	f7f0 fa56 	bl	8000b68 <__aeabi_dcmpgt>
 80106bc:	2800      	cmp	r0, #0
 80106be:	f040 80f9 	bne.w	80108b4 <_dtoa_r+0x6bc>
 80106c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106c6:	4620      	mov	r0, r4
 80106c8:	4629      	mov	r1, r5
 80106ca:	f7f0 fa25 	bl	8000b18 <__aeabi_dcmpeq>
 80106ce:	b118      	cbz	r0, 80106d8 <_dtoa_r+0x4e0>
 80106d0:	f018 0f01 	tst.w	r8, #1
 80106d4:	f040 80ee 	bne.w	80108b4 <_dtoa_r+0x6bc>
 80106d8:	4649      	mov	r1, r9
 80106da:	4658      	mov	r0, fp
 80106dc:	f000 ffdc 	bl	8011698 <_Bfree>
 80106e0:	2300      	movs	r3, #0
 80106e2:	7033      	strb	r3, [r6, #0]
 80106e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80106e6:	3701      	adds	r7, #1
 80106e8:	601f      	str	r7, [r3, #0]
 80106ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	f000 831d 	beq.w	8010d2c <_dtoa_r+0xb34>
 80106f2:	601e      	str	r6, [r3, #0]
 80106f4:	e31a      	b.n	8010d2c <_dtoa_r+0xb34>
 80106f6:	07e2      	lsls	r2, r4, #31
 80106f8:	d505      	bpl.n	8010706 <_dtoa_r+0x50e>
 80106fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80106fe:	f7ef ffa3 	bl	8000648 <__aeabi_dmul>
 8010702:	3601      	adds	r6, #1
 8010704:	2301      	movs	r3, #1
 8010706:	1064      	asrs	r4, r4, #1
 8010708:	3508      	adds	r5, #8
 801070a:	e73f      	b.n	801058c <_dtoa_r+0x394>
 801070c:	2602      	movs	r6, #2
 801070e:	e742      	b.n	8010596 <_dtoa_r+0x39e>
 8010710:	9c07      	ldr	r4, [sp, #28]
 8010712:	9704      	str	r7, [sp, #16]
 8010714:	e761      	b.n	80105da <_dtoa_r+0x3e2>
 8010716:	4b27      	ldr	r3, [pc, #156]	@ (80107b4 <_dtoa_r+0x5bc>)
 8010718:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801071a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801071e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010722:	4454      	add	r4, sl
 8010724:	2900      	cmp	r1, #0
 8010726:	d053      	beq.n	80107d0 <_dtoa_r+0x5d8>
 8010728:	4928      	ldr	r1, [pc, #160]	@ (80107cc <_dtoa_r+0x5d4>)
 801072a:	2000      	movs	r0, #0
 801072c:	f7f0 f8b6 	bl	800089c <__aeabi_ddiv>
 8010730:	4633      	mov	r3, r6
 8010732:	462a      	mov	r2, r5
 8010734:	f7ef fdd0 	bl	80002d8 <__aeabi_dsub>
 8010738:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801073c:	4656      	mov	r6, sl
 801073e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010742:	f7f0 fa31 	bl	8000ba8 <__aeabi_d2iz>
 8010746:	4605      	mov	r5, r0
 8010748:	f7ef ff14 	bl	8000574 <__aeabi_i2d>
 801074c:	4602      	mov	r2, r0
 801074e:	460b      	mov	r3, r1
 8010750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010754:	f7ef fdc0 	bl	80002d8 <__aeabi_dsub>
 8010758:	3530      	adds	r5, #48	@ 0x30
 801075a:	4602      	mov	r2, r0
 801075c:	460b      	mov	r3, r1
 801075e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010762:	f806 5b01 	strb.w	r5, [r6], #1
 8010766:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801076a:	f7f0 f9df 	bl	8000b2c <__aeabi_dcmplt>
 801076e:	2800      	cmp	r0, #0
 8010770:	d171      	bne.n	8010856 <_dtoa_r+0x65e>
 8010772:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010776:	4911      	ldr	r1, [pc, #68]	@ (80107bc <_dtoa_r+0x5c4>)
 8010778:	2000      	movs	r0, #0
 801077a:	f7ef fdad 	bl	80002d8 <__aeabi_dsub>
 801077e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010782:	f7f0 f9d3 	bl	8000b2c <__aeabi_dcmplt>
 8010786:	2800      	cmp	r0, #0
 8010788:	f040 8095 	bne.w	80108b6 <_dtoa_r+0x6be>
 801078c:	42a6      	cmp	r6, r4
 801078e:	f43f af50 	beq.w	8010632 <_dtoa_r+0x43a>
 8010792:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010796:	4b0a      	ldr	r3, [pc, #40]	@ (80107c0 <_dtoa_r+0x5c8>)
 8010798:	2200      	movs	r2, #0
 801079a:	f7ef ff55 	bl	8000648 <__aeabi_dmul>
 801079e:	4b08      	ldr	r3, [pc, #32]	@ (80107c0 <_dtoa_r+0x5c8>)
 80107a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80107a4:	2200      	movs	r2, #0
 80107a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107aa:	f7ef ff4d 	bl	8000648 <__aeabi_dmul>
 80107ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80107b2:	e7c4      	b.n	801073e <_dtoa_r+0x546>
 80107b4:	08013cf0 	.word	0x08013cf0
 80107b8:	08013cc8 	.word	0x08013cc8
 80107bc:	3ff00000 	.word	0x3ff00000
 80107c0:	40240000 	.word	0x40240000
 80107c4:	401c0000 	.word	0x401c0000
 80107c8:	40140000 	.word	0x40140000
 80107cc:	3fe00000 	.word	0x3fe00000
 80107d0:	4631      	mov	r1, r6
 80107d2:	4628      	mov	r0, r5
 80107d4:	f7ef ff38 	bl	8000648 <__aeabi_dmul>
 80107d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80107dc:	9415      	str	r4, [sp, #84]	@ 0x54
 80107de:	4656      	mov	r6, sl
 80107e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107e4:	f7f0 f9e0 	bl	8000ba8 <__aeabi_d2iz>
 80107e8:	4605      	mov	r5, r0
 80107ea:	f7ef fec3 	bl	8000574 <__aeabi_i2d>
 80107ee:	4602      	mov	r2, r0
 80107f0:	460b      	mov	r3, r1
 80107f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107f6:	f7ef fd6f 	bl	80002d8 <__aeabi_dsub>
 80107fa:	3530      	adds	r5, #48	@ 0x30
 80107fc:	f806 5b01 	strb.w	r5, [r6], #1
 8010800:	4602      	mov	r2, r0
 8010802:	460b      	mov	r3, r1
 8010804:	42a6      	cmp	r6, r4
 8010806:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801080a:	f04f 0200 	mov.w	r2, #0
 801080e:	d124      	bne.n	801085a <_dtoa_r+0x662>
 8010810:	4bac      	ldr	r3, [pc, #688]	@ (8010ac4 <_dtoa_r+0x8cc>)
 8010812:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010816:	f7ef fd61 	bl	80002dc <__adddf3>
 801081a:	4602      	mov	r2, r0
 801081c:	460b      	mov	r3, r1
 801081e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010822:	f7f0 f9a1 	bl	8000b68 <__aeabi_dcmpgt>
 8010826:	2800      	cmp	r0, #0
 8010828:	d145      	bne.n	80108b6 <_dtoa_r+0x6be>
 801082a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801082e:	49a5      	ldr	r1, [pc, #660]	@ (8010ac4 <_dtoa_r+0x8cc>)
 8010830:	2000      	movs	r0, #0
 8010832:	f7ef fd51 	bl	80002d8 <__aeabi_dsub>
 8010836:	4602      	mov	r2, r0
 8010838:	460b      	mov	r3, r1
 801083a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801083e:	f7f0 f975 	bl	8000b2c <__aeabi_dcmplt>
 8010842:	2800      	cmp	r0, #0
 8010844:	f43f aef5 	beq.w	8010632 <_dtoa_r+0x43a>
 8010848:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801084a:	1e73      	subs	r3, r6, #1
 801084c:	9315      	str	r3, [sp, #84]	@ 0x54
 801084e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010852:	2b30      	cmp	r3, #48	@ 0x30
 8010854:	d0f8      	beq.n	8010848 <_dtoa_r+0x650>
 8010856:	9f04      	ldr	r7, [sp, #16]
 8010858:	e73e      	b.n	80106d8 <_dtoa_r+0x4e0>
 801085a:	4b9b      	ldr	r3, [pc, #620]	@ (8010ac8 <_dtoa_r+0x8d0>)
 801085c:	f7ef fef4 	bl	8000648 <__aeabi_dmul>
 8010860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010864:	e7bc      	b.n	80107e0 <_dtoa_r+0x5e8>
 8010866:	d10c      	bne.n	8010882 <_dtoa_r+0x68a>
 8010868:	4b98      	ldr	r3, [pc, #608]	@ (8010acc <_dtoa_r+0x8d4>)
 801086a:	2200      	movs	r2, #0
 801086c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010870:	f7ef feea 	bl	8000648 <__aeabi_dmul>
 8010874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010878:	f7f0 f96c 	bl	8000b54 <__aeabi_dcmpge>
 801087c:	2800      	cmp	r0, #0
 801087e:	f000 8157 	beq.w	8010b30 <_dtoa_r+0x938>
 8010882:	2400      	movs	r4, #0
 8010884:	4625      	mov	r5, r4
 8010886:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010888:	43db      	mvns	r3, r3
 801088a:	9304      	str	r3, [sp, #16]
 801088c:	4656      	mov	r6, sl
 801088e:	2700      	movs	r7, #0
 8010890:	4621      	mov	r1, r4
 8010892:	4658      	mov	r0, fp
 8010894:	f000 ff00 	bl	8011698 <_Bfree>
 8010898:	2d00      	cmp	r5, #0
 801089a:	d0dc      	beq.n	8010856 <_dtoa_r+0x65e>
 801089c:	b12f      	cbz	r7, 80108aa <_dtoa_r+0x6b2>
 801089e:	42af      	cmp	r7, r5
 80108a0:	d003      	beq.n	80108aa <_dtoa_r+0x6b2>
 80108a2:	4639      	mov	r1, r7
 80108a4:	4658      	mov	r0, fp
 80108a6:	f000 fef7 	bl	8011698 <_Bfree>
 80108aa:	4629      	mov	r1, r5
 80108ac:	4658      	mov	r0, fp
 80108ae:	f000 fef3 	bl	8011698 <_Bfree>
 80108b2:	e7d0      	b.n	8010856 <_dtoa_r+0x65e>
 80108b4:	9704      	str	r7, [sp, #16]
 80108b6:	4633      	mov	r3, r6
 80108b8:	461e      	mov	r6, r3
 80108ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108be:	2a39      	cmp	r2, #57	@ 0x39
 80108c0:	d107      	bne.n	80108d2 <_dtoa_r+0x6da>
 80108c2:	459a      	cmp	sl, r3
 80108c4:	d1f8      	bne.n	80108b8 <_dtoa_r+0x6c0>
 80108c6:	9a04      	ldr	r2, [sp, #16]
 80108c8:	3201      	adds	r2, #1
 80108ca:	9204      	str	r2, [sp, #16]
 80108cc:	2230      	movs	r2, #48	@ 0x30
 80108ce:	f88a 2000 	strb.w	r2, [sl]
 80108d2:	781a      	ldrb	r2, [r3, #0]
 80108d4:	3201      	adds	r2, #1
 80108d6:	701a      	strb	r2, [r3, #0]
 80108d8:	e7bd      	b.n	8010856 <_dtoa_r+0x65e>
 80108da:	4b7b      	ldr	r3, [pc, #492]	@ (8010ac8 <_dtoa_r+0x8d0>)
 80108dc:	2200      	movs	r2, #0
 80108de:	f7ef feb3 	bl	8000648 <__aeabi_dmul>
 80108e2:	2200      	movs	r2, #0
 80108e4:	2300      	movs	r3, #0
 80108e6:	4604      	mov	r4, r0
 80108e8:	460d      	mov	r5, r1
 80108ea:	f7f0 f915 	bl	8000b18 <__aeabi_dcmpeq>
 80108ee:	2800      	cmp	r0, #0
 80108f0:	f43f aebb 	beq.w	801066a <_dtoa_r+0x472>
 80108f4:	e6f0      	b.n	80106d8 <_dtoa_r+0x4e0>
 80108f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80108f8:	2a00      	cmp	r2, #0
 80108fa:	f000 80db 	beq.w	8010ab4 <_dtoa_r+0x8bc>
 80108fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010900:	2a01      	cmp	r2, #1
 8010902:	f300 80bf 	bgt.w	8010a84 <_dtoa_r+0x88c>
 8010906:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010908:	2a00      	cmp	r2, #0
 801090a:	f000 80b7 	beq.w	8010a7c <_dtoa_r+0x884>
 801090e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010912:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010914:	4646      	mov	r6, r8
 8010916:	9a08      	ldr	r2, [sp, #32]
 8010918:	2101      	movs	r1, #1
 801091a:	441a      	add	r2, r3
 801091c:	4658      	mov	r0, fp
 801091e:	4498      	add	r8, r3
 8010920:	9208      	str	r2, [sp, #32]
 8010922:	f000 ffb7 	bl	8011894 <__i2b>
 8010926:	4605      	mov	r5, r0
 8010928:	b15e      	cbz	r6, 8010942 <_dtoa_r+0x74a>
 801092a:	9b08      	ldr	r3, [sp, #32]
 801092c:	2b00      	cmp	r3, #0
 801092e:	dd08      	ble.n	8010942 <_dtoa_r+0x74a>
 8010930:	42b3      	cmp	r3, r6
 8010932:	9a08      	ldr	r2, [sp, #32]
 8010934:	bfa8      	it	ge
 8010936:	4633      	movge	r3, r6
 8010938:	eba8 0803 	sub.w	r8, r8, r3
 801093c:	1af6      	subs	r6, r6, r3
 801093e:	1ad3      	subs	r3, r2, r3
 8010940:	9308      	str	r3, [sp, #32]
 8010942:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010944:	b1f3      	cbz	r3, 8010984 <_dtoa_r+0x78c>
 8010946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010948:	2b00      	cmp	r3, #0
 801094a:	f000 80b7 	beq.w	8010abc <_dtoa_r+0x8c4>
 801094e:	b18c      	cbz	r4, 8010974 <_dtoa_r+0x77c>
 8010950:	4629      	mov	r1, r5
 8010952:	4622      	mov	r2, r4
 8010954:	4658      	mov	r0, fp
 8010956:	f001 f85d 	bl	8011a14 <__pow5mult>
 801095a:	464a      	mov	r2, r9
 801095c:	4601      	mov	r1, r0
 801095e:	4605      	mov	r5, r0
 8010960:	4658      	mov	r0, fp
 8010962:	f000 ffad 	bl	80118c0 <__multiply>
 8010966:	4649      	mov	r1, r9
 8010968:	9004      	str	r0, [sp, #16]
 801096a:	4658      	mov	r0, fp
 801096c:	f000 fe94 	bl	8011698 <_Bfree>
 8010970:	9b04      	ldr	r3, [sp, #16]
 8010972:	4699      	mov	r9, r3
 8010974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010976:	1b1a      	subs	r2, r3, r4
 8010978:	d004      	beq.n	8010984 <_dtoa_r+0x78c>
 801097a:	4649      	mov	r1, r9
 801097c:	4658      	mov	r0, fp
 801097e:	f001 f849 	bl	8011a14 <__pow5mult>
 8010982:	4681      	mov	r9, r0
 8010984:	2101      	movs	r1, #1
 8010986:	4658      	mov	r0, fp
 8010988:	f000 ff84 	bl	8011894 <__i2b>
 801098c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801098e:	4604      	mov	r4, r0
 8010990:	2b00      	cmp	r3, #0
 8010992:	f000 81cf 	beq.w	8010d34 <_dtoa_r+0xb3c>
 8010996:	461a      	mov	r2, r3
 8010998:	4601      	mov	r1, r0
 801099a:	4658      	mov	r0, fp
 801099c:	f001 f83a 	bl	8011a14 <__pow5mult>
 80109a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109a2:	2b01      	cmp	r3, #1
 80109a4:	4604      	mov	r4, r0
 80109a6:	f300 8095 	bgt.w	8010ad4 <_dtoa_r+0x8dc>
 80109aa:	9b02      	ldr	r3, [sp, #8]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	f040 8087 	bne.w	8010ac0 <_dtoa_r+0x8c8>
 80109b2:	9b03      	ldr	r3, [sp, #12]
 80109b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	f040 8089 	bne.w	8010ad0 <_dtoa_r+0x8d8>
 80109be:	9b03      	ldr	r3, [sp, #12]
 80109c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80109c4:	0d1b      	lsrs	r3, r3, #20
 80109c6:	051b      	lsls	r3, r3, #20
 80109c8:	b12b      	cbz	r3, 80109d6 <_dtoa_r+0x7de>
 80109ca:	9b08      	ldr	r3, [sp, #32]
 80109cc:	3301      	adds	r3, #1
 80109ce:	9308      	str	r3, [sp, #32]
 80109d0:	f108 0801 	add.w	r8, r8, #1
 80109d4:	2301      	movs	r3, #1
 80109d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80109d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109da:	2b00      	cmp	r3, #0
 80109dc:	f000 81b0 	beq.w	8010d40 <_dtoa_r+0xb48>
 80109e0:	6923      	ldr	r3, [r4, #16]
 80109e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80109e6:	6918      	ldr	r0, [r3, #16]
 80109e8:	f000 ff08 	bl	80117fc <__hi0bits>
 80109ec:	f1c0 0020 	rsb	r0, r0, #32
 80109f0:	9b08      	ldr	r3, [sp, #32]
 80109f2:	4418      	add	r0, r3
 80109f4:	f010 001f 	ands.w	r0, r0, #31
 80109f8:	d077      	beq.n	8010aea <_dtoa_r+0x8f2>
 80109fa:	f1c0 0320 	rsb	r3, r0, #32
 80109fe:	2b04      	cmp	r3, #4
 8010a00:	dd6b      	ble.n	8010ada <_dtoa_r+0x8e2>
 8010a02:	9b08      	ldr	r3, [sp, #32]
 8010a04:	f1c0 001c 	rsb	r0, r0, #28
 8010a08:	4403      	add	r3, r0
 8010a0a:	4480      	add	r8, r0
 8010a0c:	4406      	add	r6, r0
 8010a0e:	9308      	str	r3, [sp, #32]
 8010a10:	f1b8 0f00 	cmp.w	r8, #0
 8010a14:	dd05      	ble.n	8010a22 <_dtoa_r+0x82a>
 8010a16:	4649      	mov	r1, r9
 8010a18:	4642      	mov	r2, r8
 8010a1a:	4658      	mov	r0, fp
 8010a1c:	f001 f854 	bl	8011ac8 <__lshift>
 8010a20:	4681      	mov	r9, r0
 8010a22:	9b08      	ldr	r3, [sp, #32]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	dd05      	ble.n	8010a34 <_dtoa_r+0x83c>
 8010a28:	4621      	mov	r1, r4
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	4658      	mov	r0, fp
 8010a2e:	f001 f84b 	bl	8011ac8 <__lshift>
 8010a32:	4604      	mov	r4, r0
 8010a34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d059      	beq.n	8010aee <_dtoa_r+0x8f6>
 8010a3a:	4621      	mov	r1, r4
 8010a3c:	4648      	mov	r0, r9
 8010a3e:	f001 f8af 	bl	8011ba0 <__mcmp>
 8010a42:	2800      	cmp	r0, #0
 8010a44:	da53      	bge.n	8010aee <_dtoa_r+0x8f6>
 8010a46:	1e7b      	subs	r3, r7, #1
 8010a48:	9304      	str	r3, [sp, #16]
 8010a4a:	4649      	mov	r1, r9
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	220a      	movs	r2, #10
 8010a50:	4658      	mov	r0, fp
 8010a52:	f000 fe43 	bl	80116dc <__multadd>
 8010a56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a58:	4681      	mov	r9, r0
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	f000 8172 	beq.w	8010d44 <_dtoa_r+0xb4c>
 8010a60:	2300      	movs	r3, #0
 8010a62:	4629      	mov	r1, r5
 8010a64:	220a      	movs	r2, #10
 8010a66:	4658      	mov	r0, fp
 8010a68:	f000 fe38 	bl	80116dc <__multadd>
 8010a6c:	9b00      	ldr	r3, [sp, #0]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	4605      	mov	r5, r0
 8010a72:	dc67      	bgt.n	8010b44 <_dtoa_r+0x94c>
 8010a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a76:	2b02      	cmp	r3, #2
 8010a78:	dc41      	bgt.n	8010afe <_dtoa_r+0x906>
 8010a7a:	e063      	b.n	8010b44 <_dtoa_r+0x94c>
 8010a7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010a7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010a82:	e746      	b.n	8010912 <_dtoa_r+0x71a>
 8010a84:	9b07      	ldr	r3, [sp, #28]
 8010a86:	1e5c      	subs	r4, r3, #1
 8010a88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a8a:	42a3      	cmp	r3, r4
 8010a8c:	bfbf      	itttt	lt
 8010a8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010a90:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010a92:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010a94:	1ae3      	sublt	r3, r4, r3
 8010a96:	bfb4      	ite	lt
 8010a98:	18d2      	addlt	r2, r2, r3
 8010a9a:	1b1c      	subge	r4, r3, r4
 8010a9c:	9b07      	ldr	r3, [sp, #28]
 8010a9e:	bfbc      	itt	lt
 8010aa0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010aa2:	2400      	movlt	r4, #0
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	bfb5      	itete	lt
 8010aa8:	eba8 0603 	sublt.w	r6, r8, r3
 8010aac:	9b07      	ldrge	r3, [sp, #28]
 8010aae:	2300      	movlt	r3, #0
 8010ab0:	4646      	movge	r6, r8
 8010ab2:	e730      	b.n	8010916 <_dtoa_r+0x71e>
 8010ab4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010ab6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010ab8:	4646      	mov	r6, r8
 8010aba:	e735      	b.n	8010928 <_dtoa_r+0x730>
 8010abc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010abe:	e75c      	b.n	801097a <_dtoa_r+0x782>
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	e788      	b.n	80109d6 <_dtoa_r+0x7de>
 8010ac4:	3fe00000 	.word	0x3fe00000
 8010ac8:	40240000 	.word	0x40240000
 8010acc:	40140000 	.word	0x40140000
 8010ad0:	9b02      	ldr	r3, [sp, #8]
 8010ad2:	e780      	b.n	80109d6 <_dtoa_r+0x7de>
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ad8:	e782      	b.n	80109e0 <_dtoa_r+0x7e8>
 8010ada:	d099      	beq.n	8010a10 <_dtoa_r+0x818>
 8010adc:	9a08      	ldr	r2, [sp, #32]
 8010ade:	331c      	adds	r3, #28
 8010ae0:	441a      	add	r2, r3
 8010ae2:	4498      	add	r8, r3
 8010ae4:	441e      	add	r6, r3
 8010ae6:	9208      	str	r2, [sp, #32]
 8010ae8:	e792      	b.n	8010a10 <_dtoa_r+0x818>
 8010aea:	4603      	mov	r3, r0
 8010aec:	e7f6      	b.n	8010adc <_dtoa_r+0x8e4>
 8010aee:	9b07      	ldr	r3, [sp, #28]
 8010af0:	9704      	str	r7, [sp, #16]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	dc20      	bgt.n	8010b38 <_dtoa_r+0x940>
 8010af6:	9300      	str	r3, [sp, #0]
 8010af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010afa:	2b02      	cmp	r3, #2
 8010afc:	dd1e      	ble.n	8010b3c <_dtoa_r+0x944>
 8010afe:	9b00      	ldr	r3, [sp, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	f47f aec0 	bne.w	8010886 <_dtoa_r+0x68e>
 8010b06:	4621      	mov	r1, r4
 8010b08:	2205      	movs	r2, #5
 8010b0a:	4658      	mov	r0, fp
 8010b0c:	f000 fde6 	bl	80116dc <__multadd>
 8010b10:	4601      	mov	r1, r0
 8010b12:	4604      	mov	r4, r0
 8010b14:	4648      	mov	r0, r9
 8010b16:	f001 f843 	bl	8011ba0 <__mcmp>
 8010b1a:	2800      	cmp	r0, #0
 8010b1c:	f77f aeb3 	ble.w	8010886 <_dtoa_r+0x68e>
 8010b20:	4656      	mov	r6, sl
 8010b22:	2331      	movs	r3, #49	@ 0x31
 8010b24:	f806 3b01 	strb.w	r3, [r6], #1
 8010b28:	9b04      	ldr	r3, [sp, #16]
 8010b2a:	3301      	adds	r3, #1
 8010b2c:	9304      	str	r3, [sp, #16]
 8010b2e:	e6ae      	b.n	801088e <_dtoa_r+0x696>
 8010b30:	9c07      	ldr	r4, [sp, #28]
 8010b32:	9704      	str	r7, [sp, #16]
 8010b34:	4625      	mov	r5, r4
 8010b36:	e7f3      	b.n	8010b20 <_dtoa_r+0x928>
 8010b38:	9b07      	ldr	r3, [sp, #28]
 8010b3a:	9300      	str	r3, [sp, #0]
 8010b3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	f000 8104 	beq.w	8010d4c <_dtoa_r+0xb54>
 8010b44:	2e00      	cmp	r6, #0
 8010b46:	dd05      	ble.n	8010b54 <_dtoa_r+0x95c>
 8010b48:	4629      	mov	r1, r5
 8010b4a:	4632      	mov	r2, r6
 8010b4c:	4658      	mov	r0, fp
 8010b4e:	f000 ffbb 	bl	8011ac8 <__lshift>
 8010b52:	4605      	mov	r5, r0
 8010b54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d05a      	beq.n	8010c10 <_dtoa_r+0xa18>
 8010b5a:	6869      	ldr	r1, [r5, #4]
 8010b5c:	4658      	mov	r0, fp
 8010b5e:	f000 fd5b 	bl	8011618 <_Balloc>
 8010b62:	4606      	mov	r6, r0
 8010b64:	b928      	cbnz	r0, 8010b72 <_dtoa_r+0x97a>
 8010b66:	4b84      	ldr	r3, [pc, #528]	@ (8010d78 <_dtoa_r+0xb80>)
 8010b68:	4602      	mov	r2, r0
 8010b6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010b6e:	f7ff bb5a 	b.w	8010226 <_dtoa_r+0x2e>
 8010b72:	692a      	ldr	r2, [r5, #16]
 8010b74:	3202      	adds	r2, #2
 8010b76:	0092      	lsls	r2, r2, #2
 8010b78:	f105 010c 	add.w	r1, r5, #12
 8010b7c:	300c      	adds	r0, #12
 8010b7e:	f7ff fa94 	bl	80100aa <memcpy>
 8010b82:	2201      	movs	r2, #1
 8010b84:	4631      	mov	r1, r6
 8010b86:	4658      	mov	r0, fp
 8010b88:	f000 ff9e 	bl	8011ac8 <__lshift>
 8010b8c:	f10a 0301 	add.w	r3, sl, #1
 8010b90:	9307      	str	r3, [sp, #28]
 8010b92:	9b00      	ldr	r3, [sp, #0]
 8010b94:	4453      	add	r3, sl
 8010b96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b98:	9b02      	ldr	r3, [sp, #8]
 8010b9a:	f003 0301 	and.w	r3, r3, #1
 8010b9e:	462f      	mov	r7, r5
 8010ba0:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ba2:	4605      	mov	r5, r0
 8010ba4:	9b07      	ldr	r3, [sp, #28]
 8010ba6:	4621      	mov	r1, r4
 8010ba8:	3b01      	subs	r3, #1
 8010baa:	4648      	mov	r0, r9
 8010bac:	9300      	str	r3, [sp, #0]
 8010bae:	f7ff fa99 	bl	80100e4 <quorem>
 8010bb2:	4639      	mov	r1, r7
 8010bb4:	9002      	str	r0, [sp, #8]
 8010bb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010bba:	4648      	mov	r0, r9
 8010bbc:	f000 fff0 	bl	8011ba0 <__mcmp>
 8010bc0:	462a      	mov	r2, r5
 8010bc2:	9008      	str	r0, [sp, #32]
 8010bc4:	4621      	mov	r1, r4
 8010bc6:	4658      	mov	r0, fp
 8010bc8:	f001 f806 	bl	8011bd8 <__mdiff>
 8010bcc:	68c2      	ldr	r2, [r0, #12]
 8010bce:	4606      	mov	r6, r0
 8010bd0:	bb02      	cbnz	r2, 8010c14 <_dtoa_r+0xa1c>
 8010bd2:	4601      	mov	r1, r0
 8010bd4:	4648      	mov	r0, r9
 8010bd6:	f000 ffe3 	bl	8011ba0 <__mcmp>
 8010bda:	4602      	mov	r2, r0
 8010bdc:	4631      	mov	r1, r6
 8010bde:	4658      	mov	r0, fp
 8010be0:	920e      	str	r2, [sp, #56]	@ 0x38
 8010be2:	f000 fd59 	bl	8011698 <_Bfree>
 8010be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010be8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010bea:	9e07      	ldr	r6, [sp, #28]
 8010bec:	ea43 0102 	orr.w	r1, r3, r2
 8010bf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bf2:	4319      	orrs	r1, r3
 8010bf4:	d110      	bne.n	8010c18 <_dtoa_r+0xa20>
 8010bf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010bfa:	d029      	beq.n	8010c50 <_dtoa_r+0xa58>
 8010bfc:	9b08      	ldr	r3, [sp, #32]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	dd02      	ble.n	8010c08 <_dtoa_r+0xa10>
 8010c02:	9b02      	ldr	r3, [sp, #8]
 8010c04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010c08:	9b00      	ldr	r3, [sp, #0]
 8010c0a:	f883 8000 	strb.w	r8, [r3]
 8010c0e:	e63f      	b.n	8010890 <_dtoa_r+0x698>
 8010c10:	4628      	mov	r0, r5
 8010c12:	e7bb      	b.n	8010b8c <_dtoa_r+0x994>
 8010c14:	2201      	movs	r2, #1
 8010c16:	e7e1      	b.n	8010bdc <_dtoa_r+0x9e4>
 8010c18:	9b08      	ldr	r3, [sp, #32]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	db04      	blt.n	8010c28 <_dtoa_r+0xa30>
 8010c1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010c20:	430b      	orrs	r3, r1
 8010c22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010c24:	430b      	orrs	r3, r1
 8010c26:	d120      	bne.n	8010c6a <_dtoa_r+0xa72>
 8010c28:	2a00      	cmp	r2, #0
 8010c2a:	dded      	ble.n	8010c08 <_dtoa_r+0xa10>
 8010c2c:	4649      	mov	r1, r9
 8010c2e:	2201      	movs	r2, #1
 8010c30:	4658      	mov	r0, fp
 8010c32:	f000 ff49 	bl	8011ac8 <__lshift>
 8010c36:	4621      	mov	r1, r4
 8010c38:	4681      	mov	r9, r0
 8010c3a:	f000 ffb1 	bl	8011ba0 <__mcmp>
 8010c3e:	2800      	cmp	r0, #0
 8010c40:	dc03      	bgt.n	8010c4a <_dtoa_r+0xa52>
 8010c42:	d1e1      	bne.n	8010c08 <_dtoa_r+0xa10>
 8010c44:	f018 0f01 	tst.w	r8, #1
 8010c48:	d0de      	beq.n	8010c08 <_dtoa_r+0xa10>
 8010c4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010c4e:	d1d8      	bne.n	8010c02 <_dtoa_r+0xa0a>
 8010c50:	9a00      	ldr	r2, [sp, #0]
 8010c52:	2339      	movs	r3, #57	@ 0x39
 8010c54:	7013      	strb	r3, [r2, #0]
 8010c56:	4633      	mov	r3, r6
 8010c58:	461e      	mov	r6, r3
 8010c5a:	3b01      	subs	r3, #1
 8010c5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010c60:	2a39      	cmp	r2, #57	@ 0x39
 8010c62:	d052      	beq.n	8010d0a <_dtoa_r+0xb12>
 8010c64:	3201      	adds	r2, #1
 8010c66:	701a      	strb	r2, [r3, #0]
 8010c68:	e612      	b.n	8010890 <_dtoa_r+0x698>
 8010c6a:	2a00      	cmp	r2, #0
 8010c6c:	dd07      	ble.n	8010c7e <_dtoa_r+0xa86>
 8010c6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010c72:	d0ed      	beq.n	8010c50 <_dtoa_r+0xa58>
 8010c74:	9a00      	ldr	r2, [sp, #0]
 8010c76:	f108 0301 	add.w	r3, r8, #1
 8010c7a:	7013      	strb	r3, [r2, #0]
 8010c7c:	e608      	b.n	8010890 <_dtoa_r+0x698>
 8010c7e:	9b07      	ldr	r3, [sp, #28]
 8010c80:	9a07      	ldr	r2, [sp, #28]
 8010c82:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010c86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c88:	4293      	cmp	r3, r2
 8010c8a:	d028      	beq.n	8010cde <_dtoa_r+0xae6>
 8010c8c:	4649      	mov	r1, r9
 8010c8e:	2300      	movs	r3, #0
 8010c90:	220a      	movs	r2, #10
 8010c92:	4658      	mov	r0, fp
 8010c94:	f000 fd22 	bl	80116dc <__multadd>
 8010c98:	42af      	cmp	r7, r5
 8010c9a:	4681      	mov	r9, r0
 8010c9c:	f04f 0300 	mov.w	r3, #0
 8010ca0:	f04f 020a 	mov.w	r2, #10
 8010ca4:	4639      	mov	r1, r7
 8010ca6:	4658      	mov	r0, fp
 8010ca8:	d107      	bne.n	8010cba <_dtoa_r+0xac2>
 8010caa:	f000 fd17 	bl	80116dc <__multadd>
 8010cae:	4607      	mov	r7, r0
 8010cb0:	4605      	mov	r5, r0
 8010cb2:	9b07      	ldr	r3, [sp, #28]
 8010cb4:	3301      	adds	r3, #1
 8010cb6:	9307      	str	r3, [sp, #28]
 8010cb8:	e774      	b.n	8010ba4 <_dtoa_r+0x9ac>
 8010cba:	f000 fd0f 	bl	80116dc <__multadd>
 8010cbe:	4629      	mov	r1, r5
 8010cc0:	4607      	mov	r7, r0
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	220a      	movs	r2, #10
 8010cc6:	4658      	mov	r0, fp
 8010cc8:	f000 fd08 	bl	80116dc <__multadd>
 8010ccc:	4605      	mov	r5, r0
 8010cce:	e7f0      	b.n	8010cb2 <_dtoa_r+0xaba>
 8010cd0:	9b00      	ldr	r3, [sp, #0]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	bfcc      	ite	gt
 8010cd6:	461e      	movgt	r6, r3
 8010cd8:	2601      	movle	r6, #1
 8010cda:	4456      	add	r6, sl
 8010cdc:	2700      	movs	r7, #0
 8010cde:	4649      	mov	r1, r9
 8010ce0:	2201      	movs	r2, #1
 8010ce2:	4658      	mov	r0, fp
 8010ce4:	f000 fef0 	bl	8011ac8 <__lshift>
 8010ce8:	4621      	mov	r1, r4
 8010cea:	4681      	mov	r9, r0
 8010cec:	f000 ff58 	bl	8011ba0 <__mcmp>
 8010cf0:	2800      	cmp	r0, #0
 8010cf2:	dcb0      	bgt.n	8010c56 <_dtoa_r+0xa5e>
 8010cf4:	d102      	bne.n	8010cfc <_dtoa_r+0xb04>
 8010cf6:	f018 0f01 	tst.w	r8, #1
 8010cfa:	d1ac      	bne.n	8010c56 <_dtoa_r+0xa5e>
 8010cfc:	4633      	mov	r3, r6
 8010cfe:	461e      	mov	r6, r3
 8010d00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d04:	2a30      	cmp	r2, #48	@ 0x30
 8010d06:	d0fa      	beq.n	8010cfe <_dtoa_r+0xb06>
 8010d08:	e5c2      	b.n	8010890 <_dtoa_r+0x698>
 8010d0a:	459a      	cmp	sl, r3
 8010d0c:	d1a4      	bne.n	8010c58 <_dtoa_r+0xa60>
 8010d0e:	9b04      	ldr	r3, [sp, #16]
 8010d10:	3301      	adds	r3, #1
 8010d12:	9304      	str	r3, [sp, #16]
 8010d14:	2331      	movs	r3, #49	@ 0x31
 8010d16:	f88a 3000 	strb.w	r3, [sl]
 8010d1a:	e5b9      	b.n	8010890 <_dtoa_r+0x698>
 8010d1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010d1e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010d7c <_dtoa_r+0xb84>
 8010d22:	b11b      	cbz	r3, 8010d2c <_dtoa_r+0xb34>
 8010d24:	f10a 0308 	add.w	r3, sl, #8
 8010d28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010d2a:	6013      	str	r3, [r2, #0]
 8010d2c:	4650      	mov	r0, sl
 8010d2e:	b019      	add	sp, #100	@ 0x64
 8010d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d36:	2b01      	cmp	r3, #1
 8010d38:	f77f ae37 	ble.w	80109aa <_dtoa_r+0x7b2>
 8010d3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d40:	2001      	movs	r0, #1
 8010d42:	e655      	b.n	80109f0 <_dtoa_r+0x7f8>
 8010d44:	9b00      	ldr	r3, [sp, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	f77f aed6 	ble.w	8010af8 <_dtoa_r+0x900>
 8010d4c:	4656      	mov	r6, sl
 8010d4e:	4621      	mov	r1, r4
 8010d50:	4648      	mov	r0, r9
 8010d52:	f7ff f9c7 	bl	80100e4 <quorem>
 8010d56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010d5a:	f806 8b01 	strb.w	r8, [r6], #1
 8010d5e:	9b00      	ldr	r3, [sp, #0]
 8010d60:	eba6 020a 	sub.w	r2, r6, sl
 8010d64:	4293      	cmp	r3, r2
 8010d66:	ddb3      	ble.n	8010cd0 <_dtoa_r+0xad8>
 8010d68:	4649      	mov	r1, r9
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	220a      	movs	r2, #10
 8010d6e:	4658      	mov	r0, fp
 8010d70:	f000 fcb4 	bl	80116dc <__multadd>
 8010d74:	4681      	mov	r9, r0
 8010d76:	e7ea      	b.n	8010d4e <_dtoa_r+0xb56>
 8010d78:	08013bed 	.word	0x08013bed
 8010d7c:	08013b71 	.word	0x08013b71

08010d80 <_free_r>:
 8010d80:	b538      	push	{r3, r4, r5, lr}
 8010d82:	4605      	mov	r5, r0
 8010d84:	2900      	cmp	r1, #0
 8010d86:	d041      	beq.n	8010e0c <_free_r+0x8c>
 8010d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d8c:	1f0c      	subs	r4, r1, #4
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	bfb8      	it	lt
 8010d92:	18e4      	addlt	r4, r4, r3
 8010d94:	f000 fc34 	bl	8011600 <__malloc_lock>
 8010d98:	4a1d      	ldr	r2, [pc, #116]	@ (8010e10 <_free_r+0x90>)
 8010d9a:	6813      	ldr	r3, [r2, #0]
 8010d9c:	b933      	cbnz	r3, 8010dac <_free_r+0x2c>
 8010d9e:	6063      	str	r3, [r4, #4]
 8010da0:	6014      	str	r4, [r2, #0]
 8010da2:	4628      	mov	r0, r5
 8010da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010da8:	f000 bc30 	b.w	801160c <__malloc_unlock>
 8010dac:	42a3      	cmp	r3, r4
 8010dae:	d908      	bls.n	8010dc2 <_free_r+0x42>
 8010db0:	6820      	ldr	r0, [r4, #0]
 8010db2:	1821      	adds	r1, r4, r0
 8010db4:	428b      	cmp	r3, r1
 8010db6:	bf01      	itttt	eq
 8010db8:	6819      	ldreq	r1, [r3, #0]
 8010dba:	685b      	ldreq	r3, [r3, #4]
 8010dbc:	1809      	addeq	r1, r1, r0
 8010dbe:	6021      	streq	r1, [r4, #0]
 8010dc0:	e7ed      	b.n	8010d9e <_free_r+0x1e>
 8010dc2:	461a      	mov	r2, r3
 8010dc4:	685b      	ldr	r3, [r3, #4]
 8010dc6:	b10b      	cbz	r3, 8010dcc <_free_r+0x4c>
 8010dc8:	42a3      	cmp	r3, r4
 8010dca:	d9fa      	bls.n	8010dc2 <_free_r+0x42>
 8010dcc:	6811      	ldr	r1, [r2, #0]
 8010dce:	1850      	adds	r0, r2, r1
 8010dd0:	42a0      	cmp	r0, r4
 8010dd2:	d10b      	bne.n	8010dec <_free_r+0x6c>
 8010dd4:	6820      	ldr	r0, [r4, #0]
 8010dd6:	4401      	add	r1, r0
 8010dd8:	1850      	adds	r0, r2, r1
 8010dda:	4283      	cmp	r3, r0
 8010ddc:	6011      	str	r1, [r2, #0]
 8010dde:	d1e0      	bne.n	8010da2 <_free_r+0x22>
 8010de0:	6818      	ldr	r0, [r3, #0]
 8010de2:	685b      	ldr	r3, [r3, #4]
 8010de4:	6053      	str	r3, [r2, #4]
 8010de6:	4408      	add	r0, r1
 8010de8:	6010      	str	r0, [r2, #0]
 8010dea:	e7da      	b.n	8010da2 <_free_r+0x22>
 8010dec:	d902      	bls.n	8010df4 <_free_r+0x74>
 8010dee:	230c      	movs	r3, #12
 8010df0:	602b      	str	r3, [r5, #0]
 8010df2:	e7d6      	b.n	8010da2 <_free_r+0x22>
 8010df4:	6820      	ldr	r0, [r4, #0]
 8010df6:	1821      	adds	r1, r4, r0
 8010df8:	428b      	cmp	r3, r1
 8010dfa:	bf04      	itt	eq
 8010dfc:	6819      	ldreq	r1, [r3, #0]
 8010dfe:	685b      	ldreq	r3, [r3, #4]
 8010e00:	6063      	str	r3, [r4, #4]
 8010e02:	bf04      	itt	eq
 8010e04:	1809      	addeq	r1, r1, r0
 8010e06:	6021      	streq	r1, [r4, #0]
 8010e08:	6054      	str	r4, [r2, #4]
 8010e0a:	e7ca      	b.n	8010da2 <_free_r+0x22>
 8010e0c:	bd38      	pop	{r3, r4, r5, pc}
 8010e0e:	bf00      	nop
 8010e10:	20000d68 	.word	0x20000d68

08010e14 <rshift>:
 8010e14:	6903      	ldr	r3, [r0, #16]
 8010e16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010e1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010e22:	f100 0414 	add.w	r4, r0, #20
 8010e26:	dd45      	ble.n	8010eb4 <rshift+0xa0>
 8010e28:	f011 011f 	ands.w	r1, r1, #31
 8010e2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010e30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010e34:	d10c      	bne.n	8010e50 <rshift+0x3c>
 8010e36:	f100 0710 	add.w	r7, r0, #16
 8010e3a:	4629      	mov	r1, r5
 8010e3c:	42b1      	cmp	r1, r6
 8010e3e:	d334      	bcc.n	8010eaa <rshift+0x96>
 8010e40:	1a9b      	subs	r3, r3, r2
 8010e42:	009b      	lsls	r3, r3, #2
 8010e44:	1eea      	subs	r2, r5, #3
 8010e46:	4296      	cmp	r6, r2
 8010e48:	bf38      	it	cc
 8010e4a:	2300      	movcc	r3, #0
 8010e4c:	4423      	add	r3, r4
 8010e4e:	e015      	b.n	8010e7c <rshift+0x68>
 8010e50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010e54:	f1c1 0820 	rsb	r8, r1, #32
 8010e58:	40cf      	lsrs	r7, r1
 8010e5a:	f105 0e04 	add.w	lr, r5, #4
 8010e5e:	46a1      	mov	r9, r4
 8010e60:	4576      	cmp	r6, lr
 8010e62:	46f4      	mov	ip, lr
 8010e64:	d815      	bhi.n	8010e92 <rshift+0x7e>
 8010e66:	1a9a      	subs	r2, r3, r2
 8010e68:	0092      	lsls	r2, r2, #2
 8010e6a:	3a04      	subs	r2, #4
 8010e6c:	3501      	adds	r5, #1
 8010e6e:	42ae      	cmp	r6, r5
 8010e70:	bf38      	it	cc
 8010e72:	2200      	movcc	r2, #0
 8010e74:	18a3      	adds	r3, r4, r2
 8010e76:	50a7      	str	r7, [r4, r2]
 8010e78:	b107      	cbz	r7, 8010e7c <rshift+0x68>
 8010e7a:	3304      	adds	r3, #4
 8010e7c:	1b1a      	subs	r2, r3, r4
 8010e7e:	42a3      	cmp	r3, r4
 8010e80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010e84:	bf08      	it	eq
 8010e86:	2300      	moveq	r3, #0
 8010e88:	6102      	str	r2, [r0, #16]
 8010e8a:	bf08      	it	eq
 8010e8c:	6143      	streq	r3, [r0, #20]
 8010e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e92:	f8dc c000 	ldr.w	ip, [ip]
 8010e96:	fa0c fc08 	lsl.w	ip, ip, r8
 8010e9a:	ea4c 0707 	orr.w	r7, ip, r7
 8010e9e:	f849 7b04 	str.w	r7, [r9], #4
 8010ea2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010ea6:	40cf      	lsrs	r7, r1
 8010ea8:	e7da      	b.n	8010e60 <rshift+0x4c>
 8010eaa:	f851 cb04 	ldr.w	ip, [r1], #4
 8010eae:	f847 cf04 	str.w	ip, [r7, #4]!
 8010eb2:	e7c3      	b.n	8010e3c <rshift+0x28>
 8010eb4:	4623      	mov	r3, r4
 8010eb6:	e7e1      	b.n	8010e7c <rshift+0x68>

08010eb8 <__hexdig_fun>:
 8010eb8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010ebc:	2b09      	cmp	r3, #9
 8010ebe:	d802      	bhi.n	8010ec6 <__hexdig_fun+0xe>
 8010ec0:	3820      	subs	r0, #32
 8010ec2:	b2c0      	uxtb	r0, r0
 8010ec4:	4770      	bx	lr
 8010ec6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010eca:	2b05      	cmp	r3, #5
 8010ecc:	d801      	bhi.n	8010ed2 <__hexdig_fun+0x1a>
 8010ece:	3847      	subs	r0, #71	@ 0x47
 8010ed0:	e7f7      	b.n	8010ec2 <__hexdig_fun+0xa>
 8010ed2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010ed6:	2b05      	cmp	r3, #5
 8010ed8:	d801      	bhi.n	8010ede <__hexdig_fun+0x26>
 8010eda:	3827      	subs	r0, #39	@ 0x27
 8010edc:	e7f1      	b.n	8010ec2 <__hexdig_fun+0xa>
 8010ede:	2000      	movs	r0, #0
 8010ee0:	4770      	bx	lr
	...

08010ee4 <__gethex>:
 8010ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee8:	b085      	sub	sp, #20
 8010eea:	468a      	mov	sl, r1
 8010eec:	9302      	str	r3, [sp, #8]
 8010eee:	680b      	ldr	r3, [r1, #0]
 8010ef0:	9001      	str	r0, [sp, #4]
 8010ef2:	4690      	mov	r8, r2
 8010ef4:	1c9c      	adds	r4, r3, #2
 8010ef6:	46a1      	mov	r9, r4
 8010ef8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010efc:	2830      	cmp	r0, #48	@ 0x30
 8010efe:	d0fa      	beq.n	8010ef6 <__gethex+0x12>
 8010f00:	eba9 0303 	sub.w	r3, r9, r3
 8010f04:	f1a3 0b02 	sub.w	fp, r3, #2
 8010f08:	f7ff ffd6 	bl	8010eb8 <__hexdig_fun>
 8010f0c:	4605      	mov	r5, r0
 8010f0e:	2800      	cmp	r0, #0
 8010f10:	d168      	bne.n	8010fe4 <__gethex+0x100>
 8010f12:	49a0      	ldr	r1, [pc, #640]	@ (8011194 <__gethex+0x2b0>)
 8010f14:	2201      	movs	r2, #1
 8010f16:	4648      	mov	r0, r9
 8010f18:	f7ff f83e 	bl	800ff98 <strncmp>
 8010f1c:	4607      	mov	r7, r0
 8010f1e:	2800      	cmp	r0, #0
 8010f20:	d167      	bne.n	8010ff2 <__gethex+0x10e>
 8010f22:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010f26:	4626      	mov	r6, r4
 8010f28:	f7ff ffc6 	bl	8010eb8 <__hexdig_fun>
 8010f2c:	2800      	cmp	r0, #0
 8010f2e:	d062      	beq.n	8010ff6 <__gethex+0x112>
 8010f30:	4623      	mov	r3, r4
 8010f32:	7818      	ldrb	r0, [r3, #0]
 8010f34:	2830      	cmp	r0, #48	@ 0x30
 8010f36:	4699      	mov	r9, r3
 8010f38:	f103 0301 	add.w	r3, r3, #1
 8010f3c:	d0f9      	beq.n	8010f32 <__gethex+0x4e>
 8010f3e:	f7ff ffbb 	bl	8010eb8 <__hexdig_fun>
 8010f42:	fab0 f580 	clz	r5, r0
 8010f46:	096d      	lsrs	r5, r5, #5
 8010f48:	f04f 0b01 	mov.w	fp, #1
 8010f4c:	464a      	mov	r2, r9
 8010f4e:	4616      	mov	r6, r2
 8010f50:	3201      	adds	r2, #1
 8010f52:	7830      	ldrb	r0, [r6, #0]
 8010f54:	f7ff ffb0 	bl	8010eb8 <__hexdig_fun>
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	d1f8      	bne.n	8010f4e <__gethex+0x6a>
 8010f5c:	498d      	ldr	r1, [pc, #564]	@ (8011194 <__gethex+0x2b0>)
 8010f5e:	2201      	movs	r2, #1
 8010f60:	4630      	mov	r0, r6
 8010f62:	f7ff f819 	bl	800ff98 <strncmp>
 8010f66:	2800      	cmp	r0, #0
 8010f68:	d13f      	bne.n	8010fea <__gethex+0x106>
 8010f6a:	b944      	cbnz	r4, 8010f7e <__gethex+0x9a>
 8010f6c:	1c74      	adds	r4, r6, #1
 8010f6e:	4622      	mov	r2, r4
 8010f70:	4616      	mov	r6, r2
 8010f72:	3201      	adds	r2, #1
 8010f74:	7830      	ldrb	r0, [r6, #0]
 8010f76:	f7ff ff9f 	bl	8010eb8 <__hexdig_fun>
 8010f7a:	2800      	cmp	r0, #0
 8010f7c:	d1f8      	bne.n	8010f70 <__gethex+0x8c>
 8010f7e:	1ba4      	subs	r4, r4, r6
 8010f80:	00a7      	lsls	r7, r4, #2
 8010f82:	7833      	ldrb	r3, [r6, #0]
 8010f84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010f88:	2b50      	cmp	r3, #80	@ 0x50
 8010f8a:	d13e      	bne.n	801100a <__gethex+0x126>
 8010f8c:	7873      	ldrb	r3, [r6, #1]
 8010f8e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010f90:	d033      	beq.n	8010ffa <__gethex+0x116>
 8010f92:	2b2d      	cmp	r3, #45	@ 0x2d
 8010f94:	d034      	beq.n	8011000 <__gethex+0x11c>
 8010f96:	1c71      	adds	r1, r6, #1
 8010f98:	2400      	movs	r4, #0
 8010f9a:	7808      	ldrb	r0, [r1, #0]
 8010f9c:	f7ff ff8c 	bl	8010eb8 <__hexdig_fun>
 8010fa0:	1e43      	subs	r3, r0, #1
 8010fa2:	b2db      	uxtb	r3, r3
 8010fa4:	2b18      	cmp	r3, #24
 8010fa6:	d830      	bhi.n	801100a <__gethex+0x126>
 8010fa8:	f1a0 0210 	sub.w	r2, r0, #16
 8010fac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010fb0:	f7ff ff82 	bl	8010eb8 <__hexdig_fun>
 8010fb4:	f100 3cff 	add.w	ip, r0, #4294967295
 8010fb8:	fa5f fc8c 	uxtb.w	ip, ip
 8010fbc:	f1bc 0f18 	cmp.w	ip, #24
 8010fc0:	f04f 030a 	mov.w	r3, #10
 8010fc4:	d91e      	bls.n	8011004 <__gethex+0x120>
 8010fc6:	b104      	cbz	r4, 8010fca <__gethex+0xe6>
 8010fc8:	4252      	negs	r2, r2
 8010fca:	4417      	add	r7, r2
 8010fcc:	f8ca 1000 	str.w	r1, [sl]
 8010fd0:	b1ed      	cbz	r5, 801100e <__gethex+0x12a>
 8010fd2:	f1bb 0f00 	cmp.w	fp, #0
 8010fd6:	bf0c      	ite	eq
 8010fd8:	2506      	moveq	r5, #6
 8010fda:	2500      	movne	r5, #0
 8010fdc:	4628      	mov	r0, r5
 8010fde:	b005      	add	sp, #20
 8010fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fe4:	2500      	movs	r5, #0
 8010fe6:	462c      	mov	r4, r5
 8010fe8:	e7b0      	b.n	8010f4c <__gethex+0x68>
 8010fea:	2c00      	cmp	r4, #0
 8010fec:	d1c7      	bne.n	8010f7e <__gethex+0x9a>
 8010fee:	4627      	mov	r7, r4
 8010ff0:	e7c7      	b.n	8010f82 <__gethex+0x9e>
 8010ff2:	464e      	mov	r6, r9
 8010ff4:	462f      	mov	r7, r5
 8010ff6:	2501      	movs	r5, #1
 8010ff8:	e7c3      	b.n	8010f82 <__gethex+0x9e>
 8010ffa:	2400      	movs	r4, #0
 8010ffc:	1cb1      	adds	r1, r6, #2
 8010ffe:	e7cc      	b.n	8010f9a <__gethex+0xb6>
 8011000:	2401      	movs	r4, #1
 8011002:	e7fb      	b.n	8010ffc <__gethex+0x118>
 8011004:	fb03 0002 	mla	r0, r3, r2, r0
 8011008:	e7ce      	b.n	8010fa8 <__gethex+0xc4>
 801100a:	4631      	mov	r1, r6
 801100c:	e7de      	b.n	8010fcc <__gethex+0xe8>
 801100e:	eba6 0309 	sub.w	r3, r6, r9
 8011012:	3b01      	subs	r3, #1
 8011014:	4629      	mov	r1, r5
 8011016:	2b07      	cmp	r3, #7
 8011018:	dc0a      	bgt.n	8011030 <__gethex+0x14c>
 801101a:	9801      	ldr	r0, [sp, #4]
 801101c:	f000 fafc 	bl	8011618 <_Balloc>
 8011020:	4604      	mov	r4, r0
 8011022:	b940      	cbnz	r0, 8011036 <__gethex+0x152>
 8011024:	4b5c      	ldr	r3, [pc, #368]	@ (8011198 <__gethex+0x2b4>)
 8011026:	4602      	mov	r2, r0
 8011028:	21e4      	movs	r1, #228	@ 0xe4
 801102a:	485c      	ldr	r0, [pc, #368]	@ (801119c <__gethex+0x2b8>)
 801102c:	f001 fa5c 	bl	80124e8 <__assert_func>
 8011030:	3101      	adds	r1, #1
 8011032:	105b      	asrs	r3, r3, #1
 8011034:	e7ef      	b.n	8011016 <__gethex+0x132>
 8011036:	f100 0a14 	add.w	sl, r0, #20
 801103a:	2300      	movs	r3, #0
 801103c:	4655      	mov	r5, sl
 801103e:	469b      	mov	fp, r3
 8011040:	45b1      	cmp	r9, r6
 8011042:	d337      	bcc.n	80110b4 <__gethex+0x1d0>
 8011044:	f845 bb04 	str.w	fp, [r5], #4
 8011048:	eba5 050a 	sub.w	r5, r5, sl
 801104c:	10ad      	asrs	r5, r5, #2
 801104e:	6125      	str	r5, [r4, #16]
 8011050:	4658      	mov	r0, fp
 8011052:	f000 fbd3 	bl	80117fc <__hi0bits>
 8011056:	016d      	lsls	r5, r5, #5
 8011058:	f8d8 6000 	ldr.w	r6, [r8]
 801105c:	1a2d      	subs	r5, r5, r0
 801105e:	42b5      	cmp	r5, r6
 8011060:	dd54      	ble.n	801110c <__gethex+0x228>
 8011062:	1bad      	subs	r5, r5, r6
 8011064:	4629      	mov	r1, r5
 8011066:	4620      	mov	r0, r4
 8011068:	f000 ff67 	bl	8011f3a <__any_on>
 801106c:	4681      	mov	r9, r0
 801106e:	b178      	cbz	r0, 8011090 <__gethex+0x1ac>
 8011070:	1e6b      	subs	r3, r5, #1
 8011072:	1159      	asrs	r1, r3, #5
 8011074:	f003 021f 	and.w	r2, r3, #31
 8011078:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801107c:	f04f 0901 	mov.w	r9, #1
 8011080:	fa09 f202 	lsl.w	r2, r9, r2
 8011084:	420a      	tst	r2, r1
 8011086:	d003      	beq.n	8011090 <__gethex+0x1ac>
 8011088:	454b      	cmp	r3, r9
 801108a:	dc36      	bgt.n	80110fa <__gethex+0x216>
 801108c:	f04f 0902 	mov.w	r9, #2
 8011090:	4629      	mov	r1, r5
 8011092:	4620      	mov	r0, r4
 8011094:	f7ff febe 	bl	8010e14 <rshift>
 8011098:	442f      	add	r7, r5
 801109a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801109e:	42bb      	cmp	r3, r7
 80110a0:	da42      	bge.n	8011128 <__gethex+0x244>
 80110a2:	9801      	ldr	r0, [sp, #4]
 80110a4:	4621      	mov	r1, r4
 80110a6:	f000 faf7 	bl	8011698 <_Bfree>
 80110aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80110ac:	2300      	movs	r3, #0
 80110ae:	6013      	str	r3, [r2, #0]
 80110b0:	25a3      	movs	r5, #163	@ 0xa3
 80110b2:	e793      	b.n	8010fdc <__gethex+0xf8>
 80110b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80110b8:	2a2e      	cmp	r2, #46	@ 0x2e
 80110ba:	d012      	beq.n	80110e2 <__gethex+0x1fe>
 80110bc:	2b20      	cmp	r3, #32
 80110be:	d104      	bne.n	80110ca <__gethex+0x1e6>
 80110c0:	f845 bb04 	str.w	fp, [r5], #4
 80110c4:	f04f 0b00 	mov.w	fp, #0
 80110c8:	465b      	mov	r3, fp
 80110ca:	7830      	ldrb	r0, [r6, #0]
 80110cc:	9303      	str	r3, [sp, #12]
 80110ce:	f7ff fef3 	bl	8010eb8 <__hexdig_fun>
 80110d2:	9b03      	ldr	r3, [sp, #12]
 80110d4:	f000 000f 	and.w	r0, r0, #15
 80110d8:	4098      	lsls	r0, r3
 80110da:	ea4b 0b00 	orr.w	fp, fp, r0
 80110de:	3304      	adds	r3, #4
 80110e0:	e7ae      	b.n	8011040 <__gethex+0x15c>
 80110e2:	45b1      	cmp	r9, r6
 80110e4:	d8ea      	bhi.n	80110bc <__gethex+0x1d8>
 80110e6:	492b      	ldr	r1, [pc, #172]	@ (8011194 <__gethex+0x2b0>)
 80110e8:	9303      	str	r3, [sp, #12]
 80110ea:	2201      	movs	r2, #1
 80110ec:	4630      	mov	r0, r6
 80110ee:	f7fe ff53 	bl	800ff98 <strncmp>
 80110f2:	9b03      	ldr	r3, [sp, #12]
 80110f4:	2800      	cmp	r0, #0
 80110f6:	d1e1      	bne.n	80110bc <__gethex+0x1d8>
 80110f8:	e7a2      	b.n	8011040 <__gethex+0x15c>
 80110fa:	1ea9      	subs	r1, r5, #2
 80110fc:	4620      	mov	r0, r4
 80110fe:	f000 ff1c 	bl	8011f3a <__any_on>
 8011102:	2800      	cmp	r0, #0
 8011104:	d0c2      	beq.n	801108c <__gethex+0x1a8>
 8011106:	f04f 0903 	mov.w	r9, #3
 801110a:	e7c1      	b.n	8011090 <__gethex+0x1ac>
 801110c:	da09      	bge.n	8011122 <__gethex+0x23e>
 801110e:	1b75      	subs	r5, r6, r5
 8011110:	4621      	mov	r1, r4
 8011112:	9801      	ldr	r0, [sp, #4]
 8011114:	462a      	mov	r2, r5
 8011116:	f000 fcd7 	bl	8011ac8 <__lshift>
 801111a:	1b7f      	subs	r7, r7, r5
 801111c:	4604      	mov	r4, r0
 801111e:	f100 0a14 	add.w	sl, r0, #20
 8011122:	f04f 0900 	mov.w	r9, #0
 8011126:	e7b8      	b.n	801109a <__gethex+0x1b6>
 8011128:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801112c:	42bd      	cmp	r5, r7
 801112e:	dd6f      	ble.n	8011210 <__gethex+0x32c>
 8011130:	1bed      	subs	r5, r5, r7
 8011132:	42ae      	cmp	r6, r5
 8011134:	dc34      	bgt.n	80111a0 <__gethex+0x2bc>
 8011136:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801113a:	2b02      	cmp	r3, #2
 801113c:	d022      	beq.n	8011184 <__gethex+0x2a0>
 801113e:	2b03      	cmp	r3, #3
 8011140:	d024      	beq.n	801118c <__gethex+0x2a8>
 8011142:	2b01      	cmp	r3, #1
 8011144:	d115      	bne.n	8011172 <__gethex+0x28e>
 8011146:	42ae      	cmp	r6, r5
 8011148:	d113      	bne.n	8011172 <__gethex+0x28e>
 801114a:	2e01      	cmp	r6, #1
 801114c:	d10b      	bne.n	8011166 <__gethex+0x282>
 801114e:	9a02      	ldr	r2, [sp, #8]
 8011150:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011154:	6013      	str	r3, [r2, #0]
 8011156:	2301      	movs	r3, #1
 8011158:	6123      	str	r3, [r4, #16]
 801115a:	f8ca 3000 	str.w	r3, [sl]
 801115e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011160:	2562      	movs	r5, #98	@ 0x62
 8011162:	601c      	str	r4, [r3, #0]
 8011164:	e73a      	b.n	8010fdc <__gethex+0xf8>
 8011166:	1e71      	subs	r1, r6, #1
 8011168:	4620      	mov	r0, r4
 801116a:	f000 fee6 	bl	8011f3a <__any_on>
 801116e:	2800      	cmp	r0, #0
 8011170:	d1ed      	bne.n	801114e <__gethex+0x26a>
 8011172:	9801      	ldr	r0, [sp, #4]
 8011174:	4621      	mov	r1, r4
 8011176:	f000 fa8f 	bl	8011698 <_Bfree>
 801117a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801117c:	2300      	movs	r3, #0
 801117e:	6013      	str	r3, [r2, #0]
 8011180:	2550      	movs	r5, #80	@ 0x50
 8011182:	e72b      	b.n	8010fdc <__gethex+0xf8>
 8011184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011186:	2b00      	cmp	r3, #0
 8011188:	d1f3      	bne.n	8011172 <__gethex+0x28e>
 801118a:	e7e0      	b.n	801114e <__gethex+0x26a>
 801118c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801118e:	2b00      	cmp	r3, #0
 8011190:	d1dd      	bne.n	801114e <__gethex+0x26a>
 8011192:	e7ee      	b.n	8011172 <__gethex+0x28e>
 8011194:	08013adc 	.word	0x08013adc
 8011198:	08013bed 	.word	0x08013bed
 801119c:	08013bfe 	.word	0x08013bfe
 80111a0:	1e6f      	subs	r7, r5, #1
 80111a2:	f1b9 0f00 	cmp.w	r9, #0
 80111a6:	d130      	bne.n	801120a <__gethex+0x326>
 80111a8:	b127      	cbz	r7, 80111b4 <__gethex+0x2d0>
 80111aa:	4639      	mov	r1, r7
 80111ac:	4620      	mov	r0, r4
 80111ae:	f000 fec4 	bl	8011f3a <__any_on>
 80111b2:	4681      	mov	r9, r0
 80111b4:	117a      	asrs	r2, r7, #5
 80111b6:	2301      	movs	r3, #1
 80111b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80111bc:	f007 071f 	and.w	r7, r7, #31
 80111c0:	40bb      	lsls	r3, r7
 80111c2:	4213      	tst	r3, r2
 80111c4:	4629      	mov	r1, r5
 80111c6:	4620      	mov	r0, r4
 80111c8:	bf18      	it	ne
 80111ca:	f049 0902 	orrne.w	r9, r9, #2
 80111ce:	f7ff fe21 	bl	8010e14 <rshift>
 80111d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80111d6:	1b76      	subs	r6, r6, r5
 80111d8:	2502      	movs	r5, #2
 80111da:	f1b9 0f00 	cmp.w	r9, #0
 80111de:	d047      	beq.n	8011270 <__gethex+0x38c>
 80111e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80111e4:	2b02      	cmp	r3, #2
 80111e6:	d015      	beq.n	8011214 <__gethex+0x330>
 80111e8:	2b03      	cmp	r3, #3
 80111ea:	d017      	beq.n	801121c <__gethex+0x338>
 80111ec:	2b01      	cmp	r3, #1
 80111ee:	d109      	bne.n	8011204 <__gethex+0x320>
 80111f0:	f019 0f02 	tst.w	r9, #2
 80111f4:	d006      	beq.n	8011204 <__gethex+0x320>
 80111f6:	f8da 3000 	ldr.w	r3, [sl]
 80111fa:	ea49 0903 	orr.w	r9, r9, r3
 80111fe:	f019 0f01 	tst.w	r9, #1
 8011202:	d10e      	bne.n	8011222 <__gethex+0x33e>
 8011204:	f045 0510 	orr.w	r5, r5, #16
 8011208:	e032      	b.n	8011270 <__gethex+0x38c>
 801120a:	f04f 0901 	mov.w	r9, #1
 801120e:	e7d1      	b.n	80111b4 <__gethex+0x2d0>
 8011210:	2501      	movs	r5, #1
 8011212:	e7e2      	b.n	80111da <__gethex+0x2f6>
 8011214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011216:	f1c3 0301 	rsb	r3, r3, #1
 801121a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801121c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801121e:	2b00      	cmp	r3, #0
 8011220:	d0f0      	beq.n	8011204 <__gethex+0x320>
 8011222:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011226:	f104 0314 	add.w	r3, r4, #20
 801122a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801122e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011232:	f04f 0c00 	mov.w	ip, #0
 8011236:	4618      	mov	r0, r3
 8011238:	f853 2b04 	ldr.w	r2, [r3], #4
 801123c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011240:	d01b      	beq.n	801127a <__gethex+0x396>
 8011242:	3201      	adds	r2, #1
 8011244:	6002      	str	r2, [r0, #0]
 8011246:	2d02      	cmp	r5, #2
 8011248:	f104 0314 	add.w	r3, r4, #20
 801124c:	d13c      	bne.n	80112c8 <__gethex+0x3e4>
 801124e:	f8d8 2000 	ldr.w	r2, [r8]
 8011252:	3a01      	subs	r2, #1
 8011254:	42b2      	cmp	r2, r6
 8011256:	d109      	bne.n	801126c <__gethex+0x388>
 8011258:	1171      	asrs	r1, r6, #5
 801125a:	2201      	movs	r2, #1
 801125c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011260:	f006 061f 	and.w	r6, r6, #31
 8011264:	fa02 f606 	lsl.w	r6, r2, r6
 8011268:	421e      	tst	r6, r3
 801126a:	d13a      	bne.n	80112e2 <__gethex+0x3fe>
 801126c:	f045 0520 	orr.w	r5, r5, #32
 8011270:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011272:	601c      	str	r4, [r3, #0]
 8011274:	9b02      	ldr	r3, [sp, #8]
 8011276:	601f      	str	r7, [r3, #0]
 8011278:	e6b0      	b.n	8010fdc <__gethex+0xf8>
 801127a:	4299      	cmp	r1, r3
 801127c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011280:	d8d9      	bhi.n	8011236 <__gethex+0x352>
 8011282:	68a3      	ldr	r3, [r4, #8]
 8011284:	459b      	cmp	fp, r3
 8011286:	db17      	blt.n	80112b8 <__gethex+0x3d4>
 8011288:	6861      	ldr	r1, [r4, #4]
 801128a:	9801      	ldr	r0, [sp, #4]
 801128c:	3101      	adds	r1, #1
 801128e:	f000 f9c3 	bl	8011618 <_Balloc>
 8011292:	4681      	mov	r9, r0
 8011294:	b918      	cbnz	r0, 801129e <__gethex+0x3ba>
 8011296:	4b1a      	ldr	r3, [pc, #104]	@ (8011300 <__gethex+0x41c>)
 8011298:	4602      	mov	r2, r0
 801129a:	2184      	movs	r1, #132	@ 0x84
 801129c:	e6c5      	b.n	801102a <__gethex+0x146>
 801129e:	6922      	ldr	r2, [r4, #16]
 80112a0:	3202      	adds	r2, #2
 80112a2:	f104 010c 	add.w	r1, r4, #12
 80112a6:	0092      	lsls	r2, r2, #2
 80112a8:	300c      	adds	r0, #12
 80112aa:	f7fe fefe 	bl	80100aa <memcpy>
 80112ae:	4621      	mov	r1, r4
 80112b0:	9801      	ldr	r0, [sp, #4]
 80112b2:	f000 f9f1 	bl	8011698 <_Bfree>
 80112b6:	464c      	mov	r4, r9
 80112b8:	6923      	ldr	r3, [r4, #16]
 80112ba:	1c5a      	adds	r2, r3, #1
 80112bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80112c0:	6122      	str	r2, [r4, #16]
 80112c2:	2201      	movs	r2, #1
 80112c4:	615a      	str	r2, [r3, #20]
 80112c6:	e7be      	b.n	8011246 <__gethex+0x362>
 80112c8:	6922      	ldr	r2, [r4, #16]
 80112ca:	455a      	cmp	r2, fp
 80112cc:	dd0b      	ble.n	80112e6 <__gethex+0x402>
 80112ce:	2101      	movs	r1, #1
 80112d0:	4620      	mov	r0, r4
 80112d2:	f7ff fd9f 	bl	8010e14 <rshift>
 80112d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80112da:	3701      	adds	r7, #1
 80112dc:	42bb      	cmp	r3, r7
 80112de:	f6ff aee0 	blt.w	80110a2 <__gethex+0x1be>
 80112e2:	2501      	movs	r5, #1
 80112e4:	e7c2      	b.n	801126c <__gethex+0x388>
 80112e6:	f016 061f 	ands.w	r6, r6, #31
 80112ea:	d0fa      	beq.n	80112e2 <__gethex+0x3fe>
 80112ec:	4453      	add	r3, sl
 80112ee:	f1c6 0620 	rsb	r6, r6, #32
 80112f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80112f6:	f000 fa81 	bl	80117fc <__hi0bits>
 80112fa:	42b0      	cmp	r0, r6
 80112fc:	dbe7      	blt.n	80112ce <__gethex+0x3ea>
 80112fe:	e7f0      	b.n	80112e2 <__gethex+0x3fe>
 8011300:	08013bed 	.word	0x08013bed

08011304 <L_shift>:
 8011304:	f1c2 0208 	rsb	r2, r2, #8
 8011308:	0092      	lsls	r2, r2, #2
 801130a:	b570      	push	{r4, r5, r6, lr}
 801130c:	f1c2 0620 	rsb	r6, r2, #32
 8011310:	6843      	ldr	r3, [r0, #4]
 8011312:	6804      	ldr	r4, [r0, #0]
 8011314:	fa03 f506 	lsl.w	r5, r3, r6
 8011318:	432c      	orrs	r4, r5
 801131a:	40d3      	lsrs	r3, r2
 801131c:	6004      	str	r4, [r0, #0]
 801131e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011322:	4288      	cmp	r0, r1
 8011324:	d3f4      	bcc.n	8011310 <L_shift+0xc>
 8011326:	bd70      	pop	{r4, r5, r6, pc}

08011328 <__match>:
 8011328:	b530      	push	{r4, r5, lr}
 801132a:	6803      	ldr	r3, [r0, #0]
 801132c:	3301      	adds	r3, #1
 801132e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011332:	b914      	cbnz	r4, 801133a <__match+0x12>
 8011334:	6003      	str	r3, [r0, #0]
 8011336:	2001      	movs	r0, #1
 8011338:	bd30      	pop	{r4, r5, pc}
 801133a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801133e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011342:	2d19      	cmp	r5, #25
 8011344:	bf98      	it	ls
 8011346:	3220      	addls	r2, #32
 8011348:	42a2      	cmp	r2, r4
 801134a:	d0f0      	beq.n	801132e <__match+0x6>
 801134c:	2000      	movs	r0, #0
 801134e:	e7f3      	b.n	8011338 <__match+0x10>

08011350 <__hexnan>:
 8011350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011354:	680b      	ldr	r3, [r1, #0]
 8011356:	6801      	ldr	r1, [r0, #0]
 8011358:	115e      	asrs	r6, r3, #5
 801135a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801135e:	f013 031f 	ands.w	r3, r3, #31
 8011362:	b087      	sub	sp, #28
 8011364:	bf18      	it	ne
 8011366:	3604      	addne	r6, #4
 8011368:	2500      	movs	r5, #0
 801136a:	1f37      	subs	r7, r6, #4
 801136c:	4682      	mov	sl, r0
 801136e:	4690      	mov	r8, r2
 8011370:	9301      	str	r3, [sp, #4]
 8011372:	f846 5c04 	str.w	r5, [r6, #-4]
 8011376:	46b9      	mov	r9, r7
 8011378:	463c      	mov	r4, r7
 801137a:	9502      	str	r5, [sp, #8]
 801137c:	46ab      	mov	fp, r5
 801137e:	784a      	ldrb	r2, [r1, #1]
 8011380:	1c4b      	adds	r3, r1, #1
 8011382:	9303      	str	r3, [sp, #12]
 8011384:	b342      	cbz	r2, 80113d8 <__hexnan+0x88>
 8011386:	4610      	mov	r0, r2
 8011388:	9105      	str	r1, [sp, #20]
 801138a:	9204      	str	r2, [sp, #16]
 801138c:	f7ff fd94 	bl	8010eb8 <__hexdig_fun>
 8011390:	2800      	cmp	r0, #0
 8011392:	d151      	bne.n	8011438 <__hexnan+0xe8>
 8011394:	9a04      	ldr	r2, [sp, #16]
 8011396:	9905      	ldr	r1, [sp, #20]
 8011398:	2a20      	cmp	r2, #32
 801139a:	d818      	bhi.n	80113ce <__hexnan+0x7e>
 801139c:	9b02      	ldr	r3, [sp, #8]
 801139e:	459b      	cmp	fp, r3
 80113a0:	dd13      	ble.n	80113ca <__hexnan+0x7a>
 80113a2:	454c      	cmp	r4, r9
 80113a4:	d206      	bcs.n	80113b4 <__hexnan+0x64>
 80113a6:	2d07      	cmp	r5, #7
 80113a8:	dc04      	bgt.n	80113b4 <__hexnan+0x64>
 80113aa:	462a      	mov	r2, r5
 80113ac:	4649      	mov	r1, r9
 80113ae:	4620      	mov	r0, r4
 80113b0:	f7ff ffa8 	bl	8011304 <L_shift>
 80113b4:	4544      	cmp	r4, r8
 80113b6:	d952      	bls.n	801145e <__hexnan+0x10e>
 80113b8:	2300      	movs	r3, #0
 80113ba:	f1a4 0904 	sub.w	r9, r4, #4
 80113be:	f844 3c04 	str.w	r3, [r4, #-4]
 80113c2:	f8cd b008 	str.w	fp, [sp, #8]
 80113c6:	464c      	mov	r4, r9
 80113c8:	461d      	mov	r5, r3
 80113ca:	9903      	ldr	r1, [sp, #12]
 80113cc:	e7d7      	b.n	801137e <__hexnan+0x2e>
 80113ce:	2a29      	cmp	r2, #41	@ 0x29
 80113d0:	d157      	bne.n	8011482 <__hexnan+0x132>
 80113d2:	3102      	adds	r1, #2
 80113d4:	f8ca 1000 	str.w	r1, [sl]
 80113d8:	f1bb 0f00 	cmp.w	fp, #0
 80113dc:	d051      	beq.n	8011482 <__hexnan+0x132>
 80113de:	454c      	cmp	r4, r9
 80113e0:	d206      	bcs.n	80113f0 <__hexnan+0xa0>
 80113e2:	2d07      	cmp	r5, #7
 80113e4:	dc04      	bgt.n	80113f0 <__hexnan+0xa0>
 80113e6:	462a      	mov	r2, r5
 80113e8:	4649      	mov	r1, r9
 80113ea:	4620      	mov	r0, r4
 80113ec:	f7ff ff8a 	bl	8011304 <L_shift>
 80113f0:	4544      	cmp	r4, r8
 80113f2:	d936      	bls.n	8011462 <__hexnan+0x112>
 80113f4:	f1a8 0204 	sub.w	r2, r8, #4
 80113f8:	4623      	mov	r3, r4
 80113fa:	f853 1b04 	ldr.w	r1, [r3], #4
 80113fe:	f842 1f04 	str.w	r1, [r2, #4]!
 8011402:	429f      	cmp	r7, r3
 8011404:	d2f9      	bcs.n	80113fa <__hexnan+0xaa>
 8011406:	1b3b      	subs	r3, r7, r4
 8011408:	f023 0303 	bic.w	r3, r3, #3
 801140c:	3304      	adds	r3, #4
 801140e:	3401      	adds	r4, #1
 8011410:	3e03      	subs	r6, #3
 8011412:	42b4      	cmp	r4, r6
 8011414:	bf88      	it	hi
 8011416:	2304      	movhi	r3, #4
 8011418:	4443      	add	r3, r8
 801141a:	2200      	movs	r2, #0
 801141c:	f843 2b04 	str.w	r2, [r3], #4
 8011420:	429f      	cmp	r7, r3
 8011422:	d2fb      	bcs.n	801141c <__hexnan+0xcc>
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	b91b      	cbnz	r3, 8011430 <__hexnan+0xe0>
 8011428:	4547      	cmp	r7, r8
 801142a:	d128      	bne.n	801147e <__hexnan+0x12e>
 801142c:	2301      	movs	r3, #1
 801142e:	603b      	str	r3, [r7, #0]
 8011430:	2005      	movs	r0, #5
 8011432:	b007      	add	sp, #28
 8011434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011438:	3501      	adds	r5, #1
 801143a:	2d08      	cmp	r5, #8
 801143c:	f10b 0b01 	add.w	fp, fp, #1
 8011440:	dd06      	ble.n	8011450 <__hexnan+0x100>
 8011442:	4544      	cmp	r4, r8
 8011444:	d9c1      	bls.n	80113ca <__hexnan+0x7a>
 8011446:	2300      	movs	r3, #0
 8011448:	f844 3c04 	str.w	r3, [r4, #-4]
 801144c:	2501      	movs	r5, #1
 801144e:	3c04      	subs	r4, #4
 8011450:	6822      	ldr	r2, [r4, #0]
 8011452:	f000 000f 	and.w	r0, r0, #15
 8011456:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801145a:	6020      	str	r0, [r4, #0]
 801145c:	e7b5      	b.n	80113ca <__hexnan+0x7a>
 801145e:	2508      	movs	r5, #8
 8011460:	e7b3      	b.n	80113ca <__hexnan+0x7a>
 8011462:	9b01      	ldr	r3, [sp, #4]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d0dd      	beq.n	8011424 <__hexnan+0xd4>
 8011468:	f1c3 0320 	rsb	r3, r3, #32
 801146c:	f04f 32ff 	mov.w	r2, #4294967295
 8011470:	40da      	lsrs	r2, r3
 8011472:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011476:	4013      	ands	r3, r2
 8011478:	f846 3c04 	str.w	r3, [r6, #-4]
 801147c:	e7d2      	b.n	8011424 <__hexnan+0xd4>
 801147e:	3f04      	subs	r7, #4
 8011480:	e7d0      	b.n	8011424 <__hexnan+0xd4>
 8011482:	2004      	movs	r0, #4
 8011484:	e7d5      	b.n	8011432 <__hexnan+0xe2>
	...

08011488 <malloc>:
 8011488:	4b02      	ldr	r3, [pc, #8]	@ (8011494 <malloc+0xc>)
 801148a:	4601      	mov	r1, r0
 801148c:	6818      	ldr	r0, [r3, #0]
 801148e:	f000 b825 	b.w	80114dc <_malloc_r>
 8011492:	bf00      	nop
 8011494:	2000021c 	.word	0x2000021c

08011498 <sbrk_aligned>:
 8011498:	b570      	push	{r4, r5, r6, lr}
 801149a:	4e0f      	ldr	r6, [pc, #60]	@ (80114d8 <sbrk_aligned+0x40>)
 801149c:	460c      	mov	r4, r1
 801149e:	6831      	ldr	r1, [r6, #0]
 80114a0:	4605      	mov	r5, r0
 80114a2:	b911      	cbnz	r1, 80114aa <sbrk_aligned+0x12>
 80114a4:	f001 f810 	bl	80124c8 <_sbrk_r>
 80114a8:	6030      	str	r0, [r6, #0]
 80114aa:	4621      	mov	r1, r4
 80114ac:	4628      	mov	r0, r5
 80114ae:	f001 f80b 	bl	80124c8 <_sbrk_r>
 80114b2:	1c43      	adds	r3, r0, #1
 80114b4:	d103      	bne.n	80114be <sbrk_aligned+0x26>
 80114b6:	f04f 34ff 	mov.w	r4, #4294967295
 80114ba:	4620      	mov	r0, r4
 80114bc:	bd70      	pop	{r4, r5, r6, pc}
 80114be:	1cc4      	adds	r4, r0, #3
 80114c0:	f024 0403 	bic.w	r4, r4, #3
 80114c4:	42a0      	cmp	r0, r4
 80114c6:	d0f8      	beq.n	80114ba <sbrk_aligned+0x22>
 80114c8:	1a21      	subs	r1, r4, r0
 80114ca:	4628      	mov	r0, r5
 80114cc:	f000 fffc 	bl	80124c8 <_sbrk_r>
 80114d0:	3001      	adds	r0, #1
 80114d2:	d1f2      	bne.n	80114ba <sbrk_aligned+0x22>
 80114d4:	e7ef      	b.n	80114b6 <sbrk_aligned+0x1e>
 80114d6:	bf00      	nop
 80114d8:	20000d64 	.word	0x20000d64

080114dc <_malloc_r>:
 80114dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114e0:	1ccd      	adds	r5, r1, #3
 80114e2:	f025 0503 	bic.w	r5, r5, #3
 80114e6:	3508      	adds	r5, #8
 80114e8:	2d0c      	cmp	r5, #12
 80114ea:	bf38      	it	cc
 80114ec:	250c      	movcc	r5, #12
 80114ee:	2d00      	cmp	r5, #0
 80114f0:	4606      	mov	r6, r0
 80114f2:	db01      	blt.n	80114f8 <_malloc_r+0x1c>
 80114f4:	42a9      	cmp	r1, r5
 80114f6:	d904      	bls.n	8011502 <_malloc_r+0x26>
 80114f8:	230c      	movs	r3, #12
 80114fa:	6033      	str	r3, [r6, #0]
 80114fc:	2000      	movs	r0, #0
 80114fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011502:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80115d8 <_malloc_r+0xfc>
 8011506:	f000 f87b 	bl	8011600 <__malloc_lock>
 801150a:	f8d8 3000 	ldr.w	r3, [r8]
 801150e:	461c      	mov	r4, r3
 8011510:	bb44      	cbnz	r4, 8011564 <_malloc_r+0x88>
 8011512:	4629      	mov	r1, r5
 8011514:	4630      	mov	r0, r6
 8011516:	f7ff ffbf 	bl	8011498 <sbrk_aligned>
 801151a:	1c43      	adds	r3, r0, #1
 801151c:	4604      	mov	r4, r0
 801151e:	d158      	bne.n	80115d2 <_malloc_r+0xf6>
 8011520:	f8d8 4000 	ldr.w	r4, [r8]
 8011524:	4627      	mov	r7, r4
 8011526:	2f00      	cmp	r7, #0
 8011528:	d143      	bne.n	80115b2 <_malloc_r+0xd6>
 801152a:	2c00      	cmp	r4, #0
 801152c:	d04b      	beq.n	80115c6 <_malloc_r+0xea>
 801152e:	6823      	ldr	r3, [r4, #0]
 8011530:	4639      	mov	r1, r7
 8011532:	4630      	mov	r0, r6
 8011534:	eb04 0903 	add.w	r9, r4, r3
 8011538:	f000 ffc6 	bl	80124c8 <_sbrk_r>
 801153c:	4581      	cmp	r9, r0
 801153e:	d142      	bne.n	80115c6 <_malloc_r+0xea>
 8011540:	6821      	ldr	r1, [r4, #0]
 8011542:	1a6d      	subs	r5, r5, r1
 8011544:	4629      	mov	r1, r5
 8011546:	4630      	mov	r0, r6
 8011548:	f7ff ffa6 	bl	8011498 <sbrk_aligned>
 801154c:	3001      	adds	r0, #1
 801154e:	d03a      	beq.n	80115c6 <_malloc_r+0xea>
 8011550:	6823      	ldr	r3, [r4, #0]
 8011552:	442b      	add	r3, r5
 8011554:	6023      	str	r3, [r4, #0]
 8011556:	f8d8 3000 	ldr.w	r3, [r8]
 801155a:	685a      	ldr	r2, [r3, #4]
 801155c:	bb62      	cbnz	r2, 80115b8 <_malloc_r+0xdc>
 801155e:	f8c8 7000 	str.w	r7, [r8]
 8011562:	e00f      	b.n	8011584 <_malloc_r+0xa8>
 8011564:	6822      	ldr	r2, [r4, #0]
 8011566:	1b52      	subs	r2, r2, r5
 8011568:	d420      	bmi.n	80115ac <_malloc_r+0xd0>
 801156a:	2a0b      	cmp	r2, #11
 801156c:	d917      	bls.n	801159e <_malloc_r+0xc2>
 801156e:	1961      	adds	r1, r4, r5
 8011570:	42a3      	cmp	r3, r4
 8011572:	6025      	str	r5, [r4, #0]
 8011574:	bf18      	it	ne
 8011576:	6059      	strne	r1, [r3, #4]
 8011578:	6863      	ldr	r3, [r4, #4]
 801157a:	bf08      	it	eq
 801157c:	f8c8 1000 	streq.w	r1, [r8]
 8011580:	5162      	str	r2, [r4, r5]
 8011582:	604b      	str	r3, [r1, #4]
 8011584:	4630      	mov	r0, r6
 8011586:	f000 f841 	bl	801160c <__malloc_unlock>
 801158a:	f104 000b 	add.w	r0, r4, #11
 801158e:	1d23      	adds	r3, r4, #4
 8011590:	f020 0007 	bic.w	r0, r0, #7
 8011594:	1ac2      	subs	r2, r0, r3
 8011596:	bf1c      	itt	ne
 8011598:	1a1b      	subne	r3, r3, r0
 801159a:	50a3      	strne	r3, [r4, r2]
 801159c:	e7af      	b.n	80114fe <_malloc_r+0x22>
 801159e:	6862      	ldr	r2, [r4, #4]
 80115a0:	42a3      	cmp	r3, r4
 80115a2:	bf0c      	ite	eq
 80115a4:	f8c8 2000 	streq.w	r2, [r8]
 80115a8:	605a      	strne	r2, [r3, #4]
 80115aa:	e7eb      	b.n	8011584 <_malloc_r+0xa8>
 80115ac:	4623      	mov	r3, r4
 80115ae:	6864      	ldr	r4, [r4, #4]
 80115b0:	e7ae      	b.n	8011510 <_malloc_r+0x34>
 80115b2:	463c      	mov	r4, r7
 80115b4:	687f      	ldr	r7, [r7, #4]
 80115b6:	e7b6      	b.n	8011526 <_malloc_r+0x4a>
 80115b8:	461a      	mov	r2, r3
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	42a3      	cmp	r3, r4
 80115be:	d1fb      	bne.n	80115b8 <_malloc_r+0xdc>
 80115c0:	2300      	movs	r3, #0
 80115c2:	6053      	str	r3, [r2, #4]
 80115c4:	e7de      	b.n	8011584 <_malloc_r+0xa8>
 80115c6:	230c      	movs	r3, #12
 80115c8:	6033      	str	r3, [r6, #0]
 80115ca:	4630      	mov	r0, r6
 80115cc:	f000 f81e 	bl	801160c <__malloc_unlock>
 80115d0:	e794      	b.n	80114fc <_malloc_r+0x20>
 80115d2:	6005      	str	r5, [r0, #0]
 80115d4:	e7d6      	b.n	8011584 <_malloc_r+0xa8>
 80115d6:	bf00      	nop
 80115d8:	20000d68 	.word	0x20000d68

080115dc <__ascii_mbtowc>:
 80115dc:	b082      	sub	sp, #8
 80115de:	b901      	cbnz	r1, 80115e2 <__ascii_mbtowc+0x6>
 80115e0:	a901      	add	r1, sp, #4
 80115e2:	b142      	cbz	r2, 80115f6 <__ascii_mbtowc+0x1a>
 80115e4:	b14b      	cbz	r3, 80115fa <__ascii_mbtowc+0x1e>
 80115e6:	7813      	ldrb	r3, [r2, #0]
 80115e8:	600b      	str	r3, [r1, #0]
 80115ea:	7812      	ldrb	r2, [r2, #0]
 80115ec:	1e10      	subs	r0, r2, #0
 80115ee:	bf18      	it	ne
 80115f0:	2001      	movne	r0, #1
 80115f2:	b002      	add	sp, #8
 80115f4:	4770      	bx	lr
 80115f6:	4610      	mov	r0, r2
 80115f8:	e7fb      	b.n	80115f2 <__ascii_mbtowc+0x16>
 80115fa:	f06f 0001 	mvn.w	r0, #1
 80115fe:	e7f8      	b.n	80115f2 <__ascii_mbtowc+0x16>

08011600 <__malloc_lock>:
 8011600:	4801      	ldr	r0, [pc, #4]	@ (8011608 <__malloc_lock+0x8>)
 8011602:	f7fe bd50 	b.w	80100a6 <__retarget_lock_acquire_recursive>
 8011606:	bf00      	nop
 8011608:	20000d60 	.word	0x20000d60

0801160c <__malloc_unlock>:
 801160c:	4801      	ldr	r0, [pc, #4]	@ (8011614 <__malloc_unlock+0x8>)
 801160e:	f7fe bd4b 	b.w	80100a8 <__retarget_lock_release_recursive>
 8011612:	bf00      	nop
 8011614:	20000d60 	.word	0x20000d60

08011618 <_Balloc>:
 8011618:	b570      	push	{r4, r5, r6, lr}
 801161a:	69c6      	ldr	r6, [r0, #28]
 801161c:	4604      	mov	r4, r0
 801161e:	460d      	mov	r5, r1
 8011620:	b976      	cbnz	r6, 8011640 <_Balloc+0x28>
 8011622:	2010      	movs	r0, #16
 8011624:	f7ff ff30 	bl	8011488 <malloc>
 8011628:	4602      	mov	r2, r0
 801162a:	61e0      	str	r0, [r4, #28]
 801162c:	b920      	cbnz	r0, 8011638 <_Balloc+0x20>
 801162e:	4b18      	ldr	r3, [pc, #96]	@ (8011690 <_Balloc+0x78>)
 8011630:	4818      	ldr	r0, [pc, #96]	@ (8011694 <_Balloc+0x7c>)
 8011632:	216b      	movs	r1, #107	@ 0x6b
 8011634:	f000 ff58 	bl	80124e8 <__assert_func>
 8011638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801163c:	6006      	str	r6, [r0, #0]
 801163e:	60c6      	str	r6, [r0, #12]
 8011640:	69e6      	ldr	r6, [r4, #28]
 8011642:	68f3      	ldr	r3, [r6, #12]
 8011644:	b183      	cbz	r3, 8011668 <_Balloc+0x50>
 8011646:	69e3      	ldr	r3, [r4, #28]
 8011648:	68db      	ldr	r3, [r3, #12]
 801164a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801164e:	b9b8      	cbnz	r0, 8011680 <_Balloc+0x68>
 8011650:	2101      	movs	r1, #1
 8011652:	fa01 f605 	lsl.w	r6, r1, r5
 8011656:	1d72      	adds	r2, r6, #5
 8011658:	0092      	lsls	r2, r2, #2
 801165a:	4620      	mov	r0, r4
 801165c:	f000 ff62 	bl	8012524 <_calloc_r>
 8011660:	b160      	cbz	r0, 801167c <_Balloc+0x64>
 8011662:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011666:	e00e      	b.n	8011686 <_Balloc+0x6e>
 8011668:	2221      	movs	r2, #33	@ 0x21
 801166a:	2104      	movs	r1, #4
 801166c:	4620      	mov	r0, r4
 801166e:	f000 ff59 	bl	8012524 <_calloc_r>
 8011672:	69e3      	ldr	r3, [r4, #28]
 8011674:	60f0      	str	r0, [r6, #12]
 8011676:	68db      	ldr	r3, [r3, #12]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d1e4      	bne.n	8011646 <_Balloc+0x2e>
 801167c:	2000      	movs	r0, #0
 801167e:	bd70      	pop	{r4, r5, r6, pc}
 8011680:	6802      	ldr	r2, [r0, #0]
 8011682:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011686:	2300      	movs	r3, #0
 8011688:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801168c:	e7f7      	b.n	801167e <_Balloc+0x66>
 801168e:	bf00      	nop
 8011690:	08013b7e 	.word	0x08013b7e
 8011694:	08013c5e 	.word	0x08013c5e

08011698 <_Bfree>:
 8011698:	b570      	push	{r4, r5, r6, lr}
 801169a:	69c6      	ldr	r6, [r0, #28]
 801169c:	4605      	mov	r5, r0
 801169e:	460c      	mov	r4, r1
 80116a0:	b976      	cbnz	r6, 80116c0 <_Bfree+0x28>
 80116a2:	2010      	movs	r0, #16
 80116a4:	f7ff fef0 	bl	8011488 <malloc>
 80116a8:	4602      	mov	r2, r0
 80116aa:	61e8      	str	r0, [r5, #28]
 80116ac:	b920      	cbnz	r0, 80116b8 <_Bfree+0x20>
 80116ae:	4b09      	ldr	r3, [pc, #36]	@ (80116d4 <_Bfree+0x3c>)
 80116b0:	4809      	ldr	r0, [pc, #36]	@ (80116d8 <_Bfree+0x40>)
 80116b2:	218f      	movs	r1, #143	@ 0x8f
 80116b4:	f000 ff18 	bl	80124e8 <__assert_func>
 80116b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80116bc:	6006      	str	r6, [r0, #0]
 80116be:	60c6      	str	r6, [r0, #12]
 80116c0:	b13c      	cbz	r4, 80116d2 <_Bfree+0x3a>
 80116c2:	69eb      	ldr	r3, [r5, #28]
 80116c4:	6862      	ldr	r2, [r4, #4]
 80116c6:	68db      	ldr	r3, [r3, #12]
 80116c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80116cc:	6021      	str	r1, [r4, #0]
 80116ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80116d2:	bd70      	pop	{r4, r5, r6, pc}
 80116d4:	08013b7e 	.word	0x08013b7e
 80116d8:	08013c5e 	.word	0x08013c5e

080116dc <__multadd>:
 80116dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116e0:	690d      	ldr	r5, [r1, #16]
 80116e2:	4607      	mov	r7, r0
 80116e4:	460c      	mov	r4, r1
 80116e6:	461e      	mov	r6, r3
 80116e8:	f101 0c14 	add.w	ip, r1, #20
 80116ec:	2000      	movs	r0, #0
 80116ee:	f8dc 3000 	ldr.w	r3, [ip]
 80116f2:	b299      	uxth	r1, r3
 80116f4:	fb02 6101 	mla	r1, r2, r1, r6
 80116f8:	0c1e      	lsrs	r6, r3, #16
 80116fa:	0c0b      	lsrs	r3, r1, #16
 80116fc:	fb02 3306 	mla	r3, r2, r6, r3
 8011700:	b289      	uxth	r1, r1
 8011702:	3001      	adds	r0, #1
 8011704:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011708:	4285      	cmp	r5, r0
 801170a:	f84c 1b04 	str.w	r1, [ip], #4
 801170e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011712:	dcec      	bgt.n	80116ee <__multadd+0x12>
 8011714:	b30e      	cbz	r6, 801175a <__multadd+0x7e>
 8011716:	68a3      	ldr	r3, [r4, #8]
 8011718:	42ab      	cmp	r3, r5
 801171a:	dc19      	bgt.n	8011750 <__multadd+0x74>
 801171c:	6861      	ldr	r1, [r4, #4]
 801171e:	4638      	mov	r0, r7
 8011720:	3101      	adds	r1, #1
 8011722:	f7ff ff79 	bl	8011618 <_Balloc>
 8011726:	4680      	mov	r8, r0
 8011728:	b928      	cbnz	r0, 8011736 <__multadd+0x5a>
 801172a:	4602      	mov	r2, r0
 801172c:	4b0c      	ldr	r3, [pc, #48]	@ (8011760 <__multadd+0x84>)
 801172e:	480d      	ldr	r0, [pc, #52]	@ (8011764 <__multadd+0x88>)
 8011730:	21ba      	movs	r1, #186	@ 0xba
 8011732:	f000 fed9 	bl	80124e8 <__assert_func>
 8011736:	6922      	ldr	r2, [r4, #16]
 8011738:	3202      	adds	r2, #2
 801173a:	f104 010c 	add.w	r1, r4, #12
 801173e:	0092      	lsls	r2, r2, #2
 8011740:	300c      	adds	r0, #12
 8011742:	f7fe fcb2 	bl	80100aa <memcpy>
 8011746:	4621      	mov	r1, r4
 8011748:	4638      	mov	r0, r7
 801174a:	f7ff ffa5 	bl	8011698 <_Bfree>
 801174e:	4644      	mov	r4, r8
 8011750:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011754:	3501      	adds	r5, #1
 8011756:	615e      	str	r6, [r3, #20]
 8011758:	6125      	str	r5, [r4, #16]
 801175a:	4620      	mov	r0, r4
 801175c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011760:	08013bed 	.word	0x08013bed
 8011764:	08013c5e 	.word	0x08013c5e

08011768 <__s2b>:
 8011768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801176c:	460c      	mov	r4, r1
 801176e:	4615      	mov	r5, r2
 8011770:	461f      	mov	r7, r3
 8011772:	2209      	movs	r2, #9
 8011774:	3308      	adds	r3, #8
 8011776:	4606      	mov	r6, r0
 8011778:	fb93 f3f2 	sdiv	r3, r3, r2
 801177c:	2100      	movs	r1, #0
 801177e:	2201      	movs	r2, #1
 8011780:	429a      	cmp	r2, r3
 8011782:	db09      	blt.n	8011798 <__s2b+0x30>
 8011784:	4630      	mov	r0, r6
 8011786:	f7ff ff47 	bl	8011618 <_Balloc>
 801178a:	b940      	cbnz	r0, 801179e <__s2b+0x36>
 801178c:	4602      	mov	r2, r0
 801178e:	4b19      	ldr	r3, [pc, #100]	@ (80117f4 <__s2b+0x8c>)
 8011790:	4819      	ldr	r0, [pc, #100]	@ (80117f8 <__s2b+0x90>)
 8011792:	21d3      	movs	r1, #211	@ 0xd3
 8011794:	f000 fea8 	bl	80124e8 <__assert_func>
 8011798:	0052      	lsls	r2, r2, #1
 801179a:	3101      	adds	r1, #1
 801179c:	e7f0      	b.n	8011780 <__s2b+0x18>
 801179e:	9b08      	ldr	r3, [sp, #32]
 80117a0:	6143      	str	r3, [r0, #20]
 80117a2:	2d09      	cmp	r5, #9
 80117a4:	f04f 0301 	mov.w	r3, #1
 80117a8:	6103      	str	r3, [r0, #16]
 80117aa:	dd16      	ble.n	80117da <__s2b+0x72>
 80117ac:	f104 0909 	add.w	r9, r4, #9
 80117b0:	46c8      	mov	r8, r9
 80117b2:	442c      	add	r4, r5
 80117b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80117b8:	4601      	mov	r1, r0
 80117ba:	3b30      	subs	r3, #48	@ 0x30
 80117bc:	220a      	movs	r2, #10
 80117be:	4630      	mov	r0, r6
 80117c0:	f7ff ff8c 	bl	80116dc <__multadd>
 80117c4:	45a0      	cmp	r8, r4
 80117c6:	d1f5      	bne.n	80117b4 <__s2b+0x4c>
 80117c8:	f1a5 0408 	sub.w	r4, r5, #8
 80117cc:	444c      	add	r4, r9
 80117ce:	1b2d      	subs	r5, r5, r4
 80117d0:	1963      	adds	r3, r4, r5
 80117d2:	42bb      	cmp	r3, r7
 80117d4:	db04      	blt.n	80117e0 <__s2b+0x78>
 80117d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117da:	340a      	adds	r4, #10
 80117dc:	2509      	movs	r5, #9
 80117de:	e7f6      	b.n	80117ce <__s2b+0x66>
 80117e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80117e4:	4601      	mov	r1, r0
 80117e6:	3b30      	subs	r3, #48	@ 0x30
 80117e8:	220a      	movs	r2, #10
 80117ea:	4630      	mov	r0, r6
 80117ec:	f7ff ff76 	bl	80116dc <__multadd>
 80117f0:	e7ee      	b.n	80117d0 <__s2b+0x68>
 80117f2:	bf00      	nop
 80117f4:	08013bed 	.word	0x08013bed
 80117f8:	08013c5e 	.word	0x08013c5e

080117fc <__hi0bits>:
 80117fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011800:	4603      	mov	r3, r0
 8011802:	bf36      	itet	cc
 8011804:	0403      	lslcc	r3, r0, #16
 8011806:	2000      	movcs	r0, #0
 8011808:	2010      	movcc	r0, #16
 801180a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801180e:	bf3c      	itt	cc
 8011810:	021b      	lslcc	r3, r3, #8
 8011812:	3008      	addcc	r0, #8
 8011814:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011818:	bf3c      	itt	cc
 801181a:	011b      	lslcc	r3, r3, #4
 801181c:	3004      	addcc	r0, #4
 801181e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011822:	bf3c      	itt	cc
 8011824:	009b      	lslcc	r3, r3, #2
 8011826:	3002      	addcc	r0, #2
 8011828:	2b00      	cmp	r3, #0
 801182a:	db05      	blt.n	8011838 <__hi0bits+0x3c>
 801182c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011830:	f100 0001 	add.w	r0, r0, #1
 8011834:	bf08      	it	eq
 8011836:	2020      	moveq	r0, #32
 8011838:	4770      	bx	lr

0801183a <__lo0bits>:
 801183a:	6803      	ldr	r3, [r0, #0]
 801183c:	4602      	mov	r2, r0
 801183e:	f013 0007 	ands.w	r0, r3, #7
 8011842:	d00b      	beq.n	801185c <__lo0bits+0x22>
 8011844:	07d9      	lsls	r1, r3, #31
 8011846:	d421      	bmi.n	801188c <__lo0bits+0x52>
 8011848:	0798      	lsls	r0, r3, #30
 801184a:	bf49      	itett	mi
 801184c:	085b      	lsrmi	r3, r3, #1
 801184e:	089b      	lsrpl	r3, r3, #2
 8011850:	2001      	movmi	r0, #1
 8011852:	6013      	strmi	r3, [r2, #0]
 8011854:	bf5c      	itt	pl
 8011856:	6013      	strpl	r3, [r2, #0]
 8011858:	2002      	movpl	r0, #2
 801185a:	4770      	bx	lr
 801185c:	b299      	uxth	r1, r3
 801185e:	b909      	cbnz	r1, 8011864 <__lo0bits+0x2a>
 8011860:	0c1b      	lsrs	r3, r3, #16
 8011862:	2010      	movs	r0, #16
 8011864:	b2d9      	uxtb	r1, r3
 8011866:	b909      	cbnz	r1, 801186c <__lo0bits+0x32>
 8011868:	3008      	adds	r0, #8
 801186a:	0a1b      	lsrs	r3, r3, #8
 801186c:	0719      	lsls	r1, r3, #28
 801186e:	bf04      	itt	eq
 8011870:	091b      	lsreq	r3, r3, #4
 8011872:	3004      	addeq	r0, #4
 8011874:	0799      	lsls	r1, r3, #30
 8011876:	bf04      	itt	eq
 8011878:	089b      	lsreq	r3, r3, #2
 801187a:	3002      	addeq	r0, #2
 801187c:	07d9      	lsls	r1, r3, #31
 801187e:	d403      	bmi.n	8011888 <__lo0bits+0x4e>
 8011880:	085b      	lsrs	r3, r3, #1
 8011882:	f100 0001 	add.w	r0, r0, #1
 8011886:	d003      	beq.n	8011890 <__lo0bits+0x56>
 8011888:	6013      	str	r3, [r2, #0]
 801188a:	4770      	bx	lr
 801188c:	2000      	movs	r0, #0
 801188e:	4770      	bx	lr
 8011890:	2020      	movs	r0, #32
 8011892:	4770      	bx	lr

08011894 <__i2b>:
 8011894:	b510      	push	{r4, lr}
 8011896:	460c      	mov	r4, r1
 8011898:	2101      	movs	r1, #1
 801189a:	f7ff febd 	bl	8011618 <_Balloc>
 801189e:	4602      	mov	r2, r0
 80118a0:	b928      	cbnz	r0, 80118ae <__i2b+0x1a>
 80118a2:	4b05      	ldr	r3, [pc, #20]	@ (80118b8 <__i2b+0x24>)
 80118a4:	4805      	ldr	r0, [pc, #20]	@ (80118bc <__i2b+0x28>)
 80118a6:	f240 1145 	movw	r1, #325	@ 0x145
 80118aa:	f000 fe1d 	bl	80124e8 <__assert_func>
 80118ae:	2301      	movs	r3, #1
 80118b0:	6144      	str	r4, [r0, #20]
 80118b2:	6103      	str	r3, [r0, #16]
 80118b4:	bd10      	pop	{r4, pc}
 80118b6:	bf00      	nop
 80118b8:	08013bed 	.word	0x08013bed
 80118bc:	08013c5e 	.word	0x08013c5e

080118c0 <__multiply>:
 80118c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118c4:	4614      	mov	r4, r2
 80118c6:	690a      	ldr	r2, [r1, #16]
 80118c8:	6923      	ldr	r3, [r4, #16]
 80118ca:	429a      	cmp	r2, r3
 80118cc:	bfa8      	it	ge
 80118ce:	4623      	movge	r3, r4
 80118d0:	460f      	mov	r7, r1
 80118d2:	bfa4      	itt	ge
 80118d4:	460c      	movge	r4, r1
 80118d6:	461f      	movge	r7, r3
 80118d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80118dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80118e0:	68a3      	ldr	r3, [r4, #8]
 80118e2:	6861      	ldr	r1, [r4, #4]
 80118e4:	eb0a 0609 	add.w	r6, sl, r9
 80118e8:	42b3      	cmp	r3, r6
 80118ea:	b085      	sub	sp, #20
 80118ec:	bfb8      	it	lt
 80118ee:	3101      	addlt	r1, #1
 80118f0:	f7ff fe92 	bl	8011618 <_Balloc>
 80118f4:	b930      	cbnz	r0, 8011904 <__multiply+0x44>
 80118f6:	4602      	mov	r2, r0
 80118f8:	4b44      	ldr	r3, [pc, #272]	@ (8011a0c <__multiply+0x14c>)
 80118fa:	4845      	ldr	r0, [pc, #276]	@ (8011a10 <__multiply+0x150>)
 80118fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011900:	f000 fdf2 	bl	80124e8 <__assert_func>
 8011904:	f100 0514 	add.w	r5, r0, #20
 8011908:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801190c:	462b      	mov	r3, r5
 801190e:	2200      	movs	r2, #0
 8011910:	4543      	cmp	r3, r8
 8011912:	d321      	bcc.n	8011958 <__multiply+0x98>
 8011914:	f107 0114 	add.w	r1, r7, #20
 8011918:	f104 0214 	add.w	r2, r4, #20
 801191c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011920:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011924:	9302      	str	r3, [sp, #8]
 8011926:	1b13      	subs	r3, r2, r4
 8011928:	3b15      	subs	r3, #21
 801192a:	f023 0303 	bic.w	r3, r3, #3
 801192e:	3304      	adds	r3, #4
 8011930:	f104 0715 	add.w	r7, r4, #21
 8011934:	42ba      	cmp	r2, r7
 8011936:	bf38      	it	cc
 8011938:	2304      	movcc	r3, #4
 801193a:	9301      	str	r3, [sp, #4]
 801193c:	9b02      	ldr	r3, [sp, #8]
 801193e:	9103      	str	r1, [sp, #12]
 8011940:	428b      	cmp	r3, r1
 8011942:	d80c      	bhi.n	801195e <__multiply+0x9e>
 8011944:	2e00      	cmp	r6, #0
 8011946:	dd03      	ble.n	8011950 <__multiply+0x90>
 8011948:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801194c:	2b00      	cmp	r3, #0
 801194e:	d05b      	beq.n	8011a08 <__multiply+0x148>
 8011950:	6106      	str	r6, [r0, #16]
 8011952:	b005      	add	sp, #20
 8011954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011958:	f843 2b04 	str.w	r2, [r3], #4
 801195c:	e7d8      	b.n	8011910 <__multiply+0x50>
 801195e:	f8b1 a000 	ldrh.w	sl, [r1]
 8011962:	f1ba 0f00 	cmp.w	sl, #0
 8011966:	d024      	beq.n	80119b2 <__multiply+0xf2>
 8011968:	f104 0e14 	add.w	lr, r4, #20
 801196c:	46a9      	mov	r9, r5
 801196e:	f04f 0c00 	mov.w	ip, #0
 8011972:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011976:	f8d9 3000 	ldr.w	r3, [r9]
 801197a:	fa1f fb87 	uxth.w	fp, r7
 801197e:	b29b      	uxth	r3, r3
 8011980:	fb0a 330b 	mla	r3, sl, fp, r3
 8011984:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011988:	f8d9 7000 	ldr.w	r7, [r9]
 801198c:	4463      	add	r3, ip
 801198e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011992:	fb0a c70b 	mla	r7, sl, fp, ip
 8011996:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801199a:	b29b      	uxth	r3, r3
 801199c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80119a0:	4572      	cmp	r2, lr
 80119a2:	f849 3b04 	str.w	r3, [r9], #4
 80119a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80119aa:	d8e2      	bhi.n	8011972 <__multiply+0xb2>
 80119ac:	9b01      	ldr	r3, [sp, #4]
 80119ae:	f845 c003 	str.w	ip, [r5, r3]
 80119b2:	9b03      	ldr	r3, [sp, #12]
 80119b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80119b8:	3104      	adds	r1, #4
 80119ba:	f1b9 0f00 	cmp.w	r9, #0
 80119be:	d021      	beq.n	8011a04 <__multiply+0x144>
 80119c0:	682b      	ldr	r3, [r5, #0]
 80119c2:	f104 0c14 	add.w	ip, r4, #20
 80119c6:	46ae      	mov	lr, r5
 80119c8:	f04f 0a00 	mov.w	sl, #0
 80119cc:	f8bc b000 	ldrh.w	fp, [ip]
 80119d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80119d4:	fb09 770b 	mla	r7, r9, fp, r7
 80119d8:	4457      	add	r7, sl
 80119da:	b29b      	uxth	r3, r3
 80119dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80119e0:	f84e 3b04 	str.w	r3, [lr], #4
 80119e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80119e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80119ec:	f8be 3000 	ldrh.w	r3, [lr]
 80119f0:	fb09 330a 	mla	r3, r9, sl, r3
 80119f4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80119f8:	4562      	cmp	r2, ip
 80119fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80119fe:	d8e5      	bhi.n	80119cc <__multiply+0x10c>
 8011a00:	9f01      	ldr	r7, [sp, #4]
 8011a02:	51eb      	str	r3, [r5, r7]
 8011a04:	3504      	adds	r5, #4
 8011a06:	e799      	b.n	801193c <__multiply+0x7c>
 8011a08:	3e01      	subs	r6, #1
 8011a0a:	e79b      	b.n	8011944 <__multiply+0x84>
 8011a0c:	08013bed 	.word	0x08013bed
 8011a10:	08013c5e 	.word	0x08013c5e

08011a14 <__pow5mult>:
 8011a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a18:	4615      	mov	r5, r2
 8011a1a:	f012 0203 	ands.w	r2, r2, #3
 8011a1e:	4607      	mov	r7, r0
 8011a20:	460e      	mov	r6, r1
 8011a22:	d007      	beq.n	8011a34 <__pow5mult+0x20>
 8011a24:	4c25      	ldr	r4, [pc, #148]	@ (8011abc <__pow5mult+0xa8>)
 8011a26:	3a01      	subs	r2, #1
 8011a28:	2300      	movs	r3, #0
 8011a2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011a2e:	f7ff fe55 	bl	80116dc <__multadd>
 8011a32:	4606      	mov	r6, r0
 8011a34:	10ad      	asrs	r5, r5, #2
 8011a36:	d03d      	beq.n	8011ab4 <__pow5mult+0xa0>
 8011a38:	69fc      	ldr	r4, [r7, #28]
 8011a3a:	b97c      	cbnz	r4, 8011a5c <__pow5mult+0x48>
 8011a3c:	2010      	movs	r0, #16
 8011a3e:	f7ff fd23 	bl	8011488 <malloc>
 8011a42:	4602      	mov	r2, r0
 8011a44:	61f8      	str	r0, [r7, #28]
 8011a46:	b928      	cbnz	r0, 8011a54 <__pow5mult+0x40>
 8011a48:	4b1d      	ldr	r3, [pc, #116]	@ (8011ac0 <__pow5mult+0xac>)
 8011a4a:	481e      	ldr	r0, [pc, #120]	@ (8011ac4 <__pow5mult+0xb0>)
 8011a4c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011a50:	f000 fd4a 	bl	80124e8 <__assert_func>
 8011a54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011a58:	6004      	str	r4, [r0, #0]
 8011a5a:	60c4      	str	r4, [r0, #12]
 8011a5c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011a60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011a64:	b94c      	cbnz	r4, 8011a7a <__pow5mult+0x66>
 8011a66:	f240 2171 	movw	r1, #625	@ 0x271
 8011a6a:	4638      	mov	r0, r7
 8011a6c:	f7ff ff12 	bl	8011894 <__i2b>
 8011a70:	2300      	movs	r3, #0
 8011a72:	f8c8 0008 	str.w	r0, [r8, #8]
 8011a76:	4604      	mov	r4, r0
 8011a78:	6003      	str	r3, [r0, #0]
 8011a7a:	f04f 0900 	mov.w	r9, #0
 8011a7e:	07eb      	lsls	r3, r5, #31
 8011a80:	d50a      	bpl.n	8011a98 <__pow5mult+0x84>
 8011a82:	4631      	mov	r1, r6
 8011a84:	4622      	mov	r2, r4
 8011a86:	4638      	mov	r0, r7
 8011a88:	f7ff ff1a 	bl	80118c0 <__multiply>
 8011a8c:	4631      	mov	r1, r6
 8011a8e:	4680      	mov	r8, r0
 8011a90:	4638      	mov	r0, r7
 8011a92:	f7ff fe01 	bl	8011698 <_Bfree>
 8011a96:	4646      	mov	r6, r8
 8011a98:	106d      	asrs	r5, r5, #1
 8011a9a:	d00b      	beq.n	8011ab4 <__pow5mult+0xa0>
 8011a9c:	6820      	ldr	r0, [r4, #0]
 8011a9e:	b938      	cbnz	r0, 8011ab0 <__pow5mult+0x9c>
 8011aa0:	4622      	mov	r2, r4
 8011aa2:	4621      	mov	r1, r4
 8011aa4:	4638      	mov	r0, r7
 8011aa6:	f7ff ff0b 	bl	80118c0 <__multiply>
 8011aaa:	6020      	str	r0, [r4, #0]
 8011aac:	f8c0 9000 	str.w	r9, [r0]
 8011ab0:	4604      	mov	r4, r0
 8011ab2:	e7e4      	b.n	8011a7e <__pow5mult+0x6a>
 8011ab4:	4630      	mov	r0, r6
 8011ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011aba:	bf00      	nop
 8011abc:	08013cb8 	.word	0x08013cb8
 8011ac0:	08013b7e 	.word	0x08013b7e
 8011ac4:	08013c5e 	.word	0x08013c5e

08011ac8 <__lshift>:
 8011ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011acc:	460c      	mov	r4, r1
 8011ace:	6849      	ldr	r1, [r1, #4]
 8011ad0:	6923      	ldr	r3, [r4, #16]
 8011ad2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011ad6:	68a3      	ldr	r3, [r4, #8]
 8011ad8:	4607      	mov	r7, r0
 8011ada:	4691      	mov	r9, r2
 8011adc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011ae0:	f108 0601 	add.w	r6, r8, #1
 8011ae4:	42b3      	cmp	r3, r6
 8011ae6:	db0b      	blt.n	8011b00 <__lshift+0x38>
 8011ae8:	4638      	mov	r0, r7
 8011aea:	f7ff fd95 	bl	8011618 <_Balloc>
 8011aee:	4605      	mov	r5, r0
 8011af0:	b948      	cbnz	r0, 8011b06 <__lshift+0x3e>
 8011af2:	4602      	mov	r2, r0
 8011af4:	4b28      	ldr	r3, [pc, #160]	@ (8011b98 <__lshift+0xd0>)
 8011af6:	4829      	ldr	r0, [pc, #164]	@ (8011b9c <__lshift+0xd4>)
 8011af8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011afc:	f000 fcf4 	bl	80124e8 <__assert_func>
 8011b00:	3101      	adds	r1, #1
 8011b02:	005b      	lsls	r3, r3, #1
 8011b04:	e7ee      	b.n	8011ae4 <__lshift+0x1c>
 8011b06:	2300      	movs	r3, #0
 8011b08:	f100 0114 	add.w	r1, r0, #20
 8011b0c:	f100 0210 	add.w	r2, r0, #16
 8011b10:	4618      	mov	r0, r3
 8011b12:	4553      	cmp	r3, sl
 8011b14:	db33      	blt.n	8011b7e <__lshift+0xb6>
 8011b16:	6920      	ldr	r0, [r4, #16]
 8011b18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b1c:	f104 0314 	add.w	r3, r4, #20
 8011b20:	f019 091f 	ands.w	r9, r9, #31
 8011b24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011b28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011b2c:	d02b      	beq.n	8011b86 <__lshift+0xbe>
 8011b2e:	f1c9 0e20 	rsb	lr, r9, #32
 8011b32:	468a      	mov	sl, r1
 8011b34:	2200      	movs	r2, #0
 8011b36:	6818      	ldr	r0, [r3, #0]
 8011b38:	fa00 f009 	lsl.w	r0, r0, r9
 8011b3c:	4310      	orrs	r0, r2
 8011b3e:	f84a 0b04 	str.w	r0, [sl], #4
 8011b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b46:	459c      	cmp	ip, r3
 8011b48:	fa22 f20e 	lsr.w	r2, r2, lr
 8011b4c:	d8f3      	bhi.n	8011b36 <__lshift+0x6e>
 8011b4e:	ebac 0304 	sub.w	r3, ip, r4
 8011b52:	3b15      	subs	r3, #21
 8011b54:	f023 0303 	bic.w	r3, r3, #3
 8011b58:	3304      	adds	r3, #4
 8011b5a:	f104 0015 	add.w	r0, r4, #21
 8011b5e:	4584      	cmp	ip, r0
 8011b60:	bf38      	it	cc
 8011b62:	2304      	movcc	r3, #4
 8011b64:	50ca      	str	r2, [r1, r3]
 8011b66:	b10a      	cbz	r2, 8011b6c <__lshift+0xa4>
 8011b68:	f108 0602 	add.w	r6, r8, #2
 8011b6c:	3e01      	subs	r6, #1
 8011b6e:	4638      	mov	r0, r7
 8011b70:	612e      	str	r6, [r5, #16]
 8011b72:	4621      	mov	r1, r4
 8011b74:	f7ff fd90 	bl	8011698 <_Bfree>
 8011b78:	4628      	mov	r0, r5
 8011b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011b82:	3301      	adds	r3, #1
 8011b84:	e7c5      	b.n	8011b12 <__lshift+0x4a>
 8011b86:	3904      	subs	r1, #4
 8011b88:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011b90:	459c      	cmp	ip, r3
 8011b92:	d8f9      	bhi.n	8011b88 <__lshift+0xc0>
 8011b94:	e7ea      	b.n	8011b6c <__lshift+0xa4>
 8011b96:	bf00      	nop
 8011b98:	08013bed 	.word	0x08013bed
 8011b9c:	08013c5e 	.word	0x08013c5e

08011ba0 <__mcmp>:
 8011ba0:	690a      	ldr	r2, [r1, #16]
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	6900      	ldr	r0, [r0, #16]
 8011ba6:	1a80      	subs	r0, r0, r2
 8011ba8:	b530      	push	{r4, r5, lr}
 8011baa:	d10e      	bne.n	8011bca <__mcmp+0x2a>
 8011bac:	3314      	adds	r3, #20
 8011bae:	3114      	adds	r1, #20
 8011bb0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011bb4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011bb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011bbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011bc0:	4295      	cmp	r5, r2
 8011bc2:	d003      	beq.n	8011bcc <__mcmp+0x2c>
 8011bc4:	d205      	bcs.n	8011bd2 <__mcmp+0x32>
 8011bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8011bca:	bd30      	pop	{r4, r5, pc}
 8011bcc:	42a3      	cmp	r3, r4
 8011bce:	d3f3      	bcc.n	8011bb8 <__mcmp+0x18>
 8011bd0:	e7fb      	b.n	8011bca <__mcmp+0x2a>
 8011bd2:	2001      	movs	r0, #1
 8011bd4:	e7f9      	b.n	8011bca <__mcmp+0x2a>
	...

08011bd8 <__mdiff>:
 8011bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bdc:	4689      	mov	r9, r1
 8011bde:	4606      	mov	r6, r0
 8011be0:	4611      	mov	r1, r2
 8011be2:	4648      	mov	r0, r9
 8011be4:	4614      	mov	r4, r2
 8011be6:	f7ff ffdb 	bl	8011ba0 <__mcmp>
 8011bea:	1e05      	subs	r5, r0, #0
 8011bec:	d112      	bne.n	8011c14 <__mdiff+0x3c>
 8011bee:	4629      	mov	r1, r5
 8011bf0:	4630      	mov	r0, r6
 8011bf2:	f7ff fd11 	bl	8011618 <_Balloc>
 8011bf6:	4602      	mov	r2, r0
 8011bf8:	b928      	cbnz	r0, 8011c06 <__mdiff+0x2e>
 8011bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8011cf8 <__mdiff+0x120>)
 8011bfc:	f240 2137 	movw	r1, #567	@ 0x237
 8011c00:	483e      	ldr	r0, [pc, #248]	@ (8011cfc <__mdiff+0x124>)
 8011c02:	f000 fc71 	bl	80124e8 <__assert_func>
 8011c06:	2301      	movs	r3, #1
 8011c08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011c0c:	4610      	mov	r0, r2
 8011c0e:	b003      	add	sp, #12
 8011c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c14:	bfbc      	itt	lt
 8011c16:	464b      	movlt	r3, r9
 8011c18:	46a1      	movlt	r9, r4
 8011c1a:	4630      	mov	r0, r6
 8011c1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011c20:	bfba      	itte	lt
 8011c22:	461c      	movlt	r4, r3
 8011c24:	2501      	movlt	r5, #1
 8011c26:	2500      	movge	r5, #0
 8011c28:	f7ff fcf6 	bl	8011618 <_Balloc>
 8011c2c:	4602      	mov	r2, r0
 8011c2e:	b918      	cbnz	r0, 8011c38 <__mdiff+0x60>
 8011c30:	4b31      	ldr	r3, [pc, #196]	@ (8011cf8 <__mdiff+0x120>)
 8011c32:	f240 2145 	movw	r1, #581	@ 0x245
 8011c36:	e7e3      	b.n	8011c00 <__mdiff+0x28>
 8011c38:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011c3c:	6926      	ldr	r6, [r4, #16]
 8011c3e:	60c5      	str	r5, [r0, #12]
 8011c40:	f109 0310 	add.w	r3, r9, #16
 8011c44:	f109 0514 	add.w	r5, r9, #20
 8011c48:	f104 0e14 	add.w	lr, r4, #20
 8011c4c:	f100 0b14 	add.w	fp, r0, #20
 8011c50:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011c54:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011c58:	9301      	str	r3, [sp, #4]
 8011c5a:	46d9      	mov	r9, fp
 8011c5c:	f04f 0c00 	mov.w	ip, #0
 8011c60:	9b01      	ldr	r3, [sp, #4]
 8011c62:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011c66:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011c6a:	9301      	str	r3, [sp, #4]
 8011c6c:	fa1f f38a 	uxth.w	r3, sl
 8011c70:	4619      	mov	r1, r3
 8011c72:	b283      	uxth	r3, r0
 8011c74:	1acb      	subs	r3, r1, r3
 8011c76:	0c00      	lsrs	r0, r0, #16
 8011c78:	4463      	add	r3, ip
 8011c7a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011c7e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011c82:	b29b      	uxth	r3, r3
 8011c84:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011c88:	4576      	cmp	r6, lr
 8011c8a:	f849 3b04 	str.w	r3, [r9], #4
 8011c8e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011c92:	d8e5      	bhi.n	8011c60 <__mdiff+0x88>
 8011c94:	1b33      	subs	r3, r6, r4
 8011c96:	3b15      	subs	r3, #21
 8011c98:	f023 0303 	bic.w	r3, r3, #3
 8011c9c:	3415      	adds	r4, #21
 8011c9e:	3304      	adds	r3, #4
 8011ca0:	42a6      	cmp	r6, r4
 8011ca2:	bf38      	it	cc
 8011ca4:	2304      	movcc	r3, #4
 8011ca6:	441d      	add	r5, r3
 8011ca8:	445b      	add	r3, fp
 8011caa:	461e      	mov	r6, r3
 8011cac:	462c      	mov	r4, r5
 8011cae:	4544      	cmp	r4, r8
 8011cb0:	d30e      	bcc.n	8011cd0 <__mdiff+0xf8>
 8011cb2:	f108 0103 	add.w	r1, r8, #3
 8011cb6:	1b49      	subs	r1, r1, r5
 8011cb8:	f021 0103 	bic.w	r1, r1, #3
 8011cbc:	3d03      	subs	r5, #3
 8011cbe:	45a8      	cmp	r8, r5
 8011cc0:	bf38      	it	cc
 8011cc2:	2100      	movcc	r1, #0
 8011cc4:	440b      	add	r3, r1
 8011cc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011cca:	b191      	cbz	r1, 8011cf2 <__mdiff+0x11a>
 8011ccc:	6117      	str	r7, [r2, #16]
 8011cce:	e79d      	b.n	8011c0c <__mdiff+0x34>
 8011cd0:	f854 1b04 	ldr.w	r1, [r4], #4
 8011cd4:	46e6      	mov	lr, ip
 8011cd6:	0c08      	lsrs	r0, r1, #16
 8011cd8:	fa1c fc81 	uxtah	ip, ip, r1
 8011cdc:	4471      	add	r1, lr
 8011cde:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011ce2:	b289      	uxth	r1, r1
 8011ce4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011ce8:	f846 1b04 	str.w	r1, [r6], #4
 8011cec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011cf0:	e7dd      	b.n	8011cae <__mdiff+0xd6>
 8011cf2:	3f01      	subs	r7, #1
 8011cf4:	e7e7      	b.n	8011cc6 <__mdiff+0xee>
 8011cf6:	bf00      	nop
 8011cf8:	08013bed 	.word	0x08013bed
 8011cfc:	08013c5e 	.word	0x08013c5e

08011d00 <__ulp>:
 8011d00:	b082      	sub	sp, #8
 8011d02:	ed8d 0b00 	vstr	d0, [sp]
 8011d06:	9a01      	ldr	r2, [sp, #4]
 8011d08:	4b0f      	ldr	r3, [pc, #60]	@ (8011d48 <__ulp+0x48>)
 8011d0a:	4013      	ands	r3, r2
 8011d0c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	dc08      	bgt.n	8011d26 <__ulp+0x26>
 8011d14:	425b      	negs	r3, r3
 8011d16:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011d1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011d1e:	da04      	bge.n	8011d2a <__ulp+0x2a>
 8011d20:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011d24:	4113      	asrs	r3, r2
 8011d26:	2200      	movs	r2, #0
 8011d28:	e008      	b.n	8011d3c <__ulp+0x3c>
 8011d2a:	f1a2 0314 	sub.w	r3, r2, #20
 8011d2e:	2b1e      	cmp	r3, #30
 8011d30:	bfda      	itte	le
 8011d32:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011d36:	40da      	lsrle	r2, r3
 8011d38:	2201      	movgt	r2, #1
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	4619      	mov	r1, r3
 8011d3e:	4610      	mov	r0, r2
 8011d40:	ec41 0b10 	vmov	d0, r0, r1
 8011d44:	b002      	add	sp, #8
 8011d46:	4770      	bx	lr
 8011d48:	7ff00000 	.word	0x7ff00000

08011d4c <__b2d>:
 8011d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d50:	6906      	ldr	r6, [r0, #16]
 8011d52:	f100 0814 	add.w	r8, r0, #20
 8011d56:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011d5a:	1f37      	subs	r7, r6, #4
 8011d5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011d60:	4610      	mov	r0, r2
 8011d62:	f7ff fd4b 	bl	80117fc <__hi0bits>
 8011d66:	f1c0 0320 	rsb	r3, r0, #32
 8011d6a:	280a      	cmp	r0, #10
 8011d6c:	600b      	str	r3, [r1, #0]
 8011d6e:	491b      	ldr	r1, [pc, #108]	@ (8011ddc <__b2d+0x90>)
 8011d70:	dc15      	bgt.n	8011d9e <__b2d+0x52>
 8011d72:	f1c0 0c0b 	rsb	ip, r0, #11
 8011d76:	fa22 f30c 	lsr.w	r3, r2, ip
 8011d7a:	45b8      	cmp	r8, r7
 8011d7c:	ea43 0501 	orr.w	r5, r3, r1
 8011d80:	bf34      	ite	cc
 8011d82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011d86:	2300      	movcs	r3, #0
 8011d88:	3015      	adds	r0, #21
 8011d8a:	fa02 f000 	lsl.w	r0, r2, r0
 8011d8e:	fa23 f30c 	lsr.w	r3, r3, ip
 8011d92:	4303      	orrs	r3, r0
 8011d94:	461c      	mov	r4, r3
 8011d96:	ec45 4b10 	vmov	d0, r4, r5
 8011d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d9e:	45b8      	cmp	r8, r7
 8011da0:	bf3a      	itte	cc
 8011da2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011da6:	f1a6 0708 	subcc.w	r7, r6, #8
 8011daa:	2300      	movcs	r3, #0
 8011dac:	380b      	subs	r0, #11
 8011dae:	d012      	beq.n	8011dd6 <__b2d+0x8a>
 8011db0:	f1c0 0120 	rsb	r1, r0, #32
 8011db4:	fa23 f401 	lsr.w	r4, r3, r1
 8011db8:	4082      	lsls	r2, r0
 8011dba:	4322      	orrs	r2, r4
 8011dbc:	4547      	cmp	r7, r8
 8011dbe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011dc2:	bf8c      	ite	hi
 8011dc4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011dc8:	2200      	movls	r2, #0
 8011dca:	4083      	lsls	r3, r0
 8011dcc:	40ca      	lsrs	r2, r1
 8011dce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011dd2:	4313      	orrs	r3, r2
 8011dd4:	e7de      	b.n	8011d94 <__b2d+0x48>
 8011dd6:	ea42 0501 	orr.w	r5, r2, r1
 8011dda:	e7db      	b.n	8011d94 <__b2d+0x48>
 8011ddc:	3ff00000 	.word	0x3ff00000

08011de0 <__d2b>:
 8011de0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011de4:	460f      	mov	r7, r1
 8011de6:	2101      	movs	r1, #1
 8011de8:	ec59 8b10 	vmov	r8, r9, d0
 8011dec:	4616      	mov	r6, r2
 8011dee:	f7ff fc13 	bl	8011618 <_Balloc>
 8011df2:	4604      	mov	r4, r0
 8011df4:	b930      	cbnz	r0, 8011e04 <__d2b+0x24>
 8011df6:	4602      	mov	r2, r0
 8011df8:	4b23      	ldr	r3, [pc, #140]	@ (8011e88 <__d2b+0xa8>)
 8011dfa:	4824      	ldr	r0, [pc, #144]	@ (8011e8c <__d2b+0xac>)
 8011dfc:	f240 310f 	movw	r1, #783	@ 0x30f
 8011e00:	f000 fb72 	bl	80124e8 <__assert_func>
 8011e04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011e08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011e0c:	b10d      	cbz	r5, 8011e12 <__d2b+0x32>
 8011e0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011e12:	9301      	str	r3, [sp, #4]
 8011e14:	f1b8 0300 	subs.w	r3, r8, #0
 8011e18:	d023      	beq.n	8011e62 <__d2b+0x82>
 8011e1a:	4668      	mov	r0, sp
 8011e1c:	9300      	str	r3, [sp, #0]
 8011e1e:	f7ff fd0c 	bl	801183a <__lo0bits>
 8011e22:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011e26:	b1d0      	cbz	r0, 8011e5e <__d2b+0x7e>
 8011e28:	f1c0 0320 	rsb	r3, r0, #32
 8011e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8011e30:	430b      	orrs	r3, r1
 8011e32:	40c2      	lsrs	r2, r0
 8011e34:	6163      	str	r3, [r4, #20]
 8011e36:	9201      	str	r2, [sp, #4]
 8011e38:	9b01      	ldr	r3, [sp, #4]
 8011e3a:	61a3      	str	r3, [r4, #24]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	bf0c      	ite	eq
 8011e40:	2201      	moveq	r2, #1
 8011e42:	2202      	movne	r2, #2
 8011e44:	6122      	str	r2, [r4, #16]
 8011e46:	b1a5      	cbz	r5, 8011e72 <__d2b+0x92>
 8011e48:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011e4c:	4405      	add	r5, r0
 8011e4e:	603d      	str	r5, [r7, #0]
 8011e50:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011e54:	6030      	str	r0, [r6, #0]
 8011e56:	4620      	mov	r0, r4
 8011e58:	b003      	add	sp, #12
 8011e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e5e:	6161      	str	r1, [r4, #20]
 8011e60:	e7ea      	b.n	8011e38 <__d2b+0x58>
 8011e62:	a801      	add	r0, sp, #4
 8011e64:	f7ff fce9 	bl	801183a <__lo0bits>
 8011e68:	9b01      	ldr	r3, [sp, #4]
 8011e6a:	6163      	str	r3, [r4, #20]
 8011e6c:	3020      	adds	r0, #32
 8011e6e:	2201      	movs	r2, #1
 8011e70:	e7e8      	b.n	8011e44 <__d2b+0x64>
 8011e72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011e76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011e7a:	6038      	str	r0, [r7, #0]
 8011e7c:	6918      	ldr	r0, [r3, #16]
 8011e7e:	f7ff fcbd 	bl	80117fc <__hi0bits>
 8011e82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011e86:	e7e5      	b.n	8011e54 <__d2b+0x74>
 8011e88:	08013bed 	.word	0x08013bed
 8011e8c:	08013c5e 	.word	0x08013c5e

08011e90 <__ratio>:
 8011e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e94:	b085      	sub	sp, #20
 8011e96:	e9cd 1000 	strd	r1, r0, [sp]
 8011e9a:	a902      	add	r1, sp, #8
 8011e9c:	f7ff ff56 	bl	8011d4c <__b2d>
 8011ea0:	9800      	ldr	r0, [sp, #0]
 8011ea2:	a903      	add	r1, sp, #12
 8011ea4:	ec55 4b10 	vmov	r4, r5, d0
 8011ea8:	f7ff ff50 	bl	8011d4c <__b2d>
 8011eac:	9b01      	ldr	r3, [sp, #4]
 8011eae:	6919      	ldr	r1, [r3, #16]
 8011eb0:	9b00      	ldr	r3, [sp, #0]
 8011eb2:	691b      	ldr	r3, [r3, #16]
 8011eb4:	1ac9      	subs	r1, r1, r3
 8011eb6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011eba:	1a9b      	subs	r3, r3, r2
 8011ebc:	ec5b ab10 	vmov	sl, fp, d0
 8011ec0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	bfce      	itee	gt
 8011ec8:	462a      	movgt	r2, r5
 8011eca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011ece:	465a      	movle	r2, fp
 8011ed0:	462f      	mov	r7, r5
 8011ed2:	46d9      	mov	r9, fp
 8011ed4:	bfcc      	ite	gt
 8011ed6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011eda:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011ede:	464b      	mov	r3, r9
 8011ee0:	4652      	mov	r2, sl
 8011ee2:	4620      	mov	r0, r4
 8011ee4:	4639      	mov	r1, r7
 8011ee6:	f7ee fcd9 	bl	800089c <__aeabi_ddiv>
 8011eea:	ec41 0b10 	vmov	d0, r0, r1
 8011eee:	b005      	add	sp, #20
 8011ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011ef4 <__copybits>:
 8011ef4:	3901      	subs	r1, #1
 8011ef6:	b570      	push	{r4, r5, r6, lr}
 8011ef8:	1149      	asrs	r1, r1, #5
 8011efa:	6914      	ldr	r4, [r2, #16]
 8011efc:	3101      	adds	r1, #1
 8011efe:	f102 0314 	add.w	r3, r2, #20
 8011f02:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011f06:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011f0a:	1f05      	subs	r5, r0, #4
 8011f0c:	42a3      	cmp	r3, r4
 8011f0e:	d30c      	bcc.n	8011f2a <__copybits+0x36>
 8011f10:	1aa3      	subs	r3, r4, r2
 8011f12:	3b11      	subs	r3, #17
 8011f14:	f023 0303 	bic.w	r3, r3, #3
 8011f18:	3211      	adds	r2, #17
 8011f1a:	42a2      	cmp	r2, r4
 8011f1c:	bf88      	it	hi
 8011f1e:	2300      	movhi	r3, #0
 8011f20:	4418      	add	r0, r3
 8011f22:	2300      	movs	r3, #0
 8011f24:	4288      	cmp	r0, r1
 8011f26:	d305      	bcc.n	8011f34 <__copybits+0x40>
 8011f28:	bd70      	pop	{r4, r5, r6, pc}
 8011f2a:	f853 6b04 	ldr.w	r6, [r3], #4
 8011f2e:	f845 6f04 	str.w	r6, [r5, #4]!
 8011f32:	e7eb      	b.n	8011f0c <__copybits+0x18>
 8011f34:	f840 3b04 	str.w	r3, [r0], #4
 8011f38:	e7f4      	b.n	8011f24 <__copybits+0x30>

08011f3a <__any_on>:
 8011f3a:	f100 0214 	add.w	r2, r0, #20
 8011f3e:	6900      	ldr	r0, [r0, #16]
 8011f40:	114b      	asrs	r3, r1, #5
 8011f42:	4298      	cmp	r0, r3
 8011f44:	b510      	push	{r4, lr}
 8011f46:	db11      	blt.n	8011f6c <__any_on+0x32>
 8011f48:	dd0a      	ble.n	8011f60 <__any_on+0x26>
 8011f4a:	f011 011f 	ands.w	r1, r1, #31
 8011f4e:	d007      	beq.n	8011f60 <__any_on+0x26>
 8011f50:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011f54:	fa24 f001 	lsr.w	r0, r4, r1
 8011f58:	fa00 f101 	lsl.w	r1, r0, r1
 8011f5c:	428c      	cmp	r4, r1
 8011f5e:	d10b      	bne.n	8011f78 <__any_on+0x3e>
 8011f60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011f64:	4293      	cmp	r3, r2
 8011f66:	d803      	bhi.n	8011f70 <__any_on+0x36>
 8011f68:	2000      	movs	r0, #0
 8011f6a:	bd10      	pop	{r4, pc}
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	e7f7      	b.n	8011f60 <__any_on+0x26>
 8011f70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011f74:	2900      	cmp	r1, #0
 8011f76:	d0f5      	beq.n	8011f64 <__any_on+0x2a>
 8011f78:	2001      	movs	r0, #1
 8011f7a:	e7f6      	b.n	8011f6a <__any_on+0x30>

08011f7c <_strtol_l.constprop.0>:
 8011f7c:	2b24      	cmp	r3, #36	@ 0x24
 8011f7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f82:	4686      	mov	lr, r0
 8011f84:	4690      	mov	r8, r2
 8011f86:	d801      	bhi.n	8011f8c <_strtol_l.constprop.0+0x10>
 8011f88:	2b01      	cmp	r3, #1
 8011f8a:	d106      	bne.n	8011f9a <_strtol_l.constprop.0+0x1e>
 8011f8c:	f7fe f860 	bl	8010050 <__errno>
 8011f90:	2316      	movs	r3, #22
 8011f92:	6003      	str	r3, [r0, #0]
 8011f94:	2000      	movs	r0, #0
 8011f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f9a:	4834      	ldr	r0, [pc, #208]	@ (801206c <_strtol_l.constprop.0+0xf0>)
 8011f9c:	460d      	mov	r5, r1
 8011f9e:	462a      	mov	r2, r5
 8011fa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011fa4:	5d06      	ldrb	r6, [r0, r4]
 8011fa6:	f016 0608 	ands.w	r6, r6, #8
 8011faa:	d1f8      	bne.n	8011f9e <_strtol_l.constprop.0+0x22>
 8011fac:	2c2d      	cmp	r4, #45	@ 0x2d
 8011fae:	d12d      	bne.n	801200c <_strtol_l.constprop.0+0x90>
 8011fb0:	782c      	ldrb	r4, [r5, #0]
 8011fb2:	2601      	movs	r6, #1
 8011fb4:	1c95      	adds	r5, r2, #2
 8011fb6:	f033 0210 	bics.w	r2, r3, #16
 8011fba:	d109      	bne.n	8011fd0 <_strtol_l.constprop.0+0x54>
 8011fbc:	2c30      	cmp	r4, #48	@ 0x30
 8011fbe:	d12a      	bne.n	8012016 <_strtol_l.constprop.0+0x9a>
 8011fc0:	782a      	ldrb	r2, [r5, #0]
 8011fc2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011fc6:	2a58      	cmp	r2, #88	@ 0x58
 8011fc8:	d125      	bne.n	8012016 <_strtol_l.constprop.0+0x9a>
 8011fca:	786c      	ldrb	r4, [r5, #1]
 8011fcc:	2310      	movs	r3, #16
 8011fce:	3502      	adds	r5, #2
 8011fd0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011fd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011fd8:	2200      	movs	r2, #0
 8011fda:	fbbc f9f3 	udiv	r9, ip, r3
 8011fde:	4610      	mov	r0, r2
 8011fe0:	fb03 ca19 	mls	sl, r3, r9, ip
 8011fe4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011fe8:	2f09      	cmp	r7, #9
 8011fea:	d81b      	bhi.n	8012024 <_strtol_l.constprop.0+0xa8>
 8011fec:	463c      	mov	r4, r7
 8011fee:	42a3      	cmp	r3, r4
 8011ff0:	dd27      	ble.n	8012042 <_strtol_l.constprop.0+0xc6>
 8011ff2:	1c57      	adds	r7, r2, #1
 8011ff4:	d007      	beq.n	8012006 <_strtol_l.constprop.0+0x8a>
 8011ff6:	4581      	cmp	r9, r0
 8011ff8:	d320      	bcc.n	801203c <_strtol_l.constprop.0+0xc0>
 8011ffa:	d101      	bne.n	8012000 <_strtol_l.constprop.0+0x84>
 8011ffc:	45a2      	cmp	sl, r4
 8011ffe:	db1d      	blt.n	801203c <_strtol_l.constprop.0+0xc0>
 8012000:	fb00 4003 	mla	r0, r0, r3, r4
 8012004:	2201      	movs	r2, #1
 8012006:	f815 4b01 	ldrb.w	r4, [r5], #1
 801200a:	e7eb      	b.n	8011fe4 <_strtol_l.constprop.0+0x68>
 801200c:	2c2b      	cmp	r4, #43	@ 0x2b
 801200e:	bf04      	itt	eq
 8012010:	782c      	ldrbeq	r4, [r5, #0]
 8012012:	1c95      	addeq	r5, r2, #2
 8012014:	e7cf      	b.n	8011fb6 <_strtol_l.constprop.0+0x3a>
 8012016:	2b00      	cmp	r3, #0
 8012018:	d1da      	bne.n	8011fd0 <_strtol_l.constprop.0+0x54>
 801201a:	2c30      	cmp	r4, #48	@ 0x30
 801201c:	bf0c      	ite	eq
 801201e:	2308      	moveq	r3, #8
 8012020:	230a      	movne	r3, #10
 8012022:	e7d5      	b.n	8011fd0 <_strtol_l.constprop.0+0x54>
 8012024:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012028:	2f19      	cmp	r7, #25
 801202a:	d801      	bhi.n	8012030 <_strtol_l.constprop.0+0xb4>
 801202c:	3c37      	subs	r4, #55	@ 0x37
 801202e:	e7de      	b.n	8011fee <_strtol_l.constprop.0+0x72>
 8012030:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012034:	2f19      	cmp	r7, #25
 8012036:	d804      	bhi.n	8012042 <_strtol_l.constprop.0+0xc6>
 8012038:	3c57      	subs	r4, #87	@ 0x57
 801203a:	e7d8      	b.n	8011fee <_strtol_l.constprop.0+0x72>
 801203c:	f04f 32ff 	mov.w	r2, #4294967295
 8012040:	e7e1      	b.n	8012006 <_strtol_l.constprop.0+0x8a>
 8012042:	1c53      	adds	r3, r2, #1
 8012044:	d108      	bne.n	8012058 <_strtol_l.constprop.0+0xdc>
 8012046:	2322      	movs	r3, #34	@ 0x22
 8012048:	f8ce 3000 	str.w	r3, [lr]
 801204c:	4660      	mov	r0, ip
 801204e:	f1b8 0f00 	cmp.w	r8, #0
 8012052:	d0a0      	beq.n	8011f96 <_strtol_l.constprop.0+0x1a>
 8012054:	1e69      	subs	r1, r5, #1
 8012056:	e006      	b.n	8012066 <_strtol_l.constprop.0+0xea>
 8012058:	b106      	cbz	r6, 801205c <_strtol_l.constprop.0+0xe0>
 801205a:	4240      	negs	r0, r0
 801205c:	f1b8 0f00 	cmp.w	r8, #0
 8012060:	d099      	beq.n	8011f96 <_strtol_l.constprop.0+0x1a>
 8012062:	2a00      	cmp	r2, #0
 8012064:	d1f6      	bne.n	8012054 <_strtol_l.constprop.0+0xd8>
 8012066:	f8c8 1000 	str.w	r1, [r8]
 801206a:	e794      	b.n	8011f96 <_strtol_l.constprop.0+0x1a>
 801206c:	08013db9 	.word	0x08013db9

08012070 <_strtol_r>:
 8012070:	f7ff bf84 	b.w	8011f7c <_strtol_l.constprop.0>

08012074 <__ascii_wctomb>:
 8012074:	4603      	mov	r3, r0
 8012076:	4608      	mov	r0, r1
 8012078:	b141      	cbz	r1, 801208c <__ascii_wctomb+0x18>
 801207a:	2aff      	cmp	r2, #255	@ 0xff
 801207c:	d904      	bls.n	8012088 <__ascii_wctomb+0x14>
 801207e:	228a      	movs	r2, #138	@ 0x8a
 8012080:	601a      	str	r2, [r3, #0]
 8012082:	f04f 30ff 	mov.w	r0, #4294967295
 8012086:	4770      	bx	lr
 8012088:	700a      	strb	r2, [r1, #0]
 801208a:	2001      	movs	r0, #1
 801208c:	4770      	bx	lr

0801208e <__ssputs_r>:
 801208e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012092:	688e      	ldr	r6, [r1, #8]
 8012094:	461f      	mov	r7, r3
 8012096:	42be      	cmp	r6, r7
 8012098:	680b      	ldr	r3, [r1, #0]
 801209a:	4682      	mov	sl, r0
 801209c:	460c      	mov	r4, r1
 801209e:	4690      	mov	r8, r2
 80120a0:	d82d      	bhi.n	80120fe <__ssputs_r+0x70>
 80120a2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80120a6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80120aa:	d026      	beq.n	80120fa <__ssputs_r+0x6c>
 80120ac:	6965      	ldr	r5, [r4, #20]
 80120ae:	6909      	ldr	r1, [r1, #16]
 80120b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80120b4:	eba3 0901 	sub.w	r9, r3, r1
 80120b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80120bc:	1c7b      	adds	r3, r7, #1
 80120be:	444b      	add	r3, r9
 80120c0:	106d      	asrs	r5, r5, #1
 80120c2:	429d      	cmp	r5, r3
 80120c4:	bf38      	it	cc
 80120c6:	461d      	movcc	r5, r3
 80120c8:	0553      	lsls	r3, r2, #21
 80120ca:	d527      	bpl.n	801211c <__ssputs_r+0x8e>
 80120cc:	4629      	mov	r1, r5
 80120ce:	f7ff fa05 	bl	80114dc <_malloc_r>
 80120d2:	4606      	mov	r6, r0
 80120d4:	b360      	cbz	r0, 8012130 <__ssputs_r+0xa2>
 80120d6:	6921      	ldr	r1, [r4, #16]
 80120d8:	464a      	mov	r2, r9
 80120da:	f7fd ffe6 	bl	80100aa <memcpy>
 80120de:	89a3      	ldrh	r3, [r4, #12]
 80120e0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80120e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120e8:	81a3      	strh	r3, [r4, #12]
 80120ea:	6126      	str	r6, [r4, #16]
 80120ec:	6165      	str	r5, [r4, #20]
 80120ee:	444e      	add	r6, r9
 80120f0:	eba5 0509 	sub.w	r5, r5, r9
 80120f4:	6026      	str	r6, [r4, #0]
 80120f6:	60a5      	str	r5, [r4, #8]
 80120f8:	463e      	mov	r6, r7
 80120fa:	42be      	cmp	r6, r7
 80120fc:	d900      	bls.n	8012100 <__ssputs_r+0x72>
 80120fe:	463e      	mov	r6, r7
 8012100:	6820      	ldr	r0, [r4, #0]
 8012102:	4632      	mov	r2, r6
 8012104:	4641      	mov	r1, r8
 8012106:	f000 f9c5 	bl	8012494 <memmove>
 801210a:	68a3      	ldr	r3, [r4, #8]
 801210c:	1b9b      	subs	r3, r3, r6
 801210e:	60a3      	str	r3, [r4, #8]
 8012110:	6823      	ldr	r3, [r4, #0]
 8012112:	4433      	add	r3, r6
 8012114:	6023      	str	r3, [r4, #0]
 8012116:	2000      	movs	r0, #0
 8012118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801211c:	462a      	mov	r2, r5
 801211e:	f000 fa15 	bl	801254c <_realloc_r>
 8012122:	4606      	mov	r6, r0
 8012124:	2800      	cmp	r0, #0
 8012126:	d1e0      	bne.n	80120ea <__ssputs_r+0x5c>
 8012128:	6921      	ldr	r1, [r4, #16]
 801212a:	4650      	mov	r0, sl
 801212c:	f7fe fe28 	bl	8010d80 <_free_r>
 8012130:	230c      	movs	r3, #12
 8012132:	f8ca 3000 	str.w	r3, [sl]
 8012136:	89a3      	ldrh	r3, [r4, #12]
 8012138:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801213c:	81a3      	strh	r3, [r4, #12]
 801213e:	f04f 30ff 	mov.w	r0, #4294967295
 8012142:	e7e9      	b.n	8012118 <__ssputs_r+0x8a>

08012144 <_svfiprintf_r>:
 8012144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012148:	4698      	mov	r8, r3
 801214a:	898b      	ldrh	r3, [r1, #12]
 801214c:	061b      	lsls	r3, r3, #24
 801214e:	b09d      	sub	sp, #116	@ 0x74
 8012150:	4607      	mov	r7, r0
 8012152:	460d      	mov	r5, r1
 8012154:	4614      	mov	r4, r2
 8012156:	d510      	bpl.n	801217a <_svfiprintf_r+0x36>
 8012158:	690b      	ldr	r3, [r1, #16]
 801215a:	b973      	cbnz	r3, 801217a <_svfiprintf_r+0x36>
 801215c:	2140      	movs	r1, #64	@ 0x40
 801215e:	f7ff f9bd 	bl	80114dc <_malloc_r>
 8012162:	6028      	str	r0, [r5, #0]
 8012164:	6128      	str	r0, [r5, #16]
 8012166:	b930      	cbnz	r0, 8012176 <_svfiprintf_r+0x32>
 8012168:	230c      	movs	r3, #12
 801216a:	603b      	str	r3, [r7, #0]
 801216c:	f04f 30ff 	mov.w	r0, #4294967295
 8012170:	b01d      	add	sp, #116	@ 0x74
 8012172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012176:	2340      	movs	r3, #64	@ 0x40
 8012178:	616b      	str	r3, [r5, #20]
 801217a:	2300      	movs	r3, #0
 801217c:	9309      	str	r3, [sp, #36]	@ 0x24
 801217e:	2320      	movs	r3, #32
 8012180:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012184:	f8cd 800c 	str.w	r8, [sp, #12]
 8012188:	2330      	movs	r3, #48	@ 0x30
 801218a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012328 <_svfiprintf_r+0x1e4>
 801218e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012192:	f04f 0901 	mov.w	r9, #1
 8012196:	4623      	mov	r3, r4
 8012198:	469a      	mov	sl, r3
 801219a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801219e:	b10a      	cbz	r2, 80121a4 <_svfiprintf_r+0x60>
 80121a0:	2a25      	cmp	r2, #37	@ 0x25
 80121a2:	d1f9      	bne.n	8012198 <_svfiprintf_r+0x54>
 80121a4:	ebba 0b04 	subs.w	fp, sl, r4
 80121a8:	d00b      	beq.n	80121c2 <_svfiprintf_r+0x7e>
 80121aa:	465b      	mov	r3, fp
 80121ac:	4622      	mov	r2, r4
 80121ae:	4629      	mov	r1, r5
 80121b0:	4638      	mov	r0, r7
 80121b2:	f7ff ff6c 	bl	801208e <__ssputs_r>
 80121b6:	3001      	adds	r0, #1
 80121b8:	f000 80a7 	beq.w	801230a <_svfiprintf_r+0x1c6>
 80121bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80121be:	445a      	add	r2, fp
 80121c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80121c2:	f89a 3000 	ldrb.w	r3, [sl]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	f000 809f 	beq.w	801230a <_svfiprintf_r+0x1c6>
 80121cc:	2300      	movs	r3, #0
 80121ce:	f04f 32ff 	mov.w	r2, #4294967295
 80121d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121d6:	f10a 0a01 	add.w	sl, sl, #1
 80121da:	9304      	str	r3, [sp, #16]
 80121dc:	9307      	str	r3, [sp, #28]
 80121de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80121e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80121e4:	4654      	mov	r4, sl
 80121e6:	2205      	movs	r2, #5
 80121e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121ec:	484e      	ldr	r0, [pc, #312]	@ (8012328 <_svfiprintf_r+0x1e4>)
 80121ee:	f7ee f817 	bl	8000220 <memchr>
 80121f2:	9a04      	ldr	r2, [sp, #16]
 80121f4:	b9d8      	cbnz	r0, 801222e <_svfiprintf_r+0xea>
 80121f6:	06d0      	lsls	r0, r2, #27
 80121f8:	bf44      	itt	mi
 80121fa:	2320      	movmi	r3, #32
 80121fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012200:	0711      	lsls	r1, r2, #28
 8012202:	bf44      	itt	mi
 8012204:	232b      	movmi	r3, #43	@ 0x2b
 8012206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801220a:	f89a 3000 	ldrb.w	r3, [sl]
 801220e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012210:	d015      	beq.n	801223e <_svfiprintf_r+0xfa>
 8012212:	9a07      	ldr	r2, [sp, #28]
 8012214:	4654      	mov	r4, sl
 8012216:	2000      	movs	r0, #0
 8012218:	f04f 0c0a 	mov.w	ip, #10
 801221c:	4621      	mov	r1, r4
 801221e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012222:	3b30      	subs	r3, #48	@ 0x30
 8012224:	2b09      	cmp	r3, #9
 8012226:	d94b      	bls.n	80122c0 <_svfiprintf_r+0x17c>
 8012228:	b1b0      	cbz	r0, 8012258 <_svfiprintf_r+0x114>
 801222a:	9207      	str	r2, [sp, #28]
 801222c:	e014      	b.n	8012258 <_svfiprintf_r+0x114>
 801222e:	eba0 0308 	sub.w	r3, r0, r8
 8012232:	fa09 f303 	lsl.w	r3, r9, r3
 8012236:	4313      	orrs	r3, r2
 8012238:	9304      	str	r3, [sp, #16]
 801223a:	46a2      	mov	sl, r4
 801223c:	e7d2      	b.n	80121e4 <_svfiprintf_r+0xa0>
 801223e:	9b03      	ldr	r3, [sp, #12]
 8012240:	1d19      	adds	r1, r3, #4
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	9103      	str	r1, [sp, #12]
 8012246:	2b00      	cmp	r3, #0
 8012248:	bfbb      	ittet	lt
 801224a:	425b      	neglt	r3, r3
 801224c:	f042 0202 	orrlt.w	r2, r2, #2
 8012250:	9307      	strge	r3, [sp, #28]
 8012252:	9307      	strlt	r3, [sp, #28]
 8012254:	bfb8      	it	lt
 8012256:	9204      	strlt	r2, [sp, #16]
 8012258:	7823      	ldrb	r3, [r4, #0]
 801225a:	2b2e      	cmp	r3, #46	@ 0x2e
 801225c:	d10a      	bne.n	8012274 <_svfiprintf_r+0x130>
 801225e:	7863      	ldrb	r3, [r4, #1]
 8012260:	2b2a      	cmp	r3, #42	@ 0x2a
 8012262:	d132      	bne.n	80122ca <_svfiprintf_r+0x186>
 8012264:	9b03      	ldr	r3, [sp, #12]
 8012266:	1d1a      	adds	r2, r3, #4
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	9203      	str	r2, [sp, #12]
 801226c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012270:	3402      	adds	r4, #2
 8012272:	9305      	str	r3, [sp, #20]
 8012274:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012338 <_svfiprintf_r+0x1f4>
 8012278:	7821      	ldrb	r1, [r4, #0]
 801227a:	2203      	movs	r2, #3
 801227c:	4650      	mov	r0, sl
 801227e:	f7ed ffcf 	bl	8000220 <memchr>
 8012282:	b138      	cbz	r0, 8012294 <_svfiprintf_r+0x150>
 8012284:	9b04      	ldr	r3, [sp, #16]
 8012286:	eba0 000a 	sub.w	r0, r0, sl
 801228a:	2240      	movs	r2, #64	@ 0x40
 801228c:	4082      	lsls	r2, r0
 801228e:	4313      	orrs	r3, r2
 8012290:	3401      	adds	r4, #1
 8012292:	9304      	str	r3, [sp, #16]
 8012294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012298:	4824      	ldr	r0, [pc, #144]	@ (801232c <_svfiprintf_r+0x1e8>)
 801229a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801229e:	2206      	movs	r2, #6
 80122a0:	f7ed ffbe 	bl	8000220 <memchr>
 80122a4:	2800      	cmp	r0, #0
 80122a6:	d036      	beq.n	8012316 <_svfiprintf_r+0x1d2>
 80122a8:	4b21      	ldr	r3, [pc, #132]	@ (8012330 <_svfiprintf_r+0x1ec>)
 80122aa:	bb1b      	cbnz	r3, 80122f4 <_svfiprintf_r+0x1b0>
 80122ac:	9b03      	ldr	r3, [sp, #12]
 80122ae:	3307      	adds	r3, #7
 80122b0:	f023 0307 	bic.w	r3, r3, #7
 80122b4:	3308      	adds	r3, #8
 80122b6:	9303      	str	r3, [sp, #12]
 80122b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122ba:	4433      	add	r3, r6
 80122bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80122be:	e76a      	b.n	8012196 <_svfiprintf_r+0x52>
 80122c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80122c4:	460c      	mov	r4, r1
 80122c6:	2001      	movs	r0, #1
 80122c8:	e7a8      	b.n	801221c <_svfiprintf_r+0xd8>
 80122ca:	2300      	movs	r3, #0
 80122cc:	3401      	adds	r4, #1
 80122ce:	9305      	str	r3, [sp, #20]
 80122d0:	4619      	mov	r1, r3
 80122d2:	f04f 0c0a 	mov.w	ip, #10
 80122d6:	4620      	mov	r0, r4
 80122d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122dc:	3a30      	subs	r2, #48	@ 0x30
 80122de:	2a09      	cmp	r2, #9
 80122e0:	d903      	bls.n	80122ea <_svfiprintf_r+0x1a6>
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d0c6      	beq.n	8012274 <_svfiprintf_r+0x130>
 80122e6:	9105      	str	r1, [sp, #20]
 80122e8:	e7c4      	b.n	8012274 <_svfiprintf_r+0x130>
 80122ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80122ee:	4604      	mov	r4, r0
 80122f0:	2301      	movs	r3, #1
 80122f2:	e7f0      	b.n	80122d6 <_svfiprintf_r+0x192>
 80122f4:	ab03      	add	r3, sp, #12
 80122f6:	9300      	str	r3, [sp, #0]
 80122f8:	462a      	mov	r2, r5
 80122fa:	4b0e      	ldr	r3, [pc, #56]	@ (8012334 <_svfiprintf_r+0x1f0>)
 80122fc:	a904      	add	r1, sp, #16
 80122fe:	4638      	mov	r0, r7
 8012300:	f7fc ff30 	bl	800f164 <_printf_float>
 8012304:	1c42      	adds	r2, r0, #1
 8012306:	4606      	mov	r6, r0
 8012308:	d1d6      	bne.n	80122b8 <_svfiprintf_r+0x174>
 801230a:	89ab      	ldrh	r3, [r5, #12]
 801230c:	065b      	lsls	r3, r3, #25
 801230e:	f53f af2d 	bmi.w	801216c <_svfiprintf_r+0x28>
 8012312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012314:	e72c      	b.n	8012170 <_svfiprintf_r+0x2c>
 8012316:	ab03      	add	r3, sp, #12
 8012318:	9300      	str	r3, [sp, #0]
 801231a:	462a      	mov	r2, r5
 801231c:	4b05      	ldr	r3, [pc, #20]	@ (8012334 <_svfiprintf_r+0x1f0>)
 801231e:	a904      	add	r1, sp, #16
 8012320:	4638      	mov	r0, r7
 8012322:	f7fd f9b7 	bl	800f694 <_printf_i>
 8012326:	e7ed      	b.n	8012304 <_svfiprintf_r+0x1c0>
 8012328:	08013eb9 	.word	0x08013eb9
 801232c:	08013ec3 	.word	0x08013ec3
 8012330:	0800f165 	.word	0x0800f165
 8012334:	0801208f 	.word	0x0801208f
 8012338:	08013ebf 	.word	0x08013ebf

0801233c <__sflush_r>:
 801233c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012344:	0716      	lsls	r6, r2, #28
 8012346:	4605      	mov	r5, r0
 8012348:	460c      	mov	r4, r1
 801234a:	d454      	bmi.n	80123f6 <__sflush_r+0xba>
 801234c:	684b      	ldr	r3, [r1, #4]
 801234e:	2b00      	cmp	r3, #0
 8012350:	dc02      	bgt.n	8012358 <__sflush_r+0x1c>
 8012352:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012354:	2b00      	cmp	r3, #0
 8012356:	dd48      	ble.n	80123ea <__sflush_r+0xae>
 8012358:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801235a:	2e00      	cmp	r6, #0
 801235c:	d045      	beq.n	80123ea <__sflush_r+0xae>
 801235e:	2300      	movs	r3, #0
 8012360:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012364:	682f      	ldr	r7, [r5, #0]
 8012366:	6a21      	ldr	r1, [r4, #32]
 8012368:	602b      	str	r3, [r5, #0]
 801236a:	d030      	beq.n	80123ce <__sflush_r+0x92>
 801236c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801236e:	89a3      	ldrh	r3, [r4, #12]
 8012370:	0759      	lsls	r1, r3, #29
 8012372:	d505      	bpl.n	8012380 <__sflush_r+0x44>
 8012374:	6863      	ldr	r3, [r4, #4]
 8012376:	1ad2      	subs	r2, r2, r3
 8012378:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801237a:	b10b      	cbz	r3, 8012380 <__sflush_r+0x44>
 801237c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801237e:	1ad2      	subs	r2, r2, r3
 8012380:	2300      	movs	r3, #0
 8012382:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012384:	6a21      	ldr	r1, [r4, #32]
 8012386:	4628      	mov	r0, r5
 8012388:	47b0      	blx	r6
 801238a:	1c43      	adds	r3, r0, #1
 801238c:	89a3      	ldrh	r3, [r4, #12]
 801238e:	d106      	bne.n	801239e <__sflush_r+0x62>
 8012390:	6829      	ldr	r1, [r5, #0]
 8012392:	291d      	cmp	r1, #29
 8012394:	d82b      	bhi.n	80123ee <__sflush_r+0xb2>
 8012396:	4a2a      	ldr	r2, [pc, #168]	@ (8012440 <__sflush_r+0x104>)
 8012398:	410a      	asrs	r2, r1
 801239a:	07d6      	lsls	r6, r2, #31
 801239c:	d427      	bmi.n	80123ee <__sflush_r+0xb2>
 801239e:	2200      	movs	r2, #0
 80123a0:	6062      	str	r2, [r4, #4]
 80123a2:	04d9      	lsls	r1, r3, #19
 80123a4:	6922      	ldr	r2, [r4, #16]
 80123a6:	6022      	str	r2, [r4, #0]
 80123a8:	d504      	bpl.n	80123b4 <__sflush_r+0x78>
 80123aa:	1c42      	adds	r2, r0, #1
 80123ac:	d101      	bne.n	80123b2 <__sflush_r+0x76>
 80123ae:	682b      	ldr	r3, [r5, #0]
 80123b0:	b903      	cbnz	r3, 80123b4 <__sflush_r+0x78>
 80123b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80123b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80123b6:	602f      	str	r7, [r5, #0]
 80123b8:	b1b9      	cbz	r1, 80123ea <__sflush_r+0xae>
 80123ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80123be:	4299      	cmp	r1, r3
 80123c0:	d002      	beq.n	80123c8 <__sflush_r+0x8c>
 80123c2:	4628      	mov	r0, r5
 80123c4:	f7fe fcdc 	bl	8010d80 <_free_r>
 80123c8:	2300      	movs	r3, #0
 80123ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80123cc:	e00d      	b.n	80123ea <__sflush_r+0xae>
 80123ce:	2301      	movs	r3, #1
 80123d0:	4628      	mov	r0, r5
 80123d2:	47b0      	blx	r6
 80123d4:	4602      	mov	r2, r0
 80123d6:	1c50      	adds	r0, r2, #1
 80123d8:	d1c9      	bne.n	801236e <__sflush_r+0x32>
 80123da:	682b      	ldr	r3, [r5, #0]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d0c6      	beq.n	801236e <__sflush_r+0x32>
 80123e0:	2b1d      	cmp	r3, #29
 80123e2:	d001      	beq.n	80123e8 <__sflush_r+0xac>
 80123e4:	2b16      	cmp	r3, #22
 80123e6:	d11e      	bne.n	8012426 <__sflush_r+0xea>
 80123e8:	602f      	str	r7, [r5, #0]
 80123ea:	2000      	movs	r0, #0
 80123ec:	e022      	b.n	8012434 <__sflush_r+0xf8>
 80123ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123f2:	b21b      	sxth	r3, r3
 80123f4:	e01b      	b.n	801242e <__sflush_r+0xf2>
 80123f6:	690f      	ldr	r7, [r1, #16]
 80123f8:	2f00      	cmp	r7, #0
 80123fa:	d0f6      	beq.n	80123ea <__sflush_r+0xae>
 80123fc:	0793      	lsls	r3, r2, #30
 80123fe:	680e      	ldr	r6, [r1, #0]
 8012400:	bf08      	it	eq
 8012402:	694b      	ldreq	r3, [r1, #20]
 8012404:	600f      	str	r7, [r1, #0]
 8012406:	bf18      	it	ne
 8012408:	2300      	movne	r3, #0
 801240a:	eba6 0807 	sub.w	r8, r6, r7
 801240e:	608b      	str	r3, [r1, #8]
 8012410:	f1b8 0f00 	cmp.w	r8, #0
 8012414:	dde9      	ble.n	80123ea <__sflush_r+0xae>
 8012416:	6a21      	ldr	r1, [r4, #32]
 8012418:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801241a:	4643      	mov	r3, r8
 801241c:	463a      	mov	r2, r7
 801241e:	4628      	mov	r0, r5
 8012420:	47b0      	blx	r6
 8012422:	2800      	cmp	r0, #0
 8012424:	dc08      	bgt.n	8012438 <__sflush_r+0xfc>
 8012426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801242a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801242e:	81a3      	strh	r3, [r4, #12]
 8012430:	f04f 30ff 	mov.w	r0, #4294967295
 8012434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012438:	4407      	add	r7, r0
 801243a:	eba8 0800 	sub.w	r8, r8, r0
 801243e:	e7e7      	b.n	8012410 <__sflush_r+0xd4>
 8012440:	dfbffffe 	.word	0xdfbffffe

08012444 <_fflush_r>:
 8012444:	b538      	push	{r3, r4, r5, lr}
 8012446:	690b      	ldr	r3, [r1, #16]
 8012448:	4605      	mov	r5, r0
 801244a:	460c      	mov	r4, r1
 801244c:	b913      	cbnz	r3, 8012454 <_fflush_r+0x10>
 801244e:	2500      	movs	r5, #0
 8012450:	4628      	mov	r0, r5
 8012452:	bd38      	pop	{r3, r4, r5, pc}
 8012454:	b118      	cbz	r0, 801245e <_fflush_r+0x1a>
 8012456:	6a03      	ldr	r3, [r0, #32]
 8012458:	b90b      	cbnz	r3, 801245e <_fflush_r+0x1a>
 801245a:	f7fd fcdb 	bl	800fe14 <__sinit>
 801245e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d0f3      	beq.n	801244e <_fflush_r+0xa>
 8012466:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012468:	07d0      	lsls	r0, r2, #31
 801246a:	d404      	bmi.n	8012476 <_fflush_r+0x32>
 801246c:	0599      	lsls	r1, r3, #22
 801246e:	d402      	bmi.n	8012476 <_fflush_r+0x32>
 8012470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012472:	f7fd fe18 	bl	80100a6 <__retarget_lock_acquire_recursive>
 8012476:	4628      	mov	r0, r5
 8012478:	4621      	mov	r1, r4
 801247a:	f7ff ff5f 	bl	801233c <__sflush_r>
 801247e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012480:	07da      	lsls	r2, r3, #31
 8012482:	4605      	mov	r5, r0
 8012484:	d4e4      	bmi.n	8012450 <_fflush_r+0xc>
 8012486:	89a3      	ldrh	r3, [r4, #12]
 8012488:	059b      	lsls	r3, r3, #22
 801248a:	d4e1      	bmi.n	8012450 <_fflush_r+0xc>
 801248c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801248e:	f7fd fe0b 	bl	80100a8 <__retarget_lock_release_recursive>
 8012492:	e7dd      	b.n	8012450 <_fflush_r+0xc>

08012494 <memmove>:
 8012494:	4288      	cmp	r0, r1
 8012496:	b510      	push	{r4, lr}
 8012498:	eb01 0402 	add.w	r4, r1, r2
 801249c:	d902      	bls.n	80124a4 <memmove+0x10>
 801249e:	4284      	cmp	r4, r0
 80124a0:	4623      	mov	r3, r4
 80124a2:	d807      	bhi.n	80124b4 <memmove+0x20>
 80124a4:	1e43      	subs	r3, r0, #1
 80124a6:	42a1      	cmp	r1, r4
 80124a8:	d008      	beq.n	80124bc <memmove+0x28>
 80124aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80124ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80124b2:	e7f8      	b.n	80124a6 <memmove+0x12>
 80124b4:	4402      	add	r2, r0
 80124b6:	4601      	mov	r1, r0
 80124b8:	428a      	cmp	r2, r1
 80124ba:	d100      	bne.n	80124be <memmove+0x2a>
 80124bc:	bd10      	pop	{r4, pc}
 80124be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80124c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80124c6:	e7f7      	b.n	80124b8 <memmove+0x24>

080124c8 <_sbrk_r>:
 80124c8:	b538      	push	{r3, r4, r5, lr}
 80124ca:	4d06      	ldr	r5, [pc, #24]	@ (80124e4 <_sbrk_r+0x1c>)
 80124cc:	2300      	movs	r3, #0
 80124ce:	4604      	mov	r4, r0
 80124d0:	4608      	mov	r0, r1
 80124d2:	602b      	str	r3, [r5, #0]
 80124d4:	f7ef fc2c 	bl	8001d30 <_sbrk>
 80124d8:	1c43      	adds	r3, r0, #1
 80124da:	d102      	bne.n	80124e2 <_sbrk_r+0x1a>
 80124dc:	682b      	ldr	r3, [r5, #0]
 80124de:	b103      	cbz	r3, 80124e2 <_sbrk_r+0x1a>
 80124e0:	6023      	str	r3, [r4, #0]
 80124e2:	bd38      	pop	{r3, r4, r5, pc}
 80124e4:	20000d5c 	.word	0x20000d5c

080124e8 <__assert_func>:
 80124e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80124ea:	4614      	mov	r4, r2
 80124ec:	461a      	mov	r2, r3
 80124ee:	4b09      	ldr	r3, [pc, #36]	@ (8012514 <__assert_func+0x2c>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	4605      	mov	r5, r0
 80124f4:	68d8      	ldr	r0, [r3, #12]
 80124f6:	b954      	cbnz	r4, 801250e <__assert_func+0x26>
 80124f8:	4b07      	ldr	r3, [pc, #28]	@ (8012518 <__assert_func+0x30>)
 80124fa:	461c      	mov	r4, r3
 80124fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012500:	9100      	str	r1, [sp, #0]
 8012502:	462b      	mov	r3, r5
 8012504:	4905      	ldr	r1, [pc, #20]	@ (801251c <__assert_func+0x34>)
 8012506:	f000 f84f 	bl	80125a8 <fiprintf>
 801250a:	f000 f85f 	bl	80125cc <abort>
 801250e:	4b04      	ldr	r3, [pc, #16]	@ (8012520 <__assert_func+0x38>)
 8012510:	e7f4      	b.n	80124fc <__assert_func+0x14>
 8012512:	bf00      	nop
 8012514:	2000021c 	.word	0x2000021c
 8012518:	08013f05 	.word	0x08013f05
 801251c:	08013ed7 	.word	0x08013ed7
 8012520:	08013eca 	.word	0x08013eca

08012524 <_calloc_r>:
 8012524:	b570      	push	{r4, r5, r6, lr}
 8012526:	fba1 5402 	umull	r5, r4, r1, r2
 801252a:	b93c      	cbnz	r4, 801253c <_calloc_r+0x18>
 801252c:	4629      	mov	r1, r5
 801252e:	f7fe ffd5 	bl	80114dc <_malloc_r>
 8012532:	4606      	mov	r6, r0
 8012534:	b928      	cbnz	r0, 8012542 <_calloc_r+0x1e>
 8012536:	2600      	movs	r6, #0
 8012538:	4630      	mov	r0, r6
 801253a:	bd70      	pop	{r4, r5, r6, pc}
 801253c:	220c      	movs	r2, #12
 801253e:	6002      	str	r2, [r0, #0]
 8012540:	e7f9      	b.n	8012536 <_calloc_r+0x12>
 8012542:	462a      	mov	r2, r5
 8012544:	4621      	mov	r1, r4
 8012546:	f7fd fd1f 	bl	800ff88 <memset>
 801254a:	e7f5      	b.n	8012538 <_calloc_r+0x14>

0801254c <_realloc_r>:
 801254c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012550:	4680      	mov	r8, r0
 8012552:	4615      	mov	r5, r2
 8012554:	460c      	mov	r4, r1
 8012556:	b921      	cbnz	r1, 8012562 <_realloc_r+0x16>
 8012558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801255c:	4611      	mov	r1, r2
 801255e:	f7fe bfbd 	b.w	80114dc <_malloc_r>
 8012562:	b92a      	cbnz	r2, 8012570 <_realloc_r+0x24>
 8012564:	f7fe fc0c 	bl	8010d80 <_free_r>
 8012568:	2400      	movs	r4, #0
 801256a:	4620      	mov	r0, r4
 801256c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012570:	f000 f833 	bl	80125da <_malloc_usable_size_r>
 8012574:	4285      	cmp	r5, r0
 8012576:	4606      	mov	r6, r0
 8012578:	d802      	bhi.n	8012580 <_realloc_r+0x34>
 801257a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801257e:	d8f4      	bhi.n	801256a <_realloc_r+0x1e>
 8012580:	4629      	mov	r1, r5
 8012582:	4640      	mov	r0, r8
 8012584:	f7fe ffaa 	bl	80114dc <_malloc_r>
 8012588:	4607      	mov	r7, r0
 801258a:	2800      	cmp	r0, #0
 801258c:	d0ec      	beq.n	8012568 <_realloc_r+0x1c>
 801258e:	42b5      	cmp	r5, r6
 8012590:	462a      	mov	r2, r5
 8012592:	4621      	mov	r1, r4
 8012594:	bf28      	it	cs
 8012596:	4632      	movcs	r2, r6
 8012598:	f7fd fd87 	bl	80100aa <memcpy>
 801259c:	4621      	mov	r1, r4
 801259e:	4640      	mov	r0, r8
 80125a0:	f7fe fbee 	bl	8010d80 <_free_r>
 80125a4:	463c      	mov	r4, r7
 80125a6:	e7e0      	b.n	801256a <_realloc_r+0x1e>

080125a8 <fiprintf>:
 80125a8:	b40e      	push	{r1, r2, r3}
 80125aa:	b503      	push	{r0, r1, lr}
 80125ac:	4601      	mov	r1, r0
 80125ae:	ab03      	add	r3, sp, #12
 80125b0:	4805      	ldr	r0, [pc, #20]	@ (80125c8 <fiprintf+0x20>)
 80125b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80125b6:	6800      	ldr	r0, [r0, #0]
 80125b8:	9301      	str	r3, [sp, #4]
 80125ba:	f000 f83f 	bl	801263c <_vfiprintf_r>
 80125be:	b002      	add	sp, #8
 80125c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80125c4:	b003      	add	sp, #12
 80125c6:	4770      	bx	lr
 80125c8:	2000021c 	.word	0x2000021c

080125cc <abort>:
 80125cc:	b508      	push	{r3, lr}
 80125ce:	2006      	movs	r0, #6
 80125d0:	f000 fa08 	bl	80129e4 <raise>
 80125d4:	2001      	movs	r0, #1
 80125d6:	f7ef fb33 	bl	8001c40 <_exit>

080125da <_malloc_usable_size_r>:
 80125da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125de:	1f18      	subs	r0, r3, #4
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	bfbc      	itt	lt
 80125e4:	580b      	ldrlt	r3, [r1, r0]
 80125e6:	18c0      	addlt	r0, r0, r3
 80125e8:	4770      	bx	lr

080125ea <__sfputc_r>:
 80125ea:	6893      	ldr	r3, [r2, #8]
 80125ec:	3b01      	subs	r3, #1
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	b410      	push	{r4}
 80125f2:	6093      	str	r3, [r2, #8]
 80125f4:	da08      	bge.n	8012608 <__sfputc_r+0x1e>
 80125f6:	6994      	ldr	r4, [r2, #24]
 80125f8:	42a3      	cmp	r3, r4
 80125fa:	db01      	blt.n	8012600 <__sfputc_r+0x16>
 80125fc:	290a      	cmp	r1, #10
 80125fe:	d103      	bne.n	8012608 <__sfputc_r+0x1e>
 8012600:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012604:	f000 b932 	b.w	801286c <__swbuf_r>
 8012608:	6813      	ldr	r3, [r2, #0]
 801260a:	1c58      	adds	r0, r3, #1
 801260c:	6010      	str	r0, [r2, #0]
 801260e:	7019      	strb	r1, [r3, #0]
 8012610:	4608      	mov	r0, r1
 8012612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012616:	4770      	bx	lr

08012618 <__sfputs_r>:
 8012618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801261a:	4606      	mov	r6, r0
 801261c:	460f      	mov	r7, r1
 801261e:	4614      	mov	r4, r2
 8012620:	18d5      	adds	r5, r2, r3
 8012622:	42ac      	cmp	r4, r5
 8012624:	d101      	bne.n	801262a <__sfputs_r+0x12>
 8012626:	2000      	movs	r0, #0
 8012628:	e007      	b.n	801263a <__sfputs_r+0x22>
 801262a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801262e:	463a      	mov	r2, r7
 8012630:	4630      	mov	r0, r6
 8012632:	f7ff ffda 	bl	80125ea <__sfputc_r>
 8012636:	1c43      	adds	r3, r0, #1
 8012638:	d1f3      	bne.n	8012622 <__sfputs_r+0xa>
 801263a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801263c <_vfiprintf_r>:
 801263c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012640:	460d      	mov	r5, r1
 8012642:	b09d      	sub	sp, #116	@ 0x74
 8012644:	4614      	mov	r4, r2
 8012646:	4698      	mov	r8, r3
 8012648:	4606      	mov	r6, r0
 801264a:	b118      	cbz	r0, 8012654 <_vfiprintf_r+0x18>
 801264c:	6a03      	ldr	r3, [r0, #32]
 801264e:	b90b      	cbnz	r3, 8012654 <_vfiprintf_r+0x18>
 8012650:	f7fd fbe0 	bl	800fe14 <__sinit>
 8012654:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012656:	07d9      	lsls	r1, r3, #31
 8012658:	d405      	bmi.n	8012666 <_vfiprintf_r+0x2a>
 801265a:	89ab      	ldrh	r3, [r5, #12]
 801265c:	059a      	lsls	r2, r3, #22
 801265e:	d402      	bmi.n	8012666 <_vfiprintf_r+0x2a>
 8012660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012662:	f7fd fd20 	bl	80100a6 <__retarget_lock_acquire_recursive>
 8012666:	89ab      	ldrh	r3, [r5, #12]
 8012668:	071b      	lsls	r3, r3, #28
 801266a:	d501      	bpl.n	8012670 <_vfiprintf_r+0x34>
 801266c:	692b      	ldr	r3, [r5, #16]
 801266e:	b99b      	cbnz	r3, 8012698 <_vfiprintf_r+0x5c>
 8012670:	4629      	mov	r1, r5
 8012672:	4630      	mov	r0, r6
 8012674:	f000 f938 	bl	80128e8 <__swsetup_r>
 8012678:	b170      	cbz	r0, 8012698 <_vfiprintf_r+0x5c>
 801267a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801267c:	07dc      	lsls	r4, r3, #31
 801267e:	d504      	bpl.n	801268a <_vfiprintf_r+0x4e>
 8012680:	f04f 30ff 	mov.w	r0, #4294967295
 8012684:	b01d      	add	sp, #116	@ 0x74
 8012686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801268a:	89ab      	ldrh	r3, [r5, #12]
 801268c:	0598      	lsls	r0, r3, #22
 801268e:	d4f7      	bmi.n	8012680 <_vfiprintf_r+0x44>
 8012690:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012692:	f7fd fd09 	bl	80100a8 <__retarget_lock_release_recursive>
 8012696:	e7f3      	b.n	8012680 <_vfiprintf_r+0x44>
 8012698:	2300      	movs	r3, #0
 801269a:	9309      	str	r3, [sp, #36]	@ 0x24
 801269c:	2320      	movs	r3, #32
 801269e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80126a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80126a6:	2330      	movs	r3, #48	@ 0x30
 80126a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012858 <_vfiprintf_r+0x21c>
 80126ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80126b0:	f04f 0901 	mov.w	r9, #1
 80126b4:	4623      	mov	r3, r4
 80126b6:	469a      	mov	sl, r3
 80126b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126bc:	b10a      	cbz	r2, 80126c2 <_vfiprintf_r+0x86>
 80126be:	2a25      	cmp	r2, #37	@ 0x25
 80126c0:	d1f9      	bne.n	80126b6 <_vfiprintf_r+0x7a>
 80126c2:	ebba 0b04 	subs.w	fp, sl, r4
 80126c6:	d00b      	beq.n	80126e0 <_vfiprintf_r+0xa4>
 80126c8:	465b      	mov	r3, fp
 80126ca:	4622      	mov	r2, r4
 80126cc:	4629      	mov	r1, r5
 80126ce:	4630      	mov	r0, r6
 80126d0:	f7ff ffa2 	bl	8012618 <__sfputs_r>
 80126d4:	3001      	adds	r0, #1
 80126d6:	f000 80a7 	beq.w	8012828 <_vfiprintf_r+0x1ec>
 80126da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80126dc:	445a      	add	r2, fp
 80126de:	9209      	str	r2, [sp, #36]	@ 0x24
 80126e0:	f89a 3000 	ldrb.w	r3, [sl]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	f000 809f 	beq.w	8012828 <_vfiprintf_r+0x1ec>
 80126ea:	2300      	movs	r3, #0
 80126ec:	f04f 32ff 	mov.w	r2, #4294967295
 80126f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126f4:	f10a 0a01 	add.w	sl, sl, #1
 80126f8:	9304      	str	r3, [sp, #16]
 80126fa:	9307      	str	r3, [sp, #28]
 80126fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012700:	931a      	str	r3, [sp, #104]	@ 0x68
 8012702:	4654      	mov	r4, sl
 8012704:	2205      	movs	r2, #5
 8012706:	f814 1b01 	ldrb.w	r1, [r4], #1
 801270a:	4853      	ldr	r0, [pc, #332]	@ (8012858 <_vfiprintf_r+0x21c>)
 801270c:	f7ed fd88 	bl	8000220 <memchr>
 8012710:	9a04      	ldr	r2, [sp, #16]
 8012712:	b9d8      	cbnz	r0, 801274c <_vfiprintf_r+0x110>
 8012714:	06d1      	lsls	r1, r2, #27
 8012716:	bf44      	itt	mi
 8012718:	2320      	movmi	r3, #32
 801271a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801271e:	0713      	lsls	r3, r2, #28
 8012720:	bf44      	itt	mi
 8012722:	232b      	movmi	r3, #43	@ 0x2b
 8012724:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012728:	f89a 3000 	ldrb.w	r3, [sl]
 801272c:	2b2a      	cmp	r3, #42	@ 0x2a
 801272e:	d015      	beq.n	801275c <_vfiprintf_r+0x120>
 8012730:	9a07      	ldr	r2, [sp, #28]
 8012732:	4654      	mov	r4, sl
 8012734:	2000      	movs	r0, #0
 8012736:	f04f 0c0a 	mov.w	ip, #10
 801273a:	4621      	mov	r1, r4
 801273c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012740:	3b30      	subs	r3, #48	@ 0x30
 8012742:	2b09      	cmp	r3, #9
 8012744:	d94b      	bls.n	80127de <_vfiprintf_r+0x1a2>
 8012746:	b1b0      	cbz	r0, 8012776 <_vfiprintf_r+0x13a>
 8012748:	9207      	str	r2, [sp, #28]
 801274a:	e014      	b.n	8012776 <_vfiprintf_r+0x13a>
 801274c:	eba0 0308 	sub.w	r3, r0, r8
 8012750:	fa09 f303 	lsl.w	r3, r9, r3
 8012754:	4313      	orrs	r3, r2
 8012756:	9304      	str	r3, [sp, #16]
 8012758:	46a2      	mov	sl, r4
 801275a:	e7d2      	b.n	8012702 <_vfiprintf_r+0xc6>
 801275c:	9b03      	ldr	r3, [sp, #12]
 801275e:	1d19      	adds	r1, r3, #4
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	9103      	str	r1, [sp, #12]
 8012764:	2b00      	cmp	r3, #0
 8012766:	bfbb      	ittet	lt
 8012768:	425b      	neglt	r3, r3
 801276a:	f042 0202 	orrlt.w	r2, r2, #2
 801276e:	9307      	strge	r3, [sp, #28]
 8012770:	9307      	strlt	r3, [sp, #28]
 8012772:	bfb8      	it	lt
 8012774:	9204      	strlt	r2, [sp, #16]
 8012776:	7823      	ldrb	r3, [r4, #0]
 8012778:	2b2e      	cmp	r3, #46	@ 0x2e
 801277a:	d10a      	bne.n	8012792 <_vfiprintf_r+0x156>
 801277c:	7863      	ldrb	r3, [r4, #1]
 801277e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012780:	d132      	bne.n	80127e8 <_vfiprintf_r+0x1ac>
 8012782:	9b03      	ldr	r3, [sp, #12]
 8012784:	1d1a      	adds	r2, r3, #4
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	9203      	str	r2, [sp, #12]
 801278a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801278e:	3402      	adds	r4, #2
 8012790:	9305      	str	r3, [sp, #20]
 8012792:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012868 <_vfiprintf_r+0x22c>
 8012796:	7821      	ldrb	r1, [r4, #0]
 8012798:	2203      	movs	r2, #3
 801279a:	4650      	mov	r0, sl
 801279c:	f7ed fd40 	bl	8000220 <memchr>
 80127a0:	b138      	cbz	r0, 80127b2 <_vfiprintf_r+0x176>
 80127a2:	9b04      	ldr	r3, [sp, #16]
 80127a4:	eba0 000a 	sub.w	r0, r0, sl
 80127a8:	2240      	movs	r2, #64	@ 0x40
 80127aa:	4082      	lsls	r2, r0
 80127ac:	4313      	orrs	r3, r2
 80127ae:	3401      	adds	r4, #1
 80127b0:	9304      	str	r3, [sp, #16]
 80127b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127b6:	4829      	ldr	r0, [pc, #164]	@ (801285c <_vfiprintf_r+0x220>)
 80127b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80127bc:	2206      	movs	r2, #6
 80127be:	f7ed fd2f 	bl	8000220 <memchr>
 80127c2:	2800      	cmp	r0, #0
 80127c4:	d03f      	beq.n	8012846 <_vfiprintf_r+0x20a>
 80127c6:	4b26      	ldr	r3, [pc, #152]	@ (8012860 <_vfiprintf_r+0x224>)
 80127c8:	bb1b      	cbnz	r3, 8012812 <_vfiprintf_r+0x1d6>
 80127ca:	9b03      	ldr	r3, [sp, #12]
 80127cc:	3307      	adds	r3, #7
 80127ce:	f023 0307 	bic.w	r3, r3, #7
 80127d2:	3308      	adds	r3, #8
 80127d4:	9303      	str	r3, [sp, #12]
 80127d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127d8:	443b      	add	r3, r7
 80127da:	9309      	str	r3, [sp, #36]	@ 0x24
 80127dc:	e76a      	b.n	80126b4 <_vfiprintf_r+0x78>
 80127de:	fb0c 3202 	mla	r2, ip, r2, r3
 80127e2:	460c      	mov	r4, r1
 80127e4:	2001      	movs	r0, #1
 80127e6:	e7a8      	b.n	801273a <_vfiprintf_r+0xfe>
 80127e8:	2300      	movs	r3, #0
 80127ea:	3401      	adds	r4, #1
 80127ec:	9305      	str	r3, [sp, #20]
 80127ee:	4619      	mov	r1, r3
 80127f0:	f04f 0c0a 	mov.w	ip, #10
 80127f4:	4620      	mov	r0, r4
 80127f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127fa:	3a30      	subs	r2, #48	@ 0x30
 80127fc:	2a09      	cmp	r2, #9
 80127fe:	d903      	bls.n	8012808 <_vfiprintf_r+0x1cc>
 8012800:	2b00      	cmp	r3, #0
 8012802:	d0c6      	beq.n	8012792 <_vfiprintf_r+0x156>
 8012804:	9105      	str	r1, [sp, #20]
 8012806:	e7c4      	b.n	8012792 <_vfiprintf_r+0x156>
 8012808:	fb0c 2101 	mla	r1, ip, r1, r2
 801280c:	4604      	mov	r4, r0
 801280e:	2301      	movs	r3, #1
 8012810:	e7f0      	b.n	80127f4 <_vfiprintf_r+0x1b8>
 8012812:	ab03      	add	r3, sp, #12
 8012814:	9300      	str	r3, [sp, #0]
 8012816:	462a      	mov	r2, r5
 8012818:	4b12      	ldr	r3, [pc, #72]	@ (8012864 <_vfiprintf_r+0x228>)
 801281a:	a904      	add	r1, sp, #16
 801281c:	4630      	mov	r0, r6
 801281e:	f7fc fca1 	bl	800f164 <_printf_float>
 8012822:	4607      	mov	r7, r0
 8012824:	1c78      	adds	r0, r7, #1
 8012826:	d1d6      	bne.n	80127d6 <_vfiprintf_r+0x19a>
 8012828:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801282a:	07d9      	lsls	r1, r3, #31
 801282c:	d405      	bmi.n	801283a <_vfiprintf_r+0x1fe>
 801282e:	89ab      	ldrh	r3, [r5, #12]
 8012830:	059a      	lsls	r2, r3, #22
 8012832:	d402      	bmi.n	801283a <_vfiprintf_r+0x1fe>
 8012834:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012836:	f7fd fc37 	bl	80100a8 <__retarget_lock_release_recursive>
 801283a:	89ab      	ldrh	r3, [r5, #12]
 801283c:	065b      	lsls	r3, r3, #25
 801283e:	f53f af1f 	bmi.w	8012680 <_vfiprintf_r+0x44>
 8012842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012844:	e71e      	b.n	8012684 <_vfiprintf_r+0x48>
 8012846:	ab03      	add	r3, sp, #12
 8012848:	9300      	str	r3, [sp, #0]
 801284a:	462a      	mov	r2, r5
 801284c:	4b05      	ldr	r3, [pc, #20]	@ (8012864 <_vfiprintf_r+0x228>)
 801284e:	a904      	add	r1, sp, #16
 8012850:	4630      	mov	r0, r6
 8012852:	f7fc ff1f 	bl	800f694 <_printf_i>
 8012856:	e7e4      	b.n	8012822 <_vfiprintf_r+0x1e6>
 8012858:	08013eb9 	.word	0x08013eb9
 801285c:	08013ec3 	.word	0x08013ec3
 8012860:	0800f165 	.word	0x0800f165
 8012864:	08012619 	.word	0x08012619
 8012868:	08013ebf 	.word	0x08013ebf

0801286c <__swbuf_r>:
 801286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801286e:	460e      	mov	r6, r1
 8012870:	4614      	mov	r4, r2
 8012872:	4605      	mov	r5, r0
 8012874:	b118      	cbz	r0, 801287e <__swbuf_r+0x12>
 8012876:	6a03      	ldr	r3, [r0, #32]
 8012878:	b90b      	cbnz	r3, 801287e <__swbuf_r+0x12>
 801287a:	f7fd facb 	bl	800fe14 <__sinit>
 801287e:	69a3      	ldr	r3, [r4, #24]
 8012880:	60a3      	str	r3, [r4, #8]
 8012882:	89a3      	ldrh	r3, [r4, #12]
 8012884:	071a      	lsls	r2, r3, #28
 8012886:	d501      	bpl.n	801288c <__swbuf_r+0x20>
 8012888:	6923      	ldr	r3, [r4, #16]
 801288a:	b943      	cbnz	r3, 801289e <__swbuf_r+0x32>
 801288c:	4621      	mov	r1, r4
 801288e:	4628      	mov	r0, r5
 8012890:	f000 f82a 	bl	80128e8 <__swsetup_r>
 8012894:	b118      	cbz	r0, 801289e <__swbuf_r+0x32>
 8012896:	f04f 37ff 	mov.w	r7, #4294967295
 801289a:	4638      	mov	r0, r7
 801289c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801289e:	6823      	ldr	r3, [r4, #0]
 80128a0:	6922      	ldr	r2, [r4, #16]
 80128a2:	1a98      	subs	r0, r3, r2
 80128a4:	6963      	ldr	r3, [r4, #20]
 80128a6:	b2f6      	uxtb	r6, r6
 80128a8:	4283      	cmp	r3, r0
 80128aa:	4637      	mov	r7, r6
 80128ac:	dc05      	bgt.n	80128ba <__swbuf_r+0x4e>
 80128ae:	4621      	mov	r1, r4
 80128b0:	4628      	mov	r0, r5
 80128b2:	f7ff fdc7 	bl	8012444 <_fflush_r>
 80128b6:	2800      	cmp	r0, #0
 80128b8:	d1ed      	bne.n	8012896 <__swbuf_r+0x2a>
 80128ba:	68a3      	ldr	r3, [r4, #8]
 80128bc:	3b01      	subs	r3, #1
 80128be:	60a3      	str	r3, [r4, #8]
 80128c0:	6823      	ldr	r3, [r4, #0]
 80128c2:	1c5a      	adds	r2, r3, #1
 80128c4:	6022      	str	r2, [r4, #0]
 80128c6:	701e      	strb	r6, [r3, #0]
 80128c8:	6962      	ldr	r2, [r4, #20]
 80128ca:	1c43      	adds	r3, r0, #1
 80128cc:	429a      	cmp	r2, r3
 80128ce:	d004      	beq.n	80128da <__swbuf_r+0x6e>
 80128d0:	89a3      	ldrh	r3, [r4, #12]
 80128d2:	07db      	lsls	r3, r3, #31
 80128d4:	d5e1      	bpl.n	801289a <__swbuf_r+0x2e>
 80128d6:	2e0a      	cmp	r6, #10
 80128d8:	d1df      	bne.n	801289a <__swbuf_r+0x2e>
 80128da:	4621      	mov	r1, r4
 80128dc:	4628      	mov	r0, r5
 80128de:	f7ff fdb1 	bl	8012444 <_fflush_r>
 80128e2:	2800      	cmp	r0, #0
 80128e4:	d0d9      	beq.n	801289a <__swbuf_r+0x2e>
 80128e6:	e7d6      	b.n	8012896 <__swbuf_r+0x2a>

080128e8 <__swsetup_r>:
 80128e8:	b538      	push	{r3, r4, r5, lr}
 80128ea:	4b29      	ldr	r3, [pc, #164]	@ (8012990 <__swsetup_r+0xa8>)
 80128ec:	4605      	mov	r5, r0
 80128ee:	6818      	ldr	r0, [r3, #0]
 80128f0:	460c      	mov	r4, r1
 80128f2:	b118      	cbz	r0, 80128fc <__swsetup_r+0x14>
 80128f4:	6a03      	ldr	r3, [r0, #32]
 80128f6:	b90b      	cbnz	r3, 80128fc <__swsetup_r+0x14>
 80128f8:	f7fd fa8c 	bl	800fe14 <__sinit>
 80128fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012900:	0719      	lsls	r1, r3, #28
 8012902:	d422      	bmi.n	801294a <__swsetup_r+0x62>
 8012904:	06da      	lsls	r2, r3, #27
 8012906:	d407      	bmi.n	8012918 <__swsetup_r+0x30>
 8012908:	2209      	movs	r2, #9
 801290a:	602a      	str	r2, [r5, #0]
 801290c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012910:	81a3      	strh	r3, [r4, #12]
 8012912:	f04f 30ff 	mov.w	r0, #4294967295
 8012916:	e033      	b.n	8012980 <__swsetup_r+0x98>
 8012918:	0758      	lsls	r0, r3, #29
 801291a:	d512      	bpl.n	8012942 <__swsetup_r+0x5a>
 801291c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801291e:	b141      	cbz	r1, 8012932 <__swsetup_r+0x4a>
 8012920:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012924:	4299      	cmp	r1, r3
 8012926:	d002      	beq.n	801292e <__swsetup_r+0x46>
 8012928:	4628      	mov	r0, r5
 801292a:	f7fe fa29 	bl	8010d80 <_free_r>
 801292e:	2300      	movs	r3, #0
 8012930:	6363      	str	r3, [r4, #52]	@ 0x34
 8012932:	89a3      	ldrh	r3, [r4, #12]
 8012934:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012938:	81a3      	strh	r3, [r4, #12]
 801293a:	2300      	movs	r3, #0
 801293c:	6063      	str	r3, [r4, #4]
 801293e:	6923      	ldr	r3, [r4, #16]
 8012940:	6023      	str	r3, [r4, #0]
 8012942:	89a3      	ldrh	r3, [r4, #12]
 8012944:	f043 0308 	orr.w	r3, r3, #8
 8012948:	81a3      	strh	r3, [r4, #12]
 801294a:	6923      	ldr	r3, [r4, #16]
 801294c:	b94b      	cbnz	r3, 8012962 <__swsetup_r+0x7a>
 801294e:	89a3      	ldrh	r3, [r4, #12]
 8012950:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012954:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012958:	d003      	beq.n	8012962 <__swsetup_r+0x7a>
 801295a:	4621      	mov	r1, r4
 801295c:	4628      	mov	r0, r5
 801295e:	f000 f883 	bl	8012a68 <__smakebuf_r>
 8012962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012966:	f013 0201 	ands.w	r2, r3, #1
 801296a:	d00a      	beq.n	8012982 <__swsetup_r+0x9a>
 801296c:	2200      	movs	r2, #0
 801296e:	60a2      	str	r2, [r4, #8]
 8012970:	6962      	ldr	r2, [r4, #20]
 8012972:	4252      	negs	r2, r2
 8012974:	61a2      	str	r2, [r4, #24]
 8012976:	6922      	ldr	r2, [r4, #16]
 8012978:	b942      	cbnz	r2, 801298c <__swsetup_r+0xa4>
 801297a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801297e:	d1c5      	bne.n	801290c <__swsetup_r+0x24>
 8012980:	bd38      	pop	{r3, r4, r5, pc}
 8012982:	0799      	lsls	r1, r3, #30
 8012984:	bf58      	it	pl
 8012986:	6962      	ldrpl	r2, [r4, #20]
 8012988:	60a2      	str	r2, [r4, #8]
 801298a:	e7f4      	b.n	8012976 <__swsetup_r+0x8e>
 801298c:	2000      	movs	r0, #0
 801298e:	e7f7      	b.n	8012980 <__swsetup_r+0x98>
 8012990:	2000021c 	.word	0x2000021c

08012994 <_raise_r>:
 8012994:	291f      	cmp	r1, #31
 8012996:	b538      	push	{r3, r4, r5, lr}
 8012998:	4605      	mov	r5, r0
 801299a:	460c      	mov	r4, r1
 801299c:	d904      	bls.n	80129a8 <_raise_r+0x14>
 801299e:	2316      	movs	r3, #22
 80129a0:	6003      	str	r3, [r0, #0]
 80129a2:	f04f 30ff 	mov.w	r0, #4294967295
 80129a6:	bd38      	pop	{r3, r4, r5, pc}
 80129a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80129aa:	b112      	cbz	r2, 80129b2 <_raise_r+0x1e>
 80129ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80129b0:	b94b      	cbnz	r3, 80129c6 <_raise_r+0x32>
 80129b2:	4628      	mov	r0, r5
 80129b4:	f000 f830 	bl	8012a18 <_getpid_r>
 80129b8:	4622      	mov	r2, r4
 80129ba:	4601      	mov	r1, r0
 80129bc:	4628      	mov	r0, r5
 80129be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129c2:	f000 b817 	b.w	80129f4 <_kill_r>
 80129c6:	2b01      	cmp	r3, #1
 80129c8:	d00a      	beq.n	80129e0 <_raise_r+0x4c>
 80129ca:	1c59      	adds	r1, r3, #1
 80129cc:	d103      	bne.n	80129d6 <_raise_r+0x42>
 80129ce:	2316      	movs	r3, #22
 80129d0:	6003      	str	r3, [r0, #0]
 80129d2:	2001      	movs	r0, #1
 80129d4:	e7e7      	b.n	80129a6 <_raise_r+0x12>
 80129d6:	2100      	movs	r1, #0
 80129d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80129dc:	4620      	mov	r0, r4
 80129de:	4798      	blx	r3
 80129e0:	2000      	movs	r0, #0
 80129e2:	e7e0      	b.n	80129a6 <_raise_r+0x12>

080129e4 <raise>:
 80129e4:	4b02      	ldr	r3, [pc, #8]	@ (80129f0 <raise+0xc>)
 80129e6:	4601      	mov	r1, r0
 80129e8:	6818      	ldr	r0, [r3, #0]
 80129ea:	f7ff bfd3 	b.w	8012994 <_raise_r>
 80129ee:	bf00      	nop
 80129f0:	2000021c 	.word	0x2000021c

080129f4 <_kill_r>:
 80129f4:	b538      	push	{r3, r4, r5, lr}
 80129f6:	4d07      	ldr	r5, [pc, #28]	@ (8012a14 <_kill_r+0x20>)
 80129f8:	2300      	movs	r3, #0
 80129fa:	4604      	mov	r4, r0
 80129fc:	4608      	mov	r0, r1
 80129fe:	4611      	mov	r1, r2
 8012a00:	602b      	str	r3, [r5, #0]
 8012a02:	f7ef f90d 	bl	8001c20 <_kill>
 8012a06:	1c43      	adds	r3, r0, #1
 8012a08:	d102      	bne.n	8012a10 <_kill_r+0x1c>
 8012a0a:	682b      	ldr	r3, [r5, #0]
 8012a0c:	b103      	cbz	r3, 8012a10 <_kill_r+0x1c>
 8012a0e:	6023      	str	r3, [r4, #0]
 8012a10:	bd38      	pop	{r3, r4, r5, pc}
 8012a12:	bf00      	nop
 8012a14:	20000d5c 	.word	0x20000d5c

08012a18 <_getpid_r>:
 8012a18:	f7ef b8fa 	b.w	8001c10 <_getpid>

08012a1c <__swhatbuf_r>:
 8012a1c:	b570      	push	{r4, r5, r6, lr}
 8012a1e:	460c      	mov	r4, r1
 8012a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a24:	2900      	cmp	r1, #0
 8012a26:	b096      	sub	sp, #88	@ 0x58
 8012a28:	4615      	mov	r5, r2
 8012a2a:	461e      	mov	r6, r3
 8012a2c:	da0d      	bge.n	8012a4a <__swhatbuf_r+0x2e>
 8012a2e:	89a3      	ldrh	r3, [r4, #12]
 8012a30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012a34:	f04f 0100 	mov.w	r1, #0
 8012a38:	bf14      	ite	ne
 8012a3a:	2340      	movne	r3, #64	@ 0x40
 8012a3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012a40:	2000      	movs	r0, #0
 8012a42:	6031      	str	r1, [r6, #0]
 8012a44:	602b      	str	r3, [r5, #0]
 8012a46:	b016      	add	sp, #88	@ 0x58
 8012a48:	bd70      	pop	{r4, r5, r6, pc}
 8012a4a:	466a      	mov	r2, sp
 8012a4c:	f000 f848 	bl	8012ae0 <_fstat_r>
 8012a50:	2800      	cmp	r0, #0
 8012a52:	dbec      	blt.n	8012a2e <__swhatbuf_r+0x12>
 8012a54:	9901      	ldr	r1, [sp, #4]
 8012a56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012a5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012a5e:	4259      	negs	r1, r3
 8012a60:	4159      	adcs	r1, r3
 8012a62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012a66:	e7eb      	b.n	8012a40 <__swhatbuf_r+0x24>

08012a68 <__smakebuf_r>:
 8012a68:	898b      	ldrh	r3, [r1, #12]
 8012a6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a6c:	079d      	lsls	r5, r3, #30
 8012a6e:	4606      	mov	r6, r0
 8012a70:	460c      	mov	r4, r1
 8012a72:	d507      	bpl.n	8012a84 <__smakebuf_r+0x1c>
 8012a74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012a78:	6023      	str	r3, [r4, #0]
 8012a7a:	6123      	str	r3, [r4, #16]
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	6163      	str	r3, [r4, #20]
 8012a80:	b003      	add	sp, #12
 8012a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a84:	ab01      	add	r3, sp, #4
 8012a86:	466a      	mov	r2, sp
 8012a88:	f7ff ffc8 	bl	8012a1c <__swhatbuf_r>
 8012a8c:	9f00      	ldr	r7, [sp, #0]
 8012a8e:	4605      	mov	r5, r0
 8012a90:	4639      	mov	r1, r7
 8012a92:	4630      	mov	r0, r6
 8012a94:	f7fe fd22 	bl	80114dc <_malloc_r>
 8012a98:	b948      	cbnz	r0, 8012aae <__smakebuf_r+0x46>
 8012a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a9e:	059a      	lsls	r2, r3, #22
 8012aa0:	d4ee      	bmi.n	8012a80 <__smakebuf_r+0x18>
 8012aa2:	f023 0303 	bic.w	r3, r3, #3
 8012aa6:	f043 0302 	orr.w	r3, r3, #2
 8012aaa:	81a3      	strh	r3, [r4, #12]
 8012aac:	e7e2      	b.n	8012a74 <__smakebuf_r+0xc>
 8012aae:	89a3      	ldrh	r3, [r4, #12]
 8012ab0:	6020      	str	r0, [r4, #0]
 8012ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ab6:	81a3      	strh	r3, [r4, #12]
 8012ab8:	9b01      	ldr	r3, [sp, #4]
 8012aba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012abe:	b15b      	cbz	r3, 8012ad8 <__smakebuf_r+0x70>
 8012ac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ac4:	4630      	mov	r0, r6
 8012ac6:	f000 f81d 	bl	8012b04 <_isatty_r>
 8012aca:	b128      	cbz	r0, 8012ad8 <__smakebuf_r+0x70>
 8012acc:	89a3      	ldrh	r3, [r4, #12]
 8012ace:	f023 0303 	bic.w	r3, r3, #3
 8012ad2:	f043 0301 	orr.w	r3, r3, #1
 8012ad6:	81a3      	strh	r3, [r4, #12]
 8012ad8:	89a3      	ldrh	r3, [r4, #12]
 8012ada:	431d      	orrs	r5, r3
 8012adc:	81a5      	strh	r5, [r4, #12]
 8012ade:	e7cf      	b.n	8012a80 <__smakebuf_r+0x18>

08012ae0 <_fstat_r>:
 8012ae0:	b538      	push	{r3, r4, r5, lr}
 8012ae2:	4d07      	ldr	r5, [pc, #28]	@ (8012b00 <_fstat_r+0x20>)
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	4604      	mov	r4, r0
 8012ae8:	4608      	mov	r0, r1
 8012aea:	4611      	mov	r1, r2
 8012aec:	602b      	str	r3, [r5, #0]
 8012aee:	f7ef f8f7 	bl	8001ce0 <_fstat>
 8012af2:	1c43      	adds	r3, r0, #1
 8012af4:	d102      	bne.n	8012afc <_fstat_r+0x1c>
 8012af6:	682b      	ldr	r3, [r5, #0]
 8012af8:	b103      	cbz	r3, 8012afc <_fstat_r+0x1c>
 8012afa:	6023      	str	r3, [r4, #0]
 8012afc:	bd38      	pop	{r3, r4, r5, pc}
 8012afe:	bf00      	nop
 8012b00:	20000d5c 	.word	0x20000d5c

08012b04 <_isatty_r>:
 8012b04:	b538      	push	{r3, r4, r5, lr}
 8012b06:	4d06      	ldr	r5, [pc, #24]	@ (8012b20 <_isatty_r+0x1c>)
 8012b08:	2300      	movs	r3, #0
 8012b0a:	4604      	mov	r4, r0
 8012b0c:	4608      	mov	r0, r1
 8012b0e:	602b      	str	r3, [r5, #0]
 8012b10:	f7ef f8f6 	bl	8001d00 <_isatty>
 8012b14:	1c43      	adds	r3, r0, #1
 8012b16:	d102      	bne.n	8012b1e <_isatty_r+0x1a>
 8012b18:	682b      	ldr	r3, [r5, #0]
 8012b1a:	b103      	cbz	r3, 8012b1e <_isatty_r+0x1a>
 8012b1c:	6023      	str	r3, [r4, #0]
 8012b1e:	bd38      	pop	{r3, r4, r5, pc}
 8012b20:	20000d5c 	.word	0x20000d5c

08012b24 <asin>:
 8012b24:	b538      	push	{r3, r4, r5, lr}
 8012b26:	ed2d 8b02 	vpush	{d8}
 8012b2a:	ec55 4b10 	vmov	r4, r5, d0
 8012b2e:	f000 f96b 	bl	8012e08 <__ieee754_asin>
 8012b32:	4622      	mov	r2, r4
 8012b34:	462b      	mov	r3, r5
 8012b36:	4620      	mov	r0, r4
 8012b38:	4629      	mov	r1, r5
 8012b3a:	eeb0 8a40 	vmov.f32	s16, s0
 8012b3e:	eef0 8a60 	vmov.f32	s17, s1
 8012b42:	f7ee f81b 	bl	8000b7c <__aeabi_dcmpun>
 8012b46:	b9a8      	cbnz	r0, 8012b74 <asin+0x50>
 8012b48:	ec45 4b10 	vmov	d0, r4, r5
 8012b4c:	f000 f87a 	bl	8012c44 <fabs>
 8012b50:	4b0c      	ldr	r3, [pc, #48]	@ (8012b84 <asin+0x60>)
 8012b52:	ec51 0b10 	vmov	r0, r1, d0
 8012b56:	2200      	movs	r2, #0
 8012b58:	f7ee f806 	bl	8000b68 <__aeabi_dcmpgt>
 8012b5c:	b150      	cbz	r0, 8012b74 <asin+0x50>
 8012b5e:	f7fd fa77 	bl	8010050 <__errno>
 8012b62:	ecbd 8b02 	vpop	{d8}
 8012b66:	2321      	movs	r3, #33	@ 0x21
 8012b68:	6003      	str	r3, [r0, #0]
 8012b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b6e:	4806      	ldr	r0, [pc, #24]	@ (8012b88 <asin+0x64>)
 8012b70:	f7fd baaa 	b.w	80100c8 <nan>
 8012b74:	eeb0 0a48 	vmov.f32	s0, s16
 8012b78:	eef0 0a68 	vmov.f32	s1, s17
 8012b7c:	ecbd 8b02 	vpop	{d8}
 8012b80:	bd38      	pop	{r3, r4, r5, pc}
 8012b82:	bf00      	nop
 8012b84:	3ff00000 	.word	0x3ff00000
 8012b88:	08013f05 	.word	0x08013f05

08012b8c <atan2>:
 8012b8c:	f000 bb40 	b.w	8013210 <__ieee754_atan2>

08012b90 <fmod>:
 8012b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b92:	ed2d 8b02 	vpush	{d8}
 8012b96:	ec57 6b10 	vmov	r6, r7, d0
 8012b9a:	ec55 4b11 	vmov	r4, r5, d1
 8012b9e:	f000 fbfd 	bl	801339c <__ieee754_fmod>
 8012ba2:	4622      	mov	r2, r4
 8012ba4:	462b      	mov	r3, r5
 8012ba6:	4630      	mov	r0, r6
 8012ba8:	4639      	mov	r1, r7
 8012baa:	eeb0 8a40 	vmov.f32	s16, s0
 8012bae:	eef0 8a60 	vmov.f32	s17, s1
 8012bb2:	f7ed ffe3 	bl	8000b7c <__aeabi_dcmpun>
 8012bb6:	b990      	cbnz	r0, 8012bde <fmod+0x4e>
 8012bb8:	2200      	movs	r2, #0
 8012bba:	2300      	movs	r3, #0
 8012bbc:	4620      	mov	r0, r4
 8012bbe:	4629      	mov	r1, r5
 8012bc0:	f7ed ffaa 	bl	8000b18 <__aeabi_dcmpeq>
 8012bc4:	b158      	cbz	r0, 8012bde <fmod+0x4e>
 8012bc6:	f7fd fa43 	bl	8010050 <__errno>
 8012bca:	2321      	movs	r3, #33	@ 0x21
 8012bcc:	6003      	str	r3, [r0, #0]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	4610      	mov	r0, r2
 8012bd4:	4619      	mov	r1, r3
 8012bd6:	f7ed fe61 	bl	800089c <__aeabi_ddiv>
 8012bda:	ec41 0b18 	vmov	d8, r0, r1
 8012bde:	eeb0 0a48 	vmov.f32	s0, s16
 8012be2:	eef0 0a68 	vmov.f32	s1, s17
 8012be6:	ecbd 8b02 	vpop	{d8}
 8012bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012bec <sqrt>:
 8012bec:	b538      	push	{r3, r4, r5, lr}
 8012bee:	ed2d 8b02 	vpush	{d8}
 8012bf2:	ec55 4b10 	vmov	r4, r5, d0
 8012bf6:	f000 f82d 	bl	8012c54 <__ieee754_sqrt>
 8012bfa:	4622      	mov	r2, r4
 8012bfc:	462b      	mov	r3, r5
 8012bfe:	4620      	mov	r0, r4
 8012c00:	4629      	mov	r1, r5
 8012c02:	eeb0 8a40 	vmov.f32	s16, s0
 8012c06:	eef0 8a60 	vmov.f32	s17, s1
 8012c0a:	f7ed ffb7 	bl	8000b7c <__aeabi_dcmpun>
 8012c0e:	b990      	cbnz	r0, 8012c36 <sqrt+0x4a>
 8012c10:	2200      	movs	r2, #0
 8012c12:	2300      	movs	r3, #0
 8012c14:	4620      	mov	r0, r4
 8012c16:	4629      	mov	r1, r5
 8012c18:	f7ed ff88 	bl	8000b2c <__aeabi_dcmplt>
 8012c1c:	b158      	cbz	r0, 8012c36 <sqrt+0x4a>
 8012c1e:	f7fd fa17 	bl	8010050 <__errno>
 8012c22:	2321      	movs	r3, #33	@ 0x21
 8012c24:	6003      	str	r3, [r0, #0]
 8012c26:	2200      	movs	r2, #0
 8012c28:	2300      	movs	r3, #0
 8012c2a:	4610      	mov	r0, r2
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	f7ed fe35 	bl	800089c <__aeabi_ddiv>
 8012c32:	ec41 0b18 	vmov	d8, r0, r1
 8012c36:	eeb0 0a48 	vmov.f32	s0, s16
 8012c3a:	eef0 0a68 	vmov.f32	s1, s17
 8012c3e:	ecbd 8b02 	vpop	{d8}
 8012c42:	bd38      	pop	{r3, r4, r5, pc}

08012c44 <fabs>:
 8012c44:	ec51 0b10 	vmov	r0, r1, d0
 8012c48:	4602      	mov	r2, r0
 8012c4a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012c4e:	ec43 2b10 	vmov	d0, r2, r3
 8012c52:	4770      	bx	lr

08012c54 <__ieee754_sqrt>:
 8012c54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c58:	4a68      	ldr	r2, [pc, #416]	@ (8012dfc <__ieee754_sqrt+0x1a8>)
 8012c5a:	ec55 4b10 	vmov	r4, r5, d0
 8012c5e:	43aa      	bics	r2, r5
 8012c60:	462b      	mov	r3, r5
 8012c62:	4621      	mov	r1, r4
 8012c64:	d110      	bne.n	8012c88 <__ieee754_sqrt+0x34>
 8012c66:	4622      	mov	r2, r4
 8012c68:	4620      	mov	r0, r4
 8012c6a:	4629      	mov	r1, r5
 8012c6c:	f7ed fcec 	bl	8000648 <__aeabi_dmul>
 8012c70:	4602      	mov	r2, r0
 8012c72:	460b      	mov	r3, r1
 8012c74:	4620      	mov	r0, r4
 8012c76:	4629      	mov	r1, r5
 8012c78:	f7ed fb30 	bl	80002dc <__adddf3>
 8012c7c:	4604      	mov	r4, r0
 8012c7e:	460d      	mov	r5, r1
 8012c80:	ec45 4b10 	vmov	d0, r4, r5
 8012c84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c88:	2d00      	cmp	r5, #0
 8012c8a:	dc0e      	bgt.n	8012caa <__ieee754_sqrt+0x56>
 8012c8c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012c90:	4322      	orrs	r2, r4
 8012c92:	d0f5      	beq.n	8012c80 <__ieee754_sqrt+0x2c>
 8012c94:	b19d      	cbz	r5, 8012cbe <__ieee754_sqrt+0x6a>
 8012c96:	4622      	mov	r2, r4
 8012c98:	4620      	mov	r0, r4
 8012c9a:	4629      	mov	r1, r5
 8012c9c:	f7ed fb1c 	bl	80002d8 <__aeabi_dsub>
 8012ca0:	4602      	mov	r2, r0
 8012ca2:	460b      	mov	r3, r1
 8012ca4:	f7ed fdfa 	bl	800089c <__aeabi_ddiv>
 8012ca8:	e7e8      	b.n	8012c7c <__ieee754_sqrt+0x28>
 8012caa:	152a      	asrs	r2, r5, #20
 8012cac:	d115      	bne.n	8012cda <__ieee754_sqrt+0x86>
 8012cae:	2000      	movs	r0, #0
 8012cb0:	e009      	b.n	8012cc6 <__ieee754_sqrt+0x72>
 8012cb2:	0acb      	lsrs	r3, r1, #11
 8012cb4:	3a15      	subs	r2, #21
 8012cb6:	0549      	lsls	r1, r1, #21
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d0fa      	beq.n	8012cb2 <__ieee754_sqrt+0x5e>
 8012cbc:	e7f7      	b.n	8012cae <__ieee754_sqrt+0x5a>
 8012cbe:	462a      	mov	r2, r5
 8012cc0:	e7fa      	b.n	8012cb8 <__ieee754_sqrt+0x64>
 8012cc2:	005b      	lsls	r3, r3, #1
 8012cc4:	3001      	adds	r0, #1
 8012cc6:	02dc      	lsls	r4, r3, #11
 8012cc8:	d5fb      	bpl.n	8012cc2 <__ieee754_sqrt+0x6e>
 8012cca:	1e44      	subs	r4, r0, #1
 8012ccc:	1b12      	subs	r2, r2, r4
 8012cce:	f1c0 0420 	rsb	r4, r0, #32
 8012cd2:	fa21 f404 	lsr.w	r4, r1, r4
 8012cd6:	4323      	orrs	r3, r4
 8012cd8:	4081      	lsls	r1, r0
 8012cda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012cde:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8012ce2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012ce6:	07d2      	lsls	r2, r2, #31
 8012ce8:	bf5c      	itt	pl
 8012cea:	005b      	lslpl	r3, r3, #1
 8012cec:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012cf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012cf4:	bf58      	it	pl
 8012cf6:	0049      	lslpl	r1, r1, #1
 8012cf8:	2600      	movs	r6, #0
 8012cfa:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8012cfe:	106d      	asrs	r5, r5, #1
 8012d00:	0049      	lsls	r1, r1, #1
 8012d02:	2016      	movs	r0, #22
 8012d04:	4632      	mov	r2, r6
 8012d06:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8012d0a:	1917      	adds	r7, r2, r4
 8012d0c:	429f      	cmp	r7, r3
 8012d0e:	bfde      	ittt	le
 8012d10:	193a      	addle	r2, r7, r4
 8012d12:	1bdb      	suble	r3, r3, r7
 8012d14:	1936      	addle	r6, r6, r4
 8012d16:	0fcf      	lsrs	r7, r1, #31
 8012d18:	3801      	subs	r0, #1
 8012d1a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8012d1e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012d22:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012d26:	d1f0      	bne.n	8012d0a <__ieee754_sqrt+0xb6>
 8012d28:	4604      	mov	r4, r0
 8012d2a:	2720      	movs	r7, #32
 8012d2c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012d30:	429a      	cmp	r2, r3
 8012d32:	eb00 0e0c 	add.w	lr, r0, ip
 8012d36:	db02      	blt.n	8012d3e <__ieee754_sqrt+0xea>
 8012d38:	d113      	bne.n	8012d62 <__ieee754_sqrt+0x10e>
 8012d3a:	458e      	cmp	lr, r1
 8012d3c:	d811      	bhi.n	8012d62 <__ieee754_sqrt+0x10e>
 8012d3e:	f1be 0f00 	cmp.w	lr, #0
 8012d42:	eb0e 000c 	add.w	r0, lr, ip
 8012d46:	da42      	bge.n	8012dce <__ieee754_sqrt+0x17a>
 8012d48:	2800      	cmp	r0, #0
 8012d4a:	db40      	blt.n	8012dce <__ieee754_sqrt+0x17a>
 8012d4c:	f102 0801 	add.w	r8, r2, #1
 8012d50:	1a9b      	subs	r3, r3, r2
 8012d52:	458e      	cmp	lr, r1
 8012d54:	bf88      	it	hi
 8012d56:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012d5a:	eba1 010e 	sub.w	r1, r1, lr
 8012d5e:	4464      	add	r4, ip
 8012d60:	4642      	mov	r2, r8
 8012d62:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012d66:	3f01      	subs	r7, #1
 8012d68:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012d6c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012d70:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012d74:	d1dc      	bne.n	8012d30 <__ieee754_sqrt+0xdc>
 8012d76:	4319      	orrs	r1, r3
 8012d78:	d01b      	beq.n	8012db2 <__ieee754_sqrt+0x15e>
 8012d7a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8012e00 <__ieee754_sqrt+0x1ac>
 8012d7e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8012e04 <__ieee754_sqrt+0x1b0>
 8012d82:	e9da 0100 	ldrd	r0, r1, [sl]
 8012d86:	e9db 2300 	ldrd	r2, r3, [fp]
 8012d8a:	f7ed faa5 	bl	80002d8 <__aeabi_dsub>
 8012d8e:	e9da 8900 	ldrd	r8, r9, [sl]
 8012d92:	4602      	mov	r2, r0
 8012d94:	460b      	mov	r3, r1
 8012d96:	4640      	mov	r0, r8
 8012d98:	4649      	mov	r1, r9
 8012d9a:	f7ed fed1 	bl	8000b40 <__aeabi_dcmple>
 8012d9e:	b140      	cbz	r0, 8012db2 <__ieee754_sqrt+0x15e>
 8012da0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012da4:	e9da 0100 	ldrd	r0, r1, [sl]
 8012da8:	e9db 2300 	ldrd	r2, r3, [fp]
 8012dac:	d111      	bne.n	8012dd2 <__ieee754_sqrt+0x17e>
 8012dae:	3601      	adds	r6, #1
 8012db0:	463c      	mov	r4, r7
 8012db2:	1072      	asrs	r2, r6, #1
 8012db4:	0863      	lsrs	r3, r4, #1
 8012db6:	07f1      	lsls	r1, r6, #31
 8012db8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012dbc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012dc0:	bf48      	it	mi
 8012dc2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8012dc6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8012dca:	4618      	mov	r0, r3
 8012dcc:	e756      	b.n	8012c7c <__ieee754_sqrt+0x28>
 8012dce:	4690      	mov	r8, r2
 8012dd0:	e7be      	b.n	8012d50 <__ieee754_sqrt+0xfc>
 8012dd2:	f7ed fa83 	bl	80002dc <__adddf3>
 8012dd6:	e9da 8900 	ldrd	r8, r9, [sl]
 8012dda:	4602      	mov	r2, r0
 8012ddc:	460b      	mov	r3, r1
 8012dde:	4640      	mov	r0, r8
 8012de0:	4649      	mov	r1, r9
 8012de2:	f7ed fea3 	bl	8000b2c <__aeabi_dcmplt>
 8012de6:	b120      	cbz	r0, 8012df2 <__ieee754_sqrt+0x19e>
 8012de8:	1ca0      	adds	r0, r4, #2
 8012dea:	bf08      	it	eq
 8012dec:	3601      	addeq	r6, #1
 8012dee:	3402      	adds	r4, #2
 8012df0:	e7df      	b.n	8012db2 <__ieee754_sqrt+0x15e>
 8012df2:	1c63      	adds	r3, r4, #1
 8012df4:	f023 0401 	bic.w	r4, r3, #1
 8012df8:	e7db      	b.n	8012db2 <__ieee754_sqrt+0x15e>
 8012dfa:	bf00      	nop
 8012dfc:	7ff00000 	.word	0x7ff00000
 8012e00:	20000278 	.word	0x20000278
 8012e04:	20000270 	.word	0x20000270

08012e08 <__ieee754_asin>:
 8012e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e0c:	ec55 4b10 	vmov	r4, r5, d0
 8012e10:	4bc7      	ldr	r3, [pc, #796]	@ (8013130 <__ieee754_asin+0x328>)
 8012e12:	b087      	sub	sp, #28
 8012e14:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8012e18:	429e      	cmp	r6, r3
 8012e1a:	9501      	str	r5, [sp, #4]
 8012e1c:	d92d      	bls.n	8012e7a <__ieee754_asin+0x72>
 8012e1e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8012e22:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8012e26:	4326      	orrs	r6, r4
 8012e28:	d116      	bne.n	8012e58 <__ieee754_asin+0x50>
 8012e2a:	a3a7      	add	r3, pc, #668	@ (adr r3, 80130c8 <__ieee754_asin+0x2c0>)
 8012e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e30:	4620      	mov	r0, r4
 8012e32:	4629      	mov	r1, r5
 8012e34:	f7ed fc08 	bl	8000648 <__aeabi_dmul>
 8012e38:	a3a5      	add	r3, pc, #660	@ (adr r3, 80130d0 <__ieee754_asin+0x2c8>)
 8012e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e3e:	4606      	mov	r6, r0
 8012e40:	460f      	mov	r7, r1
 8012e42:	4620      	mov	r0, r4
 8012e44:	4629      	mov	r1, r5
 8012e46:	f7ed fbff 	bl	8000648 <__aeabi_dmul>
 8012e4a:	4602      	mov	r2, r0
 8012e4c:	460b      	mov	r3, r1
 8012e4e:	4630      	mov	r0, r6
 8012e50:	4639      	mov	r1, r7
 8012e52:	f7ed fa43 	bl	80002dc <__adddf3>
 8012e56:	e009      	b.n	8012e6c <__ieee754_asin+0x64>
 8012e58:	4622      	mov	r2, r4
 8012e5a:	462b      	mov	r3, r5
 8012e5c:	4620      	mov	r0, r4
 8012e5e:	4629      	mov	r1, r5
 8012e60:	f7ed fa3a 	bl	80002d8 <__aeabi_dsub>
 8012e64:	4602      	mov	r2, r0
 8012e66:	460b      	mov	r3, r1
 8012e68:	f7ed fd18 	bl	800089c <__aeabi_ddiv>
 8012e6c:	4604      	mov	r4, r0
 8012e6e:	460d      	mov	r5, r1
 8012e70:	ec45 4b10 	vmov	d0, r4, r5
 8012e74:	b007      	add	sp, #28
 8012e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e7a:	4bae      	ldr	r3, [pc, #696]	@ (8013134 <__ieee754_asin+0x32c>)
 8012e7c:	429e      	cmp	r6, r3
 8012e7e:	d810      	bhi.n	8012ea2 <__ieee754_asin+0x9a>
 8012e80:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8012e84:	f080 80ad 	bcs.w	8012fe2 <__ieee754_asin+0x1da>
 8012e88:	a393      	add	r3, pc, #588	@ (adr r3, 80130d8 <__ieee754_asin+0x2d0>)
 8012e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e8e:	4620      	mov	r0, r4
 8012e90:	4629      	mov	r1, r5
 8012e92:	f7ed fa23 	bl	80002dc <__adddf3>
 8012e96:	4ba8      	ldr	r3, [pc, #672]	@ (8013138 <__ieee754_asin+0x330>)
 8012e98:	2200      	movs	r2, #0
 8012e9a:	f7ed fe65 	bl	8000b68 <__aeabi_dcmpgt>
 8012e9e:	2800      	cmp	r0, #0
 8012ea0:	d1e6      	bne.n	8012e70 <__ieee754_asin+0x68>
 8012ea2:	ec45 4b10 	vmov	d0, r4, r5
 8012ea6:	f7ff fecd 	bl	8012c44 <fabs>
 8012eaa:	49a3      	ldr	r1, [pc, #652]	@ (8013138 <__ieee754_asin+0x330>)
 8012eac:	ec53 2b10 	vmov	r2, r3, d0
 8012eb0:	2000      	movs	r0, #0
 8012eb2:	f7ed fa11 	bl	80002d8 <__aeabi_dsub>
 8012eb6:	4ba1      	ldr	r3, [pc, #644]	@ (801313c <__ieee754_asin+0x334>)
 8012eb8:	2200      	movs	r2, #0
 8012eba:	f7ed fbc5 	bl	8000648 <__aeabi_dmul>
 8012ebe:	a388      	add	r3, pc, #544	@ (adr r3, 80130e0 <__ieee754_asin+0x2d8>)
 8012ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec4:	4604      	mov	r4, r0
 8012ec6:	460d      	mov	r5, r1
 8012ec8:	f7ed fbbe 	bl	8000648 <__aeabi_dmul>
 8012ecc:	a386      	add	r3, pc, #536	@ (adr r3, 80130e8 <__ieee754_asin+0x2e0>)
 8012ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed2:	f7ed fa03 	bl	80002dc <__adddf3>
 8012ed6:	4622      	mov	r2, r4
 8012ed8:	462b      	mov	r3, r5
 8012eda:	f7ed fbb5 	bl	8000648 <__aeabi_dmul>
 8012ede:	a384      	add	r3, pc, #528	@ (adr r3, 80130f0 <__ieee754_asin+0x2e8>)
 8012ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee4:	f7ed f9f8 	bl	80002d8 <__aeabi_dsub>
 8012ee8:	4622      	mov	r2, r4
 8012eea:	462b      	mov	r3, r5
 8012eec:	f7ed fbac 	bl	8000648 <__aeabi_dmul>
 8012ef0:	a381      	add	r3, pc, #516	@ (adr r3, 80130f8 <__ieee754_asin+0x2f0>)
 8012ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef6:	f7ed f9f1 	bl	80002dc <__adddf3>
 8012efa:	4622      	mov	r2, r4
 8012efc:	462b      	mov	r3, r5
 8012efe:	f7ed fba3 	bl	8000648 <__aeabi_dmul>
 8012f02:	a37f      	add	r3, pc, #508	@ (adr r3, 8013100 <__ieee754_asin+0x2f8>)
 8012f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f08:	f7ed f9e6 	bl	80002d8 <__aeabi_dsub>
 8012f0c:	4622      	mov	r2, r4
 8012f0e:	462b      	mov	r3, r5
 8012f10:	f7ed fb9a 	bl	8000648 <__aeabi_dmul>
 8012f14:	a37c      	add	r3, pc, #496	@ (adr r3, 8013108 <__ieee754_asin+0x300>)
 8012f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f1a:	f7ed f9df 	bl	80002dc <__adddf3>
 8012f1e:	4622      	mov	r2, r4
 8012f20:	462b      	mov	r3, r5
 8012f22:	f7ed fb91 	bl	8000648 <__aeabi_dmul>
 8012f26:	a37a      	add	r3, pc, #488	@ (adr r3, 8013110 <__ieee754_asin+0x308>)
 8012f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f30:	4620      	mov	r0, r4
 8012f32:	4629      	mov	r1, r5
 8012f34:	f7ed fb88 	bl	8000648 <__aeabi_dmul>
 8012f38:	a377      	add	r3, pc, #476	@ (adr r3, 8013118 <__ieee754_asin+0x310>)
 8012f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f3e:	f7ed f9cb 	bl	80002d8 <__aeabi_dsub>
 8012f42:	4622      	mov	r2, r4
 8012f44:	462b      	mov	r3, r5
 8012f46:	f7ed fb7f 	bl	8000648 <__aeabi_dmul>
 8012f4a:	a375      	add	r3, pc, #468	@ (adr r3, 8013120 <__ieee754_asin+0x318>)
 8012f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f50:	f7ed f9c4 	bl	80002dc <__adddf3>
 8012f54:	4622      	mov	r2, r4
 8012f56:	462b      	mov	r3, r5
 8012f58:	f7ed fb76 	bl	8000648 <__aeabi_dmul>
 8012f5c:	a372      	add	r3, pc, #456	@ (adr r3, 8013128 <__ieee754_asin+0x320>)
 8012f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f62:	f7ed f9b9 	bl	80002d8 <__aeabi_dsub>
 8012f66:	4622      	mov	r2, r4
 8012f68:	462b      	mov	r3, r5
 8012f6a:	f7ed fb6d 	bl	8000648 <__aeabi_dmul>
 8012f6e:	4b72      	ldr	r3, [pc, #456]	@ (8013138 <__ieee754_asin+0x330>)
 8012f70:	2200      	movs	r2, #0
 8012f72:	f7ed f9b3 	bl	80002dc <__adddf3>
 8012f76:	ec45 4b10 	vmov	d0, r4, r5
 8012f7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012f7e:	f7ff fe69 	bl	8012c54 <__ieee754_sqrt>
 8012f82:	4b6f      	ldr	r3, [pc, #444]	@ (8013140 <__ieee754_asin+0x338>)
 8012f84:	429e      	cmp	r6, r3
 8012f86:	ec5b ab10 	vmov	sl, fp, d0
 8012f8a:	f240 80db 	bls.w	8013144 <__ieee754_asin+0x33c>
 8012f8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f96:	f7ed fc81 	bl	800089c <__aeabi_ddiv>
 8012f9a:	4652      	mov	r2, sl
 8012f9c:	465b      	mov	r3, fp
 8012f9e:	f7ed fb53 	bl	8000648 <__aeabi_dmul>
 8012fa2:	4652      	mov	r2, sl
 8012fa4:	465b      	mov	r3, fp
 8012fa6:	f7ed f999 	bl	80002dc <__adddf3>
 8012faa:	4602      	mov	r2, r0
 8012fac:	460b      	mov	r3, r1
 8012fae:	f7ed f995 	bl	80002dc <__adddf3>
 8012fb2:	a347      	add	r3, pc, #284	@ (adr r3, 80130d0 <__ieee754_asin+0x2c8>)
 8012fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fb8:	f7ed f98e 	bl	80002d8 <__aeabi_dsub>
 8012fbc:	4602      	mov	r2, r0
 8012fbe:	460b      	mov	r3, r1
 8012fc0:	a141      	add	r1, pc, #260	@ (adr r1, 80130c8 <__ieee754_asin+0x2c0>)
 8012fc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fc6:	f7ed f987 	bl	80002d8 <__aeabi_dsub>
 8012fca:	9b01      	ldr	r3, [sp, #4]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	bfdc      	itt	le
 8012fd0:	4602      	movle	r2, r0
 8012fd2:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8012fd6:	4604      	mov	r4, r0
 8012fd8:	460d      	mov	r5, r1
 8012fda:	bfdc      	itt	le
 8012fdc:	4614      	movle	r4, r2
 8012fde:	461d      	movle	r5, r3
 8012fe0:	e746      	b.n	8012e70 <__ieee754_asin+0x68>
 8012fe2:	4622      	mov	r2, r4
 8012fe4:	462b      	mov	r3, r5
 8012fe6:	4620      	mov	r0, r4
 8012fe8:	4629      	mov	r1, r5
 8012fea:	f7ed fb2d 	bl	8000648 <__aeabi_dmul>
 8012fee:	a33c      	add	r3, pc, #240	@ (adr r3, 80130e0 <__ieee754_asin+0x2d8>)
 8012ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff4:	4606      	mov	r6, r0
 8012ff6:	460f      	mov	r7, r1
 8012ff8:	f7ed fb26 	bl	8000648 <__aeabi_dmul>
 8012ffc:	a33a      	add	r3, pc, #232	@ (adr r3, 80130e8 <__ieee754_asin+0x2e0>)
 8012ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013002:	f7ed f96b 	bl	80002dc <__adddf3>
 8013006:	4632      	mov	r2, r6
 8013008:	463b      	mov	r3, r7
 801300a:	f7ed fb1d 	bl	8000648 <__aeabi_dmul>
 801300e:	a338      	add	r3, pc, #224	@ (adr r3, 80130f0 <__ieee754_asin+0x2e8>)
 8013010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013014:	f7ed f960 	bl	80002d8 <__aeabi_dsub>
 8013018:	4632      	mov	r2, r6
 801301a:	463b      	mov	r3, r7
 801301c:	f7ed fb14 	bl	8000648 <__aeabi_dmul>
 8013020:	a335      	add	r3, pc, #212	@ (adr r3, 80130f8 <__ieee754_asin+0x2f0>)
 8013022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013026:	f7ed f959 	bl	80002dc <__adddf3>
 801302a:	4632      	mov	r2, r6
 801302c:	463b      	mov	r3, r7
 801302e:	f7ed fb0b 	bl	8000648 <__aeabi_dmul>
 8013032:	a333      	add	r3, pc, #204	@ (adr r3, 8013100 <__ieee754_asin+0x2f8>)
 8013034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013038:	f7ed f94e 	bl	80002d8 <__aeabi_dsub>
 801303c:	4632      	mov	r2, r6
 801303e:	463b      	mov	r3, r7
 8013040:	f7ed fb02 	bl	8000648 <__aeabi_dmul>
 8013044:	a330      	add	r3, pc, #192	@ (adr r3, 8013108 <__ieee754_asin+0x300>)
 8013046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801304a:	f7ed f947 	bl	80002dc <__adddf3>
 801304e:	4632      	mov	r2, r6
 8013050:	463b      	mov	r3, r7
 8013052:	f7ed faf9 	bl	8000648 <__aeabi_dmul>
 8013056:	a32e      	add	r3, pc, #184	@ (adr r3, 8013110 <__ieee754_asin+0x308>)
 8013058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801305c:	4680      	mov	r8, r0
 801305e:	4689      	mov	r9, r1
 8013060:	4630      	mov	r0, r6
 8013062:	4639      	mov	r1, r7
 8013064:	f7ed faf0 	bl	8000648 <__aeabi_dmul>
 8013068:	a32b      	add	r3, pc, #172	@ (adr r3, 8013118 <__ieee754_asin+0x310>)
 801306a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801306e:	f7ed f933 	bl	80002d8 <__aeabi_dsub>
 8013072:	4632      	mov	r2, r6
 8013074:	463b      	mov	r3, r7
 8013076:	f7ed fae7 	bl	8000648 <__aeabi_dmul>
 801307a:	a329      	add	r3, pc, #164	@ (adr r3, 8013120 <__ieee754_asin+0x318>)
 801307c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013080:	f7ed f92c 	bl	80002dc <__adddf3>
 8013084:	4632      	mov	r2, r6
 8013086:	463b      	mov	r3, r7
 8013088:	f7ed fade 	bl	8000648 <__aeabi_dmul>
 801308c:	a326      	add	r3, pc, #152	@ (adr r3, 8013128 <__ieee754_asin+0x320>)
 801308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013092:	f7ed f921 	bl	80002d8 <__aeabi_dsub>
 8013096:	4632      	mov	r2, r6
 8013098:	463b      	mov	r3, r7
 801309a:	f7ed fad5 	bl	8000648 <__aeabi_dmul>
 801309e:	4b26      	ldr	r3, [pc, #152]	@ (8013138 <__ieee754_asin+0x330>)
 80130a0:	2200      	movs	r2, #0
 80130a2:	f7ed f91b 	bl	80002dc <__adddf3>
 80130a6:	4602      	mov	r2, r0
 80130a8:	460b      	mov	r3, r1
 80130aa:	4640      	mov	r0, r8
 80130ac:	4649      	mov	r1, r9
 80130ae:	f7ed fbf5 	bl	800089c <__aeabi_ddiv>
 80130b2:	4622      	mov	r2, r4
 80130b4:	462b      	mov	r3, r5
 80130b6:	f7ed fac7 	bl	8000648 <__aeabi_dmul>
 80130ba:	4602      	mov	r2, r0
 80130bc:	460b      	mov	r3, r1
 80130be:	4620      	mov	r0, r4
 80130c0:	4629      	mov	r1, r5
 80130c2:	e6c6      	b.n	8012e52 <__ieee754_asin+0x4a>
 80130c4:	f3af 8000 	nop.w
 80130c8:	54442d18 	.word	0x54442d18
 80130cc:	3ff921fb 	.word	0x3ff921fb
 80130d0:	33145c07 	.word	0x33145c07
 80130d4:	3c91a626 	.word	0x3c91a626
 80130d8:	8800759c 	.word	0x8800759c
 80130dc:	7e37e43c 	.word	0x7e37e43c
 80130e0:	0dfdf709 	.word	0x0dfdf709
 80130e4:	3f023de1 	.word	0x3f023de1
 80130e8:	7501b288 	.word	0x7501b288
 80130ec:	3f49efe0 	.word	0x3f49efe0
 80130f0:	b5688f3b 	.word	0xb5688f3b
 80130f4:	3fa48228 	.word	0x3fa48228
 80130f8:	0e884455 	.word	0x0e884455
 80130fc:	3fc9c155 	.word	0x3fc9c155
 8013100:	03eb6f7d 	.word	0x03eb6f7d
 8013104:	3fd4d612 	.word	0x3fd4d612
 8013108:	55555555 	.word	0x55555555
 801310c:	3fc55555 	.word	0x3fc55555
 8013110:	b12e9282 	.word	0xb12e9282
 8013114:	3fb3b8c5 	.word	0x3fb3b8c5
 8013118:	1b8d0159 	.word	0x1b8d0159
 801311c:	3fe6066c 	.word	0x3fe6066c
 8013120:	9c598ac8 	.word	0x9c598ac8
 8013124:	40002ae5 	.word	0x40002ae5
 8013128:	1c8a2d4b 	.word	0x1c8a2d4b
 801312c:	40033a27 	.word	0x40033a27
 8013130:	3fefffff 	.word	0x3fefffff
 8013134:	3fdfffff 	.word	0x3fdfffff
 8013138:	3ff00000 	.word	0x3ff00000
 801313c:	3fe00000 	.word	0x3fe00000
 8013140:	3fef3332 	.word	0x3fef3332
 8013144:	4652      	mov	r2, sl
 8013146:	465b      	mov	r3, fp
 8013148:	4650      	mov	r0, sl
 801314a:	4659      	mov	r1, fp
 801314c:	f7ed f8c6 	bl	80002dc <__adddf3>
 8013150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013154:	4606      	mov	r6, r0
 8013156:	460f      	mov	r7, r1
 8013158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801315c:	f7ed fb9e 	bl	800089c <__aeabi_ddiv>
 8013160:	4602      	mov	r2, r0
 8013162:	460b      	mov	r3, r1
 8013164:	4630      	mov	r0, r6
 8013166:	4639      	mov	r1, r7
 8013168:	f7ed fa6e 	bl	8000648 <__aeabi_dmul>
 801316c:	f04f 0800 	mov.w	r8, #0
 8013170:	4606      	mov	r6, r0
 8013172:	460f      	mov	r7, r1
 8013174:	4642      	mov	r2, r8
 8013176:	465b      	mov	r3, fp
 8013178:	4640      	mov	r0, r8
 801317a:	4659      	mov	r1, fp
 801317c:	f7ed fa64 	bl	8000648 <__aeabi_dmul>
 8013180:	4602      	mov	r2, r0
 8013182:	460b      	mov	r3, r1
 8013184:	4620      	mov	r0, r4
 8013186:	4629      	mov	r1, r5
 8013188:	f7ed f8a6 	bl	80002d8 <__aeabi_dsub>
 801318c:	4642      	mov	r2, r8
 801318e:	4604      	mov	r4, r0
 8013190:	460d      	mov	r5, r1
 8013192:	465b      	mov	r3, fp
 8013194:	4650      	mov	r0, sl
 8013196:	4659      	mov	r1, fp
 8013198:	f7ed f8a0 	bl	80002dc <__adddf3>
 801319c:	4602      	mov	r2, r0
 801319e:	460b      	mov	r3, r1
 80131a0:	4620      	mov	r0, r4
 80131a2:	4629      	mov	r1, r5
 80131a4:	f7ed fb7a 	bl	800089c <__aeabi_ddiv>
 80131a8:	4602      	mov	r2, r0
 80131aa:	460b      	mov	r3, r1
 80131ac:	f7ed f896 	bl	80002dc <__adddf3>
 80131b0:	4602      	mov	r2, r0
 80131b2:	460b      	mov	r3, r1
 80131b4:	a112      	add	r1, pc, #72	@ (adr r1, 8013200 <__ieee754_asin+0x3f8>)
 80131b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131ba:	f7ed f88d 	bl	80002d8 <__aeabi_dsub>
 80131be:	4602      	mov	r2, r0
 80131c0:	460b      	mov	r3, r1
 80131c2:	4630      	mov	r0, r6
 80131c4:	4639      	mov	r1, r7
 80131c6:	f7ed f887 	bl	80002d8 <__aeabi_dsub>
 80131ca:	4642      	mov	r2, r8
 80131cc:	4604      	mov	r4, r0
 80131ce:	460d      	mov	r5, r1
 80131d0:	465b      	mov	r3, fp
 80131d2:	4640      	mov	r0, r8
 80131d4:	4659      	mov	r1, fp
 80131d6:	f7ed f881 	bl	80002dc <__adddf3>
 80131da:	4602      	mov	r2, r0
 80131dc:	460b      	mov	r3, r1
 80131de:	a10a      	add	r1, pc, #40	@ (adr r1, 8013208 <__ieee754_asin+0x400>)
 80131e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131e4:	f7ed f878 	bl	80002d8 <__aeabi_dsub>
 80131e8:	4602      	mov	r2, r0
 80131ea:	460b      	mov	r3, r1
 80131ec:	4620      	mov	r0, r4
 80131ee:	4629      	mov	r1, r5
 80131f0:	f7ed f872 	bl	80002d8 <__aeabi_dsub>
 80131f4:	4602      	mov	r2, r0
 80131f6:	460b      	mov	r3, r1
 80131f8:	a103      	add	r1, pc, #12	@ (adr r1, 8013208 <__ieee754_asin+0x400>)
 80131fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131fe:	e6e2      	b.n	8012fc6 <__ieee754_asin+0x1be>
 8013200:	33145c07 	.word	0x33145c07
 8013204:	3c91a626 	.word	0x3c91a626
 8013208:	54442d18 	.word	0x54442d18
 801320c:	3fe921fb 	.word	0x3fe921fb

08013210 <__ieee754_atan2>:
 8013210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013214:	ec57 6b11 	vmov	r6, r7, d1
 8013218:	4273      	negs	r3, r6
 801321a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8013398 <__ieee754_atan2+0x188>
 801321e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8013222:	4333      	orrs	r3, r6
 8013224:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013228:	4543      	cmp	r3, r8
 801322a:	ec51 0b10 	vmov	r0, r1, d0
 801322e:	4635      	mov	r5, r6
 8013230:	d809      	bhi.n	8013246 <__ieee754_atan2+0x36>
 8013232:	4244      	negs	r4, r0
 8013234:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013238:	4304      	orrs	r4, r0
 801323a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801323e:	4544      	cmp	r4, r8
 8013240:	468e      	mov	lr, r1
 8013242:	4681      	mov	r9, r0
 8013244:	d907      	bls.n	8013256 <__ieee754_atan2+0x46>
 8013246:	4632      	mov	r2, r6
 8013248:	463b      	mov	r3, r7
 801324a:	f7ed f847 	bl	80002dc <__adddf3>
 801324e:	ec41 0b10 	vmov	d0, r0, r1
 8013252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013256:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801325a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801325e:	4334      	orrs	r4, r6
 8013260:	d103      	bne.n	801326a <__ieee754_atan2+0x5a>
 8013262:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013266:	f000 b9a3 	b.w	80135b0 <atan>
 801326a:	17bc      	asrs	r4, r7, #30
 801326c:	f004 0402 	and.w	r4, r4, #2
 8013270:	ea53 0909 	orrs.w	r9, r3, r9
 8013274:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013278:	d107      	bne.n	801328a <__ieee754_atan2+0x7a>
 801327a:	2c02      	cmp	r4, #2
 801327c:	d05f      	beq.n	801333e <__ieee754_atan2+0x12e>
 801327e:	2c03      	cmp	r4, #3
 8013280:	d1e5      	bne.n	801324e <__ieee754_atan2+0x3e>
 8013282:	a141      	add	r1, pc, #260	@ (adr r1, 8013388 <__ieee754_atan2+0x178>)
 8013284:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013288:	e7e1      	b.n	801324e <__ieee754_atan2+0x3e>
 801328a:	4315      	orrs	r5, r2
 801328c:	d106      	bne.n	801329c <__ieee754_atan2+0x8c>
 801328e:	f1be 0f00 	cmp.w	lr, #0
 8013292:	da5f      	bge.n	8013354 <__ieee754_atan2+0x144>
 8013294:	a13e      	add	r1, pc, #248	@ (adr r1, 8013390 <__ieee754_atan2+0x180>)
 8013296:	e9d1 0100 	ldrd	r0, r1, [r1]
 801329a:	e7d8      	b.n	801324e <__ieee754_atan2+0x3e>
 801329c:	4542      	cmp	r2, r8
 801329e:	d10f      	bne.n	80132c0 <__ieee754_atan2+0xb0>
 80132a0:	4293      	cmp	r3, r2
 80132a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80132a6:	d107      	bne.n	80132b8 <__ieee754_atan2+0xa8>
 80132a8:	2c02      	cmp	r4, #2
 80132aa:	d84c      	bhi.n	8013346 <__ieee754_atan2+0x136>
 80132ac:	4b34      	ldr	r3, [pc, #208]	@ (8013380 <__ieee754_atan2+0x170>)
 80132ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80132b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80132b6:	e7ca      	b.n	801324e <__ieee754_atan2+0x3e>
 80132b8:	2c02      	cmp	r4, #2
 80132ba:	d848      	bhi.n	801334e <__ieee754_atan2+0x13e>
 80132bc:	4b31      	ldr	r3, [pc, #196]	@ (8013384 <__ieee754_atan2+0x174>)
 80132be:	e7f6      	b.n	80132ae <__ieee754_atan2+0x9e>
 80132c0:	4543      	cmp	r3, r8
 80132c2:	d0e4      	beq.n	801328e <__ieee754_atan2+0x7e>
 80132c4:	1a9b      	subs	r3, r3, r2
 80132c6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80132ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80132ce:	da1e      	bge.n	801330e <__ieee754_atan2+0xfe>
 80132d0:	2f00      	cmp	r7, #0
 80132d2:	da01      	bge.n	80132d8 <__ieee754_atan2+0xc8>
 80132d4:	323c      	adds	r2, #60	@ 0x3c
 80132d6:	db1e      	blt.n	8013316 <__ieee754_atan2+0x106>
 80132d8:	4632      	mov	r2, r6
 80132da:	463b      	mov	r3, r7
 80132dc:	f7ed fade 	bl	800089c <__aeabi_ddiv>
 80132e0:	ec41 0b10 	vmov	d0, r0, r1
 80132e4:	f7ff fcae 	bl	8012c44 <fabs>
 80132e8:	f000 f962 	bl	80135b0 <atan>
 80132ec:	ec51 0b10 	vmov	r0, r1, d0
 80132f0:	2c01      	cmp	r4, #1
 80132f2:	d013      	beq.n	801331c <__ieee754_atan2+0x10c>
 80132f4:	2c02      	cmp	r4, #2
 80132f6:	d015      	beq.n	8013324 <__ieee754_atan2+0x114>
 80132f8:	2c00      	cmp	r4, #0
 80132fa:	d0a8      	beq.n	801324e <__ieee754_atan2+0x3e>
 80132fc:	a318      	add	r3, pc, #96	@ (adr r3, 8013360 <__ieee754_atan2+0x150>)
 80132fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013302:	f7ec ffe9 	bl	80002d8 <__aeabi_dsub>
 8013306:	a318      	add	r3, pc, #96	@ (adr r3, 8013368 <__ieee754_atan2+0x158>)
 8013308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330c:	e014      	b.n	8013338 <__ieee754_atan2+0x128>
 801330e:	a118      	add	r1, pc, #96	@ (adr r1, 8013370 <__ieee754_atan2+0x160>)
 8013310:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013314:	e7ec      	b.n	80132f0 <__ieee754_atan2+0xe0>
 8013316:	2000      	movs	r0, #0
 8013318:	2100      	movs	r1, #0
 801331a:	e7e9      	b.n	80132f0 <__ieee754_atan2+0xe0>
 801331c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013320:	4619      	mov	r1, r3
 8013322:	e794      	b.n	801324e <__ieee754_atan2+0x3e>
 8013324:	a30e      	add	r3, pc, #56	@ (adr r3, 8013360 <__ieee754_atan2+0x150>)
 8013326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801332a:	f7ec ffd5 	bl	80002d8 <__aeabi_dsub>
 801332e:	4602      	mov	r2, r0
 8013330:	460b      	mov	r3, r1
 8013332:	a10d      	add	r1, pc, #52	@ (adr r1, 8013368 <__ieee754_atan2+0x158>)
 8013334:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013338:	f7ec ffce 	bl	80002d8 <__aeabi_dsub>
 801333c:	e787      	b.n	801324e <__ieee754_atan2+0x3e>
 801333e:	a10a      	add	r1, pc, #40	@ (adr r1, 8013368 <__ieee754_atan2+0x158>)
 8013340:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013344:	e783      	b.n	801324e <__ieee754_atan2+0x3e>
 8013346:	a10c      	add	r1, pc, #48	@ (adr r1, 8013378 <__ieee754_atan2+0x168>)
 8013348:	e9d1 0100 	ldrd	r0, r1, [r1]
 801334c:	e77f      	b.n	801324e <__ieee754_atan2+0x3e>
 801334e:	2000      	movs	r0, #0
 8013350:	2100      	movs	r1, #0
 8013352:	e77c      	b.n	801324e <__ieee754_atan2+0x3e>
 8013354:	a106      	add	r1, pc, #24	@ (adr r1, 8013370 <__ieee754_atan2+0x160>)
 8013356:	e9d1 0100 	ldrd	r0, r1, [r1]
 801335a:	e778      	b.n	801324e <__ieee754_atan2+0x3e>
 801335c:	f3af 8000 	nop.w
 8013360:	33145c07 	.word	0x33145c07
 8013364:	3ca1a626 	.word	0x3ca1a626
 8013368:	54442d18 	.word	0x54442d18
 801336c:	400921fb 	.word	0x400921fb
 8013370:	54442d18 	.word	0x54442d18
 8013374:	3ff921fb 	.word	0x3ff921fb
 8013378:	54442d18 	.word	0x54442d18
 801337c:	3fe921fb 	.word	0x3fe921fb
 8013380:	08013f20 	.word	0x08013f20
 8013384:	08013f08 	.word	0x08013f08
 8013388:	54442d18 	.word	0x54442d18
 801338c:	c00921fb 	.word	0xc00921fb
 8013390:	54442d18 	.word	0x54442d18
 8013394:	bff921fb 	.word	0xbff921fb
 8013398:	7ff00000 	.word	0x7ff00000

0801339c <__ieee754_fmod>:
 801339c:	ec53 2b11 	vmov	r2, r3, d1
 80133a0:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 80133a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133a8:	ea52 040c 	orrs.w	r4, r2, ip
 80133ac:	ec51 0b10 	vmov	r0, r1, d0
 80133b0:	461e      	mov	r6, r3
 80133b2:	4617      	mov	r7, r2
 80133b4:	4696      	mov	lr, r2
 80133b6:	d00c      	beq.n	80133d2 <__ieee754_fmod+0x36>
 80133b8:	4c77      	ldr	r4, [pc, #476]	@ (8013598 <__ieee754_fmod+0x1fc>)
 80133ba:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 80133be:	45a0      	cmp	r8, r4
 80133c0:	4689      	mov	r9, r1
 80133c2:	d806      	bhi.n	80133d2 <__ieee754_fmod+0x36>
 80133c4:	4254      	negs	r4, r2
 80133c6:	4d75      	ldr	r5, [pc, #468]	@ (801359c <__ieee754_fmod+0x200>)
 80133c8:	4314      	orrs	r4, r2
 80133ca:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 80133ce:	42ac      	cmp	r4, r5
 80133d0:	d909      	bls.n	80133e6 <__ieee754_fmod+0x4a>
 80133d2:	f7ed f939 	bl	8000648 <__aeabi_dmul>
 80133d6:	4602      	mov	r2, r0
 80133d8:	460b      	mov	r3, r1
 80133da:	f7ed fa5f 	bl	800089c <__aeabi_ddiv>
 80133de:	ec41 0b10 	vmov	d0, r0, r1
 80133e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133e6:	45e0      	cmp	r8, ip
 80133e8:	4682      	mov	sl, r0
 80133ea:	4604      	mov	r4, r0
 80133ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80133f0:	dc09      	bgt.n	8013406 <__ieee754_fmod+0x6a>
 80133f2:	dbf4      	blt.n	80133de <__ieee754_fmod+0x42>
 80133f4:	4282      	cmp	r2, r0
 80133f6:	d8f2      	bhi.n	80133de <__ieee754_fmod+0x42>
 80133f8:	d105      	bne.n	8013406 <__ieee754_fmod+0x6a>
 80133fa:	4b69      	ldr	r3, [pc, #420]	@ (80135a0 <__ieee754_fmod+0x204>)
 80133fc:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8013400:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013404:	e7eb      	b.n	80133de <__ieee754_fmod+0x42>
 8013406:	4a65      	ldr	r2, [pc, #404]	@ (801359c <__ieee754_fmod+0x200>)
 8013408:	ea19 0f02 	tst.w	r9, r2
 801340c:	d148      	bne.n	80134a0 <__ieee754_fmod+0x104>
 801340e:	f1b8 0f00 	cmp.w	r8, #0
 8013412:	d13d      	bne.n	8013490 <__ieee754_fmod+0xf4>
 8013414:	4963      	ldr	r1, [pc, #396]	@ (80135a4 <__ieee754_fmod+0x208>)
 8013416:	4653      	mov	r3, sl
 8013418:	2b00      	cmp	r3, #0
 801341a:	dc36      	bgt.n	801348a <__ieee754_fmod+0xee>
 801341c:	4216      	tst	r6, r2
 801341e:	d14f      	bne.n	80134c0 <__ieee754_fmod+0x124>
 8013420:	f1bc 0f00 	cmp.w	ip, #0
 8013424:	d144      	bne.n	80134b0 <__ieee754_fmod+0x114>
 8013426:	4a5f      	ldr	r2, [pc, #380]	@ (80135a4 <__ieee754_fmod+0x208>)
 8013428:	463b      	mov	r3, r7
 801342a:	2b00      	cmp	r3, #0
 801342c:	dc3d      	bgt.n	80134aa <__ieee754_fmod+0x10e>
 801342e:	485e      	ldr	r0, [pc, #376]	@ (80135a8 <__ieee754_fmod+0x20c>)
 8013430:	4281      	cmp	r1, r0
 8013432:	db4a      	blt.n	80134ca <__ieee754_fmod+0x12e>
 8013434:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013438:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801343c:	485a      	ldr	r0, [pc, #360]	@ (80135a8 <__ieee754_fmod+0x20c>)
 801343e:	4282      	cmp	r2, r0
 8013440:	db57      	blt.n	80134f2 <__ieee754_fmod+0x156>
 8013442:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8013446:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 801344a:	1a89      	subs	r1, r1, r2
 801344c:	1b98      	subs	r0, r3, r6
 801344e:	eba4 070e 	sub.w	r7, r4, lr
 8013452:	2900      	cmp	r1, #0
 8013454:	d162      	bne.n	801351c <__ieee754_fmod+0x180>
 8013456:	4574      	cmp	r4, lr
 8013458:	bf38      	it	cc
 801345a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801345e:	2800      	cmp	r0, #0
 8013460:	bfa4      	itt	ge
 8013462:	463c      	movge	r4, r7
 8013464:	4603      	movge	r3, r0
 8013466:	ea53 0104 	orrs.w	r1, r3, r4
 801346a:	d0c6      	beq.n	80133fa <__ieee754_fmod+0x5e>
 801346c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013470:	db69      	blt.n	8013546 <__ieee754_fmod+0x1aa>
 8013472:	494d      	ldr	r1, [pc, #308]	@ (80135a8 <__ieee754_fmod+0x20c>)
 8013474:	428a      	cmp	r2, r1
 8013476:	db6c      	blt.n	8013552 <__ieee754_fmod+0x1b6>
 8013478:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801347c:	432b      	orrs	r3, r5
 801347e:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8013482:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013486:	4620      	mov	r0, r4
 8013488:	e7a9      	b.n	80133de <__ieee754_fmod+0x42>
 801348a:	3901      	subs	r1, #1
 801348c:	005b      	lsls	r3, r3, #1
 801348e:	e7c3      	b.n	8013418 <__ieee754_fmod+0x7c>
 8013490:	4945      	ldr	r1, [pc, #276]	@ (80135a8 <__ieee754_fmod+0x20c>)
 8013492:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8013496:	2b00      	cmp	r3, #0
 8013498:	ddc0      	ble.n	801341c <__ieee754_fmod+0x80>
 801349a:	3901      	subs	r1, #1
 801349c:	005b      	lsls	r3, r3, #1
 801349e:	e7fa      	b.n	8013496 <__ieee754_fmod+0xfa>
 80134a0:	ea4f 5128 	mov.w	r1, r8, asr #20
 80134a4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80134a8:	e7b8      	b.n	801341c <__ieee754_fmod+0x80>
 80134aa:	3a01      	subs	r2, #1
 80134ac:	005b      	lsls	r3, r3, #1
 80134ae:	e7bc      	b.n	801342a <__ieee754_fmod+0x8e>
 80134b0:	4a3d      	ldr	r2, [pc, #244]	@ (80135a8 <__ieee754_fmod+0x20c>)
 80134b2:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	ddb9      	ble.n	801342e <__ieee754_fmod+0x92>
 80134ba:	3a01      	subs	r2, #1
 80134bc:	005b      	lsls	r3, r3, #1
 80134be:	e7fa      	b.n	80134b6 <__ieee754_fmod+0x11a>
 80134c0:	ea4f 522c 	mov.w	r2, ip, asr #20
 80134c4:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80134c8:	e7b1      	b.n	801342e <__ieee754_fmod+0x92>
 80134ca:	1a40      	subs	r0, r0, r1
 80134cc:	281f      	cmp	r0, #31
 80134ce:	dc0a      	bgt.n	80134e6 <__ieee754_fmod+0x14a>
 80134d0:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 80134d4:	fa08 f800 	lsl.w	r8, r8, r0
 80134d8:	fa2a f303 	lsr.w	r3, sl, r3
 80134dc:	ea43 0308 	orr.w	r3, r3, r8
 80134e0:	fa0a f400 	lsl.w	r4, sl, r0
 80134e4:	e7aa      	b.n	801343c <__ieee754_fmod+0xa0>
 80134e6:	4b31      	ldr	r3, [pc, #196]	@ (80135ac <__ieee754_fmod+0x210>)
 80134e8:	1a5b      	subs	r3, r3, r1
 80134ea:	fa0a f303 	lsl.w	r3, sl, r3
 80134ee:	2400      	movs	r4, #0
 80134f0:	e7a4      	b.n	801343c <__ieee754_fmod+0xa0>
 80134f2:	1a80      	subs	r0, r0, r2
 80134f4:	281f      	cmp	r0, #31
 80134f6:	dc0a      	bgt.n	801350e <__ieee754_fmod+0x172>
 80134f8:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 80134fc:	fa0c fc00 	lsl.w	ip, ip, r0
 8013500:	fa27 f606 	lsr.w	r6, r7, r6
 8013504:	ea46 060c 	orr.w	r6, r6, ip
 8013508:	fa07 fe00 	lsl.w	lr, r7, r0
 801350c:	e79d      	b.n	801344a <__ieee754_fmod+0xae>
 801350e:	4e27      	ldr	r6, [pc, #156]	@ (80135ac <__ieee754_fmod+0x210>)
 8013510:	1ab6      	subs	r6, r6, r2
 8013512:	fa07 f606 	lsl.w	r6, r7, r6
 8013516:	f04f 0e00 	mov.w	lr, #0
 801351a:	e796      	b.n	801344a <__ieee754_fmod+0xae>
 801351c:	4574      	cmp	r4, lr
 801351e:	bf38      	it	cc
 8013520:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8013524:	2800      	cmp	r0, #0
 8013526:	da05      	bge.n	8013534 <__ieee754_fmod+0x198>
 8013528:	0fe0      	lsrs	r0, r4, #31
 801352a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801352e:	0064      	lsls	r4, r4, #1
 8013530:	3901      	subs	r1, #1
 8013532:	e78b      	b.n	801344c <__ieee754_fmod+0xb0>
 8013534:	ea50 0307 	orrs.w	r3, r0, r7
 8013538:	f43f af5f 	beq.w	80133fa <__ieee754_fmod+0x5e>
 801353c:	0ffb      	lsrs	r3, r7, #31
 801353e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8013542:	007c      	lsls	r4, r7, #1
 8013544:	e7f4      	b.n	8013530 <__ieee754_fmod+0x194>
 8013546:	0fe1      	lsrs	r1, r4, #31
 8013548:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801354c:	0064      	lsls	r4, r4, #1
 801354e:	3a01      	subs	r2, #1
 8013550:	e78c      	b.n	801346c <__ieee754_fmod+0xd0>
 8013552:	1a89      	subs	r1, r1, r2
 8013554:	2914      	cmp	r1, #20
 8013556:	dc0a      	bgt.n	801356e <__ieee754_fmod+0x1d2>
 8013558:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 801355c:	fa03 f202 	lsl.w	r2, r3, r2
 8013560:	40cc      	lsrs	r4, r1
 8013562:	4322      	orrs	r2, r4
 8013564:	410b      	asrs	r3, r1
 8013566:	ea43 0105 	orr.w	r1, r3, r5
 801356a:	4610      	mov	r0, r2
 801356c:	e737      	b.n	80133de <__ieee754_fmod+0x42>
 801356e:	291f      	cmp	r1, #31
 8013570:	dc07      	bgt.n	8013582 <__ieee754_fmod+0x1e6>
 8013572:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8013576:	40cc      	lsrs	r4, r1
 8013578:	fa03 f202 	lsl.w	r2, r3, r2
 801357c:	4322      	orrs	r2, r4
 801357e:	462b      	mov	r3, r5
 8013580:	e7f1      	b.n	8013566 <__ieee754_fmod+0x1ca>
 8013582:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8013586:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 801358a:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 801358e:	32e2      	adds	r2, #226	@ 0xe2
 8013590:	fa43 f202 	asr.w	r2, r3, r2
 8013594:	e7f3      	b.n	801357e <__ieee754_fmod+0x1e2>
 8013596:	bf00      	nop
 8013598:	7fefffff 	.word	0x7fefffff
 801359c:	7ff00000 	.word	0x7ff00000
 80135a0:	08013f38 	.word	0x08013f38
 80135a4:	fffffbed 	.word	0xfffffbed
 80135a8:	fffffc02 	.word	0xfffffc02
 80135ac:	fffffbe2 	.word	0xfffffbe2

080135b0 <atan>:
 80135b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135b4:	ec55 4b10 	vmov	r4, r5, d0
 80135b8:	4bbf      	ldr	r3, [pc, #764]	@ (80138b8 <atan+0x308>)
 80135ba:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80135be:	429e      	cmp	r6, r3
 80135c0:	46ab      	mov	fp, r5
 80135c2:	d918      	bls.n	80135f6 <atan+0x46>
 80135c4:	4bbd      	ldr	r3, [pc, #756]	@ (80138bc <atan+0x30c>)
 80135c6:	429e      	cmp	r6, r3
 80135c8:	d801      	bhi.n	80135ce <atan+0x1e>
 80135ca:	d109      	bne.n	80135e0 <atan+0x30>
 80135cc:	b144      	cbz	r4, 80135e0 <atan+0x30>
 80135ce:	4622      	mov	r2, r4
 80135d0:	462b      	mov	r3, r5
 80135d2:	4620      	mov	r0, r4
 80135d4:	4629      	mov	r1, r5
 80135d6:	f7ec fe81 	bl	80002dc <__adddf3>
 80135da:	4604      	mov	r4, r0
 80135dc:	460d      	mov	r5, r1
 80135de:	e006      	b.n	80135ee <atan+0x3e>
 80135e0:	f1bb 0f00 	cmp.w	fp, #0
 80135e4:	f340 812b 	ble.w	801383e <atan+0x28e>
 80135e8:	a597      	add	r5, pc, #604	@ (adr r5, 8013848 <atan+0x298>)
 80135ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80135ee:	ec45 4b10 	vmov	d0, r4, r5
 80135f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135f6:	4bb2      	ldr	r3, [pc, #712]	@ (80138c0 <atan+0x310>)
 80135f8:	429e      	cmp	r6, r3
 80135fa:	d813      	bhi.n	8013624 <atan+0x74>
 80135fc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8013600:	429e      	cmp	r6, r3
 8013602:	d80c      	bhi.n	801361e <atan+0x6e>
 8013604:	a392      	add	r3, pc, #584	@ (adr r3, 8013850 <atan+0x2a0>)
 8013606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801360a:	4620      	mov	r0, r4
 801360c:	4629      	mov	r1, r5
 801360e:	f7ec fe65 	bl	80002dc <__adddf3>
 8013612:	4bac      	ldr	r3, [pc, #688]	@ (80138c4 <atan+0x314>)
 8013614:	2200      	movs	r2, #0
 8013616:	f7ed faa7 	bl	8000b68 <__aeabi_dcmpgt>
 801361a:	2800      	cmp	r0, #0
 801361c:	d1e7      	bne.n	80135ee <atan+0x3e>
 801361e:	f04f 3aff 	mov.w	sl, #4294967295
 8013622:	e029      	b.n	8013678 <atan+0xc8>
 8013624:	f7ff fb0e 	bl	8012c44 <fabs>
 8013628:	4ba7      	ldr	r3, [pc, #668]	@ (80138c8 <atan+0x318>)
 801362a:	429e      	cmp	r6, r3
 801362c:	ec55 4b10 	vmov	r4, r5, d0
 8013630:	f200 80bc 	bhi.w	80137ac <atan+0x1fc>
 8013634:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8013638:	429e      	cmp	r6, r3
 801363a:	f200 809e 	bhi.w	801377a <atan+0x1ca>
 801363e:	4622      	mov	r2, r4
 8013640:	462b      	mov	r3, r5
 8013642:	4620      	mov	r0, r4
 8013644:	4629      	mov	r1, r5
 8013646:	f7ec fe49 	bl	80002dc <__adddf3>
 801364a:	4b9e      	ldr	r3, [pc, #632]	@ (80138c4 <atan+0x314>)
 801364c:	2200      	movs	r2, #0
 801364e:	f7ec fe43 	bl	80002d8 <__aeabi_dsub>
 8013652:	2200      	movs	r2, #0
 8013654:	4606      	mov	r6, r0
 8013656:	460f      	mov	r7, r1
 8013658:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801365c:	4620      	mov	r0, r4
 801365e:	4629      	mov	r1, r5
 8013660:	f7ec fe3c 	bl	80002dc <__adddf3>
 8013664:	4602      	mov	r2, r0
 8013666:	460b      	mov	r3, r1
 8013668:	4630      	mov	r0, r6
 801366a:	4639      	mov	r1, r7
 801366c:	f7ed f916 	bl	800089c <__aeabi_ddiv>
 8013670:	f04f 0a00 	mov.w	sl, #0
 8013674:	4604      	mov	r4, r0
 8013676:	460d      	mov	r5, r1
 8013678:	4622      	mov	r2, r4
 801367a:	462b      	mov	r3, r5
 801367c:	4620      	mov	r0, r4
 801367e:	4629      	mov	r1, r5
 8013680:	f7ec ffe2 	bl	8000648 <__aeabi_dmul>
 8013684:	4602      	mov	r2, r0
 8013686:	460b      	mov	r3, r1
 8013688:	4680      	mov	r8, r0
 801368a:	4689      	mov	r9, r1
 801368c:	f7ec ffdc 	bl	8000648 <__aeabi_dmul>
 8013690:	a371      	add	r3, pc, #452	@ (adr r3, 8013858 <atan+0x2a8>)
 8013692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013696:	4606      	mov	r6, r0
 8013698:	460f      	mov	r7, r1
 801369a:	f7ec ffd5 	bl	8000648 <__aeabi_dmul>
 801369e:	a370      	add	r3, pc, #448	@ (adr r3, 8013860 <atan+0x2b0>)
 80136a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a4:	f7ec fe1a 	bl	80002dc <__adddf3>
 80136a8:	4632      	mov	r2, r6
 80136aa:	463b      	mov	r3, r7
 80136ac:	f7ec ffcc 	bl	8000648 <__aeabi_dmul>
 80136b0:	a36d      	add	r3, pc, #436	@ (adr r3, 8013868 <atan+0x2b8>)
 80136b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136b6:	f7ec fe11 	bl	80002dc <__adddf3>
 80136ba:	4632      	mov	r2, r6
 80136bc:	463b      	mov	r3, r7
 80136be:	f7ec ffc3 	bl	8000648 <__aeabi_dmul>
 80136c2:	a36b      	add	r3, pc, #428	@ (adr r3, 8013870 <atan+0x2c0>)
 80136c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136c8:	f7ec fe08 	bl	80002dc <__adddf3>
 80136cc:	4632      	mov	r2, r6
 80136ce:	463b      	mov	r3, r7
 80136d0:	f7ec ffba 	bl	8000648 <__aeabi_dmul>
 80136d4:	a368      	add	r3, pc, #416	@ (adr r3, 8013878 <atan+0x2c8>)
 80136d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136da:	f7ec fdff 	bl	80002dc <__adddf3>
 80136de:	4632      	mov	r2, r6
 80136e0:	463b      	mov	r3, r7
 80136e2:	f7ec ffb1 	bl	8000648 <__aeabi_dmul>
 80136e6:	a366      	add	r3, pc, #408	@ (adr r3, 8013880 <atan+0x2d0>)
 80136e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ec:	f7ec fdf6 	bl	80002dc <__adddf3>
 80136f0:	4642      	mov	r2, r8
 80136f2:	464b      	mov	r3, r9
 80136f4:	f7ec ffa8 	bl	8000648 <__aeabi_dmul>
 80136f8:	a363      	add	r3, pc, #396	@ (adr r3, 8013888 <atan+0x2d8>)
 80136fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136fe:	4680      	mov	r8, r0
 8013700:	4689      	mov	r9, r1
 8013702:	4630      	mov	r0, r6
 8013704:	4639      	mov	r1, r7
 8013706:	f7ec ff9f 	bl	8000648 <__aeabi_dmul>
 801370a:	a361      	add	r3, pc, #388	@ (adr r3, 8013890 <atan+0x2e0>)
 801370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013710:	f7ec fde2 	bl	80002d8 <__aeabi_dsub>
 8013714:	4632      	mov	r2, r6
 8013716:	463b      	mov	r3, r7
 8013718:	f7ec ff96 	bl	8000648 <__aeabi_dmul>
 801371c:	a35e      	add	r3, pc, #376	@ (adr r3, 8013898 <atan+0x2e8>)
 801371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013722:	f7ec fdd9 	bl	80002d8 <__aeabi_dsub>
 8013726:	4632      	mov	r2, r6
 8013728:	463b      	mov	r3, r7
 801372a:	f7ec ff8d 	bl	8000648 <__aeabi_dmul>
 801372e:	a35c      	add	r3, pc, #368	@ (adr r3, 80138a0 <atan+0x2f0>)
 8013730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013734:	f7ec fdd0 	bl	80002d8 <__aeabi_dsub>
 8013738:	4632      	mov	r2, r6
 801373a:	463b      	mov	r3, r7
 801373c:	f7ec ff84 	bl	8000648 <__aeabi_dmul>
 8013740:	a359      	add	r3, pc, #356	@ (adr r3, 80138a8 <atan+0x2f8>)
 8013742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013746:	f7ec fdc7 	bl	80002d8 <__aeabi_dsub>
 801374a:	4632      	mov	r2, r6
 801374c:	463b      	mov	r3, r7
 801374e:	f7ec ff7b 	bl	8000648 <__aeabi_dmul>
 8013752:	4602      	mov	r2, r0
 8013754:	460b      	mov	r3, r1
 8013756:	4640      	mov	r0, r8
 8013758:	4649      	mov	r1, r9
 801375a:	f7ec fdbf 	bl	80002dc <__adddf3>
 801375e:	4622      	mov	r2, r4
 8013760:	462b      	mov	r3, r5
 8013762:	f7ec ff71 	bl	8000648 <__aeabi_dmul>
 8013766:	f1ba 3fff 	cmp.w	sl, #4294967295
 801376a:	4602      	mov	r2, r0
 801376c:	460b      	mov	r3, r1
 801376e:	d148      	bne.n	8013802 <atan+0x252>
 8013770:	4620      	mov	r0, r4
 8013772:	4629      	mov	r1, r5
 8013774:	f7ec fdb0 	bl	80002d8 <__aeabi_dsub>
 8013778:	e72f      	b.n	80135da <atan+0x2a>
 801377a:	4b52      	ldr	r3, [pc, #328]	@ (80138c4 <atan+0x314>)
 801377c:	2200      	movs	r2, #0
 801377e:	4620      	mov	r0, r4
 8013780:	4629      	mov	r1, r5
 8013782:	f7ec fda9 	bl	80002d8 <__aeabi_dsub>
 8013786:	4b4f      	ldr	r3, [pc, #316]	@ (80138c4 <atan+0x314>)
 8013788:	4606      	mov	r6, r0
 801378a:	460f      	mov	r7, r1
 801378c:	2200      	movs	r2, #0
 801378e:	4620      	mov	r0, r4
 8013790:	4629      	mov	r1, r5
 8013792:	f7ec fda3 	bl	80002dc <__adddf3>
 8013796:	4602      	mov	r2, r0
 8013798:	460b      	mov	r3, r1
 801379a:	4630      	mov	r0, r6
 801379c:	4639      	mov	r1, r7
 801379e:	f7ed f87d 	bl	800089c <__aeabi_ddiv>
 80137a2:	f04f 0a01 	mov.w	sl, #1
 80137a6:	4604      	mov	r4, r0
 80137a8:	460d      	mov	r5, r1
 80137aa:	e765      	b.n	8013678 <atan+0xc8>
 80137ac:	4b47      	ldr	r3, [pc, #284]	@ (80138cc <atan+0x31c>)
 80137ae:	429e      	cmp	r6, r3
 80137b0:	d21c      	bcs.n	80137ec <atan+0x23c>
 80137b2:	4b47      	ldr	r3, [pc, #284]	@ (80138d0 <atan+0x320>)
 80137b4:	2200      	movs	r2, #0
 80137b6:	4620      	mov	r0, r4
 80137b8:	4629      	mov	r1, r5
 80137ba:	f7ec fd8d 	bl	80002d8 <__aeabi_dsub>
 80137be:	4b44      	ldr	r3, [pc, #272]	@ (80138d0 <atan+0x320>)
 80137c0:	4606      	mov	r6, r0
 80137c2:	460f      	mov	r7, r1
 80137c4:	2200      	movs	r2, #0
 80137c6:	4620      	mov	r0, r4
 80137c8:	4629      	mov	r1, r5
 80137ca:	f7ec ff3d 	bl	8000648 <__aeabi_dmul>
 80137ce:	4b3d      	ldr	r3, [pc, #244]	@ (80138c4 <atan+0x314>)
 80137d0:	2200      	movs	r2, #0
 80137d2:	f7ec fd83 	bl	80002dc <__adddf3>
 80137d6:	4602      	mov	r2, r0
 80137d8:	460b      	mov	r3, r1
 80137da:	4630      	mov	r0, r6
 80137dc:	4639      	mov	r1, r7
 80137de:	f7ed f85d 	bl	800089c <__aeabi_ddiv>
 80137e2:	f04f 0a02 	mov.w	sl, #2
 80137e6:	4604      	mov	r4, r0
 80137e8:	460d      	mov	r5, r1
 80137ea:	e745      	b.n	8013678 <atan+0xc8>
 80137ec:	4622      	mov	r2, r4
 80137ee:	462b      	mov	r3, r5
 80137f0:	4938      	ldr	r1, [pc, #224]	@ (80138d4 <atan+0x324>)
 80137f2:	2000      	movs	r0, #0
 80137f4:	f7ed f852 	bl	800089c <__aeabi_ddiv>
 80137f8:	f04f 0a03 	mov.w	sl, #3
 80137fc:	4604      	mov	r4, r0
 80137fe:	460d      	mov	r5, r1
 8013800:	e73a      	b.n	8013678 <atan+0xc8>
 8013802:	4b35      	ldr	r3, [pc, #212]	@ (80138d8 <atan+0x328>)
 8013804:	4e35      	ldr	r6, [pc, #212]	@ (80138dc <atan+0x32c>)
 8013806:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801380e:	f7ec fd63 	bl	80002d8 <__aeabi_dsub>
 8013812:	4622      	mov	r2, r4
 8013814:	462b      	mov	r3, r5
 8013816:	f7ec fd5f 	bl	80002d8 <__aeabi_dsub>
 801381a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801381e:	4602      	mov	r2, r0
 8013820:	460b      	mov	r3, r1
 8013822:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013826:	f7ec fd57 	bl	80002d8 <__aeabi_dsub>
 801382a:	f1bb 0f00 	cmp.w	fp, #0
 801382e:	4604      	mov	r4, r0
 8013830:	460d      	mov	r5, r1
 8013832:	f6bf aedc 	bge.w	80135ee <atan+0x3e>
 8013836:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801383a:	461d      	mov	r5, r3
 801383c:	e6d7      	b.n	80135ee <atan+0x3e>
 801383e:	a51c      	add	r5, pc, #112	@ (adr r5, 80138b0 <atan+0x300>)
 8013840:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013844:	e6d3      	b.n	80135ee <atan+0x3e>
 8013846:	bf00      	nop
 8013848:	54442d18 	.word	0x54442d18
 801384c:	3ff921fb 	.word	0x3ff921fb
 8013850:	8800759c 	.word	0x8800759c
 8013854:	7e37e43c 	.word	0x7e37e43c
 8013858:	e322da11 	.word	0xe322da11
 801385c:	3f90ad3a 	.word	0x3f90ad3a
 8013860:	24760deb 	.word	0x24760deb
 8013864:	3fa97b4b 	.word	0x3fa97b4b
 8013868:	a0d03d51 	.word	0xa0d03d51
 801386c:	3fb10d66 	.word	0x3fb10d66
 8013870:	c54c206e 	.word	0xc54c206e
 8013874:	3fb745cd 	.word	0x3fb745cd
 8013878:	920083ff 	.word	0x920083ff
 801387c:	3fc24924 	.word	0x3fc24924
 8013880:	5555550d 	.word	0x5555550d
 8013884:	3fd55555 	.word	0x3fd55555
 8013888:	2c6a6c2f 	.word	0x2c6a6c2f
 801388c:	bfa2b444 	.word	0xbfa2b444
 8013890:	52defd9a 	.word	0x52defd9a
 8013894:	3fadde2d 	.word	0x3fadde2d
 8013898:	af749a6d 	.word	0xaf749a6d
 801389c:	3fb3b0f2 	.word	0x3fb3b0f2
 80138a0:	fe231671 	.word	0xfe231671
 80138a4:	3fbc71c6 	.word	0x3fbc71c6
 80138a8:	9998ebc4 	.word	0x9998ebc4
 80138ac:	3fc99999 	.word	0x3fc99999
 80138b0:	54442d18 	.word	0x54442d18
 80138b4:	bff921fb 	.word	0xbff921fb
 80138b8:	440fffff 	.word	0x440fffff
 80138bc:	7ff00000 	.word	0x7ff00000
 80138c0:	3fdbffff 	.word	0x3fdbffff
 80138c4:	3ff00000 	.word	0x3ff00000
 80138c8:	3ff2ffff 	.word	0x3ff2ffff
 80138cc:	40038000 	.word	0x40038000
 80138d0:	3ff80000 	.word	0x3ff80000
 80138d4:	bff00000 	.word	0xbff00000
 80138d8:	08013f48 	.word	0x08013f48
 80138dc:	08013f68 	.word	0x08013f68

080138e0 <_init>:
 80138e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138e2:	bf00      	nop
 80138e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138e6:	bc08      	pop	{r3}
 80138e8:	469e      	mov	lr, r3
 80138ea:	4770      	bx	lr

080138ec <_fini>:
 80138ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138ee:	bf00      	nop
 80138f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138f2:	bc08      	pop	{r3}
 80138f4:	469e      	mov	lr, r3
 80138f6:	4770      	bx	lr
