
motorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000143c0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  080145a0  080145a0  000155a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014c10  08014c10  000162a8  2**0
                  CONTENTS
  4 .ARM          00000008  08014c10  08014c10  00015c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014c18  08014c18  000162a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014c18  08014c18  00015c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014c1c  08014c1c  00015c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002a8  20000000  08014c20  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bac  200002a8  08014ec8  000162a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e54  08014ec8  00016e54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000162a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026961  00000000  00000000  000162d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ec3  00000000  00000000  0003cc39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e60  00000000  00000000  00042b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000171e  00000000  00000000  00044960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000288bf  00000000  00000000  0004607e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d14a  00000000  00000000  0006e93d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9b10  00000000  00000000  0009ba87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00185597  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092e0  00000000  00000000  001855dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0018e8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002a8 	.word	0x200002a8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014588 	.word	0x08014588

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002ac 	.word	0x200002ac
 800021c:	08014588 	.word	0x08014588

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00f fdee 	bl	8010c30 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	223c      	movs	r2, #60	@ 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00f fde8 	bl	8010c30 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b55      	ldr	r3, [pc, #340]	@ (80011b8 <MX_ADC1_Init+0x184>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001068:	4b53      	ldr	r3, [pc, #332]	@ (80011b8 <MX_ADC1_Init+0x184>)
 800106a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b51      	ldr	r3, [pc, #324]	@ (80011b8 <MX_ADC1_Init+0x184>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b50      	ldr	r3, [pc, #320]	@ (80011b8 <MX_ADC1_Init+0x184>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107c:	4b4e      	ldr	r3, [pc, #312]	@ (80011b8 <MX_ADC1_Init+0x184>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001082:	4b4d      	ldr	r3, [pc, #308]	@ (80011b8 <MX_ADC1_Init+0x184>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b4b      	ldr	r3, [pc, #300]	@ (80011b8 <MX_ADC1_Init+0x184>)
 800108a:	2204      	movs	r2, #4
 800108c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b4a      	ldr	r3, [pc, #296]	@ (80011b8 <MX_ADC1_Init+0x184>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b48      	ldr	r3, [pc, #288]	@ (80011b8 <MX_ADC1_Init+0x184>)
 8001096:	2200      	movs	r2, #0
 8001098:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109a:	4b47      	ldr	r3, [pc, #284]	@ (80011b8 <MX_ADC1_Init+0x184>)
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b45      	ldr	r3, [pc, #276]	@ (80011b8 <MX_ADC1_Init+0x184>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b43      	ldr	r3, [pc, #268]	@ (80011b8 <MX_ADC1_Init+0x184>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b42      	ldr	r3, [pc, #264]	@ (80011b8 <MX_ADC1_Init+0x184>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b40      	ldr	r3, [pc, #256]	@ (80011b8 <MX_ADC1_Init+0x184>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b3e      	ldr	r3, [pc, #248]	@ (80011b8 <MX_ADC1_Init+0x184>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c2:	4b3d      	ldr	r3, [pc, #244]	@ (80011b8 <MX_ADC1_Init+0x184>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ca:	483b      	ldr	r0, [pc, #236]	@ (80011b8 <MX_ADC1_Init+0x184>)
 80010cc:	f001 fee6 	bl	8002e9c <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fcba 	bl	8001a4e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e2:	4619      	mov	r1, r3
 80010e4:	4834      	ldr	r0, [pc, #208]	@ (80011b8 <MX_ADC1_Init+0x184>)
 80010e6:	f004 f80f 	bl	8005108 <HAL_ADCEx_MultiModeConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f000 fcad 	bl	8001a4e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010f4:	4b31      	ldr	r3, [pc, #196]	@ (80011bc <MX_ADC1_Init+0x188>)
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001110:	4619      	mov	r1, r3
 8001112:	4829      	ldr	r0, [pc, #164]	@ (80011b8 <MX_ADC1_Init+0x184>)
 8001114:	f002 fa7e 	bl	8003614 <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800111e:	f000 fc96 	bl	8001a4e <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001122:	4b27      	ldr	r3, [pc, #156]	@ (80011c0 <MX_ADC1_Init+0x18c>)
 8001124:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001126:	2309      	movs	r3, #9
 8001128:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800112a:	2301      	movs	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 800113a:	2303      	movs	r3, #3
 800113c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T8_CC4;
 8001150:	239c      	movs	r3, #156	@ 0x9c
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	4815      	ldr	r0, [pc, #84]	@ (80011b8 <MX_ADC1_Init+0x184>)
 8001164:	f003 faf0 	bl	8004748 <HAL_ADCEx_InjectedConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800116e:	f000 fc6e 	bl	8001a4e <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <MX_ADC1_Init+0x190>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001176:	f240 130f 	movw	r3, #271	@ 0x10f
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <MX_ADC1_Init+0x184>)
 8001182:	f003 fae1 	bl	8004748 <HAL_ADCEx_InjectedConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800118c:	f000 fc5f 	bl	8001a4e <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001190:	4b0d      	ldr	r3, [pc, #52]	@ (80011c8 <MX_ADC1_Init+0x194>)
 8001192:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001194:	f240 2315 	movw	r3, #533	@ 0x215
 8001198:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	@ (80011b8 <MX_ADC1_Init+0x184>)
 80011a0:	f003 fad2 	bl	8004748 <HAL_ADCEx_InjectedConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 80011aa:	f000 fc50 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3768      	adds	r7, #104	@ 0x68
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200002c4 	.word	0x200002c4
 80011bc:	08600004 	.word	0x08600004
 80011c0:	32601000 	.word	0x32601000
 80011c4:	3ef08000 	.word	0x3ef08000
 80011c8:	2e300800 	.word	0x2e300800

080011cc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b090      	sub	sp, #64	@ 0x40
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	223c      	movs	r2, #60	@ 0x3c
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f00f fd29 	bl	8010c30 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011de:	4b31      	ldr	r3, [pc, #196]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 80011e0:	4a31      	ldr	r2, [pc, #196]	@ (80012a8 <MX_ADC2_Init+0xdc>)
 80011e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011e4:	4b2f      	ldr	r3, [pc, #188]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 80011e6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011ea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011ec:	4b2d      	ldr	r3, [pc, #180]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f2:	4b2c      	ldr	r3, [pc, #176]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011f8:	4b2a      	ldr	r3, [pc, #168]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011fe:	4b29      	ldr	r3, [pc, #164]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 8001200:	2200      	movs	r2, #0
 8001202:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001204:	4b27      	ldr	r3, [pc, #156]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 8001206:	2204      	movs	r2, #4
 8001208:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800120a:	4b26      	ldr	r3, [pc, #152]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 800120c:	2200      	movs	r2, #0
 800120e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001210:	4b24      	ldr	r3, [pc, #144]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 8001212:	2200      	movs	r2, #0
 8001214:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001216:	4b23      	ldr	r3, [pc, #140]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 8001218:	2201      	movs	r2, #1
 800121a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800121c:	4b21      	ldr	r3, [pc, #132]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001224:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800122c:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 800122e:	2200      	movs	r2, #0
 8001230:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001232:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800123a:	481a      	ldr	r0, [pc, #104]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 800123c:	f001 fe2e 	bl	8002e9c <HAL_ADC_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001246:	f000 fc02 	bl	8001a4e <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 800124a:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <MX_ADC2_Init+0xe0>)
 800124c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800124e:	2309      	movs	r3, #9
 8001250:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001252:	2301      	movs	r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001256:	237f      	movs	r3, #127	@ 0x7f
 8001258:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800125a:	2304      	movs	r3, #4
 800125c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001262:	2301      	movs	r3, #1
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T8_CC4;
 8001278:	239c      	movs	r3, #156	@ 0x9c
 800127a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800127c:	2380      	movs	r3, #128	@ 0x80
 800127e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	4619      	mov	r1, r3
 800128a:	4806      	ldr	r0, [pc, #24]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 800128c:	f003 fa5c 	bl	8004748 <HAL_ADCEx_InjectedConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8001296:	f000 fbda 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	3740      	adds	r7, #64	@ 0x40
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000330 	.word	0x20000330
 80012a8:	50000100 	.word	0x50000100
 80012ac:	3ef08000 	.word	0x3ef08000

080012b0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b09e      	sub	sp, #120	@ 0x78
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c8:	f107 0320 	add.w	r3, r7, #32
 80012cc:	2244      	movs	r2, #68	@ 0x44
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f00f fcad 	bl	8010c30 <memset>
  if(adcHandle->Instance==ADC1)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012de:	d15f      	bne.n	80013a0 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012e6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ec:	f107 0320 	add.w	r3, r7, #32
 80012f0:	4618      	mov	r0, r3
 80012f2:	f006 f81f 	bl	8007334 <HAL_RCCEx_PeriphCLKConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012fc:	f000 fba7 	bl	8001a4e <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001300:	4b4f      	ldr	r3, [pc, #316]	@ (8001440 <HAL_ADC_MspInit+0x190>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	4a4e      	ldr	r2, [pc, #312]	@ (8001440 <HAL_ADC_MspInit+0x190>)
 8001308:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800130a:	4b4d      	ldr	r3, [pc, #308]	@ (8001440 <HAL_ADC_MspInit+0x190>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d10b      	bne.n	800132a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001312:	4b4c      	ldr	r3, [pc, #304]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	4a4b      	ldr	r2, [pc, #300]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 8001318:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800131c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131e:	4b49      	ldr	r3, [pc, #292]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4b46      	ldr	r3, [pc, #280]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	4a45      	ldr	r2, [pc, #276]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001336:	4b43      	ldr	r3, [pc, #268]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
 8001340:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b40      	ldr	r3, [pc, #256]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	4a3f      	ldr	r2, [pc, #252]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134e:	4b3d      	ldr	r3, [pc, #244]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697b      	ldr	r3, [r7, #20]
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800135a:	2302      	movs	r3, #2
 800135c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135e:	2303      	movs	r3, #3
 8001360:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800136a:	4619      	mov	r1, r3
 800136c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001370:	f005 f84c 	bl	800640c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_14;
 8001374:	f245 0303 	movw	r3, #20483	@ 0x5003
 8001378:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137a:	2303      	movs	r3, #3
 800137c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001386:	4619      	mov	r1, r3
 8001388:	482f      	ldr	r0, [pc, #188]	@ (8001448 <HAL_ADC_MspInit+0x198>)
 800138a:	f005 f83f 	bl	800640c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	2012      	movs	r0, #18
 8001394:	f004 fa5f 	bl	8005856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001398:	2012      	movs	r0, #18
 800139a:	f004 fa76 	bl	800588a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800139e:	e04a      	b.n	8001436 <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a29      	ldr	r2, [pc, #164]	@ (800144c <HAL_ADC_MspInit+0x19c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d145      	bne.n	8001436 <HAL_ADC_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013ae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013b0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b6:	f107 0320 	add.w	r3, r7, #32
 80013ba:	4618      	mov	r0, r3
 80013bc:	f005 ffba 	bl	8007334 <HAL_RCCEx_PeriphCLKConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80013c6:	f000 fb42 	bl	8001a4e <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <HAL_ADC_MspInit+0x190>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001440 <HAL_ADC_MspInit+0x190>)
 80013d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <HAL_ADC_MspInit+0x190>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d10b      	bne.n	80013f4 <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013dc:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 80013de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e0:	4a18      	ldr	r2, [pc, #96]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 80013e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e8:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 80013ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f4:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 80013f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f8:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 80013fa:	f043 0302 	orr.w	r3, r3, #2
 80013fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001400:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 8001402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800140c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001410:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001412:	2303      	movs	r3, #3
 8001414:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800141e:	4619      	mov	r1, r3
 8001420:	4809      	ldr	r0, [pc, #36]	@ (8001448 <HAL_ADC_MspInit+0x198>)
 8001422:	f004 fff3 	bl	800640c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	2012      	movs	r0, #18
 800142c:	f004 fa13 	bl	8005856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001430:	2012      	movs	r0, #18
 8001432:	f004 fa2a 	bl	800588a <HAL_NVIC_EnableIRQ>
}
 8001436:	bf00      	nop
 8001438:	3778      	adds	r7, #120	@ 0x78
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000039c 	.word	0x2000039c
 8001444:	40021000 	.word	0x40021000
 8001448:	48000400 	.word	0x48000400
 800144c:	50000100 	.word	0x50000100

08001450 <MX_COMP1_Init>:
COMP_HandleTypeDef hcomp1;
COMP_HandleTypeDef hcomp4;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <MX_COMP1_Init+0x44>)
 8001456:	4a10      	ldr	r2, [pc, #64]	@ (8001498 <MX_COMP1_Init+0x48>)
 8001458:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_COMP1_Init+0x44>)
 800145c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001460:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8001462:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <MX_COMP1_Init+0x44>)
 8001464:	2240      	movs	r2, #64	@ 0x40
 8001466:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001468:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <MX_COMP1_Init+0x44>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800146e:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_COMP1_Init+0x44>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001474:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <MX_COMP1_Init+0x44>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 800147a:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <MX_COMP1_Init+0x44>)
 800147c:	2211      	movs	r2, #17
 800147e:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	@ (8001494 <MX_COMP1_Init+0x44>)
 8001482:	f003 ffa3 	bl	80053cc <HAL_COMP_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 800148c:	f000 fadf 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200003a0 	.word	0x200003a0
 8001498:	40010200 	.word	0x40010200

0800149c <MX_COMP4_Init>:
/* COMP4 init function */
void MX_COMP4_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <MX_COMP4_Init+0x44>)
 80014a2:	4a10      	ldr	r2, [pc, #64]	@ (80014e4 <MX_COMP4_Init+0x48>)
 80014a4:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <MX_COMP4_Init+0x44>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	605a      	str	r2, [r3, #4]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_COMP4_Init+0x44>)
 80014ae:	2240      	movs	r2, #64	@ 0x40
 80014b0:	609a      	str	r2, [r3, #8]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <MX_COMP4_Init+0x44>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80014b8:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_COMP4_Init+0x44>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80014be:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <MX_COMP4_Init+0x44>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 80014c4:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <MX_COMP4_Init+0x44>)
 80014c6:	2211      	movs	r2, #17
 80014c8:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 80014ca:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <MX_COMP4_Init+0x44>)
 80014cc:	f003 ff7e 	bl	80053cc <HAL_COMP_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_COMP4_Init+0x3e>
  {
    Error_Handler();
 80014d6:	f000 faba 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200003c4 	.word	0x200003c4
 80014e4:	4001020c 	.word	0x4001020c

080014e8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a26      	ldr	r2, [pc, #152]	@ (80015a0 <HAL_COMP_MspInit+0xb8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d120      	bne.n	800154c <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	4b26      	ldr	r3, [pc, #152]	@ (80015a4 <HAL_COMP_MspInit+0xbc>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	4a25      	ldr	r2, [pc, #148]	@ (80015a4 <HAL_COMP_MspInit+0xbc>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001516:	4b23      	ldr	r3, [pc, #140]	@ (80015a4 <HAL_COMP_MspInit+0xbc>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001522:	2302      	movs	r3, #2
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001526:	2303      	movs	r3, #3
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	481c      	ldr	r0, [pc, #112]	@ (80015a8 <HAL_COMP_MspInit+0xc0>)
 8001536:	f004 ff69 	bl	800640c <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2040      	movs	r0, #64	@ 0x40
 8001540:	f004 f989 	bl	8005856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8001544:	2040      	movs	r0, #64	@ 0x40
 8001546:	f004 f9a0 	bl	800588a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(COMP4_IRQn);
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }
}
 800154a:	e024      	b.n	8001596 <HAL_COMP_MspInit+0xae>
  else if(compHandle->Instance==COMP4)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a16      	ldr	r2, [pc, #88]	@ (80015ac <HAL_COMP_MspInit+0xc4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d11f      	bne.n	8001596 <HAL_COMP_MspInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <HAL_COMP_MspInit+0xbc>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155a:	4a12      	ldr	r2, [pc, #72]	@ (80015a4 <HAL_COMP_MspInit+0xbc>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <HAL_COMP_MspInit+0xbc>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800156e:	2301      	movs	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001572:	2303      	movs	r3, #3
 8001574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	4809      	ldr	r0, [pc, #36]	@ (80015a8 <HAL_COMP_MspInit+0xc0>)
 8001582:	f004 ff43 	bl	800640c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP4_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	2041      	movs	r0, #65	@ 0x41
 800158c:	f004 f963 	bl	8005856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP4_IRQn);
 8001590:	2041      	movs	r0, #65	@ 0x41
 8001592:	f004 f97a 	bl	800588a <HAL_NVIC_EnableIRQ>
}
 8001596:	bf00      	nop
 8001598:	3728      	adds	r7, #40	@ 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40010200 	.word	0x40010200
 80015a4:	40021000 	.word	0x40021000
 80015a8:	48000400 	.word	0x48000400
 80015ac:	4001020c 	.word	0x4001020c

080015b0 <MX_DAC3_Init>:

DAC_HandleTypeDef hdac3;

/* DAC3 init function */
void MX_DAC3_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	@ 0x30
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015b6:	463b      	mov	r3, r7
 80015b8:	2230      	movs	r2, #48	@ 0x30
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f00f fb37 	bl	8010c30 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 80015c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <MX_DAC3_Init+0x80>)
 80015c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001634 <MX_DAC3_Init+0x84>)
 80015c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 80015c8:	4819      	ldr	r0, [pc, #100]	@ (8001630 <MX_DAC3_Init+0x80>)
 80015ca:	f004 f978 	bl	80058be <HAL_DAC_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 80015d4:	f000 fa3b 	bl	8001a4e <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80015d8:	2302      	movs	r3, #2
 80015da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80015f0:	2302      	movs	r3, #2
 80015f2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015fc:	463b      	mov	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	4619      	mov	r1, r3
 8001602:	480b      	ldr	r0, [pc, #44]	@ (8001630 <MX_DAC3_Init+0x80>)
 8001604:	f004 fa18 	bl	8005a38 <HAL_DAC_ConfigChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800160e:	f000 fa1e 	bl	8001a4e <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001612:	463b      	mov	r3, r7
 8001614:	2210      	movs	r2, #16
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	@ (8001630 <MX_DAC3_Init+0x80>)
 800161a:	f004 fa0d 	bl	8005a38 <HAL_DAC_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8001624:	f000 fa13 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	3730      	adds	r7, #48	@ 0x30
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200003e8 	.word	0x200003e8
 8001634:	50001000 	.word	0x50001000

08001638 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC3)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <HAL_DAC_MspInit+0x38>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d10b      	bne.n	8001662 <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* DAC3 clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 800164a:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <HAL_DAC_MspInit+0x3c>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	4a09      	ldr	r2, [pc, #36]	@ (8001674 <HAL_DAC_MspInit+0x3c>)
 8001650:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001656:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <HAL_DAC_MspInit+0x3c>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	50001000 	.word	0x50001000
 8001674:	40021000 	.word	0x40021000

08001678 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800167e:	4b1e      	ldr	r3, [pc, #120]	@ (80016f8 <MX_DMA_Init+0x80>)
 8001680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001682:	4a1d      	ldr	r2, [pc, #116]	@ (80016f8 <MX_DMA_Init+0x80>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6493      	str	r3, [r2, #72]	@ 0x48
 800168a:	4b1b      	ldr	r3, [pc, #108]	@ (80016f8 <MX_DMA_Init+0x80>)
 800168c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001696:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <MX_DMA_Init+0x80>)
 8001698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800169a:	4a17      	ldr	r2, [pc, #92]	@ (80016f8 <MX_DMA_Init+0x80>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80016a2:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <MX_DMA_Init+0x80>)
 80016a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2101      	movs	r1, #1
 80016b2:	200b      	movs	r0, #11
 80016b4:	f004 f8cf 	bl	8005856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016b8:	200b      	movs	r0, #11
 80016ba:	f004 f8e6 	bl	800588a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2101      	movs	r1, #1
 80016c2:	200c      	movs	r0, #12
 80016c4:	f004 f8c7 	bl	8005856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016c8:	200c      	movs	r0, #12
 80016ca:	f004 f8de 	bl	800588a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	200d      	movs	r0, #13
 80016d4:	f004 f8bf 	bl	8005856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016d8:	200d      	movs	r0, #13
 80016da:	f004 f8d6 	bl	800588a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	200e      	movs	r0, #14
 80016e4:	f004 f8b7 	bl	8005856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80016e8:	200e      	movs	r0, #14
 80016ea:	f004 f8ce 	bl	800588a <HAL_NVIC_EnableIRQ>

}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000

080016fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	@ 0x28
 8001700:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	4b4d      	ldr	r3, [pc, #308]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001716:	4a4c      	ldr	r2, [pc, #304]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171e:	4b4a      	ldr	r3, [pc, #296]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800172a:	4b47      	ldr	r3, [pc, #284]	@ (8001848 <MX_GPIO_Init+0x14c>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172e:	4a46      	ldr	r2, [pc, #280]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001730:	f043 0320 	orr.w	r3, r3, #32
 8001734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001736:	4b44      	ldr	r3, [pc, #272]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	f003 0320 	and.w	r3, r3, #32
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b41      	ldr	r3, [pc, #260]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	4a40      	ldr	r2, [pc, #256]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174e:	4b3e      	ldr	r3, [pc, #248]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	4b3b      	ldr	r3, [pc, #236]	@ (8001848 <MX_GPIO_Init+0x14c>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	4a3a      	ldr	r2, [pc, #232]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001766:	4b38      	ldr	r3, [pc, #224]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|TEST_Pin, GPIO_PIN_SET);
 8001772:	2201      	movs	r2, #1
 8001774:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 8001778:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800177c:	f004 ffe0 	bl	8006740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS2_GPIO_Port, NSS2_Pin, GPIO_PIN_SET);
 8001780:	2201      	movs	r2, #1
 8001782:	2110      	movs	r1, #16
 8001784:	4831      	ldr	r0, [pc, #196]	@ (800184c <MX_GPIO_Init+0x150>)
 8001786:	f004 ffdb 	bl	8006740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS1_GPIO_Port, NSS1_Pin, GPIO_PIN_SET);
 800178a:	2201      	movs	r2, #1
 800178c:	2108      	movs	r1, #8
 800178e:	4830      	ldr	r0, [pc, #192]	@ (8001850 <MX_GPIO_Init+0x154>)
 8001790:	f004 ffd6 	bl	8006740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	4828      	ldr	r0, [pc, #160]	@ (800184c <MX_GPIO_Init+0x150>)
 80017aa:	f004 fe2f 	bl	800640c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80017ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4822      	ldr	r0, [pc, #136]	@ (800184c <MX_GPIO_Init+0x150>)
 80017c4:	f004 fe22 	bl	800640c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80017c8:	2310      	movs	r3, #16
 80017ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017cc:	2301      	movs	r3, #1
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017e2:	f004 fe13 	bl	800640c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS2_Pin;
 80017e6:	2310      	movs	r3, #16
 80017e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f2:	2302      	movs	r3, #2
 80017f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS2_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4813      	ldr	r0, [pc, #76]	@ (800184c <MX_GPIO_Init+0x150>)
 80017fe:	f004 fe05 	bl	800640c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001802:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001808:	2301      	movs	r3, #1
 800180a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001810:	2302      	movs	r3, #2
 8001812:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800181e:	f004 fdf5 	bl	800640c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS1_Pin;
 8001822:	2308      	movs	r3, #8
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182e:	2302      	movs	r3, #2
 8001830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS1_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	4805      	ldr	r0, [pc, #20]	@ (8001850 <MX_GPIO_Init+0x154>)
 800183a:	f004 fde7 	bl	800640c <HAL_GPIO_Init>

}
 800183e:	bf00      	nop
 8001840:	3728      	adds	r7, #40	@ 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	48000800 	.word	0x48000800
 8001850:	48000400 	.word	0x48000400

08001854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001858:	f001 f83b 	bl	80028d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185c:	f000 f8ae 	bl	80019bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001860:	f7ff ff4c 	bl	80016fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001864:	f7ff ff08 	bl	8001678 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001868:	f000 fe5e 	bl	8002528 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800186c:	f7ff fbe2 	bl	8001034 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001870:	f7ff fcac 	bl	80011cc <MX_ADC2_Init>
  MX_TIM1_Init();
 8001874:	f000 fb8c 	bl	8001f90 <MX_TIM1_Init>
  MX_DAC3_Init();
 8001878:	f7ff fe9a 	bl	80015b0 <MX_DAC3_Init>
  MX_SPI1_Init();
 800187c:	f000 f8ee 	bl	8001a5c <MX_SPI1_Init>
  MX_TIM8_Init();
 8001880:	f000 fc62 	bl	8002148 <MX_TIM8_Init>
  MX_SPI3_Init();
 8001884:	f000 f928 	bl	8001ad8 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8001888:	f000 fe02 	bl	8002490 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 800188c:	f7ff fde0 	bl	8001450 <MX_COMP1_Init>
  MX_COMP4_Init();
 8001890:	f7ff fe04 	bl	800149c <MX_COMP4_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 8001894:	f00b f8d8 	bl	800ca48 <appInit>
#if 1
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, sizeof(rxBuffer));
 8001898:	2264      	movs	r2, #100	@ 0x64
 800189a:	493c      	ldr	r1, [pc, #240]	@ (800198c <main+0x138>)
 800189c:	483c      	ldr	r0, [pc, #240]	@ (8001990 <main+0x13c>)
 800189e:	f009 fb5e 	bl	800af5e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80018a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001994 <main+0x140>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001994 <main+0x140>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0204 	bic.w	r2, r2, #4
 80018b0:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 80018b2:	2264      	movs	r2, #100	@ 0x64
 80018b4:	4935      	ldr	r1, [pc, #212]	@ (800198c <main+0x138>)
 80018b6:	4838      	ldr	r0, [pc, #224]	@ (8001998 <main+0x144>)
 80018b8:	f009 fb51 	bl	800af5e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80018bc:	4b37      	ldr	r3, [pc, #220]	@ (800199c <main+0x148>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b36      	ldr	r3, [pc, #216]	@ (800199c <main+0x148>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0204 	bic.w	r2, r2, #4
 80018ca:	601a      	str	r2, [r3, #0]
  // HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80018cc:	217f      	movs	r1, #127	@ 0x7f
 80018ce:	4834      	ldr	r0, [pc, #208]	@ (80019a0 <main+0x14c>)
 80018d0:	f002 fd1a 	bl	8004308 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80018d4:	217f      	movs	r1, #127	@ 0x7f
 80018d6:	4833      	ldr	r0, [pc, #204]	@ (80019a4 <main+0x150>)
 80018d8:	f002 fd16 	bl	8004308 <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 80018dc:	4b30      	ldr	r3, [pc, #192]	@ (80019a0 <main+0x14c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2220      	movs	r2, #32
 80018e2:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 80018e4:	4b2e      	ldr	r3, [pc, #184]	@ (80019a0 <main+0x14c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2204      	movs	r2, #4
 80018ea:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 80018ec:	4b2d      	ldr	r3, [pc, #180]	@ (80019a4 <main+0x150>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2220      	movs	r2, #32
 80018f2:	601a      	str	r2, [r3, #0]

  HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2300);
 80018f4:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 80018f8:	2200      	movs	r2, #0
 80018fa:	2100      	movs	r1, #0
 80018fc:	482a      	ldr	r0, [pc, #168]	@ (80019a8 <main+0x154>)
 80018fe:	f004 f86d 	bl	80059dc <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac3, DAC_CHANNEL_1);
 8001902:	2100      	movs	r1, #0
 8001904:	4828      	ldr	r0, [pc, #160]	@ (80019a8 <main+0x154>)
 8001906:	f003 fffd 	bl	8005904 <HAL_DAC_Start>
  HAL_COMP_Start(&hcomp1);
 800190a:	4828      	ldr	r0, [pc, #160]	@ (80019ac <main+0x158>)
 800190c:	f003 fe3a 	bl	8005584 <HAL_COMP_Start>

  HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 2300);
 8001910:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 8001914:	2200      	movs	r2, #0
 8001916:	2110      	movs	r1, #16
 8001918:	4823      	ldr	r0, [pc, #140]	@ (80019a8 <main+0x154>)
 800191a:	f004 f85f 	bl	80059dc <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac3, DAC_CHANNEL_2);
 800191e:	2110      	movs	r1, #16
 8001920:	4821      	ldr	r0, [pc, #132]	@ (80019a8 <main+0x154>)
 8001922:	f003 ffef 	bl	8005904 <HAL_DAC_Start>
  HAL_COMP_Start(&hcomp4);
 8001926:	4822      	ldr	r0, [pc, #136]	@ (80019b0 <main+0x15c>)
 8001928:	f003 fe2c 	bl	8005584 <HAL_COMP_Start>

  HAL_ADCEx_InjectedStart_IT(&hadc1);
 800192c:	481c      	ldr	r0, [pc, #112]	@ (80019a0 <main+0x14c>)
 800192e:	f002 fdfd 	bl	800452c <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 8001932:	481c      	ldr	r0, [pc, #112]	@ (80019a4 <main+0x150>)
 8001934:	f002 fd4a 	bl	80043cc <HAL_ADCEx_InjectedStart>

  HAL_TIM_Base_Start(&htim8);
 8001938:	481e      	ldr	r0, [pc, #120]	@ (80019b4 <main+0x160>)
 800193a:	f006 fb83 	bl	8008044 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800193e:	210c      	movs	r1, #12
 8001940:	481c      	ldr	r0, [pc, #112]	@ (80019b4 <main+0x160>)
 8001942:	f006 fc43 	bl	80081cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001946:	2100      	movs	r1, #0
 8001948:	481a      	ldr	r0, [pc, #104]	@ (80019b4 <main+0x160>)
 800194a:	f006 fc3f 	bl	80081cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800194e:	2104      	movs	r1, #4
 8001950:	4818      	ldr	r0, [pc, #96]	@ (80019b4 <main+0x160>)
 8001952:	f006 fc3b 	bl	80081cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001956:	2108      	movs	r1, #8
 8001958:	4816      	ldr	r0, [pc, #88]	@ (80019b4 <main+0x160>)
 800195a:	f006 fc37 	bl	80081cc <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1);
 800195e:	4816      	ldr	r0, [pc, #88]	@ (80019b8 <main+0x164>)
 8001960:	f006 fb70 	bl	8008044 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001964:	210c      	movs	r1, #12
 8001966:	4814      	ldr	r0, [pc, #80]	@ (80019b8 <main+0x164>)
 8001968:	f006 fc30 	bl	80081cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800196c:	2100      	movs	r1, #0
 800196e:	4812      	ldr	r0, [pc, #72]	@ (80019b8 <main+0x164>)
 8001970:	f006 fc2c 	bl	80081cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001974:	2104      	movs	r1, #4
 8001976:	4810      	ldr	r0, [pc, #64]	@ (80019b8 <main+0x164>)
 8001978:	f006 fc28 	bl	80081cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800197c:	2108      	movs	r1, #8
 800197e:	480e      	ldr	r0, [pc, #56]	@ (80019b8 <main+0x164>)
 8001980:	f006 fc24 	bl	80081cc <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
 8001984:	f00d fa10 	bl	800eda8 <userMain>
 8001988:	e7fc      	b.n	8001984 <main+0x130>
 800198a:	bf00      	nop
 800198c:	20000b94 	.word	0x20000b94
 8001990:	20000560 	.word	0x20000560
 8001994:	20000688 	.word	0x20000688
 8001998:	200005f4 	.word	0x200005f4
 800199c:	200007a8 	.word	0x200007a8
 80019a0:	200002c4 	.word	0x200002c4
 80019a4:	20000330 	.word	0x20000330
 80019a8:	200003e8 	.word	0x200003e8
 80019ac:	200003a0 	.word	0x200003a0
 80019b0:	200003c4 	.word	0x200003c4
 80019b4:	20000514 	.word	0x20000514
 80019b8:	200004c8 	.word	0x200004c8

080019bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b094      	sub	sp, #80	@ 0x50
 80019c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019c2:	f107 0318 	add.w	r3, r7, #24
 80019c6:	2238      	movs	r2, #56	@ 0x38
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f00f f930 	bl	8010c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80019de:	2000      	movs	r0, #0
 80019e0:	f004 fec6 	bl	8006770 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e4:	2301      	movs	r3, #1
 80019e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019ec:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ee:	2302      	movs	r3, #2
 80019f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f2:	2303      	movs	r3, #3
 80019f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80019f6:	2303      	movs	r3, #3
 80019f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80019fa:	2328      	movs	r3, #40	@ 0x28
 80019fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019fe:	2302      	movs	r3, #2
 8001a00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a02:	2302      	movs	r3, #2
 8001a04:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a06:	2302      	movs	r3, #2
 8001a08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0a:	f107 0318 	add.w	r3, r7, #24
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f004 ff62 	bl	80068d8 <HAL_RCC_OscConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001a1a:	f000 f818 	bl	8001a4e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a1e:	230f      	movs	r3, #15
 8001a20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a22:	2303      	movs	r3, #3
 8001a24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	2104      	movs	r1, #4
 8001a36:	4618      	mov	r0, r3
 8001a38:	f005 fa60 	bl	8006efc <HAL_RCC_ClockConfig>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001a42:	f000 f804 	bl	8001a4e <Error_Handler>
  }
}
 8001a46:	bf00      	nop
 8001a48:	3750      	adds	r7, #80	@ 0x50
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a52:	b672      	cpsid	i
}
 8001a54:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a56:	bf00      	nop
 8001a58:	e7fd      	b.n	8001a56 <Error_Handler+0x8>
	...

08001a5c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a62:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad4 <MX_SPI1_Init+0x78>)
 8001a64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a74:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a76:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001a7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a7e:	2202      	movs	r2, #2
 8001a80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a82:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a92:	2238      	movs	r2, #56	@ 0x38
 8001a94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001aaa:	2207      	movs	r2, #7
 8001aac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001aae:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aba:	4805      	ldr	r0, [pc, #20]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001abc:	f005 fe2a 	bl	8007714 <HAL_SPI_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ac6:	f7ff ffc2 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200003fc 	.word	0x200003fc
 8001ad4:	40013000 	.word	0x40013000

08001ad8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001ade:	4a1c      	ldr	r2, [pc, #112]	@ (8001b50 <MX_SPI3_Init+0x78>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001ae4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ae8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001aea:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001af0:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001af2:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001af6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001af8:	4b14      	ldr	r3, [pc, #80]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001afe:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b0a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b0e:	2210      	movs	r2, #16
 8001b10:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001b24:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b26:	2207      	movs	r2, #7
 8001b28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b2a:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b36:	4805      	ldr	r0, [pc, #20]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b38:	f005 fdec 	bl	8007714 <HAL_SPI_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001b42:	f7ff ff84 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000460 	.word	0x20000460
 8001b50:	40003c00 	.word	0x40003c00

08001b54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08c      	sub	sp, #48	@ 0x30
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a3d      	ldr	r2, [pc, #244]	@ (8001c68 <HAL_SPI_MspInit+0x114>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d129      	bne.n	8001bca <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b76:	4b3d      	ldr	r3, [pc, #244]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7a:	4a3c      	ldr	r2, [pc, #240]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001b7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b80:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b82:	4b3a      	ldr	r3, [pc, #232]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b37      	ldr	r3, [pc, #220]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b92:	4a36      	ldr	r2, [pc, #216]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b9a:	4b34      	ldr	r3, [pc, #208]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ba6:	23e0      	movs	r3, #224	@ 0xe0
 8001ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bb6:	2305      	movs	r3, #5
 8001bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 031c 	add.w	r3, r7, #28
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc4:	f004 fc22 	bl	800640c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001bc8:	e049      	b.n	8001c5e <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a28      	ldr	r2, [pc, #160]	@ (8001c70 <HAL_SPI_MspInit+0x11c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d144      	bne.n	8001c5e <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bd4:	4b25      	ldr	r3, [pc, #148]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd8:	4a24      	ldr	r2, [pc, #144]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bde:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be0:	4b22      	ldr	r3, [pc, #136]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bec:	4b1f      	ldr	r3, [pc, #124]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf0:	4a1e      	ldr	r2, [pc, #120]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001bf2:	f043 0304 	orr.w	r3, r3, #4
 8001bf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c04:	4b19      	ldr	r3, [pc, #100]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c08:	4a18      	ldr	r2, [pc, #96]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001c0a:	f043 0302 	orr.w	r3, r3, #2
 8001c0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c10:	4b16      	ldr	r3, [pc, #88]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c1c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c2e:	2306      	movs	r3, #6
 8001c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	4619      	mov	r1, r3
 8001c38:	480e      	ldr	r0, [pc, #56]	@ (8001c74 <HAL_SPI_MspInit+0x120>)
 8001c3a:	f004 fbe7 	bl	800640c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c4e:	2306      	movs	r3, #6
 8001c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c52:	f107 031c 	add.w	r3, r7, #28
 8001c56:	4619      	mov	r1, r3
 8001c58:	4807      	ldr	r0, [pc, #28]	@ (8001c78 <HAL_SPI_MspInit+0x124>)
 8001c5a:	f004 fbd7 	bl	800640c <HAL_GPIO_Init>
}
 8001c5e:	bf00      	nop
 8001c60:	3730      	adds	r7, #48	@ 0x30
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40013000 	.word	0x40013000
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40003c00 	.word	0x40003c00
 8001c74:	48000800 	.word	0x48000800
 8001c78:	48000400 	.word	0x48000400

08001c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c82:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c86:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9e:	4a08      	ldr	r2, [pc, #32]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001cb2:	f004 fe01 	bl	80068b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000

08001cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <NMI_Handler+0x4>

08001ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <HardFault_Handler+0x4>

08001cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <MemManage_Handler+0x4>

08001cdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <BusFault_Handler+0x4>

08001ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <UsageFault_Handler+0x4>

08001cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d1a:	f000 fe2d 	bl	8002978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001d28:	4802      	ldr	r0, [pc, #8]	@ (8001d34 <DMA1_Channel1_IRQHandler+0x10>)
 8001d2a:	f004 fa20 	bl	800616e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000748 	.word	0x20000748

08001d38 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d3c:	4802      	ldr	r0, [pc, #8]	@ (8001d48 <DMA1_Channel2_IRQHandler+0x10>)
 8001d3e:	f004 fa16 	bl	800616e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200007a8 	.word	0x200007a8

08001d4c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d50:	4802      	ldr	r0, [pc, #8]	@ (8001d5c <DMA1_Channel3_IRQHandler+0x10>)
 8001d52:	f004 fa0c 	bl	800616e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000688 	.word	0x20000688

08001d60 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d64:	4802      	ldr	r0, [pc, #8]	@ (8001d70 <DMA1_Channel4_IRQHandler+0x10>)
 8001d66:	f004 fa02 	bl	800616e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200006e8 	.word	0x200006e8

08001d74 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d78:	4803      	ldr	r0, [pc, #12]	@ (8001d88 <ADC1_2_IRQHandler+0x14>)
 8001d7a:	f001 fa13 	bl	80031a4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001d7e:	4803      	ldr	r0, [pc, #12]	@ (8001d8c <ADC1_2_IRQHandler+0x18>)
 8001d80:	f001 fa10 	bl	80031a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200002c4 	.word	0x200002c4
 8001d8c:	20000330 	.word	0x20000330

08001d90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d94:	4802      	ldr	r0, [pc, #8]	@ (8001da0 <USART2_IRQHandler+0x10>)
 8001d96:	f007 fd55 	bl	8009844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000560 	.word	0x20000560

08001da4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001da8:	4802      	ldr	r0, [pc, #8]	@ (8001db4 <USART3_IRQHandler+0x10>)
 8001daa:	f007 fd4b 	bl	8009844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200005f4 	.word	0x200005f4

08001db8 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001dbc:	4802      	ldr	r0, [pc, #8]	@ (8001dc8 <COMP1_2_3_IRQHandler+0x10>)
 8001dbe:	f003 fc29 	bl	8005614 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200003a0 	.word	0x200003a0

08001dcc <COMP4_IRQHandler>:

/**
  * @brief This function handles COMP4 interrupt through EXTI line 30.
  */
void COMP4_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP4_IRQn 0 */

  /* USER CODE END COMP4_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp4);
 8001dd0:	4802      	ldr	r0, [pc, #8]	@ (8001ddc <COMP4_IRQHandler+0x10>)
 8001dd2:	f003 fc1f 	bl	8005614 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP4_IRQn 1 */

  /* USER CODE END COMP4_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200003c4 	.word	0x200003c4

08001de0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return 1;
 8001de4:	2301      	movs	r3, #1
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <_kill>:

int _kill(int pid, int sig)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dfa:	f00e ff7d 	bl	8010cf8 <__errno>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2216      	movs	r2, #22
 8001e02:	601a      	str	r2, [r3, #0]
  return -1;
 8001e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <_exit>:

void _exit (int status)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e18:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ffe7 	bl	8001df0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e22:	bf00      	nop
 8001e24:	e7fd      	b.n	8001e22 <_exit+0x12>

08001e26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	e00a      	b.n	8001e4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e38:	f3af 8000 	nop.w
 8001e3c:	4601      	mov	r1, r0
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	60ba      	str	r2, [r7, #8]
 8001e44:	b2ca      	uxtb	r2, r1
 8001e46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	dbf0      	blt.n	8001e38 <_read+0x12>
  }

  return len;
 8001e56:	687b      	ldr	r3, [r7, #4]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	e009      	b.n	8001e86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	60ba      	str	r2, [r7, #8]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	3301      	adds	r3, #1
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	dbf1      	blt.n	8001e72 <_write+0x12>
  }
  return len;
 8001e8e:	687b      	ldr	r3, [r7, #4]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <_close>:

int _close(int file)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ea0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ec0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <_isatty>:

int _isatty(int file)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ed8:	2301      	movs	r3, #1
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b085      	sub	sp, #20
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f08:	4a14      	ldr	r2, [pc, #80]	@ (8001f5c <_sbrk+0x5c>)
 8001f0a:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <_sbrk+0x60>)
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f14:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <_sbrk+0x64>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	@ (8001f68 <_sbrk+0x68>)
 8001f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d207      	bcs.n	8001f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f30:	f00e fee2 	bl	8010cf8 <__errno>
 8001f34:	4603      	mov	r3, r0
 8001f36:	220c      	movs	r2, #12
 8001f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	e009      	b.n	8001f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f40:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f46:	4b07      	ldr	r3, [pc, #28]	@ (8001f64 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4a05      	ldr	r2, [pc, #20]	@ (8001f64 <_sbrk+0x64>)
 8001f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20008000 	.word	0x20008000
 8001f60:	00000400 	.word	0x00000400
 8001f64:	200004c4 	.word	0x200004c4
 8001f68:	20000e58 	.word	0x20000e58

08001f6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <SystemInit+0x20>)
 8001f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f76:	4a05      	ldr	r2, [pc, #20]	@ (8001f8c <SystemInit+0x20>)
 8001f78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b09c      	sub	sp, #112	@ 0x70
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f96:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fb0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
 8001fc0:	615a      	str	r2, [r3, #20]
 8001fc2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	2234      	movs	r2, #52	@ 0x34
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f00e fe30 	bl	8010c30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fd0:	4b5b      	ldr	r3, [pc, #364]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8001fd2:	4a5c      	ldr	r2, [pc, #368]	@ (8002144 <MX_TIM1_Init+0x1b4>)
 8001fd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8001fd6:	4b5a      	ldr	r3, [pc, #360]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001fdc:	4b58      	ldr	r3, [pc, #352]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8001fde:	2220      	movs	r2, #32
 8001fe0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8001fe2:	4b57      	ldr	r3, [pc, #348]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8001fe4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001fe8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001fea:	4b55      	ldr	r3, [pc, #340]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8001fec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ff0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001ff2:	4b53      	ldr	r3, [pc, #332]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff8:	4b51      	ldr	r3, [pc, #324]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ffe:	4850      	ldr	r0, [pc, #320]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8002000:	f005 ffc8 	bl	8007f94 <HAL_TIM_Base_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800200a:	f7ff fd20 	bl	8001a4e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800200e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002012:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002014:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002018:	4619      	mov	r1, r3
 800201a:	4849      	ldr	r0, [pc, #292]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 800201c:	f006 fb80 	bl	8008720 <HAL_TIM_ConfigClockSource>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8002026:	f7ff fd12 	bl	8001a4e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800202a:	4845      	ldr	r0, [pc, #276]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 800202c:	f006 f86c 	bl	8008108 <HAL_TIM_PWM_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8002036:	f7ff fd0a 	bl	8001a4e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800203a:	2370      	movs	r3, #112	@ 0x70
 800203c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002046:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800204a:	4619      	mov	r1, r3
 800204c:	483c      	ldr	r0, [pc, #240]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 800204e:	f007 f8b5 	bl	80091bc <HAL_TIMEx_MasterConfigSynchronization>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002058:	f7ff fcf9 	bl	8001a4e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800205c:	2360      	movs	r3, #96	@ 0x60
 800205e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002064:	2300      	movs	r3, #0
 8002066:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002068:	2300      	movs	r3, #0
 800206a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002070:	2300      	movs	r3, #0
 8002072:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002074:	2300      	movs	r3, #0
 8002076:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002078:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800207c:	2200      	movs	r2, #0
 800207e:	4619      	mov	r1, r3
 8002080:	482f      	ldr	r0, [pc, #188]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8002082:	f006 fa39 	bl	80084f8 <HAL_TIM_PWM_ConfigChannel>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800208c:	f7ff fcdf 	bl	8001a4e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002090:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002094:	2204      	movs	r2, #4
 8002096:	4619      	mov	r1, r3
 8002098:	4829      	ldr	r0, [pc, #164]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 800209a:	f006 fa2d 	bl	80084f8 <HAL_TIM_PWM_ConfigChannel>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80020a4:	f7ff fcd3 	bl	8001a4e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020ac:	2208      	movs	r2, #8
 80020ae:	4619      	mov	r1, r3
 80020b0:	4823      	ldr	r0, [pc, #140]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 80020b2:	f006 fa21 	bl	80084f8 <HAL_TIM_PWM_ConfigChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80020bc:	f7ff fcc7 	bl	8001a4e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80020c0:	2370      	movs	r3, #112	@ 0x70
 80020c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 80020c4:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 80020c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020ce:	220c      	movs	r2, #12
 80020d0:	4619      	mov	r1, r3
 80020d2:	481b      	ldr	r0, [pc, #108]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 80020d4:	f006 fa10 	bl	80084f8 <HAL_TIM_PWM_ConfigChannel>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 80020de:	f7ff fcb6 	bl	8001a4e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80020f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 2;
 80020fe:	2302      	movs	r3, #2
 8002100:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002102:	2300      	movs	r3, #0
 8002104:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800210a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800210e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002114:	2300      	movs	r3, #0
 8002116:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	4619      	mov	r1, r3
 8002120:	4807      	ldr	r0, [pc, #28]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8002122:	f007 f8cd 	bl	80092c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM1_Init+0x1a0>
  {
    Error_Handler();
 800212c:	f7ff fc8f 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002130:	4803      	ldr	r0, [pc, #12]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8002132:	f000 f93f 	bl	80023b4 <HAL_TIM_MspPostInit>

}
 8002136:	bf00      	nop
 8002138:	3770      	adds	r7, #112	@ 0x70
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200004c8 	.word	0x200004c8
 8002144:	40012c00 	.word	0x40012c00

08002148 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b09e      	sub	sp, #120	@ 0x78
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800214e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800215c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8002168:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002174:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
 8002184:	615a      	str	r2, [r3, #20]
 8002186:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002188:	463b      	mov	r3, r7
 800218a:	2234      	movs	r2, #52	@ 0x34
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f00e fd4e 	bl	8010c30 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002194:	4b6b      	ldr	r3, [pc, #428]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 8002196:	4a6c      	ldr	r2, [pc, #432]	@ (8002348 <MX_TIM8_Init+0x200>)
 8002198:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800219a:	4b6a      	ldr	r3, [pc, #424]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 800219c:	2200      	movs	r2, #0
 800219e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80021a0:	4b68      	ldr	r3, [pc, #416]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80021a2:	2220      	movs	r2, #32
 80021a4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7999;
 80021a6:	4b67      	ldr	r3, [pc, #412]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80021a8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80021ac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80021ae:	4b65      	ldr	r3, [pc, #404]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80021b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021b4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 80021b6:	4b63      	ldr	r3, [pc, #396]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021bc:	4b61      	ldr	r3, [pc, #388]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80021be:	2200      	movs	r2, #0
 80021c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80021c2:	4860      	ldr	r0, [pc, #384]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80021c4:	f005 fee6 	bl	8007f94 <HAL_TIM_Base_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80021ce:	f7ff fc3e 	bl	8001a4e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80021d8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80021dc:	4619      	mov	r1, r3
 80021de:	4859      	ldr	r0, [pc, #356]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80021e0:	f006 fa9e 	bl	8008720 <HAL_TIM_ConfigClockSource>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80021ea:	f7ff fc30 	bl	8001a4e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80021ee:	4855      	ldr	r0, [pc, #340]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80021f0:	f005 ff8a 	bl	8008108 <HAL_TIM_PWM_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 80021fa:	f7ff fc28 	bl	8001a4e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80021fe:	2370      	movs	r3, #112	@ 0x70
 8002200:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800220a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800220e:	4619      	mov	r1, r3
 8002210:	484c      	ldr	r0, [pc, #304]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 8002212:	f006 ffd3 	bl	80091bc <HAL_TIMEx_MasterConfigSynchronization>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM8_Init+0xd8>
  {
    Error_Handler();
 800221c:	f7ff fc17 	bl	8001a4e <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8002220:	2302      	movs	r3, #2
 8002222:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8002224:	2301      	movs	r3, #1
 8002226:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8002228:	2300      	movs	r3, #0
 800222a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim8, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800222c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002230:	461a      	mov	r2, r3
 8002232:	2101      	movs	r1, #1
 8002234:	4843      	ldr	r0, [pc, #268]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 8002236:	f007 f8cf 	bl	80093d8 <HAL_TIMEx_ConfigBreakInput>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8002240:	f7ff fc05 	bl	8001a4e <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8002244:	2310      	movs	r3, #16
 8002246:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim8, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002248:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800224c:	461a      	mov	r2, r3
 800224e:	2101      	movs	r1, #1
 8002250:	483c      	ldr	r0, [pc, #240]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 8002252:	f007 f8c1 	bl	80093d8 <HAL_TIMEx_ConfigBreakInput>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 800225c:	f7ff fbf7 	bl	8001a4e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002260:	2360      	movs	r3, #96	@ 0x60
 8002262:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002268:	2300      	movs	r3, #0
 800226a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800226c:	2300      	movs	r3, #0
 800226e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002270:	2300      	movs	r3, #0
 8002272:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002274:	2300      	movs	r3, #0
 8002276:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002278:	2300      	movs	r3, #0
 800227a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800227c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002280:	2200      	movs	r2, #0
 8002282:	4619      	mov	r1, r3
 8002284:	482f      	ldr	r0, [pc, #188]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 8002286:	f006 f937 	bl	80084f8 <HAL_TIM_PWM_ConfigChannel>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM8_Init+0x14c>
  {
    Error_Handler();
 8002290:	f7ff fbdd 	bl	8001a4e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002294:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002298:	2204      	movs	r2, #4
 800229a:	4619      	mov	r1, r3
 800229c:	4829      	ldr	r0, [pc, #164]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 800229e:	f006 f92b 	bl	80084f8 <HAL_TIM_PWM_ConfigChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 80022a8:	f7ff fbd1 	bl	8001a4e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022b0:	2208      	movs	r2, #8
 80022b2:	4619      	mov	r1, r3
 80022b4:	4823      	ldr	r0, [pc, #140]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80022b6:	f006 f91f 	bl	80084f8 <HAL_TIM_PWM_ConfigChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_TIM8_Init+0x17c>
  {
    Error_Handler();
 80022c0:	f7ff fbc5 	bl	8001a4e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80022c4:	2370      	movs	r3, #112	@ 0x70
 80022c6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 7998;
 80022c8:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 80022cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022d2:	220c      	movs	r2, #12
 80022d4:	4619      	mov	r1, r3
 80022d6:	481b      	ldr	r0, [pc, #108]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80022d8:	f006 f90e 	bl	80084f8 <HAL_TIM_PWM_ConfigChannel>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM8_Init+0x19e>
  {
    Error_Handler();
 80022e2:	f7ff fbb4 	bl	8001a4e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80022f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002300:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8002302:	230a      	movs	r3, #10
 8002304:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800230e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002318:	2300      	movs	r3, #0
 800231a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002320:	463b      	mov	r3, r7
 8002322:	4619      	mov	r1, r3
 8002324:	4807      	ldr	r0, [pc, #28]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 8002326:	f006 ffcb 	bl	80092c0 <HAL_TIMEx_ConfigBreakDeadTime>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM8_Init+0x1ec>
  {
    Error_Handler();
 8002330:	f7ff fb8d 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002334:	4803      	ldr	r0, [pc, #12]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 8002336:	f000 f83d 	bl	80023b4 <HAL_TIM_MspPostInit>

}
 800233a:	bf00      	nop
 800233c:	3778      	adds	r7, #120	@ 0x78
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000514 	.word	0x20000514
 8002348:	40013400 	.word	0x40013400

0800234c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a13      	ldr	r2, [pc, #76]	@ (80023a8 <HAL_TIM_Base_MspInit+0x5c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d10c      	bne.n	8002378 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800235e:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <HAL_TIM_Base_MspInit+0x60>)
 8002360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002362:	4a12      	ldr	r2, [pc, #72]	@ (80023ac <HAL_TIM_Base_MspInit+0x60>)
 8002364:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002368:	6613      	str	r3, [r2, #96]	@ 0x60
 800236a:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <HAL_TIM_Base_MspInit+0x60>)
 800236c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800236e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002376:	e010      	b.n	800239a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM8)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0c      	ldr	r2, [pc, #48]	@ (80023b0 <HAL_TIM_Base_MspInit+0x64>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d10b      	bne.n	800239a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002382:	4b0a      	ldr	r3, [pc, #40]	@ (80023ac <HAL_TIM_Base_MspInit+0x60>)
 8002384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002386:	4a09      	ldr	r2, [pc, #36]	@ (80023ac <HAL_TIM_Base_MspInit+0x60>)
 8002388:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800238c:	6613      	str	r3, [r2, #96]	@ 0x60
 800238e:	4b07      	ldr	r3, [pc, #28]	@ (80023ac <HAL_TIM_Base_MspInit+0x60>)
 8002390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002392:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
}
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40012c00 	.word	0x40012c00
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40013400 	.word	0x40013400

080023b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	@ 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002480 <HAL_TIM_MspPostInit+0xcc>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d11e      	bne.n	8002414 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002484 <HAL_TIM_MspPostInit+0xd0>)
 80023d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023da:	4a2a      	ldr	r2, [pc, #168]	@ (8002484 <HAL_TIM_MspPostInit+0xd0>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023e2:	4b28      	ldr	r3, [pc, #160]	@ (8002484 <HAL_TIM_MspPostInit+0xd0>)
 80023e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80023ee:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80023f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	2300      	movs	r3, #0
 80023fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002400:	2306      	movs	r3, #6
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	4619      	mov	r1, r3
 800240a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800240e:	f003 fffd 	bl	800640c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002412:	e031      	b.n	8002478 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM8)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a1b      	ldr	r2, [pc, #108]	@ (8002488 <HAL_TIM_MspPostInit+0xd4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d12c      	bne.n	8002478 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241e:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <HAL_TIM_MspPostInit+0xd0>)
 8002420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002422:	4a18      	ldr	r2, [pc, #96]	@ (8002484 <HAL_TIM_MspPostInit+0xd0>)
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800242a:	4b16      	ldr	r3, [pc, #88]	@ (8002484 <HAL_TIM_MspPostInit+0xd0>)
 800242c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002436:	2340      	movs	r3, #64	@ 0x40
 8002438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	2300      	movs	r3, #0
 8002444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8002446:	2305      	movs	r3, #5
 8002448:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244a:	f107 0314 	add.w	r3, r7, #20
 800244e:	4619      	mov	r1, r3
 8002450:	480e      	ldr	r0, [pc, #56]	@ (800248c <HAL_TIM_MspPostInit+0xd8>)
 8002452:	f003 ffdb 	bl	800640c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002456:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800245a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002468:	230a      	movs	r3, #10
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	4806      	ldr	r0, [pc, #24]	@ (800248c <HAL_TIM_MspPostInit+0xd8>)
 8002474:	f003 ffca 	bl	800640c <HAL_GPIO_Init>
}
 8002478:	bf00      	nop
 800247a:	3728      	adds	r7, #40	@ 0x28
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40012c00 	.word	0x40012c00
 8002484:	40021000 	.word	0x40021000
 8002488:	40013400 	.word	0x40013400
 800248c:	48000400 	.word	0x48000400

08002490 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002494:	4b22      	ldr	r3, [pc, #136]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 8002496:	4a23      	ldr	r2, [pc, #140]	@ (8002524 <MX_USART2_UART_Init+0x94>)
 8002498:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800249a:	4b21      	ldr	r3, [pc, #132]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 800249c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024b6:	220c      	movs	r2, #12
 80024b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ba:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c0:	4b17      	ldr	r3, [pc, #92]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024c6:	4b16      	ldr	r3, [pc, #88]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024cc:	4b14      	ldr	r3, [pc, #80]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024d2:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024d8:	4811      	ldr	r0, [pc, #68]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024da:	f007 f855 	bl	8009588 <HAL_UART_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80024e4:	f7ff fab3 	bl	8001a4e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024e8:	2100      	movs	r1, #0
 80024ea:	480d      	ldr	r0, [pc, #52]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024ec:	f008 fcbb 	bl	800ae66 <HAL_UARTEx_SetTxFifoThreshold>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80024f6:	f7ff faaa 	bl	8001a4e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024fa:	2100      	movs	r1, #0
 80024fc:	4808      	ldr	r0, [pc, #32]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024fe:	f008 fcf0 	bl	800aee2 <HAL_UARTEx_SetRxFifoThreshold>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002508:	f7ff faa1 	bl	8001a4e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800250c:	4804      	ldr	r0, [pc, #16]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 800250e:	f008 fc71 	bl	800adf4 <HAL_UARTEx_DisableFifoMode>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002518:	f7ff fa99 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000560 	.word	0x20000560
 8002524:	40004400 	.word	0x40004400

08002528 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800252c:	4b22      	ldr	r3, [pc, #136]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 800252e:	4a23      	ldr	r2, [pc, #140]	@ (80025bc <MX_USART3_UART_Init+0x94>)
 8002530:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8002532:	4b21      	ldr	r3, [pc, #132]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 8002534:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002538:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800253a:	4b1f      	ldr	r3, [pc, #124]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002540:	4b1d      	ldr	r3, [pc, #116]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002546:	4b1c      	ldr	r3, [pc, #112]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800254c:	4b1a      	ldr	r3, [pc, #104]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 800254e:	220c      	movs	r2, #12
 8002550:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002552:	4b19      	ldr	r3, [pc, #100]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002558:	4b17      	ldr	r3, [pc, #92]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 800255a:	2200      	movs	r2, #0
 800255c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800255e:	4b16      	ldr	r3, [pc, #88]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 8002560:	2200      	movs	r2, #0
 8002562:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002564:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 8002566:	2200      	movs	r2, #0
 8002568:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800256a:	4b13      	ldr	r3, [pc, #76]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 800256c:	2200      	movs	r2, #0
 800256e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002570:	4811      	ldr	r0, [pc, #68]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 8002572:	f007 f809 	bl	8009588 <HAL_UART_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800257c:	f7ff fa67 	bl	8001a4e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002580:	2100      	movs	r1, #0
 8002582:	480d      	ldr	r0, [pc, #52]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 8002584:	f008 fc6f 	bl	800ae66 <HAL_UARTEx_SetTxFifoThreshold>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800258e:	f7ff fa5e 	bl	8001a4e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002592:	2100      	movs	r1, #0
 8002594:	4808      	ldr	r0, [pc, #32]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 8002596:	f008 fca4 	bl	800aee2 <HAL_UARTEx_SetRxFifoThreshold>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80025a0:	f7ff fa55 	bl	8001a4e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80025a4:	4804      	ldr	r0, [pc, #16]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 80025a6:	f008 fc25 	bl	800adf4 <HAL_UARTEx_DisableFifoMode>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80025b0:	f7ff fa4d 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	200005f4 	.word	0x200005f4
 80025bc:	40004800 	.word	0x40004800

080025c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b09c      	sub	sp, #112	@ 0x70
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025d8:	f107 0318 	add.w	r3, r7, #24
 80025dc:	2244      	movs	r2, #68	@ 0x44
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f00e fb25 	bl	8010c30 <memset>
  if(uartHandle->Instance==USART2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a99      	ldr	r2, [pc, #612]	@ (8002850 <HAL_UART_MspInit+0x290>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	f040 8093 	bne.w	8002718 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025f2:	2302      	movs	r3, #2
 80025f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025fa:	f107 0318 	add.w	r3, r7, #24
 80025fe:	4618      	mov	r0, r3
 8002600:	f004 fe98 	bl	8007334 <HAL_RCCEx_PeriphCLKConfig>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800260a:	f7ff fa20 	bl	8001a4e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800260e:	4b91      	ldr	r3, [pc, #580]	@ (8002854 <HAL_UART_MspInit+0x294>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002612:	4a90      	ldr	r2, [pc, #576]	@ (8002854 <HAL_UART_MspInit+0x294>)
 8002614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002618:	6593      	str	r3, [r2, #88]	@ 0x58
 800261a:	4b8e      	ldr	r3, [pc, #568]	@ (8002854 <HAL_UART_MspInit+0x294>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002626:	4b8b      	ldr	r3, [pc, #556]	@ (8002854 <HAL_UART_MspInit+0x294>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262a:	4a8a      	ldr	r2, [pc, #552]	@ (8002854 <HAL_UART_MspInit+0x294>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002632:	4b88      	ldr	r3, [pc, #544]	@ (8002854 <HAL_UART_MspInit+0x294>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800263e:	230c      	movs	r3, #12
 8002640:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264a:	2300      	movs	r3, #0
 800264c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800264e:	2307      	movs	r3, #7
 8002650:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002656:	4619      	mov	r1, r3
 8002658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800265c:	f003 fed6 	bl	800640c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8002660:	4b7d      	ldr	r3, [pc, #500]	@ (8002858 <HAL_UART_MspInit+0x298>)
 8002662:	4a7e      	ldr	r2, [pc, #504]	@ (800285c <HAL_UART_MspInit+0x29c>)
 8002664:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002666:	4b7c      	ldr	r3, [pc, #496]	@ (8002858 <HAL_UART_MspInit+0x298>)
 8002668:	221a      	movs	r2, #26
 800266a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800266c:	4b7a      	ldr	r3, [pc, #488]	@ (8002858 <HAL_UART_MspInit+0x298>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002672:	4b79      	ldr	r3, [pc, #484]	@ (8002858 <HAL_UART_MspInit+0x298>)
 8002674:	2200      	movs	r2, #0
 8002676:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002678:	4b77      	ldr	r3, [pc, #476]	@ (8002858 <HAL_UART_MspInit+0x298>)
 800267a:	2280      	movs	r2, #128	@ 0x80
 800267c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800267e:	4b76      	ldr	r3, [pc, #472]	@ (8002858 <HAL_UART_MspInit+0x298>)
 8002680:	2200      	movs	r2, #0
 8002682:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <HAL_UART_MspInit+0x298>)
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800268a:	4b73      	ldr	r3, [pc, #460]	@ (8002858 <HAL_UART_MspInit+0x298>)
 800268c:	2200      	movs	r2, #0
 800268e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002690:	4b71      	ldr	r3, [pc, #452]	@ (8002858 <HAL_UART_MspInit+0x298>)
 8002692:	2200      	movs	r2, #0
 8002694:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002696:	4870      	ldr	r0, [pc, #448]	@ (8002858 <HAL_UART_MspInit+0x298>)
 8002698:	f003 fb86 	bl	8005da8 <HAL_DMA_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80026a2:	f7ff f9d4 	bl	8001a4e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a6b      	ldr	r2, [pc, #428]	@ (8002858 <HAL_UART_MspInit+0x298>)
 80026aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80026ae:	4a6a      	ldr	r2, [pc, #424]	@ (8002858 <HAL_UART_MspInit+0x298>)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80026b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026b6:	4a6b      	ldr	r2, [pc, #428]	@ (8002864 <HAL_UART_MspInit+0x2a4>)
 80026b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80026ba:	4b69      	ldr	r3, [pc, #420]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026bc:	221b      	movs	r2, #27
 80026be:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026c0:	4b67      	ldr	r3, [pc, #412]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026c2:	2210      	movs	r2, #16
 80026c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026c6:	4b66      	ldr	r3, [pc, #408]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026cc:	4b64      	ldr	r3, [pc, #400]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026ce:	2280      	movs	r2, #128	@ 0x80
 80026d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026d2:	4b63      	ldr	r3, [pc, #396]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026d8:	4b61      	ldr	r3, [pc, #388]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80026de:	4b60      	ldr	r3, [pc, #384]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80026ea:	485d      	ldr	r0, [pc, #372]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026ec:	f003 fb5c 	bl	8005da8 <HAL_DMA_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80026f6:	f7ff f9aa 	bl	8001a4e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a58      	ldr	r2, [pc, #352]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026fe:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002700:	4a57      	ldr	r2, [pc, #348]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2100      	movs	r1, #0
 800270a:	2026      	movs	r0, #38	@ 0x26
 800270c:	f003 f8a3 	bl	8005856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002710:	2026      	movs	r0, #38	@ 0x26
 8002712:	f003 f8ba 	bl	800588a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002716:	e097      	b.n	8002848 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART3)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a52      	ldr	r2, [pc, #328]	@ (8002868 <HAL_UART_MspInit+0x2a8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	f040 8092 	bne.w	8002848 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002724:	2304      	movs	r3, #4
 8002726:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800272c:	f107 0318 	add.w	r3, r7, #24
 8002730:	4618      	mov	r0, r3
 8002732:	f004 fdff 	bl	8007334 <HAL_RCCEx_PeriphCLKConfig>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_UART_MspInit+0x180>
      Error_Handler();
 800273c:	f7ff f987 	bl	8001a4e <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002740:	4b44      	ldr	r3, [pc, #272]	@ (8002854 <HAL_UART_MspInit+0x294>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002744:	4a43      	ldr	r2, [pc, #268]	@ (8002854 <HAL_UART_MspInit+0x294>)
 8002746:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800274a:	6593      	str	r3, [r2, #88]	@ 0x58
 800274c:	4b41      	ldr	r3, [pc, #260]	@ (8002854 <HAL_UART_MspInit+0x294>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002750:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002758:	4b3e      	ldr	r3, [pc, #248]	@ (8002854 <HAL_UART_MspInit+0x294>)
 800275a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275c:	4a3d      	ldr	r2, [pc, #244]	@ (8002854 <HAL_UART_MspInit+0x294>)
 800275e:	f043 0302 	orr.w	r3, r3, #2
 8002762:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002764:	4b3b      	ldr	r3, [pc, #236]	@ (8002854 <HAL_UART_MspInit+0x294>)
 8002766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002770:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002774:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	2300      	movs	r3, #0
 8002780:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002782:	2307      	movs	r3, #7
 8002784:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002786:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800278a:	4619      	mov	r1, r3
 800278c:	4837      	ldr	r0, [pc, #220]	@ (800286c <HAL_UART_MspInit+0x2ac>)
 800278e:	f003 fe3d 	bl	800640c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel1;
 8002792:	4b37      	ldr	r3, [pc, #220]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 8002794:	4a37      	ldr	r2, [pc, #220]	@ (8002874 <HAL_UART_MspInit+0x2b4>)
 8002796:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002798:	4b35      	ldr	r3, [pc, #212]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 800279a:	221d      	movs	r2, #29
 800279c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800279e:	4b34      	ldr	r3, [pc, #208]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027a0:	2210      	movs	r2, #16
 80027a2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027a4:	4b32      	ldr	r3, [pc, #200]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027aa:	4b31      	ldr	r3, [pc, #196]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027ac:	2280      	movs	r2, #128	@ 0x80
 80027ae:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80027bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027be:	2200      	movs	r2, #0
 80027c0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80027c8:	4829      	ldr	r0, [pc, #164]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027ca:	f003 faed 	bl	8005da8 <HAL_DMA_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_UART_MspInit+0x218>
      Error_Handler();
 80027d4:	f7ff f93b 	bl	8001a4e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a25      	ldr	r2, [pc, #148]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027dc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80027de:	4a24      	ldr	r2, [pc, #144]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart3_rx.Instance = DMA1_Channel2;
 80027e4:	4b24      	ldr	r3, [pc, #144]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 80027e6:	4a25      	ldr	r2, [pc, #148]	@ (800287c <HAL_UART_MspInit+0x2bc>)
 80027e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80027ea:	4b23      	ldr	r3, [pc, #140]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 80027ec:	221c      	movs	r2, #28
 80027ee:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027f0:	4b21      	ldr	r3, [pc, #132]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027f6:	4b20      	ldr	r3, [pc, #128]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 80027fe:	2280      	movs	r2, #128	@ 0x80
 8002800:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002802:	4b1d      	ldr	r3, [pc, #116]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 8002804:	2200      	movs	r2, #0
 8002806:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002808:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800280e:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 8002810:	2200      	movs	r2, #0
 8002812:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002814:	4b18      	ldr	r3, [pc, #96]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 8002816:	2200      	movs	r2, #0
 8002818:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800281a:	4817      	ldr	r0, [pc, #92]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 800281c:	f003 fac4 	bl	8005da8 <HAL_DMA_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_UART_MspInit+0x26a>
      Error_Handler();
 8002826:	f7ff f912 	bl	8001a4e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a12      	ldr	r2, [pc, #72]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 800282e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002832:	4a11      	ldr	r2, [pc, #68]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8002838:	2200      	movs	r2, #0
 800283a:	2101      	movs	r1, #1
 800283c:	2027      	movs	r0, #39	@ 0x27
 800283e:	f003 f80a 	bl	8005856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002842:	2027      	movs	r0, #39	@ 0x27
 8002844:	f003 f821 	bl	800588a <HAL_NVIC_EnableIRQ>
}
 8002848:	bf00      	nop
 800284a:	3770      	adds	r7, #112	@ 0x70
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40004400 	.word	0x40004400
 8002854:	40021000 	.word	0x40021000
 8002858:	20000688 	.word	0x20000688
 800285c:	40020030 	.word	0x40020030
 8002860:	200006e8 	.word	0x200006e8
 8002864:	40020044 	.word	0x40020044
 8002868:	40004800 	.word	0x40004800
 800286c:	48000400 	.word	0x48000400
 8002870:	20000748 	.word	0x20000748
 8002874:	40020008 	.word	0x40020008
 8002878:	200007a8 	.word	0x200007a8
 800287c:	4002001c 	.word	0x4002001c

08002880 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002880:	480d      	ldr	r0, [pc, #52]	@ (80028b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002882:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002884:	f7ff fb72 	bl	8001f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002888:	480c      	ldr	r0, [pc, #48]	@ (80028bc <LoopForever+0x6>)
  ldr r1, =_edata
 800288a:	490d      	ldr	r1, [pc, #52]	@ (80028c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800288c:	4a0d      	ldr	r2, [pc, #52]	@ (80028c4 <LoopForever+0xe>)
  movs r3, #0
 800288e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002890:	e002      	b.n	8002898 <LoopCopyDataInit>

08002892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002896:	3304      	adds	r3, #4

08002898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800289a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800289c:	d3f9      	bcc.n	8002892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800289e:	4a0a      	ldr	r2, [pc, #40]	@ (80028c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028a0:	4c0a      	ldr	r4, [pc, #40]	@ (80028cc <LoopForever+0x16>)
  movs r3, #0
 80028a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028a4:	e001      	b.n	80028aa <LoopFillZerobss>

080028a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a8:	3204      	adds	r2, #4

080028aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028ac:	d3fb      	bcc.n	80028a6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80028ae:	f00e fa29 	bl	8010d04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028b2:	f7fe ffcf 	bl	8001854 <main>

080028b6 <LoopForever>:

LoopForever:
    b LoopForever
 80028b6:	e7fe      	b.n	80028b6 <LoopForever>
  ldr   r0, =_estack
 80028b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80028bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028c0:	200002a8 	.word	0x200002a8
  ldr r2, =_sidata
 80028c4:	08014c20 	.word	0x08014c20
  ldr r2, =_sbss
 80028c8:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 80028cc:	20000e54 	.word	0x20000e54

080028d0 <CORDIC_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028d0:	e7fe      	b.n	80028d0 <CORDIC_IRQHandler>

080028d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028dc:	2003      	movs	r0, #3
 80028de:	f002 ffaf 	bl	8005840 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028e2:	200f      	movs	r0, #15
 80028e4:	f000 f80e 	bl	8002904 <HAL_InitTick>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	71fb      	strb	r3, [r7, #7]
 80028f2:	e001      	b.n	80028f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028f4:	f7ff f9c2 	bl	8001c7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028f8:	79fb      	ldrb	r3, [r7, #7]

}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002910:	4b16      	ldr	r3, [pc, #88]	@ (800296c <HAL_InitTick+0x68>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d022      	beq.n	800295e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002918:	4b15      	ldr	r3, [pc, #84]	@ (8002970 <HAL_InitTick+0x6c>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b13      	ldr	r3, [pc, #76]	@ (800296c <HAL_InitTick+0x68>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002924:	fbb1 f3f3 	udiv	r3, r1, r3
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	4618      	mov	r0, r3
 800292e:	f002 ffba 	bl	80058a6 <HAL_SYSTICK_Config>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10f      	bne.n	8002958 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b0f      	cmp	r3, #15
 800293c:	d809      	bhi.n	8002952 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800293e:	2200      	movs	r2, #0
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	f04f 30ff 	mov.w	r0, #4294967295
 8002946:	f002 ff86 	bl	8005856 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800294a:	4a0a      	ldr	r2, [pc, #40]	@ (8002974 <HAL_InitTick+0x70>)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	e007      	b.n	8002962 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
 8002956:	e004      	b.n	8002962 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
 800295c:	e001      	b.n	8002962 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002962:	7bfb      	ldrb	r3, [r7, #15]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000008 	.word	0x20000008
 8002970:	20000000 	.word	0x20000000
 8002974:	20000004 	.word	0x20000004

08002978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800297c:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <HAL_IncTick+0x1c>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <HAL_IncTick+0x20>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4413      	add	r3, r2
 8002986:	4a03      	ldr	r2, [pc, #12]	@ (8002994 <HAL_IncTick+0x1c>)
 8002988:	6013      	str	r3, [r2, #0]
}
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	20000808 	.word	0x20000808
 8002998:	20000008 	.word	0x20000008

0800299c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return uwTick;
 80029a0:	4b03      	ldr	r3, [pc, #12]	@ (80029b0 <HAL_GetTick+0x14>)
 80029a2:	681b      	ldr	r3, [r3, #0]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	20000808 	.word	0x20000808

080029b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029bc:	f7ff ffee 	bl	800299c <HAL_GetTick>
 80029c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029cc:	d004      	beq.n	80029d8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ce:	4b09      	ldr	r3, [pc, #36]	@ (80029f4 <HAL_Delay+0x40>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4413      	add	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029d8:	bf00      	nop
 80029da:	f7ff ffdf 	bl	800299c <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d8f7      	bhi.n	80029da <HAL_Delay+0x26>
  {
  }
}
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000008 	.word	0x20000008

080029f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	609a      	str	r2, [r3, #8]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	609a      	str	r2, [r3, #8]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3360      	adds	r3, #96	@ 0x60
 8002a72:	461a      	mov	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b08      	ldr	r3, [pc, #32]	@ (8002aa4 <LL_ADC_SetOffset+0x44>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a98:	bf00      	nop
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	03fff000 	.word	0x03fff000

08002aa8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3360      	adds	r3, #96	@ 0x60
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3360      	adds	r3, #96	@ 0x60
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002afe:	bf00      	nop
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b087      	sub	sp, #28
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	3360      	adds	r3, #96	@ 0x60
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b34:	bf00      	nop
 8002b36:	371c      	adds	r7, #28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3360      	adds	r3, #96	@ 0x60
 8002b50:	461a      	mov	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002b6a:	bf00      	nop
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	615a      	str	r2, [r3, #20]
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b087      	sub	sp, #28
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3330      	adds	r3, #48	@ 0x30
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	4413      	add	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	211f      	movs	r1, #31
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	0e9b      	lsrs	r3, r3, #26
 8002bfa:	f003 011f 	and.w	r1, r3, #31
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	fa01 f303 	lsl.w	r3, r1, r3
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c26:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	3314      	adds	r3, #20
 8002c50:	461a      	mov	r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	0e5b      	lsrs	r3, r3, #25
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	4413      	add	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	0d1b      	lsrs	r3, r3, #20
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	2107      	movs	r1, #7
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	401a      	ands	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	0d1b      	lsrs	r3, r3, #20
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	431a      	orrs	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c8a:	bf00      	nop
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f003 0318 	and.w	r3, r3, #24
 8002cba:	4908      	ldr	r1, [pc, #32]	@ (8002cdc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cbc:	40d9      	lsrs	r1, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	400b      	ands	r3, r1
 8002cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	0007ffff 	.word	0x0007ffff

08002ce0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 031f 	and.w	r3, r3, #31
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002d28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6093      	str	r3, [r2, #8]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d50:	d101      	bne.n	8002d56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d78:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002da0:	d101      	bne.n	8002da6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dc8:	f043 0201 	orr.w	r2, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002df0:	f043 0202 	orr.w	r2, r3, #2
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <LL_ADC_IsEnabled+0x18>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <LL_ADC_IsEnabled+0x1a>
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d101      	bne.n	8002e42 <LL_ADC_IsDisableOngoing+0x18>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <LL_ADC_IsDisableOngoing+0x1a>
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d101      	bne.n	8002e68 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d101      	bne.n	8002e8e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b089      	sub	sp, #36	@ 0x24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e167      	b.n	8003186 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d109      	bne.n	8002ed8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7fe f9f3 	bl	80012b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff2d 	bl	8002d3c <LL_ADC_IsDeepPowerDownEnabled>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d004      	beq.n	8002ef2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff13 	bl	8002d18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ff48 	bl	8002d8c <LL_ADC_IsInternalRegulatorEnabled>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d115      	bne.n	8002f2e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ff2c 	bl	8002d64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f0c:	4ba0      	ldr	r3, [pc, #640]	@ (8003190 <HAL_ADC_Init+0x2f4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	099b      	lsrs	r3, r3, #6
 8002f12:	4aa0      	ldr	r2, [pc, #640]	@ (8003194 <HAL_ADC_Init+0x2f8>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	099b      	lsrs	r3, r3, #6
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f20:	e002      	b.n	8002f28 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f9      	bne.n	8002f22 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff ff2a 	bl	8002d8c <LL_ADC_IsInternalRegulatorEnabled>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10d      	bne.n	8002f5a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f42:	f043 0210 	orr.w	r2, r3, #16
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f4e:	f043 0201 	orr.w	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff ff76 	bl	8002e50 <LL_ADC_REG_IsConversionOngoing>
 8002f64:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 8100 	bne.w	8003174 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 80fc 	bne.w	8003174 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f80:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f84:	f043 0202 	orr.w	r2, r3, #2
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff37 	bl	8002e04 <LL_ADC_IsEnabled>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d111      	bne.n	8002fc0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f9c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002fa0:	f7ff ff30 	bl	8002e04 <LL_ADC_IsEnabled>
 8002fa4:	4604      	mov	r4, r0
 8002fa6:	487c      	ldr	r0, [pc, #496]	@ (8003198 <HAL_ADC_Init+0x2fc>)
 8002fa8:	f7ff ff2c 	bl	8002e04 <LL_ADC_IsEnabled>
 8002fac:	4603      	mov	r3, r0
 8002fae:	4323      	orrs	r3, r4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4878      	ldr	r0, [pc, #480]	@ (800319c <HAL_ADC_Init+0x300>)
 8002fbc:	f7ff fd1c 	bl	80029f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	7f5b      	ldrb	r3, [r3, #29]
 8002fc4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002fd0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002fd6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fde:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d106      	bne.n	8002ffc <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	045b      	lsls	r3, r3, #17
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003000:	2b00      	cmp	r3, #0
 8003002:	d009      	beq.n	8003018 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003010:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	4b60      	ldr	r3, [pc, #384]	@ (80031a0 <HAL_ADC_Init+0x304>)
 8003020:	4013      	ands	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	69b9      	ldr	r1, [r7, #24]
 8003028:	430b      	orrs	r3, r1
 800302a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff ff15 	bl	8002e76 <LL_ADC_INJ_IsConversionOngoing>
 800304c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d16d      	bne.n	8003130 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d16a      	bne.n	8003130 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800305e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003066:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003076:	f023 0302 	bic.w	r3, r3, #2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	69b9      	ldr	r1, [r7, #24]
 8003080:	430b      	orrs	r3, r1
 8003082:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d017      	beq.n	80030bc <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800309a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030a4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6911      	ldr	r1, [r2, #16]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80030ba:	e013      	b.n	80030e4 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80030ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030e0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d118      	bne.n	8003120 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80030f8:	f023 0304 	bic.w	r3, r3, #4
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003104:	4311      	orrs	r1, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800310a:	4311      	orrs	r1, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003110:	430a      	orrs	r2, r1
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	611a      	str	r2, [r3, #16]
 800311e:	e007      	b.n	8003130 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d10c      	bne.n	8003152 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313e:	f023 010f 	bic.w	r1, r3, #15
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	1e5a      	subs	r2, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003150:	e007      	b.n	8003162 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 020f 	bic.w	r2, r2, #15
 8003160:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003166:	f023 0303 	bic.w	r3, r3, #3
 800316a:	f043 0201 	orr.w	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003172:	e007      	b.n	8003184 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003178:	f043 0210 	orr.w	r2, r3, #16
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003184:	7ffb      	ldrb	r3, [r7, #31]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3724      	adds	r7, #36	@ 0x24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd90      	pop	{r4, r7, pc}
 800318e:	bf00      	nop
 8003190:	20000000 	.word	0x20000000
 8003194:	053e2d63 	.word	0x053e2d63
 8003198:	50000100 	.word	0x50000100
 800319c:	50000300 	.word	0x50000300
 80031a0:	fff04007 	.word	0xfff04007

080031a4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08a      	sub	sp, #40	@ 0x28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80031ac:	2300      	movs	r3, #0
 80031ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031c0:	4883      	ldr	r0, [pc, #524]	@ (80033d0 <HAL_ADC_IRQHandler+0x22c>)
 80031c2:	f7ff fd8d 	bl	8002ce0 <LL_ADC_GetMultimode>
 80031c6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d017      	beq.n	8003202 <HAL_ADC_IRQHandler+0x5e>
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d012      	beq.n	8003202 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d105      	bne.n	80031f4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ec:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f001 fa9d 	bl	8004734 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2202      	movs	r2, #2
 8003200:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d004      	beq.n	8003216 <HAL_ADC_IRQHandler+0x72>
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10a      	bne.n	800322c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 8085 	beq.w	800332c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	d07f      	beq.n	800332c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	2b00      	cmp	r3, #0
 8003236:	d105      	bne.n	8003244 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fca7 	bl	8002b9c <LL_ADC_REG_IsTriggerSourceSWStart>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d064      	beq.n	800331e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a5e      	ldr	r2, [pc, #376]	@ (80033d4 <HAL_ADC_IRQHandler+0x230>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d002      	beq.n	8003264 <HAL_ADC_IRQHandler+0xc0>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	e001      	b.n	8003268 <HAL_ADC_IRQHandler+0xc4>
 8003264:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	4293      	cmp	r3, r2
 800326e:	d008      	beq.n	8003282 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b05      	cmp	r3, #5
 800327a:	d002      	beq.n	8003282 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2b09      	cmp	r3, #9
 8003280:	d104      	bne.n	800328c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	623b      	str	r3, [r7, #32]
 800328a:	e00d      	b.n	80032a8 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a50      	ldr	r2, [pc, #320]	@ (80033d4 <HAL_ADC_IRQHandler+0x230>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d002      	beq.n	800329c <HAL_ADC_IRQHandler+0xf8>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	e001      	b.n	80032a0 <HAL_ADC_IRQHandler+0xfc>
 800329c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032a0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d135      	bne.n	800331e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d12e      	bne.n	800331e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fdc3 	bl	8002e50 <LL_ADC_REG_IsConversionOngoing>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d11a      	bne.n	8003306 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 020c 	bic.w	r2, r2, #12
 80032de:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d112      	bne.n	800331e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fc:	f043 0201 	orr.w	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003304:	e00b      	b.n	800331e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330a:	f043 0210 	orr.w	r2, r3, #16
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003316:	f043 0201 	orr.w	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f95a 	bl	80035d8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	220c      	movs	r2, #12
 800332a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d004      	beq.n	8003340 <HAL_ADC_IRQHandler+0x19c>
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 809e 	beq.w	8003488 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8098 	beq.w	8003488 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b00      	cmp	r3, #0
 8003362:	d105      	bne.n	8003370 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003368:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fc50 	bl	8002c1a <LL_ADC_INJ_IsTriggerSourceSWStart>
 800337a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fc0b 	bl	8002b9c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003386:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a11      	ldr	r2, [pc, #68]	@ (80033d4 <HAL_ADC_IRQHandler+0x230>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d002      	beq.n	8003398 <HAL_ADC_IRQHandler+0x1f4>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	e001      	b.n	800339c <HAL_ADC_IRQHandler+0x1f8>
 8003398:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d008      	beq.n	80033b6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d005      	beq.n	80033b6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2b06      	cmp	r3, #6
 80033ae:	d002      	beq.n	80033b6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b07      	cmp	r3, #7
 80033b4:	d104      	bne.n	80033c0 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	623b      	str	r3, [r7, #32]
 80033be:	e011      	b.n	80033e4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a03      	ldr	r2, [pc, #12]	@ (80033d4 <HAL_ADC_IRQHandler+0x230>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d006      	beq.n	80033d8 <HAL_ADC_IRQHandler+0x234>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	e005      	b.n	80033dc <HAL_ADC_IRQHandler+0x238>
 80033d0:	50000300 	.word	0x50000300
 80033d4:	50000100 	.word	0x50000100
 80033d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80033dc:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d047      	beq.n	800347a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d007      	beq.n	8003404 <HAL_ADC_IRQHandler+0x260>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d03f      	beq.n	800347a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003400:	2b00      	cmp	r3, #0
 8003402:	d13a      	bne.n	800347a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340e:	2b40      	cmp	r3, #64	@ 0x40
 8003410:	d133      	bne.n	800347a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d12e      	bne.n	800347a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fd28 	bl	8002e76 <LL_ADC_INJ_IsConversionOngoing>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d11a      	bne.n	8003462 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800343a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003440:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d112      	bne.n	800347a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003458:	f043 0201 	orr.w	r2, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003460:	e00b      	b.n	800347a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003466:	f043 0210 	orr.w	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003472:	f043 0201 	orr.w	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f009 fc38 	bl	800ccf0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2260      	movs	r2, #96	@ 0x60
 8003486:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348e:	2b00      	cmp	r3, #0
 8003490:	d011      	beq.n	80034b6 <HAL_ADC_IRQHandler+0x312>
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00c      	beq.n	80034b6 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f89f 	bl	80035ec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2280      	movs	r2, #128	@ 0x80
 80034b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d012      	beq.n	80034e6 <HAL_ADC_IRQHandler+0x342>
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00d      	beq.n	80034e6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f001 f918 	bl	800470c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d012      	beq.n	8003516 <HAL_ADC_IRQHandler+0x372>
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00d      	beq.n	8003516 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f001 f90a 	bl	8004720 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003514:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	d036      	beq.n	800358e <HAL_ADC_IRQHandler+0x3ea>
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b00      	cmp	r3, #0
 8003528:	d031      	beq.n	800358e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003532:	2301      	movs	r3, #1
 8003534:	627b      	str	r3, [r7, #36]	@ 0x24
 8003536:	e014      	b.n	8003562 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d008      	beq.n	8003550 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800353e:	4825      	ldr	r0, [pc, #148]	@ (80035d4 <HAL_ADC_IRQHandler+0x430>)
 8003540:	f7ff fbdc 	bl	8002cfc <LL_ADC_GetMultiDMATransfer>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00b      	beq.n	8003562 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800354a:	2301      	movs	r3, #1
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24
 800354e:	e008      	b.n	8003562 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800355e:	2301      	movs	r3, #1
 8003560:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	2b01      	cmp	r3, #1
 8003566:	d10e      	bne.n	8003586 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800356c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003578:	f043 0202 	orr.w	r2, r3, #2
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f83d 	bl	8003600 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2210      	movs	r2, #16
 800358c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003594:	2b00      	cmp	r3, #0
 8003596:	d018      	beq.n	80035ca <HAL_ADC_IRQHandler+0x426>
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d013      	beq.n	80035ca <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b2:	f043 0208 	orr.w	r2, r3, #8
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035c2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f001 f897 	bl	80046f8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80035ca:	bf00      	nop
 80035cc:	3728      	adds	r7, #40	@ 0x28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	50000300 	.word	0x50000300

080035d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b0b6      	sub	sp, #216	@ 0xd8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x22>
 8003632:	2302      	movs	r3, #2
 8003634:	e3c8      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x7b4>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fc04 	bl	8002e50 <LL_ADC_REG_IsConversionOngoing>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	f040 83ad 	bne.w	8003daa <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	f7ff fab0 	bl	8002bc2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fbf2 	bl	8002e50 <LL_ADC_REG_IsConversionOngoing>
 800366c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fbfe 	bl	8002e76 <LL_ADC_INJ_IsConversionOngoing>
 800367a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800367e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003682:	2b00      	cmp	r3, #0
 8003684:	f040 81d9 	bne.w	8003a3a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003688:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800368c:	2b00      	cmp	r3, #0
 800368e:	f040 81d4 	bne.w	8003a3a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800369a:	d10f      	bne.n	80036bc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2200      	movs	r2, #0
 80036a6:	4619      	mov	r1, r3
 80036a8:	f7ff faca 	bl	8002c40 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff fa5e 	bl	8002b76 <LL_ADC_SetSamplingTimeCommonConfig>
 80036ba:	e00e      	b.n	80036da <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	6819      	ldr	r1, [r3, #0]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	461a      	mov	r2, r3
 80036ca:	f7ff fab9 	bl	8002c40 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fa4e 	bl	8002b76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	08db      	lsrs	r3, r3, #3
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d022      	beq.n	8003742 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	6919      	ldr	r1, [r3, #16]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800370c:	f7ff f9a8 	bl	8002a60 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	6919      	ldr	r1, [r3, #16]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	461a      	mov	r2, r3
 800371e:	f7ff f9f4 	bl	8002b0a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800372e:	2b01      	cmp	r3, #1
 8003730:	d102      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x124>
 8003732:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003736:	e000      	b.n	800373a <HAL_ADC_ConfigChannel+0x126>
 8003738:	2300      	movs	r3, #0
 800373a:	461a      	mov	r2, r3
 800373c:	f7ff fa00 	bl	8002b40 <LL_ADC_SetOffsetSaturation>
 8003740:	e17b      	b.n	8003a3a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2100      	movs	r1, #0
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff f9ad 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 800374e:	4603      	mov	r3, r0
 8003750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <HAL_ADC_ConfigChannel+0x15a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2100      	movs	r1, #0
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff f9a2 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 8003764:	4603      	mov	r3, r0
 8003766:	0e9b      	lsrs	r3, r3, #26
 8003768:	f003 021f 	and.w	r2, r3, #31
 800376c:	e01e      	b.n	80037ac <HAL_ADC_ConfigChannel+0x198>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff f997 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 800377a:	4603      	mov	r3, r0
 800377c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003780:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003784:	fa93 f3a3 	rbit	r3, r3
 8003788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800378c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003790:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003794:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800379c:	2320      	movs	r3, #32
 800379e:	e004      	b.n	80037aa <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80037a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037a4:	fab3 f383 	clz	r3, r3
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d105      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x1b0>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	0e9b      	lsrs	r3, r3, #26
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	e018      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x1e2>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80037d0:	fa93 f3a3 	rbit	r3, r3
 80037d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80037d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80037e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80037e8:	2320      	movs	r3, #32
 80037ea:	e004      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80037ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80037f0:	fab3 f383 	clz	r3, r3
 80037f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d106      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2200      	movs	r2, #0
 8003800:	2100      	movs	r1, #0
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff f966 	bl	8002ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2101      	movs	r1, #1
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff f94a 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 8003814:	4603      	mov	r3, r0
 8003816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10a      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x220>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2101      	movs	r1, #1
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff f93f 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 800382a:	4603      	mov	r3, r0
 800382c:	0e9b      	lsrs	r3, r3, #26
 800382e:	f003 021f 	and.w	r2, r3, #31
 8003832:	e01e      	b.n	8003872 <HAL_ADC_ConfigChannel+0x25e>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2101      	movs	r1, #1
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff f934 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 8003840:	4603      	mov	r3, r0
 8003842:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003852:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003856:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800385a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003862:	2320      	movs	r3, #32
 8003864:	e004      	b.n	8003870 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003866:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800386a:	fab3 f383 	clz	r3, r3
 800386e:	b2db      	uxtb	r3, r3
 8003870:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387a:	2b00      	cmp	r3, #0
 800387c:	d105      	bne.n	800388a <HAL_ADC_ConfigChannel+0x276>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	0e9b      	lsrs	r3, r3, #26
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	e018      	b.n	80038bc <HAL_ADC_ConfigChannel+0x2a8>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800389e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80038a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80038ae:	2320      	movs	r3, #32
 80038b0:	e004      	b.n	80038bc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80038b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038b6:	fab3 f383 	clz	r3, r3
 80038ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038bc:	429a      	cmp	r2, r3
 80038be:	d106      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2200      	movs	r2, #0
 80038c6:	2101      	movs	r1, #1
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff f903 	bl	8002ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2102      	movs	r1, #2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff f8e7 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 80038da:	4603      	mov	r3, r0
 80038dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x2e6>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2102      	movs	r1, #2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff f8dc 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 80038f0:	4603      	mov	r3, r0
 80038f2:	0e9b      	lsrs	r3, r3, #26
 80038f4:	f003 021f 	and.w	r2, r3, #31
 80038f8:	e01e      	b.n	8003938 <HAL_ADC_ConfigChannel+0x324>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2102      	movs	r1, #2
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff f8d1 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 8003906:	4603      	mov	r3, r0
 8003908:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003910:	fa93 f3a3 	rbit	r3, r3
 8003914:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003918:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800391c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003920:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003928:	2320      	movs	r3, #32
 800392a:	e004      	b.n	8003936 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800392c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003930:	fab3 f383 	clz	r3, r3
 8003934:	b2db      	uxtb	r3, r3
 8003936:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003940:	2b00      	cmp	r3, #0
 8003942:	d105      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x33c>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	0e9b      	lsrs	r3, r3, #26
 800394a:	f003 031f 	and.w	r3, r3, #31
 800394e:	e016      	b.n	800397e <HAL_ADC_ConfigChannel+0x36a>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003958:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800395c:	fa93 f3a3 	rbit	r3, r3
 8003960:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003962:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003964:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003968:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003970:	2320      	movs	r3, #32
 8003972:	e004      	b.n	800397e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003974:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003978:	fab3 f383 	clz	r3, r3
 800397c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800397e:	429a      	cmp	r2, r3
 8003980:	d106      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2200      	movs	r2, #0
 8003988:	2102      	movs	r1, #2
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff f8a2 	bl	8002ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2103      	movs	r1, #3
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff f886 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 800399c:	4603      	mov	r3, r0
 800399e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x3a8>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2103      	movs	r1, #3
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff f87b 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 80039b2:	4603      	mov	r3, r0
 80039b4:	0e9b      	lsrs	r3, r3, #26
 80039b6:	f003 021f 	and.w	r2, r3, #31
 80039ba:	e017      	b.n	80039ec <HAL_ADC_ConfigChannel+0x3d8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2103      	movs	r1, #3
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff f870 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 80039c8:	4603      	mov	r3, r0
 80039ca:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039ce:	fa93 f3a3 	rbit	r3, r3
 80039d2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80039d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039d6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80039d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80039de:	2320      	movs	r3, #32
 80039e0:	e003      	b.n	80039ea <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80039e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039e4:	fab3 f383 	clz	r3, r3
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d105      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x3f0>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	0e9b      	lsrs	r3, r3, #26
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	e011      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x414>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a0c:	fa93 f3a3 	rbit	r3, r3
 8003a10:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003a12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a14:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003a16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003a1c:	2320      	movs	r3, #32
 8003a1e:	e003      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003a20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a22:	fab3 f383 	clz	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d106      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2200      	movs	r2, #0
 8003a32:	2103      	movs	r1, #3
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff f84d 	bl	8002ad4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff f9e0 	bl	8002e04 <LL_ADC_IsEnabled>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f040 8140 	bne.w	8003ccc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	6819      	ldr	r1, [r3, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	f7ff f91d 	bl	8002c98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	4a8f      	ldr	r2, [pc, #572]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x68c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	f040 8131 	bne.w	8003ccc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10b      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x47e>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	0e9b      	lsrs	r3, r3, #26
 8003a80:	3301      	adds	r3, #1
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	2b09      	cmp	r3, #9
 8003a88:	bf94      	ite	ls
 8003a8a:	2301      	movls	r3, #1
 8003a8c:	2300      	movhi	r3, #0
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	e019      	b.n	8003ac6 <HAL_ADC_ConfigChannel+0x4b2>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a9a:	fa93 f3a3 	rbit	r3, r3
 8003a9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003aa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aa2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003aa4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003aaa:	2320      	movs	r3, #32
 8003aac:	e003      	b.n	8003ab6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003aae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ab0:	fab3 f383 	clz	r3, r3
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	f003 031f 	and.w	r3, r3, #31
 8003abc:	2b09      	cmp	r3, #9
 8003abe:	bf94      	ite	ls
 8003ac0:	2301      	movls	r3, #1
 8003ac2:	2300      	movhi	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d079      	beq.n	8003bbe <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d107      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x4d2>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	0e9b      	lsrs	r3, r3, #26
 8003adc:	3301      	adds	r3, #1
 8003ade:	069b      	lsls	r3, r3, #26
 8003ae0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ae4:	e015      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x4fe>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003af4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003af6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003afe:	2320      	movs	r3, #32
 8003b00:	e003      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b04:	fab3 f383 	clz	r3, r3
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	069b      	lsls	r3, r3, #26
 8003b0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x51e>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	0e9b      	lsrs	r3, r3, #26
 8003b24:	3301      	adds	r3, #1
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b30:	e017      	b.n	8003b62 <HAL_ADC_ConfigChannel+0x54e>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b3a:	fa93 f3a3 	rbit	r3, r3
 8003b3e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b42:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003b44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	e003      	b.n	8003b56 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003b4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b50:	fab3 f383 	clz	r3, r3
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	3301      	adds	r3, #1
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b62:	ea42 0103 	orr.w	r1, r2, r3
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10a      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x574>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	0e9b      	lsrs	r3, r3, #26
 8003b78:	3301      	adds	r3, #1
 8003b7a:	f003 021f 	and.w	r2, r3, #31
 8003b7e:	4613      	mov	r3, r2
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	4413      	add	r3, r2
 8003b84:	051b      	lsls	r3, r3, #20
 8003b86:	e018      	b.n	8003bba <HAL_ADC_ConfigChannel+0x5a6>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b90:	fa93 f3a3 	rbit	r3, r3
 8003b94:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003ba0:	2320      	movs	r3, #32
 8003ba2:	e003      	b.n	8003bac <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba6:	fab3 f383 	clz	r3, r3
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	3301      	adds	r3, #1
 8003bae:	f003 021f 	and.w	r2, r3, #31
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	4413      	add	r3, r2
 8003bb8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	e081      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d107      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x5c6>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	0e9b      	lsrs	r3, r3, #26
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	069b      	lsls	r3, r3, #26
 8003bd4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003bd8:	e015      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x5f2>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be2:	fa93 f3a3 	rbit	r3, r3
 8003be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bea:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003bf2:	2320      	movs	r3, #32
 8003bf4:	e003      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf8:	fab3 f383 	clz	r3, r3
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	069b      	lsls	r3, r3, #26
 8003c02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x612>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	0e9b      	lsrs	r3, r3, #26
 8003c18:	3301      	adds	r3, #1
 8003c1a:	f003 031f 	and.w	r3, r3, #31
 8003c1e:	2101      	movs	r1, #1
 8003c20:	fa01 f303 	lsl.w	r3, r1, r3
 8003c24:	e017      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x642>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	fa93 f3a3 	rbit	r3, r3
 8003c32:	61fb      	str	r3, [r7, #28]
  return result;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003c3e:	2320      	movs	r3, #32
 8003c40:	e003      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	fab3 f383 	clz	r3, r3
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	2101      	movs	r1, #1
 8003c52:	fa01 f303 	lsl.w	r3, r1, r3
 8003c56:	ea42 0103 	orr.w	r1, r2, r3
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10d      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x66e>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	0e9b      	lsrs	r3, r3, #26
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	f003 021f 	and.w	r2, r3, #31
 8003c72:	4613      	mov	r3, r2
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	4413      	add	r3, r2
 8003c78:	3b1e      	subs	r3, #30
 8003c7a:	051b      	lsls	r3, r3, #20
 8003c7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c80:	e01e      	b.n	8003cc0 <HAL_ADC_ConfigChannel+0x6ac>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	613b      	str	r3, [r7, #16]
  return result;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d104      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003c9a:	2320      	movs	r3, #32
 8003c9c:	e006      	b.n	8003cac <HAL_ADC_ConfigChannel+0x698>
 8003c9e:	bf00      	nop
 8003ca0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	fab3 f383 	clz	r3, r3
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	3301      	adds	r3, #1
 8003cae:	f003 021f 	and.w	r2, r3, #31
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3b1e      	subs	r3, #30
 8003cba:	051b      	lsls	r3, r3, #20
 8003cbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cc0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	f7fe ffba 	bl	8002c40 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd0 <HAL_ADC_ConfigChannel+0x7bc>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d071      	beq.n	8003dbc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cd8:	483e      	ldr	r0, [pc, #248]	@ (8003dd4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003cda:	f7fe feb3 	bl	8002a44 <LL_ADC_GetCommonPathInternalCh>
 8003cde:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a3c      	ldr	r2, [pc, #240]	@ (8003dd8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d004      	beq.n	8003cf6 <HAL_ADC_ConfigChannel+0x6e2>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a3a      	ldr	r2, [pc, #232]	@ (8003ddc <HAL_ADC_ConfigChannel+0x7c8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d127      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d121      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d0a:	d157      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d14:	4619      	mov	r1, r3
 8003d16:	482f      	ldr	r0, [pc, #188]	@ (8003dd4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003d18:	f7fe fe81 	bl	8002a1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d1c:	4b30      	ldr	r3, [pc, #192]	@ (8003de0 <HAL_ADC_ConfigChannel+0x7cc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	099b      	lsrs	r3, r3, #6
 8003d22:	4a30      	ldr	r2, [pc, #192]	@ (8003de4 <HAL_ADC_ConfigChannel+0x7d0>)
 8003d24:	fba2 2303 	umull	r2, r3, r2, r3
 8003d28:	099b      	lsrs	r3, r3, #6
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d36:	e002      	b.n	8003d3e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f9      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d44:	e03a      	b.n	8003dbc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a27      	ldr	r2, [pc, #156]	@ (8003de8 <HAL_ADC_ConfigChannel+0x7d4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d113      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10d      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a22      	ldr	r2, [pc, #136]	@ (8003dec <HAL_ADC_ConfigChannel+0x7d8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d02a      	beq.n	8003dbc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4818      	ldr	r0, [pc, #96]	@ (8003dd4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003d72:	f7fe fe54 	bl	8002a1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d76:	e021      	b.n	8003dbc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8003df0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d11c      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d116      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a16      	ldr	r2, [pc, #88]	@ (8003dec <HAL_ADC_ConfigChannel+0x7d8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d011      	beq.n	8003dbc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003da0:	4619      	mov	r1, r3
 8003da2:	480c      	ldr	r0, [pc, #48]	@ (8003dd4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003da4:	f7fe fe3b 	bl	8002a1e <LL_ADC_SetCommonPathInternalCh>
 8003da8:	e008      	b.n	8003dbc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dae:	f043 0220 	orr.w	r2, r3, #32
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003dc4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	37d8      	adds	r7, #216	@ 0xd8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	80080000 	.word	0x80080000
 8003dd4:	50000300 	.word	0x50000300
 8003dd8:	c3210000 	.word	0xc3210000
 8003ddc:	90c00010 	.word	0x90c00010
 8003de0:	20000000 	.word	0x20000000
 8003de4:	053e2d63 	.word	0x053e2d63
 8003de8:	c7520000 	.word	0xc7520000
 8003dec:	50000100 	.word	0x50000100
 8003df0:	cb840000 	.word	0xcb840000

08003df4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe fffd 	bl	8002e04 <LL_ADC_IsEnabled>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d169      	bne.n	8003ee4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	4b36      	ldr	r3, [pc, #216]	@ (8003ef0 <ADC_Enable+0xfc>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00d      	beq.n	8003e3a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e22:	f043 0210 	orr.w	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e055      	b.n	8003ee6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe ffb8 	bl	8002db4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003e44:	482b      	ldr	r0, [pc, #172]	@ (8003ef4 <ADC_Enable+0x100>)
 8003e46:	f7fe fdfd 	bl	8002a44 <LL_ADC_GetCommonPathInternalCh>
 8003e4a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003e4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d013      	beq.n	8003e7c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e54:	4b28      	ldr	r3, [pc, #160]	@ (8003ef8 <ADC_Enable+0x104>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	099b      	lsrs	r3, r3, #6
 8003e5a:	4a28      	ldr	r2, [pc, #160]	@ (8003efc <ADC_Enable+0x108>)
 8003e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e60:	099b      	lsrs	r3, r3, #6
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	4613      	mov	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e6e:	e002      	b.n	8003e76 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f9      	bne.n	8003e70 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003e7c:	f7fe fd8e 	bl	800299c <HAL_GetTick>
 8003e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e82:	e028      	b.n	8003ed6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fe ffbb 	bl	8002e04 <LL_ADC_IsEnabled>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d104      	bne.n	8003e9e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe ff8b 	bl	8002db4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e9e:	f7fe fd7d 	bl	800299c <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d914      	bls.n	8003ed6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d00d      	beq.n	8003ed6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ebe:	f043 0210 	orr.w	r2, r3, #16
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eca:	f043 0201 	orr.w	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e007      	b.n	8003ee6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d1cf      	bne.n	8003e84 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	8000003f 	.word	0x8000003f
 8003ef4:	50000300 	.word	0x50000300
 8003ef8:	20000000 	.word	0x20000000
 8003efc:	053e2d63 	.word	0x053e2d63

08003f00 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fe ff8c 	bl	8002e2a <LL_ADC_IsDisableOngoing>
 8003f12:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fe ff73 	bl	8002e04 <LL_ADC_IsEnabled>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d047      	beq.n	8003fb4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d144      	bne.n	8003fb4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 030d 	and.w	r3, r3, #13
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d10c      	bne.n	8003f52 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fe ff4d 	bl	8002ddc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2203      	movs	r2, #3
 8003f48:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f4a:	f7fe fd27 	bl	800299c <HAL_GetTick>
 8003f4e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f50:	e029      	b.n	8003fa6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f56:	f043 0210 	orr.w	r2, r3, #16
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f62:	f043 0201 	orr.w	r2, r3, #1
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e023      	b.n	8003fb6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f6e:	f7fe fd15 	bl	800299c <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d914      	bls.n	8003fa6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00d      	beq.n	8003fa6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8e:	f043 0210 	orr.w	r2, r3, #16
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9a:	f043 0201 	orr.w	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e007      	b.n	8003fb6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1dc      	bne.n	8003f6e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <LL_ADC_SetCommonPathInternalCh>:
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	609a      	str	r2, [r3, #8]
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <LL_ADC_GetCommonPathInternalCh>:
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <LL_ADC_SetOffset>:
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3360      	adds	r3, #96	@ 0x60
 8004012:	461a      	mov	r2, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b08      	ldr	r3, [pc, #32]	@ (8004044 <LL_ADC_SetOffset+0x44>)
 8004022:	4013      	ands	r3, r2
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	4313      	orrs	r3, r2
 8004030:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	601a      	str	r2, [r3, #0]
}
 8004038:	bf00      	nop
 800403a:	371c      	adds	r7, #28
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	03fff000 	.word	0x03fff000

08004048 <LL_ADC_GetOffsetChannel>:
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3360      	adds	r3, #96	@ 0x60
 8004056:	461a      	mov	r2, r3
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <LL_ADC_SetOffsetState>:
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3360      	adds	r3, #96	@ 0x60
 8004084:	461a      	mov	r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	431a      	orrs	r2, r3
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	601a      	str	r2, [r3, #0]
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <LL_ADC_SetOffsetSign>:
{
 80040aa:	b480      	push	{r7}
 80040ac:	b087      	sub	sp, #28
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3360      	adds	r3, #96	@ 0x60
 80040ba:	461a      	mov	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	601a      	str	r2, [r3, #0]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <LL_ADC_SetOffsetSaturation>:
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3360      	adds	r3, #96	@ 0x60
 80040f0:	461a      	mov	r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	431a      	orrs	r2, r3
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	601a      	str	r2, [r3, #0]
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	615a      	str	r2, [r3, #20]
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <LL_ADC_INJ_GetTrigAuto>:
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <LL_ADC_SetChannelSamplingTime>:
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	3314      	adds	r3, #20
 8004168:	461a      	mov	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	0e5b      	lsrs	r3, r3, #25
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	4413      	add	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	0d1b      	lsrs	r3, r3, #20
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	2107      	movs	r1, #7
 8004186:	fa01 f303 	lsl.w	r3, r1, r3
 800418a:	43db      	mvns	r3, r3
 800418c:	401a      	ands	r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	0d1b      	lsrs	r3, r3, #20
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	fa01 f303 	lsl.w	r3, r1, r3
 800419c:	431a      	orrs	r2, r3
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	601a      	str	r2, [r3, #0]
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
	...

080041b0 <LL_ADC_SetChannelSingleDiff>:
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c8:	43db      	mvns	r3, r3
 80041ca:	401a      	ands	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f003 0318 	and.w	r3, r3, #24
 80041d2:	4908      	ldr	r1, [pc, #32]	@ (80041f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80041d4:	40d9      	lsrs	r1, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	400b      	ands	r3, r1
 80041da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041de:	431a      	orrs	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	0007ffff 	.word	0x0007ffff

080041f8 <LL_ADC_GetMultimode>:
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 031f 	and.w	r3, r3, #31
}
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <LL_ADC_IsEnabled>:
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <LL_ADC_IsEnabled+0x18>
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <LL_ADC_IsEnabled+0x1a>
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <LL_ADC_StartCalibration>:
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800424c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004256:	4313      	orrs	r3, r2
 8004258:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	609a      	str	r2, [r3, #8]
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <LL_ADC_IsCalibrationOnGoing>:
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800427c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004280:	d101      	bne.n	8004286 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <LL_ADC_REG_IsConversionOngoing>:
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d101      	bne.n	80042ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <LL_ADC_INJ_StartConversion>:
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80042ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042ce:	f043 0208 	orr.w	r2, r3, #8
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	609a      	str	r2, [r3, #8]
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <LL_ADC_INJ_IsConversionOngoing>:
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d101      	bne.n	80042fa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004312:	2300      	movs	r3, #0
 8004314:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <HAL_ADCEx_Calibration_Start+0x1c>
 8004320:	2302      	movs	r3, #2
 8004322:	e04d      	b.n	80043c0 <HAL_ADCEx_Calibration_Start+0xb8>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff fde7 	bl	8003f00 <ADC_Disable>
 8004332:	4603      	mov	r3, r0
 8004334:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004336:	7bfb      	ldrb	r3, [r7, #15]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d136      	bne.n	80043aa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004340:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004344:	f023 0302 	bic.w	r3, r3, #2
 8004348:	f043 0202 	orr.w	r2, r3, #2
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6839      	ldr	r1, [r7, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff ff6f 	bl	800423a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800435c:	e014      	b.n	8004388 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	3301      	adds	r3, #1
 8004362:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4a18      	ldr	r2, [pc, #96]	@ (80043c8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d90d      	bls.n	8004388 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004370:	f023 0312 	bic.w	r3, r3, #18
 8004374:	f043 0210 	orr.w	r2, r3, #16
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e01b      	b.n	80043c0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff ff6d 	bl	800426c <LL_ADC_IsCalibrationOnGoing>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e2      	bne.n	800435e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439c:	f023 0303 	bic.w	r3, r3, #3
 80043a0:	f043 0201 	orr.w	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043a8:	e005      	b.n	80043b6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ae:	f043 0210 	orr.w	r2, r3, #16
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80043be:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	0004de01 	.word	0x0004de01

080043cc <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043d4:	4853      	ldr	r0, [pc, #332]	@ (8004524 <HAL_ADCEx_InjectedStart+0x158>)
 80043d6:	f7ff ff0f 	bl	80041f8 <LL_ADC_GetMultimode>
 80043da:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff ff7e 	bl	80042e2 <LL_ADC_INJ_IsConversionOngoing>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 80043ec:	2302      	movs	r3, #2
 80043ee:	e094      	b.n	800451a <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043fa:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004402:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d107      	bne.n	8004420 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004414:	f043 0220 	orr.w	r2, r3, #32
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e07c      	b.n	800451a <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_ADCEx_InjectedStart+0x62>
 800442a:	2302      	movs	r3, #2
 800442c:	e075      	b.n	800451a <HAL_ADCEx_InjectedStart+0x14e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff fcdc 	bl	8003df4 <ADC_Enable>
 800443c:	4603      	mov	r3, r0
 800443e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d164      	bne.n	8004510 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800444e:	2b00      	cmp	r3, #0
 8004450:	d006      	beq.n	8004460 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004456:	f023 0208 	bic.w	r2, r3, #8
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	661a      	str	r2, [r3, #96]	@ 0x60
 800445e:	e002      	b.n	8004466 <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800446a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a2a      	ldr	r2, [pc, #168]	@ (8004528 <HAL_ADCEx_InjectedStart+0x15c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d002      	beq.n	800448a <HAL_ADCEx_InjectedStart+0xbe>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	e001      	b.n	800448e <HAL_ADCEx_InjectedStart+0xc2>
 800448a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	4293      	cmp	r3, r2
 8004494:	d002      	beq.n	800449c <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d105      	bne.n	80044a8 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2260      	movs	r2, #96	@ 0x60
 80044ae:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004528 <HAL_ADCEx_InjectedStart+0x15c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d002      	beq.n	80044c8 <HAL_ADCEx_InjectedStart+0xfc>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	e001      	b.n	80044cc <HAL_ADCEx_InjectedStart+0x100>
 80044c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d008      	beq.n	80044e6 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b06      	cmp	r3, #6
 80044de:	d002      	beq.n	80044e6 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2b07      	cmp	r3, #7
 80044e4:	d10d      	bne.n	8004502 <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff fe26 	bl	800413c <LL_ADC_INJ_GetTrigAuto>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d110      	bne.n	8004518 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff fedd 	bl	80042ba <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004500:	e00a      	b.n	8004518 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004506:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800450e:	e003      	b.n	8004518 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004518:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	50000300 	.word	0x50000300
 8004528:	50000100 	.word	0x50000100

0800452c <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004534:	486e      	ldr	r0, [pc, #440]	@ (80046f0 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8004536:	f7ff fe5f 	bl	80041f8 <LL_ADC_GetMultimode>
 800453a:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff fece 	bl	80042e2 <LL_ADC_INJ_IsConversionOngoing>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 800454c:	2302      	movs	r3, #2
 800454e:	e0ca      	b.n	80046e6 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800455a:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004562:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10a      	bne.n	8004580 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d107      	bne.n	8004580 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004574:	f043 0220 	orr.w	r2, r3, #32
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e0b2      	b.n	80046e6 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_ADCEx_InjectedStart_IT+0x62>
 800458a:	2302      	movs	r3, #2
 800458c:	e0ab      	b.n	80046e6 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff fc2c 	bl	8003df4 <ADC_Enable>
 800459c:	4603      	mov	r3, r0
 800459e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f040 809a 	bne.w	80046dc <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d006      	beq.n	80045c2 <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b8:	f023 0208 	bic.w	r2, r3, #8
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	661a      	str	r2, [r3, #96]	@ 0x60
 80045c0:	e002      	b.n	80045c8 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045cc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a44      	ldr	r2, [pc, #272]	@ (80046f4 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d002      	beq.n	80045ec <HAL_ADCEx_InjectedStart_IT+0xc0>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	e001      	b.n	80045f0 <HAL_ADCEx_InjectedStart_IT+0xc4>
 80045ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d002      	beq.n	80045fe <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d105      	bne.n	800460a <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004602:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2260      	movs	r2, #96	@ 0x60
 8004610:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d007      	beq.n	8004638 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004636:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b08      	cmp	r3, #8
 800463e:	d110      	bne.n	8004662 <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0220 	bic.w	r2, r2, #32
 800464e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800465e:	605a      	str	r2, [r3, #4]
          break;
 8004660:	e010      	b.n	8004684 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004670:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0220 	orr.w	r2, r2, #32
 8004680:	605a      	str	r2, [r3, #4]
          break;
 8004682:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a1a      	ldr	r2, [pc, #104]	@ (80046f4 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d002      	beq.n	8004694 <HAL_ADCEx_InjectedStart_IT+0x168>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	e001      	b.n	8004698 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8004694:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	4293      	cmp	r3, r2
 800469e:	d008      	beq.n	80046b2 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b06      	cmp	r3, #6
 80046aa:	d002      	beq.n	80046b2 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b07      	cmp	r3, #7
 80046b0:	d10d      	bne.n	80046ce <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fd40 	bl	800413c <LL_ADC_INJ_GetTrigAuto>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d110      	bne.n	80046e4 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff fdf7 	bl	80042ba <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80046cc:	e00a      	b.n	80046e4 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80046da:	e003      	b.n	80046e4 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	50000300 	.word	0x50000300
 80046f4:	50000100 	.word	0x50000100

080046f8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b0b6      	sub	sp, #216	@ 0xd8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004768:	2b01      	cmp	r3, #1
 800476a:	d102      	bne.n	8004772 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 800476c:	2302      	movs	r3, #2
 800476e:	f000 bcb5 	b.w	80050dc <HAL_ADCEx_InjectedConfigChannel+0x994>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004786:	2b01      	cmp	r3, #1
 8004788:	d130      	bne.n	80047ec <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b09      	cmp	r3, #9
 8004790:	d179      	bne.n	8004886 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004796:	2b00      	cmp	r3, #0
 8004798:	d010      	beq.n	80047bc <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	0e9b      	lsrs	r3, r3, #26
 80047a0:	025b      	lsls	r3, r3, #9
 80047a2:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047aa:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80047ae:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047ba:	e007      	b.n	80047cc <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	0e9b      	lsrs	r3, r3, #26
 80047c2:	025b      	lsls	r3, r3, #9
 80047c4:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 80047c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047d2:	4b84      	ldr	r3, [pc, #528]	@ (80049e4 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80047de:	430b      	orrs	r3, r1
 80047e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80047e8:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80047ea:	e04c      	b.n	8004886 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d11d      	bne.n	8004830 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	6a1a      	ldr	r2, [r3, #32]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00d      	beq.n	8004826 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004814:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8004818:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004824:	e004      	b.n	8004830 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	3b01      	subs	r3, #1
 800482c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	0e9b      	lsrs	r3, r3, #26
 8004836:	f003 021f 	and.w	r2, r3, #31
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004854:	1e5a      	subs	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800485e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10a      	bne.n	8004886 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004876:	4b5b      	ldr	r3, [pc, #364]	@ (80049e4 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004878:	4013      	ands	r3, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6812      	ldr	r2, [r2, #0]
 8004882:	430b      	orrs	r3, r1
 8004884:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff fd29 	bl	80042e2 <LL_ADC_INJ_IsConversionOngoing>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d124      	bne.n	80048e0 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800489c:	2b00      	cmp	r3, #0
 800489e:	d112      	bne.n	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80048b0:	055a      	lsls	r2, r3, #21
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048b8:	051b      	lsls	r3, r3, #20
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	60da      	str	r2, [r3, #12]
 80048c4:	e00c      	b.n	80048e0 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80048d6:	055a      	lsls	r2, r3, #21
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff fcd5 	bl	8004294 <LL_ADC_REG_IsConversionOngoing>
 80048ea:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fcf5 	bl	80042e2 <LL_ADC_INJ_IsConversionOngoing>
 80048f8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004900:	2b00      	cmp	r3, #0
 8004902:	f040 822e 	bne.w	8004d62 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004906:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800490a:	2b00      	cmp	r3, #0
 800490c:	f040 8229 	bne.w	8004d62 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d116      	bne.n	800494e <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004926:	2b01      	cmp	r3, #1
 8004928:	d108      	bne.n	800493c <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8004938:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800493a:	e01f      	b.n	800497c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800494a:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800494c:	e016      	b.n	800497c <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004954:	2b01      	cmp	r3, #1
 8004956:	d109      	bne.n	800496c <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800495c:	f043 0220 	orr.w	r2, r3, #32
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800496a:	e007      	b.n	800497c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800497a:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004982:	2b01      	cmp	r3, #1
 8004984:	d110      	bne.n	80049a8 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004998:	430b      	orrs	r3, r1
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f042 0202 	orr.w	r2, r2, #2
 80049a4:	611a      	str	r2, [r3, #16]
 80049a6:	e007      	b.n	80049b8 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0202 	bic.w	r2, r2, #2
 80049b6:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049c0:	d112      	bne.n	80049e8 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	4619      	mov	r1, r3
 80049ce:	f7ff fbc3 	bl	8004158 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fb9b 	bl	8004116 <LL_ADC_SetSamplingTimeCommonConfig>
 80049e0:	e011      	b.n	8004a06 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80049e2:	bf00      	nop
 80049e4:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80049f4:	461a      	mov	r2, r3
 80049f6:	f7ff fbaf 	bl	8004158 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2100      	movs	r1, #0
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff fb88 	bl	8004116 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	08db      	lsrs	r3, r3, #3
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d022      	beq.n	8004a6e <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6818      	ldr	r0, [r3, #0]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	6919      	ldr	r1, [r3, #16]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a38:	f7ff fae2 	bl	8004000 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	6919      	ldr	r1, [r3, #16]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	f7ff fb2e 	bl	80040aa <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d102      	bne.n	8004a64 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004a5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a62:	e000      	b.n	8004a66 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8004a64:	2300      	movs	r3, #0
 8004a66:	461a      	mov	r2, r3
 8004a68:	f7ff fb3a 	bl	80040e0 <LL_ADC_SetOffsetSaturation>
 8004a6c:	e179      	b.n	8004d62 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2100      	movs	r1, #0
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff fae7 	bl	8004048 <LL_ADC_GetOffsetChannel>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2100      	movs	r1, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff fadc 	bl	8004048 <LL_ADC_GetOffsetChannel>
 8004a90:	4603      	mov	r3, r0
 8004a92:	0e9b      	lsrs	r3, r3, #26
 8004a94:	f003 021f 	and.w	r2, r3, #31
 8004a98:	e01e      	b.n	8004ad8 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff fad1 	bl	8004048 <LL_ADC_GetOffsetChannel>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ab0:	fa93 f3a3 	rbit	r3, r3
 8004ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004ab8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004abc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004ac0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8004ac8:	2320      	movs	r3, #32
 8004aca:	e004      	b.n	8004ad6 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004acc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004ad0:	fab3 f383 	clz	r3, r3
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d105      	bne.n	8004af0 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	0e9b      	lsrs	r3, r3, #26
 8004aea:	f003 031f 	and.w	r3, r3, #31
 8004aee:	e018      	b.n	8004b22 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004afc:	fa93 f3a3 	rbit	r3, r3
 8004b00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004b04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004b08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004b0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8004b14:	2320      	movs	r3, #32
 8004b16:	e004      	b.n	8004b22 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8004b18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004b1c:	fab3 f383 	clz	r3, r3
 8004b20:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d106      	bne.n	8004b34 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff faa0 	bl	8004074 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2101      	movs	r1, #1
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff fa84 	bl	8004048 <LL_ADC_GetOffsetChannel>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2101      	movs	r1, #1
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff fa79 	bl	8004048 <LL_ADC_GetOffsetChannel>
 8004b56:	4603      	mov	r3, r0
 8004b58:	0e9b      	lsrs	r3, r3, #26
 8004b5a:	f003 021f 	and.w	r2, r3, #31
 8004b5e:	e01e      	b.n	8004b9e <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2101      	movs	r1, #1
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff fa6e 	bl	8004048 <LL_ADC_GetOffsetChannel>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b76:	fa93 f3a3 	rbit	r3, r3
 8004b7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004b7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004b86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004b8e:	2320      	movs	r3, #32
 8004b90:	e004      	b.n	8004b9c <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8004b92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004b96:	fab3 f383 	clz	r3, r3
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d105      	bne.n	8004bb6 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	0e9b      	lsrs	r3, r3, #26
 8004bb0:	f003 031f 	and.w	r3, r3, #31
 8004bb4:	e018      	b.n	8004be8 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004bc2:	fa93 f3a3 	rbit	r3, r3
 8004bc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004bca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004bce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004bd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8004bda:	2320      	movs	r3, #32
 8004bdc:	e004      	b.n	8004be8 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8004bde:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004be2:	fab3 f383 	clz	r3, r3
 8004be6:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d106      	bne.n	8004bfa <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff fa3d 	bl	8004074 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2102      	movs	r1, #2
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff fa21 	bl	8004048 <LL_ADC_GetOffsetChannel>
 8004c06:	4603      	mov	r3, r0
 8004c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10a      	bne.n	8004c26 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2102      	movs	r1, #2
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff fa16 	bl	8004048 <LL_ADC_GetOffsetChannel>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	0e9b      	lsrs	r3, r3, #26
 8004c20:	f003 021f 	and.w	r2, r3, #31
 8004c24:	e01e      	b.n	8004c64 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2102      	movs	r1, #2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff fa0b 	bl	8004048 <LL_ADC_GetOffsetChannel>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c3c:	fa93 f3a3 	rbit	r3, r3
 8004c40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004c44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004c54:	2320      	movs	r3, #32
 8004c56:	e004      	b.n	8004c62 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004c58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c5c:	fab3 f383 	clz	r3, r3
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d105      	bne.n	8004c7c <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	0e9b      	lsrs	r3, r3, #26
 8004c76:	f003 031f 	and.w	r3, r3, #31
 8004c7a:	e014      	b.n	8004ca6 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c84:	fa93 f3a3 	rbit	r3, r3
 8004c88:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004c8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004c90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004c98:	2320      	movs	r3, #32
 8004c9a:	e004      	b.n	8004ca6 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004c9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ca0:	fab3 f383 	clz	r3, r3
 8004ca4:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d106      	bne.n	8004cb8 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2102      	movs	r1, #2
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff f9de 	bl	8004074 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2103      	movs	r1, #3
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff f9c2 	bl	8004048 <LL_ADC_GetOffsetChannel>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2103      	movs	r1, #3
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff f9b7 	bl	8004048 <LL_ADC_GetOffsetChannel>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	0e9b      	lsrs	r3, r3, #26
 8004cde:	f003 021f 	and.w	r2, r3, #31
 8004ce2:	e017      	b.n	8004d14 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2103      	movs	r1, #3
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff f9ac 	bl	8004048 <LL_ADC_GetOffsetChannel>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cf6:	fa93 f3a3 	rbit	r3, r3
 8004cfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004cfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cfe:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004d00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004d06:	2320      	movs	r3, #32
 8004d08:	e003      	b.n	8004d12 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004d0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d0c:	fab3 f383 	clz	r3, r3
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d105      	bne.n	8004d2c <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	0e9b      	lsrs	r3, r3, #26
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	e011      	b.n	8004d50 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d34:	fa93 f3a3 	rbit	r3, r3
 8004d38:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004d3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004d3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004d44:	2320      	movs	r3, #32
 8004d46:	e003      	b.n	8004d50 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004d48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d4a:	fab3 f383 	clz	r3, r3
 8004d4e:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d106      	bne.n	8004d62 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2103      	movs	r1, #3
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff f989 	bl	8004074 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fa54 	bl	8004214 <LL_ADC_IsEnabled>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f040 8140 	bne.w	8004ff4 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6818      	ldr	r0, [r3, #0]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	6819      	ldr	r1, [r3, #0]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	461a      	mov	r2, r3
 8004d82:	f7ff fa15 	bl	80041b0 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	4a8f      	ldr	r2, [pc, #572]	@ (8004fc8 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	f040 8131 	bne.w	8004ff4 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10b      	bne.n	8004dba <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	0e9b      	lsrs	r3, r3, #26
 8004da8:	3301      	adds	r3, #1
 8004daa:	f003 031f 	and.w	r3, r3, #31
 8004dae:	2b09      	cmp	r3, #9
 8004db0:	bf94      	ite	ls
 8004db2:	2301      	movls	r3, #1
 8004db4:	2300      	movhi	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	e019      	b.n	8004dee <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dc2:	fa93 f3a3 	rbit	r3, r3
 8004dc6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004dcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004dd2:	2320      	movs	r3, #32
 8004dd4:	e003      	b.n	8004dde <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004dd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dd8:	fab3 f383 	clz	r3, r3
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	3301      	adds	r3, #1
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	2b09      	cmp	r3, #9
 8004de6:	bf94      	ite	ls
 8004de8:	2301      	movls	r3, #1
 8004dea:	2300      	movhi	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d079      	beq.n	8004ee6 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d107      	bne.n	8004e0e <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	0e9b      	lsrs	r3, r3, #26
 8004e04:	3301      	adds	r3, #1
 8004e06:	069b      	lsls	r3, r3, #26
 8004e08:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e0c:	e015      	b.n	8004e3a <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e16:	fa93 f3a3 	rbit	r3, r3
 8004e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004e1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e1e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004e20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004e26:	2320      	movs	r3, #32
 8004e28:	e003      	b.n	8004e32 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004e2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e2c:	fab3 f383 	clz	r3, r3
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	3301      	adds	r3, #1
 8004e34:	069b      	lsls	r3, r3, #26
 8004e36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	0e9b      	lsrs	r3, r3, #26
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	f003 031f 	and.w	r3, r3, #31
 8004e52:	2101      	movs	r1, #1
 8004e54:	fa01 f303 	lsl.w	r3, r1, r3
 8004e58:	e017      	b.n	8004e8a <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e62:	fa93 f3a3 	rbit	r3, r3
 8004e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e6a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004e6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004e72:	2320      	movs	r3, #32
 8004e74:	e003      	b.n	8004e7e <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8004e76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e78:	fab3 f383 	clz	r3, r3
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	3301      	adds	r3, #1
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	2101      	movs	r1, #1
 8004e86:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8a:	ea42 0103 	orr.w	r1, r2, r3
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	0e9b      	lsrs	r3, r3, #26
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	f003 021f 	and.w	r2, r3, #31
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	4413      	add	r3, r2
 8004eac:	051b      	lsls	r3, r3, #20
 8004eae:	e018      	b.n	8004ee2 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb8:	fa93 f3a3 	rbit	r3, r3
 8004ebc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004ec8:	2320      	movs	r3, #32
 8004eca:	e003      	b.n	8004ed4 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ece:	fab3 f383 	clz	r3, r3
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	f003 021f 	and.w	r2, r3, #31
 8004eda:	4613      	mov	r3, r2
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	4413      	add	r3, r2
 8004ee0:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ee2:	430b      	orrs	r3, r1
 8004ee4:	e081      	b.n	8004fea <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d107      	bne.n	8004f02 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	0e9b      	lsrs	r3, r3, #26
 8004ef8:	3301      	adds	r3, #1
 8004efa:	069b      	lsls	r3, r3, #26
 8004efc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f00:	e015      	b.n	8004f2e <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0a:	fa93 f3a3 	rbit	r3, r3
 8004f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004f1a:	2320      	movs	r3, #32
 8004f1c:	e003      	b.n	8004f26 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f20:	fab3 f383 	clz	r3, r3
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	3301      	adds	r3, #1
 8004f28:	069b      	lsls	r3, r3, #26
 8004f2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d109      	bne.n	8004f4e <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	0e9b      	lsrs	r3, r3, #26
 8004f40:	3301      	adds	r3, #1
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	2101      	movs	r1, #1
 8004f48:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4c:	e017      	b.n	8004f7e <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	fa93 f3a3 	rbit	r3, r3
 8004f5a:	61bb      	str	r3, [r7, #24]
  return result;
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004f66:	2320      	movs	r3, #32
 8004f68:	e003      	b.n	8004f72 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	fab3 f383 	clz	r3, r3
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	3301      	adds	r3, #1
 8004f74:	f003 031f 	and.w	r3, r3, #31
 8004f78:	2101      	movs	r1, #1
 8004f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7e:	ea42 0103 	orr.w	r1, r2, r3
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10d      	bne.n	8004faa <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	0e9b      	lsrs	r3, r3, #26
 8004f94:	3301      	adds	r3, #1
 8004f96:	f003 021f 	and.w	r2, r3, #31
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	4413      	add	r3, r2
 8004fa0:	3b1e      	subs	r3, #30
 8004fa2:	051b      	lsls	r3, r3, #20
 8004fa4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004fa8:	e01e      	b.n	8004fe8 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	fa93 f3a3 	rbit	r3, r3
 8004fb6:	60fb      	str	r3, [r7, #12]
  return result;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d104      	bne.n	8004fcc <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8004fc2:	2320      	movs	r3, #32
 8004fc4:	e006      	b.n	8004fd4 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8004fc6:	bf00      	nop
 8004fc8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	fab3 f383 	clz	r3, r3
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	f003 021f 	and.w	r2, r3, #31
 8004fda:	4613      	mov	r3, r2
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	4413      	add	r3, r2
 8004fe0:	3b1e      	subs	r3, #30
 8004fe2:	051b      	lsls	r3, r3, #20
 8004fe4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fe8:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f7ff f8b2 	bl	8004158 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4b3a      	ldr	r3, [pc, #232]	@ (80050e4 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d067      	beq.n	80050d0 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005000:	4839      	ldr	r0, [pc, #228]	@ (80050e8 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8005002:	f7fe ffef 	bl	8003fe4 <LL_ADC_GetCommonPathInternalCh>
 8005006:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a37      	ldr	r2, [pc, #220]	@ (80050ec <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d004      	beq.n	800501e <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a35      	ldr	r2, [pc, #212]	@ (80050f0 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d127      	bne.n	800506e <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800501e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005022:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d121      	bne.n	800506e <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005032:	d14d      	bne.n	80050d0 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005034:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005038:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800503c:	4619      	mov	r1, r3
 800503e:	482a      	ldr	r0, [pc, #168]	@ (80050e8 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8005040:	f7fe ffbd 	bl	8003fbe <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8005044:	4b2b      	ldr	r3, [pc, #172]	@ (80050f4 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	099b      	lsrs	r3, r3, #6
 800504a:	4a2b      	ldr	r2, [pc, #172]	@ (80050f8 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	099a      	lsrs	r2, r3, #6
 8005052:	4613      	mov	r3, r2
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800505c:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800505e:	e002      	b.n	8005066 <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	3b01      	subs	r3, #1
 8005064:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1f9      	bne.n	8005060 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800506c:	e030      	b.n	80050d0 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a22      	ldr	r2, [pc, #136]	@ (80050fc <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d113      	bne.n	80050a0 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005078:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800507c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10d      	bne.n	80050a0 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1d      	ldr	r2, [pc, #116]	@ (8005100 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d020      	beq.n	80050d0 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800508e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005092:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005096:	4619      	mov	r1, r3
 8005098:	4813      	ldr	r0, [pc, #76]	@ (80050e8 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 800509a:	f7fe ff90 	bl	8003fbe <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800509e:	e017      	b.n	80050d0 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a17      	ldr	r2, [pc, #92]	@ (8005104 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d112      	bne.n	80050d0 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80050aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80050ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10c      	bne.n	80050d0 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a11      	ldr	r2, [pc, #68]	@ (8005100 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d007      	beq.n	80050d0 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80050c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80050c8:	4619      	mov	r1, r3
 80050ca:	4807      	ldr	r0, [pc, #28]	@ (80050e8 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80050cc:	f7fe ff77 	bl	8003fbe <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80050d8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80050dc:	4618      	mov	r0, r3
 80050de:	37d8      	adds	r7, #216	@ 0xd8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	80080000 	.word	0x80080000
 80050e8:	50000300 	.word	0x50000300
 80050ec:	c3210000 	.word	0xc3210000
 80050f0:	90c00010 	.word	0x90c00010
 80050f4:	20000000 	.word	0x20000000
 80050f8:	053e2d63 	.word	0x053e2d63
 80050fc:	c7520000 	.word	0xc7520000
 8005100:	50000100 	.word	0x50000100
 8005104:	cb840000 	.word	0xcb840000

08005108 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005108:	b590      	push	{r4, r7, lr}
 800510a:	b0a1      	sub	sp, #132	@ 0x84
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005122:	2302      	movs	r3, #2
 8005124:	e08b      	b.n	800523e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800512e:	2300      	movs	r3, #0
 8005130:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005132:	2300      	movs	r3, #0
 8005134:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800513e:	d102      	bne.n	8005146 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005140:	4b41      	ldr	r3, [pc, #260]	@ (8005248 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005142:	60bb      	str	r3, [r7, #8]
 8005144:	e001      	b.n	800514a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005146:	2300      	movs	r3, #0
 8005148:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10b      	bne.n	8005168 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005154:	f043 0220 	orr.w	r2, r3, #32
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e06a      	b.n	800523e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff f892 	bl	8004294 <LL_ADC_REG_IsConversionOngoing>
 8005170:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f7ff f88c 	bl	8004294 <LL_ADC_REG_IsConversionOngoing>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d14c      	bne.n	800521c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005182:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005184:	2b00      	cmp	r3, #0
 8005186:	d149      	bne.n	800521c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005188:	4b30      	ldr	r3, [pc, #192]	@ (800524c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800518a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d028      	beq.n	80051e6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005194:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	6859      	ldr	r1, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80051a6:	035b      	lsls	r3, r3, #13
 80051a8:	430b      	orrs	r3, r1
 80051aa:	431a      	orrs	r2, r3
 80051ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051b0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80051b4:	f7ff f82e 	bl	8004214 <LL_ADC_IsEnabled>
 80051b8:	4604      	mov	r4, r0
 80051ba:	4823      	ldr	r0, [pc, #140]	@ (8005248 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80051bc:	f7ff f82a 	bl	8004214 <LL_ADC_IsEnabled>
 80051c0:	4603      	mov	r3, r0
 80051c2:	4323      	orrs	r3, r4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d133      	bne.n	8005230 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80051c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80051d0:	f023 030f 	bic.w	r3, r3, #15
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	6811      	ldr	r1, [r2, #0]
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	6892      	ldr	r2, [r2, #8]
 80051dc:	430a      	orrs	r2, r1
 80051de:	431a      	orrs	r2, r3
 80051e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051e2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051e4:	e024      	b.n	8005230 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80051e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051f0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051f2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80051f6:	f7ff f80d 	bl	8004214 <LL_ADC_IsEnabled>
 80051fa:	4604      	mov	r4, r0
 80051fc:	4812      	ldr	r0, [pc, #72]	@ (8005248 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80051fe:	f7ff f809 	bl	8004214 <LL_ADC_IsEnabled>
 8005202:	4603      	mov	r3, r0
 8005204:	4323      	orrs	r3, r4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d112      	bne.n	8005230 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800520a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005212:	f023 030f 	bic.w	r3, r3, #15
 8005216:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005218:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800521a:	e009      	b.n	8005230 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005220:	f043 0220 	orr.w	r2, r3, #32
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800522e:	e000      	b.n	8005232 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005230:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800523a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800523e:	4618      	mov	r0, r3
 8005240:	3784      	adds	r7, #132	@ 0x84
 8005242:	46bd      	mov	sp, r7
 8005244:	bd90      	pop	{r4, r7, pc}
 8005246:	bf00      	nop
 8005248:	50000100 	.word	0x50000100
 800524c:	50000300 	.word	0x50000300

08005250 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005258:	4b05      	ldr	r3, [pc, #20]	@ (8005270 <LL_EXTI_EnableIT_0_31+0x20>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	4904      	ldr	r1, [pc, #16]	@ (8005270 <LL_EXTI_EnableIT_0_31+0x20>)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4313      	orrs	r3, r2
 8005262:	600b      	str	r3, [r1, #0]
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	40010400 	.word	0x40010400

08005274 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800527c:	4b06      	ldr	r3, [pc, #24]	@ (8005298 <LL_EXTI_DisableIT_0_31+0x24>)
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	43db      	mvns	r3, r3
 8005284:	4904      	ldr	r1, [pc, #16]	@ (8005298 <LL_EXTI_DisableIT_0_31+0x24>)
 8005286:	4013      	ands	r3, r2
 8005288:	600b      	str	r3, [r1, #0]
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40010400 	.word	0x40010400

0800529c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80052a4:	4b05      	ldr	r3, [pc, #20]	@ (80052bc <LL_EXTI_EnableEvent_0_31+0x20>)
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	4904      	ldr	r1, [pc, #16]	@ (80052bc <LL_EXTI_EnableEvent_0_31+0x20>)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	604b      	str	r3, [r1, #4]

}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	40010400 	.word	0x40010400

080052c0 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80052c8:	4b06      	ldr	r3, [pc, #24]	@ (80052e4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	43db      	mvns	r3, r3
 80052d0:	4904      	ldr	r1, [pc, #16]	@ (80052e4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	604b      	str	r3, [r1, #4]
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40010400 	.word	0x40010400

080052e8 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80052f0:	4b05      	ldr	r3, [pc, #20]	@ (8005308 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	4904      	ldr	r1, [pc, #16]	@ (8005308 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	608b      	str	r3, [r1, #8]

}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	40010400 	.word	0x40010400

0800530c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005314:	4b06      	ldr	r3, [pc, #24]	@ (8005330 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	43db      	mvns	r3, r3
 800531c:	4904      	ldr	r1, [pc, #16]	@ (8005330 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800531e:	4013      	ands	r3, r2
 8005320:	608b      	str	r3, [r1, #8]

}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	40010400 	.word	0x40010400

08005334 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800533c:	4b05      	ldr	r3, [pc, #20]	@ (8005354 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	4904      	ldr	r1, [pc, #16]	@ (8005354 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4313      	orrs	r3, r2
 8005346:	60cb      	str	r3, [r1, #12]
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	40010400 	.word	0x40010400

08005358 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005360:	4b06      	ldr	r3, [pc, #24]	@ (800537c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	43db      	mvns	r3, r3
 8005368:	4904      	ldr	r1, [pc, #16]	@ (800537c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800536a:	4013      	ands	r3, r2
 800536c:	60cb      	str	r3, [r1, #12]
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40010400 	.word	0x40010400

08005380 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8005388:	4b07      	ldr	r3, [pc, #28]	@ (80053a8 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800538a:	695a      	ldr	r2, [r3, #20]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4013      	ands	r3, r2
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	429a      	cmp	r2, r3
 8005394:	d101      	bne.n	800539a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	40010400 	.word	0x40010400

080053ac <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80053b4:	4a04      	ldr	r2, [pc, #16]	@ (80053c8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6153      	str	r3, [r2, #20]
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40010400 	.word	0x40010400

080053cc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d102      	bne.n	80053e8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	77fb      	strb	r3, [r7, #31]
 80053e6:	e0bc      	b.n	8005562 <HAL_COMP_Init+0x196>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053f6:	d102      	bne.n	80053fe <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	77fb      	strb	r3, [r7, #31]
 80053fc:	e0b1      	b.n	8005562 <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	7f5b      	ldrb	r3, [r3, #29]
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d108      	bne.n	800541a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7fc f867 	bl	80014e8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005424:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8005440:	4313      	orrs	r3, r2
 8005442:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	4b48      	ldr	r3, [pc, #288]	@ (800556c <HAL_COMP_Init+0x1a0>)
 800544c:	4013      	ands	r3, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6812      	ldr	r2, [r2, #0]
 8005452:	6979      	ldr	r1, [r7, #20]
 8005454:	430b      	orrs	r3, r1
 8005456:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d016      	beq.n	8005494 <HAL_COMP_Init+0xc8>
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d113      	bne.n	8005494 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800546c:	4b40      	ldr	r3, [pc, #256]	@ (8005570 <HAL_COMP_Init+0x1a4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	099b      	lsrs	r3, r3, #6
 8005472:	4a40      	ldr	r2, [pc, #256]	@ (8005574 <HAL_COMP_Init+0x1a8>)
 8005474:	fba2 2303 	umull	r2, r3, r2, r3
 8005478:	099b      	lsrs	r3, r3, #6
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8005486:	e002      	b.n	800548e <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	3b01      	subs	r3, #1
 800548c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1f9      	bne.n	8005488 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a37      	ldr	r2, [pc, #220]	@ (8005578 <HAL_COMP_Init+0x1ac>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d012      	beq.n	80054c4 <HAL_COMP_Init+0xf8>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a36      	ldr	r2, [pc, #216]	@ (800557c <HAL_COMP_Init+0x1b0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00a      	beq.n	80054be <HAL_COMP_Init+0xf2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a34      	ldr	r2, [pc, #208]	@ (8005580 <HAL_COMP_Init+0x1b4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d102      	bne.n	80054b8 <HAL_COMP_Init+0xec>
 80054b2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80054b6:	e007      	b.n	80054c8 <HAL_COMP_Init+0xfc>
 80054b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80054bc:	e004      	b.n	80054c8 <HAL_COMP_Init+0xfc>
 80054be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80054c2:	e001      	b.n	80054c8 <HAL_COMP_Init+0xfc>
 80054c4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80054c8:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d037      	beq.n	8005546 <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	f003 0310 	and.w	r3, r3, #16
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80054e2:	6938      	ldr	r0, [r7, #16]
 80054e4:	f7ff ff00 	bl	80052e8 <LL_EXTI_EnableRisingTrig_0_31>
 80054e8:	e002      	b.n	80054f0 <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80054ea:	6938      	ldr	r0, [r7, #16]
 80054ec:	f7ff ff0e 	bl	800530c <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80054fc:	6938      	ldr	r0, [r7, #16]
 80054fe:	f7ff ff19 	bl	8005334 <LL_EXTI_EnableFallingTrig_0_31>
 8005502:	e002      	b.n	800550a <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8005504:	6938      	ldr	r0, [r7, #16]
 8005506:	f7ff ff27 	bl	8005358 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 800550a:	6938      	ldr	r0, [r7, #16]
 800550c:	f7ff ff4e 	bl	80053ac <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 800551c:	6938      	ldr	r0, [r7, #16]
 800551e:	f7ff febd 	bl	800529c <LL_EXTI_EnableEvent_0_31>
 8005522:	e002      	b.n	800552a <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 8005524:	6938      	ldr	r0, [r7, #16]
 8005526:	f7ff fecb 	bl	80052c0 <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 8005536:	6938      	ldr	r0, [r7, #16]
 8005538:	f7ff fe8a 	bl	8005250 <LL_EXTI_EnableIT_0_31>
 800553c:	e009      	b.n	8005552 <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 800553e:	6938      	ldr	r0, [r7, #16]
 8005540:	f7ff fe98 	bl	8005274 <LL_EXTI_DisableIT_0_31>
 8005544:	e005      	b.n	8005552 <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 8005546:	6938      	ldr	r0, [r7, #16]
 8005548:	f7ff feba 	bl	80052c0 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 800554c:	6938      	ldr	r0, [r7, #16]
 800554e:	f7ff fe91 	bl	8005274 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	7f5b      	ldrb	r3, [r3, #29]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d102      	bne.n	8005562 <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8005562:	7ffb      	ldrb	r3, [r7, #31]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3720      	adds	r7, #32
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	ff007e0f 	.word	0xff007e0f
 8005570:	20000000 	.word	0x20000000
 8005574:	053e2d63 	.word	0x053e2d63
 8005578:	40010200 	.word	0x40010200
 800557c:	40010204 	.word	0x40010204
 8005580:	40010208 	.word	0x40010208

08005584 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 800558c:	2300      	movs	r3, #0
 800558e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d102      	bne.n	80055a0 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	73fb      	strb	r3, [r7, #15]
 800559e:	e02e      	b.n	80055fe <HAL_COMP_Start+0x7a>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055ae:	d102      	bne.n	80055b6 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	73fb      	strb	r3, [r7, #15]
 80055b4:	e023      	b.n	80055fe <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	7f5b      	ldrb	r3, [r3, #29]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d11c      	bne.n	80055fa <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 80055d6:	4b0d      	ldr	r3, [pc, #52]	@ (800560c <HAL_COMP_Start+0x88>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a0d      	ldr	r2, [pc, #52]	@ (8005610 <HAL_COMP_Start+0x8c>)
 80055dc:	fba2 2303 	umull	r2, r3, r2, r3
 80055e0:	0cda      	lsrs	r2, r3, #19
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80055ea:	e002      	b.n	80055f2 <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f9      	bne.n	80055ec <HAL_COMP_Start+0x68>
 80055f8:	e001      	b.n	80055fe <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	20000000 	.word	0x20000000
 8005610:	431bde83 	.word	0x431bde83

08005614 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a17      	ldr	r2, [pc, #92]	@ (8005680 <HAL_COMP_IRQHandler+0x6c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d012      	beq.n	800564c <HAL_COMP_IRQHandler+0x38>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a16      	ldr	r2, [pc, #88]	@ (8005684 <HAL_COMP_IRQHandler+0x70>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00a      	beq.n	8005646 <HAL_COMP_IRQHandler+0x32>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a14      	ldr	r2, [pc, #80]	@ (8005688 <HAL_COMP_IRQHandler+0x74>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d102      	bne.n	8005640 <HAL_COMP_IRQHandler+0x2c>
 800563a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800563e:	e007      	b.n	8005650 <HAL_COMP_IRQHandler+0x3c>
 8005640:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005644:	e004      	b.n	8005650 <HAL_COMP_IRQHandler+0x3c>
 8005646:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800564a:	e001      	b.n	8005650 <HAL_COMP_IRQHandler+0x3c>
 800564c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005650:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if (LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8005656:	68b8      	ldr	r0, [r7, #8]
 8005658:	f7ff fe92 	bl	8005380 <LL_EXTI_IsActiveFlag_0_31>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 8005662:	2301      	movs	r3, #1
 8005664:	60fb      	str	r3, [r7, #12]
  }
#endif /* COMP7 */

  if (tmp_comp_exti_flag_set != 0UL)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_COMP_IRQHandler+0x64>
    else
    {
      LL_EXTI_ClearFlag_0_31(exti_line);
    }
#else
    LL_EXTI_ClearFlag_0_31(exti_line);
 800566c:	68b8      	ldr	r0, [r7, #8]
 800566e:	f7ff fe9d 	bl	80053ac <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f80a 	bl	800568c <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8005678:	bf00      	nop
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40010200 	.word	0x40010200
 8005684:	40010204 	.word	0x40010204
 8005688:	40010208 	.word	0x40010208

0800568c <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056b0:	4b0c      	ldr	r3, [pc, #48]	@ (80056e4 <__NVIC_SetPriorityGrouping+0x44>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80056bc:	4013      	ands	r3, r2
 80056be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80056cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056d2:	4a04      	ldr	r2, [pc, #16]	@ (80056e4 <__NVIC_SetPriorityGrouping+0x44>)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	60d3      	str	r3, [r2, #12]
}
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	e000ed00 	.word	0xe000ed00

080056e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056ec:	4b04      	ldr	r3, [pc, #16]	@ (8005700 <__NVIC_GetPriorityGrouping+0x18>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	0a1b      	lsrs	r3, r3, #8
 80056f2:	f003 0307 	and.w	r3, r3, #7
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	e000ed00 	.word	0xe000ed00

08005704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800570e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005712:	2b00      	cmp	r3, #0
 8005714:	db0b      	blt.n	800572e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	f003 021f 	and.w	r2, r3, #31
 800571c:	4907      	ldr	r1, [pc, #28]	@ (800573c <__NVIC_EnableIRQ+0x38>)
 800571e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005722:	095b      	lsrs	r3, r3, #5
 8005724:	2001      	movs	r0, #1
 8005726:	fa00 f202 	lsl.w	r2, r0, r2
 800572a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	e000e100 	.word	0xe000e100

08005740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	6039      	str	r1, [r7, #0]
 800574a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800574c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005750:	2b00      	cmp	r3, #0
 8005752:	db0a      	blt.n	800576a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	b2da      	uxtb	r2, r3
 8005758:	490c      	ldr	r1, [pc, #48]	@ (800578c <__NVIC_SetPriority+0x4c>)
 800575a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800575e:	0112      	lsls	r2, r2, #4
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	440b      	add	r3, r1
 8005764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005768:	e00a      	b.n	8005780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	b2da      	uxtb	r2, r3
 800576e:	4908      	ldr	r1, [pc, #32]	@ (8005790 <__NVIC_SetPriority+0x50>)
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	3b04      	subs	r3, #4
 8005778:	0112      	lsls	r2, r2, #4
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	440b      	add	r3, r1
 800577e:	761a      	strb	r2, [r3, #24]
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	e000e100 	.word	0xe000e100
 8005790:	e000ed00 	.word	0xe000ed00

08005794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005794:	b480      	push	{r7}
 8005796:	b089      	sub	sp, #36	@ 0x24
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	f1c3 0307 	rsb	r3, r3, #7
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	bf28      	it	cs
 80057b2:	2304      	movcs	r3, #4
 80057b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	3304      	adds	r3, #4
 80057ba:	2b06      	cmp	r3, #6
 80057bc:	d902      	bls.n	80057c4 <NVIC_EncodePriority+0x30>
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	3b03      	subs	r3, #3
 80057c2:	e000      	b.n	80057c6 <NVIC_EncodePriority+0x32>
 80057c4:	2300      	movs	r3, #0
 80057c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057c8:	f04f 32ff 	mov.w	r2, #4294967295
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	43da      	mvns	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	401a      	ands	r2, r3
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057dc:	f04f 31ff 	mov.w	r1, #4294967295
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	fa01 f303 	lsl.w	r3, r1, r3
 80057e6:	43d9      	mvns	r1, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057ec:	4313      	orrs	r3, r2
         );
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3724      	adds	r7, #36	@ 0x24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
	...

080057fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3b01      	subs	r3, #1
 8005808:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800580c:	d301      	bcc.n	8005812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800580e:	2301      	movs	r3, #1
 8005810:	e00f      	b.n	8005832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005812:	4a0a      	ldr	r2, [pc, #40]	@ (800583c <SysTick_Config+0x40>)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3b01      	subs	r3, #1
 8005818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800581a:	210f      	movs	r1, #15
 800581c:	f04f 30ff 	mov.w	r0, #4294967295
 8005820:	f7ff ff8e 	bl	8005740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005824:	4b05      	ldr	r3, [pc, #20]	@ (800583c <SysTick_Config+0x40>)
 8005826:	2200      	movs	r2, #0
 8005828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800582a:	4b04      	ldr	r3, [pc, #16]	@ (800583c <SysTick_Config+0x40>)
 800582c:	2207      	movs	r2, #7
 800582e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	e000e010 	.word	0xe000e010

08005840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff ff29 	bl	80056a0 <__NVIC_SetPriorityGrouping>
}
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b086      	sub	sp, #24
 800585a:	af00      	add	r7, sp, #0
 800585c:	4603      	mov	r3, r0
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	607a      	str	r2, [r7, #4]
 8005862:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005864:	f7ff ff40 	bl	80056e8 <__NVIC_GetPriorityGrouping>
 8005868:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	68b9      	ldr	r1, [r7, #8]
 800586e:	6978      	ldr	r0, [r7, #20]
 8005870:	f7ff ff90 	bl	8005794 <NVIC_EncodePriority>
 8005874:	4602      	mov	r2, r0
 8005876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800587a:	4611      	mov	r1, r2
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff ff5f 	bl	8005740 <__NVIC_SetPriority>
}
 8005882:	bf00      	nop
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b082      	sub	sp, #8
 800588e:	af00      	add	r7, sp, #0
 8005890:	4603      	mov	r3, r0
 8005892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff ff33 	bl	8005704 <__NVIC_EnableIRQ>
}
 800589e:	bf00      	nop
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7ff ffa4 	bl	80057fc <SysTick_Config>
 80058b4:	4603      	mov	r3, r0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e014      	b.n	80058fa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	791b      	ldrb	r3, [r3, #4]
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d105      	bne.n	80058e6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7fb fea9 	bl	8001638 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2202      	movs	r2, #2
 80058ea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e056      	b.n	80059c6 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	795b      	ldrb	r3, [r3, #5]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d101      	bne.n	8005924 <HAL_DAC_Start+0x20>
 8005920:	2302      	movs	r3, #2
 8005922:	e050      	b.n	80059c6 <HAL_DAC_Start+0xc2>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6819      	ldr	r1, [r3, #0]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	2201      	movs	r2, #1
 800593e:	409a      	lsls	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005948:	4b22      	ldr	r3, [pc, #136]	@ (80059d4 <HAL_DAC_Start+0xd0>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	099b      	lsrs	r3, r3, #6
 800594e:	4a22      	ldr	r2, [pc, #136]	@ (80059d8 <HAL_DAC_Start+0xd4>)
 8005950:	fba2 2303 	umull	r2, r3, r2, r3
 8005954:	099b      	lsrs	r3, r3, #6
 8005956:	3301      	adds	r3, #1
 8005958:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800595a:	e002      	b.n	8005962 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3b01      	subs	r3, #1
 8005960:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1f9      	bne.n	800595c <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10f      	bne.n	800598e <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005978:	2b02      	cmp	r3, #2
 800597a:	d11d      	bne.n	80059b8 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	605a      	str	r2, [r3, #4]
 800598c:	e014      	b.n	80059b8 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	f003 0310 	and.w	r3, r3, #16
 800599e:	2102      	movs	r1, #2
 80059a0:	fa01 f303 	lsl.w	r3, r1, r3
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d107      	bne.n	80059b8 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0202 	orr.w	r2, r2, #2
 80059b6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	20000000 	.word	0x20000000
 80059d8:	053e2d63 	.word	0x053e2d63

080059dc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e018      	b.n	8005a2a <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d105      	bne.n	8005a16 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4413      	add	r3, r2
 8005a10:	3308      	adds	r3, #8
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	e004      	b.n	8005a20 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	3314      	adds	r3, #20
 8005a1e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	461a      	mov	r2, r3
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
	...

08005a38 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08a      	sub	sp, #40	@ 0x28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <HAL_DAC_ConfigChannel+0x1c>
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e19e      	b.n	8005d96 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	795b      	ldrb	r3, [r3, #5]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_DAC_ConfigChannel+0x2c>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e198      	b.n	8005d96 <HAL_DAC_ConfigChannel+0x35e>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	d17a      	bne.n	8005b6e <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005a78:	f7fc ff90 	bl	800299c <HAL_GetTick>
 8005a7c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d13d      	bne.n	8005b00 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005a84:	e018      	b.n	8005ab8 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005a86:	f7fc ff89 	bl	800299c <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d911      	bls.n	8005ab8 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	f043 0208 	orr.w	r2, r3, #8
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2203      	movs	r2, #3
 8005ab2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e16e      	b.n	8005d96 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005abe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1df      	bne.n	8005a86 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ace:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ad0:	e020      	b.n	8005b14 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005ad2:	f7fc ff63 	bl	800299c <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d90f      	bls.n	8005b00 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	da0a      	bge.n	8005b00 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f043 0208 	orr.w	r2, r3, #8
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2203      	movs	r2, #3
 8005afa:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e14a      	b.n	8005d96 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	dbe3      	blt.n	8005ad2 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b12:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f003 0310 	and.w	r3, r3, #16
 8005b20:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005b24:	fa01 f303 	lsl.w	r3, r1, r3
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	ea02 0103 	and.w	r1, r2, r3
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	409a      	lsls	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f003 0310 	and.w	r3, r3, #16
 8005b4e:	21ff      	movs	r1, #255	@ 0xff
 8005b50:	fa01 f303 	lsl.w	r3, r1, r3
 8005b54:	43db      	mvns	r3, r3
 8005b56:	ea02 0103 	and.w	r1, r2, r3
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f003 0310 	and.w	r3, r3, #16
 8005b64:	409a      	lsls	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d11d      	bne.n	8005bb2 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f003 0310 	and.w	r3, r3, #16
 8005b84:	221f      	movs	r2, #31
 8005b86:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8a:	43db      	mvns	r3, r3
 8005b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b8e:	4013      	ands	r3, r2
 8005b90:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f003 0310 	and.w	r3, r3, #16
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bb0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2207      	movs	r2, #7
 8005bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc6:	43db      	mvns	r3, r3
 8005bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bca:	4013      	ands	r3, r2
 8005bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d102      	bne.n	8005bdc <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	623b      	str	r3, [r7, #32]
 8005bda:	e00f      	b.n	8005bfc <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d102      	bne.n	8005bea <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005be4:	2301      	movs	r3, #1
 8005be6:	623b      	str	r3, [r7, #32]
 8005be8:	e008      	b.n	8005bfc <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d102      	bne.n	8005bf8 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	623b      	str	r3, [r7, #32]
 8005bf6:	e001      	b.n	8005bfc <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	6a3a      	ldr	r2, [r7, #32]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f003 0310 	and.w	r3, r3, #16
 8005c12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c16:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1a:	43db      	mvns	r3, r3
 8005c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c1e:	4013      	ands	r3, r2
 8005c20:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	791b      	ldrb	r3, [r3, #4]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d102      	bne.n	8005c30 <HAL_DAC_ConfigChannel+0x1f8>
 8005c2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005c2e:	e000      	b.n	8005c32 <HAL_DAC_ConfigChannel+0x1fa>
 8005c30:	2300      	movs	r3, #0
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f003 0310 	and.w	r3, r3, #16
 8005c3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	43db      	mvns	r3, r3
 8005c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	795b      	ldrb	r3, [r3, #5]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d102      	bne.n	8005c5c <HAL_DAC_ConfigChannel+0x224>
 8005c56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c5a:	e000      	b.n	8005c5e <HAL_DAC_ConfigChannel+0x226>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d114      	bne.n	8005c9e <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005c74:	f001 fae0 	bl	8007238 <HAL_RCC_GetHCLKFreq>
 8005c78:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	4a48      	ldr	r2, [pc, #288]	@ (8005da0 <HAL_DAC_ConfigChannel+0x368>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d904      	bls.n	8005c8c <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c8a:	e00f      	b.n	8005cac <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	4a45      	ldr	r2, [pc, #276]	@ (8005da4 <HAL_DAC_ConfigChannel+0x36c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d90a      	bls.n	8005caa <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c9c:	e006      	b.n	8005cac <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ca8:	e000      	b.n	8005cac <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005caa:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f003 0310 	and.w	r3, r3, #16
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6819      	ldr	r1, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f003 0310 	and.w	r3, r3, #16
 8005cd2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	43da      	mvns	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	400a      	ands	r2, r1
 8005ce2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f003 0310 	and.w	r3, r3, #16
 8005cf2:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cfe:	4013      	ands	r3, r2
 8005d00:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f003 0310 	and.w	r3, r3, #16
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d16:	4313      	orrs	r3, r2
 8005d18:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d20:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6819      	ldr	r1, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f003 0310 	and.w	r3, r3, #16
 8005d2e:	22c0      	movs	r2, #192	@ 0xc0
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	43da      	mvns	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	400a      	ands	r2, r1
 8005d3c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	089b      	lsrs	r3, r3, #2
 8005d44:	f003 030f 	and.w	r3, r3, #15
 8005d48:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	089b      	lsrs	r3, r3, #2
 8005d50:	021b      	lsls	r3, r3, #8
 8005d52:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d70:	43db      	mvns	r3, r3
 8005d72:	ea02 0103 	and.w	r1, r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	409a      	lsls	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005d94:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3728      	adds	r7, #40	@ 0x28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	09896800 	.word	0x09896800
 8005da4:	04c4b400 	.word	0x04c4b400

08005da8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e08d      	b.n	8005ed6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	4b47      	ldr	r3, [pc, #284]	@ (8005ee0 <HAL_DMA_Init+0x138>)
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d80f      	bhi.n	8005de6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	4b45      	ldr	r3, [pc, #276]	@ (8005ee4 <HAL_DMA_Init+0x13c>)
 8005dce:	4413      	add	r3, r2
 8005dd0:	4a45      	ldr	r2, [pc, #276]	@ (8005ee8 <HAL_DMA_Init+0x140>)
 8005dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd6:	091b      	lsrs	r3, r3, #4
 8005dd8:	009a      	lsls	r2, r3, #2
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a42      	ldr	r2, [pc, #264]	@ (8005eec <HAL_DMA_Init+0x144>)
 8005de2:	641a      	str	r2, [r3, #64]	@ 0x40
 8005de4:	e00e      	b.n	8005e04 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	4b40      	ldr	r3, [pc, #256]	@ (8005ef0 <HAL_DMA_Init+0x148>)
 8005dee:	4413      	add	r3, r2
 8005df0:	4a3d      	ldr	r2, [pc, #244]	@ (8005ee8 <HAL_DMA_Init+0x140>)
 8005df2:	fba2 2303 	umull	r2, r3, r2, r3
 8005df6:	091b      	lsrs	r3, r3, #4
 8005df8:	009a      	lsls	r2, r3, #2
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a3c      	ldr	r2, [pc, #240]	@ (8005ef4 <HAL_DMA_Init+0x14c>)
 8005e02:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fa76 	bl	8006348 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e64:	d102      	bne.n	8005e6c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e80:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d010      	beq.n	8005eac <HAL_DMA_Init+0x104>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d80c      	bhi.n	8005eac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fa96 	bl	80063c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ea8:	605a      	str	r2, [r3, #4]
 8005eaa:	e008      	b.n	8005ebe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	40020407 	.word	0x40020407
 8005ee4:	bffdfff8 	.word	0xbffdfff8
 8005ee8:	cccccccd 	.word	0xcccccccd
 8005eec:	40020000 	.word	0x40020000
 8005ef0:	bffdfbf8 	.word	0xbffdfbf8
 8005ef4:	40020400 	.word	0x40020400

08005ef8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_DMA_Start_IT+0x20>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e066      	b.n	8005fe6 <HAL_DMA_Start_IT+0xee>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d155      	bne.n	8005fd8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 0201 	bic.w	r2, r2, #1
 8005f48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	68b9      	ldr	r1, [r7, #8]
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 f9bb 	bl	80062cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d008      	beq.n	8005f70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f042 020e 	orr.w	r2, r2, #14
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	e00f      	b.n	8005f90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 0204 	bic.w	r2, r2, #4
 8005f7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 020a 	orr.w	r2, r2, #10
 8005f8e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d007      	beq.n	8005fae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d007      	beq.n	8005fc6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fc4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f042 0201 	orr.w	r2, r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	e005      	b.n	8005fe4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b085      	sub	sp, #20
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b02      	cmp	r3, #2
 8006004:	d005      	beq.n	8006012 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2204      	movs	r2, #4
 800600a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	73fb      	strb	r3, [r7, #15]
 8006010:	e037      	b.n	8006082 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 020e 	bic.w	r2, r2, #14
 8006020:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800602c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006030:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0201 	bic.w	r2, r2, #1
 8006040:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006046:	f003 021f 	and.w	r2, r3, #31
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604e:	2101      	movs	r1, #1
 8006050:	fa01 f202 	lsl.w	r2, r1, r2
 8006054:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800605e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00c      	beq.n	8006082 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006072:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006076:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006080:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8006092:	7bfb      	ldrb	r3, [r7, #15]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060a8:	2300      	movs	r3, #0
 80060aa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d00d      	beq.n	80060d4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2204      	movs	r2, #4
 80060bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	73fb      	strb	r3, [r7, #15]
 80060d2:	e047      	b.n	8006164 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 020e 	bic.w	r2, r2, #14
 80060e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 0201 	bic.w	r2, r2, #1
 80060f2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006102:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006108:	f003 021f 	and.w	r2, r3, #31
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006110:	2101      	movs	r1, #1
 8006112:	fa01 f202 	lsl.w	r2, r1, r2
 8006116:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006120:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00c      	beq.n	8006144 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006134:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006138:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006142:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	4798      	blx	r3
    }
  }
  return status;
 8006164:	7bfb      	ldrb	r3, [r7, #15]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800618a:	f003 031f 	and.w	r3, r3, #31
 800618e:	2204      	movs	r2, #4
 8006190:	409a      	lsls	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4013      	ands	r3, r2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d026      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x7a>
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d021      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d107      	bne.n	80061c2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0204 	bic.w	r2, r2, #4
 80061c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c6:	f003 021f 	and.w	r2, r3, #31
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ce:	2104      	movs	r1, #4
 80061d0:	fa01 f202 	lsl.w	r2, r1, r2
 80061d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d071      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80061e6:	e06c      	b.n	80062c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ec:	f003 031f 	and.w	r3, r3, #31
 80061f0:	2202      	movs	r2, #2
 80061f2:	409a      	lsls	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4013      	ands	r3, r2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d02e      	beq.n	800625a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d029      	beq.n	800625a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10b      	bne.n	800622c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 020a 	bic.w	r2, r2, #10
 8006222:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006230:	f003 021f 	and.w	r2, r3, #31
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006238:	2102      	movs	r1, #2
 800623a:	fa01 f202 	lsl.w	r2, r1, r2
 800623e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624c:	2b00      	cmp	r3, #0
 800624e:	d038      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006258:	e033      	b.n	80062c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800625e:	f003 031f 	and.w	r3, r3, #31
 8006262:	2208      	movs	r2, #8
 8006264:	409a      	lsls	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4013      	ands	r3, r2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d02a      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	2b00      	cmp	r3, #0
 8006276:	d025      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 020e 	bic.w	r2, r2, #14
 8006286:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800628c:	f003 021f 	and.w	r2, r3, #31
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006294:	2101      	movs	r1, #1
 8006296:	fa01 f202 	lsl.w	r2, r1, r2
 800629a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d004      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80062c2:	bf00      	nop
 80062c4:	bf00      	nop
}
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80062e2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d004      	beq.n	80062f6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80062f4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062fa:	f003 021f 	and.w	r2, r3, #31
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006302:	2101      	movs	r1, #1
 8006304:	fa01 f202 	lsl.w	r2, r1, r2
 8006308:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	2b10      	cmp	r3, #16
 8006318:	d108      	bne.n	800632c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800632a:	e007      	b.n	800633c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	60da      	str	r2, [r3, #12]
}
 800633c:	bf00      	nop
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	4b16      	ldr	r3, [pc, #88]	@ (80063b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006358:	429a      	cmp	r2, r3
 800635a:	d802      	bhi.n	8006362 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800635c:	4b15      	ldr	r3, [pc, #84]	@ (80063b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	e001      	b.n	8006366 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8006362:	4b15      	ldr	r3, [pc, #84]	@ (80063b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006364:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	b2db      	uxtb	r3, r3
 8006370:	3b08      	subs	r3, #8
 8006372:	4a12      	ldr	r2, [pc, #72]	@ (80063bc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006374:	fba2 2303 	umull	r2, r3, r2, r3
 8006378:	091b      	lsrs	r3, r3, #4
 800637a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006380:	089b      	lsrs	r3, r3, #2
 8006382:	009a      	lsls	r2, r3, #2
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	4413      	add	r3, r2
 8006388:	461a      	mov	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a0b      	ldr	r2, [pc, #44]	@ (80063c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006392:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	2201      	movs	r2, #1
 800639c:	409a      	lsls	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80063a2:	bf00      	nop
 80063a4:	371c      	adds	r7, #28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	40020407 	.word	0x40020407
 80063b4:	40020800 	.word	0x40020800
 80063b8:	40020820 	.word	0x40020820
 80063bc:	cccccccd 	.word	0xcccccccd
 80063c0:	40020880 	.word	0x40020880

080063c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	461a      	mov	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a08      	ldr	r2, [pc, #32]	@ (8006408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80063e6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	f003 031f 	and.w	r3, r3, #31
 80063f0:	2201      	movs	r2, #1
 80063f2:	409a      	lsls	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80063f8:	bf00      	nop
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	1000823f 	.word	0x1000823f
 8006408:	40020940 	.word	0x40020940

0800640c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006416:	2300      	movs	r3, #0
 8006418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800641a:	e15a      	b.n	80066d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	2101      	movs	r1, #1
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	fa01 f303 	lsl.w	r3, r1, r3
 8006428:	4013      	ands	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 814c 	beq.w	80066cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f003 0303 	and.w	r3, r3, #3
 800643c:	2b01      	cmp	r3, #1
 800643e:	d005      	beq.n	800644c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006448:	2b02      	cmp	r3, #2
 800644a:	d130      	bne.n	80064ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	2203      	movs	r2, #3
 8006458:	fa02 f303 	lsl.w	r3, r2, r3
 800645c:	43db      	mvns	r3, r3
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4013      	ands	r3, r2
 8006462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006482:	2201      	movs	r2, #1
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	fa02 f303 	lsl.w	r3, r2, r3
 800648a:	43db      	mvns	r3, r3
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	4013      	ands	r3, r2
 8006490:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	091b      	lsrs	r3, r3, #4
 8006498:	f003 0201 	and.w	r2, r3, #1
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	fa02 f303 	lsl.w	r3, r2, r3
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f003 0303 	and.w	r3, r3, #3
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d017      	beq.n	80064ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	2203      	movs	r2, #3
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	43db      	mvns	r3, r3
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4013      	ands	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	fa02 f303 	lsl.w	r3, r2, r3
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f003 0303 	and.w	r3, r3, #3
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d123      	bne.n	800653e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	08da      	lsrs	r2, r3, #3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	3208      	adds	r2, #8
 80064fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006502:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	220f      	movs	r2, #15
 800650e:	fa02 f303 	lsl.w	r3, r2, r3
 8006512:	43db      	mvns	r3, r3
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	4013      	ands	r3, r2
 8006518:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	691a      	ldr	r2, [r3, #16]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	fa02 f303 	lsl.w	r3, r2, r3
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	08da      	lsrs	r2, r3, #3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3208      	adds	r2, #8
 8006538:	6939      	ldr	r1, [r7, #16]
 800653a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	005b      	lsls	r3, r3, #1
 8006548:	2203      	movs	r2, #3
 800654a:	fa02 f303 	lsl.w	r3, r2, r3
 800654e:	43db      	mvns	r3, r3
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4013      	ands	r3, r2
 8006554:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f003 0203 	and.w	r2, r3, #3
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	fa02 f303 	lsl.w	r3, r2, r3
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	4313      	orrs	r3, r2
 800656a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 80a6 	beq.w	80066cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006580:	4b5b      	ldr	r3, [pc, #364]	@ (80066f0 <HAL_GPIO_Init+0x2e4>)
 8006582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006584:	4a5a      	ldr	r2, [pc, #360]	@ (80066f0 <HAL_GPIO_Init+0x2e4>)
 8006586:	f043 0301 	orr.w	r3, r3, #1
 800658a:	6613      	str	r3, [r2, #96]	@ 0x60
 800658c:	4b58      	ldr	r3, [pc, #352]	@ (80066f0 <HAL_GPIO_Init+0x2e4>)
 800658e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	60bb      	str	r3, [r7, #8]
 8006596:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006598:	4a56      	ldr	r2, [pc, #344]	@ (80066f4 <HAL_GPIO_Init+0x2e8>)
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	089b      	lsrs	r3, r3, #2
 800659e:	3302      	adds	r3, #2
 80065a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f003 0303 	and.w	r3, r3, #3
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	220f      	movs	r2, #15
 80065b0:	fa02 f303 	lsl.w	r3, r2, r3
 80065b4:	43db      	mvns	r3, r3
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	4013      	ands	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80065c2:	d01f      	beq.n	8006604 <HAL_GPIO_Init+0x1f8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a4c      	ldr	r2, [pc, #304]	@ (80066f8 <HAL_GPIO_Init+0x2ec>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d019      	beq.n	8006600 <HAL_GPIO_Init+0x1f4>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a4b      	ldr	r2, [pc, #300]	@ (80066fc <HAL_GPIO_Init+0x2f0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d013      	beq.n	80065fc <HAL_GPIO_Init+0x1f0>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a4a      	ldr	r2, [pc, #296]	@ (8006700 <HAL_GPIO_Init+0x2f4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00d      	beq.n	80065f8 <HAL_GPIO_Init+0x1ec>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a49      	ldr	r2, [pc, #292]	@ (8006704 <HAL_GPIO_Init+0x2f8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d007      	beq.n	80065f4 <HAL_GPIO_Init+0x1e8>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a48      	ldr	r2, [pc, #288]	@ (8006708 <HAL_GPIO_Init+0x2fc>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d101      	bne.n	80065f0 <HAL_GPIO_Init+0x1e4>
 80065ec:	2305      	movs	r3, #5
 80065ee:	e00a      	b.n	8006606 <HAL_GPIO_Init+0x1fa>
 80065f0:	2306      	movs	r3, #6
 80065f2:	e008      	b.n	8006606 <HAL_GPIO_Init+0x1fa>
 80065f4:	2304      	movs	r3, #4
 80065f6:	e006      	b.n	8006606 <HAL_GPIO_Init+0x1fa>
 80065f8:	2303      	movs	r3, #3
 80065fa:	e004      	b.n	8006606 <HAL_GPIO_Init+0x1fa>
 80065fc:	2302      	movs	r3, #2
 80065fe:	e002      	b.n	8006606 <HAL_GPIO_Init+0x1fa>
 8006600:	2301      	movs	r3, #1
 8006602:	e000      	b.n	8006606 <HAL_GPIO_Init+0x1fa>
 8006604:	2300      	movs	r3, #0
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	f002 0203 	and.w	r2, r2, #3
 800660c:	0092      	lsls	r2, r2, #2
 800660e:	4093      	lsls	r3, r2
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	4313      	orrs	r3, r2
 8006614:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006616:	4937      	ldr	r1, [pc, #220]	@ (80066f4 <HAL_GPIO_Init+0x2e8>)
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	089b      	lsrs	r3, r3, #2
 800661c:	3302      	adds	r3, #2
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006624:	4b39      	ldr	r3, [pc, #228]	@ (800670c <HAL_GPIO_Init+0x300>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	43db      	mvns	r3, r3
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	4013      	ands	r3, r2
 8006632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4313      	orrs	r3, r2
 8006646:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006648:	4a30      	ldr	r2, [pc, #192]	@ (800670c <HAL_GPIO_Init+0x300>)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800664e:	4b2f      	ldr	r3, [pc, #188]	@ (800670c <HAL_GPIO_Init+0x300>)
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	43db      	mvns	r3, r3
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	4013      	ands	r3, r2
 800665c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006672:	4a26      	ldr	r2, [pc, #152]	@ (800670c <HAL_GPIO_Init+0x300>)
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006678:	4b24      	ldr	r3, [pc, #144]	@ (800670c <HAL_GPIO_Init+0x300>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	43db      	mvns	r3, r3
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4013      	ands	r3, r2
 8006686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d003      	beq.n	800669c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4313      	orrs	r3, r2
 800669a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800669c:	4a1b      	ldr	r2, [pc, #108]	@ (800670c <HAL_GPIO_Init+0x300>)
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80066a2:	4b1a      	ldr	r3, [pc, #104]	@ (800670c <HAL_GPIO_Init+0x300>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	43db      	mvns	r3, r3
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4013      	ands	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80066c6:	4a11      	ldr	r2, [pc, #68]	@ (800670c <HAL_GPIO_Init+0x300>)
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	3301      	adds	r3, #1
 80066d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	fa22 f303 	lsr.w	r3, r2, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f47f ae9d 	bne.w	800641c <HAL_GPIO_Init+0x10>
  }
}
 80066e2:	bf00      	nop
 80066e4:	bf00      	nop
 80066e6:	371c      	adds	r7, #28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	40021000 	.word	0x40021000
 80066f4:	40010000 	.word	0x40010000
 80066f8:	48000400 	.word	0x48000400
 80066fc:	48000800 	.word	0x48000800
 8006700:	48000c00 	.word	0x48000c00
 8006704:	48001000 	.word	0x48001000
 8006708:	48001400 	.word	0x48001400
 800670c:	40010400 	.word	0x40010400

08006710 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	691a      	ldr	r2, [r3, #16]
 8006720:	887b      	ldrh	r3, [r7, #2]
 8006722:	4013      	ands	r3, r2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006728:	2301      	movs	r3, #1
 800672a:	73fb      	strb	r3, [r7, #15]
 800672c:	e001      	b.n	8006732 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800672e:	2300      	movs	r3, #0
 8006730:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006732:	7bfb      	ldrb	r3, [r7, #15]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	807b      	strh	r3, [r7, #2]
 800674c:	4613      	mov	r3, r2
 800674e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006750:	787b      	ldrb	r3, [r7, #1]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006756:	887a      	ldrh	r2, [r7, #2]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800675c:	e002      	b.n	8006764 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800675e:	887a      	ldrh	r2, [r7, #2]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d141      	bne.n	8006802 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800677e:	4b4b      	ldr	r3, [pc, #300]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800678a:	d131      	bne.n	80067f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800678c:	4b47      	ldr	r3, [pc, #284]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800678e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006792:	4a46      	ldr	r2, [pc, #280]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006798:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800679c:	4b43      	ldr	r3, [pc, #268]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80067a4:	4a41      	ldr	r2, [pc, #260]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80067aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067ac:	4b40      	ldr	r3, [pc, #256]	@ (80068b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2232      	movs	r2, #50	@ 0x32
 80067b2:	fb02 f303 	mul.w	r3, r2, r3
 80067b6:	4a3f      	ldr	r2, [pc, #252]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80067b8:	fba2 2303 	umull	r2, r3, r2, r3
 80067bc:	0c9b      	lsrs	r3, r3, #18
 80067be:	3301      	adds	r3, #1
 80067c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067c2:	e002      	b.n	80067ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067ca:	4b38      	ldr	r3, [pc, #224]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067d6:	d102      	bne.n	80067de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f2      	bne.n	80067c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067de:	4b33      	ldr	r3, [pc, #204]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ea:	d158      	bne.n	800689e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e057      	b.n	80068a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067f0:	4b2e      	ldr	r3, [pc, #184]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067f6:	4a2d      	ldr	r2, [pc, #180]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006800:	e04d      	b.n	800689e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006808:	d141      	bne.n	800688e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800680a:	4b28      	ldr	r3, [pc, #160]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006816:	d131      	bne.n	800687c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006818:	4b24      	ldr	r3, [pc, #144]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800681a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800681e:	4a23      	ldr	r2, [pc, #140]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006824:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006828:	4b20      	ldr	r3, [pc, #128]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006830:	4a1e      	ldr	r2, [pc, #120]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006832:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006836:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006838:	4b1d      	ldr	r3, [pc, #116]	@ (80068b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2232      	movs	r2, #50	@ 0x32
 800683e:	fb02 f303 	mul.w	r3, r2, r3
 8006842:	4a1c      	ldr	r2, [pc, #112]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006844:	fba2 2303 	umull	r2, r3, r2, r3
 8006848:	0c9b      	lsrs	r3, r3, #18
 800684a:	3301      	adds	r3, #1
 800684c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800684e:	e002      	b.n	8006856 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3b01      	subs	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006856:	4b15      	ldr	r3, [pc, #84]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800685e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006862:	d102      	bne.n	800686a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1f2      	bne.n	8006850 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800686a:	4b10      	ldr	r3, [pc, #64]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006876:	d112      	bne.n	800689e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e011      	b.n	80068a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800687c:	4b0b      	ldr	r3, [pc, #44]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800687e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006882:	4a0a      	ldr	r2, [pc, #40]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006888:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800688c:	e007      	b.n	800689e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800688e:	4b07      	ldr	r3, [pc, #28]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006896:	4a05      	ldr	r2, [pc, #20]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006898:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800689c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	40007000 	.word	0x40007000
 80068b0:	20000000 	.word	0x20000000
 80068b4:	431bde83 	.word	0x431bde83

080068b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80068b8:	b480      	push	{r7}
 80068ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80068bc:	4b05      	ldr	r3, [pc, #20]	@ (80068d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	4a04      	ldr	r2, [pc, #16]	@ (80068d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068c6:	6093      	str	r3, [r2, #8]
}
 80068c8:	bf00      	nop
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	40007000 	.word	0x40007000

080068d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b088      	sub	sp, #32
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e2fe      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d075      	beq.n	80069e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068f6:	4b97      	ldr	r3, [pc, #604]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f003 030c 	and.w	r3, r3, #12
 80068fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006900:	4b94      	ldr	r3, [pc, #592]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f003 0303 	and.w	r3, r3, #3
 8006908:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	2b0c      	cmp	r3, #12
 800690e:	d102      	bne.n	8006916 <HAL_RCC_OscConfig+0x3e>
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2b03      	cmp	r3, #3
 8006914:	d002      	beq.n	800691c <HAL_RCC_OscConfig+0x44>
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	2b08      	cmp	r3, #8
 800691a:	d10b      	bne.n	8006934 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800691c:	4b8d      	ldr	r3, [pc, #564]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d05b      	beq.n	80069e0 <HAL_RCC_OscConfig+0x108>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d157      	bne.n	80069e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e2d9      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800693c:	d106      	bne.n	800694c <HAL_RCC_OscConfig+0x74>
 800693e:	4b85      	ldr	r3, [pc, #532]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a84      	ldr	r2, [pc, #528]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	e01d      	b.n	8006988 <HAL_RCC_OscConfig+0xb0>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006954:	d10c      	bne.n	8006970 <HAL_RCC_OscConfig+0x98>
 8006956:	4b7f      	ldr	r3, [pc, #508]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a7e      	ldr	r2, [pc, #504]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 800695c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006960:	6013      	str	r3, [r2, #0]
 8006962:	4b7c      	ldr	r3, [pc, #496]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a7b      	ldr	r2, [pc, #492]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	e00b      	b.n	8006988 <HAL_RCC_OscConfig+0xb0>
 8006970:	4b78      	ldr	r3, [pc, #480]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a77      	ldr	r2, [pc, #476]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800697a:	6013      	str	r3, [r2, #0]
 800697c:	4b75      	ldr	r3, [pc, #468]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a74      	ldr	r2, [pc, #464]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006982:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d013      	beq.n	80069b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006990:	f7fc f804 	bl	800299c <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006998:	f7fc f800 	bl	800299c <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b64      	cmp	r3, #100	@ 0x64
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e29e      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069aa:	4b6a      	ldr	r3, [pc, #424]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0f0      	beq.n	8006998 <HAL_RCC_OscConfig+0xc0>
 80069b6:	e014      	b.n	80069e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b8:	f7fb fff0 	bl	800299c <HAL_GetTick>
 80069bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069c0:	f7fb ffec 	bl	800299c <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b64      	cmp	r3, #100	@ 0x64
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e28a      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069d2:	4b60      	ldr	r3, [pc, #384]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1f0      	bne.n	80069c0 <HAL_RCC_OscConfig+0xe8>
 80069de:	e000      	b.n	80069e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d075      	beq.n	8006ada <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069ee:	4b59      	ldr	r3, [pc, #356]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 030c 	and.w	r3, r3, #12
 80069f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069f8:	4b56      	ldr	r3, [pc, #344]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f003 0303 	and.w	r3, r3, #3
 8006a00:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	2b0c      	cmp	r3, #12
 8006a06:	d102      	bne.n	8006a0e <HAL_RCC_OscConfig+0x136>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d002      	beq.n	8006a14 <HAL_RCC_OscConfig+0x13c>
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b04      	cmp	r3, #4
 8006a12:	d11f      	bne.n	8006a54 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a14:	4b4f      	ldr	r3, [pc, #316]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d005      	beq.n	8006a2c <HAL_RCC_OscConfig+0x154>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e25d      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a2c:	4b49      	ldr	r3, [pc, #292]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	061b      	lsls	r3, r3, #24
 8006a3a:	4946      	ldr	r1, [pc, #280]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a40:	4b45      	ldr	r3, [pc, #276]	@ (8006b58 <HAL_RCC_OscConfig+0x280>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fb ff5d 	bl	8002904 <HAL_InitTick>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d043      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e249      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d023      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a3c      	ldr	r2, [pc, #240]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a68:	f7fb ff98 	bl	800299c <HAL_GetTick>
 8006a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a6e:	e008      	b.n	8006a82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a70:	f7fb ff94 	bl	800299c <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e232      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a82:	4b34      	ldr	r3, [pc, #208]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0f0      	beq.n	8006a70 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a8e:	4b31      	ldr	r3, [pc, #196]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	061b      	lsls	r3, r3, #24
 8006a9c:	492d      	ldr	r1, [pc, #180]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	604b      	str	r3, [r1, #4]
 8006aa2:	e01a      	b.n	8006ada <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a2a      	ldr	r2, [pc, #168]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006aaa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab0:	f7fb ff74 	bl	800299c <HAL_GetTick>
 8006ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ab6:	e008      	b.n	8006aca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ab8:	f7fb ff70 	bl	800299c <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d901      	bls.n	8006aca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e20e      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006aca:	4b22      	ldr	r3, [pc, #136]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1f0      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x1e0>
 8006ad6:	e000      	b.n	8006ada <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ad8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d041      	beq.n	8006b6a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d01c      	beq.n	8006b28 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006aee:	4b19      	ldr	r3, [pc, #100]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006af4:	4a17      	ldr	r2, [pc, #92]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006afe:	f7fb ff4d 	bl	800299c <HAL_GetTick>
 8006b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b04:	e008      	b.n	8006b18 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b06:	f7fb ff49 	bl	800299c <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e1e7      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b18:	4b0e      	ldr	r3, [pc, #56]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0ef      	beq.n	8006b06 <HAL_RCC_OscConfig+0x22e>
 8006b26:	e020      	b.n	8006b6a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b28:	4b0a      	ldr	r3, [pc, #40]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b2e:	4a09      	ldr	r2, [pc, #36]	@ (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006b30:	f023 0301 	bic.w	r3, r3, #1
 8006b34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b38:	f7fb ff30 	bl	800299c <HAL_GetTick>
 8006b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b3e:	e00d      	b.n	8006b5c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b40:	f7fb ff2c 	bl	800299c <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d906      	bls.n	8006b5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e1ca      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>
 8006b52:	bf00      	nop
 8006b54:	40021000 	.word	0x40021000
 8006b58:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b5c:	4b8c      	ldr	r3, [pc, #560]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1ea      	bne.n	8006b40 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0304 	and.w	r3, r3, #4
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 80a6 	beq.w	8006cc4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b7c:	4b84      	ldr	r3, [pc, #528]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <HAL_RCC_OscConfig+0x2b4>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e000      	b.n	8006b8e <HAL_RCC_OscConfig+0x2b6>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00d      	beq.n	8006bae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b92:	4b7f      	ldr	r3, [pc, #508]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b96:	4a7e      	ldr	r2, [pc, #504]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b9e:	4b7c      	ldr	r3, [pc, #496]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006baa:	2301      	movs	r3, #1
 8006bac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bae:	4b79      	ldr	r3, [pc, #484]	@ (8006d94 <HAL_RCC_OscConfig+0x4bc>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d118      	bne.n	8006bec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bba:	4b76      	ldr	r3, [pc, #472]	@ (8006d94 <HAL_RCC_OscConfig+0x4bc>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a75      	ldr	r2, [pc, #468]	@ (8006d94 <HAL_RCC_OscConfig+0x4bc>)
 8006bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bc6:	f7fb fee9 	bl	800299c <HAL_GetTick>
 8006bca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bcc:	e008      	b.n	8006be0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bce:	f7fb fee5 	bl	800299c <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e183      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006be0:	4b6c      	ldr	r3, [pc, #432]	@ (8006d94 <HAL_RCC_OscConfig+0x4bc>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0f0      	beq.n	8006bce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d108      	bne.n	8006c06 <HAL_RCC_OscConfig+0x32e>
 8006bf4:	4b66      	ldr	r3, [pc, #408]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bfa:	4a65      	ldr	r2, [pc, #404]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006bfc:	f043 0301 	orr.w	r3, r3, #1
 8006c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c04:	e024      	b.n	8006c50 <HAL_RCC_OscConfig+0x378>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	2b05      	cmp	r3, #5
 8006c0c:	d110      	bne.n	8006c30 <HAL_RCC_OscConfig+0x358>
 8006c0e:	4b60      	ldr	r3, [pc, #384]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c14:	4a5e      	ldr	r2, [pc, #376]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006c16:	f043 0304 	orr.w	r3, r3, #4
 8006c1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c1e:	4b5c      	ldr	r3, [pc, #368]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c24:	4a5a      	ldr	r2, [pc, #360]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006c26:	f043 0301 	orr.w	r3, r3, #1
 8006c2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c2e:	e00f      	b.n	8006c50 <HAL_RCC_OscConfig+0x378>
 8006c30:	4b57      	ldr	r3, [pc, #348]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c36:	4a56      	ldr	r2, [pc, #344]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006c38:	f023 0301 	bic.w	r3, r3, #1
 8006c3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c40:	4b53      	ldr	r3, [pc, #332]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c46:	4a52      	ldr	r2, [pc, #328]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006c48:	f023 0304 	bic.w	r3, r3, #4
 8006c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d016      	beq.n	8006c86 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c58:	f7fb fea0 	bl	800299c <HAL_GetTick>
 8006c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c5e:	e00a      	b.n	8006c76 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c60:	f7fb fe9c 	bl	800299c <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e138      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c76:	4b46      	ldr	r3, [pc, #280]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0ed      	beq.n	8006c60 <HAL_RCC_OscConfig+0x388>
 8006c84:	e015      	b.n	8006cb2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c86:	f7fb fe89 	bl	800299c <HAL_GetTick>
 8006c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c8c:	e00a      	b.n	8006ca4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c8e:	f7fb fe85 	bl	800299c <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d901      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e121      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1ed      	bne.n	8006c8e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006cb2:	7ffb      	ldrb	r3, [r7, #31]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d105      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cb8:	4b35      	ldr	r3, [pc, #212]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cbc:	4a34      	ldr	r2, [pc, #208]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006cbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cc2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0320 	and.w	r3, r3, #32
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d03c      	beq.n	8006d4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d01c      	beq.n	8006d12 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006cda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cde:	4a2c      	ldr	r2, [pc, #176]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006ce0:	f043 0301 	orr.w	r3, r3, #1
 8006ce4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce8:	f7fb fe58 	bl	800299c <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cf0:	f7fb fe54 	bl	800299c <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e0f2      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d02:	4b23      	ldr	r3, [pc, #140]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006d04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0ef      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x418>
 8006d10:	e01b      	b.n	8006d4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d12:	4b1f      	ldr	r3, [pc, #124]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006d14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d18:	4a1d      	ldr	r2, [pc, #116]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006d1a:	f023 0301 	bic.w	r3, r3, #1
 8006d1e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d22:	f7fb fe3b 	bl	800299c <HAL_GetTick>
 8006d26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d28:	e008      	b.n	8006d3c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d2a:	f7fb fe37 	bl	800299c <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d901      	bls.n	8006d3c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e0d5      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d3c:	4b14      	ldr	r3, [pc, #80]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006d3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1ef      	bne.n	8006d2a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 80c9 	beq.w	8006ee6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d54:	4b0e      	ldr	r3, [pc, #56]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f003 030c 	and.w	r3, r3, #12
 8006d5c:	2b0c      	cmp	r3, #12
 8006d5e:	f000 8083 	beq.w	8006e68 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d15e      	bne.n	8006e28 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d6a:	4b09      	ldr	r3, [pc, #36]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a08      	ldr	r2, [pc, #32]	@ (8006d90 <HAL_RCC_OscConfig+0x4b8>)
 8006d70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d76:	f7fb fe11 	bl	800299c <HAL_GetTick>
 8006d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d7c:	e00c      	b.n	8006d98 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d7e:	f7fb fe0d 	bl	800299c <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d905      	bls.n	8006d98 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e0ab      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>
 8006d90:	40021000 	.word	0x40021000
 8006d94:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d98:	4b55      	ldr	r3, [pc, #340]	@ (8006ef0 <HAL_RCC_OscConfig+0x618>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1ec      	bne.n	8006d7e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006da4:	4b52      	ldr	r3, [pc, #328]	@ (8006ef0 <HAL_RCC_OscConfig+0x618>)
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	4b52      	ldr	r3, [pc, #328]	@ (8006ef4 <HAL_RCC_OscConfig+0x61c>)
 8006daa:	4013      	ands	r3, r2
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6a11      	ldr	r1, [r2, #32]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006db4:	3a01      	subs	r2, #1
 8006db6:	0112      	lsls	r2, r2, #4
 8006db8:	4311      	orrs	r1, r2
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006dbe:	0212      	lsls	r2, r2, #8
 8006dc0:	4311      	orrs	r1, r2
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006dc6:	0852      	lsrs	r2, r2, #1
 8006dc8:	3a01      	subs	r2, #1
 8006dca:	0552      	lsls	r2, r2, #21
 8006dcc:	4311      	orrs	r1, r2
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006dd2:	0852      	lsrs	r2, r2, #1
 8006dd4:	3a01      	subs	r2, #1
 8006dd6:	0652      	lsls	r2, r2, #25
 8006dd8:	4311      	orrs	r1, r2
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006dde:	06d2      	lsls	r2, r2, #27
 8006de0:	430a      	orrs	r2, r1
 8006de2:	4943      	ldr	r1, [pc, #268]	@ (8006ef0 <HAL_RCC_OscConfig+0x618>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006de8:	4b41      	ldr	r3, [pc, #260]	@ (8006ef0 <HAL_RCC_OscConfig+0x618>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a40      	ldr	r2, [pc, #256]	@ (8006ef0 <HAL_RCC_OscConfig+0x618>)
 8006dee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006df2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006df4:	4b3e      	ldr	r3, [pc, #248]	@ (8006ef0 <HAL_RCC_OscConfig+0x618>)
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	4a3d      	ldr	r2, [pc, #244]	@ (8006ef0 <HAL_RCC_OscConfig+0x618>)
 8006dfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006dfe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e00:	f7fb fdcc 	bl	800299c <HAL_GetTick>
 8006e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e06:	e008      	b.n	8006e1a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e08:	f7fb fdc8 	bl	800299c <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d901      	bls.n	8006e1a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e066      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e1a:	4b35      	ldr	r3, [pc, #212]	@ (8006ef0 <HAL_RCC_OscConfig+0x618>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d0f0      	beq.n	8006e08 <HAL_RCC_OscConfig+0x530>
 8006e26:	e05e      	b.n	8006ee6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e28:	4b31      	ldr	r3, [pc, #196]	@ (8006ef0 <HAL_RCC_OscConfig+0x618>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a30      	ldr	r2, [pc, #192]	@ (8006ef0 <HAL_RCC_OscConfig+0x618>)
 8006e2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e34:	f7fb fdb2 	bl	800299c <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e3c:	f7fb fdae 	bl	800299c <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e04c      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e4e:	4b28      	ldr	r3, [pc, #160]	@ (8006ef0 <HAL_RCC_OscConfig+0x618>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1f0      	bne.n	8006e3c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006e5a:	4b25      	ldr	r3, [pc, #148]	@ (8006ef0 <HAL_RCC_OscConfig+0x618>)
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	4924      	ldr	r1, [pc, #144]	@ (8006ef0 <HAL_RCC_OscConfig+0x618>)
 8006e60:	4b25      	ldr	r3, [pc, #148]	@ (8006ef8 <HAL_RCC_OscConfig+0x620>)
 8006e62:	4013      	ands	r3, r2
 8006e64:	60cb      	str	r3, [r1, #12]
 8006e66:	e03e      	b.n	8006ee6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d101      	bne.n	8006e74 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e039      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006e74:	4b1e      	ldr	r3, [pc, #120]	@ (8006ef0 <HAL_RCC_OscConfig+0x618>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f003 0203 	and.w	r2, r3, #3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d12c      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e92:	3b01      	subs	r3, #1
 8006e94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d123      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d11b      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d113      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec4:	085b      	lsrs	r3, r3, #1
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d109      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed8:	085b      	lsrs	r3, r3, #1
 8006eda:	3b01      	subs	r3, #1
 8006edc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d001      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e000      	b.n	8006ee8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3720      	adds	r7, #32
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	40021000 	.word	0x40021000
 8006ef4:	019f800c 	.word	0x019f800c
 8006ef8:	feeefffc 	.word	0xfeeefffc

08006efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006f06:	2300      	movs	r3, #0
 8006f08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e11e      	b.n	8007152 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f14:	4b91      	ldr	r3, [pc, #580]	@ (800715c <HAL_RCC_ClockConfig+0x260>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 030f 	and.w	r3, r3, #15
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d910      	bls.n	8006f44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f22:	4b8e      	ldr	r3, [pc, #568]	@ (800715c <HAL_RCC_ClockConfig+0x260>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f023 020f 	bic.w	r2, r3, #15
 8006f2a:	498c      	ldr	r1, [pc, #560]	@ (800715c <HAL_RCC_ClockConfig+0x260>)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f32:	4b8a      	ldr	r3, [pc, #552]	@ (800715c <HAL_RCC_ClockConfig+0x260>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 030f 	and.w	r3, r3, #15
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d001      	beq.n	8006f44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e106      	b.n	8007152 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d073      	beq.n	8007038 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d129      	bne.n	8006fac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f58:	4b81      	ldr	r3, [pc, #516]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e0f4      	b.n	8007152 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006f68:	f000 f99e 	bl	80072a8 <RCC_GetSysClockFreqFromPLLSource>
 8006f6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	4a7c      	ldr	r2, [pc, #496]	@ (8007164 <HAL_RCC_ClockConfig+0x268>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d93f      	bls.n	8006ff6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f76:	4b7a      	ldr	r3, [pc, #488]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d009      	beq.n	8006f96 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d033      	beq.n	8006ff6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d12f      	bne.n	8006ff6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f96:	4b72      	ldr	r3, [pc, #456]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f9e:	4a70      	ldr	r2, [pc, #448]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8006fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fa4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006fa6:	2380      	movs	r3, #128	@ 0x80
 8006fa8:	617b      	str	r3, [r7, #20]
 8006faa:	e024      	b.n	8006ff6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d107      	bne.n	8006fc4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fb4:	4b6a      	ldr	r3, [pc, #424]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d109      	bne.n	8006fd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e0c6      	b.n	8007152 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fc4:	4b66      	ldr	r3, [pc, #408]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e0be      	b.n	8007152 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006fd4:	f000 f8ce 	bl	8007174 <HAL_RCC_GetSysClockFreq>
 8006fd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	4a61      	ldr	r2, [pc, #388]	@ (8007164 <HAL_RCC_ClockConfig+0x268>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d909      	bls.n	8006ff6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fea:	4a5d      	ldr	r2, [pc, #372]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8006fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ff0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006ff2:	2380      	movs	r3, #128	@ 0x80
 8006ff4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ff6:	4b5a      	ldr	r3, [pc, #360]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f023 0203 	bic.w	r2, r3, #3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	4957      	ldr	r1, [pc, #348]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8007004:	4313      	orrs	r3, r2
 8007006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007008:	f7fb fcc8 	bl	800299c <HAL_GetTick>
 800700c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800700e:	e00a      	b.n	8007026 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007010:	f7fb fcc4 	bl	800299c <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800701e:	4293      	cmp	r3, r2
 8007020:	d901      	bls.n	8007026 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e095      	b.n	8007152 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007026:	4b4e      	ldr	r3, [pc, #312]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f003 020c 	and.w	r2, r3, #12
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	429a      	cmp	r2, r3
 8007036:	d1eb      	bne.n	8007010 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d023      	beq.n	800708c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	2b00      	cmp	r3, #0
 800704e:	d005      	beq.n	800705c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007050:	4b43      	ldr	r3, [pc, #268]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	4a42      	ldr	r2, [pc, #264]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8007056:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800705a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0308 	and.w	r3, r3, #8
 8007064:	2b00      	cmp	r3, #0
 8007066:	d007      	beq.n	8007078 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007068:	4b3d      	ldr	r3, [pc, #244]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007070:	4a3b      	ldr	r2, [pc, #236]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8007072:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007076:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007078:	4b39      	ldr	r3, [pc, #228]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	4936      	ldr	r1, [pc, #216]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8007086:	4313      	orrs	r3, r2
 8007088:	608b      	str	r3, [r1, #8]
 800708a:	e008      	b.n	800709e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2b80      	cmp	r3, #128	@ 0x80
 8007090:	d105      	bne.n	800709e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007092:	4b33      	ldr	r3, [pc, #204]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	4a32      	ldr	r2, [pc, #200]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8007098:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800709c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800709e:	4b2f      	ldr	r3, [pc, #188]	@ (800715c <HAL_RCC_ClockConfig+0x260>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 030f 	and.w	r3, r3, #15
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d21d      	bcs.n	80070e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ac:	4b2b      	ldr	r3, [pc, #172]	@ (800715c <HAL_RCC_ClockConfig+0x260>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f023 020f 	bic.w	r2, r3, #15
 80070b4:	4929      	ldr	r1, [pc, #164]	@ (800715c <HAL_RCC_ClockConfig+0x260>)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80070bc:	f7fb fc6e 	bl	800299c <HAL_GetTick>
 80070c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070c2:	e00a      	b.n	80070da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070c4:	f7fb fc6a 	bl	800299c <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d901      	bls.n	80070da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e03b      	b.n	8007152 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070da:	4b20      	ldr	r3, [pc, #128]	@ (800715c <HAL_RCC_ClockConfig+0x260>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 030f 	and.w	r3, r3, #15
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d1ed      	bne.n	80070c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d008      	beq.n	8007106 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	4917      	ldr	r1, [pc, #92]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8007102:	4313      	orrs	r3, r2
 8007104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0308 	and.w	r3, r3, #8
 800710e:	2b00      	cmp	r3, #0
 8007110:	d009      	beq.n	8007126 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007112:	4b13      	ldr	r3, [pc, #76]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	00db      	lsls	r3, r3, #3
 8007120:	490f      	ldr	r1, [pc, #60]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 8007122:	4313      	orrs	r3, r2
 8007124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007126:	f000 f825 	bl	8007174 <HAL_RCC_GetSysClockFreq>
 800712a:	4602      	mov	r2, r0
 800712c:	4b0c      	ldr	r3, [pc, #48]	@ (8007160 <HAL_RCC_ClockConfig+0x264>)
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	091b      	lsrs	r3, r3, #4
 8007132:	f003 030f 	and.w	r3, r3, #15
 8007136:	490c      	ldr	r1, [pc, #48]	@ (8007168 <HAL_RCC_ClockConfig+0x26c>)
 8007138:	5ccb      	ldrb	r3, [r1, r3]
 800713a:	f003 031f 	and.w	r3, r3, #31
 800713e:	fa22 f303 	lsr.w	r3, r2, r3
 8007142:	4a0a      	ldr	r2, [pc, #40]	@ (800716c <HAL_RCC_ClockConfig+0x270>)
 8007144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007146:	4b0a      	ldr	r3, [pc, #40]	@ (8007170 <HAL_RCC_ClockConfig+0x274>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4618      	mov	r0, r3
 800714c:	f7fb fbda 	bl	8002904 <HAL_InitTick>
 8007150:	4603      	mov	r3, r0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	40022000 	.word	0x40022000
 8007160:	40021000 	.word	0x40021000
 8007164:	04c4b400 	.word	0x04c4b400
 8007168:	08014720 	.word	0x08014720
 800716c:	20000000 	.word	0x20000000
 8007170:	20000004 	.word	0x20000004

08007174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800717a:	4b2c      	ldr	r3, [pc, #176]	@ (800722c <HAL_RCC_GetSysClockFreq+0xb8>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f003 030c 	and.w	r3, r3, #12
 8007182:	2b04      	cmp	r3, #4
 8007184:	d102      	bne.n	800718c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007186:	4b2a      	ldr	r3, [pc, #168]	@ (8007230 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007188:	613b      	str	r3, [r7, #16]
 800718a:	e047      	b.n	800721c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800718c:	4b27      	ldr	r3, [pc, #156]	@ (800722c <HAL_RCC_GetSysClockFreq+0xb8>)
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f003 030c 	and.w	r3, r3, #12
 8007194:	2b08      	cmp	r3, #8
 8007196:	d102      	bne.n	800719e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007198:	4b26      	ldr	r3, [pc, #152]	@ (8007234 <HAL_RCC_GetSysClockFreq+0xc0>)
 800719a:	613b      	str	r3, [r7, #16]
 800719c:	e03e      	b.n	800721c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800719e:	4b23      	ldr	r3, [pc, #140]	@ (800722c <HAL_RCC_GetSysClockFreq+0xb8>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 030c 	and.w	r3, r3, #12
 80071a6:	2b0c      	cmp	r3, #12
 80071a8:	d136      	bne.n	8007218 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80071aa:	4b20      	ldr	r3, [pc, #128]	@ (800722c <HAL_RCC_GetSysClockFreq+0xb8>)
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071b4:	4b1d      	ldr	r3, [pc, #116]	@ (800722c <HAL_RCC_GetSysClockFreq+0xb8>)
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	091b      	lsrs	r3, r3, #4
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	3301      	adds	r3, #1
 80071c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d10c      	bne.n	80071e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071c8:	4a1a      	ldr	r2, [pc, #104]	@ (8007234 <HAL_RCC_GetSysClockFreq+0xc0>)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d0:	4a16      	ldr	r2, [pc, #88]	@ (800722c <HAL_RCC_GetSysClockFreq+0xb8>)
 80071d2:	68d2      	ldr	r2, [r2, #12]
 80071d4:	0a12      	lsrs	r2, r2, #8
 80071d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071da:	fb02 f303 	mul.w	r3, r2, r3
 80071de:	617b      	str	r3, [r7, #20]
      break;
 80071e0:	e00c      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071e2:	4a13      	ldr	r2, [pc, #76]	@ (8007230 <HAL_RCC_GetSysClockFreq+0xbc>)
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ea:	4a10      	ldr	r2, [pc, #64]	@ (800722c <HAL_RCC_GetSysClockFreq+0xb8>)
 80071ec:	68d2      	ldr	r2, [r2, #12]
 80071ee:	0a12      	lsrs	r2, r2, #8
 80071f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071f4:	fb02 f303 	mul.w	r3, r2, r3
 80071f8:	617b      	str	r3, [r7, #20]
      break;
 80071fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071fc:	4b0b      	ldr	r3, [pc, #44]	@ (800722c <HAL_RCC_GetSysClockFreq+0xb8>)
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	0e5b      	lsrs	r3, r3, #25
 8007202:	f003 0303 	and.w	r3, r3, #3
 8007206:	3301      	adds	r3, #1
 8007208:	005b      	lsls	r3, r3, #1
 800720a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	fbb2 f3f3 	udiv	r3, r2, r3
 8007214:	613b      	str	r3, [r7, #16]
 8007216:	e001      	b.n	800721c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800721c:	693b      	ldr	r3, [r7, #16]
}
 800721e:	4618      	mov	r0, r3
 8007220:	371c      	adds	r7, #28
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	40021000 	.word	0x40021000
 8007230:	00f42400 	.word	0x00f42400
 8007234:	016e3600 	.word	0x016e3600

08007238 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007238:	b480      	push	{r7}
 800723a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800723c:	4b03      	ldr	r3, [pc, #12]	@ (800724c <HAL_RCC_GetHCLKFreq+0x14>)
 800723e:	681b      	ldr	r3, [r3, #0]
}
 8007240:	4618      	mov	r0, r3
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	20000000 	.word	0x20000000

08007250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007254:	f7ff fff0 	bl	8007238 <HAL_RCC_GetHCLKFreq>
 8007258:	4602      	mov	r2, r0
 800725a:	4b06      	ldr	r3, [pc, #24]	@ (8007274 <HAL_RCC_GetPCLK1Freq+0x24>)
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	0a1b      	lsrs	r3, r3, #8
 8007260:	f003 0307 	and.w	r3, r3, #7
 8007264:	4904      	ldr	r1, [pc, #16]	@ (8007278 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007266:	5ccb      	ldrb	r3, [r1, r3]
 8007268:	f003 031f 	and.w	r3, r3, #31
 800726c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007270:	4618      	mov	r0, r3
 8007272:	bd80      	pop	{r7, pc}
 8007274:	40021000 	.word	0x40021000
 8007278:	08014730 	.word	0x08014730

0800727c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007280:	f7ff ffda 	bl	8007238 <HAL_RCC_GetHCLKFreq>
 8007284:	4602      	mov	r2, r0
 8007286:	4b06      	ldr	r3, [pc, #24]	@ (80072a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	0adb      	lsrs	r3, r3, #11
 800728c:	f003 0307 	and.w	r3, r3, #7
 8007290:	4904      	ldr	r1, [pc, #16]	@ (80072a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007292:	5ccb      	ldrb	r3, [r1, r3]
 8007294:	f003 031f 	and.w	r3, r3, #31
 8007298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800729c:	4618      	mov	r0, r3
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	40021000 	.word	0x40021000
 80072a4:	08014730 	.word	0x08014730

080072a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	091b      	lsrs	r3, r3, #4
 80072be:	f003 030f 	and.w	r3, r3, #15
 80072c2:	3301      	adds	r3, #1
 80072c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d10c      	bne.n	80072e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072cc:	4a17      	ldr	r2, [pc, #92]	@ (800732c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d4:	4a14      	ldr	r2, [pc, #80]	@ (8007328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072d6:	68d2      	ldr	r2, [r2, #12]
 80072d8:	0a12      	lsrs	r2, r2, #8
 80072da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80072de:	fb02 f303 	mul.w	r3, r2, r3
 80072e2:	617b      	str	r3, [r7, #20]
    break;
 80072e4:	e00c      	b.n	8007300 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072e6:	4a12      	ldr	r2, [pc, #72]	@ (8007330 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ee:	4a0e      	ldr	r2, [pc, #56]	@ (8007328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072f0:	68d2      	ldr	r2, [r2, #12]
 80072f2:	0a12      	lsrs	r2, r2, #8
 80072f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80072f8:	fb02 f303 	mul.w	r3, r2, r3
 80072fc:	617b      	str	r3, [r7, #20]
    break;
 80072fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007300:	4b09      	ldr	r3, [pc, #36]	@ (8007328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	0e5b      	lsrs	r3, r3, #25
 8007306:	f003 0303 	and.w	r3, r3, #3
 800730a:	3301      	adds	r3, #1
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	fbb2 f3f3 	udiv	r3, r2, r3
 8007318:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800731a:	687b      	ldr	r3, [r7, #4]
}
 800731c:	4618      	mov	r0, r3
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	40021000 	.word	0x40021000
 800732c:	016e3600 	.word	0x016e3600
 8007330:	00f42400 	.word	0x00f42400

08007334 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800733c:	2300      	movs	r3, #0
 800733e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007340:	2300      	movs	r3, #0
 8007342:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 8098 	beq.w	8007482 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007352:	2300      	movs	r3, #0
 8007354:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007356:	4b43      	ldr	r3, [pc, #268]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800735a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10d      	bne.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007362:	4b40      	ldr	r3, [pc, #256]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007366:	4a3f      	ldr	r2, [pc, #252]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800736c:	6593      	str	r3, [r2, #88]	@ 0x58
 800736e:	4b3d      	ldr	r3, [pc, #244]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007376:	60bb      	str	r3, [r7, #8]
 8007378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800737a:	2301      	movs	r3, #1
 800737c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800737e:	4b3a      	ldr	r3, [pc, #232]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a39      	ldr	r2, [pc, #228]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007388:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800738a:	f7fb fb07 	bl	800299c <HAL_GetTick>
 800738e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007390:	e009      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007392:	f7fb fb03 	bl	800299c <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	2b02      	cmp	r3, #2
 800739e:	d902      	bls.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	74fb      	strb	r3, [r7, #19]
        break;
 80073a4:	e005      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073a6:	4b30      	ldr	r3, [pc, #192]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d0ef      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80073b2:	7cfb      	ldrb	r3, [r7, #19]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d159      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80073b8:	4b2a      	ldr	r3, [pc, #168]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d01e      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d019      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073d4:	4b23      	ldr	r3, [pc, #140]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073e0:	4b20      	ldr	r3, [pc, #128]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073e6:	4a1f      	ldr	r2, [pc, #124]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073f0:	4b1c      	ldr	r3, [pc, #112]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073f6:	4a1b      	ldr	r2, [pc, #108]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007400:	4a18      	ldr	r2, [pc, #96]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d016      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007412:	f7fb fac3 	bl	800299c <HAL_GetTick>
 8007416:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007418:	e00b      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800741a:	f7fb fabf 	bl	800299c <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007428:	4293      	cmp	r3, r2
 800742a:	d902      	bls.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	74fb      	strb	r3, [r7, #19]
            break;
 8007430:	e006      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007432:	4b0c      	ldr	r3, [pc, #48]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007438:	f003 0302 	and.w	r3, r3, #2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d0ec      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007440:	7cfb      	ldrb	r3, [r7, #19]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10b      	bne.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007446:	4b07      	ldr	r3, [pc, #28]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800744c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007454:	4903      	ldr	r1, [pc, #12]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007456:	4313      	orrs	r3, r2
 8007458:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800745c:	e008      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800745e:	7cfb      	ldrb	r3, [r7, #19]
 8007460:	74bb      	strb	r3, [r7, #18]
 8007462:	e005      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007464:	40021000 	.word	0x40021000
 8007468:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746c:	7cfb      	ldrb	r3, [r7, #19]
 800746e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007470:	7c7b      	ldrb	r3, [r7, #17]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d105      	bne.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007476:	4ba6      	ldr	r3, [pc, #664]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800747a:	4aa5      	ldr	r2, [pc, #660]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800747c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007480:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800748e:	4ba0      	ldr	r3, [pc, #640]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007494:	f023 0203 	bic.w	r2, r3, #3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	499c      	ldr	r1, [pc, #624]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074b0:	4b97      	ldr	r3, [pc, #604]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074b6:	f023 020c 	bic.w	r2, r3, #12
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	4994      	ldr	r1, [pc, #592]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0304 	and.w	r3, r3, #4
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00a      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074d2:	4b8f      	ldr	r3, [pc, #572]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	498b      	ldr	r1, [pc, #556]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0308 	and.w	r3, r3, #8
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00a      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074f4:	4b86      	ldr	r3, [pc, #536]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	4983      	ldr	r1, [pc, #524]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007504:	4313      	orrs	r3, r2
 8007506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0320 	and.w	r3, r3, #32
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00a      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007516:	4b7e      	ldr	r3, [pc, #504]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800751c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	497a      	ldr	r1, [pc, #488]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007526:	4313      	orrs	r3, r2
 8007528:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00a      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007538:	4b75      	ldr	r3, [pc, #468]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800753a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800753e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	4972      	ldr	r1, [pc, #456]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007548:	4313      	orrs	r3, r2
 800754a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800755a:	4b6d      	ldr	r3, [pc, #436]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800755c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007560:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	4969      	ldr	r1, [pc, #420]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800756a:	4313      	orrs	r3, r2
 800756c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00a      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800757c:	4b64      	ldr	r3, [pc, #400]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800757e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007582:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	4961      	ldr	r1, [pc, #388]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800758c:	4313      	orrs	r3, r2
 800758e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00a      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800759e:	4b5c      	ldr	r3, [pc, #368]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ac:	4958      	ldr	r1, [pc, #352]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d015      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075c0:	4b53      	ldr	r3, [pc, #332]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ce:	4950      	ldr	r1, [pc, #320]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075de:	d105      	bne.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075e0:	4b4b      	ldr	r3, [pc, #300]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	4a4a      	ldr	r2, [pc, #296]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d015      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80075f8:	4b45      	ldr	r3, [pc, #276]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007606:	4942      	ldr	r1, [pc, #264]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007608:	4313      	orrs	r3, r2
 800760a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007612:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007616:	d105      	bne.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007618:	4b3d      	ldr	r3, [pc, #244]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	4a3c      	ldr	r2, [pc, #240]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800761e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007622:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d015      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007630:	4b37      	ldr	r3, [pc, #220]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007636:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800763e:	4934      	ldr	r1, [pc, #208]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007640:	4313      	orrs	r3, r2
 8007642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800764a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800764e:	d105      	bne.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007650:	4b2f      	ldr	r3, [pc, #188]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	4a2e      	ldr	r2, [pc, #184]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007656:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800765a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d015      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007668:	4b29      	ldr	r3, [pc, #164]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800766a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800766e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007676:	4926      	ldr	r1, [pc, #152]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007678:	4313      	orrs	r3, r2
 800767a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007682:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007686:	d105      	bne.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007688:	4b21      	ldr	r3, [pc, #132]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	4a20      	ldr	r2, [pc, #128]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800768e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007692:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d015      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076a0:	4b1b      	ldr	r3, [pc, #108]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ae:	4918      	ldr	r1, [pc, #96]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076be:	d105      	bne.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076c0:	4b13      	ldr	r3, [pc, #76]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	4a12      	ldr	r2, [pc, #72]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d015      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80076d8:	4b0d      	ldr	r3, [pc, #52]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e6:	490a      	ldr	r1, [pc, #40]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076f6:	d105      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80076f8:	4b05      	ldr	r3, [pc, #20]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	4a04      	ldr	r2, [pc, #16]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007702:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007704:	7cbb      	ldrb	r3, [r7, #18]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	40021000 	.word	0x40021000

08007714 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e09d      	b.n	8007862 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800772a:	2b00      	cmp	r3, #0
 800772c:	d108      	bne.n	8007740 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007736:	d009      	beq.n	800774c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	61da      	str	r2, [r3, #28]
 800773e:	e005      	b.n	800774c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d106      	bne.n	800776c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7fa f9f4 	bl	8001b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007782:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800778c:	d902      	bls.n	8007794 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800778e:	2300      	movs	r3, #0
 8007790:	60fb      	str	r3, [r7, #12]
 8007792:	e002      	b.n	800779a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007794:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007798:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80077a2:	d007      	beq.n	80077b4 <HAL_SPI_Init+0xa0>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80077ac:	d002      	beq.n	80077b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80077c4:	431a      	orrs	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	431a      	orrs	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	431a      	orrs	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077f6:	ea42 0103 	orr.w	r1, r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077fe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	430a      	orrs	r2, r1
 8007808:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	0c1b      	lsrs	r3, r3, #16
 8007810:	f003 0204 	and.w	r2, r3, #4
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007818:	f003 0310 	and.w	r3, r3, #16
 800781c:	431a      	orrs	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007822:	f003 0308 	and.w	r3, r3, #8
 8007826:	431a      	orrs	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007830:	ea42 0103 	orr.w	r1, r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	69da      	ldr	r2, [r3, #28]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007850:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b08a      	sub	sp, #40	@ 0x28
 800786e:	af00      	add	r7, sp, #0
 8007870:	60f8      	str	r0, [r7, #12]
 8007872:	60b9      	str	r1, [r7, #8]
 8007874:	607a      	str	r2, [r7, #4]
 8007876:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007878:	2301      	movs	r3, #1
 800787a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007888:	2b01      	cmp	r3, #1
 800788a:	d101      	bne.n	8007890 <HAL_SPI_TransmitReceive+0x26>
 800788c:	2302      	movs	r3, #2
 800788e:	e20a      	b.n	8007ca6 <HAL_SPI_TransmitReceive+0x43c>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007898:	f7fb f880 	bl	800299c <HAL_GetTick>
 800789c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80078a4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80078ac:	887b      	ldrh	r3, [r7, #2]
 80078ae:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80078b0:	887b      	ldrh	r3, [r7, #2]
 80078b2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078b4:	7efb      	ldrb	r3, [r7, #27]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d00e      	beq.n	80078d8 <HAL_SPI_TransmitReceive+0x6e>
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078c0:	d106      	bne.n	80078d0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d102      	bne.n	80078d0 <HAL_SPI_TransmitReceive+0x66>
 80078ca:	7efb      	ldrb	r3, [r7, #27]
 80078cc:	2b04      	cmp	r3, #4
 80078ce:	d003      	beq.n	80078d8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80078d0:	2302      	movs	r3, #2
 80078d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80078d6:	e1e0      	b.n	8007c9a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d005      	beq.n	80078ea <HAL_SPI_TransmitReceive+0x80>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <HAL_SPI_TransmitReceive+0x80>
 80078e4:	887b      	ldrh	r3, [r7, #2]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d103      	bne.n	80078f2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80078f0:	e1d3      	b.n	8007c9a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	d003      	beq.n	8007906 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2205      	movs	r2, #5
 8007902:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	887a      	ldrh	r2, [r7, #2]
 8007916:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	887a      	ldrh	r2, [r7, #2]
 800791e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	887a      	ldrh	r2, [r7, #2]
 800792c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	887a      	ldrh	r2, [r7, #2]
 8007932:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007948:	d802      	bhi.n	8007950 <HAL_SPI_TransmitReceive+0xe6>
 800794a:	8a3b      	ldrh	r3, [r7, #16]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d908      	bls.n	8007962 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800795e:	605a      	str	r2, [r3, #4]
 8007960:	e007      	b.n	8007972 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007970:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800797c:	2b40      	cmp	r3, #64	@ 0x40
 800797e:	d007      	beq.n	8007990 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800798e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007998:	f240 8081 	bls.w	8007a9e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <HAL_SPI_TransmitReceive+0x140>
 80079a4:	8a7b      	ldrh	r3, [r7, #18]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d16d      	bne.n	8007a86 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ae:	881a      	ldrh	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ba:	1c9a      	adds	r2, r3, #2
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	3b01      	subs	r3, #1
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079ce:	e05a      	b.n	8007a86 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f003 0302 	and.w	r3, r3, #2
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d11b      	bne.n	8007a16 <HAL_SPI_TransmitReceive+0x1ac>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d016      	beq.n	8007a16 <HAL_SPI_TransmitReceive+0x1ac>
 80079e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d113      	bne.n	8007a16 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f2:	881a      	ldrh	r2, [r3, #0]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079fe:	1c9a      	adds	r2, r3, #2
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d11c      	bne.n	8007a5e <HAL_SPI_TransmitReceive+0x1f4>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d016      	beq.n	8007a5e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68da      	ldr	r2, [r3, #12]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3a:	b292      	uxth	r2, r2
 8007a3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a42:	1c9a      	adds	r2, r3, #2
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	3b01      	subs	r3, #1
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a5e:	f7fa ff9d 	bl	800299c <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d80b      	bhi.n	8007a86 <HAL_SPI_TransmitReceive+0x21c>
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a74:	d007      	beq.n	8007a86 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007a84:	e109      	b.n	8007c9a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d19f      	bne.n	80079d0 <HAL_SPI_TransmitReceive+0x166>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d199      	bne.n	80079d0 <HAL_SPI_TransmitReceive+0x166>
 8007a9c:	e0e3      	b.n	8007c66 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <HAL_SPI_TransmitReceive+0x244>
 8007aa6:	8a7b      	ldrh	r3, [r7, #18]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	f040 80cf 	bne.w	8007c4c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d912      	bls.n	8007ade <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007abc:	881a      	ldrh	r2, [r3, #0]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac8:	1c9a      	adds	r2, r3, #2
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	3b02      	subs	r3, #2
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007adc:	e0b6      	b.n	8007c4c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	330c      	adds	r3, #12
 8007ae8:	7812      	ldrb	r2, [r2, #0]
 8007aea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af0:	1c5a      	adds	r2, r3, #1
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	3b01      	subs	r3, #1
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b04:	e0a2      	b.n	8007c4c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f003 0302 	and.w	r3, r3, #2
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d134      	bne.n	8007b7e <HAL_SPI_TransmitReceive+0x314>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d02f      	beq.n	8007b7e <HAL_SPI_TransmitReceive+0x314>
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d12c      	bne.n	8007b7e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d912      	bls.n	8007b54 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b32:	881a      	ldrh	r2, [r3, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3e:	1c9a      	adds	r2, r3, #2
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	3b02      	subs	r3, #2
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b52:	e012      	b.n	8007b7a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	330c      	adds	r3, #12
 8007b5e:	7812      	ldrb	r2, [r2, #0]
 8007b60:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b66:	1c5a      	adds	r2, r3, #1
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	3b01      	subs	r3, #1
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d148      	bne.n	8007c1e <HAL_SPI_TransmitReceive+0x3b4>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d042      	beq.n	8007c1e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d923      	bls.n	8007bec <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bae:	b292      	uxth	r2, r2
 8007bb0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb6:	1c9a      	adds	r2, r3, #2
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	3b02      	subs	r3, #2
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d81f      	bhi.n	8007c1a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007be8:	605a      	str	r2, [r3, #4]
 8007bea:	e016      	b.n	8007c1a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f103 020c 	add.w	r2, r3, #12
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf8:	7812      	ldrb	r2, [r2, #0]
 8007bfa:	b2d2      	uxtb	r2, r2
 8007bfc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c02:	1c5a      	adds	r2, r3, #1
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	3b01      	subs	r3, #1
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c1e:	f7fa febd 	bl	800299c <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d803      	bhi.n	8007c36 <HAL_SPI_TransmitReceive+0x3cc>
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c34:	d102      	bne.n	8007c3c <HAL_SPI_TransmitReceive+0x3d2>
 8007c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d107      	bne.n	8007c4c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007c4a:	e026      	b.n	8007c9a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f47f af57 	bne.w	8007b06 <HAL_SPI_TransmitReceive+0x29c>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f47f af50 	bne.w	8007b06 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c66:	69fa      	ldr	r2, [r7, #28]
 8007c68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f000 f94c 	bl	8007f08 <SPI_EndRxTxTransaction>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d005      	beq.n	8007c82 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c90:	e003      	b.n	8007c9a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007ca2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3728      	adds	r7, #40	@ 0x28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b083      	sub	sp, #12
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007cbc:	b2db      	uxtb	r3, r3
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
	...

08007ccc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b088      	sub	sp, #32
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	603b      	str	r3, [r7, #0]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007cdc:	f7fa fe5e 	bl	800299c <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce4:	1a9b      	subs	r3, r3, r2
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	4413      	add	r3, r2
 8007cea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007cec:	f7fa fe56 	bl	800299c <HAL_GetTick>
 8007cf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007cf2:	4b39      	ldr	r3, [pc, #228]	@ (8007dd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	015b      	lsls	r3, r3, #5
 8007cf8:	0d1b      	lsrs	r3, r3, #20
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	fb02 f303 	mul.w	r3, r2, r3
 8007d00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d02:	e054      	b.n	8007dae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0a:	d050      	beq.n	8007dae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d0c:	f7fa fe46 	bl	800299c <HAL_GetTick>
 8007d10:	4602      	mov	r2, r0
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	69fa      	ldr	r2, [r7, #28]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d902      	bls.n	8007d22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d13d      	bne.n	8007d9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007d30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d3a:	d111      	bne.n	8007d60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d44:	d004      	beq.n	8007d50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d4e:	d107      	bne.n	8007d60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d68:	d10f      	bne.n	8007d8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e017      	b.n	8007dce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	3b01      	subs	r3, #1
 8007dac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	689a      	ldr	r2, [r3, #8]
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	4013      	ands	r3, r2
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	bf0c      	ite	eq
 8007dbe:	2301      	moveq	r3, #1
 8007dc0:	2300      	movne	r3, #0
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	79fb      	ldrb	r3, [r7, #7]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d19b      	bne.n	8007d04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3720      	adds	r7, #32
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20000000 	.word	0x20000000

08007ddc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b08a      	sub	sp, #40	@ 0x28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
 8007de8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007dea:	2300      	movs	r3, #0
 8007dec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007dee:	f7fa fdd5 	bl	800299c <HAL_GetTick>
 8007df2:	4602      	mov	r2, r0
 8007df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df6:	1a9b      	subs	r3, r3, r2
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007dfe:	f7fa fdcd 	bl	800299c <HAL_GetTick>
 8007e02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	330c      	adds	r3, #12
 8007e0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8007f04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	00da      	lsls	r2, r3, #3
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	0d1b      	lsrs	r3, r3, #20
 8007e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e1e:	fb02 f303 	mul.w	r3, r2, r3
 8007e22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007e24:	e060      	b.n	8007ee8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e2c:	d107      	bne.n	8007e3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d104      	bne.n	8007e3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007e3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e44:	d050      	beq.n	8007ee8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e46:	f7fa fda9 	bl	800299c <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d902      	bls.n	8007e5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d13d      	bne.n	8007ed8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e74:	d111      	bne.n	8007e9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e7e:	d004      	beq.n	8007e8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e88:	d107      	bne.n	8007e9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ea2:	d10f      	bne.n	8007ec4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ec2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e010      	b.n	8007efa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689a      	ldr	r2, [r3, #8]
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d196      	bne.n	8007e26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3728      	adds	r7, #40	@ 0x28
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000000 	.word	0x20000000

08007f08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af02      	add	r7, sp, #8
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f7ff ff5b 	bl	8007ddc <SPI_WaitFifoStateUntilTimeout>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d007      	beq.n	8007f3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f30:	f043 0220 	orr.w	r2, r3, #32
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e027      	b.n	8007f8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2200      	movs	r2, #0
 8007f44:	2180      	movs	r1, #128	@ 0x80
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f7ff fec0 	bl	8007ccc <SPI_WaitFlagStateUntilTimeout>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d007      	beq.n	8007f62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f56:	f043 0220 	orr.w	r2, r3, #32
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e014      	b.n	8007f8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f7ff ff34 	bl	8007ddc <SPI_WaitFifoStateUntilTimeout>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d007      	beq.n	8007f8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f7e:	f043 0220 	orr.w	r2, r3, #32
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e000      	b.n	8007f8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e049      	b.n	800803a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d106      	bne.n	8007fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7fa f9c6 	bl	800234c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3304      	adds	r3, #4
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	4610      	mov	r0, r2
 8007fd4:	f000 fc9e 	bl	8008914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b01      	cmp	r3, #1
 8008056:	d001      	beq.n	800805c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e042      	b.n	80080e2 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a21      	ldr	r2, [pc, #132]	@ (80080f0 <HAL_TIM_Base_Start+0xac>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d018      	beq.n	80080a0 <HAL_TIM_Base_Start+0x5c>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008076:	d013      	beq.n	80080a0 <HAL_TIM_Base_Start+0x5c>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a1d      	ldr	r2, [pc, #116]	@ (80080f4 <HAL_TIM_Base_Start+0xb0>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d00e      	beq.n	80080a0 <HAL_TIM_Base_Start+0x5c>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a1c      	ldr	r2, [pc, #112]	@ (80080f8 <HAL_TIM_Base_Start+0xb4>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d009      	beq.n	80080a0 <HAL_TIM_Base_Start+0x5c>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a1a      	ldr	r2, [pc, #104]	@ (80080fc <HAL_TIM_Base_Start+0xb8>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d004      	beq.n	80080a0 <HAL_TIM_Base_Start+0x5c>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a19      	ldr	r2, [pc, #100]	@ (8008100 <HAL_TIM_Base_Start+0xbc>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d115      	bne.n	80080cc <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	689a      	ldr	r2, [r3, #8]
 80080a6:	4b17      	ldr	r3, [pc, #92]	@ (8008104 <HAL_TIM_Base_Start+0xc0>)
 80080a8:	4013      	ands	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b06      	cmp	r3, #6
 80080b0:	d015      	beq.n	80080de <HAL_TIM_Base_Start+0x9a>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080b8:	d011      	beq.n	80080de <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f042 0201 	orr.w	r2, r2, #1
 80080c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ca:	e008      	b.n	80080de <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f042 0201 	orr.w	r2, r2, #1
 80080da:	601a      	str	r2, [r3, #0]
 80080dc:	e000      	b.n	80080e0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	40012c00 	.word	0x40012c00
 80080f4:	40000400 	.word	0x40000400
 80080f8:	40000800 	.word	0x40000800
 80080fc:	40013400 	.word	0x40013400
 8008100:	40014000 	.word	0x40014000
 8008104:	00010007 	.word	0x00010007

08008108 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e049      	b.n	80081ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d106      	bne.n	8008134 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f841 	bl	80081b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2202      	movs	r2, #2
 8008138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	3304      	adds	r3, #4
 8008144:	4619      	mov	r1, r3
 8008146:	4610      	mov	r0, r2
 8008148:	f000 fbe4 	bl	8008914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b083      	sub	sp, #12
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80081be:	bf00      	nop
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
	...

080081cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d109      	bne.n	80081f0 <HAL_TIM_PWM_Start+0x24>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	bf14      	ite	ne
 80081e8:	2301      	movne	r3, #1
 80081ea:	2300      	moveq	r3, #0
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	e03c      	b.n	800826a <HAL_TIM_PWM_Start+0x9e>
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	2b04      	cmp	r3, #4
 80081f4:	d109      	bne.n	800820a <HAL_TIM_PWM_Start+0x3e>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b01      	cmp	r3, #1
 8008200:	bf14      	ite	ne
 8008202:	2301      	movne	r3, #1
 8008204:	2300      	moveq	r3, #0
 8008206:	b2db      	uxtb	r3, r3
 8008208:	e02f      	b.n	800826a <HAL_TIM_PWM_Start+0x9e>
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b08      	cmp	r3, #8
 800820e:	d109      	bne.n	8008224 <HAL_TIM_PWM_Start+0x58>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b01      	cmp	r3, #1
 800821a:	bf14      	ite	ne
 800821c:	2301      	movne	r3, #1
 800821e:	2300      	moveq	r3, #0
 8008220:	b2db      	uxtb	r3, r3
 8008222:	e022      	b.n	800826a <HAL_TIM_PWM_Start+0x9e>
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2b0c      	cmp	r3, #12
 8008228:	d109      	bne.n	800823e <HAL_TIM_PWM_Start+0x72>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b01      	cmp	r3, #1
 8008234:	bf14      	ite	ne
 8008236:	2301      	movne	r3, #1
 8008238:	2300      	moveq	r3, #0
 800823a:	b2db      	uxtb	r3, r3
 800823c:	e015      	b.n	800826a <HAL_TIM_PWM_Start+0x9e>
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b10      	cmp	r3, #16
 8008242:	d109      	bne.n	8008258 <HAL_TIM_PWM_Start+0x8c>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b01      	cmp	r3, #1
 800824e:	bf14      	ite	ne
 8008250:	2301      	movne	r3, #1
 8008252:	2300      	moveq	r3, #0
 8008254:	b2db      	uxtb	r3, r3
 8008256:	e008      	b.n	800826a <HAL_TIM_PWM_Start+0x9e>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800825e:	b2db      	uxtb	r3, r3
 8008260:	2b01      	cmp	r3, #1
 8008262:	bf14      	ite	ne
 8008264:	2301      	movne	r3, #1
 8008266:	2300      	moveq	r3, #0
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e097      	b.n	80083a2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d104      	bne.n	8008282 <HAL_TIM_PWM_Start+0xb6>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008280:	e023      	b.n	80082ca <HAL_TIM_PWM_Start+0xfe>
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2b04      	cmp	r3, #4
 8008286:	d104      	bne.n	8008292 <HAL_TIM_PWM_Start+0xc6>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2202      	movs	r2, #2
 800828c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008290:	e01b      	b.n	80082ca <HAL_TIM_PWM_Start+0xfe>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b08      	cmp	r3, #8
 8008296:	d104      	bne.n	80082a2 <HAL_TIM_PWM_Start+0xd6>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082a0:	e013      	b.n	80082ca <HAL_TIM_PWM_Start+0xfe>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b0c      	cmp	r3, #12
 80082a6:	d104      	bne.n	80082b2 <HAL_TIM_PWM_Start+0xe6>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80082b0:	e00b      	b.n	80082ca <HAL_TIM_PWM_Start+0xfe>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b10      	cmp	r3, #16
 80082b6:	d104      	bne.n	80082c2 <HAL_TIM_PWM_Start+0xf6>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2202      	movs	r2, #2
 80082bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082c0:	e003      	b.n	80082ca <HAL_TIM_PWM_Start+0xfe>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2202      	movs	r2, #2
 80082c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2201      	movs	r2, #1
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 ff4c 	bl	8009170 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a33      	ldr	r2, [pc, #204]	@ (80083ac <HAL_TIM_PWM_Start+0x1e0>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d013      	beq.n	800830a <HAL_TIM_PWM_Start+0x13e>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a32      	ldr	r2, [pc, #200]	@ (80083b0 <HAL_TIM_PWM_Start+0x1e4>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d00e      	beq.n	800830a <HAL_TIM_PWM_Start+0x13e>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a30      	ldr	r2, [pc, #192]	@ (80083b4 <HAL_TIM_PWM_Start+0x1e8>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d009      	beq.n	800830a <HAL_TIM_PWM_Start+0x13e>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a2f      	ldr	r2, [pc, #188]	@ (80083b8 <HAL_TIM_PWM_Start+0x1ec>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d004      	beq.n	800830a <HAL_TIM_PWM_Start+0x13e>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a2d      	ldr	r2, [pc, #180]	@ (80083bc <HAL_TIM_PWM_Start+0x1f0>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d101      	bne.n	800830e <HAL_TIM_PWM_Start+0x142>
 800830a:	2301      	movs	r3, #1
 800830c:	e000      	b.n	8008310 <HAL_TIM_PWM_Start+0x144>
 800830e:	2300      	movs	r3, #0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d007      	beq.n	8008324 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008322:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a20      	ldr	r2, [pc, #128]	@ (80083ac <HAL_TIM_PWM_Start+0x1e0>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d018      	beq.n	8008360 <HAL_TIM_PWM_Start+0x194>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008336:	d013      	beq.n	8008360 <HAL_TIM_PWM_Start+0x194>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a20      	ldr	r2, [pc, #128]	@ (80083c0 <HAL_TIM_PWM_Start+0x1f4>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d00e      	beq.n	8008360 <HAL_TIM_PWM_Start+0x194>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a1f      	ldr	r2, [pc, #124]	@ (80083c4 <HAL_TIM_PWM_Start+0x1f8>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d009      	beq.n	8008360 <HAL_TIM_PWM_Start+0x194>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a17      	ldr	r2, [pc, #92]	@ (80083b0 <HAL_TIM_PWM_Start+0x1e4>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d004      	beq.n	8008360 <HAL_TIM_PWM_Start+0x194>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a16      	ldr	r2, [pc, #88]	@ (80083b4 <HAL_TIM_PWM_Start+0x1e8>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d115      	bne.n	800838c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	689a      	ldr	r2, [r3, #8]
 8008366:	4b18      	ldr	r3, [pc, #96]	@ (80083c8 <HAL_TIM_PWM_Start+0x1fc>)
 8008368:	4013      	ands	r3, r2
 800836a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2b06      	cmp	r3, #6
 8008370:	d015      	beq.n	800839e <HAL_TIM_PWM_Start+0x1d2>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008378:	d011      	beq.n	800839e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f042 0201 	orr.w	r2, r2, #1
 8008388:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800838a:	e008      	b.n	800839e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f042 0201 	orr.w	r2, r2, #1
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	e000      	b.n	80083a0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800839e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	40012c00 	.word	0x40012c00
 80083b0:	40013400 	.word	0x40013400
 80083b4:	40014000 	.word	0x40014000
 80083b8:	40014400 	.word	0x40014400
 80083bc:	40014800 	.word	0x40014800
 80083c0:	40000400 	.word	0x40000400
 80083c4:	40000800 	.word	0x40000800
 80083c8:	00010007 	.word	0x00010007

080083cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2200      	movs	r2, #0
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 fec6 	bl	8009170 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a3e      	ldr	r2, [pc, #248]	@ (80084e4 <HAL_TIM_PWM_Stop+0x118>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d013      	beq.n	8008416 <HAL_TIM_PWM_Stop+0x4a>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a3d      	ldr	r2, [pc, #244]	@ (80084e8 <HAL_TIM_PWM_Stop+0x11c>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d00e      	beq.n	8008416 <HAL_TIM_PWM_Stop+0x4a>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a3b      	ldr	r2, [pc, #236]	@ (80084ec <HAL_TIM_PWM_Stop+0x120>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d009      	beq.n	8008416 <HAL_TIM_PWM_Stop+0x4a>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a3a      	ldr	r2, [pc, #232]	@ (80084f0 <HAL_TIM_PWM_Stop+0x124>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d004      	beq.n	8008416 <HAL_TIM_PWM_Stop+0x4a>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a38      	ldr	r2, [pc, #224]	@ (80084f4 <HAL_TIM_PWM_Stop+0x128>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d101      	bne.n	800841a <HAL_TIM_PWM_Stop+0x4e>
 8008416:	2301      	movs	r3, #1
 8008418:	e000      	b.n	800841c <HAL_TIM_PWM_Stop+0x50>
 800841a:	2300      	movs	r3, #0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d017      	beq.n	8008450 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6a1a      	ldr	r2, [r3, #32]
 8008426:	f241 1311 	movw	r3, #4369	@ 0x1111
 800842a:	4013      	ands	r3, r2
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10f      	bne.n	8008450 <HAL_TIM_PWM_Stop+0x84>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6a1a      	ldr	r2, [r3, #32]
 8008436:	f244 4344 	movw	r3, #17476	@ 0x4444
 800843a:	4013      	ands	r3, r2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d107      	bne.n	8008450 <HAL_TIM_PWM_Stop+0x84>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800844e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6a1a      	ldr	r2, [r3, #32]
 8008456:	f241 1311 	movw	r3, #4369	@ 0x1111
 800845a:	4013      	ands	r3, r2
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10f      	bne.n	8008480 <HAL_TIM_PWM_Stop+0xb4>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6a1a      	ldr	r2, [r3, #32]
 8008466:	f244 4344 	movw	r3, #17476	@ 0x4444
 800846a:	4013      	ands	r3, r2
 800846c:	2b00      	cmp	r3, #0
 800846e:	d107      	bne.n	8008480 <HAL_TIM_PWM_Stop+0xb4>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f022 0201 	bic.w	r2, r2, #1
 800847e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d104      	bne.n	8008490 <HAL_TIM_PWM_Stop+0xc4>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800848e:	e023      	b.n	80084d8 <HAL_TIM_PWM_Stop+0x10c>
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	2b04      	cmp	r3, #4
 8008494:	d104      	bne.n	80084a0 <HAL_TIM_PWM_Stop+0xd4>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800849e:	e01b      	b.n	80084d8 <HAL_TIM_PWM_Stop+0x10c>
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	2b08      	cmp	r3, #8
 80084a4:	d104      	bne.n	80084b0 <HAL_TIM_PWM_Stop+0xe4>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084ae:	e013      	b.n	80084d8 <HAL_TIM_PWM_Stop+0x10c>
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	2b0c      	cmp	r3, #12
 80084b4:	d104      	bne.n	80084c0 <HAL_TIM_PWM_Stop+0xf4>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084be:	e00b      	b.n	80084d8 <HAL_TIM_PWM_Stop+0x10c>
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2b10      	cmp	r3, #16
 80084c4:	d104      	bne.n	80084d0 <HAL_TIM_PWM_Stop+0x104>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084ce:	e003      	b.n	80084d8 <HAL_TIM_PWM_Stop+0x10c>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	40012c00 	.word	0x40012c00
 80084e8:	40013400 	.word	0x40013400
 80084ec:	40014000 	.word	0x40014000
 80084f0:	40014400 	.word	0x40014400
 80084f4:	40014800 	.word	0x40014800

080084f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800850e:	2b01      	cmp	r3, #1
 8008510:	d101      	bne.n	8008516 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008512:	2302      	movs	r3, #2
 8008514:	e0ff      	b.n	8008716 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2b14      	cmp	r3, #20
 8008522:	f200 80f0 	bhi.w	8008706 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008526:	a201      	add	r2, pc, #4	@ (adr r2, 800852c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852c:	08008581 	.word	0x08008581
 8008530:	08008707 	.word	0x08008707
 8008534:	08008707 	.word	0x08008707
 8008538:	08008707 	.word	0x08008707
 800853c:	080085c1 	.word	0x080085c1
 8008540:	08008707 	.word	0x08008707
 8008544:	08008707 	.word	0x08008707
 8008548:	08008707 	.word	0x08008707
 800854c:	08008603 	.word	0x08008603
 8008550:	08008707 	.word	0x08008707
 8008554:	08008707 	.word	0x08008707
 8008558:	08008707 	.word	0x08008707
 800855c:	08008643 	.word	0x08008643
 8008560:	08008707 	.word	0x08008707
 8008564:	08008707 	.word	0x08008707
 8008568:	08008707 	.word	0x08008707
 800856c:	08008685 	.word	0x08008685
 8008570:	08008707 	.word	0x08008707
 8008574:	08008707 	.word	0x08008707
 8008578:	08008707 	.word	0x08008707
 800857c:	080086c5 	.word	0x080086c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68b9      	ldr	r1, [r7, #8]
 8008586:	4618      	mov	r0, r3
 8008588:	f000 fa60 	bl	8008a4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	699a      	ldr	r2, [r3, #24]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f042 0208 	orr.w	r2, r2, #8
 800859a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	699a      	ldr	r2, [r3, #24]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f022 0204 	bic.w	r2, r2, #4
 80085aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6999      	ldr	r1, [r3, #24]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	691a      	ldr	r2, [r3, #16]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	430a      	orrs	r2, r1
 80085bc:	619a      	str	r2, [r3, #24]
      break;
 80085be:	e0a5      	b.n	800870c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68b9      	ldr	r1, [r7, #8]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 fad0 	bl	8008b6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	699a      	ldr	r2, [r3, #24]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699a      	ldr	r2, [r3, #24]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6999      	ldr	r1, [r3, #24]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	021a      	lsls	r2, r3, #8
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	430a      	orrs	r2, r1
 80085fe:	619a      	str	r2, [r3, #24]
      break;
 8008600:	e084      	b.n	800870c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68b9      	ldr	r1, [r7, #8]
 8008608:	4618      	mov	r0, r3
 800860a:	f000 fb39 	bl	8008c80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	69da      	ldr	r2, [r3, #28]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f042 0208 	orr.w	r2, r2, #8
 800861c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	69da      	ldr	r2, [r3, #28]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 0204 	bic.w	r2, r2, #4
 800862c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	69d9      	ldr	r1, [r3, #28]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	691a      	ldr	r2, [r3, #16]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	430a      	orrs	r2, r1
 800863e:	61da      	str	r2, [r3, #28]
      break;
 8008640:	e064      	b.n	800870c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68b9      	ldr	r1, [r7, #8]
 8008648:	4618      	mov	r0, r3
 800864a:	f000 fba1 	bl	8008d90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	69da      	ldr	r2, [r3, #28]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800865c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	69da      	ldr	r2, [r3, #28]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800866c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	69d9      	ldr	r1, [r3, #28]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	021a      	lsls	r2, r3, #8
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	61da      	str	r2, [r3, #28]
      break;
 8008682:	e043      	b.n	800870c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68b9      	ldr	r1, [r7, #8]
 800868a:	4618      	mov	r0, r3
 800868c:	f000 fc0a 	bl	8008ea4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 0208 	orr.w	r2, r2, #8
 800869e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f022 0204 	bic.w	r2, r2, #4
 80086ae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	691a      	ldr	r2, [r3, #16]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80086c2:	e023      	b.n	800870c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68b9      	ldr	r1, [r7, #8]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 fc4e 	bl	8008f6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086ee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	021a      	lsls	r2, r3, #8
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008704:	e002      	b.n	800870c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	75fb      	strb	r3, [r7, #23]
      break;
 800870a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008714:	7dfb      	ldrb	r3, [r7, #23]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop

08008720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008734:	2b01      	cmp	r3, #1
 8008736:	d101      	bne.n	800873c <HAL_TIM_ConfigClockSource+0x1c>
 8008738:	2302      	movs	r3, #2
 800873a:	e0de      	b.n	80088fa <HAL_TIM_ConfigClockSource+0x1da>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2202      	movs	r2, #2
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800875a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800875e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008766:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a63      	ldr	r2, [pc, #396]	@ (8008904 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008776:	4293      	cmp	r3, r2
 8008778:	f000 80a9 	beq.w	80088ce <HAL_TIM_ConfigClockSource+0x1ae>
 800877c:	4a61      	ldr	r2, [pc, #388]	@ (8008904 <HAL_TIM_ConfigClockSource+0x1e4>)
 800877e:	4293      	cmp	r3, r2
 8008780:	f200 80ae 	bhi.w	80088e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8008784:	4a60      	ldr	r2, [pc, #384]	@ (8008908 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008786:	4293      	cmp	r3, r2
 8008788:	f000 80a1 	beq.w	80088ce <HAL_TIM_ConfigClockSource+0x1ae>
 800878c:	4a5e      	ldr	r2, [pc, #376]	@ (8008908 <HAL_TIM_ConfigClockSource+0x1e8>)
 800878e:	4293      	cmp	r3, r2
 8008790:	f200 80a6 	bhi.w	80088e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8008794:	4a5d      	ldr	r2, [pc, #372]	@ (800890c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008796:	4293      	cmp	r3, r2
 8008798:	f000 8099 	beq.w	80088ce <HAL_TIM_ConfigClockSource+0x1ae>
 800879c:	4a5b      	ldr	r2, [pc, #364]	@ (800890c <HAL_TIM_ConfigClockSource+0x1ec>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	f200 809e 	bhi.w	80088e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80087a4:	4a5a      	ldr	r2, [pc, #360]	@ (8008910 <HAL_TIM_ConfigClockSource+0x1f0>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	f000 8091 	beq.w	80088ce <HAL_TIM_ConfigClockSource+0x1ae>
 80087ac:	4a58      	ldr	r2, [pc, #352]	@ (8008910 <HAL_TIM_ConfigClockSource+0x1f0>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	f200 8096 	bhi.w	80088e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80087b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80087b8:	f000 8089 	beq.w	80088ce <HAL_TIM_ConfigClockSource+0x1ae>
 80087bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80087c0:	f200 808e 	bhi.w	80088e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80087c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087c8:	d03e      	beq.n	8008848 <HAL_TIM_ConfigClockSource+0x128>
 80087ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087ce:	f200 8087 	bhi.w	80088e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80087d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087d6:	f000 8086 	beq.w	80088e6 <HAL_TIM_ConfigClockSource+0x1c6>
 80087da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087de:	d87f      	bhi.n	80088e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80087e0:	2b70      	cmp	r3, #112	@ 0x70
 80087e2:	d01a      	beq.n	800881a <HAL_TIM_ConfigClockSource+0xfa>
 80087e4:	2b70      	cmp	r3, #112	@ 0x70
 80087e6:	d87b      	bhi.n	80088e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80087e8:	2b60      	cmp	r3, #96	@ 0x60
 80087ea:	d050      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x16e>
 80087ec:	2b60      	cmp	r3, #96	@ 0x60
 80087ee:	d877      	bhi.n	80088e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80087f0:	2b50      	cmp	r3, #80	@ 0x50
 80087f2:	d03c      	beq.n	800886e <HAL_TIM_ConfigClockSource+0x14e>
 80087f4:	2b50      	cmp	r3, #80	@ 0x50
 80087f6:	d873      	bhi.n	80088e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80087f8:	2b40      	cmp	r3, #64	@ 0x40
 80087fa:	d058      	beq.n	80088ae <HAL_TIM_ConfigClockSource+0x18e>
 80087fc:	2b40      	cmp	r3, #64	@ 0x40
 80087fe:	d86f      	bhi.n	80088e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8008800:	2b30      	cmp	r3, #48	@ 0x30
 8008802:	d064      	beq.n	80088ce <HAL_TIM_ConfigClockSource+0x1ae>
 8008804:	2b30      	cmp	r3, #48	@ 0x30
 8008806:	d86b      	bhi.n	80088e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8008808:	2b20      	cmp	r3, #32
 800880a:	d060      	beq.n	80088ce <HAL_TIM_ConfigClockSource+0x1ae>
 800880c:	2b20      	cmp	r3, #32
 800880e:	d867      	bhi.n	80088e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8008810:	2b00      	cmp	r3, #0
 8008812:	d05c      	beq.n	80088ce <HAL_TIM_ConfigClockSource+0x1ae>
 8008814:	2b10      	cmp	r3, #16
 8008816:	d05a      	beq.n	80088ce <HAL_TIM_ConfigClockSource+0x1ae>
 8008818:	e062      	b.n	80088e0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800882a:	f000 fc81 	bl	8009130 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800883c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	609a      	str	r2, [r3, #8]
      break;
 8008846:	e04f      	b.n	80088e8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008858:	f000 fc6a 	bl	8009130 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	689a      	ldr	r2, [r3, #8]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800886a:	609a      	str	r2, [r3, #8]
      break;
 800886c:	e03c      	b.n	80088e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800887a:	461a      	mov	r2, r3
 800887c:	f000 fbdc 	bl	8009038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2150      	movs	r1, #80	@ 0x50
 8008886:	4618      	mov	r0, r3
 8008888:	f000 fc35 	bl	80090f6 <TIM_ITRx_SetConfig>
      break;
 800888c:	e02c      	b.n	80088e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800889a:	461a      	mov	r2, r3
 800889c:	f000 fbfb 	bl	8009096 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2160      	movs	r1, #96	@ 0x60
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 fc25 	bl	80090f6 <TIM_ITRx_SetConfig>
      break;
 80088ac:	e01c      	b.n	80088e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088ba:	461a      	mov	r2, r3
 80088bc:	f000 fbbc 	bl	8009038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2140      	movs	r1, #64	@ 0x40
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 fc15 	bl	80090f6 <TIM_ITRx_SetConfig>
      break;
 80088cc:	e00c      	b.n	80088e8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4619      	mov	r1, r3
 80088d8:	4610      	mov	r0, r2
 80088da:	f000 fc0c 	bl	80090f6 <TIM_ITRx_SetConfig>
      break;
 80088de:	e003      	b.n	80088e8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	73fb      	strb	r3, [r7, #15]
      break;
 80088e4:	e000      	b.n	80088e8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80088e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	00100070 	.word	0x00100070
 8008908:	00100040 	.word	0x00100040
 800890c:	00100030 	.word	0x00100030
 8008910:	00100020 	.word	0x00100020

08008914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a42      	ldr	r2, [pc, #264]	@ (8008a30 <TIM_Base_SetConfig+0x11c>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d00f      	beq.n	800894c <TIM_Base_SetConfig+0x38>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008932:	d00b      	beq.n	800894c <TIM_Base_SetConfig+0x38>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a3f      	ldr	r2, [pc, #252]	@ (8008a34 <TIM_Base_SetConfig+0x120>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d007      	beq.n	800894c <TIM_Base_SetConfig+0x38>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a3e      	ldr	r2, [pc, #248]	@ (8008a38 <TIM_Base_SetConfig+0x124>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d003      	beq.n	800894c <TIM_Base_SetConfig+0x38>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a3d      	ldr	r2, [pc, #244]	@ (8008a3c <TIM_Base_SetConfig+0x128>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d108      	bne.n	800895e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	4313      	orrs	r3, r2
 800895c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a33      	ldr	r2, [pc, #204]	@ (8008a30 <TIM_Base_SetConfig+0x11c>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d01b      	beq.n	800899e <TIM_Base_SetConfig+0x8a>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800896c:	d017      	beq.n	800899e <TIM_Base_SetConfig+0x8a>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a30      	ldr	r2, [pc, #192]	@ (8008a34 <TIM_Base_SetConfig+0x120>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d013      	beq.n	800899e <TIM_Base_SetConfig+0x8a>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a2f      	ldr	r2, [pc, #188]	@ (8008a38 <TIM_Base_SetConfig+0x124>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d00f      	beq.n	800899e <TIM_Base_SetConfig+0x8a>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a2e      	ldr	r2, [pc, #184]	@ (8008a3c <TIM_Base_SetConfig+0x128>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d00b      	beq.n	800899e <TIM_Base_SetConfig+0x8a>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a2d      	ldr	r2, [pc, #180]	@ (8008a40 <TIM_Base_SetConfig+0x12c>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d007      	beq.n	800899e <TIM_Base_SetConfig+0x8a>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a2c      	ldr	r2, [pc, #176]	@ (8008a44 <TIM_Base_SetConfig+0x130>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d003      	beq.n	800899e <TIM_Base_SetConfig+0x8a>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a2b      	ldr	r2, [pc, #172]	@ (8008a48 <TIM_Base_SetConfig+0x134>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d108      	bne.n	80089b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	689a      	ldr	r2, [r3, #8]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a16      	ldr	r2, [pc, #88]	@ (8008a30 <TIM_Base_SetConfig+0x11c>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d00f      	beq.n	80089fc <TIM_Base_SetConfig+0xe8>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a17      	ldr	r2, [pc, #92]	@ (8008a3c <TIM_Base_SetConfig+0x128>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d00b      	beq.n	80089fc <TIM_Base_SetConfig+0xe8>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a16      	ldr	r2, [pc, #88]	@ (8008a40 <TIM_Base_SetConfig+0x12c>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d007      	beq.n	80089fc <TIM_Base_SetConfig+0xe8>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a15      	ldr	r2, [pc, #84]	@ (8008a44 <TIM_Base_SetConfig+0x130>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d003      	beq.n	80089fc <TIM_Base_SetConfig+0xe8>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a14      	ldr	r2, [pc, #80]	@ (8008a48 <TIM_Base_SetConfig+0x134>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d103      	bne.n	8008a04 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	691a      	ldr	r2, [r3, #16]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d105      	bne.n	8008a22 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	f023 0201 	bic.w	r2, r3, #1
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	611a      	str	r2, [r3, #16]
  }
}
 8008a22:	bf00      	nop
 8008a24:	3714      	adds	r7, #20
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	40012c00 	.word	0x40012c00
 8008a34:	40000400 	.word	0x40000400
 8008a38:	40000800 	.word	0x40000800
 8008a3c:	40013400 	.word	0x40013400
 8008a40:	40014000 	.word	0x40014000
 8008a44:	40014400 	.word	0x40014400
 8008a48:	40014800 	.word	0x40014800

08008a4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b087      	sub	sp, #28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a1b      	ldr	r3, [r3, #32]
 8008a60:	f023 0201 	bic.w	r2, r3, #1
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f023 0303 	bic.w	r3, r3, #3
 8008a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	f023 0302 	bic.w	r3, r3, #2
 8008a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	697a      	ldr	r2, [r7, #20]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8008b58 <TIM_OC1_SetConfig+0x10c>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d00f      	beq.n	8008acc <TIM_OC1_SetConfig+0x80>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a2b      	ldr	r2, [pc, #172]	@ (8008b5c <TIM_OC1_SetConfig+0x110>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d00b      	beq.n	8008acc <TIM_OC1_SetConfig+0x80>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8008b60 <TIM_OC1_SetConfig+0x114>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d007      	beq.n	8008acc <TIM_OC1_SetConfig+0x80>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a29      	ldr	r2, [pc, #164]	@ (8008b64 <TIM_OC1_SetConfig+0x118>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d003      	beq.n	8008acc <TIM_OC1_SetConfig+0x80>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a28      	ldr	r2, [pc, #160]	@ (8008b68 <TIM_OC1_SetConfig+0x11c>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d10c      	bne.n	8008ae6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f023 0308 	bic.w	r3, r3, #8
 8008ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f023 0304 	bic.w	r3, r3, #4
 8008ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8008b58 <TIM_OC1_SetConfig+0x10c>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d00f      	beq.n	8008b0e <TIM_OC1_SetConfig+0xc2>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a1a      	ldr	r2, [pc, #104]	@ (8008b5c <TIM_OC1_SetConfig+0x110>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d00b      	beq.n	8008b0e <TIM_OC1_SetConfig+0xc2>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a19      	ldr	r2, [pc, #100]	@ (8008b60 <TIM_OC1_SetConfig+0x114>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d007      	beq.n	8008b0e <TIM_OC1_SetConfig+0xc2>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a18      	ldr	r2, [pc, #96]	@ (8008b64 <TIM_OC1_SetConfig+0x118>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d003      	beq.n	8008b0e <TIM_OC1_SetConfig+0xc2>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a17      	ldr	r2, [pc, #92]	@ (8008b68 <TIM_OC1_SetConfig+0x11c>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d111      	bne.n	8008b32 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	621a      	str	r2, [r3, #32]
}
 8008b4c:	bf00      	nop
 8008b4e:	371c      	adds	r7, #28
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	40012c00 	.word	0x40012c00
 8008b5c:	40013400 	.word	0x40013400
 8008b60:	40014000 	.word	0x40014000
 8008b64:	40014400 	.word	0x40014400
 8008b68:	40014800 	.word	0x40014800

08008b6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b087      	sub	sp, #28
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a1b      	ldr	r3, [r3, #32]
 8008b80:	f023 0210 	bic.w	r2, r3, #16
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	021b      	lsls	r3, r3, #8
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f023 0320 	bic.w	r3, r3, #32
 8008bba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	011b      	lsls	r3, r3, #4
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a28      	ldr	r2, [pc, #160]	@ (8008c6c <TIM_OC2_SetConfig+0x100>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d003      	beq.n	8008bd8 <TIM_OC2_SetConfig+0x6c>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a27      	ldr	r2, [pc, #156]	@ (8008c70 <TIM_OC2_SetConfig+0x104>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d10d      	bne.n	8008bf4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	011b      	lsls	r3, r3, #4
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bf2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8008c6c <TIM_OC2_SetConfig+0x100>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d00f      	beq.n	8008c1c <TIM_OC2_SetConfig+0xb0>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8008c70 <TIM_OC2_SetConfig+0x104>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d00b      	beq.n	8008c1c <TIM_OC2_SetConfig+0xb0>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a1b      	ldr	r2, [pc, #108]	@ (8008c74 <TIM_OC2_SetConfig+0x108>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d007      	beq.n	8008c1c <TIM_OC2_SetConfig+0xb0>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8008c78 <TIM_OC2_SetConfig+0x10c>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d003      	beq.n	8008c1c <TIM_OC2_SetConfig+0xb0>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a19      	ldr	r2, [pc, #100]	@ (8008c7c <TIM_OC2_SetConfig+0x110>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d113      	bne.n	8008c44 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	621a      	str	r2, [r3, #32]
}
 8008c5e:	bf00      	nop
 8008c60:	371c      	adds	r7, #28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	40012c00 	.word	0x40012c00
 8008c70:	40013400 	.word	0x40013400
 8008c74:	40014000 	.word	0x40014000
 8008c78:	40014400 	.word	0x40014400
 8008c7c:	40014800 	.word	0x40014800

08008c80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a1b      	ldr	r3, [r3, #32]
 8008c94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f023 0303 	bic.w	r3, r3, #3
 8008cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	021b      	lsls	r3, r3, #8
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a27      	ldr	r2, [pc, #156]	@ (8008d7c <TIM_OC3_SetConfig+0xfc>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d003      	beq.n	8008cea <TIM_OC3_SetConfig+0x6a>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a26      	ldr	r2, [pc, #152]	@ (8008d80 <TIM_OC3_SetConfig+0x100>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d10d      	bne.n	8008d06 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	021b      	lsls	r3, r3, #8
 8008cf8:	697a      	ldr	r2, [r7, #20]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a1c      	ldr	r2, [pc, #112]	@ (8008d7c <TIM_OC3_SetConfig+0xfc>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d00f      	beq.n	8008d2e <TIM_OC3_SetConfig+0xae>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a1b      	ldr	r2, [pc, #108]	@ (8008d80 <TIM_OC3_SetConfig+0x100>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d00b      	beq.n	8008d2e <TIM_OC3_SetConfig+0xae>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a1a      	ldr	r2, [pc, #104]	@ (8008d84 <TIM_OC3_SetConfig+0x104>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d007      	beq.n	8008d2e <TIM_OC3_SetConfig+0xae>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a19      	ldr	r2, [pc, #100]	@ (8008d88 <TIM_OC3_SetConfig+0x108>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d003      	beq.n	8008d2e <TIM_OC3_SetConfig+0xae>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a18      	ldr	r2, [pc, #96]	@ (8008d8c <TIM_OC3_SetConfig+0x10c>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d113      	bne.n	8008d56 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	695b      	ldr	r3, [r3, #20]
 8008d42:	011b      	lsls	r3, r3, #4
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	011b      	lsls	r3, r3, #4
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	685a      	ldr	r2, [r3, #4]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	621a      	str	r2, [r3, #32]
}
 8008d70:	bf00      	nop
 8008d72:	371c      	adds	r7, #28
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	40012c00 	.word	0x40012c00
 8008d80:	40013400 	.word	0x40013400
 8008d84:	40014000 	.word	0x40014000
 8008d88:	40014400 	.word	0x40014400
 8008d8c:	40014800 	.word	0x40014800

08008d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b087      	sub	sp, #28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a1b      	ldr	r3, [r3, #32]
 8008da4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	021b      	lsls	r3, r3, #8
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008dde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	031b      	lsls	r3, r3, #12
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a28      	ldr	r2, [pc, #160]	@ (8008e90 <TIM_OC4_SetConfig+0x100>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d003      	beq.n	8008dfc <TIM_OC4_SetConfig+0x6c>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a27      	ldr	r2, [pc, #156]	@ (8008e94 <TIM_OC4_SetConfig+0x104>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d10d      	bne.n	8008e18 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	031b      	lsls	r3, r3, #12
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8008e90 <TIM_OC4_SetConfig+0x100>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d00f      	beq.n	8008e40 <TIM_OC4_SetConfig+0xb0>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a1c      	ldr	r2, [pc, #112]	@ (8008e94 <TIM_OC4_SetConfig+0x104>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d00b      	beq.n	8008e40 <TIM_OC4_SetConfig+0xb0>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8008e98 <TIM_OC4_SetConfig+0x108>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d007      	beq.n	8008e40 <TIM_OC4_SetConfig+0xb0>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a1a      	ldr	r2, [pc, #104]	@ (8008e9c <TIM_OC4_SetConfig+0x10c>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d003      	beq.n	8008e40 <TIM_OC4_SetConfig+0xb0>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a19      	ldr	r2, [pc, #100]	@ (8008ea0 <TIM_OC4_SetConfig+0x110>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d113      	bne.n	8008e68 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e46:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e4e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	695b      	ldr	r3, [r3, #20]
 8008e54:	019b      	lsls	r3, r3, #6
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	019b      	lsls	r3, r3, #6
 8008e62:	693a      	ldr	r2, [r7, #16]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	621a      	str	r2, [r3, #32]
}
 8008e82:	bf00      	nop
 8008e84:	371c      	adds	r7, #28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	40012c00 	.word	0x40012c00
 8008e94:	40013400 	.word	0x40013400
 8008e98:	40014000 	.word	0x40014000
 8008e9c:	40014400 	.word	0x40014400
 8008ea0:	40014800 	.word	0x40014800

08008ea4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b087      	sub	sp, #28
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
 8008eb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a1b      	ldr	r3, [r3, #32]
 8008eb8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008ee8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	041b      	lsls	r3, r3, #16
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a17      	ldr	r2, [pc, #92]	@ (8008f58 <TIM_OC5_SetConfig+0xb4>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d00f      	beq.n	8008f1e <TIM_OC5_SetConfig+0x7a>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a16      	ldr	r2, [pc, #88]	@ (8008f5c <TIM_OC5_SetConfig+0xb8>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d00b      	beq.n	8008f1e <TIM_OC5_SetConfig+0x7a>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a15      	ldr	r2, [pc, #84]	@ (8008f60 <TIM_OC5_SetConfig+0xbc>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d007      	beq.n	8008f1e <TIM_OC5_SetConfig+0x7a>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a14      	ldr	r2, [pc, #80]	@ (8008f64 <TIM_OC5_SetConfig+0xc0>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d003      	beq.n	8008f1e <TIM_OC5_SetConfig+0x7a>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a13      	ldr	r2, [pc, #76]	@ (8008f68 <TIM_OC5_SetConfig+0xc4>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d109      	bne.n	8008f32 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	021b      	lsls	r3, r3, #8
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	621a      	str	r2, [r3, #32]
}
 8008f4c:	bf00      	nop
 8008f4e:	371c      	adds	r7, #28
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr
 8008f58:	40012c00 	.word	0x40012c00
 8008f5c:	40013400 	.word	0x40013400
 8008f60:	40014000 	.word	0x40014000
 8008f64:	40014400 	.word	0x40014400
 8008f68:	40014800 	.word	0x40014800

08008f6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a1b      	ldr	r3, [r3, #32]
 8008f80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	021b      	lsls	r3, r3, #8
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008fb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	051b      	lsls	r3, r3, #20
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a18      	ldr	r2, [pc, #96]	@ (8009024 <TIM_OC6_SetConfig+0xb8>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d00f      	beq.n	8008fe8 <TIM_OC6_SetConfig+0x7c>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a17      	ldr	r2, [pc, #92]	@ (8009028 <TIM_OC6_SetConfig+0xbc>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d00b      	beq.n	8008fe8 <TIM_OC6_SetConfig+0x7c>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a16      	ldr	r2, [pc, #88]	@ (800902c <TIM_OC6_SetConfig+0xc0>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d007      	beq.n	8008fe8 <TIM_OC6_SetConfig+0x7c>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a15      	ldr	r2, [pc, #84]	@ (8009030 <TIM_OC6_SetConfig+0xc4>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d003      	beq.n	8008fe8 <TIM_OC6_SetConfig+0x7c>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a14      	ldr	r2, [pc, #80]	@ (8009034 <TIM_OC6_SetConfig+0xc8>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d109      	bne.n	8008ffc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008fee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	029b      	lsls	r3, r3, #10
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	621a      	str	r2, [r3, #32]
}
 8009016:	bf00      	nop
 8009018:	371c      	adds	r7, #28
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	40012c00 	.word	0x40012c00
 8009028:	40013400 	.word	0x40013400
 800902c:	40014000 	.word	0x40014000
 8009030:	40014400 	.word	0x40014400
 8009034:	40014800 	.word	0x40014800

08009038 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009038:	b480      	push	{r7}
 800903a:	b087      	sub	sp, #28
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6a1b      	ldr	r3, [r3, #32]
 8009048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	f023 0201 	bic.w	r2, r3, #1
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	011b      	lsls	r3, r3, #4
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	4313      	orrs	r3, r2
 800906c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f023 030a 	bic.w	r3, r3, #10
 8009074:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	4313      	orrs	r3, r2
 800907c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	697a      	ldr	r2, [r7, #20]
 8009088:	621a      	str	r2, [r3, #32]
}
 800908a:	bf00      	nop
 800908c:	371c      	adds	r7, #28
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009096:	b480      	push	{r7}
 8009098:	b087      	sub	sp, #28
 800909a:	af00      	add	r7, sp, #0
 800909c:	60f8      	str	r0, [r7, #12]
 800909e:	60b9      	str	r1, [r7, #8]
 80090a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6a1b      	ldr	r3, [r3, #32]
 80090ac:	f023 0210 	bic.w	r2, r3, #16
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80090c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	031b      	lsls	r3, r3, #12
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80090d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	011b      	lsls	r3, r3, #4
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	4313      	orrs	r3, r2
 80090dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	621a      	str	r2, [r3, #32]
}
 80090ea:	bf00      	nop
 80090ec:	371c      	adds	r7, #28
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b085      	sub	sp, #20
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800910c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009110:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	4313      	orrs	r3, r2
 8009118:	f043 0307 	orr.w	r3, r3, #7
 800911c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	609a      	str	r2, [r3, #8]
}
 8009124:	bf00      	nop
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009130:	b480      	push	{r7}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
 800913c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800914a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	021a      	lsls	r2, r3, #8
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	431a      	orrs	r2, r3
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	4313      	orrs	r3, r2
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	4313      	orrs	r3, r2
 800915c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	697a      	ldr	r2, [r7, #20]
 8009162:	609a      	str	r2, [r3, #8]
}
 8009164:	bf00      	nop
 8009166:	371c      	adds	r7, #28
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009170:	b480      	push	{r7}
 8009172:	b087      	sub	sp, #28
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	f003 031f 	and.w	r3, r3, #31
 8009182:	2201      	movs	r2, #1
 8009184:	fa02 f303 	lsl.w	r3, r2, r3
 8009188:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6a1a      	ldr	r2, [r3, #32]
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	43db      	mvns	r3, r3
 8009192:	401a      	ands	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6a1a      	ldr	r2, [r3, #32]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	f003 031f 	and.w	r3, r3, #31
 80091a2:	6879      	ldr	r1, [r7, #4]
 80091a4:	fa01 f303 	lsl.w	r3, r1, r3
 80091a8:	431a      	orrs	r2, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	621a      	str	r2, [r3, #32]
}
 80091ae:	bf00      	nop
 80091b0:	371c      	adds	r7, #28
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
	...

080091bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d101      	bne.n	80091d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e065      	b.n	80092a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2202      	movs	r2, #2
 80091e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a2c      	ldr	r2, [pc, #176]	@ (80092ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d004      	beq.n	8009208 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a2b      	ldr	r2, [pc, #172]	@ (80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d108      	bne.n	800921a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800920e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	4313      	orrs	r3, r2
 8009218:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009224:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	4313      	orrs	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a1b      	ldr	r2, [pc, #108]	@ (80092ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d018      	beq.n	8009274 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800924a:	d013      	beq.n	8009274 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a18      	ldr	r2, [pc, #96]	@ (80092b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d00e      	beq.n	8009274 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a17      	ldr	r2, [pc, #92]	@ (80092b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d009      	beq.n	8009274 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a12      	ldr	r2, [pc, #72]	@ (80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d004      	beq.n	8009274 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a13      	ldr	r2, [pc, #76]	@ (80092bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d10c      	bne.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800927a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	68ba      	ldr	r2, [r7, #8]
 8009282:	4313      	orrs	r3, r2
 8009284:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3714      	adds	r7, #20
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	40012c00 	.word	0x40012c00
 80092b0:	40013400 	.word	0x40013400
 80092b4:	40000400 	.word	0x40000400
 80092b8:	40000800 	.word	0x40000800
 80092bc:	40014000 	.word	0x40014000

080092c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80092ca:	2300      	movs	r3, #0
 80092cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d101      	bne.n	80092dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80092d8:	2302      	movs	r3, #2
 80092da:	e073      	b.n	80093c4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	4313      	orrs	r3, r2
 800930c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4313      	orrs	r3, r2
 800931a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	4313      	orrs	r3, r2
 8009328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	695b      	ldr	r3, [r3, #20]
 8009334:	4313      	orrs	r3, r2
 8009336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009342:	4313      	orrs	r3, r2
 8009344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	041b      	lsls	r3, r3, #16
 8009352:	4313      	orrs	r3, r2
 8009354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	69db      	ldr	r3, [r3, #28]
 8009360:	4313      	orrs	r3, r2
 8009362:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a19      	ldr	r2, [pc, #100]	@ (80093d0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d004      	beq.n	8009378 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a18      	ldr	r2, [pc, #96]	@ (80093d4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d11c      	bne.n	80093b2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009382:	051b      	lsls	r3, r3, #20
 8009384:	4313      	orrs	r3, r2
 8009386:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	4313      	orrs	r3, r2
 8009394:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a0:	4313      	orrs	r3, r2
 80093a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ae:	4313      	orrs	r3, r2
 80093b0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	40012c00 	.word	0x40012c00
 80093d4:	40013400 	.word	0x40013400

080093d8 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 80093d8:	b480      	push	{r7}
 80093da:	b08b      	sub	sp, #44	@ 0x2c
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093e4:	2300      	movs	r3, #0
 80093e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d101      	bne.n	80093f8 <HAL_TIMEx_ConfigBreakInput+0x20>
 80093f4:	2302      	movs	r3, #2
 80093f6:	e0c1      	b.n	800957c <HAL_TIMEx_ConfigBreakInput+0x1a4>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	3b01      	subs	r3, #1
 8009406:	2b0f      	cmp	r3, #15
 8009408:	d854      	bhi.n	80094b4 <HAL_TIMEx_ConfigBreakInput+0xdc>
 800940a:	a201      	add	r2, pc, #4	@ (adr r2, 8009410 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800940c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009410:	08009451 	.word	0x08009451
 8009414:	08009465 	.word	0x08009465
 8009418:	080094b5 	.word	0x080094b5
 800941c:	08009479 	.word	0x08009479
 8009420:	080094b5 	.word	0x080094b5
 8009424:	080094b5 	.word	0x080094b5
 8009428:	080094b5 	.word	0x080094b5
 800942c:	0800948d 	.word	0x0800948d
 8009430:	080094b5 	.word	0x080094b5
 8009434:	080094b5 	.word	0x080094b5
 8009438:	080094b5 	.word	0x080094b5
 800943c:	080094b5 	.word	0x080094b5
 8009440:	080094b5 	.word	0x080094b5
 8009444:	080094b5 	.word	0x080094b5
 8009448:	080094b5 	.word	0x080094b5
 800944c:	080094a1 	.word	0x080094a1
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8009450:	2301      	movs	r3, #1
 8009452:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8009454:	2300      	movs	r3, #0
 8009456:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8009458:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800945c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800945e:	2309      	movs	r3, #9
 8009460:	617b      	str	r3, [r7, #20]
      break;
 8009462:	e030      	b.n	80094c6 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8009464:	2302      	movs	r3, #2
 8009466:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8009468:	2301      	movs	r3, #1
 800946a:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800946c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009470:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8009472:	230a      	movs	r3, #10
 8009474:	617b      	str	r3, [r7, #20]
      break;
 8009476:	e026      	b.n	80094c6 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8009478:	2304      	movs	r3, #4
 800947a:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800947c:	2302      	movs	r3, #2
 800947e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8009480:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009484:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8009486:	230b      	movs	r3, #11
 8009488:	617b      	str	r3, [r7, #20]
      break;
 800948a:	e01c      	b.n	80094c6 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800948c:	2308      	movs	r3, #8
 800948e:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8009490:	2303      	movs	r3, #3
 8009492:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8009494:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009498:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 800949a:	230c      	movs	r3, #12
 800949c:	617b      	str	r3, [r7, #20]
      break;
 800949e:	e012      	b.n	80094c6 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 80094a0:	2310      	movs	r3, #16
 80094a2:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 80094a4:	2304      	movs	r3, #4
 80094a6:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 80094a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80094ac:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 80094ae:	230d      	movs	r3, #13
 80094b0:	617b      	str	r3, [r7, #20]
      break;
 80094b2:	e008      	b.n	80094c6 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 80094b4:	2300      	movs	r3, #0
 80094b6:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 80094b8:	2300      	movs	r3, #0
 80094ba:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 80094bc:	2300      	movs	r3, #0
 80094be:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80094c0:	2300      	movs	r3, #0
 80094c2:	617b      	str	r3, [r7, #20]
      break;
 80094c4:	bf00      	nop
    }
  }

  switch (BreakInput)
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d003      	beq.n	80094d4 <HAL_TIMEx_ConfigBreakInput+0xfc>
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d025      	beq.n	800951e <HAL_TIMEx_ConfigBreakInput+0x146>
 80094d2:	e049      	b.n	8009568 <HAL_TIMEx_ConfigBreakInput+0x190>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094da:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80094dc:	6a3b      	ldr	r3, [r7, #32]
 80094de:	43db      	mvns	r3, r3
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	4013      	ands	r3, r2
 80094e4:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	409a      	lsls	r2, r3
 80094ee:	6a3b      	ldr	r3, [r7, #32]
 80094f0:	4013      	ands	r3, r2
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	43db      	mvns	r3, r3
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	4013      	ands	r3, r2
 8009500:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	689a      	ldr	r2, [r3, #8]
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	409a      	lsls	r2, r3
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	4013      	ands	r3, r2
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	4313      	orrs	r3, r2
 8009512:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	693a      	ldr	r2, [r7, #16]
 800951a:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800951c:	e028      	b.n	8009570 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009524:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	43db      	mvns	r3, r3
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	4013      	ands	r3, r2
 800952e:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685a      	ldr	r2, [r3, #4]
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	409a      	lsls	r2, r3
 8009538:	6a3b      	ldr	r3, [r7, #32]
 800953a:	4013      	ands	r3, r2
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	4313      	orrs	r3, r2
 8009540:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	43db      	mvns	r3, r3
 8009546:	693a      	ldr	r2, [r7, #16]
 8009548:	4013      	ands	r3, r2
 800954a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	689a      	ldr	r2, [r3, #8]
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	409a      	lsls	r2, r3
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	4013      	ands	r3, r2
 8009558:	693a      	ldr	r2, [r7, #16]
 800955a:	4313      	orrs	r3, r2
 800955c:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8009566:	e003      	b.n	8009570 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    default:
      status = HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800956e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009578:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800957c:	4618      	mov	r0, r3
 800957e:	372c      	adds	r7, #44	@ 0x2c
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e042      	b.n	8009620 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d106      	bne.n	80095b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7f9 f807 	bl	80025c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2224      	movs	r2, #36	@ 0x24
 80095b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 0201 	bic.w	r2, r2, #1
 80095c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d002      	beq.n	80095d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 ff58 	bl	800a488 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fc89 	bl	8009ef0 <UART_SetConfig>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d101      	bne.n	80095e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e01b      	b.n	8009620 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80095f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689a      	ldr	r2, [r3, #8]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009606:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f042 0201 	orr.w	r2, r2, #1
 8009616:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 ffd7 	bl	800a5cc <UART_CheckIdleState>
 800961e:	4603      	mov	r3, r0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08a      	sub	sp, #40	@ 0x28
 800962c:	af02      	add	r7, sp, #8
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	603b      	str	r3, [r7, #0]
 8009634:	4613      	mov	r3, r2
 8009636:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800963e:	2b20      	cmp	r3, #32
 8009640:	d17b      	bne.n	800973a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <HAL_UART_Transmit+0x26>
 8009648:	88fb      	ldrh	r3, [r7, #6]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d101      	bne.n	8009652 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e074      	b.n	800973c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2221      	movs	r2, #33	@ 0x21
 800965e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009662:	f7f9 f99b 	bl	800299c <HAL_GetTick>
 8009666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	88fa      	ldrh	r2, [r7, #6]
 800966c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	88fa      	ldrh	r2, [r7, #6]
 8009674:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009680:	d108      	bne.n	8009694 <HAL_UART_Transmit+0x6c>
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	691b      	ldr	r3, [r3, #16]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d104      	bne.n	8009694 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800968a:	2300      	movs	r3, #0
 800968c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	61bb      	str	r3, [r7, #24]
 8009692:	e003      	b.n	800969c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009698:	2300      	movs	r3, #0
 800969a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800969c:	e030      	b.n	8009700 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	2200      	movs	r2, #0
 80096a6:	2180      	movs	r1, #128	@ 0x80
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f001 f839 	bl	800a720 <UART_WaitOnFlagUntilTimeout>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d005      	beq.n	80096c0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2220      	movs	r2, #32
 80096b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80096bc:	2303      	movs	r3, #3
 80096be:	e03d      	b.n	800973c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10b      	bne.n	80096de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	881b      	ldrh	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	3302      	adds	r3, #2
 80096da:	61bb      	str	r3, [r7, #24]
 80096dc:	e007      	b.n	80096ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	781a      	ldrb	r2, [r3, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	3301      	adds	r3, #1
 80096ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	3b01      	subs	r3, #1
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009706:	b29b      	uxth	r3, r3
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1c8      	bne.n	800969e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	2200      	movs	r2, #0
 8009714:	2140      	movs	r1, #64	@ 0x40
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f001 f802 	bl	800a720 <UART_WaitOnFlagUntilTimeout>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d005      	beq.n	800972e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2220      	movs	r2, #32
 8009726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800972a:	2303      	movs	r3, #3
 800972c:	e006      	b.n	800973c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2220      	movs	r2, #32
 8009732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009736:	2300      	movs	r3, #0
 8009738:	e000      	b.n	800973c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800973a:	2302      	movs	r3, #2
  }
}
 800973c:	4618      	mov	r0, r3
 800973e:	3720      	adds	r7, #32
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b08a      	sub	sp, #40	@ 0x28
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	4613      	mov	r3, r2
 8009750:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009758:	2b20      	cmp	r3, #32
 800975a:	d167      	bne.n	800982c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d002      	beq.n	8009768 <HAL_UART_Transmit_DMA+0x24>
 8009762:	88fb      	ldrh	r3, [r7, #6]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e060      	b.n	800982e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	68ba      	ldr	r2, [r7, #8]
 8009770:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	88fa      	ldrh	r2, [r7, #6]
 8009776:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	88fa      	ldrh	r2, [r7, #6]
 800977e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2221      	movs	r2, #33	@ 0x21
 800978e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009796:	2b00      	cmp	r3, #0
 8009798:	d028      	beq.n	80097ec <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800979e:	4a26      	ldr	r2, [pc, #152]	@ (8009838 <HAL_UART_Transmit_DMA+0xf4>)
 80097a0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097a6:	4a25      	ldr	r2, [pc, #148]	@ (800983c <HAL_UART_Transmit_DMA+0xf8>)
 80097a8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097ae:	4a24      	ldr	r2, [pc, #144]	@ (8009840 <HAL_UART_Transmit_DMA+0xfc>)
 80097b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097b6:	2200      	movs	r2, #0
 80097b8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097c2:	4619      	mov	r1, r3
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	3328      	adds	r3, #40	@ 0x28
 80097ca:	461a      	mov	r2, r3
 80097cc:	88fb      	ldrh	r3, [r7, #6]
 80097ce:	f7fc fb93 	bl	8005ef8 <HAL_DMA_Start_IT>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d009      	beq.n	80097ec <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2210      	movs	r2, #16
 80097dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2220      	movs	r2, #32
 80097e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e020      	b.n	800982e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2240      	movs	r2, #64	@ 0x40
 80097f2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	3308      	adds	r3, #8
 80097fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	e853 3f00 	ldrex	r3, [r3]
 8009802:	613b      	str	r3, [r7, #16]
   return(result);
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800980a:	627b      	str	r3, [r7, #36]	@ 0x24
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3308      	adds	r3, #8
 8009812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009814:	623a      	str	r2, [r7, #32]
 8009816:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009818:	69f9      	ldr	r1, [r7, #28]
 800981a:	6a3a      	ldr	r2, [r7, #32]
 800981c:	e841 2300 	strex	r3, r2, [r1]
 8009820:	61bb      	str	r3, [r7, #24]
   return(result);
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d1e5      	bne.n	80097f4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	e000      	b.n	800982e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800982c:	2302      	movs	r3, #2
  }
}
 800982e:	4618      	mov	r0, r3
 8009830:	3728      	adds	r7, #40	@ 0x28
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	0800aa97 	.word	0x0800aa97
 800983c:	0800ab31 	.word	0x0800ab31
 8009840:	0800acb7 	.word	0x0800acb7

08009844 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b0ba      	sub	sp, #232	@ 0xe8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800986a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800986e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009872:	4013      	ands	r3, r2
 8009874:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009878:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800987c:	2b00      	cmp	r3, #0
 800987e:	d11b      	bne.n	80098b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009884:	f003 0320 	and.w	r3, r3, #32
 8009888:	2b00      	cmp	r3, #0
 800988a:	d015      	beq.n	80098b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800988c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009890:	f003 0320 	and.w	r3, r3, #32
 8009894:	2b00      	cmp	r3, #0
 8009896:	d105      	bne.n	80098a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800989c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d009      	beq.n	80098b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 82e3 	beq.w	8009e74 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	4798      	blx	r3
      }
      return;
 80098b6:	e2dd      	b.n	8009e74 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80098b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f000 8123 	beq.w	8009b08 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80098c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80098c6:	4b8d      	ldr	r3, [pc, #564]	@ (8009afc <HAL_UART_IRQHandler+0x2b8>)
 80098c8:	4013      	ands	r3, r2
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d106      	bne.n	80098dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80098ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80098d2:	4b8b      	ldr	r3, [pc, #556]	@ (8009b00 <HAL_UART_IRQHandler+0x2bc>)
 80098d4:	4013      	ands	r3, r2
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f000 8116 	beq.w	8009b08 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d011      	beq.n	800990c <HAL_UART_IRQHandler+0xc8>
 80098e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00b      	beq.n	800990c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2201      	movs	r2, #1
 80098fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009902:	f043 0201 	orr.w	r2, r3, #1
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800990c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009910:	f003 0302 	and.w	r3, r3, #2
 8009914:	2b00      	cmp	r3, #0
 8009916:	d011      	beq.n	800993c <HAL_UART_IRQHandler+0xf8>
 8009918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00b      	beq.n	800993c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2202      	movs	r2, #2
 800992a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009932:	f043 0204 	orr.w	r2, r3, #4
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800993c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009940:	f003 0304 	and.w	r3, r3, #4
 8009944:	2b00      	cmp	r3, #0
 8009946:	d011      	beq.n	800996c <HAL_UART_IRQHandler+0x128>
 8009948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800994c:	f003 0301 	and.w	r3, r3, #1
 8009950:	2b00      	cmp	r3, #0
 8009952:	d00b      	beq.n	800996c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2204      	movs	r2, #4
 800995a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009962:	f043 0202 	orr.w	r2, r3, #2
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800996c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009970:	f003 0308 	and.w	r3, r3, #8
 8009974:	2b00      	cmp	r3, #0
 8009976:	d017      	beq.n	80099a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800997c:	f003 0320 	and.w	r3, r3, #32
 8009980:	2b00      	cmp	r3, #0
 8009982:	d105      	bne.n	8009990 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009984:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009988:	4b5c      	ldr	r3, [pc, #368]	@ (8009afc <HAL_UART_IRQHandler+0x2b8>)
 800998a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00b      	beq.n	80099a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2208      	movs	r2, #8
 8009996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800999e:	f043 0208 	orr.w	r2, r3, #8
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80099a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d012      	beq.n	80099da <HAL_UART_IRQHandler+0x196>
 80099b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00c      	beq.n	80099da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80099c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099d0:	f043 0220 	orr.w	r2, r3, #32
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f000 8249 	beq.w	8009e78 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80099e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099ea:	f003 0320 	and.w	r3, r3, #32
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d013      	beq.n	8009a1a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80099f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099f6:	f003 0320 	and.w	r3, r3, #32
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d105      	bne.n	8009a0a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80099fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d007      	beq.n	8009a1a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d003      	beq.n	8009a1a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a2e:	2b40      	cmp	r3, #64	@ 0x40
 8009a30:	d005      	beq.n	8009a3e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009a36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d054      	beq.n	8009ae8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 ffc3 	bl	800a9ca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a4e:	2b40      	cmp	r3, #64	@ 0x40
 8009a50:	d146      	bne.n	8009ae0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	3308      	adds	r3, #8
 8009a58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a60:	e853 3f00 	ldrex	r3, [r3]
 8009a64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	3308      	adds	r3, #8
 8009a7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009a7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009a82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009a8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009a8e:	e841 2300 	strex	r3, r2, [r1]
 8009a92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009a96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1d9      	bne.n	8009a52 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d017      	beq.n	8009ad8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aae:	4a15      	ldr	r2, [pc, #84]	@ (8009b04 <HAL_UART_IRQHandler+0x2c0>)
 8009ab0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fc faf1 	bl	80060a0 <HAL_DMA_Abort_IT>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d019      	beq.n	8009af8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ad6:	e00f      	b.n	8009af8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f9ff 	bl	8009edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ade:	e00b      	b.n	8009af8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f9fb 	bl	8009edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ae6:	e007      	b.n	8009af8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f9f7 	bl	8009edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009af6:	e1bf      	b.n	8009e78 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009af8:	bf00      	nop
    return;
 8009afa:	e1bd      	b.n	8009e78 <HAL_UART_IRQHandler+0x634>
 8009afc:	10000001 	.word	0x10000001
 8009b00:	04000120 	.word	0x04000120
 8009b04:	0800ad37 	.word	0x0800ad37

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	f040 8153 	bne.w	8009db8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b16:	f003 0310 	and.w	r3, r3, #16
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f000 814c 	beq.w	8009db8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b24:	f003 0310 	and.w	r3, r3, #16
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f000 8145 	beq.w	8009db8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2210      	movs	r2, #16
 8009b34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b40:	2b40      	cmp	r3, #64	@ 0x40
 8009b42:	f040 80bb 	bne.w	8009cbc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f000 818f 	beq.w	8009e7c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	f080 8187 	bcs.w	8009e7c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 0320 	and.w	r3, r3, #32
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f040 8087 	bne.w	8009c9a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b98:	e853 3f00 	ldrex	r3, [r3]
 8009b9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009bb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009bba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009bc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009bc6:	e841 2300 	strex	r3, r2, [r1]
 8009bca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1da      	bne.n	8009b8c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	3308      	adds	r3, #8
 8009bdc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009be0:	e853 3f00 	ldrex	r3, [r3]
 8009be4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009be6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009be8:	f023 0301 	bic.w	r3, r3, #1
 8009bec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	3308      	adds	r3, #8
 8009bf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009bfa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009bfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009c02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c06:	e841 2300 	strex	r3, r2, [r1]
 8009c0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009c0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1e1      	bne.n	8009bd6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	3308      	adds	r3, #8
 8009c18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c1c:	e853 3f00 	ldrex	r3, [r3]
 8009c20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3308      	adds	r3, #8
 8009c32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009c36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009c38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009c3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c3e:	e841 2300 	strex	r3, r2, [r1]
 8009c42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1e3      	bne.n	8009c12 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2220      	movs	r2, #32
 8009c4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c60:	e853 3f00 	ldrex	r3, [r3]
 8009c64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c68:	f023 0310 	bic.w	r3, r3, #16
 8009c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	461a      	mov	r2, r3
 8009c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c82:	e841 2300 	strex	r3, r2, [r1]
 8009c86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d1e4      	bne.n	8009c58 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7fc f9aa 	bl	8005fee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f003 f917 	bl	800cee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009cba:	e0df      	b.n	8009e7c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	1ad3      	subs	r3, r2, r3
 8009ccc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f000 80d1 	beq.w	8009e80 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009cde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f000 80cc 	beq.w	8009e80 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf0:	e853 3f00 	ldrex	r3, [r3]
 8009cf4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	461a      	mov	r2, r3
 8009d06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009d0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d0c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d12:	e841 2300 	strex	r3, r2, [r1]
 8009d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1e4      	bne.n	8009ce8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	3308      	adds	r3, #8
 8009d24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d28:	e853 3f00 	ldrex	r3, [r3]
 8009d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8009d2e:	6a3b      	ldr	r3, [r7, #32]
 8009d30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d34:	f023 0301 	bic.w	r3, r3, #1
 8009d38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	3308      	adds	r3, #8
 8009d42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009d46:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d4e:	e841 2300 	strex	r3, r2, [r1]
 8009d52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1e1      	bne.n	8009d1e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2220      	movs	r2, #32
 8009d5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	e853 3f00 	ldrex	r3, [r3]
 8009d7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f023 0310 	bic.w	r3, r3, #16
 8009d82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009d90:	61fb      	str	r3, [r7, #28]
 8009d92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d94:	69b9      	ldr	r1, [r7, #24]
 8009d96:	69fa      	ldr	r2, [r7, #28]
 8009d98:	e841 2300 	strex	r3, r2, [r1]
 8009d9c:	617b      	str	r3, [r7, #20]
   return(result);
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1e4      	bne.n	8009d6e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2202      	movs	r2, #2
 8009da8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009daa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f003 f899 	bl	800cee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009db6:	e063      	b.n	8009e80 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00e      	beq.n	8009de2 <HAL_UART_IRQHandler+0x59e>
 8009dc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d008      	beq.n	8009de2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009dd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 ffec 	bl	800adb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009de0:	e051      	b.n	8009e86 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d014      	beq.n	8009e18 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d105      	bne.n	8009e06 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d008      	beq.n	8009e18 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d03a      	beq.n	8009e84 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	4798      	blx	r3
    }
    return;
 8009e16:	e035      	b.n	8009e84 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d009      	beq.n	8009e38 <HAL_UART_IRQHandler+0x5f4>
 8009e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d003      	beq.n	8009e38 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 ff96 	bl	800ad62 <UART_EndTransmit_IT>
    return;
 8009e36:	e026      	b.n	8009e86 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d009      	beq.n	8009e58 <HAL_UART_IRQHandler+0x614>
 8009e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e48:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d003      	beq.n	8009e58 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 ffc5 	bl	800ade0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e56:	e016      	b.n	8009e86 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d010      	beq.n	8009e86 <HAL_UART_IRQHandler+0x642>
 8009e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	da0c      	bge.n	8009e86 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 ffad 	bl	800adcc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e72:	e008      	b.n	8009e86 <HAL_UART_IRQHandler+0x642>
      return;
 8009e74:	bf00      	nop
 8009e76:	e006      	b.n	8009e86 <HAL_UART_IRQHandler+0x642>
    return;
 8009e78:	bf00      	nop
 8009e7a:	e004      	b.n	8009e86 <HAL_UART_IRQHandler+0x642>
      return;
 8009e7c:	bf00      	nop
 8009e7e:	e002      	b.n	8009e86 <HAL_UART_IRQHandler+0x642>
      return;
 8009e80:	bf00      	nop
 8009e82:	e000      	b.n	8009e86 <HAL_UART_IRQHandler+0x642>
    return;
 8009e84:	bf00      	nop
  }
}
 8009e86:	37e8      	adds	r7, #232	@ 0xe8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ea8:	bf00      	nop
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009ebc:	bf00      	nop
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ef4:	b08c      	sub	sp, #48	@ 0x30
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	689a      	ldr	r2, [r3, #8]
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	431a      	orrs	r2, r3
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	431a      	orrs	r2, r3
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	69db      	ldr	r3, [r3, #28]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	4bab      	ldr	r3, [pc, #684]	@ (800a1cc <UART_SetConfig+0x2dc>)
 8009f20:	4013      	ands	r3, r2
 8009f22:	697a      	ldr	r2, [r7, #20]
 8009f24:	6812      	ldr	r2, [r2, #0]
 8009f26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f28:	430b      	orrs	r3, r1
 8009f2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	68da      	ldr	r2, [r3, #12]
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4aa0      	ldr	r2, [pc, #640]	@ (800a1d0 <UART_SetConfig+0x2e0>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d004      	beq.n	8009f5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	6a1b      	ldr	r3, [r3, #32]
 8009f56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009f66:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009f6a:	697a      	ldr	r2, [r7, #20]
 8009f6c:	6812      	ldr	r2, [r2, #0]
 8009f6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f70:	430b      	orrs	r3, r1
 8009f72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f7a:	f023 010f 	bic.w	r1, r3, #15
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	430a      	orrs	r2, r1
 8009f88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a91      	ldr	r2, [pc, #580]	@ (800a1d4 <UART_SetConfig+0x2e4>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d125      	bne.n	8009fe0 <UART_SetConfig+0xf0>
 8009f94:	4b90      	ldr	r3, [pc, #576]	@ (800a1d8 <UART_SetConfig+0x2e8>)
 8009f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f9a:	f003 0303 	and.w	r3, r3, #3
 8009f9e:	2b03      	cmp	r3, #3
 8009fa0:	d81a      	bhi.n	8009fd8 <UART_SetConfig+0xe8>
 8009fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8009fa8 <UART_SetConfig+0xb8>)
 8009fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa8:	08009fb9 	.word	0x08009fb9
 8009fac:	08009fc9 	.word	0x08009fc9
 8009fb0:	08009fc1 	.word	0x08009fc1
 8009fb4:	08009fd1 	.word	0x08009fd1
 8009fb8:	2301      	movs	r3, #1
 8009fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fbe:	e0d6      	b.n	800a16e <UART_SetConfig+0x27e>
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fc6:	e0d2      	b.n	800a16e <UART_SetConfig+0x27e>
 8009fc8:	2304      	movs	r3, #4
 8009fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fce:	e0ce      	b.n	800a16e <UART_SetConfig+0x27e>
 8009fd0:	2308      	movs	r3, #8
 8009fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fd6:	e0ca      	b.n	800a16e <UART_SetConfig+0x27e>
 8009fd8:	2310      	movs	r3, #16
 8009fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fde:	e0c6      	b.n	800a16e <UART_SetConfig+0x27e>
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a7d      	ldr	r2, [pc, #500]	@ (800a1dc <UART_SetConfig+0x2ec>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d138      	bne.n	800a05c <UART_SetConfig+0x16c>
 8009fea:	4b7b      	ldr	r3, [pc, #492]	@ (800a1d8 <UART_SetConfig+0x2e8>)
 8009fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ff0:	f003 030c 	and.w	r3, r3, #12
 8009ff4:	2b0c      	cmp	r3, #12
 8009ff6:	d82d      	bhi.n	800a054 <UART_SetConfig+0x164>
 8009ff8:	a201      	add	r2, pc, #4	@ (adr r2, 800a000 <UART_SetConfig+0x110>)
 8009ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffe:	bf00      	nop
 800a000:	0800a035 	.word	0x0800a035
 800a004:	0800a055 	.word	0x0800a055
 800a008:	0800a055 	.word	0x0800a055
 800a00c:	0800a055 	.word	0x0800a055
 800a010:	0800a045 	.word	0x0800a045
 800a014:	0800a055 	.word	0x0800a055
 800a018:	0800a055 	.word	0x0800a055
 800a01c:	0800a055 	.word	0x0800a055
 800a020:	0800a03d 	.word	0x0800a03d
 800a024:	0800a055 	.word	0x0800a055
 800a028:	0800a055 	.word	0x0800a055
 800a02c:	0800a055 	.word	0x0800a055
 800a030:	0800a04d 	.word	0x0800a04d
 800a034:	2300      	movs	r3, #0
 800a036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a03a:	e098      	b.n	800a16e <UART_SetConfig+0x27e>
 800a03c:	2302      	movs	r3, #2
 800a03e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a042:	e094      	b.n	800a16e <UART_SetConfig+0x27e>
 800a044:	2304      	movs	r3, #4
 800a046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a04a:	e090      	b.n	800a16e <UART_SetConfig+0x27e>
 800a04c:	2308      	movs	r3, #8
 800a04e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a052:	e08c      	b.n	800a16e <UART_SetConfig+0x27e>
 800a054:	2310      	movs	r3, #16
 800a056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a05a:	e088      	b.n	800a16e <UART_SetConfig+0x27e>
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a5f      	ldr	r2, [pc, #380]	@ (800a1e0 <UART_SetConfig+0x2f0>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d125      	bne.n	800a0b2 <UART_SetConfig+0x1c2>
 800a066:	4b5c      	ldr	r3, [pc, #368]	@ (800a1d8 <UART_SetConfig+0x2e8>)
 800a068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a06c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a070:	2b30      	cmp	r3, #48	@ 0x30
 800a072:	d016      	beq.n	800a0a2 <UART_SetConfig+0x1b2>
 800a074:	2b30      	cmp	r3, #48	@ 0x30
 800a076:	d818      	bhi.n	800a0aa <UART_SetConfig+0x1ba>
 800a078:	2b20      	cmp	r3, #32
 800a07a:	d00a      	beq.n	800a092 <UART_SetConfig+0x1a2>
 800a07c:	2b20      	cmp	r3, #32
 800a07e:	d814      	bhi.n	800a0aa <UART_SetConfig+0x1ba>
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <UART_SetConfig+0x19a>
 800a084:	2b10      	cmp	r3, #16
 800a086:	d008      	beq.n	800a09a <UART_SetConfig+0x1aa>
 800a088:	e00f      	b.n	800a0aa <UART_SetConfig+0x1ba>
 800a08a:	2300      	movs	r3, #0
 800a08c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a090:	e06d      	b.n	800a16e <UART_SetConfig+0x27e>
 800a092:	2302      	movs	r3, #2
 800a094:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a098:	e069      	b.n	800a16e <UART_SetConfig+0x27e>
 800a09a:	2304      	movs	r3, #4
 800a09c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0a0:	e065      	b.n	800a16e <UART_SetConfig+0x27e>
 800a0a2:	2308      	movs	r3, #8
 800a0a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0a8:	e061      	b.n	800a16e <UART_SetConfig+0x27e>
 800a0aa:	2310      	movs	r3, #16
 800a0ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0b0:	e05d      	b.n	800a16e <UART_SetConfig+0x27e>
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a4b      	ldr	r2, [pc, #300]	@ (800a1e4 <UART_SetConfig+0x2f4>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d125      	bne.n	800a108 <UART_SetConfig+0x218>
 800a0bc:	4b46      	ldr	r3, [pc, #280]	@ (800a1d8 <UART_SetConfig+0x2e8>)
 800a0be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a0c6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a0c8:	d016      	beq.n	800a0f8 <UART_SetConfig+0x208>
 800a0ca:	2bc0      	cmp	r3, #192	@ 0xc0
 800a0cc:	d818      	bhi.n	800a100 <UART_SetConfig+0x210>
 800a0ce:	2b80      	cmp	r3, #128	@ 0x80
 800a0d0:	d00a      	beq.n	800a0e8 <UART_SetConfig+0x1f8>
 800a0d2:	2b80      	cmp	r3, #128	@ 0x80
 800a0d4:	d814      	bhi.n	800a100 <UART_SetConfig+0x210>
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d002      	beq.n	800a0e0 <UART_SetConfig+0x1f0>
 800a0da:	2b40      	cmp	r3, #64	@ 0x40
 800a0dc:	d008      	beq.n	800a0f0 <UART_SetConfig+0x200>
 800a0de:	e00f      	b.n	800a100 <UART_SetConfig+0x210>
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0e6:	e042      	b.n	800a16e <UART_SetConfig+0x27e>
 800a0e8:	2302      	movs	r3, #2
 800a0ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0ee:	e03e      	b.n	800a16e <UART_SetConfig+0x27e>
 800a0f0:	2304      	movs	r3, #4
 800a0f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0f6:	e03a      	b.n	800a16e <UART_SetConfig+0x27e>
 800a0f8:	2308      	movs	r3, #8
 800a0fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0fe:	e036      	b.n	800a16e <UART_SetConfig+0x27e>
 800a100:	2310      	movs	r3, #16
 800a102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a106:	e032      	b.n	800a16e <UART_SetConfig+0x27e>
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a30      	ldr	r2, [pc, #192]	@ (800a1d0 <UART_SetConfig+0x2e0>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d12a      	bne.n	800a168 <UART_SetConfig+0x278>
 800a112:	4b31      	ldr	r3, [pc, #196]	@ (800a1d8 <UART_SetConfig+0x2e8>)
 800a114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a118:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a11c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a120:	d01a      	beq.n	800a158 <UART_SetConfig+0x268>
 800a122:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a126:	d81b      	bhi.n	800a160 <UART_SetConfig+0x270>
 800a128:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a12c:	d00c      	beq.n	800a148 <UART_SetConfig+0x258>
 800a12e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a132:	d815      	bhi.n	800a160 <UART_SetConfig+0x270>
 800a134:	2b00      	cmp	r3, #0
 800a136:	d003      	beq.n	800a140 <UART_SetConfig+0x250>
 800a138:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a13c:	d008      	beq.n	800a150 <UART_SetConfig+0x260>
 800a13e:	e00f      	b.n	800a160 <UART_SetConfig+0x270>
 800a140:	2300      	movs	r3, #0
 800a142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a146:	e012      	b.n	800a16e <UART_SetConfig+0x27e>
 800a148:	2302      	movs	r3, #2
 800a14a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a14e:	e00e      	b.n	800a16e <UART_SetConfig+0x27e>
 800a150:	2304      	movs	r3, #4
 800a152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a156:	e00a      	b.n	800a16e <UART_SetConfig+0x27e>
 800a158:	2308      	movs	r3, #8
 800a15a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a15e:	e006      	b.n	800a16e <UART_SetConfig+0x27e>
 800a160:	2310      	movs	r3, #16
 800a162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a166:	e002      	b.n	800a16e <UART_SetConfig+0x27e>
 800a168:	2310      	movs	r3, #16
 800a16a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a17      	ldr	r2, [pc, #92]	@ (800a1d0 <UART_SetConfig+0x2e0>)
 800a174:	4293      	cmp	r3, r2
 800a176:	f040 80a8 	bne.w	800a2ca <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a17a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a17e:	2b08      	cmp	r3, #8
 800a180:	d834      	bhi.n	800a1ec <UART_SetConfig+0x2fc>
 800a182:	a201      	add	r2, pc, #4	@ (adr r2, 800a188 <UART_SetConfig+0x298>)
 800a184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a188:	0800a1ad 	.word	0x0800a1ad
 800a18c:	0800a1ed 	.word	0x0800a1ed
 800a190:	0800a1b5 	.word	0x0800a1b5
 800a194:	0800a1ed 	.word	0x0800a1ed
 800a198:	0800a1bb 	.word	0x0800a1bb
 800a19c:	0800a1ed 	.word	0x0800a1ed
 800a1a0:	0800a1ed 	.word	0x0800a1ed
 800a1a4:	0800a1ed 	.word	0x0800a1ed
 800a1a8:	0800a1c3 	.word	0x0800a1c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1ac:	f7fd f850 	bl	8007250 <HAL_RCC_GetPCLK1Freq>
 800a1b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a1b2:	e021      	b.n	800a1f8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e8 <UART_SetConfig+0x2f8>)
 800a1b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a1b8:	e01e      	b.n	800a1f8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1ba:	f7fc ffdb 	bl	8007174 <HAL_RCC_GetSysClockFreq>
 800a1be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a1c0:	e01a      	b.n	800a1f8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a1c8:	e016      	b.n	800a1f8 <UART_SetConfig+0x308>
 800a1ca:	bf00      	nop
 800a1cc:	cfff69f3 	.word	0xcfff69f3
 800a1d0:	40008000 	.word	0x40008000
 800a1d4:	40013800 	.word	0x40013800
 800a1d8:	40021000 	.word	0x40021000
 800a1dc:	40004400 	.word	0x40004400
 800a1e0:	40004800 	.word	0x40004800
 800a1e4:	40004c00 	.word	0x40004c00
 800a1e8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a1f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f000 812a 	beq.w	800a454 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a204:	4a9e      	ldr	r2, [pc, #632]	@ (800a480 <UART_SetConfig+0x590>)
 800a206:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a20a:	461a      	mov	r2, r3
 800a20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a20e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a212:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	685a      	ldr	r2, [r3, #4]
 800a218:	4613      	mov	r3, r2
 800a21a:	005b      	lsls	r3, r3, #1
 800a21c:	4413      	add	r3, r2
 800a21e:	69ba      	ldr	r2, [r7, #24]
 800a220:	429a      	cmp	r2, r3
 800a222:	d305      	bcc.n	800a230 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a22a:	69ba      	ldr	r2, [r7, #24]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d903      	bls.n	800a238 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a236:	e10d      	b.n	800a454 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a23a:	2200      	movs	r2, #0
 800a23c:	60bb      	str	r3, [r7, #8]
 800a23e:	60fa      	str	r2, [r7, #12]
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a244:	4a8e      	ldr	r2, [pc, #568]	@ (800a480 <UART_SetConfig+0x590>)
 800a246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	2200      	movs	r2, #0
 800a24e:	603b      	str	r3, [r7, #0]
 800a250:	607a      	str	r2, [r7, #4]
 800a252:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a256:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a25a:	f7f6 fd3d 	bl	8000cd8 <__aeabi_uldivmod>
 800a25e:	4602      	mov	r2, r0
 800a260:	460b      	mov	r3, r1
 800a262:	4610      	mov	r0, r2
 800a264:	4619      	mov	r1, r3
 800a266:	f04f 0200 	mov.w	r2, #0
 800a26a:	f04f 0300 	mov.w	r3, #0
 800a26e:	020b      	lsls	r3, r1, #8
 800a270:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a274:	0202      	lsls	r2, r0, #8
 800a276:	6979      	ldr	r1, [r7, #20]
 800a278:	6849      	ldr	r1, [r1, #4]
 800a27a:	0849      	lsrs	r1, r1, #1
 800a27c:	2000      	movs	r0, #0
 800a27e:	460c      	mov	r4, r1
 800a280:	4605      	mov	r5, r0
 800a282:	eb12 0804 	adds.w	r8, r2, r4
 800a286:	eb43 0905 	adc.w	r9, r3, r5
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	469a      	mov	sl, r3
 800a292:	4693      	mov	fp, r2
 800a294:	4652      	mov	r2, sl
 800a296:	465b      	mov	r3, fp
 800a298:	4640      	mov	r0, r8
 800a29a:	4649      	mov	r1, r9
 800a29c:	f7f6 fd1c 	bl	8000cd8 <__aeabi_uldivmod>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2a8:	6a3b      	ldr	r3, [r7, #32]
 800a2aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2ae:	d308      	bcc.n	800a2c2 <UART_SetConfig+0x3d2>
 800a2b0:	6a3b      	ldr	r3, [r7, #32]
 800a2b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2b6:	d204      	bcs.n	800a2c2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6a3a      	ldr	r2, [r7, #32]
 800a2be:	60da      	str	r2, [r3, #12]
 800a2c0:	e0c8      	b.n	800a454 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2c8:	e0c4      	b.n	800a454 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	69db      	ldr	r3, [r3, #28]
 800a2ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2d2:	d167      	bne.n	800a3a4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a2d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a2d8:	2b08      	cmp	r3, #8
 800a2da:	d828      	bhi.n	800a32e <UART_SetConfig+0x43e>
 800a2dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a2e4 <UART_SetConfig+0x3f4>)
 800a2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e2:	bf00      	nop
 800a2e4:	0800a309 	.word	0x0800a309
 800a2e8:	0800a311 	.word	0x0800a311
 800a2ec:	0800a319 	.word	0x0800a319
 800a2f0:	0800a32f 	.word	0x0800a32f
 800a2f4:	0800a31f 	.word	0x0800a31f
 800a2f8:	0800a32f 	.word	0x0800a32f
 800a2fc:	0800a32f 	.word	0x0800a32f
 800a300:	0800a32f 	.word	0x0800a32f
 800a304:	0800a327 	.word	0x0800a327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a308:	f7fc ffa2 	bl	8007250 <HAL_RCC_GetPCLK1Freq>
 800a30c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a30e:	e014      	b.n	800a33a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a310:	f7fc ffb4 	bl	800727c <HAL_RCC_GetPCLK2Freq>
 800a314:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a316:	e010      	b.n	800a33a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a318:	4b5a      	ldr	r3, [pc, #360]	@ (800a484 <UART_SetConfig+0x594>)
 800a31a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a31c:	e00d      	b.n	800a33a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a31e:	f7fc ff29 	bl	8007174 <HAL_RCC_GetSysClockFreq>
 800a322:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a324:	e009      	b.n	800a33a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a32a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a32c:	e005      	b.n	800a33a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800a32e:	2300      	movs	r3, #0
 800a330:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a338:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f000 8089 	beq.w	800a454 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a346:	4a4e      	ldr	r2, [pc, #312]	@ (800a480 <UART_SetConfig+0x590>)
 800a348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a34c:	461a      	mov	r2, r3
 800a34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a350:	fbb3 f3f2 	udiv	r3, r3, r2
 800a354:	005a      	lsls	r2, r3, #1
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	085b      	lsrs	r3, r3, #1
 800a35c:	441a      	add	r2, r3
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	fbb2 f3f3 	udiv	r3, r2, r3
 800a366:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a368:	6a3b      	ldr	r3, [r7, #32]
 800a36a:	2b0f      	cmp	r3, #15
 800a36c:	d916      	bls.n	800a39c <UART_SetConfig+0x4ac>
 800a36e:	6a3b      	ldr	r3, [r7, #32]
 800a370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a374:	d212      	bcs.n	800a39c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a376:	6a3b      	ldr	r3, [r7, #32]
 800a378:	b29b      	uxth	r3, r3
 800a37a:	f023 030f 	bic.w	r3, r3, #15
 800a37e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a380:	6a3b      	ldr	r3, [r7, #32]
 800a382:	085b      	lsrs	r3, r3, #1
 800a384:	b29b      	uxth	r3, r3
 800a386:	f003 0307 	and.w	r3, r3, #7
 800a38a:	b29a      	uxth	r2, r3
 800a38c:	8bfb      	ldrh	r3, [r7, #30]
 800a38e:	4313      	orrs	r3, r2
 800a390:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	8bfa      	ldrh	r2, [r7, #30]
 800a398:	60da      	str	r2, [r3, #12]
 800a39a:	e05b      	b.n	800a454 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a3a2:	e057      	b.n	800a454 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a3a8:	2b08      	cmp	r3, #8
 800a3aa:	d828      	bhi.n	800a3fe <UART_SetConfig+0x50e>
 800a3ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a3b4 <UART_SetConfig+0x4c4>)
 800a3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b2:	bf00      	nop
 800a3b4:	0800a3d9 	.word	0x0800a3d9
 800a3b8:	0800a3e1 	.word	0x0800a3e1
 800a3bc:	0800a3e9 	.word	0x0800a3e9
 800a3c0:	0800a3ff 	.word	0x0800a3ff
 800a3c4:	0800a3ef 	.word	0x0800a3ef
 800a3c8:	0800a3ff 	.word	0x0800a3ff
 800a3cc:	0800a3ff 	.word	0x0800a3ff
 800a3d0:	0800a3ff 	.word	0x0800a3ff
 800a3d4:	0800a3f7 	.word	0x0800a3f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3d8:	f7fc ff3a 	bl	8007250 <HAL_RCC_GetPCLK1Freq>
 800a3dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3de:	e014      	b.n	800a40a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3e0:	f7fc ff4c 	bl	800727c <HAL_RCC_GetPCLK2Freq>
 800a3e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3e6:	e010      	b.n	800a40a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3e8:	4b26      	ldr	r3, [pc, #152]	@ (800a484 <UART_SetConfig+0x594>)
 800a3ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3ec:	e00d      	b.n	800a40a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3ee:	f7fc fec1 	bl	8007174 <HAL_RCC_GetSysClockFreq>
 800a3f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3f4:	e009      	b.n	800a40a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3fc:	e005      	b.n	800a40a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a3fe:	2300      	movs	r3, #0
 800a400:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a408:	bf00      	nop
    }

    if (pclk != 0U)
 800a40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d021      	beq.n	800a454 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a414:	4a1a      	ldr	r2, [pc, #104]	@ (800a480 <UART_SetConfig+0x590>)
 800a416:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a41a:	461a      	mov	r2, r3
 800a41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	085b      	lsrs	r3, r3, #1
 800a428:	441a      	add	r2, r3
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a432:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a434:	6a3b      	ldr	r3, [r7, #32]
 800a436:	2b0f      	cmp	r3, #15
 800a438:	d909      	bls.n	800a44e <UART_SetConfig+0x55e>
 800a43a:	6a3b      	ldr	r3, [r7, #32]
 800a43c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a440:	d205      	bcs.n	800a44e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a442:	6a3b      	ldr	r3, [r7, #32]
 800a444:	b29a      	uxth	r2, r3
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	60da      	str	r2, [r3, #12]
 800a44c:	e002      	b.n	800a454 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	2201      	movs	r2, #1
 800a458:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	2201      	movs	r2, #1
 800a460:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	2200      	movs	r2, #0
 800a468:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	2200      	movs	r2, #0
 800a46e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a470:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a474:	4618      	mov	r0, r3
 800a476:	3730      	adds	r7, #48	@ 0x30
 800a478:	46bd      	mov	sp, r7
 800a47a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a47e:	bf00      	nop
 800a480:	08014738 	.word	0x08014738
 800a484:	00f42400 	.word	0x00f42400

0800a488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a494:	f003 0308 	and.w	r3, r3, #8
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00a      	beq.n	800a4b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4b6:	f003 0301 	and.w	r3, r3, #1
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00a      	beq.n	800a4d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	430a      	orrs	r2, r1
 800a4d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4d8:	f003 0302 	and.w	r3, r3, #2
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00a      	beq.n	800a4f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	430a      	orrs	r2, r1
 800a4f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4fa:	f003 0304 	and.w	r3, r3, #4
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00a      	beq.n	800a518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	430a      	orrs	r2, r1
 800a516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a51c:	f003 0310 	and.w	r3, r3, #16
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00a      	beq.n	800a53a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	430a      	orrs	r2, r1
 800a538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a53e:	f003 0320 	and.w	r3, r3, #32
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00a      	beq.n	800a55c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	430a      	orrs	r2, r1
 800a55a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a564:	2b00      	cmp	r3, #0
 800a566:	d01a      	beq.n	800a59e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	430a      	orrs	r2, r1
 800a57c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a582:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a586:	d10a      	bne.n	800a59e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	430a      	orrs	r2, r1
 800a59c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00a      	beq.n	800a5c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	605a      	str	r2, [r3, #4]
  }
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b098      	sub	sp, #96	@ 0x60
 800a5d0:	af02      	add	r7, sp, #8
 800a5d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5dc:	f7f8 f9de 	bl	800299c <HAL_GetTick>
 800a5e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 0308 	and.w	r3, r3, #8
 800a5ec:	2b08      	cmp	r3, #8
 800a5ee:	d12f      	bne.n	800a650 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f88e 	bl	800a720 <UART_WaitOnFlagUntilTimeout>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d022      	beq.n	800a650 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a612:	e853 3f00 	ldrex	r3, [r3]
 800a616:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a61a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a61e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	461a      	mov	r2, r3
 800a626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a628:	647b      	str	r3, [r7, #68]	@ 0x44
 800a62a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a62c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a62e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a630:	e841 2300 	strex	r3, r2, [r1]
 800a634:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d1e6      	bne.n	800a60a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2220      	movs	r2, #32
 800a640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a64c:	2303      	movs	r3, #3
 800a64e:	e063      	b.n	800a718 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 0304 	and.w	r3, r3, #4
 800a65a:	2b04      	cmp	r3, #4
 800a65c:	d149      	bne.n	800a6f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a65e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a666:	2200      	movs	r2, #0
 800a668:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f857 	bl	800a720 <UART_WaitOnFlagUntilTimeout>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d03c      	beq.n	800a6f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a680:	e853 3f00 	ldrex	r3, [r3]
 800a684:	623b      	str	r3, [r7, #32]
   return(result);
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a68c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	461a      	mov	r2, r3
 800a694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a696:	633b      	str	r3, [r7, #48]	@ 0x30
 800a698:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a69c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a69e:	e841 2300 	strex	r3, r2, [r1]
 800a6a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1e6      	bne.n	800a678 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	3308      	adds	r3, #8
 800a6b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	e853 3f00 	ldrex	r3, [r3]
 800a6b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f023 0301 	bic.w	r3, r3, #1
 800a6c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	3308      	adds	r3, #8
 800a6c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6ca:	61fa      	str	r2, [r7, #28]
 800a6cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ce:	69b9      	ldr	r1, [r7, #24]
 800a6d0:	69fa      	ldr	r2, [r7, #28]
 800a6d2:	e841 2300 	strex	r3, r2, [r1]
 800a6d6:	617b      	str	r3, [r7, #20]
   return(result);
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d1e5      	bne.n	800a6aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2220      	movs	r2, #32
 800a6e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e012      	b.n	800a718 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2220      	movs	r2, #32
 800a6f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2220      	movs	r2, #32
 800a6fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3758      	adds	r7, #88	@ 0x58
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	603b      	str	r3, [r7, #0]
 800a72c:	4613      	mov	r3, r2
 800a72e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a730:	e04f      	b.n	800a7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a738:	d04b      	beq.n	800a7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a73a:	f7f8 f92f 	bl	800299c <HAL_GetTick>
 800a73e:	4602      	mov	r2, r0
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	69ba      	ldr	r2, [r7, #24]
 800a746:	429a      	cmp	r2, r3
 800a748:	d302      	bcc.n	800a750 <UART_WaitOnFlagUntilTimeout+0x30>
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d101      	bne.n	800a754 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a750:	2303      	movs	r3, #3
 800a752:	e04e      	b.n	800a7f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 0304 	and.w	r3, r3, #4
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d037      	beq.n	800a7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	2b80      	cmp	r3, #128	@ 0x80
 800a766:	d034      	beq.n	800a7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	2b40      	cmp	r3, #64	@ 0x40
 800a76c:	d031      	beq.n	800a7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	69db      	ldr	r3, [r3, #28]
 800a774:	f003 0308 	and.w	r3, r3, #8
 800a778:	2b08      	cmp	r3, #8
 800a77a:	d110      	bne.n	800a79e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2208      	movs	r2, #8
 800a782:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f000 f920 	bl	800a9ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2208      	movs	r2, #8
 800a78e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e029      	b.n	800a7f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	69db      	ldr	r3, [r3, #28]
 800a7a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a7a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7ac:	d111      	bne.n	800a7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a7b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f000 f906 	bl	800a9ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2220      	movs	r2, #32
 800a7c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e00f      	b.n	800a7f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	69da      	ldr	r2, [r3, #28]
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	4013      	ands	r3, r2
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	bf0c      	ite	eq
 800a7e2:	2301      	moveq	r3, #1
 800a7e4:	2300      	movne	r3, #0
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	79fb      	ldrb	r3, [r7, #7]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d0a0      	beq.n	800a732 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
	...

0800a7fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b096      	sub	sp, #88	@ 0x58
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	4613      	mov	r3, r2
 800a808:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	88fa      	ldrh	r2, [r7, #6]
 800a814:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2222      	movs	r2, #34	@ 0x22
 800a824:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d02d      	beq.n	800a88e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a838:	4a40      	ldr	r2, [pc, #256]	@ (800a93c <UART_Start_Receive_DMA+0x140>)
 800a83a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a842:	4a3f      	ldr	r2, [pc, #252]	@ (800a940 <UART_Start_Receive_DMA+0x144>)
 800a844:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a84c:	4a3d      	ldr	r2, [pc, #244]	@ (800a944 <UART_Start_Receive_DMA+0x148>)
 800a84e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a856:	2200      	movs	r2, #0
 800a858:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	3324      	adds	r3, #36	@ 0x24
 800a866:	4619      	mov	r1, r3
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a86c:	461a      	mov	r2, r3
 800a86e:	88fb      	ldrh	r3, [r7, #6]
 800a870:	f7fb fb42 	bl	8005ef8 <HAL_DMA_Start_IT>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d009      	beq.n	800a88e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2210      	movs	r2, #16
 800a87e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2220      	movs	r2, #32
 800a886:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e051      	b.n	800a932 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d018      	beq.n	800a8c8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a89c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a89e:	e853 3f00 	ldrex	r3, [r3]
 800a8a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a8aa:	657b      	str	r3, [r7, #84]	@ 0x54
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8b6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a8ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8bc:	e841 2300 	strex	r3, r2, [r1]
 800a8c0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a8c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d1e6      	bne.n	800a896 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	3308      	adds	r3, #8
 800a8ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d2:	e853 3f00 	ldrex	r3, [r3]
 800a8d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8da:	f043 0301 	orr.w	r3, r3, #1
 800a8de:	653b      	str	r3, [r7, #80]	@ 0x50
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	3308      	adds	r3, #8
 800a8e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a8e8:	637a      	str	r2, [r7, #52]	@ 0x34
 800a8ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a8ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8f0:	e841 2300 	strex	r3, r2, [r1]
 800a8f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d1e5      	bne.n	800a8c8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	3308      	adds	r3, #8
 800a902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	e853 3f00 	ldrex	r3, [r3]
 800a90a:	613b      	str	r3, [r7, #16]
   return(result);
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3308      	adds	r3, #8
 800a91a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a91c:	623a      	str	r2, [r7, #32]
 800a91e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a920:	69f9      	ldr	r1, [r7, #28]
 800a922:	6a3a      	ldr	r2, [r7, #32]
 800a924:	e841 2300 	strex	r3, r2, [r1]
 800a928:	61bb      	str	r3, [r7, #24]
   return(result);
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d1e5      	bne.n	800a8fc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3758      	adds	r7, #88	@ 0x58
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	0800ab4d 	.word	0x0800ab4d
 800a940:	0800ac79 	.word	0x0800ac79
 800a944:	0800acb7 	.word	0x0800acb7

0800a948 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a948:	b480      	push	{r7}
 800a94a:	b08f      	sub	sp, #60	@ 0x3c
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a956:	6a3b      	ldr	r3, [r7, #32]
 800a958:	e853 3f00 	ldrex	r3, [r3]
 800a95c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a964:	637b      	str	r3, [r7, #52]	@ 0x34
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	461a      	mov	r2, r3
 800a96c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a96e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a970:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a972:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a974:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a976:	e841 2300 	strex	r3, r2, [r1]
 800a97a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d1e6      	bne.n	800a950 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	3308      	adds	r3, #8
 800a988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	e853 3f00 	ldrex	r3, [r3]
 800a990:	60bb      	str	r3, [r7, #8]
   return(result);
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a998:	633b      	str	r3, [r7, #48]	@ 0x30
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	3308      	adds	r3, #8
 800a9a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9a2:	61ba      	str	r2, [r7, #24]
 800a9a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a6:	6979      	ldr	r1, [r7, #20]
 800a9a8:	69ba      	ldr	r2, [r7, #24]
 800a9aa:	e841 2300 	strex	r3, r2, [r1]
 800a9ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1e5      	bne.n	800a982 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2220      	movs	r2, #32
 800a9ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a9be:	bf00      	nop
 800a9c0:	373c      	adds	r7, #60	@ 0x3c
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b095      	sub	sp, #84	@ 0x54
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9da:	e853 3f00 	ldrex	r3, [r3]
 800a9de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a9f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a9f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a9f8:	e841 2300 	strex	r3, r2, [r1]
 800a9fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d1e6      	bne.n	800a9d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	3308      	adds	r3, #8
 800aa0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	e853 3f00 	ldrex	r3, [r3]
 800aa12:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa1a:	f023 0301 	bic.w	r3, r3, #1
 800aa1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	3308      	adds	r3, #8
 800aa26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aa2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa30:	e841 2300 	strex	r3, r2, [r1]
 800aa34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1e3      	bne.n	800aa04 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d118      	bne.n	800aa76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	e853 3f00 	ldrex	r3, [r3]
 800aa50:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	f023 0310 	bic.w	r3, r3, #16
 800aa58:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	461a      	mov	r2, r3
 800aa60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa62:	61bb      	str	r3, [r7, #24]
 800aa64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa66:	6979      	ldr	r1, [r7, #20]
 800aa68:	69ba      	ldr	r2, [r7, #24]
 800aa6a:	e841 2300 	strex	r3, r2, [r1]
 800aa6e:	613b      	str	r3, [r7, #16]
   return(result);
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d1e6      	bne.n	800aa44 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2220      	movs	r2, #32
 800aa7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aa8a:	bf00      	nop
 800aa8c:	3754      	adds	r7, #84	@ 0x54
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b090      	sub	sp, #64	@ 0x40
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaa2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 0320 	and.w	r3, r3, #32
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d137      	bne.n	800ab22 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800aab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aab4:	2200      	movs	r2, #0
 800aab6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aaba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3308      	adds	r3, #8
 800aac0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac4:	e853 3f00 	ldrex	r3, [r3]
 800aac8:	623b      	str	r3, [r7, #32]
   return(result);
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aad0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3308      	adds	r3, #8
 800aad8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aada:	633a      	str	r2, [r7, #48]	@ 0x30
 800aadc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aade:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aae2:	e841 2300 	strex	r3, r2, [r1]
 800aae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d1e5      	bne.n	800aaba <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aaee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	e853 3f00 	ldrex	r3, [r3]
 800aafa:	60fb      	str	r3, [r7, #12]
   return(result);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab02:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	461a      	mov	r2, r3
 800ab0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab0c:	61fb      	str	r3, [r7, #28]
 800ab0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab10:	69b9      	ldr	r1, [r7, #24]
 800ab12:	69fa      	ldr	r2, [r7, #28]
 800ab14:	e841 2300 	strex	r3, r2, [r1]
 800ab18:	617b      	str	r3, [r7, #20]
   return(result);
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1e6      	bne.n	800aaee <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab20:	e002      	b.n	800ab28 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ab22:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ab24:	f7ff f9b2 	bl	8009e8c <HAL_UART_TxCpltCallback>
}
 800ab28:	bf00      	nop
 800ab2a:	3740      	adds	r7, #64	@ 0x40
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab3c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f7ff f9ae 	bl	8009ea0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab44:	bf00      	nop
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b09c      	sub	sp, #112	@ 0x70
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab58:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 0320 	and.w	r3, r3, #32
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d171      	bne.n	800ac4c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ab68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab78:	e853 3f00 	ldrex	r3, [r3]
 800ab7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ab7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab84:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ab94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab96:	e841 2300 	strex	r3, r2, [r1]
 800ab9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ab9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d1e6      	bne.n	800ab70 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aba2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	3308      	adds	r3, #8
 800aba8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abac:	e853 3f00 	ldrex	r3, [r3]
 800abb0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800abb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abb4:	f023 0301 	bic.w	r3, r3, #1
 800abb8:	667b      	str	r3, [r7, #100]	@ 0x64
 800abba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	3308      	adds	r3, #8
 800abc0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800abc2:	647a      	str	r2, [r7, #68]	@ 0x44
 800abc4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800abc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abca:	e841 2300 	strex	r3, r2, [r1]
 800abce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800abd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d1e5      	bne.n	800aba2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	3308      	adds	r3, #8
 800abdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe0:	e853 3f00 	ldrex	r3, [r3]
 800abe4:	623b      	str	r3, [r7, #32]
   return(result);
 800abe6:	6a3b      	ldr	r3, [r7, #32]
 800abe8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abec:	663b      	str	r3, [r7, #96]	@ 0x60
 800abee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	3308      	adds	r3, #8
 800abf4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800abf6:	633a      	str	r2, [r7, #48]	@ 0x30
 800abf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abfe:	e841 2300 	strex	r3, r2, [r1]
 800ac02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1e5      	bne.n	800abd6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ac0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac0c:	2220      	movs	r2, #32
 800ac0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d118      	bne.n	800ac4c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	e853 3f00 	ldrex	r3, [r3]
 800ac26:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f023 0310 	bic.w	r3, r3, #16
 800ac2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	461a      	mov	r2, r3
 800ac36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac38:	61fb      	str	r3, [r7, #28]
 800ac3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3c:	69b9      	ldr	r1, [r7, #24]
 800ac3e:	69fa      	ldr	r2, [r7, #28]
 800ac40:	e841 2300 	strex	r3, r2, [r1]
 800ac44:	617b      	str	r3, [r7, #20]
   return(result);
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1e6      	bne.n	800ac1a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac4e:	2200      	movs	r2, #0
 800ac50:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d107      	bne.n	800ac6a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac60:	4619      	mov	r1, r3
 800ac62:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ac64:	f002 f940 	bl	800cee8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac68:	e002      	b.n	800ac70 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ac6a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ac6c:	f7ff f922 	bl	8009eb4 <HAL_UART_RxCpltCallback>
}
 800ac70:	bf00      	nop
 800ac72:	3770      	adds	r7, #112	@ 0x70
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac84:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d109      	bne.n	800aca8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac9a:	085b      	lsrs	r3, r3, #1
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	4619      	mov	r1, r3
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f002 f921 	bl	800cee8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aca6:	e002      	b.n	800acae <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f7ff f90d 	bl	8009ec8 <HAL_UART_RxHalfCpltCallback>
}
 800acae:	bf00      	nop
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b086      	sub	sp, #24
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acc2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acd2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acde:	2b80      	cmp	r3, #128	@ 0x80
 800ace0:	d109      	bne.n	800acf6 <UART_DMAError+0x40>
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	2b21      	cmp	r3, #33	@ 0x21
 800ace6:	d106      	bne.n	800acf6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	2200      	movs	r2, #0
 800acec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800acf0:	6978      	ldr	r0, [r7, #20]
 800acf2:	f7ff fe29 	bl	800a948 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad00:	2b40      	cmp	r3, #64	@ 0x40
 800ad02:	d109      	bne.n	800ad18 <UART_DMAError+0x62>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2b22      	cmp	r3, #34	@ 0x22
 800ad08:	d106      	bne.n	800ad18 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ad12:	6978      	ldr	r0, [r7, #20]
 800ad14:	f7ff fe59 	bl	800a9ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad1e:	f043 0210 	orr.w	r2, r3, #16
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad28:	6978      	ldr	r0, [r7, #20]
 800ad2a:	f7ff f8d7 	bl	8009edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad2e:	bf00      	nop
 800ad30:	3718      	adds	r7, #24
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b084      	sub	sp, #16
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f7ff f8c1 	bl	8009edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad5a:	bf00      	nop
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b088      	sub	sp, #32
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	e853 3f00 	ldrex	r3, [r3]
 800ad76:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad7e:	61fb      	str	r3, [r7, #28]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	461a      	mov	r2, r3
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	61bb      	str	r3, [r7, #24]
 800ad8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8c:	6979      	ldr	r1, [r7, #20]
 800ad8e:	69ba      	ldr	r2, [r7, #24]
 800ad90:	e841 2300 	strex	r3, r2, [r1]
 800ad94:	613b      	str	r3, [r7, #16]
   return(result);
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1e6      	bne.n	800ad6a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2220      	movs	r2, #32
 800ada0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f7ff f86e 	bl	8009e8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adb0:	bf00      	nop
 800adb2:	3720      	adds	r7, #32
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800adc0:	bf00      	nop
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800add4:	bf00      	nop
 800add6:	370c      	adds	r7, #12
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d101      	bne.n	800ae0a <HAL_UARTEx_DisableFifoMode+0x16>
 800ae06:	2302      	movs	r3, #2
 800ae08:	e027      	b.n	800ae5a <HAL_UARTEx_DisableFifoMode+0x66>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2224      	movs	r2, #36	@ 0x24
 800ae16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f022 0201 	bic.w	r2, r2, #1
 800ae30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ae38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2220      	movs	r2, #32
 800ae4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3714      	adds	r7, #20
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b084      	sub	sp, #16
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d101      	bne.n	800ae7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ae7a:	2302      	movs	r3, #2
 800ae7c:	e02d      	b.n	800aeda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2201      	movs	r2, #1
 800ae82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2224      	movs	r2, #36	@ 0x24
 800ae8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f022 0201 	bic.w	r2, r2, #1
 800aea4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	683a      	ldr	r2, [r7, #0]
 800aeb6:	430a      	orrs	r2, r1
 800aeb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 f8a4 	bl	800b008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2220      	movs	r2, #32
 800aecc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aed8:	2300      	movs	r3, #0
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b084      	sub	sp, #16
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
 800aeea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d101      	bne.n	800aefa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aef6:	2302      	movs	r3, #2
 800aef8:	e02d      	b.n	800af56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2201      	movs	r2, #1
 800aefe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2224      	movs	r2, #36	@ 0x24
 800af06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f022 0201 	bic.w	r2, r2, #1
 800af20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	683a      	ldr	r2, [r7, #0]
 800af32:	430a      	orrs	r2, r1
 800af34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f866 	bl	800b008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2220      	movs	r2, #32
 800af48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b08c      	sub	sp, #48	@ 0x30
 800af62:	af00      	add	r7, sp, #0
 800af64:	60f8      	str	r0, [r7, #12]
 800af66:	60b9      	str	r1, [r7, #8]
 800af68:	4613      	mov	r3, r2
 800af6a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af72:	2b20      	cmp	r3, #32
 800af74:	d142      	bne.n	800affc <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d002      	beq.n	800af82 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800af7c:	88fb      	ldrh	r3, [r7, #6]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	e03b      	b.n	800affe <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2201      	movs	r2, #1
 800af8a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2200      	movs	r2, #0
 800af90:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800af92:	88fb      	ldrh	r3, [r7, #6]
 800af94:	461a      	mov	r2, r3
 800af96:	68b9      	ldr	r1, [r7, #8]
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f7ff fc2f 	bl	800a7fc <UART_Start_Receive_DMA>
 800af9e:	4603      	mov	r3, r0
 800afa0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800afa4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d124      	bne.n	800aff6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d11d      	bne.n	800aff0 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2210      	movs	r2, #16
 800afba:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	e853 3f00 	ldrex	r3, [r3]
 800afc8:	617b      	str	r3, [r7, #20]
   return(result);
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	f043 0310 	orr.w	r3, r3, #16
 800afd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	461a      	mov	r2, r3
 800afd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afda:	627b      	str	r3, [r7, #36]	@ 0x24
 800afdc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afde:	6a39      	ldr	r1, [r7, #32]
 800afe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afe2:	e841 2300 	strex	r3, r2, [r1]
 800afe6:	61fb      	str	r3, [r7, #28]
   return(result);
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1e6      	bne.n	800afbc <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800afee:	e002      	b.n	800aff6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800aff6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800affa:	e000      	b.n	800affe <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800affc:	2302      	movs	r3, #2
  }
}
 800affe:	4618      	mov	r0, r3
 800b000:	3730      	adds	r7, #48	@ 0x30
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
	...

0800b008 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b014:	2b00      	cmp	r3, #0
 800b016:	d108      	bne.n	800b02a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b028:	e031      	b.n	800b08e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b02a:	2308      	movs	r3, #8
 800b02c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b02e:	2308      	movs	r3, #8
 800b030:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	0e5b      	lsrs	r3, r3, #25
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	f003 0307 	and.w	r3, r3, #7
 800b040:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	0f5b      	lsrs	r3, r3, #29
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	f003 0307 	and.w	r3, r3, #7
 800b050:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b052:	7bbb      	ldrb	r3, [r7, #14]
 800b054:	7b3a      	ldrb	r2, [r7, #12]
 800b056:	4911      	ldr	r1, [pc, #68]	@ (800b09c <UARTEx_SetNbDataToProcess+0x94>)
 800b058:	5c8a      	ldrb	r2, [r1, r2]
 800b05a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b05e:	7b3a      	ldrb	r2, [r7, #12]
 800b060:	490f      	ldr	r1, [pc, #60]	@ (800b0a0 <UARTEx_SetNbDataToProcess+0x98>)
 800b062:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b064:	fb93 f3f2 	sdiv	r3, r3, r2
 800b068:	b29a      	uxth	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b070:	7bfb      	ldrb	r3, [r7, #15]
 800b072:	7b7a      	ldrb	r2, [r7, #13]
 800b074:	4909      	ldr	r1, [pc, #36]	@ (800b09c <UARTEx_SetNbDataToProcess+0x94>)
 800b076:	5c8a      	ldrb	r2, [r1, r2]
 800b078:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b07c:	7b7a      	ldrb	r2, [r7, #13]
 800b07e:	4908      	ldr	r1, [pc, #32]	@ (800b0a0 <UARTEx_SetNbDataToProcess+0x98>)
 800b080:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b082:	fb93 f3f2 	sdiv	r3, r3, r2
 800b086:	b29a      	uxth	r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b08e:	bf00      	nop
 800b090:	3714      	adds	r7, #20
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop
 800b09c:	08014750 	.word	0x08014750
 800b0a0:	08014758 	.word	0x08014758

0800b0a4 <goToZeroElecAngle>:
#include "pid.h"
#include "lowpass_filter.h"
#include "focLib.h"

void goToZeroElecAngle(BldcMotor *motor)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
    setTorque(motor, 0, OPEN_LOOP_TORQUE, 0);
 800b0ac:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800b0d0 <goToZeroElecAngle+0x2c>
 800b0b0:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800b0d4 <goToZeroElecAngle+0x30>
 800b0b4:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800b0d0 <goToZeroElecAngle+0x2c>
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f001 f863 	bl	800c184 <setTorque>
    delay(700);
 800b0be:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800b0c2:	f003 fde7 	bl	800ec94 <delay>
}
 800b0c6:	bf00      	nop
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	00000000 	.word	0x00000000
 800b0d4:	3fc511a3 	.word	0x3fc511a3

0800b0d8 <alignSensor>:
int alignSensor(BldcMotor *motor)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b08a      	sub	sp, #40	@ 0x28
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
    // setTorque(motor, OPEN_LOOP_TORQUE, 0, _3PI_2);
    // delay(200);
    // encoderUpdate(&motor->magEncoder);
    // float start_angle = motor->magEncoder.fullAngle;
    // printLog("start_angle:%f\n", start_angle);
    for (int i = 0; i <= 500; i++)
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0e4:	e025      	b.n	800b132 <alignSensor+0x5a>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e8:	ee07 3a90 	vmov	s15, r3
 800b0ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0f0:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800b2f8 <alignSensor+0x220>
 800b0f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b0f8:	eddf 6a80 	vldr	s13, [pc, #512]	@ 800b2fc <alignSensor+0x224>
 800b0fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b100:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 800b300 <alignSensor+0x228>
 800b104:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b108:	edc7 7a02 	vstr	s15, [r7, #8]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800b10c:	ed97 1a02 	vldr	s2, [r7, #8]
 800b110:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 800b304 <alignSensor+0x22c>
 800b114:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 800b308 <alignSensor+0x230>
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f001 f833 	bl	800c184 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4618      	mov	r0, r3
 800b122:	f000 fcef 	bl	800bb04 <encoderUpdate>
        delay(2);
 800b126:	2002      	movs	r0, #2
 800b128:	f003 fdb4 	bl	800ec94 <delay>
    for (int i = 0; i <= 500; i++)
 800b12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b12e:	3301      	adds	r3, #1
 800b130:	627b      	str	r3, [r7, #36]	@ 0x24
 800b132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b134:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b138:	ddd5      	ble.n	800b0e6 <alignSensor+0xe>
    }
    // encoderUpdate(&motor->magEncoder);

    float mid_angle = motor->magEncoder.fullAngle;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	695b      	ldr	r3, [r3, #20]
 800b13e:	61fb      	str	r3, [r7, #28]
    printLog("mid_angle:%f\n", mid_angle);
 800b140:	69f8      	ldr	r0, [r7, #28]
 800b142:	f7f5 fa29 	bl	8000598 <__aeabi_f2d>
 800b146:	4602      	mov	r2, r0
 800b148:	460b      	mov	r3, r1
 800b14a:	4870      	ldr	r0, [pc, #448]	@ (800b30c <alignSensor+0x234>)
 800b14c:	f001 ff0c 	bl	800cf68 <printLog>
    // move one electrical revolution backwards
    for (int i = 500; i >= 0; i--)
 800b150:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800b154:	623b      	str	r3, [r7, #32]
 800b156:	e025      	b.n	800b1a4 <alignSensor+0xcc>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800b158:	6a3b      	ldr	r3, [r7, #32]
 800b15a:	ee07 3a90 	vmov	s15, r3
 800b15e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b162:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800b2f8 <alignSensor+0x220>
 800b166:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b16a:	eddf 6a64 	vldr	s13, [pc, #400]	@ 800b2fc <alignSensor+0x224>
 800b16e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b172:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800b300 <alignSensor+0x228>
 800b176:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b17a:	edc7 7a03 	vstr	s15, [r7, #12]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800b17e:	ed97 1a03 	vldr	s2, [r7, #12]
 800b182:	eddf 0a60 	vldr	s1, [pc, #384]	@ 800b304 <alignSensor+0x22c>
 800b186:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 800b308 <alignSensor+0x230>
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 fffa 	bl	800c184 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	4618      	mov	r0, r3
 800b194:	f000 fcb6 	bl	800bb04 <encoderUpdate>
        delay(2);
 800b198:	2002      	movs	r0, #2
 800b19a:	f003 fd7b 	bl	800ec94 <delay>
    for (int i = 500; i >= 0; i--)
 800b19e:	6a3b      	ldr	r3, [r7, #32]
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	623b      	str	r3, [r7, #32]
 800b1a4:	6a3b      	ldr	r3, [r7, #32]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	dad6      	bge.n	800b158 <alignSensor+0x80>
    }
    // encoderUpdate(&motor->magEncoder);

    float end_angle = motor->magEncoder.fullAngle;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	695b      	ldr	r3, [r3, #20]
 800b1ae:	61bb      	str	r3, [r7, #24]
    printLog("end_angle:%f\n", end_angle);
 800b1b0:	69b8      	ldr	r0, [r7, #24]
 800b1b2:	f7f5 f9f1 	bl	8000598 <__aeabi_f2d>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	4855      	ldr	r0, [pc, #340]	@ (800b310 <alignSensor+0x238>)
 800b1bc:	f001 fed4 	bl	800cf68 <printLog>
    // setPhaseVoltage(0, 0, 0);
    delay(200);
 800b1c0:	20c8      	movs	r0, #200	@ 0xc8
 800b1c2:	f003 fd67 	bl	800ec94 <delay>

    // determine the direction the sensor moved
    float moved = fabsf(mid_angle - end_angle);
 800b1c6:	ed97 7a07 	vldr	s14, [r7, #28]
 800b1ca:	edd7 7a06 	vldr	s15, [r7, #24]
 800b1ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1d2:	eef0 7ae7 	vabs.f32	s15, s15
 800b1d6:	edc7 7a05 	vstr	s15, [r7, #20]
    printLog("moved:%f\n", moved);
 800b1da:	6978      	ldr	r0, [r7, #20]
 800b1dc:	f7f5 f9dc 	bl	8000598 <__aeabi_f2d>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	484b      	ldr	r0, [pc, #300]	@ (800b314 <alignSensor+0x23c>)
 800b1e6:	f001 febf 	bl	800cf68 <printLog>
    if (moved < MIN_ANGLE_DETECT_MOVEMENT)
 800b1ea:	edd7 7a05 	vldr	s15, [r7, #20]
 800b1ee:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800b318 <alignSensor+0x240>
 800b1f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1fa:	d504      	bpl.n	800b206 <alignSensor+0x12e>
    { // minimum angle to detect movement
        printLog("Failed to notice movement\n");
 800b1fc:	4847      	ldr	r0, [pc, #284]	@ (800b31c <alignSensor+0x244>)
 800b1fe:	f001 feb3 	bl	800cf68 <printLog>
        return 0; // failed calibration
 800b202:	2300      	movs	r3, #0
 800b204:	e073      	b.n	800b2ee <alignSensor+0x216>
    }
    else if (mid_angle < end_angle)
 800b206:	ed97 7a07 	vldr	s14, [r7, #28]
 800b20a:	edd7 7a06 	vldr	s15, [r7, #24]
 800b20e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b216:	d507      	bpl.n	800b228 <alignSensor+0x150>
    {
        printLog("sensor_direction==CCW\n");
 800b218:	4841      	ldr	r0, [pc, #260]	@ (800b320 <alignSensor+0x248>)
 800b21a:	f001 fea5 	bl	800cf68 <printLog>
        motor->magEncoder.direction = CCW;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	22ff      	movs	r2, #255	@ 0xff
 800b222:	f883 2020 	strb.w	r2, [r3, #32]
 800b226:	e006      	b.n	800b236 <alignSensor+0x15e>
    }
    else
    {
        printLog("sensor_direction==CW\n");
 800b228:	483e      	ldr	r0, [pc, #248]	@ (800b324 <alignSensor+0x24c>)
 800b22a:	f001 fe9d 	bl	800cf68 <printLog>
        motor->magEncoder.direction = CW;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	f883 2020 	strb.w	r2, [r3, #32]
    }
    // check pole pair number
    bool pp_check_result = !(fabsf(moved * motor->pole_pairs - _2PI) > 0.5f); // 0.5f is arbitrary number it can be lower or higher!
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b23c:	ee07 3a90 	vmov	s15, r3
 800b240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b244:	edd7 7a05 	vldr	s15, [r7, #20]
 800b248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b24c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800b2f8 <alignSensor+0x220>
 800b250:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b254:	eef0 7ae7 	vabs.f32	s15, s15
 800b258:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b25c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b264:	bfcc      	ite	gt
 800b266:	2301      	movgt	r3, #1
 800b268:	2300      	movle	r3, #0
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	f083 0301 	eor.w	r3, r3, #1
 800b270:	b2db      	uxtb	r3, r3
 800b272:	74fb      	strb	r3, [r7, #19]
    if (pp_check_result == false)
 800b274:	7cfb      	ldrb	r3, [r7, #19]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10d      	bne.n	800b296 <alignSensor+0x1be>
    {
        printLog("PP check: fail - estimated pp: %d\n", (int)(_2PI / moved));
 800b27a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800b2f8 <alignSensor+0x220>
 800b27e:	ed97 7a05 	vldr	s14, [r7, #20]
 800b282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b286:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b28a:	ee17 1a90 	vmov	r1, s15
 800b28e:	4826      	ldr	r0, [pc, #152]	@ (800b328 <alignSensor+0x250>)
 800b290:	f001 fe6a 	bl	800cf68 <printLog>
 800b294:	e002      	b.n	800b29c <alignSensor+0x1c4>
    }
    else
    {
        printLog("PP check: OK!\n");
 800b296:	4825      	ldr	r0, [pc, #148]	@ (800b32c <alignSensor+0x254>)
 800b298:	f001 fe66 	bl	800cf68 <printLog>
    }

    // align the electrical phases of the motor and sensor
    // set angle -90(270 = 3PI/2) degrees
    goToZeroElecAngle(motor);
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f7ff ff01 	bl	800b0a4 <goToZeroElecAngle>
    // read the sensor
    encoderUpdate(&motor->magEncoder);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f000 fc2d 	bl	800bb04 <encoderUpdate>
    // get the current zero electric angle
    motor->zeroElectricAngleOffSet = 0;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f04f 0200 	mov.w	r2, #0
 800b2b0:	635a      	str	r2, [r3, #52]	@ 0x34
    getElecAngle(motor);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 f840 	bl	800b338 <getElecAngle>
    motor->zeroElectricAngleOffSet = motor->angle_el;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	635a      	str	r2, [r3, #52]	@ 0x34
    // zero_electric_angle =  _normalizeAngle(_electricalAngle(sensor_direction*sensor->getAngle(), pole_pairs));

    // encoderUpdate(&motor->magEncoder);
    getElecAngle(motor);
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f839 	bl	800b338 <getElecAngle>
    // motor->zeroElectricAngleOffSet = 0;
    // printLog("[zeroAngleOffset]:%f  [zeroAngle]:%f\r\n", motor->zeroElectricAngleOffSet, motor->angle_el);
    printLog("[zeroAngleOffset]:%f\n", motor->zeroElectricAngleOffSet);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7f5 f964 	bl	8000598 <__aeabi_f2d>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	4816      	ldr	r0, [pc, #88]	@ (800b330 <alignSensor+0x258>)
 800b2d6:	f001 fe47 	bl	800cf68 <printLog>
    printLog("[zeroAngle]:%f\n", motor->angle_el);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7f5 f95a 	bl	8000598 <__aeabi_f2d>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	4812      	ldr	r0, [pc, #72]	@ (800b334 <alignSensor+0x25c>)
 800b2ea:	f001 fe3d 	bl	800cf68 <printLog>
    // // make sure the angle_el is about zero

    // delay(200);
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3728      	adds	r7, #40	@ 0x28
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	40c90fdb 	.word	0x40c90fdb
 800b2fc:	43fa0000 	.word	0x43fa0000
 800b300:	4096cbe4 	.word	0x4096cbe4
 800b304:	00000000 	.word	0x00000000
 800b308:	3fc511a3 	.word	0x3fc511a3
 800b30c:	080145a0 	.word	0x080145a0
 800b310:	080145b0 	.word	0x080145b0
 800b314:	080145c0 	.word	0x080145c0
 800b318:	3d7ecfa9 	.word	0x3d7ecfa9
 800b31c:	080145cc 	.word	0x080145cc
 800b320:	080145e8 	.word	0x080145e8
 800b324:	08014600 	.word	0x08014600
 800b328:	08014618 	.word	0x08014618
 800b32c:	0801463c 	.word	0x0801463c
 800b330:	0801464c 	.word	0x0801464c
 800b334:	08014664 	.word	0x08014664

0800b338 <getElecAngle>:

void getElecAngle(BldcMotor *motor)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
    motor->angle_el = _normalizeAngle(motor->pole_pairs * motor->magEncoder.shaftAngle - motor->zeroElectricAngleOffSet);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b346:	ee07 3a90 	vmov	s15, r3
 800b34a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	edd3 7a04 	vldr	s15, [r3, #16]
 800b354:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800b35e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b362:	eeb0 0a67 	vmov.f32	s0, s15
 800b366:	f000 fd6f 	bl	800be48 <_normalizeAngle>
 800b36a:	eef0 7a40 	vmov.f32	s15, s0
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
}
 800b374:	bf00      	nop
 800b376:	3708      	adds	r7, #8
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <foc>:

void foc(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b088      	sub	sp, #32
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]

    if (motor->state == MOTOR_CALIBRATE)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d111      	bne.n	800b3b6 <foc+0x3a>
    {
        getCurrentOffsets(motor, adc_a, adc_b, 100);
 800b392:	2364      	movs	r3, #100	@ 0x64
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	68b9      	ldr	r1, [r7, #8]
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f000 f9ad 	bl	800b6f8 <getCurrentOffsets>
        alignSensor(motor);
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	f7ff fe9a 	bl	800b0d8 <alignSensor>
        motor->state = MOTOR_READY;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        motor->stopPwm();
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800b3b2:	4798      	blx	r3
                break;
            }
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
        }
    }
}
 800b3b4:	e194      	b.n	800b6e0 <foc+0x364>
        getPhaseCurrents(motor, adc_a, adc_b);
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	68b9      	ldr	r1, [r7, #8]
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	f000 fa6c 	bl	800b898 <getPhaseCurrents>
        getABCurrents(motor);
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f000 fb0b 	bl	800b9dc <getABCurrents>
        getDQCurrents(motor);
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f000 fb2e 	bl	800ba28 <getDQCurrents>
        motor->Iq = lpfOperator(&motor->IqFilter, motor->Iq);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f103 02f4 	add.w	r2, r3, #244	@ 0xf4
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800b3d8:	eeb0 0a67 	vmov.f32	s0, s15
 800b3dc:	4610      	mov	r0, r2
 800b3de:	f000 fc2b 	bl	800bc38 <lpfOperator>
 800b3e2:	eef0 7a40 	vmov.f32	s15, s0
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
        motor->Id = lpfOperator(&motor->IdFilter, motor->Id);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800b3f8:	eeb0 0a67 	vmov.f32	s0, s15
 800b3fc:	4610      	mov	r0, r2
 800b3fe:	f000 fc1b 	bl	800bc38 <lpfOperator>
 800b402:	eef0 7a40 	vmov.f32	s15, s0
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
        encoderUpdate(&motor->magEncoder);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	4618      	mov	r0, r3
 800b410:	f000 fb78 	bl	800bb04 <encoderUpdate>
        motor->magEncoder.velocity = lpfOperator(&motor->velocityFilter, motor->magEncoder.velocity);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f503 7286 	add.w	r2, r3, #268	@ 0x10c
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	edd3 7a06 	vldr	s15, [r3, #24]
 800b420:	eeb0 0a67 	vmov.f32	s0, s15
 800b424:	4610      	mov	r0, r2
 800b426:	f000 fc07 	bl	800bc38 <lpfOperator>
 800b42a:	eef0 7a40 	vmov.f32	s15, s0
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	edc3 7a06 	vstr	s15, [r3, #24]
        getElecAngle(motor);
 800b434:	68f8      	ldr	r0, [r7, #12]
 800b436:	f7ff ff7f 	bl	800b338 <getElecAngle>
        if (motor->state == MOTOR_READY)
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b440:	2b01      	cmp	r3, #1
 800b442:	f000 814d 	beq.w	800b6e0 <foc+0x364>
        else if (motor->state == MOTOR_START)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b44c:	2b02      	cmp	r3, #2
 800b44e:	f040 8147 	bne.w	800b6e0 <foc+0x364>
            switch (motor->controlType)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800b458:	2b03      	cmp	r3, #3
 800b45a:	f200 812f 	bhi.w	800b6bc <foc+0x340>
 800b45e:	a201      	add	r2, pc, #4	@ (adr r2, 800b464 <foc+0xe8>)
 800b460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b464:	0800b4d1 	.word	0x0800b4d1
 800b468:	0800b475 	.word	0x0800b475
 800b46c:	0800b53b 	.word	0x0800b53b
 800b470:	0800b5eb 	.word	0x0800b5eb
                motor->target = 50;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	4a9c      	ldr	r2, [pc, #624]	@ (800b6e8 <foc+0x36c>)
 800b478:	631a      	str	r2, [r3, #48]	@ 0x30
                shaftAngle = _normalizeAngle(shaftAngle + motor->target * motor->Ts);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b486:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b48a:	4b98      	ldr	r3, [pc, #608]	@ (800b6ec <foc+0x370>)
 800b48c:	edd3 7a00 	vldr	s15, [r3]
 800b490:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b494:	eeb0 0a67 	vmov.f32	s0, s15
 800b498:	f000 fcd6 	bl	800be48 <_normalizeAngle>
 800b49c:	eef0 7a40 	vmov.f32	s15, s0
 800b4a0:	4b92      	ldr	r3, [pc, #584]	@ (800b6ec <foc+0x370>)
 800b4a2:	edc3 7a00 	vstr	s15, [r3]
                motor->angle_el = _electricalAngle(shaftAngle, motor->pole_pairs);
 800b4a6:	4b91      	ldr	r3, [pc, #580]	@ (800b6ec <foc+0x370>)
 800b4a8:	edd3 7a00 	vldr	s15, [r3]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	eeb0 0a67 	vmov.f32	s0, s15
 800b4b8:	f000 fcfc 	bl	800beb4 <_electricalAngle>
 800b4bc:	eef0 7a40 	vmov.f32	s15, s0
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                motor->Uq = OPEN_LOOP_TORQUE;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	4a89      	ldr	r2, [pc, #548]	@ (800b6f0 <foc+0x374>)
 800b4ca:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                break;
 800b4ce:	e0f5      	b.n	800b6bc <foc+0x340>
                if (motor->torqueType == VOLTAGE)
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d105      	bne.n	800b4e6 <foc+0x16a>
                    motor->Uq = motor->target;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                break;
 800b4e4:	e0ea      	b.n	800b6bc <foc+0x340>
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800b4f2:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b6f4 <foc+0x378>
 800b4f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4fa:	eeb0 0a67 	vmov.f32	s0, s15
 800b4fe:	4610      	mov	r0, r2
 800b500:	f000 fd22 	bl	800bf48 <pidOperator>
 800b504:	eef0 7a40 	vmov.f32	s15, s0
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, motor->target - motor->Iq);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800b520:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b524:	eeb0 0a67 	vmov.f32	s0, s15
 800b528:	4610      	mov	r0, r2
 800b52a:	f000 fd0d 	bl	800bf48 <pidOperator>
 800b52e:	eef0 7a40 	vmov.f32	s15, s0
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800b538:	e0c0      	b.n	800b6bc <foc+0x340>
                if (motor->torqueType == VOLTAGE)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b540:	2b00      	cmp	r3, #0
 800b542:	d116      	bne.n	800b572 <foc+0x1f6>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	edd3 7a06 	vldr	s15, [r3, #24]
 800b550:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b554:	edc7 7a04 	vstr	s15, [r7, #16]
                    motor->Uq = pidOperator(&motor->velocityPID, velocityErr);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	33ac      	adds	r3, #172	@ 0xac
 800b55c:	ed97 0a04 	vldr	s0, [r7, #16]
 800b560:	4618      	mov	r0, r3
 800b562:	f000 fcf1 	bl	800bf48 <pidOperator>
 800b566:	eef0 7a40 	vmov.f32	s15, s0
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800b570:	e0a4      	b.n	800b6bc <foc+0x340>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	edd3 7a06 	vldr	s15, [r3, #24]
 800b57e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b582:	edc7 7a04 	vstr	s15, [r7, #16]
                    IqRef = pidOperator(&motor->velocityPID, velocityErr);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	33ac      	adds	r3, #172	@ 0xac
 800b58a:	ed97 0a04 	vldr	s0, [r7, #16]
 800b58e:	4618      	mov	r0, r3
 800b590:	f000 fcda 	bl	800bf48 <pidOperator>
 800b594:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800b5a4:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800b6f4 <foc+0x378>
 800b5a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5ac:	eeb0 0a67 	vmov.f32	s0, s15
 800b5b0:	4610      	mov	r0, r2
 800b5b2:	f000 fcc9 	bl	800bf48 <pidOperator>
 800b5b6:	eef0 7a40 	vmov.f32	s15, s0
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800b5cc:	ed97 7a05 	vldr	s14, [r7, #20]
 800b5d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5d4:	eeb0 0a67 	vmov.f32	s0, s15
 800b5d8:	4610      	mov	r0, r2
 800b5da:	f000 fcb5 	bl	800bf48 <pidOperator>
 800b5de:	eef0 7a40 	vmov.f32	s15, s0
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800b5e8:	e068      	b.n	800b6bc <foc+0x340>
                if (motor->torqueType == VOLTAGE)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d116      	bne.n	800b622 <foc+0x2a6>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	edd3 7a05 	vldr	s15, [r3, #20]
 800b600:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b604:	edc7 7a07 	vstr	s15, [r7, #28]
                    motor->Uq = pidOperator(&motor->anglePID, angleErr);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	33d0      	adds	r3, #208	@ 0xd0
 800b60c:	ed97 0a07 	vldr	s0, [r7, #28]
 800b610:	4618      	mov	r0, r3
 800b612:	f000 fc99 	bl	800bf48 <pidOperator>
 800b616:	eef0 7a40 	vmov.f32	s15, s0
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800b620:	e04b      	b.n	800b6ba <foc+0x33e>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	edd3 7a05 	vldr	s15, [r3, #20]
 800b62e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b632:	edc7 7a07 	vstr	s15, [r7, #28]
                    velocityRef = pidOperator(&motor->anglePID, angleErr);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	33d0      	adds	r3, #208	@ 0xd0
 800b63a:	ed97 0a07 	vldr	s0, [r7, #28]
 800b63e:	4618      	mov	r0, r3
 800b640:	f000 fc82 	bl	800bf48 <pidOperator>
 800b644:	ed87 0a06 	vstr	s0, [r7, #24]
                    IqRef = pidOperator(&motor->velocityPID, velocityRef - motor->magEncoder.velocity);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	edd3 7a06 	vldr	s15, [r3, #24]
 800b654:	ed97 7a06 	vldr	s14, [r7, #24]
 800b658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b65c:	eeb0 0a67 	vmov.f32	s0, s15
 800b660:	4610      	mov	r0, r2
 800b662:	f000 fc71 	bl	800bf48 <pidOperator>
 800b666:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800b676:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800b6f4 <foc+0x378>
 800b67a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b67e:	eeb0 0a67 	vmov.f32	s0, s15
 800b682:	4610      	mov	r0, r2
 800b684:	f000 fc60 	bl	800bf48 <pidOperator>
 800b688:	eef0 7a40 	vmov.f32	s15, s0
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800b69e:	ed97 7a05 	vldr	s14, [r7, #20]
 800b6a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6a6:	eeb0 0a67 	vmov.f32	s0, s15
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	f000 fc4c 	bl	800bf48 <pidOperator>
 800b6b0:	eef0 7a40 	vmov.f32	s15, s0
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800b6ba:	bf00      	nop
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800b6ce:	eeb0 1a66 	vmov.f32	s2, s13
 800b6d2:	eef0 0a47 	vmov.f32	s1, s14
 800b6d6:	eeb0 0a67 	vmov.f32	s0, s15
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f000 fd52 	bl	800c184 <setTorque>
}
 800b6e0:	bf00      	nop
 800b6e2:	3720      	adds	r7, #32
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	42480000 	.word	0x42480000
 800b6ec:	2000080c 	.word	0x2000080c
 800b6f0:	3fc511a3 	.word	0x3fc511a3
 800b6f4:	00000000 	.word	0x00000000

0800b6f8 <getCurrentOffsets>:
#include "math_utils.h"
#include "focLib.h"

// Function finding zero offsets of the ADC
void getCurrentOffsets(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b, uint32_t rounds)
{
 800b6f8:	b5b0      	push	{r4, r5, r7, lr}
 800b6fa:	b086      	sub	sp, #24
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	607a      	str	r2, [r7, #4]
 800b704:	603b      	str	r3, [r7, #0]
    // find adc offset = zero current voltage
    motor->offset_ia = 0;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f04f 0200 	mov.w	r2, #0
 800b70c:	641a      	str	r2, [r3, #64]	@ 0x40
    motor->offset_ib = 0;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f04f 0200 	mov.w	r2, #0
 800b714:	645a      	str	r2, [r3, #68]	@ 0x44
    // read the adc voltage  times ( arbitrary number )
    for (int i = 0; i < rounds; i++)
 800b716:	2300      	movs	r3, #0
 800b718:	617b      	str	r3, [r7, #20]
 800b71a:	e076      	b.n	800b80a <getCurrentOffsets+0x112>
    {
        motor->offset_ia += ADC_2_CURRENT(adc_a);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b720:	4618      	mov	r0, r3
 800b722:	f7f4 ff39 	bl	8000598 <__aeabi_f2d>
 800b726:	4604      	mov	r4, r0
 800b728:	460d      	mov	r5, r1
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	ee07 3a90 	vmov	s15, r3
 800b730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b734:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800b888 <getCurrentOffsets+0x190>
 800b738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b73c:	ee17 0a90 	vmov	r0, s15
 800b740:	f7f4 ff2a 	bl	8000598 <__aeabi_f2d>
 800b744:	a34c      	add	r3, pc, #304	@ (adr r3, 800b878 <getCurrentOffsets+0x180>)
 800b746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74a:	f7f5 f8a7 	bl	800089c <__aeabi_ddiv>
 800b74e:	4602      	mov	r2, r0
 800b750:	460b      	mov	r3, r1
 800b752:	4610      	mov	r0, r2
 800b754:	4619      	mov	r1, r3
 800b756:	a34a      	add	r3, pc, #296	@ (adr r3, 800b880 <getCurrentOffsets+0x188>)
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	f7f5 f89e 	bl	800089c <__aeabi_ddiv>
 800b760:	4602      	mov	r2, r0
 800b762:	460b      	mov	r3, r1
 800b764:	4610      	mov	r0, r2
 800b766:	4619      	mov	r1, r3
 800b768:	f04f 0200 	mov.w	r2, #0
 800b76c:	4b47      	ldr	r3, [pc, #284]	@ (800b88c <getCurrentOffsets+0x194>)
 800b76e:	f7f5 f895 	bl	800089c <__aeabi_ddiv>
 800b772:	4602      	mov	r2, r0
 800b774:	460b      	mov	r3, r1
 800b776:	4620      	mov	r0, r4
 800b778:	4629      	mov	r1, r5
 800b77a:	f7f4 fdaf 	bl	80002dc <__adddf3>
 800b77e:	4602      	mov	r2, r0
 800b780:	460b      	mov	r3, r1
 800b782:	4610      	mov	r0, r2
 800b784:	4619      	mov	r1, r3
 800b786:	f7f5 fa57 	bl	8000c38 <__aeabi_d2f>
 800b78a:	4602      	mov	r2, r0
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	641a      	str	r2, [r3, #64]	@ 0x40
        motor->offset_ib += ADC_2_CURRENT(adc_b);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b794:	4618      	mov	r0, r3
 800b796:	f7f4 feff 	bl	8000598 <__aeabi_f2d>
 800b79a:	4604      	mov	r4, r0
 800b79c:	460d      	mov	r5, r1
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	ee07 3a90 	vmov	s15, r3
 800b7a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7a8:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800b888 <getCurrentOffsets+0x190>
 800b7ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7b0:	ee17 0a90 	vmov	r0, s15
 800b7b4:	f7f4 fef0 	bl	8000598 <__aeabi_f2d>
 800b7b8:	a32f      	add	r3, pc, #188	@ (adr r3, 800b878 <getCurrentOffsets+0x180>)
 800b7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7be:	f7f5 f86d 	bl	800089c <__aeabi_ddiv>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	4610      	mov	r0, r2
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	a32d      	add	r3, pc, #180	@ (adr r3, 800b880 <getCurrentOffsets+0x188>)
 800b7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d0:	f7f5 f864 	bl	800089c <__aeabi_ddiv>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	4610      	mov	r0, r2
 800b7da:	4619      	mov	r1, r3
 800b7dc:	f04f 0200 	mov.w	r2, #0
 800b7e0:	4b2a      	ldr	r3, [pc, #168]	@ (800b88c <getCurrentOffsets+0x194>)
 800b7e2:	f7f5 f85b 	bl	800089c <__aeabi_ddiv>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	4629      	mov	r1, r5
 800b7ee:	f7f4 fd75 	bl	80002dc <__adddf3>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	4610      	mov	r0, r2
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	f7f5 fa1d 	bl	8000c38 <__aeabi_d2f>
 800b7fe:	4602      	mov	r2, r0
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	645a      	str	r2, [r3, #68]	@ 0x44
    for (int i = 0; i < rounds; i++)
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	3301      	adds	r3, #1
 800b808:	617b      	str	r3, [r7, #20]
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	683a      	ldr	r2, [r7, #0]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d884      	bhi.n	800b71c <getCurrentOffsets+0x24>
    }
    // calculate the mean offsets
    motor->offset_ia = motor->offset_ia / rounds;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	ee07 3a90 	vmov	s15, r3
 800b81e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    motor->offset_ib = motor->offset_ib / rounds;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	ee07 3a90 	vmov	s15, r3
 800b838:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b83c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    // printLog("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    // printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    printLog("[offset_ia]:%f\r\n", motor->offset_ia);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7f4 fea4 	bl	8000598 <__aeabi_f2d>
 800b850:	4602      	mov	r2, r0
 800b852:	460b      	mov	r3, r1
 800b854:	480e      	ldr	r0, [pc, #56]	@ (800b890 <getCurrentOffsets+0x198>)
 800b856:	f001 fb87 	bl	800cf68 <printLog>
    printLog("[offset_ib]:%f\r\n", motor->offset_ib);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b85e:	4618      	mov	r0, r3
 800b860:	f7f4 fe9a 	bl	8000598 <__aeabi_f2d>
 800b864:	4602      	mov	r2, r0
 800b866:	460b      	mov	r3, r1
 800b868:	480a      	ldr	r0, [pc, #40]	@ (800b894 <getCurrentOffsets+0x19c>)
 800b86a:	f001 fb7d 	bl	800cf68 <printLog>
    // _dbg_printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
}
 800b86e:	bf00      	nop
 800b870:	3718      	adds	r7, #24
 800b872:	46bd      	mov	sp, r7
 800b874:	bdb0      	pop	{r4, r5, r7, pc}
 800b876:	bf00      	nop
 800b878:	00000000 	.word	0x00000000
 800b87c:	40affe00 	.word	0x40affe00
 800b880:	40000000 	.word	0x40000000
 800b884:	3f847ae1 	.word	0x3f847ae1
 800b888:	40533333 	.word	0x40533333
 800b88c:	40240000 	.word	0x40240000
 800b890:	08014674 	.word	0x08014674
 800b894:	08014688 	.word	0x08014688

0800b898 <getPhaseCurrents>:

// read all three phase currents (if possible 2 or 3)
void getPhaseCurrents(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800b898:	b5b0      	push	{r4, r5, r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
    motor->Ia = ADC_2_CURRENT(adc_a) - motor->offset_ia; // amps
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	ee07 3a90 	vmov	s15, r3
 800b8aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ae:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800b9d0 <getPhaseCurrents+0x138>
 800b8b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8b6:	ee17 0a90 	vmov	r0, s15
 800b8ba:	f7f4 fe6d 	bl	8000598 <__aeabi_f2d>
 800b8be:	a340      	add	r3, pc, #256	@ (adr r3, 800b9c0 <getPhaseCurrents+0x128>)
 800b8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c4:	f7f4 ffea 	bl	800089c <__aeabi_ddiv>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	4610      	mov	r0, r2
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	a33d      	add	r3, pc, #244	@ (adr r3, 800b9c8 <getPhaseCurrents+0x130>)
 800b8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d6:	f7f4 ffe1 	bl	800089c <__aeabi_ddiv>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	460b      	mov	r3, r1
 800b8de:	4610      	mov	r0, r2
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	f04f 0200 	mov.w	r2, #0
 800b8e6:	4b3b      	ldr	r3, [pc, #236]	@ (800b9d4 <getPhaseCurrents+0x13c>)
 800b8e8:	f7f4 ffd8 	bl	800089c <__aeabi_ddiv>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	4614      	mov	r4, r2
 800b8f2:	461d      	mov	r5, r3
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7f4 fe4d 	bl	8000598 <__aeabi_f2d>
 800b8fe:	4602      	mov	r2, r0
 800b900:	460b      	mov	r3, r1
 800b902:	4620      	mov	r0, r4
 800b904:	4629      	mov	r1, r5
 800b906:	f7f4 fce7 	bl	80002d8 <__aeabi_dsub>
 800b90a:	4602      	mov	r2, r0
 800b90c:	460b      	mov	r3, r1
 800b90e:	4610      	mov	r0, r2
 800b910:	4619      	mov	r1, r3
 800b912:	f7f5 f991 	bl	8000c38 <__aeabi_d2f>
 800b916:	4602      	mov	r2, r0
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	649a      	str	r2, [r3, #72]	@ 0x48
    motor->Ic = ADC_2_CURRENT(adc_b) - motor->offset_ib;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	ee07 3a90 	vmov	s15, r3
 800b922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b926:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800b9d0 <getPhaseCurrents+0x138>
 800b92a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b92e:	ee17 0a90 	vmov	r0, s15
 800b932:	f7f4 fe31 	bl	8000598 <__aeabi_f2d>
 800b936:	a322      	add	r3, pc, #136	@ (adr r3, 800b9c0 <getPhaseCurrents+0x128>)
 800b938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93c:	f7f4 ffae 	bl	800089c <__aeabi_ddiv>
 800b940:	4602      	mov	r2, r0
 800b942:	460b      	mov	r3, r1
 800b944:	4610      	mov	r0, r2
 800b946:	4619      	mov	r1, r3
 800b948:	a31f      	add	r3, pc, #124	@ (adr r3, 800b9c8 <getPhaseCurrents+0x130>)
 800b94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94e:	f7f4 ffa5 	bl	800089c <__aeabi_ddiv>
 800b952:	4602      	mov	r2, r0
 800b954:	460b      	mov	r3, r1
 800b956:	4610      	mov	r0, r2
 800b958:	4619      	mov	r1, r3
 800b95a:	f04f 0200 	mov.w	r2, #0
 800b95e:	4b1d      	ldr	r3, [pc, #116]	@ (800b9d4 <getPhaseCurrents+0x13c>)
 800b960:	f7f4 ff9c 	bl	800089c <__aeabi_ddiv>
 800b964:	4602      	mov	r2, r0
 800b966:	460b      	mov	r3, r1
 800b968:	4614      	mov	r4, r2
 800b96a:	461d      	mov	r5, r3
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b970:	4618      	mov	r0, r3
 800b972:	f7f4 fe11 	bl	8000598 <__aeabi_f2d>
 800b976:	4602      	mov	r2, r0
 800b978:	460b      	mov	r3, r1
 800b97a:	4620      	mov	r0, r4
 800b97c:	4629      	mov	r1, r5
 800b97e:	f7f4 fcab 	bl	80002d8 <__aeabi_dsub>
 800b982:	4602      	mov	r2, r0
 800b984:	460b      	mov	r3, r1
 800b986:	4610      	mov	r0, r2
 800b988:	4619      	mov	r1, r3
 800b98a:	f7f5 f955 	bl	8000c38 <__aeabi_d2f>
 800b98e:	4602      	mov	r2, r0
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	651a      	str	r2, [r3, #80]	@ 0x50
    motor->Ib = 0 - motor->Ia - motor->Ic;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800b99a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800b9d8 <getPhaseCurrents+0x140>
 800b99e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800b9a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
}
 800b9b2:	bf00      	nop
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bdb0      	pop	{r4, r5, r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	f3af 8000 	nop.w
 800b9c0:	00000000 	.word	0x00000000
 800b9c4:	40affe00 	.word	0x40affe00
 800b9c8:	40000000 	.word	0x40000000
 800b9cc:	3f847ae1 	.word	0x3f847ae1
 800b9d0:	40533333 	.word	0x40533333
 800b9d4:	40240000 	.word	0x40240000
 800b9d8:	00000000 	.word	0x00000000

0800b9dc <getABCurrents>:
// Ibeta = 1/sqrt(3) * Ia + 1/sqrt(3) * 2Ib
/*============================================================================*/
//   calculating Alpha Beta currents from phase currents
//   - function calculating Clarke transform of the phase currents
void getABCurrents(BldcMotor *motor)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
    motor->Ialpha = motor->Ia;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	655a      	str	r2, [r3, #84]	@ 0x54
    motor->Ibeta = _1_SQRT3 * motor->Ia + _2_SQRT3 * motor->Ib;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800b9f2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800ba20 <getABCurrents+0x44>
 800b9f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800ba00:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800ba24 <getABCurrents+0x48>
 800ba04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ba08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
}
 800ba12:	bf00      	nop
 800ba14:	370c      	adds	r7, #12
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	3f13cd3a 	.word	0x3f13cd3a
 800ba24:	3f93cd3a 	.word	0x3f93cd3a

0800ba28 <getDQCurrents>:
/*============================================================================*/
// function used with the foc algorihtm
//   calculating D and Q currents from Alpha Beta currents and electrical angle
//   - function calculating Clarke transform of the phase currents
void getDQCurrents(BldcMotor *motor)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
    float ct;
    float st;
    _sincos(motor->angle_el, &st, &ct);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800ba36:	f107 020c 	add.w	r2, r7, #12
 800ba3a:	f107 0308 	add.w	r3, r7, #8
 800ba3e:	4611      	mov	r1, r2
 800ba40:	4618      	mov	r0, r3
 800ba42:	eeb0 0a67 	vmov.f32	s0, s15
 800ba46:	f000 f9df 	bl	800be08 <_sincos>
    motor->Id = motor->Ialpha * ct + motor->Ibeta * st;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800ba50:	edd7 7a03 	vldr	s15, [r7, #12]
 800ba54:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800ba5e:	edd7 7a02 	vldr	s15, [r7, #8]
 800ba62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba66:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
    motor->Iq = motor->Ibeta * ct - motor->Ialpha * st;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 800ba76:	edd7 7a03 	vldr	s15, [r7, #12]
 800ba7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800ba84:	edd7 7a02 	vldr	s15, [r7, #8]
 800ba88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
 800ba96:	bf00      	nop
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <encoderInit>:

#include "encoder.h"
#include "math_utils.h"
#include "focLib.h"
void encoderInit(MagEncoder *encoder, float _Ts, float (*_getRawAngle)(void), Direction _direction)
{
 800ba9e:	b480      	push	{r7}
 800baa0:	b085      	sub	sp, #20
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	60f8      	str	r0, [r7, #12]
 800baa6:	ed87 0a02 	vstr	s0, [r7, #8]
 800baaa:	6079      	str	r1, [r7, #4]
 800baac:	4613      	mov	r3, r2
 800baae:	70fb      	strb	r3, [r7, #3]
    encoder->angle_prev = 0;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f04f 0200 	mov.w	r2, #0
 800bab6:	601a      	str	r2, [r3, #0]
    encoder->vel_angle_prev = 0;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f04f 0200 	mov.w	r2, #0
 800babe:	605a      	str	r2, [r3, #4]
    encoder->full_rotations = 0;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	609a      	str	r2, [r3, #8]
    encoder->vel_full_rotations = 0;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2200      	movs	r2, #0
 800baca:	60da      	str	r2, [r3, #12]
    encoder->shaftAngle = 0;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f04f 0200 	mov.w	r2, #0
 800bad2:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = 0;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f04f 0200 	mov.w	r2, #0
 800bada:	615a      	str	r2, [r3, #20]
    encoder->velocity = 0;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f04f 0200 	mov.w	r2, #0
 800bae2:	619a      	str	r2, [r3, #24]
    encoder->Ts = _Ts;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	68ba      	ldr	r2, [r7, #8]
 800bae8:	61da      	str	r2, [r3, #28]
    encoder->getRawAngle = _getRawAngle;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	625a      	str	r2, [r3, #36]	@ 0x24
    encoder->direction = _direction;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	78fa      	ldrb	r2, [r7, #3]
 800baf4:	f883 2020 	strb.w	r2, [r3, #32]
}
 800baf8:	bf00      	nop
 800bafa:	3714      	adds	r7, #20
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <encoderUpdate>:

void encoderUpdate(MagEncoder *encoder)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
    float val = encoder->getRawAngle() * encoder->direction;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb10:	4798      	blx	r3
 800bb12:	eeb0 7a40 	vmov.f32	s14, s0
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800bb1c:	ee07 3a90 	vmov	s15, r3
 800bb20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb28:	edc7 7a03 	vstr	s15, [r7, #12]

    float d_angle = val - encoder->angle_prev;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	edd3 7a00 	vldr	s15, [r3]
 800bb32:	ed97 7a03 	vldr	s14, [r7, #12]
 800bb36:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb3a:	edc7 7a02 	vstr	s15, [r7, #8]
    // 圈数检测
    if (fabsf(d_angle) > (0.8f * _2PI))
 800bb3e:	edd7 7a02 	vldr	s15, [r7, #8]
 800bb42:	eef0 7ae7 	vabs.f32	s15, s15
 800bb46:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800bc00 <encoderUpdate+0xfc>
 800bb4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb52:	dd0f      	ble.n	800bb74 <encoderUpdate+0x70>
        encoder->full_rotations += (d_angle > 0) ? -1 : 1;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	edd7 7a02 	vldr	s15, [r7, #8]
 800bb5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bb60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb64:	dd02      	ble.n	800bb6c <encoderUpdate+0x68>
 800bb66:	f04f 32ff 	mov.w	r2, #4294967295
 800bb6a:	e000      	b.n	800bb6e <encoderUpdate+0x6a>
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	441a      	add	r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	609a      	str	r2, [r3, #8]

    // angle
    encoder->angle_prev = val;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	601a      	str	r2, [r3, #0]
    encoder->shaftAngle = val;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = (float)encoder->full_rotations * _2PI + encoder->angle_prev;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	ee07 3a90 	vmov	s15, r3
 800bb88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb8c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800bc04 <encoderUpdate+0x100>
 800bb90:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	edd3 7a00 	vldr	s15, [r3]
 800bb9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	edc3 7a05 	vstr	s15, [r3, #20]

    // 速度计算
    val = ((float)(encoder->full_rotations - encoder->vel_full_rotations) * _2PI + (encoder->angle_prev - encoder->vel_angle_prev)) / encoder->Ts;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	689a      	ldr	r2, [r3, #8]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	1ad3      	subs	r3, r2, r3
 800bbae:	ee07 3a90 	vmov	s15, r3
 800bbb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbb6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800bc04 <encoderUpdate+0x100>
 800bbba:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	edd3 6a00 	vldr	s13, [r3]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	edd3 7a01 	vldr	s15, [r3, #4]
 800bbca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800bbce:	ee77 6a27 	vadd.f32	s13, s14, s15
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	ed93 7a07 	vldr	s14, [r3, #28]
 800bbd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbdc:	edc7 7a03 	vstr	s15, [r7, #12]
    // 保存变量以待将来使用
    encoder->vel_angle_prev = encoder->angle_prev;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	605a      	str	r2, [r3, #4]
    encoder->vel_full_rotations = encoder->full_rotations;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	689a      	ldr	r2, [r3, #8]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	60da      	str	r2, [r3, #12]
    encoder->velocity = val;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	68fa      	ldr	r2, [r7, #12]
 800bbf4:	619a      	str	r2, [r3, #24]
}
 800bbf6:	bf00      	nop
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	40a0d97c 	.word	0x40a0d97c
 800bc04:	40c90fdb 	.word	0x40c90fdb

0800bc08 <lpfInit>:
#include "lowpass_filter.h"

void lpfInit(LowPassFilter *filter, const float _Tf, const float _dt)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	ed87 0a02 	vstr	s0, [r7, #8]
 800bc14:	edc7 0a01 	vstr	s1, [r7, #4]
    filter->Tf = _Tf;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	68ba      	ldr	r2, [r7, #8]
 800bc1c:	601a      	str	r2, [r3, #0]
    filter->dt = _dt;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	605a      	str	r2, [r3, #4]
    filter->y_prev = 0;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f04f 0200 	mov.w	r2, #0
 800bc2a:	609a      	str	r2, [r3, #8]
}
 800bc2c:	bf00      	nop
 800bc2e:	3714      	adds	r7, #20
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <lpfOperator>:

float lpfOperator(LowPassFilter *filter, float x)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	ed87 0a00 	vstr	s0, [r7]

    float alpha = filter->Tf / (filter->Tf + filter->dt);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	edd3 6a00 	vldr	s13, [r3]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	ed93 7a00 	vldr	s14, [r3]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	edd3 7a01 	vldr	s15, [r3, #4]
 800bc56:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bc5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc5e:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha * filter->y_prev + (1.0f - alpha) * x;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	ed93 7a02 	vldr	s14, [r3, #8]
 800bc68:	edd7 7a03 	vldr	s15, [r7, #12]
 800bc6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc74:	edd7 7a03 	vldr	s15, [r7, #12]
 800bc78:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800bc7c:	edd7 7a00 	vldr	s15, [r7]
 800bc80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc84:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc88:	edc7 7a02 	vstr	s15, [r7, #8]
    filter->y_prev = y;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	68ba      	ldr	r2, [r7, #8]
 800bc90:	609a      	str	r2, [r3, #8]

    return y;
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	ee07 3a90 	vmov	s15, r3
}
 800bc98:	eeb0 0a67 	vmov.f32	s0, s15
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
	...

0800bca8 <_sin>:
#include "focLib.h"
// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b086      	sub	sp, #24
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7f4 fc70 	bl	8000598 <__aeabi_f2d>
 800bcb8:	a339      	add	r3, pc, #228	@ (adr r3, 800bda0 <_sin+0xf8>)
 800bcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbe:	f7f4 fcc3 	bl	8000648 <__aeabi_dmul>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	4610      	mov	r0, r2
 800bcc8:	4619      	mov	r1, r3
 800bcca:	f7f4 ff95 	bl	8000bf8 <__aeabi_d2uiz>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	0a1b      	lsrs	r3, r3, #8
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2b3f      	cmp	r3, #63	@ 0x3f
 800bce4:	d80b      	bhi.n	800bcfe <_sin+0x56>
  {
    t1 = sine_array[i];
 800bce6:	4a2c      	ldr	r2, [pc, #176]	@ (800bd98 <_sin+0xf0>)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcee:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	4a28      	ldr	r2, [pc, #160]	@ (800bd98 <_sin+0xf0>)
 800bcf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcfa:	613b      	str	r3, [r7, #16]
 800bcfc:	e033      	b.n	800bd66 <_sin+0xbe>
  }
  else if (i < 128)
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2b7f      	cmp	r3, #127	@ 0x7f
 800bd02:	d80e      	bhi.n	800bd22 <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800bd0a:	4a23      	ldr	r2, [pc, #140]	@ (800bd98 <_sin+0xf0>)
 800bd0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd10:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800bd18:	4a1f      	ldr	r2, [pc, #124]	@ (800bd98 <_sin+0xf0>)
 800bd1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd1e:	613b      	str	r3, [r7, #16]
 800bd20:	e021      	b.n	800bd66 <_sin+0xbe>
  }
  else if (i < 192)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2bbf      	cmp	r3, #191	@ 0xbf
 800bd26:	d80e      	bhi.n	800bd46 <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	3b80      	subs	r3, #128	@ 0x80
 800bd2c:	4a1a      	ldr	r2, [pc, #104]	@ (800bd98 <_sin+0xf0>)
 800bd2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd32:	425b      	negs	r3, r3
 800bd34:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	3b7f      	subs	r3, #127	@ 0x7f
 800bd3a:	4a17      	ldr	r2, [pc, #92]	@ (800bd98 <_sin+0xf0>)
 800bd3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd40:	425b      	negs	r3, r3
 800bd42:	613b      	str	r3, [r7, #16]
 800bd44:	e00f      	b.n	800bd66 <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800bd4c:	4a12      	ldr	r2, [pc, #72]	@ (800bd98 <_sin+0xf0>)
 800bd4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd52:	425b      	negs	r3, r3
 800bd54:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800bd5c:	4a0e      	ldr	r2, [pc, #56]	@ (800bd98 <_sin+0xf0>)
 800bd5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd62:	425b      	negs	r3, r3
 800bd64:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800bd66:	693a      	ldr	r2, [r7, #16]
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	1ad3      	subs	r3, r2, r3
 800bd6c:	68ba      	ldr	r2, [r7, #8]
 800bd6e:	fb02 f303 	mul.w	r3, r2, r3
 800bd72:	121a      	asrs	r2, r3, #8
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	4413      	add	r3, r2
 800bd78:	ee07 3a90 	vmov	s15, r3
 800bd7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd80:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800bd9c <_sin+0xf4>
 800bd84:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800bd88:	eeb0 0a67 	vmov.f32	s0, s15
 800bd8c:	3718      	adds	r7, #24
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	f3af 8000 	nop.w
 800bd98:	2000000c 	.word	0x2000000c
 800bd9c:	38000000 	.word	0x38000000
 800bda0:	6446f9b4 	.word	0x6446f9b4
 800bda4:	40c45f30 	.word	0x40c45f30

0800bda8 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800bdb2:	edd7 7a01 	vldr	s15, [r7, #4]
 800bdb6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800be00 <_cos+0x58>
 800bdba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bdbe:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800bdc2:	edd7 7a03 	vldr	s15, [r7, #12]
 800bdc6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800be04 <_cos+0x5c>
 800bdca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bdce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdd2:	dd06      	ble.n	800bde2 <_cos+0x3a>
 800bdd4:	edd7 7a03 	vldr	s15, [r7, #12]
 800bdd8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800be04 <_cos+0x5c>
 800bddc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bde0:	e001      	b.n	800bde6 <_cos+0x3e>
 800bde2:	edd7 7a03 	vldr	s15, [r7, #12]
 800bde6:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800bdea:	ed97 0a03 	vldr	s0, [r7, #12]
 800bdee:	f7ff ff5b 	bl	800bca8 <_sin>
 800bdf2:	eef0 7a40 	vmov.f32	s15, s0
}
 800bdf6:	eeb0 0a67 	vmov.f32	s0, s15
 800bdfa:	3710      	adds	r7, #16
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}
 800be00:	3fc90fdb 	.word	0x3fc90fdb
 800be04:	40c90fdb 	.word	0x40c90fdb

0800be08 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	ed87 0a03 	vstr	s0, [r7, #12]
 800be12:	60b8      	str	r0, [r7, #8]
 800be14:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800be16:	ed97 0a03 	vldr	s0, [r7, #12]
 800be1a:	f7ff ff45 	bl	800bca8 <_sin>
 800be1e:	eef0 7a40 	vmov.f32	s15, s0
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800be28:	ed97 0a03 	vldr	s0, [r7, #12]
 800be2c:	f7ff ffbc 	bl	800bda8 <_cos>
 800be30:	eef0 7a40 	vmov.f32	s15, s0
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	edc3 7a00 	vstr	s15, [r3]
}
 800be3a:	bf00      	nop
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	0000      	movs	r0, r0
 800be44:	0000      	movs	r0, r0
	...

0800be48 <_normalizeAngle>:
  return r;
}

// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f7f4 fba0 	bl	8000598 <__aeabi_f2d>
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 800bea8 <_normalizeAngle+0x60>
 800be60:	ec43 2b10 	vmov	d0, r2, r3
 800be64:	f007 fce8 	bl	8013838 <fmod>
 800be68:	ec53 2b10 	vmov	r2, r3, d0
 800be6c:	4610      	mov	r0, r2
 800be6e:	4619      	mov	r1, r3
 800be70:	f7f4 fee2 	bl	8000c38 <__aeabi_d2f>
 800be74:	4603      	mov	r3, r0
 800be76:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 800be78:	edd7 7a03 	vldr	s15, [r7, #12]
 800be7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800be80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be84:	db02      	blt.n	800be8c <_normalizeAngle+0x44>
 800be86:	edd7 7a03 	vldr	s15, [r7, #12]
 800be8a:	e005      	b.n	800be98 <_normalizeAngle+0x50>
 800be8c:	edd7 7a03 	vldr	s15, [r7, #12]
 800be90:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800beb0 <_normalizeAngle+0x68>
 800be94:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800be98:	eeb0 0a67 	vmov.f32	s0, s15
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	f3af 8000 	nop.w
 800bea8:	60000000 	.word	0x60000000
 800beac:	401921fb 	.word	0x401921fb
 800beb0:	40c90fdb 	.word	0x40c90fdb

0800beb4 <_electricalAngle>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	ed87 0a01 	vstr	s0, [r7, #4]
 800bebe:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	ee07 3a90 	vmov	s15, r3
 800bec6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800beca:	edd7 7a01 	vldr	s15, [r7, #4]
 800bece:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800bed2:	eeb0 0a67 	vmov.f32	s0, s15
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <pidInit>:
#include "pid.h"
#include "math_utils.h"

void pidInit(PidController *pidController, float _P, float _I, float _D, float _ramp, float _limit, float _Ts)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b089      	sub	sp, #36	@ 0x24
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	61f8      	str	r0, [r7, #28]
 800bee8:	ed87 0a06 	vstr	s0, [r7, #24]
 800beec:	edc7 0a05 	vstr	s1, [r7, #20]
 800bef0:	ed87 1a04 	vstr	s2, [r7, #16]
 800bef4:	edc7 1a03 	vstr	s3, [r7, #12]
 800bef8:	ed87 2a02 	vstr	s4, [r7, #8]
 800befc:	edc7 2a01 	vstr	s5, [r7, #4]
    pidController->P = _P;
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	69ba      	ldr	r2, [r7, #24]
 800bf04:	601a      	str	r2, [r3, #0]
    pidController->I = _I;
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	697a      	ldr	r2, [r7, #20]
 800bf0a:	605a      	str	r2, [r3, #4]
    pidController->D = _D;
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	693a      	ldr	r2, [r7, #16]
 800bf10:	609a      	str	r2, [r3, #8]
    pidController->output_ramp = _ramp;
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	68fa      	ldr	r2, [r7, #12]
 800bf16:	60da      	str	r2, [r3, #12]
    pidController->limit = _limit;
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	68ba      	ldr	r2, [r7, #8]
 800bf1c:	611a      	str	r2, [r3, #16]
    pidController->Ts = _Ts;
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	621a      	str	r2, [r3, #32]
    pidController->error_prev = 0;
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	f04f 0200 	mov.w	r2, #0
 800bf2a:	615a      	str	r2, [r3, #20]
    pidController->output_prev = 0;
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	f04f 0200 	mov.w	r2, #0
 800bf32:	619a      	str	r2, [r3, #24]
    pidController->integral_prev = 0;
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	f04f 0200 	mov.w	r2, #0
 800bf3a:	61da      	str	r2, [r3, #28]
}
 800bf3c:	bf00      	nop
 800bf3e:	3724      	adds	r7, #36	@ 0x24
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <pidOperator>:

// PID controller function
float pidOperator(PidController *pidController, float error)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b08b      	sub	sp, #44	@ 0x2c
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	ed87 0a00 	vstr	s0, [r7]
    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = pidController->P * error;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	edd3 7a00 	vldr	s15, [r3]
 800bf5a:	ed97 7a00 	vldr	s14, [r7]
 800bf5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf62:	edc7 7a08 	vstr	s15, [r7, #32]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float a = 0.5f * (error + pidController->error_prev);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	ed93 7a05 	vldr	s14, [r3, #20]
 800bf6c:	edd7 7a00 	vldr	s15, [r7]
 800bf70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf74:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800bf78:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bf7c:	edc7 7a07 	vstr	s15, [r7, #28]
    float b = pidController->I * pidController->Ts;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	ed93 7a01 	vldr	s14, [r3, #4]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	edd3 7a08 	vldr	s15, [r3, #32]
 800bf8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf90:	edc7 7a06 	vstr	s15, [r7, #24]
    float integral = pidController->integral_prev + pidController->I * pidController->Ts * 0.5f * (error + pidController->error_prev);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	ed93 7a07 	vldr	s14, [r3, #28]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	edd3 6a01 	vldr	s13, [r3, #4]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	edd3 7a08 	vldr	s15, [r3, #32]
 800bfa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bfaa:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800bfae:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	ed93 6a05 	vldr	s12, [r3, #20]
 800bfb8:	edd7 7a00 	vldr	s15, [r7]
 800bfbc:	ee76 7a27 	vadd.f32	s15, s12, s15
 800bfc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bfc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfc8:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -pidController->limit, pidController->limit);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	edd3 7a04 	vldr	s15, [r3, #16]
 800bfd2:	eef1 7a67 	vneg.f32	s15, s15
 800bfd6:	ed97 7a05 	vldr	s14, [r7, #20]
 800bfda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bfde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfe2:	d505      	bpl.n	800bff0 <pidOperator+0xa8>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	edd3 7a04 	vldr	s15, [r3, #16]
 800bfea:	eef1 7a67 	vneg.f32	s15, s15
 800bfee:	e00f      	b.n	800c010 <pidOperator+0xc8>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	edd3 7a04 	vldr	s15, [r3, #16]
 800bff6:	ed97 7a05 	vldr	s14, [r7, #20]
 800bffa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c002:	dd03      	ble.n	800c00c <pidOperator+0xc4>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	edd3 7a04 	vldr	s15, [r3, #16]
 800c00a:	e001      	b.n	800c010 <pidOperator+0xc8>
 800c00c:	edd7 7a05 	vldr	s15, [r7, #20]
 800c010:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = pidController->D * (error - pidController->error_prev) / pidController->Ts;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	ed93 7a02 	vldr	s14, [r3, #8]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	edd3 7a05 	vldr	s15, [r3, #20]
 800c020:	edd7 6a00 	vldr	s13, [r7]
 800c024:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c028:	ee67 6a27 	vmul.f32	s13, s14, s15
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	ed93 7a08 	vldr	s14, [r3, #32]
 800c032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c036:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 800c03a:	ed97 7a08 	vldr	s14, [r7, #32]
 800c03e:	edd7 7a05 	vldr	s15, [r7, #20]
 800c042:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c046:	ed97 7a04 	vldr	s14, [r7, #16]
 800c04a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c04e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // antiwindup - limit the output variable
    output = _constrain(output, -pidController->limit, pidController->limit);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	edd3 7a04 	vldr	s15, [r3, #16]
 800c058:	eef1 7a67 	vneg.f32	s15, s15
 800c05c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c060:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c068:	d505      	bpl.n	800c076 <pidOperator+0x12e>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	edd3 7a04 	vldr	s15, [r3, #16]
 800c070:	eef1 7a67 	vneg.f32	s15, s15
 800c074:	e00f      	b.n	800c096 <pidOperator+0x14e>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	edd3 7a04 	vldr	s15, [r3, #16]
 800c07c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c080:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c088:	dd03      	ble.n	800c092 <pidOperator+0x14a>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	edd3 7a04 	vldr	s15, [r3, #16]
 800c090:	e001      	b.n	800c096 <pidOperator+0x14e>
 800c092:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c096:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // if output ramp defined
    if (pidController->output_ramp > 0)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	edd3 7a03 	vldr	s15, [r3, #12]
 800c0a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a8:	dd42      	ble.n	800c130 <pidOperator+0x1e8>
    {
        // limit the acceleration by ramping the output
        float output_rate = (output - pidController->output_prev) / pidController->Ts;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	edd3 7a06 	vldr	s15, [r3, #24]
 800c0b0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c0b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	ed93 7a08 	vldr	s14, [r3, #32]
 800c0be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0c2:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > pidController->output_ramp)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	edd3 7a03 	vldr	s15, [r3, #12]
 800c0cc:	ed97 7a03 	vldr	s14, [r7, #12]
 800c0d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c0d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d8:	dd0f      	ble.n	800c0fa <pidOperator+0x1b2>
            output = pidController->output_prev + pidController->output_ramp * pidController->Ts;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	ed93 7a06 	vldr	s14, [r3, #24]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	edd3 6a03 	vldr	s13, [r3, #12]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	edd3 7a08 	vldr	s15, [r3, #32]
 800c0ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0f4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800c0f8:	e01a      	b.n	800c130 <pidOperator+0x1e8>
        else if (output_rate < -pidController->output_ramp)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	edd3 7a03 	vldr	s15, [r3, #12]
 800c100:	eef1 7a67 	vneg.f32	s15, s15
 800c104:	ed97 7a03 	vldr	s14, [r7, #12]
 800c108:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c110:	d50e      	bpl.n	800c130 <pidOperator+0x1e8>
            output = pidController->output_prev - pidController->output_ramp * pidController->Ts;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	ed93 7a06 	vldr	s14, [r3, #24]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	edd3 6a03 	vldr	s13, [r3, #12]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	edd3 7a08 	vldr	s15, [r3, #32]
 800c124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c12c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    // saving for the next pass
    pidController->integral_prev = integral;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	697a      	ldr	r2, [r7, #20]
 800c134:	61da      	str	r2, [r3, #28]
    pidController->output_prev = output;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c13a:	619a      	str	r2, [r3, #24]
    pidController->error_prev = error;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	683a      	ldr	r2, [r7, #0]
 800c140:	615a      	str	r2, [r3, #20]
    return output;
 800c142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c144:	ee07 3a90 	vmov	s15, r3
}
 800c148:	eeb0 0a67 	vmov.f32	s0, s15
 800c14c:	372c      	adds	r7, #44	@ 0x2c
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr

0800c156 <reset>:

void reset(PidController *pidController)
{
 800c156:	b480      	push	{r7}
 800c158:	b083      	sub	sp, #12
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
    pidController->integral_prev = 0.0f;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f04f 0200 	mov.w	r2, #0
 800c164:	61da      	str	r2, [r3, #28]
    pidController->output_prev = 0.0f;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f04f 0200 	mov.w	r2, #0
 800c16c:	619a      	str	r2, [r3, #24]
    pidController->error_prev = 0.0f;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f04f 0200 	mov.w	r2, #0
 800c174:	615a      	str	r2, [r3, #20]
}
 800c176:	bf00      	nop
 800c178:	370c      	adds	r7, #12
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
	...

0800c184 <setTorque>:
    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
}
#elif 1

void setTorque(BldcMotor *motor, float Uq, float Ud, float angle_el)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b08e      	sub	sp, #56	@ 0x38
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	ed87 0a02 	vstr	s0, [r7, #8]
 800c190:	edc7 0a01 	vstr	s1, [r7, #4]
 800c194:	ed87 1a00 	vstr	s2, [r7]
    float Ualpha, Ubeta;
    float Ua, Ub, Uc;

    // Sinusoidal PWM modulation
    // Inverse Park + Clarke transformation
    _sincos(angle_el, &_sa, &_ca);
 800c198:	f107 0214 	add.w	r2, r7, #20
 800c19c:	f107 0310 	add.w	r3, r7, #16
 800c1a0:	4611      	mov	r1, r2
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	ed97 0a00 	vldr	s0, [r7]
 800c1a8:	f7ff fe2e 	bl	800be08 <_sincos>

    // Inverse park transform
    Ualpha = _ca * Ud - _sa * Uq; // -sin(angle) * Uq;
 800c1ac:	ed97 7a05 	vldr	s14, [r7, #20]
 800c1b0:	edd7 7a01 	vldr	s15, [r7, #4]
 800c1b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1b8:	edd7 6a04 	vldr	s13, [r7, #16]
 800c1bc:	edd7 7a02 	vldr	s15, [r7, #8]
 800c1c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1c8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Ubeta = _sa * Ud + _ca * Uq;  //  cos(angle) * Uq;
 800c1cc:	ed97 7a04 	vldr	s14, [r7, #16]
 800c1d0:	edd7 7a01 	vldr	s15, [r7, #4]
 800c1d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1d8:	edd7 6a05 	vldr	s13, [r7, #20]
 800c1dc:	edd7 7a02 	vldr	s15, [r7, #8]
 800c1e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1e8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Clarke transform
    Ua = Ualpha;
 800c1ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Ub = -0.5f * Ualpha + _SQRT3_2 * Ubeta;
 800c1f0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800c1f4:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800c1f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c1fc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c200:	eddf 6a95 	vldr	s13, [pc, #596]	@ 800c458 <setTorque+0x2d4>
 800c204:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c208:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c20c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc = -0.5f * Ualpha - _SQRT3_2 * Ubeta;
 800c210:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800c214:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800c218:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c21c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c220:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 800c458 <setTorque+0x2d4>
 800c224:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c22c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    center = U_DC / 2;
 800c230:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 800c234:	623b      	str	r3, [r7, #32]

    // discussed here: https://community.simplefoc.com/t/embedded-world-2023-stm32-cordic-co-processor/3107/165?u=candas1
    // a bit more info here: https://microchipdeveloper.com/mct5001:which-zsm-is-best
    // Midpoint Clamp
    float Umin = min(Ua, min(Ub, Uc));
 800c236:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c23a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c23e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c246:	d502      	bpl.n	800c24e <setTorque+0xca>
 800c248:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800c24c:	e001      	b.n	800c252 <setTorque+0xce>
 800c24e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c252:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800c256:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c25e:	dd01      	ble.n	800c264 <setTorque+0xe0>
 800c260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c262:	e00b      	b.n	800c27c <setTorque+0xf8>
 800c264:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c268:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c26c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c274:	d501      	bpl.n	800c27a <setTorque+0xf6>
 800c276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c278:	e000      	b.n	800c27c <setTorque+0xf8>
 800c27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c27c:	61fb      	str	r3, [r7, #28]
    float Umax = max(Ua, max(Ub, Uc));
 800c27e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c282:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c286:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c28e:	dd02      	ble.n	800c296 <setTorque+0x112>
 800c290:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800c294:	e001      	b.n	800c29a <setTorque+0x116>
 800c296:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c29a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800c29e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a6:	d501      	bpl.n	800c2ac <setTorque+0x128>
 800c2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2aa:	e00b      	b.n	800c2c4 <setTorque+0x140>
 800c2ac:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c2b0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c2b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2bc:	dd01      	ble.n	800c2c2 <setTorque+0x13e>
 800c2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2c0:	e000      	b.n	800c2c4 <setTorque+0x140>
 800c2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c4:	61bb      	str	r3, [r7, #24]
    center -= (Umax + Umin) / 2;
 800c2c6:	ed97 7a06 	vldr	s14, [r7, #24]
 800c2ca:	edd7 7a07 	vldr	s15, [r7, #28]
 800c2ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c2d2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800c2d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c2da:	ed97 7a08 	vldr	s14, [r7, #32]
 800c2de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2e2:	edc7 7a08 	vstr	s15, [r7, #32]

    Ua += center;
 800c2e6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800c2ea:	edd7 7a08 	vldr	s15, [r7, #32]
 800c2ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2f2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    Ub += center;
 800c2f6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c2fa:	edd7 7a08 	vldr	s15, [r7, #32]
 800c2fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c302:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc += center;
 800c306:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c30a:	edd7 7a08 	vldr	s15, [r7, #32]
 800c30e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c312:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    motor->Ta = _constrain(Ua / U_DC, 0.0f, 1.0f);
 800c316:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800c31a:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c31e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c322:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c32a:	d502      	bpl.n	800c332 <setTorque+0x1ae>
 800c32c:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 800c45c <setTorque+0x2d8>
 800c330:	e015      	b.n	800c35e <setTorque+0x1da>
 800c332:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800c336:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c33a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c33e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c342:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c34a:	dd02      	ble.n	800c352 <setTorque+0x1ce>
 800c34c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c350:	e005      	b.n	800c35e <setTorque+0x1da>
 800c352:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800c356:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c35a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
    motor->Tb = _constrain(Ub / U_DC, 0.0f, 1.0f);
 800c364:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c368:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c36c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c370:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c378:	d502      	bpl.n	800c380 <setTorque+0x1fc>
 800c37a:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800c45c <setTorque+0x2d8>
 800c37e:	e015      	b.n	800c3ac <setTorque+0x228>
 800c380:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c384:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c388:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c38c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c390:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c398:	dd02      	ble.n	800c3a0 <setTorque+0x21c>
 800c39a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c39e:	e005      	b.n	800c3ac <setTorque+0x228>
 800c3a0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c3a4:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c3a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
    motor->Tc = _constrain(Uc / U_DC, 0.0f, 1.0f);
 800c3b2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c3b6:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c3ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c3be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3c6:	d502      	bpl.n	800c3ce <setTorque+0x24a>
 800c3c8:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800c45c <setTorque+0x2d8>
 800c3cc:	e015      	b.n	800c3fa <setTorque+0x276>
 800c3ce:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c3d2:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c3d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c3da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c3de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3e6:	dd02      	ble.n	800c3ee <setTorque+0x26a>
 800c3e8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c3ec:	e005      	b.n	800c3fa <setTorque+0x276>
 800c3ee:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c3f2:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c3f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	edc3 7a4c 	vstr	s15, [r3, #304]	@ 0x130

    motor->updatePwm(HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tc);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 800c40c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800c460 <setTorque+0x2dc>
 800c410:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c418:	ee17 2a90 	vmov	r2, s15
 800c41c:	b290      	uxth	r0, r2
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	edd2 7a4a 	vldr	s15, [r2, #296]	@ 0x128
 800c424:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c460 <setTorque+0x2dc>
 800c428:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c42c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c430:	ee17 2a90 	vmov	r2, s15
 800c434:	b291      	uxth	r1, r2
 800c436:	68fa      	ldr	r2, [r7, #12]
 800c438:	edd2 7a4c 	vldr	s15, [r2, #304]	@ 0x130
 800c43c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800c460 <setTorque+0x2dc>
 800c440:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c448:	ee17 2a90 	vmov	r2, s15
 800c44c:	b292      	uxth	r2, r2
 800c44e:	4798      	blx	r3
    // set the voltages in driver
    // driver->setPwm(Ua, Ub, Uc);
}
 800c450:	bf00      	nop
 800c452:	3738      	adds	r7, #56	@ 0x38
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	3f5db3d7 	.word	0x3f5db3d7
 800c45c:	00000000 	.word	0x00000000
 800c460:	45fa0000 	.word	0x45fa0000

0800c464 <motorInit>:
static void working(void);

// should be called before interruption enabled

static void motorInit()
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b08c      	sub	sp, #48	@ 0x30
 800c468:	af00      	add	r7, sp, #0
#if 1
    motor1.pole_pairs = 7;
 800c46a:	4bc6      	ldr	r3, [pc, #792]	@ (800c784 <motorInit+0x320>)
 800c46c:	2207      	movs	r2, #7
 800c46e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    motor1.updatePwm = updatePwm1;
 800c472:	4bc4      	ldr	r3, [pc, #784]	@ (800c784 <motorInit+0x320>)
 800c474:	4ac4      	ldr	r2, [pc, #784]	@ (800c788 <motorInit+0x324>)
 800c476:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor1.startPwm = startPwm1;
 800c47a:	4bc2      	ldr	r3, [pc, #776]	@ (800c784 <motorInit+0x320>)
 800c47c:	4ac3      	ldr	r2, [pc, #780]	@ (800c78c <motorInit+0x328>)
 800c47e:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor1.stopPwm = stopPwm1;
 800c482:	4bc0      	ldr	r3, [pc, #768]	@ (800c784 <motorInit+0x320>)
 800c484:	4ac2      	ldr	r2, [pc, #776]	@ (800c790 <motorInit+0x32c>)
 800c486:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    motor1.zeroElectricAngleOffSet = 0;
 800c48a:	4bbe      	ldr	r3, [pc, #760]	@ (800c784 <motorInit+0x320>)
 800c48c:	f04f 0200 	mov.w	r2, #0
 800c490:	635a      	str	r2, [r3, #52]	@ 0x34
    motor1.Ts = 100 * 1e-6f;
 800c492:	4bbc      	ldr	r3, [pc, #752]	@ (800c784 <motorInit+0x320>)
 800c494:	4abf      	ldr	r2, [pc, #764]	@ (800c794 <motorInit+0x330>)
 800c496:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor1.torqueType = VOLTAGE;
 800c498:	4bba      	ldr	r3, [pc, #744]	@ (800c784 <motorInit+0x320>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    motor1.controlType = TORQUE;
 800c4a0:	4bb8      	ldr	r3, [pc, #736]	@ (800c784 <motorInit+0x320>)
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    motor1.state = MOTOR_CALIBRATE;
 800c4a8:	4bb6      	ldr	r3, [pc, #728]	@ (800c784 <motorInit+0x320>)
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor1.magEncoder, motor1.Ts, _1_MT6701_GetRawAngle, UNKNOWN);
 800c4b0:	4bb4      	ldr	r3, [pc, #720]	@ (800c784 <motorInit+0x320>)
 800c4b2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	49b7      	ldr	r1, [pc, #732]	@ (800c798 <motorInit+0x334>)
 800c4ba:	eeb0 0a67 	vmov.f32	s0, s15
 800c4be:	48b1      	ldr	r0, [pc, #708]	@ (800c784 <motorInit+0x320>)
 800c4c0:	f7ff faed 	bl	800ba9e <encoderInit>

    if (motor1.controlType == TORQUE && motor1.torqueType == CURRENT)
 800c4c4:	4baf      	ldr	r3, [pc, #700]	@ (800c784 <motorInit+0x320>)
 800c4c6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d11b      	bne.n	800c506 <motorInit+0xa2>
 800c4ce:	4bad      	ldr	r3, [pc, #692]	@ (800c784 <motorInit+0x320>)
 800c4d0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d116      	bne.n	800c506 <motorInit+0xa2>
    {
        float kp, ki;
        kp = 500.0f;
 800c4d8:	4bb0      	ldr	r3, [pc, #704]	@ (800c79c <motorInit+0x338>)
 800c4da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ki = 50.0f;
 800c4dc:	4bb0      	ldr	r3, [pc, #704]	@ (800c7a0 <motorInit+0x33c>)
 800c4de:	62bb      	str	r3, [r7, #40]	@ 0x28
        pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800c4e0:	4ba8      	ldr	r3, [pc, #672]	@ (800c784 <motorInit+0x320>)
 800c4e2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c4e6:	eef0 2a67 	vmov.f32	s5, s15
 800c4ea:	ed9f 2aae 	vldr	s4, [pc, #696]	@ 800c7a4 <motorInit+0x340>
 800c4ee:	eddf 1aae 	vldr	s3, [pc, #696]	@ 800c7a8 <motorInit+0x344>
 800c4f2:	ed9f 1aad 	vldr	s2, [pc, #692]	@ 800c7a8 <motorInit+0x344>
 800c4f6:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 800c4fa:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800c4fe:	48ab      	ldr	r0, [pc, #684]	@ (800c7ac <motorInit+0x348>)
 800c500:	f7ff fcee 	bl	800bee0 <pidInit>
    {
 800c504:	e0c0      	b.n	800c688 <motorInit+0x224>
        // pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
    }
    else if (motor1.controlType == VELOCITY)
 800c506:	4b9f      	ldr	r3, [pc, #636]	@ (800c784 <motorInit+0x320>)
 800c508:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c50c:	2b02      	cmp	r3, #2
 800c50e:	d152      	bne.n	800c5b6 <motorInit+0x152>
    {
        if (motor1.torqueType == CURRENT)
 800c510:	4b9c      	ldr	r3, [pc, #624]	@ (800c784 <motorInit+0x320>)
 800c512:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c516:	2b01      	cmp	r3, #1
 800c518:	d13a      	bne.n	800c590 <motorInit+0x12c>
        {
            pidInit(&motor1.velocityPID, 0.02, 0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800c51a:	4b9a      	ldr	r3, [pc, #616]	@ (800c784 <motorInit+0x320>)
 800c51c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c520:	eef0 2a67 	vmov.f32	s5, s15
 800c524:	ed9f 2aa2 	vldr	s4, [pc, #648]	@ 800c7b0 <motorInit+0x34c>
 800c528:	eddf 1a9f 	vldr	s3, [pc, #636]	@ 800c7a8 <motorInit+0x344>
 800c52c:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 800c7a8 <motorInit+0x344>
 800c530:	eddf 0aa0 	vldr	s1, [pc, #640]	@ 800c7b4 <motorInit+0x350>
 800c534:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 800c7b8 <motorInit+0x354>
 800c538:	48a0      	ldr	r0, [pc, #640]	@ (800c7bc <motorInit+0x358>)
 800c53a:	f7ff fcd1 	bl	800bee0 <pidInit>

            float kp, ki;
            kp = 500.0f;
 800c53e:	4b97      	ldr	r3, [pc, #604]	@ (800c79c <motorInit+0x338>)
 800c540:	61fb      	str	r3, [r7, #28]
            ki = 50.0f;
 800c542:	4b97      	ldr	r3, [pc, #604]	@ (800c7a0 <motorInit+0x33c>)
 800c544:	61bb      	str	r3, [r7, #24]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800c546:	4b8f      	ldr	r3, [pc, #572]	@ (800c784 <motorInit+0x320>)
 800c548:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c54c:	eef0 2a67 	vmov.f32	s5, s15
 800c550:	ed9f 2a94 	vldr	s4, [pc, #592]	@ 800c7a4 <motorInit+0x340>
 800c554:	eddf 1a94 	vldr	s3, [pc, #592]	@ 800c7a8 <motorInit+0x344>
 800c558:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 800c7a8 <motorInit+0x344>
 800c55c:	edd7 0a06 	vldr	s1, [r7, #24]
 800c560:	ed97 0a07 	vldr	s0, [r7, #28]
 800c564:	4891      	ldr	r0, [pc, #580]	@ (800c7ac <motorInit+0x348>)
 800c566:	f7ff fcbb 	bl	800bee0 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800c56a:	4b86      	ldr	r3, [pc, #536]	@ (800c784 <motorInit+0x320>)
 800c56c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c570:	eef0 2a67 	vmov.f32	s5, s15
 800c574:	ed9f 2a8b 	vldr	s4, [pc, #556]	@ 800c7a4 <motorInit+0x340>
 800c578:	eddf 1a8b 	vldr	s3, [pc, #556]	@ 800c7a8 <motorInit+0x344>
 800c57c:	ed9f 1a8a 	vldr	s2, [pc, #552]	@ 800c7a8 <motorInit+0x344>
 800c580:	edd7 0a06 	vldr	s1, [r7, #24]
 800c584:	ed97 0a07 	vldr	s0, [r7, #28]
 800c588:	488d      	ldr	r0, [pc, #564]	@ (800c7c0 <motorInit+0x35c>)
 800c58a:	f7ff fca9 	bl	800bee0 <pidInit>
 800c58e:	e07b      	b.n	800c688 <motorInit+0x224>
        }
        else
        {
            pidInit(&motor1.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor1.Ts);
 800c590:	4b7c      	ldr	r3, [pc, #496]	@ (800c784 <motorInit+0x320>)
 800c592:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c596:	eef0 2a67 	vmov.f32	s5, s15
 800c59a:	ed9f 2a82 	vldr	s4, [pc, #520]	@ 800c7a4 <motorInit+0x340>
 800c59e:	eddf 1a82 	vldr	s3, [pc, #520]	@ 800c7a8 <motorInit+0x344>
 800c5a2:	ed9f 1a81 	vldr	s2, [pc, #516]	@ 800c7a8 <motorInit+0x344>
 800c5a6:	eddf 0a87 	vldr	s1, [pc, #540]	@ 800c7c4 <motorInit+0x360>
 800c5aa:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 800c7c8 <motorInit+0x364>
 800c5ae:	4883      	ldr	r0, [pc, #524]	@ (800c7bc <motorInit+0x358>)
 800c5b0:	f7ff fc96 	bl	800bee0 <pidInit>
 800c5b4:	e068      	b.n	800c688 <motorInit+0x224>
        }
    }
    else if (motor1.controlType == ANGLE)
 800c5b6:	4b73      	ldr	r3, [pc, #460]	@ (800c784 <motorInit+0x320>)
 800c5b8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c5bc:	2b03      	cmp	r3, #3
 800c5be:	d163      	bne.n	800c688 <motorInit+0x224>
    {
        if (motor1.torqueType == CURRENT)
 800c5c0:	4b70      	ldr	r3, [pc, #448]	@ (800c784 <motorInit+0x320>)
 800c5c2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c5c6:	2b01      	cmp	r3, #1
 800c5c8:	d14c      	bne.n	800c664 <motorInit+0x200>
        {
            pidInit(&motor1.anglePID, 2, 0, 0, 0, MAX_VELOCITY, motor1.Ts);
 800c5ca:	4b6e      	ldr	r3, [pc, #440]	@ (800c784 <motorInit+0x320>)
 800c5cc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c5d0:	eef0 2a67 	vmov.f32	s5, s15
 800c5d4:	ed9f 2a7d 	vldr	s4, [pc, #500]	@ 800c7cc <motorInit+0x368>
 800c5d8:	eddf 1a73 	vldr	s3, [pc, #460]	@ 800c7a8 <motorInit+0x344>
 800c5dc:	ed9f 1a72 	vldr	s2, [pc, #456]	@ 800c7a8 <motorInit+0x344>
 800c5e0:	eddf 0a71 	vldr	s1, [pc, #452]	@ 800c7a8 <motorInit+0x344>
 800c5e4:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800c5e8:	4879      	ldr	r0, [pc, #484]	@ (800c7d0 <motorInit+0x36c>)
 800c5ea:	f7ff fc79 	bl	800bee0 <pidInit>

            pidInit(&motor1.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800c5ee:	4b65      	ldr	r3, [pc, #404]	@ (800c784 <motorInit+0x320>)
 800c5f0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c5f4:	eef0 2a67 	vmov.f32	s5, s15
 800c5f8:	ed9f 2a6d 	vldr	s4, [pc, #436]	@ 800c7b0 <motorInit+0x34c>
 800c5fc:	eddf 1a6a 	vldr	s3, [pc, #424]	@ 800c7a8 <motorInit+0x344>
 800c600:	ed9f 1a69 	vldr	s2, [pc, #420]	@ 800c7a8 <motorInit+0x344>
 800c604:	eddf 0a73 	vldr	s1, [pc, #460]	@ 800c7d4 <motorInit+0x370>
 800c608:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 800c7d8 <motorInit+0x374>
 800c60c:	486b      	ldr	r0, [pc, #428]	@ (800c7bc <motorInit+0x358>)
 800c60e:	f7ff fc67 	bl	800bee0 <pidInit>

            // pidInit(&motor1.anglePID, -0.001, -0.0001, 0, 0, CURRENT_MAX / 2, motor1.Ts);

            float kp, ki;
            kp = -200;
 800c612:	4b72      	ldr	r3, [pc, #456]	@ (800c7dc <motorInit+0x378>)
 800c614:	627b      	str	r3, [r7, #36]	@ 0x24
            ki = -20;
 800c616:	4b72      	ldr	r3, [pc, #456]	@ (800c7e0 <motorInit+0x37c>)
 800c618:	623b      	str	r3, [r7, #32]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800c61a:	4b5a      	ldr	r3, [pc, #360]	@ (800c784 <motorInit+0x320>)
 800c61c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c620:	eef0 2a67 	vmov.f32	s5, s15
 800c624:	ed9f 2a5f 	vldr	s4, [pc, #380]	@ 800c7a4 <motorInit+0x340>
 800c628:	eddf 1a5f 	vldr	s3, [pc, #380]	@ 800c7a8 <motorInit+0x344>
 800c62c:	ed9f 1a5e 	vldr	s2, [pc, #376]	@ 800c7a8 <motorInit+0x344>
 800c630:	edd7 0a08 	vldr	s1, [r7, #32]
 800c634:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800c638:	485c      	ldr	r0, [pc, #368]	@ (800c7ac <motorInit+0x348>)
 800c63a:	f7ff fc51 	bl	800bee0 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800c63e:	4b51      	ldr	r3, [pc, #324]	@ (800c784 <motorInit+0x320>)
 800c640:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c644:	eef0 2a67 	vmov.f32	s5, s15
 800c648:	ed9f 2a56 	vldr	s4, [pc, #344]	@ 800c7a4 <motorInit+0x340>
 800c64c:	eddf 1a56 	vldr	s3, [pc, #344]	@ 800c7a8 <motorInit+0x344>
 800c650:	ed9f 1a55 	vldr	s2, [pc, #340]	@ 800c7a8 <motorInit+0x344>
 800c654:	edd7 0a08 	vldr	s1, [r7, #32]
 800c658:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800c65c:	4858      	ldr	r0, [pc, #352]	@ (800c7c0 <motorInit+0x35c>)
 800c65e:	f7ff fc3f 	bl	800bee0 <pidInit>
 800c662:	e011      	b.n	800c688 <motorInit+0x224>
        }
        else
        {
            pidInit(&motor1.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor1.Ts);
 800c664:	4b47      	ldr	r3, [pc, #284]	@ (800c784 <motorInit+0x320>)
 800c666:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c66a:	eef0 2a67 	vmov.f32	s5, s15
 800c66e:	ed9f 2a5d 	vldr	s4, [pc, #372]	@ 800c7e4 <motorInit+0x380>
 800c672:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 800c7a8 <motorInit+0x344>
 800c676:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 800c7a8 <motorInit+0x344>
 800c67a:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 800c7e8 <motorInit+0x384>
 800c67e:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 800c7ec <motorInit+0x388>
 800c682:	4853      	ldr	r0, [pc, #332]	@ (800c7d0 <motorInit+0x36c>)
 800c684:	f7ff fc2c 	bl	800bee0 <pidInit>
        }
    }

    lpfInit(&motor1.IqFilter, 0.05, motor1.Ts);
 800c688:	4b3e      	ldr	r3, [pc, #248]	@ (800c784 <motorInit+0x320>)
 800c68a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c68e:	eef0 0a67 	vmov.f32	s1, s15
 800c692:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 800c7c4 <motorInit+0x360>
 800c696:	4856      	ldr	r0, [pc, #344]	@ (800c7f0 <motorInit+0x38c>)
 800c698:	f7ff fab6 	bl	800bc08 <lpfInit>
    lpfInit(&motor1.IdFilter, 0.05, motor1.Ts);
 800c69c:	4b39      	ldr	r3, [pc, #228]	@ (800c784 <motorInit+0x320>)
 800c69e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c6a2:	eef0 0a67 	vmov.f32	s1, s15
 800c6a6:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 800c7c4 <motorInit+0x360>
 800c6aa:	4852      	ldr	r0, [pc, #328]	@ (800c7f4 <motorInit+0x390>)
 800c6ac:	f7ff faac 	bl	800bc08 <lpfInit>
    lpfInit(&motor1.velocityFilter, 0.01, motor1.Ts);
 800c6b0:	4b34      	ldr	r3, [pc, #208]	@ (800c784 <motorInit+0x320>)
 800c6b2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c6b6:	eef0 0a67 	vmov.f32	s1, s15
 800c6ba:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800c7b4 <motorInit+0x350>
 800c6be:	484e      	ldr	r0, [pc, #312]	@ (800c7f8 <motorInit+0x394>)
 800c6c0:	f7ff faa2 	bl	800bc08 <lpfInit>

#endif
    motor2.pole_pairs = 7;
 800c6c4:	4b4d      	ldr	r3, [pc, #308]	@ (800c7fc <motorInit+0x398>)
 800c6c6:	2207      	movs	r2, #7
 800c6c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    motor2.updatePwm = updatePwm2;
 800c6cc:	4b4b      	ldr	r3, [pc, #300]	@ (800c7fc <motorInit+0x398>)
 800c6ce:	4a4c      	ldr	r2, [pc, #304]	@ (800c800 <motorInit+0x39c>)
 800c6d0:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor2.startPwm = startPwm2;
 800c6d4:	4b49      	ldr	r3, [pc, #292]	@ (800c7fc <motorInit+0x398>)
 800c6d6:	4a4b      	ldr	r2, [pc, #300]	@ (800c804 <motorInit+0x3a0>)
 800c6d8:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor2.stopPwm = stopPwm2;
 800c6dc:	4b47      	ldr	r3, [pc, #284]	@ (800c7fc <motorInit+0x398>)
 800c6de:	4a4a      	ldr	r2, [pc, #296]	@ (800c808 <motorInit+0x3a4>)
 800c6e0:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    motor2.zeroElectricAngleOffSet = 0;
 800c6e4:	4b45      	ldr	r3, [pc, #276]	@ (800c7fc <motorInit+0x398>)
 800c6e6:	f04f 0200 	mov.w	r2, #0
 800c6ea:	635a      	str	r2, [r3, #52]	@ 0x34
    motor2.Ts = 100 * 1e-6f;
 800c6ec:	4b43      	ldr	r3, [pc, #268]	@ (800c7fc <motorInit+0x398>)
 800c6ee:	4a29      	ldr	r2, [pc, #164]	@ (800c794 <motorInit+0x330>)
 800c6f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor2.torqueType = VOLTAGE;
 800c6f2:	4b42      	ldr	r3, [pc, #264]	@ (800c7fc <motorInit+0x398>)
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    motor2.controlType = TORQUE;
 800c6fa:	4b40      	ldr	r3, [pc, #256]	@ (800c7fc <motorInit+0x398>)
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    motor2.state = MOTOR_CALIBRATE;
 800c702:	4b3e      	ldr	r3, [pc, #248]	@ (800c7fc <motorInit+0x398>)
 800c704:	2200      	movs	r2, #0
 800c706:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor2.magEncoder, motor2.Ts, _2_MT6701_GetRawAngle, UNKNOWN);
 800c70a:	4b3c      	ldr	r3, [pc, #240]	@ (800c7fc <motorInit+0x398>)
 800c70c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c710:	2201      	movs	r2, #1
 800c712:	493e      	ldr	r1, [pc, #248]	@ (800c80c <motorInit+0x3a8>)
 800c714:	eeb0 0a67 	vmov.f32	s0, s15
 800c718:	4838      	ldr	r0, [pc, #224]	@ (800c7fc <motorInit+0x398>)
 800c71a:	f7ff f9c0 	bl	800ba9e <encoderInit>
    if (motor2.controlType == TORQUE && motor2.torqueType == CURRENT)
 800c71e:	4b37      	ldr	r3, [pc, #220]	@ (800c7fc <motorInit+0x398>)
 800c720:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c724:	2b00      	cmp	r3, #0
 800c726:	d177      	bne.n	800c818 <motorInit+0x3b4>
 800c728:	4b34      	ldr	r3, [pc, #208]	@ (800c7fc <motorInit+0x398>)
 800c72a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d172      	bne.n	800c818 <motorInit+0x3b4>
    {
        float kp, ki;
        kp = -200;
 800c732:	4b2a      	ldr	r3, [pc, #168]	@ (800c7dc <motorInit+0x378>)
 800c734:	617b      	str	r3, [r7, #20]
        ki = -20;
 800c736:	4b2a      	ldr	r3, [pc, #168]	@ (800c7e0 <motorInit+0x37c>)
 800c738:	613b      	str	r3, [r7, #16]
        pidInit(&motor2.pidId, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800c73a:	4b30      	ldr	r3, [pc, #192]	@ (800c7fc <motorInit+0x398>)
 800c73c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c740:	eef0 2a67 	vmov.f32	s5, s15
 800c744:	ed9f 2a17 	vldr	s4, [pc, #92]	@ 800c7a4 <motorInit+0x340>
 800c748:	eddf 1a17 	vldr	s3, [pc, #92]	@ 800c7a8 <motorInit+0x344>
 800c74c:	ed9f 1a16 	vldr	s2, [pc, #88]	@ 800c7a8 <motorInit+0x344>
 800c750:	edd7 0a04 	vldr	s1, [r7, #16]
 800c754:	ed97 0a05 	vldr	s0, [r7, #20]
 800c758:	482d      	ldr	r0, [pc, #180]	@ (800c810 <motorInit+0x3ac>)
 800c75a:	f7ff fbc1 	bl	800bee0 <pidInit>
        pidInit(&motor2.pidIq, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800c75e:	4b27      	ldr	r3, [pc, #156]	@ (800c7fc <motorInit+0x398>)
 800c760:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c764:	eef0 2a67 	vmov.f32	s5, s15
 800c768:	ed9f 2a0e 	vldr	s4, [pc, #56]	@ 800c7a4 <motorInit+0x340>
 800c76c:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 800c7a8 <motorInit+0x344>
 800c770:	ed9f 1a0d 	vldr	s2, [pc, #52]	@ 800c7a8 <motorInit+0x344>
 800c774:	edd7 0a04 	vldr	s1, [r7, #16]
 800c778:	ed97 0a05 	vldr	s0, [r7, #20]
 800c77c:	4825      	ldr	r0, [pc, #148]	@ (800c814 <motorInit+0x3b0>)
 800c77e:	f7ff fbaf 	bl	800bee0 <pidInit>
    {
 800c782:	e10a      	b.n	800c99a <motorInit+0x536>
 800c784:	20000834 	.word	0x20000834
 800c788:	0800ebe5 	.word	0x0800ebe5
 800c78c:	0800eb9d 	.word	0x0800eb9d
 800c790:	0800ebc1 	.word	0x0800ebc1
 800c794:	38d1b717 	.word	0x38d1b717
 800c798:	0800ea91 	.word	0x0800ea91
 800c79c:	43fa0000 	.word	0x43fa0000
 800c7a0:	42480000 	.word	0x42480000
 800c7a4:	4093cd3a 	.word	0x4093cd3a
 800c7a8:	00000000 	.word	0x00000000
 800c7ac:	20000898 	.word	0x20000898
 800c7b0:	3e4ccccd 	.word	0x3e4ccccd
 800c7b4:	3c23d70a 	.word	0x3c23d70a
 800c7b8:	3ca3d70a 	.word	0x3ca3d70a
 800c7bc:	200008e0 	.word	0x200008e0
 800c7c0:	200008bc 	.word	0x200008bc
 800c7c4:	3d4ccccd 	.word	0x3d4ccccd
 800c7c8:	3e19999a 	.word	0x3e19999a
 800c7cc:	43c80000 	.word	0x43c80000
 800c7d0:	20000904 	.word	0x20000904
 800c7d4:	bc23d70a 	.word	0xbc23d70a
 800c7d8:	bca3d70a 	.word	0xbca3d70a
 800c7dc:	c3480000 	.word	0xc3480000
 800c7e0:	c1a00000 	.word	0xc1a00000
 800c7e4:	4013cd3a 	.word	0x4013cd3a
 800c7e8:	3a83126f 	.word	0x3a83126f
 800c7ec:	3e99999a 	.word	0x3e99999a
 800c7f0:	20000928 	.word	0x20000928
 800c7f4:	20000934 	.word	0x20000934
 800c7f8:	20000940 	.word	0x20000940
 800c7fc:	20000974 	.word	0x20000974
 800c800:	0800ec61 	.word	0x0800ec61
 800c804:	0800ec19 	.word	0x0800ec19
 800c808:	0800ec3d 	.word	0x0800ec3d
 800c80c:	0800eb61 	.word	0x0800eb61
 800c810:	200009d8 	.word	0x200009d8
 800c814:	200009fc 	.word	0x200009fc
    }
    else if (motor2.controlType == VELOCITY)
 800c818:	4b71      	ldr	r3, [pc, #452]	@ (800c9e0 <motorInit+0x57c>)
 800c81a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c81e:	2b02      	cmp	r3, #2
 800c820:	d152      	bne.n	800c8c8 <motorInit+0x464>
    {
        if (motor2.torqueType == CURRENT)
 800c822:	4b6f      	ldr	r3, [pc, #444]	@ (800c9e0 <motorInit+0x57c>)
 800c824:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d13a      	bne.n	800c8a2 <motorInit+0x43e>
        {
            pidInit(&motor2.velocityPID, 0.02, 0.01, 0, 0, CURRENT_MAX, motor2.Ts);
 800c82c:	4b6c      	ldr	r3, [pc, #432]	@ (800c9e0 <motorInit+0x57c>)
 800c82e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c832:	eef0 2a67 	vmov.f32	s5, s15
 800c836:	ed9f 2a6b 	vldr	s4, [pc, #428]	@ 800c9e4 <motorInit+0x580>
 800c83a:	eddf 1a6b 	vldr	s3, [pc, #428]	@ 800c9e8 <motorInit+0x584>
 800c83e:	ed9f 1a6a 	vldr	s2, [pc, #424]	@ 800c9e8 <motorInit+0x584>
 800c842:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 800c9ec <motorInit+0x588>
 800c846:	ed9f 0a6a 	vldr	s0, [pc, #424]	@ 800c9f0 <motorInit+0x58c>
 800c84a:	486a      	ldr	r0, [pc, #424]	@ (800c9f4 <motorInit+0x590>)
 800c84c:	f7ff fb48 	bl	800bee0 <pidInit>

            float kp, ki;
            kp = 500.0f;
 800c850:	4b69      	ldr	r3, [pc, #420]	@ (800c9f8 <motorInit+0x594>)
 800c852:	607b      	str	r3, [r7, #4]
            ki = 50.0f;
 800c854:	4b69      	ldr	r3, [pc, #420]	@ (800c9fc <motorInit+0x598>)
 800c856:	603b      	str	r3, [r7, #0]
            pidInit(&motor2.pidId, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800c858:	4b61      	ldr	r3, [pc, #388]	@ (800c9e0 <motorInit+0x57c>)
 800c85a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c85e:	eef0 2a67 	vmov.f32	s5, s15
 800c862:	ed9f 2a67 	vldr	s4, [pc, #412]	@ 800ca00 <motorInit+0x59c>
 800c866:	eddf 1a60 	vldr	s3, [pc, #384]	@ 800c9e8 <motorInit+0x584>
 800c86a:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 800c9e8 <motorInit+0x584>
 800c86e:	edd7 0a00 	vldr	s1, [r7]
 800c872:	ed97 0a01 	vldr	s0, [r7, #4]
 800c876:	4863      	ldr	r0, [pc, #396]	@ (800ca04 <motorInit+0x5a0>)
 800c878:	f7ff fb32 	bl	800bee0 <pidInit>
            pidInit(&motor2.pidIq, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800c87c:	4b58      	ldr	r3, [pc, #352]	@ (800c9e0 <motorInit+0x57c>)
 800c87e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c882:	eef0 2a67 	vmov.f32	s5, s15
 800c886:	ed9f 2a5e 	vldr	s4, [pc, #376]	@ 800ca00 <motorInit+0x59c>
 800c88a:	eddf 1a57 	vldr	s3, [pc, #348]	@ 800c9e8 <motorInit+0x584>
 800c88e:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 800c9e8 <motorInit+0x584>
 800c892:	edd7 0a00 	vldr	s1, [r7]
 800c896:	ed97 0a01 	vldr	s0, [r7, #4]
 800c89a:	485b      	ldr	r0, [pc, #364]	@ (800ca08 <motorInit+0x5a4>)
 800c89c:	f7ff fb20 	bl	800bee0 <pidInit>
 800c8a0:	e07b      	b.n	800c99a <motorInit+0x536>
        }
        else
        {
            pidInit(&motor2.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor2.Ts);
 800c8a2:	4b4f      	ldr	r3, [pc, #316]	@ (800c9e0 <motorInit+0x57c>)
 800c8a4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c8a8:	eef0 2a67 	vmov.f32	s5, s15
 800c8ac:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 800ca00 <motorInit+0x59c>
 800c8b0:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 800c9e8 <motorInit+0x584>
 800c8b4:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 800c9e8 <motorInit+0x584>
 800c8b8:	eddf 0a54 	vldr	s1, [pc, #336]	@ 800ca0c <motorInit+0x5a8>
 800c8bc:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 800ca10 <motorInit+0x5ac>
 800c8c0:	484c      	ldr	r0, [pc, #304]	@ (800c9f4 <motorInit+0x590>)
 800c8c2:	f7ff fb0d 	bl	800bee0 <pidInit>
 800c8c6:	e068      	b.n	800c99a <motorInit+0x536>
        }
    }
    else if (motor2.controlType == ANGLE)
 800c8c8:	4b45      	ldr	r3, [pc, #276]	@ (800c9e0 <motorInit+0x57c>)
 800c8ca:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	d163      	bne.n	800c99a <motorInit+0x536>
    {
        if (motor2.torqueType == CURRENT)
 800c8d2:	4b43      	ldr	r3, [pc, #268]	@ (800c9e0 <motorInit+0x57c>)
 800c8d4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d14c      	bne.n	800c976 <motorInit+0x512>
        {
            pidInit(&motor2.anglePID, 2, 0, 0, 0, MAX_VELOCITY, motor2.Ts);
 800c8dc:	4b40      	ldr	r3, [pc, #256]	@ (800c9e0 <motorInit+0x57c>)
 800c8de:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c8e2:	eef0 2a67 	vmov.f32	s5, s15
 800c8e6:	ed9f 2a4b 	vldr	s4, [pc, #300]	@ 800ca14 <motorInit+0x5b0>
 800c8ea:	eddf 1a3f 	vldr	s3, [pc, #252]	@ 800c9e8 <motorInit+0x584>
 800c8ee:	ed9f 1a3e 	vldr	s2, [pc, #248]	@ 800c9e8 <motorInit+0x584>
 800c8f2:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 800c9e8 <motorInit+0x584>
 800c8f6:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800c8fa:	4847      	ldr	r0, [pc, #284]	@ (800ca18 <motorInit+0x5b4>)
 800c8fc:	f7ff faf0 	bl	800bee0 <pidInit>

            pidInit(&motor2.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor2.Ts);
 800c900:	4b37      	ldr	r3, [pc, #220]	@ (800c9e0 <motorInit+0x57c>)
 800c902:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c906:	eef0 2a67 	vmov.f32	s5, s15
 800c90a:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 800c9e4 <motorInit+0x580>
 800c90e:	eddf 1a36 	vldr	s3, [pc, #216]	@ 800c9e8 <motorInit+0x584>
 800c912:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 800c9e8 <motorInit+0x584>
 800c916:	eddf 0a41 	vldr	s1, [pc, #260]	@ 800ca1c <motorInit+0x5b8>
 800c91a:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 800ca20 <motorInit+0x5bc>
 800c91e:	4835      	ldr	r0, [pc, #212]	@ (800c9f4 <motorInit+0x590>)
 800c920:	f7ff fade 	bl	800bee0 <pidInit>

            // pidInit(&motor1.anglePID, -0.001, -0.0001, 0, 0, CURRENT_MAX / 2, motor1.Ts);

            float kp, ki;
            kp = -200;
 800c924:	4b3f      	ldr	r3, [pc, #252]	@ (800ca24 <motorInit+0x5c0>)
 800c926:	60fb      	str	r3, [r7, #12]
            ki = -20;
 800c928:	4b3f      	ldr	r3, [pc, #252]	@ (800ca28 <motorInit+0x5c4>)
 800c92a:	60bb      	str	r3, [r7, #8]
            pidInit(&motor2.pidId, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800c92c:	4b2c      	ldr	r3, [pc, #176]	@ (800c9e0 <motorInit+0x57c>)
 800c92e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c932:	eef0 2a67 	vmov.f32	s5, s15
 800c936:	ed9f 2a32 	vldr	s4, [pc, #200]	@ 800ca00 <motorInit+0x59c>
 800c93a:	eddf 1a2b 	vldr	s3, [pc, #172]	@ 800c9e8 <motorInit+0x584>
 800c93e:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 800c9e8 <motorInit+0x584>
 800c942:	edd7 0a02 	vldr	s1, [r7, #8]
 800c946:	ed97 0a03 	vldr	s0, [r7, #12]
 800c94a:	482e      	ldr	r0, [pc, #184]	@ (800ca04 <motorInit+0x5a0>)
 800c94c:	f7ff fac8 	bl	800bee0 <pidInit>
            pidInit(&motor2.pidIq, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800c950:	4b23      	ldr	r3, [pc, #140]	@ (800c9e0 <motorInit+0x57c>)
 800c952:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c956:	eef0 2a67 	vmov.f32	s5, s15
 800c95a:	ed9f 2a29 	vldr	s4, [pc, #164]	@ 800ca00 <motorInit+0x59c>
 800c95e:	eddf 1a22 	vldr	s3, [pc, #136]	@ 800c9e8 <motorInit+0x584>
 800c962:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 800c9e8 <motorInit+0x584>
 800c966:	edd7 0a02 	vldr	s1, [r7, #8]
 800c96a:	ed97 0a03 	vldr	s0, [r7, #12]
 800c96e:	4826      	ldr	r0, [pc, #152]	@ (800ca08 <motorInit+0x5a4>)
 800c970:	f7ff fab6 	bl	800bee0 <pidInit>
 800c974:	e011      	b.n	800c99a <motorInit+0x536>
        }
        else
        {
            pidInit(&motor2.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor2.Ts);
 800c976:	4b1a      	ldr	r3, [pc, #104]	@ (800c9e0 <motorInit+0x57c>)
 800c978:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c97c:	eef0 2a67 	vmov.f32	s5, s15
 800c980:	ed9f 2a2a 	vldr	s4, [pc, #168]	@ 800ca2c <motorInit+0x5c8>
 800c984:	eddf 1a18 	vldr	s3, [pc, #96]	@ 800c9e8 <motorInit+0x584>
 800c988:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 800c9e8 <motorInit+0x584>
 800c98c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 800ca30 <motorInit+0x5cc>
 800c990:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 800ca34 <motorInit+0x5d0>
 800c994:	4820      	ldr	r0, [pc, #128]	@ (800ca18 <motorInit+0x5b4>)
 800c996:	f7ff faa3 	bl	800bee0 <pidInit>
        }
    }

    lpfInit(&motor2.IqFilter, 0.05, motor1.Ts);
 800c99a:	4b27      	ldr	r3, [pc, #156]	@ (800ca38 <motorInit+0x5d4>)
 800c99c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c9a0:	eef0 0a67 	vmov.f32	s1, s15
 800c9a4:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800ca0c <motorInit+0x5a8>
 800c9a8:	4824      	ldr	r0, [pc, #144]	@ (800ca3c <motorInit+0x5d8>)
 800c9aa:	f7ff f92d 	bl	800bc08 <lpfInit>
    lpfInit(&motor2.IdFilter, 0.05, motor1.Ts);
 800c9ae:	4b22      	ldr	r3, [pc, #136]	@ (800ca38 <motorInit+0x5d4>)
 800c9b0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c9b4:	eef0 0a67 	vmov.f32	s1, s15
 800c9b8:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 800ca0c <motorInit+0x5a8>
 800c9bc:	4820      	ldr	r0, [pc, #128]	@ (800ca40 <motorInit+0x5dc>)
 800c9be:	f7ff f923 	bl	800bc08 <lpfInit>
    lpfInit(&motor2.velocityFilter, 0.01, motor1.Ts);
 800c9c2:	4b1d      	ldr	r3, [pc, #116]	@ (800ca38 <motorInit+0x5d4>)
 800c9c4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c9c8:	eef0 0a67 	vmov.f32	s1, s15
 800c9cc:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800c9ec <motorInit+0x588>
 800c9d0:	481c      	ldr	r0, [pc, #112]	@ (800ca44 <motorInit+0x5e0>)
 800c9d2:	f7ff f919 	bl	800bc08 <lpfInit>
}
 800c9d6:	bf00      	nop
 800c9d8:	3730      	adds	r7, #48	@ 0x30
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	20000974 	.word	0x20000974
 800c9e4:	3e4ccccd 	.word	0x3e4ccccd
 800c9e8:	00000000 	.word	0x00000000
 800c9ec:	3c23d70a 	.word	0x3c23d70a
 800c9f0:	3ca3d70a 	.word	0x3ca3d70a
 800c9f4:	20000a20 	.word	0x20000a20
 800c9f8:	43fa0000 	.word	0x43fa0000
 800c9fc:	42480000 	.word	0x42480000
 800ca00:	4093cd3a 	.word	0x4093cd3a
 800ca04:	200009d8 	.word	0x200009d8
 800ca08:	200009fc 	.word	0x200009fc
 800ca0c:	3d4ccccd 	.word	0x3d4ccccd
 800ca10:	3e19999a 	.word	0x3e19999a
 800ca14:	43c80000 	.word	0x43c80000
 800ca18:	20000a44 	.word	0x20000a44
 800ca1c:	bc23d70a 	.word	0xbc23d70a
 800ca20:	bca3d70a 	.word	0xbca3d70a
 800ca24:	c3480000 	.word	0xc3480000
 800ca28:	c1a00000 	.word	0xc1a00000
 800ca2c:	4013cd3a 	.word	0x4013cd3a
 800ca30:	3a83126f 	.word	0x3a83126f
 800ca34:	3e99999a 	.word	0x3e99999a
 800ca38:	20000834 	.word	0x20000834
 800ca3c:	20000a68 	.word	0x20000a68
 800ca40:	20000a74 	.word	0x20000a74
 800ca44:	20000a80 	.word	0x20000a80

0800ca48 <appInit>:
float target_pitch;
LowPassFilter lpf_pitch_cmd, lpf_throttle, lpf_steering;
// joyStick

void appInit()
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	af00      	add	r7, sp, #0

    motorInit();
 800ca4c:	f7ff fd0a 	bl	800c464 <motorInit>
    devState = STANDBY;
 800ca50:	4b1d      	ldr	r3, [pc, #116]	@ (800cac8 <appInit+0x80>)
 800ca52:	2200      	movs	r2, #0
 800ca54:	701a      	strb	r2, [r3, #0]
    v = 2400;
 800ca56:	4b1d      	ldr	r3, [pc, #116]	@ (800cacc <appInit+0x84>)
 800ca58:	4a1d      	ldr	r2, [pc, #116]	@ (800cad0 <appInit+0x88>)
 800ca5a:	601a      	str	r2, [r3, #0]
    // balance
    // pidInit(&pid_stb, 0.14, 0.5, 0.01, 0, UqMAX, 100 * 1e-6f);
    pidInit(&pid_stb, 0.1, 0.4, 0.01, 0, UqMAX, 100 * 1e-6f);
 800ca5c:	eddf 2a1d 	vldr	s5, [pc, #116]	@ 800cad4 <appInit+0x8c>
 800ca60:	ed9f 2a1d 	vldr	s4, [pc, #116]	@ 800cad8 <appInit+0x90>
 800ca64:	eddf 1a1d 	vldr	s3, [pc, #116]	@ 800cadc <appInit+0x94>
 800ca68:	ed9f 1a1d 	vldr	s2, [pc, #116]	@ 800cae0 <appInit+0x98>
 800ca6c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800cae4 <appInit+0x9c>
 800ca70:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800cae8 <appInit+0xa0>
 800ca74:	481d      	ldr	r0, [pc, #116]	@ (800caec <appInit+0xa4>)
 800ca76:	f7ff fa33 	bl	800bee0 <pidInit>
    pidInit(&pid_vel, 0.02, 0, 0, 0, 20, 100 * 1e-6f);
 800ca7a:	eddf 2a16 	vldr	s5, [pc, #88]	@ 800cad4 <appInit+0x8c>
 800ca7e:	eeb3 2a04 	vmov.f32	s4, #52	@ 0x41a00000  20.0
 800ca82:	eddf 1a16 	vldr	s3, [pc, #88]	@ 800cadc <appInit+0x94>
 800ca86:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 800cadc <appInit+0x94>
 800ca8a:	eddf 0a14 	vldr	s1, [pc, #80]	@ 800cadc <appInit+0x94>
 800ca8e:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800caf0 <appInit+0xa8>
 800ca92:	4818      	ldr	r0, [pc, #96]	@ (800caf4 <appInit+0xac>)
 800ca94:	f7ff fa24 	bl	800bee0 <pidInit>
    lpfInit(&lpf_pitch_cmd, 0.07, 100 * 1e-6f);
 800ca98:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 800cad4 <appInit+0x8c>
 800ca9c:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800caf8 <appInit+0xb0>
 800caa0:	4816      	ldr	r0, [pc, #88]	@ (800cafc <appInit+0xb4>)
 800caa2:	f7ff f8b1 	bl	800bc08 <lpfInit>
    lpfInit(&lpf_throttle, 0.5, 100 * 1e-6f);
 800caa6:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 800cad4 <appInit+0x8c>
 800caaa:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800caae:	4814      	ldr	r0, [pc, #80]	@ (800cb00 <appInit+0xb8>)
 800cab0:	f7ff f8aa 	bl	800bc08 <lpfInit>
    lpfInit(&lpf_steering, 0.1, 100 * 1e-6f);
 800cab4:	eddf 0a07 	vldr	s1, [pc, #28]	@ 800cad4 <appInit+0x8c>
 800cab8:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800cae8 <appInit+0xa0>
 800cabc:	4811      	ldr	r0, [pc, #68]	@ (800cb04 <appInit+0xbc>)
 800cabe:	f7ff f8a3 	bl	800bc08 <lpfInit>
}
 800cac2:	bf00      	nop
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	2000008e 	.word	0x2000008e
 800cacc:	20000ab4 	.word	0x20000ab4
 800cad0:	45160000 	.word	0x45160000
 800cad4:	38d1b717 	.word	0x38d1b717
 800cad8:	4093cd3a 	.word	0x4093cd3a
 800cadc:	00000000 	.word	0x00000000
 800cae0:	3c23d70a 	.word	0x3c23d70a
 800cae4:	3ecccccd 	.word	0x3ecccccd
 800cae8:	3dcccccd 	.word	0x3dcccccd
 800caec:	20000ab8 	.word	0x20000ab8
 800caf0:	3ca3d70a 	.word	0x3ca3d70a
 800caf4:	20000adc 	.word	0x20000adc
 800caf8:	3d8f5c29 	.word	0x3d8f5c29
 800cafc:	20000b04 	.word	0x20000b04
 800cb00:	20000b10 	.word	0x20000b10
 800cb04:	20000b1c 	.word	0x20000b1c

0800cb08 <appRunning>:
static bool zeroReset, _1s;
void appRunning()
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	af00      	add	r7, sp, #0
    _1s = getOneSecFlag();
 800cb0c:	f002 fa74 	bl	800eff8 <getOneSecFlag>
 800cb10:	4603      	mov	r3, r0
 800cb12:	461a      	mov	r2, r3
 800cb14:	4b16      	ldr	r3, [pc, #88]	@ (800cb70 <appRunning+0x68>)
 800cb16:	701a      	strb	r2, [r3, #0]
    getKeyState(&keyState);
 800cb18:	4816      	ldr	r0, [pc, #88]	@ (800cb74 <appRunning+0x6c>)
 800cb1a:	f000 fd91 	bl	800d640 <getKeyState>
    commander_run(&motor1, &motor2);
 800cb1e:	4916      	ldr	r1, [pc, #88]	@ (800cb78 <appRunning+0x70>)
 800cb20:	4816      	ldr	r0, [pc, #88]	@ (800cb7c <appRunning+0x74>)
 800cb22:	f000 fa47 	bl	800cfb4 <commander_run>
    if (++flashCnt >= 10)
 800cb26:	4b16      	ldr	r3, [pc, #88]	@ (800cb80 <appRunning+0x78>)
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	b2da      	uxtb	r2, r3
 800cb2e:	4b14      	ldr	r3, [pc, #80]	@ (800cb80 <appRunning+0x78>)
 800cb30:	701a      	strb	r2, [r3, #0]
 800cb32:	4b13      	ldr	r3, [pc, #76]	@ (800cb80 <appRunning+0x78>)
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	2b09      	cmp	r3, #9
 800cb38:	d902      	bls.n	800cb40 <appRunning+0x38>
        flashCnt = 0;
 800cb3a:	4b11      	ldr	r3, [pc, #68]	@ (800cb80 <appRunning+0x78>)
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	701a      	strb	r2, [r3, #0]

    ledOn = 0;
 800cb40:	4b10      	ldr	r3, [pc, #64]	@ (800cb84 <appRunning+0x7c>)
 800cb42:	2200      	movs	r2, #0
 800cb44:	701a      	strb	r2, [r3, #0]
            motor2.target = goalTorqueC;
        }
    }
#endif

    switch (devState)
 800cb46:	4b10      	ldr	r3, [pc, #64]	@ (800cb88 <appRunning+0x80>)
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d002      	beq.n	800cb54 <appRunning+0x4c>
 800cb4e:	2b01      	cmp	r3, #1
 800cb50:	d003      	beq.n	800cb5a <appRunning+0x52>
 800cb52:	e005      	b.n	800cb60 <appRunning+0x58>
    {
    case STANDBY:
        standingBy();
 800cb54:	f000 f81a 	bl	800cb8c <standingBy>
        break;
 800cb58:	e002      	b.n	800cb60 <appRunning+0x58>

    case WORK:
        working();
 800cb5a:	f000 f87d 	bl	800cc58 <working>
        break;
 800cb5e:	bf00      	nop
    }

    LED_drive();
 800cb60:	f000 fdac 	bl	800d6bc <LED_drive>
    if (_1s)
    {
        // v -= 20;
        // HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v);
    }
    _1s = 0;
 800cb64:	4b02      	ldr	r3, [pc, #8]	@ (800cb70 <appRunning+0x68>)
 800cb66:	2200      	movs	r2, #0
 800cb68:	701a      	strb	r2, [r3, #0]
}
 800cb6a:	bf00      	nop
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	20000b29 	.word	0x20000b29
 800cb74:	20000810 	.word	0x20000810
 800cb78:	20000974 	.word	0x20000974
 800cb7c:	20000834 	.word	0x20000834
 800cb80:	20000811 	.word	0x20000811
 800cb84:	20000c28 	.word	0x20000c28
 800cb88:	2000008e 	.word	0x2000008e

0800cb8c <standingBy>:
static void standingBy()
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	af00      	add	r7, sp, #0
    static bool notFirstTime;
    static uchar cnt;
    ledOn = 1;
 800cb90:	4b26      	ldr	r3, [pc, #152]	@ (800cc2c <standingBy+0xa0>)
 800cb92:	2201      	movs	r2, #1
 800cb94:	701a      	strb	r2, [r3, #0]
    //     goToZeroElecAngle(&motor2);
    //     zeroReset = 1;
    // }
    // else
    // {
    motor1.stopPwm();
 800cb96:	4b26      	ldr	r3, [pc, #152]	@ (800cc30 <standingBy+0xa4>)
 800cb98:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800cb9c:	4798      	blx	r3
    motor2.stopPwm();
 800cb9e:	4b25      	ldr	r3, [pc, #148]	@ (800cc34 <standingBy+0xa8>)
 800cba0:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800cba4:	4798      	blx	r3
    // }

    if (((+cnt >= 30 && notFirstTime == 0) || keyState == USER1_SHORT) && imu.pit <= 30 && imu.pit >= -30)
 800cba6:	4b24      	ldr	r3, [pc, #144]	@ (800cc38 <standingBy+0xac>)
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	2b1d      	cmp	r3, #29
 800cbac:	d903      	bls.n	800cbb6 <standingBy+0x2a>
 800cbae:	4b23      	ldr	r3, [pc, #140]	@ (800cc3c <standingBy+0xb0>)
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d003      	beq.n	800cbbe <standingBy+0x32>
 800cbb6:	4b22      	ldr	r3, [pc, #136]	@ (800cc40 <standingBy+0xb4>)
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d134      	bne.n	800cc28 <standingBy+0x9c>
 800cbbe:	4b21      	ldr	r3, [pc, #132]	@ (800cc44 <standingBy+0xb8>)
 800cbc0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cbc4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800cbc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cbcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbd0:	d900      	bls.n	800cbd4 <standingBy+0x48>
    // if (keyState == USER1_SHORT)
    {
        notFirstTime = 1;
        WORK_INIT;
    }
}
 800cbd2:	e029      	b.n	800cc28 <standingBy+0x9c>
    if (((+cnt >= 30 && notFirstTime == 0) || keyState == USER1_SHORT) && imu.pit <= 30 && imu.pit >= -30)
 800cbd4:	4b1b      	ldr	r3, [pc, #108]	@ (800cc44 <standingBy+0xb8>)
 800cbd6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cbda:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800cbde:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cbe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbe6:	da00      	bge.n	800cbea <standingBy+0x5e>
}
 800cbe8:	e01e      	b.n	800cc28 <standingBy+0x9c>
        notFirstTime = 1;
 800cbea:	4b14      	ldr	r3, [pc, #80]	@ (800cc3c <standingBy+0xb0>)
 800cbec:	2201      	movs	r2, #1
 800cbee:	701a      	strb	r2, [r3, #0]
        WORK_INIT;
 800cbf0:	4b15      	ldr	r3, [pc, #84]	@ (800cc48 <standingBy+0xbc>)
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	701a      	strb	r2, [r3, #0]
 800cbf6:	4b15      	ldr	r3, [pc, #84]	@ (800cc4c <standingBy+0xc0>)
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	701a      	strb	r2, [r3, #0]
 800cbfc:	4b0c      	ldr	r3, [pc, #48]	@ (800cc30 <standingBy+0xa4>)
 800cbfe:	2202      	movs	r2, #2
 800cc00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800cc04:	4b0a      	ldr	r3, [pc, #40]	@ (800cc30 <standingBy+0xa4>)
 800cc06:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800cc0a:	4798      	blx	r3
 800cc0c:	4b09      	ldr	r3, [pc, #36]	@ (800cc34 <standingBy+0xa8>)
 800cc0e:	2202      	movs	r2, #2
 800cc10:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800cc14:	4b07      	ldr	r3, [pc, #28]	@ (800cc34 <standingBy+0xa8>)
 800cc16:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800cc1a:	4798      	blx	r3
 800cc1c:	480c      	ldr	r0, [pc, #48]	@ (800cc50 <standingBy+0xc4>)
 800cc1e:	f7ff fa9a 	bl	800c156 <reset>
 800cc22:	480c      	ldr	r0, [pc, #48]	@ (800cc54 <standingBy+0xc8>)
 800cc24:	f7ff fa97 	bl	800c156 <reset>
}
 800cc28:	bf00      	nop
 800cc2a:	bd80      	pop	{r7, pc}
 800cc2c:	20000c28 	.word	0x20000c28
 800cc30:	20000834 	.word	0x20000834
 800cc34:	20000974 	.word	0x20000974
 800cc38:	20000b2a 	.word	0x20000b2a
 800cc3c:	20000b2b 	.word	0x20000b2b
 800cc40:	20000810 	.word	0x20000810
 800cc44:	20000c74 	.word	0x20000c74
 800cc48:	2000008e 	.word	0x2000008e
 800cc4c:	20000811 	.word	0x20000811
 800cc50:	20000ab8 	.word	0x20000ab8
 800cc54:	20000adc 	.word	0x20000adc

0800cc58 <working>:

static void working(void)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	af00      	add	r7, sp, #0
    zeroReset = 0;
 800cc5c:	4b1a      	ldr	r3, [pc, #104]	@ (800ccc8 <working+0x70>)
 800cc5e:	2200      	movs	r2, #0
 800cc60:	701a      	strb	r2, [r3, #0]
    if (flashCnt < 5)
 800cc62:	4b1a      	ldr	r3, [pc, #104]	@ (800cccc <working+0x74>)
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	2b04      	cmp	r3, #4
 800cc68:	d802      	bhi.n	800cc70 <working+0x18>
        ledOn = 1;
 800cc6a:	4b19      	ldr	r3, [pc, #100]	@ (800ccd0 <working+0x78>)
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	701a      	strb	r2, [r3, #0]

    if (keyState == USER1_SHORT || imu.pit > 60 || imu.pit < -60)
 800cc70:	4b18      	ldr	r3, [pc, #96]	@ (800ccd4 <working+0x7c>)
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d014      	beq.n	800cca2 <working+0x4a>
 800cc78:	4b17      	ldr	r3, [pc, #92]	@ (800ccd8 <working+0x80>)
 800cc7a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cc7e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800ccdc <working+0x84>
 800cc82:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc8a:	dc0a      	bgt.n	800cca2 <working+0x4a>
 800cc8c:	4b12      	ldr	r3, [pc, #72]	@ (800ccd8 <working+0x80>)
 800cc8e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cc92:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800cce0 <working+0x88>
 800cc96:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc9e:	d400      	bmi.n	800cca2 <working+0x4a>
    //        //     {
    //        //         bldcMotor.focTarget = 23;
    //        //     }
    //        // }
    //    }
}
 800cca0:	e00d      	b.n	800ccbe <working+0x66>
        STANDBY_INIT;
 800cca2:	4b10      	ldr	r3, [pc, #64]	@ (800cce4 <working+0x8c>)
 800cca4:	2200      	movs	r2, #0
 800cca6:	701a      	strb	r2, [r3, #0]
 800cca8:	4b08      	ldr	r3, [pc, #32]	@ (800cccc <working+0x74>)
 800ccaa:	2200      	movs	r2, #0
 800ccac:	701a      	strb	r2, [r3, #0]
 800ccae:	4b0e      	ldr	r3, [pc, #56]	@ (800cce8 <working+0x90>)
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800ccb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ccec <working+0x94>)
 800ccb8:	2201      	movs	r2, #1
 800ccba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 800ccbe:	bf00      	nop
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr
 800ccc8:	20000b28 	.word	0x20000b28
 800cccc:	20000811 	.word	0x20000811
 800ccd0:	20000c28 	.word	0x20000c28
 800ccd4:	20000810 	.word	0x20000810
 800ccd8:	20000c74 	.word	0x20000c74
 800ccdc:	42700000 	.word	0x42700000
 800cce0:	c2700000 	.word	0xc2700000
 800cce4:	2000008e 	.word	0x2000008e
 800cce8:	20000834 	.word	0x20000834
 800ccec:	20000974 	.word	0x20000974

0800ccf0 <HAL_ADCEx_InjectedConvCpltCallback>:

    // sprintf(txBuffer, "pitch : %.2f,  P: %.2f,  I:%.2f, D:%.2f, V1:%.2f, T2:%.2f\n", imu.pit, pid_stb.P, pid_stb.I, pid_stb.D, motor1.magEncoder.velocity, motor2.target);
}

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800ccf0:	b5b0      	push	{r4, r5, r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800ccfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800cd02:	f7f9 fd1d 	bl	8006740 <HAL_GPIO_WritePin>
    if (hadc == &hadc1)
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	4a31      	ldr	r2, [pc, #196]	@ (800cdd0 <HAL_ADCEx_InjectedConvCpltCallback+0xe0>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d155      	bne.n	800cdba <HAL_ADCEx_InjectedConvCpltCallback+0xca>
    {
        static bool shift;
        shift = !shift;
 800cd0e:	4b31      	ldr	r3, [pc, #196]	@ (800cdd4 <HAL_ADCEx_InjectedConvCpltCallback+0xe4>)
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	bf0c      	ite	eq
 800cd16:	2301      	moveq	r3, #1
 800cd18:	2300      	movne	r3, #0
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	4b2d      	ldr	r3, [pc, #180]	@ (800cdd4 <HAL_ADCEx_InjectedConvCpltCallback+0xe4>)
 800cd20:	701a      	strb	r2, [r3, #0]
        if (shift)
 800cd22:	4b2c      	ldr	r3, [pc, #176]	@ (800cdd4 <HAL_ADCEx_InjectedConvCpltCallback+0xe4>)
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00c      	beq.n	800cd44 <HAL_ADCEx_InjectedConvCpltCallback+0x54>
        {
            foc(&motor1, hadc1.Instance->JDR1, hadc2.Instance->JDR1);
 800cd2a:	4b29      	ldr	r3, [pc, #164]	@ (800cdd0 <HAL_ADCEx_InjectedConvCpltCallback+0xe0>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800cd32:	4b29      	ldr	r3, [pc, #164]	@ (800cdd8 <HAL_ADCEx_InjectedConvCpltCallback+0xe8>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	4827      	ldr	r0, [pc, #156]	@ (800cddc <HAL_ADCEx_InjectedConvCpltCallback+0xec>)
 800cd3e:	f7fe fb1d 	bl	800b37c <foc>
 800cd42:	e00b      	b.n	800cd5c <HAL_ADCEx_InjectedConvCpltCallback+0x6c>
        }
        else
        {
            foc(&motor2, hadc1.Instance->JDR2, hadc1.Instance->JDR3);
 800cd44:	4b22      	ldr	r3, [pc, #136]	@ (800cdd0 <HAL_ADCEx_InjectedConvCpltCallback+0xe0>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 800cd4c:	4b20      	ldr	r3, [pc, #128]	@ (800cdd0 <HAL_ADCEx_InjectedConvCpltCallback+0xe0>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd54:	461a      	mov	r2, r3
 800cd56:	4822      	ldr	r0, [pc, #136]	@ (800cde0 <HAL_ADCEx_InjectedConvCpltCallback+0xf0>)
 800cd58:	f7fe fb10 	bl	800b37c <foc>
        }

        dealPer100us();
 800cd5c:	f002 f886 	bl	800ee6c <dealPer100us>
#if USE_COMM_TARGET
        balancerControl();
 800cd60:	f000 f846 	bl	800cdf0 <balancerControl>

        //         load_data[2] = motor1.Uq;

        // show current

        load_data[0] = motor1.Ia;
 800cd64:	4b1d      	ldr	r3, [pc, #116]	@ (800cddc <HAL_ADCEx_InjectedConvCpltCallback+0xec>)
 800cd66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd68:	4a1e      	ldr	r2, [pc, #120]	@ (800cde4 <HAL_ADCEx_InjectedConvCpltCallback+0xf4>)
 800cd6a:	6013      	str	r3, [r2, #0]
        load_data[1] = motor1.Ib;
 800cd6c:	4b1b      	ldr	r3, [pc, #108]	@ (800cddc <HAL_ADCEx_InjectedConvCpltCallback+0xec>)
 800cd6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd70:	4a1c      	ldr	r2, [pc, #112]	@ (800cde4 <HAL_ADCEx_InjectedConvCpltCallback+0xf4>)
 800cd72:	6053      	str	r3, [r2, #4]
        load_data[2] = motor1.Ic;
 800cd74:	4b19      	ldr	r3, [pc, #100]	@ (800cddc <HAL_ADCEx_InjectedConvCpltCallback+0xec>)
 800cd76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd78:	4a1a      	ldr	r2, [pc, #104]	@ (800cde4 <HAL_ADCEx_InjectedConvCpltCallback+0xf4>)
 800cd7a:	6093      	str	r3, [r2, #8]
        // load_data[0] = motor2.Ia;
        // load_data[1] = motor2.Ib;
        // load_data[2] = motor2.Ic;
        load_data[3] = motor1.Ialpha;
 800cd7c:	4b17      	ldr	r3, [pc, #92]	@ (800cddc <HAL_ADCEx_InjectedConvCpltCallback+0xec>)
 800cd7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd80:	4a18      	ldr	r2, [pc, #96]	@ (800cde4 <HAL_ADCEx_InjectedConvCpltCallback+0xf4>)
 800cd82:	60d3      	str	r3, [r2, #12]
        load_data[4] = motor1.Ibeta;
 800cd84:	4b15      	ldr	r3, [pc, #84]	@ (800cddc <HAL_ADCEx_InjectedConvCpltCallback+0xec>)
 800cd86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd88:	4a16      	ldr	r2, [pc, #88]	@ (800cde4 <HAL_ADCEx_InjectedConvCpltCallback+0xf4>)
 800cd8a:	6113      	str	r3, [r2, #16]

        load_data[5] = motor1.Id;
 800cd8c:	4b13      	ldr	r3, [pc, #76]	@ (800cddc <HAL_ADCEx_InjectedConvCpltCallback+0xec>)
 800cd8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd90:	4a14      	ldr	r2, [pc, #80]	@ (800cde4 <HAL_ADCEx_InjectedConvCpltCallback+0xf4>)
 800cd92:	6153      	str	r3, [r2, #20]
        load_data[6] = motor1.Iq;
 800cd94:	4b11      	ldr	r3, [pc, #68]	@ (800cddc <HAL_ADCEx_InjectedConvCpltCallback+0xec>)
 800cd96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd98:	4a12      	ldr	r2, [pc, #72]	@ (800cde4 <HAL_ADCEx_InjectedConvCpltCallback+0xf4>)
 800cd9a:	6193      	str	r3, [r2, #24]
        // load_data[4] = motor2.Uq;

        // load_data[6] = hadc1.Instance->JDR1;
        // load_data[7] = hadc1.Instance->JDR2;

        memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
 800cd9c:	4a12      	ldr	r2, [pc, #72]	@ (800cde8 <HAL_ADCEx_InjectedConvCpltCallback+0xf8>)
 800cd9e:	4b11      	ldr	r3, [pc, #68]	@ (800cde4 <HAL_ADCEx_InjectedConvCpltCallback+0xf4>)
 800cda0:	4614      	mov	r4, r2
 800cda2:	461d      	mov	r5, r3
 800cda4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cda6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cda8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cdac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, sizeof(tempData));
 800cdb0:	2224      	movs	r2, #36	@ 0x24
 800cdb2:	490d      	ldr	r1, [pc, #52]	@ (800cde8 <HAL_ADCEx_InjectedConvCpltCallback+0xf8>)
 800cdb4:	480d      	ldr	r0, [pc, #52]	@ (800cdec <HAL_ADCEx_InjectedConvCpltCallback+0xfc>)
 800cdb6:	f7fc fcc5 	bl	8009744 <HAL_UART_Transmit_DMA>
#endif
    }
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800cdc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800cdc4:	f7f9 fcbc 	bl	8006740 <HAL_GPIO_WritePin>
}
 800cdc8:	bf00      	nop
 800cdca:	3708      	adds	r7, #8
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bdb0      	pop	{r4, r5, r7, pc}
 800cdd0:	200002c4 	.word	0x200002c4
 800cdd4:	20000b2c 	.word	0x20000b2c
 800cdd8:	20000330 	.word	0x20000330
 800cddc:	20000834 	.word	0x20000834
 800cde0:	20000974 	.word	0x20000974
 800cde4:	20000814 	.word	0x20000814
 800cde8:	20000090 	.word	0x20000090
 800cdec:	200005f4 	.word	0x200005f4

0800cdf0 <balancerControl>:

void balancerControl()
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	ed2d 8b02 	vpush	{d8}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0

    // calculate the target angle for throttle control

    target_pitch = pidOperator(&pid_vel, ((motor1.magEncoder.velocity + motor2.magEncoder.velocity) / 2 - lpfOperator(&lpf_throttle, throttle))) + STABLE_TIP;
 800cdfa:	4b30      	ldr	r3, [pc, #192]	@ (800cebc <balancerControl+0xcc>)
 800cdfc:	ed93 7a06 	vldr	s14, [r3, #24]
 800ce00:	4b2f      	ldr	r3, [pc, #188]	@ (800cec0 <balancerControl+0xd0>)
 800ce02:	edd3 7a06 	vldr	s15, [r3, #24]
 800ce06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce0a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800ce0e:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800ce12:	4b2c      	ldr	r3, [pc, #176]	@ (800cec4 <balancerControl+0xd4>)
 800ce14:	edd3 7a00 	vldr	s15, [r3]
 800ce18:	eeb0 0a67 	vmov.f32	s0, s15
 800ce1c:	482a      	ldr	r0, [pc, #168]	@ (800cec8 <balancerControl+0xd8>)
 800ce1e:	f7fe ff0b 	bl	800bc38 <lpfOperator>
 800ce22:	eef0 7a40 	vmov.f32	s15, s0
 800ce26:	ee78 7a67 	vsub.f32	s15, s16, s15
 800ce2a:	eeb0 0a67 	vmov.f32	s0, s15
 800ce2e:	4827      	ldr	r0, [pc, #156]	@ (800cecc <balancerControl+0xdc>)
 800ce30:	f7ff f88a 	bl	800bf48 <pidOperator>
 800ce34:	ee10 3a10 	vmov	r3, s0
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7f3 fbad 	bl	8000598 <__aeabi_f2d>
 800ce3e:	f04f 0200 	mov.w	r2, #0
 800ce42:	4b23      	ldr	r3, [pc, #140]	@ (800ced0 <balancerControl+0xe0>)
 800ce44:	f7f3 fa48 	bl	80002d8 <__aeabi_dsub>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	460b      	mov	r3, r1
 800ce4c:	4610      	mov	r0, r2
 800ce4e:	4619      	mov	r1, r3
 800ce50:	f7f3 fef2 	bl	8000c38 <__aeabi_d2f>
 800ce54:	4603      	mov	r3, r0
 800ce56:	4a1f      	ldr	r2, [pc, #124]	@ (800ced4 <balancerControl+0xe4>)
 800ce58:	6013      	str	r3, [r2, #0]
    // float target_pitch = ;
    // calculate the target voltage
    float voltage_control = pidOperator(&pid_stb, target_pitch - imu.pit);
 800ce5a:	4b1e      	ldr	r3, [pc, #120]	@ (800ced4 <balancerControl+0xe4>)
 800ce5c:	ed93 7a00 	vldr	s14, [r3]
 800ce60:	4b1d      	ldr	r3, [pc, #116]	@ (800ced8 <balancerControl+0xe8>)
 800ce62:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ce66:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce6a:	eeb0 0a67 	vmov.f32	s0, s15
 800ce6e:	481b      	ldr	r0, [pc, #108]	@ (800cedc <balancerControl+0xec>)
 800ce70:	f7ff f86a 	bl	800bf48 <pidOperator>
 800ce74:	ed87 0a01 	vstr	s0, [r7, #4]
    // filter steering
    float steering_adj = lpfOperator(&lpf_steering, steering);
 800ce78:	4b19      	ldr	r3, [pc, #100]	@ (800cee0 <balancerControl+0xf0>)
 800ce7a:	edd3 7a00 	vldr	s15, [r3]
 800ce7e:	eeb0 0a67 	vmov.f32	s0, s15
 800ce82:	4818      	ldr	r0, [pc, #96]	@ (800cee4 <balancerControl+0xf4>)
 800ce84:	f7fe fed8 	bl	800bc38 <lpfOperator>
 800ce88:	ed87 0a00 	vstr	s0, [r7]
    // set the tergat voltage value
    motor1.target = voltage_control + steering_adj;
 800ce8c:	ed97 7a01 	vldr	s14, [r7, #4]
 800ce90:	edd7 7a00 	vldr	s15, [r7]
 800ce94:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce98:	4b08      	ldr	r3, [pc, #32]	@ (800cebc <balancerControl+0xcc>)
 800ce9a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    motor2.target = voltage_control - steering_adj;
 800ce9e:	ed97 7a01 	vldr	s14, [r7, #4]
 800cea2:	edd7 7a00 	vldr	s15, [r7]
 800cea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ceaa:	4b05      	ldr	r3, [pc, #20]	@ (800cec0 <balancerControl+0xd0>)
 800ceac:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800ceb0:	bf00      	nop
 800ceb2:	3708      	adds	r7, #8
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	ecbd 8b02 	vpop	{d8}
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	20000834 	.word	0x20000834
 800cec0:	20000974 	.word	0x20000974
 800cec4:	20000c00 	.word	0x20000c00
 800cec8:	20000b10 	.word	0x20000b10
 800cecc:	20000adc 	.word	0x20000adc
 800ced0:	40060000 	.word	0x40060000
 800ced4:	20000b00 	.word	0x20000b00
 800ced8:	20000c74 	.word	0x20000c74
 800cedc:	20000ab8 	.word	0x20000ab8
 800cee0:	20000bfc 	.word	0x20000bfc
 800cee4:	20000b1c 	.word	0x20000b1c

0800cee8 <HAL_UARTEx_RxEventCallback>:
uint8_t aRxBuffer;
float comm1, comm2, comm3, comm4, comm5, comm6, comm7, comm8, comm9, comm10, comm11;
extern DMA_HandleTypeDef hdma_usart2_rx;
extern DMA_HandleTypeDef hdma_usart3_rx;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	460b      	mov	r3, r1
 800cef2:	807b      	strh	r3, [r7, #2]
  // memset(rxBuffer, '\0', sizeof(rxBuffer));
  if (huart == &huart2)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	4a16      	ldr	r2, [pc, #88]	@ (800cf50 <HAL_UARTEx_RxEventCallback+0x68>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d110      	bne.n	800cf1e <HAL_UARTEx_RxEventCallback+0x36>
  {
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, sizeof(rxBuffer));
 800cefc:	2264      	movs	r2, #100	@ 0x64
 800cefe:	4915      	ldr	r1, [pc, #84]	@ (800cf54 <HAL_UARTEx_RxEventCallback+0x6c>)
 800cf00:	4813      	ldr	r0, [pc, #76]	@ (800cf50 <HAL_UARTEx_RxEventCallback+0x68>)
 800cf02:	f7fe f82c 	bl	800af5e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800cf06:	4b14      	ldr	r3, [pc, #80]	@ (800cf58 <HAL_UARTEx_RxEventCallback+0x70>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	4b12      	ldr	r3, [pc, #72]	@ (800cf58 <HAL_UARTEx_RxEventCallback+0x70>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f022 0204 	bic.w	r2, r2, #4
 800cf14:	601a      	str	r2, [r3, #0]
    toProcessData = 1;
 800cf16:	4b11      	ldr	r3, [pc, #68]	@ (800cf5c <HAL_UARTEx_RxEventCallback+0x74>)
 800cf18:	2201      	movs	r2, #1
 800cf1a:	701a      	strb	r2, [r3, #0]
  {
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
    toProcessData = 1;
  }
}
 800cf1c:	e013      	b.n	800cf46 <HAL_UARTEx_RxEventCallback+0x5e>
  else if (huart == &huart3)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	4a0f      	ldr	r2, [pc, #60]	@ (800cf60 <HAL_UARTEx_RxEventCallback+0x78>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d10f      	bne.n	800cf46 <HAL_UARTEx_RxEventCallback+0x5e>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 800cf26:	2264      	movs	r2, #100	@ 0x64
 800cf28:	490a      	ldr	r1, [pc, #40]	@ (800cf54 <HAL_UARTEx_RxEventCallback+0x6c>)
 800cf2a:	480d      	ldr	r0, [pc, #52]	@ (800cf60 <HAL_UARTEx_RxEventCallback+0x78>)
 800cf2c:	f7fe f817 	bl	800af5e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800cf30:	4b0c      	ldr	r3, [pc, #48]	@ (800cf64 <HAL_UARTEx_RxEventCallback+0x7c>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	4b0b      	ldr	r3, [pc, #44]	@ (800cf64 <HAL_UARTEx_RxEventCallback+0x7c>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f022 0204 	bic.w	r2, r2, #4
 800cf3e:	601a      	str	r2, [r3, #0]
    toProcessData = 1;
 800cf40:	4b06      	ldr	r3, [pc, #24]	@ (800cf5c <HAL_UARTEx_RxEventCallback+0x74>)
 800cf42:	2201      	movs	r2, #1
 800cf44:	701a      	strb	r2, [r3, #0]
}
 800cf46:	bf00      	nop
 800cf48:	3708      	adds	r7, #8
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	20000560 	.word	0x20000560
 800cf54:	20000b94 	.word	0x20000b94
 800cf58:	20000688 	.word	0x20000688
 800cf5c:	20000bf8 	.word	0x20000bf8
 800cf60:	200005f4 	.word	0x200005f4
 800cf64:	200007a8 	.word	0x200007a8

0800cf68 <printLog>:

// DMA模式
void printLog(const char *format, ...)
{
 800cf68:	b40f      	push	{r0, r1, r2, r3}
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b0c2      	sub	sp, #264	@ 0x108
 800cf6e:	af00      	add	r7, sp, #0

  va_list args;           // 定义参数列表变量
  va_start(args, format); // 从format位置开始接收参数表，放在arg里面
 800cf70:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800cf74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

  char strBuf[256];               // 定义输出的字符串
  vsprintf(strBuf, format, args); // 使用vsprintf将格式化的数据写入缓冲区
 800cf78:	1d3b      	adds	r3, r7, #4
 800cf7a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800cf7e:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800cf82:	4618      	mov	r0, r3
 800cf84:	f003 fe4a 	bl	8010c1c <vsiprintf>
  // while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX)
  // {
  //   // Wait for DMA transfer to complete
  // }
  // HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf));
  HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf), 1000);
 800cf88:	1d3b      	adds	r3, r7, #4
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7f3 f998 	bl	80002c0 <strlen>
 800cf90:	4603      	mov	r3, r0
 800cf92:	b29a      	uxth	r2, r3
 800cf94:	1d39      	adds	r1, r7, #4
 800cf96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cf9a:	4805      	ldr	r0, [pc, #20]	@ (800cfb0 <printLog+0x48>)
 800cf9c:	f7fc fb44 	bl	8009628 <HAL_UART_Transmit>
}
 800cfa0:	bf00      	nop
 800cfa2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cfac:	b004      	add	sp, #16
 800cfae:	4770      	bx	lr
 800cfb0:	200005f4 	.word	0x200005f4

0800cfb4 <commander_run>:
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
#endif
}

void commander_run(BldcMotor *motor1, BldcMotor *motor2)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
  if (toProcessData == 1)
 800cfbe:	4b65      	ldr	r3, [pc, #404]	@ (800d154 <commander_run+0x1a0>)
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	f040 80c1 	bne.w	800d14a <commander_run+0x196>
  {
    memset(txBuffer, '\0', sizeof(txBuffer));
 800cfc8:	2264      	movs	r2, #100	@ 0x64
 800cfca:	2100      	movs	r1, #0
 800cfcc:	4862      	ldr	r0, [pc, #392]	@ (800d158 <commander_run+0x1a4>)
 800cfce:	f003 fe2f 	bl	8010c30 <memset>
    // printLog(rxBuffer);
    switch (rxBuffer[0])
 800cfd2:	4b62      	ldr	r3, [pc, #392]	@ (800d15c <commander_run+0x1a8>)
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	3b44      	subs	r3, #68	@ 0x44
 800cfd8:	2b10      	cmp	r3, #16
 800cfda:	f200 80a9 	bhi.w	800d130 <commander_run+0x17c>
 800cfde:	a201      	add	r2, pc, #4	@ (adr r2, 800cfe4 <commander_run+0x30>)
 800cfe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfe4:	0800d0ff 	.word	0x0800d0ff
 800cfe8:	0800d131 	.word	0x0800d131
 800cfec:	0800d131 	.word	0x0800d131
 800cff0:	0800d131 	.word	0x0800d131
 800cff4:	0800d05f 	.word	0x0800d05f
 800cff8:	0800d0cd 	.word	0x0800d0cd
 800cffc:	0800d029 	.word	0x0800d029
 800d000:	0800d131 	.word	0x0800d131
 800d004:	0800d131 	.word	0x0800d131
 800d008:	0800d131 	.word	0x0800d131
 800d00c:	0800d131 	.word	0x0800d131
 800d010:	0800d131 	.word	0x0800d131
 800d014:	0800d09b 	.word	0x0800d09b
 800d018:	0800d131 	.word	0x0800d131
 800d01c:	0800d131 	.word	0x0800d131
 800d020:	0800d131 	.word	0x0800d131
 800d024:	0800d069 	.word	0x0800d069
    {
    case 'J':
      // sprintf(txBuffer, "recved %d bytes\r\n", sizeof(txBuffer));
      char buffer[sizeof(DataPackage)];
      memcpy(buffer, rxBuffer, sizeof(DataPackage));
 800d028:	4a4c      	ldr	r2, [pc, #304]	@ (800d15c <commander_run+0x1a8>)
 800d02a:	f107 0308 	add.w	r3, r7, #8
 800d02e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d032:	6018      	str	r0, [r3, #0]
 800d034:	3304      	adds	r3, #4
 800d036:	8019      	strh	r1, [r3, #0]
      //    sprintf(txBuffer, "leftPotX %d, leftPotY %d, rightPotX %d rightPotY %d buttons %d\n", buffer[1], buffer[2], buffer[3], buffer[4], buffer[5]);
      throttle = getThrottle(buffer[2]);
 800d038:	7abb      	ldrb	r3, [r7, #10]
 800d03a:	4618      	mov	r0, r3
 800d03c:	f000 f8a4 	bl	800d188 <getThrottle>
 800d040:	eef0 7a40 	vmov.f32	s15, s0
 800d044:	4b46      	ldr	r3, [pc, #280]	@ (800d160 <commander_run+0x1ac>)
 800d046:	edc3 7a00 	vstr	s15, [r3]
      steering = getSteering(buffer[3]);
 800d04a:	7afb      	ldrb	r3, [r7, #11]
 800d04c:	4618      	mov	r0, r3
 800d04e:	f000 f8e1 	bl	800d214 <getSteering>
 800d052:	eef0 7a40 	vmov.f32	s15, s0
 800d056:	4b43      	ldr	r3, [pc, #268]	@ (800d164 <commander_run+0x1b0>)
 800d058:	edc3 7a00 	vstr	s15, [r3]
      // sprintf(txBuffer, "throttle %f\n", throttle);
      // sprintf(buffer);
      //   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
      break;
 800d05c:	e068      	b.n	800d130 <commander_run+0x17c>

    case 'H':
      sprintf(txBuffer, "Hello World!\r\n");
 800d05e:	4942      	ldr	r1, [pc, #264]	@ (800d168 <commander_run+0x1b4>)
 800d060:	483d      	ldr	r0, [pc, #244]	@ (800d158 <commander_run+0x1a4>)
 800d062:	f003 fd61 	bl	8010b28 <siprintf>
      break;
 800d066:	e063      	b.n	800d130 <commander_run+0x17c>

    case 'T': // T6.28
      motor1->target = atof((const char *)(rxBuffer + 1));
 800d068:	4b40      	ldr	r3, [pc, #256]	@ (800d16c <commander_run+0x1b8>)
 800d06a:	4618      	mov	r0, r3
 800d06c:	f002 f814 	bl	800f098 <atof>
 800d070:	ec53 2b10 	vmov	r2, r3, d0
 800d074:	4610      	mov	r0, r2
 800d076:	4619      	mov	r1, r3
 800d078:	f7f3 fdde 	bl	8000c38 <__aeabi_d2f>
 800d07c:	4602      	mov	r2, r0
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	631a      	str	r2, [r3, #48]	@ 0x30
      sprintf(txBuffer, "Target=%.2f\r\n", motor1->target);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d086:	4618      	mov	r0, r3
 800d088:	f7f3 fa86 	bl	8000598 <__aeabi_f2d>
 800d08c:	4602      	mov	r2, r0
 800d08e:	460b      	mov	r3, r1
 800d090:	4937      	ldr	r1, [pc, #220]	@ (800d170 <commander_run+0x1bc>)
 800d092:	4831      	ldr	r0, [pc, #196]	@ (800d158 <commander_run+0x1a4>)
 800d094:	f003 fd48 	bl	8010b28 <siprintf>
      // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
      break;
 800d098:	e04a      	b.n	800d130 <commander_run+0x17c>
      sprintf(txBuffer, "D=%.2f\r\n", pid_stb.D);
      break;

#elif CALI_VEL_PID
    case 'P': // P0.5
      pid_vel.P = atof((const char *)(rxBuffer + 1));
 800d09a:	4b34      	ldr	r3, [pc, #208]	@ (800d16c <commander_run+0x1b8>)
 800d09c:	4618      	mov	r0, r3
 800d09e:	f001 fffb 	bl	800f098 <atof>
 800d0a2:	ec53 2b10 	vmov	r2, r3, d0
 800d0a6:	4610      	mov	r0, r2
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	f7f3 fdc5 	bl	8000c38 <__aeabi_d2f>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	4a30      	ldr	r2, [pc, #192]	@ (800d174 <commander_run+0x1c0>)
 800d0b2:	6013      	str	r3, [r2, #0]
      sprintf(txBuffer, "P=%.3f\r\n", pid_vel.P);
 800d0b4:	4b2f      	ldr	r3, [pc, #188]	@ (800d174 <commander_run+0x1c0>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7f3 fa6d 	bl	8000598 <__aeabi_f2d>
 800d0be:	4602      	mov	r2, r0
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	492d      	ldr	r1, [pc, #180]	@ (800d178 <commander_run+0x1c4>)
 800d0c4:	4824      	ldr	r0, [pc, #144]	@ (800d158 <commander_run+0x1a4>)
 800d0c6:	f003 fd2f 	bl	8010b28 <siprintf>
      //   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
      break;
 800d0ca:	e031      	b.n	800d130 <commander_run+0x17c>

    case 'I': // I0.2
      pid_vel.I = atof((const char *)(rxBuffer + 1));
 800d0cc:	4b27      	ldr	r3, [pc, #156]	@ (800d16c <commander_run+0x1b8>)
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f001 ffe2 	bl	800f098 <atof>
 800d0d4:	ec53 2b10 	vmov	r2, r3, d0
 800d0d8:	4610      	mov	r0, r2
 800d0da:	4619      	mov	r1, r3
 800d0dc:	f7f3 fdac 	bl	8000c38 <__aeabi_d2f>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	4a24      	ldr	r2, [pc, #144]	@ (800d174 <commander_run+0x1c0>)
 800d0e4:	6053      	str	r3, [r2, #4]
      sprintf(txBuffer, "I=%.3f\r\n", pid_vel.I);
 800d0e6:	4b23      	ldr	r3, [pc, #140]	@ (800d174 <commander_run+0x1c0>)
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7f3 fa54 	bl	8000598 <__aeabi_f2d>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	460b      	mov	r3, r1
 800d0f4:	4921      	ldr	r1, [pc, #132]	@ (800d17c <commander_run+0x1c8>)
 800d0f6:	4818      	ldr	r0, [pc, #96]	@ (800d158 <commander_run+0x1a4>)
 800d0f8:	f003 fd16 	bl	8010b28 <siprintf>
      break;
 800d0fc:	e018      	b.n	800d130 <commander_run+0x17c>

    case 'D': // I0.2
      pid_vel.D = atof((const char *)(rxBuffer + 1));
 800d0fe:	4b1b      	ldr	r3, [pc, #108]	@ (800d16c <commander_run+0x1b8>)
 800d100:	4618      	mov	r0, r3
 800d102:	f001 ffc9 	bl	800f098 <atof>
 800d106:	ec53 2b10 	vmov	r2, r3, d0
 800d10a:	4610      	mov	r0, r2
 800d10c:	4619      	mov	r1, r3
 800d10e:	f7f3 fd93 	bl	8000c38 <__aeabi_d2f>
 800d112:	4603      	mov	r3, r0
 800d114:	4a17      	ldr	r2, [pc, #92]	@ (800d174 <commander_run+0x1c0>)
 800d116:	6093      	str	r3, [r2, #8]
      sprintf(txBuffer, "D=%.3f\r\n", pid_vel.D);
 800d118:	4b16      	ldr	r3, [pc, #88]	@ (800d174 <commander_run+0x1c0>)
 800d11a:	689b      	ldr	r3, [r3, #8]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7f3 fa3b 	bl	8000598 <__aeabi_f2d>
 800d122:	4602      	mov	r2, r0
 800d124:	460b      	mov	r3, r1
 800d126:	4916      	ldr	r1, [pc, #88]	@ (800d180 <commander_run+0x1cc>)
 800d128:	480b      	ldr	r0, [pc, #44]	@ (800d158 <commander_run+0x1a4>)
 800d12a:	f003 fcfd 	bl	8010b28 <siprintf>
      break;
 800d12e:	bf00      	nop
#endif
    }
    HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800d130:	2264      	movs	r2, #100	@ 0x64
 800d132:	4909      	ldr	r1, [pc, #36]	@ (800d158 <commander_run+0x1a4>)
 800d134:	4813      	ldr	r0, [pc, #76]	@ (800d184 <commander_run+0x1d0>)
 800d136:	f7fc fb05 	bl	8009744 <HAL_UART_Transmit_DMA>
    memset(rxBuffer, '\0', sizeof(rxBuffer));
 800d13a:	2264      	movs	r2, #100	@ 0x64
 800d13c:	2100      	movs	r1, #0
 800d13e:	4807      	ldr	r0, [pc, #28]	@ (800d15c <commander_run+0x1a8>)
 800d140:	f003 fd76 	bl	8010c30 <memset>
    toProcessData = 0;
 800d144:	4b03      	ldr	r3, [pc, #12]	@ (800d154 <commander_run+0x1a0>)
 800d146:	2200      	movs	r2, #0
 800d148:	701a      	strb	r2, [r3, #0]
  }
}
 800d14a:	bf00      	nop
 800d14c:	3710      	adds	r7, #16
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
 800d152:	bf00      	nop
 800d154:	20000bf8 	.word	0x20000bf8
 800d158:	20000b30 	.word	0x20000b30
 800d15c:	20000b94 	.word	0x20000b94
 800d160:	20000c00 	.word	0x20000c00
 800d164:	20000bfc 	.word	0x20000bfc
 800d168:	0801469c 	.word	0x0801469c
 800d16c:	20000b95 	.word	0x20000b95
 800d170:	080146ac 	.word	0x080146ac
 800d174:	20000adc 	.word	0x20000adc
 800d178:	080146bc 	.word	0x080146bc
 800d17c:	080146c8 	.word	0x080146c8
 800d180:	080146d4 	.word	0x080146d4
 800d184:	200005f4 	.word	0x200005f4

0800d188 <getThrottle>:
float throttle = 0;
float max_steering = 1;  // 1 V


float getThrottle(unsigned char pm)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b084      	sub	sp, #16
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	4603      	mov	r3, r0
 800d190:	71fb      	strb	r3, [r7, #7]
    int inByte = map(pm, 0, 255, -125, 125);
 800d192:	79fb      	ldrb	r3, [r7, #7]
 800d194:	ee07 3a90 	vmov	s15, r3
 800d198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d19c:	ed9f 2a18 	vldr	s4, [pc, #96]	@ 800d200 <getThrottle+0x78>
 800d1a0:	eddf 1a18 	vldr	s3, [pc, #96]	@ 800d204 <getThrottle+0x7c>
 800d1a4:	ed9f 1a18 	vldr	s2, [pc, #96]	@ 800d208 <getThrottle+0x80>
 800d1a8:	eddf 0a18 	vldr	s1, [pc, #96]	@ 800d20c <getThrottle+0x84>
 800d1ac:	eeb0 0a67 	vmov.f32	s0, s15
 800d1b0:	f001 fe2e 	bl	800ee10 <map>
 800d1b4:	eef0 7a40 	vmov.f32	s15, s0
 800d1b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d1bc:	ee17 3a90 	vmov	r3, s15
 800d1c0:	60fb      	str	r3, [r7, #12]

  //  printLog("inByte %d\n", inByte);
    if (inByte < -25 || inByte > 25)
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f113 0f19 	cmn.w	r3, #25
 800d1c8:	db02      	blt.n	800d1d0 <getThrottle+0x48>
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	2b19      	cmp	r3, #25
 800d1ce:	dd0e      	ble.n	800d1ee <getThrottle+0x66>
    {
        // throttle set-point Byte
        return max_throttle * ((float)inByte) / 125.0;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	ee07 3a90 	vmov	s15, r3
 800d1d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d1da:	4b0d      	ldr	r3, [pc, #52]	@ (800d210 <getThrottle+0x88>)
 800d1dc:	edd3 7a00 	vldr	s15, [r3]
 800d1e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1e4:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800d200 <getThrottle+0x78>
 800d1e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d1ec:	e001      	b.n	800d1f2 <getThrottle+0x6a>
    }
    else
        return 0;
 800d1ee:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800d20c <getThrottle+0x84>
}
 800d1f2:	eef0 7a47 	vmov.f32	s15, s14
 800d1f6:	eeb0 0a67 	vmov.f32	s0, s15
 800d1fa:	3710      	adds	r7, #16
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	42fa0000 	.word	0x42fa0000
 800d204:	c2fa0000 	.word	0xc2fa0000
 800d208:	437f0000 	.word	0x437f0000
 800d20c:	00000000 	.word	0x00000000
 800d210:	200000b4 	.word	0x200000b4

0800d214 <getSteering>:


float getSteering(unsigned char pm)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	4603      	mov	r3, r0
 800d21c:	71fb      	strb	r3, [r7, #7]
    int inByte = map(pm, 0, 255, -125, 125);
 800d21e:	79fb      	ldrb	r3, [r7, #7]
 800d220:	ee07 3a90 	vmov	s15, r3
 800d224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d228:	ed9f 2a18 	vldr	s4, [pc, #96]	@ 800d28c <getSteering+0x78>
 800d22c:	eddf 1a18 	vldr	s3, [pc, #96]	@ 800d290 <getSteering+0x7c>
 800d230:	ed9f 1a18 	vldr	s2, [pc, #96]	@ 800d294 <getSteering+0x80>
 800d234:	eddf 0a18 	vldr	s1, [pc, #96]	@ 800d298 <getSteering+0x84>
 800d238:	eeb0 0a67 	vmov.f32	s0, s15
 800d23c:	f001 fde8 	bl	800ee10 <map>
 800d240:	eef0 7a40 	vmov.f32	s15, s0
 800d244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d248:	ee17 3a90 	vmov	r3, s15
 800d24c:	60fb      	str	r3, [r7, #12]

    // printLog("inByte %d\n", inByte);
    if (inByte < -25 || inByte > 25)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	f113 0f19 	cmn.w	r3, #25
 800d254:	db02      	blt.n	800d25c <getSteering+0x48>
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2b19      	cmp	r3, #25
 800d25a:	dd0e      	ble.n	800d27a <getSteering+0x66>
    {
        // throttle set-point Byte
        return max_steering * ((float)inByte) / 125.0;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	ee07 3a90 	vmov	s15, r3
 800d262:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d266:	4b0d      	ldr	r3, [pc, #52]	@ (800d29c <getSteering+0x88>)
 800d268:	edd3 7a00 	vldr	s15, [r3]
 800d26c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d270:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800d28c <getSteering+0x78>
 800d274:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d278:	e001      	b.n	800d27e <getSteering+0x6a>
    }
    else
        return 0;
 800d27a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800d298 <getSteering+0x84>
}
 800d27e:	eef0 7a47 	vmov.f32	s15, s14
 800d282:	eeb0 0a67 	vmov.f32	s0, s15
 800d286:	3710      	adds	r7, #16
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	42fa0000 	.word	0x42fa0000
 800d290:	c2fa0000 	.word	0xc2fa0000
 800d294:	437f0000 	.word	0x437f0000
 800d298:	00000000 	.word	0x00000000
 800d29c:	200000b8 	.word	0x200000b8

0800d2a0 <getKeyFlags>:
#include "key.h"

static KeyStruct keyStruct[KEY_NUM];

uint getKeyFlags()
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	af00      	add	r7, sp, #0
    static uint keyFlagsBak; // back up keyflags for filtering
    static uchar filterCnt;
    static Byte flags;       // real time key flags with bits operation
    static uint keyFlagsBuf; // return key flags after filtering

    flags.byte = 0;
 800d2a4:	4b1a      	ldr	r3, [pc, #104]	@ (800d310 <getKeyFlags+0x70>)
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	701a      	strb	r2, [r3, #0]

    // when IO been multiplexed
    if (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == 0)
 800d2aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800d2ae:	4819      	ldr	r0, [pc, #100]	@ (800d314 <getKeyFlags+0x74>)
 800d2b0:	f7f9 fa2e 	bl	8006710 <HAL_GPIO_ReadPin>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d104      	bne.n	800d2c4 <getKeyFlags+0x24>
    {
        flags.bits.b0 = 1; // SW1
 800d2ba:	4a15      	ldr	r2, [pc, #84]	@ (800d310 <getKeyFlags+0x70>)
 800d2bc:	7813      	ldrb	r3, [r2, #0]
 800d2be:	f043 0301 	orr.w	r3, r3, #1
 800d2c2:	7013      	strb	r3, [r2, #0]
    }

  
    if (flags.byte == keyFlagsBak)
 800d2c4:	4b12      	ldr	r3, [pc, #72]	@ (800d310 <getKeyFlags+0x70>)
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	4b13      	ldr	r3, [pc, #76]	@ (800d318 <getKeyFlags+0x78>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d114      	bne.n	800d2fc <getKeyFlags+0x5c>
    {
        if (flags.bits.b0)
 800d2d2:	4b0f      	ldr	r3, [pc, #60]	@ (800d310 <getKeyFlags+0x70>)
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	f003 0301 	and.w	r3, r3, #1
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d006      	beq.n	800d2ee <getKeyFlags+0x4e>
            keyFlagsBuf |= 1;
 800d2e0:	4b0e      	ldr	r3, [pc, #56]	@ (800d31c <getKeyFlags+0x7c>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	f043 0301 	orr.w	r3, r3, #1
 800d2e8:	4a0c      	ldr	r2, [pc, #48]	@ (800d31c <getKeyFlags+0x7c>)
 800d2ea:	6013      	str	r3, [r2, #0]
 800d2ec:	e00b      	b.n	800d306 <getKeyFlags+0x66>
        else
            keyFlagsBuf &= ~1;
 800d2ee:	4b0b      	ldr	r3, [pc, #44]	@ (800d31c <getKeyFlags+0x7c>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f023 0301 	bic.w	r3, r3, #1
 800d2f6:	4a09      	ldr	r2, [pc, #36]	@ (800d31c <getKeyFlags+0x7c>)
 800d2f8:	6013      	str	r3, [r2, #0]
 800d2fa:	e004      	b.n	800d306 <getKeyFlags+0x66>
        // else
        //     keyFlagsBuf &= ~(1 << 2);
    }
    else
    {
        keyFlagsBak = flags.byte;
 800d2fc:	4b04      	ldr	r3, [pc, #16]	@ (800d310 <getKeyFlags+0x70>)
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	461a      	mov	r2, r3
 800d302:	4b05      	ldr	r3, [pc, #20]	@ (800d318 <getKeyFlags+0x78>)
 800d304:	601a      	str	r2, [r3, #0]
    }
#if DEBUG_KEY
    // displayStuff = keyFlagsBuf;
#endif

    return keyFlagsBuf;
 800d306:	4b05      	ldr	r3, [pc, #20]	@ (800d31c <getKeyFlags+0x7c>)
 800d308:	681b      	ldr	r3, [r3, #0]
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	20000c1c 	.word	0x20000c1c
 800d314:	48000800 	.word	0x48000800
 800d318:	20000c20 	.word	0x20000c20
 800d31c:	20000c24 	.word	0x20000c24

0800d320 <keyScan>:

void keyScan()
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0

    uint keyFlags;

    keyFlags = getKeyFlags();
 800d326:	f7ff ffbb 	bl	800d2a0 <getKeyFlags>
 800d32a:	6038      	str	r0, [r7, #0]

    if (keyFlags == 0)
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d13b      	bne.n	800d3aa <keyScan+0x8a>
    {
        uchar i;
        for (i = 0; i < KEY_NUM; i++)
 800d332:	2300      	movs	r3, #0
 800d334:	71fb      	strb	r3, [r7, #7]
 800d336:	e035      	b.n	800d3a4 <keyScan+0x84>
        {
            if (keyStruct[i].keyType == LONG_WITH_SHORT && keyStruct[i].trigCnt > 0)
 800d338:	79fa      	ldrb	r2, [r7, #7]
 800d33a:	4992      	ldr	r1, [pc, #584]	@ (800d584 <keyScan+0x264>)
 800d33c:	4613      	mov	r3, r2
 800d33e:	005b      	lsls	r3, r3, #1
 800d340:	4413      	add	r3, r2
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	440b      	add	r3, r1
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	2b01      	cmp	r3, #1
 800d34a:	d114      	bne.n	800d376 <keyScan+0x56>
 800d34c:	79fa      	ldrb	r2, [r7, #7]
 800d34e:	498d      	ldr	r1, [pc, #564]	@ (800d584 <keyScan+0x264>)
 800d350:	4613      	mov	r3, r2
 800d352:	005b      	lsls	r3, r3, #1
 800d354:	4413      	add	r3, r2
 800d356:	009b      	lsls	r3, r3, #2
 800d358:	440b      	add	r3, r1
 800d35a:	3304      	adds	r3, #4
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d009      	beq.n	800d376 <keyScan+0x56>
            {
                keyStruct[i].trigType = TRIG_SHORT;
 800d362:	79fa      	ldrb	r2, [r7, #7]
 800d364:	4987      	ldr	r1, [pc, #540]	@ (800d584 <keyScan+0x264>)
 800d366:	4613      	mov	r3, r2
 800d368:	005b      	lsls	r3, r3, #1
 800d36a:	4413      	add	r3, r2
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	440b      	add	r3, r1
 800d370:	3308      	adds	r3, #8
 800d372:	2201      	movs	r2, #1
 800d374:	701a      	strb	r2, [r3, #0]
            }
            keyStruct[i].trigCnt = 0;
 800d376:	79fa      	ldrb	r2, [r7, #7]
 800d378:	4982      	ldr	r1, [pc, #520]	@ (800d584 <keyScan+0x264>)
 800d37a:	4613      	mov	r3, r2
 800d37c:	005b      	lsls	r3, r3, #1
 800d37e:	4413      	add	r3, r2
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	440b      	add	r3, r1
 800d384:	3304      	adds	r3, #4
 800d386:	2200      	movs	r2, #0
 800d388:	601a      	str	r2, [r3, #0]
            keyStruct[i].preKeyValue = NO_TRIG;
 800d38a:	79fa      	ldrb	r2, [r7, #7]
 800d38c:	497d      	ldr	r1, [pc, #500]	@ (800d584 <keyScan+0x264>)
 800d38e:	4613      	mov	r3, r2
 800d390:	005b      	lsls	r3, r3, #1
 800d392:	4413      	add	r3, r2
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	440b      	add	r3, r1
 800d398:	3309      	adds	r3, #9
 800d39a:	2200      	movs	r2, #0
 800d39c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < KEY_NUM; i++)
 800d39e:	79fb      	ldrb	r3, [r7, #7]
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	71fb      	strb	r3, [r7, #7]
 800d3a4:	79fb      	ldrb	r3, [r7, #7]
 800d3a6:	2b01      	cmp	r3, #1
 800d3a8:	d9c6      	bls.n	800d338 <keyScan+0x18>
        }
    }


    if (keyStruct[1].preKeyValue == NO_TRIG)
 800d3aa:	4b76      	ldr	r3, [pc, #472]	@ (800d584 <keyScan+0x264>)
 800d3ac:	7d5b      	ldrb	r3, [r3, #21]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d131      	bne.n	800d416 <keyScan+0xf6>
    {
        if (keyFlags == K(1))
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d15d      	bne.n	800d474 <keyScan+0x154>
        {
            if (keyStruct[1].preKeyValue == NO_TRIG)
 800d3b8:	4b72      	ldr	r3, [pc, #456]	@ (800d584 <keyScan+0x264>)
 800d3ba:	7d5b      	ldrb	r3, [r3, #21]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d159      	bne.n	800d474 <keyScan+0x154>
            {
                if (keyStruct[1].keyType == SHORT || keyStruct[1].keyType == CONTINUOUS)
 800d3c0:	4b70      	ldr	r3, [pc, #448]	@ (800d584 <keyScan+0x264>)
 800d3c2:	7b1b      	ldrb	r3, [r3, #12]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d003      	beq.n	800d3d0 <keyScan+0xb0>
 800d3c8:	4b6e      	ldr	r3, [pc, #440]	@ (800d584 <keyScan+0x264>)
 800d3ca:	7b1b      	ldrb	r3, [r3, #12]
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	d106      	bne.n	800d3de <keyScan+0xbe>
                {
                    keyStruct[1].trigType = TRIG_SHORT;
 800d3d0:	4b6c      	ldr	r3, [pc, #432]	@ (800d584 <keyScan+0x264>)
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	751a      	strb	r2, [r3, #20]
                    keyStruct[1].preKeyValue = TRIG_SHORT;
 800d3d6:	4b6b      	ldr	r3, [pc, #428]	@ (800d584 <keyScan+0x264>)
 800d3d8:	2201      	movs	r2, #1
 800d3da:	755a      	strb	r2, [r3, #21]
 800d3dc:	e04a      	b.n	800d474 <keyScan+0x154>
                }
                else if (keyStruct[1].keyType == LONG_WITH_SHORT || keyStruct[1].keyType == LONG)
 800d3de:	4b69      	ldr	r3, [pc, #420]	@ (800d584 <keyScan+0x264>)
 800d3e0:	7b1b      	ldrb	r3, [r3, #12]
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	d003      	beq.n	800d3ee <keyScan+0xce>
 800d3e6:	4b67      	ldr	r3, [pc, #412]	@ (800d584 <keyScan+0x264>)
 800d3e8:	7b1b      	ldrb	r3, [r3, #12]
 800d3ea:	2b03      	cmp	r3, #3
 800d3ec:	d142      	bne.n	800d474 <keyScan+0x154>
                {
                    if (++keyStruct[1].trigCnt >= KEY1_LONG_CNT)
 800d3ee:	4b65      	ldr	r3, [pc, #404]	@ (800d584 <keyScan+0x264>)
 800d3f0:	691b      	ldr	r3, [r3, #16]
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	4a63      	ldr	r2, [pc, #396]	@ (800d584 <keyScan+0x264>)
 800d3f6:	6113      	str	r3, [r2, #16]
 800d3f8:	4b62      	ldr	r3, [pc, #392]	@ (800d584 <keyScan+0x264>)
 800d3fa:	691b      	ldr	r3, [r3, #16]
 800d3fc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d400:	d338      	bcc.n	800d474 <keyScan+0x154>
                    {
                        keyStruct[1].trigCnt = 0;
 800d402:	4b60      	ldr	r3, [pc, #384]	@ (800d584 <keyScan+0x264>)
 800d404:	2200      	movs	r2, #0
 800d406:	611a      	str	r2, [r3, #16]
                        keyStruct[1].trigType = TRIG_LONG;
 800d408:	4b5e      	ldr	r3, [pc, #376]	@ (800d584 <keyScan+0x264>)
 800d40a:	2202      	movs	r2, #2
 800d40c:	751a      	strb	r2, [r3, #20]
                        keyStruct[1].preKeyValue = TRIG_LONG;
 800d40e:	4b5d      	ldr	r3, [pc, #372]	@ (800d584 <keyScan+0x264>)
 800d410:	2202      	movs	r2, #2
 800d412:	755a      	strb	r2, [r3, #21]
 800d414:	e02e      	b.n	800d474 <keyScan+0x154>
                    }
                }
            }
        }
    }
    else if (keyStruct[1].keyType == CONTINUOUS)
 800d416:	4b5b      	ldr	r3, [pc, #364]	@ (800d584 <keyScan+0x264>)
 800d418:	7b1b      	ldrb	r3, [r3, #12]
 800d41a:	2b02      	cmp	r3, #2
 800d41c:	d12a      	bne.n	800d474 <keyScan+0x154>
    {
        if (keyStruct[1].preKeyValue == TRIG_SHORT) // short key
 800d41e:	4b59      	ldr	r3, [pc, #356]	@ (800d584 <keyScan+0x264>)
 800d420:	7d5b      	ldrb	r3, [r3, #21]
 800d422:	2b01      	cmp	r3, #1
 800d424:	d112      	bne.n	800d44c <keyScan+0x12c>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_TRIG_CNT)
 800d426:	4b57      	ldr	r3, [pc, #348]	@ (800d584 <keyScan+0x264>)
 800d428:	691b      	ldr	r3, [r3, #16]
 800d42a:	3301      	adds	r3, #1
 800d42c:	4a55      	ldr	r2, [pc, #340]	@ (800d584 <keyScan+0x264>)
 800d42e:	6113      	str	r3, [r2, #16]
 800d430:	4b54      	ldr	r3, [pc, #336]	@ (800d584 <keyScan+0x264>)
 800d432:	691b      	ldr	r3, [r3, #16]
 800d434:	2b63      	cmp	r3, #99	@ 0x63
 800d436:	d91d      	bls.n	800d474 <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800d438:	4b52      	ldr	r3, [pc, #328]	@ (800d584 <keyScan+0x264>)
 800d43a:	2200      	movs	r2, #0
 800d43c:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = TRIG_LONG; // long
 800d43e:	4b51      	ldr	r3, [pc, #324]	@ (800d584 <keyScan+0x264>)
 800d440:	2202      	movs	r2, #2
 800d442:	751a      	strb	r2, [r3, #20]
                keyStruct[1].preKeyValue = TRIG_LONG;
 800d444:	4b4f      	ldr	r3, [pc, #316]	@ (800d584 <keyScan+0x264>)
 800d446:	2202      	movs	r2, #2
 800d448:	755a      	strb	r2, [r3, #21]
 800d44a:	e013      	b.n	800d474 <keyScan+0x154>
            }
        }
        else if (keyStruct[1].preKeyValue == TRIG_LONG) // long key
 800d44c:	4b4d      	ldr	r3, [pc, #308]	@ (800d584 <keyScan+0x264>)
 800d44e:	7d5b      	ldrb	r3, [r3, #21]
 800d450:	2b02      	cmp	r3, #2
 800d452:	d10f      	bne.n	800d474 <keyScan+0x154>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_INTEVAL)
 800d454:	4b4b      	ldr	r3, [pc, #300]	@ (800d584 <keyScan+0x264>)
 800d456:	691b      	ldr	r3, [r3, #16]
 800d458:	3301      	adds	r3, #1
 800d45a:	4a4a      	ldr	r2, [pc, #296]	@ (800d584 <keyScan+0x264>)
 800d45c:	6113      	str	r3, [r2, #16]
 800d45e:	4b49      	ldr	r3, [pc, #292]	@ (800d584 <keyScan+0x264>)
 800d460:	691b      	ldr	r3, [r3, #16]
 800d462:	2b27      	cmp	r3, #39	@ 0x27
 800d464:	d906      	bls.n	800d474 <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800d466:	4b47      	ldr	r3, [pc, #284]	@ (800d584 <keyScan+0x264>)
 800d468:	2200      	movs	r2, #0
 800d46a:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = keyStruct[1].preKeyValue;
 800d46c:	4b45      	ldr	r3, [pc, #276]	@ (800d584 <keyScan+0x264>)
 800d46e:	7d5a      	ldrb	r2, [r3, #21]
 800d470:	4b44      	ldr	r3, [pc, #272]	@ (800d584 <keyScan+0x264>)
 800d472:	751a      	strb	r2, [r3, #20]
            }
        }
    }

    if (keyStruct[2].preKeyValue == NO_TRIG)
 800d474:	4b43      	ldr	r3, [pc, #268]	@ (800d584 <keyScan+0x264>)
 800d476:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d131      	bne.n	800d4e2 <keyScan+0x1c2>
    {
        if (keyFlags == K(2))
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	2b02      	cmp	r3, #2
 800d482:	d163      	bne.n	800d54c <keyScan+0x22c>
        {

            if (keyStruct[2].keyType == SHORT || keyStruct[2].keyType == CONTINUOUS)
 800d484:	4b3f      	ldr	r3, [pc, #252]	@ (800d584 <keyScan+0x264>)
 800d486:	7e1b      	ldrb	r3, [r3, #24]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d003      	beq.n	800d494 <keyScan+0x174>
 800d48c:	4b3d      	ldr	r3, [pc, #244]	@ (800d584 <keyScan+0x264>)
 800d48e:	7e1b      	ldrb	r3, [r3, #24]
 800d490:	2b02      	cmp	r3, #2
 800d492:	d108      	bne.n	800d4a6 <keyScan+0x186>
            {
                keyStruct[2].trigType = TRIG_SHORT;
 800d494:	4b3b      	ldr	r3, [pc, #236]	@ (800d584 <keyScan+0x264>)
 800d496:	2201      	movs	r2, #1
 800d498:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_SHORT;
 800d49c:	4b39      	ldr	r3, [pc, #228]	@ (800d584 <keyScan+0x264>)
 800d49e:	2201      	movs	r2, #1
 800d4a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800d4a4:	e052      	b.n	800d54c <keyScan+0x22c>
            }
            else if (keyStruct[2].keyType == LONG_WITH_SHORT || keyStruct[2].keyType == LONG)
 800d4a6:	4b37      	ldr	r3, [pc, #220]	@ (800d584 <keyScan+0x264>)
 800d4a8:	7e1b      	ldrb	r3, [r3, #24]
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d003      	beq.n	800d4b6 <keyScan+0x196>
 800d4ae:	4b35      	ldr	r3, [pc, #212]	@ (800d584 <keyScan+0x264>)
 800d4b0:	7e1b      	ldrb	r3, [r3, #24]
 800d4b2:	2b03      	cmp	r3, #3
 800d4b4:	d14a      	bne.n	800d54c <keyScan+0x22c>
            {
                if (++keyStruct[2].trigCnt >= KEY2_LONG_CNT)
 800d4b6:	4b33      	ldr	r3, [pc, #204]	@ (800d584 <keyScan+0x264>)
 800d4b8:	69db      	ldr	r3, [r3, #28]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	4a31      	ldr	r2, [pc, #196]	@ (800d584 <keyScan+0x264>)
 800d4be:	61d3      	str	r3, [r2, #28]
 800d4c0:	4b30      	ldr	r3, [pc, #192]	@ (800d584 <keyScan+0x264>)
 800d4c2:	69db      	ldr	r3, [r3, #28]
 800d4c4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d4c8:	d340      	bcc.n	800d54c <keyScan+0x22c>
                {
                    keyStruct[2].trigCnt = 0;
 800d4ca:	4b2e      	ldr	r3, [pc, #184]	@ (800d584 <keyScan+0x264>)
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	61da      	str	r2, [r3, #28]
                    keyStruct[2].trigType = TRIG_LONG;
 800d4d0:	4b2c      	ldr	r3, [pc, #176]	@ (800d584 <keyScan+0x264>)
 800d4d2:	2202      	movs	r2, #2
 800d4d4:	f883 2020 	strb.w	r2, [r3, #32]
                    keyStruct[2].preKeyValue = TRIG_LONG;
 800d4d8:	4b2a      	ldr	r3, [pc, #168]	@ (800d584 <keyScan+0x264>)
 800d4da:	2202      	movs	r2, #2
 800d4dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800d4e0:	e034      	b.n	800d54c <keyScan+0x22c>
                }
            }
        }
    }
    else if (keyStruct[2].keyType == CONTINUOUS)
 800d4e2:	4b28      	ldr	r3, [pc, #160]	@ (800d584 <keyScan+0x264>)
 800d4e4:	7e1b      	ldrb	r3, [r3, #24]
 800d4e6:	2b02      	cmp	r3, #2
 800d4e8:	d130      	bne.n	800d54c <keyScan+0x22c>
    {
        if (keyStruct[2].preKeyValue == TRIG_SHORT) // short key
 800d4ea:	4b26      	ldr	r3, [pc, #152]	@ (800d584 <keyScan+0x264>)
 800d4ec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	d114      	bne.n	800d51e <keyScan+0x1fe>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_TRIG_CNT)
 800d4f4:	4b23      	ldr	r3, [pc, #140]	@ (800d584 <keyScan+0x264>)
 800d4f6:	69db      	ldr	r3, [r3, #28]
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	4a22      	ldr	r2, [pc, #136]	@ (800d584 <keyScan+0x264>)
 800d4fc:	61d3      	str	r3, [r2, #28]
 800d4fe:	4b21      	ldr	r3, [pc, #132]	@ (800d584 <keyScan+0x264>)
 800d500:	69db      	ldr	r3, [r3, #28]
 800d502:	2b63      	cmp	r3, #99	@ 0x63
 800d504:	d922      	bls.n	800d54c <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800d506:	4b1f      	ldr	r3, [pc, #124]	@ (800d584 <keyScan+0x264>)
 800d508:	2200      	movs	r2, #0
 800d50a:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = TRIG_LONG; // long
 800d50c:	4b1d      	ldr	r3, [pc, #116]	@ (800d584 <keyScan+0x264>)
 800d50e:	2202      	movs	r2, #2
 800d510:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_LONG;
 800d514:	4b1b      	ldr	r3, [pc, #108]	@ (800d584 <keyScan+0x264>)
 800d516:	2202      	movs	r2, #2
 800d518:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800d51c:	e016      	b.n	800d54c <keyScan+0x22c>
            }
        }
        else if (keyStruct[2].preKeyValue == TRIG_LONG) // long key
 800d51e:	4b19      	ldr	r3, [pc, #100]	@ (800d584 <keyScan+0x264>)
 800d520:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d524:	2b02      	cmp	r3, #2
 800d526:	d111      	bne.n	800d54c <keyScan+0x22c>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_INTEVAL)
 800d528:	4b16      	ldr	r3, [pc, #88]	@ (800d584 <keyScan+0x264>)
 800d52a:	69db      	ldr	r3, [r3, #28]
 800d52c:	3301      	adds	r3, #1
 800d52e:	4a15      	ldr	r2, [pc, #84]	@ (800d584 <keyScan+0x264>)
 800d530:	61d3      	str	r3, [r2, #28]
 800d532:	4b14      	ldr	r3, [pc, #80]	@ (800d584 <keyScan+0x264>)
 800d534:	69db      	ldr	r3, [r3, #28]
 800d536:	2b27      	cmp	r3, #39	@ 0x27
 800d538:	d908      	bls.n	800d54c <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800d53a:	4b12      	ldr	r3, [pc, #72]	@ (800d584 <keyScan+0x264>)
 800d53c:	2200      	movs	r2, #0
 800d53e:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = keyStruct[2].preKeyValue;
 800d540:	4b10      	ldr	r3, [pc, #64]	@ (800d584 <keyScan+0x264>)
 800d542:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800d546:	4b0f      	ldr	r3, [pc, #60]	@ (800d584 <keyScan+0x264>)
 800d548:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }

    if (keyStruct[3].preKeyValue == NO_TRIG)
 800d54c:	4b0d      	ldr	r3, [pc, #52]	@ (800d584 <keyScan+0x264>)
 800d54e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d552:	2b00      	cmp	r3, #0
 800d554:	d137      	bne.n	800d5c6 <keyScan+0x2a6>
    {
        if (keyFlags == K(3))
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	2b04      	cmp	r3, #4
 800d55a:	d16a      	bne.n	800d632 <keyScan+0x312>
        {
            if (keyStruct[3].keyType == SHORT || keyStruct[3].keyType == CONTINUOUS)
 800d55c:	4b09      	ldr	r3, [pc, #36]	@ (800d584 <keyScan+0x264>)
 800d55e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d562:	2b00      	cmp	r3, #0
 800d564:	d004      	beq.n	800d570 <keyScan+0x250>
 800d566:	4b07      	ldr	r3, [pc, #28]	@ (800d584 <keyScan+0x264>)
 800d568:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d56c:	2b02      	cmp	r3, #2
 800d56e:	d10b      	bne.n	800d588 <keyScan+0x268>
            {
                keyStruct[3].trigType = TRIG_SHORT;
 800d570:	4b04      	ldr	r3, [pc, #16]	@ (800d584 <keyScan+0x264>)
 800d572:	2201      	movs	r2, #1
 800d574:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_SHORT;
 800d578:	4b02      	ldr	r3, [pc, #8]	@ (800d584 <keyScan+0x264>)
 800d57a:	2201      	movs	r2, #1
 800d57c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                keyStruct[3].trigCnt = 0;
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
            }
        }
    }
}
 800d580:	e057      	b.n	800d632 <keyScan+0x312>
 800d582:	bf00      	nop
 800d584:	20000c04 	.word	0x20000c04
            else if (keyStruct[3].keyType == LONG_WITH_SHORT || keyStruct[3].keyType == LONG)
 800d588:	4b2c      	ldr	r3, [pc, #176]	@ (800d63c <keyScan+0x31c>)
 800d58a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d004      	beq.n	800d59c <keyScan+0x27c>
 800d592:	4b2a      	ldr	r3, [pc, #168]	@ (800d63c <keyScan+0x31c>)
 800d594:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d598:	2b03      	cmp	r3, #3
 800d59a:	d14a      	bne.n	800d632 <keyScan+0x312>
                if (++keyStruct[3].trigCnt >= KEY3_LONG_CNT)
 800d59c:	4b27      	ldr	r3, [pc, #156]	@ (800d63c <keyScan+0x31c>)
 800d59e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	4a26      	ldr	r2, [pc, #152]	@ (800d63c <keyScan+0x31c>)
 800d5a4:	6293      	str	r3, [r2, #40]	@ 0x28
 800d5a6:	4b25      	ldr	r3, [pc, #148]	@ (800d63c <keyScan+0x31c>)
 800d5a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d041      	beq.n	800d632 <keyScan+0x312>
                    keyStruct[3].trigCnt = 0;
 800d5ae:	4b23      	ldr	r3, [pc, #140]	@ (800d63c <keyScan+0x31c>)
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	629a      	str	r2, [r3, #40]	@ 0x28
                    keyStruct[3].trigType = TRIG_LONG;
 800d5b4:	4b21      	ldr	r3, [pc, #132]	@ (800d63c <keyScan+0x31c>)
 800d5b6:	2202      	movs	r2, #2
 800d5b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                    keyStruct[3].preKeyValue = TRIG_LONG;
 800d5bc:	4b1f      	ldr	r3, [pc, #124]	@ (800d63c <keyScan+0x31c>)
 800d5be:	2202      	movs	r2, #2
 800d5c0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800d5c4:	e035      	b.n	800d632 <keyScan+0x312>
    else if (keyStruct[3].keyType == CONTINUOUS)
 800d5c6:	4b1d      	ldr	r3, [pc, #116]	@ (800d63c <keyScan+0x31c>)
 800d5c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d5cc:	2b02      	cmp	r3, #2
 800d5ce:	d130      	bne.n	800d632 <keyScan+0x312>
        if (keyStruct[3].preKeyValue == TRIG_SHORT) // short key
 800d5d0:	4b1a      	ldr	r3, [pc, #104]	@ (800d63c <keyScan+0x31c>)
 800d5d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d114      	bne.n	800d604 <keyScan+0x2e4>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_TRIG_CNT)
 800d5da:	4b18      	ldr	r3, [pc, #96]	@ (800d63c <keyScan+0x31c>)
 800d5dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5de:	3301      	adds	r3, #1
 800d5e0:	4a16      	ldr	r2, [pc, #88]	@ (800d63c <keyScan+0x31c>)
 800d5e2:	6293      	str	r3, [r2, #40]	@ 0x28
 800d5e4:	4b15      	ldr	r3, [pc, #84]	@ (800d63c <keyScan+0x31c>)
 800d5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5e8:	2b63      	cmp	r3, #99	@ 0x63
 800d5ea:	d922      	bls.n	800d632 <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800d5ec:	4b13      	ldr	r3, [pc, #76]	@ (800d63c <keyScan+0x31c>)
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = TRIG_LONG; // long
 800d5f2:	4b12      	ldr	r3, [pc, #72]	@ (800d63c <keyScan+0x31c>)
 800d5f4:	2202      	movs	r2, #2
 800d5f6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_LONG;
 800d5fa:	4b10      	ldr	r3, [pc, #64]	@ (800d63c <keyScan+0x31c>)
 800d5fc:	2202      	movs	r2, #2
 800d5fe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800d602:	e016      	b.n	800d632 <keyScan+0x312>
        else if (keyStruct[3].preKeyValue == TRIG_LONG) // long key
 800d604:	4b0d      	ldr	r3, [pc, #52]	@ (800d63c <keyScan+0x31c>)
 800d606:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d60a:	2b02      	cmp	r3, #2
 800d60c:	d111      	bne.n	800d632 <keyScan+0x312>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_INTEVAL)
 800d60e:	4b0b      	ldr	r3, [pc, #44]	@ (800d63c <keyScan+0x31c>)
 800d610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d612:	3301      	adds	r3, #1
 800d614:	4a09      	ldr	r2, [pc, #36]	@ (800d63c <keyScan+0x31c>)
 800d616:	6293      	str	r3, [r2, #40]	@ 0x28
 800d618:	4b08      	ldr	r3, [pc, #32]	@ (800d63c <keyScan+0x31c>)
 800d61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d61c:	2b27      	cmp	r3, #39	@ 0x27
 800d61e:	d908      	bls.n	800d632 <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800d620:	4b06      	ldr	r3, [pc, #24]	@ (800d63c <keyScan+0x31c>)
 800d622:	2200      	movs	r2, #0
 800d624:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
 800d626:	4b05      	ldr	r3, [pc, #20]	@ (800d63c <keyScan+0x31c>)
 800d628:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800d62c:	4b03      	ldr	r3, [pc, #12]	@ (800d63c <keyScan+0x31c>)
 800d62e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 800d632:	bf00      	nop
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
 800d63a:	bf00      	nop
 800d63c:	20000c04 	.word	0x20000c04

0800d640 <getKeyState>:

/*
将物理按键转化为逻辑按键
 */
void getKeyState(KeyState *keyState)
{
 800d640:	b480      	push	{r7}
 800d642:	b085      	sub	sp, #20
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
    uchar i;

    if (keyStruct[1].trigType == TRIG_SHORT)
 800d648:	4b1b      	ldr	r3, [pc, #108]	@ (800d6b8 <getKeyState+0x78>)
 800d64a:	7d1b      	ldrb	r3, [r3, #20]
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d103      	bne.n	800d658 <getKeyState+0x18>
        *keyState = USER1_SHORT;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2201      	movs	r2, #1
 800d654:	701a      	strb	r2, [r3, #0]
 800d656:	e014      	b.n	800d682 <getKeyState+0x42>
    else if (keyStruct[2].trigType == TRIG_SHORT)
 800d658:	4b17      	ldr	r3, [pc, #92]	@ (800d6b8 <getKeyState+0x78>)
 800d65a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d103      	bne.n	800d66a <getKeyState+0x2a>
        *keyState = USER2_SHORT;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2202      	movs	r2, #2
 800d666:	701a      	strb	r2, [r3, #0]
 800d668:	e00b      	b.n	800d682 <getKeyState+0x42>
    else if (keyStruct[3].trigType == TRIG_SHORT)
 800d66a:	4b13      	ldr	r3, [pc, #76]	@ (800d6b8 <getKeyState+0x78>)
 800d66c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d670:	2b01      	cmp	r3, #1
 800d672:	d103      	bne.n	800d67c <getKeyState+0x3c>
        *keyState = USER3_SHORT;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2203      	movs	r2, #3
 800d678:	701a      	strb	r2, [r3, #0]
 800d67a:	e002      	b.n	800d682 <getKeyState+0x42>
    else
        *keyState = NONE_KEY;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < KEY_NUM; i++)
 800d682:	2300      	movs	r3, #0
 800d684:	73fb      	strb	r3, [r7, #15]
 800d686:	e00c      	b.n	800d6a2 <getKeyState+0x62>
    {
        keyStruct[i].trigType = NO_TRIG;
 800d688:	7bfa      	ldrb	r2, [r7, #15]
 800d68a:	490b      	ldr	r1, [pc, #44]	@ (800d6b8 <getKeyState+0x78>)
 800d68c:	4613      	mov	r3, r2
 800d68e:	005b      	lsls	r3, r3, #1
 800d690:	4413      	add	r3, r2
 800d692:	009b      	lsls	r3, r3, #2
 800d694:	440b      	add	r3, r1
 800d696:	3308      	adds	r3, #8
 800d698:	2200      	movs	r2, #0
 800d69a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < KEY_NUM; i++)
 800d69c:	7bfb      	ldrb	r3, [r7, #15]
 800d69e:	3301      	adds	r3, #1
 800d6a0:	73fb      	strb	r3, [r7, #15]
 800d6a2:	7bfb      	ldrb	r3, [r7, #15]
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d9ef      	bls.n	800d688 <getKeyState+0x48>
    }
}
 800d6a8:	bf00      	nop
 800d6aa:	bf00      	nop
 800d6ac:	3714      	adds	r7, #20
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop
 800d6b8:	20000c04 	.word	0x20000c04

0800d6bc <LED_drive>:
#include "led.h"

bool ledOn;

void LED_drive()
{
 800d6bc:	b480      	push	{r7}
 800d6be:	af00      	add	r7, sp, #0
    // if (ledOn)
    //     LED_ON;
    // else
    //     LED_OFF;
}
 800d6c0:	bf00      	nop
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr
	...

0800d6cc <inv_sqrt>:

// 快速平方根倒数，计算 1/Sqrt(x)
// X:数字还需要计算
// 调用imu ahrs update()函数
float inv_sqrt(float x)
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	b087      	sub	sp, #28
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	ed87 0a01 	vstr	s0, [r7, #4]
    float halfx = 0.5f * x;
 800d6d6:	edd7 7a01 	vldr	s15, [r7, #4]
 800d6da:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d6de:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d6e2:	edc7 7a05 	vstr	s15, [r7, #20]
    float y = x;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	613b      	str	r3, [r7, #16]
    long i = *(long *)&y;
 800d6ea:	f107 0310 	add.w	r3, r7, #16
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	60fb      	str	r3, [r7, #12]

    i = 0x5f3759df - (i >> 1);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	105a      	asrs	r2, r3, #1
 800d6f6:	4b12      	ldr	r3, [pc, #72]	@ (800d740 <inv_sqrt+0x74>)
 800d6f8:	1a9b      	subs	r3, r3, r2
 800d6fa:	60fb      	str	r3, [r7, #12]
    y = *(float *)&i;
 800d6fc:	f107 030c 	add.w	r3, r7, #12
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	613b      	str	r3, [r7, #16]
    y = y * (1.5f - (halfx * y * y));
 800d704:	ed97 7a04 	vldr	s14, [r7, #16]
 800d708:	edd7 7a05 	vldr	s15, [r7, #20]
 800d70c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d710:	edd7 7a04 	vldr	s15, [r7, #16]
 800d714:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d718:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800d71c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d720:	edd7 7a04 	vldr	s15, [r7, #16]
 800d724:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d728:	edc7 7a04 	vstr	s15, [r7, #16]

    return y;
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	ee07 3a90 	vmov	s15, r3
}
 800d732:	eeb0 0a67 	vmov.f32	s0, s15
 800d736:	371c      	adds	r7, #28
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr
 800d740:	5f3759df 	.word	0x5f3759df

0800d744 <mpu_write_byte>:
// MPU6500单次写命令
uint8_t mpu_write_byte(uint8_t const reg, uint8_t const data)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af02      	add	r7, sp, #8
 800d74a:	4603      	mov	r3, r0
 800d74c:	460a      	mov	r2, r1
 800d74e:	71fb      	strb	r3, [r7, #7]
 800d750:	4613      	mov	r3, r2
 800d752:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;                                         // 开始通讯
 800d754:	2200      	movs	r2, #0
 800d756:	2110      	movs	r1, #16
 800d758:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d75c:	f7f8 fff0 	bl	8006740 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;                                     // 使第一位为0（写模式）
 800d760:	79fb      	ldrb	r3, [r7, #7]
 800d762:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d766:	b2da      	uxtb	r2, r3
 800d768:	4b0f      	ldr	r3, [pc, #60]	@ (800d7a8 <mpu_write_byte+0x64>)
 800d76a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入命令地址
 800d76c:	2337      	movs	r3, #55	@ 0x37
 800d76e:	9300      	str	r3, [sp, #0]
 800d770:	2301      	movs	r3, #1
 800d772:	4a0e      	ldr	r2, [pc, #56]	@ (800d7ac <mpu_write_byte+0x68>)
 800d774:	490c      	ldr	r1, [pc, #48]	@ (800d7a8 <mpu_write_byte+0x64>)
 800d776:	480e      	ldr	r0, [pc, #56]	@ (800d7b0 <mpu_write_byte+0x6c>)
 800d778:	f7fa f877 	bl	800786a <HAL_SPI_TransmitReceive>
    tx = data;
 800d77c:	4a0a      	ldr	r2, [pc, #40]	@ (800d7a8 <mpu_write_byte+0x64>)
 800d77e:	79bb      	ldrb	r3, [r7, #6]
 800d780:	7013      	strb	r3, [r2, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入数据
 800d782:	2337      	movs	r3, #55	@ 0x37
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	2301      	movs	r3, #1
 800d788:	4a08      	ldr	r2, [pc, #32]	@ (800d7ac <mpu_write_byte+0x68>)
 800d78a:	4907      	ldr	r1, [pc, #28]	@ (800d7a8 <mpu_write_byte+0x64>)
 800d78c:	4808      	ldr	r0, [pc, #32]	@ (800d7b0 <mpu_write_byte+0x6c>)
 800d78e:	f7fa f86c 	bl	800786a <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;                                        // 结束通讯
 800d792:	2201      	movs	r2, #1
 800d794:	2110      	movs	r1, #16
 800d796:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d79a:	f7f8 ffd1 	bl	8006740 <HAL_GPIO_WritePin>
    return 0;
 800d79e:	2300      	movs	r3, #0
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3708      	adds	r7, #8
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	20000c29 	.word	0x20000c29
 800d7ac:	20000c2a 	.word	0x20000c2a
 800d7b0:	200003fc 	.word	0x200003fc

0800d7b4 <mpu_read_byte>:
// MPU6500单次读取单字节数据
uint8_t mpu_read_byte(uint8_t const reg)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af02      	add	r7, sp, #8
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	71fb      	strb	r3, [r7, #7]
    MPU_NSS_LOW;
 800d7be:	2200      	movs	r2, #0
 800d7c0:	2110      	movs	r1, #16
 800d7c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d7c6:	f7f8 ffbb 	bl	8006740 <HAL_GPIO_WritePin>
    tx = reg | 0x80;                                     // 使地址第一位为1（读模式）
 800d7ca:	79fb      	ldrb	r3, [r7, #7]
 800d7cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d7d0:	b2da      	uxtb	r2, r3
 800d7d2:	4b0f      	ldr	r3, [pc, #60]	@ (800d810 <mpu_read_byte+0x5c>)
 800d7d4:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入需要读取的地址
 800d7d6:	2337      	movs	r3, #55	@ 0x37
 800d7d8:	9300      	str	r3, [sp, #0]
 800d7da:	2301      	movs	r3, #1
 800d7dc:	4a0d      	ldr	r2, [pc, #52]	@ (800d814 <mpu_read_byte+0x60>)
 800d7de:	490c      	ldr	r1, [pc, #48]	@ (800d810 <mpu_read_byte+0x5c>)
 800d7e0:	480d      	ldr	r0, [pc, #52]	@ (800d818 <mpu_read_byte+0x64>)
 800d7e2:	f7fa f842 	bl	800786a <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 为读取的数据提供存储空间
 800d7e6:	2337      	movs	r3, #55	@ 0x37
 800d7e8:	9300      	str	r3, [sp, #0]
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	4a09      	ldr	r2, [pc, #36]	@ (800d814 <mpu_read_byte+0x60>)
 800d7ee:	4908      	ldr	r1, [pc, #32]	@ (800d810 <mpu_read_byte+0x5c>)
 800d7f0:	4809      	ldr	r0, [pc, #36]	@ (800d818 <mpu_read_byte+0x64>)
 800d7f2:	f7fa f83a 	bl	800786a <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	2110      	movs	r1, #16
 800d7fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d7fe:	f7f8 ff9f 	bl	8006740 <HAL_GPIO_WritePin>
    return rx;
 800d802:	4b04      	ldr	r3, [pc, #16]	@ (800d814 <mpu_read_byte+0x60>)
 800d804:	781b      	ldrb	r3, [r3, #0]
}
 800d806:	4618      	mov	r0, r3
 800d808:	3708      	adds	r7, #8
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}
 800d80e:	bf00      	nop
 800d810:	20000c29 	.word	0x20000c29
 800d814:	20000c2a 	.word	0x20000c2a
 800d818:	200003fc 	.word	0x200003fc

0800d81c <mpu_read_bytes>:

// MPU6500单次读取多字节数据
uint8_t mpu_read_bytes(uint8_t const regAddr, uint8_t *pData, uint8_t len)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af02      	add	r7, sp, #8
 800d822:	4603      	mov	r3, r0
 800d824:	6039      	str	r1, [r7, #0]
 800d826:	71fb      	strb	r3, [r7, #7]
 800d828:	4613      	mov	r3, r2
 800d82a:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;
 800d82c:	2200      	movs	r2, #0
 800d82e:	2110      	movs	r1, #16
 800d830:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d834:	f7f8 ff84 	bl	8006740 <HAL_GPIO_WritePin>
    tx = regAddr | 0x80;
 800d838:	79fb      	ldrb	r3, [r7, #7]
 800d83a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d83e:	b2da      	uxtb	r2, r3
 800d840:	4b10      	ldr	r3, [pc, #64]	@ (800d884 <mpu_read_bytes+0x68>)
 800d842:	701a      	strb	r2, [r3, #0]
    tx_buff[0] = tx;
 800d844:	4b0f      	ldr	r3, [pc, #60]	@ (800d884 <mpu_read_bytes+0x68>)
 800d846:	781a      	ldrb	r2, [r3, #0]
 800d848:	4b0f      	ldr	r3, [pc, #60]	@ (800d888 <mpu_read_bytes+0x6c>)
 800d84a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800d84c:	2337      	movs	r3, #55	@ 0x37
 800d84e:	9300      	str	r3, [sp, #0]
 800d850:	2301      	movs	r3, #1
 800d852:	4a0e      	ldr	r2, [pc, #56]	@ (800d88c <mpu_read_bytes+0x70>)
 800d854:	490b      	ldr	r1, [pc, #44]	@ (800d884 <mpu_read_bytes+0x68>)
 800d856:	480e      	ldr	r0, [pc, #56]	@ (800d890 <mpu_read_bytes+0x74>)
 800d858:	f7fa f807 	bl	800786a <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 800d85c:	79bb      	ldrb	r3, [r7, #6]
 800d85e:	b29b      	uxth	r3, r3
 800d860:	2237      	movs	r2, #55	@ 0x37
 800d862:	9200      	str	r2, [sp, #0]
 800d864:	683a      	ldr	r2, [r7, #0]
 800d866:	4908      	ldr	r1, [pc, #32]	@ (800d888 <mpu_read_bytes+0x6c>)
 800d868:	4809      	ldr	r0, [pc, #36]	@ (800d890 <mpu_read_bytes+0x74>)
 800d86a:	f7f9 fffe 	bl	800786a <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800d86e:	2201      	movs	r2, #1
 800d870:	2110      	movs	r1, #16
 800d872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d876:	f7f8 ff63 	bl	8006740 <HAL_GPIO_WritePin>
    return 0;
 800d87a:	2300      	movs	r3, #0
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3708      	adds	r7, #8
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}
 800d884:	20000c29 	.word	0x20000c29
 800d888:	200000c0 	.word	0x200000c0
 800d88c:	20000c2a 	.word	0x20000c2a
 800d890:	200003fc 	.word	0x200003fc

0800d894 <mpu_set_gyro_fsr>:

// 设置imu 6500陀螺仪测量范围
uint8_t mpu_set_gyro_fsr(uint8_t fsr)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b082      	sub	sp, #8
 800d898:	af00      	add	r7, sp, #0
 800d89a:	4603      	mov	r3, r0
 800d89c:	71fb      	strb	r3, [r7, #7]
    return mpu_write_byte(MPU6500_GYRO_CONFIG, fsr << 3);
 800d89e:	79fb      	ldrb	r3, [r7, #7]
 800d8a0:	00db      	lsls	r3, r3, #3
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	201b      	movs	r0, #27
 800d8a8:	f7ff ff4c 	bl	800d744 <mpu_write_byte>
 800d8ac:	4603      	mov	r3, r0
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3708      	adds	r7, #8
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}

0800d8b6 <mpu_set_accel_fsr>:
// 设置imu 6050/6500加速测量范围
uint8_t mpu_set_accel_fsr(uint8_t fsr)
{
 800d8b6:	b580      	push	{r7, lr}
 800d8b8:	b082      	sub	sp, #8
 800d8ba:	af00      	add	r7, sp, #0
 800d8bc:	4603      	mov	r3, r0
 800d8be:	71fb      	strb	r3, [r7, #7]
    return mpu_write_byte(MPU6500_ACCEL_CONFIG, fsr << 3);
 800d8c0:	79fb      	ldrb	r3, [r7, #7]
 800d8c2:	00db      	lsls	r3, r3, #3
 800d8c4:	b2db      	uxtb	r3, r3
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	201c      	movs	r0, #28
 800d8ca:	f7ff ff3b 	bl	800d744 <mpu_write_byte>
 800d8ce:	4603      	mov	r3, r0
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <mpu_get_data>:
// 获取IMU数据
void mpu_get_data()
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	af00      	add	r7, sp, #0
    mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800d8dc:	220e      	movs	r2, #14
 800d8de:	495c      	ldr	r1, [pc, #368]	@ (800da50 <mpu_get_data+0x178>)
 800d8e0:	203b      	movs	r0, #59	@ 0x3b
 800d8e2:	f7ff ff9b 	bl	800d81c <mpu_read_bytes>

    mpu_data.ax = mpu_buff[0] << 8 | mpu_buff[1];
 800d8e6:	4b5a      	ldr	r3, [pc, #360]	@ (800da50 <mpu_get_data+0x178>)
 800d8e8:	781b      	ldrb	r3, [r3, #0]
 800d8ea:	021b      	lsls	r3, r3, #8
 800d8ec:	b21a      	sxth	r2, r3
 800d8ee:	4b58      	ldr	r3, [pc, #352]	@ (800da50 <mpu_get_data+0x178>)
 800d8f0:	785b      	ldrb	r3, [r3, #1]
 800d8f2:	b21b      	sxth	r3, r3
 800d8f4:	4313      	orrs	r3, r2
 800d8f6:	b21a      	sxth	r2, r3
 800d8f8:	4b56      	ldr	r3, [pc, #344]	@ (800da54 <mpu_get_data+0x17c>)
 800d8fa:	801a      	strh	r2, [r3, #0]
    mpu_data.ay = mpu_buff[2] << 8 | mpu_buff[3];
 800d8fc:	4b54      	ldr	r3, [pc, #336]	@ (800da50 <mpu_get_data+0x178>)
 800d8fe:	789b      	ldrb	r3, [r3, #2]
 800d900:	021b      	lsls	r3, r3, #8
 800d902:	b21a      	sxth	r2, r3
 800d904:	4b52      	ldr	r3, [pc, #328]	@ (800da50 <mpu_get_data+0x178>)
 800d906:	78db      	ldrb	r3, [r3, #3]
 800d908:	b21b      	sxth	r3, r3
 800d90a:	4313      	orrs	r3, r2
 800d90c:	b21a      	sxth	r2, r3
 800d90e:	4b51      	ldr	r3, [pc, #324]	@ (800da54 <mpu_get_data+0x17c>)
 800d910:	805a      	strh	r2, [r3, #2]
    mpu_data.az = mpu_buff[4] << 8 | mpu_buff[5];
 800d912:	4b4f      	ldr	r3, [pc, #316]	@ (800da50 <mpu_get_data+0x178>)
 800d914:	791b      	ldrb	r3, [r3, #4]
 800d916:	021b      	lsls	r3, r3, #8
 800d918:	b21a      	sxth	r2, r3
 800d91a:	4b4d      	ldr	r3, [pc, #308]	@ (800da50 <mpu_get_data+0x178>)
 800d91c:	795b      	ldrb	r3, [r3, #5]
 800d91e:	b21b      	sxth	r3, r3
 800d920:	4313      	orrs	r3, r2
 800d922:	b21a      	sxth	r2, r3
 800d924:	4b4b      	ldr	r3, [pc, #300]	@ (800da54 <mpu_get_data+0x17c>)
 800d926:	809a      	strh	r2, [r3, #4]
    mpu_data.temp = mpu_buff[6] << 8 | mpu_buff[7];
 800d928:	4b49      	ldr	r3, [pc, #292]	@ (800da50 <mpu_get_data+0x178>)
 800d92a:	799b      	ldrb	r3, [r3, #6]
 800d92c:	021b      	lsls	r3, r3, #8
 800d92e:	b21a      	sxth	r2, r3
 800d930:	4b47      	ldr	r3, [pc, #284]	@ (800da50 <mpu_get_data+0x178>)
 800d932:	79db      	ldrb	r3, [r3, #7]
 800d934:	b21b      	sxth	r3, r3
 800d936:	4313      	orrs	r3, r2
 800d938:	b21a      	sxth	r2, r3
 800d93a:	4b46      	ldr	r3, [pc, #280]	@ (800da54 <mpu_get_data+0x17c>)
 800d93c:	819a      	strh	r2, [r3, #12]

    mpu_data.gx = ((mpu_buff[8] << 8 | mpu_buff[9]) - mpu_data.gx_offset);
 800d93e:	4b44      	ldr	r3, [pc, #272]	@ (800da50 <mpu_get_data+0x178>)
 800d940:	7a1b      	ldrb	r3, [r3, #8]
 800d942:	021b      	lsls	r3, r3, #8
 800d944:	b21a      	sxth	r2, r3
 800d946:	4b42      	ldr	r3, [pc, #264]	@ (800da50 <mpu_get_data+0x178>)
 800d948:	7a5b      	ldrb	r3, [r3, #9]
 800d94a:	b21b      	sxth	r3, r3
 800d94c:	4313      	orrs	r3, r2
 800d94e:	b21b      	sxth	r3, r3
 800d950:	b29a      	uxth	r2, r3
 800d952:	4b40      	ldr	r3, [pc, #256]	@ (800da54 <mpu_get_data+0x17c>)
 800d954:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800d958:	b29b      	uxth	r3, r3
 800d95a:	1ad3      	subs	r3, r2, r3
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	b21a      	sxth	r2, r3
 800d960:	4b3c      	ldr	r3, [pc, #240]	@ (800da54 <mpu_get_data+0x17c>)
 800d962:	81da      	strh	r2, [r3, #14]
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 800d964:	4b3a      	ldr	r3, [pc, #232]	@ (800da50 <mpu_get_data+0x178>)
 800d966:	7a9b      	ldrb	r3, [r3, #10]
 800d968:	021b      	lsls	r3, r3, #8
 800d96a:	b21a      	sxth	r2, r3
 800d96c:	4b38      	ldr	r3, [pc, #224]	@ (800da50 <mpu_get_data+0x178>)
 800d96e:	7adb      	ldrb	r3, [r3, #11]
 800d970:	b21b      	sxth	r3, r3
 800d972:	4313      	orrs	r3, r2
 800d974:	b21b      	sxth	r3, r3
 800d976:	b29a      	uxth	r2, r3
 800d978:	4b36      	ldr	r3, [pc, #216]	@ (800da54 <mpu_get_data+0x17c>)
 800d97a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800d97e:	b29b      	uxth	r3, r3
 800d980:	1ad3      	subs	r3, r2, r3
 800d982:	b29b      	uxth	r3, r3
 800d984:	b21a      	sxth	r2, r3
 800d986:	4b33      	ldr	r3, [pc, #204]	@ (800da54 <mpu_get_data+0x17c>)
 800d988:	821a      	strh	r2, [r3, #16]
    mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 800d98a:	4b31      	ldr	r3, [pc, #196]	@ (800da50 <mpu_get_data+0x178>)
 800d98c:	7b1b      	ldrb	r3, [r3, #12]
 800d98e:	021b      	lsls	r3, r3, #8
 800d990:	b21a      	sxth	r2, r3
 800d992:	4b2f      	ldr	r3, [pc, #188]	@ (800da50 <mpu_get_data+0x178>)
 800d994:	7b5b      	ldrb	r3, [r3, #13]
 800d996:	b21b      	sxth	r3, r3
 800d998:	4313      	orrs	r3, r2
 800d99a:	b21b      	sxth	r3, r3
 800d99c:	b29a      	uxth	r2, r3
 800d99e:	4b2d      	ldr	r3, [pc, #180]	@ (800da54 <mpu_get_data+0x17c>)
 800d9a0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800d9a4:	b29b      	uxth	r3, r3
 800d9a6:	1ad3      	subs	r3, r2, r3
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	b21a      	sxth	r2, r3
 800d9ac:	4b29      	ldr	r3, [pc, #164]	@ (800da54 <mpu_get_data+0x17c>)
 800d9ae:	825a      	strh	r2, [r3, #18]

    // ist8310_get_data(ist_buff);
    // memcpy(&mpu_data.mx, ist_buff, 6);

    memcpy(&imu.ax, &mpu_data.ax, 6 * sizeof(int16_t));
 800d9b0:	220c      	movs	r2, #12
 800d9b2:	4928      	ldr	r1, [pc, #160]	@ (800da54 <mpu_get_data+0x17c>)
 800d9b4:	4828      	ldr	r0, [pc, #160]	@ (800da58 <mpu_get_data+0x180>)
 800d9b6:	f003 f9cc 	bl	8010d52 <memcpy>

    imu.temp = 21 + mpu_data.temp / 333.87f;
 800d9ba:	4b26      	ldr	r3, [pc, #152]	@ (800da54 <mpu_get_data+0x17c>)
 800d9bc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800d9c0:	ee07 3a90 	vmov	s15, r3
 800d9c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d9c8:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800da5c <mpu_get_data+0x184>
 800d9cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d9d0:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 800d9d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9d8:	4b1f      	ldr	r3, [pc, #124]	@ (800da58 <mpu_get_data+0x180>)
 800d9da:	edc3 7a03 	vstr	s15, [r3, #12]
    /* 2000dps -> rad/s */
    imu.wx = mpu_data.gx / 16.384f / 57.3f;
 800d9de:	4b1d      	ldr	r3, [pc, #116]	@ (800da54 <mpu_get_data+0x17c>)
 800d9e0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d9e4:	ee07 3a90 	vmov	s15, r3
 800d9e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9ec:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800da60 <mpu_get_data+0x188>
 800d9f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d9f4:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 800da64 <mpu_get_data+0x18c>
 800d9f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d9fc:	4b16      	ldr	r3, [pc, #88]	@ (800da58 <mpu_get_data+0x180>)
 800d9fe:	edc3 7a04 	vstr	s15, [r3, #16]
    imu.wy = mpu_data.gy / 16.384f / 57.3f;
 800da02:	4b14      	ldr	r3, [pc, #80]	@ (800da54 <mpu_get_data+0x17c>)
 800da04:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800da08:	ee07 3a90 	vmov	s15, r3
 800da0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da10:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800da60 <mpu_get_data+0x188>
 800da14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800da18:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800da64 <mpu_get_data+0x18c>
 800da1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da20:	4b0d      	ldr	r3, [pc, #52]	@ (800da58 <mpu_get_data+0x180>)
 800da22:	edc3 7a05 	vstr	s15, [r3, #20]
    imu.wz = mpu_data.gz / 16.384f / 57.3f;
 800da26:	4b0b      	ldr	r3, [pc, #44]	@ (800da54 <mpu_get_data+0x17c>)
 800da28:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800da2c:	ee07 3a90 	vmov	s15, r3
 800da30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da34:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800da60 <mpu_get_data+0x188>
 800da38:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800da3c:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800da64 <mpu_get_data+0x18c>
 800da40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da44:	4b04      	ldr	r3, [pc, #16]	@ (800da58 <mpu_get_data+0x180>)
 800da46:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800da4a:	bf00      	nop
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	20000c44 	.word	0x20000c44
 800da54:	20000c54 	.word	0x20000c54
 800da58:	20000c74 	.word	0x20000c74
 800da5c:	43a6ef5c 	.word	0x43a6ef5c
 800da60:	4183126f 	.word	0x4183126f
 800da64:	42653333 	.word	0x42653333

0800da68 <mpu_offset_call>:
// 获取MPU6500的偏移量数据
void mpu_offset_call(void)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 300; i++)
 800da6e:	2300      	movs	r3, #0
 800da70:	607b      	str	r3, [r7, #4]
 800da72:	e07c      	b.n	800db6e <mpu_offset_call+0x106>
    {
        mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800da74:	220e      	movs	r2, #14
 800da76:	4966      	ldr	r1, [pc, #408]	@ (800dc10 <mpu_offset_call+0x1a8>)
 800da78:	203b      	movs	r0, #59	@ 0x3b
 800da7a:	f7ff fecf 	bl	800d81c <mpu_read_bytes>

        mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 800da7e:	4b65      	ldr	r3, [pc, #404]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800da80:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800da84:	b29a      	uxth	r2, r3
 800da86:	4b62      	ldr	r3, [pc, #392]	@ (800dc10 <mpu_offset_call+0x1a8>)
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	021b      	lsls	r3, r3, #8
 800da8c:	b219      	sxth	r1, r3
 800da8e:	4b60      	ldr	r3, [pc, #384]	@ (800dc10 <mpu_offset_call+0x1a8>)
 800da90:	785b      	ldrb	r3, [r3, #1]
 800da92:	b21b      	sxth	r3, r3
 800da94:	430b      	orrs	r3, r1
 800da96:	b21b      	sxth	r3, r3
 800da98:	b29b      	uxth	r3, r3
 800da9a:	4413      	add	r3, r2
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	b21a      	sxth	r2, r3
 800daa0:	4b5c      	ldr	r3, [pc, #368]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800daa2:	829a      	strh	r2, [r3, #20]
        mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 800daa4:	4b5b      	ldr	r3, [pc, #364]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800daa6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800daaa:	b29a      	uxth	r2, r3
 800daac:	4b58      	ldr	r3, [pc, #352]	@ (800dc10 <mpu_offset_call+0x1a8>)
 800daae:	789b      	ldrb	r3, [r3, #2]
 800dab0:	021b      	lsls	r3, r3, #8
 800dab2:	b219      	sxth	r1, r3
 800dab4:	4b56      	ldr	r3, [pc, #344]	@ (800dc10 <mpu_offset_call+0x1a8>)
 800dab6:	78db      	ldrb	r3, [r3, #3]
 800dab8:	b21b      	sxth	r3, r3
 800daba:	430b      	orrs	r3, r1
 800dabc:	b21b      	sxth	r3, r3
 800dabe:	b29b      	uxth	r3, r3
 800dac0:	4413      	add	r3, r2
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	b21a      	sxth	r2, r3
 800dac6:	4b53      	ldr	r3, [pc, #332]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800dac8:	82da      	strh	r2, [r3, #22]
        mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
 800daca:	4b52      	ldr	r3, [pc, #328]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800dacc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800dad0:	b29a      	uxth	r2, r3
 800dad2:	4b4f      	ldr	r3, [pc, #316]	@ (800dc10 <mpu_offset_call+0x1a8>)
 800dad4:	791b      	ldrb	r3, [r3, #4]
 800dad6:	021b      	lsls	r3, r3, #8
 800dad8:	b219      	sxth	r1, r3
 800dada:	4b4d      	ldr	r3, [pc, #308]	@ (800dc10 <mpu_offset_call+0x1a8>)
 800dadc:	795b      	ldrb	r3, [r3, #5]
 800dade:	b21b      	sxth	r3, r3
 800dae0:	430b      	orrs	r3, r1
 800dae2:	b21b      	sxth	r3, r3
 800dae4:	b29b      	uxth	r3, r3
 800dae6:	4413      	add	r3, r2
 800dae8:	b29b      	uxth	r3, r3
 800daea:	b21a      	sxth	r2, r3
 800daec:	4b49      	ldr	r3, [pc, #292]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800daee:	831a      	strh	r2, [r3, #24]

        mpu_data.gx_offset += mpu_buff[8] << 8 | mpu_buff[9];
 800daf0:	4b48      	ldr	r3, [pc, #288]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800daf2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800daf6:	b29a      	uxth	r2, r3
 800daf8:	4b45      	ldr	r3, [pc, #276]	@ (800dc10 <mpu_offset_call+0x1a8>)
 800dafa:	7a1b      	ldrb	r3, [r3, #8]
 800dafc:	021b      	lsls	r3, r3, #8
 800dafe:	b219      	sxth	r1, r3
 800db00:	4b43      	ldr	r3, [pc, #268]	@ (800dc10 <mpu_offset_call+0x1a8>)
 800db02:	7a5b      	ldrb	r3, [r3, #9]
 800db04:	b21b      	sxth	r3, r3
 800db06:	430b      	orrs	r3, r1
 800db08:	b21b      	sxth	r3, r3
 800db0a:	b29b      	uxth	r3, r3
 800db0c:	4413      	add	r3, r2
 800db0e:	b29b      	uxth	r3, r3
 800db10:	b21a      	sxth	r2, r3
 800db12:	4b40      	ldr	r3, [pc, #256]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800db14:	835a      	strh	r2, [r3, #26]
        mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 800db16:	4b3f      	ldr	r3, [pc, #252]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800db18:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800db1c:	b29a      	uxth	r2, r3
 800db1e:	4b3c      	ldr	r3, [pc, #240]	@ (800dc10 <mpu_offset_call+0x1a8>)
 800db20:	7a9b      	ldrb	r3, [r3, #10]
 800db22:	021b      	lsls	r3, r3, #8
 800db24:	b219      	sxth	r1, r3
 800db26:	4b3a      	ldr	r3, [pc, #232]	@ (800dc10 <mpu_offset_call+0x1a8>)
 800db28:	7adb      	ldrb	r3, [r3, #11]
 800db2a:	b21b      	sxth	r3, r3
 800db2c:	430b      	orrs	r3, r1
 800db2e:	b21b      	sxth	r3, r3
 800db30:	b29b      	uxth	r3, r3
 800db32:	4413      	add	r3, r2
 800db34:	b29b      	uxth	r3, r3
 800db36:	b21a      	sxth	r2, r3
 800db38:	4b36      	ldr	r3, [pc, #216]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800db3a:	839a      	strh	r2, [r3, #28]
        mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 800db3c:	4b35      	ldr	r3, [pc, #212]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800db3e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800db42:	b29a      	uxth	r2, r3
 800db44:	4b32      	ldr	r3, [pc, #200]	@ (800dc10 <mpu_offset_call+0x1a8>)
 800db46:	7b1b      	ldrb	r3, [r3, #12]
 800db48:	021b      	lsls	r3, r3, #8
 800db4a:	b219      	sxth	r1, r3
 800db4c:	4b30      	ldr	r3, [pc, #192]	@ (800dc10 <mpu_offset_call+0x1a8>)
 800db4e:	7b5b      	ldrb	r3, [r3, #13]
 800db50:	b21b      	sxth	r3, r3
 800db52:	430b      	orrs	r3, r1
 800db54:	b21b      	sxth	r3, r3
 800db56:	b29b      	uxth	r3, r3
 800db58:	4413      	add	r3, r2
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	b21a      	sxth	r2, r3
 800db5e:	4b2d      	ldr	r3, [pc, #180]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800db60:	83da      	strh	r2, [r3, #30]

        HAL_Delay(5);
 800db62:	2005      	movs	r0, #5
 800db64:	f7f4 ff26 	bl	80029b4 <HAL_Delay>
    for (i = 0; i < 300; i++)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	3301      	adds	r3, #1
 800db6c:	607b      	str	r3, [r7, #4]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800db74:	f6ff af7e 	blt.w	800da74 <mpu_offset_call+0xc>
    }
    mpu_data.ax_offset = mpu_data.ax_offset / 300;
 800db78:	4b26      	ldr	r3, [pc, #152]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800db7a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800db7e:	4a26      	ldr	r2, [pc, #152]	@ (800dc18 <mpu_offset_call+0x1b0>)
 800db80:	fb82 1203 	smull	r1, r2, r2, r3
 800db84:	1152      	asrs	r2, r2, #5
 800db86:	17db      	asrs	r3, r3, #31
 800db88:	1ad3      	subs	r3, r2, r3
 800db8a:	b21a      	sxth	r2, r3
 800db8c:	4b21      	ldr	r3, [pc, #132]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800db8e:	829a      	strh	r2, [r3, #20]
    mpu_data.ay_offset = mpu_data.ay_offset / 300;
 800db90:	4b20      	ldr	r3, [pc, #128]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800db92:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800db96:	4a20      	ldr	r2, [pc, #128]	@ (800dc18 <mpu_offset_call+0x1b0>)
 800db98:	fb82 1203 	smull	r1, r2, r2, r3
 800db9c:	1152      	asrs	r2, r2, #5
 800db9e:	17db      	asrs	r3, r3, #31
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	b21a      	sxth	r2, r3
 800dba4:	4b1b      	ldr	r3, [pc, #108]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800dba6:	82da      	strh	r2, [r3, #22]
    mpu_data.az_offset = mpu_data.az_offset / 300;
 800dba8:	4b1a      	ldr	r3, [pc, #104]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800dbaa:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800dbae:	4a1a      	ldr	r2, [pc, #104]	@ (800dc18 <mpu_offset_call+0x1b0>)
 800dbb0:	fb82 1203 	smull	r1, r2, r2, r3
 800dbb4:	1152      	asrs	r2, r2, #5
 800dbb6:	17db      	asrs	r3, r3, #31
 800dbb8:	1ad3      	subs	r3, r2, r3
 800dbba:	b21a      	sxth	r2, r3
 800dbbc:	4b15      	ldr	r3, [pc, #84]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800dbbe:	831a      	strh	r2, [r3, #24]
    mpu_data.gx_offset = mpu_data.gx_offset / 300;
 800dbc0:	4b14      	ldr	r3, [pc, #80]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800dbc2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800dbc6:	4a14      	ldr	r2, [pc, #80]	@ (800dc18 <mpu_offset_call+0x1b0>)
 800dbc8:	fb82 1203 	smull	r1, r2, r2, r3
 800dbcc:	1152      	asrs	r2, r2, #5
 800dbce:	17db      	asrs	r3, r3, #31
 800dbd0:	1ad3      	subs	r3, r2, r3
 800dbd2:	b21a      	sxth	r2, r3
 800dbd4:	4b0f      	ldr	r3, [pc, #60]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800dbd6:	835a      	strh	r2, [r3, #26]
    mpu_data.gy_offset = mpu_data.gx_offset / 300;
 800dbd8:	4b0e      	ldr	r3, [pc, #56]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800dbda:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800dbde:	4a0e      	ldr	r2, [pc, #56]	@ (800dc18 <mpu_offset_call+0x1b0>)
 800dbe0:	fb82 1203 	smull	r1, r2, r2, r3
 800dbe4:	1152      	asrs	r2, r2, #5
 800dbe6:	17db      	asrs	r3, r3, #31
 800dbe8:	1ad3      	subs	r3, r2, r3
 800dbea:	b21a      	sxth	r2, r3
 800dbec:	4b09      	ldr	r3, [pc, #36]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800dbee:	839a      	strh	r2, [r3, #28]
    mpu_data.gz_offset = mpu_data.gz_offset / 300;
 800dbf0:	4b08      	ldr	r3, [pc, #32]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800dbf2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800dbf6:	4a08      	ldr	r2, [pc, #32]	@ (800dc18 <mpu_offset_call+0x1b0>)
 800dbf8:	fb82 1203 	smull	r1, r2, r2, r3
 800dbfc:	1152      	asrs	r2, r2, #5
 800dbfe:	17db      	asrs	r3, r3, #31
 800dc00:	1ad3      	subs	r3, r2, r3
 800dc02:	b21a      	sxth	r2, r3
 800dc04:	4b03      	ldr	r3, [pc, #12]	@ (800dc14 <mpu_offset_call+0x1ac>)
 800dc06:	83da      	strh	r2, [r3, #30]
}
 800dc08:	bf00      	nop
 800dc0a:	3708      	adds	r7, #8
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	20000c44 	.word	0x20000c44
 800dc14:	20000c54 	.word	0x20000c54
 800dc18:	1b4e81b5 	.word	0x1b4e81b5

0800dc1c <IMU_Init>:

// 初始化mpu6500和ist3810
uint8_t IMU_Init(void)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b086      	sub	sp, #24
 800dc20:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 800dc22:	2064      	movs	r0, #100	@ 0x64
 800dc24:	f7f4 fec6 	bl	80029b4 <HAL_Delay>

    id = mpu_read_byte(MPU6500_ID);
 800dc28:	2075      	movs	r0, #117	@ 0x75
 800dc2a:	f7ff fdc3 	bl	800d7b4 <mpu_read_byte>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	461a      	mov	r2, r3
 800dc32:	4b28      	ldr	r3, [pc, #160]	@ (800dcd4 <IMU_Init+0xb8>)
 800dc34:	701a      	strb	r2, [r3, #0]
    if (id != 0x70)
 800dc36:	4b27      	ldr	r3, [pc, #156]	@ (800dcd4 <IMU_Init+0xb8>)
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	2b70      	cmp	r3, #112	@ 0x70
 800dc3c:	d001      	beq.n	800dc42 <IMU_Init+0x26>
        return 1;
 800dc3e:	2301      	movs	r3, #1
 800dc40:	e044      	b.n	800dccc <IMU_Init+0xb0>
    uint8_t i = 0;
 800dc42:	2300      	movs	r3, #0
 800dc44:	75fb      	strb	r3, [r7, #23]
    uint8_t MPU6500_Init_Data[10][2] = {
 800dc46:	463b      	mov	r3, r7
 800dc48:	2200      	movs	r2, #0
 800dc4a:	601a      	str	r2, [r3, #0]
 800dc4c:	605a      	str	r2, [r3, #4]
 800dc4e:	609a      	str	r2, [r3, #8]
 800dc50:	60da      	str	r2, [r3, #12]
 800dc52:	611a      	str	r2, [r3, #16]
 800dc54:	f248 036b 	movw	r3, #32875	@ 0x806b
 800dc58:	803b      	strh	r3, [r7, #0]
 800dc5a:	f240 336b 	movw	r3, #875	@ 0x36b
 800dc5e:	807b      	strh	r3, [r7, #2]
 800dc60:	236c      	movs	r3, #108	@ 0x6c
 800dc62:	80bb      	strh	r3, [r7, #4]
 800dc64:	f240 431a 	movw	r3, #1050	@ 0x41a
 800dc68:	80fb      	strh	r3, [r7, #6]
 800dc6a:	f641 031b 	movw	r3, #6171	@ 0x181b
 800dc6e:	813b      	strh	r3, [r7, #8]
 800dc70:	f241 031c 	movw	r3, #4124	@ 0x101c
 800dc74:	817b      	strh	r3, [r7, #10]
 800dc76:	f240 231d 	movw	r3, #541	@ 0x21d
 800dc7a:	81bb      	strh	r3, [r7, #12]
 800dc7c:	f242 036a 	movw	r3, #8298	@ 0x206a
 800dc80:	81fb      	strh	r3, [r7, #14]
        {MPU6500_GYRO_CONFIG, 0x18},    /* +-2000dps */
        {MPU6500_ACCEL_CONFIG, 0x10},   /* +-8G */
        {MPU6500_ACCEL_CONFIG_2, 0x02}, /* 使能低通滤波器  设置 Acc 低通滤波 */
        {MPU6500_USER_CTRL, 0x20},
    }; /* 使能 AUX */
    for (i = 0; i < 10; i++)
 800dc82:	2300      	movs	r3, #0
 800dc84:	75fb      	strb	r3, [r7, #23]
 800dc86:	e015      	b.n	800dcb4 <IMU_Init+0x98>
    {
        mpu_write_byte(MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 800dc88:	7dfb      	ldrb	r3, [r7, #23]
 800dc8a:	005b      	lsls	r3, r3, #1
 800dc8c:	3318      	adds	r3, #24
 800dc8e:	443b      	add	r3, r7
 800dc90:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800dc94:	7dfb      	ldrb	r3, [r7, #23]
 800dc96:	005b      	lsls	r3, r3, #1
 800dc98:	3318      	adds	r3, #24
 800dc9a:	443b      	add	r3, r7
 800dc9c:	f813 3c17 	ldrb.w	r3, [r3, #-23]
 800dca0:	4619      	mov	r1, r3
 800dca2:	4610      	mov	r0, r2
 800dca4:	f7ff fd4e 	bl	800d744 <mpu_write_byte>
        HAL_Delay(1);
 800dca8:	2001      	movs	r0, #1
 800dcaa:	f7f4 fe83 	bl	80029b4 <HAL_Delay>
    for (i = 0; i < 10; i++)
 800dcae:	7dfb      	ldrb	r3, [r7, #23]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	75fb      	strb	r3, [r7, #23]
 800dcb4:	7dfb      	ldrb	r3, [r7, #23]
 800dcb6:	2b09      	cmp	r3, #9
 800dcb8:	d9e6      	bls.n	800dc88 <IMU_Init+0x6c>
    }

    mpu_set_gyro_fsr(3);
 800dcba:	2003      	movs	r0, #3
 800dcbc:	f7ff fdea 	bl	800d894 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(2);
 800dcc0:	2002      	movs	r0, #2
 800dcc2:	f7ff fdf8 	bl	800d8b6 <mpu_set_accel_fsr>

    // ist8310_init();
    mpu_offset_call();
 800dcc6:	f7ff fecf 	bl	800da68 <mpu_offset_call>
    return 0;
 800dcca:	2300      	movs	r3, #0
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3718      	adds	r7, #24
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	20000ca8 	.word	0x20000ca8

0800dcd8 <init_quaternion>:

// 初始化四元数
void init_quaternion(void)
{
 800dcd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dcdc:	b084      	sub	sp, #16
 800dcde:	af00      	add	r7, sp, #0
    int16_t hx, hy; // hz;

    hx = imu.mx;
 800dce0:	4b79      	ldr	r3, [pc, #484]	@ (800dec8 <init_quaternion+0x1f0>)
 800dce2:	88db      	ldrh	r3, [r3, #6]
 800dce4:	81fb      	strh	r3, [r7, #14]
    hy = imu.my;
 800dce6:	4b78      	ldr	r3, [pc, #480]	@ (800dec8 <init_quaternion+0x1f0>)
 800dce8:	891b      	ldrh	r3, [r3, #8]
 800dcea:	81bb      	strh	r3, [r7, #12]
            q2 = -0.56;
            q3 = 0.0045;
        }
    }
#else
    if (hx < 0 && hy < 0)
 800dcec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	da36      	bge.n	800dd62 <init_quaternion+0x8a>
 800dcf4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	da32      	bge.n	800dd62 <init_quaternion+0x8a>
    {
        if (fabs(hx / hy) >= 1)
 800dcfc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800dd00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dd04:	fb92 f3f3 	sdiv	r3, r2, r3
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7f2 fc33 	bl	8000574 <__aeabi_i2d>
 800dd0e:	4602      	mov	r2, r0
 800dd10:	460b      	mov	r3, r1
 800dd12:	603a      	str	r2, [r7, #0]
 800dd14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dd18:	607b      	str	r3, [r7, #4]
 800dd1a:	f04f 0200 	mov.w	r2, #0
 800dd1e:	4b6b      	ldr	r3, [pc, #428]	@ (800decc <init_quaternion+0x1f4>)
 800dd20:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dd24:	f7f2 ff16 	bl	8000b54 <__aeabi_dcmpge>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d00c      	beq.n	800dd48 <init_quaternion+0x70>
        {
            q0 = 0.195;
 800dd2e:	4b68      	ldr	r3, [pc, #416]	@ (800ded0 <init_quaternion+0x1f8>)
 800dd30:	4a68      	ldr	r2, [pc, #416]	@ (800ded4 <init_quaternion+0x1fc>)
 800dd32:	601a      	str	r2, [r3, #0]
            q1 = -0.015;
 800dd34:	4b68      	ldr	r3, [pc, #416]	@ (800ded8 <init_quaternion+0x200>)
 800dd36:	4a69      	ldr	r2, [pc, #420]	@ (800dedc <init_quaternion+0x204>)
 800dd38:	601a      	str	r2, [r3, #0]
            q2 = 0.0043;
 800dd3a:	4b69      	ldr	r3, [pc, #420]	@ (800dee0 <init_quaternion+0x208>)
 800dd3c:	4a69      	ldr	r2, [pc, #420]	@ (800dee4 <init_quaternion+0x20c>)
 800dd3e:	601a      	str	r2, [r3, #0]
            q3 = 0.979;
 800dd40:	4b69      	ldr	r3, [pc, #420]	@ (800dee8 <init_quaternion+0x210>)
 800dd42:	4a6a      	ldr	r2, [pc, #424]	@ (800deec <init_quaternion+0x214>)
 800dd44:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800dd46:	e0ba      	b.n	800debe <init_quaternion+0x1e6>
        }
        else
        {
            q0 = 0.555;
 800dd48:	4b61      	ldr	r3, [pc, #388]	@ (800ded0 <init_quaternion+0x1f8>)
 800dd4a:	4a69      	ldr	r2, [pc, #420]	@ (800def0 <init_quaternion+0x218>)
 800dd4c:	601a      	str	r2, [r3, #0]
            q1 = -0.015;
 800dd4e:	4b62      	ldr	r3, [pc, #392]	@ (800ded8 <init_quaternion+0x200>)
 800dd50:	4a62      	ldr	r2, [pc, #392]	@ (800dedc <init_quaternion+0x204>)
 800dd52:	601a      	str	r2, [r3, #0]
            q2 = 0.006;
 800dd54:	4b62      	ldr	r3, [pc, #392]	@ (800dee0 <init_quaternion+0x208>)
 800dd56:	4a67      	ldr	r2, [pc, #412]	@ (800def4 <init_quaternion+0x21c>)
 800dd58:	601a      	str	r2, [r3, #0]
            q3 = 0.829;
 800dd5a:	4b63      	ldr	r3, [pc, #396]	@ (800dee8 <init_quaternion+0x210>)
 800dd5c:	4a66      	ldr	r2, [pc, #408]	@ (800def8 <init_quaternion+0x220>)
 800dd5e:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800dd60:	e0ad      	b.n	800debe <init_quaternion+0x1e6>
        }
    }
    else if (hx < 0 && hy > 0)
 800dd62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	da35      	bge.n	800ddd6 <init_quaternion+0xfe>
 800dd6a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	dd31      	ble.n	800ddd6 <init_quaternion+0xfe>
    {
        if (fabs(hx / hy) >= 1)
 800dd72:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800dd76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dd7a:	fb92 f3f3 	sdiv	r3, r2, r3
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7f2 fbf8 	bl	8000574 <__aeabi_i2d>
 800dd84:	4602      	mov	r2, r0
 800dd86:	460b      	mov	r3, r1
 800dd88:	4692      	mov	sl, r2
 800dd8a:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800dd8e:	f04f 0200 	mov.w	r2, #0
 800dd92:	4b4e      	ldr	r3, [pc, #312]	@ (800decc <init_quaternion+0x1f4>)
 800dd94:	4650      	mov	r0, sl
 800dd96:	4659      	mov	r1, fp
 800dd98:	f7f2 fedc 	bl	8000b54 <__aeabi_dcmpge>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d00c      	beq.n	800ddbc <init_quaternion+0xe4>
        {
            q0 = -0.193;
 800dda2:	4b4b      	ldr	r3, [pc, #300]	@ (800ded0 <init_quaternion+0x1f8>)
 800dda4:	4a55      	ldr	r2, [pc, #340]	@ (800defc <init_quaternion+0x224>)
 800dda6:	601a      	str	r2, [r3, #0]
            q1 = -0.009;
 800dda8:	4b4b      	ldr	r3, [pc, #300]	@ (800ded8 <init_quaternion+0x200>)
 800ddaa:	4a55      	ldr	r2, [pc, #340]	@ (800df00 <init_quaternion+0x228>)
 800ddac:	601a      	str	r2, [r3, #0]
            q2 = -0.006;
 800ddae:	4b4c      	ldr	r3, [pc, #304]	@ (800dee0 <init_quaternion+0x208>)
 800ddb0:	4a54      	ldr	r2, [pc, #336]	@ (800df04 <init_quaternion+0x22c>)
 800ddb2:	601a      	str	r2, [r3, #0]
            q3 = 0.979;
 800ddb4:	4b4c      	ldr	r3, [pc, #304]	@ (800dee8 <init_quaternion+0x210>)
 800ddb6:	4a4d      	ldr	r2, [pc, #308]	@ (800deec <init_quaternion+0x214>)
 800ddb8:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800ddba:	e080      	b.n	800debe <init_quaternion+0x1e6>
        }
        else
        {
            q0 = -0.552;
 800ddbc:	4b44      	ldr	r3, [pc, #272]	@ (800ded0 <init_quaternion+0x1f8>)
 800ddbe:	4a52      	ldr	r2, [pc, #328]	@ (800df08 <init_quaternion+0x230>)
 800ddc0:	601a      	str	r2, [r3, #0]
            q1 = -0.0048;
 800ddc2:	4b45      	ldr	r3, [pc, #276]	@ (800ded8 <init_quaternion+0x200>)
 800ddc4:	4a51      	ldr	r2, [pc, #324]	@ (800df0c <init_quaternion+0x234>)
 800ddc6:	601a      	str	r2, [r3, #0]
            q2 = -0.0115;
 800ddc8:	4b45      	ldr	r3, [pc, #276]	@ (800dee0 <init_quaternion+0x208>)
 800ddca:	4a51      	ldr	r2, [pc, #324]	@ (800df10 <init_quaternion+0x238>)
 800ddcc:	601a      	str	r2, [r3, #0]
            q3 = 0.8313;
 800ddce:	4b46      	ldr	r3, [pc, #280]	@ (800dee8 <init_quaternion+0x210>)
 800ddd0:	4a50      	ldr	r2, [pc, #320]	@ (800df14 <init_quaternion+0x23c>)
 800ddd2:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800ddd4:	e073      	b.n	800debe <init_quaternion+0x1e6>
        }
    }
    else if (hx > 0 && hy > 0)
 800ddd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	dd35      	ble.n	800de4a <init_quaternion+0x172>
 800ddde:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	dd31      	ble.n	800de4a <init_quaternion+0x172>
    {
        if (fabs(hx / hy) >= 1)
 800dde6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ddea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ddee:	fb92 f3f3 	sdiv	r3, r2, r3
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7f2 fbbe 	bl	8000574 <__aeabi_i2d>
 800ddf8:	4602      	mov	r2, r0
 800ddfa:	460b      	mov	r3, r1
 800ddfc:	4690      	mov	r8, r2
 800ddfe:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800de02:	f04f 0200 	mov.w	r2, #0
 800de06:	4b31      	ldr	r3, [pc, #196]	@ (800decc <init_quaternion+0x1f4>)
 800de08:	4640      	mov	r0, r8
 800de0a:	4649      	mov	r1, r9
 800de0c:	f7f2 fea2 	bl	8000b54 <__aeabi_dcmpge>
 800de10:	4603      	mov	r3, r0
 800de12:	2b00      	cmp	r3, #0
 800de14:	d00c      	beq.n	800de30 <init_quaternion+0x158>
        {
            q0 = -0.9785;
 800de16:	4b2e      	ldr	r3, [pc, #184]	@ (800ded0 <init_quaternion+0x1f8>)
 800de18:	4a3f      	ldr	r2, [pc, #252]	@ (800df18 <init_quaternion+0x240>)
 800de1a:	601a      	str	r2, [r3, #0]
            q1 = 0.008;
 800de1c:	4b2e      	ldr	r3, [pc, #184]	@ (800ded8 <init_quaternion+0x200>)
 800de1e:	4a3f      	ldr	r2, [pc, #252]	@ (800df1c <init_quaternion+0x244>)
 800de20:	601a      	str	r2, [r3, #0]
            q2 = -0.02;
 800de22:	4b2f      	ldr	r3, [pc, #188]	@ (800dee0 <init_quaternion+0x208>)
 800de24:	4a3e      	ldr	r2, [pc, #248]	@ (800df20 <init_quaternion+0x248>)
 800de26:	601a      	str	r2, [r3, #0]
            q3 = 0.195;
 800de28:	4b2f      	ldr	r3, [pc, #188]	@ (800dee8 <init_quaternion+0x210>)
 800de2a:	4a2a      	ldr	r2, [pc, #168]	@ (800ded4 <init_quaternion+0x1fc>)
 800de2c:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800de2e:	e046      	b.n	800debe <init_quaternion+0x1e6>
        }
        else
        {
            q0 = -0.9828;
 800de30:	4b27      	ldr	r3, [pc, #156]	@ (800ded0 <init_quaternion+0x1f8>)
 800de32:	4a3c      	ldr	r2, [pc, #240]	@ (800df24 <init_quaternion+0x24c>)
 800de34:	601a      	str	r2, [r3, #0]
            q1 = 0.002;
 800de36:	4b28      	ldr	r3, [pc, #160]	@ (800ded8 <init_quaternion+0x200>)
 800de38:	4a3b      	ldr	r2, [pc, #236]	@ (800df28 <init_quaternion+0x250>)
 800de3a:	601a      	str	r2, [r3, #0]
            q2 = -0.0167;
 800de3c:	4b28      	ldr	r3, [pc, #160]	@ (800dee0 <init_quaternion+0x208>)
 800de3e:	4a3b      	ldr	r2, [pc, #236]	@ (800df2c <init_quaternion+0x254>)
 800de40:	601a      	str	r2, [r3, #0]
            q3 = 0.5557;
 800de42:	4b29      	ldr	r3, [pc, #164]	@ (800dee8 <init_quaternion+0x210>)
 800de44:	4a3a      	ldr	r2, [pc, #232]	@ (800df30 <init_quaternion+0x258>)
 800de46:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800de48:	e039      	b.n	800debe <init_quaternion+0x1e6>
        }
    }
    else if (hx > 0 && hy < 0)
 800de4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	dd35      	ble.n	800debe <init_quaternion+0x1e6>
 800de52:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800de56:	2b00      	cmp	r3, #0
 800de58:	da31      	bge.n	800debe <init_quaternion+0x1e6>
    {
        if (fabs(hx / hy) >= 1)
 800de5a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800de5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800de62:	fb92 f3f3 	sdiv	r3, r2, r3
 800de66:	4618      	mov	r0, r3
 800de68:	f7f2 fb84 	bl	8000574 <__aeabi_i2d>
 800de6c:	4602      	mov	r2, r0
 800de6e:	460b      	mov	r3, r1
 800de70:	4614      	mov	r4, r2
 800de72:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800de76:	f04f 0200 	mov.w	r2, #0
 800de7a:	4b14      	ldr	r3, [pc, #80]	@ (800decc <init_quaternion+0x1f4>)
 800de7c:	4620      	mov	r0, r4
 800de7e:	4629      	mov	r1, r5
 800de80:	f7f2 fe68 	bl	8000b54 <__aeabi_dcmpge>
 800de84:	4603      	mov	r3, r0
 800de86:	2b00      	cmp	r3, #0
 800de88:	d00c      	beq.n	800dea4 <init_quaternion+0x1cc>
        {
            q0 = -0.979;
 800de8a:	4b11      	ldr	r3, [pc, #68]	@ (800ded0 <init_quaternion+0x1f8>)
 800de8c:	4a29      	ldr	r2, [pc, #164]	@ (800df34 <init_quaternion+0x25c>)
 800de8e:	601a      	str	r2, [r3, #0]
            q1 = 0.0116;
 800de90:	4b11      	ldr	r3, [pc, #68]	@ (800ded8 <init_quaternion+0x200>)
 800de92:	4a29      	ldr	r2, [pc, #164]	@ (800df38 <init_quaternion+0x260>)
 800de94:	601a      	str	r2, [r3, #0]
            q2 = -0.0167;
 800de96:	4b12      	ldr	r3, [pc, #72]	@ (800dee0 <init_quaternion+0x208>)
 800de98:	4a24      	ldr	r2, [pc, #144]	@ (800df2c <init_quaternion+0x254>)
 800de9a:	601a      	str	r2, [r3, #0]
            q3 = -0.195;
 800de9c:	4b12      	ldr	r3, [pc, #72]	@ (800dee8 <init_quaternion+0x210>)
 800de9e:	4a27      	ldr	r2, [pc, #156]	@ (800df3c <init_quaternion+0x264>)
 800dea0:	601a      	str	r2, [r3, #0]
            q2 = -0.012;
            q3 = -0.556;
        }
    }
#endif
}
 800dea2:	e00c      	b.n	800debe <init_quaternion+0x1e6>
            q0 = -0.83;
 800dea4:	4b0a      	ldr	r3, [pc, #40]	@ (800ded0 <init_quaternion+0x1f8>)
 800dea6:	4a26      	ldr	r2, [pc, #152]	@ (800df40 <init_quaternion+0x268>)
 800dea8:	601a      	str	r2, [r3, #0]
            q1 = 0.014;
 800deaa:	4b0b      	ldr	r3, [pc, #44]	@ (800ded8 <init_quaternion+0x200>)
 800deac:	4a25      	ldr	r2, [pc, #148]	@ (800df44 <init_quaternion+0x26c>)
 800deae:	601a      	str	r2, [r3, #0]
            q2 = -0.012;
 800deb0:	4b0b      	ldr	r3, [pc, #44]	@ (800dee0 <init_quaternion+0x208>)
 800deb2:	4a25      	ldr	r2, [pc, #148]	@ (800df48 <init_quaternion+0x270>)
 800deb4:	601a      	str	r2, [r3, #0]
            q3 = -0.556;
 800deb6:	4b0c      	ldr	r3, [pc, #48]	@ (800dee8 <init_quaternion+0x210>)
 800deb8:	4a24      	ldr	r2, [pc, #144]	@ (800df4c <init_quaternion+0x274>)
 800deba:	601a      	str	r2, [r3, #0]
}
 800debc:	e7ff      	b.n	800debe <init_quaternion+0x1e6>
 800debe:	bf00      	nop
 800dec0:	3710      	adds	r7, #16
 800dec2:	46bd      	mov	sp, r7
 800dec4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dec8:	20000c74 	.word	0x20000c74
 800decc:	3ff00000 	.word	0x3ff00000
 800ded0:	200000bc 	.word	0x200000bc
 800ded4:	3e47ae14 	.word	0x3e47ae14
 800ded8:	20000c2c 	.word	0x20000c2c
 800dedc:	bc75c28f 	.word	0xbc75c28f
 800dee0:	20000c30 	.word	0x20000c30
 800dee4:	3b8ce704 	.word	0x3b8ce704
 800dee8:	20000c34 	.word	0x20000c34
 800deec:	3f7a9fbe 	.word	0x3f7a9fbe
 800def0:	3f0e147b 	.word	0x3f0e147b
 800def4:	3bc49ba6 	.word	0x3bc49ba6
 800def8:	3f543958 	.word	0x3f543958
 800defc:	be45a1cb 	.word	0xbe45a1cb
 800df00:	bc1374bc 	.word	0xbc1374bc
 800df04:	bbc49ba6 	.word	0xbbc49ba6
 800df08:	bf0d4fdf 	.word	0xbf0d4fdf
 800df0c:	bb9d4952 	.word	0xbb9d4952
 800df10:	bc3c6a7f 	.word	0xbc3c6a7f
 800df14:	3f54d014 	.word	0x3f54d014
 800df18:	bf7a7efa 	.word	0xbf7a7efa
 800df1c:	3c03126f 	.word	0x3c03126f
 800df20:	bca3d70a 	.word	0xbca3d70a
 800df24:	bf7b98c8 	.word	0xbf7b98c8
 800df28:	3b03126f 	.word	0x3b03126f
 800df2c:	bc88ce70 	.word	0xbc88ce70
 800df30:	3f0e425b 	.word	0x3f0e425b
 800df34:	bf7a9fbe 	.word	0xbf7a9fbe
 800df38:	3c3e0ded 	.word	0x3c3e0ded
 800df3c:	be47ae14 	.word	0xbe47ae14
 800df40:	bf547ae1 	.word	0xbf547ae1
 800df44:	3c656042 	.word	0x3c656042
 800df48:	bc449ba6 	.word	0xbc449ba6
 800df4c:	bf0e5604 	.word	0xbf0e5604

0800df50 <imu_ahrs_update>:

// 更新IMU数值
void imu_ahrs_update(void)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b09e      	sub	sp, #120	@ 0x78
 800df54:	af00      	add	r7, sp, #0
    float hx, hy, hz, bx, bz;
    float vx, vy, vz, wx, wy, wz;
    float ex, ey, ez, halfT;
    float tempq0, tempq1, tempq2, tempq3;

    float q0q0 = q0 * q0;
 800df56:	4bd6      	ldr	r3, [pc, #856]	@ (800e2b0 <imu_ahrs_update+0x360>)
 800df58:	ed93 7a00 	vldr	s14, [r3]
 800df5c:	4bd4      	ldr	r3, [pc, #848]	@ (800e2b0 <imu_ahrs_update+0x360>)
 800df5e:	edd3 7a00 	vldr	s15, [r3]
 800df62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df66:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    float q0q1 = q0 * q1;
 800df6a:	4bd1      	ldr	r3, [pc, #836]	@ (800e2b0 <imu_ahrs_update+0x360>)
 800df6c:	ed93 7a00 	vldr	s14, [r3]
 800df70:	4bd0      	ldr	r3, [pc, #832]	@ (800e2b4 <imu_ahrs_update+0x364>)
 800df72:	edd3 7a00 	vldr	s15, [r3]
 800df76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df7a:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    float q0q2 = q0 * q2;
 800df7e:	4bcc      	ldr	r3, [pc, #816]	@ (800e2b0 <imu_ahrs_update+0x360>)
 800df80:	ed93 7a00 	vldr	s14, [r3]
 800df84:	4bcc      	ldr	r3, [pc, #816]	@ (800e2b8 <imu_ahrs_update+0x368>)
 800df86:	edd3 7a00 	vldr	s15, [r3]
 800df8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df8e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    float q0q3 = q0 * q3;
 800df92:	4bc7      	ldr	r3, [pc, #796]	@ (800e2b0 <imu_ahrs_update+0x360>)
 800df94:	ed93 7a00 	vldr	s14, [r3]
 800df98:	4bc8      	ldr	r3, [pc, #800]	@ (800e2bc <imu_ahrs_update+0x36c>)
 800df9a:	edd3 7a00 	vldr	s15, [r3]
 800df9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfa2:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    float q1q1 = q1 * q1;
 800dfa6:	4bc3      	ldr	r3, [pc, #780]	@ (800e2b4 <imu_ahrs_update+0x364>)
 800dfa8:	ed93 7a00 	vldr	s14, [r3]
 800dfac:	4bc1      	ldr	r3, [pc, #772]	@ (800e2b4 <imu_ahrs_update+0x364>)
 800dfae:	edd3 7a00 	vldr	s15, [r3]
 800dfb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfb6:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    float q1q2 = q1 * q2;
 800dfba:	4bbe      	ldr	r3, [pc, #760]	@ (800e2b4 <imu_ahrs_update+0x364>)
 800dfbc:	ed93 7a00 	vldr	s14, [r3]
 800dfc0:	4bbd      	ldr	r3, [pc, #756]	@ (800e2b8 <imu_ahrs_update+0x368>)
 800dfc2:	edd3 7a00 	vldr	s15, [r3]
 800dfc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfca:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    float q1q3 = q1 * q3;
 800dfce:	4bb9      	ldr	r3, [pc, #740]	@ (800e2b4 <imu_ahrs_update+0x364>)
 800dfd0:	ed93 7a00 	vldr	s14, [r3]
 800dfd4:	4bb9      	ldr	r3, [pc, #740]	@ (800e2bc <imu_ahrs_update+0x36c>)
 800dfd6:	edd3 7a00 	vldr	s15, [r3]
 800dfda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfde:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    float q2q2 = q2 * q2;
 800dfe2:	4bb5      	ldr	r3, [pc, #724]	@ (800e2b8 <imu_ahrs_update+0x368>)
 800dfe4:	ed93 7a00 	vldr	s14, [r3]
 800dfe8:	4bb3      	ldr	r3, [pc, #716]	@ (800e2b8 <imu_ahrs_update+0x368>)
 800dfea:	edd3 7a00 	vldr	s15, [r3]
 800dfee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dff2:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    float q2q3 = q2 * q3;
 800dff6:	4bb0      	ldr	r3, [pc, #704]	@ (800e2b8 <imu_ahrs_update+0x368>)
 800dff8:	ed93 7a00 	vldr	s14, [r3]
 800dffc:	4baf      	ldr	r3, [pc, #700]	@ (800e2bc <imu_ahrs_update+0x36c>)
 800dffe:	edd3 7a00 	vldr	s15, [r3]
 800e002:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e006:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    float q3q3 = q3 * q3;
 800e00a:	4bac      	ldr	r3, [pc, #688]	@ (800e2bc <imu_ahrs_update+0x36c>)
 800e00c:	ed93 7a00 	vldr	s14, [r3]
 800e010:	4baa      	ldr	r3, [pc, #680]	@ (800e2bc <imu_ahrs_update+0x36c>)
 800e012:	edd3 7a00 	vldr	s15, [r3]
 800e016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e01a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    gx = imu.wx;
 800e01e:	4ba8      	ldr	r3, [pc, #672]	@ (800e2c0 <imu_ahrs_update+0x370>)
 800e020:	691b      	ldr	r3, [r3, #16]
 800e022:	4aa8      	ldr	r2, [pc, #672]	@ (800e2c4 <imu_ahrs_update+0x374>)
 800e024:	6013      	str	r3, [r2, #0]
    gy = imu.wy;
 800e026:	4ba6      	ldr	r3, [pc, #664]	@ (800e2c0 <imu_ahrs_update+0x370>)
 800e028:	695b      	ldr	r3, [r3, #20]
 800e02a:	4aa7      	ldr	r2, [pc, #668]	@ (800e2c8 <imu_ahrs_update+0x378>)
 800e02c:	6013      	str	r3, [r2, #0]
    gz = imu.wz;
 800e02e:	4ba4      	ldr	r3, [pc, #656]	@ (800e2c0 <imu_ahrs_update+0x370>)
 800e030:	699b      	ldr	r3, [r3, #24]
 800e032:	4aa6      	ldr	r2, [pc, #664]	@ (800e2cc <imu_ahrs_update+0x37c>)
 800e034:	6013      	str	r3, [r2, #0]
    ax = imu.ax;
 800e036:	4ba2      	ldr	r3, [pc, #648]	@ (800e2c0 <imu_ahrs_update+0x370>)
 800e038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e03c:	ee07 3a90 	vmov	s15, r3
 800e040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e044:	4ba2      	ldr	r3, [pc, #648]	@ (800e2d0 <imu_ahrs_update+0x380>)
 800e046:	edc3 7a00 	vstr	s15, [r3]
    ay = imu.ay;
 800e04a:	4b9d      	ldr	r3, [pc, #628]	@ (800e2c0 <imu_ahrs_update+0x370>)
 800e04c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e050:	ee07 3a90 	vmov	s15, r3
 800e054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e058:	4b9e      	ldr	r3, [pc, #632]	@ (800e2d4 <imu_ahrs_update+0x384>)
 800e05a:	edc3 7a00 	vstr	s15, [r3]
    az = imu.az;
 800e05e:	4b98      	ldr	r3, [pc, #608]	@ (800e2c0 <imu_ahrs_update+0x370>)
 800e060:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e064:	ee07 3a90 	vmov	s15, r3
 800e068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e06c:	4b9a      	ldr	r3, [pc, #616]	@ (800e2d8 <imu_ahrs_update+0x388>)
 800e06e:	edc3 7a00 	vstr	s15, [r3]
    mx = imu.mx;
 800e072:	4b93      	ldr	r3, [pc, #588]	@ (800e2c0 <imu_ahrs_update+0x370>)
 800e074:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e078:	ee07 3a90 	vmov	s15, r3
 800e07c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e080:	4b96      	ldr	r3, [pc, #600]	@ (800e2dc <imu_ahrs_update+0x38c>)
 800e082:	edc3 7a00 	vstr	s15, [r3]
    my = imu.my;
 800e086:	4b8e      	ldr	r3, [pc, #568]	@ (800e2c0 <imu_ahrs_update+0x370>)
 800e088:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e08c:	ee07 3a90 	vmov	s15, r3
 800e090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e094:	4b92      	ldr	r3, [pc, #584]	@ (800e2e0 <imu_ahrs_update+0x390>)
 800e096:	edc3 7a00 	vstr	s15, [r3]
    mz = imu.mz;
 800e09a:	4b89      	ldr	r3, [pc, #548]	@ (800e2c0 <imu_ahrs_update+0x370>)
 800e09c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800e0a0:	ee07 3a90 	vmov	s15, r3
 800e0a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e0a8:	4b8e      	ldr	r3, [pc, #568]	@ (800e2e4 <imu_ahrs_update+0x394>)
 800e0aa:	edc3 7a00 	vstr	s15, [r3]

    now_update = HAL_GetTick(); // ms
 800e0ae:	f7f4 fc75 	bl	800299c <HAL_GetTick>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	4a8c      	ldr	r2, [pc, #560]	@ (800e2e8 <imu_ahrs_update+0x398>)
 800e0b6:	6013      	str	r3, [r2, #0]
    halfT = ((float)(now_update - last_update) / 2000.0f);
 800e0b8:	4b8b      	ldr	r3, [pc, #556]	@ (800e2e8 <imu_ahrs_update+0x398>)
 800e0ba:	681a      	ldr	r2, [r3, #0]
 800e0bc:	4b8b      	ldr	r3, [pc, #556]	@ (800e2ec <imu_ahrs_update+0x39c>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	1ad3      	subs	r3, r2, r3
 800e0c2:	ee07 3a90 	vmov	s15, r3
 800e0c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e0ca:	eddf 6a89 	vldr	s13, [pc, #548]	@ 800e2f0 <imu_ahrs_update+0x3a0>
 800e0ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e0d2:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    last_update = now_update;
 800e0d6:	4b84      	ldr	r3, [pc, #528]	@ (800e2e8 <imu_ahrs_update+0x398>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4a84      	ldr	r2, [pc, #528]	@ (800e2ec <imu_ahrs_update+0x39c>)
 800e0dc:	6013      	str	r3, [r2, #0]

    /* 快速逆平方根 */
    norm = inv_sqrt(ax * ax + ay * ay + az * az);
 800e0de:	4b7c      	ldr	r3, [pc, #496]	@ (800e2d0 <imu_ahrs_update+0x380>)
 800e0e0:	ed93 7a00 	vldr	s14, [r3]
 800e0e4:	4b7a      	ldr	r3, [pc, #488]	@ (800e2d0 <imu_ahrs_update+0x380>)
 800e0e6:	edd3 7a00 	vldr	s15, [r3]
 800e0ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0ee:	4b79      	ldr	r3, [pc, #484]	@ (800e2d4 <imu_ahrs_update+0x384>)
 800e0f0:	edd3 6a00 	vldr	s13, [r3]
 800e0f4:	4b77      	ldr	r3, [pc, #476]	@ (800e2d4 <imu_ahrs_update+0x384>)
 800e0f6:	edd3 7a00 	vldr	s15, [r3]
 800e0fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e0fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e102:	4b75      	ldr	r3, [pc, #468]	@ (800e2d8 <imu_ahrs_update+0x388>)
 800e104:	edd3 6a00 	vldr	s13, [r3]
 800e108:	4b73      	ldr	r3, [pc, #460]	@ (800e2d8 <imu_ahrs_update+0x388>)
 800e10a:	edd3 7a00 	vldr	s15, [r3]
 800e10e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e112:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e116:	eeb0 0a67 	vmov.f32	s0, s15
 800e11a:	f7ff fad7 	bl	800d6cc <inv_sqrt>
 800e11e:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    ax = ax * norm;
 800e122:	4b6b      	ldr	r3, [pc, #428]	@ (800e2d0 <imu_ahrs_update+0x380>)
 800e124:	ed93 7a00 	vldr	s14, [r3]
 800e128:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800e12c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e130:	4b67      	ldr	r3, [pc, #412]	@ (800e2d0 <imu_ahrs_update+0x380>)
 800e132:	edc3 7a00 	vstr	s15, [r3]
    ay = ay * norm;
 800e136:	4b67      	ldr	r3, [pc, #412]	@ (800e2d4 <imu_ahrs_update+0x384>)
 800e138:	ed93 7a00 	vldr	s14, [r3]
 800e13c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800e140:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e144:	4b63      	ldr	r3, [pc, #396]	@ (800e2d4 <imu_ahrs_update+0x384>)
 800e146:	edc3 7a00 	vstr	s15, [r3]
    az = az * norm;
 800e14a:	4b63      	ldr	r3, [pc, #396]	@ (800e2d8 <imu_ahrs_update+0x388>)
 800e14c:	ed93 7a00 	vldr	s14, [r3]
 800e150:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800e154:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e158:	4b5f      	ldr	r3, [pc, #380]	@ (800e2d8 <imu_ahrs_update+0x388>)
 800e15a:	edc3 7a00 	vstr	s15, [r3]
    norm = inv_sqrt(mx * mx + my * my + mz * mz);
    mx = mx * norm;
    my = my * norm;
    mz = mz * norm;
#else
    mx = 0;
 800e15e:	4b5f      	ldr	r3, [pc, #380]	@ (800e2dc <imu_ahrs_update+0x38c>)
 800e160:	f04f 0200 	mov.w	r2, #0
 800e164:	601a      	str	r2, [r3, #0]
    my = 0;
 800e166:	4b5e      	ldr	r3, [pc, #376]	@ (800e2e0 <imu_ahrs_update+0x390>)
 800e168:	f04f 0200 	mov.w	r2, #0
 800e16c:	601a      	str	r2, [r3, #0]
    mz = 0;
 800e16e:	4b5d      	ldr	r3, [pc, #372]	@ (800e2e4 <imu_ahrs_update+0x394>)
 800e170:	f04f 0200 	mov.w	r2, #0
 800e174:	601a      	str	r2, [r3, #0]
#endif
    /* 计算通量的参考方向*/
    hx = 2.0f * mx * (0.5f - q2q2 - q3q3) + 2.0f * my * (q1q2 - q0q3) + 2.0f * mz * (q1q3 + q0q2);
 800e176:	4b59      	ldr	r3, [pc, #356]	@ (800e2dc <imu_ahrs_update+0x38c>)
 800e178:	edd3 7a00 	vldr	s15, [r3]
 800e17c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e180:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800e184:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800e188:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e18c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800e190:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e194:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e198:	4b51      	ldr	r3, [pc, #324]	@ (800e2e0 <imu_ahrs_update+0x390>)
 800e19a:	edd3 7a00 	vldr	s15, [r3]
 800e19e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e1a2:	ed97 6a18 	vldr	s12, [r7, #96]	@ 0x60
 800e1a6:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800e1aa:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e1ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e1b6:	4b4b      	ldr	r3, [pc, #300]	@ (800e2e4 <imu_ahrs_update+0x394>)
 800e1b8:	edd3 7a00 	vldr	s15, [r3]
 800e1bc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e1c0:	ed97 6a17 	vldr	s12, [r7, #92]	@ 0x5c
 800e1c4:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800e1c8:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e1cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e1d4:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    hy = 2.0f * mx * (q1q2 + q0q3) + 2.0f * my * (0.5f - q1q1 - q3q3) + 2.0f * mz * (q2q3 - q0q1);
 800e1d8:	4b40      	ldr	r3, [pc, #256]	@ (800e2dc <imu_ahrs_update+0x38c>)
 800e1da:	edd3 7a00 	vldr	s15, [r3]
 800e1de:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e1e2:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 800e1e6:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800e1ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e1ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1f2:	4b3b      	ldr	r3, [pc, #236]	@ (800e2e0 <imu_ahrs_update+0x390>)
 800e1f4:	edd3 7a00 	vldr	s15, [r3]
 800e1f8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e1fc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800e200:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800e204:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e208:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800e20c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e214:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e218:	4b32      	ldr	r3, [pc, #200]	@ (800e2e4 <imu_ahrs_update+0x394>)
 800e21a:	edd3 7a00 	vldr	s15, [r3]
 800e21e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e222:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 800e226:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800e22a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e22e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e232:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e236:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    hz = 2.0f * mx * (q1q3 - q0q2) + 2.0f * my * (q2q3 + q0q1) + 2.0f * mz * (0.5f - q1q1 - q2q2);
 800e23a:	4b28      	ldr	r3, [pc, #160]	@ (800e2dc <imu_ahrs_update+0x38c>)
 800e23c:	edd3 7a00 	vldr	s15, [r3]
 800e240:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e244:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800e248:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800e24c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e250:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e254:	4b22      	ldr	r3, [pc, #136]	@ (800e2e0 <imu_ahrs_update+0x390>)
 800e256:	edd3 7a00 	vldr	s15, [r3]
 800e25a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e25e:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 800e262:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800e266:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e26a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e26e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e272:	4b1c      	ldr	r3, [pc, #112]	@ (800e2e4 <imu_ahrs_update+0x394>)
 800e274:	edd3 7a00 	vldr	s15, [r3]
 800e278:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e27c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800e280:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800e284:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e288:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800e28c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e294:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e298:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    bx = sqrt((hx * hx) + (hy * hy));
 800e29c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800e2a0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800e2a4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800e2a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e2ac:	e022      	b.n	800e2f4 <imu_ahrs_update+0x3a4>
 800e2ae:	bf00      	nop
 800e2b0:	200000bc 	.word	0x200000bc
 800e2b4:	20000c2c 	.word	0x20000c2c
 800e2b8:	20000c30 	.word	0x20000c30
 800e2bc:	20000c34 	.word	0x20000c34
 800e2c0:	20000c74 	.word	0x20000c74
 800e2c4:	20000cac 	.word	0x20000cac
 800e2c8:	20000cb0 	.word	0x20000cb0
 800e2cc:	20000cb4 	.word	0x20000cb4
 800e2d0:	20000cb8 	.word	0x20000cb8
 800e2d4:	20000cbc 	.word	0x20000cbc
 800e2d8:	20000cc0 	.word	0x20000cc0
 800e2dc:	20000cc4 	.word	0x20000cc4
 800e2e0:	20000cc8 	.word	0x20000cc8
 800e2e4:	20000ccc 	.word	0x20000ccc
 800e2e8:	20000cd4 	.word	0x20000cd4
 800e2ec:	20000cd0 	.word	0x20000cd0
 800e2f0:	44fa0000 	.word	0x44fa0000
 800e2f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2f8:	ee17 0a90 	vmov	r0, s15
 800e2fc:	f7f2 f94c 	bl	8000598 <__aeabi_f2d>
 800e300:	4602      	mov	r2, r0
 800e302:	460b      	mov	r3, r1
 800e304:	ec43 2b10 	vmov	d0, r2, r3
 800e308:	f005 fac4 	bl	8013894 <sqrt>
 800e30c:	ec53 2b10 	vmov	r2, r3, d0
 800e310:	4610      	mov	r0, r2
 800e312:	4619      	mov	r1, r3
 800e314:	f7f2 fc90 	bl	8000c38 <__aeabi_d2f>
 800e318:	4603      	mov	r3, r0
 800e31a:	63bb      	str	r3, [r7, #56]	@ 0x38
    bz = hz;
 800e31c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e31e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* 估计重力和通量方向(v和w)   */
    vx = 2.0f * (q1q3 - q0q2);
 800e320:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800e324:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800e328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e32c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e330:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    vy = 2.0f * (q0q1 + q2q3);
 800e334:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800e338:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800e33c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e340:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e344:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    vz = q0q0 - q1q1 - q2q2 + q3q3;
 800e348:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800e34c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800e350:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e354:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800e358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e35c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800e360:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e364:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    wx = 2.0f * bx * (0.5f - q2q2 - q3q3) + 2.0f * bz * (q1q3 - q0q2);
 800e368:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800e36c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e370:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800e374:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800e378:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e37c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800e380:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e384:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e388:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800e38c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e390:	ed97 6a17 	vldr	s12, [r7, #92]	@ 0x5c
 800e394:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800e398:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e39c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e3a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e3a4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    wy = 2.0f * bx * (q1q2 - q0q3) + 2.0f * bz * (q0q1 + q2q3);
 800e3a8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800e3ac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e3b0:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 800e3b4:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800e3b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e3bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e3c0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800e3c4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e3c8:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 800e3cc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800e3d0:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e3d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e3d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e3dc:	edc7 7a08 	vstr	s15, [r7, #32]
    wz = 2.0f * bx * (q0q2 + q1q3) + 2.0f * bz * (0.5f - q1q1 - q2q2);
 800e3e0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800e3e4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e3e8:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800e3ec:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800e3f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e3f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e3f8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800e3fc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e400:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800e404:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800e408:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e40c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800e410:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e41c:	edc7 7a07 	vstr	s15, [r7, #28]

    /*
     * 误差是场的参考方向与传感器测量方向的叉积之和
     */
    ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 800e420:	4bde      	ldr	r3, [pc, #888]	@ (800e79c <imu_ahrs_update+0x84c>)
 800e422:	ed93 7a00 	vldr	s14, [r3]
 800e426:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800e42a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e42e:	4bdc      	ldr	r3, [pc, #880]	@ (800e7a0 <imu_ahrs_update+0x850>)
 800e430:	edd3 6a00 	vldr	s13, [r3]
 800e434:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800e438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e43c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e440:	4bd8      	ldr	r3, [pc, #864]	@ (800e7a4 <imu_ahrs_update+0x854>)
 800e442:	edd3 6a00 	vldr	s13, [r3]
 800e446:	edd7 7a07 	vldr	s15, [r7, #28]
 800e44a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e44e:	4bd6      	ldr	r3, [pc, #856]	@ (800e7a8 <imu_ahrs_update+0x858>)
 800e450:	ed93 6a00 	vldr	s12, [r3]
 800e454:	edd7 7a08 	vldr	s15, [r7, #32]
 800e458:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e45c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e460:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e464:	edc7 7a06 	vstr	s15, [r7, #24]
    ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 800e468:	4bcd      	ldr	r3, [pc, #820]	@ (800e7a0 <imu_ahrs_update+0x850>)
 800e46a:	ed93 7a00 	vldr	s14, [r3]
 800e46e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800e472:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e476:	4bcd      	ldr	r3, [pc, #820]	@ (800e7ac <imu_ahrs_update+0x85c>)
 800e478:	edd3 6a00 	vldr	s13, [r3]
 800e47c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800e480:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e484:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e488:	4bc7      	ldr	r3, [pc, #796]	@ (800e7a8 <imu_ahrs_update+0x858>)
 800e48a:	edd3 6a00 	vldr	s13, [r3]
 800e48e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e492:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e496:	4bc6      	ldr	r3, [pc, #792]	@ (800e7b0 <imu_ahrs_update+0x860>)
 800e498:	ed93 6a00 	vldr	s12, [r3]
 800e49c:	edd7 7a07 	vldr	s15, [r7, #28]
 800e4a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e4a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e4a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e4ac:	edc7 7a05 	vstr	s15, [r7, #20]
    ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 800e4b0:	4bbe      	ldr	r3, [pc, #760]	@ (800e7ac <imu_ahrs_update+0x85c>)
 800e4b2:	ed93 7a00 	vldr	s14, [r3]
 800e4b6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800e4ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e4be:	4bb7      	ldr	r3, [pc, #732]	@ (800e79c <imu_ahrs_update+0x84c>)
 800e4c0:	edd3 6a00 	vldr	s13, [r3]
 800e4c4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800e4c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e4cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e4d0:	4bb7      	ldr	r3, [pc, #732]	@ (800e7b0 <imu_ahrs_update+0x860>)
 800e4d2:	edd3 6a00 	vldr	s13, [r3]
 800e4d6:	edd7 7a08 	vldr	s15, [r7, #32]
 800e4da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e4de:	4bb1      	ldr	r3, [pc, #708]	@ (800e7a4 <imu_ahrs_update+0x854>)
 800e4e0:	ed93 6a00 	vldr	s12, [r3]
 800e4e4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e4e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e4ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e4f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e4f4:	edc7 7a04 	vstr	s15, [r7, #16]

    /* PI */
    if (ex != 0.0f && ey != 0.0f && ez != 0.0f)
 800e4f8:	edd7 7a06 	vldr	s15, [r7, #24]
 800e4fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e504:	d076      	beq.n	800e5f4 <imu_ahrs_update+0x6a4>
 800e506:	edd7 7a05 	vldr	s15, [r7, #20]
 800e50a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e512:	d06f      	beq.n	800e5f4 <imu_ahrs_update+0x6a4>
 800e514:	edd7 7a04 	vldr	s15, [r7, #16]
 800e518:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e520:	d068      	beq.n	800e5f4 <imu_ahrs_update+0x6a4>
    {
        exInt = exInt + ex * Ki * halfT;
 800e522:	edd7 7a06 	vldr	s15, [r7, #24]
 800e526:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 800e7b4 <imu_ahrs_update+0x864>
 800e52a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e52e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e532:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e536:	4ba0      	ldr	r3, [pc, #640]	@ (800e7b8 <imu_ahrs_update+0x868>)
 800e538:	edd3 7a00 	vldr	s15, [r3]
 800e53c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e540:	4b9d      	ldr	r3, [pc, #628]	@ (800e7b8 <imu_ahrs_update+0x868>)
 800e542:	edc3 7a00 	vstr	s15, [r3]
        eyInt = eyInt + ey * Ki * halfT;
 800e546:	edd7 7a05 	vldr	s15, [r7, #20]
 800e54a:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800e7b4 <imu_ahrs_update+0x864>
 800e54e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e552:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e556:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e55a:	4b98      	ldr	r3, [pc, #608]	@ (800e7bc <imu_ahrs_update+0x86c>)
 800e55c:	edd3 7a00 	vldr	s15, [r3]
 800e560:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e564:	4b95      	ldr	r3, [pc, #596]	@ (800e7bc <imu_ahrs_update+0x86c>)
 800e566:	edc3 7a00 	vstr	s15, [r3]
        ezInt = ezInt + ez * Ki * halfT;
 800e56a:	edd7 7a04 	vldr	s15, [r7, #16]
 800e56e:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800e7b4 <imu_ahrs_update+0x864>
 800e572:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e576:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e57a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e57e:	4b90      	ldr	r3, [pc, #576]	@ (800e7c0 <imu_ahrs_update+0x870>)
 800e580:	edd3 7a00 	vldr	s15, [r3]
 800e584:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e588:	4b8d      	ldr	r3, [pc, #564]	@ (800e7c0 <imu_ahrs_update+0x870>)
 800e58a:	edc3 7a00 	vstr	s15, [r3]

        gx = gx + Kp * ex + exInt;
 800e58e:	edd7 7a06 	vldr	s15, [r7, #24]
 800e592:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e596:	4b8b      	ldr	r3, [pc, #556]	@ (800e7c4 <imu_ahrs_update+0x874>)
 800e598:	edd3 7a00 	vldr	s15, [r3]
 800e59c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e5a0:	4b85      	ldr	r3, [pc, #532]	@ (800e7b8 <imu_ahrs_update+0x868>)
 800e5a2:	edd3 7a00 	vldr	s15, [r3]
 800e5a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5aa:	4b86      	ldr	r3, [pc, #536]	@ (800e7c4 <imu_ahrs_update+0x874>)
 800e5ac:	edc3 7a00 	vstr	s15, [r3]
        gy = gy + Kp * ey + eyInt;
 800e5b0:	edd7 7a05 	vldr	s15, [r7, #20]
 800e5b4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e5b8:	4b83      	ldr	r3, [pc, #524]	@ (800e7c8 <imu_ahrs_update+0x878>)
 800e5ba:	edd3 7a00 	vldr	s15, [r3]
 800e5be:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e5c2:	4b7e      	ldr	r3, [pc, #504]	@ (800e7bc <imu_ahrs_update+0x86c>)
 800e5c4:	edd3 7a00 	vldr	s15, [r3]
 800e5c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5cc:	4b7e      	ldr	r3, [pc, #504]	@ (800e7c8 <imu_ahrs_update+0x878>)
 800e5ce:	edc3 7a00 	vstr	s15, [r3]
        gz = gz + Kp * ez + ezInt;
 800e5d2:	edd7 7a04 	vldr	s15, [r7, #16]
 800e5d6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e5da:	4b7c      	ldr	r3, [pc, #496]	@ (800e7cc <imu_ahrs_update+0x87c>)
 800e5dc:	edd3 7a00 	vldr	s15, [r3]
 800e5e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e5e4:	4b76      	ldr	r3, [pc, #472]	@ (800e7c0 <imu_ahrs_update+0x870>)
 800e5e6:	edd3 7a00 	vldr	s15, [r3]
 800e5ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5ee:	4b77      	ldr	r3, [pc, #476]	@ (800e7cc <imu_ahrs_update+0x87c>)
 800e5f0:	edc3 7a00 	vstr	s15, [r3]
    }

    tempq0 = q0 + (-q1 * gx - q2 * gy - q3 * gz) * halfT;
 800e5f4:	4b76      	ldr	r3, [pc, #472]	@ (800e7d0 <imu_ahrs_update+0x880>)
 800e5f6:	edd3 7a00 	vldr	s15, [r3]
 800e5fa:	eeb1 7a67 	vneg.f32	s14, s15
 800e5fe:	4b71      	ldr	r3, [pc, #452]	@ (800e7c4 <imu_ahrs_update+0x874>)
 800e600:	edd3 7a00 	vldr	s15, [r3]
 800e604:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e608:	4b72      	ldr	r3, [pc, #456]	@ (800e7d4 <imu_ahrs_update+0x884>)
 800e60a:	edd3 6a00 	vldr	s13, [r3]
 800e60e:	4b6e      	ldr	r3, [pc, #440]	@ (800e7c8 <imu_ahrs_update+0x878>)
 800e610:	edd3 7a00 	vldr	s15, [r3]
 800e614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e618:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e61c:	4b6e      	ldr	r3, [pc, #440]	@ (800e7d8 <imu_ahrs_update+0x888>)
 800e61e:	edd3 6a00 	vldr	s13, [r3]
 800e622:	4b6a      	ldr	r3, [pc, #424]	@ (800e7cc <imu_ahrs_update+0x87c>)
 800e624:	edd3 7a00 	vldr	s15, [r3]
 800e628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e62c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e630:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e634:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e638:	4b68      	ldr	r3, [pc, #416]	@ (800e7dc <imu_ahrs_update+0x88c>)
 800e63a:	edd3 7a00 	vldr	s15, [r3]
 800e63e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e642:	edc7 7a03 	vstr	s15, [r7, #12]
    tempq1 = q1 + (q0 * gx + q2 * gz - q3 * gy) * halfT;
 800e646:	4b65      	ldr	r3, [pc, #404]	@ (800e7dc <imu_ahrs_update+0x88c>)
 800e648:	ed93 7a00 	vldr	s14, [r3]
 800e64c:	4b5d      	ldr	r3, [pc, #372]	@ (800e7c4 <imu_ahrs_update+0x874>)
 800e64e:	edd3 7a00 	vldr	s15, [r3]
 800e652:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e656:	4b5f      	ldr	r3, [pc, #380]	@ (800e7d4 <imu_ahrs_update+0x884>)
 800e658:	edd3 6a00 	vldr	s13, [r3]
 800e65c:	4b5b      	ldr	r3, [pc, #364]	@ (800e7cc <imu_ahrs_update+0x87c>)
 800e65e:	edd3 7a00 	vldr	s15, [r3]
 800e662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e666:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e66a:	4b5b      	ldr	r3, [pc, #364]	@ (800e7d8 <imu_ahrs_update+0x888>)
 800e66c:	edd3 6a00 	vldr	s13, [r3]
 800e670:	4b55      	ldr	r3, [pc, #340]	@ (800e7c8 <imu_ahrs_update+0x878>)
 800e672:	edd3 7a00 	vldr	s15, [r3]
 800e676:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e67a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e67e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e682:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e686:	4b52      	ldr	r3, [pc, #328]	@ (800e7d0 <imu_ahrs_update+0x880>)
 800e688:	edd3 7a00 	vldr	s15, [r3]
 800e68c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e690:	edc7 7a02 	vstr	s15, [r7, #8]
    tempq2 = q2 + (q0 * gy - q1 * gz + q3 * gx) * halfT;
 800e694:	4b51      	ldr	r3, [pc, #324]	@ (800e7dc <imu_ahrs_update+0x88c>)
 800e696:	ed93 7a00 	vldr	s14, [r3]
 800e69a:	4b4b      	ldr	r3, [pc, #300]	@ (800e7c8 <imu_ahrs_update+0x878>)
 800e69c:	edd3 7a00 	vldr	s15, [r3]
 800e6a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e6a4:	4b4a      	ldr	r3, [pc, #296]	@ (800e7d0 <imu_ahrs_update+0x880>)
 800e6a6:	edd3 6a00 	vldr	s13, [r3]
 800e6aa:	4b48      	ldr	r3, [pc, #288]	@ (800e7cc <imu_ahrs_update+0x87c>)
 800e6ac:	edd3 7a00 	vldr	s15, [r3]
 800e6b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e6b8:	4b47      	ldr	r3, [pc, #284]	@ (800e7d8 <imu_ahrs_update+0x888>)
 800e6ba:	edd3 6a00 	vldr	s13, [r3]
 800e6be:	4b41      	ldr	r3, [pc, #260]	@ (800e7c4 <imu_ahrs_update+0x874>)
 800e6c0:	edd3 7a00 	vldr	s15, [r3]
 800e6c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e6cc:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e6d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e6d4:	4b3f      	ldr	r3, [pc, #252]	@ (800e7d4 <imu_ahrs_update+0x884>)
 800e6d6:	edd3 7a00 	vldr	s15, [r3]
 800e6da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6de:	edc7 7a01 	vstr	s15, [r7, #4]
    tempq3 = q3 + (q0 * gz + q1 * gy - q2 * gx) * halfT;
 800e6e2:	4b3e      	ldr	r3, [pc, #248]	@ (800e7dc <imu_ahrs_update+0x88c>)
 800e6e4:	ed93 7a00 	vldr	s14, [r3]
 800e6e8:	4b38      	ldr	r3, [pc, #224]	@ (800e7cc <imu_ahrs_update+0x87c>)
 800e6ea:	edd3 7a00 	vldr	s15, [r3]
 800e6ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e6f2:	4b37      	ldr	r3, [pc, #220]	@ (800e7d0 <imu_ahrs_update+0x880>)
 800e6f4:	edd3 6a00 	vldr	s13, [r3]
 800e6f8:	4b33      	ldr	r3, [pc, #204]	@ (800e7c8 <imu_ahrs_update+0x878>)
 800e6fa:	edd3 7a00 	vldr	s15, [r3]
 800e6fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e702:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e706:	4b33      	ldr	r3, [pc, #204]	@ (800e7d4 <imu_ahrs_update+0x884>)
 800e708:	edd3 6a00 	vldr	s13, [r3]
 800e70c:	4b2d      	ldr	r3, [pc, #180]	@ (800e7c4 <imu_ahrs_update+0x874>)
 800e70e:	edd3 7a00 	vldr	s15, [r3]
 800e712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e716:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e71a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e71e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e722:	4b2d      	ldr	r3, [pc, #180]	@ (800e7d8 <imu_ahrs_update+0x888>)
 800e724:	edd3 7a00 	vldr	s15, [r3]
 800e728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e72c:	edc7 7a00 	vstr	s15, [r7]

    /*将四元数标准化 */
    norm = inv_sqrt(tempq0 * tempq0 + tempq1 * tempq1 + tempq2 * tempq2 + tempq3 * tempq3);
 800e730:	edd7 7a03 	vldr	s15, [r7, #12]
 800e734:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800e738:	edd7 7a02 	vldr	s15, [r7, #8]
 800e73c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e740:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e744:	edd7 7a01 	vldr	s15, [r7, #4]
 800e748:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e74c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e750:	edd7 7a00 	vldr	s15, [r7]
 800e754:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e75c:	eeb0 0a67 	vmov.f32	s0, s15
 800e760:	f7fe ffb4 	bl	800d6cc <inv_sqrt>
 800e764:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    q0 = tempq0 * norm;
 800e768:	ed97 7a03 	vldr	s14, [r7, #12]
 800e76c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800e770:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e774:	4b19      	ldr	r3, [pc, #100]	@ (800e7dc <imu_ahrs_update+0x88c>)
 800e776:	edc3 7a00 	vstr	s15, [r3]
    q1 = tempq1 * norm;
 800e77a:	ed97 7a02 	vldr	s14, [r7, #8]
 800e77e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800e782:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e786:	4b12      	ldr	r3, [pc, #72]	@ (800e7d0 <imu_ahrs_update+0x880>)
 800e788:	edc3 7a00 	vstr	s15, [r3]
    q2 = tempq2 * norm;
 800e78c:	ed97 7a01 	vldr	s14, [r7, #4]
 800e790:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800e794:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e798:	e022      	b.n	800e7e0 <imu_ahrs_update+0x890>
 800e79a:	bf00      	nop
 800e79c:	20000cbc 	.word	0x20000cbc
 800e7a0:	20000cc0 	.word	0x20000cc0
 800e7a4:	20000cc8 	.word	0x20000cc8
 800e7a8:	20000ccc 	.word	0x20000ccc
 800e7ac:	20000cb8 	.word	0x20000cb8
 800e7b0:	20000cc4 	.word	0x20000cc4
 800e7b4:	3c23d70a 	.word	0x3c23d70a
 800e7b8:	20000c38 	.word	0x20000c38
 800e7bc:	20000c3c 	.word	0x20000c3c
 800e7c0:	20000c40 	.word	0x20000c40
 800e7c4:	20000cac 	.word	0x20000cac
 800e7c8:	20000cb0 	.word	0x20000cb0
 800e7cc:	20000cb4 	.word	0x20000cb4
 800e7d0:	20000c2c 	.word	0x20000c2c
 800e7d4:	20000c30 	.word	0x20000c30
 800e7d8:	20000c34 	.word	0x20000c34
 800e7dc:	200000bc 	.word	0x200000bc
 800e7e0:	4b07      	ldr	r3, [pc, #28]	@ (800e800 <imu_ahrs_update+0x8b0>)
 800e7e2:	edc3 7a00 	vstr	s15, [r3]
    q3 = tempq3 * norm;
 800e7e6:	ed97 7a00 	vldr	s14, [r7]
 800e7ea:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800e7ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7f2:	4b04      	ldr	r3, [pc, #16]	@ (800e804 <imu_ahrs_update+0x8b4>)
 800e7f4:	edc3 7a00 	vstr	s15, [r3]
}
 800e7f8:	bf00      	nop
 800e7fa:	3778      	adds	r7, #120	@ 0x78
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}
 800e800:	20000c30 	.word	0x20000c30
 800e804:	20000c34 	.word	0x20000c34

0800e808 <imu_attitude_update>:

// 更新imu的态度
void imu_attitude_update(void)
{
 800e808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e80c:	af00      	add	r7, sp, #0
    /* yaw    -pi----pi */
    imu.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3, -2 * q2 * q2 - 2 * q3 * q3 + 1) * 57.3;
 800e80e:	4b76      	ldr	r3, [pc, #472]	@ (800e9e8 <imu_attitude_update+0x1e0>)
 800e810:	edd3 7a00 	vldr	s15, [r3]
 800e814:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e818:	4b74      	ldr	r3, [pc, #464]	@ (800e9ec <imu_attitude_update+0x1e4>)
 800e81a:	edd3 7a00 	vldr	s15, [r3]
 800e81e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e822:	4b73      	ldr	r3, [pc, #460]	@ (800e9f0 <imu_attitude_update+0x1e8>)
 800e824:	edd3 7a00 	vldr	s15, [r3]
 800e828:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e82c:	4b71      	ldr	r3, [pc, #452]	@ (800e9f4 <imu_attitude_update+0x1ec>)
 800e82e:	edd3 7a00 	vldr	s15, [r3]
 800e832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e83a:	ee17 0a90 	vmov	r0, s15
 800e83e:	f7f1 feab 	bl	8000598 <__aeabi_f2d>
 800e842:	4682      	mov	sl, r0
 800e844:	468b      	mov	fp, r1
 800e846:	4b69      	ldr	r3, [pc, #420]	@ (800e9ec <imu_attitude_update+0x1e4>)
 800e848:	edd3 7a00 	vldr	s15, [r3]
 800e84c:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800e850:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e854:	4b65      	ldr	r3, [pc, #404]	@ (800e9ec <imu_attitude_update+0x1e4>)
 800e856:	edd3 7a00 	vldr	s15, [r3]
 800e85a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e85e:	4b65      	ldr	r3, [pc, #404]	@ (800e9f4 <imu_attitude_update+0x1ec>)
 800e860:	edd3 7a00 	vldr	s15, [r3]
 800e864:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e868:	4b62      	ldr	r3, [pc, #392]	@ (800e9f4 <imu_attitude_update+0x1ec>)
 800e86a:	edd3 7a00 	vldr	s15, [r3]
 800e86e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e872:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e876:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e87a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e87e:	ee17 0a90 	vmov	r0, s15
 800e882:	f7f1 fe89 	bl	8000598 <__aeabi_f2d>
 800e886:	4602      	mov	r2, r0
 800e888:	460b      	mov	r3, r1
 800e88a:	ec43 2b11 	vmov	d1, r2, r3
 800e88e:	ec4b ab10 	vmov	d0, sl, fp
 800e892:	f004 ffcf 	bl	8013834 <atan2>
 800e896:	ec53 2b10 	vmov	r2, r3, d0
 800e89a:	4690      	mov	r8, r2
 800e89c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800e8a0:	a34f      	add	r3, pc, #316	@ (adr r3, 800e9e0 <imu_attitude_update+0x1d8>)
 800e8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a6:	4640      	mov	r0, r8
 800e8a8:	4649      	mov	r1, r9
 800e8aa:	f7f1 fecd 	bl	8000648 <__aeabi_dmul>
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	460b      	mov	r3, r1
 800e8b2:	4610      	mov	r0, r2
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	f7f2 f9bf 	bl	8000c38 <__aeabi_d2f>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	4a4e      	ldr	r2, [pc, #312]	@ (800e9f8 <imu_attitude_update+0x1f0>)
 800e8be:	6313      	str	r3, [r2, #48]	@ 0x30
    /* pitch  -pi/2----pi/2 */
    imu.pit = -asin(-2 * q1 * q3 + 2 * q0 * q2) * 57.3;
 800e8c0:	4b49      	ldr	r3, [pc, #292]	@ (800e9e8 <imu_attitude_update+0x1e0>)
 800e8c2:	edd3 7a00 	vldr	s15, [r3]
 800e8c6:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800e8ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e8ce:	4b49      	ldr	r3, [pc, #292]	@ (800e9f4 <imu_attitude_update+0x1ec>)
 800e8d0:	edd3 7a00 	vldr	s15, [r3]
 800e8d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e8d8:	4b45      	ldr	r3, [pc, #276]	@ (800e9f0 <imu_attitude_update+0x1e8>)
 800e8da:	edd3 7a00 	vldr	s15, [r3]
 800e8de:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e8e2:	4b42      	ldr	r3, [pc, #264]	@ (800e9ec <imu_attitude_update+0x1e4>)
 800e8e4:	edd3 7a00 	vldr	s15, [r3]
 800e8e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e8ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e8f0:	ee17 0a90 	vmov	r0, s15
 800e8f4:	f7f1 fe50 	bl	8000598 <__aeabi_f2d>
 800e8f8:	4602      	mov	r2, r0
 800e8fa:	460b      	mov	r3, r1
 800e8fc:	ec43 2b10 	vmov	d0, r2, r3
 800e900:	f004 ff64 	bl	80137cc <asin>
 800e904:	ec53 2b10 	vmov	r2, r3, d0
 800e908:	4614      	mov	r4, r2
 800e90a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800e90e:	a334      	add	r3, pc, #208	@ (adr r3, 800e9e0 <imu_attitude_update+0x1d8>)
 800e910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e914:	4620      	mov	r0, r4
 800e916:	4629      	mov	r1, r5
 800e918:	f7f1 fe96 	bl	8000648 <__aeabi_dmul>
 800e91c:	4602      	mov	r2, r0
 800e91e:	460b      	mov	r3, r1
 800e920:	4610      	mov	r0, r2
 800e922:	4619      	mov	r1, r3
 800e924:	f7f2 f988 	bl	8000c38 <__aeabi_d2f>
 800e928:	4603      	mov	r3, r0
 800e92a:	4a33      	ldr	r2, [pc, #204]	@ (800e9f8 <imu_attitude_update+0x1f0>)
 800e92c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    /* roll   -pi----pi  */
    imu.rol = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2 * q2 + 1) * 57.3;
 800e92e:	4b2f      	ldr	r3, [pc, #188]	@ (800e9ec <imu_attitude_update+0x1e4>)
 800e930:	edd3 7a00 	vldr	s15, [r3]
 800e934:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e938:	4b2e      	ldr	r3, [pc, #184]	@ (800e9f4 <imu_attitude_update+0x1ec>)
 800e93a:	edd3 7a00 	vldr	s15, [r3]
 800e93e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e942:	4b2b      	ldr	r3, [pc, #172]	@ (800e9f0 <imu_attitude_update+0x1e8>)
 800e944:	edd3 7a00 	vldr	s15, [r3]
 800e948:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e94c:	4b26      	ldr	r3, [pc, #152]	@ (800e9e8 <imu_attitude_update+0x1e0>)
 800e94e:	edd3 7a00 	vldr	s15, [r3]
 800e952:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e95a:	ee17 0a90 	vmov	r0, s15
 800e95e:	f7f1 fe1b 	bl	8000598 <__aeabi_f2d>
 800e962:	4604      	mov	r4, r0
 800e964:	460d      	mov	r5, r1
 800e966:	4b20      	ldr	r3, [pc, #128]	@ (800e9e8 <imu_attitude_update+0x1e0>)
 800e968:	edd3 7a00 	vldr	s15, [r3]
 800e96c:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800e970:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e974:	4b1c      	ldr	r3, [pc, #112]	@ (800e9e8 <imu_attitude_update+0x1e0>)
 800e976:	edd3 7a00 	vldr	s15, [r3]
 800e97a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e97e:	4b1b      	ldr	r3, [pc, #108]	@ (800e9ec <imu_attitude_update+0x1e4>)
 800e980:	edd3 7a00 	vldr	s15, [r3]
 800e984:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e988:	4b18      	ldr	r3, [pc, #96]	@ (800e9ec <imu_attitude_update+0x1e4>)
 800e98a:	edd3 7a00 	vldr	s15, [r3]
 800e98e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e992:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e996:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e99a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e99e:	ee17 0a90 	vmov	r0, s15
 800e9a2:	f7f1 fdf9 	bl	8000598 <__aeabi_f2d>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	ec43 2b11 	vmov	d1, r2, r3
 800e9ae:	ec45 4b10 	vmov	d0, r4, r5
 800e9b2:	f004 ff3f 	bl	8013834 <atan2>
 800e9b6:	ec51 0b10 	vmov	r0, r1, d0
 800e9ba:	a309      	add	r3, pc, #36	@ (adr r3, 800e9e0 <imu_attitude_update+0x1d8>)
 800e9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c0:	f7f1 fe42 	bl	8000648 <__aeabi_dmul>
 800e9c4:	4602      	mov	r2, r0
 800e9c6:	460b      	mov	r3, r1
 800e9c8:	4610      	mov	r0, r2
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	f7f2 f934 	bl	8000c38 <__aeabi_d2f>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	4a09      	ldr	r2, [pc, #36]	@ (800e9f8 <imu_attitude_update+0x1f0>)
 800e9d4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800e9d6:	bf00      	nop
 800e9d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e9dc:	f3af 8000 	nop.w
 800e9e0:	66666666 	.word	0x66666666
 800e9e4:	404ca666 	.word	0x404ca666
 800e9e8:	20000c2c 	.word	0x20000c2c
 800e9ec:	20000c30 	.word	0x20000c30
 800e9f0:	200000bc 	.word	0x200000bc
 800e9f4:	20000c34 	.word	0x20000c34
 800e9f8:	20000c74 	.word	0x20000c74

0800e9fc <_1_MT6701_GetRawData>:
#include "focLib.h"
#include "time_utils.h"
// static unsigned int rotationCount, rotationCount_Last;

uint16_t _1_MT6701_GetRawData(void)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b084      	sub	sp, #16
 800ea00:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800ea02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ea06:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800ea08:	23c8      	movs	r3, #200	@ 0xc8
 800ea0a:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800ea0c:	e009      	b.n	800ea22 <_1_MT6701_GetRawData+0x26>
    {
        if (timeOut-- == 0)
 800ea0e:	88fb      	ldrh	r3, [r7, #6]
 800ea10:	1e5a      	subs	r2, r3, #1
 800ea12:	80fa      	strh	r2, [r7, #6]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d104      	bne.n	800ea22 <_1_MT6701_GetRawData+0x26>
        {
            printLog("SPI state error!\r\n");
 800ea18:	4819      	ldr	r0, [pc, #100]	@ (800ea80 <_1_MT6701_GetRawData+0x84>)
 800ea1a:	f7fe faa5 	bl	800cf68 <printLog>
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800ea1e:	2300      	movs	r3, #0
 800ea20:	e02a      	b.n	800ea78 <_1_MT6701_GetRawData+0x7c>
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800ea22:	4818      	ldr	r0, [pc, #96]	@ (800ea84 <_1_MT6701_GetRawData+0x88>)
 800ea24:	f7f9 f943 	bl	8007cae <HAL_SPI_GetState>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b01      	cmp	r3, #1
 800ea2c:	d1ef      	bne.n	800ea0e <_1_MT6701_GetRawData+0x12>
        }
    }

    _1_MT6701_CS_Enable;
 800ea2e:	2200      	movs	r2, #0
 800ea30:	2108      	movs	r1, #8
 800ea32:	4815      	ldr	r0, [pc, #84]	@ (800ea88 <_1_MT6701_GetRawData+0x8c>)
 800ea34:	f7f7 fe84 	bl	8006740 <HAL_GPIO_WritePin>

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800ea38:	1cba      	adds	r2, r7, #2
 800ea3a:	4639      	mov	r1, r7
 800ea3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea40:	9300      	str	r3, [sp, #0]
 800ea42:	2301      	movs	r3, #1
 800ea44:	480f      	ldr	r0, [pc, #60]	@ (800ea84 <_1_MT6701_GetRawData+0x88>)
 800ea46:	f7f8 ff10 	bl	800786a <HAL_SPI_TransmitReceive>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800ea4e:	797b      	ldrb	r3, [r7, #5]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d009      	beq.n	800ea68 <_1_MT6701_GetRawData+0x6c>
    {
        _1_MT6701_CS_Disable;
 800ea54:	2201      	movs	r2, #1
 800ea56:	2108      	movs	r1, #8
 800ea58:	480b      	ldr	r0, [pc, #44]	@ (800ea88 <_1_MT6701_GetRawData+0x8c>)
 800ea5a:	f7f7 fe71 	bl	8006740 <HAL_GPIO_WritePin>
        printLog("MT6701 read data error!\r\n");
 800ea5e:	480b      	ldr	r0, [pc, #44]	@ (800ea8c <_1_MT6701_GetRawData+0x90>)
 800ea60:	f7fe fa82 	bl	800cf68 <printLog>
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800ea64:	2300      	movs	r3, #0
 800ea66:	e007      	b.n	800ea78 <_1_MT6701_GetRawData+0x7c>
    }

    _1_MT6701_CS_Disable;
 800ea68:	2201      	movs	r2, #1
 800ea6a:	2108      	movs	r1, #8
 800ea6c:	4806      	ldr	r0, [pc, #24]	@ (800ea88 <_1_MT6701_GetRawData+0x8c>)
 800ea6e:	f7f7 fe67 	bl	8006740 <HAL_GPIO_WritePin>

    return rawData >> 2; // 取高14位的角度数据
 800ea72:	887b      	ldrh	r3, [r7, #2]
 800ea74:	089b      	lsrs	r3, r3, #2
 800ea76:	b29b      	uxth	r3, r3
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3708      	adds	r7, #8
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	080146e0 	.word	0x080146e0
 800ea84:	20000460 	.word	0x20000460
 800ea88:	48000400 	.word	0x48000400
 800ea8c:	080146f4 	.word	0x080146f4

0800ea90 <_1_MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float _1_MT6701_GetRawAngle(void)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b082      	sub	sp, #8
 800ea94:	af00      	add	r7, sp, #0
    uint16_t rawData = _1_MT6701_GetRawData();
 800ea96:	f7ff ffb1 	bl	800e9fc <_1_MT6701_GetRawData>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800ea9e:	88fb      	ldrh	r3, [r7, #6]
 800eaa0:	ee07 3a90 	vmov	s15, r3
 800eaa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800eaa8:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800eac4 <_1_MT6701_GetRawAngle+0x34>
 800eaac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800eab0:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800eac8 <_1_MT6701_GetRawAngle+0x38>
 800eab4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800eab8:	eeb0 0a67 	vmov.f32	s0, s15
 800eabc:	3708      	adds	r7, #8
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	46800000 	.word	0x46800000
 800eac8:	40c90fdb 	.word	0x40c90fdb

0800eacc <_2_MT6701_GetRawData>:

uint16_t _2_MT6701_GetRawData(void)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800ead2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ead6:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800ead8:	23c8      	movs	r3, #200	@ 0xc8
 800eada:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800eadc:	e009      	b.n	800eaf2 <_2_MT6701_GetRawData+0x26>
    {
        if (timeOut-- == 0)
 800eade:	88fb      	ldrh	r3, [r7, #6]
 800eae0:	1e5a      	subs	r2, r3, #1
 800eae2:	80fa      	strh	r2, [r7, #6]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d104      	bne.n	800eaf2 <_2_MT6701_GetRawData+0x26>
        {
            printLog("SPI state error!\r\n");
 800eae8:	4819      	ldr	r0, [pc, #100]	@ (800eb50 <_2_MT6701_GetRawData+0x84>)
 800eaea:	f7fe fa3d 	bl	800cf68 <printLog>
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800eaee:	2300      	movs	r3, #0
 800eaf0:	e02a      	b.n	800eb48 <_2_MT6701_GetRawData+0x7c>
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800eaf2:	4818      	ldr	r0, [pc, #96]	@ (800eb54 <_2_MT6701_GetRawData+0x88>)
 800eaf4:	f7f9 f8db 	bl	8007cae <HAL_SPI_GetState>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	2b01      	cmp	r3, #1
 800eafc:	d1ef      	bne.n	800eade <_2_MT6701_GetRawData+0x12>
        }
    }

    _2_MT6701_CS_Enable;
 800eafe:	2200      	movs	r2, #0
 800eb00:	2110      	movs	r1, #16
 800eb02:	4815      	ldr	r0, [pc, #84]	@ (800eb58 <_2_MT6701_GetRawData+0x8c>)
 800eb04:	f7f7 fe1c 	bl	8006740 <HAL_GPIO_WritePin>

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800eb08:	1cba      	adds	r2, r7, #2
 800eb0a:	4639      	mov	r1, r7
 800eb0c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb10:	9300      	str	r3, [sp, #0]
 800eb12:	2301      	movs	r3, #1
 800eb14:	480f      	ldr	r0, [pc, #60]	@ (800eb54 <_2_MT6701_GetRawData+0x88>)
 800eb16:	f7f8 fea8 	bl	800786a <HAL_SPI_TransmitReceive>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800eb1e:	797b      	ldrb	r3, [r7, #5]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d009      	beq.n	800eb38 <_2_MT6701_GetRawData+0x6c>
    {
        _2_MT6701_CS_Disable;
 800eb24:	2201      	movs	r2, #1
 800eb26:	2110      	movs	r1, #16
 800eb28:	480b      	ldr	r0, [pc, #44]	@ (800eb58 <_2_MT6701_GetRawData+0x8c>)
 800eb2a:	f7f7 fe09 	bl	8006740 <HAL_GPIO_WritePin>
        printLog("MT6701 read data error!\r\n");
 800eb2e:	480b      	ldr	r0, [pc, #44]	@ (800eb5c <_2_MT6701_GetRawData+0x90>)
 800eb30:	f7fe fa1a 	bl	800cf68 <printLog>
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800eb34:	2300      	movs	r3, #0
 800eb36:	e007      	b.n	800eb48 <_2_MT6701_GetRawData+0x7c>
    }

    _2_MT6701_CS_Disable;
 800eb38:	2201      	movs	r2, #1
 800eb3a:	2110      	movs	r1, #16
 800eb3c:	4806      	ldr	r0, [pc, #24]	@ (800eb58 <_2_MT6701_GetRawData+0x8c>)
 800eb3e:	f7f7 fdff 	bl	8006740 <HAL_GPIO_WritePin>

    return rawData >> 2; // 取高14位的角度数据
 800eb42:	887b      	ldrh	r3, [r7, #2]
 800eb44:	089b      	lsrs	r3, r3, #2
 800eb46:	b29b      	uxth	r3, r3
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3708      	adds	r7, #8
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}
 800eb50:	080146e0 	.word	0x080146e0
 800eb54:	20000460 	.word	0x20000460
 800eb58:	48000800 	.word	0x48000800
 800eb5c:	080146f4 	.word	0x080146f4

0800eb60 <_2_MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float _2_MT6701_GetRawAngle(void)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b082      	sub	sp, #8
 800eb64:	af00      	add	r7, sp, #0
    uint16_t rawData = _2_MT6701_GetRawData();
 800eb66:	f7ff ffb1 	bl	800eacc <_2_MT6701_GetRawData>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800eb6e:	88fb      	ldrh	r3, [r7, #6]
 800eb70:	ee07 3a90 	vmov	s15, r3
 800eb74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800eb78:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800eb94 <_2_MT6701_GetRawAngle+0x34>
 800eb7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800eb80:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800eb98 <_2_MT6701_GetRawAngle+0x38>
 800eb84:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800eb88:	eeb0 0a67 	vmov.f32	s0, s15
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	46800000 	.word	0x46800000
 800eb98:	40c90fdb 	.word	0x40c90fdb

0800eb9c <startPwm1>:
#include "pwm.h"

 void startPwm1()
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800eba0:	2100      	movs	r1, #0
 800eba2:	4806      	ldr	r0, [pc, #24]	@ (800ebbc <startPwm1+0x20>)
 800eba4:	f7f9 fb12 	bl	80081cc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800eba8:	2104      	movs	r1, #4
 800ebaa:	4804      	ldr	r0, [pc, #16]	@ (800ebbc <startPwm1+0x20>)
 800ebac:	f7f9 fb0e 	bl	80081cc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800ebb0:	2108      	movs	r1, #8
 800ebb2:	4802      	ldr	r0, [pc, #8]	@ (800ebbc <startPwm1+0x20>)
 800ebb4:	f7f9 fb0a 	bl	80081cc <HAL_TIM_PWM_Start>

}
 800ebb8:	bf00      	nop
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	20000514 	.word	0x20000514

0800ebc0 <stopPwm1>:
 void stopPwm1()
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800ebc4:	2100      	movs	r1, #0
 800ebc6:	4806      	ldr	r0, [pc, #24]	@ (800ebe0 <stopPwm1+0x20>)
 800ebc8:	f7f9 fc00 	bl	80083cc <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 800ebcc:	2104      	movs	r1, #4
 800ebce:	4804      	ldr	r0, [pc, #16]	@ (800ebe0 <stopPwm1+0x20>)
 800ebd0:	f7f9 fbfc 	bl	80083cc <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 800ebd4:	2108      	movs	r1, #8
 800ebd6:	4802      	ldr	r0, [pc, #8]	@ (800ebe0 <stopPwm1+0x20>)
 800ebd8:	f7f9 fbf8 	bl	80083cc <HAL_TIM_PWM_Stop>

}
 800ebdc:	bf00      	nop
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	20000514 	.word	0x20000514

0800ebe4 <updatePwm1>:
 void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	4603      	mov	r3, r0
 800ebec:	80fb      	strh	r3, [r7, #6]
 800ebee:	460b      	mov	r3, r1
 800ebf0:	80bb      	strh	r3, [r7, #4]
 800ebf2:	4613      	mov	r3, r2
 800ebf4:	807b      	strh	r3, [r7, #2]
    TIM8->CCR1 = a;
 800ebf6:	4a07      	ldr	r2, [pc, #28]	@ (800ec14 <updatePwm1+0x30>)
 800ebf8:	88fb      	ldrh	r3, [r7, #6]
 800ebfa:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM8->CCR2 = b;
 800ebfc:	4a05      	ldr	r2, [pc, #20]	@ (800ec14 <updatePwm1+0x30>)
 800ebfe:	88bb      	ldrh	r3, [r7, #4]
 800ec00:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM8->CCR3 = c;
 800ec02:	4a04      	ldr	r2, [pc, #16]	@ (800ec14 <updatePwm1+0x30>)
 800ec04:	887b      	ldrh	r3, [r7, #2]
 800ec06:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800ec08:	bf00      	nop
 800ec0a:	370c      	adds	r7, #12
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec12:	4770      	bx	lr
 800ec14:	40013400 	.word	0x40013400

0800ec18 <startPwm2>:

 void startPwm2()
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800ec1c:	2100      	movs	r1, #0
 800ec1e:	4806      	ldr	r0, [pc, #24]	@ (800ec38 <startPwm2+0x20>)
 800ec20:	f7f9 fad4 	bl	80081cc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800ec24:	2104      	movs	r1, #4
 800ec26:	4804      	ldr	r0, [pc, #16]	@ (800ec38 <startPwm2+0x20>)
 800ec28:	f7f9 fad0 	bl	80081cc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800ec2c:	2108      	movs	r1, #8
 800ec2e:	4802      	ldr	r0, [pc, #8]	@ (800ec38 <startPwm2+0x20>)
 800ec30:	f7f9 facc 	bl	80081cc <HAL_TIM_PWM_Start>
 
}
 800ec34:	bf00      	nop
 800ec36:	bd80      	pop	{r7, pc}
 800ec38:	200004c8 	.word	0x200004c8

0800ec3c <stopPwm2>:
 void stopPwm2()
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800ec40:	2100      	movs	r1, #0
 800ec42:	4806      	ldr	r0, [pc, #24]	@ (800ec5c <stopPwm2+0x20>)
 800ec44:	f7f9 fbc2 	bl	80083cc <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800ec48:	2104      	movs	r1, #4
 800ec4a:	4804      	ldr	r0, [pc, #16]	@ (800ec5c <stopPwm2+0x20>)
 800ec4c:	f7f9 fbbe 	bl	80083cc <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800ec50:	2108      	movs	r1, #8
 800ec52:	4802      	ldr	r0, [pc, #8]	@ (800ec5c <stopPwm2+0x20>)
 800ec54:	f7f9 fbba 	bl	80083cc <HAL_TIM_PWM_Stop>
 
}
 800ec58:	bf00      	nop
 800ec5a:	bd80      	pop	{r7, pc}
 800ec5c:	200004c8 	.word	0x200004c8

0800ec60 <updatePwm2>:

 void updatePwm2(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800ec60:	b480      	push	{r7}
 800ec62:	b083      	sub	sp, #12
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	4603      	mov	r3, r0
 800ec68:	80fb      	strh	r3, [r7, #6]
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	80bb      	strh	r3, [r7, #4]
 800ec6e:	4613      	mov	r3, r2
 800ec70:	807b      	strh	r3, [r7, #2]
    TIM1->CCR1 = c;
 800ec72:	4a07      	ldr	r2, [pc, #28]	@ (800ec90 <updatePwm2+0x30>)
 800ec74:	887b      	ldrh	r3, [r7, #2]
 800ec76:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = b;
 800ec78:	4a05      	ldr	r2, [pc, #20]	@ (800ec90 <updatePwm2+0x30>)
 800ec7a:	88bb      	ldrh	r3, [r7, #4]
 800ec7c:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = a;
 800ec7e:	4a04      	ldr	r2, [pc, #16]	@ (800ec90 <updatePwm2+0x30>)
 800ec80:	88fb      	ldrh	r3, [r7, #6]
 800ec82:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800ec84:	bf00      	nop
 800ec86:	370c      	adds	r7, #12
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr
 800ec90:	40012c00 	.word	0x40012c00

0800ec94 <delay>:
#include "time_utils.h"

__IO uint32_t m, tms, u, t0;

void delay(uint32_t _ms)
{
 800ec94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ec98:	b082      	sub	sp, #8
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
    t0 = micros();
 800ec9e:	f000 f83b 	bl	800ed18 <micros>
 800eca2:	4602      	mov	r2, r0
 800eca4:	460b      	mov	r3, r1
 800eca6:	4b11      	ldr	r3, [pc, #68]	@ (800ecec <delay+0x58>)
 800eca8:	601a      	str	r2, [r3, #0]
    while (micros() - t0 < _ms * 1000)
 800ecaa:	e000      	b.n	800ecae <delay+0x1a>
        __NOP();
 800ecac:	bf00      	nop
    while (micros() - t0 < _ms * 1000)
 800ecae:	f000 f833 	bl	800ed18 <micros>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	490d      	ldr	r1, [pc, #52]	@ (800ecec <delay+0x58>)
 800ecb8:	6809      	ldr	r1, [r1, #0]
 800ecba:	2000      	movs	r0, #0
 800ecbc:	468a      	mov	sl, r1
 800ecbe:	4683      	mov	fp, r0
 800ecc0:	ebb2 040a 	subs.w	r4, r2, sl
 800ecc4:	eb63 050b 	sbc.w	r5, r3, fp
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ecce:	fb02 f303 	mul.w	r3, r2, r3
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	4698      	mov	r8, r3
 800ecd6:	4691      	mov	r9, r2
 800ecd8:	4544      	cmp	r4, r8
 800ecda:	eb75 0309 	sbcs.w	r3, r5, r9
 800ecde:	d3e5      	bcc.n	800ecac <delay+0x18>
}
 800ece0:	bf00      	nop
 800ece2:	bf00      	nop
 800ece4:	3708      	adds	r7, #8
 800ece6:	46bd      	mov	sp, r7
 800ece8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ecec:	20000ce4 	.word	0x20000ce4

0800ecf0 <LL_SYSTICK_IsActiveCounterFlag>:
    while (_us--)
        __NOP();
}

__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag()
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	af00      	add	r7, sp, #0
    return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800ecf4:	4b07      	ldr	r3, [pc, #28]	@ (800ed14 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ecfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ed00:	bf0c      	ite	eq
 800ed02:	2301      	moveq	r3, #1
 800ed04:	2300      	movne	r3, #0
 800ed06:	b2db      	uxtb	r3, r3
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr
 800ed12:	bf00      	nop
 800ed14:	e000e010 	.word	0xe000e010

0800ed18 <micros>:

uint64_t micros()
{
 800ed18:	b5b0      	push	{r4, r5, r7, lr}
 800ed1a:	af00      	add	r7, sp, #0
    /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
    LL_SYSTICK_IsActiveCounterFlag();
 800ed1c:	f7ff ffe8 	bl	800ecf0 <LL_SYSTICK_IsActiveCounterFlag>
    m = HAL_GetTick();
 800ed20:	f7f3 fe3c 	bl	800299c <HAL_GetTick>
 800ed24:	4603      	mov	r3, r0
 800ed26:	4a1c      	ldr	r2, [pc, #112]	@ (800ed98 <micros+0x80>)
 800ed28:	6013      	str	r3, [r2, #0]
    tms = SysTick->LOAD + 1;
 800ed2a:	4b1c      	ldr	r3, [pc, #112]	@ (800ed9c <micros+0x84>)
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	3301      	adds	r3, #1
 800ed30:	4a1b      	ldr	r2, [pc, #108]	@ (800eda0 <micros+0x88>)
 800ed32:	6013      	str	r3, [r2, #0]
    u = tms - SysTick->VAL;
 800ed34:	4b1a      	ldr	r3, [pc, #104]	@ (800eda0 <micros+0x88>)
 800ed36:	681a      	ldr	r2, [r3, #0]
 800ed38:	4b18      	ldr	r3, [pc, #96]	@ (800ed9c <micros+0x84>)
 800ed3a:	689b      	ldr	r3, [r3, #8]
 800ed3c:	1ad3      	subs	r3, r2, r3
 800ed3e:	4a19      	ldr	r2, [pc, #100]	@ (800eda4 <micros+0x8c>)
 800ed40:	6013      	str	r3, [r2, #0]
    if (LL_SYSTICK_IsActiveCounterFlag())
 800ed42:	f7ff ffd5 	bl	800ecf0 <LL_SYSTICK_IsActiveCounterFlag>
 800ed46:	4603      	mov	r3, r0
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d00b      	beq.n	800ed64 <micros+0x4c>
    {
        m = HAL_GetTick();
 800ed4c:	f7f3 fe26 	bl	800299c <HAL_GetTick>
 800ed50:	4603      	mov	r3, r0
 800ed52:	4a11      	ldr	r2, [pc, #68]	@ (800ed98 <micros+0x80>)
 800ed54:	6013      	str	r3, [r2, #0]
        u = tms - SysTick->VAL;
 800ed56:	4b12      	ldr	r3, [pc, #72]	@ (800eda0 <micros+0x88>)
 800ed58:	681a      	ldr	r2, [r3, #0]
 800ed5a:	4b10      	ldr	r3, [pc, #64]	@ (800ed9c <micros+0x84>)
 800ed5c:	689b      	ldr	r3, [r3, #8]
 800ed5e:	1ad3      	subs	r3, r2, r3
 800ed60:	4a10      	ldr	r2, [pc, #64]	@ (800eda4 <micros+0x8c>)
 800ed62:	6013      	str	r3, [r2, #0]
    }
    return (m * 1000 + (u * 1000) / tms);
 800ed64:	4b0c      	ldr	r3, [pc, #48]	@ (800ed98 <micros+0x80>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ed6c:	fb03 f202 	mul.w	r2, r3, r2
 800ed70:	4b0c      	ldr	r3, [pc, #48]	@ (800eda4 <micros+0x8c>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ed78:	fb03 f101 	mul.w	r1, r3, r1
 800ed7c:	4b08      	ldr	r3, [pc, #32]	@ (800eda0 <micros+0x88>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	fbb1 f3f3 	udiv	r3, r1, r3
 800ed84:	4413      	add	r3, r2
 800ed86:	2200      	movs	r2, #0
 800ed88:	461c      	mov	r4, r3
 800ed8a:	4615      	mov	r5, r2
 800ed8c:	4622      	mov	r2, r4
 800ed8e:	462b      	mov	r3, r5
}
 800ed90:	4610      	mov	r0, r2
 800ed92:	4619      	mov	r1, r3
 800ed94:	bdb0      	pop	{r4, r5, r7, pc}
 800ed96:	bf00      	nop
 800ed98:	20000cd8 	.word	0x20000cd8
 800ed9c:	e000e010 	.word	0xe000e010
 800eda0:	20000cdc 	.word	0x20000cdc
 800eda4:	20000ce0 	.word	0x20000ce0

0800eda8 <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
// static bool powerLost;
void userMain(void)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	af00      	add	r7, sp, #0

	if (get5MsFlag())
 800edac:	f000 f94c 	bl	800f048 <get5MsFlag>
 800edb0:	4603      	mov	r3, r0
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d001      	beq.n	800edba <userMain+0x12>
	{
		keyScan();
 800edb6:	f7fe fab3 	bl	800d320 <keyScan>
	}
	if (getOneMsFlag())
 800edba:	f000 f931 	bl	800f020 <getOneMsFlag>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d017      	beq.n	800edf4 <userMain+0x4c>
	{
		static bool imuInited;

		if (imuInited == false)
 800edc4:	4b10      	ldr	r3, [pc, #64]	@ (800ee08 <userMain+0x60>)
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d10d      	bne.n	800ede8 <userMain+0x40>
		{
			if (IMU_Init() == 0)
 800edcc:	f7fe ff26 	bl	800dc1c <IMU_Init>
 800edd0:	4603      	mov	r3, r0
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d10e      	bne.n	800edf4 <userMain+0x4c>
			{
				init_quaternion();
 800edd6:	f7fe ff7f 	bl	800dcd8 <init_quaternion>
				imuInited = true;
 800edda:	4b0b      	ldr	r3, [pc, #44]	@ (800ee08 <userMain+0x60>)
 800eddc:	2201      	movs	r2, #1
 800edde:	701a      	strb	r2, [r3, #0]
				printLog("mpu init done\n");
 800ede0:	480a      	ldr	r0, [pc, #40]	@ (800ee0c <userMain+0x64>)
 800ede2:	f7fe f8c1 	bl	800cf68 <printLog>
 800ede6:	e005      	b.n	800edf4 <userMain+0x4c>
			}
		}
		else
		{
			// IMU_handle();
			mpu_get_data();
 800ede8:	f7fe fd76 	bl	800d8d8 <mpu_get_data>
			imu_ahrs_update();
 800edec:	f7ff f8b0 	bl	800df50 <imu_ahrs_update>
			imu_attitude_update();
 800edf0:	f7ff fd0a 	bl	800e808 <imu_attitude_update>
			
		}
	}

	if (get100MsFlag())
 800edf4:	f000 f93c 	bl	800f070 <get100MsFlag>
 800edf8:	4603      	mov	r3, r0
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d001      	beq.n	800ee02 <userMain+0x5a>
	{
		appRunning();
 800edfe:	f7fd fe83 	bl	800cb08 <appRunning>
	if (get500MsFlag())
	{
		uartTx();
	}
#endif
}
 800ee02:	bf00      	nop
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	20000ce8 	.word	0x20000ce8
 800ee0c:	08014710 	.word	0x08014710

0800ee10 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b087      	sub	sp, #28
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	ed87 0a05 	vstr	s0, [r7, #20]
 800ee1a:	edc7 0a04 	vstr	s1, [r7, #16]
 800ee1e:	ed87 1a03 	vstr	s2, [r7, #12]
 800ee22:	edc7 1a02 	vstr	s3, [r7, #8]
 800ee26:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800ee2a:	ed97 7a05 	vldr	s14, [r7, #20]
 800ee2e:	edd7 7a04 	vldr	s15, [r7, #16]
 800ee32:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ee36:	edd7 6a01 	vldr	s13, [r7, #4]
 800ee3a:	edd7 7a02 	vldr	s15, [r7, #8]
 800ee3e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ee42:	ee67 6a27 	vmul.f32	s13, s14, s15
 800ee46:	ed97 7a03 	vldr	s14, [r7, #12]
 800ee4a:	edd7 7a04 	vldr	s15, [r7, #16]
 800ee4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee56:	edd7 7a02 	vldr	s15, [r7, #8]
 800ee5a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800ee5e:	eeb0 0a67 	vmov.f32	s0, s15
 800ee62:	371c      	adds	r7, #28
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr

0800ee6c <dealPer100us>:


static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag, _1s;
static void dealPerMs();
void dealPer100us()
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800ee70:	4b08      	ldr	r3, [pc, #32]	@ (800ee94 <dealPer100us+0x28>)
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	3301      	adds	r3, #1
 800ee76:	b2da      	uxtb	r2, r3
 800ee78:	4b06      	ldr	r3, [pc, #24]	@ (800ee94 <dealPer100us+0x28>)
 800ee7a:	701a      	strb	r2, [r3, #0]
 800ee7c:	4b05      	ldr	r3, [pc, #20]	@ (800ee94 <dealPer100us+0x28>)
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	2b09      	cmp	r3, #9
 800ee82:	d904      	bls.n	800ee8e <dealPer100us+0x22>
    {
        cnt = 0;
 800ee84:	4b03      	ldr	r3, [pc, #12]	@ (800ee94 <dealPer100us+0x28>)
 800ee86:	2200      	movs	r2, #0
 800ee88:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800ee8a:	f000 f805 	bl	800ee98 <dealPerMs>
    }

}
 800ee8e:	bf00      	nop
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	20000cf7 	.word	0x20000cf7

0800ee98 <dealPerMs>:

static void dealPerMs()
{
 800ee98:	b480      	push	{r7}
 800ee9a:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt, _1000msCnt;
    if (++_5msCnt >= 5)
 800ee9c:	4b45      	ldr	r3, [pc, #276]	@ (800efb4 <dealPerMs+0x11c>)
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	3301      	adds	r3, #1
 800eea2:	b2da      	uxtb	r2, r3
 800eea4:	4b43      	ldr	r3, [pc, #268]	@ (800efb4 <dealPerMs+0x11c>)
 800eea6:	701a      	strb	r2, [r3, #0]
 800eea8:	4b42      	ldr	r3, [pc, #264]	@ (800efb4 <dealPerMs+0x11c>)
 800eeaa:	781b      	ldrb	r3, [r3, #0]
 800eeac:	2b04      	cmp	r3, #4
 800eeae:	d905      	bls.n	800eebc <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800eeb0:	4b40      	ldr	r3, [pc, #256]	@ (800efb4 <dealPerMs+0x11c>)
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800eeb6:	4b40      	ldr	r3, [pc, #256]	@ (800efb8 <dealPerMs+0x120>)
 800eeb8:	2201      	movs	r2, #1
 800eeba:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800eebc:	4b3f      	ldr	r3, [pc, #252]	@ (800efbc <dealPerMs+0x124>)
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	3301      	adds	r3, #1
 800eec2:	b2da      	uxtb	r2, r3
 800eec4:	4b3d      	ldr	r3, [pc, #244]	@ (800efbc <dealPerMs+0x124>)
 800eec6:	701a      	strb	r2, [r3, #0]
 800eec8:	4b3c      	ldr	r3, [pc, #240]	@ (800efbc <dealPerMs+0x124>)
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	2b09      	cmp	r3, #9
 800eece:	d905      	bls.n	800eedc <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800eed0:	4b3a      	ldr	r3, [pc, #232]	@ (800efbc <dealPerMs+0x124>)
 800eed2:	2200      	movs	r2, #0
 800eed4:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800eed6:	4b3a      	ldr	r3, [pc, #232]	@ (800efc0 <dealPerMs+0x128>)
 800eed8:	2201      	movs	r2, #1
 800eeda:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800eedc:	4b39      	ldr	r3, [pc, #228]	@ (800efc4 <dealPerMs+0x12c>)
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	3301      	adds	r3, #1
 800eee2:	b2da      	uxtb	r2, r3
 800eee4:	4b37      	ldr	r3, [pc, #220]	@ (800efc4 <dealPerMs+0x12c>)
 800eee6:	701a      	strb	r2, [r3, #0]
 800eee8:	4b36      	ldr	r3, [pc, #216]	@ (800efc4 <dealPerMs+0x12c>)
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	2b13      	cmp	r3, #19
 800eeee:	d905      	bls.n	800eefc <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800eef0:	4b34      	ldr	r3, [pc, #208]	@ (800efc4 <dealPerMs+0x12c>)
 800eef2:	2200      	movs	r2, #0
 800eef4:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800eef6:	4b34      	ldr	r3, [pc, #208]	@ (800efc8 <dealPerMs+0x130>)
 800eef8:	2201      	movs	r2, #1
 800eefa:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800eefc:	4b33      	ldr	r3, [pc, #204]	@ (800efcc <dealPerMs+0x134>)
 800eefe:	781b      	ldrb	r3, [r3, #0]
 800ef00:	3301      	adds	r3, #1
 800ef02:	b2da      	uxtb	r2, r3
 800ef04:	4b31      	ldr	r3, [pc, #196]	@ (800efcc <dealPerMs+0x134>)
 800ef06:	701a      	strb	r2, [r3, #0]
 800ef08:	4b30      	ldr	r3, [pc, #192]	@ (800efcc <dealPerMs+0x134>)
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	2b1d      	cmp	r3, #29
 800ef0e:	d905      	bls.n	800ef1c <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800ef10:	4b2e      	ldr	r3, [pc, #184]	@ (800efcc <dealPerMs+0x134>)
 800ef12:	2200      	movs	r2, #0
 800ef14:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800ef16:	4b2e      	ldr	r3, [pc, #184]	@ (800efd0 <dealPerMs+0x138>)
 800ef18:	2201      	movs	r2, #1
 800ef1a:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800ef1c:	4b2d      	ldr	r3, [pc, #180]	@ (800efd4 <dealPerMs+0x13c>)
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	3301      	adds	r3, #1
 800ef22:	b2da      	uxtb	r2, r3
 800ef24:	4b2b      	ldr	r3, [pc, #172]	@ (800efd4 <dealPerMs+0x13c>)
 800ef26:	701a      	strb	r2, [r3, #0]
 800ef28:	4b2a      	ldr	r3, [pc, #168]	@ (800efd4 <dealPerMs+0x13c>)
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	2b63      	cmp	r3, #99	@ 0x63
 800ef2e:	d905      	bls.n	800ef3c <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800ef30:	4b28      	ldr	r3, [pc, #160]	@ (800efd4 <dealPerMs+0x13c>)
 800ef32:	2200      	movs	r2, #0
 800ef34:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800ef36:	4b28      	ldr	r3, [pc, #160]	@ (800efd8 <dealPerMs+0x140>)
 800ef38:	2201      	movs	r2, #1
 800ef3a:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800ef3c:	4b27      	ldr	r3, [pc, #156]	@ (800efdc <dealPerMs+0x144>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	3301      	adds	r3, #1
 800ef42:	4a26      	ldr	r2, [pc, #152]	@ (800efdc <dealPerMs+0x144>)
 800ef44:	6013      	str	r3, [r2, #0]
 800ef46:	4b25      	ldr	r3, [pc, #148]	@ (800efdc <dealPerMs+0x144>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800ef4e:	d305      	bcc.n	800ef5c <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800ef50:	4b22      	ldr	r3, [pc, #136]	@ (800efdc <dealPerMs+0x144>)
 800ef52:	2200      	movs	r2, #0
 800ef54:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800ef56:	4b22      	ldr	r3, [pc, #136]	@ (800efe0 <dealPerMs+0x148>)
 800ef58:	2201      	movs	r2, #1
 800ef5a:	701a      	strb	r2, [r3, #0]
    }
    if (++_1000msCnt >= 1000)
 800ef5c:	4b21      	ldr	r3, [pc, #132]	@ (800efe4 <dealPerMs+0x14c>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	3301      	adds	r3, #1
 800ef62:	4a20      	ldr	r2, [pc, #128]	@ (800efe4 <dealPerMs+0x14c>)
 800ef64:	6013      	str	r3, [r2, #0]
 800ef66:	4b1f      	ldr	r3, [pc, #124]	@ (800efe4 <dealPerMs+0x14c>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ef6e:	d305      	bcc.n	800ef7c <dealPerMs+0xe4>
    {
        _1000msCnt = 0;
 800ef70:	4b1c      	ldr	r3, [pc, #112]	@ (800efe4 <dealPerMs+0x14c>)
 800ef72:	2200      	movs	r2, #0
 800ef74:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800ef76:	4b1c      	ldr	r3, [pc, #112]	@ (800efe8 <dealPerMs+0x150>)
 800ef78:	2201      	movs	r2, #1
 800ef7a:	701a      	strb	r2, [r3, #0]

        cnt = 0;
    }

#else
    frequence = 50;
 800ef7c:	4b1b      	ldr	r3, [pc, #108]	@ (800efec <dealPerMs+0x154>)
 800ef7e:	2232      	movs	r2, #50	@ 0x32
 800ef80:	701a      	strb	r2, [r3, #0]
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
 800ef82:	4b1b      	ldr	r3, [pc, #108]	@ (800eff0 <dealPerMs+0x158>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	3301      	adds	r3, #1
 800ef88:	4a19      	ldr	r2, [pc, #100]	@ (800eff0 <dealPerMs+0x158>)
 800ef8a:	6013      	str	r3, [r2, #0]
 800ef8c:	4b18      	ldr	r3, [pc, #96]	@ (800eff0 <dealPerMs+0x158>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ef94:	d305      	bcc.n	800efa2 <dealPerMs+0x10a>
    {
        _1msCnt = 0;
 800ef96:	4b16      	ldr	r3, [pc, #88]	@ (800eff0 <dealPerMs+0x158>)
 800ef98:	2200      	movs	r2, #0
 800ef9a:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800ef9c:	4b12      	ldr	r3, [pc, #72]	@ (800efe8 <dealPerMs+0x150>)
 800ef9e:	2201      	movs	r2, #1
 800efa0:	701a      	strb	r2, [r3, #0]
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
 800efa2:	4b14      	ldr	r3, [pc, #80]	@ (800eff4 <dealPerMs+0x15c>)
 800efa4:	2201      	movs	r2, #1
 800efa6:	701a      	strb	r2, [r3, #0]

}
 800efa8:	bf00      	nop
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr
 800efb2:	bf00      	nop
 800efb4:	20000cf8 	.word	0x20000cf8
 800efb8:	20000cf1 	.word	0x20000cf1
 800efbc:	20000cf9 	.word	0x20000cf9
 800efc0:	20000cf2 	.word	0x20000cf2
 800efc4:	20000cfa 	.word	0x20000cfa
 800efc8:	20000cf3 	.word	0x20000cf3
 800efcc:	20000cfb 	.word	0x20000cfb
 800efd0:	20000cf4 	.word	0x20000cf4
 800efd4:	20000cfc 	.word	0x20000cfc
 800efd8:	20000cf5 	.word	0x20000cf5
 800efdc:	20000d00 	.word	0x20000d00
 800efe0:	20000cf6 	.word	0x20000cf6
 800efe4:	20000d04 	.word	0x20000d04
 800efe8:	20000ce9 	.word	0x20000ce9
 800efec:	20000cf0 	.word	0x20000cf0
 800eff0:	20000cec 	.word	0x20000cec
 800eff4:	20000cea 	.word	0x20000cea

0800eff8 <getOneSecFlag>:
}



bool getOneSecFlag()
{
 800eff8:	b480      	push	{r7}
 800effa:	af00      	add	r7, sp, #0
    if (_1s)
 800effc:	4b07      	ldr	r3, [pc, #28]	@ (800f01c <getOneSecFlag+0x24>)
 800effe:	781b      	ldrb	r3, [r3, #0]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d004      	beq.n	800f00e <getOneSecFlag+0x16>
    {
        _1s = 0;
 800f004:	4b05      	ldr	r3, [pc, #20]	@ (800f01c <getOneSecFlag+0x24>)
 800f006:	2200      	movs	r2, #0
 800f008:	701a      	strb	r2, [r3, #0]
        return 1;
 800f00a:	2301      	movs	r3, #1
 800f00c:	e000      	b.n	800f010 <getOneSecFlag+0x18>
    }
    else
        return 0;
 800f00e:	2300      	movs	r3, #0
}
 800f010:	4618      	mov	r0, r3
 800f012:	46bd      	mov	sp, r7
 800f014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f018:	4770      	bx	lr
 800f01a:	bf00      	nop
 800f01c:	20000ce9 	.word	0x20000ce9

0800f020 <getOneMsFlag>:

bool getOneMsFlag()
{
 800f020:	b480      	push	{r7}
 800f022:	af00      	add	r7, sp, #0
    if (_1ms)
 800f024:	4b07      	ldr	r3, [pc, #28]	@ (800f044 <getOneMsFlag+0x24>)
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d004      	beq.n	800f036 <getOneMsFlag+0x16>
    {
        _1ms = 0;
 800f02c:	4b05      	ldr	r3, [pc, #20]	@ (800f044 <getOneMsFlag+0x24>)
 800f02e:	2200      	movs	r2, #0
 800f030:	701a      	strb	r2, [r3, #0]
        return 1;
 800f032:	2301      	movs	r3, #1
 800f034:	e000      	b.n	800f038 <getOneMsFlag+0x18>
    }
    else
        return 0;
 800f036:	2300      	movs	r3, #0
}
 800f038:	4618      	mov	r0, r3
 800f03a:	46bd      	mov	sp, r7
 800f03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f040:	4770      	bx	lr
 800f042:	bf00      	nop
 800f044:	20000cea 	.word	0x20000cea

0800f048 <get5MsFlag>:
bool getCrossZero()
{
    return crossZero;
}
bool get5MsFlag()
{
 800f048:	b480      	push	{r7}
 800f04a:	af00      	add	r7, sp, #0
    if (_5msFlag)
 800f04c:	4b07      	ldr	r3, [pc, #28]	@ (800f06c <get5MsFlag+0x24>)
 800f04e:	781b      	ldrb	r3, [r3, #0]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d004      	beq.n	800f05e <get5MsFlag+0x16>
    {
        _5msFlag = 0;
 800f054:	4b05      	ldr	r3, [pc, #20]	@ (800f06c <get5MsFlag+0x24>)
 800f056:	2200      	movs	r2, #0
 800f058:	701a      	strb	r2, [r3, #0]
        return 1;
 800f05a:	2301      	movs	r3, #1
 800f05c:	e000      	b.n	800f060 <get5MsFlag+0x18>
    }
    else
    {
        return 0;
 800f05e:	2300      	movs	r3, #0
    }
}
 800f060:	4618      	mov	r0, r3
 800f062:	46bd      	mov	sp, r7
 800f064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f068:	4770      	bx	lr
 800f06a:	bf00      	nop
 800f06c:	20000cf1 	.word	0x20000cf1

0800f070 <get100MsFlag>:
        return 0;
    }
}

bool get100MsFlag()
{
 800f070:	b480      	push	{r7}
 800f072:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800f074:	4b07      	ldr	r3, [pc, #28]	@ (800f094 <get100MsFlag+0x24>)
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d004      	beq.n	800f086 <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800f07c:	4b05      	ldr	r3, [pc, #20]	@ (800f094 <get100MsFlag+0x24>)
 800f07e:	2200      	movs	r2, #0
 800f080:	701a      	strb	r2, [r3, #0]
        return 1;
 800f082:	2301      	movs	r3, #1
 800f084:	e000      	b.n	800f088 <get100MsFlag+0x18>
    }
    else
    {
        return 0;
 800f086:	2300      	movs	r3, #0
    }
}
 800f088:	4618      	mov	r0, r3
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr
 800f092:	bf00      	nop
 800f094:	20000cf5 	.word	0x20000cf5

0800f098 <atof>:
 800f098:	2100      	movs	r1, #0
 800f09a:	f000 be0b 	b.w	800fcb4 <strtod>

0800f09e <sulp>:
 800f09e:	b570      	push	{r4, r5, r6, lr}
 800f0a0:	4604      	mov	r4, r0
 800f0a2:	460d      	mov	r5, r1
 800f0a4:	ec45 4b10 	vmov	d0, r4, r5
 800f0a8:	4616      	mov	r6, r2
 800f0aa:	f003 fc7d 	bl	80129a8 <__ulp>
 800f0ae:	ec51 0b10 	vmov	r0, r1, d0
 800f0b2:	b17e      	cbz	r6, 800f0d4 <sulp+0x36>
 800f0b4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f0b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	dd09      	ble.n	800f0d4 <sulp+0x36>
 800f0c0:	051b      	lsls	r3, r3, #20
 800f0c2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f0c6:	2400      	movs	r4, #0
 800f0c8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f0cc:	4622      	mov	r2, r4
 800f0ce:	462b      	mov	r3, r5
 800f0d0:	f7f1 faba 	bl	8000648 <__aeabi_dmul>
 800f0d4:	ec41 0b10 	vmov	d0, r0, r1
 800f0d8:	bd70      	pop	{r4, r5, r6, pc}
 800f0da:	0000      	movs	r0, r0
 800f0dc:	0000      	movs	r0, r0
	...

0800f0e0 <_strtod_l>:
 800f0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0e4:	b09f      	sub	sp, #124	@ 0x7c
 800f0e6:	460c      	mov	r4, r1
 800f0e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	921a      	str	r2, [sp, #104]	@ 0x68
 800f0ee:	9005      	str	r0, [sp, #20]
 800f0f0:	f04f 0a00 	mov.w	sl, #0
 800f0f4:	f04f 0b00 	mov.w	fp, #0
 800f0f8:	460a      	mov	r2, r1
 800f0fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800f0fc:	7811      	ldrb	r1, [r2, #0]
 800f0fe:	292b      	cmp	r1, #43	@ 0x2b
 800f100:	d04a      	beq.n	800f198 <_strtod_l+0xb8>
 800f102:	d838      	bhi.n	800f176 <_strtod_l+0x96>
 800f104:	290d      	cmp	r1, #13
 800f106:	d832      	bhi.n	800f16e <_strtod_l+0x8e>
 800f108:	2908      	cmp	r1, #8
 800f10a:	d832      	bhi.n	800f172 <_strtod_l+0x92>
 800f10c:	2900      	cmp	r1, #0
 800f10e:	d03b      	beq.n	800f188 <_strtod_l+0xa8>
 800f110:	2200      	movs	r2, #0
 800f112:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f114:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f116:	782a      	ldrb	r2, [r5, #0]
 800f118:	2a30      	cmp	r2, #48	@ 0x30
 800f11a:	f040 80b3 	bne.w	800f284 <_strtod_l+0x1a4>
 800f11e:	786a      	ldrb	r2, [r5, #1]
 800f120:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f124:	2a58      	cmp	r2, #88	@ 0x58
 800f126:	d16e      	bne.n	800f206 <_strtod_l+0x126>
 800f128:	9302      	str	r3, [sp, #8]
 800f12a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f12c:	9301      	str	r3, [sp, #4]
 800f12e:	ab1a      	add	r3, sp, #104	@ 0x68
 800f130:	9300      	str	r3, [sp, #0]
 800f132:	4a8e      	ldr	r2, [pc, #568]	@ (800f36c <_strtod_l+0x28c>)
 800f134:	9805      	ldr	r0, [sp, #20]
 800f136:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f138:	a919      	add	r1, sp, #100	@ 0x64
 800f13a:	f002 fd27 	bl	8011b8c <__gethex>
 800f13e:	f010 060f 	ands.w	r6, r0, #15
 800f142:	4604      	mov	r4, r0
 800f144:	d005      	beq.n	800f152 <_strtod_l+0x72>
 800f146:	2e06      	cmp	r6, #6
 800f148:	d128      	bne.n	800f19c <_strtod_l+0xbc>
 800f14a:	3501      	adds	r5, #1
 800f14c:	2300      	movs	r3, #0
 800f14e:	9519      	str	r5, [sp, #100]	@ 0x64
 800f150:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f152:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f154:	2b00      	cmp	r3, #0
 800f156:	f040 858e 	bne.w	800fc76 <_strtod_l+0xb96>
 800f15a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f15c:	b1cb      	cbz	r3, 800f192 <_strtod_l+0xb2>
 800f15e:	4652      	mov	r2, sl
 800f160:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f164:	ec43 2b10 	vmov	d0, r2, r3
 800f168:	b01f      	add	sp, #124	@ 0x7c
 800f16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f16e:	2920      	cmp	r1, #32
 800f170:	d1ce      	bne.n	800f110 <_strtod_l+0x30>
 800f172:	3201      	adds	r2, #1
 800f174:	e7c1      	b.n	800f0fa <_strtod_l+0x1a>
 800f176:	292d      	cmp	r1, #45	@ 0x2d
 800f178:	d1ca      	bne.n	800f110 <_strtod_l+0x30>
 800f17a:	2101      	movs	r1, #1
 800f17c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f17e:	1c51      	adds	r1, r2, #1
 800f180:	9119      	str	r1, [sp, #100]	@ 0x64
 800f182:	7852      	ldrb	r2, [r2, #1]
 800f184:	2a00      	cmp	r2, #0
 800f186:	d1c5      	bne.n	800f114 <_strtod_l+0x34>
 800f188:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f18a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	f040 8570 	bne.w	800fc72 <_strtod_l+0xb92>
 800f192:	4652      	mov	r2, sl
 800f194:	465b      	mov	r3, fp
 800f196:	e7e5      	b.n	800f164 <_strtod_l+0x84>
 800f198:	2100      	movs	r1, #0
 800f19a:	e7ef      	b.n	800f17c <_strtod_l+0x9c>
 800f19c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f19e:	b13a      	cbz	r2, 800f1b0 <_strtod_l+0xd0>
 800f1a0:	2135      	movs	r1, #53	@ 0x35
 800f1a2:	a81c      	add	r0, sp, #112	@ 0x70
 800f1a4:	f003 fcfa 	bl	8012b9c <__copybits>
 800f1a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f1aa:	9805      	ldr	r0, [sp, #20]
 800f1ac:	f003 f8c8 	bl	8012340 <_Bfree>
 800f1b0:	3e01      	subs	r6, #1
 800f1b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f1b4:	2e04      	cmp	r6, #4
 800f1b6:	d806      	bhi.n	800f1c6 <_strtod_l+0xe6>
 800f1b8:	e8df f006 	tbb	[pc, r6]
 800f1bc:	201d0314 	.word	0x201d0314
 800f1c0:	14          	.byte	0x14
 800f1c1:	00          	.byte	0x00
 800f1c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f1c6:	05e1      	lsls	r1, r4, #23
 800f1c8:	bf48      	it	mi
 800f1ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f1ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f1d2:	0d1b      	lsrs	r3, r3, #20
 800f1d4:	051b      	lsls	r3, r3, #20
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d1bb      	bne.n	800f152 <_strtod_l+0x72>
 800f1da:	f001 fd8d 	bl	8010cf8 <__errno>
 800f1de:	2322      	movs	r3, #34	@ 0x22
 800f1e0:	6003      	str	r3, [r0, #0]
 800f1e2:	e7b6      	b.n	800f152 <_strtod_l+0x72>
 800f1e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f1e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f1ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f1f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f1f4:	e7e7      	b.n	800f1c6 <_strtod_l+0xe6>
 800f1f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f374 <_strtod_l+0x294>
 800f1fa:	e7e4      	b.n	800f1c6 <_strtod_l+0xe6>
 800f1fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f200:	f04f 3aff 	mov.w	sl, #4294967295
 800f204:	e7df      	b.n	800f1c6 <_strtod_l+0xe6>
 800f206:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f208:	1c5a      	adds	r2, r3, #1
 800f20a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f20c:	785b      	ldrb	r3, [r3, #1]
 800f20e:	2b30      	cmp	r3, #48	@ 0x30
 800f210:	d0f9      	beq.n	800f206 <_strtod_l+0x126>
 800f212:	2b00      	cmp	r3, #0
 800f214:	d09d      	beq.n	800f152 <_strtod_l+0x72>
 800f216:	2301      	movs	r3, #1
 800f218:	9309      	str	r3, [sp, #36]	@ 0x24
 800f21a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f21c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f21e:	2300      	movs	r3, #0
 800f220:	9308      	str	r3, [sp, #32]
 800f222:	930a      	str	r3, [sp, #40]	@ 0x28
 800f224:	461f      	mov	r7, r3
 800f226:	220a      	movs	r2, #10
 800f228:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f22a:	7805      	ldrb	r5, [r0, #0]
 800f22c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f230:	b2d9      	uxtb	r1, r3
 800f232:	2909      	cmp	r1, #9
 800f234:	d928      	bls.n	800f288 <_strtod_l+0x1a8>
 800f236:	494e      	ldr	r1, [pc, #312]	@ (800f370 <_strtod_l+0x290>)
 800f238:	2201      	movs	r2, #1
 800f23a:	f001 fd01 	bl	8010c40 <strncmp>
 800f23e:	2800      	cmp	r0, #0
 800f240:	d032      	beq.n	800f2a8 <_strtod_l+0x1c8>
 800f242:	2000      	movs	r0, #0
 800f244:	462a      	mov	r2, r5
 800f246:	4681      	mov	r9, r0
 800f248:	463d      	mov	r5, r7
 800f24a:	4603      	mov	r3, r0
 800f24c:	2a65      	cmp	r2, #101	@ 0x65
 800f24e:	d001      	beq.n	800f254 <_strtod_l+0x174>
 800f250:	2a45      	cmp	r2, #69	@ 0x45
 800f252:	d114      	bne.n	800f27e <_strtod_l+0x19e>
 800f254:	b91d      	cbnz	r5, 800f25e <_strtod_l+0x17e>
 800f256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f258:	4302      	orrs	r2, r0
 800f25a:	d095      	beq.n	800f188 <_strtod_l+0xa8>
 800f25c:	2500      	movs	r5, #0
 800f25e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f260:	1c62      	adds	r2, r4, #1
 800f262:	9219      	str	r2, [sp, #100]	@ 0x64
 800f264:	7862      	ldrb	r2, [r4, #1]
 800f266:	2a2b      	cmp	r2, #43	@ 0x2b
 800f268:	d077      	beq.n	800f35a <_strtod_l+0x27a>
 800f26a:	2a2d      	cmp	r2, #45	@ 0x2d
 800f26c:	d07b      	beq.n	800f366 <_strtod_l+0x286>
 800f26e:	f04f 0c00 	mov.w	ip, #0
 800f272:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f276:	2909      	cmp	r1, #9
 800f278:	f240 8082 	bls.w	800f380 <_strtod_l+0x2a0>
 800f27c:	9419      	str	r4, [sp, #100]	@ 0x64
 800f27e:	f04f 0800 	mov.w	r8, #0
 800f282:	e0a2      	b.n	800f3ca <_strtod_l+0x2ea>
 800f284:	2300      	movs	r3, #0
 800f286:	e7c7      	b.n	800f218 <_strtod_l+0x138>
 800f288:	2f08      	cmp	r7, #8
 800f28a:	bfd5      	itete	le
 800f28c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f28e:	9908      	ldrgt	r1, [sp, #32]
 800f290:	fb02 3301 	mlale	r3, r2, r1, r3
 800f294:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f298:	f100 0001 	add.w	r0, r0, #1
 800f29c:	bfd4      	ite	le
 800f29e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f2a0:	9308      	strgt	r3, [sp, #32]
 800f2a2:	3701      	adds	r7, #1
 800f2a4:	9019      	str	r0, [sp, #100]	@ 0x64
 800f2a6:	e7bf      	b.n	800f228 <_strtod_l+0x148>
 800f2a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f2aa:	1c5a      	adds	r2, r3, #1
 800f2ac:	9219      	str	r2, [sp, #100]	@ 0x64
 800f2ae:	785a      	ldrb	r2, [r3, #1]
 800f2b0:	b37f      	cbz	r7, 800f312 <_strtod_l+0x232>
 800f2b2:	4681      	mov	r9, r0
 800f2b4:	463d      	mov	r5, r7
 800f2b6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f2ba:	2b09      	cmp	r3, #9
 800f2bc:	d912      	bls.n	800f2e4 <_strtod_l+0x204>
 800f2be:	2301      	movs	r3, #1
 800f2c0:	e7c4      	b.n	800f24c <_strtod_l+0x16c>
 800f2c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f2c4:	1c5a      	adds	r2, r3, #1
 800f2c6:	9219      	str	r2, [sp, #100]	@ 0x64
 800f2c8:	785a      	ldrb	r2, [r3, #1]
 800f2ca:	3001      	adds	r0, #1
 800f2cc:	2a30      	cmp	r2, #48	@ 0x30
 800f2ce:	d0f8      	beq.n	800f2c2 <_strtod_l+0x1e2>
 800f2d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f2d4:	2b08      	cmp	r3, #8
 800f2d6:	f200 84d3 	bhi.w	800fc80 <_strtod_l+0xba0>
 800f2da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f2dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800f2de:	4681      	mov	r9, r0
 800f2e0:	2000      	movs	r0, #0
 800f2e2:	4605      	mov	r5, r0
 800f2e4:	3a30      	subs	r2, #48	@ 0x30
 800f2e6:	f100 0301 	add.w	r3, r0, #1
 800f2ea:	d02a      	beq.n	800f342 <_strtod_l+0x262>
 800f2ec:	4499      	add	r9, r3
 800f2ee:	eb00 0c05 	add.w	ip, r0, r5
 800f2f2:	462b      	mov	r3, r5
 800f2f4:	210a      	movs	r1, #10
 800f2f6:	4563      	cmp	r3, ip
 800f2f8:	d10d      	bne.n	800f316 <_strtod_l+0x236>
 800f2fa:	1c69      	adds	r1, r5, #1
 800f2fc:	4401      	add	r1, r0
 800f2fe:	4428      	add	r0, r5
 800f300:	2808      	cmp	r0, #8
 800f302:	dc16      	bgt.n	800f332 <_strtod_l+0x252>
 800f304:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f306:	230a      	movs	r3, #10
 800f308:	fb03 2300 	mla	r3, r3, r0, r2
 800f30c:	930a      	str	r3, [sp, #40]	@ 0x28
 800f30e:	2300      	movs	r3, #0
 800f310:	e018      	b.n	800f344 <_strtod_l+0x264>
 800f312:	4638      	mov	r0, r7
 800f314:	e7da      	b.n	800f2cc <_strtod_l+0x1ec>
 800f316:	2b08      	cmp	r3, #8
 800f318:	f103 0301 	add.w	r3, r3, #1
 800f31c:	dc03      	bgt.n	800f326 <_strtod_l+0x246>
 800f31e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f320:	434e      	muls	r6, r1
 800f322:	960a      	str	r6, [sp, #40]	@ 0x28
 800f324:	e7e7      	b.n	800f2f6 <_strtod_l+0x216>
 800f326:	2b10      	cmp	r3, #16
 800f328:	bfde      	ittt	le
 800f32a:	9e08      	ldrle	r6, [sp, #32]
 800f32c:	434e      	mulle	r6, r1
 800f32e:	9608      	strle	r6, [sp, #32]
 800f330:	e7e1      	b.n	800f2f6 <_strtod_l+0x216>
 800f332:	280f      	cmp	r0, #15
 800f334:	dceb      	bgt.n	800f30e <_strtod_l+0x22e>
 800f336:	9808      	ldr	r0, [sp, #32]
 800f338:	230a      	movs	r3, #10
 800f33a:	fb03 2300 	mla	r3, r3, r0, r2
 800f33e:	9308      	str	r3, [sp, #32]
 800f340:	e7e5      	b.n	800f30e <_strtod_l+0x22e>
 800f342:	4629      	mov	r1, r5
 800f344:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f346:	1c50      	adds	r0, r2, #1
 800f348:	9019      	str	r0, [sp, #100]	@ 0x64
 800f34a:	7852      	ldrb	r2, [r2, #1]
 800f34c:	4618      	mov	r0, r3
 800f34e:	460d      	mov	r5, r1
 800f350:	e7b1      	b.n	800f2b6 <_strtod_l+0x1d6>
 800f352:	f04f 0900 	mov.w	r9, #0
 800f356:	2301      	movs	r3, #1
 800f358:	e77d      	b.n	800f256 <_strtod_l+0x176>
 800f35a:	f04f 0c00 	mov.w	ip, #0
 800f35e:	1ca2      	adds	r2, r4, #2
 800f360:	9219      	str	r2, [sp, #100]	@ 0x64
 800f362:	78a2      	ldrb	r2, [r4, #2]
 800f364:	e785      	b.n	800f272 <_strtod_l+0x192>
 800f366:	f04f 0c01 	mov.w	ip, #1
 800f36a:	e7f8      	b.n	800f35e <_strtod_l+0x27e>
 800f36c:	08014778 	.word	0x08014778
 800f370:	08014760 	.word	0x08014760
 800f374:	7ff00000 	.word	0x7ff00000
 800f378:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f37a:	1c51      	adds	r1, r2, #1
 800f37c:	9119      	str	r1, [sp, #100]	@ 0x64
 800f37e:	7852      	ldrb	r2, [r2, #1]
 800f380:	2a30      	cmp	r2, #48	@ 0x30
 800f382:	d0f9      	beq.n	800f378 <_strtod_l+0x298>
 800f384:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f388:	2908      	cmp	r1, #8
 800f38a:	f63f af78 	bhi.w	800f27e <_strtod_l+0x19e>
 800f38e:	3a30      	subs	r2, #48	@ 0x30
 800f390:	920e      	str	r2, [sp, #56]	@ 0x38
 800f392:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f394:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f396:	f04f 080a 	mov.w	r8, #10
 800f39a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f39c:	1c56      	adds	r6, r2, #1
 800f39e:	9619      	str	r6, [sp, #100]	@ 0x64
 800f3a0:	7852      	ldrb	r2, [r2, #1]
 800f3a2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f3a6:	f1be 0f09 	cmp.w	lr, #9
 800f3aa:	d939      	bls.n	800f420 <_strtod_l+0x340>
 800f3ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f3ae:	1a76      	subs	r6, r6, r1
 800f3b0:	2e08      	cmp	r6, #8
 800f3b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f3b6:	dc03      	bgt.n	800f3c0 <_strtod_l+0x2e0>
 800f3b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f3ba:	4588      	cmp	r8, r1
 800f3bc:	bfa8      	it	ge
 800f3be:	4688      	movge	r8, r1
 800f3c0:	f1bc 0f00 	cmp.w	ip, #0
 800f3c4:	d001      	beq.n	800f3ca <_strtod_l+0x2ea>
 800f3c6:	f1c8 0800 	rsb	r8, r8, #0
 800f3ca:	2d00      	cmp	r5, #0
 800f3cc:	d14e      	bne.n	800f46c <_strtod_l+0x38c>
 800f3ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f3d0:	4308      	orrs	r0, r1
 800f3d2:	f47f aebe 	bne.w	800f152 <_strtod_l+0x72>
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	f47f aed6 	bne.w	800f188 <_strtod_l+0xa8>
 800f3dc:	2a69      	cmp	r2, #105	@ 0x69
 800f3de:	d028      	beq.n	800f432 <_strtod_l+0x352>
 800f3e0:	dc25      	bgt.n	800f42e <_strtod_l+0x34e>
 800f3e2:	2a49      	cmp	r2, #73	@ 0x49
 800f3e4:	d025      	beq.n	800f432 <_strtod_l+0x352>
 800f3e6:	2a4e      	cmp	r2, #78	@ 0x4e
 800f3e8:	f47f aece 	bne.w	800f188 <_strtod_l+0xa8>
 800f3ec:	499b      	ldr	r1, [pc, #620]	@ (800f65c <_strtod_l+0x57c>)
 800f3ee:	a819      	add	r0, sp, #100	@ 0x64
 800f3f0:	f002 fdee 	bl	8011fd0 <__match>
 800f3f4:	2800      	cmp	r0, #0
 800f3f6:	f43f aec7 	beq.w	800f188 <_strtod_l+0xa8>
 800f3fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	2b28      	cmp	r3, #40	@ 0x28
 800f400:	d12e      	bne.n	800f460 <_strtod_l+0x380>
 800f402:	4997      	ldr	r1, [pc, #604]	@ (800f660 <_strtod_l+0x580>)
 800f404:	aa1c      	add	r2, sp, #112	@ 0x70
 800f406:	a819      	add	r0, sp, #100	@ 0x64
 800f408:	f002 fdf6 	bl	8011ff8 <__hexnan>
 800f40c:	2805      	cmp	r0, #5
 800f40e:	d127      	bne.n	800f460 <_strtod_l+0x380>
 800f410:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f412:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f416:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f41a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f41e:	e698      	b.n	800f152 <_strtod_l+0x72>
 800f420:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f422:	fb08 2101 	mla	r1, r8, r1, r2
 800f426:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f42a:	920e      	str	r2, [sp, #56]	@ 0x38
 800f42c:	e7b5      	b.n	800f39a <_strtod_l+0x2ba>
 800f42e:	2a6e      	cmp	r2, #110	@ 0x6e
 800f430:	e7da      	b.n	800f3e8 <_strtod_l+0x308>
 800f432:	498c      	ldr	r1, [pc, #560]	@ (800f664 <_strtod_l+0x584>)
 800f434:	a819      	add	r0, sp, #100	@ 0x64
 800f436:	f002 fdcb 	bl	8011fd0 <__match>
 800f43a:	2800      	cmp	r0, #0
 800f43c:	f43f aea4 	beq.w	800f188 <_strtod_l+0xa8>
 800f440:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f442:	4989      	ldr	r1, [pc, #548]	@ (800f668 <_strtod_l+0x588>)
 800f444:	3b01      	subs	r3, #1
 800f446:	a819      	add	r0, sp, #100	@ 0x64
 800f448:	9319      	str	r3, [sp, #100]	@ 0x64
 800f44a:	f002 fdc1 	bl	8011fd0 <__match>
 800f44e:	b910      	cbnz	r0, 800f456 <_strtod_l+0x376>
 800f450:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f452:	3301      	adds	r3, #1
 800f454:	9319      	str	r3, [sp, #100]	@ 0x64
 800f456:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f678 <_strtod_l+0x598>
 800f45a:	f04f 0a00 	mov.w	sl, #0
 800f45e:	e678      	b.n	800f152 <_strtod_l+0x72>
 800f460:	4882      	ldr	r0, [pc, #520]	@ (800f66c <_strtod_l+0x58c>)
 800f462:	f001 fc85 	bl	8010d70 <nan>
 800f466:	ec5b ab10 	vmov	sl, fp, d0
 800f46a:	e672      	b.n	800f152 <_strtod_l+0x72>
 800f46c:	eba8 0309 	sub.w	r3, r8, r9
 800f470:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f472:	9309      	str	r3, [sp, #36]	@ 0x24
 800f474:	2f00      	cmp	r7, #0
 800f476:	bf08      	it	eq
 800f478:	462f      	moveq	r7, r5
 800f47a:	2d10      	cmp	r5, #16
 800f47c:	462c      	mov	r4, r5
 800f47e:	bfa8      	it	ge
 800f480:	2410      	movge	r4, #16
 800f482:	f7f1 f867 	bl	8000554 <__aeabi_ui2d>
 800f486:	2d09      	cmp	r5, #9
 800f488:	4682      	mov	sl, r0
 800f48a:	468b      	mov	fp, r1
 800f48c:	dc13      	bgt.n	800f4b6 <_strtod_l+0x3d6>
 800f48e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f490:	2b00      	cmp	r3, #0
 800f492:	f43f ae5e 	beq.w	800f152 <_strtod_l+0x72>
 800f496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f498:	dd78      	ble.n	800f58c <_strtod_l+0x4ac>
 800f49a:	2b16      	cmp	r3, #22
 800f49c:	dc5f      	bgt.n	800f55e <_strtod_l+0x47e>
 800f49e:	4974      	ldr	r1, [pc, #464]	@ (800f670 <_strtod_l+0x590>)
 800f4a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f4a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4a8:	4652      	mov	r2, sl
 800f4aa:	465b      	mov	r3, fp
 800f4ac:	f7f1 f8cc 	bl	8000648 <__aeabi_dmul>
 800f4b0:	4682      	mov	sl, r0
 800f4b2:	468b      	mov	fp, r1
 800f4b4:	e64d      	b.n	800f152 <_strtod_l+0x72>
 800f4b6:	4b6e      	ldr	r3, [pc, #440]	@ (800f670 <_strtod_l+0x590>)
 800f4b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f4bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f4c0:	f7f1 f8c2 	bl	8000648 <__aeabi_dmul>
 800f4c4:	4682      	mov	sl, r0
 800f4c6:	9808      	ldr	r0, [sp, #32]
 800f4c8:	468b      	mov	fp, r1
 800f4ca:	f7f1 f843 	bl	8000554 <__aeabi_ui2d>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	460b      	mov	r3, r1
 800f4d2:	4650      	mov	r0, sl
 800f4d4:	4659      	mov	r1, fp
 800f4d6:	f7f0 ff01 	bl	80002dc <__adddf3>
 800f4da:	2d0f      	cmp	r5, #15
 800f4dc:	4682      	mov	sl, r0
 800f4de:	468b      	mov	fp, r1
 800f4e0:	ddd5      	ble.n	800f48e <_strtod_l+0x3ae>
 800f4e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4e4:	1b2c      	subs	r4, r5, r4
 800f4e6:	441c      	add	r4, r3
 800f4e8:	2c00      	cmp	r4, #0
 800f4ea:	f340 8096 	ble.w	800f61a <_strtod_l+0x53a>
 800f4ee:	f014 030f 	ands.w	r3, r4, #15
 800f4f2:	d00a      	beq.n	800f50a <_strtod_l+0x42a>
 800f4f4:	495e      	ldr	r1, [pc, #376]	@ (800f670 <_strtod_l+0x590>)
 800f4f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f4fa:	4652      	mov	r2, sl
 800f4fc:	465b      	mov	r3, fp
 800f4fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f502:	f7f1 f8a1 	bl	8000648 <__aeabi_dmul>
 800f506:	4682      	mov	sl, r0
 800f508:	468b      	mov	fp, r1
 800f50a:	f034 040f 	bics.w	r4, r4, #15
 800f50e:	d073      	beq.n	800f5f8 <_strtod_l+0x518>
 800f510:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f514:	dd48      	ble.n	800f5a8 <_strtod_l+0x4c8>
 800f516:	2400      	movs	r4, #0
 800f518:	46a0      	mov	r8, r4
 800f51a:	940a      	str	r4, [sp, #40]	@ 0x28
 800f51c:	46a1      	mov	r9, r4
 800f51e:	9a05      	ldr	r2, [sp, #20]
 800f520:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f678 <_strtod_l+0x598>
 800f524:	2322      	movs	r3, #34	@ 0x22
 800f526:	6013      	str	r3, [r2, #0]
 800f528:	f04f 0a00 	mov.w	sl, #0
 800f52c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f52e:	2b00      	cmp	r3, #0
 800f530:	f43f ae0f 	beq.w	800f152 <_strtod_l+0x72>
 800f534:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f536:	9805      	ldr	r0, [sp, #20]
 800f538:	f002 ff02 	bl	8012340 <_Bfree>
 800f53c:	9805      	ldr	r0, [sp, #20]
 800f53e:	4649      	mov	r1, r9
 800f540:	f002 fefe 	bl	8012340 <_Bfree>
 800f544:	9805      	ldr	r0, [sp, #20]
 800f546:	4641      	mov	r1, r8
 800f548:	f002 fefa 	bl	8012340 <_Bfree>
 800f54c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f54e:	9805      	ldr	r0, [sp, #20]
 800f550:	f002 fef6 	bl	8012340 <_Bfree>
 800f554:	9805      	ldr	r0, [sp, #20]
 800f556:	4621      	mov	r1, r4
 800f558:	f002 fef2 	bl	8012340 <_Bfree>
 800f55c:	e5f9      	b.n	800f152 <_strtod_l+0x72>
 800f55e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f560:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f564:	4293      	cmp	r3, r2
 800f566:	dbbc      	blt.n	800f4e2 <_strtod_l+0x402>
 800f568:	4c41      	ldr	r4, [pc, #260]	@ (800f670 <_strtod_l+0x590>)
 800f56a:	f1c5 050f 	rsb	r5, r5, #15
 800f56e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f572:	4652      	mov	r2, sl
 800f574:	465b      	mov	r3, fp
 800f576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f57a:	f7f1 f865 	bl	8000648 <__aeabi_dmul>
 800f57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f580:	1b5d      	subs	r5, r3, r5
 800f582:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f586:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f58a:	e78f      	b.n	800f4ac <_strtod_l+0x3cc>
 800f58c:	3316      	adds	r3, #22
 800f58e:	dba8      	blt.n	800f4e2 <_strtod_l+0x402>
 800f590:	4b37      	ldr	r3, [pc, #220]	@ (800f670 <_strtod_l+0x590>)
 800f592:	eba9 0808 	sub.w	r8, r9, r8
 800f596:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f59a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f59e:	4650      	mov	r0, sl
 800f5a0:	4659      	mov	r1, fp
 800f5a2:	f7f1 f97b 	bl	800089c <__aeabi_ddiv>
 800f5a6:	e783      	b.n	800f4b0 <_strtod_l+0x3d0>
 800f5a8:	4b32      	ldr	r3, [pc, #200]	@ (800f674 <_strtod_l+0x594>)
 800f5aa:	9308      	str	r3, [sp, #32]
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	1124      	asrs	r4, r4, #4
 800f5b0:	4650      	mov	r0, sl
 800f5b2:	4659      	mov	r1, fp
 800f5b4:	461e      	mov	r6, r3
 800f5b6:	2c01      	cmp	r4, #1
 800f5b8:	dc21      	bgt.n	800f5fe <_strtod_l+0x51e>
 800f5ba:	b10b      	cbz	r3, 800f5c0 <_strtod_l+0x4e0>
 800f5bc:	4682      	mov	sl, r0
 800f5be:	468b      	mov	fp, r1
 800f5c0:	492c      	ldr	r1, [pc, #176]	@ (800f674 <_strtod_l+0x594>)
 800f5c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f5c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f5ca:	4652      	mov	r2, sl
 800f5cc:	465b      	mov	r3, fp
 800f5ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5d2:	f7f1 f839 	bl	8000648 <__aeabi_dmul>
 800f5d6:	4b28      	ldr	r3, [pc, #160]	@ (800f678 <_strtod_l+0x598>)
 800f5d8:	460a      	mov	r2, r1
 800f5da:	400b      	ands	r3, r1
 800f5dc:	4927      	ldr	r1, [pc, #156]	@ (800f67c <_strtod_l+0x59c>)
 800f5de:	428b      	cmp	r3, r1
 800f5e0:	4682      	mov	sl, r0
 800f5e2:	d898      	bhi.n	800f516 <_strtod_l+0x436>
 800f5e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f5e8:	428b      	cmp	r3, r1
 800f5ea:	bf86      	itte	hi
 800f5ec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f680 <_strtod_l+0x5a0>
 800f5f0:	f04f 3aff 	movhi.w	sl, #4294967295
 800f5f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	9308      	str	r3, [sp, #32]
 800f5fc:	e07a      	b.n	800f6f4 <_strtod_l+0x614>
 800f5fe:	07e2      	lsls	r2, r4, #31
 800f600:	d505      	bpl.n	800f60e <_strtod_l+0x52e>
 800f602:	9b08      	ldr	r3, [sp, #32]
 800f604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f608:	f7f1 f81e 	bl	8000648 <__aeabi_dmul>
 800f60c:	2301      	movs	r3, #1
 800f60e:	9a08      	ldr	r2, [sp, #32]
 800f610:	3208      	adds	r2, #8
 800f612:	3601      	adds	r6, #1
 800f614:	1064      	asrs	r4, r4, #1
 800f616:	9208      	str	r2, [sp, #32]
 800f618:	e7cd      	b.n	800f5b6 <_strtod_l+0x4d6>
 800f61a:	d0ed      	beq.n	800f5f8 <_strtod_l+0x518>
 800f61c:	4264      	negs	r4, r4
 800f61e:	f014 020f 	ands.w	r2, r4, #15
 800f622:	d00a      	beq.n	800f63a <_strtod_l+0x55a>
 800f624:	4b12      	ldr	r3, [pc, #72]	@ (800f670 <_strtod_l+0x590>)
 800f626:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f62a:	4650      	mov	r0, sl
 800f62c:	4659      	mov	r1, fp
 800f62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f632:	f7f1 f933 	bl	800089c <__aeabi_ddiv>
 800f636:	4682      	mov	sl, r0
 800f638:	468b      	mov	fp, r1
 800f63a:	1124      	asrs	r4, r4, #4
 800f63c:	d0dc      	beq.n	800f5f8 <_strtod_l+0x518>
 800f63e:	2c1f      	cmp	r4, #31
 800f640:	dd20      	ble.n	800f684 <_strtod_l+0x5a4>
 800f642:	2400      	movs	r4, #0
 800f644:	46a0      	mov	r8, r4
 800f646:	940a      	str	r4, [sp, #40]	@ 0x28
 800f648:	46a1      	mov	r9, r4
 800f64a:	9a05      	ldr	r2, [sp, #20]
 800f64c:	2322      	movs	r3, #34	@ 0x22
 800f64e:	f04f 0a00 	mov.w	sl, #0
 800f652:	f04f 0b00 	mov.w	fp, #0
 800f656:	6013      	str	r3, [r2, #0]
 800f658:	e768      	b.n	800f52c <_strtod_l+0x44c>
 800f65a:	bf00      	nop
 800f65c:	080147c5 	.word	0x080147c5
 800f660:	08014764 	.word	0x08014764
 800f664:	080147bd 	.word	0x080147bd
 800f668:	080147fc 	.word	0x080147fc
 800f66c:	08014b8d 	.word	0x08014b8d
 800f670:	08014978 	.word	0x08014978
 800f674:	08014950 	.word	0x08014950
 800f678:	7ff00000 	.word	0x7ff00000
 800f67c:	7ca00000 	.word	0x7ca00000
 800f680:	7fefffff 	.word	0x7fefffff
 800f684:	f014 0310 	ands.w	r3, r4, #16
 800f688:	bf18      	it	ne
 800f68a:	236a      	movne	r3, #106	@ 0x6a
 800f68c:	4ea9      	ldr	r6, [pc, #676]	@ (800f934 <_strtod_l+0x854>)
 800f68e:	9308      	str	r3, [sp, #32]
 800f690:	4650      	mov	r0, sl
 800f692:	4659      	mov	r1, fp
 800f694:	2300      	movs	r3, #0
 800f696:	07e2      	lsls	r2, r4, #31
 800f698:	d504      	bpl.n	800f6a4 <_strtod_l+0x5c4>
 800f69a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f69e:	f7f0 ffd3 	bl	8000648 <__aeabi_dmul>
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	1064      	asrs	r4, r4, #1
 800f6a6:	f106 0608 	add.w	r6, r6, #8
 800f6aa:	d1f4      	bne.n	800f696 <_strtod_l+0x5b6>
 800f6ac:	b10b      	cbz	r3, 800f6b2 <_strtod_l+0x5d2>
 800f6ae:	4682      	mov	sl, r0
 800f6b0:	468b      	mov	fp, r1
 800f6b2:	9b08      	ldr	r3, [sp, #32]
 800f6b4:	b1b3      	cbz	r3, 800f6e4 <_strtod_l+0x604>
 800f6b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f6ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	4659      	mov	r1, fp
 800f6c2:	dd0f      	ble.n	800f6e4 <_strtod_l+0x604>
 800f6c4:	2b1f      	cmp	r3, #31
 800f6c6:	dd55      	ble.n	800f774 <_strtod_l+0x694>
 800f6c8:	2b34      	cmp	r3, #52	@ 0x34
 800f6ca:	bfde      	ittt	le
 800f6cc:	f04f 33ff 	movle.w	r3, #4294967295
 800f6d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f6d4:	4093      	lslle	r3, r2
 800f6d6:	f04f 0a00 	mov.w	sl, #0
 800f6da:	bfcc      	ite	gt
 800f6dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f6e0:	ea03 0b01 	andle.w	fp, r3, r1
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	4650      	mov	r0, sl
 800f6ea:	4659      	mov	r1, fp
 800f6ec:	f7f1 fa14 	bl	8000b18 <__aeabi_dcmpeq>
 800f6f0:	2800      	cmp	r0, #0
 800f6f2:	d1a6      	bne.n	800f642 <_strtod_l+0x562>
 800f6f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6f6:	9300      	str	r3, [sp, #0]
 800f6f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f6fa:	9805      	ldr	r0, [sp, #20]
 800f6fc:	462b      	mov	r3, r5
 800f6fe:	463a      	mov	r2, r7
 800f700:	f002 fe86 	bl	8012410 <__s2b>
 800f704:	900a      	str	r0, [sp, #40]	@ 0x28
 800f706:	2800      	cmp	r0, #0
 800f708:	f43f af05 	beq.w	800f516 <_strtod_l+0x436>
 800f70c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f70e:	2a00      	cmp	r2, #0
 800f710:	eba9 0308 	sub.w	r3, r9, r8
 800f714:	bfa8      	it	ge
 800f716:	2300      	movge	r3, #0
 800f718:	9312      	str	r3, [sp, #72]	@ 0x48
 800f71a:	2400      	movs	r4, #0
 800f71c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f720:	9316      	str	r3, [sp, #88]	@ 0x58
 800f722:	46a0      	mov	r8, r4
 800f724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f726:	9805      	ldr	r0, [sp, #20]
 800f728:	6859      	ldr	r1, [r3, #4]
 800f72a:	f002 fdc9 	bl	80122c0 <_Balloc>
 800f72e:	4681      	mov	r9, r0
 800f730:	2800      	cmp	r0, #0
 800f732:	f43f aef4 	beq.w	800f51e <_strtod_l+0x43e>
 800f736:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f738:	691a      	ldr	r2, [r3, #16]
 800f73a:	3202      	adds	r2, #2
 800f73c:	f103 010c 	add.w	r1, r3, #12
 800f740:	0092      	lsls	r2, r2, #2
 800f742:	300c      	adds	r0, #12
 800f744:	f001 fb05 	bl	8010d52 <memcpy>
 800f748:	ec4b ab10 	vmov	d0, sl, fp
 800f74c:	9805      	ldr	r0, [sp, #20]
 800f74e:	aa1c      	add	r2, sp, #112	@ 0x70
 800f750:	a91b      	add	r1, sp, #108	@ 0x6c
 800f752:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f756:	f003 f997 	bl	8012a88 <__d2b>
 800f75a:	901a      	str	r0, [sp, #104]	@ 0x68
 800f75c:	2800      	cmp	r0, #0
 800f75e:	f43f aede 	beq.w	800f51e <_strtod_l+0x43e>
 800f762:	9805      	ldr	r0, [sp, #20]
 800f764:	2101      	movs	r1, #1
 800f766:	f002 fee9 	bl	801253c <__i2b>
 800f76a:	4680      	mov	r8, r0
 800f76c:	b948      	cbnz	r0, 800f782 <_strtod_l+0x6a2>
 800f76e:	f04f 0800 	mov.w	r8, #0
 800f772:	e6d4      	b.n	800f51e <_strtod_l+0x43e>
 800f774:	f04f 32ff 	mov.w	r2, #4294967295
 800f778:	fa02 f303 	lsl.w	r3, r2, r3
 800f77c:	ea03 0a0a 	and.w	sl, r3, sl
 800f780:	e7b0      	b.n	800f6e4 <_strtod_l+0x604>
 800f782:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f784:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f786:	2d00      	cmp	r5, #0
 800f788:	bfab      	itete	ge
 800f78a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f78c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f78e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f790:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f792:	bfac      	ite	ge
 800f794:	18ef      	addge	r7, r5, r3
 800f796:	1b5e      	sublt	r6, r3, r5
 800f798:	9b08      	ldr	r3, [sp, #32]
 800f79a:	1aed      	subs	r5, r5, r3
 800f79c:	4415      	add	r5, r2
 800f79e:	4b66      	ldr	r3, [pc, #408]	@ (800f938 <_strtod_l+0x858>)
 800f7a0:	3d01      	subs	r5, #1
 800f7a2:	429d      	cmp	r5, r3
 800f7a4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f7a8:	da50      	bge.n	800f84c <_strtod_l+0x76c>
 800f7aa:	1b5b      	subs	r3, r3, r5
 800f7ac:	2b1f      	cmp	r3, #31
 800f7ae:	eba2 0203 	sub.w	r2, r2, r3
 800f7b2:	f04f 0101 	mov.w	r1, #1
 800f7b6:	dc3d      	bgt.n	800f834 <_strtod_l+0x754>
 800f7b8:	fa01 f303 	lsl.w	r3, r1, r3
 800f7bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f7be:	2300      	movs	r3, #0
 800f7c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800f7c2:	18bd      	adds	r5, r7, r2
 800f7c4:	9b08      	ldr	r3, [sp, #32]
 800f7c6:	42af      	cmp	r7, r5
 800f7c8:	4416      	add	r6, r2
 800f7ca:	441e      	add	r6, r3
 800f7cc:	463b      	mov	r3, r7
 800f7ce:	bfa8      	it	ge
 800f7d0:	462b      	movge	r3, r5
 800f7d2:	42b3      	cmp	r3, r6
 800f7d4:	bfa8      	it	ge
 800f7d6:	4633      	movge	r3, r6
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	bfc2      	ittt	gt
 800f7dc:	1aed      	subgt	r5, r5, r3
 800f7de:	1af6      	subgt	r6, r6, r3
 800f7e0:	1aff      	subgt	r7, r7, r3
 800f7e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	dd16      	ble.n	800f816 <_strtod_l+0x736>
 800f7e8:	4641      	mov	r1, r8
 800f7ea:	9805      	ldr	r0, [sp, #20]
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	f002 ff65 	bl	80126bc <__pow5mult>
 800f7f2:	4680      	mov	r8, r0
 800f7f4:	2800      	cmp	r0, #0
 800f7f6:	d0ba      	beq.n	800f76e <_strtod_l+0x68e>
 800f7f8:	4601      	mov	r1, r0
 800f7fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f7fc:	9805      	ldr	r0, [sp, #20]
 800f7fe:	f002 feb3 	bl	8012568 <__multiply>
 800f802:	900e      	str	r0, [sp, #56]	@ 0x38
 800f804:	2800      	cmp	r0, #0
 800f806:	f43f ae8a 	beq.w	800f51e <_strtod_l+0x43e>
 800f80a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f80c:	9805      	ldr	r0, [sp, #20]
 800f80e:	f002 fd97 	bl	8012340 <_Bfree>
 800f812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f814:	931a      	str	r3, [sp, #104]	@ 0x68
 800f816:	2d00      	cmp	r5, #0
 800f818:	dc1d      	bgt.n	800f856 <_strtod_l+0x776>
 800f81a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	dd23      	ble.n	800f868 <_strtod_l+0x788>
 800f820:	4649      	mov	r1, r9
 800f822:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f824:	9805      	ldr	r0, [sp, #20]
 800f826:	f002 ff49 	bl	80126bc <__pow5mult>
 800f82a:	4681      	mov	r9, r0
 800f82c:	b9e0      	cbnz	r0, 800f868 <_strtod_l+0x788>
 800f82e:	f04f 0900 	mov.w	r9, #0
 800f832:	e674      	b.n	800f51e <_strtod_l+0x43e>
 800f834:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f838:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f83c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f840:	35e2      	adds	r5, #226	@ 0xe2
 800f842:	fa01 f305 	lsl.w	r3, r1, r5
 800f846:	9310      	str	r3, [sp, #64]	@ 0x40
 800f848:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f84a:	e7ba      	b.n	800f7c2 <_strtod_l+0x6e2>
 800f84c:	2300      	movs	r3, #0
 800f84e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f850:	2301      	movs	r3, #1
 800f852:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f854:	e7b5      	b.n	800f7c2 <_strtod_l+0x6e2>
 800f856:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f858:	9805      	ldr	r0, [sp, #20]
 800f85a:	462a      	mov	r2, r5
 800f85c:	f002 ff88 	bl	8012770 <__lshift>
 800f860:	901a      	str	r0, [sp, #104]	@ 0x68
 800f862:	2800      	cmp	r0, #0
 800f864:	d1d9      	bne.n	800f81a <_strtod_l+0x73a>
 800f866:	e65a      	b.n	800f51e <_strtod_l+0x43e>
 800f868:	2e00      	cmp	r6, #0
 800f86a:	dd07      	ble.n	800f87c <_strtod_l+0x79c>
 800f86c:	4649      	mov	r1, r9
 800f86e:	9805      	ldr	r0, [sp, #20]
 800f870:	4632      	mov	r2, r6
 800f872:	f002 ff7d 	bl	8012770 <__lshift>
 800f876:	4681      	mov	r9, r0
 800f878:	2800      	cmp	r0, #0
 800f87a:	d0d8      	beq.n	800f82e <_strtod_l+0x74e>
 800f87c:	2f00      	cmp	r7, #0
 800f87e:	dd08      	ble.n	800f892 <_strtod_l+0x7b2>
 800f880:	4641      	mov	r1, r8
 800f882:	9805      	ldr	r0, [sp, #20]
 800f884:	463a      	mov	r2, r7
 800f886:	f002 ff73 	bl	8012770 <__lshift>
 800f88a:	4680      	mov	r8, r0
 800f88c:	2800      	cmp	r0, #0
 800f88e:	f43f ae46 	beq.w	800f51e <_strtod_l+0x43e>
 800f892:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f894:	9805      	ldr	r0, [sp, #20]
 800f896:	464a      	mov	r2, r9
 800f898:	f002 fff2 	bl	8012880 <__mdiff>
 800f89c:	4604      	mov	r4, r0
 800f89e:	2800      	cmp	r0, #0
 800f8a0:	f43f ae3d 	beq.w	800f51e <_strtod_l+0x43e>
 800f8a4:	68c3      	ldr	r3, [r0, #12]
 800f8a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	60c3      	str	r3, [r0, #12]
 800f8ac:	4641      	mov	r1, r8
 800f8ae:	f002 ffcb 	bl	8012848 <__mcmp>
 800f8b2:	2800      	cmp	r0, #0
 800f8b4:	da46      	bge.n	800f944 <_strtod_l+0x864>
 800f8b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f8b8:	ea53 030a 	orrs.w	r3, r3, sl
 800f8bc:	d16c      	bne.n	800f998 <_strtod_l+0x8b8>
 800f8be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d168      	bne.n	800f998 <_strtod_l+0x8b8>
 800f8c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f8ca:	0d1b      	lsrs	r3, r3, #20
 800f8cc:	051b      	lsls	r3, r3, #20
 800f8ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f8d2:	d961      	bls.n	800f998 <_strtod_l+0x8b8>
 800f8d4:	6963      	ldr	r3, [r4, #20]
 800f8d6:	b913      	cbnz	r3, 800f8de <_strtod_l+0x7fe>
 800f8d8:	6923      	ldr	r3, [r4, #16]
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	dd5c      	ble.n	800f998 <_strtod_l+0x8b8>
 800f8de:	4621      	mov	r1, r4
 800f8e0:	2201      	movs	r2, #1
 800f8e2:	9805      	ldr	r0, [sp, #20]
 800f8e4:	f002 ff44 	bl	8012770 <__lshift>
 800f8e8:	4641      	mov	r1, r8
 800f8ea:	4604      	mov	r4, r0
 800f8ec:	f002 ffac 	bl	8012848 <__mcmp>
 800f8f0:	2800      	cmp	r0, #0
 800f8f2:	dd51      	ble.n	800f998 <_strtod_l+0x8b8>
 800f8f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f8f8:	9a08      	ldr	r2, [sp, #32]
 800f8fa:	0d1b      	lsrs	r3, r3, #20
 800f8fc:	051b      	lsls	r3, r3, #20
 800f8fe:	2a00      	cmp	r2, #0
 800f900:	d06b      	beq.n	800f9da <_strtod_l+0x8fa>
 800f902:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f906:	d868      	bhi.n	800f9da <_strtod_l+0x8fa>
 800f908:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f90c:	f67f ae9d 	bls.w	800f64a <_strtod_l+0x56a>
 800f910:	4b0a      	ldr	r3, [pc, #40]	@ (800f93c <_strtod_l+0x85c>)
 800f912:	4650      	mov	r0, sl
 800f914:	4659      	mov	r1, fp
 800f916:	2200      	movs	r2, #0
 800f918:	f7f0 fe96 	bl	8000648 <__aeabi_dmul>
 800f91c:	4b08      	ldr	r3, [pc, #32]	@ (800f940 <_strtod_l+0x860>)
 800f91e:	400b      	ands	r3, r1
 800f920:	4682      	mov	sl, r0
 800f922:	468b      	mov	fp, r1
 800f924:	2b00      	cmp	r3, #0
 800f926:	f47f ae05 	bne.w	800f534 <_strtod_l+0x454>
 800f92a:	9a05      	ldr	r2, [sp, #20]
 800f92c:	2322      	movs	r3, #34	@ 0x22
 800f92e:	6013      	str	r3, [r2, #0]
 800f930:	e600      	b.n	800f534 <_strtod_l+0x454>
 800f932:	bf00      	nop
 800f934:	08014790 	.word	0x08014790
 800f938:	fffffc02 	.word	0xfffffc02
 800f93c:	39500000 	.word	0x39500000
 800f940:	7ff00000 	.word	0x7ff00000
 800f944:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f948:	d165      	bne.n	800fa16 <_strtod_l+0x936>
 800f94a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f94c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f950:	b35a      	cbz	r2, 800f9aa <_strtod_l+0x8ca>
 800f952:	4a9f      	ldr	r2, [pc, #636]	@ (800fbd0 <_strtod_l+0xaf0>)
 800f954:	4293      	cmp	r3, r2
 800f956:	d12b      	bne.n	800f9b0 <_strtod_l+0x8d0>
 800f958:	9b08      	ldr	r3, [sp, #32]
 800f95a:	4651      	mov	r1, sl
 800f95c:	b303      	cbz	r3, 800f9a0 <_strtod_l+0x8c0>
 800f95e:	4b9d      	ldr	r3, [pc, #628]	@ (800fbd4 <_strtod_l+0xaf4>)
 800f960:	465a      	mov	r2, fp
 800f962:	4013      	ands	r3, r2
 800f964:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f968:	f04f 32ff 	mov.w	r2, #4294967295
 800f96c:	d81b      	bhi.n	800f9a6 <_strtod_l+0x8c6>
 800f96e:	0d1b      	lsrs	r3, r3, #20
 800f970:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f974:	fa02 f303 	lsl.w	r3, r2, r3
 800f978:	4299      	cmp	r1, r3
 800f97a:	d119      	bne.n	800f9b0 <_strtod_l+0x8d0>
 800f97c:	4b96      	ldr	r3, [pc, #600]	@ (800fbd8 <_strtod_l+0xaf8>)
 800f97e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f980:	429a      	cmp	r2, r3
 800f982:	d102      	bne.n	800f98a <_strtod_l+0x8aa>
 800f984:	3101      	adds	r1, #1
 800f986:	f43f adca 	beq.w	800f51e <_strtod_l+0x43e>
 800f98a:	4b92      	ldr	r3, [pc, #584]	@ (800fbd4 <_strtod_l+0xaf4>)
 800f98c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f98e:	401a      	ands	r2, r3
 800f990:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f994:	f04f 0a00 	mov.w	sl, #0
 800f998:	9b08      	ldr	r3, [sp, #32]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d1b8      	bne.n	800f910 <_strtod_l+0x830>
 800f99e:	e5c9      	b.n	800f534 <_strtod_l+0x454>
 800f9a0:	f04f 33ff 	mov.w	r3, #4294967295
 800f9a4:	e7e8      	b.n	800f978 <_strtod_l+0x898>
 800f9a6:	4613      	mov	r3, r2
 800f9a8:	e7e6      	b.n	800f978 <_strtod_l+0x898>
 800f9aa:	ea53 030a 	orrs.w	r3, r3, sl
 800f9ae:	d0a1      	beq.n	800f8f4 <_strtod_l+0x814>
 800f9b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f9b2:	b1db      	cbz	r3, 800f9ec <_strtod_l+0x90c>
 800f9b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f9b6:	4213      	tst	r3, r2
 800f9b8:	d0ee      	beq.n	800f998 <_strtod_l+0x8b8>
 800f9ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9bc:	9a08      	ldr	r2, [sp, #32]
 800f9be:	4650      	mov	r0, sl
 800f9c0:	4659      	mov	r1, fp
 800f9c2:	b1bb      	cbz	r3, 800f9f4 <_strtod_l+0x914>
 800f9c4:	f7ff fb6b 	bl	800f09e <sulp>
 800f9c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f9cc:	ec53 2b10 	vmov	r2, r3, d0
 800f9d0:	f7f0 fc84 	bl	80002dc <__adddf3>
 800f9d4:	4682      	mov	sl, r0
 800f9d6:	468b      	mov	fp, r1
 800f9d8:	e7de      	b.n	800f998 <_strtod_l+0x8b8>
 800f9da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f9de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f9e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f9e6:	f04f 3aff 	mov.w	sl, #4294967295
 800f9ea:	e7d5      	b.n	800f998 <_strtod_l+0x8b8>
 800f9ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f9ee:	ea13 0f0a 	tst.w	r3, sl
 800f9f2:	e7e1      	b.n	800f9b8 <_strtod_l+0x8d8>
 800f9f4:	f7ff fb53 	bl	800f09e <sulp>
 800f9f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f9fc:	ec53 2b10 	vmov	r2, r3, d0
 800fa00:	f7f0 fc6a 	bl	80002d8 <__aeabi_dsub>
 800fa04:	2200      	movs	r2, #0
 800fa06:	2300      	movs	r3, #0
 800fa08:	4682      	mov	sl, r0
 800fa0a:	468b      	mov	fp, r1
 800fa0c:	f7f1 f884 	bl	8000b18 <__aeabi_dcmpeq>
 800fa10:	2800      	cmp	r0, #0
 800fa12:	d0c1      	beq.n	800f998 <_strtod_l+0x8b8>
 800fa14:	e619      	b.n	800f64a <_strtod_l+0x56a>
 800fa16:	4641      	mov	r1, r8
 800fa18:	4620      	mov	r0, r4
 800fa1a:	f003 f88d 	bl	8012b38 <__ratio>
 800fa1e:	ec57 6b10 	vmov	r6, r7, d0
 800fa22:	2200      	movs	r2, #0
 800fa24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fa28:	4630      	mov	r0, r6
 800fa2a:	4639      	mov	r1, r7
 800fa2c:	f7f1 f888 	bl	8000b40 <__aeabi_dcmple>
 800fa30:	2800      	cmp	r0, #0
 800fa32:	d06f      	beq.n	800fb14 <_strtod_l+0xa34>
 800fa34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d17a      	bne.n	800fb30 <_strtod_l+0xa50>
 800fa3a:	f1ba 0f00 	cmp.w	sl, #0
 800fa3e:	d158      	bne.n	800faf2 <_strtod_l+0xa12>
 800fa40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d15a      	bne.n	800fb00 <_strtod_l+0xa20>
 800fa4a:	4b64      	ldr	r3, [pc, #400]	@ (800fbdc <_strtod_l+0xafc>)
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	4630      	mov	r0, r6
 800fa50:	4639      	mov	r1, r7
 800fa52:	f7f1 f86b 	bl	8000b2c <__aeabi_dcmplt>
 800fa56:	2800      	cmp	r0, #0
 800fa58:	d159      	bne.n	800fb0e <_strtod_l+0xa2e>
 800fa5a:	4630      	mov	r0, r6
 800fa5c:	4639      	mov	r1, r7
 800fa5e:	4b60      	ldr	r3, [pc, #384]	@ (800fbe0 <_strtod_l+0xb00>)
 800fa60:	2200      	movs	r2, #0
 800fa62:	f7f0 fdf1 	bl	8000648 <__aeabi_dmul>
 800fa66:	4606      	mov	r6, r0
 800fa68:	460f      	mov	r7, r1
 800fa6a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800fa6e:	9606      	str	r6, [sp, #24]
 800fa70:	9307      	str	r3, [sp, #28]
 800fa72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fa76:	4d57      	ldr	r5, [pc, #348]	@ (800fbd4 <_strtod_l+0xaf4>)
 800fa78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fa7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa7e:	401d      	ands	r5, r3
 800fa80:	4b58      	ldr	r3, [pc, #352]	@ (800fbe4 <_strtod_l+0xb04>)
 800fa82:	429d      	cmp	r5, r3
 800fa84:	f040 80b2 	bne.w	800fbec <_strtod_l+0xb0c>
 800fa88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa8a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800fa8e:	ec4b ab10 	vmov	d0, sl, fp
 800fa92:	f002 ff89 	bl	80129a8 <__ulp>
 800fa96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fa9a:	ec51 0b10 	vmov	r0, r1, d0
 800fa9e:	f7f0 fdd3 	bl	8000648 <__aeabi_dmul>
 800faa2:	4652      	mov	r2, sl
 800faa4:	465b      	mov	r3, fp
 800faa6:	f7f0 fc19 	bl	80002dc <__adddf3>
 800faaa:	460b      	mov	r3, r1
 800faac:	4949      	ldr	r1, [pc, #292]	@ (800fbd4 <_strtod_l+0xaf4>)
 800faae:	4a4e      	ldr	r2, [pc, #312]	@ (800fbe8 <_strtod_l+0xb08>)
 800fab0:	4019      	ands	r1, r3
 800fab2:	4291      	cmp	r1, r2
 800fab4:	4682      	mov	sl, r0
 800fab6:	d942      	bls.n	800fb3e <_strtod_l+0xa5e>
 800fab8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800faba:	4b47      	ldr	r3, [pc, #284]	@ (800fbd8 <_strtod_l+0xaf8>)
 800fabc:	429a      	cmp	r2, r3
 800fabe:	d103      	bne.n	800fac8 <_strtod_l+0x9e8>
 800fac0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fac2:	3301      	adds	r3, #1
 800fac4:	f43f ad2b 	beq.w	800f51e <_strtod_l+0x43e>
 800fac8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800fbd8 <_strtod_l+0xaf8>
 800facc:	f04f 3aff 	mov.w	sl, #4294967295
 800fad0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fad2:	9805      	ldr	r0, [sp, #20]
 800fad4:	f002 fc34 	bl	8012340 <_Bfree>
 800fad8:	9805      	ldr	r0, [sp, #20]
 800fada:	4649      	mov	r1, r9
 800fadc:	f002 fc30 	bl	8012340 <_Bfree>
 800fae0:	9805      	ldr	r0, [sp, #20]
 800fae2:	4641      	mov	r1, r8
 800fae4:	f002 fc2c 	bl	8012340 <_Bfree>
 800fae8:	9805      	ldr	r0, [sp, #20]
 800faea:	4621      	mov	r1, r4
 800faec:	f002 fc28 	bl	8012340 <_Bfree>
 800faf0:	e618      	b.n	800f724 <_strtod_l+0x644>
 800faf2:	f1ba 0f01 	cmp.w	sl, #1
 800faf6:	d103      	bne.n	800fb00 <_strtod_l+0xa20>
 800faf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	f43f ada5 	beq.w	800f64a <_strtod_l+0x56a>
 800fb00:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800fbb0 <_strtod_l+0xad0>
 800fb04:	4f35      	ldr	r7, [pc, #212]	@ (800fbdc <_strtod_l+0xafc>)
 800fb06:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fb0a:	2600      	movs	r6, #0
 800fb0c:	e7b1      	b.n	800fa72 <_strtod_l+0x992>
 800fb0e:	4f34      	ldr	r7, [pc, #208]	@ (800fbe0 <_strtod_l+0xb00>)
 800fb10:	2600      	movs	r6, #0
 800fb12:	e7aa      	b.n	800fa6a <_strtod_l+0x98a>
 800fb14:	4b32      	ldr	r3, [pc, #200]	@ (800fbe0 <_strtod_l+0xb00>)
 800fb16:	4630      	mov	r0, r6
 800fb18:	4639      	mov	r1, r7
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	f7f0 fd94 	bl	8000648 <__aeabi_dmul>
 800fb20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb22:	4606      	mov	r6, r0
 800fb24:	460f      	mov	r7, r1
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d09f      	beq.n	800fa6a <_strtod_l+0x98a>
 800fb2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fb2e:	e7a0      	b.n	800fa72 <_strtod_l+0x992>
 800fb30:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fbb8 <_strtod_l+0xad8>
 800fb34:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fb38:	ec57 6b17 	vmov	r6, r7, d7
 800fb3c:	e799      	b.n	800fa72 <_strtod_l+0x992>
 800fb3e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800fb42:	9b08      	ldr	r3, [sp, #32]
 800fb44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d1c1      	bne.n	800fad0 <_strtod_l+0x9f0>
 800fb4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fb50:	0d1b      	lsrs	r3, r3, #20
 800fb52:	051b      	lsls	r3, r3, #20
 800fb54:	429d      	cmp	r5, r3
 800fb56:	d1bb      	bne.n	800fad0 <_strtod_l+0x9f0>
 800fb58:	4630      	mov	r0, r6
 800fb5a:	4639      	mov	r1, r7
 800fb5c:	f7f1 f8d4 	bl	8000d08 <__aeabi_d2lz>
 800fb60:	f7f0 fd44 	bl	80005ec <__aeabi_l2d>
 800fb64:	4602      	mov	r2, r0
 800fb66:	460b      	mov	r3, r1
 800fb68:	4630      	mov	r0, r6
 800fb6a:	4639      	mov	r1, r7
 800fb6c:	f7f0 fbb4 	bl	80002d8 <__aeabi_dsub>
 800fb70:	460b      	mov	r3, r1
 800fb72:	4602      	mov	r2, r0
 800fb74:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800fb78:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800fb7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb7e:	ea46 060a 	orr.w	r6, r6, sl
 800fb82:	431e      	orrs	r6, r3
 800fb84:	d06f      	beq.n	800fc66 <_strtod_l+0xb86>
 800fb86:	a30e      	add	r3, pc, #56	@ (adr r3, 800fbc0 <_strtod_l+0xae0>)
 800fb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb8c:	f7f0 ffce 	bl	8000b2c <__aeabi_dcmplt>
 800fb90:	2800      	cmp	r0, #0
 800fb92:	f47f accf 	bne.w	800f534 <_strtod_l+0x454>
 800fb96:	a30c      	add	r3, pc, #48	@ (adr r3, 800fbc8 <_strtod_l+0xae8>)
 800fb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fba0:	f7f0 ffe2 	bl	8000b68 <__aeabi_dcmpgt>
 800fba4:	2800      	cmp	r0, #0
 800fba6:	d093      	beq.n	800fad0 <_strtod_l+0x9f0>
 800fba8:	e4c4      	b.n	800f534 <_strtod_l+0x454>
 800fbaa:	bf00      	nop
 800fbac:	f3af 8000 	nop.w
 800fbb0:	00000000 	.word	0x00000000
 800fbb4:	bff00000 	.word	0xbff00000
 800fbb8:	00000000 	.word	0x00000000
 800fbbc:	3ff00000 	.word	0x3ff00000
 800fbc0:	94a03595 	.word	0x94a03595
 800fbc4:	3fdfffff 	.word	0x3fdfffff
 800fbc8:	35afe535 	.word	0x35afe535
 800fbcc:	3fe00000 	.word	0x3fe00000
 800fbd0:	000fffff 	.word	0x000fffff
 800fbd4:	7ff00000 	.word	0x7ff00000
 800fbd8:	7fefffff 	.word	0x7fefffff
 800fbdc:	3ff00000 	.word	0x3ff00000
 800fbe0:	3fe00000 	.word	0x3fe00000
 800fbe4:	7fe00000 	.word	0x7fe00000
 800fbe8:	7c9fffff 	.word	0x7c9fffff
 800fbec:	9b08      	ldr	r3, [sp, #32]
 800fbee:	b323      	cbz	r3, 800fc3a <_strtod_l+0xb5a>
 800fbf0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800fbf4:	d821      	bhi.n	800fc3a <_strtod_l+0xb5a>
 800fbf6:	a328      	add	r3, pc, #160	@ (adr r3, 800fc98 <_strtod_l+0xbb8>)
 800fbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfc:	4630      	mov	r0, r6
 800fbfe:	4639      	mov	r1, r7
 800fc00:	f7f0 ff9e 	bl	8000b40 <__aeabi_dcmple>
 800fc04:	b1a0      	cbz	r0, 800fc30 <_strtod_l+0xb50>
 800fc06:	4639      	mov	r1, r7
 800fc08:	4630      	mov	r0, r6
 800fc0a:	f7f0 fff5 	bl	8000bf8 <__aeabi_d2uiz>
 800fc0e:	2801      	cmp	r0, #1
 800fc10:	bf38      	it	cc
 800fc12:	2001      	movcc	r0, #1
 800fc14:	f7f0 fc9e 	bl	8000554 <__aeabi_ui2d>
 800fc18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc1a:	4606      	mov	r6, r0
 800fc1c:	460f      	mov	r7, r1
 800fc1e:	b9fb      	cbnz	r3, 800fc60 <_strtod_l+0xb80>
 800fc20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fc24:	9014      	str	r0, [sp, #80]	@ 0x50
 800fc26:	9315      	str	r3, [sp, #84]	@ 0x54
 800fc28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800fc2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fc30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fc32:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800fc36:	1b5b      	subs	r3, r3, r5
 800fc38:	9311      	str	r3, [sp, #68]	@ 0x44
 800fc3a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fc3e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800fc42:	f002 feb1 	bl	80129a8 <__ulp>
 800fc46:	4650      	mov	r0, sl
 800fc48:	ec53 2b10 	vmov	r2, r3, d0
 800fc4c:	4659      	mov	r1, fp
 800fc4e:	f7f0 fcfb 	bl	8000648 <__aeabi_dmul>
 800fc52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fc56:	f7f0 fb41 	bl	80002dc <__adddf3>
 800fc5a:	4682      	mov	sl, r0
 800fc5c:	468b      	mov	fp, r1
 800fc5e:	e770      	b.n	800fb42 <_strtod_l+0xa62>
 800fc60:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800fc64:	e7e0      	b.n	800fc28 <_strtod_l+0xb48>
 800fc66:	a30e      	add	r3, pc, #56	@ (adr r3, 800fca0 <_strtod_l+0xbc0>)
 800fc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc6c:	f7f0 ff5e 	bl	8000b2c <__aeabi_dcmplt>
 800fc70:	e798      	b.n	800fba4 <_strtod_l+0xac4>
 800fc72:	2300      	movs	r3, #0
 800fc74:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc76:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800fc78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fc7a:	6013      	str	r3, [r2, #0]
 800fc7c:	f7ff ba6d 	b.w	800f15a <_strtod_l+0x7a>
 800fc80:	2a65      	cmp	r2, #101	@ 0x65
 800fc82:	f43f ab66 	beq.w	800f352 <_strtod_l+0x272>
 800fc86:	2a45      	cmp	r2, #69	@ 0x45
 800fc88:	f43f ab63 	beq.w	800f352 <_strtod_l+0x272>
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	f7ff bb9e 	b.w	800f3ce <_strtod_l+0x2ee>
 800fc92:	bf00      	nop
 800fc94:	f3af 8000 	nop.w
 800fc98:	ffc00000 	.word	0xffc00000
 800fc9c:	41dfffff 	.word	0x41dfffff
 800fca0:	94a03595 	.word	0x94a03595
 800fca4:	3fcfffff 	.word	0x3fcfffff

0800fca8 <_strtod_r>:
 800fca8:	4b01      	ldr	r3, [pc, #4]	@ (800fcb0 <_strtod_r+0x8>)
 800fcaa:	f7ff ba19 	b.w	800f0e0 <_strtod_l>
 800fcae:	bf00      	nop
 800fcb0:	200000dc 	.word	0x200000dc

0800fcb4 <strtod>:
 800fcb4:	460a      	mov	r2, r1
 800fcb6:	4601      	mov	r1, r0
 800fcb8:	4802      	ldr	r0, [pc, #8]	@ (800fcc4 <strtod+0x10>)
 800fcba:	4b03      	ldr	r3, [pc, #12]	@ (800fcc8 <strtod+0x14>)
 800fcbc:	6800      	ldr	r0, [r0, #0]
 800fcbe:	f7ff ba0f 	b.w	800f0e0 <_strtod_l>
 800fcc2:	bf00      	nop
 800fcc4:	20000248 	.word	0x20000248
 800fcc8:	200000dc 	.word	0x200000dc

0800fccc <__cvt>:
 800fccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fcd0:	ec57 6b10 	vmov	r6, r7, d0
 800fcd4:	2f00      	cmp	r7, #0
 800fcd6:	460c      	mov	r4, r1
 800fcd8:	4619      	mov	r1, r3
 800fcda:	463b      	mov	r3, r7
 800fcdc:	bfbb      	ittet	lt
 800fcde:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fce2:	461f      	movlt	r7, r3
 800fce4:	2300      	movge	r3, #0
 800fce6:	232d      	movlt	r3, #45	@ 0x2d
 800fce8:	700b      	strb	r3, [r1, #0]
 800fcea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fcec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fcf0:	4691      	mov	r9, r2
 800fcf2:	f023 0820 	bic.w	r8, r3, #32
 800fcf6:	bfbc      	itt	lt
 800fcf8:	4632      	movlt	r2, r6
 800fcfa:	4616      	movlt	r6, r2
 800fcfc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fd00:	d005      	beq.n	800fd0e <__cvt+0x42>
 800fd02:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800fd06:	d100      	bne.n	800fd0a <__cvt+0x3e>
 800fd08:	3401      	adds	r4, #1
 800fd0a:	2102      	movs	r1, #2
 800fd0c:	e000      	b.n	800fd10 <__cvt+0x44>
 800fd0e:	2103      	movs	r1, #3
 800fd10:	ab03      	add	r3, sp, #12
 800fd12:	9301      	str	r3, [sp, #4]
 800fd14:	ab02      	add	r3, sp, #8
 800fd16:	9300      	str	r3, [sp, #0]
 800fd18:	ec47 6b10 	vmov	d0, r6, r7
 800fd1c:	4653      	mov	r3, sl
 800fd1e:	4622      	mov	r2, r4
 800fd20:	f001 f8be 	bl	8010ea0 <_dtoa_r>
 800fd24:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fd28:	4605      	mov	r5, r0
 800fd2a:	d119      	bne.n	800fd60 <__cvt+0x94>
 800fd2c:	f019 0f01 	tst.w	r9, #1
 800fd30:	d00e      	beq.n	800fd50 <__cvt+0x84>
 800fd32:	eb00 0904 	add.w	r9, r0, r4
 800fd36:	2200      	movs	r2, #0
 800fd38:	2300      	movs	r3, #0
 800fd3a:	4630      	mov	r0, r6
 800fd3c:	4639      	mov	r1, r7
 800fd3e:	f7f0 feeb 	bl	8000b18 <__aeabi_dcmpeq>
 800fd42:	b108      	cbz	r0, 800fd48 <__cvt+0x7c>
 800fd44:	f8cd 900c 	str.w	r9, [sp, #12]
 800fd48:	2230      	movs	r2, #48	@ 0x30
 800fd4a:	9b03      	ldr	r3, [sp, #12]
 800fd4c:	454b      	cmp	r3, r9
 800fd4e:	d31e      	bcc.n	800fd8e <__cvt+0xc2>
 800fd50:	9b03      	ldr	r3, [sp, #12]
 800fd52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd54:	1b5b      	subs	r3, r3, r5
 800fd56:	4628      	mov	r0, r5
 800fd58:	6013      	str	r3, [r2, #0]
 800fd5a:	b004      	add	sp, #16
 800fd5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fd64:	eb00 0904 	add.w	r9, r0, r4
 800fd68:	d1e5      	bne.n	800fd36 <__cvt+0x6a>
 800fd6a:	7803      	ldrb	r3, [r0, #0]
 800fd6c:	2b30      	cmp	r3, #48	@ 0x30
 800fd6e:	d10a      	bne.n	800fd86 <__cvt+0xba>
 800fd70:	2200      	movs	r2, #0
 800fd72:	2300      	movs	r3, #0
 800fd74:	4630      	mov	r0, r6
 800fd76:	4639      	mov	r1, r7
 800fd78:	f7f0 fece 	bl	8000b18 <__aeabi_dcmpeq>
 800fd7c:	b918      	cbnz	r0, 800fd86 <__cvt+0xba>
 800fd7e:	f1c4 0401 	rsb	r4, r4, #1
 800fd82:	f8ca 4000 	str.w	r4, [sl]
 800fd86:	f8da 3000 	ldr.w	r3, [sl]
 800fd8a:	4499      	add	r9, r3
 800fd8c:	e7d3      	b.n	800fd36 <__cvt+0x6a>
 800fd8e:	1c59      	adds	r1, r3, #1
 800fd90:	9103      	str	r1, [sp, #12]
 800fd92:	701a      	strb	r2, [r3, #0]
 800fd94:	e7d9      	b.n	800fd4a <__cvt+0x7e>

0800fd96 <__exponent>:
 800fd96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd98:	2900      	cmp	r1, #0
 800fd9a:	bfba      	itte	lt
 800fd9c:	4249      	neglt	r1, r1
 800fd9e:	232d      	movlt	r3, #45	@ 0x2d
 800fda0:	232b      	movge	r3, #43	@ 0x2b
 800fda2:	2909      	cmp	r1, #9
 800fda4:	7002      	strb	r2, [r0, #0]
 800fda6:	7043      	strb	r3, [r0, #1]
 800fda8:	dd29      	ble.n	800fdfe <__exponent+0x68>
 800fdaa:	f10d 0307 	add.w	r3, sp, #7
 800fdae:	461d      	mov	r5, r3
 800fdb0:	270a      	movs	r7, #10
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	fbb1 f6f7 	udiv	r6, r1, r7
 800fdb8:	fb07 1416 	mls	r4, r7, r6, r1
 800fdbc:	3430      	adds	r4, #48	@ 0x30
 800fdbe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fdc2:	460c      	mov	r4, r1
 800fdc4:	2c63      	cmp	r4, #99	@ 0x63
 800fdc6:	f103 33ff 	add.w	r3, r3, #4294967295
 800fdca:	4631      	mov	r1, r6
 800fdcc:	dcf1      	bgt.n	800fdb2 <__exponent+0x1c>
 800fdce:	3130      	adds	r1, #48	@ 0x30
 800fdd0:	1e94      	subs	r4, r2, #2
 800fdd2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fdd6:	1c41      	adds	r1, r0, #1
 800fdd8:	4623      	mov	r3, r4
 800fdda:	42ab      	cmp	r3, r5
 800fddc:	d30a      	bcc.n	800fdf4 <__exponent+0x5e>
 800fdde:	f10d 0309 	add.w	r3, sp, #9
 800fde2:	1a9b      	subs	r3, r3, r2
 800fde4:	42ac      	cmp	r4, r5
 800fde6:	bf88      	it	hi
 800fde8:	2300      	movhi	r3, #0
 800fdea:	3302      	adds	r3, #2
 800fdec:	4403      	add	r3, r0
 800fdee:	1a18      	subs	r0, r3, r0
 800fdf0:	b003      	add	sp, #12
 800fdf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdf4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fdf8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fdfc:	e7ed      	b.n	800fdda <__exponent+0x44>
 800fdfe:	2330      	movs	r3, #48	@ 0x30
 800fe00:	3130      	adds	r1, #48	@ 0x30
 800fe02:	7083      	strb	r3, [r0, #2]
 800fe04:	70c1      	strb	r1, [r0, #3]
 800fe06:	1d03      	adds	r3, r0, #4
 800fe08:	e7f1      	b.n	800fdee <__exponent+0x58>
	...

0800fe0c <_printf_float>:
 800fe0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe10:	b08d      	sub	sp, #52	@ 0x34
 800fe12:	460c      	mov	r4, r1
 800fe14:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fe18:	4616      	mov	r6, r2
 800fe1a:	461f      	mov	r7, r3
 800fe1c:	4605      	mov	r5, r0
 800fe1e:	f000 ff21 	bl	8010c64 <_localeconv_r>
 800fe22:	6803      	ldr	r3, [r0, #0]
 800fe24:	9304      	str	r3, [sp, #16]
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7f0 fa4a 	bl	80002c0 <strlen>
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe30:	f8d8 3000 	ldr.w	r3, [r8]
 800fe34:	9005      	str	r0, [sp, #20]
 800fe36:	3307      	adds	r3, #7
 800fe38:	f023 0307 	bic.w	r3, r3, #7
 800fe3c:	f103 0208 	add.w	r2, r3, #8
 800fe40:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fe44:	f8d4 b000 	ldr.w	fp, [r4]
 800fe48:	f8c8 2000 	str.w	r2, [r8]
 800fe4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fe50:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fe54:	9307      	str	r3, [sp, #28]
 800fe56:	f8cd 8018 	str.w	r8, [sp, #24]
 800fe5a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fe5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe62:	4b9c      	ldr	r3, [pc, #624]	@ (80100d4 <_printf_float+0x2c8>)
 800fe64:	f04f 32ff 	mov.w	r2, #4294967295
 800fe68:	f7f0 fe88 	bl	8000b7c <__aeabi_dcmpun>
 800fe6c:	bb70      	cbnz	r0, 800fecc <_printf_float+0xc0>
 800fe6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe72:	4b98      	ldr	r3, [pc, #608]	@ (80100d4 <_printf_float+0x2c8>)
 800fe74:	f04f 32ff 	mov.w	r2, #4294967295
 800fe78:	f7f0 fe62 	bl	8000b40 <__aeabi_dcmple>
 800fe7c:	bb30      	cbnz	r0, 800fecc <_printf_float+0xc0>
 800fe7e:	2200      	movs	r2, #0
 800fe80:	2300      	movs	r3, #0
 800fe82:	4640      	mov	r0, r8
 800fe84:	4649      	mov	r1, r9
 800fe86:	f7f0 fe51 	bl	8000b2c <__aeabi_dcmplt>
 800fe8a:	b110      	cbz	r0, 800fe92 <_printf_float+0x86>
 800fe8c:	232d      	movs	r3, #45	@ 0x2d
 800fe8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe92:	4a91      	ldr	r2, [pc, #580]	@ (80100d8 <_printf_float+0x2cc>)
 800fe94:	4b91      	ldr	r3, [pc, #580]	@ (80100dc <_printf_float+0x2d0>)
 800fe96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fe9a:	bf94      	ite	ls
 800fe9c:	4690      	movls	r8, r2
 800fe9e:	4698      	movhi	r8, r3
 800fea0:	2303      	movs	r3, #3
 800fea2:	6123      	str	r3, [r4, #16]
 800fea4:	f02b 0304 	bic.w	r3, fp, #4
 800fea8:	6023      	str	r3, [r4, #0]
 800feaa:	f04f 0900 	mov.w	r9, #0
 800feae:	9700      	str	r7, [sp, #0]
 800feb0:	4633      	mov	r3, r6
 800feb2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800feb4:	4621      	mov	r1, r4
 800feb6:	4628      	mov	r0, r5
 800feb8:	f000 f9d2 	bl	8010260 <_printf_common>
 800febc:	3001      	adds	r0, #1
 800febe:	f040 808d 	bne.w	800ffdc <_printf_float+0x1d0>
 800fec2:	f04f 30ff 	mov.w	r0, #4294967295
 800fec6:	b00d      	add	sp, #52	@ 0x34
 800fec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fecc:	4642      	mov	r2, r8
 800fece:	464b      	mov	r3, r9
 800fed0:	4640      	mov	r0, r8
 800fed2:	4649      	mov	r1, r9
 800fed4:	f7f0 fe52 	bl	8000b7c <__aeabi_dcmpun>
 800fed8:	b140      	cbz	r0, 800feec <_printf_float+0xe0>
 800feda:	464b      	mov	r3, r9
 800fedc:	2b00      	cmp	r3, #0
 800fede:	bfbc      	itt	lt
 800fee0:	232d      	movlt	r3, #45	@ 0x2d
 800fee2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fee6:	4a7e      	ldr	r2, [pc, #504]	@ (80100e0 <_printf_float+0x2d4>)
 800fee8:	4b7e      	ldr	r3, [pc, #504]	@ (80100e4 <_printf_float+0x2d8>)
 800feea:	e7d4      	b.n	800fe96 <_printf_float+0x8a>
 800feec:	6863      	ldr	r3, [r4, #4]
 800feee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fef2:	9206      	str	r2, [sp, #24]
 800fef4:	1c5a      	adds	r2, r3, #1
 800fef6:	d13b      	bne.n	800ff70 <_printf_float+0x164>
 800fef8:	2306      	movs	r3, #6
 800fefa:	6063      	str	r3, [r4, #4]
 800fefc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ff00:	2300      	movs	r3, #0
 800ff02:	6022      	str	r2, [r4, #0]
 800ff04:	9303      	str	r3, [sp, #12]
 800ff06:	ab0a      	add	r3, sp, #40	@ 0x28
 800ff08:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ff0c:	ab09      	add	r3, sp, #36	@ 0x24
 800ff0e:	9300      	str	r3, [sp, #0]
 800ff10:	6861      	ldr	r1, [r4, #4]
 800ff12:	ec49 8b10 	vmov	d0, r8, r9
 800ff16:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ff1a:	4628      	mov	r0, r5
 800ff1c:	f7ff fed6 	bl	800fccc <__cvt>
 800ff20:	9b06      	ldr	r3, [sp, #24]
 800ff22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ff24:	2b47      	cmp	r3, #71	@ 0x47
 800ff26:	4680      	mov	r8, r0
 800ff28:	d129      	bne.n	800ff7e <_printf_float+0x172>
 800ff2a:	1cc8      	adds	r0, r1, #3
 800ff2c:	db02      	blt.n	800ff34 <_printf_float+0x128>
 800ff2e:	6863      	ldr	r3, [r4, #4]
 800ff30:	4299      	cmp	r1, r3
 800ff32:	dd41      	ble.n	800ffb8 <_printf_float+0x1ac>
 800ff34:	f1aa 0a02 	sub.w	sl, sl, #2
 800ff38:	fa5f fa8a 	uxtb.w	sl, sl
 800ff3c:	3901      	subs	r1, #1
 800ff3e:	4652      	mov	r2, sl
 800ff40:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ff44:	9109      	str	r1, [sp, #36]	@ 0x24
 800ff46:	f7ff ff26 	bl	800fd96 <__exponent>
 800ff4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ff4c:	1813      	adds	r3, r2, r0
 800ff4e:	2a01      	cmp	r2, #1
 800ff50:	4681      	mov	r9, r0
 800ff52:	6123      	str	r3, [r4, #16]
 800ff54:	dc02      	bgt.n	800ff5c <_printf_float+0x150>
 800ff56:	6822      	ldr	r2, [r4, #0]
 800ff58:	07d2      	lsls	r2, r2, #31
 800ff5a:	d501      	bpl.n	800ff60 <_printf_float+0x154>
 800ff5c:	3301      	adds	r3, #1
 800ff5e:	6123      	str	r3, [r4, #16]
 800ff60:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d0a2      	beq.n	800feae <_printf_float+0xa2>
 800ff68:	232d      	movs	r3, #45	@ 0x2d
 800ff6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ff6e:	e79e      	b.n	800feae <_printf_float+0xa2>
 800ff70:	9a06      	ldr	r2, [sp, #24]
 800ff72:	2a47      	cmp	r2, #71	@ 0x47
 800ff74:	d1c2      	bne.n	800fefc <_printf_float+0xf0>
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d1c0      	bne.n	800fefc <_printf_float+0xf0>
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	e7bd      	b.n	800fefa <_printf_float+0xee>
 800ff7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ff82:	d9db      	bls.n	800ff3c <_printf_float+0x130>
 800ff84:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ff88:	d118      	bne.n	800ffbc <_printf_float+0x1b0>
 800ff8a:	2900      	cmp	r1, #0
 800ff8c:	6863      	ldr	r3, [r4, #4]
 800ff8e:	dd0b      	ble.n	800ffa8 <_printf_float+0x19c>
 800ff90:	6121      	str	r1, [r4, #16]
 800ff92:	b913      	cbnz	r3, 800ff9a <_printf_float+0x18e>
 800ff94:	6822      	ldr	r2, [r4, #0]
 800ff96:	07d0      	lsls	r0, r2, #31
 800ff98:	d502      	bpl.n	800ffa0 <_printf_float+0x194>
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	440b      	add	r3, r1
 800ff9e:	6123      	str	r3, [r4, #16]
 800ffa0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ffa2:	f04f 0900 	mov.w	r9, #0
 800ffa6:	e7db      	b.n	800ff60 <_printf_float+0x154>
 800ffa8:	b913      	cbnz	r3, 800ffb0 <_printf_float+0x1a4>
 800ffaa:	6822      	ldr	r2, [r4, #0]
 800ffac:	07d2      	lsls	r2, r2, #31
 800ffae:	d501      	bpl.n	800ffb4 <_printf_float+0x1a8>
 800ffb0:	3302      	adds	r3, #2
 800ffb2:	e7f4      	b.n	800ff9e <_printf_float+0x192>
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	e7f2      	b.n	800ff9e <_printf_float+0x192>
 800ffb8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ffbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffbe:	4299      	cmp	r1, r3
 800ffc0:	db05      	blt.n	800ffce <_printf_float+0x1c2>
 800ffc2:	6823      	ldr	r3, [r4, #0]
 800ffc4:	6121      	str	r1, [r4, #16]
 800ffc6:	07d8      	lsls	r0, r3, #31
 800ffc8:	d5ea      	bpl.n	800ffa0 <_printf_float+0x194>
 800ffca:	1c4b      	adds	r3, r1, #1
 800ffcc:	e7e7      	b.n	800ff9e <_printf_float+0x192>
 800ffce:	2900      	cmp	r1, #0
 800ffd0:	bfd4      	ite	le
 800ffd2:	f1c1 0202 	rsble	r2, r1, #2
 800ffd6:	2201      	movgt	r2, #1
 800ffd8:	4413      	add	r3, r2
 800ffda:	e7e0      	b.n	800ff9e <_printf_float+0x192>
 800ffdc:	6823      	ldr	r3, [r4, #0]
 800ffde:	055a      	lsls	r2, r3, #21
 800ffe0:	d407      	bmi.n	800fff2 <_printf_float+0x1e6>
 800ffe2:	6923      	ldr	r3, [r4, #16]
 800ffe4:	4642      	mov	r2, r8
 800ffe6:	4631      	mov	r1, r6
 800ffe8:	4628      	mov	r0, r5
 800ffea:	47b8      	blx	r7
 800ffec:	3001      	adds	r0, #1
 800ffee:	d12b      	bne.n	8010048 <_printf_float+0x23c>
 800fff0:	e767      	b.n	800fec2 <_printf_float+0xb6>
 800fff2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fff6:	f240 80dd 	bls.w	80101b4 <_printf_float+0x3a8>
 800fffa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fffe:	2200      	movs	r2, #0
 8010000:	2300      	movs	r3, #0
 8010002:	f7f0 fd89 	bl	8000b18 <__aeabi_dcmpeq>
 8010006:	2800      	cmp	r0, #0
 8010008:	d033      	beq.n	8010072 <_printf_float+0x266>
 801000a:	4a37      	ldr	r2, [pc, #220]	@ (80100e8 <_printf_float+0x2dc>)
 801000c:	2301      	movs	r3, #1
 801000e:	4631      	mov	r1, r6
 8010010:	4628      	mov	r0, r5
 8010012:	47b8      	blx	r7
 8010014:	3001      	adds	r0, #1
 8010016:	f43f af54 	beq.w	800fec2 <_printf_float+0xb6>
 801001a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801001e:	4543      	cmp	r3, r8
 8010020:	db02      	blt.n	8010028 <_printf_float+0x21c>
 8010022:	6823      	ldr	r3, [r4, #0]
 8010024:	07d8      	lsls	r0, r3, #31
 8010026:	d50f      	bpl.n	8010048 <_printf_float+0x23c>
 8010028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801002c:	4631      	mov	r1, r6
 801002e:	4628      	mov	r0, r5
 8010030:	47b8      	blx	r7
 8010032:	3001      	adds	r0, #1
 8010034:	f43f af45 	beq.w	800fec2 <_printf_float+0xb6>
 8010038:	f04f 0900 	mov.w	r9, #0
 801003c:	f108 38ff 	add.w	r8, r8, #4294967295
 8010040:	f104 0a1a 	add.w	sl, r4, #26
 8010044:	45c8      	cmp	r8, r9
 8010046:	dc09      	bgt.n	801005c <_printf_float+0x250>
 8010048:	6823      	ldr	r3, [r4, #0]
 801004a:	079b      	lsls	r3, r3, #30
 801004c:	f100 8103 	bmi.w	8010256 <_printf_float+0x44a>
 8010050:	68e0      	ldr	r0, [r4, #12]
 8010052:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010054:	4298      	cmp	r0, r3
 8010056:	bfb8      	it	lt
 8010058:	4618      	movlt	r0, r3
 801005a:	e734      	b.n	800fec6 <_printf_float+0xba>
 801005c:	2301      	movs	r3, #1
 801005e:	4652      	mov	r2, sl
 8010060:	4631      	mov	r1, r6
 8010062:	4628      	mov	r0, r5
 8010064:	47b8      	blx	r7
 8010066:	3001      	adds	r0, #1
 8010068:	f43f af2b 	beq.w	800fec2 <_printf_float+0xb6>
 801006c:	f109 0901 	add.w	r9, r9, #1
 8010070:	e7e8      	b.n	8010044 <_printf_float+0x238>
 8010072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010074:	2b00      	cmp	r3, #0
 8010076:	dc39      	bgt.n	80100ec <_printf_float+0x2e0>
 8010078:	4a1b      	ldr	r2, [pc, #108]	@ (80100e8 <_printf_float+0x2dc>)
 801007a:	2301      	movs	r3, #1
 801007c:	4631      	mov	r1, r6
 801007e:	4628      	mov	r0, r5
 8010080:	47b8      	blx	r7
 8010082:	3001      	adds	r0, #1
 8010084:	f43f af1d 	beq.w	800fec2 <_printf_float+0xb6>
 8010088:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801008c:	ea59 0303 	orrs.w	r3, r9, r3
 8010090:	d102      	bne.n	8010098 <_printf_float+0x28c>
 8010092:	6823      	ldr	r3, [r4, #0]
 8010094:	07d9      	lsls	r1, r3, #31
 8010096:	d5d7      	bpl.n	8010048 <_printf_float+0x23c>
 8010098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801009c:	4631      	mov	r1, r6
 801009e:	4628      	mov	r0, r5
 80100a0:	47b8      	blx	r7
 80100a2:	3001      	adds	r0, #1
 80100a4:	f43f af0d 	beq.w	800fec2 <_printf_float+0xb6>
 80100a8:	f04f 0a00 	mov.w	sl, #0
 80100ac:	f104 0b1a 	add.w	fp, r4, #26
 80100b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100b2:	425b      	negs	r3, r3
 80100b4:	4553      	cmp	r3, sl
 80100b6:	dc01      	bgt.n	80100bc <_printf_float+0x2b0>
 80100b8:	464b      	mov	r3, r9
 80100ba:	e793      	b.n	800ffe4 <_printf_float+0x1d8>
 80100bc:	2301      	movs	r3, #1
 80100be:	465a      	mov	r2, fp
 80100c0:	4631      	mov	r1, r6
 80100c2:	4628      	mov	r0, r5
 80100c4:	47b8      	blx	r7
 80100c6:	3001      	adds	r0, #1
 80100c8:	f43f aefb 	beq.w	800fec2 <_printf_float+0xb6>
 80100cc:	f10a 0a01 	add.w	sl, sl, #1
 80100d0:	e7ee      	b.n	80100b0 <_printf_float+0x2a4>
 80100d2:	bf00      	nop
 80100d4:	7fefffff 	.word	0x7fefffff
 80100d8:	080147b8 	.word	0x080147b8
 80100dc:	080147bc 	.word	0x080147bc
 80100e0:	080147c0 	.word	0x080147c0
 80100e4:	080147c4 	.word	0x080147c4
 80100e8:	080147c8 	.word	0x080147c8
 80100ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80100ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80100f2:	4553      	cmp	r3, sl
 80100f4:	bfa8      	it	ge
 80100f6:	4653      	movge	r3, sl
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	4699      	mov	r9, r3
 80100fc:	dc36      	bgt.n	801016c <_printf_float+0x360>
 80100fe:	f04f 0b00 	mov.w	fp, #0
 8010102:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010106:	f104 021a 	add.w	r2, r4, #26
 801010a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801010c:	9306      	str	r3, [sp, #24]
 801010e:	eba3 0309 	sub.w	r3, r3, r9
 8010112:	455b      	cmp	r3, fp
 8010114:	dc31      	bgt.n	801017a <_printf_float+0x36e>
 8010116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010118:	459a      	cmp	sl, r3
 801011a:	dc3a      	bgt.n	8010192 <_printf_float+0x386>
 801011c:	6823      	ldr	r3, [r4, #0]
 801011e:	07da      	lsls	r2, r3, #31
 8010120:	d437      	bmi.n	8010192 <_printf_float+0x386>
 8010122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010124:	ebaa 0903 	sub.w	r9, sl, r3
 8010128:	9b06      	ldr	r3, [sp, #24]
 801012a:	ebaa 0303 	sub.w	r3, sl, r3
 801012e:	4599      	cmp	r9, r3
 8010130:	bfa8      	it	ge
 8010132:	4699      	movge	r9, r3
 8010134:	f1b9 0f00 	cmp.w	r9, #0
 8010138:	dc33      	bgt.n	80101a2 <_printf_float+0x396>
 801013a:	f04f 0800 	mov.w	r8, #0
 801013e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010142:	f104 0b1a 	add.w	fp, r4, #26
 8010146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010148:	ebaa 0303 	sub.w	r3, sl, r3
 801014c:	eba3 0309 	sub.w	r3, r3, r9
 8010150:	4543      	cmp	r3, r8
 8010152:	f77f af79 	ble.w	8010048 <_printf_float+0x23c>
 8010156:	2301      	movs	r3, #1
 8010158:	465a      	mov	r2, fp
 801015a:	4631      	mov	r1, r6
 801015c:	4628      	mov	r0, r5
 801015e:	47b8      	blx	r7
 8010160:	3001      	adds	r0, #1
 8010162:	f43f aeae 	beq.w	800fec2 <_printf_float+0xb6>
 8010166:	f108 0801 	add.w	r8, r8, #1
 801016a:	e7ec      	b.n	8010146 <_printf_float+0x33a>
 801016c:	4642      	mov	r2, r8
 801016e:	4631      	mov	r1, r6
 8010170:	4628      	mov	r0, r5
 8010172:	47b8      	blx	r7
 8010174:	3001      	adds	r0, #1
 8010176:	d1c2      	bne.n	80100fe <_printf_float+0x2f2>
 8010178:	e6a3      	b.n	800fec2 <_printf_float+0xb6>
 801017a:	2301      	movs	r3, #1
 801017c:	4631      	mov	r1, r6
 801017e:	4628      	mov	r0, r5
 8010180:	9206      	str	r2, [sp, #24]
 8010182:	47b8      	blx	r7
 8010184:	3001      	adds	r0, #1
 8010186:	f43f ae9c 	beq.w	800fec2 <_printf_float+0xb6>
 801018a:	9a06      	ldr	r2, [sp, #24]
 801018c:	f10b 0b01 	add.w	fp, fp, #1
 8010190:	e7bb      	b.n	801010a <_printf_float+0x2fe>
 8010192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010196:	4631      	mov	r1, r6
 8010198:	4628      	mov	r0, r5
 801019a:	47b8      	blx	r7
 801019c:	3001      	adds	r0, #1
 801019e:	d1c0      	bne.n	8010122 <_printf_float+0x316>
 80101a0:	e68f      	b.n	800fec2 <_printf_float+0xb6>
 80101a2:	9a06      	ldr	r2, [sp, #24]
 80101a4:	464b      	mov	r3, r9
 80101a6:	4442      	add	r2, r8
 80101a8:	4631      	mov	r1, r6
 80101aa:	4628      	mov	r0, r5
 80101ac:	47b8      	blx	r7
 80101ae:	3001      	adds	r0, #1
 80101b0:	d1c3      	bne.n	801013a <_printf_float+0x32e>
 80101b2:	e686      	b.n	800fec2 <_printf_float+0xb6>
 80101b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80101b8:	f1ba 0f01 	cmp.w	sl, #1
 80101bc:	dc01      	bgt.n	80101c2 <_printf_float+0x3b6>
 80101be:	07db      	lsls	r3, r3, #31
 80101c0:	d536      	bpl.n	8010230 <_printf_float+0x424>
 80101c2:	2301      	movs	r3, #1
 80101c4:	4642      	mov	r2, r8
 80101c6:	4631      	mov	r1, r6
 80101c8:	4628      	mov	r0, r5
 80101ca:	47b8      	blx	r7
 80101cc:	3001      	adds	r0, #1
 80101ce:	f43f ae78 	beq.w	800fec2 <_printf_float+0xb6>
 80101d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101d6:	4631      	mov	r1, r6
 80101d8:	4628      	mov	r0, r5
 80101da:	47b8      	blx	r7
 80101dc:	3001      	adds	r0, #1
 80101de:	f43f ae70 	beq.w	800fec2 <_printf_float+0xb6>
 80101e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80101e6:	2200      	movs	r2, #0
 80101e8:	2300      	movs	r3, #0
 80101ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80101ee:	f7f0 fc93 	bl	8000b18 <__aeabi_dcmpeq>
 80101f2:	b9c0      	cbnz	r0, 8010226 <_printf_float+0x41a>
 80101f4:	4653      	mov	r3, sl
 80101f6:	f108 0201 	add.w	r2, r8, #1
 80101fa:	4631      	mov	r1, r6
 80101fc:	4628      	mov	r0, r5
 80101fe:	47b8      	blx	r7
 8010200:	3001      	adds	r0, #1
 8010202:	d10c      	bne.n	801021e <_printf_float+0x412>
 8010204:	e65d      	b.n	800fec2 <_printf_float+0xb6>
 8010206:	2301      	movs	r3, #1
 8010208:	465a      	mov	r2, fp
 801020a:	4631      	mov	r1, r6
 801020c:	4628      	mov	r0, r5
 801020e:	47b8      	blx	r7
 8010210:	3001      	adds	r0, #1
 8010212:	f43f ae56 	beq.w	800fec2 <_printf_float+0xb6>
 8010216:	f108 0801 	add.w	r8, r8, #1
 801021a:	45d0      	cmp	r8, sl
 801021c:	dbf3      	blt.n	8010206 <_printf_float+0x3fa>
 801021e:	464b      	mov	r3, r9
 8010220:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010224:	e6df      	b.n	800ffe6 <_printf_float+0x1da>
 8010226:	f04f 0800 	mov.w	r8, #0
 801022a:	f104 0b1a 	add.w	fp, r4, #26
 801022e:	e7f4      	b.n	801021a <_printf_float+0x40e>
 8010230:	2301      	movs	r3, #1
 8010232:	4642      	mov	r2, r8
 8010234:	e7e1      	b.n	80101fa <_printf_float+0x3ee>
 8010236:	2301      	movs	r3, #1
 8010238:	464a      	mov	r2, r9
 801023a:	4631      	mov	r1, r6
 801023c:	4628      	mov	r0, r5
 801023e:	47b8      	blx	r7
 8010240:	3001      	adds	r0, #1
 8010242:	f43f ae3e 	beq.w	800fec2 <_printf_float+0xb6>
 8010246:	f108 0801 	add.w	r8, r8, #1
 801024a:	68e3      	ldr	r3, [r4, #12]
 801024c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801024e:	1a5b      	subs	r3, r3, r1
 8010250:	4543      	cmp	r3, r8
 8010252:	dcf0      	bgt.n	8010236 <_printf_float+0x42a>
 8010254:	e6fc      	b.n	8010050 <_printf_float+0x244>
 8010256:	f04f 0800 	mov.w	r8, #0
 801025a:	f104 0919 	add.w	r9, r4, #25
 801025e:	e7f4      	b.n	801024a <_printf_float+0x43e>

08010260 <_printf_common>:
 8010260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010264:	4616      	mov	r6, r2
 8010266:	4698      	mov	r8, r3
 8010268:	688a      	ldr	r2, [r1, #8]
 801026a:	690b      	ldr	r3, [r1, #16]
 801026c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010270:	4293      	cmp	r3, r2
 8010272:	bfb8      	it	lt
 8010274:	4613      	movlt	r3, r2
 8010276:	6033      	str	r3, [r6, #0]
 8010278:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801027c:	4607      	mov	r7, r0
 801027e:	460c      	mov	r4, r1
 8010280:	b10a      	cbz	r2, 8010286 <_printf_common+0x26>
 8010282:	3301      	adds	r3, #1
 8010284:	6033      	str	r3, [r6, #0]
 8010286:	6823      	ldr	r3, [r4, #0]
 8010288:	0699      	lsls	r1, r3, #26
 801028a:	bf42      	ittt	mi
 801028c:	6833      	ldrmi	r3, [r6, #0]
 801028e:	3302      	addmi	r3, #2
 8010290:	6033      	strmi	r3, [r6, #0]
 8010292:	6825      	ldr	r5, [r4, #0]
 8010294:	f015 0506 	ands.w	r5, r5, #6
 8010298:	d106      	bne.n	80102a8 <_printf_common+0x48>
 801029a:	f104 0a19 	add.w	sl, r4, #25
 801029e:	68e3      	ldr	r3, [r4, #12]
 80102a0:	6832      	ldr	r2, [r6, #0]
 80102a2:	1a9b      	subs	r3, r3, r2
 80102a4:	42ab      	cmp	r3, r5
 80102a6:	dc26      	bgt.n	80102f6 <_printf_common+0x96>
 80102a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80102ac:	6822      	ldr	r2, [r4, #0]
 80102ae:	3b00      	subs	r3, #0
 80102b0:	bf18      	it	ne
 80102b2:	2301      	movne	r3, #1
 80102b4:	0692      	lsls	r2, r2, #26
 80102b6:	d42b      	bmi.n	8010310 <_printf_common+0xb0>
 80102b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80102bc:	4641      	mov	r1, r8
 80102be:	4638      	mov	r0, r7
 80102c0:	47c8      	blx	r9
 80102c2:	3001      	adds	r0, #1
 80102c4:	d01e      	beq.n	8010304 <_printf_common+0xa4>
 80102c6:	6823      	ldr	r3, [r4, #0]
 80102c8:	6922      	ldr	r2, [r4, #16]
 80102ca:	f003 0306 	and.w	r3, r3, #6
 80102ce:	2b04      	cmp	r3, #4
 80102d0:	bf02      	ittt	eq
 80102d2:	68e5      	ldreq	r5, [r4, #12]
 80102d4:	6833      	ldreq	r3, [r6, #0]
 80102d6:	1aed      	subeq	r5, r5, r3
 80102d8:	68a3      	ldr	r3, [r4, #8]
 80102da:	bf0c      	ite	eq
 80102dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80102e0:	2500      	movne	r5, #0
 80102e2:	4293      	cmp	r3, r2
 80102e4:	bfc4      	itt	gt
 80102e6:	1a9b      	subgt	r3, r3, r2
 80102e8:	18ed      	addgt	r5, r5, r3
 80102ea:	2600      	movs	r6, #0
 80102ec:	341a      	adds	r4, #26
 80102ee:	42b5      	cmp	r5, r6
 80102f0:	d11a      	bne.n	8010328 <_printf_common+0xc8>
 80102f2:	2000      	movs	r0, #0
 80102f4:	e008      	b.n	8010308 <_printf_common+0xa8>
 80102f6:	2301      	movs	r3, #1
 80102f8:	4652      	mov	r2, sl
 80102fa:	4641      	mov	r1, r8
 80102fc:	4638      	mov	r0, r7
 80102fe:	47c8      	blx	r9
 8010300:	3001      	adds	r0, #1
 8010302:	d103      	bne.n	801030c <_printf_common+0xac>
 8010304:	f04f 30ff 	mov.w	r0, #4294967295
 8010308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801030c:	3501      	adds	r5, #1
 801030e:	e7c6      	b.n	801029e <_printf_common+0x3e>
 8010310:	18e1      	adds	r1, r4, r3
 8010312:	1c5a      	adds	r2, r3, #1
 8010314:	2030      	movs	r0, #48	@ 0x30
 8010316:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801031a:	4422      	add	r2, r4
 801031c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010320:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010324:	3302      	adds	r3, #2
 8010326:	e7c7      	b.n	80102b8 <_printf_common+0x58>
 8010328:	2301      	movs	r3, #1
 801032a:	4622      	mov	r2, r4
 801032c:	4641      	mov	r1, r8
 801032e:	4638      	mov	r0, r7
 8010330:	47c8      	blx	r9
 8010332:	3001      	adds	r0, #1
 8010334:	d0e6      	beq.n	8010304 <_printf_common+0xa4>
 8010336:	3601      	adds	r6, #1
 8010338:	e7d9      	b.n	80102ee <_printf_common+0x8e>
	...

0801033c <_printf_i>:
 801033c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010340:	7e0f      	ldrb	r7, [r1, #24]
 8010342:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010344:	2f78      	cmp	r7, #120	@ 0x78
 8010346:	4691      	mov	r9, r2
 8010348:	4680      	mov	r8, r0
 801034a:	460c      	mov	r4, r1
 801034c:	469a      	mov	sl, r3
 801034e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010352:	d807      	bhi.n	8010364 <_printf_i+0x28>
 8010354:	2f62      	cmp	r7, #98	@ 0x62
 8010356:	d80a      	bhi.n	801036e <_printf_i+0x32>
 8010358:	2f00      	cmp	r7, #0
 801035a:	f000 80d2 	beq.w	8010502 <_printf_i+0x1c6>
 801035e:	2f58      	cmp	r7, #88	@ 0x58
 8010360:	f000 80b9 	beq.w	80104d6 <_printf_i+0x19a>
 8010364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010368:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801036c:	e03a      	b.n	80103e4 <_printf_i+0xa8>
 801036e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010372:	2b15      	cmp	r3, #21
 8010374:	d8f6      	bhi.n	8010364 <_printf_i+0x28>
 8010376:	a101      	add	r1, pc, #4	@ (adr r1, 801037c <_printf_i+0x40>)
 8010378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801037c:	080103d5 	.word	0x080103d5
 8010380:	080103e9 	.word	0x080103e9
 8010384:	08010365 	.word	0x08010365
 8010388:	08010365 	.word	0x08010365
 801038c:	08010365 	.word	0x08010365
 8010390:	08010365 	.word	0x08010365
 8010394:	080103e9 	.word	0x080103e9
 8010398:	08010365 	.word	0x08010365
 801039c:	08010365 	.word	0x08010365
 80103a0:	08010365 	.word	0x08010365
 80103a4:	08010365 	.word	0x08010365
 80103a8:	080104e9 	.word	0x080104e9
 80103ac:	08010413 	.word	0x08010413
 80103b0:	080104a3 	.word	0x080104a3
 80103b4:	08010365 	.word	0x08010365
 80103b8:	08010365 	.word	0x08010365
 80103bc:	0801050b 	.word	0x0801050b
 80103c0:	08010365 	.word	0x08010365
 80103c4:	08010413 	.word	0x08010413
 80103c8:	08010365 	.word	0x08010365
 80103cc:	08010365 	.word	0x08010365
 80103d0:	080104ab 	.word	0x080104ab
 80103d4:	6833      	ldr	r3, [r6, #0]
 80103d6:	1d1a      	adds	r2, r3, #4
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	6032      	str	r2, [r6, #0]
 80103dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80103e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80103e4:	2301      	movs	r3, #1
 80103e6:	e09d      	b.n	8010524 <_printf_i+0x1e8>
 80103e8:	6833      	ldr	r3, [r6, #0]
 80103ea:	6820      	ldr	r0, [r4, #0]
 80103ec:	1d19      	adds	r1, r3, #4
 80103ee:	6031      	str	r1, [r6, #0]
 80103f0:	0606      	lsls	r6, r0, #24
 80103f2:	d501      	bpl.n	80103f8 <_printf_i+0xbc>
 80103f4:	681d      	ldr	r5, [r3, #0]
 80103f6:	e003      	b.n	8010400 <_printf_i+0xc4>
 80103f8:	0645      	lsls	r5, r0, #25
 80103fa:	d5fb      	bpl.n	80103f4 <_printf_i+0xb8>
 80103fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010400:	2d00      	cmp	r5, #0
 8010402:	da03      	bge.n	801040c <_printf_i+0xd0>
 8010404:	232d      	movs	r3, #45	@ 0x2d
 8010406:	426d      	negs	r5, r5
 8010408:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801040c:	4859      	ldr	r0, [pc, #356]	@ (8010574 <_printf_i+0x238>)
 801040e:	230a      	movs	r3, #10
 8010410:	e011      	b.n	8010436 <_printf_i+0xfa>
 8010412:	6821      	ldr	r1, [r4, #0]
 8010414:	6833      	ldr	r3, [r6, #0]
 8010416:	0608      	lsls	r0, r1, #24
 8010418:	f853 5b04 	ldr.w	r5, [r3], #4
 801041c:	d402      	bmi.n	8010424 <_printf_i+0xe8>
 801041e:	0649      	lsls	r1, r1, #25
 8010420:	bf48      	it	mi
 8010422:	b2ad      	uxthmi	r5, r5
 8010424:	2f6f      	cmp	r7, #111	@ 0x6f
 8010426:	4853      	ldr	r0, [pc, #332]	@ (8010574 <_printf_i+0x238>)
 8010428:	6033      	str	r3, [r6, #0]
 801042a:	bf14      	ite	ne
 801042c:	230a      	movne	r3, #10
 801042e:	2308      	moveq	r3, #8
 8010430:	2100      	movs	r1, #0
 8010432:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010436:	6866      	ldr	r6, [r4, #4]
 8010438:	60a6      	str	r6, [r4, #8]
 801043a:	2e00      	cmp	r6, #0
 801043c:	bfa2      	ittt	ge
 801043e:	6821      	ldrge	r1, [r4, #0]
 8010440:	f021 0104 	bicge.w	r1, r1, #4
 8010444:	6021      	strge	r1, [r4, #0]
 8010446:	b90d      	cbnz	r5, 801044c <_printf_i+0x110>
 8010448:	2e00      	cmp	r6, #0
 801044a:	d04b      	beq.n	80104e4 <_printf_i+0x1a8>
 801044c:	4616      	mov	r6, r2
 801044e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010452:	fb03 5711 	mls	r7, r3, r1, r5
 8010456:	5dc7      	ldrb	r7, [r0, r7]
 8010458:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801045c:	462f      	mov	r7, r5
 801045e:	42bb      	cmp	r3, r7
 8010460:	460d      	mov	r5, r1
 8010462:	d9f4      	bls.n	801044e <_printf_i+0x112>
 8010464:	2b08      	cmp	r3, #8
 8010466:	d10b      	bne.n	8010480 <_printf_i+0x144>
 8010468:	6823      	ldr	r3, [r4, #0]
 801046a:	07df      	lsls	r7, r3, #31
 801046c:	d508      	bpl.n	8010480 <_printf_i+0x144>
 801046e:	6923      	ldr	r3, [r4, #16]
 8010470:	6861      	ldr	r1, [r4, #4]
 8010472:	4299      	cmp	r1, r3
 8010474:	bfde      	ittt	le
 8010476:	2330      	movle	r3, #48	@ 0x30
 8010478:	f806 3c01 	strble.w	r3, [r6, #-1]
 801047c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010480:	1b92      	subs	r2, r2, r6
 8010482:	6122      	str	r2, [r4, #16]
 8010484:	f8cd a000 	str.w	sl, [sp]
 8010488:	464b      	mov	r3, r9
 801048a:	aa03      	add	r2, sp, #12
 801048c:	4621      	mov	r1, r4
 801048e:	4640      	mov	r0, r8
 8010490:	f7ff fee6 	bl	8010260 <_printf_common>
 8010494:	3001      	adds	r0, #1
 8010496:	d14a      	bne.n	801052e <_printf_i+0x1f2>
 8010498:	f04f 30ff 	mov.w	r0, #4294967295
 801049c:	b004      	add	sp, #16
 801049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104a2:	6823      	ldr	r3, [r4, #0]
 80104a4:	f043 0320 	orr.w	r3, r3, #32
 80104a8:	6023      	str	r3, [r4, #0]
 80104aa:	4833      	ldr	r0, [pc, #204]	@ (8010578 <_printf_i+0x23c>)
 80104ac:	2778      	movs	r7, #120	@ 0x78
 80104ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80104b2:	6823      	ldr	r3, [r4, #0]
 80104b4:	6831      	ldr	r1, [r6, #0]
 80104b6:	061f      	lsls	r7, r3, #24
 80104b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80104bc:	d402      	bmi.n	80104c4 <_printf_i+0x188>
 80104be:	065f      	lsls	r7, r3, #25
 80104c0:	bf48      	it	mi
 80104c2:	b2ad      	uxthmi	r5, r5
 80104c4:	6031      	str	r1, [r6, #0]
 80104c6:	07d9      	lsls	r1, r3, #31
 80104c8:	bf44      	itt	mi
 80104ca:	f043 0320 	orrmi.w	r3, r3, #32
 80104ce:	6023      	strmi	r3, [r4, #0]
 80104d0:	b11d      	cbz	r5, 80104da <_printf_i+0x19e>
 80104d2:	2310      	movs	r3, #16
 80104d4:	e7ac      	b.n	8010430 <_printf_i+0xf4>
 80104d6:	4827      	ldr	r0, [pc, #156]	@ (8010574 <_printf_i+0x238>)
 80104d8:	e7e9      	b.n	80104ae <_printf_i+0x172>
 80104da:	6823      	ldr	r3, [r4, #0]
 80104dc:	f023 0320 	bic.w	r3, r3, #32
 80104e0:	6023      	str	r3, [r4, #0]
 80104e2:	e7f6      	b.n	80104d2 <_printf_i+0x196>
 80104e4:	4616      	mov	r6, r2
 80104e6:	e7bd      	b.n	8010464 <_printf_i+0x128>
 80104e8:	6833      	ldr	r3, [r6, #0]
 80104ea:	6825      	ldr	r5, [r4, #0]
 80104ec:	6961      	ldr	r1, [r4, #20]
 80104ee:	1d18      	adds	r0, r3, #4
 80104f0:	6030      	str	r0, [r6, #0]
 80104f2:	062e      	lsls	r6, r5, #24
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	d501      	bpl.n	80104fc <_printf_i+0x1c0>
 80104f8:	6019      	str	r1, [r3, #0]
 80104fa:	e002      	b.n	8010502 <_printf_i+0x1c6>
 80104fc:	0668      	lsls	r0, r5, #25
 80104fe:	d5fb      	bpl.n	80104f8 <_printf_i+0x1bc>
 8010500:	8019      	strh	r1, [r3, #0]
 8010502:	2300      	movs	r3, #0
 8010504:	6123      	str	r3, [r4, #16]
 8010506:	4616      	mov	r6, r2
 8010508:	e7bc      	b.n	8010484 <_printf_i+0x148>
 801050a:	6833      	ldr	r3, [r6, #0]
 801050c:	1d1a      	adds	r2, r3, #4
 801050e:	6032      	str	r2, [r6, #0]
 8010510:	681e      	ldr	r6, [r3, #0]
 8010512:	6862      	ldr	r2, [r4, #4]
 8010514:	2100      	movs	r1, #0
 8010516:	4630      	mov	r0, r6
 8010518:	f7ef fe82 	bl	8000220 <memchr>
 801051c:	b108      	cbz	r0, 8010522 <_printf_i+0x1e6>
 801051e:	1b80      	subs	r0, r0, r6
 8010520:	6060      	str	r0, [r4, #4]
 8010522:	6863      	ldr	r3, [r4, #4]
 8010524:	6123      	str	r3, [r4, #16]
 8010526:	2300      	movs	r3, #0
 8010528:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801052c:	e7aa      	b.n	8010484 <_printf_i+0x148>
 801052e:	6923      	ldr	r3, [r4, #16]
 8010530:	4632      	mov	r2, r6
 8010532:	4649      	mov	r1, r9
 8010534:	4640      	mov	r0, r8
 8010536:	47d0      	blx	sl
 8010538:	3001      	adds	r0, #1
 801053a:	d0ad      	beq.n	8010498 <_printf_i+0x15c>
 801053c:	6823      	ldr	r3, [r4, #0]
 801053e:	079b      	lsls	r3, r3, #30
 8010540:	d413      	bmi.n	801056a <_printf_i+0x22e>
 8010542:	68e0      	ldr	r0, [r4, #12]
 8010544:	9b03      	ldr	r3, [sp, #12]
 8010546:	4298      	cmp	r0, r3
 8010548:	bfb8      	it	lt
 801054a:	4618      	movlt	r0, r3
 801054c:	e7a6      	b.n	801049c <_printf_i+0x160>
 801054e:	2301      	movs	r3, #1
 8010550:	4632      	mov	r2, r6
 8010552:	4649      	mov	r1, r9
 8010554:	4640      	mov	r0, r8
 8010556:	47d0      	blx	sl
 8010558:	3001      	adds	r0, #1
 801055a:	d09d      	beq.n	8010498 <_printf_i+0x15c>
 801055c:	3501      	adds	r5, #1
 801055e:	68e3      	ldr	r3, [r4, #12]
 8010560:	9903      	ldr	r1, [sp, #12]
 8010562:	1a5b      	subs	r3, r3, r1
 8010564:	42ab      	cmp	r3, r5
 8010566:	dcf2      	bgt.n	801054e <_printf_i+0x212>
 8010568:	e7eb      	b.n	8010542 <_printf_i+0x206>
 801056a:	2500      	movs	r5, #0
 801056c:	f104 0619 	add.w	r6, r4, #25
 8010570:	e7f5      	b.n	801055e <_printf_i+0x222>
 8010572:	bf00      	nop
 8010574:	080147ca 	.word	0x080147ca
 8010578:	080147db 	.word	0x080147db

0801057c <_scanf_float>:
 801057c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010580:	b087      	sub	sp, #28
 8010582:	4617      	mov	r7, r2
 8010584:	9303      	str	r3, [sp, #12]
 8010586:	688b      	ldr	r3, [r1, #8]
 8010588:	1e5a      	subs	r2, r3, #1
 801058a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801058e:	bf81      	itttt	hi
 8010590:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010594:	eb03 0b05 	addhi.w	fp, r3, r5
 8010598:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801059c:	608b      	strhi	r3, [r1, #8]
 801059e:	680b      	ldr	r3, [r1, #0]
 80105a0:	460a      	mov	r2, r1
 80105a2:	f04f 0500 	mov.w	r5, #0
 80105a6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80105aa:	f842 3b1c 	str.w	r3, [r2], #28
 80105ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80105b2:	4680      	mov	r8, r0
 80105b4:	460c      	mov	r4, r1
 80105b6:	bf98      	it	ls
 80105b8:	f04f 0b00 	movls.w	fp, #0
 80105bc:	9201      	str	r2, [sp, #4]
 80105be:	4616      	mov	r6, r2
 80105c0:	46aa      	mov	sl, r5
 80105c2:	46a9      	mov	r9, r5
 80105c4:	9502      	str	r5, [sp, #8]
 80105c6:	68a2      	ldr	r2, [r4, #8]
 80105c8:	b152      	cbz	r2, 80105e0 <_scanf_float+0x64>
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	781b      	ldrb	r3, [r3, #0]
 80105ce:	2b4e      	cmp	r3, #78	@ 0x4e
 80105d0:	d864      	bhi.n	801069c <_scanf_float+0x120>
 80105d2:	2b40      	cmp	r3, #64	@ 0x40
 80105d4:	d83c      	bhi.n	8010650 <_scanf_float+0xd4>
 80105d6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80105da:	b2c8      	uxtb	r0, r1
 80105dc:	280e      	cmp	r0, #14
 80105de:	d93a      	bls.n	8010656 <_scanf_float+0xda>
 80105e0:	f1b9 0f00 	cmp.w	r9, #0
 80105e4:	d003      	beq.n	80105ee <_scanf_float+0x72>
 80105e6:	6823      	ldr	r3, [r4, #0]
 80105e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80105ec:	6023      	str	r3, [r4, #0]
 80105ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80105f2:	f1ba 0f01 	cmp.w	sl, #1
 80105f6:	f200 8117 	bhi.w	8010828 <_scanf_float+0x2ac>
 80105fa:	9b01      	ldr	r3, [sp, #4]
 80105fc:	429e      	cmp	r6, r3
 80105fe:	f200 8108 	bhi.w	8010812 <_scanf_float+0x296>
 8010602:	2001      	movs	r0, #1
 8010604:	b007      	add	sp, #28
 8010606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801060a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801060e:	2a0d      	cmp	r2, #13
 8010610:	d8e6      	bhi.n	80105e0 <_scanf_float+0x64>
 8010612:	a101      	add	r1, pc, #4	@ (adr r1, 8010618 <_scanf_float+0x9c>)
 8010614:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010618:	0801075f 	.word	0x0801075f
 801061c:	080105e1 	.word	0x080105e1
 8010620:	080105e1 	.word	0x080105e1
 8010624:	080105e1 	.word	0x080105e1
 8010628:	080107bf 	.word	0x080107bf
 801062c:	08010797 	.word	0x08010797
 8010630:	080105e1 	.word	0x080105e1
 8010634:	080105e1 	.word	0x080105e1
 8010638:	0801076d 	.word	0x0801076d
 801063c:	080105e1 	.word	0x080105e1
 8010640:	080105e1 	.word	0x080105e1
 8010644:	080105e1 	.word	0x080105e1
 8010648:	080105e1 	.word	0x080105e1
 801064c:	08010725 	.word	0x08010725
 8010650:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010654:	e7db      	b.n	801060e <_scanf_float+0x92>
 8010656:	290e      	cmp	r1, #14
 8010658:	d8c2      	bhi.n	80105e0 <_scanf_float+0x64>
 801065a:	a001      	add	r0, pc, #4	@ (adr r0, 8010660 <_scanf_float+0xe4>)
 801065c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010660:	08010715 	.word	0x08010715
 8010664:	080105e1 	.word	0x080105e1
 8010668:	08010715 	.word	0x08010715
 801066c:	080107ab 	.word	0x080107ab
 8010670:	080105e1 	.word	0x080105e1
 8010674:	080106bd 	.word	0x080106bd
 8010678:	080106fb 	.word	0x080106fb
 801067c:	080106fb 	.word	0x080106fb
 8010680:	080106fb 	.word	0x080106fb
 8010684:	080106fb 	.word	0x080106fb
 8010688:	080106fb 	.word	0x080106fb
 801068c:	080106fb 	.word	0x080106fb
 8010690:	080106fb 	.word	0x080106fb
 8010694:	080106fb 	.word	0x080106fb
 8010698:	080106fb 	.word	0x080106fb
 801069c:	2b6e      	cmp	r3, #110	@ 0x6e
 801069e:	d809      	bhi.n	80106b4 <_scanf_float+0x138>
 80106a0:	2b60      	cmp	r3, #96	@ 0x60
 80106a2:	d8b2      	bhi.n	801060a <_scanf_float+0x8e>
 80106a4:	2b54      	cmp	r3, #84	@ 0x54
 80106a6:	d07b      	beq.n	80107a0 <_scanf_float+0x224>
 80106a8:	2b59      	cmp	r3, #89	@ 0x59
 80106aa:	d199      	bne.n	80105e0 <_scanf_float+0x64>
 80106ac:	2d07      	cmp	r5, #7
 80106ae:	d197      	bne.n	80105e0 <_scanf_float+0x64>
 80106b0:	2508      	movs	r5, #8
 80106b2:	e02c      	b.n	801070e <_scanf_float+0x192>
 80106b4:	2b74      	cmp	r3, #116	@ 0x74
 80106b6:	d073      	beq.n	80107a0 <_scanf_float+0x224>
 80106b8:	2b79      	cmp	r3, #121	@ 0x79
 80106ba:	e7f6      	b.n	80106aa <_scanf_float+0x12e>
 80106bc:	6821      	ldr	r1, [r4, #0]
 80106be:	05c8      	lsls	r0, r1, #23
 80106c0:	d51b      	bpl.n	80106fa <_scanf_float+0x17e>
 80106c2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80106c6:	6021      	str	r1, [r4, #0]
 80106c8:	f109 0901 	add.w	r9, r9, #1
 80106cc:	f1bb 0f00 	cmp.w	fp, #0
 80106d0:	d003      	beq.n	80106da <_scanf_float+0x15e>
 80106d2:	3201      	adds	r2, #1
 80106d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80106d8:	60a2      	str	r2, [r4, #8]
 80106da:	68a3      	ldr	r3, [r4, #8]
 80106dc:	3b01      	subs	r3, #1
 80106de:	60a3      	str	r3, [r4, #8]
 80106e0:	6923      	ldr	r3, [r4, #16]
 80106e2:	3301      	adds	r3, #1
 80106e4:	6123      	str	r3, [r4, #16]
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	3b01      	subs	r3, #1
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	607b      	str	r3, [r7, #4]
 80106ee:	f340 8087 	ble.w	8010800 <_scanf_float+0x284>
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	3301      	adds	r3, #1
 80106f6:	603b      	str	r3, [r7, #0]
 80106f8:	e765      	b.n	80105c6 <_scanf_float+0x4a>
 80106fa:	eb1a 0105 	adds.w	r1, sl, r5
 80106fe:	f47f af6f 	bne.w	80105e0 <_scanf_float+0x64>
 8010702:	6822      	ldr	r2, [r4, #0]
 8010704:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010708:	6022      	str	r2, [r4, #0]
 801070a:	460d      	mov	r5, r1
 801070c:	468a      	mov	sl, r1
 801070e:	f806 3b01 	strb.w	r3, [r6], #1
 8010712:	e7e2      	b.n	80106da <_scanf_float+0x15e>
 8010714:	6822      	ldr	r2, [r4, #0]
 8010716:	0610      	lsls	r0, r2, #24
 8010718:	f57f af62 	bpl.w	80105e0 <_scanf_float+0x64>
 801071c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010720:	6022      	str	r2, [r4, #0]
 8010722:	e7f4      	b.n	801070e <_scanf_float+0x192>
 8010724:	f1ba 0f00 	cmp.w	sl, #0
 8010728:	d10e      	bne.n	8010748 <_scanf_float+0x1cc>
 801072a:	f1b9 0f00 	cmp.w	r9, #0
 801072e:	d10e      	bne.n	801074e <_scanf_float+0x1d2>
 8010730:	6822      	ldr	r2, [r4, #0]
 8010732:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010736:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801073a:	d108      	bne.n	801074e <_scanf_float+0x1d2>
 801073c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010740:	6022      	str	r2, [r4, #0]
 8010742:	f04f 0a01 	mov.w	sl, #1
 8010746:	e7e2      	b.n	801070e <_scanf_float+0x192>
 8010748:	f1ba 0f02 	cmp.w	sl, #2
 801074c:	d055      	beq.n	80107fa <_scanf_float+0x27e>
 801074e:	2d01      	cmp	r5, #1
 8010750:	d002      	beq.n	8010758 <_scanf_float+0x1dc>
 8010752:	2d04      	cmp	r5, #4
 8010754:	f47f af44 	bne.w	80105e0 <_scanf_float+0x64>
 8010758:	3501      	adds	r5, #1
 801075a:	b2ed      	uxtb	r5, r5
 801075c:	e7d7      	b.n	801070e <_scanf_float+0x192>
 801075e:	f1ba 0f01 	cmp.w	sl, #1
 8010762:	f47f af3d 	bne.w	80105e0 <_scanf_float+0x64>
 8010766:	f04f 0a02 	mov.w	sl, #2
 801076a:	e7d0      	b.n	801070e <_scanf_float+0x192>
 801076c:	b97d      	cbnz	r5, 801078e <_scanf_float+0x212>
 801076e:	f1b9 0f00 	cmp.w	r9, #0
 8010772:	f47f af38 	bne.w	80105e6 <_scanf_float+0x6a>
 8010776:	6822      	ldr	r2, [r4, #0]
 8010778:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801077c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010780:	f040 8108 	bne.w	8010994 <_scanf_float+0x418>
 8010784:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010788:	6022      	str	r2, [r4, #0]
 801078a:	2501      	movs	r5, #1
 801078c:	e7bf      	b.n	801070e <_scanf_float+0x192>
 801078e:	2d03      	cmp	r5, #3
 8010790:	d0e2      	beq.n	8010758 <_scanf_float+0x1dc>
 8010792:	2d05      	cmp	r5, #5
 8010794:	e7de      	b.n	8010754 <_scanf_float+0x1d8>
 8010796:	2d02      	cmp	r5, #2
 8010798:	f47f af22 	bne.w	80105e0 <_scanf_float+0x64>
 801079c:	2503      	movs	r5, #3
 801079e:	e7b6      	b.n	801070e <_scanf_float+0x192>
 80107a0:	2d06      	cmp	r5, #6
 80107a2:	f47f af1d 	bne.w	80105e0 <_scanf_float+0x64>
 80107a6:	2507      	movs	r5, #7
 80107a8:	e7b1      	b.n	801070e <_scanf_float+0x192>
 80107aa:	6822      	ldr	r2, [r4, #0]
 80107ac:	0591      	lsls	r1, r2, #22
 80107ae:	f57f af17 	bpl.w	80105e0 <_scanf_float+0x64>
 80107b2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80107b6:	6022      	str	r2, [r4, #0]
 80107b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80107bc:	e7a7      	b.n	801070e <_scanf_float+0x192>
 80107be:	6822      	ldr	r2, [r4, #0]
 80107c0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80107c4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80107c8:	d006      	beq.n	80107d8 <_scanf_float+0x25c>
 80107ca:	0550      	lsls	r0, r2, #21
 80107cc:	f57f af08 	bpl.w	80105e0 <_scanf_float+0x64>
 80107d0:	f1b9 0f00 	cmp.w	r9, #0
 80107d4:	f000 80de 	beq.w	8010994 <_scanf_float+0x418>
 80107d8:	0591      	lsls	r1, r2, #22
 80107da:	bf58      	it	pl
 80107dc:	9902      	ldrpl	r1, [sp, #8]
 80107de:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80107e2:	bf58      	it	pl
 80107e4:	eba9 0101 	subpl.w	r1, r9, r1
 80107e8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80107ec:	bf58      	it	pl
 80107ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80107f2:	6022      	str	r2, [r4, #0]
 80107f4:	f04f 0900 	mov.w	r9, #0
 80107f8:	e789      	b.n	801070e <_scanf_float+0x192>
 80107fa:	f04f 0a03 	mov.w	sl, #3
 80107fe:	e786      	b.n	801070e <_scanf_float+0x192>
 8010800:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010804:	4639      	mov	r1, r7
 8010806:	4640      	mov	r0, r8
 8010808:	4798      	blx	r3
 801080a:	2800      	cmp	r0, #0
 801080c:	f43f aedb 	beq.w	80105c6 <_scanf_float+0x4a>
 8010810:	e6e6      	b.n	80105e0 <_scanf_float+0x64>
 8010812:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010816:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801081a:	463a      	mov	r2, r7
 801081c:	4640      	mov	r0, r8
 801081e:	4798      	blx	r3
 8010820:	6923      	ldr	r3, [r4, #16]
 8010822:	3b01      	subs	r3, #1
 8010824:	6123      	str	r3, [r4, #16]
 8010826:	e6e8      	b.n	80105fa <_scanf_float+0x7e>
 8010828:	1e6b      	subs	r3, r5, #1
 801082a:	2b06      	cmp	r3, #6
 801082c:	d824      	bhi.n	8010878 <_scanf_float+0x2fc>
 801082e:	2d02      	cmp	r5, #2
 8010830:	d836      	bhi.n	80108a0 <_scanf_float+0x324>
 8010832:	9b01      	ldr	r3, [sp, #4]
 8010834:	429e      	cmp	r6, r3
 8010836:	f67f aee4 	bls.w	8010602 <_scanf_float+0x86>
 801083a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801083e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010842:	463a      	mov	r2, r7
 8010844:	4640      	mov	r0, r8
 8010846:	4798      	blx	r3
 8010848:	6923      	ldr	r3, [r4, #16]
 801084a:	3b01      	subs	r3, #1
 801084c:	6123      	str	r3, [r4, #16]
 801084e:	e7f0      	b.n	8010832 <_scanf_float+0x2b6>
 8010850:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010854:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010858:	463a      	mov	r2, r7
 801085a:	4640      	mov	r0, r8
 801085c:	4798      	blx	r3
 801085e:	6923      	ldr	r3, [r4, #16]
 8010860:	3b01      	subs	r3, #1
 8010862:	6123      	str	r3, [r4, #16]
 8010864:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010868:	fa5f fa8a 	uxtb.w	sl, sl
 801086c:	f1ba 0f02 	cmp.w	sl, #2
 8010870:	d1ee      	bne.n	8010850 <_scanf_float+0x2d4>
 8010872:	3d03      	subs	r5, #3
 8010874:	b2ed      	uxtb	r5, r5
 8010876:	1b76      	subs	r6, r6, r5
 8010878:	6823      	ldr	r3, [r4, #0]
 801087a:	05da      	lsls	r2, r3, #23
 801087c:	d530      	bpl.n	80108e0 <_scanf_float+0x364>
 801087e:	055b      	lsls	r3, r3, #21
 8010880:	d511      	bpl.n	80108a6 <_scanf_float+0x32a>
 8010882:	9b01      	ldr	r3, [sp, #4]
 8010884:	429e      	cmp	r6, r3
 8010886:	f67f aebc 	bls.w	8010602 <_scanf_float+0x86>
 801088a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801088e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010892:	463a      	mov	r2, r7
 8010894:	4640      	mov	r0, r8
 8010896:	4798      	blx	r3
 8010898:	6923      	ldr	r3, [r4, #16]
 801089a:	3b01      	subs	r3, #1
 801089c:	6123      	str	r3, [r4, #16]
 801089e:	e7f0      	b.n	8010882 <_scanf_float+0x306>
 80108a0:	46aa      	mov	sl, r5
 80108a2:	46b3      	mov	fp, r6
 80108a4:	e7de      	b.n	8010864 <_scanf_float+0x2e8>
 80108a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80108aa:	6923      	ldr	r3, [r4, #16]
 80108ac:	2965      	cmp	r1, #101	@ 0x65
 80108ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80108b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80108b6:	6123      	str	r3, [r4, #16]
 80108b8:	d00c      	beq.n	80108d4 <_scanf_float+0x358>
 80108ba:	2945      	cmp	r1, #69	@ 0x45
 80108bc:	d00a      	beq.n	80108d4 <_scanf_float+0x358>
 80108be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80108c2:	463a      	mov	r2, r7
 80108c4:	4640      	mov	r0, r8
 80108c6:	4798      	blx	r3
 80108c8:	6923      	ldr	r3, [r4, #16]
 80108ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80108ce:	3b01      	subs	r3, #1
 80108d0:	1eb5      	subs	r5, r6, #2
 80108d2:	6123      	str	r3, [r4, #16]
 80108d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80108d8:	463a      	mov	r2, r7
 80108da:	4640      	mov	r0, r8
 80108dc:	4798      	blx	r3
 80108de:	462e      	mov	r6, r5
 80108e0:	6822      	ldr	r2, [r4, #0]
 80108e2:	f012 0210 	ands.w	r2, r2, #16
 80108e6:	d001      	beq.n	80108ec <_scanf_float+0x370>
 80108e8:	2000      	movs	r0, #0
 80108ea:	e68b      	b.n	8010604 <_scanf_float+0x88>
 80108ec:	7032      	strb	r2, [r6, #0]
 80108ee:	6823      	ldr	r3, [r4, #0]
 80108f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80108f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80108f8:	d11c      	bne.n	8010934 <_scanf_float+0x3b8>
 80108fa:	9b02      	ldr	r3, [sp, #8]
 80108fc:	454b      	cmp	r3, r9
 80108fe:	eba3 0209 	sub.w	r2, r3, r9
 8010902:	d123      	bne.n	801094c <_scanf_float+0x3d0>
 8010904:	9901      	ldr	r1, [sp, #4]
 8010906:	2200      	movs	r2, #0
 8010908:	4640      	mov	r0, r8
 801090a:	f7ff f9cd 	bl	800fca8 <_strtod_r>
 801090e:	9b03      	ldr	r3, [sp, #12]
 8010910:	6821      	ldr	r1, [r4, #0]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	f011 0f02 	tst.w	r1, #2
 8010918:	ec57 6b10 	vmov	r6, r7, d0
 801091c:	f103 0204 	add.w	r2, r3, #4
 8010920:	d01f      	beq.n	8010962 <_scanf_float+0x3e6>
 8010922:	9903      	ldr	r1, [sp, #12]
 8010924:	600a      	str	r2, [r1, #0]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	e9c3 6700 	strd	r6, r7, [r3]
 801092c:	68e3      	ldr	r3, [r4, #12]
 801092e:	3301      	adds	r3, #1
 8010930:	60e3      	str	r3, [r4, #12]
 8010932:	e7d9      	b.n	80108e8 <_scanf_float+0x36c>
 8010934:	9b04      	ldr	r3, [sp, #16]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d0e4      	beq.n	8010904 <_scanf_float+0x388>
 801093a:	9905      	ldr	r1, [sp, #20]
 801093c:	230a      	movs	r3, #10
 801093e:	3101      	adds	r1, #1
 8010940:	4640      	mov	r0, r8
 8010942:	f002 f9e9 	bl	8012d18 <_strtol_r>
 8010946:	9b04      	ldr	r3, [sp, #16]
 8010948:	9e05      	ldr	r6, [sp, #20]
 801094a:	1ac2      	subs	r2, r0, r3
 801094c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010950:	429e      	cmp	r6, r3
 8010952:	bf28      	it	cs
 8010954:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010958:	4910      	ldr	r1, [pc, #64]	@ (801099c <_scanf_float+0x420>)
 801095a:	4630      	mov	r0, r6
 801095c:	f000 f8e4 	bl	8010b28 <siprintf>
 8010960:	e7d0      	b.n	8010904 <_scanf_float+0x388>
 8010962:	f011 0f04 	tst.w	r1, #4
 8010966:	9903      	ldr	r1, [sp, #12]
 8010968:	600a      	str	r2, [r1, #0]
 801096a:	d1dc      	bne.n	8010926 <_scanf_float+0x3aa>
 801096c:	681d      	ldr	r5, [r3, #0]
 801096e:	4632      	mov	r2, r6
 8010970:	463b      	mov	r3, r7
 8010972:	4630      	mov	r0, r6
 8010974:	4639      	mov	r1, r7
 8010976:	f7f0 f901 	bl	8000b7c <__aeabi_dcmpun>
 801097a:	b128      	cbz	r0, 8010988 <_scanf_float+0x40c>
 801097c:	4808      	ldr	r0, [pc, #32]	@ (80109a0 <_scanf_float+0x424>)
 801097e:	f000 f9ff 	bl	8010d80 <nanf>
 8010982:	ed85 0a00 	vstr	s0, [r5]
 8010986:	e7d1      	b.n	801092c <_scanf_float+0x3b0>
 8010988:	4630      	mov	r0, r6
 801098a:	4639      	mov	r1, r7
 801098c:	f7f0 f954 	bl	8000c38 <__aeabi_d2f>
 8010990:	6028      	str	r0, [r5, #0]
 8010992:	e7cb      	b.n	801092c <_scanf_float+0x3b0>
 8010994:	f04f 0900 	mov.w	r9, #0
 8010998:	e629      	b.n	80105ee <_scanf_float+0x72>
 801099a:	bf00      	nop
 801099c:	080147ec 	.word	0x080147ec
 80109a0:	08014b8d 	.word	0x08014b8d

080109a4 <std>:
 80109a4:	2300      	movs	r3, #0
 80109a6:	b510      	push	{r4, lr}
 80109a8:	4604      	mov	r4, r0
 80109aa:	e9c0 3300 	strd	r3, r3, [r0]
 80109ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80109b2:	6083      	str	r3, [r0, #8]
 80109b4:	8181      	strh	r1, [r0, #12]
 80109b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80109b8:	81c2      	strh	r2, [r0, #14]
 80109ba:	6183      	str	r3, [r0, #24]
 80109bc:	4619      	mov	r1, r3
 80109be:	2208      	movs	r2, #8
 80109c0:	305c      	adds	r0, #92	@ 0x5c
 80109c2:	f000 f935 	bl	8010c30 <memset>
 80109c6:	4b0d      	ldr	r3, [pc, #52]	@ (80109fc <std+0x58>)
 80109c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80109ca:	4b0d      	ldr	r3, [pc, #52]	@ (8010a00 <std+0x5c>)
 80109cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80109ce:	4b0d      	ldr	r3, [pc, #52]	@ (8010a04 <std+0x60>)
 80109d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80109d2:	4b0d      	ldr	r3, [pc, #52]	@ (8010a08 <std+0x64>)
 80109d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80109d6:	4b0d      	ldr	r3, [pc, #52]	@ (8010a0c <std+0x68>)
 80109d8:	6224      	str	r4, [r4, #32]
 80109da:	429c      	cmp	r4, r3
 80109dc:	d006      	beq.n	80109ec <std+0x48>
 80109de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80109e2:	4294      	cmp	r4, r2
 80109e4:	d002      	beq.n	80109ec <std+0x48>
 80109e6:	33d0      	adds	r3, #208	@ 0xd0
 80109e8:	429c      	cmp	r4, r3
 80109ea:	d105      	bne.n	80109f8 <std+0x54>
 80109ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80109f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109f4:	f000 b9aa 	b.w	8010d4c <__retarget_lock_init_recursive>
 80109f8:	bd10      	pop	{r4, pc}
 80109fa:	bf00      	nop
 80109fc:	08010b69 	.word	0x08010b69
 8010a00:	08010b8b 	.word	0x08010b8b
 8010a04:	08010bc3 	.word	0x08010bc3
 8010a08:	08010be7 	.word	0x08010be7
 8010a0c:	20000d08 	.word	0x20000d08

08010a10 <stdio_exit_handler>:
 8010a10:	4a02      	ldr	r2, [pc, #8]	@ (8010a1c <stdio_exit_handler+0xc>)
 8010a12:	4903      	ldr	r1, [pc, #12]	@ (8010a20 <stdio_exit_handler+0x10>)
 8010a14:	4803      	ldr	r0, [pc, #12]	@ (8010a24 <stdio_exit_handler+0x14>)
 8010a16:	f000 b869 	b.w	8010aec <_fwalk_sglue>
 8010a1a:	bf00      	nop
 8010a1c:	200000d0 	.word	0x200000d0
 8010a20:	080130ed 	.word	0x080130ed
 8010a24:	2000024c 	.word	0x2000024c

08010a28 <cleanup_stdio>:
 8010a28:	6841      	ldr	r1, [r0, #4]
 8010a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8010a5c <cleanup_stdio+0x34>)
 8010a2c:	4299      	cmp	r1, r3
 8010a2e:	b510      	push	{r4, lr}
 8010a30:	4604      	mov	r4, r0
 8010a32:	d001      	beq.n	8010a38 <cleanup_stdio+0x10>
 8010a34:	f002 fb5a 	bl	80130ec <_fflush_r>
 8010a38:	68a1      	ldr	r1, [r4, #8]
 8010a3a:	4b09      	ldr	r3, [pc, #36]	@ (8010a60 <cleanup_stdio+0x38>)
 8010a3c:	4299      	cmp	r1, r3
 8010a3e:	d002      	beq.n	8010a46 <cleanup_stdio+0x1e>
 8010a40:	4620      	mov	r0, r4
 8010a42:	f002 fb53 	bl	80130ec <_fflush_r>
 8010a46:	68e1      	ldr	r1, [r4, #12]
 8010a48:	4b06      	ldr	r3, [pc, #24]	@ (8010a64 <cleanup_stdio+0x3c>)
 8010a4a:	4299      	cmp	r1, r3
 8010a4c:	d004      	beq.n	8010a58 <cleanup_stdio+0x30>
 8010a4e:	4620      	mov	r0, r4
 8010a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a54:	f002 bb4a 	b.w	80130ec <_fflush_r>
 8010a58:	bd10      	pop	{r4, pc}
 8010a5a:	bf00      	nop
 8010a5c:	20000d08 	.word	0x20000d08
 8010a60:	20000d70 	.word	0x20000d70
 8010a64:	20000dd8 	.word	0x20000dd8

08010a68 <global_stdio_init.part.0>:
 8010a68:	b510      	push	{r4, lr}
 8010a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8010a98 <global_stdio_init.part.0+0x30>)
 8010a6c:	4c0b      	ldr	r4, [pc, #44]	@ (8010a9c <global_stdio_init.part.0+0x34>)
 8010a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8010aa0 <global_stdio_init.part.0+0x38>)
 8010a70:	601a      	str	r2, [r3, #0]
 8010a72:	4620      	mov	r0, r4
 8010a74:	2200      	movs	r2, #0
 8010a76:	2104      	movs	r1, #4
 8010a78:	f7ff ff94 	bl	80109a4 <std>
 8010a7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010a80:	2201      	movs	r2, #1
 8010a82:	2109      	movs	r1, #9
 8010a84:	f7ff ff8e 	bl	80109a4 <std>
 8010a88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010a8c:	2202      	movs	r2, #2
 8010a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a92:	2112      	movs	r1, #18
 8010a94:	f7ff bf86 	b.w	80109a4 <std>
 8010a98:	20000e40 	.word	0x20000e40
 8010a9c:	20000d08 	.word	0x20000d08
 8010aa0:	08010a11 	.word	0x08010a11

08010aa4 <__sfp_lock_acquire>:
 8010aa4:	4801      	ldr	r0, [pc, #4]	@ (8010aac <__sfp_lock_acquire+0x8>)
 8010aa6:	f000 b952 	b.w	8010d4e <__retarget_lock_acquire_recursive>
 8010aaa:	bf00      	nop
 8010aac:	20000e49 	.word	0x20000e49

08010ab0 <__sfp_lock_release>:
 8010ab0:	4801      	ldr	r0, [pc, #4]	@ (8010ab8 <__sfp_lock_release+0x8>)
 8010ab2:	f000 b94d 	b.w	8010d50 <__retarget_lock_release_recursive>
 8010ab6:	bf00      	nop
 8010ab8:	20000e49 	.word	0x20000e49

08010abc <__sinit>:
 8010abc:	b510      	push	{r4, lr}
 8010abe:	4604      	mov	r4, r0
 8010ac0:	f7ff fff0 	bl	8010aa4 <__sfp_lock_acquire>
 8010ac4:	6a23      	ldr	r3, [r4, #32]
 8010ac6:	b11b      	cbz	r3, 8010ad0 <__sinit+0x14>
 8010ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010acc:	f7ff bff0 	b.w	8010ab0 <__sfp_lock_release>
 8010ad0:	4b04      	ldr	r3, [pc, #16]	@ (8010ae4 <__sinit+0x28>)
 8010ad2:	6223      	str	r3, [r4, #32]
 8010ad4:	4b04      	ldr	r3, [pc, #16]	@ (8010ae8 <__sinit+0x2c>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d1f5      	bne.n	8010ac8 <__sinit+0xc>
 8010adc:	f7ff ffc4 	bl	8010a68 <global_stdio_init.part.0>
 8010ae0:	e7f2      	b.n	8010ac8 <__sinit+0xc>
 8010ae2:	bf00      	nop
 8010ae4:	08010a29 	.word	0x08010a29
 8010ae8:	20000e40 	.word	0x20000e40

08010aec <_fwalk_sglue>:
 8010aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010af0:	4607      	mov	r7, r0
 8010af2:	4688      	mov	r8, r1
 8010af4:	4614      	mov	r4, r2
 8010af6:	2600      	movs	r6, #0
 8010af8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010afc:	f1b9 0901 	subs.w	r9, r9, #1
 8010b00:	d505      	bpl.n	8010b0e <_fwalk_sglue+0x22>
 8010b02:	6824      	ldr	r4, [r4, #0]
 8010b04:	2c00      	cmp	r4, #0
 8010b06:	d1f7      	bne.n	8010af8 <_fwalk_sglue+0xc>
 8010b08:	4630      	mov	r0, r6
 8010b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b0e:	89ab      	ldrh	r3, [r5, #12]
 8010b10:	2b01      	cmp	r3, #1
 8010b12:	d907      	bls.n	8010b24 <_fwalk_sglue+0x38>
 8010b14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010b18:	3301      	adds	r3, #1
 8010b1a:	d003      	beq.n	8010b24 <_fwalk_sglue+0x38>
 8010b1c:	4629      	mov	r1, r5
 8010b1e:	4638      	mov	r0, r7
 8010b20:	47c0      	blx	r8
 8010b22:	4306      	orrs	r6, r0
 8010b24:	3568      	adds	r5, #104	@ 0x68
 8010b26:	e7e9      	b.n	8010afc <_fwalk_sglue+0x10>

08010b28 <siprintf>:
 8010b28:	b40e      	push	{r1, r2, r3}
 8010b2a:	b500      	push	{lr}
 8010b2c:	b09c      	sub	sp, #112	@ 0x70
 8010b2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8010b30:	9002      	str	r0, [sp, #8]
 8010b32:	9006      	str	r0, [sp, #24]
 8010b34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010b38:	4809      	ldr	r0, [pc, #36]	@ (8010b60 <siprintf+0x38>)
 8010b3a:	9107      	str	r1, [sp, #28]
 8010b3c:	9104      	str	r1, [sp, #16]
 8010b3e:	4909      	ldr	r1, [pc, #36]	@ (8010b64 <siprintf+0x3c>)
 8010b40:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b44:	9105      	str	r1, [sp, #20]
 8010b46:	6800      	ldr	r0, [r0, #0]
 8010b48:	9301      	str	r3, [sp, #4]
 8010b4a:	a902      	add	r1, sp, #8
 8010b4c:	f002 f94e 	bl	8012dec <_svfiprintf_r>
 8010b50:	9b02      	ldr	r3, [sp, #8]
 8010b52:	2200      	movs	r2, #0
 8010b54:	701a      	strb	r2, [r3, #0]
 8010b56:	b01c      	add	sp, #112	@ 0x70
 8010b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b5c:	b003      	add	sp, #12
 8010b5e:	4770      	bx	lr
 8010b60:	20000248 	.word	0x20000248
 8010b64:	ffff0208 	.word	0xffff0208

08010b68 <__sread>:
 8010b68:	b510      	push	{r4, lr}
 8010b6a:	460c      	mov	r4, r1
 8010b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b70:	f000 f89e 	bl	8010cb0 <_read_r>
 8010b74:	2800      	cmp	r0, #0
 8010b76:	bfab      	itete	ge
 8010b78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010b7a:	89a3      	ldrhlt	r3, [r4, #12]
 8010b7c:	181b      	addge	r3, r3, r0
 8010b7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010b82:	bfac      	ite	ge
 8010b84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010b86:	81a3      	strhlt	r3, [r4, #12]
 8010b88:	bd10      	pop	{r4, pc}

08010b8a <__swrite>:
 8010b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b8e:	461f      	mov	r7, r3
 8010b90:	898b      	ldrh	r3, [r1, #12]
 8010b92:	05db      	lsls	r3, r3, #23
 8010b94:	4605      	mov	r5, r0
 8010b96:	460c      	mov	r4, r1
 8010b98:	4616      	mov	r6, r2
 8010b9a:	d505      	bpl.n	8010ba8 <__swrite+0x1e>
 8010b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ba0:	2302      	movs	r3, #2
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	f000 f872 	bl	8010c8c <_lseek_r>
 8010ba8:	89a3      	ldrh	r3, [r4, #12]
 8010baa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010bb2:	81a3      	strh	r3, [r4, #12]
 8010bb4:	4632      	mov	r2, r6
 8010bb6:	463b      	mov	r3, r7
 8010bb8:	4628      	mov	r0, r5
 8010bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bbe:	f000 b889 	b.w	8010cd4 <_write_r>

08010bc2 <__sseek>:
 8010bc2:	b510      	push	{r4, lr}
 8010bc4:	460c      	mov	r4, r1
 8010bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bca:	f000 f85f 	bl	8010c8c <_lseek_r>
 8010bce:	1c43      	adds	r3, r0, #1
 8010bd0:	89a3      	ldrh	r3, [r4, #12]
 8010bd2:	bf15      	itete	ne
 8010bd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010bd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010bda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010bde:	81a3      	strheq	r3, [r4, #12]
 8010be0:	bf18      	it	ne
 8010be2:	81a3      	strhne	r3, [r4, #12]
 8010be4:	bd10      	pop	{r4, pc}

08010be6 <__sclose>:
 8010be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bea:	f000 b83f 	b.w	8010c6c <_close_r>
	...

08010bf0 <_vsiprintf_r>:
 8010bf0:	b500      	push	{lr}
 8010bf2:	b09b      	sub	sp, #108	@ 0x6c
 8010bf4:	9100      	str	r1, [sp, #0]
 8010bf6:	9104      	str	r1, [sp, #16]
 8010bf8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010bfc:	9105      	str	r1, [sp, #20]
 8010bfe:	9102      	str	r1, [sp, #8]
 8010c00:	4905      	ldr	r1, [pc, #20]	@ (8010c18 <_vsiprintf_r+0x28>)
 8010c02:	9103      	str	r1, [sp, #12]
 8010c04:	4669      	mov	r1, sp
 8010c06:	f002 f8f1 	bl	8012dec <_svfiprintf_r>
 8010c0a:	9b00      	ldr	r3, [sp, #0]
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	701a      	strb	r2, [r3, #0]
 8010c10:	b01b      	add	sp, #108	@ 0x6c
 8010c12:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c16:	bf00      	nop
 8010c18:	ffff0208 	.word	0xffff0208

08010c1c <vsiprintf>:
 8010c1c:	4613      	mov	r3, r2
 8010c1e:	460a      	mov	r2, r1
 8010c20:	4601      	mov	r1, r0
 8010c22:	4802      	ldr	r0, [pc, #8]	@ (8010c2c <vsiprintf+0x10>)
 8010c24:	6800      	ldr	r0, [r0, #0]
 8010c26:	f7ff bfe3 	b.w	8010bf0 <_vsiprintf_r>
 8010c2a:	bf00      	nop
 8010c2c:	20000248 	.word	0x20000248

08010c30 <memset>:
 8010c30:	4402      	add	r2, r0
 8010c32:	4603      	mov	r3, r0
 8010c34:	4293      	cmp	r3, r2
 8010c36:	d100      	bne.n	8010c3a <memset+0xa>
 8010c38:	4770      	bx	lr
 8010c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8010c3e:	e7f9      	b.n	8010c34 <memset+0x4>

08010c40 <strncmp>:
 8010c40:	b510      	push	{r4, lr}
 8010c42:	b16a      	cbz	r2, 8010c60 <strncmp+0x20>
 8010c44:	3901      	subs	r1, #1
 8010c46:	1884      	adds	r4, r0, r2
 8010c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c4c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d103      	bne.n	8010c5c <strncmp+0x1c>
 8010c54:	42a0      	cmp	r0, r4
 8010c56:	d001      	beq.n	8010c5c <strncmp+0x1c>
 8010c58:	2a00      	cmp	r2, #0
 8010c5a:	d1f5      	bne.n	8010c48 <strncmp+0x8>
 8010c5c:	1ad0      	subs	r0, r2, r3
 8010c5e:	bd10      	pop	{r4, pc}
 8010c60:	4610      	mov	r0, r2
 8010c62:	e7fc      	b.n	8010c5e <strncmp+0x1e>

08010c64 <_localeconv_r>:
 8010c64:	4800      	ldr	r0, [pc, #0]	@ (8010c68 <_localeconv_r+0x4>)
 8010c66:	4770      	bx	lr
 8010c68:	200001cc 	.word	0x200001cc

08010c6c <_close_r>:
 8010c6c:	b538      	push	{r3, r4, r5, lr}
 8010c6e:	4d06      	ldr	r5, [pc, #24]	@ (8010c88 <_close_r+0x1c>)
 8010c70:	2300      	movs	r3, #0
 8010c72:	4604      	mov	r4, r0
 8010c74:	4608      	mov	r0, r1
 8010c76:	602b      	str	r3, [r5, #0]
 8010c78:	f7f1 f90e 	bl	8001e98 <_close>
 8010c7c:	1c43      	adds	r3, r0, #1
 8010c7e:	d102      	bne.n	8010c86 <_close_r+0x1a>
 8010c80:	682b      	ldr	r3, [r5, #0]
 8010c82:	b103      	cbz	r3, 8010c86 <_close_r+0x1a>
 8010c84:	6023      	str	r3, [r4, #0]
 8010c86:	bd38      	pop	{r3, r4, r5, pc}
 8010c88:	20000e44 	.word	0x20000e44

08010c8c <_lseek_r>:
 8010c8c:	b538      	push	{r3, r4, r5, lr}
 8010c8e:	4d07      	ldr	r5, [pc, #28]	@ (8010cac <_lseek_r+0x20>)
 8010c90:	4604      	mov	r4, r0
 8010c92:	4608      	mov	r0, r1
 8010c94:	4611      	mov	r1, r2
 8010c96:	2200      	movs	r2, #0
 8010c98:	602a      	str	r2, [r5, #0]
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	f7f1 f923 	bl	8001ee6 <_lseek>
 8010ca0:	1c43      	adds	r3, r0, #1
 8010ca2:	d102      	bne.n	8010caa <_lseek_r+0x1e>
 8010ca4:	682b      	ldr	r3, [r5, #0]
 8010ca6:	b103      	cbz	r3, 8010caa <_lseek_r+0x1e>
 8010ca8:	6023      	str	r3, [r4, #0]
 8010caa:	bd38      	pop	{r3, r4, r5, pc}
 8010cac:	20000e44 	.word	0x20000e44

08010cb0 <_read_r>:
 8010cb0:	b538      	push	{r3, r4, r5, lr}
 8010cb2:	4d07      	ldr	r5, [pc, #28]	@ (8010cd0 <_read_r+0x20>)
 8010cb4:	4604      	mov	r4, r0
 8010cb6:	4608      	mov	r0, r1
 8010cb8:	4611      	mov	r1, r2
 8010cba:	2200      	movs	r2, #0
 8010cbc:	602a      	str	r2, [r5, #0]
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	f7f1 f8b1 	bl	8001e26 <_read>
 8010cc4:	1c43      	adds	r3, r0, #1
 8010cc6:	d102      	bne.n	8010cce <_read_r+0x1e>
 8010cc8:	682b      	ldr	r3, [r5, #0]
 8010cca:	b103      	cbz	r3, 8010cce <_read_r+0x1e>
 8010ccc:	6023      	str	r3, [r4, #0]
 8010cce:	bd38      	pop	{r3, r4, r5, pc}
 8010cd0:	20000e44 	.word	0x20000e44

08010cd4 <_write_r>:
 8010cd4:	b538      	push	{r3, r4, r5, lr}
 8010cd6:	4d07      	ldr	r5, [pc, #28]	@ (8010cf4 <_write_r+0x20>)
 8010cd8:	4604      	mov	r4, r0
 8010cda:	4608      	mov	r0, r1
 8010cdc:	4611      	mov	r1, r2
 8010cde:	2200      	movs	r2, #0
 8010ce0:	602a      	str	r2, [r5, #0]
 8010ce2:	461a      	mov	r2, r3
 8010ce4:	f7f1 f8bc 	bl	8001e60 <_write>
 8010ce8:	1c43      	adds	r3, r0, #1
 8010cea:	d102      	bne.n	8010cf2 <_write_r+0x1e>
 8010cec:	682b      	ldr	r3, [r5, #0]
 8010cee:	b103      	cbz	r3, 8010cf2 <_write_r+0x1e>
 8010cf0:	6023      	str	r3, [r4, #0]
 8010cf2:	bd38      	pop	{r3, r4, r5, pc}
 8010cf4:	20000e44 	.word	0x20000e44

08010cf8 <__errno>:
 8010cf8:	4b01      	ldr	r3, [pc, #4]	@ (8010d00 <__errno+0x8>)
 8010cfa:	6818      	ldr	r0, [r3, #0]
 8010cfc:	4770      	bx	lr
 8010cfe:	bf00      	nop
 8010d00:	20000248 	.word	0x20000248

08010d04 <__libc_init_array>:
 8010d04:	b570      	push	{r4, r5, r6, lr}
 8010d06:	4d0d      	ldr	r5, [pc, #52]	@ (8010d3c <__libc_init_array+0x38>)
 8010d08:	4c0d      	ldr	r4, [pc, #52]	@ (8010d40 <__libc_init_array+0x3c>)
 8010d0a:	1b64      	subs	r4, r4, r5
 8010d0c:	10a4      	asrs	r4, r4, #2
 8010d0e:	2600      	movs	r6, #0
 8010d10:	42a6      	cmp	r6, r4
 8010d12:	d109      	bne.n	8010d28 <__libc_init_array+0x24>
 8010d14:	4d0b      	ldr	r5, [pc, #44]	@ (8010d44 <__libc_init_array+0x40>)
 8010d16:	4c0c      	ldr	r4, [pc, #48]	@ (8010d48 <__libc_init_array+0x44>)
 8010d18:	f003 fc36 	bl	8014588 <_init>
 8010d1c:	1b64      	subs	r4, r4, r5
 8010d1e:	10a4      	asrs	r4, r4, #2
 8010d20:	2600      	movs	r6, #0
 8010d22:	42a6      	cmp	r6, r4
 8010d24:	d105      	bne.n	8010d32 <__libc_init_array+0x2e>
 8010d26:	bd70      	pop	{r4, r5, r6, pc}
 8010d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d2c:	4798      	blx	r3
 8010d2e:	3601      	adds	r6, #1
 8010d30:	e7ee      	b.n	8010d10 <__libc_init_array+0xc>
 8010d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d36:	4798      	blx	r3
 8010d38:	3601      	adds	r6, #1
 8010d3a:	e7f2      	b.n	8010d22 <__libc_init_array+0x1e>
 8010d3c:	08014c18 	.word	0x08014c18
 8010d40:	08014c18 	.word	0x08014c18
 8010d44:	08014c18 	.word	0x08014c18
 8010d48:	08014c1c 	.word	0x08014c1c

08010d4c <__retarget_lock_init_recursive>:
 8010d4c:	4770      	bx	lr

08010d4e <__retarget_lock_acquire_recursive>:
 8010d4e:	4770      	bx	lr

08010d50 <__retarget_lock_release_recursive>:
 8010d50:	4770      	bx	lr

08010d52 <memcpy>:
 8010d52:	440a      	add	r2, r1
 8010d54:	4291      	cmp	r1, r2
 8010d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8010d5a:	d100      	bne.n	8010d5e <memcpy+0xc>
 8010d5c:	4770      	bx	lr
 8010d5e:	b510      	push	{r4, lr}
 8010d60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d68:	4291      	cmp	r1, r2
 8010d6a:	d1f9      	bne.n	8010d60 <memcpy+0xe>
 8010d6c:	bd10      	pop	{r4, pc}
	...

08010d70 <nan>:
 8010d70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010d78 <nan+0x8>
 8010d74:	4770      	bx	lr
 8010d76:	bf00      	nop
 8010d78:	00000000 	.word	0x00000000
 8010d7c:	7ff80000 	.word	0x7ff80000

08010d80 <nanf>:
 8010d80:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010d88 <nanf+0x8>
 8010d84:	4770      	bx	lr
 8010d86:	bf00      	nop
 8010d88:	7fc00000 	.word	0x7fc00000

08010d8c <quorem>:
 8010d8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d90:	6903      	ldr	r3, [r0, #16]
 8010d92:	690c      	ldr	r4, [r1, #16]
 8010d94:	42a3      	cmp	r3, r4
 8010d96:	4607      	mov	r7, r0
 8010d98:	db7e      	blt.n	8010e98 <quorem+0x10c>
 8010d9a:	3c01      	subs	r4, #1
 8010d9c:	f101 0814 	add.w	r8, r1, #20
 8010da0:	00a3      	lsls	r3, r4, #2
 8010da2:	f100 0514 	add.w	r5, r0, #20
 8010da6:	9300      	str	r3, [sp, #0]
 8010da8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010dac:	9301      	str	r3, [sp, #4]
 8010dae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010db2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010db6:	3301      	adds	r3, #1
 8010db8:	429a      	cmp	r2, r3
 8010dba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010dbe:	fbb2 f6f3 	udiv	r6, r2, r3
 8010dc2:	d32e      	bcc.n	8010e22 <quorem+0x96>
 8010dc4:	f04f 0a00 	mov.w	sl, #0
 8010dc8:	46c4      	mov	ip, r8
 8010dca:	46ae      	mov	lr, r5
 8010dcc:	46d3      	mov	fp, sl
 8010dce:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010dd2:	b298      	uxth	r0, r3
 8010dd4:	fb06 a000 	mla	r0, r6, r0, sl
 8010dd8:	0c02      	lsrs	r2, r0, #16
 8010dda:	0c1b      	lsrs	r3, r3, #16
 8010ddc:	fb06 2303 	mla	r3, r6, r3, r2
 8010de0:	f8de 2000 	ldr.w	r2, [lr]
 8010de4:	b280      	uxth	r0, r0
 8010de6:	b292      	uxth	r2, r2
 8010de8:	1a12      	subs	r2, r2, r0
 8010dea:	445a      	add	r2, fp
 8010dec:	f8de 0000 	ldr.w	r0, [lr]
 8010df0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010df4:	b29b      	uxth	r3, r3
 8010df6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010dfa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010dfe:	b292      	uxth	r2, r2
 8010e00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010e04:	45e1      	cmp	r9, ip
 8010e06:	f84e 2b04 	str.w	r2, [lr], #4
 8010e0a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010e0e:	d2de      	bcs.n	8010dce <quorem+0x42>
 8010e10:	9b00      	ldr	r3, [sp, #0]
 8010e12:	58eb      	ldr	r3, [r5, r3]
 8010e14:	b92b      	cbnz	r3, 8010e22 <quorem+0x96>
 8010e16:	9b01      	ldr	r3, [sp, #4]
 8010e18:	3b04      	subs	r3, #4
 8010e1a:	429d      	cmp	r5, r3
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	d32f      	bcc.n	8010e80 <quorem+0xf4>
 8010e20:	613c      	str	r4, [r7, #16]
 8010e22:	4638      	mov	r0, r7
 8010e24:	f001 fd10 	bl	8012848 <__mcmp>
 8010e28:	2800      	cmp	r0, #0
 8010e2a:	db25      	blt.n	8010e78 <quorem+0xec>
 8010e2c:	4629      	mov	r1, r5
 8010e2e:	2000      	movs	r0, #0
 8010e30:	f858 2b04 	ldr.w	r2, [r8], #4
 8010e34:	f8d1 c000 	ldr.w	ip, [r1]
 8010e38:	fa1f fe82 	uxth.w	lr, r2
 8010e3c:	fa1f f38c 	uxth.w	r3, ip
 8010e40:	eba3 030e 	sub.w	r3, r3, lr
 8010e44:	4403      	add	r3, r0
 8010e46:	0c12      	lsrs	r2, r2, #16
 8010e48:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010e4c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e56:	45c1      	cmp	r9, r8
 8010e58:	f841 3b04 	str.w	r3, [r1], #4
 8010e5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010e60:	d2e6      	bcs.n	8010e30 <quorem+0xa4>
 8010e62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010e66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010e6a:	b922      	cbnz	r2, 8010e76 <quorem+0xea>
 8010e6c:	3b04      	subs	r3, #4
 8010e6e:	429d      	cmp	r5, r3
 8010e70:	461a      	mov	r2, r3
 8010e72:	d30b      	bcc.n	8010e8c <quorem+0x100>
 8010e74:	613c      	str	r4, [r7, #16]
 8010e76:	3601      	adds	r6, #1
 8010e78:	4630      	mov	r0, r6
 8010e7a:	b003      	add	sp, #12
 8010e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e80:	6812      	ldr	r2, [r2, #0]
 8010e82:	3b04      	subs	r3, #4
 8010e84:	2a00      	cmp	r2, #0
 8010e86:	d1cb      	bne.n	8010e20 <quorem+0x94>
 8010e88:	3c01      	subs	r4, #1
 8010e8a:	e7c6      	b.n	8010e1a <quorem+0x8e>
 8010e8c:	6812      	ldr	r2, [r2, #0]
 8010e8e:	3b04      	subs	r3, #4
 8010e90:	2a00      	cmp	r2, #0
 8010e92:	d1ef      	bne.n	8010e74 <quorem+0xe8>
 8010e94:	3c01      	subs	r4, #1
 8010e96:	e7ea      	b.n	8010e6e <quorem+0xe2>
 8010e98:	2000      	movs	r0, #0
 8010e9a:	e7ee      	b.n	8010e7a <quorem+0xee>
 8010e9c:	0000      	movs	r0, r0
	...

08010ea0 <_dtoa_r>:
 8010ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea4:	69c7      	ldr	r7, [r0, #28]
 8010ea6:	b099      	sub	sp, #100	@ 0x64
 8010ea8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010eac:	ec55 4b10 	vmov	r4, r5, d0
 8010eb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010eb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8010eb4:	4683      	mov	fp, r0
 8010eb6:	920e      	str	r2, [sp, #56]	@ 0x38
 8010eb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010eba:	b97f      	cbnz	r7, 8010edc <_dtoa_r+0x3c>
 8010ebc:	2010      	movs	r0, #16
 8010ebe:	f001 f937 	bl	8012130 <malloc>
 8010ec2:	4602      	mov	r2, r0
 8010ec4:	f8cb 001c 	str.w	r0, [fp, #28]
 8010ec8:	b920      	cbnz	r0, 8010ed4 <_dtoa_r+0x34>
 8010eca:	4ba7      	ldr	r3, [pc, #668]	@ (8011168 <_dtoa_r+0x2c8>)
 8010ecc:	21ef      	movs	r1, #239	@ 0xef
 8010ece:	48a7      	ldr	r0, [pc, #668]	@ (801116c <_dtoa_r+0x2cc>)
 8010ed0:	f002 f95e 	bl	8013190 <__assert_func>
 8010ed4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010ed8:	6007      	str	r7, [r0, #0]
 8010eda:	60c7      	str	r7, [r0, #12]
 8010edc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010ee0:	6819      	ldr	r1, [r3, #0]
 8010ee2:	b159      	cbz	r1, 8010efc <_dtoa_r+0x5c>
 8010ee4:	685a      	ldr	r2, [r3, #4]
 8010ee6:	604a      	str	r2, [r1, #4]
 8010ee8:	2301      	movs	r3, #1
 8010eea:	4093      	lsls	r3, r2
 8010eec:	608b      	str	r3, [r1, #8]
 8010eee:	4658      	mov	r0, fp
 8010ef0:	f001 fa26 	bl	8012340 <_Bfree>
 8010ef4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	601a      	str	r2, [r3, #0]
 8010efc:	1e2b      	subs	r3, r5, #0
 8010efe:	bfb9      	ittee	lt
 8010f00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010f04:	9303      	strlt	r3, [sp, #12]
 8010f06:	2300      	movge	r3, #0
 8010f08:	6033      	strge	r3, [r6, #0]
 8010f0a:	9f03      	ldr	r7, [sp, #12]
 8010f0c:	4b98      	ldr	r3, [pc, #608]	@ (8011170 <_dtoa_r+0x2d0>)
 8010f0e:	bfbc      	itt	lt
 8010f10:	2201      	movlt	r2, #1
 8010f12:	6032      	strlt	r2, [r6, #0]
 8010f14:	43bb      	bics	r3, r7
 8010f16:	d112      	bne.n	8010f3e <_dtoa_r+0x9e>
 8010f18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010f1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010f1e:	6013      	str	r3, [r2, #0]
 8010f20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010f24:	4323      	orrs	r3, r4
 8010f26:	f000 854d 	beq.w	80119c4 <_dtoa_r+0xb24>
 8010f2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010f2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011184 <_dtoa_r+0x2e4>
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	f000 854f 	beq.w	80119d4 <_dtoa_r+0xb34>
 8010f36:	f10a 0303 	add.w	r3, sl, #3
 8010f3a:	f000 bd49 	b.w	80119d0 <_dtoa_r+0xb30>
 8010f3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010f42:	2200      	movs	r2, #0
 8010f44:	ec51 0b17 	vmov	r0, r1, d7
 8010f48:	2300      	movs	r3, #0
 8010f4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010f4e:	f7ef fde3 	bl	8000b18 <__aeabi_dcmpeq>
 8010f52:	4680      	mov	r8, r0
 8010f54:	b158      	cbz	r0, 8010f6e <_dtoa_r+0xce>
 8010f56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010f58:	2301      	movs	r3, #1
 8010f5a:	6013      	str	r3, [r2, #0]
 8010f5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010f5e:	b113      	cbz	r3, 8010f66 <_dtoa_r+0xc6>
 8010f60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010f62:	4b84      	ldr	r3, [pc, #528]	@ (8011174 <_dtoa_r+0x2d4>)
 8010f64:	6013      	str	r3, [r2, #0]
 8010f66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011188 <_dtoa_r+0x2e8>
 8010f6a:	f000 bd33 	b.w	80119d4 <_dtoa_r+0xb34>
 8010f6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010f72:	aa16      	add	r2, sp, #88	@ 0x58
 8010f74:	a917      	add	r1, sp, #92	@ 0x5c
 8010f76:	4658      	mov	r0, fp
 8010f78:	f001 fd86 	bl	8012a88 <__d2b>
 8010f7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010f80:	4681      	mov	r9, r0
 8010f82:	2e00      	cmp	r6, #0
 8010f84:	d077      	beq.n	8011076 <_dtoa_r+0x1d6>
 8010f86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010f88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010f90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010f94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010f98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010f9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010fa0:	4619      	mov	r1, r3
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	4b74      	ldr	r3, [pc, #464]	@ (8011178 <_dtoa_r+0x2d8>)
 8010fa6:	f7ef f997 	bl	80002d8 <__aeabi_dsub>
 8010faa:	a369      	add	r3, pc, #420	@ (adr r3, 8011150 <_dtoa_r+0x2b0>)
 8010fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb0:	f7ef fb4a 	bl	8000648 <__aeabi_dmul>
 8010fb4:	a368      	add	r3, pc, #416	@ (adr r3, 8011158 <_dtoa_r+0x2b8>)
 8010fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fba:	f7ef f98f 	bl	80002dc <__adddf3>
 8010fbe:	4604      	mov	r4, r0
 8010fc0:	4630      	mov	r0, r6
 8010fc2:	460d      	mov	r5, r1
 8010fc4:	f7ef fad6 	bl	8000574 <__aeabi_i2d>
 8010fc8:	a365      	add	r3, pc, #404	@ (adr r3, 8011160 <_dtoa_r+0x2c0>)
 8010fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fce:	f7ef fb3b 	bl	8000648 <__aeabi_dmul>
 8010fd2:	4602      	mov	r2, r0
 8010fd4:	460b      	mov	r3, r1
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	4629      	mov	r1, r5
 8010fda:	f7ef f97f 	bl	80002dc <__adddf3>
 8010fde:	4604      	mov	r4, r0
 8010fe0:	460d      	mov	r5, r1
 8010fe2:	f7ef fde1 	bl	8000ba8 <__aeabi_d2iz>
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	4607      	mov	r7, r0
 8010fea:	2300      	movs	r3, #0
 8010fec:	4620      	mov	r0, r4
 8010fee:	4629      	mov	r1, r5
 8010ff0:	f7ef fd9c 	bl	8000b2c <__aeabi_dcmplt>
 8010ff4:	b140      	cbz	r0, 8011008 <_dtoa_r+0x168>
 8010ff6:	4638      	mov	r0, r7
 8010ff8:	f7ef fabc 	bl	8000574 <__aeabi_i2d>
 8010ffc:	4622      	mov	r2, r4
 8010ffe:	462b      	mov	r3, r5
 8011000:	f7ef fd8a 	bl	8000b18 <__aeabi_dcmpeq>
 8011004:	b900      	cbnz	r0, 8011008 <_dtoa_r+0x168>
 8011006:	3f01      	subs	r7, #1
 8011008:	2f16      	cmp	r7, #22
 801100a:	d851      	bhi.n	80110b0 <_dtoa_r+0x210>
 801100c:	4b5b      	ldr	r3, [pc, #364]	@ (801117c <_dtoa_r+0x2dc>)
 801100e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801101a:	f7ef fd87 	bl	8000b2c <__aeabi_dcmplt>
 801101e:	2800      	cmp	r0, #0
 8011020:	d048      	beq.n	80110b4 <_dtoa_r+0x214>
 8011022:	3f01      	subs	r7, #1
 8011024:	2300      	movs	r3, #0
 8011026:	9312      	str	r3, [sp, #72]	@ 0x48
 8011028:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801102a:	1b9b      	subs	r3, r3, r6
 801102c:	1e5a      	subs	r2, r3, #1
 801102e:	bf44      	itt	mi
 8011030:	f1c3 0801 	rsbmi	r8, r3, #1
 8011034:	2300      	movmi	r3, #0
 8011036:	9208      	str	r2, [sp, #32]
 8011038:	bf54      	ite	pl
 801103a:	f04f 0800 	movpl.w	r8, #0
 801103e:	9308      	strmi	r3, [sp, #32]
 8011040:	2f00      	cmp	r7, #0
 8011042:	db39      	blt.n	80110b8 <_dtoa_r+0x218>
 8011044:	9b08      	ldr	r3, [sp, #32]
 8011046:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011048:	443b      	add	r3, r7
 801104a:	9308      	str	r3, [sp, #32]
 801104c:	2300      	movs	r3, #0
 801104e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011052:	2b09      	cmp	r3, #9
 8011054:	d864      	bhi.n	8011120 <_dtoa_r+0x280>
 8011056:	2b05      	cmp	r3, #5
 8011058:	bfc4      	itt	gt
 801105a:	3b04      	subgt	r3, #4
 801105c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801105e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011060:	f1a3 0302 	sub.w	r3, r3, #2
 8011064:	bfcc      	ite	gt
 8011066:	2400      	movgt	r4, #0
 8011068:	2401      	movle	r4, #1
 801106a:	2b03      	cmp	r3, #3
 801106c:	d863      	bhi.n	8011136 <_dtoa_r+0x296>
 801106e:	e8df f003 	tbb	[pc, r3]
 8011072:	372a      	.short	0x372a
 8011074:	5535      	.short	0x5535
 8011076:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801107a:	441e      	add	r6, r3
 801107c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011080:	2b20      	cmp	r3, #32
 8011082:	bfc1      	itttt	gt
 8011084:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011088:	409f      	lslgt	r7, r3
 801108a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801108e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011092:	bfd6      	itet	le
 8011094:	f1c3 0320 	rsble	r3, r3, #32
 8011098:	ea47 0003 	orrgt.w	r0, r7, r3
 801109c:	fa04 f003 	lslle.w	r0, r4, r3
 80110a0:	f7ef fa58 	bl	8000554 <__aeabi_ui2d>
 80110a4:	2201      	movs	r2, #1
 80110a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80110aa:	3e01      	subs	r6, #1
 80110ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80110ae:	e777      	b.n	8010fa0 <_dtoa_r+0x100>
 80110b0:	2301      	movs	r3, #1
 80110b2:	e7b8      	b.n	8011026 <_dtoa_r+0x186>
 80110b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80110b6:	e7b7      	b.n	8011028 <_dtoa_r+0x188>
 80110b8:	427b      	negs	r3, r7
 80110ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80110bc:	2300      	movs	r3, #0
 80110be:	eba8 0807 	sub.w	r8, r8, r7
 80110c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80110c4:	e7c4      	b.n	8011050 <_dtoa_r+0x1b0>
 80110c6:	2300      	movs	r3, #0
 80110c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80110ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	dc35      	bgt.n	801113c <_dtoa_r+0x29c>
 80110d0:	2301      	movs	r3, #1
 80110d2:	9300      	str	r3, [sp, #0]
 80110d4:	9307      	str	r3, [sp, #28]
 80110d6:	461a      	mov	r2, r3
 80110d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80110da:	e00b      	b.n	80110f4 <_dtoa_r+0x254>
 80110dc:	2301      	movs	r3, #1
 80110de:	e7f3      	b.n	80110c8 <_dtoa_r+0x228>
 80110e0:	2300      	movs	r3, #0
 80110e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80110e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80110e6:	18fb      	adds	r3, r7, r3
 80110e8:	9300      	str	r3, [sp, #0]
 80110ea:	3301      	adds	r3, #1
 80110ec:	2b01      	cmp	r3, #1
 80110ee:	9307      	str	r3, [sp, #28]
 80110f0:	bfb8      	it	lt
 80110f2:	2301      	movlt	r3, #1
 80110f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80110f8:	2100      	movs	r1, #0
 80110fa:	2204      	movs	r2, #4
 80110fc:	f102 0514 	add.w	r5, r2, #20
 8011100:	429d      	cmp	r5, r3
 8011102:	d91f      	bls.n	8011144 <_dtoa_r+0x2a4>
 8011104:	6041      	str	r1, [r0, #4]
 8011106:	4658      	mov	r0, fp
 8011108:	f001 f8da 	bl	80122c0 <_Balloc>
 801110c:	4682      	mov	sl, r0
 801110e:	2800      	cmp	r0, #0
 8011110:	d13c      	bne.n	801118c <_dtoa_r+0x2ec>
 8011112:	4b1b      	ldr	r3, [pc, #108]	@ (8011180 <_dtoa_r+0x2e0>)
 8011114:	4602      	mov	r2, r0
 8011116:	f240 11af 	movw	r1, #431	@ 0x1af
 801111a:	e6d8      	b.n	8010ece <_dtoa_r+0x2e>
 801111c:	2301      	movs	r3, #1
 801111e:	e7e0      	b.n	80110e2 <_dtoa_r+0x242>
 8011120:	2401      	movs	r4, #1
 8011122:	2300      	movs	r3, #0
 8011124:	9309      	str	r3, [sp, #36]	@ 0x24
 8011126:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011128:	f04f 33ff 	mov.w	r3, #4294967295
 801112c:	9300      	str	r3, [sp, #0]
 801112e:	9307      	str	r3, [sp, #28]
 8011130:	2200      	movs	r2, #0
 8011132:	2312      	movs	r3, #18
 8011134:	e7d0      	b.n	80110d8 <_dtoa_r+0x238>
 8011136:	2301      	movs	r3, #1
 8011138:	930b      	str	r3, [sp, #44]	@ 0x2c
 801113a:	e7f5      	b.n	8011128 <_dtoa_r+0x288>
 801113c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801113e:	9300      	str	r3, [sp, #0]
 8011140:	9307      	str	r3, [sp, #28]
 8011142:	e7d7      	b.n	80110f4 <_dtoa_r+0x254>
 8011144:	3101      	adds	r1, #1
 8011146:	0052      	lsls	r2, r2, #1
 8011148:	e7d8      	b.n	80110fc <_dtoa_r+0x25c>
 801114a:	bf00      	nop
 801114c:	f3af 8000 	nop.w
 8011150:	636f4361 	.word	0x636f4361
 8011154:	3fd287a7 	.word	0x3fd287a7
 8011158:	8b60c8b3 	.word	0x8b60c8b3
 801115c:	3fc68a28 	.word	0x3fc68a28
 8011160:	509f79fb 	.word	0x509f79fb
 8011164:	3fd34413 	.word	0x3fd34413
 8011168:	08014806 	.word	0x08014806
 801116c:	0801481d 	.word	0x0801481d
 8011170:	7ff00000 	.word	0x7ff00000
 8011174:	080147c9 	.word	0x080147c9
 8011178:	3ff80000 	.word	0x3ff80000
 801117c:	08014978 	.word	0x08014978
 8011180:	08014875 	.word	0x08014875
 8011184:	08014802 	.word	0x08014802
 8011188:	080147c8 	.word	0x080147c8
 801118c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011190:	6018      	str	r0, [r3, #0]
 8011192:	9b07      	ldr	r3, [sp, #28]
 8011194:	2b0e      	cmp	r3, #14
 8011196:	f200 80a4 	bhi.w	80112e2 <_dtoa_r+0x442>
 801119a:	2c00      	cmp	r4, #0
 801119c:	f000 80a1 	beq.w	80112e2 <_dtoa_r+0x442>
 80111a0:	2f00      	cmp	r7, #0
 80111a2:	dd33      	ble.n	801120c <_dtoa_r+0x36c>
 80111a4:	4bad      	ldr	r3, [pc, #692]	@ (801145c <_dtoa_r+0x5bc>)
 80111a6:	f007 020f 	and.w	r2, r7, #15
 80111aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80111ae:	ed93 7b00 	vldr	d7, [r3]
 80111b2:	05f8      	lsls	r0, r7, #23
 80111b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80111b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80111bc:	d516      	bpl.n	80111ec <_dtoa_r+0x34c>
 80111be:	4ba8      	ldr	r3, [pc, #672]	@ (8011460 <_dtoa_r+0x5c0>)
 80111c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80111c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80111c8:	f7ef fb68 	bl	800089c <__aeabi_ddiv>
 80111cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111d0:	f004 040f 	and.w	r4, r4, #15
 80111d4:	2603      	movs	r6, #3
 80111d6:	4da2      	ldr	r5, [pc, #648]	@ (8011460 <_dtoa_r+0x5c0>)
 80111d8:	b954      	cbnz	r4, 80111f0 <_dtoa_r+0x350>
 80111da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80111de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111e2:	f7ef fb5b 	bl	800089c <__aeabi_ddiv>
 80111e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111ea:	e028      	b.n	801123e <_dtoa_r+0x39e>
 80111ec:	2602      	movs	r6, #2
 80111ee:	e7f2      	b.n	80111d6 <_dtoa_r+0x336>
 80111f0:	07e1      	lsls	r1, r4, #31
 80111f2:	d508      	bpl.n	8011206 <_dtoa_r+0x366>
 80111f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80111f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80111fc:	f7ef fa24 	bl	8000648 <__aeabi_dmul>
 8011200:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011204:	3601      	adds	r6, #1
 8011206:	1064      	asrs	r4, r4, #1
 8011208:	3508      	adds	r5, #8
 801120a:	e7e5      	b.n	80111d8 <_dtoa_r+0x338>
 801120c:	f000 80d2 	beq.w	80113b4 <_dtoa_r+0x514>
 8011210:	427c      	negs	r4, r7
 8011212:	4b92      	ldr	r3, [pc, #584]	@ (801145c <_dtoa_r+0x5bc>)
 8011214:	4d92      	ldr	r5, [pc, #584]	@ (8011460 <_dtoa_r+0x5c0>)
 8011216:	f004 020f 	and.w	r2, r4, #15
 801121a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011222:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011226:	f7ef fa0f 	bl	8000648 <__aeabi_dmul>
 801122a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801122e:	1124      	asrs	r4, r4, #4
 8011230:	2300      	movs	r3, #0
 8011232:	2602      	movs	r6, #2
 8011234:	2c00      	cmp	r4, #0
 8011236:	f040 80b2 	bne.w	801139e <_dtoa_r+0x4fe>
 801123a:	2b00      	cmp	r3, #0
 801123c:	d1d3      	bne.n	80111e6 <_dtoa_r+0x346>
 801123e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011240:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011244:	2b00      	cmp	r3, #0
 8011246:	f000 80b7 	beq.w	80113b8 <_dtoa_r+0x518>
 801124a:	4b86      	ldr	r3, [pc, #536]	@ (8011464 <_dtoa_r+0x5c4>)
 801124c:	2200      	movs	r2, #0
 801124e:	4620      	mov	r0, r4
 8011250:	4629      	mov	r1, r5
 8011252:	f7ef fc6b 	bl	8000b2c <__aeabi_dcmplt>
 8011256:	2800      	cmp	r0, #0
 8011258:	f000 80ae 	beq.w	80113b8 <_dtoa_r+0x518>
 801125c:	9b07      	ldr	r3, [sp, #28]
 801125e:	2b00      	cmp	r3, #0
 8011260:	f000 80aa 	beq.w	80113b8 <_dtoa_r+0x518>
 8011264:	9b00      	ldr	r3, [sp, #0]
 8011266:	2b00      	cmp	r3, #0
 8011268:	dd37      	ble.n	80112da <_dtoa_r+0x43a>
 801126a:	1e7b      	subs	r3, r7, #1
 801126c:	9304      	str	r3, [sp, #16]
 801126e:	4620      	mov	r0, r4
 8011270:	4b7d      	ldr	r3, [pc, #500]	@ (8011468 <_dtoa_r+0x5c8>)
 8011272:	2200      	movs	r2, #0
 8011274:	4629      	mov	r1, r5
 8011276:	f7ef f9e7 	bl	8000648 <__aeabi_dmul>
 801127a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801127e:	9c00      	ldr	r4, [sp, #0]
 8011280:	3601      	adds	r6, #1
 8011282:	4630      	mov	r0, r6
 8011284:	f7ef f976 	bl	8000574 <__aeabi_i2d>
 8011288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801128c:	f7ef f9dc 	bl	8000648 <__aeabi_dmul>
 8011290:	4b76      	ldr	r3, [pc, #472]	@ (801146c <_dtoa_r+0x5cc>)
 8011292:	2200      	movs	r2, #0
 8011294:	f7ef f822 	bl	80002dc <__adddf3>
 8011298:	4605      	mov	r5, r0
 801129a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801129e:	2c00      	cmp	r4, #0
 80112a0:	f040 808d 	bne.w	80113be <_dtoa_r+0x51e>
 80112a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112a8:	4b71      	ldr	r3, [pc, #452]	@ (8011470 <_dtoa_r+0x5d0>)
 80112aa:	2200      	movs	r2, #0
 80112ac:	f7ef f814 	bl	80002d8 <__aeabi_dsub>
 80112b0:	4602      	mov	r2, r0
 80112b2:	460b      	mov	r3, r1
 80112b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80112b8:	462a      	mov	r2, r5
 80112ba:	4633      	mov	r3, r6
 80112bc:	f7ef fc54 	bl	8000b68 <__aeabi_dcmpgt>
 80112c0:	2800      	cmp	r0, #0
 80112c2:	f040 828b 	bne.w	80117dc <_dtoa_r+0x93c>
 80112c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112ca:	462a      	mov	r2, r5
 80112cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80112d0:	f7ef fc2c 	bl	8000b2c <__aeabi_dcmplt>
 80112d4:	2800      	cmp	r0, #0
 80112d6:	f040 8128 	bne.w	801152a <_dtoa_r+0x68a>
 80112da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80112de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80112e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	f2c0 815a 	blt.w	801159e <_dtoa_r+0x6fe>
 80112ea:	2f0e      	cmp	r7, #14
 80112ec:	f300 8157 	bgt.w	801159e <_dtoa_r+0x6fe>
 80112f0:	4b5a      	ldr	r3, [pc, #360]	@ (801145c <_dtoa_r+0x5bc>)
 80112f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80112f6:	ed93 7b00 	vldr	d7, [r3]
 80112fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	ed8d 7b00 	vstr	d7, [sp]
 8011302:	da03      	bge.n	801130c <_dtoa_r+0x46c>
 8011304:	9b07      	ldr	r3, [sp, #28]
 8011306:	2b00      	cmp	r3, #0
 8011308:	f340 8101 	ble.w	801150e <_dtoa_r+0x66e>
 801130c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011310:	4656      	mov	r6, sl
 8011312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011316:	4620      	mov	r0, r4
 8011318:	4629      	mov	r1, r5
 801131a:	f7ef fabf 	bl	800089c <__aeabi_ddiv>
 801131e:	f7ef fc43 	bl	8000ba8 <__aeabi_d2iz>
 8011322:	4680      	mov	r8, r0
 8011324:	f7ef f926 	bl	8000574 <__aeabi_i2d>
 8011328:	e9dd 2300 	ldrd	r2, r3, [sp]
 801132c:	f7ef f98c 	bl	8000648 <__aeabi_dmul>
 8011330:	4602      	mov	r2, r0
 8011332:	460b      	mov	r3, r1
 8011334:	4620      	mov	r0, r4
 8011336:	4629      	mov	r1, r5
 8011338:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801133c:	f7ee ffcc 	bl	80002d8 <__aeabi_dsub>
 8011340:	f806 4b01 	strb.w	r4, [r6], #1
 8011344:	9d07      	ldr	r5, [sp, #28]
 8011346:	eba6 040a 	sub.w	r4, r6, sl
 801134a:	42a5      	cmp	r5, r4
 801134c:	4602      	mov	r2, r0
 801134e:	460b      	mov	r3, r1
 8011350:	f040 8117 	bne.w	8011582 <_dtoa_r+0x6e2>
 8011354:	f7ee ffc2 	bl	80002dc <__adddf3>
 8011358:	e9dd 2300 	ldrd	r2, r3, [sp]
 801135c:	4604      	mov	r4, r0
 801135e:	460d      	mov	r5, r1
 8011360:	f7ef fc02 	bl	8000b68 <__aeabi_dcmpgt>
 8011364:	2800      	cmp	r0, #0
 8011366:	f040 80f9 	bne.w	801155c <_dtoa_r+0x6bc>
 801136a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801136e:	4620      	mov	r0, r4
 8011370:	4629      	mov	r1, r5
 8011372:	f7ef fbd1 	bl	8000b18 <__aeabi_dcmpeq>
 8011376:	b118      	cbz	r0, 8011380 <_dtoa_r+0x4e0>
 8011378:	f018 0f01 	tst.w	r8, #1
 801137c:	f040 80ee 	bne.w	801155c <_dtoa_r+0x6bc>
 8011380:	4649      	mov	r1, r9
 8011382:	4658      	mov	r0, fp
 8011384:	f000 ffdc 	bl	8012340 <_Bfree>
 8011388:	2300      	movs	r3, #0
 801138a:	7033      	strb	r3, [r6, #0]
 801138c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801138e:	3701      	adds	r7, #1
 8011390:	601f      	str	r7, [r3, #0]
 8011392:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011394:	2b00      	cmp	r3, #0
 8011396:	f000 831d 	beq.w	80119d4 <_dtoa_r+0xb34>
 801139a:	601e      	str	r6, [r3, #0]
 801139c:	e31a      	b.n	80119d4 <_dtoa_r+0xb34>
 801139e:	07e2      	lsls	r2, r4, #31
 80113a0:	d505      	bpl.n	80113ae <_dtoa_r+0x50e>
 80113a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80113a6:	f7ef f94f 	bl	8000648 <__aeabi_dmul>
 80113aa:	3601      	adds	r6, #1
 80113ac:	2301      	movs	r3, #1
 80113ae:	1064      	asrs	r4, r4, #1
 80113b0:	3508      	adds	r5, #8
 80113b2:	e73f      	b.n	8011234 <_dtoa_r+0x394>
 80113b4:	2602      	movs	r6, #2
 80113b6:	e742      	b.n	801123e <_dtoa_r+0x39e>
 80113b8:	9c07      	ldr	r4, [sp, #28]
 80113ba:	9704      	str	r7, [sp, #16]
 80113bc:	e761      	b.n	8011282 <_dtoa_r+0x3e2>
 80113be:	4b27      	ldr	r3, [pc, #156]	@ (801145c <_dtoa_r+0x5bc>)
 80113c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80113c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80113c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80113ca:	4454      	add	r4, sl
 80113cc:	2900      	cmp	r1, #0
 80113ce:	d053      	beq.n	8011478 <_dtoa_r+0x5d8>
 80113d0:	4928      	ldr	r1, [pc, #160]	@ (8011474 <_dtoa_r+0x5d4>)
 80113d2:	2000      	movs	r0, #0
 80113d4:	f7ef fa62 	bl	800089c <__aeabi_ddiv>
 80113d8:	4633      	mov	r3, r6
 80113da:	462a      	mov	r2, r5
 80113dc:	f7ee ff7c 	bl	80002d8 <__aeabi_dsub>
 80113e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80113e4:	4656      	mov	r6, sl
 80113e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113ea:	f7ef fbdd 	bl	8000ba8 <__aeabi_d2iz>
 80113ee:	4605      	mov	r5, r0
 80113f0:	f7ef f8c0 	bl	8000574 <__aeabi_i2d>
 80113f4:	4602      	mov	r2, r0
 80113f6:	460b      	mov	r3, r1
 80113f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113fc:	f7ee ff6c 	bl	80002d8 <__aeabi_dsub>
 8011400:	3530      	adds	r5, #48	@ 0x30
 8011402:	4602      	mov	r2, r0
 8011404:	460b      	mov	r3, r1
 8011406:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801140a:	f806 5b01 	strb.w	r5, [r6], #1
 801140e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011412:	f7ef fb8b 	bl	8000b2c <__aeabi_dcmplt>
 8011416:	2800      	cmp	r0, #0
 8011418:	d171      	bne.n	80114fe <_dtoa_r+0x65e>
 801141a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801141e:	4911      	ldr	r1, [pc, #68]	@ (8011464 <_dtoa_r+0x5c4>)
 8011420:	2000      	movs	r0, #0
 8011422:	f7ee ff59 	bl	80002d8 <__aeabi_dsub>
 8011426:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801142a:	f7ef fb7f 	bl	8000b2c <__aeabi_dcmplt>
 801142e:	2800      	cmp	r0, #0
 8011430:	f040 8095 	bne.w	801155e <_dtoa_r+0x6be>
 8011434:	42a6      	cmp	r6, r4
 8011436:	f43f af50 	beq.w	80112da <_dtoa_r+0x43a>
 801143a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801143e:	4b0a      	ldr	r3, [pc, #40]	@ (8011468 <_dtoa_r+0x5c8>)
 8011440:	2200      	movs	r2, #0
 8011442:	f7ef f901 	bl	8000648 <__aeabi_dmul>
 8011446:	4b08      	ldr	r3, [pc, #32]	@ (8011468 <_dtoa_r+0x5c8>)
 8011448:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801144c:	2200      	movs	r2, #0
 801144e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011452:	f7ef f8f9 	bl	8000648 <__aeabi_dmul>
 8011456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801145a:	e7c4      	b.n	80113e6 <_dtoa_r+0x546>
 801145c:	08014978 	.word	0x08014978
 8011460:	08014950 	.word	0x08014950
 8011464:	3ff00000 	.word	0x3ff00000
 8011468:	40240000 	.word	0x40240000
 801146c:	401c0000 	.word	0x401c0000
 8011470:	40140000 	.word	0x40140000
 8011474:	3fe00000 	.word	0x3fe00000
 8011478:	4631      	mov	r1, r6
 801147a:	4628      	mov	r0, r5
 801147c:	f7ef f8e4 	bl	8000648 <__aeabi_dmul>
 8011480:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011484:	9415      	str	r4, [sp, #84]	@ 0x54
 8011486:	4656      	mov	r6, sl
 8011488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801148c:	f7ef fb8c 	bl	8000ba8 <__aeabi_d2iz>
 8011490:	4605      	mov	r5, r0
 8011492:	f7ef f86f 	bl	8000574 <__aeabi_i2d>
 8011496:	4602      	mov	r2, r0
 8011498:	460b      	mov	r3, r1
 801149a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801149e:	f7ee ff1b 	bl	80002d8 <__aeabi_dsub>
 80114a2:	3530      	adds	r5, #48	@ 0x30
 80114a4:	f806 5b01 	strb.w	r5, [r6], #1
 80114a8:	4602      	mov	r2, r0
 80114aa:	460b      	mov	r3, r1
 80114ac:	42a6      	cmp	r6, r4
 80114ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80114b2:	f04f 0200 	mov.w	r2, #0
 80114b6:	d124      	bne.n	8011502 <_dtoa_r+0x662>
 80114b8:	4bac      	ldr	r3, [pc, #688]	@ (801176c <_dtoa_r+0x8cc>)
 80114ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80114be:	f7ee ff0d 	bl	80002dc <__adddf3>
 80114c2:	4602      	mov	r2, r0
 80114c4:	460b      	mov	r3, r1
 80114c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114ca:	f7ef fb4d 	bl	8000b68 <__aeabi_dcmpgt>
 80114ce:	2800      	cmp	r0, #0
 80114d0:	d145      	bne.n	801155e <_dtoa_r+0x6be>
 80114d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80114d6:	49a5      	ldr	r1, [pc, #660]	@ (801176c <_dtoa_r+0x8cc>)
 80114d8:	2000      	movs	r0, #0
 80114da:	f7ee fefd 	bl	80002d8 <__aeabi_dsub>
 80114de:	4602      	mov	r2, r0
 80114e0:	460b      	mov	r3, r1
 80114e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114e6:	f7ef fb21 	bl	8000b2c <__aeabi_dcmplt>
 80114ea:	2800      	cmp	r0, #0
 80114ec:	f43f aef5 	beq.w	80112da <_dtoa_r+0x43a>
 80114f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80114f2:	1e73      	subs	r3, r6, #1
 80114f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80114f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80114fa:	2b30      	cmp	r3, #48	@ 0x30
 80114fc:	d0f8      	beq.n	80114f0 <_dtoa_r+0x650>
 80114fe:	9f04      	ldr	r7, [sp, #16]
 8011500:	e73e      	b.n	8011380 <_dtoa_r+0x4e0>
 8011502:	4b9b      	ldr	r3, [pc, #620]	@ (8011770 <_dtoa_r+0x8d0>)
 8011504:	f7ef f8a0 	bl	8000648 <__aeabi_dmul>
 8011508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801150c:	e7bc      	b.n	8011488 <_dtoa_r+0x5e8>
 801150e:	d10c      	bne.n	801152a <_dtoa_r+0x68a>
 8011510:	4b98      	ldr	r3, [pc, #608]	@ (8011774 <_dtoa_r+0x8d4>)
 8011512:	2200      	movs	r2, #0
 8011514:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011518:	f7ef f896 	bl	8000648 <__aeabi_dmul>
 801151c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011520:	f7ef fb18 	bl	8000b54 <__aeabi_dcmpge>
 8011524:	2800      	cmp	r0, #0
 8011526:	f000 8157 	beq.w	80117d8 <_dtoa_r+0x938>
 801152a:	2400      	movs	r4, #0
 801152c:	4625      	mov	r5, r4
 801152e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011530:	43db      	mvns	r3, r3
 8011532:	9304      	str	r3, [sp, #16]
 8011534:	4656      	mov	r6, sl
 8011536:	2700      	movs	r7, #0
 8011538:	4621      	mov	r1, r4
 801153a:	4658      	mov	r0, fp
 801153c:	f000 ff00 	bl	8012340 <_Bfree>
 8011540:	2d00      	cmp	r5, #0
 8011542:	d0dc      	beq.n	80114fe <_dtoa_r+0x65e>
 8011544:	b12f      	cbz	r7, 8011552 <_dtoa_r+0x6b2>
 8011546:	42af      	cmp	r7, r5
 8011548:	d003      	beq.n	8011552 <_dtoa_r+0x6b2>
 801154a:	4639      	mov	r1, r7
 801154c:	4658      	mov	r0, fp
 801154e:	f000 fef7 	bl	8012340 <_Bfree>
 8011552:	4629      	mov	r1, r5
 8011554:	4658      	mov	r0, fp
 8011556:	f000 fef3 	bl	8012340 <_Bfree>
 801155a:	e7d0      	b.n	80114fe <_dtoa_r+0x65e>
 801155c:	9704      	str	r7, [sp, #16]
 801155e:	4633      	mov	r3, r6
 8011560:	461e      	mov	r6, r3
 8011562:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011566:	2a39      	cmp	r2, #57	@ 0x39
 8011568:	d107      	bne.n	801157a <_dtoa_r+0x6da>
 801156a:	459a      	cmp	sl, r3
 801156c:	d1f8      	bne.n	8011560 <_dtoa_r+0x6c0>
 801156e:	9a04      	ldr	r2, [sp, #16]
 8011570:	3201      	adds	r2, #1
 8011572:	9204      	str	r2, [sp, #16]
 8011574:	2230      	movs	r2, #48	@ 0x30
 8011576:	f88a 2000 	strb.w	r2, [sl]
 801157a:	781a      	ldrb	r2, [r3, #0]
 801157c:	3201      	adds	r2, #1
 801157e:	701a      	strb	r2, [r3, #0]
 8011580:	e7bd      	b.n	80114fe <_dtoa_r+0x65e>
 8011582:	4b7b      	ldr	r3, [pc, #492]	@ (8011770 <_dtoa_r+0x8d0>)
 8011584:	2200      	movs	r2, #0
 8011586:	f7ef f85f 	bl	8000648 <__aeabi_dmul>
 801158a:	2200      	movs	r2, #0
 801158c:	2300      	movs	r3, #0
 801158e:	4604      	mov	r4, r0
 8011590:	460d      	mov	r5, r1
 8011592:	f7ef fac1 	bl	8000b18 <__aeabi_dcmpeq>
 8011596:	2800      	cmp	r0, #0
 8011598:	f43f aebb 	beq.w	8011312 <_dtoa_r+0x472>
 801159c:	e6f0      	b.n	8011380 <_dtoa_r+0x4e0>
 801159e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80115a0:	2a00      	cmp	r2, #0
 80115a2:	f000 80db 	beq.w	801175c <_dtoa_r+0x8bc>
 80115a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80115a8:	2a01      	cmp	r2, #1
 80115aa:	f300 80bf 	bgt.w	801172c <_dtoa_r+0x88c>
 80115ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80115b0:	2a00      	cmp	r2, #0
 80115b2:	f000 80b7 	beq.w	8011724 <_dtoa_r+0x884>
 80115b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80115ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80115bc:	4646      	mov	r6, r8
 80115be:	9a08      	ldr	r2, [sp, #32]
 80115c0:	2101      	movs	r1, #1
 80115c2:	441a      	add	r2, r3
 80115c4:	4658      	mov	r0, fp
 80115c6:	4498      	add	r8, r3
 80115c8:	9208      	str	r2, [sp, #32]
 80115ca:	f000 ffb7 	bl	801253c <__i2b>
 80115ce:	4605      	mov	r5, r0
 80115d0:	b15e      	cbz	r6, 80115ea <_dtoa_r+0x74a>
 80115d2:	9b08      	ldr	r3, [sp, #32]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	dd08      	ble.n	80115ea <_dtoa_r+0x74a>
 80115d8:	42b3      	cmp	r3, r6
 80115da:	9a08      	ldr	r2, [sp, #32]
 80115dc:	bfa8      	it	ge
 80115de:	4633      	movge	r3, r6
 80115e0:	eba8 0803 	sub.w	r8, r8, r3
 80115e4:	1af6      	subs	r6, r6, r3
 80115e6:	1ad3      	subs	r3, r2, r3
 80115e8:	9308      	str	r3, [sp, #32]
 80115ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115ec:	b1f3      	cbz	r3, 801162c <_dtoa_r+0x78c>
 80115ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f000 80b7 	beq.w	8011764 <_dtoa_r+0x8c4>
 80115f6:	b18c      	cbz	r4, 801161c <_dtoa_r+0x77c>
 80115f8:	4629      	mov	r1, r5
 80115fa:	4622      	mov	r2, r4
 80115fc:	4658      	mov	r0, fp
 80115fe:	f001 f85d 	bl	80126bc <__pow5mult>
 8011602:	464a      	mov	r2, r9
 8011604:	4601      	mov	r1, r0
 8011606:	4605      	mov	r5, r0
 8011608:	4658      	mov	r0, fp
 801160a:	f000 ffad 	bl	8012568 <__multiply>
 801160e:	4649      	mov	r1, r9
 8011610:	9004      	str	r0, [sp, #16]
 8011612:	4658      	mov	r0, fp
 8011614:	f000 fe94 	bl	8012340 <_Bfree>
 8011618:	9b04      	ldr	r3, [sp, #16]
 801161a:	4699      	mov	r9, r3
 801161c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801161e:	1b1a      	subs	r2, r3, r4
 8011620:	d004      	beq.n	801162c <_dtoa_r+0x78c>
 8011622:	4649      	mov	r1, r9
 8011624:	4658      	mov	r0, fp
 8011626:	f001 f849 	bl	80126bc <__pow5mult>
 801162a:	4681      	mov	r9, r0
 801162c:	2101      	movs	r1, #1
 801162e:	4658      	mov	r0, fp
 8011630:	f000 ff84 	bl	801253c <__i2b>
 8011634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011636:	4604      	mov	r4, r0
 8011638:	2b00      	cmp	r3, #0
 801163a:	f000 81cf 	beq.w	80119dc <_dtoa_r+0xb3c>
 801163e:	461a      	mov	r2, r3
 8011640:	4601      	mov	r1, r0
 8011642:	4658      	mov	r0, fp
 8011644:	f001 f83a 	bl	80126bc <__pow5mult>
 8011648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801164a:	2b01      	cmp	r3, #1
 801164c:	4604      	mov	r4, r0
 801164e:	f300 8095 	bgt.w	801177c <_dtoa_r+0x8dc>
 8011652:	9b02      	ldr	r3, [sp, #8]
 8011654:	2b00      	cmp	r3, #0
 8011656:	f040 8087 	bne.w	8011768 <_dtoa_r+0x8c8>
 801165a:	9b03      	ldr	r3, [sp, #12]
 801165c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011660:	2b00      	cmp	r3, #0
 8011662:	f040 8089 	bne.w	8011778 <_dtoa_r+0x8d8>
 8011666:	9b03      	ldr	r3, [sp, #12]
 8011668:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801166c:	0d1b      	lsrs	r3, r3, #20
 801166e:	051b      	lsls	r3, r3, #20
 8011670:	b12b      	cbz	r3, 801167e <_dtoa_r+0x7de>
 8011672:	9b08      	ldr	r3, [sp, #32]
 8011674:	3301      	adds	r3, #1
 8011676:	9308      	str	r3, [sp, #32]
 8011678:	f108 0801 	add.w	r8, r8, #1
 801167c:	2301      	movs	r3, #1
 801167e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011682:	2b00      	cmp	r3, #0
 8011684:	f000 81b0 	beq.w	80119e8 <_dtoa_r+0xb48>
 8011688:	6923      	ldr	r3, [r4, #16]
 801168a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801168e:	6918      	ldr	r0, [r3, #16]
 8011690:	f000 ff08 	bl	80124a4 <__hi0bits>
 8011694:	f1c0 0020 	rsb	r0, r0, #32
 8011698:	9b08      	ldr	r3, [sp, #32]
 801169a:	4418      	add	r0, r3
 801169c:	f010 001f 	ands.w	r0, r0, #31
 80116a0:	d077      	beq.n	8011792 <_dtoa_r+0x8f2>
 80116a2:	f1c0 0320 	rsb	r3, r0, #32
 80116a6:	2b04      	cmp	r3, #4
 80116a8:	dd6b      	ble.n	8011782 <_dtoa_r+0x8e2>
 80116aa:	9b08      	ldr	r3, [sp, #32]
 80116ac:	f1c0 001c 	rsb	r0, r0, #28
 80116b0:	4403      	add	r3, r0
 80116b2:	4480      	add	r8, r0
 80116b4:	4406      	add	r6, r0
 80116b6:	9308      	str	r3, [sp, #32]
 80116b8:	f1b8 0f00 	cmp.w	r8, #0
 80116bc:	dd05      	ble.n	80116ca <_dtoa_r+0x82a>
 80116be:	4649      	mov	r1, r9
 80116c0:	4642      	mov	r2, r8
 80116c2:	4658      	mov	r0, fp
 80116c4:	f001 f854 	bl	8012770 <__lshift>
 80116c8:	4681      	mov	r9, r0
 80116ca:	9b08      	ldr	r3, [sp, #32]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	dd05      	ble.n	80116dc <_dtoa_r+0x83c>
 80116d0:	4621      	mov	r1, r4
 80116d2:	461a      	mov	r2, r3
 80116d4:	4658      	mov	r0, fp
 80116d6:	f001 f84b 	bl	8012770 <__lshift>
 80116da:	4604      	mov	r4, r0
 80116dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d059      	beq.n	8011796 <_dtoa_r+0x8f6>
 80116e2:	4621      	mov	r1, r4
 80116e4:	4648      	mov	r0, r9
 80116e6:	f001 f8af 	bl	8012848 <__mcmp>
 80116ea:	2800      	cmp	r0, #0
 80116ec:	da53      	bge.n	8011796 <_dtoa_r+0x8f6>
 80116ee:	1e7b      	subs	r3, r7, #1
 80116f0:	9304      	str	r3, [sp, #16]
 80116f2:	4649      	mov	r1, r9
 80116f4:	2300      	movs	r3, #0
 80116f6:	220a      	movs	r2, #10
 80116f8:	4658      	mov	r0, fp
 80116fa:	f000 fe43 	bl	8012384 <__multadd>
 80116fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011700:	4681      	mov	r9, r0
 8011702:	2b00      	cmp	r3, #0
 8011704:	f000 8172 	beq.w	80119ec <_dtoa_r+0xb4c>
 8011708:	2300      	movs	r3, #0
 801170a:	4629      	mov	r1, r5
 801170c:	220a      	movs	r2, #10
 801170e:	4658      	mov	r0, fp
 8011710:	f000 fe38 	bl	8012384 <__multadd>
 8011714:	9b00      	ldr	r3, [sp, #0]
 8011716:	2b00      	cmp	r3, #0
 8011718:	4605      	mov	r5, r0
 801171a:	dc67      	bgt.n	80117ec <_dtoa_r+0x94c>
 801171c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801171e:	2b02      	cmp	r3, #2
 8011720:	dc41      	bgt.n	80117a6 <_dtoa_r+0x906>
 8011722:	e063      	b.n	80117ec <_dtoa_r+0x94c>
 8011724:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011726:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801172a:	e746      	b.n	80115ba <_dtoa_r+0x71a>
 801172c:	9b07      	ldr	r3, [sp, #28]
 801172e:	1e5c      	subs	r4, r3, #1
 8011730:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011732:	42a3      	cmp	r3, r4
 8011734:	bfbf      	itttt	lt
 8011736:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011738:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801173a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801173c:	1ae3      	sublt	r3, r4, r3
 801173e:	bfb4      	ite	lt
 8011740:	18d2      	addlt	r2, r2, r3
 8011742:	1b1c      	subge	r4, r3, r4
 8011744:	9b07      	ldr	r3, [sp, #28]
 8011746:	bfbc      	itt	lt
 8011748:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801174a:	2400      	movlt	r4, #0
 801174c:	2b00      	cmp	r3, #0
 801174e:	bfb5      	itete	lt
 8011750:	eba8 0603 	sublt.w	r6, r8, r3
 8011754:	9b07      	ldrge	r3, [sp, #28]
 8011756:	2300      	movlt	r3, #0
 8011758:	4646      	movge	r6, r8
 801175a:	e730      	b.n	80115be <_dtoa_r+0x71e>
 801175c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801175e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011760:	4646      	mov	r6, r8
 8011762:	e735      	b.n	80115d0 <_dtoa_r+0x730>
 8011764:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011766:	e75c      	b.n	8011622 <_dtoa_r+0x782>
 8011768:	2300      	movs	r3, #0
 801176a:	e788      	b.n	801167e <_dtoa_r+0x7de>
 801176c:	3fe00000 	.word	0x3fe00000
 8011770:	40240000 	.word	0x40240000
 8011774:	40140000 	.word	0x40140000
 8011778:	9b02      	ldr	r3, [sp, #8]
 801177a:	e780      	b.n	801167e <_dtoa_r+0x7de>
 801177c:	2300      	movs	r3, #0
 801177e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011780:	e782      	b.n	8011688 <_dtoa_r+0x7e8>
 8011782:	d099      	beq.n	80116b8 <_dtoa_r+0x818>
 8011784:	9a08      	ldr	r2, [sp, #32]
 8011786:	331c      	adds	r3, #28
 8011788:	441a      	add	r2, r3
 801178a:	4498      	add	r8, r3
 801178c:	441e      	add	r6, r3
 801178e:	9208      	str	r2, [sp, #32]
 8011790:	e792      	b.n	80116b8 <_dtoa_r+0x818>
 8011792:	4603      	mov	r3, r0
 8011794:	e7f6      	b.n	8011784 <_dtoa_r+0x8e4>
 8011796:	9b07      	ldr	r3, [sp, #28]
 8011798:	9704      	str	r7, [sp, #16]
 801179a:	2b00      	cmp	r3, #0
 801179c:	dc20      	bgt.n	80117e0 <_dtoa_r+0x940>
 801179e:	9300      	str	r3, [sp, #0]
 80117a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117a2:	2b02      	cmp	r3, #2
 80117a4:	dd1e      	ble.n	80117e4 <_dtoa_r+0x944>
 80117a6:	9b00      	ldr	r3, [sp, #0]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	f47f aec0 	bne.w	801152e <_dtoa_r+0x68e>
 80117ae:	4621      	mov	r1, r4
 80117b0:	2205      	movs	r2, #5
 80117b2:	4658      	mov	r0, fp
 80117b4:	f000 fde6 	bl	8012384 <__multadd>
 80117b8:	4601      	mov	r1, r0
 80117ba:	4604      	mov	r4, r0
 80117bc:	4648      	mov	r0, r9
 80117be:	f001 f843 	bl	8012848 <__mcmp>
 80117c2:	2800      	cmp	r0, #0
 80117c4:	f77f aeb3 	ble.w	801152e <_dtoa_r+0x68e>
 80117c8:	4656      	mov	r6, sl
 80117ca:	2331      	movs	r3, #49	@ 0x31
 80117cc:	f806 3b01 	strb.w	r3, [r6], #1
 80117d0:	9b04      	ldr	r3, [sp, #16]
 80117d2:	3301      	adds	r3, #1
 80117d4:	9304      	str	r3, [sp, #16]
 80117d6:	e6ae      	b.n	8011536 <_dtoa_r+0x696>
 80117d8:	9c07      	ldr	r4, [sp, #28]
 80117da:	9704      	str	r7, [sp, #16]
 80117dc:	4625      	mov	r5, r4
 80117de:	e7f3      	b.n	80117c8 <_dtoa_r+0x928>
 80117e0:	9b07      	ldr	r3, [sp, #28]
 80117e2:	9300      	str	r3, [sp, #0]
 80117e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	f000 8104 	beq.w	80119f4 <_dtoa_r+0xb54>
 80117ec:	2e00      	cmp	r6, #0
 80117ee:	dd05      	ble.n	80117fc <_dtoa_r+0x95c>
 80117f0:	4629      	mov	r1, r5
 80117f2:	4632      	mov	r2, r6
 80117f4:	4658      	mov	r0, fp
 80117f6:	f000 ffbb 	bl	8012770 <__lshift>
 80117fa:	4605      	mov	r5, r0
 80117fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d05a      	beq.n	80118b8 <_dtoa_r+0xa18>
 8011802:	6869      	ldr	r1, [r5, #4]
 8011804:	4658      	mov	r0, fp
 8011806:	f000 fd5b 	bl	80122c0 <_Balloc>
 801180a:	4606      	mov	r6, r0
 801180c:	b928      	cbnz	r0, 801181a <_dtoa_r+0x97a>
 801180e:	4b84      	ldr	r3, [pc, #528]	@ (8011a20 <_dtoa_r+0xb80>)
 8011810:	4602      	mov	r2, r0
 8011812:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011816:	f7ff bb5a 	b.w	8010ece <_dtoa_r+0x2e>
 801181a:	692a      	ldr	r2, [r5, #16]
 801181c:	3202      	adds	r2, #2
 801181e:	0092      	lsls	r2, r2, #2
 8011820:	f105 010c 	add.w	r1, r5, #12
 8011824:	300c      	adds	r0, #12
 8011826:	f7ff fa94 	bl	8010d52 <memcpy>
 801182a:	2201      	movs	r2, #1
 801182c:	4631      	mov	r1, r6
 801182e:	4658      	mov	r0, fp
 8011830:	f000 ff9e 	bl	8012770 <__lshift>
 8011834:	f10a 0301 	add.w	r3, sl, #1
 8011838:	9307      	str	r3, [sp, #28]
 801183a:	9b00      	ldr	r3, [sp, #0]
 801183c:	4453      	add	r3, sl
 801183e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011840:	9b02      	ldr	r3, [sp, #8]
 8011842:	f003 0301 	and.w	r3, r3, #1
 8011846:	462f      	mov	r7, r5
 8011848:	930a      	str	r3, [sp, #40]	@ 0x28
 801184a:	4605      	mov	r5, r0
 801184c:	9b07      	ldr	r3, [sp, #28]
 801184e:	4621      	mov	r1, r4
 8011850:	3b01      	subs	r3, #1
 8011852:	4648      	mov	r0, r9
 8011854:	9300      	str	r3, [sp, #0]
 8011856:	f7ff fa99 	bl	8010d8c <quorem>
 801185a:	4639      	mov	r1, r7
 801185c:	9002      	str	r0, [sp, #8]
 801185e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011862:	4648      	mov	r0, r9
 8011864:	f000 fff0 	bl	8012848 <__mcmp>
 8011868:	462a      	mov	r2, r5
 801186a:	9008      	str	r0, [sp, #32]
 801186c:	4621      	mov	r1, r4
 801186e:	4658      	mov	r0, fp
 8011870:	f001 f806 	bl	8012880 <__mdiff>
 8011874:	68c2      	ldr	r2, [r0, #12]
 8011876:	4606      	mov	r6, r0
 8011878:	bb02      	cbnz	r2, 80118bc <_dtoa_r+0xa1c>
 801187a:	4601      	mov	r1, r0
 801187c:	4648      	mov	r0, r9
 801187e:	f000 ffe3 	bl	8012848 <__mcmp>
 8011882:	4602      	mov	r2, r0
 8011884:	4631      	mov	r1, r6
 8011886:	4658      	mov	r0, fp
 8011888:	920e      	str	r2, [sp, #56]	@ 0x38
 801188a:	f000 fd59 	bl	8012340 <_Bfree>
 801188e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011890:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011892:	9e07      	ldr	r6, [sp, #28]
 8011894:	ea43 0102 	orr.w	r1, r3, r2
 8011898:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801189a:	4319      	orrs	r1, r3
 801189c:	d110      	bne.n	80118c0 <_dtoa_r+0xa20>
 801189e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80118a2:	d029      	beq.n	80118f8 <_dtoa_r+0xa58>
 80118a4:	9b08      	ldr	r3, [sp, #32]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	dd02      	ble.n	80118b0 <_dtoa_r+0xa10>
 80118aa:	9b02      	ldr	r3, [sp, #8]
 80118ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80118b0:	9b00      	ldr	r3, [sp, #0]
 80118b2:	f883 8000 	strb.w	r8, [r3]
 80118b6:	e63f      	b.n	8011538 <_dtoa_r+0x698>
 80118b8:	4628      	mov	r0, r5
 80118ba:	e7bb      	b.n	8011834 <_dtoa_r+0x994>
 80118bc:	2201      	movs	r2, #1
 80118be:	e7e1      	b.n	8011884 <_dtoa_r+0x9e4>
 80118c0:	9b08      	ldr	r3, [sp, #32]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	db04      	blt.n	80118d0 <_dtoa_r+0xa30>
 80118c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80118c8:	430b      	orrs	r3, r1
 80118ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80118cc:	430b      	orrs	r3, r1
 80118ce:	d120      	bne.n	8011912 <_dtoa_r+0xa72>
 80118d0:	2a00      	cmp	r2, #0
 80118d2:	dded      	ble.n	80118b0 <_dtoa_r+0xa10>
 80118d4:	4649      	mov	r1, r9
 80118d6:	2201      	movs	r2, #1
 80118d8:	4658      	mov	r0, fp
 80118da:	f000 ff49 	bl	8012770 <__lshift>
 80118de:	4621      	mov	r1, r4
 80118e0:	4681      	mov	r9, r0
 80118e2:	f000 ffb1 	bl	8012848 <__mcmp>
 80118e6:	2800      	cmp	r0, #0
 80118e8:	dc03      	bgt.n	80118f2 <_dtoa_r+0xa52>
 80118ea:	d1e1      	bne.n	80118b0 <_dtoa_r+0xa10>
 80118ec:	f018 0f01 	tst.w	r8, #1
 80118f0:	d0de      	beq.n	80118b0 <_dtoa_r+0xa10>
 80118f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80118f6:	d1d8      	bne.n	80118aa <_dtoa_r+0xa0a>
 80118f8:	9a00      	ldr	r2, [sp, #0]
 80118fa:	2339      	movs	r3, #57	@ 0x39
 80118fc:	7013      	strb	r3, [r2, #0]
 80118fe:	4633      	mov	r3, r6
 8011900:	461e      	mov	r6, r3
 8011902:	3b01      	subs	r3, #1
 8011904:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011908:	2a39      	cmp	r2, #57	@ 0x39
 801190a:	d052      	beq.n	80119b2 <_dtoa_r+0xb12>
 801190c:	3201      	adds	r2, #1
 801190e:	701a      	strb	r2, [r3, #0]
 8011910:	e612      	b.n	8011538 <_dtoa_r+0x698>
 8011912:	2a00      	cmp	r2, #0
 8011914:	dd07      	ble.n	8011926 <_dtoa_r+0xa86>
 8011916:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801191a:	d0ed      	beq.n	80118f8 <_dtoa_r+0xa58>
 801191c:	9a00      	ldr	r2, [sp, #0]
 801191e:	f108 0301 	add.w	r3, r8, #1
 8011922:	7013      	strb	r3, [r2, #0]
 8011924:	e608      	b.n	8011538 <_dtoa_r+0x698>
 8011926:	9b07      	ldr	r3, [sp, #28]
 8011928:	9a07      	ldr	r2, [sp, #28]
 801192a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801192e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011930:	4293      	cmp	r3, r2
 8011932:	d028      	beq.n	8011986 <_dtoa_r+0xae6>
 8011934:	4649      	mov	r1, r9
 8011936:	2300      	movs	r3, #0
 8011938:	220a      	movs	r2, #10
 801193a:	4658      	mov	r0, fp
 801193c:	f000 fd22 	bl	8012384 <__multadd>
 8011940:	42af      	cmp	r7, r5
 8011942:	4681      	mov	r9, r0
 8011944:	f04f 0300 	mov.w	r3, #0
 8011948:	f04f 020a 	mov.w	r2, #10
 801194c:	4639      	mov	r1, r7
 801194e:	4658      	mov	r0, fp
 8011950:	d107      	bne.n	8011962 <_dtoa_r+0xac2>
 8011952:	f000 fd17 	bl	8012384 <__multadd>
 8011956:	4607      	mov	r7, r0
 8011958:	4605      	mov	r5, r0
 801195a:	9b07      	ldr	r3, [sp, #28]
 801195c:	3301      	adds	r3, #1
 801195e:	9307      	str	r3, [sp, #28]
 8011960:	e774      	b.n	801184c <_dtoa_r+0x9ac>
 8011962:	f000 fd0f 	bl	8012384 <__multadd>
 8011966:	4629      	mov	r1, r5
 8011968:	4607      	mov	r7, r0
 801196a:	2300      	movs	r3, #0
 801196c:	220a      	movs	r2, #10
 801196e:	4658      	mov	r0, fp
 8011970:	f000 fd08 	bl	8012384 <__multadd>
 8011974:	4605      	mov	r5, r0
 8011976:	e7f0      	b.n	801195a <_dtoa_r+0xaba>
 8011978:	9b00      	ldr	r3, [sp, #0]
 801197a:	2b00      	cmp	r3, #0
 801197c:	bfcc      	ite	gt
 801197e:	461e      	movgt	r6, r3
 8011980:	2601      	movle	r6, #1
 8011982:	4456      	add	r6, sl
 8011984:	2700      	movs	r7, #0
 8011986:	4649      	mov	r1, r9
 8011988:	2201      	movs	r2, #1
 801198a:	4658      	mov	r0, fp
 801198c:	f000 fef0 	bl	8012770 <__lshift>
 8011990:	4621      	mov	r1, r4
 8011992:	4681      	mov	r9, r0
 8011994:	f000 ff58 	bl	8012848 <__mcmp>
 8011998:	2800      	cmp	r0, #0
 801199a:	dcb0      	bgt.n	80118fe <_dtoa_r+0xa5e>
 801199c:	d102      	bne.n	80119a4 <_dtoa_r+0xb04>
 801199e:	f018 0f01 	tst.w	r8, #1
 80119a2:	d1ac      	bne.n	80118fe <_dtoa_r+0xa5e>
 80119a4:	4633      	mov	r3, r6
 80119a6:	461e      	mov	r6, r3
 80119a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80119ac:	2a30      	cmp	r2, #48	@ 0x30
 80119ae:	d0fa      	beq.n	80119a6 <_dtoa_r+0xb06>
 80119b0:	e5c2      	b.n	8011538 <_dtoa_r+0x698>
 80119b2:	459a      	cmp	sl, r3
 80119b4:	d1a4      	bne.n	8011900 <_dtoa_r+0xa60>
 80119b6:	9b04      	ldr	r3, [sp, #16]
 80119b8:	3301      	adds	r3, #1
 80119ba:	9304      	str	r3, [sp, #16]
 80119bc:	2331      	movs	r3, #49	@ 0x31
 80119be:	f88a 3000 	strb.w	r3, [sl]
 80119c2:	e5b9      	b.n	8011538 <_dtoa_r+0x698>
 80119c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80119c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011a24 <_dtoa_r+0xb84>
 80119ca:	b11b      	cbz	r3, 80119d4 <_dtoa_r+0xb34>
 80119cc:	f10a 0308 	add.w	r3, sl, #8
 80119d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80119d2:	6013      	str	r3, [r2, #0]
 80119d4:	4650      	mov	r0, sl
 80119d6:	b019      	add	sp, #100	@ 0x64
 80119d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119de:	2b01      	cmp	r3, #1
 80119e0:	f77f ae37 	ble.w	8011652 <_dtoa_r+0x7b2>
 80119e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80119e8:	2001      	movs	r0, #1
 80119ea:	e655      	b.n	8011698 <_dtoa_r+0x7f8>
 80119ec:	9b00      	ldr	r3, [sp, #0]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	f77f aed6 	ble.w	80117a0 <_dtoa_r+0x900>
 80119f4:	4656      	mov	r6, sl
 80119f6:	4621      	mov	r1, r4
 80119f8:	4648      	mov	r0, r9
 80119fa:	f7ff f9c7 	bl	8010d8c <quorem>
 80119fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011a02:	f806 8b01 	strb.w	r8, [r6], #1
 8011a06:	9b00      	ldr	r3, [sp, #0]
 8011a08:	eba6 020a 	sub.w	r2, r6, sl
 8011a0c:	4293      	cmp	r3, r2
 8011a0e:	ddb3      	ble.n	8011978 <_dtoa_r+0xad8>
 8011a10:	4649      	mov	r1, r9
 8011a12:	2300      	movs	r3, #0
 8011a14:	220a      	movs	r2, #10
 8011a16:	4658      	mov	r0, fp
 8011a18:	f000 fcb4 	bl	8012384 <__multadd>
 8011a1c:	4681      	mov	r9, r0
 8011a1e:	e7ea      	b.n	80119f6 <_dtoa_r+0xb56>
 8011a20:	08014875 	.word	0x08014875
 8011a24:	080147f9 	.word	0x080147f9

08011a28 <_free_r>:
 8011a28:	b538      	push	{r3, r4, r5, lr}
 8011a2a:	4605      	mov	r5, r0
 8011a2c:	2900      	cmp	r1, #0
 8011a2e:	d041      	beq.n	8011ab4 <_free_r+0x8c>
 8011a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a34:	1f0c      	subs	r4, r1, #4
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	bfb8      	it	lt
 8011a3a:	18e4      	addlt	r4, r4, r3
 8011a3c:	f000 fc34 	bl	80122a8 <__malloc_lock>
 8011a40:	4a1d      	ldr	r2, [pc, #116]	@ (8011ab8 <_free_r+0x90>)
 8011a42:	6813      	ldr	r3, [r2, #0]
 8011a44:	b933      	cbnz	r3, 8011a54 <_free_r+0x2c>
 8011a46:	6063      	str	r3, [r4, #4]
 8011a48:	6014      	str	r4, [r2, #0]
 8011a4a:	4628      	mov	r0, r5
 8011a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a50:	f000 bc30 	b.w	80122b4 <__malloc_unlock>
 8011a54:	42a3      	cmp	r3, r4
 8011a56:	d908      	bls.n	8011a6a <_free_r+0x42>
 8011a58:	6820      	ldr	r0, [r4, #0]
 8011a5a:	1821      	adds	r1, r4, r0
 8011a5c:	428b      	cmp	r3, r1
 8011a5e:	bf01      	itttt	eq
 8011a60:	6819      	ldreq	r1, [r3, #0]
 8011a62:	685b      	ldreq	r3, [r3, #4]
 8011a64:	1809      	addeq	r1, r1, r0
 8011a66:	6021      	streq	r1, [r4, #0]
 8011a68:	e7ed      	b.n	8011a46 <_free_r+0x1e>
 8011a6a:	461a      	mov	r2, r3
 8011a6c:	685b      	ldr	r3, [r3, #4]
 8011a6e:	b10b      	cbz	r3, 8011a74 <_free_r+0x4c>
 8011a70:	42a3      	cmp	r3, r4
 8011a72:	d9fa      	bls.n	8011a6a <_free_r+0x42>
 8011a74:	6811      	ldr	r1, [r2, #0]
 8011a76:	1850      	adds	r0, r2, r1
 8011a78:	42a0      	cmp	r0, r4
 8011a7a:	d10b      	bne.n	8011a94 <_free_r+0x6c>
 8011a7c:	6820      	ldr	r0, [r4, #0]
 8011a7e:	4401      	add	r1, r0
 8011a80:	1850      	adds	r0, r2, r1
 8011a82:	4283      	cmp	r3, r0
 8011a84:	6011      	str	r1, [r2, #0]
 8011a86:	d1e0      	bne.n	8011a4a <_free_r+0x22>
 8011a88:	6818      	ldr	r0, [r3, #0]
 8011a8a:	685b      	ldr	r3, [r3, #4]
 8011a8c:	6053      	str	r3, [r2, #4]
 8011a8e:	4408      	add	r0, r1
 8011a90:	6010      	str	r0, [r2, #0]
 8011a92:	e7da      	b.n	8011a4a <_free_r+0x22>
 8011a94:	d902      	bls.n	8011a9c <_free_r+0x74>
 8011a96:	230c      	movs	r3, #12
 8011a98:	602b      	str	r3, [r5, #0]
 8011a9a:	e7d6      	b.n	8011a4a <_free_r+0x22>
 8011a9c:	6820      	ldr	r0, [r4, #0]
 8011a9e:	1821      	adds	r1, r4, r0
 8011aa0:	428b      	cmp	r3, r1
 8011aa2:	bf04      	itt	eq
 8011aa4:	6819      	ldreq	r1, [r3, #0]
 8011aa6:	685b      	ldreq	r3, [r3, #4]
 8011aa8:	6063      	str	r3, [r4, #4]
 8011aaa:	bf04      	itt	eq
 8011aac:	1809      	addeq	r1, r1, r0
 8011aae:	6021      	streq	r1, [r4, #0]
 8011ab0:	6054      	str	r4, [r2, #4]
 8011ab2:	e7ca      	b.n	8011a4a <_free_r+0x22>
 8011ab4:	bd38      	pop	{r3, r4, r5, pc}
 8011ab6:	bf00      	nop
 8011ab8:	20000e50 	.word	0x20000e50

08011abc <rshift>:
 8011abc:	6903      	ldr	r3, [r0, #16]
 8011abe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011ac2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ac6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011aca:	f100 0414 	add.w	r4, r0, #20
 8011ace:	dd45      	ble.n	8011b5c <rshift+0xa0>
 8011ad0:	f011 011f 	ands.w	r1, r1, #31
 8011ad4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011ad8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011adc:	d10c      	bne.n	8011af8 <rshift+0x3c>
 8011ade:	f100 0710 	add.w	r7, r0, #16
 8011ae2:	4629      	mov	r1, r5
 8011ae4:	42b1      	cmp	r1, r6
 8011ae6:	d334      	bcc.n	8011b52 <rshift+0x96>
 8011ae8:	1a9b      	subs	r3, r3, r2
 8011aea:	009b      	lsls	r3, r3, #2
 8011aec:	1eea      	subs	r2, r5, #3
 8011aee:	4296      	cmp	r6, r2
 8011af0:	bf38      	it	cc
 8011af2:	2300      	movcc	r3, #0
 8011af4:	4423      	add	r3, r4
 8011af6:	e015      	b.n	8011b24 <rshift+0x68>
 8011af8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011afc:	f1c1 0820 	rsb	r8, r1, #32
 8011b00:	40cf      	lsrs	r7, r1
 8011b02:	f105 0e04 	add.w	lr, r5, #4
 8011b06:	46a1      	mov	r9, r4
 8011b08:	4576      	cmp	r6, lr
 8011b0a:	46f4      	mov	ip, lr
 8011b0c:	d815      	bhi.n	8011b3a <rshift+0x7e>
 8011b0e:	1a9a      	subs	r2, r3, r2
 8011b10:	0092      	lsls	r2, r2, #2
 8011b12:	3a04      	subs	r2, #4
 8011b14:	3501      	adds	r5, #1
 8011b16:	42ae      	cmp	r6, r5
 8011b18:	bf38      	it	cc
 8011b1a:	2200      	movcc	r2, #0
 8011b1c:	18a3      	adds	r3, r4, r2
 8011b1e:	50a7      	str	r7, [r4, r2]
 8011b20:	b107      	cbz	r7, 8011b24 <rshift+0x68>
 8011b22:	3304      	adds	r3, #4
 8011b24:	1b1a      	subs	r2, r3, r4
 8011b26:	42a3      	cmp	r3, r4
 8011b28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011b2c:	bf08      	it	eq
 8011b2e:	2300      	moveq	r3, #0
 8011b30:	6102      	str	r2, [r0, #16]
 8011b32:	bf08      	it	eq
 8011b34:	6143      	streq	r3, [r0, #20]
 8011b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b3a:	f8dc c000 	ldr.w	ip, [ip]
 8011b3e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011b42:	ea4c 0707 	orr.w	r7, ip, r7
 8011b46:	f849 7b04 	str.w	r7, [r9], #4
 8011b4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011b4e:	40cf      	lsrs	r7, r1
 8011b50:	e7da      	b.n	8011b08 <rshift+0x4c>
 8011b52:	f851 cb04 	ldr.w	ip, [r1], #4
 8011b56:	f847 cf04 	str.w	ip, [r7, #4]!
 8011b5a:	e7c3      	b.n	8011ae4 <rshift+0x28>
 8011b5c:	4623      	mov	r3, r4
 8011b5e:	e7e1      	b.n	8011b24 <rshift+0x68>

08011b60 <__hexdig_fun>:
 8011b60:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011b64:	2b09      	cmp	r3, #9
 8011b66:	d802      	bhi.n	8011b6e <__hexdig_fun+0xe>
 8011b68:	3820      	subs	r0, #32
 8011b6a:	b2c0      	uxtb	r0, r0
 8011b6c:	4770      	bx	lr
 8011b6e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011b72:	2b05      	cmp	r3, #5
 8011b74:	d801      	bhi.n	8011b7a <__hexdig_fun+0x1a>
 8011b76:	3847      	subs	r0, #71	@ 0x47
 8011b78:	e7f7      	b.n	8011b6a <__hexdig_fun+0xa>
 8011b7a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011b7e:	2b05      	cmp	r3, #5
 8011b80:	d801      	bhi.n	8011b86 <__hexdig_fun+0x26>
 8011b82:	3827      	subs	r0, #39	@ 0x27
 8011b84:	e7f1      	b.n	8011b6a <__hexdig_fun+0xa>
 8011b86:	2000      	movs	r0, #0
 8011b88:	4770      	bx	lr
	...

08011b8c <__gethex>:
 8011b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b90:	b085      	sub	sp, #20
 8011b92:	468a      	mov	sl, r1
 8011b94:	9302      	str	r3, [sp, #8]
 8011b96:	680b      	ldr	r3, [r1, #0]
 8011b98:	9001      	str	r0, [sp, #4]
 8011b9a:	4690      	mov	r8, r2
 8011b9c:	1c9c      	adds	r4, r3, #2
 8011b9e:	46a1      	mov	r9, r4
 8011ba0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011ba4:	2830      	cmp	r0, #48	@ 0x30
 8011ba6:	d0fa      	beq.n	8011b9e <__gethex+0x12>
 8011ba8:	eba9 0303 	sub.w	r3, r9, r3
 8011bac:	f1a3 0b02 	sub.w	fp, r3, #2
 8011bb0:	f7ff ffd6 	bl	8011b60 <__hexdig_fun>
 8011bb4:	4605      	mov	r5, r0
 8011bb6:	2800      	cmp	r0, #0
 8011bb8:	d168      	bne.n	8011c8c <__gethex+0x100>
 8011bba:	49a0      	ldr	r1, [pc, #640]	@ (8011e3c <__gethex+0x2b0>)
 8011bbc:	2201      	movs	r2, #1
 8011bbe:	4648      	mov	r0, r9
 8011bc0:	f7ff f83e 	bl	8010c40 <strncmp>
 8011bc4:	4607      	mov	r7, r0
 8011bc6:	2800      	cmp	r0, #0
 8011bc8:	d167      	bne.n	8011c9a <__gethex+0x10e>
 8011bca:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011bce:	4626      	mov	r6, r4
 8011bd0:	f7ff ffc6 	bl	8011b60 <__hexdig_fun>
 8011bd4:	2800      	cmp	r0, #0
 8011bd6:	d062      	beq.n	8011c9e <__gethex+0x112>
 8011bd8:	4623      	mov	r3, r4
 8011bda:	7818      	ldrb	r0, [r3, #0]
 8011bdc:	2830      	cmp	r0, #48	@ 0x30
 8011bde:	4699      	mov	r9, r3
 8011be0:	f103 0301 	add.w	r3, r3, #1
 8011be4:	d0f9      	beq.n	8011bda <__gethex+0x4e>
 8011be6:	f7ff ffbb 	bl	8011b60 <__hexdig_fun>
 8011bea:	fab0 f580 	clz	r5, r0
 8011bee:	096d      	lsrs	r5, r5, #5
 8011bf0:	f04f 0b01 	mov.w	fp, #1
 8011bf4:	464a      	mov	r2, r9
 8011bf6:	4616      	mov	r6, r2
 8011bf8:	3201      	adds	r2, #1
 8011bfa:	7830      	ldrb	r0, [r6, #0]
 8011bfc:	f7ff ffb0 	bl	8011b60 <__hexdig_fun>
 8011c00:	2800      	cmp	r0, #0
 8011c02:	d1f8      	bne.n	8011bf6 <__gethex+0x6a>
 8011c04:	498d      	ldr	r1, [pc, #564]	@ (8011e3c <__gethex+0x2b0>)
 8011c06:	2201      	movs	r2, #1
 8011c08:	4630      	mov	r0, r6
 8011c0a:	f7ff f819 	bl	8010c40 <strncmp>
 8011c0e:	2800      	cmp	r0, #0
 8011c10:	d13f      	bne.n	8011c92 <__gethex+0x106>
 8011c12:	b944      	cbnz	r4, 8011c26 <__gethex+0x9a>
 8011c14:	1c74      	adds	r4, r6, #1
 8011c16:	4622      	mov	r2, r4
 8011c18:	4616      	mov	r6, r2
 8011c1a:	3201      	adds	r2, #1
 8011c1c:	7830      	ldrb	r0, [r6, #0]
 8011c1e:	f7ff ff9f 	bl	8011b60 <__hexdig_fun>
 8011c22:	2800      	cmp	r0, #0
 8011c24:	d1f8      	bne.n	8011c18 <__gethex+0x8c>
 8011c26:	1ba4      	subs	r4, r4, r6
 8011c28:	00a7      	lsls	r7, r4, #2
 8011c2a:	7833      	ldrb	r3, [r6, #0]
 8011c2c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011c30:	2b50      	cmp	r3, #80	@ 0x50
 8011c32:	d13e      	bne.n	8011cb2 <__gethex+0x126>
 8011c34:	7873      	ldrb	r3, [r6, #1]
 8011c36:	2b2b      	cmp	r3, #43	@ 0x2b
 8011c38:	d033      	beq.n	8011ca2 <__gethex+0x116>
 8011c3a:	2b2d      	cmp	r3, #45	@ 0x2d
 8011c3c:	d034      	beq.n	8011ca8 <__gethex+0x11c>
 8011c3e:	1c71      	adds	r1, r6, #1
 8011c40:	2400      	movs	r4, #0
 8011c42:	7808      	ldrb	r0, [r1, #0]
 8011c44:	f7ff ff8c 	bl	8011b60 <__hexdig_fun>
 8011c48:	1e43      	subs	r3, r0, #1
 8011c4a:	b2db      	uxtb	r3, r3
 8011c4c:	2b18      	cmp	r3, #24
 8011c4e:	d830      	bhi.n	8011cb2 <__gethex+0x126>
 8011c50:	f1a0 0210 	sub.w	r2, r0, #16
 8011c54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011c58:	f7ff ff82 	bl	8011b60 <__hexdig_fun>
 8011c5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8011c60:	fa5f fc8c 	uxtb.w	ip, ip
 8011c64:	f1bc 0f18 	cmp.w	ip, #24
 8011c68:	f04f 030a 	mov.w	r3, #10
 8011c6c:	d91e      	bls.n	8011cac <__gethex+0x120>
 8011c6e:	b104      	cbz	r4, 8011c72 <__gethex+0xe6>
 8011c70:	4252      	negs	r2, r2
 8011c72:	4417      	add	r7, r2
 8011c74:	f8ca 1000 	str.w	r1, [sl]
 8011c78:	b1ed      	cbz	r5, 8011cb6 <__gethex+0x12a>
 8011c7a:	f1bb 0f00 	cmp.w	fp, #0
 8011c7e:	bf0c      	ite	eq
 8011c80:	2506      	moveq	r5, #6
 8011c82:	2500      	movne	r5, #0
 8011c84:	4628      	mov	r0, r5
 8011c86:	b005      	add	sp, #20
 8011c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c8c:	2500      	movs	r5, #0
 8011c8e:	462c      	mov	r4, r5
 8011c90:	e7b0      	b.n	8011bf4 <__gethex+0x68>
 8011c92:	2c00      	cmp	r4, #0
 8011c94:	d1c7      	bne.n	8011c26 <__gethex+0x9a>
 8011c96:	4627      	mov	r7, r4
 8011c98:	e7c7      	b.n	8011c2a <__gethex+0x9e>
 8011c9a:	464e      	mov	r6, r9
 8011c9c:	462f      	mov	r7, r5
 8011c9e:	2501      	movs	r5, #1
 8011ca0:	e7c3      	b.n	8011c2a <__gethex+0x9e>
 8011ca2:	2400      	movs	r4, #0
 8011ca4:	1cb1      	adds	r1, r6, #2
 8011ca6:	e7cc      	b.n	8011c42 <__gethex+0xb6>
 8011ca8:	2401      	movs	r4, #1
 8011caa:	e7fb      	b.n	8011ca4 <__gethex+0x118>
 8011cac:	fb03 0002 	mla	r0, r3, r2, r0
 8011cb0:	e7ce      	b.n	8011c50 <__gethex+0xc4>
 8011cb2:	4631      	mov	r1, r6
 8011cb4:	e7de      	b.n	8011c74 <__gethex+0xe8>
 8011cb6:	eba6 0309 	sub.w	r3, r6, r9
 8011cba:	3b01      	subs	r3, #1
 8011cbc:	4629      	mov	r1, r5
 8011cbe:	2b07      	cmp	r3, #7
 8011cc0:	dc0a      	bgt.n	8011cd8 <__gethex+0x14c>
 8011cc2:	9801      	ldr	r0, [sp, #4]
 8011cc4:	f000 fafc 	bl	80122c0 <_Balloc>
 8011cc8:	4604      	mov	r4, r0
 8011cca:	b940      	cbnz	r0, 8011cde <__gethex+0x152>
 8011ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8011e40 <__gethex+0x2b4>)
 8011cce:	4602      	mov	r2, r0
 8011cd0:	21e4      	movs	r1, #228	@ 0xe4
 8011cd2:	485c      	ldr	r0, [pc, #368]	@ (8011e44 <__gethex+0x2b8>)
 8011cd4:	f001 fa5c 	bl	8013190 <__assert_func>
 8011cd8:	3101      	adds	r1, #1
 8011cda:	105b      	asrs	r3, r3, #1
 8011cdc:	e7ef      	b.n	8011cbe <__gethex+0x132>
 8011cde:	f100 0a14 	add.w	sl, r0, #20
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	4655      	mov	r5, sl
 8011ce6:	469b      	mov	fp, r3
 8011ce8:	45b1      	cmp	r9, r6
 8011cea:	d337      	bcc.n	8011d5c <__gethex+0x1d0>
 8011cec:	f845 bb04 	str.w	fp, [r5], #4
 8011cf0:	eba5 050a 	sub.w	r5, r5, sl
 8011cf4:	10ad      	asrs	r5, r5, #2
 8011cf6:	6125      	str	r5, [r4, #16]
 8011cf8:	4658      	mov	r0, fp
 8011cfa:	f000 fbd3 	bl	80124a4 <__hi0bits>
 8011cfe:	016d      	lsls	r5, r5, #5
 8011d00:	f8d8 6000 	ldr.w	r6, [r8]
 8011d04:	1a2d      	subs	r5, r5, r0
 8011d06:	42b5      	cmp	r5, r6
 8011d08:	dd54      	ble.n	8011db4 <__gethex+0x228>
 8011d0a:	1bad      	subs	r5, r5, r6
 8011d0c:	4629      	mov	r1, r5
 8011d0e:	4620      	mov	r0, r4
 8011d10:	f000 ff67 	bl	8012be2 <__any_on>
 8011d14:	4681      	mov	r9, r0
 8011d16:	b178      	cbz	r0, 8011d38 <__gethex+0x1ac>
 8011d18:	1e6b      	subs	r3, r5, #1
 8011d1a:	1159      	asrs	r1, r3, #5
 8011d1c:	f003 021f 	and.w	r2, r3, #31
 8011d20:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011d24:	f04f 0901 	mov.w	r9, #1
 8011d28:	fa09 f202 	lsl.w	r2, r9, r2
 8011d2c:	420a      	tst	r2, r1
 8011d2e:	d003      	beq.n	8011d38 <__gethex+0x1ac>
 8011d30:	454b      	cmp	r3, r9
 8011d32:	dc36      	bgt.n	8011da2 <__gethex+0x216>
 8011d34:	f04f 0902 	mov.w	r9, #2
 8011d38:	4629      	mov	r1, r5
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	f7ff febe 	bl	8011abc <rshift>
 8011d40:	442f      	add	r7, r5
 8011d42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011d46:	42bb      	cmp	r3, r7
 8011d48:	da42      	bge.n	8011dd0 <__gethex+0x244>
 8011d4a:	9801      	ldr	r0, [sp, #4]
 8011d4c:	4621      	mov	r1, r4
 8011d4e:	f000 faf7 	bl	8012340 <_Bfree>
 8011d52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011d54:	2300      	movs	r3, #0
 8011d56:	6013      	str	r3, [r2, #0]
 8011d58:	25a3      	movs	r5, #163	@ 0xa3
 8011d5a:	e793      	b.n	8011c84 <__gethex+0xf8>
 8011d5c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011d60:	2a2e      	cmp	r2, #46	@ 0x2e
 8011d62:	d012      	beq.n	8011d8a <__gethex+0x1fe>
 8011d64:	2b20      	cmp	r3, #32
 8011d66:	d104      	bne.n	8011d72 <__gethex+0x1e6>
 8011d68:	f845 bb04 	str.w	fp, [r5], #4
 8011d6c:	f04f 0b00 	mov.w	fp, #0
 8011d70:	465b      	mov	r3, fp
 8011d72:	7830      	ldrb	r0, [r6, #0]
 8011d74:	9303      	str	r3, [sp, #12]
 8011d76:	f7ff fef3 	bl	8011b60 <__hexdig_fun>
 8011d7a:	9b03      	ldr	r3, [sp, #12]
 8011d7c:	f000 000f 	and.w	r0, r0, #15
 8011d80:	4098      	lsls	r0, r3
 8011d82:	ea4b 0b00 	orr.w	fp, fp, r0
 8011d86:	3304      	adds	r3, #4
 8011d88:	e7ae      	b.n	8011ce8 <__gethex+0x15c>
 8011d8a:	45b1      	cmp	r9, r6
 8011d8c:	d8ea      	bhi.n	8011d64 <__gethex+0x1d8>
 8011d8e:	492b      	ldr	r1, [pc, #172]	@ (8011e3c <__gethex+0x2b0>)
 8011d90:	9303      	str	r3, [sp, #12]
 8011d92:	2201      	movs	r2, #1
 8011d94:	4630      	mov	r0, r6
 8011d96:	f7fe ff53 	bl	8010c40 <strncmp>
 8011d9a:	9b03      	ldr	r3, [sp, #12]
 8011d9c:	2800      	cmp	r0, #0
 8011d9e:	d1e1      	bne.n	8011d64 <__gethex+0x1d8>
 8011da0:	e7a2      	b.n	8011ce8 <__gethex+0x15c>
 8011da2:	1ea9      	subs	r1, r5, #2
 8011da4:	4620      	mov	r0, r4
 8011da6:	f000 ff1c 	bl	8012be2 <__any_on>
 8011daa:	2800      	cmp	r0, #0
 8011dac:	d0c2      	beq.n	8011d34 <__gethex+0x1a8>
 8011dae:	f04f 0903 	mov.w	r9, #3
 8011db2:	e7c1      	b.n	8011d38 <__gethex+0x1ac>
 8011db4:	da09      	bge.n	8011dca <__gethex+0x23e>
 8011db6:	1b75      	subs	r5, r6, r5
 8011db8:	4621      	mov	r1, r4
 8011dba:	9801      	ldr	r0, [sp, #4]
 8011dbc:	462a      	mov	r2, r5
 8011dbe:	f000 fcd7 	bl	8012770 <__lshift>
 8011dc2:	1b7f      	subs	r7, r7, r5
 8011dc4:	4604      	mov	r4, r0
 8011dc6:	f100 0a14 	add.w	sl, r0, #20
 8011dca:	f04f 0900 	mov.w	r9, #0
 8011dce:	e7b8      	b.n	8011d42 <__gethex+0x1b6>
 8011dd0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011dd4:	42bd      	cmp	r5, r7
 8011dd6:	dd6f      	ble.n	8011eb8 <__gethex+0x32c>
 8011dd8:	1bed      	subs	r5, r5, r7
 8011dda:	42ae      	cmp	r6, r5
 8011ddc:	dc34      	bgt.n	8011e48 <__gethex+0x2bc>
 8011dde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011de2:	2b02      	cmp	r3, #2
 8011de4:	d022      	beq.n	8011e2c <__gethex+0x2a0>
 8011de6:	2b03      	cmp	r3, #3
 8011de8:	d024      	beq.n	8011e34 <__gethex+0x2a8>
 8011dea:	2b01      	cmp	r3, #1
 8011dec:	d115      	bne.n	8011e1a <__gethex+0x28e>
 8011dee:	42ae      	cmp	r6, r5
 8011df0:	d113      	bne.n	8011e1a <__gethex+0x28e>
 8011df2:	2e01      	cmp	r6, #1
 8011df4:	d10b      	bne.n	8011e0e <__gethex+0x282>
 8011df6:	9a02      	ldr	r2, [sp, #8]
 8011df8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011dfc:	6013      	str	r3, [r2, #0]
 8011dfe:	2301      	movs	r3, #1
 8011e00:	6123      	str	r3, [r4, #16]
 8011e02:	f8ca 3000 	str.w	r3, [sl]
 8011e06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e08:	2562      	movs	r5, #98	@ 0x62
 8011e0a:	601c      	str	r4, [r3, #0]
 8011e0c:	e73a      	b.n	8011c84 <__gethex+0xf8>
 8011e0e:	1e71      	subs	r1, r6, #1
 8011e10:	4620      	mov	r0, r4
 8011e12:	f000 fee6 	bl	8012be2 <__any_on>
 8011e16:	2800      	cmp	r0, #0
 8011e18:	d1ed      	bne.n	8011df6 <__gethex+0x26a>
 8011e1a:	9801      	ldr	r0, [sp, #4]
 8011e1c:	4621      	mov	r1, r4
 8011e1e:	f000 fa8f 	bl	8012340 <_Bfree>
 8011e22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e24:	2300      	movs	r3, #0
 8011e26:	6013      	str	r3, [r2, #0]
 8011e28:	2550      	movs	r5, #80	@ 0x50
 8011e2a:	e72b      	b.n	8011c84 <__gethex+0xf8>
 8011e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d1f3      	bne.n	8011e1a <__gethex+0x28e>
 8011e32:	e7e0      	b.n	8011df6 <__gethex+0x26a>
 8011e34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d1dd      	bne.n	8011df6 <__gethex+0x26a>
 8011e3a:	e7ee      	b.n	8011e1a <__gethex+0x28e>
 8011e3c:	08014760 	.word	0x08014760
 8011e40:	08014875 	.word	0x08014875
 8011e44:	08014886 	.word	0x08014886
 8011e48:	1e6f      	subs	r7, r5, #1
 8011e4a:	f1b9 0f00 	cmp.w	r9, #0
 8011e4e:	d130      	bne.n	8011eb2 <__gethex+0x326>
 8011e50:	b127      	cbz	r7, 8011e5c <__gethex+0x2d0>
 8011e52:	4639      	mov	r1, r7
 8011e54:	4620      	mov	r0, r4
 8011e56:	f000 fec4 	bl	8012be2 <__any_on>
 8011e5a:	4681      	mov	r9, r0
 8011e5c:	117a      	asrs	r2, r7, #5
 8011e5e:	2301      	movs	r3, #1
 8011e60:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011e64:	f007 071f 	and.w	r7, r7, #31
 8011e68:	40bb      	lsls	r3, r7
 8011e6a:	4213      	tst	r3, r2
 8011e6c:	4629      	mov	r1, r5
 8011e6e:	4620      	mov	r0, r4
 8011e70:	bf18      	it	ne
 8011e72:	f049 0902 	orrne.w	r9, r9, #2
 8011e76:	f7ff fe21 	bl	8011abc <rshift>
 8011e7a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011e7e:	1b76      	subs	r6, r6, r5
 8011e80:	2502      	movs	r5, #2
 8011e82:	f1b9 0f00 	cmp.w	r9, #0
 8011e86:	d047      	beq.n	8011f18 <__gethex+0x38c>
 8011e88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011e8c:	2b02      	cmp	r3, #2
 8011e8e:	d015      	beq.n	8011ebc <__gethex+0x330>
 8011e90:	2b03      	cmp	r3, #3
 8011e92:	d017      	beq.n	8011ec4 <__gethex+0x338>
 8011e94:	2b01      	cmp	r3, #1
 8011e96:	d109      	bne.n	8011eac <__gethex+0x320>
 8011e98:	f019 0f02 	tst.w	r9, #2
 8011e9c:	d006      	beq.n	8011eac <__gethex+0x320>
 8011e9e:	f8da 3000 	ldr.w	r3, [sl]
 8011ea2:	ea49 0903 	orr.w	r9, r9, r3
 8011ea6:	f019 0f01 	tst.w	r9, #1
 8011eaa:	d10e      	bne.n	8011eca <__gethex+0x33e>
 8011eac:	f045 0510 	orr.w	r5, r5, #16
 8011eb0:	e032      	b.n	8011f18 <__gethex+0x38c>
 8011eb2:	f04f 0901 	mov.w	r9, #1
 8011eb6:	e7d1      	b.n	8011e5c <__gethex+0x2d0>
 8011eb8:	2501      	movs	r5, #1
 8011eba:	e7e2      	b.n	8011e82 <__gethex+0x2f6>
 8011ebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ebe:	f1c3 0301 	rsb	r3, r3, #1
 8011ec2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011ec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d0f0      	beq.n	8011eac <__gethex+0x320>
 8011eca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011ece:	f104 0314 	add.w	r3, r4, #20
 8011ed2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011ed6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011eda:	f04f 0c00 	mov.w	ip, #0
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ee4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011ee8:	d01b      	beq.n	8011f22 <__gethex+0x396>
 8011eea:	3201      	adds	r2, #1
 8011eec:	6002      	str	r2, [r0, #0]
 8011eee:	2d02      	cmp	r5, #2
 8011ef0:	f104 0314 	add.w	r3, r4, #20
 8011ef4:	d13c      	bne.n	8011f70 <__gethex+0x3e4>
 8011ef6:	f8d8 2000 	ldr.w	r2, [r8]
 8011efa:	3a01      	subs	r2, #1
 8011efc:	42b2      	cmp	r2, r6
 8011efe:	d109      	bne.n	8011f14 <__gethex+0x388>
 8011f00:	1171      	asrs	r1, r6, #5
 8011f02:	2201      	movs	r2, #1
 8011f04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011f08:	f006 061f 	and.w	r6, r6, #31
 8011f0c:	fa02 f606 	lsl.w	r6, r2, r6
 8011f10:	421e      	tst	r6, r3
 8011f12:	d13a      	bne.n	8011f8a <__gethex+0x3fe>
 8011f14:	f045 0520 	orr.w	r5, r5, #32
 8011f18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f1a:	601c      	str	r4, [r3, #0]
 8011f1c:	9b02      	ldr	r3, [sp, #8]
 8011f1e:	601f      	str	r7, [r3, #0]
 8011f20:	e6b0      	b.n	8011c84 <__gethex+0xf8>
 8011f22:	4299      	cmp	r1, r3
 8011f24:	f843 cc04 	str.w	ip, [r3, #-4]
 8011f28:	d8d9      	bhi.n	8011ede <__gethex+0x352>
 8011f2a:	68a3      	ldr	r3, [r4, #8]
 8011f2c:	459b      	cmp	fp, r3
 8011f2e:	db17      	blt.n	8011f60 <__gethex+0x3d4>
 8011f30:	6861      	ldr	r1, [r4, #4]
 8011f32:	9801      	ldr	r0, [sp, #4]
 8011f34:	3101      	adds	r1, #1
 8011f36:	f000 f9c3 	bl	80122c0 <_Balloc>
 8011f3a:	4681      	mov	r9, r0
 8011f3c:	b918      	cbnz	r0, 8011f46 <__gethex+0x3ba>
 8011f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8011fa8 <__gethex+0x41c>)
 8011f40:	4602      	mov	r2, r0
 8011f42:	2184      	movs	r1, #132	@ 0x84
 8011f44:	e6c5      	b.n	8011cd2 <__gethex+0x146>
 8011f46:	6922      	ldr	r2, [r4, #16]
 8011f48:	3202      	adds	r2, #2
 8011f4a:	f104 010c 	add.w	r1, r4, #12
 8011f4e:	0092      	lsls	r2, r2, #2
 8011f50:	300c      	adds	r0, #12
 8011f52:	f7fe fefe 	bl	8010d52 <memcpy>
 8011f56:	4621      	mov	r1, r4
 8011f58:	9801      	ldr	r0, [sp, #4]
 8011f5a:	f000 f9f1 	bl	8012340 <_Bfree>
 8011f5e:	464c      	mov	r4, r9
 8011f60:	6923      	ldr	r3, [r4, #16]
 8011f62:	1c5a      	adds	r2, r3, #1
 8011f64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011f68:	6122      	str	r2, [r4, #16]
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	615a      	str	r2, [r3, #20]
 8011f6e:	e7be      	b.n	8011eee <__gethex+0x362>
 8011f70:	6922      	ldr	r2, [r4, #16]
 8011f72:	455a      	cmp	r2, fp
 8011f74:	dd0b      	ble.n	8011f8e <__gethex+0x402>
 8011f76:	2101      	movs	r1, #1
 8011f78:	4620      	mov	r0, r4
 8011f7a:	f7ff fd9f 	bl	8011abc <rshift>
 8011f7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011f82:	3701      	adds	r7, #1
 8011f84:	42bb      	cmp	r3, r7
 8011f86:	f6ff aee0 	blt.w	8011d4a <__gethex+0x1be>
 8011f8a:	2501      	movs	r5, #1
 8011f8c:	e7c2      	b.n	8011f14 <__gethex+0x388>
 8011f8e:	f016 061f 	ands.w	r6, r6, #31
 8011f92:	d0fa      	beq.n	8011f8a <__gethex+0x3fe>
 8011f94:	4453      	add	r3, sl
 8011f96:	f1c6 0620 	rsb	r6, r6, #32
 8011f9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011f9e:	f000 fa81 	bl	80124a4 <__hi0bits>
 8011fa2:	42b0      	cmp	r0, r6
 8011fa4:	dbe7      	blt.n	8011f76 <__gethex+0x3ea>
 8011fa6:	e7f0      	b.n	8011f8a <__gethex+0x3fe>
 8011fa8:	08014875 	.word	0x08014875

08011fac <L_shift>:
 8011fac:	f1c2 0208 	rsb	r2, r2, #8
 8011fb0:	0092      	lsls	r2, r2, #2
 8011fb2:	b570      	push	{r4, r5, r6, lr}
 8011fb4:	f1c2 0620 	rsb	r6, r2, #32
 8011fb8:	6843      	ldr	r3, [r0, #4]
 8011fba:	6804      	ldr	r4, [r0, #0]
 8011fbc:	fa03 f506 	lsl.w	r5, r3, r6
 8011fc0:	432c      	orrs	r4, r5
 8011fc2:	40d3      	lsrs	r3, r2
 8011fc4:	6004      	str	r4, [r0, #0]
 8011fc6:	f840 3f04 	str.w	r3, [r0, #4]!
 8011fca:	4288      	cmp	r0, r1
 8011fcc:	d3f4      	bcc.n	8011fb8 <L_shift+0xc>
 8011fce:	bd70      	pop	{r4, r5, r6, pc}

08011fd0 <__match>:
 8011fd0:	b530      	push	{r4, r5, lr}
 8011fd2:	6803      	ldr	r3, [r0, #0]
 8011fd4:	3301      	adds	r3, #1
 8011fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011fda:	b914      	cbnz	r4, 8011fe2 <__match+0x12>
 8011fdc:	6003      	str	r3, [r0, #0]
 8011fde:	2001      	movs	r0, #1
 8011fe0:	bd30      	pop	{r4, r5, pc}
 8011fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fe6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011fea:	2d19      	cmp	r5, #25
 8011fec:	bf98      	it	ls
 8011fee:	3220      	addls	r2, #32
 8011ff0:	42a2      	cmp	r2, r4
 8011ff2:	d0f0      	beq.n	8011fd6 <__match+0x6>
 8011ff4:	2000      	movs	r0, #0
 8011ff6:	e7f3      	b.n	8011fe0 <__match+0x10>

08011ff8 <__hexnan>:
 8011ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ffc:	680b      	ldr	r3, [r1, #0]
 8011ffe:	6801      	ldr	r1, [r0, #0]
 8012000:	115e      	asrs	r6, r3, #5
 8012002:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012006:	f013 031f 	ands.w	r3, r3, #31
 801200a:	b087      	sub	sp, #28
 801200c:	bf18      	it	ne
 801200e:	3604      	addne	r6, #4
 8012010:	2500      	movs	r5, #0
 8012012:	1f37      	subs	r7, r6, #4
 8012014:	4682      	mov	sl, r0
 8012016:	4690      	mov	r8, r2
 8012018:	9301      	str	r3, [sp, #4]
 801201a:	f846 5c04 	str.w	r5, [r6, #-4]
 801201e:	46b9      	mov	r9, r7
 8012020:	463c      	mov	r4, r7
 8012022:	9502      	str	r5, [sp, #8]
 8012024:	46ab      	mov	fp, r5
 8012026:	784a      	ldrb	r2, [r1, #1]
 8012028:	1c4b      	adds	r3, r1, #1
 801202a:	9303      	str	r3, [sp, #12]
 801202c:	b342      	cbz	r2, 8012080 <__hexnan+0x88>
 801202e:	4610      	mov	r0, r2
 8012030:	9105      	str	r1, [sp, #20]
 8012032:	9204      	str	r2, [sp, #16]
 8012034:	f7ff fd94 	bl	8011b60 <__hexdig_fun>
 8012038:	2800      	cmp	r0, #0
 801203a:	d151      	bne.n	80120e0 <__hexnan+0xe8>
 801203c:	9a04      	ldr	r2, [sp, #16]
 801203e:	9905      	ldr	r1, [sp, #20]
 8012040:	2a20      	cmp	r2, #32
 8012042:	d818      	bhi.n	8012076 <__hexnan+0x7e>
 8012044:	9b02      	ldr	r3, [sp, #8]
 8012046:	459b      	cmp	fp, r3
 8012048:	dd13      	ble.n	8012072 <__hexnan+0x7a>
 801204a:	454c      	cmp	r4, r9
 801204c:	d206      	bcs.n	801205c <__hexnan+0x64>
 801204e:	2d07      	cmp	r5, #7
 8012050:	dc04      	bgt.n	801205c <__hexnan+0x64>
 8012052:	462a      	mov	r2, r5
 8012054:	4649      	mov	r1, r9
 8012056:	4620      	mov	r0, r4
 8012058:	f7ff ffa8 	bl	8011fac <L_shift>
 801205c:	4544      	cmp	r4, r8
 801205e:	d952      	bls.n	8012106 <__hexnan+0x10e>
 8012060:	2300      	movs	r3, #0
 8012062:	f1a4 0904 	sub.w	r9, r4, #4
 8012066:	f844 3c04 	str.w	r3, [r4, #-4]
 801206a:	f8cd b008 	str.w	fp, [sp, #8]
 801206e:	464c      	mov	r4, r9
 8012070:	461d      	mov	r5, r3
 8012072:	9903      	ldr	r1, [sp, #12]
 8012074:	e7d7      	b.n	8012026 <__hexnan+0x2e>
 8012076:	2a29      	cmp	r2, #41	@ 0x29
 8012078:	d157      	bne.n	801212a <__hexnan+0x132>
 801207a:	3102      	adds	r1, #2
 801207c:	f8ca 1000 	str.w	r1, [sl]
 8012080:	f1bb 0f00 	cmp.w	fp, #0
 8012084:	d051      	beq.n	801212a <__hexnan+0x132>
 8012086:	454c      	cmp	r4, r9
 8012088:	d206      	bcs.n	8012098 <__hexnan+0xa0>
 801208a:	2d07      	cmp	r5, #7
 801208c:	dc04      	bgt.n	8012098 <__hexnan+0xa0>
 801208e:	462a      	mov	r2, r5
 8012090:	4649      	mov	r1, r9
 8012092:	4620      	mov	r0, r4
 8012094:	f7ff ff8a 	bl	8011fac <L_shift>
 8012098:	4544      	cmp	r4, r8
 801209a:	d936      	bls.n	801210a <__hexnan+0x112>
 801209c:	f1a8 0204 	sub.w	r2, r8, #4
 80120a0:	4623      	mov	r3, r4
 80120a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80120a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80120aa:	429f      	cmp	r7, r3
 80120ac:	d2f9      	bcs.n	80120a2 <__hexnan+0xaa>
 80120ae:	1b3b      	subs	r3, r7, r4
 80120b0:	f023 0303 	bic.w	r3, r3, #3
 80120b4:	3304      	adds	r3, #4
 80120b6:	3401      	adds	r4, #1
 80120b8:	3e03      	subs	r6, #3
 80120ba:	42b4      	cmp	r4, r6
 80120bc:	bf88      	it	hi
 80120be:	2304      	movhi	r3, #4
 80120c0:	4443      	add	r3, r8
 80120c2:	2200      	movs	r2, #0
 80120c4:	f843 2b04 	str.w	r2, [r3], #4
 80120c8:	429f      	cmp	r7, r3
 80120ca:	d2fb      	bcs.n	80120c4 <__hexnan+0xcc>
 80120cc:	683b      	ldr	r3, [r7, #0]
 80120ce:	b91b      	cbnz	r3, 80120d8 <__hexnan+0xe0>
 80120d0:	4547      	cmp	r7, r8
 80120d2:	d128      	bne.n	8012126 <__hexnan+0x12e>
 80120d4:	2301      	movs	r3, #1
 80120d6:	603b      	str	r3, [r7, #0]
 80120d8:	2005      	movs	r0, #5
 80120da:	b007      	add	sp, #28
 80120dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120e0:	3501      	adds	r5, #1
 80120e2:	2d08      	cmp	r5, #8
 80120e4:	f10b 0b01 	add.w	fp, fp, #1
 80120e8:	dd06      	ble.n	80120f8 <__hexnan+0x100>
 80120ea:	4544      	cmp	r4, r8
 80120ec:	d9c1      	bls.n	8012072 <__hexnan+0x7a>
 80120ee:	2300      	movs	r3, #0
 80120f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80120f4:	2501      	movs	r5, #1
 80120f6:	3c04      	subs	r4, #4
 80120f8:	6822      	ldr	r2, [r4, #0]
 80120fa:	f000 000f 	and.w	r0, r0, #15
 80120fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012102:	6020      	str	r0, [r4, #0]
 8012104:	e7b5      	b.n	8012072 <__hexnan+0x7a>
 8012106:	2508      	movs	r5, #8
 8012108:	e7b3      	b.n	8012072 <__hexnan+0x7a>
 801210a:	9b01      	ldr	r3, [sp, #4]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d0dd      	beq.n	80120cc <__hexnan+0xd4>
 8012110:	f1c3 0320 	rsb	r3, r3, #32
 8012114:	f04f 32ff 	mov.w	r2, #4294967295
 8012118:	40da      	lsrs	r2, r3
 801211a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801211e:	4013      	ands	r3, r2
 8012120:	f846 3c04 	str.w	r3, [r6, #-4]
 8012124:	e7d2      	b.n	80120cc <__hexnan+0xd4>
 8012126:	3f04      	subs	r7, #4
 8012128:	e7d0      	b.n	80120cc <__hexnan+0xd4>
 801212a:	2004      	movs	r0, #4
 801212c:	e7d5      	b.n	80120da <__hexnan+0xe2>
	...

08012130 <malloc>:
 8012130:	4b02      	ldr	r3, [pc, #8]	@ (801213c <malloc+0xc>)
 8012132:	4601      	mov	r1, r0
 8012134:	6818      	ldr	r0, [r3, #0]
 8012136:	f000 b825 	b.w	8012184 <_malloc_r>
 801213a:	bf00      	nop
 801213c:	20000248 	.word	0x20000248

08012140 <sbrk_aligned>:
 8012140:	b570      	push	{r4, r5, r6, lr}
 8012142:	4e0f      	ldr	r6, [pc, #60]	@ (8012180 <sbrk_aligned+0x40>)
 8012144:	460c      	mov	r4, r1
 8012146:	6831      	ldr	r1, [r6, #0]
 8012148:	4605      	mov	r5, r0
 801214a:	b911      	cbnz	r1, 8012152 <sbrk_aligned+0x12>
 801214c:	f001 f810 	bl	8013170 <_sbrk_r>
 8012150:	6030      	str	r0, [r6, #0]
 8012152:	4621      	mov	r1, r4
 8012154:	4628      	mov	r0, r5
 8012156:	f001 f80b 	bl	8013170 <_sbrk_r>
 801215a:	1c43      	adds	r3, r0, #1
 801215c:	d103      	bne.n	8012166 <sbrk_aligned+0x26>
 801215e:	f04f 34ff 	mov.w	r4, #4294967295
 8012162:	4620      	mov	r0, r4
 8012164:	bd70      	pop	{r4, r5, r6, pc}
 8012166:	1cc4      	adds	r4, r0, #3
 8012168:	f024 0403 	bic.w	r4, r4, #3
 801216c:	42a0      	cmp	r0, r4
 801216e:	d0f8      	beq.n	8012162 <sbrk_aligned+0x22>
 8012170:	1a21      	subs	r1, r4, r0
 8012172:	4628      	mov	r0, r5
 8012174:	f000 fffc 	bl	8013170 <_sbrk_r>
 8012178:	3001      	adds	r0, #1
 801217a:	d1f2      	bne.n	8012162 <sbrk_aligned+0x22>
 801217c:	e7ef      	b.n	801215e <sbrk_aligned+0x1e>
 801217e:	bf00      	nop
 8012180:	20000e4c 	.word	0x20000e4c

08012184 <_malloc_r>:
 8012184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012188:	1ccd      	adds	r5, r1, #3
 801218a:	f025 0503 	bic.w	r5, r5, #3
 801218e:	3508      	adds	r5, #8
 8012190:	2d0c      	cmp	r5, #12
 8012192:	bf38      	it	cc
 8012194:	250c      	movcc	r5, #12
 8012196:	2d00      	cmp	r5, #0
 8012198:	4606      	mov	r6, r0
 801219a:	db01      	blt.n	80121a0 <_malloc_r+0x1c>
 801219c:	42a9      	cmp	r1, r5
 801219e:	d904      	bls.n	80121aa <_malloc_r+0x26>
 80121a0:	230c      	movs	r3, #12
 80121a2:	6033      	str	r3, [r6, #0]
 80121a4:	2000      	movs	r0, #0
 80121a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012280 <_malloc_r+0xfc>
 80121ae:	f000 f87b 	bl	80122a8 <__malloc_lock>
 80121b2:	f8d8 3000 	ldr.w	r3, [r8]
 80121b6:	461c      	mov	r4, r3
 80121b8:	bb44      	cbnz	r4, 801220c <_malloc_r+0x88>
 80121ba:	4629      	mov	r1, r5
 80121bc:	4630      	mov	r0, r6
 80121be:	f7ff ffbf 	bl	8012140 <sbrk_aligned>
 80121c2:	1c43      	adds	r3, r0, #1
 80121c4:	4604      	mov	r4, r0
 80121c6:	d158      	bne.n	801227a <_malloc_r+0xf6>
 80121c8:	f8d8 4000 	ldr.w	r4, [r8]
 80121cc:	4627      	mov	r7, r4
 80121ce:	2f00      	cmp	r7, #0
 80121d0:	d143      	bne.n	801225a <_malloc_r+0xd6>
 80121d2:	2c00      	cmp	r4, #0
 80121d4:	d04b      	beq.n	801226e <_malloc_r+0xea>
 80121d6:	6823      	ldr	r3, [r4, #0]
 80121d8:	4639      	mov	r1, r7
 80121da:	4630      	mov	r0, r6
 80121dc:	eb04 0903 	add.w	r9, r4, r3
 80121e0:	f000 ffc6 	bl	8013170 <_sbrk_r>
 80121e4:	4581      	cmp	r9, r0
 80121e6:	d142      	bne.n	801226e <_malloc_r+0xea>
 80121e8:	6821      	ldr	r1, [r4, #0]
 80121ea:	1a6d      	subs	r5, r5, r1
 80121ec:	4629      	mov	r1, r5
 80121ee:	4630      	mov	r0, r6
 80121f0:	f7ff ffa6 	bl	8012140 <sbrk_aligned>
 80121f4:	3001      	adds	r0, #1
 80121f6:	d03a      	beq.n	801226e <_malloc_r+0xea>
 80121f8:	6823      	ldr	r3, [r4, #0]
 80121fa:	442b      	add	r3, r5
 80121fc:	6023      	str	r3, [r4, #0]
 80121fe:	f8d8 3000 	ldr.w	r3, [r8]
 8012202:	685a      	ldr	r2, [r3, #4]
 8012204:	bb62      	cbnz	r2, 8012260 <_malloc_r+0xdc>
 8012206:	f8c8 7000 	str.w	r7, [r8]
 801220a:	e00f      	b.n	801222c <_malloc_r+0xa8>
 801220c:	6822      	ldr	r2, [r4, #0]
 801220e:	1b52      	subs	r2, r2, r5
 8012210:	d420      	bmi.n	8012254 <_malloc_r+0xd0>
 8012212:	2a0b      	cmp	r2, #11
 8012214:	d917      	bls.n	8012246 <_malloc_r+0xc2>
 8012216:	1961      	adds	r1, r4, r5
 8012218:	42a3      	cmp	r3, r4
 801221a:	6025      	str	r5, [r4, #0]
 801221c:	bf18      	it	ne
 801221e:	6059      	strne	r1, [r3, #4]
 8012220:	6863      	ldr	r3, [r4, #4]
 8012222:	bf08      	it	eq
 8012224:	f8c8 1000 	streq.w	r1, [r8]
 8012228:	5162      	str	r2, [r4, r5]
 801222a:	604b      	str	r3, [r1, #4]
 801222c:	4630      	mov	r0, r6
 801222e:	f000 f841 	bl	80122b4 <__malloc_unlock>
 8012232:	f104 000b 	add.w	r0, r4, #11
 8012236:	1d23      	adds	r3, r4, #4
 8012238:	f020 0007 	bic.w	r0, r0, #7
 801223c:	1ac2      	subs	r2, r0, r3
 801223e:	bf1c      	itt	ne
 8012240:	1a1b      	subne	r3, r3, r0
 8012242:	50a3      	strne	r3, [r4, r2]
 8012244:	e7af      	b.n	80121a6 <_malloc_r+0x22>
 8012246:	6862      	ldr	r2, [r4, #4]
 8012248:	42a3      	cmp	r3, r4
 801224a:	bf0c      	ite	eq
 801224c:	f8c8 2000 	streq.w	r2, [r8]
 8012250:	605a      	strne	r2, [r3, #4]
 8012252:	e7eb      	b.n	801222c <_malloc_r+0xa8>
 8012254:	4623      	mov	r3, r4
 8012256:	6864      	ldr	r4, [r4, #4]
 8012258:	e7ae      	b.n	80121b8 <_malloc_r+0x34>
 801225a:	463c      	mov	r4, r7
 801225c:	687f      	ldr	r7, [r7, #4]
 801225e:	e7b6      	b.n	80121ce <_malloc_r+0x4a>
 8012260:	461a      	mov	r2, r3
 8012262:	685b      	ldr	r3, [r3, #4]
 8012264:	42a3      	cmp	r3, r4
 8012266:	d1fb      	bne.n	8012260 <_malloc_r+0xdc>
 8012268:	2300      	movs	r3, #0
 801226a:	6053      	str	r3, [r2, #4]
 801226c:	e7de      	b.n	801222c <_malloc_r+0xa8>
 801226e:	230c      	movs	r3, #12
 8012270:	6033      	str	r3, [r6, #0]
 8012272:	4630      	mov	r0, r6
 8012274:	f000 f81e 	bl	80122b4 <__malloc_unlock>
 8012278:	e794      	b.n	80121a4 <_malloc_r+0x20>
 801227a:	6005      	str	r5, [r0, #0]
 801227c:	e7d6      	b.n	801222c <_malloc_r+0xa8>
 801227e:	bf00      	nop
 8012280:	20000e50 	.word	0x20000e50

08012284 <__ascii_mbtowc>:
 8012284:	b082      	sub	sp, #8
 8012286:	b901      	cbnz	r1, 801228a <__ascii_mbtowc+0x6>
 8012288:	a901      	add	r1, sp, #4
 801228a:	b142      	cbz	r2, 801229e <__ascii_mbtowc+0x1a>
 801228c:	b14b      	cbz	r3, 80122a2 <__ascii_mbtowc+0x1e>
 801228e:	7813      	ldrb	r3, [r2, #0]
 8012290:	600b      	str	r3, [r1, #0]
 8012292:	7812      	ldrb	r2, [r2, #0]
 8012294:	1e10      	subs	r0, r2, #0
 8012296:	bf18      	it	ne
 8012298:	2001      	movne	r0, #1
 801229a:	b002      	add	sp, #8
 801229c:	4770      	bx	lr
 801229e:	4610      	mov	r0, r2
 80122a0:	e7fb      	b.n	801229a <__ascii_mbtowc+0x16>
 80122a2:	f06f 0001 	mvn.w	r0, #1
 80122a6:	e7f8      	b.n	801229a <__ascii_mbtowc+0x16>

080122a8 <__malloc_lock>:
 80122a8:	4801      	ldr	r0, [pc, #4]	@ (80122b0 <__malloc_lock+0x8>)
 80122aa:	f7fe bd50 	b.w	8010d4e <__retarget_lock_acquire_recursive>
 80122ae:	bf00      	nop
 80122b0:	20000e48 	.word	0x20000e48

080122b4 <__malloc_unlock>:
 80122b4:	4801      	ldr	r0, [pc, #4]	@ (80122bc <__malloc_unlock+0x8>)
 80122b6:	f7fe bd4b 	b.w	8010d50 <__retarget_lock_release_recursive>
 80122ba:	bf00      	nop
 80122bc:	20000e48 	.word	0x20000e48

080122c0 <_Balloc>:
 80122c0:	b570      	push	{r4, r5, r6, lr}
 80122c2:	69c6      	ldr	r6, [r0, #28]
 80122c4:	4604      	mov	r4, r0
 80122c6:	460d      	mov	r5, r1
 80122c8:	b976      	cbnz	r6, 80122e8 <_Balloc+0x28>
 80122ca:	2010      	movs	r0, #16
 80122cc:	f7ff ff30 	bl	8012130 <malloc>
 80122d0:	4602      	mov	r2, r0
 80122d2:	61e0      	str	r0, [r4, #28]
 80122d4:	b920      	cbnz	r0, 80122e0 <_Balloc+0x20>
 80122d6:	4b18      	ldr	r3, [pc, #96]	@ (8012338 <_Balloc+0x78>)
 80122d8:	4818      	ldr	r0, [pc, #96]	@ (801233c <_Balloc+0x7c>)
 80122da:	216b      	movs	r1, #107	@ 0x6b
 80122dc:	f000 ff58 	bl	8013190 <__assert_func>
 80122e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80122e4:	6006      	str	r6, [r0, #0]
 80122e6:	60c6      	str	r6, [r0, #12]
 80122e8:	69e6      	ldr	r6, [r4, #28]
 80122ea:	68f3      	ldr	r3, [r6, #12]
 80122ec:	b183      	cbz	r3, 8012310 <_Balloc+0x50>
 80122ee:	69e3      	ldr	r3, [r4, #28]
 80122f0:	68db      	ldr	r3, [r3, #12]
 80122f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80122f6:	b9b8      	cbnz	r0, 8012328 <_Balloc+0x68>
 80122f8:	2101      	movs	r1, #1
 80122fa:	fa01 f605 	lsl.w	r6, r1, r5
 80122fe:	1d72      	adds	r2, r6, #5
 8012300:	0092      	lsls	r2, r2, #2
 8012302:	4620      	mov	r0, r4
 8012304:	f000 ff62 	bl	80131cc <_calloc_r>
 8012308:	b160      	cbz	r0, 8012324 <_Balloc+0x64>
 801230a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801230e:	e00e      	b.n	801232e <_Balloc+0x6e>
 8012310:	2221      	movs	r2, #33	@ 0x21
 8012312:	2104      	movs	r1, #4
 8012314:	4620      	mov	r0, r4
 8012316:	f000 ff59 	bl	80131cc <_calloc_r>
 801231a:	69e3      	ldr	r3, [r4, #28]
 801231c:	60f0      	str	r0, [r6, #12]
 801231e:	68db      	ldr	r3, [r3, #12]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d1e4      	bne.n	80122ee <_Balloc+0x2e>
 8012324:	2000      	movs	r0, #0
 8012326:	bd70      	pop	{r4, r5, r6, pc}
 8012328:	6802      	ldr	r2, [r0, #0]
 801232a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801232e:	2300      	movs	r3, #0
 8012330:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012334:	e7f7      	b.n	8012326 <_Balloc+0x66>
 8012336:	bf00      	nop
 8012338:	08014806 	.word	0x08014806
 801233c:	080148e6 	.word	0x080148e6

08012340 <_Bfree>:
 8012340:	b570      	push	{r4, r5, r6, lr}
 8012342:	69c6      	ldr	r6, [r0, #28]
 8012344:	4605      	mov	r5, r0
 8012346:	460c      	mov	r4, r1
 8012348:	b976      	cbnz	r6, 8012368 <_Bfree+0x28>
 801234a:	2010      	movs	r0, #16
 801234c:	f7ff fef0 	bl	8012130 <malloc>
 8012350:	4602      	mov	r2, r0
 8012352:	61e8      	str	r0, [r5, #28]
 8012354:	b920      	cbnz	r0, 8012360 <_Bfree+0x20>
 8012356:	4b09      	ldr	r3, [pc, #36]	@ (801237c <_Bfree+0x3c>)
 8012358:	4809      	ldr	r0, [pc, #36]	@ (8012380 <_Bfree+0x40>)
 801235a:	218f      	movs	r1, #143	@ 0x8f
 801235c:	f000 ff18 	bl	8013190 <__assert_func>
 8012360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012364:	6006      	str	r6, [r0, #0]
 8012366:	60c6      	str	r6, [r0, #12]
 8012368:	b13c      	cbz	r4, 801237a <_Bfree+0x3a>
 801236a:	69eb      	ldr	r3, [r5, #28]
 801236c:	6862      	ldr	r2, [r4, #4]
 801236e:	68db      	ldr	r3, [r3, #12]
 8012370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012374:	6021      	str	r1, [r4, #0]
 8012376:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801237a:	bd70      	pop	{r4, r5, r6, pc}
 801237c:	08014806 	.word	0x08014806
 8012380:	080148e6 	.word	0x080148e6

08012384 <__multadd>:
 8012384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012388:	690d      	ldr	r5, [r1, #16]
 801238a:	4607      	mov	r7, r0
 801238c:	460c      	mov	r4, r1
 801238e:	461e      	mov	r6, r3
 8012390:	f101 0c14 	add.w	ip, r1, #20
 8012394:	2000      	movs	r0, #0
 8012396:	f8dc 3000 	ldr.w	r3, [ip]
 801239a:	b299      	uxth	r1, r3
 801239c:	fb02 6101 	mla	r1, r2, r1, r6
 80123a0:	0c1e      	lsrs	r6, r3, #16
 80123a2:	0c0b      	lsrs	r3, r1, #16
 80123a4:	fb02 3306 	mla	r3, r2, r6, r3
 80123a8:	b289      	uxth	r1, r1
 80123aa:	3001      	adds	r0, #1
 80123ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80123b0:	4285      	cmp	r5, r0
 80123b2:	f84c 1b04 	str.w	r1, [ip], #4
 80123b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80123ba:	dcec      	bgt.n	8012396 <__multadd+0x12>
 80123bc:	b30e      	cbz	r6, 8012402 <__multadd+0x7e>
 80123be:	68a3      	ldr	r3, [r4, #8]
 80123c0:	42ab      	cmp	r3, r5
 80123c2:	dc19      	bgt.n	80123f8 <__multadd+0x74>
 80123c4:	6861      	ldr	r1, [r4, #4]
 80123c6:	4638      	mov	r0, r7
 80123c8:	3101      	adds	r1, #1
 80123ca:	f7ff ff79 	bl	80122c0 <_Balloc>
 80123ce:	4680      	mov	r8, r0
 80123d0:	b928      	cbnz	r0, 80123de <__multadd+0x5a>
 80123d2:	4602      	mov	r2, r0
 80123d4:	4b0c      	ldr	r3, [pc, #48]	@ (8012408 <__multadd+0x84>)
 80123d6:	480d      	ldr	r0, [pc, #52]	@ (801240c <__multadd+0x88>)
 80123d8:	21ba      	movs	r1, #186	@ 0xba
 80123da:	f000 fed9 	bl	8013190 <__assert_func>
 80123de:	6922      	ldr	r2, [r4, #16]
 80123e0:	3202      	adds	r2, #2
 80123e2:	f104 010c 	add.w	r1, r4, #12
 80123e6:	0092      	lsls	r2, r2, #2
 80123e8:	300c      	adds	r0, #12
 80123ea:	f7fe fcb2 	bl	8010d52 <memcpy>
 80123ee:	4621      	mov	r1, r4
 80123f0:	4638      	mov	r0, r7
 80123f2:	f7ff ffa5 	bl	8012340 <_Bfree>
 80123f6:	4644      	mov	r4, r8
 80123f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80123fc:	3501      	adds	r5, #1
 80123fe:	615e      	str	r6, [r3, #20]
 8012400:	6125      	str	r5, [r4, #16]
 8012402:	4620      	mov	r0, r4
 8012404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012408:	08014875 	.word	0x08014875
 801240c:	080148e6 	.word	0x080148e6

08012410 <__s2b>:
 8012410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012414:	460c      	mov	r4, r1
 8012416:	4615      	mov	r5, r2
 8012418:	461f      	mov	r7, r3
 801241a:	2209      	movs	r2, #9
 801241c:	3308      	adds	r3, #8
 801241e:	4606      	mov	r6, r0
 8012420:	fb93 f3f2 	sdiv	r3, r3, r2
 8012424:	2100      	movs	r1, #0
 8012426:	2201      	movs	r2, #1
 8012428:	429a      	cmp	r2, r3
 801242a:	db09      	blt.n	8012440 <__s2b+0x30>
 801242c:	4630      	mov	r0, r6
 801242e:	f7ff ff47 	bl	80122c0 <_Balloc>
 8012432:	b940      	cbnz	r0, 8012446 <__s2b+0x36>
 8012434:	4602      	mov	r2, r0
 8012436:	4b19      	ldr	r3, [pc, #100]	@ (801249c <__s2b+0x8c>)
 8012438:	4819      	ldr	r0, [pc, #100]	@ (80124a0 <__s2b+0x90>)
 801243a:	21d3      	movs	r1, #211	@ 0xd3
 801243c:	f000 fea8 	bl	8013190 <__assert_func>
 8012440:	0052      	lsls	r2, r2, #1
 8012442:	3101      	adds	r1, #1
 8012444:	e7f0      	b.n	8012428 <__s2b+0x18>
 8012446:	9b08      	ldr	r3, [sp, #32]
 8012448:	6143      	str	r3, [r0, #20]
 801244a:	2d09      	cmp	r5, #9
 801244c:	f04f 0301 	mov.w	r3, #1
 8012450:	6103      	str	r3, [r0, #16]
 8012452:	dd16      	ble.n	8012482 <__s2b+0x72>
 8012454:	f104 0909 	add.w	r9, r4, #9
 8012458:	46c8      	mov	r8, r9
 801245a:	442c      	add	r4, r5
 801245c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012460:	4601      	mov	r1, r0
 8012462:	3b30      	subs	r3, #48	@ 0x30
 8012464:	220a      	movs	r2, #10
 8012466:	4630      	mov	r0, r6
 8012468:	f7ff ff8c 	bl	8012384 <__multadd>
 801246c:	45a0      	cmp	r8, r4
 801246e:	d1f5      	bne.n	801245c <__s2b+0x4c>
 8012470:	f1a5 0408 	sub.w	r4, r5, #8
 8012474:	444c      	add	r4, r9
 8012476:	1b2d      	subs	r5, r5, r4
 8012478:	1963      	adds	r3, r4, r5
 801247a:	42bb      	cmp	r3, r7
 801247c:	db04      	blt.n	8012488 <__s2b+0x78>
 801247e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012482:	340a      	adds	r4, #10
 8012484:	2509      	movs	r5, #9
 8012486:	e7f6      	b.n	8012476 <__s2b+0x66>
 8012488:	f814 3b01 	ldrb.w	r3, [r4], #1
 801248c:	4601      	mov	r1, r0
 801248e:	3b30      	subs	r3, #48	@ 0x30
 8012490:	220a      	movs	r2, #10
 8012492:	4630      	mov	r0, r6
 8012494:	f7ff ff76 	bl	8012384 <__multadd>
 8012498:	e7ee      	b.n	8012478 <__s2b+0x68>
 801249a:	bf00      	nop
 801249c:	08014875 	.word	0x08014875
 80124a0:	080148e6 	.word	0x080148e6

080124a4 <__hi0bits>:
 80124a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80124a8:	4603      	mov	r3, r0
 80124aa:	bf36      	itet	cc
 80124ac:	0403      	lslcc	r3, r0, #16
 80124ae:	2000      	movcs	r0, #0
 80124b0:	2010      	movcc	r0, #16
 80124b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80124b6:	bf3c      	itt	cc
 80124b8:	021b      	lslcc	r3, r3, #8
 80124ba:	3008      	addcc	r0, #8
 80124bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80124c0:	bf3c      	itt	cc
 80124c2:	011b      	lslcc	r3, r3, #4
 80124c4:	3004      	addcc	r0, #4
 80124c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80124ca:	bf3c      	itt	cc
 80124cc:	009b      	lslcc	r3, r3, #2
 80124ce:	3002      	addcc	r0, #2
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	db05      	blt.n	80124e0 <__hi0bits+0x3c>
 80124d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80124d8:	f100 0001 	add.w	r0, r0, #1
 80124dc:	bf08      	it	eq
 80124de:	2020      	moveq	r0, #32
 80124e0:	4770      	bx	lr

080124e2 <__lo0bits>:
 80124e2:	6803      	ldr	r3, [r0, #0]
 80124e4:	4602      	mov	r2, r0
 80124e6:	f013 0007 	ands.w	r0, r3, #7
 80124ea:	d00b      	beq.n	8012504 <__lo0bits+0x22>
 80124ec:	07d9      	lsls	r1, r3, #31
 80124ee:	d421      	bmi.n	8012534 <__lo0bits+0x52>
 80124f0:	0798      	lsls	r0, r3, #30
 80124f2:	bf49      	itett	mi
 80124f4:	085b      	lsrmi	r3, r3, #1
 80124f6:	089b      	lsrpl	r3, r3, #2
 80124f8:	2001      	movmi	r0, #1
 80124fa:	6013      	strmi	r3, [r2, #0]
 80124fc:	bf5c      	itt	pl
 80124fe:	6013      	strpl	r3, [r2, #0]
 8012500:	2002      	movpl	r0, #2
 8012502:	4770      	bx	lr
 8012504:	b299      	uxth	r1, r3
 8012506:	b909      	cbnz	r1, 801250c <__lo0bits+0x2a>
 8012508:	0c1b      	lsrs	r3, r3, #16
 801250a:	2010      	movs	r0, #16
 801250c:	b2d9      	uxtb	r1, r3
 801250e:	b909      	cbnz	r1, 8012514 <__lo0bits+0x32>
 8012510:	3008      	adds	r0, #8
 8012512:	0a1b      	lsrs	r3, r3, #8
 8012514:	0719      	lsls	r1, r3, #28
 8012516:	bf04      	itt	eq
 8012518:	091b      	lsreq	r3, r3, #4
 801251a:	3004      	addeq	r0, #4
 801251c:	0799      	lsls	r1, r3, #30
 801251e:	bf04      	itt	eq
 8012520:	089b      	lsreq	r3, r3, #2
 8012522:	3002      	addeq	r0, #2
 8012524:	07d9      	lsls	r1, r3, #31
 8012526:	d403      	bmi.n	8012530 <__lo0bits+0x4e>
 8012528:	085b      	lsrs	r3, r3, #1
 801252a:	f100 0001 	add.w	r0, r0, #1
 801252e:	d003      	beq.n	8012538 <__lo0bits+0x56>
 8012530:	6013      	str	r3, [r2, #0]
 8012532:	4770      	bx	lr
 8012534:	2000      	movs	r0, #0
 8012536:	4770      	bx	lr
 8012538:	2020      	movs	r0, #32
 801253a:	4770      	bx	lr

0801253c <__i2b>:
 801253c:	b510      	push	{r4, lr}
 801253e:	460c      	mov	r4, r1
 8012540:	2101      	movs	r1, #1
 8012542:	f7ff febd 	bl	80122c0 <_Balloc>
 8012546:	4602      	mov	r2, r0
 8012548:	b928      	cbnz	r0, 8012556 <__i2b+0x1a>
 801254a:	4b05      	ldr	r3, [pc, #20]	@ (8012560 <__i2b+0x24>)
 801254c:	4805      	ldr	r0, [pc, #20]	@ (8012564 <__i2b+0x28>)
 801254e:	f240 1145 	movw	r1, #325	@ 0x145
 8012552:	f000 fe1d 	bl	8013190 <__assert_func>
 8012556:	2301      	movs	r3, #1
 8012558:	6144      	str	r4, [r0, #20]
 801255a:	6103      	str	r3, [r0, #16]
 801255c:	bd10      	pop	{r4, pc}
 801255e:	bf00      	nop
 8012560:	08014875 	.word	0x08014875
 8012564:	080148e6 	.word	0x080148e6

08012568 <__multiply>:
 8012568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801256c:	4614      	mov	r4, r2
 801256e:	690a      	ldr	r2, [r1, #16]
 8012570:	6923      	ldr	r3, [r4, #16]
 8012572:	429a      	cmp	r2, r3
 8012574:	bfa8      	it	ge
 8012576:	4623      	movge	r3, r4
 8012578:	460f      	mov	r7, r1
 801257a:	bfa4      	itt	ge
 801257c:	460c      	movge	r4, r1
 801257e:	461f      	movge	r7, r3
 8012580:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012584:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012588:	68a3      	ldr	r3, [r4, #8]
 801258a:	6861      	ldr	r1, [r4, #4]
 801258c:	eb0a 0609 	add.w	r6, sl, r9
 8012590:	42b3      	cmp	r3, r6
 8012592:	b085      	sub	sp, #20
 8012594:	bfb8      	it	lt
 8012596:	3101      	addlt	r1, #1
 8012598:	f7ff fe92 	bl	80122c0 <_Balloc>
 801259c:	b930      	cbnz	r0, 80125ac <__multiply+0x44>
 801259e:	4602      	mov	r2, r0
 80125a0:	4b44      	ldr	r3, [pc, #272]	@ (80126b4 <__multiply+0x14c>)
 80125a2:	4845      	ldr	r0, [pc, #276]	@ (80126b8 <__multiply+0x150>)
 80125a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80125a8:	f000 fdf2 	bl	8013190 <__assert_func>
 80125ac:	f100 0514 	add.w	r5, r0, #20
 80125b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80125b4:	462b      	mov	r3, r5
 80125b6:	2200      	movs	r2, #0
 80125b8:	4543      	cmp	r3, r8
 80125ba:	d321      	bcc.n	8012600 <__multiply+0x98>
 80125bc:	f107 0114 	add.w	r1, r7, #20
 80125c0:	f104 0214 	add.w	r2, r4, #20
 80125c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80125c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80125cc:	9302      	str	r3, [sp, #8]
 80125ce:	1b13      	subs	r3, r2, r4
 80125d0:	3b15      	subs	r3, #21
 80125d2:	f023 0303 	bic.w	r3, r3, #3
 80125d6:	3304      	adds	r3, #4
 80125d8:	f104 0715 	add.w	r7, r4, #21
 80125dc:	42ba      	cmp	r2, r7
 80125de:	bf38      	it	cc
 80125e0:	2304      	movcc	r3, #4
 80125e2:	9301      	str	r3, [sp, #4]
 80125e4:	9b02      	ldr	r3, [sp, #8]
 80125e6:	9103      	str	r1, [sp, #12]
 80125e8:	428b      	cmp	r3, r1
 80125ea:	d80c      	bhi.n	8012606 <__multiply+0x9e>
 80125ec:	2e00      	cmp	r6, #0
 80125ee:	dd03      	ble.n	80125f8 <__multiply+0x90>
 80125f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d05b      	beq.n	80126b0 <__multiply+0x148>
 80125f8:	6106      	str	r6, [r0, #16]
 80125fa:	b005      	add	sp, #20
 80125fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012600:	f843 2b04 	str.w	r2, [r3], #4
 8012604:	e7d8      	b.n	80125b8 <__multiply+0x50>
 8012606:	f8b1 a000 	ldrh.w	sl, [r1]
 801260a:	f1ba 0f00 	cmp.w	sl, #0
 801260e:	d024      	beq.n	801265a <__multiply+0xf2>
 8012610:	f104 0e14 	add.w	lr, r4, #20
 8012614:	46a9      	mov	r9, r5
 8012616:	f04f 0c00 	mov.w	ip, #0
 801261a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801261e:	f8d9 3000 	ldr.w	r3, [r9]
 8012622:	fa1f fb87 	uxth.w	fp, r7
 8012626:	b29b      	uxth	r3, r3
 8012628:	fb0a 330b 	mla	r3, sl, fp, r3
 801262c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012630:	f8d9 7000 	ldr.w	r7, [r9]
 8012634:	4463      	add	r3, ip
 8012636:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801263a:	fb0a c70b 	mla	r7, sl, fp, ip
 801263e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012642:	b29b      	uxth	r3, r3
 8012644:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012648:	4572      	cmp	r2, lr
 801264a:	f849 3b04 	str.w	r3, [r9], #4
 801264e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012652:	d8e2      	bhi.n	801261a <__multiply+0xb2>
 8012654:	9b01      	ldr	r3, [sp, #4]
 8012656:	f845 c003 	str.w	ip, [r5, r3]
 801265a:	9b03      	ldr	r3, [sp, #12]
 801265c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012660:	3104      	adds	r1, #4
 8012662:	f1b9 0f00 	cmp.w	r9, #0
 8012666:	d021      	beq.n	80126ac <__multiply+0x144>
 8012668:	682b      	ldr	r3, [r5, #0]
 801266a:	f104 0c14 	add.w	ip, r4, #20
 801266e:	46ae      	mov	lr, r5
 8012670:	f04f 0a00 	mov.w	sl, #0
 8012674:	f8bc b000 	ldrh.w	fp, [ip]
 8012678:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801267c:	fb09 770b 	mla	r7, r9, fp, r7
 8012680:	4457      	add	r7, sl
 8012682:	b29b      	uxth	r3, r3
 8012684:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012688:	f84e 3b04 	str.w	r3, [lr], #4
 801268c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012690:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012694:	f8be 3000 	ldrh.w	r3, [lr]
 8012698:	fb09 330a 	mla	r3, r9, sl, r3
 801269c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80126a0:	4562      	cmp	r2, ip
 80126a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80126a6:	d8e5      	bhi.n	8012674 <__multiply+0x10c>
 80126a8:	9f01      	ldr	r7, [sp, #4]
 80126aa:	51eb      	str	r3, [r5, r7]
 80126ac:	3504      	adds	r5, #4
 80126ae:	e799      	b.n	80125e4 <__multiply+0x7c>
 80126b0:	3e01      	subs	r6, #1
 80126b2:	e79b      	b.n	80125ec <__multiply+0x84>
 80126b4:	08014875 	.word	0x08014875
 80126b8:	080148e6 	.word	0x080148e6

080126bc <__pow5mult>:
 80126bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126c0:	4615      	mov	r5, r2
 80126c2:	f012 0203 	ands.w	r2, r2, #3
 80126c6:	4607      	mov	r7, r0
 80126c8:	460e      	mov	r6, r1
 80126ca:	d007      	beq.n	80126dc <__pow5mult+0x20>
 80126cc:	4c25      	ldr	r4, [pc, #148]	@ (8012764 <__pow5mult+0xa8>)
 80126ce:	3a01      	subs	r2, #1
 80126d0:	2300      	movs	r3, #0
 80126d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80126d6:	f7ff fe55 	bl	8012384 <__multadd>
 80126da:	4606      	mov	r6, r0
 80126dc:	10ad      	asrs	r5, r5, #2
 80126de:	d03d      	beq.n	801275c <__pow5mult+0xa0>
 80126e0:	69fc      	ldr	r4, [r7, #28]
 80126e2:	b97c      	cbnz	r4, 8012704 <__pow5mult+0x48>
 80126e4:	2010      	movs	r0, #16
 80126e6:	f7ff fd23 	bl	8012130 <malloc>
 80126ea:	4602      	mov	r2, r0
 80126ec:	61f8      	str	r0, [r7, #28]
 80126ee:	b928      	cbnz	r0, 80126fc <__pow5mult+0x40>
 80126f0:	4b1d      	ldr	r3, [pc, #116]	@ (8012768 <__pow5mult+0xac>)
 80126f2:	481e      	ldr	r0, [pc, #120]	@ (801276c <__pow5mult+0xb0>)
 80126f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80126f8:	f000 fd4a 	bl	8013190 <__assert_func>
 80126fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012700:	6004      	str	r4, [r0, #0]
 8012702:	60c4      	str	r4, [r0, #12]
 8012704:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012708:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801270c:	b94c      	cbnz	r4, 8012722 <__pow5mult+0x66>
 801270e:	f240 2171 	movw	r1, #625	@ 0x271
 8012712:	4638      	mov	r0, r7
 8012714:	f7ff ff12 	bl	801253c <__i2b>
 8012718:	2300      	movs	r3, #0
 801271a:	f8c8 0008 	str.w	r0, [r8, #8]
 801271e:	4604      	mov	r4, r0
 8012720:	6003      	str	r3, [r0, #0]
 8012722:	f04f 0900 	mov.w	r9, #0
 8012726:	07eb      	lsls	r3, r5, #31
 8012728:	d50a      	bpl.n	8012740 <__pow5mult+0x84>
 801272a:	4631      	mov	r1, r6
 801272c:	4622      	mov	r2, r4
 801272e:	4638      	mov	r0, r7
 8012730:	f7ff ff1a 	bl	8012568 <__multiply>
 8012734:	4631      	mov	r1, r6
 8012736:	4680      	mov	r8, r0
 8012738:	4638      	mov	r0, r7
 801273a:	f7ff fe01 	bl	8012340 <_Bfree>
 801273e:	4646      	mov	r6, r8
 8012740:	106d      	asrs	r5, r5, #1
 8012742:	d00b      	beq.n	801275c <__pow5mult+0xa0>
 8012744:	6820      	ldr	r0, [r4, #0]
 8012746:	b938      	cbnz	r0, 8012758 <__pow5mult+0x9c>
 8012748:	4622      	mov	r2, r4
 801274a:	4621      	mov	r1, r4
 801274c:	4638      	mov	r0, r7
 801274e:	f7ff ff0b 	bl	8012568 <__multiply>
 8012752:	6020      	str	r0, [r4, #0]
 8012754:	f8c0 9000 	str.w	r9, [r0]
 8012758:	4604      	mov	r4, r0
 801275a:	e7e4      	b.n	8012726 <__pow5mult+0x6a>
 801275c:	4630      	mov	r0, r6
 801275e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012762:	bf00      	nop
 8012764:	08014940 	.word	0x08014940
 8012768:	08014806 	.word	0x08014806
 801276c:	080148e6 	.word	0x080148e6

08012770 <__lshift>:
 8012770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012774:	460c      	mov	r4, r1
 8012776:	6849      	ldr	r1, [r1, #4]
 8012778:	6923      	ldr	r3, [r4, #16]
 801277a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801277e:	68a3      	ldr	r3, [r4, #8]
 8012780:	4607      	mov	r7, r0
 8012782:	4691      	mov	r9, r2
 8012784:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012788:	f108 0601 	add.w	r6, r8, #1
 801278c:	42b3      	cmp	r3, r6
 801278e:	db0b      	blt.n	80127a8 <__lshift+0x38>
 8012790:	4638      	mov	r0, r7
 8012792:	f7ff fd95 	bl	80122c0 <_Balloc>
 8012796:	4605      	mov	r5, r0
 8012798:	b948      	cbnz	r0, 80127ae <__lshift+0x3e>
 801279a:	4602      	mov	r2, r0
 801279c:	4b28      	ldr	r3, [pc, #160]	@ (8012840 <__lshift+0xd0>)
 801279e:	4829      	ldr	r0, [pc, #164]	@ (8012844 <__lshift+0xd4>)
 80127a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80127a4:	f000 fcf4 	bl	8013190 <__assert_func>
 80127a8:	3101      	adds	r1, #1
 80127aa:	005b      	lsls	r3, r3, #1
 80127ac:	e7ee      	b.n	801278c <__lshift+0x1c>
 80127ae:	2300      	movs	r3, #0
 80127b0:	f100 0114 	add.w	r1, r0, #20
 80127b4:	f100 0210 	add.w	r2, r0, #16
 80127b8:	4618      	mov	r0, r3
 80127ba:	4553      	cmp	r3, sl
 80127bc:	db33      	blt.n	8012826 <__lshift+0xb6>
 80127be:	6920      	ldr	r0, [r4, #16]
 80127c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80127c4:	f104 0314 	add.w	r3, r4, #20
 80127c8:	f019 091f 	ands.w	r9, r9, #31
 80127cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80127d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80127d4:	d02b      	beq.n	801282e <__lshift+0xbe>
 80127d6:	f1c9 0e20 	rsb	lr, r9, #32
 80127da:	468a      	mov	sl, r1
 80127dc:	2200      	movs	r2, #0
 80127de:	6818      	ldr	r0, [r3, #0]
 80127e0:	fa00 f009 	lsl.w	r0, r0, r9
 80127e4:	4310      	orrs	r0, r2
 80127e6:	f84a 0b04 	str.w	r0, [sl], #4
 80127ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80127ee:	459c      	cmp	ip, r3
 80127f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80127f4:	d8f3      	bhi.n	80127de <__lshift+0x6e>
 80127f6:	ebac 0304 	sub.w	r3, ip, r4
 80127fa:	3b15      	subs	r3, #21
 80127fc:	f023 0303 	bic.w	r3, r3, #3
 8012800:	3304      	adds	r3, #4
 8012802:	f104 0015 	add.w	r0, r4, #21
 8012806:	4584      	cmp	ip, r0
 8012808:	bf38      	it	cc
 801280a:	2304      	movcc	r3, #4
 801280c:	50ca      	str	r2, [r1, r3]
 801280e:	b10a      	cbz	r2, 8012814 <__lshift+0xa4>
 8012810:	f108 0602 	add.w	r6, r8, #2
 8012814:	3e01      	subs	r6, #1
 8012816:	4638      	mov	r0, r7
 8012818:	612e      	str	r6, [r5, #16]
 801281a:	4621      	mov	r1, r4
 801281c:	f7ff fd90 	bl	8012340 <_Bfree>
 8012820:	4628      	mov	r0, r5
 8012822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012826:	f842 0f04 	str.w	r0, [r2, #4]!
 801282a:	3301      	adds	r3, #1
 801282c:	e7c5      	b.n	80127ba <__lshift+0x4a>
 801282e:	3904      	subs	r1, #4
 8012830:	f853 2b04 	ldr.w	r2, [r3], #4
 8012834:	f841 2f04 	str.w	r2, [r1, #4]!
 8012838:	459c      	cmp	ip, r3
 801283a:	d8f9      	bhi.n	8012830 <__lshift+0xc0>
 801283c:	e7ea      	b.n	8012814 <__lshift+0xa4>
 801283e:	bf00      	nop
 8012840:	08014875 	.word	0x08014875
 8012844:	080148e6 	.word	0x080148e6

08012848 <__mcmp>:
 8012848:	690a      	ldr	r2, [r1, #16]
 801284a:	4603      	mov	r3, r0
 801284c:	6900      	ldr	r0, [r0, #16]
 801284e:	1a80      	subs	r0, r0, r2
 8012850:	b530      	push	{r4, r5, lr}
 8012852:	d10e      	bne.n	8012872 <__mcmp+0x2a>
 8012854:	3314      	adds	r3, #20
 8012856:	3114      	adds	r1, #20
 8012858:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801285c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012860:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012864:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012868:	4295      	cmp	r5, r2
 801286a:	d003      	beq.n	8012874 <__mcmp+0x2c>
 801286c:	d205      	bcs.n	801287a <__mcmp+0x32>
 801286e:	f04f 30ff 	mov.w	r0, #4294967295
 8012872:	bd30      	pop	{r4, r5, pc}
 8012874:	42a3      	cmp	r3, r4
 8012876:	d3f3      	bcc.n	8012860 <__mcmp+0x18>
 8012878:	e7fb      	b.n	8012872 <__mcmp+0x2a>
 801287a:	2001      	movs	r0, #1
 801287c:	e7f9      	b.n	8012872 <__mcmp+0x2a>
	...

08012880 <__mdiff>:
 8012880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012884:	4689      	mov	r9, r1
 8012886:	4606      	mov	r6, r0
 8012888:	4611      	mov	r1, r2
 801288a:	4648      	mov	r0, r9
 801288c:	4614      	mov	r4, r2
 801288e:	f7ff ffdb 	bl	8012848 <__mcmp>
 8012892:	1e05      	subs	r5, r0, #0
 8012894:	d112      	bne.n	80128bc <__mdiff+0x3c>
 8012896:	4629      	mov	r1, r5
 8012898:	4630      	mov	r0, r6
 801289a:	f7ff fd11 	bl	80122c0 <_Balloc>
 801289e:	4602      	mov	r2, r0
 80128a0:	b928      	cbnz	r0, 80128ae <__mdiff+0x2e>
 80128a2:	4b3f      	ldr	r3, [pc, #252]	@ (80129a0 <__mdiff+0x120>)
 80128a4:	f240 2137 	movw	r1, #567	@ 0x237
 80128a8:	483e      	ldr	r0, [pc, #248]	@ (80129a4 <__mdiff+0x124>)
 80128aa:	f000 fc71 	bl	8013190 <__assert_func>
 80128ae:	2301      	movs	r3, #1
 80128b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80128b4:	4610      	mov	r0, r2
 80128b6:	b003      	add	sp, #12
 80128b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128bc:	bfbc      	itt	lt
 80128be:	464b      	movlt	r3, r9
 80128c0:	46a1      	movlt	r9, r4
 80128c2:	4630      	mov	r0, r6
 80128c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80128c8:	bfba      	itte	lt
 80128ca:	461c      	movlt	r4, r3
 80128cc:	2501      	movlt	r5, #1
 80128ce:	2500      	movge	r5, #0
 80128d0:	f7ff fcf6 	bl	80122c0 <_Balloc>
 80128d4:	4602      	mov	r2, r0
 80128d6:	b918      	cbnz	r0, 80128e0 <__mdiff+0x60>
 80128d8:	4b31      	ldr	r3, [pc, #196]	@ (80129a0 <__mdiff+0x120>)
 80128da:	f240 2145 	movw	r1, #581	@ 0x245
 80128de:	e7e3      	b.n	80128a8 <__mdiff+0x28>
 80128e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80128e4:	6926      	ldr	r6, [r4, #16]
 80128e6:	60c5      	str	r5, [r0, #12]
 80128e8:	f109 0310 	add.w	r3, r9, #16
 80128ec:	f109 0514 	add.w	r5, r9, #20
 80128f0:	f104 0e14 	add.w	lr, r4, #20
 80128f4:	f100 0b14 	add.w	fp, r0, #20
 80128f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80128fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012900:	9301      	str	r3, [sp, #4]
 8012902:	46d9      	mov	r9, fp
 8012904:	f04f 0c00 	mov.w	ip, #0
 8012908:	9b01      	ldr	r3, [sp, #4]
 801290a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801290e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012912:	9301      	str	r3, [sp, #4]
 8012914:	fa1f f38a 	uxth.w	r3, sl
 8012918:	4619      	mov	r1, r3
 801291a:	b283      	uxth	r3, r0
 801291c:	1acb      	subs	r3, r1, r3
 801291e:	0c00      	lsrs	r0, r0, #16
 8012920:	4463      	add	r3, ip
 8012922:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012926:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801292a:	b29b      	uxth	r3, r3
 801292c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012930:	4576      	cmp	r6, lr
 8012932:	f849 3b04 	str.w	r3, [r9], #4
 8012936:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801293a:	d8e5      	bhi.n	8012908 <__mdiff+0x88>
 801293c:	1b33      	subs	r3, r6, r4
 801293e:	3b15      	subs	r3, #21
 8012940:	f023 0303 	bic.w	r3, r3, #3
 8012944:	3415      	adds	r4, #21
 8012946:	3304      	adds	r3, #4
 8012948:	42a6      	cmp	r6, r4
 801294a:	bf38      	it	cc
 801294c:	2304      	movcc	r3, #4
 801294e:	441d      	add	r5, r3
 8012950:	445b      	add	r3, fp
 8012952:	461e      	mov	r6, r3
 8012954:	462c      	mov	r4, r5
 8012956:	4544      	cmp	r4, r8
 8012958:	d30e      	bcc.n	8012978 <__mdiff+0xf8>
 801295a:	f108 0103 	add.w	r1, r8, #3
 801295e:	1b49      	subs	r1, r1, r5
 8012960:	f021 0103 	bic.w	r1, r1, #3
 8012964:	3d03      	subs	r5, #3
 8012966:	45a8      	cmp	r8, r5
 8012968:	bf38      	it	cc
 801296a:	2100      	movcc	r1, #0
 801296c:	440b      	add	r3, r1
 801296e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012972:	b191      	cbz	r1, 801299a <__mdiff+0x11a>
 8012974:	6117      	str	r7, [r2, #16]
 8012976:	e79d      	b.n	80128b4 <__mdiff+0x34>
 8012978:	f854 1b04 	ldr.w	r1, [r4], #4
 801297c:	46e6      	mov	lr, ip
 801297e:	0c08      	lsrs	r0, r1, #16
 8012980:	fa1c fc81 	uxtah	ip, ip, r1
 8012984:	4471      	add	r1, lr
 8012986:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801298a:	b289      	uxth	r1, r1
 801298c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012990:	f846 1b04 	str.w	r1, [r6], #4
 8012994:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012998:	e7dd      	b.n	8012956 <__mdiff+0xd6>
 801299a:	3f01      	subs	r7, #1
 801299c:	e7e7      	b.n	801296e <__mdiff+0xee>
 801299e:	bf00      	nop
 80129a0:	08014875 	.word	0x08014875
 80129a4:	080148e6 	.word	0x080148e6

080129a8 <__ulp>:
 80129a8:	b082      	sub	sp, #8
 80129aa:	ed8d 0b00 	vstr	d0, [sp]
 80129ae:	9a01      	ldr	r2, [sp, #4]
 80129b0:	4b0f      	ldr	r3, [pc, #60]	@ (80129f0 <__ulp+0x48>)
 80129b2:	4013      	ands	r3, r2
 80129b4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	dc08      	bgt.n	80129ce <__ulp+0x26>
 80129bc:	425b      	negs	r3, r3
 80129be:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80129c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80129c6:	da04      	bge.n	80129d2 <__ulp+0x2a>
 80129c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80129cc:	4113      	asrs	r3, r2
 80129ce:	2200      	movs	r2, #0
 80129d0:	e008      	b.n	80129e4 <__ulp+0x3c>
 80129d2:	f1a2 0314 	sub.w	r3, r2, #20
 80129d6:	2b1e      	cmp	r3, #30
 80129d8:	bfda      	itte	le
 80129da:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80129de:	40da      	lsrle	r2, r3
 80129e0:	2201      	movgt	r2, #1
 80129e2:	2300      	movs	r3, #0
 80129e4:	4619      	mov	r1, r3
 80129e6:	4610      	mov	r0, r2
 80129e8:	ec41 0b10 	vmov	d0, r0, r1
 80129ec:	b002      	add	sp, #8
 80129ee:	4770      	bx	lr
 80129f0:	7ff00000 	.word	0x7ff00000

080129f4 <__b2d>:
 80129f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129f8:	6906      	ldr	r6, [r0, #16]
 80129fa:	f100 0814 	add.w	r8, r0, #20
 80129fe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012a02:	1f37      	subs	r7, r6, #4
 8012a04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012a08:	4610      	mov	r0, r2
 8012a0a:	f7ff fd4b 	bl	80124a4 <__hi0bits>
 8012a0e:	f1c0 0320 	rsb	r3, r0, #32
 8012a12:	280a      	cmp	r0, #10
 8012a14:	600b      	str	r3, [r1, #0]
 8012a16:	491b      	ldr	r1, [pc, #108]	@ (8012a84 <__b2d+0x90>)
 8012a18:	dc15      	bgt.n	8012a46 <__b2d+0x52>
 8012a1a:	f1c0 0c0b 	rsb	ip, r0, #11
 8012a1e:	fa22 f30c 	lsr.w	r3, r2, ip
 8012a22:	45b8      	cmp	r8, r7
 8012a24:	ea43 0501 	orr.w	r5, r3, r1
 8012a28:	bf34      	ite	cc
 8012a2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012a2e:	2300      	movcs	r3, #0
 8012a30:	3015      	adds	r0, #21
 8012a32:	fa02 f000 	lsl.w	r0, r2, r0
 8012a36:	fa23 f30c 	lsr.w	r3, r3, ip
 8012a3a:	4303      	orrs	r3, r0
 8012a3c:	461c      	mov	r4, r3
 8012a3e:	ec45 4b10 	vmov	d0, r4, r5
 8012a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a46:	45b8      	cmp	r8, r7
 8012a48:	bf3a      	itte	cc
 8012a4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012a4e:	f1a6 0708 	subcc.w	r7, r6, #8
 8012a52:	2300      	movcs	r3, #0
 8012a54:	380b      	subs	r0, #11
 8012a56:	d012      	beq.n	8012a7e <__b2d+0x8a>
 8012a58:	f1c0 0120 	rsb	r1, r0, #32
 8012a5c:	fa23 f401 	lsr.w	r4, r3, r1
 8012a60:	4082      	lsls	r2, r0
 8012a62:	4322      	orrs	r2, r4
 8012a64:	4547      	cmp	r7, r8
 8012a66:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012a6a:	bf8c      	ite	hi
 8012a6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012a70:	2200      	movls	r2, #0
 8012a72:	4083      	lsls	r3, r0
 8012a74:	40ca      	lsrs	r2, r1
 8012a76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012a7a:	4313      	orrs	r3, r2
 8012a7c:	e7de      	b.n	8012a3c <__b2d+0x48>
 8012a7e:	ea42 0501 	orr.w	r5, r2, r1
 8012a82:	e7db      	b.n	8012a3c <__b2d+0x48>
 8012a84:	3ff00000 	.word	0x3ff00000

08012a88 <__d2b>:
 8012a88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012a8c:	460f      	mov	r7, r1
 8012a8e:	2101      	movs	r1, #1
 8012a90:	ec59 8b10 	vmov	r8, r9, d0
 8012a94:	4616      	mov	r6, r2
 8012a96:	f7ff fc13 	bl	80122c0 <_Balloc>
 8012a9a:	4604      	mov	r4, r0
 8012a9c:	b930      	cbnz	r0, 8012aac <__d2b+0x24>
 8012a9e:	4602      	mov	r2, r0
 8012aa0:	4b23      	ldr	r3, [pc, #140]	@ (8012b30 <__d2b+0xa8>)
 8012aa2:	4824      	ldr	r0, [pc, #144]	@ (8012b34 <__d2b+0xac>)
 8012aa4:	f240 310f 	movw	r1, #783	@ 0x30f
 8012aa8:	f000 fb72 	bl	8013190 <__assert_func>
 8012aac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012ab0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012ab4:	b10d      	cbz	r5, 8012aba <__d2b+0x32>
 8012ab6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012aba:	9301      	str	r3, [sp, #4]
 8012abc:	f1b8 0300 	subs.w	r3, r8, #0
 8012ac0:	d023      	beq.n	8012b0a <__d2b+0x82>
 8012ac2:	4668      	mov	r0, sp
 8012ac4:	9300      	str	r3, [sp, #0]
 8012ac6:	f7ff fd0c 	bl	80124e2 <__lo0bits>
 8012aca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012ace:	b1d0      	cbz	r0, 8012b06 <__d2b+0x7e>
 8012ad0:	f1c0 0320 	rsb	r3, r0, #32
 8012ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8012ad8:	430b      	orrs	r3, r1
 8012ada:	40c2      	lsrs	r2, r0
 8012adc:	6163      	str	r3, [r4, #20]
 8012ade:	9201      	str	r2, [sp, #4]
 8012ae0:	9b01      	ldr	r3, [sp, #4]
 8012ae2:	61a3      	str	r3, [r4, #24]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	bf0c      	ite	eq
 8012ae8:	2201      	moveq	r2, #1
 8012aea:	2202      	movne	r2, #2
 8012aec:	6122      	str	r2, [r4, #16]
 8012aee:	b1a5      	cbz	r5, 8012b1a <__d2b+0x92>
 8012af0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012af4:	4405      	add	r5, r0
 8012af6:	603d      	str	r5, [r7, #0]
 8012af8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012afc:	6030      	str	r0, [r6, #0]
 8012afe:	4620      	mov	r0, r4
 8012b00:	b003      	add	sp, #12
 8012b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b06:	6161      	str	r1, [r4, #20]
 8012b08:	e7ea      	b.n	8012ae0 <__d2b+0x58>
 8012b0a:	a801      	add	r0, sp, #4
 8012b0c:	f7ff fce9 	bl	80124e2 <__lo0bits>
 8012b10:	9b01      	ldr	r3, [sp, #4]
 8012b12:	6163      	str	r3, [r4, #20]
 8012b14:	3020      	adds	r0, #32
 8012b16:	2201      	movs	r2, #1
 8012b18:	e7e8      	b.n	8012aec <__d2b+0x64>
 8012b1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012b1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012b22:	6038      	str	r0, [r7, #0]
 8012b24:	6918      	ldr	r0, [r3, #16]
 8012b26:	f7ff fcbd 	bl	80124a4 <__hi0bits>
 8012b2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012b2e:	e7e5      	b.n	8012afc <__d2b+0x74>
 8012b30:	08014875 	.word	0x08014875
 8012b34:	080148e6 	.word	0x080148e6

08012b38 <__ratio>:
 8012b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b3c:	b085      	sub	sp, #20
 8012b3e:	e9cd 1000 	strd	r1, r0, [sp]
 8012b42:	a902      	add	r1, sp, #8
 8012b44:	f7ff ff56 	bl	80129f4 <__b2d>
 8012b48:	9800      	ldr	r0, [sp, #0]
 8012b4a:	a903      	add	r1, sp, #12
 8012b4c:	ec55 4b10 	vmov	r4, r5, d0
 8012b50:	f7ff ff50 	bl	80129f4 <__b2d>
 8012b54:	9b01      	ldr	r3, [sp, #4]
 8012b56:	6919      	ldr	r1, [r3, #16]
 8012b58:	9b00      	ldr	r3, [sp, #0]
 8012b5a:	691b      	ldr	r3, [r3, #16]
 8012b5c:	1ac9      	subs	r1, r1, r3
 8012b5e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012b62:	1a9b      	subs	r3, r3, r2
 8012b64:	ec5b ab10 	vmov	sl, fp, d0
 8012b68:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	bfce      	itee	gt
 8012b70:	462a      	movgt	r2, r5
 8012b72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012b76:	465a      	movle	r2, fp
 8012b78:	462f      	mov	r7, r5
 8012b7a:	46d9      	mov	r9, fp
 8012b7c:	bfcc      	ite	gt
 8012b7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012b82:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012b86:	464b      	mov	r3, r9
 8012b88:	4652      	mov	r2, sl
 8012b8a:	4620      	mov	r0, r4
 8012b8c:	4639      	mov	r1, r7
 8012b8e:	f7ed fe85 	bl	800089c <__aeabi_ddiv>
 8012b92:	ec41 0b10 	vmov	d0, r0, r1
 8012b96:	b005      	add	sp, #20
 8012b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b9c <__copybits>:
 8012b9c:	3901      	subs	r1, #1
 8012b9e:	b570      	push	{r4, r5, r6, lr}
 8012ba0:	1149      	asrs	r1, r1, #5
 8012ba2:	6914      	ldr	r4, [r2, #16]
 8012ba4:	3101      	adds	r1, #1
 8012ba6:	f102 0314 	add.w	r3, r2, #20
 8012baa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012bae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012bb2:	1f05      	subs	r5, r0, #4
 8012bb4:	42a3      	cmp	r3, r4
 8012bb6:	d30c      	bcc.n	8012bd2 <__copybits+0x36>
 8012bb8:	1aa3      	subs	r3, r4, r2
 8012bba:	3b11      	subs	r3, #17
 8012bbc:	f023 0303 	bic.w	r3, r3, #3
 8012bc0:	3211      	adds	r2, #17
 8012bc2:	42a2      	cmp	r2, r4
 8012bc4:	bf88      	it	hi
 8012bc6:	2300      	movhi	r3, #0
 8012bc8:	4418      	add	r0, r3
 8012bca:	2300      	movs	r3, #0
 8012bcc:	4288      	cmp	r0, r1
 8012bce:	d305      	bcc.n	8012bdc <__copybits+0x40>
 8012bd0:	bd70      	pop	{r4, r5, r6, pc}
 8012bd2:	f853 6b04 	ldr.w	r6, [r3], #4
 8012bd6:	f845 6f04 	str.w	r6, [r5, #4]!
 8012bda:	e7eb      	b.n	8012bb4 <__copybits+0x18>
 8012bdc:	f840 3b04 	str.w	r3, [r0], #4
 8012be0:	e7f4      	b.n	8012bcc <__copybits+0x30>

08012be2 <__any_on>:
 8012be2:	f100 0214 	add.w	r2, r0, #20
 8012be6:	6900      	ldr	r0, [r0, #16]
 8012be8:	114b      	asrs	r3, r1, #5
 8012bea:	4298      	cmp	r0, r3
 8012bec:	b510      	push	{r4, lr}
 8012bee:	db11      	blt.n	8012c14 <__any_on+0x32>
 8012bf0:	dd0a      	ble.n	8012c08 <__any_on+0x26>
 8012bf2:	f011 011f 	ands.w	r1, r1, #31
 8012bf6:	d007      	beq.n	8012c08 <__any_on+0x26>
 8012bf8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012bfc:	fa24 f001 	lsr.w	r0, r4, r1
 8012c00:	fa00 f101 	lsl.w	r1, r0, r1
 8012c04:	428c      	cmp	r4, r1
 8012c06:	d10b      	bne.n	8012c20 <__any_on+0x3e>
 8012c08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c0c:	4293      	cmp	r3, r2
 8012c0e:	d803      	bhi.n	8012c18 <__any_on+0x36>
 8012c10:	2000      	movs	r0, #0
 8012c12:	bd10      	pop	{r4, pc}
 8012c14:	4603      	mov	r3, r0
 8012c16:	e7f7      	b.n	8012c08 <__any_on+0x26>
 8012c18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012c1c:	2900      	cmp	r1, #0
 8012c1e:	d0f5      	beq.n	8012c0c <__any_on+0x2a>
 8012c20:	2001      	movs	r0, #1
 8012c22:	e7f6      	b.n	8012c12 <__any_on+0x30>

08012c24 <_strtol_l.constprop.0>:
 8012c24:	2b24      	cmp	r3, #36	@ 0x24
 8012c26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c2a:	4686      	mov	lr, r0
 8012c2c:	4690      	mov	r8, r2
 8012c2e:	d801      	bhi.n	8012c34 <_strtol_l.constprop.0+0x10>
 8012c30:	2b01      	cmp	r3, #1
 8012c32:	d106      	bne.n	8012c42 <_strtol_l.constprop.0+0x1e>
 8012c34:	f7fe f860 	bl	8010cf8 <__errno>
 8012c38:	2316      	movs	r3, #22
 8012c3a:	6003      	str	r3, [r0, #0]
 8012c3c:	2000      	movs	r0, #0
 8012c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c42:	4834      	ldr	r0, [pc, #208]	@ (8012d14 <_strtol_l.constprop.0+0xf0>)
 8012c44:	460d      	mov	r5, r1
 8012c46:	462a      	mov	r2, r5
 8012c48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012c4c:	5d06      	ldrb	r6, [r0, r4]
 8012c4e:	f016 0608 	ands.w	r6, r6, #8
 8012c52:	d1f8      	bne.n	8012c46 <_strtol_l.constprop.0+0x22>
 8012c54:	2c2d      	cmp	r4, #45	@ 0x2d
 8012c56:	d12d      	bne.n	8012cb4 <_strtol_l.constprop.0+0x90>
 8012c58:	782c      	ldrb	r4, [r5, #0]
 8012c5a:	2601      	movs	r6, #1
 8012c5c:	1c95      	adds	r5, r2, #2
 8012c5e:	f033 0210 	bics.w	r2, r3, #16
 8012c62:	d109      	bne.n	8012c78 <_strtol_l.constprop.0+0x54>
 8012c64:	2c30      	cmp	r4, #48	@ 0x30
 8012c66:	d12a      	bne.n	8012cbe <_strtol_l.constprop.0+0x9a>
 8012c68:	782a      	ldrb	r2, [r5, #0]
 8012c6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012c6e:	2a58      	cmp	r2, #88	@ 0x58
 8012c70:	d125      	bne.n	8012cbe <_strtol_l.constprop.0+0x9a>
 8012c72:	786c      	ldrb	r4, [r5, #1]
 8012c74:	2310      	movs	r3, #16
 8012c76:	3502      	adds	r5, #2
 8012c78:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012c7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012c80:	2200      	movs	r2, #0
 8012c82:	fbbc f9f3 	udiv	r9, ip, r3
 8012c86:	4610      	mov	r0, r2
 8012c88:	fb03 ca19 	mls	sl, r3, r9, ip
 8012c8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012c90:	2f09      	cmp	r7, #9
 8012c92:	d81b      	bhi.n	8012ccc <_strtol_l.constprop.0+0xa8>
 8012c94:	463c      	mov	r4, r7
 8012c96:	42a3      	cmp	r3, r4
 8012c98:	dd27      	ble.n	8012cea <_strtol_l.constprop.0+0xc6>
 8012c9a:	1c57      	adds	r7, r2, #1
 8012c9c:	d007      	beq.n	8012cae <_strtol_l.constprop.0+0x8a>
 8012c9e:	4581      	cmp	r9, r0
 8012ca0:	d320      	bcc.n	8012ce4 <_strtol_l.constprop.0+0xc0>
 8012ca2:	d101      	bne.n	8012ca8 <_strtol_l.constprop.0+0x84>
 8012ca4:	45a2      	cmp	sl, r4
 8012ca6:	db1d      	blt.n	8012ce4 <_strtol_l.constprop.0+0xc0>
 8012ca8:	fb00 4003 	mla	r0, r0, r3, r4
 8012cac:	2201      	movs	r2, #1
 8012cae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012cb2:	e7eb      	b.n	8012c8c <_strtol_l.constprop.0+0x68>
 8012cb4:	2c2b      	cmp	r4, #43	@ 0x2b
 8012cb6:	bf04      	itt	eq
 8012cb8:	782c      	ldrbeq	r4, [r5, #0]
 8012cba:	1c95      	addeq	r5, r2, #2
 8012cbc:	e7cf      	b.n	8012c5e <_strtol_l.constprop.0+0x3a>
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d1da      	bne.n	8012c78 <_strtol_l.constprop.0+0x54>
 8012cc2:	2c30      	cmp	r4, #48	@ 0x30
 8012cc4:	bf0c      	ite	eq
 8012cc6:	2308      	moveq	r3, #8
 8012cc8:	230a      	movne	r3, #10
 8012cca:	e7d5      	b.n	8012c78 <_strtol_l.constprop.0+0x54>
 8012ccc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012cd0:	2f19      	cmp	r7, #25
 8012cd2:	d801      	bhi.n	8012cd8 <_strtol_l.constprop.0+0xb4>
 8012cd4:	3c37      	subs	r4, #55	@ 0x37
 8012cd6:	e7de      	b.n	8012c96 <_strtol_l.constprop.0+0x72>
 8012cd8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012cdc:	2f19      	cmp	r7, #25
 8012cde:	d804      	bhi.n	8012cea <_strtol_l.constprop.0+0xc6>
 8012ce0:	3c57      	subs	r4, #87	@ 0x57
 8012ce2:	e7d8      	b.n	8012c96 <_strtol_l.constprop.0+0x72>
 8012ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8012ce8:	e7e1      	b.n	8012cae <_strtol_l.constprop.0+0x8a>
 8012cea:	1c53      	adds	r3, r2, #1
 8012cec:	d108      	bne.n	8012d00 <_strtol_l.constprop.0+0xdc>
 8012cee:	2322      	movs	r3, #34	@ 0x22
 8012cf0:	f8ce 3000 	str.w	r3, [lr]
 8012cf4:	4660      	mov	r0, ip
 8012cf6:	f1b8 0f00 	cmp.w	r8, #0
 8012cfa:	d0a0      	beq.n	8012c3e <_strtol_l.constprop.0+0x1a>
 8012cfc:	1e69      	subs	r1, r5, #1
 8012cfe:	e006      	b.n	8012d0e <_strtol_l.constprop.0+0xea>
 8012d00:	b106      	cbz	r6, 8012d04 <_strtol_l.constprop.0+0xe0>
 8012d02:	4240      	negs	r0, r0
 8012d04:	f1b8 0f00 	cmp.w	r8, #0
 8012d08:	d099      	beq.n	8012c3e <_strtol_l.constprop.0+0x1a>
 8012d0a:	2a00      	cmp	r2, #0
 8012d0c:	d1f6      	bne.n	8012cfc <_strtol_l.constprop.0+0xd8>
 8012d0e:	f8c8 1000 	str.w	r1, [r8]
 8012d12:	e794      	b.n	8012c3e <_strtol_l.constprop.0+0x1a>
 8012d14:	08014a41 	.word	0x08014a41

08012d18 <_strtol_r>:
 8012d18:	f7ff bf84 	b.w	8012c24 <_strtol_l.constprop.0>

08012d1c <__ascii_wctomb>:
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	4608      	mov	r0, r1
 8012d20:	b141      	cbz	r1, 8012d34 <__ascii_wctomb+0x18>
 8012d22:	2aff      	cmp	r2, #255	@ 0xff
 8012d24:	d904      	bls.n	8012d30 <__ascii_wctomb+0x14>
 8012d26:	228a      	movs	r2, #138	@ 0x8a
 8012d28:	601a      	str	r2, [r3, #0]
 8012d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8012d2e:	4770      	bx	lr
 8012d30:	700a      	strb	r2, [r1, #0]
 8012d32:	2001      	movs	r0, #1
 8012d34:	4770      	bx	lr

08012d36 <__ssputs_r>:
 8012d36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d3a:	688e      	ldr	r6, [r1, #8]
 8012d3c:	461f      	mov	r7, r3
 8012d3e:	42be      	cmp	r6, r7
 8012d40:	680b      	ldr	r3, [r1, #0]
 8012d42:	4682      	mov	sl, r0
 8012d44:	460c      	mov	r4, r1
 8012d46:	4690      	mov	r8, r2
 8012d48:	d82d      	bhi.n	8012da6 <__ssputs_r+0x70>
 8012d4a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012d4e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012d52:	d026      	beq.n	8012da2 <__ssputs_r+0x6c>
 8012d54:	6965      	ldr	r5, [r4, #20]
 8012d56:	6909      	ldr	r1, [r1, #16]
 8012d58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012d5c:	eba3 0901 	sub.w	r9, r3, r1
 8012d60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012d64:	1c7b      	adds	r3, r7, #1
 8012d66:	444b      	add	r3, r9
 8012d68:	106d      	asrs	r5, r5, #1
 8012d6a:	429d      	cmp	r5, r3
 8012d6c:	bf38      	it	cc
 8012d6e:	461d      	movcc	r5, r3
 8012d70:	0553      	lsls	r3, r2, #21
 8012d72:	d527      	bpl.n	8012dc4 <__ssputs_r+0x8e>
 8012d74:	4629      	mov	r1, r5
 8012d76:	f7ff fa05 	bl	8012184 <_malloc_r>
 8012d7a:	4606      	mov	r6, r0
 8012d7c:	b360      	cbz	r0, 8012dd8 <__ssputs_r+0xa2>
 8012d7e:	6921      	ldr	r1, [r4, #16]
 8012d80:	464a      	mov	r2, r9
 8012d82:	f7fd ffe6 	bl	8010d52 <memcpy>
 8012d86:	89a3      	ldrh	r3, [r4, #12]
 8012d88:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d90:	81a3      	strh	r3, [r4, #12]
 8012d92:	6126      	str	r6, [r4, #16]
 8012d94:	6165      	str	r5, [r4, #20]
 8012d96:	444e      	add	r6, r9
 8012d98:	eba5 0509 	sub.w	r5, r5, r9
 8012d9c:	6026      	str	r6, [r4, #0]
 8012d9e:	60a5      	str	r5, [r4, #8]
 8012da0:	463e      	mov	r6, r7
 8012da2:	42be      	cmp	r6, r7
 8012da4:	d900      	bls.n	8012da8 <__ssputs_r+0x72>
 8012da6:	463e      	mov	r6, r7
 8012da8:	6820      	ldr	r0, [r4, #0]
 8012daa:	4632      	mov	r2, r6
 8012dac:	4641      	mov	r1, r8
 8012dae:	f000 f9c5 	bl	801313c <memmove>
 8012db2:	68a3      	ldr	r3, [r4, #8]
 8012db4:	1b9b      	subs	r3, r3, r6
 8012db6:	60a3      	str	r3, [r4, #8]
 8012db8:	6823      	ldr	r3, [r4, #0]
 8012dba:	4433      	add	r3, r6
 8012dbc:	6023      	str	r3, [r4, #0]
 8012dbe:	2000      	movs	r0, #0
 8012dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dc4:	462a      	mov	r2, r5
 8012dc6:	f000 fa15 	bl	80131f4 <_realloc_r>
 8012dca:	4606      	mov	r6, r0
 8012dcc:	2800      	cmp	r0, #0
 8012dce:	d1e0      	bne.n	8012d92 <__ssputs_r+0x5c>
 8012dd0:	6921      	ldr	r1, [r4, #16]
 8012dd2:	4650      	mov	r0, sl
 8012dd4:	f7fe fe28 	bl	8011a28 <_free_r>
 8012dd8:	230c      	movs	r3, #12
 8012dda:	f8ca 3000 	str.w	r3, [sl]
 8012dde:	89a3      	ldrh	r3, [r4, #12]
 8012de0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012de4:	81a3      	strh	r3, [r4, #12]
 8012de6:	f04f 30ff 	mov.w	r0, #4294967295
 8012dea:	e7e9      	b.n	8012dc0 <__ssputs_r+0x8a>

08012dec <_svfiprintf_r>:
 8012dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012df0:	4698      	mov	r8, r3
 8012df2:	898b      	ldrh	r3, [r1, #12]
 8012df4:	061b      	lsls	r3, r3, #24
 8012df6:	b09d      	sub	sp, #116	@ 0x74
 8012df8:	4607      	mov	r7, r0
 8012dfa:	460d      	mov	r5, r1
 8012dfc:	4614      	mov	r4, r2
 8012dfe:	d510      	bpl.n	8012e22 <_svfiprintf_r+0x36>
 8012e00:	690b      	ldr	r3, [r1, #16]
 8012e02:	b973      	cbnz	r3, 8012e22 <_svfiprintf_r+0x36>
 8012e04:	2140      	movs	r1, #64	@ 0x40
 8012e06:	f7ff f9bd 	bl	8012184 <_malloc_r>
 8012e0a:	6028      	str	r0, [r5, #0]
 8012e0c:	6128      	str	r0, [r5, #16]
 8012e0e:	b930      	cbnz	r0, 8012e1e <_svfiprintf_r+0x32>
 8012e10:	230c      	movs	r3, #12
 8012e12:	603b      	str	r3, [r7, #0]
 8012e14:	f04f 30ff 	mov.w	r0, #4294967295
 8012e18:	b01d      	add	sp, #116	@ 0x74
 8012e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e1e:	2340      	movs	r3, #64	@ 0x40
 8012e20:	616b      	str	r3, [r5, #20]
 8012e22:	2300      	movs	r3, #0
 8012e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e26:	2320      	movs	r3, #32
 8012e28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012e2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e30:	2330      	movs	r3, #48	@ 0x30
 8012e32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012fd0 <_svfiprintf_r+0x1e4>
 8012e36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012e3a:	f04f 0901 	mov.w	r9, #1
 8012e3e:	4623      	mov	r3, r4
 8012e40:	469a      	mov	sl, r3
 8012e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e46:	b10a      	cbz	r2, 8012e4c <_svfiprintf_r+0x60>
 8012e48:	2a25      	cmp	r2, #37	@ 0x25
 8012e4a:	d1f9      	bne.n	8012e40 <_svfiprintf_r+0x54>
 8012e4c:	ebba 0b04 	subs.w	fp, sl, r4
 8012e50:	d00b      	beq.n	8012e6a <_svfiprintf_r+0x7e>
 8012e52:	465b      	mov	r3, fp
 8012e54:	4622      	mov	r2, r4
 8012e56:	4629      	mov	r1, r5
 8012e58:	4638      	mov	r0, r7
 8012e5a:	f7ff ff6c 	bl	8012d36 <__ssputs_r>
 8012e5e:	3001      	adds	r0, #1
 8012e60:	f000 80a7 	beq.w	8012fb2 <_svfiprintf_r+0x1c6>
 8012e64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012e66:	445a      	add	r2, fp
 8012e68:	9209      	str	r2, [sp, #36]	@ 0x24
 8012e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	f000 809f 	beq.w	8012fb2 <_svfiprintf_r+0x1c6>
 8012e74:	2300      	movs	r3, #0
 8012e76:	f04f 32ff 	mov.w	r2, #4294967295
 8012e7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e7e:	f10a 0a01 	add.w	sl, sl, #1
 8012e82:	9304      	str	r3, [sp, #16]
 8012e84:	9307      	str	r3, [sp, #28]
 8012e86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012e8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8012e8c:	4654      	mov	r4, sl
 8012e8e:	2205      	movs	r2, #5
 8012e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e94:	484e      	ldr	r0, [pc, #312]	@ (8012fd0 <_svfiprintf_r+0x1e4>)
 8012e96:	f7ed f9c3 	bl	8000220 <memchr>
 8012e9a:	9a04      	ldr	r2, [sp, #16]
 8012e9c:	b9d8      	cbnz	r0, 8012ed6 <_svfiprintf_r+0xea>
 8012e9e:	06d0      	lsls	r0, r2, #27
 8012ea0:	bf44      	itt	mi
 8012ea2:	2320      	movmi	r3, #32
 8012ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ea8:	0711      	lsls	r1, r2, #28
 8012eaa:	bf44      	itt	mi
 8012eac:	232b      	movmi	r3, #43	@ 0x2b
 8012eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8012eb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8012eb8:	d015      	beq.n	8012ee6 <_svfiprintf_r+0xfa>
 8012eba:	9a07      	ldr	r2, [sp, #28]
 8012ebc:	4654      	mov	r4, sl
 8012ebe:	2000      	movs	r0, #0
 8012ec0:	f04f 0c0a 	mov.w	ip, #10
 8012ec4:	4621      	mov	r1, r4
 8012ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012eca:	3b30      	subs	r3, #48	@ 0x30
 8012ecc:	2b09      	cmp	r3, #9
 8012ece:	d94b      	bls.n	8012f68 <_svfiprintf_r+0x17c>
 8012ed0:	b1b0      	cbz	r0, 8012f00 <_svfiprintf_r+0x114>
 8012ed2:	9207      	str	r2, [sp, #28]
 8012ed4:	e014      	b.n	8012f00 <_svfiprintf_r+0x114>
 8012ed6:	eba0 0308 	sub.w	r3, r0, r8
 8012eda:	fa09 f303 	lsl.w	r3, r9, r3
 8012ede:	4313      	orrs	r3, r2
 8012ee0:	9304      	str	r3, [sp, #16]
 8012ee2:	46a2      	mov	sl, r4
 8012ee4:	e7d2      	b.n	8012e8c <_svfiprintf_r+0xa0>
 8012ee6:	9b03      	ldr	r3, [sp, #12]
 8012ee8:	1d19      	adds	r1, r3, #4
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	9103      	str	r1, [sp, #12]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	bfbb      	ittet	lt
 8012ef2:	425b      	neglt	r3, r3
 8012ef4:	f042 0202 	orrlt.w	r2, r2, #2
 8012ef8:	9307      	strge	r3, [sp, #28]
 8012efa:	9307      	strlt	r3, [sp, #28]
 8012efc:	bfb8      	it	lt
 8012efe:	9204      	strlt	r2, [sp, #16]
 8012f00:	7823      	ldrb	r3, [r4, #0]
 8012f02:	2b2e      	cmp	r3, #46	@ 0x2e
 8012f04:	d10a      	bne.n	8012f1c <_svfiprintf_r+0x130>
 8012f06:	7863      	ldrb	r3, [r4, #1]
 8012f08:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f0a:	d132      	bne.n	8012f72 <_svfiprintf_r+0x186>
 8012f0c:	9b03      	ldr	r3, [sp, #12]
 8012f0e:	1d1a      	adds	r2, r3, #4
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	9203      	str	r2, [sp, #12]
 8012f14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012f18:	3402      	adds	r4, #2
 8012f1a:	9305      	str	r3, [sp, #20]
 8012f1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012fe0 <_svfiprintf_r+0x1f4>
 8012f20:	7821      	ldrb	r1, [r4, #0]
 8012f22:	2203      	movs	r2, #3
 8012f24:	4650      	mov	r0, sl
 8012f26:	f7ed f97b 	bl	8000220 <memchr>
 8012f2a:	b138      	cbz	r0, 8012f3c <_svfiprintf_r+0x150>
 8012f2c:	9b04      	ldr	r3, [sp, #16]
 8012f2e:	eba0 000a 	sub.w	r0, r0, sl
 8012f32:	2240      	movs	r2, #64	@ 0x40
 8012f34:	4082      	lsls	r2, r0
 8012f36:	4313      	orrs	r3, r2
 8012f38:	3401      	adds	r4, #1
 8012f3a:	9304      	str	r3, [sp, #16]
 8012f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f40:	4824      	ldr	r0, [pc, #144]	@ (8012fd4 <_svfiprintf_r+0x1e8>)
 8012f42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012f46:	2206      	movs	r2, #6
 8012f48:	f7ed f96a 	bl	8000220 <memchr>
 8012f4c:	2800      	cmp	r0, #0
 8012f4e:	d036      	beq.n	8012fbe <_svfiprintf_r+0x1d2>
 8012f50:	4b21      	ldr	r3, [pc, #132]	@ (8012fd8 <_svfiprintf_r+0x1ec>)
 8012f52:	bb1b      	cbnz	r3, 8012f9c <_svfiprintf_r+0x1b0>
 8012f54:	9b03      	ldr	r3, [sp, #12]
 8012f56:	3307      	adds	r3, #7
 8012f58:	f023 0307 	bic.w	r3, r3, #7
 8012f5c:	3308      	adds	r3, #8
 8012f5e:	9303      	str	r3, [sp, #12]
 8012f60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f62:	4433      	add	r3, r6
 8012f64:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f66:	e76a      	b.n	8012e3e <_svfiprintf_r+0x52>
 8012f68:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f6c:	460c      	mov	r4, r1
 8012f6e:	2001      	movs	r0, #1
 8012f70:	e7a8      	b.n	8012ec4 <_svfiprintf_r+0xd8>
 8012f72:	2300      	movs	r3, #0
 8012f74:	3401      	adds	r4, #1
 8012f76:	9305      	str	r3, [sp, #20]
 8012f78:	4619      	mov	r1, r3
 8012f7a:	f04f 0c0a 	mov.w	ip, #10
 8012f7e:	4620      	mov	r0, r4
 8012f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f84:	3a30      	subs	r2, #48	@ 0x30
 8012f86:	2a09      	cmp	r2, #9
 8012f88:	d903      	bls.n	8012f92 <_svfiprintf_r+0x1a6>
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d0c6      	beq.n	8012f1c <_svfiprintf_r+0x130>
 8012f8e:	9105      	str	r1, [sp, #20]
 8012f90:	e7c4      	b.n	8012f1c <_svfiprintf_r+0x130>
 8012f92:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f96:	4604      	mov	r4, r0
 8012f98:	2301      	movs	r3, #1
 8012f9a:	e7f0      	b.n	8012f7e <_svfiprintf_r+0x192>
 8012f9c:	ab03      	add	r3, sp, #12
 8012f9e:	9300      	str	r3, [sp, #0]
 8012fa0:	462a      	mov	r2, r5
 8012fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8012fdc <_svfiprintf_r+0x1f0>)
 8012fa4:	a904      	add	r1, sp, #16
 8012fa6:	4638      	mov	r0, r7
 8012fa8:	f7fc ff30 	bl	800fe0c <_printf_float>
 8012fac:	1c42      	adds	r2, r0, #1
 8012fae:	4606      	mov	r6, r0
 8012fb0:	d1d6      	bne.n	8012f60 <_svfiprintf_r+0x174>
 8012fb2:	89ab      	ldrh	r3, [r5, #12]
 8012fb4:	065b      	lsls	r3, r3, #25
 8012fb6:	f53f af2d 	bmi.w	8012e14 <_svfiprintf_r+0x28>
 8012fba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012fbc:	e72c      	b.n	8012e18 <_svfiprintf_r+0x2c>
 8012fbe:	ab03      	add	r3, sp, #12
 8012fc0:	9300      	str	r3, [sp, #0]
 8012fc2:	462a      	mov	r2, r5
 8012fc4:	4b05      	ldr	r3, [pc, #20]	@ (8012fdc <_svfiprintf_r+0x1f0>)
 8012fc6:	a904      	add	r1, sp, #16
 8012fc8:	4638      	mov	r0, r7
 8012fca:	f7fd f9b7 	bl	801033c <_printf_i>
 8012fce:	e7ed      	b.n	8012fac <_svfiprintf_r+0x1c0>
 8012fd0:	08014b41 	.word	0x08014b41
 8012fd4:	08014b4b 	.word	0x08014b4b
 8012fd8:	0800fe0d 	.word	0x0800fe0d
 8012fdc:	08012d37 	.word	0x08012d37
 8012fe0:	08014b47 	.word	0x08014b47

08012fe4 <__sflush_r>:
 8012fe4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fec:	0716      	lsls	r6, r2, #28
 8012fee:	4605      	mov	r5, r0
 8012ff0:	460c      	mov	r4, r1
 8012ff2:	d454      	bmi.n	801309e <__sflush_r+0xba>
 8012ff4:	684b      	ldr	r3, [r1, #4]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	dc02      	bgt.n	8013000 <__sflush_r+0x1c>
 8012ffa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	dd48      	ble.n	8013092 <__sflush_r+0xae>
 8013000:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013002:	2e00      	cmp	r6, #0
 8013004:	d045      	beq.n	8013092 <__sflush_r+0xae>
 8013006:	2300      	movs	r3, #0
 8013008:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801300c:	682f      	ldr	r7, [r5, #0]
 801300e:	6a21      	ldr	r1, [r4, #32]
 8013010:	602b      	str	r3, [r5, #0]
 8013012:	d030      	beq.n	8013076 <__sflush_r+0x92>
 8013014:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013016:	89a3      	ldrh	r3, [r4, #12]
 8013018:	0759      	lsls	r1, r3, #29
 801301a:	d505      	bpl.n	8013028 <__sflush_r+0x44>
 801301c:	6863      	ldr	r3, [r4, #4]
 801301e:	1ad2      	subs	r2, r2, r3
 8013020:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013022:	b10b      	cbz	r3, 8013028 <__sflush_r+0x44>
 8013024:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013026:	1ad2      	subs	r2, r2, r3
 8013028:	2300      	movs	r3, #0
 801302a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801302c:	6a21      	ldr	r1, [r4, #32]
 801302e:	4628      	mov	r0, r5
 8013030:	47b0      	blx	r6
 8013032:	1c43      	adds	r3, r0, #1
 8013034:	89a3      	ldrh	r3, [r4, #12]
 8013036:	d106      	bne.n	8013046 <__sflush_r+0x62>
 8013038:	6829      	ldr	r1, [r5, #0]
 801303a:	291d      	cmp	r1, #29
 801303c:	d82b      	bhi.n	8013096 <__sflush_r+0xb2>
 801303e:	4a2a      	ldr	r2, [pc, #168]	@ (80130e8 <__sflush_r+0x104>)
 8013040:	410a      	asrs	r2, r1
 8013042:	07d6      	lsls	r6, r2, #31
 8013044:	d427      	bmi.n	8013096 <__sflush_r+0xb2>
 8013046:	2200      	movs	r2, #0
 8013048:	6062      	str	r2, [r4, #4]
 801304a:	04d9      	lsls	r1, r3, #19
 801304c:	6922      	ldr	r2, [r4, #16]
 801304e:	6022      	str	r2, [r4, #0]
 8013050:	d504      	bpl.n	801305c <__sflush_r+0x78>
 8013052:	1c42      	adds	r2, r0, #1
 8013054:	d101      	bne.n	801305a <__sflush_r+0x76>
 8013056:	682b      	ldr	r3, [r5, #0]
 8013058:	b903      	cbnz	r3, 801305c <__sflush_r+0x78>
 801305a:	6560      	str	r0, [r4, #84]	@ 0x54
 801305c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801305e:	602f      	str	r7, [r5, #0]
 8013060:	b1b9      	cbz	r1, 8013092 <__sflush_r+0xae>
 8013062:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013066:	4299      	cmp	r1, r3
 8013068:	d002      	beq.n	8013070 <__sflush_r+0x8c>
 801306a:	4628      	mov	r0, r5
 801306c:	f7fe fcdc 	bl	8011a28 <_free_r>
 8013070:	2300      	movs	r3, #0
 8013072:	6363      	str	r3, [r4, #52]	@ 0x34
 8013074:	e00d      	b.n	8013092 <__sflush_r+0xae>
 8013076:	2301      	movs	r3, #1
 8013078:	4628      	mov	r0, r5
 801307a:	47b0      	blx	r6
 801307c:	4602      	mov	r2, r0
 801307e:	1c50      	adds	r0, r2, #1
 8013080:	d1c9      	bne.n	8013016 <__sflush_r+0x32>
 8013082:	682b      	ldr	r3, [r5, #0]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d0c6      	beq.n	8013016 <__sflush_r+0x32>
 8013088:	2b1d      	cmp	r3, #29
 801308a:	d001      	beq.n	8013090 <__sflush_r+0xac>
 801308c:	2b16      	cmp	r3, #22
 801308e:	d11e      	bne.n	80130ce <__sflush_r+0xea>
 8013090:	602f      	str	r7, [r5, #0]
 8013092:	2000      	movs	r0, #0
 8013094:	e022      	b.n	80130dc <__sflush_r+0xf8>
 8013096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801309a:	b21b      	sxth	r3, r3
 801309c:	e01b      	b.n	80130d6 <__sflush_r+0xf2>
 801309e:	690f      	ldr	r7, [r1, #16]
 80130a0:	2f00      	cmp	r7, #0
 80130a2:	d0f6      	beq.n	8013092 <__sflush_r+0xae>
 80130a4:	0793      	lsls	r3, r2, #30
 80130a6:	680e      	ldr	r6, [r1, #0]
 80130a8:	bf08      	it	eq
 80130aa:	694b      	ldreq	r3, [r1, #20]
 80130ac:	600f      	str	r7, [r1, #0]
 80130ae:	bf18      	it	ne
 80130b0:	2300      	movne	r3, #0
 80130b2:	eba6 0807 	sub.w	r8, r6, r7
 80130b6:	608b      	str	r3, [r1, #8]
 80130b8:	f1b8 0f00 	cmp.w	r8, #0
 80130bc:	dde9      	ble.n	8013092 <__sflush_r+0xae>
 80130be:	6a21      	ldr	r1, [r4, #32]
 80130c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80130c2:	4643      	mov	r3, r8
 80130c4:	463a      	mov	r2, r7
 80130c6:	4628      	mov	r0, r5
 80130c8:	47b0      	blx	r6
 80130ca:	2800      	cmp	r0, #0
 80130cc:	dc08      	bgt.n	80130e0 <__sflush_r+0xfc>
 80130ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80130d6:	81a3      	strh	r3, [r4, #12]
 80130d8:	f04f 30ff 	mov.w	r0, #4294967295
 80130dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130e0:	4407      	add	r7, r0
 80130e2:	eba8 0800 	sub.w	r8, r8, r0
 80130e6:	e7e7      	b.n	80130b8 <__sflush_r+0xd4>
 80130e8:	dfbffffe 	.word	0xdfbffffe

080130ec <_fflush_r>:
 80130ec:	b538      	push	{r3, r4, r5, lr}
 80130ee:	690b      	ldr	r3, [r1, #16]
 80130f0:	4605      	mov	r5, r0
 80130f2:	460c      	mov	r4, r1
 80130f4:	b913      	cbnz	r3, 80130fc <_fflush_r+0x10>
 80130f6:	2500      	movs	r5, #0
 80130f8:	4628      	mov	r0, r5
 80130fa:	bd38      	pop	{r3, r4, r5, pc}
 80130fc:	b118      	cbz	r0, 8013106 <_fflush_r+0x1a>
 80130fe:	6a03      	ldr	r3, [r0, #32]
 8013100:	b90b      	cbnz	r3, 8013106 <_fflush_r+0x1a>
 8013102:	f7fd fcdb 	bl	8010abc <__sinit>
 8013106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d0f3      	beq.n	80130f6 <_fflush_r+0xa>
 801310e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013110:	07d0      	lsls	r0, r2, #31
 8013112:	d404      	bmi.n	801311e <_fflush_r+0x32>
 8013114:	0599      	lsls	r1, r3, #22
 8013116:	d402      	bmi.n	801311e <_fflush_r+0x32>
 8013118:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801311a:	f7fd fe18 	bl	8010d4e <__retarget_lock_acquire_recursive>
 801311e:	4628      	mov	r0, r5
 8013120:	4621      	mov	r1, r4
 8013122:	f7ff ff5f 	bl	8012fe4 <__sflush_r>
 8013126:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013128:	07da      	lsls	r2, r3, #31
 801312a:	4605      	mov	r5, r0
 801312c:	d4e4      	bmi.n	80130f8 <_fflush_r+0xc>
 801312e:	89a3      	ldrh	r3, [r4, #12]
 8013130:	059b      	lsls	r3, r3, #22
 8013132:	d4e1      	bmi.n	80130f8 <_fflush_r+0xc>
 8013134:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013136:	f7fd fe0b 	bl	8010d50 <__retarget_lock_release_recursive>
 801313a:	e7dd      	b.n	80130f8 <_fflush_r+0xc>

0801313c <memmove>:
 801313c:	4288      	cmp	r0, r1
 801313e:	b510      	push	{r4, lr}
 8013140:	eb01 0402 	add.w	r4, r1, r2
 8013144:	d902      	bls.n	801314c <memmove+0x10>
 8013146:	4284      	cmp	r4, r0
 8013148:	4623      	mov	r3, r4
 801314a:	d807      	bhi.n	801315c <memmove+0x20>
 801314c:	1e43      	subs	r3, r0, #1
 801314e:	42a1      	cmp	r1, r4
 8013150:	d008      	beq.n	8013164 <memmove+0x28>
 8013152:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013156:	f803 2f01 	strb.w	r2, [r3, #1]!
 801315a:	e7f8      	b.n	801314e <memmove+0x12>
 801315c:	4402      	add	r2, r0
 801315e:	4601      	mov	r1, r0
 8013160:	428a      	cmp	r2, r1
 8013162:	d100      	bne.n	8013166 <memmove+0x2a>
 8013164:	bd10      	pop	{r4, pc}
 8013166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801316a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801316e:	e7f7      	b.n	8013160 <memmove+0x24>

08013170 <_sbrk_r>:
 8013170:	b538      	push	{r3, r4, r5, lr}
 8013172:	4d06      	ldr	r5, [pc, #24]	@ (801318c <_sbrk_r+0x1c>)
 8013174:	2300      	movs	r3, #0
 8013176:	4604      	mov	r4, r0
 8013178:	4608      	mov	r0, r1
 801317a:	602b      	str	r3, [r5, #0]
 801317c:	f7ee fec0 	bl	8001f00 <_sbrk>
 8013180:	1c43      	adds	r3, r0, #1
 8013182:	d102      	bne.n	801318a <_sbrk_r+0x1a>
 8013184:	682b      	ldr	r3, [r5, #0]
 8013186:	b103      	cbz	r3, 801318a <_sbrk_r+0x1a>
 8013188:	6023      	str	r3, [r4, #0]
 801318a:	bd38      	pop	{r3, r4, r5, pc}
 801318c:	20000e44 	.word	0x20000e44

08013190 <__assert_func>:
 8013190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013192:	4614      	mov	r4, r2
 8013194:	461a      	mov	r2, r3
 8013196:	4b09      	ldr	r3, [pc, #36]	@ (80131bc <__assert_func+0x2c>)
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	4605      	mov	r5, r0
 801319c:	68d8      	ldr	r0, [r3, #12]
 801319e:	b954      	cbnz	r4, 80131b6 <__assert_func+0x26>
 80131a0:	4b07      	ldr	r3, [pc, #28]	@ (80131c0 <__assert_func+0x30>)
 80131a2:	461c      	mov	r4, r3
 80131a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80131a8:	9100      	str	r1, [sp, #0]
 80131aa:	462b      	mov	r3, r5
 80131ac:	4905      	ldr	r1, [pc, #20]	@ (80131c4 <__assert_func+0x34>)
 80131ae:	f000 f84f 	bl	8013250 <fiprintf>
 80131b2:	f000 f85f 	bl	8013274 <abort>
 80131b6:	4b04      	ldr	r3, [pc, #16]	@ (80131c8 <__assert_func+0x38>)
 80131b8:	e7f4      	b.n	80131a4 <__assert_func+0x14>
 80131ba:	bf00      	nop
 80131bc:	20000248 	.word	0x20000248
 80131c0:	08014b8d 	.word	0x08014b8d
 80131c4:	08014b5f 	.word	0x08014b5f
 80131c8:	08014b52 	.word	0x08014b52

080131cc <_calloc_r>:
 80131cc:	b570      	push	{r4, r5, r6, lr}
 80131ce:	fba1 5402 	umull	r5, r4, r1, r2
 80131d2:	b93c      	cbnz	r4, 80131e4 <_calloc_r+0x18>
 80131d4:	4629      	mov	r1, r5
 80131d6:	f7fe ffd5 	bl	8012184 <_malloc_r>
 80131da:	4606      	mov	r6, r0
 80131dc:	b928      	cbnz	r0, 80131ea <_calloc_r+0x1e>
 80131de:	2600      	movs	r6, #0
 80131e0:	4630      	mov	r0, r6
 80131e2:	bd70      	pop	{r4, r5, r6, pc}
 80131e4:	220c      	movs	r2, #12
 80131e6:	6002      	str	r2, [r0, #0]
 80131e8:	e7f9      	b.n	80131de <_calloc_r+0x12>
 80131ea:	462a      	mov	r2, r5
 80131ec:	4621      	mov	r1, r4
 80131ee:	f7fd fd1f 	bl	8010c30 <memset>
 80131f2:	e7f5      	b.n	80131e0 <_calloc_r+0x14>

080131f4 <_realloc_r>:
 80131f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131f8:	4680      	mov	r8, r0
 80131fa:	4615      	mov	r5, r2
 80131fc:	460c      	mov	r4, r1
 80131fe:	b921      	cbnz	r1, 801320a <_realloc_r+0x16>
 8013200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013204:	4611      	mov	r1, r2
 8013206:	f7fe bfbd 	b.w	8012184 <_malloc_r>
 801320a:	b92a      	cbnz	r2, 8013218 <_realloc_r+0x24>
 801320c:	f7fe fc0c 	bl	8011a28 <_free_r>
 8013210:	2400      	movs	r4, #0
 8013212:	4620      	mov	r0, r4
 8013214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013218:	f000 f833 	bl	8013282 <_malloc_usable_size_r>
 801321c:	4285      	cmp	r5, r0
 801321e:	4606      	mov	r6, r0
 8013220:	d802      	bhi.n	8013228 <_realloc_r+0x34>
 8013222:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013226:	d8f4      	bhi.n	8013212 <_realloc_r+0x1e>
 8013228:	4629      	mov	r1, r5
 801322a:	4640      	mov	r0, r8
 801322c:	f7fe ffaa 	bl	8012184 <_malloc_r>
 8013230:	4607      	mov	r7, r0
 8013232:	2800      	cmp	r0, #0
 8013234:	d0ec      	beq.n	8013210 <_realloc_r+0x1c>
 8013236:	42b5      	cmp	r5, r6
 8013238:	462a      	mov	r2, r5
 801323a:	4621      	mov	r1, r4
 801323c:	bf28      	it	cs
 801323e:	4632      	movcs	r2, r6
 8013240:	f7fd fd87 	bl	8010d52 <memcpy>
 8013244:	4621      	mov	r1, r4
 8013246:	4640      	mov	r0, r8
 8013248:	f7fe fbee 	bl	8011a28 <_free_r>
 801324c:	463c      	mov	r4, r7
 801324e:	e7e0      	b.n	8013212 <_realloc_r+0x1e>

08013250 <fiprintf>:
 8013250:	b40e      	push	{r1, r2, r3}
 8013252:	b503      	push	{r0, r1, lr}
 8013254:	4601      	mov	r1, r0
 8013256:	ab03      	add	r3, sp, #12
 8013258:	4805      	ldr	r0, [pc, #20]	@ (8013270 <fiprintf+0x20>)
 801325a:	f853 2b04 	ldr.w	r2, [r3], #4
 801325e:	6800      	ldr	r0, [r0, #0]
 8013260:	9301      	str	r3, [sp, #4]
 8013262:	f000 f83f 	bl	80132e4 <_vfiprintf_r>
 8013266:	b002      	add	sp, #8
 8013268:	f85d eb04 	ldr.w	lr, [sp], #4
 801326c:	b003      	add	sp, #12
 801326e:	4770      	bx	lr
 8013270:	20000248 	.word	0x20000248

08013274 <abort>:
 8013274:	b508      	push	{r3, lr}
 8013276:	2006      	movs	r0, #6
 8013278:	f000 fa08 	bl	801368c <raise>
 801327c:	2001      	movs	r0, #1
 801327e:	f7ee fdc7 	bl	8001e10 <_exit>

08013282 <_malloc_usable_size_r>:
 8013282:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013286:	1f18      	subs	r0, r3, #4
 8013288:	2b00      	cmp	r3, #0
 801328a:	bfbc      	itt	lt
 801328c:	580b      	ldrlt	r3, [r1, r0]
 801328e:	18c0      	addlt	r0, r0, r3
 8013290:	4770      	bx	lr

08013292 <__sfputc_r>:
 8013292:	6893      	ldr	r3, [r2, #8]
 8013294:	3b01      	subs	r3, #1
 8013296:	2b00      	cmp	r3, #0
 8013298:	b410      	push	{r4}
 801329a:	6093      	str	r3, [r2, #8]
 801329c:	da08      	bge.n	80132b0 <__sfputc_r+0x1e>
 801329e:	6994      	ldr	r4, [r2, #24]
 80132a0:	42a3      	cmp	r3, r4
 80132a2:	db01      	blt.n	80132a8 <__sfputc_r+0x16>
 80132a4:	290a      	cmp	r1, #10
 80132a6:	d103      	bne.n	80132b0 <__sfputc_r+0x1e>
 80132a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132ac:	f000 b932 	b.w	8013514 <__swbuf_r>
 80132b0:	6813      	ldr	r3, [r2, #0]
 80132b2:	1c58      	adds	r0, r3, #1
 80132b4:	6010      	str	r0, [r2, #0]
 80132b6:	7019      	strb	r1, [r3, #0]
 80132b8:	4608      	mov	r0, r1
 80132ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132be:	4770      	bx	lr

080132c0 <__sfputs_r>:
 80132c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132c2:	4606      	mov	r6, r0
 80132c4:	460f      	mov	r7, r1
 80132c6:	4614      	mov	r4, r2
 80132c8:	18d5      	adds	r5, r2, r3
 80132ca:	42ac      	cmp	r4, r5
 80132cc:	d101      	bne.n	80132d2 <__sfputs_r+0x12>
 80132ce:	2000      	movs	r0, #0
 80132d0:	e007      	b.n	80132e2 <__sfputs_r+0x22>
 80132d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132d6:	463a      	mov	r2, r7
 80132d8:	4630      	mov	r0, r6
 80132da:	f7ff ffda 	bl	8013292 <__sfputc_r>
 80132de:	1c43      	adds	r3, r0, #1
 80132e0:	d1f3      	bne.n	80132ca <__sfputs_r+0xa>
 80132e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080132e4 <_vfiprintf_r>:
 80132e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132e8:	460d      	mov	r5, r1
 80132ea:	b09d      	sub	sp, #116	@ 0x74
 80132ec:	4614      	mov	r4, r2
 80132ee:	4698      	mov	r8, r3
 80132f0:	4606      	mov	r6, r0
 80132f2:	b118      	cbz	r0, 80132fc <_vfiprintf_r+0x18>
 80132f4:	6a03      	ldr	r3, [r0, #32]
 80132f6:	b90b      	cbnz	r3, 80132fc <_vfiprintf_r+0x18>
 80132f8:	f7fd fbe0 	bl	8010abc <__sinit>
 80132fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80132fe:	07d9      	lsls	r1, r3, #31
 8013300:	d405      	bmi.n	801330e <_vfiprintf_r+0x2a>
 8013302:	89ab      	ldrh	r3, [r5, #12]
 8013304:	059a      	lsls	r2, r3, #22
 8013306:	d402      	bmi.n	801330e <_vfiprintf_r+0x2a>
 8013308:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801330a:	f7fd fd20 	bl	8010d4e <__retarget_lock_acquire_recursive>
 801330e:	89ab      	ldrh	r3, [r5, #12]
 8013310:	071b      	lsls	r3, r3, #28
 8013312:	d501      	bpl.n	8013318 <_vfiprintf_r+0x34>
 8013314:	692b      	ldr	r3, [r5, #16]
 8013316:	b99b      	cbnz	r3, 8013340 <_vfiprintf_r+0x5c>
 8013318:	4629      	mov	r1, r5
 801331a:	4630      	mov	r0, r6
 801331c:	f000 f938 	bl	8013590 <__swsetup_r>
 8013320:	b170      	cbz	r0, 8013340 <_vfiprintf_r+0x5c>
 8013322:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013324:	07dc      	lsls	r4, r3, #31
 8013326:	d504      	bpl.n	8013332 <_vfiprintf_r+0x4e>
 8013328:	f04f 30ff 	mov.w	r0, #4294967295
 801332c:	b01d      	add	sp, #116	@ 0x74
 801332e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013332:	89ab      	ldrh	r3, [r5, #12]
 8013334:	0598      	lsls	r0, r3, #22
 8013336:	d4f7      	bmi.n	8013328 <_vfiprintf_r+0x44>
 8013338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801333a:	f7fd fd09 	bl	8010d50 <__retarget_lock_release_recursive>
 801333e:	e7f3      	b.n	8013328 <_vfiprintf_r+0x44>
 8013340:	2300      	movs	r3, #0
 8013342:	9309      	str	r3, [sp, #36]	@ 0x24
 8013344:	2320      	movs	r3, #32
 8013346:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801334a:	f8cd 800c 	str.w	r8, [sp, #12]
 801334e:	2330      	movs	r3, #48	@ 0x30
 8013350:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013500 <_vfiprintf_r+0x21c>
 8013354:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013358:	f04f 0901 	mov.w	r9, #1
 801335c:	4623      	mov	r3, r4
 801335e:	469a      	mov	sl, r3
 8013360:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013364:	b10a      	cbz	r2, 801336a <_vfiprintf_r+0x86>
 8013366:	2a25      	cmp	r2, #37	@ 0x25
 8013368:	d1f9      	bne.n	801335e <_vfiprintf_r+0x7a>
 801336a:	ebba 0b04 	subs.w	fp, sl, r4
 801336e:	d00b      	beq.n	8013388 <_vfiprintf_r+0xa4>
 8013370:	465b      	mov	r3, fp
 8013372:	4622      	mov	r2, r4
 8013374:	4629      	mov	r1, r5
 8013376:	4630      	mov	r0, r6
 8013378:	f7ff ffa2 	bl	80132c0 <__sfputs_r>
 801337c:	3001      	adds	r0, #1
 801337e:	f000 80a7 	beq.w	80134d0 <_vfiprintf_r+0x1ec>
 8013382:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013384:	445a      	add	r2, fp
 8013386:	9209      	str	r2, [sp, #36]	@ 0x24
 8013388:	f89a 3000 	ldrb.w	r3, [sl]
 801338c:	2b00      	cmp	r3, #0
 801338e:	f000 809f 	beq.w	80134d0 <_vfiprintf_r+0x1ec>
 8013392:	2300      	movs	r3, #0
 8013394:	f04f 32ff 	mov.w	r2, #4294967295
 8013398:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801339c:	f10a 0a01 	add.w	sl, sl, #1
 80133a0:	9304      	str	r3, [sp, #16]
 80133a2:	9307      	str	r3, [sp, #28]
 80133a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80133a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80133aa:	4654      	mov	r4, sl
 80133ac:	2205      	movs	r2, #5
 80133ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133b2:	4853      	ldr	r0, [pc, #332]	@ (8013500 <_vfiprintf_r+0x21c>)
 80133b4:	f7ec ff34 	bl	8000220 <memchr>
 80133b8:	9a04      	ldr	r2, [sp, #16]
 80133ba:	b9d8      	cbnz	r0, 80133f4 <_vfiprintf_r+0x110>
 80133bc:	06d1      	lsls	r1, r2, #27
 80133be:	bf44      	itt	mi
 80133c0:	2320      	movmi	r3, #32
 80133c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80133c6:	0713      	lsls	r3, r2, #28
 80133c8:	bf44      	itt	mi
 80133ca:	232b      	movmi	r3, #43	@ 0x2b
 80133cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80133d0:	f89a 3000 	ldrb.w	r3, [sl]
 80133d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80133d6:	d015      	beq.n	8013404 <_vfiprintf_r+0x120>
 80133d8:	9a07      	ldr	r2, [sp, #28]
 80133da:	4654      	mov	r4, sl
 80133dc:	2000      	movs	r0, #0
 80133de:	f04f 0c0a 	mov.w	ip, #10
 80133e2:	4621      	mov	r1, r4
 80133e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80133e8:	3b30      	subs	r3, #48	@ 0x30
 80133ea:	2b09      	cmp	r3, #9
 80133ec:	d94b      	bls.n	8013486 <_vfiprintf_r+0x1a2>
 80133ee:	b1b0      	cbz	r0, 801341e <_vfiprintf_r+0x13a>
 80133f0:	9207      	str	r2, [sp, #28]
 80133f2:	e014      	b.n	801341e <_vfiprintf_r+0x13a>
 80133f4:	eba0 0308 	sub.w	r3, r0, r8
 80133f8:	fa09 f303 	lsl.w	r3, r9, r3
 80133fc:	4313      	orrs	r3, r2
 80133fe:	9304      	str	r3, [sp, #16]
 8013400:	46a2      	mov	sl, r4
 8013402:	e7d2      	b.n	80133aa <_vfiprintf_r+0xc6>
 8013404:	9b03      	ldr	r3, [sp, #12]
 8013406:	1d19      	adds	r1, r3, #4
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	9103      	str	r1, [sp, #12]
 801340c:	2b00      	cmp	r3, #0
 801340e:	bfbb      	ittet	lt
 8013410:	425b      	neglt	r3, r3
 8013412:	f042 0202 	orrlt.w	r2, r2, #2
 8013416:	9307      	strge	r3, [sp, #28]
 8013418:	9307      	strlt	r3, [sp, #28]
 801341a:	bfb8      	it	lt
 801341c:	9204      	strlt	r2, [sp, #16]
 801341e:	7823      	ldrb	r3, [r4, #0]
 8013420:	2b2e      	cmp	r3, #46	@ 0x2e
 8013422:	d10a      	bne.n	801343a <_vfiprintf_r+0x156>
 8013424:	7863      	ldrb	r3, [r4, #1]
 8013426:	2b2a      	cmp	r3, #42	@ 0x2a
 8013428:	d132      	bne.n	8013490 <_vfiprintf_r+0x1ac>
 801342a:	9b03      	ldr	r3, [sp, #12]
 801342c:	1d1a      	adds	r2, r3, #4
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	9203      	str	r2, [sp, #12]
 8013432:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013436:	3402      	adds	r4, #2
 8013438:	9305      	str	r3, [sp, #20]
 801343a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013510 <_vfiprintf_r+0x22c>
 801343e:	7821      	ldrb	r1, [r4, #0]
 8013440:	2203      	movs	r2, #3
 8013442:	4650      	mov	r0, sl
 8013444:	f7ec feec 	bl	8000220 <memchr>
 8013448:	b138      	cbz	r0, 801345a <_vfiprintf_r+0x176>
 801344a:	9b04      	ldr	r3, [sp, #16]
 801344c:	eba0 000a 	sub.w	r0, r0, sl
 8013450:	2240      	movs	r2, #64	@ 0x40
 8013452:	4082      	lsls	r2, r0
 8013454:	4313      	orrs	r3, r2
 8013456:	3401      	adds	r4, #1
 8013458:	9304      	str	r3, [sp, #16]
 801345a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801345e:	4829      	ldr	r0, [pc, #164]	@ (8013504 <_vfiprintf_r+0x220>)
 8013460:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013464:	2206      	movs	r2, #6
 8013466:	f7ec fedb 	bl	8000220 <memchr>
 801346a:	2800      	cmp	r0, #0
 801346c:	d03f      	beq.n	80134ee <_vfiprintf_r+0x20a>
 801346e:	4b26      	ldr	r3, [pc, #152]	@ (8013508 <_vfiprintf_r+0x224>)
 8013470:	bb1b      	cbnz	r3, 80134ba <_vfiprintf_r+0x1d6>
 8013472:	9b03      	ldr	r3, [sp, #12]
 8013474:	3307      	adds	r3, #7
 8013476:	f023 0307 	bic.w	r3, r3, #7
 801347a:	3308      	adds	r3, #8
 801347c:	9303      	str	r3, [sp, #12]
 801347e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013480:	443b      	add	r3, r7
 8013482:	9309      	str	r3, [sp, #36]	@ 0x24
 8013484:	e76a      	b.n	801335c <_vfiprintf_r+0x78>
 8013486:	fb0c 3202 	mla	r2, ip, r2, r3
 801348a:	460c      	mov	r4, r1
 801348c:	2001      	movs	r0, #1
 801348e:	e7a8      	b.n	80133e2 <_vfiprintf_r+0xfe>
 8013490:	2300      	movs	r3, #0
 8013492:	3401      	adds	r4, #1
 8013494:	9305      	str	r3, [sp, #20]
 8013496:	4619      	mov	r1, r3
 8013498:	f04f 0c0a 	mov.w	ip, #10
 801349c:	4620      	mov	r0, r4
 801349e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134a2:	3a30      	subs	r2, #48	@ 0x30
 80134a4:	2a09      	cmp	r2, #9
 80134a6:	d903      	bls.n	80134b0 <_vfiprintf_r+0x1cc>
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d0c6      	beq.n	801343a <_vfiprintf_r+0x156>
 80134ac:	9105      	str	r1, [sp, #20]
 80134ae:	e7c4      	b.n	801343a <_vfiprintf_r+0x156>
 80134b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80134b4:	4604      	mov	r4, r0
 80134b6:	2301      	movs	r3, #1
 80134b8:	e7f0      	b.n	801349c <_vfiprintf_r+0x1b8>
 80134ba:	ab03      	add	r3, sp, #12
 80134bc:	9300      	str	r3, [sp, #0]
 80134be:	462a      	mov	r2, r5
 80134c0:	4b12      	ldr	r3, [pc, #72]	@ (801350c <_vfiprintf_r+0x228>)
 80134c2:	a904      	add	r1, sp, #16
 80134c4:	4630      	mov	r0, r6
 80134c6:	f7fc fca1 	bl	800fe0c <_printf_float>
 80134ca:	4607      	mov	r7, r0
 80134cc:	1c78      	adds	r0, r7, #1
 80134ce:	d1d6      	bne.n	801347e <_vfiprintf_r+0x19a>
 80134d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80134d2:	07d9      	lsls	r1, r3, #31
 80134d4:	d405      	bmi.n	80134e2 <_vfiprintf_r+0x1fe>
 80134d6:	89ab      	ldrh	r3, [r5, #12]
 80134d8:	059a      	lsls	r2, r3, #22
 80134da:	d402      	bmi.n	80134e2 <_vfiprintf_r+0x1fe>
 80134dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80134de:	f7fd fc37 	bl	8010d50 <__retarget_lock_release_recursive>
 80134e2:	89ab      	ldrh	r3, [r5, #12]
 80134e4:	065b      	lsls	r3, r3, #25
 80134e6:	f53f af1f 	bmi.w	8013328 <_vfiprintf_r+0x44>
 80134ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80134ec:	e71e      	b.n	801332c <_vfiprintf_r+0x48>
 80134ee:	ab03      	add	r3, sp, #12
 80134f0:	9300      	str	r3, [sp, #0]
 80134f2:	462a      	mov	r2, r5
 80134f4:	4b05      	ldr	r3, [pc, #20]	@ (801350c <_vfiprintf_r+0x228>)
 80134f6:	a904      	add	r1, sp, #16
 80134f8:	4630      	mov	r0, r6
 80134fa:	f7fc ff1f 	bl	801033c <_printf_i>
 80134fe:	e7e4      	b.n	80134ca <_vfiprintf_r+0x1e6>
 8013500:	08014b41 	.word	0x08014b41
 8013504:	08014b4b 	.word	0x08014b4b
 8013508:	0800fe0d 	.word	0x0800fe0d
 801350c:	080132c1 	.word	0x080132c1
 8013510:	08014b47 	.word	0x08014b47

08013514 <__swbuf_r>:
 8013514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013516:	460e      	mov	r6, r1
 8013518:	4614      	mov	r4, r2
 801351a:	4605      	mov	r5, r0
 801351c:	b118      	cbz	r0, 8013526 <__swbuf_r+0x12>
 801351e:	6a03      	ldr	r3, [r0, #32]
 8013520:	b90b      	cbnz	r3, 8013526 <__swbuf_r+0x12>
 8013522:	f7fd facb 	bl	8010abc <__sinit>
 8013526:	69a3      	ldr	r3, [r4, #24]
 8013528:	60a3      	str	r3, [r4, #8]
 801352a:	89a3      	ldrh	r3, [r4, #12]
 801352c:	071a      	lsls	r2, r3, #28
 801352e:	d501      	bpl.n	8013534 <__swbuf_r+0x20>
 8013530:	6923      	ldr	r3, [r4, #16]
 8013532:	b943      	cbnz	r3, 8013546 <__swbuf_r+0x32>
 8013534:	4621      	mov	r1, r4
 8013536:	4628      	mov	r0, r5
 8013538:	f000 f82a 	bl	8013590 <__swsetup_r>
 801353c:	b118      	cbz	r0, 8013546 <__swbuf_r+0x32>
 801353e:	f04f 37ff 	mov.w	r7, #4294967295
 8013542:	4638      	mov	r0, r7
 8013544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013546:	6823      	ldr	r3, [r4, #0]
 8013548:	6922      	ldr	r2, [r4, #16]
 801354a:	1a98      	subs	r0, r3, r2
 801354c:	6963      	ldr	r3, [r4, #20]
 801354e:	b2f6      	uxtb	r6, r6
 8013550:	4283      	cmp	r3, r0
 8013552:	4637      	mov	r7, r6
 8013554:	dc05      	bgt.n	8013562 <__swbuf_r+0x4e>
 8013556:	4621      	mov	r1, r4
 8013558:	4628      	mov	r0, r5
 801355a:	f7ff fdc7 	bl	80130ec <_fflush_r>
 801355e:	2800      	cmp	r0, #0
 8013560:	d1ed      	bne.n	801353e <__swbuf_r+0x2a>
 8013562:	68a3      	ldr	r3, [r4, #8]
 8013564:	3b01      	subs	r3, #1
 8013566:	60a3      	str	r3, [r4, #8]
 8013568:	6823      	ldr	r3, [r4, #0]
 801356a:	1c5a      	adds	r2, r3, #1
 801356c:	6022      	str	r2, [r4, #0]
 801356e:	701e      	strb	r6, [r3, #0]
 8013570:	6962      	ldr	r2, [r4, #20]
 8013572:	1c43      	adds	r3, r0, #1
 8013574:	429a      	cmp	r2, r3
 8013576:	d004      	beq.n	8013582 <__swbuf_r+0x6e>
 8013578:	89a3      	ldrh	r3, [r4, #12]
 801357a:	07db      	lsls	r3, r3, #31
 801357c:	d5e1      	bpl.n	8013542 <__swbuf_r+0x2e>
 801357e:	2e0a      	cmp	r6, #10
 8013580:	d1df      	bne.n	8013542 <__swbuf_r+0x2e>
 8013582:	4621      	mov	r1, r4
 8013584:	4628      	mov	r0, r5
 8013586:	f7ff fdb1 	bl	80130ec <_fflush_r>
 801358a:	2800      	cmp	r0, #0
 801358c:	d0d9      	beq.n	8013542 <__swbuf_r+0x2e>
 801358e:	e7d6      	b.n	801353e <__swbuf_r+0x2a>

08013590 <__swsetup_r>:
 8013590:	b538      	push	{r3, r4, r5, lr}
 8013592:	4b29      	ldr	r3, [pc, #164]	@ (8013638 <__swsetup_r+0xa8>)
 8013594:	4605      	mov	r5, r0
 8013596:	6818      	ldr	r0, [r3, #0]
 8013598:	460c      	mov	r4, r1
 801359a:	b118      	cbz	r0, 80135a4 <__swsetup_r+0x14>
 801359c:	6a03      	ldr	r3, [r0, #32]
 801359e:	b90b      	cbnz	r3, 80135a4 <__swsetup_r+0x14>
 80135a0:	f7fd fa8c 	bl	8010abc <__sinit>
 80135a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135a8:	0719      	lsls	r1, r3, #28
 80135aa:	d422      	bmi.n	80135f2 <__swsetup_r+0x62>
 80135ac:	06da      	lsls	r2, r3, #27
 80135ae:	d407      	bmi.n	80135c0 <__swsetup_r+0x30>
 80135b0:	2209      	movs	r2, #9
 80135b2:	602a      	str	r2, [r5, #0]
 80135b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80135b8:	81a3      	strh	r3, [r4, #12]
 80135ba:	f04f 30ff 	mov.w	r0, #4294967295
 80135be:	e033      	b.n	8013628 <__swsetup_r+0x98>
 80135c0:	0758      	lsls	r0, r3, #29
 80135c2:	d512      	bpl.n	80135ea <__swsetup_r+0x5a>
 80135c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80135c6:	b141      	cbz	r1, 80135da <__swsetup_r+0x4a>
 80135c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80135cc:	4299      	cmp	r1, r3
 80135ce:	d002      	beq.n	80135d6 <__swsetup_r+0x46>
 80135d0:	4628      	mov	r0, r5
 80135d2:	f7fe fa29 	bl	8011a28 <_free_r>
 80135d6:	2300      	movs	r3, #0
 80135d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80135da:	89a3      	ldrh	r3, [r4, #12]
 80135dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80135e0:	81a3      	strh	r3, [r4, #12]
 80135e2:	2300      	movs	r3, #0
 80135e4:	6063      	str	r3, [r4, #4]
 80135e6:	6923      	ldr	r3, [r4, #16]
 80135e8:	6023      	str	r3, [r4, #0]
 80135ea:	89a3      	ldrh	r3, [r4, #12]
 80135ec:	f043 0308 	orr.w	r3, r3, #8
 80135f0:	81a3      	strh	r3, [r4, #12]
 80135f2:	6923      	ldr	r3, [r4, #16]
 80135f4:	b94b      	cbnz	r3, 801360a <__swsetup_r+0x7a>
 80135f6:	89a3      	ldrh	r3, [r4, #12]
 80135f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80135fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013600:	d003      	beq.n	801360a <__swsetup_r+0x7a>
 8013602:	4621      	mov	r1, r4
 8013604:	4628      	mov	r0, r5
 8013606:	f000 f883 	bl	8013710 <__smakebuf_r>
 801360a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801360e:	f013 0201 	ands.w	r2, r3, #1
 8013612:	d00a      	beq.n	801362a <__swsetup_r+0x9a>
 8013614:	2200      	movs	r2, #0
 8013616:	60a2      	str	r2, [r4, #8]
 8013618:	6962      	ldr	r2, [r4, #20]
 801361a:	4252      	negs	r2, r2
 801361c:	61a2      	str	r2, [r4, #24]
 801361e:	6922      	ldr	r2, [r4, #16]
 8013620:	b942      	cbnz	r2, 8013634 <__swsetup_r+0xa4>
 8013622:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013626:	d1c5      	bne.n	80135b4 <__swsetup_r+0x24>
 8013628:	bd38      	pop	{r3, r4, r5, pc}
 801362a:	0799      	lsls	r1, r3, #30
 801362c:	bf58      	it	pl
 801362e:	6962      	ldrpl	r2, [r4, #20]
 8013630:	60a2      	str	r2, [r4, #8]
 8013632:	e7f4      	b.n	801361e <__swsetup_r+0x8e>
 8013634:	2000      	movs	r0, #0
 8013636:	e7f7      	b.n	8013628 <__swsetup_r+0x98>
 8013638:	20000248 	.word	0x20000248

0801363c <_raise_r>:
 801363c:	291f      	cmp	r1, #31
 801363e:	b538      	push	{r3, r4, r5, lr}
 8013640:	4605      	mov	r5, r0
 8013642:	460c      	mov	r4, r1
 8013644:	d904      	bls.n	8013650 <_raise_r+0x14>
 8013646:	2316      	movs	r3, #22
 8013648:	6003      	str	r3, [r0, #0]
 801364a:	f04f 30ff 	mov.w	r0, #4294967295
 801364e:	bd38      	pop	{r3, r4, r5, pc}
 8013650:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013652:	b112      	cbz	r2, 801365a <_raise_r+0x1e>
 8013654:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013658:	b94b      	cbnz	r3, 801366e <_raise_r+0x32>
 801365a:	4628      	mov	r0, r5
 801365c:	f000 f830 	bl	80136c0 <_getpid_r>
 8013660:	4622      	mov	r2, r4
 8013662:	4601      	mov	r1, r0
 8013664:	4628      	mov	r0, r5
 8013666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801366a:	f000 b817 	b.w	801369c <_kill_r>
 801366e:	2b01      	cmp	r3, #1
 8013670:	d00a      	beq.n	8013688 <_raise_r+0x4c>
 8013672:	1c59      	adds	r1, r3, #1
 8013674:	d103      	bne.n	801367e <_raise_r+0x42>
 8013676:	2316      	movs	r3, #22
 8013678:	6003      	str	r3, [r0, #0]
 801367a:	2001      	movs	r0, #1
 801367c:	e7e7      	b.n	801364e <_raise_r+0x12>
 801367e:	2100      	movs	r1, #0
 8013680:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013684:	4620      	mov	r0, r4
 8013686:	4798      	blx	r3
 8013688:	2000      	movs	r0, #0
 801368a:	e7e0      	b.n	801364e <_raise_r+0x12>

0801368c <raise>:
 801368c:	4b02      	ldr	r3, [pc, #8]	@ (8013698 <raise+0xc>)
 801368e:	4601      	mov	r1, r0
 8013690:	6818      	ldr	r0, [r3, #0]
 8013692:	f7ff bfd3 	b.w	801363c <_raise_r>
 8013696:	bf00      	nop
 8013698:	20000248 	.word	0x20000248

0801369c <_kill_r>:
 801369c:	b538      	push	{r3, r4, r5, lr}
 801369e:	4d07      	ldr	r5, [pc, #28]	@ (80136bc <_kill_r+0x20>)
 80136a0:	2300      	movs	r3, #0
 80136a2:	4604      	mov	r4, r0
 80136a4:	4608      	mov	r0, r1
 80136a6:	4611      	mov	r1, r2
 80136a8:	602b      	str	r3, [r5, #0]
 80136aa:	f7ee fba1 	bl	8001df0 <_kill>
 80136ae:	1c43      	adds	r3, r0, #1
 80136b0:	d102      	bne.n	80136b8 <_kill_r+0x1c>
 80136b2:	682b      	ldr	r3, [r5, #0]
 80136b4:	b103      	cbz	r3, 80136b8 <_kill_r+0x1c>
 80136b6:	6023      	str	r3, [r4, #0]
 80136b8:	bd38      	pop	{r3, r4, r5, pc}
 80136ba:	bf00      	nop
 80136bc:	20000e44 	.word	0x20000e44

080136c0 <_getpid_r>:
 80136c0:	f7ee bb8e 	b.w	8001de0 <_getpid>

080136c4 <__swhatbuf_r>:
 80136c4:	b570      	push	{r4, r5, r6, lr}
 80136c6:	460c      	mov	r4, r1
 80136c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136cc:	2900      	cmp	r1, #0
 80136ce:	b096      	sub	sp, #88	@ 0x58
 80136d0:	4615      	mov	r5, r2
 80136d2:	461e      	mov	r6, r3
 80136d4:	da0d      	bge.n	80136f2 <__swhatbuf_r+0x2e>
 80136d6:	89a3      	ldrh	r3, [r4, #12]
 80136d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80136dc:	f04f 0100 	mov.w	r1, #0
 80136e0:	bf14      	ite	ne
 80136e2:	2340      	movne	r3, #64	@ 0x40
 80136e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80136e8:	2000      	movs	r0, #0
 80136ea:	6031      	str	r1, [r6, #0]
 80136ec:	602b      	str	r3, [r5, #0]
 80136ee:	b016      	add	sp, #88	@ 0x58
 80136f0:	bd70      	pop	{r4, r5, r6, pc}
 80136f2:	466a      	mov	r2, sp
 80136f4:	f000 f848 	bl	8013788 <_fstat_r>
 80136f8:	2800      	cmp	r0, #0
 80136fa:	dbec      	blt.n	80136d6 <__swhatbuf_r+0x12>
 80136fc:	9901      	ldr	r1, [sp, #4]
 80136fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013702:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013706:	4259      	negs	r1, r3
 8013708:	4159      	adcs	r1, r3
 801370a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801370e:	e7eb      	b.n	80136e8 <__swhatbuf_r+0x24>

08013710 <__smakebuf_r>:
 8013710:	898b      	ldrh	r3, [r1, #12]
 8013712:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013714:	079d      	lsls	r5, r3, #30
 8013716:	4606      	mov	r6, r0
 8013718:	460c      	mov	r4, r1
 801371a:	d507      	bpl.n	801372c <__smakebuf_r+0x1c>
 801371c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013720:	6023      	str	r3, [r4, #0]
 8013722:	6123      	str	r3, [r4, #16]
 8013724:	2301      	movs	r3, #1
 8013726:	6163      	str	r3, [r4, #20]
 8013728:	b003      	add	sp, #12
 801372a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801372c:	ab01      	add	r3, sp, #4
 801372e:	466a      	mov	r2, sp
 8013730:	f7ff ffc8 	bl	80136c4 <__swhatbuf_r>
 8013734:	9f00      	ldr	r7, [sp, #0]
 8013736:	4605      	mov	r5, r0
 8013738:	4639      	mov	r1, r7
 801373a:	4630      	mov	r0, r6
 801373c:	f7fe fd22 	bl	8012184 <_malloc_r>
 8013740:	b948      	cbnz	r0, 8013756 <__smakebuf_r+0x46>
 8013742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013746:	059a      	lsls	r2, r3, #22
 8013748:	d4ee      	bmi.n	8013728 <__smakebuf_r+0x18>
 801374a:	f023 0303 	bic.w	r3, r3, #3
 801374e:	f043 0302 	orr.w	r3, r3, #2
 8013752:	81a3      	strh	r3, [r4, #12]
 8013754:	e7e2      	b.n	801371c <__smakebuf_r+0xc>
 8013756:	89a3      	ldrh	r3, [r4, #12]
 8013758:	6020      	str	r0, [r4, #0]
 801375a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801375e:	81a3      	strh	r3, [r4, #12]
 8013760:	9b01      	ldr	r3, [sp, #4]
 8013762:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013766:	b15b      	cbz	r3, 8013780 <__smakebuf_r+0x70>
 8013768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801376c:	4630      	mov	r0, r6
 801376e:	f000 f81d 	bl	80137ac <_isatty_r>
 8013772:	b128      	cbz	r0, 8013780 <__smakebuf_r+0x70>
 8013774:	89a3      	ldrh	r3, [r4, #12]
 8013776:	f023 0303 	bic.w	r3, r3, #3
 801377a:	f043 0301 	orr.w	r3, r3, #1
 801377e:	81a3      	strh	r3, [r4, #12]
 8013780:	89a3      	ldrh	r3, [r4, #12]
 8013782:	431d      	orrs	r5, r3
 8013784:	81a5      	strh	r5, [r4, #12]
 8013786:	e7cf      	b.n	8013728 <__smakebuf_r+0x18>

08013788 <_fstat_r>:
 8013788:	b538      	push	{r3, r4, r5, lr}
 801378a:	4d07      	ldr	r5, [pc, #28]	@ (80137a8 <_fstat_r+0x20>)
 801378c:	2300      	movs	r3, #0
 801378e:	4604      	mov	r4, r0
 8013790:	4608      	mov	r0, r1
 8013792:	4611      	mov	r1, r2
 8013794:	602b      	str	r3, [r5, #0]
 8013796:	f7ee fb8b 	bl	8001eb0 <_fstat>
 801379a:	1c43      	adds	r3, r0, #1
 801379c:	d102      	bne.n	80137a4 <_fstat_r+0x1c>
 801379e:	682b      	ldr	r3, [r5, #0]
 80137a0:	b103      	cbz	r3, 80137a4 <_fstat_r+0x1c>
 80137a2:	6023      	str	r3, [r4, #0]
 80137a4:	bd38      	pop	{r3, r4, r5, pc}
 80137a6:	bf00      	nop
 80137a8:	20000e44 	.word	0x20000e44

080137ac <_isatty_r>:
 80137ac:	b538      	push	{r3, r4, r5, lr}
 80137ae:	4d06      	ldr	r5, [pc, #24]	@ (80137c8 <_isatty_r+0x1c>)
 80137b0:	2300      	movs	r3, #0
 80137b2:	4604      	mov	r4, r0
 80137b4:	4608      	mov	r0, r1
 80137b6:	602b      	str	r3, [r5, #0]
 80137b8:	f7ee fb8a 	bl	8001ed0 <_isatty>
 80137bc:	1c43      	adds	r3, r0, #1
 80137be:	d102      	bne.n	80137c6 <_isatty_r+0x1a>
 80137c0:	682b      	ldr	r3, [r5, #0]
 80137c2:	b103      	cbz	r3, 80137c6 <_isatty_r+0x1a>
 80137c4:	6023      	str	r3, [r4, #0]
 80137c6:	bd38      	pop	{r3, r4, r5, pc}
 80137c8:	20000e44 	.word	0x20000e44

080137cc <asin>:
 80137cc:	b538      	push	{r3, r4, r5, lr}
 80137ce:	ed2d 8b02 	vpush	{d8}
 80137d2:	ec55 4b10 	vmov	r4, r5, d0
 80137d6:	f000 f96b 	bl	8013ab0 <__ieee754_asin>
 80137da:	4622      	mov	r2, r4
 80137dc:	462b      	mov	r3, r5
 80137de:	4620      	mov	r0, r4
 80137e0:	4629      	mov	r1, r5
 80137e2:	eeb0 8a40 	vmov.f32	s16, s0
 80137e6:	eef0 8a60 	vmov.f32	s17, s1
 80137ea:	f7ed f9c7 	bl	8000b7c <__aeabi_dcmpun>
 80137ee:	b9a8      	cbnz	r0, 801381c <asin+0x50>
 80137f0:	ec45 4b10 	vmov	d0, r4, r5
 80137f4:	f000 f87a 	bl	80138ec <fabs>
 80137f8:	4b0c      	ldr	r3, [pc, #48]	@ (801382c <asin+0x60>)
 80137fa:	ec51 0b10 	vmov	r0, r1, d0
 80137fe:	2200      	movs	r2, #0
 8013800:	f7ed f9b2 	bl	8000b68 <__aeabi_dcmpgt>
 8013804:	b150      	cbz	r0, 801381c <asin+0x50>
 8013806:	f7fd fa77 	bl	8010cf8 <__errno>
 801380a:	ecbd 8b02 	vpop	{d8}
 801380e:	2321      	movs	r3, #33	@ 0x21
 8013810:	6003      	str	r3, [r0, #0]
 8013812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013816:	4806      	ldr	r0, [pc, #24]	@ (8013830 <asin+0x64>)
 8013818:	f7fd baaa 	b.w	8010d70 <nan>
 801381c:	eeb0 0a48 	vmov.f32	s0, s16
 8013820:	eef0 0a68 	vmov.f32	s1, s17
 8013824:	ecbd 8b02 	vpop	{d8}
 8013828:	bd38      	pop	{r3, r4, r5, pc}
 801382a:	bf00      	nop
 801382c:	3ff00000 	.word	0x3ff00000
 8013830:	08014b8d 	.word	0x08014b8d

08013834 <atan2>:
 8013834:	f000 bb40 	b.w	8013eb8 <__ieee754_atan2>

08013838 <fmod>:
 8013838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801383a:	ed2d 8b02 	vpush	{d8}
 801383e:	ec57 6b10 	vmov	r6, r7, d0
 8013842:	ec55 4b11 	vmov	r4, r5, d1
 8013846:	f000 fbfd 	bl	8014044 <__ieee754_fmod>
 801384a:	4622      	mov	r2, r4
 801384c:	462b      	mov	r3, r5
 801384e:	4630      	mov	r0, r6
 8013850:	4639      	mov	r1, r7
 8013852:	eeb0 8a40 	vmov.f32	s16, s0
 8013856:	eef0 8a60 	vmov.f32	s17, s1
 801385a:	f7ed f98f 	bl	8000b7c <__aeabi_dcmpun>
 801385e:	b990      	cbnz	r0, 8013886 <fmod+0x4e>
 8013860:	2200      	movs	r2, #0
 8013862:	2300      	movs	r3, #0
 8013864:	4620      	mov	r0, r4
 8013866:	4629      	mov	r1, r5
 8013868:	f7ed f956 	bl	8000b18 <__aeabi_dcmpeq>
 801386c:	b158      	cbz	r0, 8013886 <fmod+0x4e>
 801386e:	f7fd fa43 	bl	8010cf8 <__errno>
 8013872:	2321      	movs	r3, #33	@ 0x21
 8013874:	6003      	str	r3, [r0, #0]
 8013876:	2200      	movs	r2, #0
 8013878:	2300      	movs	r3, #0
 801387a:	4610      	mov	r0, r2
 801387c:	4619      	mov	r1, r3
 801387e:	f7ed f80d 	bl	800089c <__aeabi_ddiv>
 8013882:	ec41 0b18 	vmov	d8, r0, r1
 8013886:	eeb0 0a48 	vmov.f32	s0, s16
 801388a:	eef0 0a68 	vmov.f32	s1, s17
 801388e:	ecbd 8b02 	vpop	{d8}
 8013892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013894 <sqrt>:
 8013894:	b538      	push	{r3, r4, r5, lr}
 8013896:	ed2d 8b02 	vpush	{d8}
 801389a:	ec55 4b10 	vmov	r4, r5, d0
 801389e:	f000 f82d 	bl	80138fc <__ieee754_sqrt>
 80138a2:	4622      	mov	r2, r4
 80138a4:	462b      	mov	r3, r5
 80138a6:	4620      	mov	r0, r4
 80138a8:	4629      	mov	r1, r5
 80138aa:	eeb0 8a40 	vmov.f32	s16, s0
 80138ae:	eef0 8a60 	vmov.f32	s17, s1
 80138b2:	f7ed f963 	bl	8000b7c <__aeabi_dcmpun>
 80138b6:	b990      	cbnz	r0, 80138de <sqrt+0x4a>
 80138b8:	2200      	movs	r2, #0
 80138ba:	2300      	movs	r3, #0
 80138bc:	4620      	mov	r0, r4
 80138be:	4629      	mov	r1, r5
 80138c0:	f7ed f934 	bl	8000b2c <__aeabi_dcmplt>
 80138c4:	b158      	cbz	r0, 80138de <sqrt+0x4a>
 80138c6:	f7fd fa17 	bl	8010cf8 <__errno>
 80138ca:	2321      	movs	r3, #33	@ 0x21
 80138cc:	6003      	str	r3, [r0, #0]
 80138ce:	2200      	movs	r2, #0
 80138d0:	2300      	movs	r3, #0
 80138d2:	4610      	mov	r0, r2
 80138d4:	4619      	mov	r1, r3
 80138d6:	f7ec ffe1 	bl	800089c <__aeabi_ddiv>
 80138da:	ec41 0b18 	vmov	d8, r0, r1
 80138de:	eeb0 0a48 	vmov.f32	s0, s16
 80138e2:	eef0 0a68 	vmov.f32	s1, s17
 80138e6:	ecbd 8b02 	vpop	{d8}
 80138ea:	bd38      	pop	{r3, r4, r5, pc}

080138ec <fabs>:
 80138ec:	ec51 0b10 	vmov	r0, r1, d0
 80138f0:	4602      	mov	r2, r0
 80138f2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80138f6:	ec43 2b10 	vmov	d0, r2, r3
 80138fa:	4770      	bx	lr

080138fc <__ieee754_sqrt>:
 80138fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013900:	4a68      	ldr	r2, [pc, #416]	@ (8013aa4 <__ieee754_sqrt+0x1a8>)
 8013902:	ec55 4b10 	vmov	r4, r5, d0
 8013906:	43aa      	bics	r2, r5
 8013908:	462b      	mov	r3, r5
 801390a:	4621      	mov	r1, r4
 801390c:	d110      	bne.n	8013930 <__ieee754_sqrt+0x34>
 801390e:	4622      	mov	r2, r4
 8013910:	4620      	mov	r0, r4
 8013912:	4629      	mov	r1, r5
 8013914:	f7ec fe98 	bl	8000648 <__aeabi_dmul>
 8013918:	4602      	mov	r2, r0
 801391a:	460b      	mov	r3, r1
 801391c:	4620      	mov	r0, r4
 801391e:	4629      	mov	r1, r5
 8013920:	f7ec fcdc 	bl	80002dc <__adddf3>
 8013924:	4604      	mov	r4, r0
 8013926:	460d      	mov	r5, r1
 8013928:	ec45 4b10 	vmov	d0, r4, r5
 801392c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013930:	2d00      	cmp	r5, #0
 8013932:	dc0e      	bgt.n	8013952 <__ieee754_sqrt+0x56>
 8013934:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8013938:	4322      	orrs	r2, r4
 801393a:	d0f5      	beq.n	8013928 <__ieee754_sqrt+0x2c>
 801393c:	b19d      	cbz	r5, 8013966 <__ieee754_sqrt+0x6a>
 801393e:	4622      	mov	r2, r4
 8013940:	4620      	mov	r0, r4
 8013942:	4629      	mov	r1, r5
 8013944:	f7ec fcc8 	bl	80002d8 <__aeabi_dsub>
 8013948:	4602      	mov	r2, r0
 801394a:	460b      	mov	r3, r1
 801394c:	f7ec ffa6 	bl	800089c <__aeabi_ddiv>
 8013950:	e7e8      	b.n	8013924 <__ieee754_sqrt+0x28>
 8013952:	152a      	asrs	r2, r5, #20
 8013954:	d115      	bne.n	8013982 <__ieee754_sqrt+0x86>
 8013956:	2000      	movs	r0, #0
 8013958:	e009      	b.n	801396e <__ieee754_sqrt+0x72>
 801395a:	0acb      	lsrs	r3, r1, #11
 801395c:	3a15      	subs	r2, #21
 801395e:	0549      	lsls	r1, r1, #21
 8013960:	2b00      	cmp	r3, #0
 8013962:	d0fa      	beq.n	801395a <__ieee754_sqrt+0x5e>
 8013964:	e7f7      	b.n	8013956 <__ieee754_sqrt+0x5a>
 8013966:	462a      	mov	r2, r5
 8013968:	e7fa      	b.n	8013960 <__ieee754_sqrt+0x64>
 801396a:	005b      	lsls	r3, r3, #1
 801396c:	3001      	adds	r0, #1
 801396e:	02dc      	lsls	r4, r3, #11
 8013970:	d5fb      	bpl.n	801396a <__ieee754_sqrt+0x6e>
 8013972:	1e44      	subs	r4, r0, #1
 8013974:	1b12      	subs	r2, r2, r4
 8013976:	f1c0 0420 	rsb	r4, r0, #32
 801397a:	fa21 f404 	lsr.w	r4, r1, r4
 801397e:	4323      	orrs	r3, r4
 8013980:	4081      	lsls	r1, r0
 8013982:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013986:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801398a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801398e:	07d2      	lsls	r2, r2, #31
 8013990:	bf5c      	itt	pl
 8013992:	005b      	lslpl	r3, r3, #1
 8013994:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8013998:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801399c:	bf58      	it	pl
 801399e:	0049      	lslpl	r1, r1, #1
 80139a0:	2600      	movs	r6, #0
 80139a2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80139a6:	106d      	asrs	r5, r5, #1
 80139a8:	0049      	lsls	r1, r1, #1
 80139aa:	2016      	movs	r0, #22
 80139ac:	4632      	mov	r2, r6
 80139ae:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80139b2:	1917      	adds	r7, r2, r4
 80139b4:	429f      	cmp	r7, r3
 80139b6:	bfde      	ittt	le
 80139b8:	193a      	addle	r2, r7, r4
 80139ba:	1bdb      	suble	r3, r3, r7
 80139bc:	1936      	addle	r6, r6, r4
 80139be:	0fcf      	lsrs	r7, r1, #31
 80139c0:	3801      	subs	r0, #1
 80139c2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80139c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80139ca:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80139ce:	d1f0      	bne.n	80139b2 <__ieee754_sqrt+0xb6>
 80139d0:	4604      	mov	r4, r0
 80139d2:	2720      	movs	r7, #32
 80139d4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80139d8:	429a      	cmp	r2, r3
 80139da:	eb00 0e0c 	add.w	lr, r0, ip
 80139de:	db02      	blt.n	80139e6 <__ieee754_sqrt+0xea>
 80139e0:	d113      	bne.n	8013a0a <__ieee754_sqrt+0x10e>
 80139e2:	458e      	cmp	lr, r1
 80139e4:	d811      	bhi.n	8013a0a <__ieee754_sqrt+0x10e>
 80139e6:	f1be 0f00 	cmp.w	lr, #0
 80139ea:	eb0e 000c 	add.w	r0, lr, ip
 80139ee:	da42      	bge.n	8013a76 <__ieee754_sqrt+0x17a>
 80139f0:	2800      	cmp	r0, #0
 80139f2:	db40      	blt.n	8013a76 <__ieee754_sqrt+0x17a>
 80139f4:	f102 0801 	add.w	r8, r2, #1
 80139f8:	1a9b      	subs	r3, r3, r2
 80139fa:	458e      	cmp	lr, r1
 80139fc:	bf88      	it	hi
 80139fe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013a02:	eba1 010e 	sub.w	r1, r1, lr
 8013a06:	4464      	add	r4, ip
 8013a08:	4642      	mov	r2, r8
 8013a0a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8013a0e:	3f01      	subs	r7, #1
 8013a10:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8013a14:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013a18:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013a1c:	d1dc      	bne.n	80139d8 <__ieee754_sqrt+0xdc>
 8013a1e:	4319      	orrs	r1, r3
 8013a20:	d01b      	beq.n	8013a5a <__ieee754_sqrt+0x15e>
 8013a22:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8013aa8 <__ieee754_sqrt+0x1ac>
 8013a26:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8013aac <__ieee754_sqrt+0x1b0>
 8013a2a:	e9da 0100 	ldrd	r0, r1, [sl]
 8013a2e:	e9db 2300 	ldrd	r2, r3, [fp]
 8013a32:	f7ec fc51 	bl	80002d8 <__aeabi_dsub>
 8013a36:	e9da 8900 	ldrd	r8, r9, [sl]
 8013a3a:	4602      	mov	r2, r0
 8013a3c:	460b      	mov	r3, r1
 8013a3e:	4640      	mov	r0, r8
 8013a40:	4649      	mov	r1, r9
 8013a42:	f7ed f87d 	bl	8000b40 <__aeabi_dcmple>
 8013a46:	b140      	cbz	r0, 8013a5a <__ieee754_sqrt+0x15e>
 8013a48:	f1b4 3fff 	cmp.w	r4, #4294967295
 8013a4c:	e9da 0100 	ldrd	r0, r1, [sl]
 8013a50:	e9db 2300 	ldrd	r2, r3, [fp]
 8013a54:	d111      	bne.n	8013a7a <__ieee754_sqrt+0x17e>
 8013a56:	3601      	adds	r6, #1
 8013a58:	463c      	mov	r4, r7
 8013a5a:	1072      	asrs	r2, r6, #1
 8013a5c:	0863      	lsrs	r3, r4, #1
 8013a5e:	07f1      	lsls	r1, r6, #31
 8013a60:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8013a64:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8013a68:	bf48      	it	mi
 8013a6a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8013a6e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8013a72:	4618      	mov	r0, r3
 8013a74:	e756      	b.n	8013924 <__ieee754_sqrt+0x28>
 8013a76:	4690      	mov	r8, r2
 8013a78:	e7be      	b.n	80139f8 <__ieee754_sqrt+0xfc>
 8013a7a:	f7ec fc2f 	bl	80002dc <__adddf3>
 8013a7e:	e9da 8900 	ldrd	r8, r9, [sl]
 8013a82:	4602      	mov	r2, r0
 8013a84:	460b      	mov	r3, r1
 8013a86:	4640      	mov	r0, r8
 8013a88:	4649      	mov	r1, r9
 8013a8a:	f7ed f84f 	bl	8000b2c <__aeabi_dcmplt>
 8013a8e:	b120      	cbz	r0, 8013a9a <__ieee754_sqrt+0x19e>
 8013a90:	1ca0      	adds	r0, r4, #2
 8013a92:	bf08      	it	eq
 8013a94:	3601      	addeq	r6, #1
 8013a96:	3402      	adds	r4, #2
 8013a98:	e7df      	b.n	8013a5a <__ieee754_sqrt+0x15e>
 8013a9a:	1c63      	adds	r3, r4, #1
 8013a9c:	f023 0401 	bic.w	r4, r3, #1
 8013aa0:	e7db      	b.n	8013a5a <__ieee754_sqrt+0x15e>
 8013aa2:	bf00      	nop
 8013aa4:	7ff00000 	.word	0x7ff00000
 8013aa8:	200002a0 	.word	0x200002a0
 8013aac:	20000298 	.word	0x20000298

08013ab0 <__ieee754_asin>:
 8013ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ab4:	ec55 4b10 	vmov	r4, r5, d0
 8013ab8:	4bc7      	ldr	r3, [pc, #796]	@ (8013dd8 <__ieee754_asin+0x328>)
 8013aba:	b087      	sub	sp, #28
 8013abc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8013ac0:	429e      	cmp	r6, r3
 8013ac2:	9501      	str	r5, [sp, #4]
 8013ac4:	d92d      	bls.n	8013b22 <__ieee754_asin+0x72>
 8013ac6:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8013aca:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8013ace:	4326      	orrs	r6, r4
 8013ad0:	d116      	bne.n	8013b00 <__ieee754_asin+0x50>
 8013ad2:	a3a7      	add	r3, pc, #668	@ (adr r3, 8013d70 <__ieee754_asin+0x2c0>)
 8013ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ad8:	4620      	mov	r0, r4
 8013ada:	4629      	mov	r1, r5
 8013adc:	f7ec fdb4 	bl	8000648 <__aeabi_dmul>
 8013ae0:	a3a5      	add	r3, pc, #660	@ (adr r3, 8013d78 <__ieee754_asin+0x2c8>)
 8013ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ae6:	4606      	mov	r6, r0
 8013ae8:	460f      	mov	r7, r1
 8013aea:	4620      	mov	r0, r4
 8013aec:	4629      	mov	r1, r5
 8013aee:	f7ec fdab 	bl	8000648 <__aeabi_dmul>
 8013af2:	4602      	mov	r2, r0
 8013af4:	460b      	mov	r3, r1
 8013af6:	4630      	mov	r0, r6
 8013af8:	4639      	mov	r1, r7
 8013afa:	f7ec fbef 	bl	80002dc <__adddf3>
 8013afe:	e009      	b.n	8013b14 <__ieee754_asin+0x64>
 8013b00:	4622      	mov	r2, r4
 8013b02:	462b      	mov	r3, r5
 8013b04:	4620      	mov	r0, r4
 8013b06:	4629      	mov	r1, r5
 8013b08:	f7ec fbe6 	bl	80002d8 <__aeabi_dsub>
 8013b0c:	4602      	mov	r2, r0
 8013b0e:	460b      	mov	r3, r1
 8013b10:	f7ec fec4 	bl	800089c <__aeabi_ddiv>
 8013b14:	4604      	mov	r4, r0
 8013b16:	460d      	mov	r5, r1
 8013b18:	ec45 4b10 	vmov	d0, r4, r5
 8013b1c:	b007      	add	sp, #28
 8013b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b22:	4bae      	ldr	r3, [pc, #696]	@ (8013ddc <__ieee754_asin+0x32c>)
 8013b24:	429e      	cmp	r6, r3
 8013b26:	d810      	bhi.n	8013b4a <__ieee754_asin+0x9a>
 8013b28:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8013b2c:	f080 80ad 	bcs.w	8013c8a <__ieee754_asin+0x1da>
 8013b30:	a393      	add	r3, pc, #588	@ (adr r3, 8013d80 <__ieee754_asin+0x2d0>)
 8013b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b36:	4620      	mov	r0, r4
 8013b38:	4629      	mov	r1, r5
 8013b3a:	f7ec fbcf 	bl	80002dc <__adddf3>
 8013b3e:	4ba8      	ldr	r3, [pc, #672]	@ (8013de0 <__ieee754_asin+0x330>)
 8013b40:	2200      	movs	r2, #0
 8013b42:	f7ed f811 	bl	8000b68 <__aeabi_dcmpgt>
 8013b46:	2800      	cmp	r0, #0
 8013b48:	d1e6      	bne.n	8013b18 <__ieee754_asin+0x68>
 8013b4a:	ec45 4b10 	vmov	d0, r4, r5
 8013b4e:	f7ff fecd 	bl	80138ec <fabs>
 8013b52:	49a3      	ldr	r1, [pc, #652]	@ (8013de0 <__ieee754_asin+0x330>)
 8013b54:	ec53 2b10 	vmov	r2, r3, d0
 8013b58:	2000      	movs	r0, #0
 8013b5a:	f7ec fbbd 	bl	80002d8 <__aeabi_dsub>
 8013b5e:	4ba1      	ldr	r3, [pc, #644]	@ (8013de4 <__ieee754_asin+0x334>)
 8013b60:	2200      	movs	r2, #0
 8013b62:	f7ec fd71 	bl	8000648 <__aeabi_dmul>
 8013b66:	a388      	add	r3, pc, #544	@ (adr r3, 8013d88 <__ieee754_asin+0x2d8>)
 8013b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b6c:	4604      	mov	r4, r0
 8013b6e:	460d      	mov	r5, r1
 8013b70:	f7ec fd6a 	bl	8000648 <__aeabi_dmul>
 8013b74:	a386      	add	r3, pc, #536	@ (adr r3, 8013d90 <__ieee754_asin+0x2e0>)
 8013b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b7a:	f7ec fbaf 	bl	80002dc <__adddf3>
 8013b7e:	4622      	mov	r2, r4
 8013b80:	462b      	mov	r3, r5
 8013b82:	f7ec fd61 	bl	8000648 <__aeabi_dmul>
 8013b86:	a384      	add	r3, pc, #528	@ (adr r3, 8013d98 <__ieee754_asin+0x2e8>)
 8013b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b8c:	f7ec fba4 	bl	80002d8 <__aeabi_dsub>
 8013b90:	4622      	mov	r2, r4
 8013b92:	462b      	mov	r3, r5
 8013b94:	f7ec fd58 	bl	8000648 <__aeabi_dmul>
 8013b98:	a381      	add	r3, pc, #516	@ (adr r3, 8013da0 <__ieee754_asin+0x2f0>)
 8013b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b9e:	f7ec fb9d 	bl	80002dc <__adddf3>
 8013ba2:	4622      	mov	r2, r4
 8013ba4:	462b      	mov	r3, r5
 8013ba6:	f7ec fd4f 	bl	8000648 <__aeabi_dmul>
 8013baa:	a37f      	add	r3, pc, #508	@ (adr r3, 8013da8 <__ieee754_asin+0x2f8>)
 8013bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bb0:	f7ec fb92 	bl	80002d8 <__aeabi_dsub>
 8013bb4:	4622      	mov	r2, r4
 8013bb6:	462b      	mov	r3, r5
 8013bb8:	f7ec fd46 	bl	8000648 <__aeabi_dmul>
 8013bbc:	a37c      	add	r3, pc, #496	@ (adr r3, 8013db0 <__ieee754_asin+0x300>)
 8013bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bc2:	f7ec fb8b 	bl	80002dc <__adddf3>
 8013bc6:	4622      	mov	r2, r4
 8013bc8:	462b      	mov	r3, r5
 8013bca:	f7ec fd3d 	bl	8000648 <__aeabi_dmul>
 8013bce:	a37a      	add	r3, pc, #488	@ (adr r3, 8013db8 <__ieee754_asin+0x308>)
 8013bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013bd8:	4620      	mov	r0, r4
 8013bda:	4629      	mov	r1, r5
 8013bdc:	f7ec fd34 	bl	8000648 <__aeabi_dmul>
 8013be0:	a377      	add	r3, pc, #476	@ (adr r3, 8013dc0 <__ieee754_asin+0x310>)
 8013be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013be6:	f7ec fb77 	bl	80002d8 <__aeabi_dsub>
 8013bea:	4622      	mov	r2, r4
 8013bec:	462b      	mov	r3, r5
 8013bee:	f7ec fd2b 	bl	8000648 <__aeabi_dmul>
 8013bf2:	a375      	add	r3, pc, #468	@ (adr r3, 8013dc8 <__ieee754_asin+0x318>)
 8013bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bf8:	f7ec fb70 	bl	80002dc <__adddf3>
 8013bfc:	4622      	mov	r2, r4
 8013bfe:	462b      	mov	r3, r5
 8013c00:	f7ec fd22 	bl	8000648 <__aeabi_dmul>
 8013c04:	a372      	add	r3, pc, #456	@ (adr r3, 8013dd0 <__ieee754_asin+0x320>)
 8013c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c0a:	f7ec fb65 	bl	80002d8 <__aeabi_dsub>
 8013c0e:	4622      	mov	r2, r4
 8013c10:	462b      	mov	r3, r5
 8013c12:	f7ec fd19 	bl	8000648 <__aeabi_dmul>
 8013c16:	4b72      	ldr	r3, [pc, #456]	@ (8013de0 <__ieee754_asin+0x330>)
 8013c18:	2200      	movs	r2, #0
 8013c1a:	f7ec fb5f 	bl	80002dc <__adddf3>
 8013c1e:	ec45 4b10 	vmov	d0, r4, r5
 8013c22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013c26:	f7ff fe69 	bl	80138fc <__ieee754_sqrt>
 8013c2a:	4b6f      	ldr	r3, [pc, #444]	@ (8013de8 <__ieee754_asin+0x338>)
 8013c2c:	429e      	cmp	r6, r3
 8013c2e:	ec5b ab10 	vmov	sl, fp, d0
 8013c32:	f240 80db 	bls.w	8013dec <__ieee754_asin+0x33c>
 8013c36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013c3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c3e:	f7ec fe2d 	bl	800089c <__aeabi_ddiv>
 8013c42:	4652      	mov	r2, sl
 8013c44:	465b      	mov	r3, fp
 8013c46:	f7ec fcff 	bl	8000648 <__aeabi_dmul>
 8013c4a:	4652      	mov	r2, sl
 8013c4c:	465b      	mov	r3, fp
 8013c4e:	f7ec fb45 	bl	80002dc <__adddf3>
 8013c52:	4602      	mov	r2, r0
 8013c54:	460b      	mov	r3, r1
 8013c56:	f7ec fb41 	bl	80002dc <__adddf3>
 8013c5a:	a347      	add	r3, pc, #284	@ (adr r3, 8013d78 <__ieee754_asin+0x2c8>)
 8013c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c60:	f7ec fb3a 	bl	80002d8 <__aeabi_dsub>
 8013c64:	4602      	mov	r2, r0
 8013c66:	460b      	mov	r3, r1
 8013c68:	a141      	add	r1, pc, #260	@ (adr r1, 8013d70 <__ieee754_asin+0x2c0>)
 8013c6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c6e:	f7ec fb33 	bl	80002d8 <__aeabi_dsub>
 8013c72:	9b01      	ldr	r3, [sp, #4]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	bfdc      	itt	le
 8013c78:	4602      	movle	r2, r0
 8013c7a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8013c7e:	4604      	mov	r4, r0
 8013c80:	460d      	mov	r5, r1
 8013c82:	bfdc      	itt	le
 8013c84:	4614      	movle	r4, r2
 8013c86:	461d      	movle	r5, r3
 8013c88:	e746      	b.n	8013b18 <__ieee754_asin+0x68>
 8013c8a:	4622      	mov	r2, r4
 8013c8c:	462b      	mov	r3, r5
 8013c8e:	4620      	mov	r0, r4
 8013c90:	4629      	mov	r1, r5
 8013c92:	f7ec fcd9 	bl	8000648 <__aeabi_dmul>
 8013c96:	a33c      	add	r3, pc, #240	@ (adr r3, 8013d88 <__ieee754_asin+0x2d8>)
 8013c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c9c:	4606      	mov	r6, r0
 8013c9e:	460f      	mov	r7, r1
 8013ca0:	f7ec fcd2 	bl	8000648 <__aeabi_dmul>
 8013ca4:	a33a      	add	r3, pc, #232	@ (adr r3, 8013d90 <__ieee754_asin+0x2e0>)
 8013ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013caa:	f7ec fb17 	bl	80002dc <__adddf3>
 8013cae:	4632      	mov	r2, r6
 8013cb0:	463b      	mov	r3, r7
 8013cb2:	f7ec fcc9 	bl	8000648 <__aeabi_dmul>
 8013cb6:	a338      	add	r3, pc, #224	@ (adr r3, 8013d98 <__ieee754_asin+0x2e8>)
 8013cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cbc:	f7ec fb0c 	bl	80002d8 <__aeabi_dsub>
 8013cc0:	4632      	mov	r2, r6
 8013cc2:	463b      	mov	r3, r7
 8013cc4:	f7ec fcc0 	bl	8000648 <__aeabi_dmul>
 8013cc8:	a335      	add	r3, pc, #212	@ (adr r3, 8013da0 <__ieee754_asin+0x2f0>)
 8013cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cce:	f7ec fb05 	bl	80002dc <__adddf3>
 8013cd2:	4632      	mov	r2, r6
 8013cd4:	463b      	mov	r3, r7
 8013cd6:	f7ec fcb7 	bl	8000648 <__aeabi_dmul>
 8013cda:	a333      	add	r3, pc, #204	@ (adr r3, 8013da8 <__ieee754_asin+0x2f8>)
 8013cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ce0:	f7ec fafa 	bl	80002d8 <__aeabi_dsub>
 8013ce4:	4632      	mov	r2, r6
 8013ce6:	463b      	mov	r3, r7
 8013ce8:	f7ec fcae 	bl	8000648 <__aeabi_dmul>
 8013cec:	a330      	add	r3, pc, #192	@ (adr r3, 8013db0 <__ieee754_asin+0x300>)
 8013cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cf2:	f7ec faf3 	bl	80002dc <__adddf3>
 8013cf6:	4632      	mov	r2, r6
 8013cf8:	463b      	mov	r3, r7
 8013cfa:	f7ec fca5 	bl	8000648 <__aeabi_dmul>
 8013cfe:	a32e      	add	r3, pc, #184	@ (adr r3, 8013db8 <__ieee754_asin+0x308>)
 8013d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d04:	4680      	mov	r8, r0
 8013d06:	4689      	mov	r9, r1
 8013d08:	4630      	mov	r0, r6
 8013d0a:	4639      	mov	r1, r7
 8013d0c:	f7ec fc9c 	bl	8000648 <__aeabi_dmul>
 8013d10:	a32b      	add	r3, pc, #172	@ (adr r3, 8013dc0 <__ieee754_asin+0x310>)
 8013d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d16:	f7ec fadf 	bl	80002d8 <__aeabi_dsub>
 8013d1a:	4632      	mov	r2, r6
 8013d1c:	463b      	mov	r3, r7
 8013d1e:	f7ec fc93 	bl	8000648 <__aeabi_dmul>
 8013d22:	a329      	add	r3, pc, #164	@ (adr r3, 8013dc8 <__ieee754_asin+0x318>)
 8013d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d28:	f7ec fad8 	bl	80002dc <__adddf3>
 8013d2c:	4632      	mov	r2, r6
 8013d2e:	463b      	mov	r3, r7
 8013d30:	f7ec fc8a 	bl	8000648 <__aeabi_dmul>
 8013d34:	a326      	add	r3, pc, #152	@ (adr r3, 8013dd0 <__ieee754_asin+0x320>)
 8013d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d3a:	f7ec facd 	bl	80002d8 <__aeabi_dsub>
 8013d3e:	4632      	mov	r2, r6
 8013d40:	463b      	mov	r3, r7
 8013d42:	f7ec fc81 	bl	8000648 <__aeabi_dmul>
 8013d46:	4b26      	ldr	r3, [pc, #152]	@ (8013de0 <__ieee754_asin+0x330>)
 8013d48:	2200      	movs	r2, #0
 8013d4a:	f7ec fac7 	bl	80002dc <__adddf3>
 8013d4e:	4602      	mov	r2, r0
 8013d50:	460b      	mov	r3, r1
 8013d52:	4640      	mov	r0, r8
 8013d54:	4649      	mov	r1, r9
 8013d56:	f7ec fda1 	bl	800089c <__aeabi_ddiv>
 8013d5a:	4622      	mov	r2, r4
 8013d5c:	462b      	mov	r3, r5
 8013d5e:	f7ec fc73 	bl	8000648 <__aeabi_dmul>
 8013d62:	4602      	mov	r2, r0
 8013d64:	460b      	mov	r3, r1
 8013d66:	4620      	mov	r0, r4
 8013d68:	4629      	mov	r1, r5
 8013d6a:	e6c6      	b.n	8013afa <__ieee754_asin+0x4a>
 8013d6c:	f3af 8000 	nop.w
 8013d70:	54442d18 	.word	0x54442d18
 8013d74:	3ff921fb 	.word	0x3ff921fb
 8013d78:	33145c07 	.word	0x33145c07
 8013d7c:	3c91a626 	.word	0x3c91a626
 8013d80:	8800759c 	.word	0x8800759c
 8013d84:	7e37e43c 	.word	0x7e37e43c
 8013d88:	0dfdf709 	.word	0x0dfdf709
 8013d8c:	3f023de1 	.word	0x3f023de1
 8013d90:	7501b288 	.word	0x7501b288
 8013d94:	3f49efe0 	.word	0x3f49efe0
 8013d98:	b5688f3b 	.word	0xb5688f3b
 8013d9c:	3fa48228 	.word	0x3fa48228
 8013da0:	0e884455 	.word	0x0e884455
 8013da4:	3fc9c155 	.word	0x3fc9c155
 8013da8:	03eb6f7d 	.word	0x03eb6f7d
 8013dac:	3fd4d612 	.word	0x3fd4d612
 8013db0:	55555555 	.word	0x55555555
 8013db4:	3fc55555 	.word	0x3fc55555
 8013db8:	b12e9282 	.word	0xb12e9282
 8013dbc:	3fb3b8c5 	.word	0x3fb3b8c5
 8013dc0:	1b8d0159 	.word	0x1b8d0159
 8013dc4:	3fe6066c 	.word	0x3fe6066c
 8013dc8:	9c598ac8 	.word	0x9c598ac8
 8013dcc:	40002ae5 	.word	0x40002ae5
 8013dd0:	1c8a2d4b 	.word	0x1c8a2d4b
 8013dd4:	40033a27 	.word	0x40033a27
 8013dd8:	3fefffff 	.word	0x3fefffff
 8013ddc:	3fdfffff 	.word	0x3fdfffff
 8013de0:	3ff00000 	.word	0x3ff00000
 8013de4:	3fe00000 	.word	0x3fe00000
 8013de8:	3fef3332 	.word	0x3fef3332
 8013dec:	4652      	mov	r2, sl
 8013dee:	465b      	mov	r3, fp
 8013df0:	4650      	mov	r0, sl
 8013df2:	4659      	mov	r1, fp
 8013df4:	f7ec fa72 	bl	80002dc <__adddf3>
 8013df8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013dfc:	4606      	mov	r6, r0
 8013dfe:	460f      	mov	r7, r1
 8013e00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e04:	f7ec fd4a 	bl	800089c <__aeabi_ddiv>
 8013e08:	4602      	mov	r2, r0
 8013e0a:	460b      	mov	r3, r1
 8013e0c:	4630      	mov	r0, r6
 8013e0e:	4639      	mov	r1, r7
 8013e10:	f7ec fc1a 	bl	8000648 <__aeabi_dmul>
 8013e14:	f04f 0800 	mov.w	r8, #0
 8013e18:	4606      	mov	r6, r0
 8013e1a:	460f      	mov	r7, r1
 8013e1c:	4642      	mov	r2, r8
 8013e1e:	465b      	mov	r3, fp
 8013e20:	4640      	mov	r0, r8
 8013e22:	4659      	mov	r1, fp
 8013e24:	f7ec fc10 	bl	8000648 <__aeabi_dmul>
 8013e28:	4602      	mov	r2, r0
 8013e2a:	460b      	mov	r3, r1
 8013e2c:	4620      	mov	r0, r4
 8013e2e:	4629      	mov	r1, r5
 8013e30:	f7ec fa52 	bl	80002d8 <__aeabi_dsub>
 8013e34:	4642      	mov	r2, r8
 8013e36:	4604      	mov	r4, r0
 8013e38:	460d      	mov	r5, r1
 8013e3a:	465b      	mov	r3, fp
 8013e3c:	4650      	mov	r0, sl
 8013e3e:	4659      	mov	r1, fp
 8013e40:	f7ec fa4c 	bl	80002dc <__adddf3>
 8013e44:	4602      	mov	r2, r0
 8013e46:	460b      	mov	r3, r1
 8013e48:	4620      	mov	r0, r4
 8013e4a:	4629      	mov	r1, r5
 8013e4c:	f7ec fd26 	bl	800089c <__aeabi_ddiv>
 8013e50:	4602      	mov	r2, r0
 8013e52:	460b      	mov	r3, r1
 8013e54:	f7ec fa42 	bl	80002dc <__adddf3>
 8013e58:	4602      	mov	r2, r0
 8013e5a:	460b      	mov	r3, r1
 8013e5c:	a112      	add	r1, pc, #72	@ (adr r1, 8013ea8 <__ieee754_asin+0x3f8>)
 8013e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e62:	f7ec fa39 	bl	80002d8 <__aeabi_dsub>
 8013e66:	4602      	mov	r2, r0
 8013e68:	460b      	mov	r3, r1
 8013e6a:	4630      	mov	r0, r6
 8013e6c:	4639      	mov	r1, r7
 8013e6e:	f7ec fa33 	bl	80002d8 <__aeabi_dsub>
 8013e72:	4642      	mov	r2, r8
 8013e74:	4604      	mov	r4, r0
 8013e76:	460d      	mov	r5, r1
 8013e78:	465b      	mov	r3, fp
 8013e7a:	4640      	mov	r0, r8
 8013e7c:	4659      	mov	r1, fp
 8013e7e:	f7ec fa2d 	bl	80002dc <__adddf3>
 8013e82:	4602      	mov	r2, r0
 8013e84:	460b      	mov	r3, r1
 8013e86:	a10a      	add	r1, pc, #40	@ (adr r1, 8013eb0 <__ieee754_asin+0x400>)
 8013e88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e8c:	f7ec fa24 	bl	80002d8 <__aeabi_dsub>
 8013e90:	4602      	mov	r2, r0
 8013e92:	460b      	mov	r3, r1
 8013e94:	4620      	mov	r0, r4
 8013e96:	4629      	mov	r1, r5
 8013e98:	f7ec fa1e 	bl	80002d8 <__aeabi_dsub>
 8013e9c:	4602      	mov	r2, r0
 8013e9e:	460b      	mov	r3, r1
 8013ea0:	a103      	add	r1, pc, #12	@ (adr r1, 8013eb0 <__ieee754_asin+0x400>)
 8013ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ea6:	e6e2      	b.n	8013c6e <__ieee754_asin+0x1be>
 8013ea8:	33145c07 	.word	0x33145c07
 8013eac:	3c91a626 	.word	0x3c91a626
 8013eb0:	54442d18 	.word	0x54442d18
 8013eb4:	3fe921fb 	.word	0x3fe921fb

08013eb8 <__ieee754_atan2>:
 8013eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ebc:	ec57 6b11 	vmov	r6, r7, d1
 8013ec0:	4273      	negs	r3, r6
 8013ec2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8014040 <__ieee754_atan2+0x188>
 8013ec6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8013eca:	4333      	orrs	r3, r6
 8013ecc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013ed0:	4543      	cmp	r3, r8
 8013ed2:	ec51 0b10 	vmov	r0, r1, d0
 8013ed6:	4635      	mov	r5, r6
 8013ed8:	d809      	bhi.n	8013eee <__ieee754_atan2+0x36>
 8013eda:	4244      	negs	r4, r0
 8013edc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013ee0:	4304      	orrs	r4, r0
 8013ee2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8013ee6:	4544      	cmp	r4, r8
 8013ee8:	468e      	mov	lr, r1
 8013eea:	4681      	mov	r9, r0
 8013eec:	d907      	bls.n	8013efe <__ieee754_atan2+0x46>
 8013eee:	4632      	mov	r2, r6
 8013ef0:	463b      	mov	r3, r7
 8013ef2:	f7ec f9f3 	bl	80002dc <__adddf3>
 8013ef6:	ec41 0b10 	vmov	d0, r0, r1
 8013efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013efe:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8013f02:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8013f06:	4334      	orrs	r4, r6
 8013f08:	d103      	bne.n	8013f12 <__ieee754_atan2+0x5a>
 8013f0a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f0e:	f000 b9a3 	b.w	8014258 <atan>
 8013f12:	17bc      	asrs	r4, r7, #30
 8013f14:	f004 0402 	and.w	r4, r4, #2
 8013f18:	ea53 0909 	orrs.w	r9, r3, r9
 8013f1c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013f20:	d107      	bne.n	8013f32 <__ieee754_atan2+0x7a>
 8013f22:	2c02      	cmp	r4, #2
 8013f24:	d05f      	beq.n	8013fe6 <__ieee754_atan2+0x12e>
 8013f26:	2c03      	cmp	r4, #3
 8013f28:	d1e5      	bne.n	8013ef6 <__ieee754_atan2+0x3e>
 8013f2a:	a141      	add	r1, pc, #260	@ (adr r1, 8014030 <__ieee754_atan2+0x178>)
 8013f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f30:	e7e1      	b.n	8013ef6 <__ieee754_atan2+0x3e>
 8013f32:	4315      	orrs	r5, r2
 8013f34:	d106      	bne.n	8013f44 <__ieee754_atan2+0x8c>
 8013f36:	f1be 0f00 	cmp.w	lr, #0
 8013f3a:	da5f      	bge.n	8013ffc <__ieee754_atan2+0x144>
 8013f3c:	a13e      	add	r1, pc, #248	@ (adr r1, 8014038 <__ieee754_atan2+0x180>)
 8013f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f42:	e7d8      	b.n	8013ef6 <__ieee754_atan2+0x3e>
 8013f44:	4542      	cmp	r2, r8
 8013f46:	d10f      	bne.n	8013f68 <__ieee754_atan2+0xb0>
 8013f48:	4293      	cmp	r3, r2
 8013f4a:	f104 34ff 	add.w	r4, r4, #4294967295
 8013f4e:	d107      	bne.n	8013f60 <__ieee754_atan2+0xa8>
 8013f50:	2c02      	cmp	r4, #2
 8013f52:	d84c      	bhi.n	8013fee <__ieee754_atan2+0x136>
 8013f54:	4b34      	ldr	r3, [pc, #208]	@ (8014028 <__ieee754_atan2+0x170>)
 8013f56:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013f5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013f5e:	e7ca      	b.n	8013ef6 <__ieee754_atan2+0x3e>
 8013f60:	2c02      	cmp	r4, #2
 8013f62:	d848      	bhi.n	8013ff6 <__ieee754_atan2+0x13e>
 8013f64:	4b31      	ldr	r3, [pc, #196]	@ (801402c <__ieee754_atan2+0x174>)
 8013f66:	e7f6      	b.n	8013f56 <__ieee754_atan2+0x9e>
 8013f68:	4543      	cmp	r3, r8
 8013f6a:	d0e4      	beq.n	8013f36 <__ieee754_atan2+0x7e>
 8013f6c:	1a9b      	subs	r3, r3, r2
 8013f6e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8013f72:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013f76:	da1e      	bge.n	8013fb6 <__ieee754_atan2+0xfe>
 8013f78:	2f00      	cmp	r7, #0
 8013f7a:	da01      	bge.n	8013f80 <__ieee754_atan2+0xc8>
 8013f7c:	323c      	adds	r2, #60	@ 0x3c
 8013f7e:	db1e      	blt.n	8013fbe <__ieee754_atan2+0x106>
 8013f80:	4632      	mov	r2, r6
 8013f82:	463b      	mov	r3, r7
 8013f84:	f7ec fc8a 	bl	800089c <__aeabi_ddiv>
 8013f88:	ec41 0b10 	vmov	d0, r0, r1
 8013f8c:	f7ff fcae 	bl	80138ec <fabs>
 8013f90:	f000 f962 	bl	8014258 <atan>
 8013f94:	ec51 0b10 	vmov	r0, r1, d0
 8013f98:	2c01      	cmp	r4, #1
 8013f9a:	d013      	beq.n	8013fc4 <__ieee754_atan2+0x10c>
 8013f9c:	2c02      	cmp	r4, #2
 8013f9e:	d015      	beq.n	8013fcc <__ieee754_atan2+0x114>
 8013fa0:	2c00      	cmp	r4, #0
 8013fa2:	d0a8      	beq.n	8013ef6 <__ieee754_atan2+0x3e>
 8013fa4:	a318      	add	r3, pc, #96	@ (adr r3, 8014008 <__ieee754_atan2+0x150>)
 8013fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013faa:	f7ec f995 	bl	80002d8 <__aeabi_dsub>
 8013fae:	a318      	add	r3, pc, #96	@ (adr r3, 8014010 <__ieee754_atan2+0x158>)
 8013fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fb4:	e014      	b.n	8013fe0 <__ieee754_atan2+0x128>
 8013fb6:	a118      	add	r1, pc, #96	@ (adr r1, 8014018 <__ieee754_atan2+0x160>)
 8013fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fbc:	e7ec      	b.n	8013f98 <__ieee754_atan2+0xe0>
 8013fbe:	2000      	movs	r0, #0
 8013fc0:	2100      	movs	r1, #0
 8013fc2:	e7e9      	b.n	8013f98 <__ieee754_atan2+0xe0>
 8013fc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013fc8:	4619      	mov	r1, r3
 8013fca:	e794      	b.n	8013ef6 <__ieee754_atan2+0x3e>
 8013fcc:	a30e      	add	r3, pc, #56	@ (adr r3, 8014008 <__ieee754_atan2+0x150>)
 8013fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fd2:	f7ec f981 	bl	80002d8 <__aeabi_dsub>
 8013fd6:	4602      	mov	r2, r0
 8013fd8:	460b      	mov	r3, r1
 8013fda:	a10d      	add	r1, pc, #52	@ (adr r1, 8014010 <__ieee754_atan2+0x158>)
 8013fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fe0:	f7ec f97a 	bl	80002d8 <__aeabi_dsub>
 8013fe4:	e787      	b.n	8013ef6 <__ieee754_atan2+0x3e>
 8013fe6:	a10a      	add	r1, pc, #40	@ (adr r1, 8014010 <__ieee754_atan2+0x158>)
 8013fe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fec:	e783      	b.n	8013ef6 <__ieee754_atan2+0x3e>
 8013fee:	a10c      	add	r1, pc, #48	@ (adr r1, 8014020 <__ieee754_atan2+0x168>)
 8013ff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ff4:	e77f      	b.n	8013ef6 <__ieee754_atan2+0x3e>
 8013ff6:	2000      	movs	r0, #0
 8013ff8:	2100      	movs	r1, #0
 8013ffa:	e77c      	b.n	8013ef6 <__ieee754_atan2+0x3e>
 8013ffc:	a106      	add	r1, pc, #24	@ (adr r1, 8014018 <__ieee754_atan2+0x160>)
 8013ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014002:	e778      	b.n	8013ef6 <__ieee754_atan2+0x3e>
 8014004:	f3af 8000 	nop.w
 8014008:	33145c07 	.word	0x33145c07
 801400c:	3ca1a626 	.word	0x3ca1a626
 8014010:	54442d18 	.word	0x54442d18
 8014014:	400921fb 	.word	0x400921fb
 8014018:	54442d18 	.word	0x54442d18
 801401c:	3ff921fb 	.word	0x3ff921fb
 8014020:	54442d18 	.word	0x54442d18
 8014024:	3fe921fb 	.word	0x3fe921fb
 8014028:	08014ba8 	.word	0x08014ba8
 801402c:	08014b90 	.word	0x08014b90
 8014030:	54442d18 	.word	0x54442d18
 8014034:	c00921fb 	.word	0xc00921fb
 8014038:	54442d18 	.word	0x54442d18
 801403c:	bff921fb 	.word	0xbff921fb
 8014040:	7ff00000 	.word	0x7ff00000

08014044 <__ieee754_fmod>:
 8014044:	ec53 2b11 	vmov	r2, r3, d1
 8014048:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 801404c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014050:	ea52 040c 	orrs.w	r4, r2, ip
 8014054:	ec51 0b10 	vmov	r0, r1, d0
 8014058:	461e      	mov	r6, r3
 801405a:	4617      	mov	r7, r2
 801405c:	4696      	mov	lr, r2
 801405e:	d00c      	beq.n	801407a <__ieee754_fmod+0x36>
 8014060:	4c77      	ldr	r4, [pc, #476]	@ (8014240 <__ieee754_fmod+0x1fc>)
 8014062:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8014066:	45a0      	cmp	r8, r4
 8014068:	4689      	mov	r9, r1
 801406a:	d806      	bhi.n	801407a <__ieee754_fmod+0x36>
 801406c:	4254      	negs	r4, r2
 801406e:	4d75      	ldr	r5, [pc, #468]	@ (8014244 <__ieee754_fmod+0x200>)
 8014070:	4314      	orrs	r4, r2
 8014072:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8014076:	42ac      	cmp	r4, r5
 8014078:	d909      	bls.n	801408e <__ieee754_fmod+0x4a>
 801407a:	f7ec fae5 	bl	8000648 <__aeabi_dmul>
 801407e:	4602      	mov	r2, r0
 8014080:	460b      	mov	r3, r1
 8014082:	f7ec fc0b 	bl	800089c <__aeabi_ddiv>
 8014086:	ec41 0b10 	vmov	d0, r0, r1
 801408a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801408e:	45e0      	cmp	r8, ip
 8014090:	4682      	mov	sl, r0
 8014092:	4604      	mov	r4, r0
 8014094:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8014098:	dc09      	bgt.n	80140ae <__ieee754_fmod+0x6a>
 801409a:	dbf4      	blt.n	8014086 <__ieee754_fmod+0x42>
 801409c:	4282      	cmp	r2, r0
 801409e:	d8f2      	bhi.n	8014086 <__ieee754_fmod+0x42>
 80140a0:	d105      	bne.n	80140ae <__ieee754_fmod+0x6a>
 80140a2:	4b69      	ldr	r3, [pc, #420]	@ (8014248 <__ieee754_fmod+0x204>)
 80140a4:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 80140a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80140ac:	e7eb      	b.n	8014086 <__ieee754_fmod+0x42>
 80140ae:	4a65      	ldr	r2, [pc, #404]	@ (8014244 <__ieee754_fmod+0x200>)
 80140b0:	ea19 0f02 	tst.w	r9, r2
 80140b4:	d148      	bne.n	8014148 <__ieee754_fmod+0x104>
 80140b6:	f1b8 0f00 	cmp.w	r8, #0
 80140ba:	d13d      	bne.n	8014138 <__ieee754_fmod+0xf4>
 80140bc:	4963      	ldr	r1, [pc, #396]	@ (801424c <__ieee754_fmod+0x208>)
 80140be:	4653      	mov	r3, sl
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	dc36      	bgt.n	8014132 <__ieee754_fmod+0xee>
 80140c4:	4216      	tst	r6, r2
 80140c6:	d14f      	bne.n	8014168 <__ieee754_fmod+0x124>
 80140c8:	f1bc 0f00 	cmp.w	ip, #0
 80140cc:	d144      	bne.n	8014158 <__ieee754_fmod+0x114>
 80140ce:	4a5f      	ldr	r2, [pc, #380]	@ (801424c <__ieee754_fmod+0x208>)
 80140d0:	463b      	mov	r3, r7
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	dc3d      	bgt.n	8014152 <__ieee754_fmod+0x10e>
 80140d6:	485e      	ldr	r0, [pc, #376]	@ (8014250 <__ieee754_fmod+0x20c>)
 80140d8:	4281      	cmp	r1, r0
 80140da:	db4a      	blt.n	8014172 <__ieee754_fmod+0x12e>
 80140dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80140e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80140e4:	485a      	ldr	r0, [pc, #360]	@ (8014250 <__ieee754_fmod+0x20c>)
 80140e6:	4282      	cmp	r2, r0
 80140e8:	db57      	blt.n	801419a <__ieee754_fmod+0x156>
 80140ea:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80140ee:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 80140f2:	1a89      	subs	r1, r1, r2
 80140f4:	1b98      	subs	r0, r3, r6
 80140f6:	eba4 070e 	sub.w	r7, r4, lr
 80140fa:	2900      	cmp	r1, #0
 80140fc:	d162      	bne.n	80141c4 <__ieee754_fmod+0x180>
 80140fe:	4574      	cmp	r4, lr
 8014100:	bf38      	it	cc
 8014102:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8014106:	2800      	cmp	r0, #0
 8014108:	bfa4      	itt	ge
 801410a:	463c      	movge	r4, r7
 801410c:	4603      	movge	r3, r0
 801410e:	ea53 0104 	orrs.w	r1, r3, r4
 8014112:	d0c6      	beq.n	80140a2 <__ieee754_fmod+0x5e>
 8014114:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014118:	db69      	blt.n	80141ee <__ieee754_fmod+0x1aa>
 801411a:	494d      	ldr	r1, [pc, #308]	@ (8014250 <__ieee754_fmod+0x20c>)
 801411c:	428a      	cmp	r2, r1
 801411e:	db6c      	blt.n	80141fa <__ieee754_fmod+0x1b6>
 8014120:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014124:	432b      	orrs	r3, r5
 8014126:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 801412a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801412e:	4620      	mov	r0, r4
 8014130:	e7a9      	b.n	8014086 <__ieee754_fmod+0x42>
 8014132:	3901      	subs	r1, #1
 8014134:	005b      	lsls	r3, r3, #1
 8014136:	e7c3      	b.n	80140c0 <__ieee754_fmod+0x7c>
 8014138:	4945      	ldr	r1, [pc, #276]	@ (8014250 <__ieee754_fmod+0x20c>)
 801413a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801413e:	2b00      	cmp	r3, #0
 8014140:	ddc0      	ble.n	80140c4 <__ieee754_fmod+0x80>
 8014142:	3901      	subs	r1, #1
 8014144:	005b      	lsls	r3, r3, #1
 8014146:	e7fa      	b.n	801413e <__ieee754_fmod+0xfa>
 8014148:	ea4f 5128 	mov.w	r1, r8, asr #20
 801414c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8014150:	e7b8      	b.n	80140c4 <__ieee754_fmod+0x80>
 8014152:	3a01      	subs	r2, #1
 8014154:	005b      	lsls	r3, r3, #1
 8014156:	e7bc      	b.n	80140d2 <__ieee754_fmod+0x8e>
 8014158:	4a3d      	ldr	r2, [pc, #244]	@ (8014250 <__ieee754_fmod+0x20c>)
 801415a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801415e:	2b00      	cmp	r3, #0
 8014160:	ddb9      	ble.n	80140d6 <__ieee754_fmod+0x92>
 8014162:	3a01      	subs	r2, #1
 8014164:	005b      	lsls	r3, r3, #1
 8014166:	e7fa      	b.n	801415e <__ieee754_fmod+0x11a>
 8014168:	ea4f 522c 	mov.w	r2, ip, asr #20
 801416c:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8014170:	e7b1      	b.n	80140d6 <__ieee754_fmod+0x92>
 8014172:	1a40      	subs	r0, r0, r1
 8014174:	281f      	cmp	r0, #31
 8014176:	dc0a      	bgt.n	801418e <__ieee754_fmod+0x14a>
 8014178:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 801417c:	fa08 f800 	lsl.w	r8, r8, r0
 8014180:	fa2a f303 	lsr.w	r3, sl, r3
 8014184:	ea43 0308 	orr.w	r3, r3, r8
 8014188:	fa0a f400 	lsl.w	r4, sl, r0
 801418c:	e7aa      	b.n	80140e4 <__ieee754_fmod+0xa0>
 801418e:	4b31      	ldr	r3, [pc, #196]	@ (8014254 <__ieee754_fmod+0x210>)
 8014190:	1a5b      	subs	r3, r3, r1
 8014192:	fa0a f303 	lsl.w	r3, sl, r3
 8014196:	2400      	movs	r4, #0
 8014198:	e7a4      	b.n	80140e4 <__ieee754_fmod+0xa0>
 801419a:	1a80      	subs	r0, r0, r2
 801419c:	281f      	cmp	r0, #31
 801419e:	dc0a      	bgt.n	80141b6 <__ieee754_fmod+0x172>
 80141a0:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 80141a4:	fa0c fc00 	lsl.w	ip, ip, r0
 80141a8:	fa27 f606 	lsr.w	r6, r7, r6
 80141ac:	ea46 060c 	orr.w	r6, r6, ip
 80141b0:	fa07 fe00 	lsl.w	lr, r7, r0
 80141b4:	e79d      	b.n	80140f2 <__ieee754_fmod+0xae>
 80141b6:	4e27      	ldr	r6, [pc, #156]	@ (8014254 <__ieee754_fmod+0x210>)
 80141b8:	1ab6      	subs	r6, r6, r2
 80141ba:	fa07 f606 	lsl.w	r6, r7, r6
 80141be:	f04f 0e00 	mov.w	lr, #0
 80141c2:	e796      	b.n	80140f2 <__ieee754_fmod+0xae>
 80141c4:	4574      	cmp	r4, lr
 80141c6:	bf38      	it	cc
 80141c8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80141cc:	2800      	cmp	r0, #0
 80141ce:	da05      	bge.n	80141dc <__ieee754_fmod+0x198>
 80141d0:	0fe0      	lsrs	r0, r4, #31
 80141d2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80141d6:	0064      	lsls	r4, r4, #1
 80141d8:	3901      	subs	r1, #1
 80141da:	e78b      	b.n	80140f4 <__ieee754_fmod+0xb0>
 80141dc:	ea50 0307 	orrs.w	r3, r0, r7
 80141e0:	f43f af5f 	beq.w	80140a2 <__ieee754_fmod+0x5e>
 80141e4:	0ffb      	lsrs	r3, r7, #31
 80141e6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80141ea:	007c      	lsls	r4, r7, #1
 80141ec:	e7f4      	b.n	80141d8 <__ieee754_fmod+0x194>
 80141ee:	0fe1      	lsrs	r1, r4, #31
 80141f0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80141f4:	0064      	lsls	r4, r4, #1
 80141f6:	3a01      	subs	r2, #1
 80141f8:	e78c      	b.n	8014114 <__ieee754_fmod+0xd0>
 80141fa:	1a89      	subs	r1, r1, r2
 80141fc:	2914      	cmp	r1, #20
 80141fe:	dc0a      	bgt.n	8014216 <__ieee754_fmod+0x1d2>
 8014200:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8014204:	fa03 f202 	lsl.w	r2, r3, r2
 8014208:	40cc      	lsrs	r4, r1
 801420a:	4322      	orrs	r2, r4
 801420c:	410b      	asrs	r3, r1
 801420e:	ea43 0105 	orr.w	r1, r3, r5
 8014212:	4610      	mov	r0, r2
 8014214:	e737      	b.n	8014086 <__ieee754_fmod+0x42>
 8014216:	291f      	cmp	r1, #31
 8014218:	dc07      	bgt.n	801422a <__ieee754_fmod+0x1e6>
 801421a:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 801421e:	40cc      	lsrs	r4, r1
 8014220:	fa03 f202 	lsl.w	r2, r3, r2
 8014224:	4322      	orrs	r2, r4
 8014226:	462b      	mov	r3, r5
 8014228:	e7f1      	b.n	801420e <__ieee754_fmod+0x1ca>
 801422a:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 801422e:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8014232:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8014236:	32e2      	adds	r2, #226	@ 0xe2
 8014238:	fa43 f202 	asr.w	r2, r3, r2
 801423c:	e7f3      	b.n	8014226 <__ieee754_fmod+0x1e2>
 801423e:	bf00      	nop
 8014240:	7fefffff 	.word	0x7fefffff
 8014244:	7ff00000 	.word	0x7ff00000
 8014248:	08014bc0 	.word	0x08014bc0
 801424c:	fffffbed 	.word	0xfffffbed
 8014250:	fffffc02 	.word	0xfffffc02
 8014254:	fffffbe2 	.word	0xfffffbe2

08014258 <atan>:
 8014258:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801425c:	ec55 4b10 	vmov	r4, r5, d0
 8014260:	4bbf      	ldr	r3, [pc, #764]	@ (8014560 <atan+0x308>)
 8014262:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8014266:	429e      	cmp	r6, r3
 8014268:	46ab      	mov	fp, r5
 801426a:	d918      	bls.n	801429e <atan+0x46>
 801426c:	4bbd      	ldr	r3, [pc, #756]	@ (8014564 <atan+0x30c>)
 801426e:	429e      	cmp	r6, r3
 8014270:	d801      	bhi.n	8014276 <atan+0x1e>
 8014272:	d109      	bne.n	8014288 <atan+0x30>
 8014274:	b144      	cbz	r4, 8014288 <atan+0x30>
 8014276:	4622      	mov	r2, r4
 8014278:	462b      	mov	r3, r5
 801427a:	4620      	mov	r0, r4
 801427c:	4629      	mov	r1, r5
 801427e:	f7ec f82d 	bl	80002dc <__adddf3>
 8014282:	4604      	mov	r4, r0
 8014284:	460d      	mov	r5, r1
 8014286:	e006      	b.n	8014296 <atan+0x3e>
 8014288:	f1bb 0f00 	cmp.w	fp, #0
 801428c:	f340 812b 	ble.w	80144e6 <atan+0x28e>
 8014290:	a597      	add	r5, pc, #604	@ (adr r5, 80144f0 <atan+0x298>)
 8014292:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014296:	ec45 4b10 	vmov	d0, r4, r5
 801429a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801429e:	4bb2      	ldr	r3, [pc, #712]	@ (8014568 <atan+0x310>)
 80142a0:	429e      	cmp	r6, r3
 80142a2:	d813      	bhi.n	80142cc <atan+0x74>
 80142a4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80142a8:	429e      	cmp	r6, r3
 80142aa:	d80c      	bhi.n	80142c6 <atan+0x6e>
 80142ac:	a392      	add	r3, pc, #584	@ (adr r3, 80144f8 <atan+0x2a0>)
 80142ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142b2:	4620      	mov	r0, r4
 80142b4:	4629      	mov	r1, r5
 80142b6:	f7ec f811 	bl	80002dc <__adddf3>
 80142ba:	4bac      	ldr	r3, [pc, #688]	@ (801456c <atan+0x314>)
 80142bc:	2200      	movs	r2, #0
 80142be:	f7ec fc53 	bl	8000b68 <__aeabi_dcmpgt>
 80142c2:	2800      	cmp	r0, #0
 80142c4:	d1e7      	bne.n	8014296 <atan+0x3e>
 80142c6:	f04f 3aff 	mov.w	sl, #4294967295
 80142ca:	e029      	b.n	8014320 <atan+0xc8>
 80142cc:	f7ff fb0e 	bl	80138ec <fabs>
 80142d0:	4ba7      	ldr	r3, [pc, #668]	@ (8014570 <atan+0x318>)
 80142d2:	429e      	cmp	r6, r3
 80142d4:	ec55 4b10 	vmov	r4, r5, d0
 80142d8:	f200 80bc 	bhi.w	8014454 <atan+0x1fc>
 80142dc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80142e0:	429e      	cmp	r6, r3
 80142e2:	f200 809e 	bhi.w	8014422 <atan+0x1ca>
 80142e6:	4622      	mov	r2, r4
 80142e8:	462b      	mov	r3, r5
 80142ea:	4620      	mov	r0, r4
 80142ec:	4629      	mov	r1, r5
 80142ee:	f7eb fff5 	bl	80002dc <__adddf3>
 80142f2:	4b9e      	ldr	r3, [pc, #632]	@ (801456c <atan+0x314>)
 80142f4:	2200      	movs	r2, #0
 80142f6:	f7eb ffef 	bl	80002d8 <__aeabi_dsub>
 80142fa:	2200      	movs	r2, #0
 80142fc:	4606      	mov	r6, r0
 80142fe:	460f      	mov	r7, r1
 8014300:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014304:	4620      	mov	r0, r4
 8014306:	4629      	mov	r1, r5
 8014308:	f7eb ffe8 	bl	80002dc <__adddf3>
 801430c:	4602      	mov	r2, r0
 801430e:	460b      	mov	r3, r1
 8014310:	4630      	mov	r0, r6
 8014312:	4639      	mov	r1, r7
 8014314:	f7ec fac2 	bl	800089c <__aeabi_ddiv>
 8014318:	f04f 0a00 	mov.w	sl, #0
 801431c:	4604      	mov	r4, r0
 801431e:	460d      	mov	r5, r1
 8014320:	4622      	mov	r2, r4
 8014322:	462b      	mov	r3, r5
 8014324:	4620      	mov	r0, r4
 8014326:	4629      	mov	r1, r5
 8014328:	f7ec f98e 	bl	8000648 <__aeabi_dmul>
 801432c:	4602      	mov	r2, r0
 801432e:	460b      	mov	r3, r1
 8014330:	4680      	mov	r8, r0
 8014332:	4689      	mov	r9, r1
 8014334:	f7ec f988 	bl	8000648 <__aeabi_dmul>
 8014338:	a371      	add	r3, pc, #452	@ (adr r3, 8014500 <atan+0x2a8>)
 801433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801433e:	4606      	mov	r6, r0
 8014340:	460f      	mov	r7, r1
 8014342:	f7ec f981 	bl	8000648 <__aeabi_dmul>
 8014346:	a370      	add	r3, pc, #448	@ (adr r3, 8014508 <atan+0x2b0>)
 8014348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801434c:	f7eb ffc6 	bl	80002dc <__adddf3>
 8014350:	4632      	mov	r2, r6
 8014352:	463b      	mov	r3, r7
 8014354:	f7ec f978 	bl	8000648 <__aeabi_dmul>
 8014358:	a36d      	add	r3, pc, #436	@ (adr r3, 8014510 <atan+0x2b8>)
 801435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801435e:	f7eb ffbd 	bl	80002dc <__adddf3>
 8014362:	4632      	mov	r2, r6
 8014364:	463b      	mov	r3, r7
 8014366:	f7ec f96f 	bl	8000648 <__aeabi_dmul>
 801436a:	a36b      	add	r3, pc, #428	@ (adr r3, 8014518 <atan+0x2c0>)
 801436c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014370:	f7eb ffb4 	bl	80002dc <__adddf3>
 8014374:	4632      	mov	r2, r6
 8014376:	463b      	mov	r3, r7
 8014378:	f7ec f966 	bl	8000648 <__aeabi_dmul>
 801437c:	a368      	add	r3, pc, #416	@ (adr r3, 8014520 <atan+0x2c8>)
 801437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014382:	f7eb ffab 	bl	80002dc <__adddf3>
 8014386:	4632      	mov	r2, r6
 8014388:	463b      	mov	r3, r7
 801438a:	f7ec f95d 	bl	8000648 <__aeabi_dmul>
 801438e:	a366      	add	r3, pc, #408	@ (adr r3, 8014528 <atan+0x2d0>)
 8014390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014394:	f7eb ffa2 	bl	80002dc <__adddf3>
 8014398:	4642      	mov	r2, r8
 801439a:	464b      	mov	r3, r9
 801439c:	f7ec f954 	bl	8000648 <__aeabi_dmul>
 80143a0:	a363      	add	r3, pc, #396	@ (adr r3, 8014530 <atan+0x2d8>)
 80143a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143a6:	4680      	mov	r8, r0
 80143a8:	4689      	mov	r9, r1
 80143aa:	4630      	mov	r0, r6
 80143ac:	4639      	mov	r1, r7
 80143ae:	f7ec f94b 	bl	8000648 <__aeabi_dmul>
 80143b2:	a361      	add	r3, pc, #388	@ (adr r3, 8014538 <atan+0x2e0>)
 80143b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143b8:	f7eb ff8e 	bl	80002d8 <__aeabi_dsub>
 80143bc:	4632      	mov	r2, r6
 80143be:	463b      	mov	r3, r7
 80143c0:	f7ec f942 	bl	8000648 <__aeabi_dmul>
 80143c4:	a35e      	add	r3, pc, #376	@ (adr r3, 8014540 <atan+0x2e8>)
 80143c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ca:	f7eb ff85 	bl	80002d8 <__aeabi_dsub>
 80143ce:	4632      	mov	r2, r6
 80143d0:	463b      	mov	r3, r7
 80143d2:	f7ec f939 	bl	8000648 <__aeabi_dmul>
 80143d6:	a35c      	add	r3, pc, #368	@ (adr r3, 8014548 <atan+0x2f0>)
 80143d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143dc:	f7eb ff7c 	bl	80002d8 <__aeabi_dsub>
 80143e0:	4632      	mov	r2, r6
 80143e2:	463b      	mov	r3, r7
 80143e4:	f7ec f930 	bl	8000648 <__aeabi_dmul>
 80143e8:	a359      	add	r3, pc, #356	@ (adr r3, 8014550 <atan+0x2f8>)
 80143ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ee:	f7eb ff73 	bl	80002d8 <__aeabi_dsub>
 80143f2:	4632      	mov	r2, r6
 80143f4:	463b      	mov	r3, r7
 80143f6:	f7ec f927 	bl	8000648 <__aeabi_dmul>
 80143fa:	4602      	mov	r2, r0
 80143fc:	460b      	mov	r3, r1
 80143fe:	4640      	mov	r0, r8
 8014400:	4649      	mov	r1, r9
 8014402:	f7eb ff6b 	bl	80002dc <__adddf3>
 8014406:	4622      	mov	r2, r4
 8014408:	462b      	mov	r3, r5
 801440a:	f7ec f91d 	bl	8000648 <__aeabi_dmul>
 801440e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8014412:	4602      	mov	r2, r0
 8014414:	460b      	mov	r3, r1
 8014416:	d148      	bne.n	80144aa <atan+0x252>
 8014418:	4620      	mov	r0, r4
 801441a:	4629      	mov	r1, r5
 801441c:	f7eb ff5c 	bl	80002d8 <__aeabi_dsub>
 8014420:	e72f      	b.n	8014282 <atan+0x2a>
 8014422:	4b52      	ldr	r3, [pc, #328]	@ (801456c <atan+0x314>)
 8014424:	2200      	movs	r2, #0
 8014426:	4620      	mov	r0, r4
 8014428:	4629      	mov	r1, r5
 801442a:	f7eb ff55 	bl	80002d8 <__aeabi_dsub>
 801442e:	4b4f      	ldr	r3, [pc, #316]	@ (801456c <atan+0x314>)
 8014430:	4606      	mov	r6, r0
 8014432:	460f      	mov	r7, r1
 8014434:	2200      	movs	r2, #0
 8014436:	4620      	mov	r0, r4
 8014438:	4629      	mov	r1, r5
 801443a:	f7eb ff4f 	bl	80002dc <__adddf3>
 801443e:	4602      	mov	r2, r0
 8014440:	460b      	mov	r3, r1
 8014442:	4630      	mov	r0, r6
 8014444:	4639      	mov	r1, r7
 8014446:	f7ec fa29 	bl	800089c <__aeabi_ddiv>
 801444a:	f04f 0a01 	mov.w	sl, #1
 801444e:	4604      	mov	r4, r0
 8014450:	460d      	mov	r5, r1
 8014452:	e765      	b.n	8014320 <atan+0xc8>
 8014454:	4b47      	ldr	r3, [pc, #284]	@ (8014574 <atan+0x31c>)
 8014456:	429e      	cmp	r6, r3
 8014458:	d21c      	bcs.n	8014494 <atan+0x23c>
 801445a:	4b47      	ldr	r3, [pc, #284]	@ (8014578 <atan+0x320>)
 801445c:	2200      	movs	r2, #0
 801445e:	4620      	mov	r0, r4
 8014460:	4629      	mov	r1, r5
 8014462:	f7eb ff39 	bl	80002d8 <__aeabi_dsub>
 8014466:	4b44      	ldr	r3, [pc, #272]	@ (8014578 <atan+0x320>)
 8014468:	4606      	mov	r6, r0
 801446a:	460f      	mov	r7, r1
 801446c:	2200      	movs	r2, #0
 801446e:	4620      	mov	r0, r4
 8014470:	4629      	mov	r1, r5
 8014472:	f7ec f8e9 	bl	8000648 <__aeabi_dmul>
 8014476:	4b3d      	ldr	r3, [pc, #244]	@ (801456c <atan+0x314>)
 8014478:	2200      	movs	r2, #0
 801447a:	f7eb ff2f 	bl	80002dc <__adddf3>
 801447e:	4602      	mov	r2, r0
 8014480:	460b      	mov	r3, r1
 8014482:	4630      	mov	r0, r6
 8014484:	4639      	mov	r1, r7
 8014486:	f7ec fa09 	bl	800089c <__aeabi_ddiv>
 801448a:	f04f 0a02 	mov.w	sl, #2
 801448e:	4604      	mov	r4, r0
 8014490:	460d      	mov	r5, r1
 8014492:	e745      	b.n	8014320 <atan+0xc8>
 8014494:	4622      	mov	r2, r4
 8014496:	462b      	mov	r3, r5
 8014498:	4938      	ldr	r1, [pc, #224]	@ (801457c <atan+0x324>)
 801449a:	2000      	movs	r0, #0
 801449c:	f7ec f9fe 	bl	800089c <__aeabi_ddiv>
 80144a0:	f04f 0a03 	mov.w	sl, #3
 80144a4:	4604      	mov	r4, r0
 80144a6:	460d      	mov	r5, r1
 80144a8:	e73a      	b.n	8014320 <atan+0xc8>
 80144aa:	4b35      	ldr	r3, [pc, #212]	@ (8014580 <atan+0x328>)
 80144ac:	4e35      	ldr	r6, [pc, #212]	@ (8014584 <atan+0x32c>)
 80144ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80144b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144b6:	f7eb ff0f 	bl	80002d8 <__aeabi_dsub>
 80144ba:	4622      	mov	r2, r4
 80144bc:	462b      	mov	r3, r5
 80144be:	f7eb ff0b 	bl	80002d8 <__aeabi_dsub>
 80144c2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80144c6:	4602      	mov	r2, r0
 80144c8:	460b      	mov	r3, r1
 80144ca:	e9d6 0100 	ldrd	r0, r1, [r6]
 80144ce:	f7eb ff03 	bl	80002d8 <__aeabi_dsub>
 80144d2:	f1bb 0f00 	cmp.w	fp, #0
 80144d6:	4604      	mov	r4, r0
 80144d8:	460d      	mov	r5, r1
 80144da:	f6bf aedc 	bge.w	8014296 <atan+0x3e>
 80144de:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80144e2:	461d      	mov	r5, r3
 80144e4:	e6d7      	b.n	8014296 <atan+0x3e>
 80144e6:	a51c      	add	r5, pc, #112	@ (adr r5, 8014558 <atan+0x300>)
 80144e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80144ec:	e6d3      	b.n	8014296 <atan+0x3e>
 80144ee:	bf00      	nop
 80144f0:	54442d18 	.word	0x54442d18
 80144f4:	3ff921fb 	.word	0x3ff921fb
 80144f8:	8800759c 	.word	0x8800759c
 80144fc:	7e37e43c 	.word	0x7e37e43c
 8014500:	e322da11 	.word	0xe322da11
 8014504:	3f90ad3a 	.word	0x3f90ad3a
 8014508:	24760deb 	.word	0x24760deb
 801450c:	3fa97b4b 	.word	0x3fa97b4b
 8014510:	a0d03d51 	.word	0xa0d03d51
 8014514:	3fb10d66 	.word	0x3fb10d66
 8014518:	c54c206e 	.word	0xc54c206e
 801451c:	3fb745cd 	.word	0x3fb745cd
 8014520:	920083ff 	.word	0x920083ff
 8014524:	3fc24924 	.word	0x3fc24924
 8014528:	5555550d 	.word	0x5555550d
 801452c:	3fd55555 	.word	0x3fd55555
 8014530:	2c6a6c2f 	.word	0x2c6a6c2f
 8014534:	bfa2b444 	.word	0xbfa2b444
 8014538:	52defd9a 	.word	0x52defd9a
 801453c:	3fadde2d 	.word	0x3fadde2d
 8014540:	af749a6d 	.word	0xaf749a6d
 8014544:	3fb3b0f2 	.word	0x3fb3b0f2
 8014548:	fe231671 	.word	0xfe231671
 801454c:	3fbc71c6 	.word	0x3fbc71c6
 8014550:	9998ebc4 	.word	0x9998ebc4
 8014554:	3fc99999 	.word	0x3fc99999
 8014558:	54442d18 	.word	0x54442d18
 801455c:	bff921fb 	.word	0xbff921fb
 8014560:	440fffff 	.word	0x440fffff
 8014564:	7ff00000 	.word	0x7ff00000
 8014568:	3fdbffff 	.word	0x3fdbffff
 801456c:	3ff00000 	.word	0x3ff00000
 8014570:	3ff2ffff 	.word	0x3ff2ffff
 8014574:	40038000 	.word	0x40038000
 8014578:	3ff80000 	.word	0x3ff80000
 801457c:	bff00000 	.word	0xbff00000
 8014580:	08014bd0 	.word	0x08014bd0
 8014584:	08014bf0 	.word	0x08014bf0

08014588 <_init>:
 8014588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801458a:	bf00      	nop
 801458c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801458e:	bc08      	pop	{r3}
 8014590:	469e      	mov	lr, r3
 8014592:	4770      	bx	lr

08014594 <_fini>:
 8014594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014596:	bf00      	nop
 8014598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801459a:	bc08      	pop	{r3}
 801459c:	469e      	mov	lr, r3
 801459e:	4770      	bx	lr
