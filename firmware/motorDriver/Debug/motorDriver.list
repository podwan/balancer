
motorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014550  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  08014730  08014730  00015730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014da0  08014da0  000162a8  2**0
                  CONTENTS
  4 .ARM          00000008  08014da0  08014da0  00015da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014da8  08014da8  000162a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014da8  08014da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014dac  08014dac  00015dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002a8  20000000  08014db0  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba4  200002a8  08015058  000162a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e4c  08015058  00016e4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000162a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026a04  00000000  00000000  000162d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ef1  00000000  00000000  0003ccdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e60  00000000  00000000  00042bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000171d  00000000  00000000  00044a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000288bf  00000000  00000000  0004614d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d140  00000000  00000000  0006ea0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9b35  00000000  00000000  0009bb4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00185681  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092e8  00000000  00000000  001856c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0018e9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002a8 	.word	0x200002a8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014718 	.word	0x08014718

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002ac 	.word	0x200002ac
 800021c:	08014718 	.word	0x08014718

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00f feb6 	bl	8010dc0 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	223c      	movs	r2, #60	@ 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00f feb0 	bl	8010dc0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001060:	4b55      	ldr	r3, [pc, #340]	@ (80011b8 <MX_ADC1_Init+0x184>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001068:	4b53      	ldr	r3, [pc, #332]	@ (80011b8 <MX_ADC1_Init+0x184>)
 800106a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b51      	ldr	r3, [pc, #324]	@ (80011b8 <MX_ADC1_Init+0x184>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b50      	ldr	r3, [pc, #320]	@ (80011b8 <MX_ADC1_Init+0x184>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107c:	4b4e      	ldr	r3, [pc, #312]	@ (80011b8 <MX_ADC1_Init+0x184>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001082:	4b4d      	ldr	r3, [pc, #308]	@ (80011b8 <MX_ADC1_Init+0x184>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b4b      	ldr	r3, [pc, #300]	@ (80011b8 <MX_ADC1_Init+0x184>)
 800108a:	2204      	movs	r2, #4
 800108c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108e:	4b4a      	ldr	r3, [pc, #296]	@ (80011b8 <MX_ADC1_Init+0x184>)
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b48      	ldr	r3, [pc, #288]	@ (80011b8 <MX_ADC1_Init+0x184>)
 8001096:	2200      	movs	r2, #0
 8001098:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109a:	4b47      	ldr	r3, [pc, #284]	@ (80011b8 <MX_ADC1_Init+0x184>)
 800109c:	2201      	movs	r2, #1
 800109e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b45      	ldr	r3, [pc, #276]	@ (80011b8 <MX_ADC1_Init+0x184>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b43      	ldr	r3, [pc, #268]	@ (80011b8 <MX_ADC1_Init+0x184>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b42      	ldr	r3, [pc, #264]	@ (80011b8 <MX_ADC1_Init+0x184>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b40      	ldr	r3, [pc, #256]	@ (80011b8 <MX_ADC1_Init+0x184>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	4b3e      	ldr	r3, [pc, #248]	@ (80011b8 <MX_ADC1_Init+0x184>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c2:	4b3d      	ldr	r3, [pc, #244]	@ (80011b8 <MX_ADC1_Init+0x184>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ca:	483b      	ldr	r0, [pc, #236]	@ (80011b8 <MX_ADC1_Init+0x184>)
 80010cc:	f001 fefa 	bl	8002ec4 <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fcba 	bl	8001a4e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e2:	4619      	mov	r1, r3
 80010e4:	4834      	ldr	r0, [pc, #208]	@ (80011b8 <MX_ADC1_Init+0x184>)
 80010e6:	f004 f8ed 	bl	80052c4 <HAL_ADCEx_MultiModeConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80010f0:	f000 fcad 	bl	8001a4e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010f4:	4b31      	ldr	r3, [pc, #196]	@ (80011bc <MX_ADC1_Init+0x188>)
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001110:	4619      	mov	r1, r3
 8001112:	4829      	ldr	r0, [pc, #164]	@ (80011b8 <MX_ADC1_Init+0x184>)
 8001114:	f002 fb5c 	bl	80037d0 <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800111e:	f000 fc96 	bl	8001a4e <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001122:	4b27      	ldr	r3, [pc, #156]	@ (80011c0 <MX_ADC1_Init+0x18c>)
 8001124:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001126:	2309      	movs	r3, #9
 8001128:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800112a:	2301      	movs	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 800113a:	2303      	movs	r3, #3
 800113c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T8_CC4;
 8001150:	239c      	movs	r3, #156	@ 0x9c
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	4815      	ldr	r0, [pc, #84]	@ (80011b8 <MX_ADC1_Init+0x184>)
 8001164:	f003 fbce 	bl	8004904 <HAL_ADCEx_InjectedConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800116e:	f000 fc6e 	bl	8001a4e <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <MX_ADC1_Init+0x190>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001176:	f240 130f 	movw	r3, #271	@ 0x10f
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <MX_ADC1_Init+0x184>)
 8001182:	f003 fbbf 	bl	8004904 <HAL_ADCEx_InjectedConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 800118c:	f000 fc5f 	bl	8001a4e <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001190:	4b0d      	ldr	r3, [pc, #52]	@ (80011c8 <MX_ADC1_Init+0x194>)
 8001192:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001194:	f240 2315 	movw	r3, #533	@ 0x215
 8001198:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	@ (80011b8 <MX_ADC1_Init+0x184>)
 80011a0:	f003 fbb0 	bl	8004904 <HAL_ADCEx_InjectedConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 80011aa:	f000 fc50 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3768      	adds	r7, #104	@ 0x68
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200002c4 	.word	0x200002c4
 80011bc:	08600004 	.word	0x08600004
 80011c0:	32601000 	.word	0x32601000
 80011c4:	3ef08000 	.word	0x3ef08000
 80011c8:	2e300800 	.word	0x2e300800

080011cc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b090      	sub	sp, #64	@ 0x40
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	223c      	movs	r2, #60	@ 0x3c
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f00f fdf1 	bl	8010dc0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011de:	4b31      	ldr	r3, [pc, #196]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 80011e0:	4a31      	ldr	r2, [pc, #196]	@ (80012a8 <MX_ADC2_Init+0xdc>)
 80011e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011e4:	4b2f      	ldr	r3, [pc, #188]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 80011e6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011ea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011ec:	4b2d      	ldr	r3, [pc, #180]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f2:	4b2c      	ldr	r3, [pc, #176]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011f8:	4b2a      	ldr	r3, [pc, #168]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011fe:	4b29      	ldr	r3, [pc, #164]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 8001200:	2200      	movs	r2, #0
 8001202:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001204:	4b27      	ldr	r3, [pc, #156]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 8001206:	2204      	movs	r2, #4
 8001208:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800120a:	4b26      	ldr	r3, [pc, #152]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 800120c:	2200      	movs	r2, #0
 800120e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001210:	4b24      	ldr	r3, [pc, #144]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 8001212:	2200      	movs	r2, #0
 8001214:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001216:	4b23      	ldr	r3, [pc, #140]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 8001218:	2201      	movs	r2, #1
 800121a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800121c:	4b21      	ldr	r3, [pc, #132]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001224:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800122c:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 800122e:	2200      	movs	r2, #0
 8001230:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001232:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800123a:	481a      	ldr	r0, [pc, #104]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 800123c:	f001 fe42 	bl	8002ec4 <HAL_ADC_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001246:	f000 fc02 	bl	8001a4e <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 800124a:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <MX_ADC2_Init+0xe0>)
 800124c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800124e:	2309      	movs	r3, #9
 8001250:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001252:	2301      	movs	r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001256:	237f      	movs	r3, #127	@ 0x7f
 8001258:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800125a:	2304      	movs	r3, #4
 800125c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001262:	2301      	movs	r3, #1
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T8_CC4;
 8001278:	239c      	movs	r3, #156	@ 0x9c
 800127a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800127c:	2380      	movs	r3, #128	@ 0x80
 800127e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	4619      	mov	r1, r3
 800128a:	4806      	ldr	r0, [pc, #24]	@ (80012a4 <MX_ADC2_Init+0xd8>)
 800128c:	f003 fb3a 	bl	8004904 <HAL_ADCEx_InjectedConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8001296:	f000 fbda 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	3740      	adds	r7, #64	@ 0x40
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000330 	.word	0x20000330
 80012a8:	50000100 	.word	0x50000100
 80012ac:	3ef08000 	.word	0x3ef08000

080012b0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b09e      	sub	sp, #120	@ 0x78
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c8:	f107 0320 	add.w	r3, r7, #32
 80012cc:	2244      	movs	r2, #68	@ 0x44
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f00f fd75 	bl	8010dc0 <memset>
  if(adcHandle->Instance==ADC1)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012de:	d15f      	bne.n	80013a0 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012e6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ec:	f107 0320 	add.w	r3, r7, #32
 80012f0:	4618      	mov	r0, r3
 80012f2:	f006 f8fd 	bl	80074f0 <HAL_RCCEx_PeriphCLKConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012fc:	f000 fba7 	bl	8001a4e <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001300:	4b4f      	ldr	r3, [pc, #316]	@ (8001440 <HAL_ADC_MspInit+0x190>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	4a4e      	ldr	r2, [pc, #312]	@ (8001440 <HAL_ADC_MspInit+0x190>)
 8001308:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800130a:	4b4d      	ldr	r3, [pc, #308]	@ (8001440 <HAL_ADC_MspInit+0x190>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d10b      	bne.n	800132a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001312:	4b4c      	ldr	r3, [pc, #304]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	4a4b      	ldr	r2, [pc, #300]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 8001318:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800131c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131e:	4b49      	ldr	r3, [pc, #292]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4b46      	ldr	r3, [pc, #280]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	4a45      	ldr	r2, [pc, #276]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001336:	4b43      	ldr	r3, [pc, #268]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
 8001340:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b40      	ldr	r3, [pc, #256]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	4a3f      	ldr	r2, [pc, #252]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134e:	4b3d      	ldr	r3, [pc, #244]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697b      	ldr	r3, [r7, #20]
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800135a:	2302      	movs	r3, #2
 800135c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135e:	2303      	movs	r3, #3
 8001360:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800136a:	4619      	mov	r1, r3
 800136c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001370:	f005 f92a 	bl	80065c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_14;
 8001374:	f245 0303 	movw	r3, #20483	@ 0x5003
 8001378:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137a:	2303      	movs	r3, #3
 800137c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001386:	4619      	mov	r1, r3
 8001388:	482f      	ldr	r0, [pc, #188]	@ (8001448 <HAL_ADC_MspInit+0x198>)
 800138a:	f005 f91d 	bl	80065c8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	2012      	movs	r0, #18
 8001394:	f004 fb3d 	bl	8005a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001398:	2012      	movs	r0, #18
 800139a:	f004 fb54 	bl	8005a46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800139e:	e04a      	b.n	8001436 <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a29      	ldr	r2, [pc, #164]	@ (800144c <HAL_ADC_MspInit+0x19c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d145      	bne.n	8001436 <HAL_ADC_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013ae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013b0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b6:	f107 0320 	add.w	r3, r7, #32
 80013ba:	4618      	mov	r0, r3
 80013bc:	f006 f898 	bl	80074f0 <HAL_RCCEx_PeriphCLKConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80013c6:	f000 fb42 	bl	8001a4e <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <HAL_ADC_MspInit+0x190>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001440 <HAL_ADC_MspInit+0x190>)
 80013d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <HAL_ADC_MspInit+0x190>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d10b      	bne.n	80013f4 <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013dc:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 80013de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e0:	4a18      	ldr	r2, [pc, #96]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 80013e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e8:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 80013ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f4:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 80013f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f8:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 80013fa:	f043 0302 	orr.w	r3, r3, #2
 80013fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001400:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <HAL_ADC_MspInit+0x194>)
 8001402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800140c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001410:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001412:	2303      	movs	r3, #3
 8001414:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800141e:	4619      	mov	r1, r3
 8001420:	4809      	ldr	r0, [pc, #36]	@ (8001448 <HAL_ADC_MspInit+0x198>)
 8001422:	f005 f8d1 	bl	80065c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	2012      	movs	r0, #18
 800142c:	f004 faf1 	bl	8005a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001430:	2012      	movs	r0, #18
 8001432:	f004 fb08 	bl	8005a46 <HAL_NVIC_EnableIRQ>
}
 8001436:	bf00      	nop
 8001438:	3778      	adds	r7, #120	@ 0x78
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000039c 	.word	0x2000039c
 8001444:	40021000 	.word	0x40021000
 8001448:	48000400 	.word	0x48000400
 800144c:	50000100 	.word	0x50000100

08001450 <MX_COMP1_Init>:
COMP_HandleTypeDef hcomp1;
COMP_HandleTypeDef hcomp4;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <MX_COMP1_Init+0x44>)
 8001456:	4a10      	ldr	r2, [pc, #64]	@ (8001498 <MX_COMP1_Init+0x48>)
 8001458:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_COMP1_Init+0x44>)
 800145c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001460:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8001462:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <MX_COMP1_Init+0x44>)
 8001464:	2240      	movs	r2, #64	@ 0x40
 8001466:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001468:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <MX_COMP1_Init+0x44>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800146e:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_COMP1_Init+0x44>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001474:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <MX_COMP1_Init+0x44>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 800147a:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <MX_COMP1_Init+0x44>)
 800147c:	2211      	movs	r2, #17
 800147e:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	@ (8001494 <MX_COMP1_Init+0x44>)
 8001482:	f004 f881 	bl	8005588 <HAL_COMP_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 800148c:	f000 fadf 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200003a0 	.word	0x200003a0
 8001498:	40010200 	.word	0x40010200

0800149c <MX_COMP4_Init>:
/* COMP4 init function */
void MX_COMP4_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <MX_COMP4_Init+0x44>)
 80014a2:	4a10      	ldr	r2, [pc, #64]	@ (80014e4 <MX_COMP4_Init+0x48>)
 80014a4:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <MX_COMP4_Init+0x44>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	605a      	str	r2, [r3, #4]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_COMP4_Init+0x44>)
 80014ae:	2240      	movs	r2, #64	@ 0x40
 80014b0:	609a      	str	r2, [r3, #8]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <MX_COMP4_Init+0x44>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80014b8:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_COMP4_Init+0x44>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80014be:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <MX_COMP4_Init+0x44>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 80014c4:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <MX_COMP4_Init+0x44>)
 80014c6:	2211      	movs	r2, #17
 80014c8:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 80014ca:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <MX_COMP4_Init+0x44>)
 80014cc:	f004 f85c 	bl	8005588 <HAL_COMP_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_COMP4_Init+0x3e>
  {
    Error_Handler();
 80014d6:	f000 faba 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200003c4 	.word	0x200003c4
 80014e4:	4001020c 	.word	0x4001020c

080014e8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a26      	ldr	r2, [pc, #152]	@ (80015a0 <HAL_COMP_MspInit+0xb8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d120      	bne.n	800154c <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	4b26      	ldr	r3, [pc, #152]	@ (80015a4 <HAL_COMP_MspInit+0xbc>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	4a25      	ldr	r2, [pc, #148]	@ (80015a4 <HAL_COMP_MspInit+0xbc>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001516:	4b23      	ldr	r3, [pc, #140]	@ (80015a4 <HAL_COMP_MspInit+0xbc>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001522:	2302      	movs	r3, #2
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001526:	2303      	movs	r3, #3
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	481c      	ldr	r0, [pc, #112]	@ (80015a8 <HAL_COMP_MspInit+0xc0>)
 8001536:	f005 f847 	bl	80065c8 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2040      	movs	r0, #64	@ 0x40
 8001540:	f004 fa67 	bl	8005a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8001544:	2040      	movs	r0, #64	@ 0x40
 8001546:	f004 fa7e 	bl	8005a46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(COMP4_IRQn);
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }
}
 800154a:	e024      	b.n	8001596 <HAL_COMP_MspInit+0xae>
  else if(compHandle->Instance==COMP4)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a16      	ldr	r2, [pc, #88]	@ (80015ac <HAL_COMP_MspInit+0xc4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d11f      	bne.n	8001596 <HAL_COMP_MspInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <HAL_COMP_MspInit+0xbc>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155a:	4a12      	ldr	r2, [pc, #72]	@ (80015a4 <HAL_COMP_MspInit+0xbc>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <HAL_COMP_MspInit+0xbc>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800156e:	2301      	movs	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001572:	2303      	movs	r3, #3
 8001574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	4809      	ldr	r0, [pc, #36]	@ (80015a8 <HAL_COMP_MspInit+0xc0>)
 8001582:	f005 f821 	bl	80065c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP4_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	2041      	movs	r0, #65	@ 0x41
 800158c:	f004 fa41 	bl	8005a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP4_IRQn);
 8001590:	2041      	movs	r0, #65	@ 0x41
 8001592:	f004 fa58 	bl	8005a46 <HAL_NVIC_EnableIRQ>
}
 8001596:	bf00      	nop
 8001598:	3728      	adds	r7, #40	@ 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40010200 	.word	0x40010200
 80015a4:	40021000 	.word	0x40021000
 80015a8:	48000400 	.word	0x48000400
 80015ac:	4001020c 	.word	0x4001020c

080015b0 <MX_DAC3_Init>:

DAC_HandleTypeDef hdac3;

/* DAC3 init function */
void MX_DAC3_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	@ 0x30
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015b6:	463b      	mov	r3, r7
 80015b8:	2230      	movs	r2, #48	@ 0x30
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f00f fbff 	bl	8010dc0 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 80015c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <MX_DAC3_Init+0x80>)
 80015c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001634 <MX_DAC3_Init+0x84>)
 80015c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 80015c8:	4819      	ldr	r0, [pc, #100]	@ (8001630 <MX_DAC3_Init+0x80>)
 80015ca:	f004 fa56 	bl	8005a7a <HAL_DAC_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 80015d4:	f000 fa3b 	bl	8001a4e <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80015d8:	2302      	movs	r3, #2
 80015da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80015f0:	2302      	movs	r3, #2
 80015f2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015fc:	463b      	mov	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	4619      	mov	r1, r3
 8001602:	480b      	ldr	r0, [pc, #44]	@ (8001630 <MX_DAC3_Init+0x80>)
 8001604:	f004 faf6 	bl	8005bf4 <HAL_DAC_ConfigChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800160e:	f000 fa1e 	bl	8001a4e <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001612:	463b      	mov	r3, r7
 8001614:	2210      	movs	r2, #16
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	@ (8001630 <MX_DAC3_Init+0x80>)
 800161a:	f004 faeb 	bl	8005bf4 <HAL_DAC_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8001624:	f000 fa13 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	3730      	adds	r7, #48	@ 0x30
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200003e8 	.word	0x200003e8
 8001634:	50001000 	.word	0x50001000

08001638 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC3)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <HAL_DAC_MspInit+0x38>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d10b      	bne.n	8001662 <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* DAC3 clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 800164a:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <HAL_DAC_MspInit+0x3c>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	4a09      	ldr	r2, [pc, #36]	@ (8001674 <HAL_DAC_MspInit+0x3c>)
 8001650:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001656:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <HAL_DAC_MspInit+0x3c>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }
}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	50001000 	.word	0x50001000
 8001674:	40021000 	.word	0x40021000

08001678 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800167e:	4b1e      	ldr	r3, [pc, #120]	@ (80016f8 <MX_DMA_Init+0x80>)
 8001680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001682:	4a1d      	ldr	r2, [pc, #116]	@ (80016f8 <MX_DMA_Init+0x80>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6493      	str	r3, [r2, #72]	@ 0x48
 800168a:	4b1b      	ldr	r3, [pc, #108]	@ (80016f8 <MX_DMA_Init+0x80>)
 800168c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001696:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <MX_DMA_Init+0x80>)
 8001698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800169a:	4a17      	ldr	r2, [pc, #92]	@ (80016f8 <MX_DMA_Init+0x80>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80016a2:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <MX_DMA_Init+0x80>)
 80016a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2101      	movs	r1, #1
 80016b2:	200b      	movs	r0, #11
 80016b4:	f004 f9ad 	bl	8005a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016b8:	200b      	movs	r0, #11
 80016ba:	f004 f9c4 	bl	8005a46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2101      	movs	r1, #1
 80016c2:	200c      	movs	r0, #12
 80016c4:	f004 f9a5 	bl	8005a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016c8:	200c      	movs	r0, #12
 80016ca:	f004 f9bc 	bl	8005a46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	200d      	movs	r0, #13
 80016d4:	f004 f99d 	bl	8005a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016d8:	200d      	movs	r0, #13
 80016da:	f004 f9b4 	bl	8005a46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	200e      	movs	r0, #14
 80016e4:	f004 f995 	bl	8005a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80016e8:	200e      	movs	r0, #14
 80016ea:	f004 f9ac 	bl	8005a46 <HAL_NVIC_EnableIRQ>

}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000

080016fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	@ 0x28
 8001700:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	4b4d      	ldr	r3, [pc, #308]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001716:	4a4c      	ldr	r2, [pc, #304]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171e:	4b4a      	ldr	r3, [pc, #296]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800172a:	4b47      	ldr	r3, [pc, #284]	@ (8001848 <MX_GPIO_Init+0x14c>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172e:	4a46      	ldr	r2, [pc, #280]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001730:	f043 0320 	orr.w	r3, r3, #32
 8001734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001736:	4b44      	ldr	r3, [pc, #272]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	f003 0320 	and.w	r3, r3, #32
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b41      	ldr	r3, [pc, #260]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	4a40      	ldr	r2, [pc, #256]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174e:	4b3e      	ldr	r3, [pc, #248]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	4b3b      	ldr	r3, [pc, #236]	@ (8001848 <MX_GPIO_Init+0x14c>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	4a3a      	ldr	r2, [pc, #232]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001766:	4b38      	ldr	r3, [pc, #224]	@ (8001848 <MX_GPIO_Init+0x14c>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|TEST_Pin, GPIO_PIN_SET);
 8001772:	2201      	movs	r2, #1
 8001774:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 8001778:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800177c:	f005 f8be 	bl	80068fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS2_GPIO_Port, NSS2_Pin, GPIO_PIN_SET);
 8001780:	2201      	movs	r2, #1
 8001782:	2110      	movs	r1, #16
 8001784:	4831      	ldr	r0, [pc, #196]	@ (800184c <MX_GPIO_Init+0x150>)
 8001786:	f005 f8b9 	bl	80068fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS1_GPIO_Port, NSS1_Pin, GPIO_PIN_SET);
 800178a:	2201      	movs	r2, #1
 800178c:	2108      	movs	r1, #8
 800178e:	4830      	ldr	r0, [pc, #192]	@ (8001850 <MX_GPIO_Init+0x154>)
 8001790:	f005 f8b4 	bl	80068fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	4828      	ldr	r0, [pc, #160]	@ (800184c <MX_GPIO_Init+0x150>)
 80017aa:	f004 ff0d 	bl	80065c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80017ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4822      	ldr	r0, [pc, #136]	@ (800184c <MX_GPIO_Init+0x150>)
 80017c4:	f004 ff00 	bl	80065c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80017c8:	2310      	movs	r3, #16
 80017ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017cc:	2301      	movs	r3, #1
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017e2:	f004 fef1 	bl	80065c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS2_Pin;
 80017e6:	2310      	movs	r3, #16
 80017e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f2:	2302      	movs	r3, #2
 80017f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS2_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4813      	ldr	r0, [pc, #76]	@ (800184c <MX_GPIO_Init+0x150>)
 80017fe:	f004 fee3 	bl	80065c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001802:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001808:	2301      	movs	r3, #1
 800180a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001810:	2302      	movs	r3, #2
 8001812:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800181e:	f004 fed3 	bl	80065c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS1_Pin;
 8001822:	2308      	movs	r3, #8
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182e:	2302      	movs	r3, #2
 8001830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS1_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	4805      	ldr	r0, [pc, #20]	@ (8001850 <MX_GPIO_Init+0x154>)
 800183a:	f004 fec5 	bl	80065c8 <HAL_GPIO_Init>

}
 800183e:	bf00      	nop
 8001840:	3728      	adds	r7, #40	@ 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	48000800 	.word	0x48000800
 8001850:	48000400 	.word	0x48000400

08001854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001858:	f001 f83b 	bl	80028d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185c:	f000 f8ae 	bl	80019bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001860:	f7ff ff4c 	bl	80016fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001864:	f7ff ff08 	bl	8001678 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001868:	f000 fe5e 	bl	8002528 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800186c:	f7ff fbe2 	bl	8001034 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001870:	f7ff fcac 	bl	80011cc <MX_ADC2_Init>
  MX_TIM1_Init();
 8001874:	f000 fb8c 	bl	8001f90 <MX_TIM1_Init>
  MX_DAC3_Init();
 8001878:	f7ff fe9a 	bl	80015b0 <MX_DAC3_Init>
  MX_SPI1_Init();
 800187c:	f000 f8ee 	bl	8001a5c <MX_SPI1_Init>
  MX_TIM8_Init();
 8001880:	f000 fc62 	bl	8002148 <MX_TIM8_Init>
  MX_SPI3_Init();
 8001884:	f000 f928 	bl	8001ad8 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8001888:	f000 fe02 	bl	8002490 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 800188c:	f7ff fde0 	bl	8001450 <MX_COMP1_Init>
  MX_COMP4_Init();
 8001890:	f7ff fe04 	bl	800149c <MX_COMP4_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 8001894:	f00b f9b8 	bl	800cc08 <appInit>
#if 1
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, sizeof(rxBuffer));
 8001898:	2264      	movs	r2, #100	@ 0x64
 800189a:	493c      	ldr	r1, [pc, #240]	@ (800198c <main+0x138>)
 800189c:	483c      	ldr	r0, [pc, #240]	@ (8001990 <main+0x13c>)
 800189e:	f009 fc3c 	bl	800b11a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80018a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001994 <main+0x140>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001994 <main+0x140>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0204 	bic.w	r2, r2, #4
 80018b0:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 80018b2:	2264      	movs	r2, #100	@ 0x64
 80018b4:	4935      	ldr	r1, [pc, #212]	@ (800198c <main+0x138>)
 80018b6:	4838      	ldr	r0, [pc, #224]	@ (8001998 <main+0x144>)
 80018b8:	f009 fc2f 	bl	800b11a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80018bc:	4b37      	ldr	r3, [pc, #220]	@ (800199c <main+0x148>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b36      	ldr	r3, [pc, #216]	@ (800199c <main+0x148>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0204 	bic.w	r2, r2, #4
 80018ca:	601a      	str	r2, [r3, #0]
  // HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80018cc:	217f      	movs	r1, #127	@ 0x7f
 80018ce:	4834      	ldr	r0, [pc, #208]	@ (80019a0 <main+0x14c>)
 80018d0:	f002 fdf8 	bl	80044c4 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80018d4:	217f      	movs	r1, #127	@ 0x7f
 80018d6:	4833      	ldr	r0, [pc, #204]	@ (80019a4 <main+0x150>)
 80018d8:	f002 fdf4 	bl	80044c4 <HAL_ADCEx_Calibration_Start>
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_JEOC);
 80018dc:	4b30      	ldr	r3, [pc, #192]	@ (80019a0 <main+0x14c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2220      	movs	r2, #32
 80018e2:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 80018e4:	4b2e      	ldr	r3, [pc, #184]	@ (80019a0 <main+0x14c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2204      	movs	r2, #4
 80018ea:	601a      	str	r2, [r3, #0]
  __HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_JEOC);
 80018ec:	4b2d      	ldr	r3, [pc, #180]	@ (80019a4 <main+0x150>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2220      	movs	r2, #32
 80018f2:	601a      	str	r2, [r3, #0]

  HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2300);
 80018f4:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 80018f8:	2200      	movs	r2, #0
 80018fa:	2100      	movs	r1, #0
 80018fc:	482a      	ldr	r0, [pc, #168]	@ (80019a8 <main+0x154>)
 80018fe:	f004 f94b 	bl	8005b98 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac3, DAC_CHANNEL_1);
 8001902:	2100      	movs	r1, #0
 8001904:	4828      	ldr	r0, [pc, #160]	@ (80019a8 <main+0x154>)
 8001906:	f004 f8db 	bl	8005ac0 <HAL_DAC_Start>
  HAL_COMP_Start(&hcomp1);
 800190a:	4828      	ldr	r0, [pc, #160]	@ (80019ac <main+0x158>)
 800190c:	f003 ff18 	bl	8005740 <HAL_COMP_Start>

  HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 2300);
 8001910:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 8001914:	2200      	movs	r2, #0
 8001916:	2110      	movs	r1, #16
 8001918:	4823      	ldr	r0, [pc, #140]	@ (80019a8 <main+0x154>)
 800191a:	f004 f93d 	bl	8005b98 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac3, DAC_CHANNEL_2);
 800191e:	2110      	movs	r1, #16
 8001920:	4821      	ldr	r0, [pc, #132]	@ (80019a8 <main+0x154>)
 8001922:	f004 f8cd 	bl	8005ac0 <HAL_DAC_Start>
  HAL_COMP_Start(&hcomp4);
 8001926:	4822      	ldr	r0, [pc, #136]	@ (80019b0 <main+0x15c>)
 8001928:	f003 ff0a 	bl	8005740 <HAL_COMP_Start>

  HAL_ADCEx_InjectedStart_IT(&hadc1);
 800192c:	481c      	ldr	r0, [pc, #112]	@ (80019a0 <main+0x14c>)
 800192e:	f002 fedb 	bl	80046e8 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart(&hadc2);
 8001932:	481c      	ldr	r0, [pc, #112]	@ (80019a4 <main+0x150>)
 8001934:	f002 fe28 	bl	8004588 <HAL_ADCEx_InjectedStart>

  HAL_TIM_Base_Start(&htim8);
 8001938:	481e      	ldr	r0, [pc, #120]	@ (80019b4 <main+0x160>)
 800193a:	f006 fc61 	bl	8008200 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800193e:	210c      	movs	r1, #12
 8001940:	481c      	ldr	r0, [pc, #112]	@ (80019b4 <main+0x160>)
 8001942:	f006 fd21 	bl	8008388 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001946:	2100      	movs	r1, #0
 8001948:	481a      	ldr	r0, [pc, #104]	@ (80019b4 <main+0x160>)
 800194a:	f006 fd1d 	bl	8008388 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800194e:	2104      	movs	r1, #4
 8001950:	4818      	ldr	r0, [pc, #96]	@ (80019b4 <main+0x160>)
 8001952:	f006 fd19 	bl	8008388 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001956:	2108      	movs	r1, #8
 8001958:	4816      	ldr	r0, [pc, #88]	@ (80019b4 <main+0x160>)
 800195a:	f006 fd15 	bl	8008388 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1);
 800195e:	4816      	ldr	r0, [pc, #88]	@ (80019b8 <main+0x164>)
 8001960:	f006 fc4e 	bl	8008200 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001964:	210c      	movs	r1, #12
 8001966:	4814      	ldr	r0, [pc, #80]	@ (80019b8 <main+0x164>)
 8001968:	f006 fd0e 	bl	8008388 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800196c:	2100      	movs	r1, #0
 800196e:	4812      	ldr	r0, [pc, #72]	@ (80019b8 <main+0x164>)
 8001970:	f006 fd0a 	bl	8008388 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001974:	2104      	movs	r1, #4
 8001976:	4810      	ldr	r0, [pc, #64]	@ (80019b8 <main+0x164>)
 8001978:	f006 fd06 	bl	8008388 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800197c:	2108      	movs	r1, #8
 800197e:	480e      	ldr	r0, [pc, #56]	@ (80019b8 <main+0x164>)
 8001980:	f006 fd02 	bl	8008388 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    userMain();
 8001984:	f00d fad8 	bl	800ef38 <userMain>
 8001988:	e7fc      	b.n	8001984 <main+0x130>
 800198a:	bf00      	nop
 800198c:	20000b8c 	.word	0x20000b8c
 8001990:	20000560 	.word	0x20000560
 8001994:	20000688 	.word	0x20000688
 8001998:	200005f4 	.word	0x200005f4
 800199c:	200007a8 	.word	0x200007a8
 80019a0:	200002c4 	.word	0x200002c4
 80019a4:	20000330 	.word	0x20000330
 80019a8:	200003e8 	.word	0x200003e8
 80019ac:	200003a0 	.word	0x200003a0
 80019b0:	200003c4 	.word	0x200003c4
 80019b4:	20000514 	.word	0x20000514
 80019b8:	200004c8 	.word	0x200004c8

080019bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b094      	sub	sp, #80	@ 0x50
 80019c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019c2:	f107 0318 	add.w	r3, r7, #24
 80019c6:	2238      	movs	r2, #56	@ 0x38
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f00f f9f8 	bl	8010dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80019de:	2000      	movs	r0, #0
 80019e0:	f004 ffa4 	bl	800692c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e4:	2301      	movs	r3, #1
 80019e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019ec:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ee:	2302      	movs	r3, #2
 80019f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f2:	2303      	movs	r3, #3
 80019f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80019f6:	2303      	movs	r3, #3
 80019f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80019fa:	2328      	movs	r3, #40	@ 0x28
 80019fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019fe:	2302      	movs	r3, #2
 8001a00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a02:	2302      	movs	r3, #2
 8001a04:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a06:	2302      	movs	r3, #2
 8001a08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0a:	f107 0318 	add.w	r3, r7, #24
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f005 f840 	bl	8006a94 <HAL_RCC_OscConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001a1a:	f000 f818 	bl	8001a4e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a1e:	230f      	movs	r3, #15
 8001a20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a22:	2303      	movs	r3, #3
 8001a24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	2104      	movs	r1, #4
 8001a36:	4618      	mov	r0, r3
 8001a38:	f005 fb3e 	bl	80070b8 <HAL_RCC_ClockConfig>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001a42:	f000 f804 	bl	8001a4e <Error_Handler>
  }
}
 8001a46:	bf00      	nop
 8001a48:	3750      	adds	r7, #80	@ 0x50
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a52:	b672      	cpsid	i
}
 8001a54:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a56:	bf00      	nop
 8001a58:	e7fd      	b.n	8001a56 <Error_Handler+0x8>
	...

08001a5c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a62:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad4 <MX_SPI1_Init+0x78>)
 8001a64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a74:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a76:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001a7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a7e:	2202      	movs	r2, #2
 8001a80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a82:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a92:	2238      	movs	r2, #56	@ 0x38
 8001a94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001aaa:	2207      	movs	r2, #7
 8001aac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001aae:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aba:	4805      	ldr	r0, [pc, #20]	@ (8001ad0 <MX_SPI1_Init+0x74>)
 8001abc:	f005 ff08 	bl	80078d0 <HAL_SPI_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ac6:	f7ff ffc2 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200003fc 	.word	0x200003fc
 8001ad4:	40013000 	.word	0x40013000

08001ad8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001ade:	4a1c      	ldr	r2, [pc, #112]	@ (8001b50 <MX_SPI3_Init+0x78>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001ae4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ae8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001aea:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001af0:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001af2:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001af6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001af8:	4b14      	ldr	r3, [pc, #80]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001afe:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b0a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b0e:	2210      	movs	r2, #16
 8001b10:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001b24:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b26:	2207      	movs	r2, #7
 8001b28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b2a:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b36:	4805      	ldr	r0, [pc, #20]	@ (8001b4c <MX_SPI3_Init+0x74>)
 8001b38:	f005 feca 	bl	80078d0 <HAL_SPI_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001b42:	f7ff ff84 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000460 	.word	0x20000460
 8001b50:	40003c00 	.word	0x40003c00

08001b54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08c      	sub	sp, #48	@ 0x30
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a3d      	ldr	r2, [pc, #244]	@ (8001c68 <HAL_SPI_MspInit+0x114>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d129      	bne.n	8001bca <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b76:	4b3d      	ldr	r3, [pc, #244]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7a:	4a3c      	ldr	r2, [pc, #240]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001b7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b80:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b82:	4b3a      	ldr	r3, [pc, #232]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b37      	ldr	r3, [pc, #220]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b92:	4a36      	ldr	r2, [pc, #216]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b9a:	4b34      	ldr	r3, [pc, #208]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ba6:	23e0      	movs	r3, #224	@ 0xe0
 8001ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bb6:	2305      	movs	r3, #5
 8001bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 031c 	add.w	r3, r7, #28
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc4:	f004 fd00 	bl	80065c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001bc8:	e049      	b.n	8001c5e <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a28      	ldr	r2, [pc, #160]	@ (8001c70 <HAL_SPI_MspInit+0x11c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d144      	bne.n	8001c5e <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bd4:	4b25      	ldr	r3, [pc, #148]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd8:	4a24      	ldr	r2, [pc, #144]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bde:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be0:	4b22      	ldr	r3, [pc, #136]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bec:	4b1f      	ldr	r3, [pc, #124]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf0:	4a1e      	ldr	r2, [pc, #120]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001bf2:	f043 0304 	orr.w	r3, r3, #4
 8001bf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c04:	4b19      	ldr	r3, [pc, #100]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c08:	4a18      	ldr	r2, [pc, #96]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001c0a:	f043 0302 	orr.w	r3, r3, #2
 8001c0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c10:	4b16      	ldr	r3, [pc, #88]	@ (8001c6c <HAL_SPI_MspInit+0x118>)
 8001c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c1c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c2e:	2306      	movs	r3, #6
 8001c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	4619      	mov	r1, r3
 8001c38:	480e      	ldr	r0, [pc, #56]	@ (8001c74 <HAL_SPI_MspInit+0x120>)
 8001c3a:	f004 fcc5 	bl	80065c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c4e:	2306      	movs	r3, #6
 8001c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c52:	f107 031c 	add.w	r3, r7, #28
 8001c56:	4619      	mov	r1, r3
 8001c58:	4807      	ldr	r0, [pc, #28]	@ (8001c78 <HAL_SPI_MspInit+0x124>)
 8001c5a:	f004 fcb5 	bl	80065c8 <HAL_GPIO_Init>
}
 8001c5e:	bf00      	nop
 8001c60:	3730      	adds	r7, #48	@ 0x30
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40013000 	.word	0x40013000
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40003c00 	.word	0x40003c00
 8001c74:	48000800 	.word	0x48000800
 8001c78:	48000400 	.word	0x48000400

08001c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c82:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c86:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9e:	4a08      	ldr	r2, [pc, #32]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001cb2:	f004 fedf 	bl	8006a74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000

08001cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <NMI_Handler+0x4>

08001ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <HardFault_Handler+0x4>

08001cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <MemManage_Handler+0x4>

08001cdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <BusFault_Handler+0x4>

08001ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <UsageFault_Handler+0x4>

08001cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d1a:	f000 fe2d 	bl	8002978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001d28:	4802      	ldr	r0, [pc, #8]	@ (8001d34 <DMA1_Channel1_IRQHandler+0x10>)
 8001d2a:	f004 fafe 	bl	800632a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000748 	.word	0x20000748

08001d38 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d3c:	4802      	ldr	r0, [pc, #8]	@ (8001d48 <DMA1_Channel2_IRQHandler+0x10>)
 8001d3e:	f004 faf4 	bl	800632a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200007a8 	.word	0x200007a8

08001d4c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d50:	4802      	ldr	r0, [pc, #8]	@ (8001d5c <DMA1_Channel3_IRQHandler+0x10>)
 8001d52:	f004 faea 	bl	800632a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000688 	.word	0x20000688

08001d60 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d64:	4802      	ldr	r0, [pc, #8]	@ (8001d70 <DMA1_Channel4_IRQHandler+0x10>)
 8001d66:	f004 fae0 	bl	800632a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200006e8 	.word	0x200006e8

08001d74 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d78:	4803      	ldr	r0, [pc, #12]	@ (8001d88 <ADC1_2_IRQHandler+0x14>)
 8001d7a:	f001 faf1 	bl	8003360 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001d7e:	4803      	ldr	r0, [pc, #12]	@ (8001d8c <ADC1_2_IRQHandler+0x18>)
 8001d80:	f001 faee 	bl	8003360 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200002c4 	.word	0x200002c4
 8001d8c:	20000330 	.word	0x20000330

08001d90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d94:	4802      	ldr	r0, [pc, #8]	@ (8001da0 <USART2_IRQHandler+0x10>)
 8001d96:	f007 fe33 	bl	8009a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000560 	.word	0x20000560

08001da4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001da8:	4802      	ldr	r0, [pc, #8]	@ (8001db4 <USART3_IRQHandler+0x10>)
 8001daa:	f007 fe29 	bl	8009a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200005f4 	.word	0x200005f4

08001db8 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001dbc:	4802      	ldr	r0, [pc, #8]	@ (8001dc8 <COMP1_2_3_IRQHandler+0x10>)
 8001dbe:	f003 fd07 	bl	80057d0 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200003a0 	.word	0x200003a0

08001dcc <COMP4_IRQHandler>:

/**
  * @brief This function handles COMP4 interrupt through EXTI line 30.
  */
void COMP4_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP4_IRQn 0 */

  /* USER CODE END COMP4_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp4);
 8001dd0:	4802      	ldr	r0, [pc, #8]	@ (8001ddc <COMP4_IRQHandler+0x10>)
 8001dd2:	f003 fcfd 	bl	80057d0 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP4_IRQn 1 */

  /* USER CODE END COMP4_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200003c4 	.word	0x200003c4

08001de0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return 1;
 8001de4:	2301      	movs	r3, #1
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <_kill>:

int _kill(int pid, int sig)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dfa:	f00f f845 	bl	8010e88 <__errno>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2216      	movs	r2, #22
 8001e02:	601a      	str	r2, [r3, #0]
  return -1;
 8001e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <_exit>:

void _exit (int status)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e18:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ffe7 	bl	8001df0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e22:	bf00      	nop
 8001e24:	e7fd      	b.n	8001e22 <_exit+0x12>

08001e26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	e00a      	b.n	8001e4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e38:	f3af 8000 	nop.w
 8001e3c:	4601      	mov	r1, r0
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	60ba      	str	r2, [r7, #8]
 8001e44:	b2ca      	uxtb	r2, r1
 8001e46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	dbf0      	blt.n	8001e38 <_read+0x12>
  }

  return len;
 8001e56:	687b      	ldr	r3, [r7, #4]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	e009      	b.n	8001e86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	60ba      	str	r2, [r7, #8]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	3301      	adds	r3, #1
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	dbf1      	blt.n	8001e72 <_write+0x12>
  }
  return len;
 8001e8e:	687b      	ldr	r3, [r7, #4]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <_close>:

int _close(int file)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ea0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ec0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <_isatty>:

int _isatty(int file)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ed8:	2301      	movs	r3, #1
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b085      	sub	sp, #20
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f08:	4a14      	ldr	r2, [pc, #80]	@ (8001f5c <_sbrk+0x5c>)
 8001f0a:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <_sbrk+0x60>)
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f14:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <_sbrk+0x64>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	@ (8001f68 <_sbrk+0x68>)
 8001f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d207      	bcs.n	8001f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f30:	f00e ffaa 	bl	8010e88 <__errno>
 8001f34:	4603      	mov	r3, r0
 8001f36:	220c      	movs	r2, #12
 8001f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	e009      	b.n	8001f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f40:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f46:	4b07      	ldr	r3, [pc, #28]	@ (8001f64 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4a05      	ldr	r2, [pc, #20]	@ (8001f64 <_sbrk+0x64>)
 8001f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20008000 	.word	0x20008000
 8001f60:	00000400 	.word	0x00000400
 8001f64:	200004c4 	.word	0x200004c4
 8001f68:	20000e50 	.word	0x20000e50

08001f6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <SystemInit+0x20>)
 8001f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f76:	4a05      	ldr	r2, [pc, #20]	@ (8001f8c <SystemInit+0x20>)
 8001f78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b09c      	sub	sp, #112	@ 0x70
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f96:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fb0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
 8001fc0:	615a      	str	r2, [r3, #20]
 8001fc2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	2234      	movs	r2, #52	@ 0x34
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f00e fef8 	bl	8010dc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fd0:	4b5b      	ldr	r3, [pc, #364]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8001fd2:	4a5c      	ldr	r2, [pc, #368]	@ (8002144 <MX_TIM1_Init+0x1b4>)
 8001fd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8001fd6:	4b5a      	ldr	r3, [pc, #360]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001fdc:	4b58      	ldr	r3, [pc, #352]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8001fde:	2220      	movs	r2, #32
 8001fe0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8001fe2:	4b57      	ldr	r3, [pc, #348]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8001fe4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001fe8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001fea:	4b55      	ldr	r3, [pc, #340]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8001fec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ff0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001ff2:	4b53      	ldr	r3, [pc, #332]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff8:	4b51      	ldr	r3, [pc, #324]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ffe:	4850      	ldr	r0, [pc, #320]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8002000:	f006 f8a6 	bl	8008150 <HAL_TIM_Base_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800200a:	f7ff fd20 	bl	8001a4e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800200e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002012:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002014:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002018:	4619      	mov	r1, r3
 800201a:	4849      	ldr	r0, [pc, #292]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 800201c:	f006 fc5e 	bl	80088dc <HAL_TIM_ConfigClockSource>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8002026:	f7ff fd12 	bl	8001a4e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800202a:	4845      	ldr	r0, [pc, #276]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 800202c:	f006 f94a 	bl	80082c4 <HAL_TIM_PWM_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8002036:	f7ff fd0a 	bl	8001a4e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800203a:	2370      	movs	r3, #112	@ 0x70
 800203c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002046:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800204a:	4619      	mov	r1, r3
 800204c:	483c      	ldr	r0, [pc, #240]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 800204e:	f007 f993 	bl	8009378 <HAL_TIMEx_MasterConfigSynchronization>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002058:	f7ff fcf9 	bl	8001a4e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800205c:	2360      	movs	r3, #96	@ 0x60
 800205e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002064:	2300      	movs	r3, #0
 8002066:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002068:	2300      	movs	r3, #0
 800206a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002070:	2300      	movs	r3, #0
 8002072:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002074:	2300      	movs	r3, #0
 8002076:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002078:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800207c:	2200      	movs	r2, #0
 800207e:	4619      	mov	r1, r3
 8002080:	482f      	ldr	r0, [pc, #188]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8002082:	f006 fb17 	bl	80086b4 <HAL_TIM_PWM_ConfigChannel>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800208c:	f7ff fcdf 	bl	8001a4e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002090:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002094:	2204      	movs	r2, #4
 8002096:	4619      	mov	r1, r3
 8002098:	4829      	ldr	r0, [pc, #164]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 800209a:	f006 fb0b 	bl	80086b4 <HAL_TIM_PWM_ConfigChannel>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80020a4:	f7ff fcd3 	bl	8001a4e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020ac:	2208      	movs	r2, #8
 80020ae:	4619      	mov	r1, r3
 80020b0:	4823      	ldr	r0, [pc, #140]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 80020b2:	f006 faff 	bl	80086b4 <HAL_TIM_PWM_ConfigChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80020bc:	f7ff fcc7 	bl	8001a4e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80020c0:	2370      	movs	r3, #112	@ 0x70
 80020c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 7998;
 80020c4:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 80020c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020ce:	220c      	movs	r2, #12
 80020d0:	4619      	mov	r1, r3
 80020d2:	481b      	ldr	r0, [pc, #108]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 80020d4:	f006 faee 	bl	80086b4 <HAL_TIM_PWM_ConfigChannel>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 80020de:	f7ff fcb6 	bl	8001a4e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80020f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 2;
 80020fe:	2302      	movs	r3, #2
 8002100:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002102:	2300      	movs	r3, #0
 8002104:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800210a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800210e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002114:	2300      	movs	r3, #0
 8002116:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	4619      	mov	r1, r3
 8002120:	4807      	ldr	r0, [pc, #28]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8002122:	f007 f9ab 	bl	800947c <HAL_TIMEx_ConfigBreakDeadTime>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM1_Init+0x1a0>
  {
    Error_Handler();
 800212c:	f7ff fc8f 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002130:	4803      	ldr	r0, [pc, #12]	@ (8002140 <MX_TIM1_Init+0x1b0>)
 8002132:	f000 f93f 	bl	80023b4 <HAL_TIM_MspPostInit>

}
 8002136:	bf00      	nop
 8002138:	3770      	adds	r7, #112	@ 0x70
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200004c8 	.word	0x200004c8
 8002144:	40012c00 	.word	0x40012c00

08002148 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b09e      	sub	sp, #120	@ 0x78
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800214e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800215c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8002168:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002174:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
 8002184:	615a      	str	r2, [r3, #20]
 8002186:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002188:	463b      	mov	r3, r7
 800218a:	2234      	movs	r2, #52	@ 0x34
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f00e fe16 	bl	8010dc0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002194:	4b6b      	ldr	r3, [pc, #428]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 8002196:	4a6c      	ldr	r2, [pc, #432]	@ (8002348 <MX_TIM8_Init+0x200>)
 8002198:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800219a:	4b6a      	ldr	r3, [pc, #424]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 800219c:	2200      	movs	r2, #0
 800219e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80021a0:	4b68      	ldr	r3, [pc, #416]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80021a2:	2220      	movs	r2, #32
 80021a4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7999;
 80021a6:	4b67      	ldr	r3, [pc, #412]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80021a8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80021ac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80021ae:	4b65      	ldr	r3, [pc, #404]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80021b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021b4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 1;
 80021b6:	4b63      	ldr	r3, [pc, #396]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021bc:	4b61      	ldr	r3, [pc, #388]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80021be:	2200      	movs	r2, #0
 80021c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80021c2:	4860      	ldr	r0, [pc, #384]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80021c4:	f005 ffc4 	bl	8008150 <HAL_TIM_Base_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80021ce:	f7ff fc3e 	bl	8001a4e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80021d8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80021dc:	4619      	mov	r1, r3
 80021de:	4859      	ldr	r0, [pc, #356]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80021e0:	f006 fb7c 	bl	80088dc <HAL_TIM_ConfigClockSource>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80021ea:	f7ff fc30 	bl	8001a4e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80021ee:	4855      	ldr	r0, [pc, #340]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80021f0:	f006 f868 	bl	80082c4 <HAL_TIM_PWM_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 80021fa:	f7ff fc28 	bl	8001a4e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80021fe:	2370      	movs	r3, #112	@ 0x70
 8002200:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800220a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800220e:	4619      	mov	r1, r3
 8002210:	484c      	ldr	r0, [pc, #304]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 8002212:	f007 f8b1 	bl	8009378 <HAL_TIMEx_MasterConfigSynchronization>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM8_Init+0xd8>
  {
    Error_Handler();
 800221c:	f7ff fc17 	bl	8001a4e <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8002220:	2302      	movs	r3, #2
 8002222:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8002224:	2301      	movs	r3, #1
 8002226:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8002228:	2300      	movs	r3, #0
 800222a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim8, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800222c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002230:	461a      	mov	r2, r3
 8002232:	2101      	movs	r1, #1
 8002234:	4843      	ldr	r0, [pc, #268]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 8002236:	f007 f9ad 	bl	8009594 <HAL_TIMEx_ConfigBreakInput>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8002240:	f7ff fc05 	bl	8001a4e <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8002244:	2310      	movs	r3, #16
 8002246:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim8, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002248:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800224c:	461a      	mov	r2, r3
 800224e:	2101      	movs	r1, #1
 8002250:	483c      	ldr	r0, [pc, #240]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 8002252:	f007 f99f 	bl	8009594 <HAL_TIMEx_ConfigBreakInput>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 800225c:	f7ff fbf7 	bl	8001a4e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002260:	2360      	movs	r3, #96	@ 0x60
 8002262:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002268:	2300      	movs	r3, #0
 800226a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800226c:	2300      	movs	r3, #0
 800226e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002270:	2300      	movs	r3, #0
 8002272:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002274:	2300      	movs	r3, #0
 8002276:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002278:	2300      	movs	r3, #0
 800227a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800227c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002280:	2200      	movs	r2, #0
 8002282:	4619      	mov	r1, r3
 8002284:	482f      	ldr	r0, [pc, #188]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 8002286:	f006 fa15 	bl	80086b4 <HAL_TIM_PWM_ConfigChannel>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM8_Init+0x14c>
  {
    Error_Handler();
 8002290:	f7ff fbdd 	bl	8001a4e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002294:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002298:	2204      	movs	r2, #4
 800229a:	4619      	mov	r1, r3
 800229c:	4829      	ldr	r0, [pc, #164]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 800229e:	f006 fa09 	bl	80086b4 <HAL_TIM_PWM_ConfigChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 80022a8:	f7ff fbd1 	bl	8001a4e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022b0:	2208      	movs	r2, #8
 80022b2:	4619      	mov	r1, r3
 80022b4:	4823      	ldr	r0, [pc, #140]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80022b6:	f006 f9fd 	bl	80086b4 <HAL_TIM_PWM_ConfigChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_TIM8_Init+0x17c>
  {
    Error_Handler();
 80022c0:	f7ff fbc5 	bl	8001a4e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80022c4:	2370      	movs	r3, #112	@ 0x70
 80022c6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 7998;
 80022c8:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 80022cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022d2:	220c      	movs	r2, #12
 80022d4:	4619      	mov	r1, r3
 80022d6:	481b      	ldr	r0, [pc, #108]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 80022d8:	f006 f9ec 	bl	80086b4 <HAL_TIM_PWM_ConfigChannel>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM8_Init+0x19e>
  {
    Error_Handler();
 80022e2:	f7ff fbb4 	bl	8001a4e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80022f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002300:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8002302:	230a      	movs	r3, #10
 8002304:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800230e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002318:	2300      	movs	r3, #0
 800231a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002320:	463b      	mov	r3, r7
 8002322:	4619      	mov	r1, r3
 8002324:	4807      	ldr	r0, [pc, #28]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 8002326:	f007 f8a9 	bl	800947c <HAL_TIMEx_ConfigBreakDeadTime>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM8_Init+0x1ec>
  {
    Error_Handler();
 8002330:	f7ff fb8d 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002334:	4803      	ldr	r0, [pc, #12]	@ (8002344 <MX_TIM8_Init+0x1fc>)
 8002336:	f000 f83d 	bl	80023b4 <HAL_TIM_MspPostInit>

}
 800233a:	bf00      	nop
 800233c:	3778      	adds	r7, #120	@ 0x78
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000514 	.word	0x20000514
 8002348:	40013400 	.word	0x40013400

0800234c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a13      	ldr	r2, [pc, #76]	@ (80023a8 <HAL_TIM_Base_MspInit+0x5c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d10c      	bne.n	8002378 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800235e:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <HAL_TIM_Base_MspInit+0x60>)
 8002360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002362:	4a12      	ldr	r2, [pc, #72]	@ (80023ac <HAL_TIM_Base_MspInit+0x60>)
 8002364:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002368:	6613      	str	r3, [r2, #96]	@ 0x60
 800236a:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <HAL_TIM_Base_MspInit+0x60>)
 800236c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800236e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002376:	e010      	b.n	800239a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM8)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0c      	ldr	r2, [pc, #48]	@ (80023b0 <HAL_TIM_Base_MspInit+0x64>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d10b      	bne.n	800239a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002382:	4b0a      	ldr	r3, [pc, #40]	@ (80023ac <HAL_TIM_Base_MspInit+0x60>)
 8002384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002386:	4a09      	ldr	r2, [pc, #36]	@ (80023ac <HAL_TIM_Base_MspInit+0x60>)
 8002388:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800238c:	6613      	str	r3, [r2, #96]	@ 0x60
 800238e:	4b07      	ldr	r3, [pc, #28]	@ (80023ac <HAL_TIM_Base_MspInit+0x60>)
 8002390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002392:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
}
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40012c00 	.word	0x40012c00
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40013400 	.word	0x40013400

080023b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	@ 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002480 <HAL_TIM_MspPostInit+0xcc>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d11e      	bne.n	8002414 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002484 <HAL_TIM_MspPostInit+0xd0>)
 80023d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023da:	4a2a      	ldr	r2, [pc, #168]	@ (8002484 <HAL_TIM_MspPostInit+0xd0>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023e2:	4b28      	ldr	r3, [pc, #160]	@ (8002484 <HAL_TIM_MspPostInit+0xd0>)
 80023e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80023ee:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80023f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	2300      	movs	r3, #0
 80023fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002400:	2306      	movs	r3, #6
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	4619      	mov	r1, r3
 800240a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800240e:	f004 f8db 	bl	80065c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002412:	e031      	b.n	8002478 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM8)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a1b      	ldr	r2, [pc, #108]	@ (8002488 <HAL_TIM_MspPostInit+0xd4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d12c      	bne.n	8002478 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241e:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <HAL_TIM_MspPostInit+0xd0>)
 8002420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002422:	4a18      	ldr	r2, [pc, #96]	@ (8002484 <HAL_TIM_MspPostInit+0xd0>)
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800242a:	4b16      	ldr	r3, [pc, #88]	@ (8002484 <HAL_TIM_MspPostInit+0xd0>)
 800242c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002436:	2340      	movs	r3, #64	@ 0x40
 8002438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	2300      	movs	r3, #0
 8002444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8002446:	2305      	movs	r3, #5
 8002448:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244a:	f107 0314 	add.w	r3, r7, #20
 800244e:	4619      	mov	r1, r3
 8002450:	480e      	ldr	r0, [pc, #56]	@ (800248c <HAL_TIM_MspPostInit+0xd8>)
 8002452:	f004 f8b9 	bl	80065c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002456:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800245a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002468:	230a      	movs	r3, #10
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	4806      	ldr	r0, [pc, #24]	@ (800248c <HAL_TIM_MspPostInit+0xd8>)
 8002474:	f004 f8a8 	bl	80065c8 <HAL_GPIO_Init>
}
 8002478:	bf00      	nop
 800247a:	3728      	adds	r7, #40	@ 0x28
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40012c00 	.word	0x40012c00
 8002484:	40021000 	.word	0x40021000
 8002488:	40013400 	.word	0x40013400
 800248c:	48000400 	.word	0x48000400

08002490 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002494:	4b22      	ldr	r3, [pc, #136]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 8002496:	4a23      	ldr	r2, [pc, #140]	@ (8002524 <MX_USART2_UART_Init+0x94>)
 8002498:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800249a:	4b21      	ldr	r3, [pc, #132]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 800249c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024b6:	220c      	movs	r2, #12
 80024b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ba:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c0:	4b17      	ldr	r3, [pc, #92]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024c6:	4b16      	ldr	r3, [pc, #88]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024cc:	4b14      	ldr	r3, [pc, #80]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024d2:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024d8:	4811      	ldr	r0, [pc, #68]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024da:	f007 f933 	bl	8009744 <HAL_UART_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80024e4:	f7ff fab3 	bl	8001a4e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024e8:	2100      	movs	r1, #0
 80024ea:	480d      	ldr	r0, [pc, #52]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024ec:	f008 fd99 	bl	800b022 <HAL_UARTEx_SetTxFifoThreshold>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80024f6:	f7ff faaa 	bl	8001a4e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024fa:	2100      	movs	r1, #0
 80024fc:	4808      	ldr	r0, [pc, #32]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 80024fe:	f008 fdce 	bl	800b09e <HAL_UARTEx_SetRxFifoThreshold>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002508:	f7ff faa1 	bl	8001a4e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800250c:	4804      	ldr	r0, [pc, #16]	@ (8002520 <MX_USART2_UART_Init+0x90>)
 800250e:	f008 fd4f 	bl	800afb0 <HAL_UARTEx_DisableFifoMode>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002518:	f7ff fa99 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000560 	.word	0x20000560
 8002524:	40004400 	.word	0x40004400

08002528 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800252c:	4b22      	ldr	r3, [pc, #136]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 800252e:	4a23      	ldr	r2, [pc, #140]	@ (80025bc <MX_USART3_UART_Init+0x94>)
 8002530:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8002532:	4b21      	ldr	r3, [pc, #132]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 8002534:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002538:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800253a:	4b1f      	ldr	r3, [pc, #124]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002540:	4b1d      	ldr	r3, [pc, #116]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002546:	4b1c      	ldr	r3, [pc, #112]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800254c:	4b1a      	ldr	r3, [pc, #104]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 800254e:	220c      	movs	r2, #12
 8002550:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002552:	4b19      	ldr	r3, [pc, #100]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002558:	4b17      	ldr	r3, [pc, #92]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 800255a:	2200      	movs	r2, #0
 800255c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800255e:	4b16      	ldr	r3, [pc, #88]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 8002560:	2200      	movs	r2, #0
 8002562:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002564:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 8002566:	2200      	movs	r2, #0
 8002568:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800256a:	4b13      	ldr	r3, [pc, #76]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 800256c:	2200      	movs	r2, #0
 800256e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002570:	4811      	ldr	r0, [pc, #68]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 8002572:	f007 f8e7 	bl	8009744 <HAL_UART_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800257c:	f7ff fa67 	bl	8001a4e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002580:	2100      	movs	r1, #0
 8002582:	480d      	ldr	r0, [pc, #52]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 8002584:	f008 fd4d 	bl	800b022 <HAL_UARTEx_SetTxFifoThreshold>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800258e:	f7ff fa5e 	bl	8001a4e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002592:	2100      	movs	r1, #0
 8002594:	4808      	ldr	r0, [pc, #32]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 8002596:	f008 fd82 	bl	800b09e <HAL_UARTEx_SetRxFifoThreshold>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80025a0:	f7ff fa55 	bl	8001a4e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80025a4:	4804      	ldr	r0, [pc, #16]	@ (80025b8 <MX_USART3_UART_Init+0x90>)
 80025a6:	f008 fd03 	bl	800afb0 <HAL_UARTEx_DisableFifoMode>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80025b0:	f7ff fa4d 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	200005f4 	.word	0x200005f4
 80025bc:	40004800 	.word	0x40004800

080025c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b09c      	sub	sp, #112	@ 0x70
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025d8:	f107 0318 	add.w	r3, r7, #24
 80025dc:	2244      	movs	r2, #68	@ 0x44
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f00e fbed 	bl	8010dc0 <memset>
  if(uartHandle->Instance==USART2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a99      	ldr	r2, [pc, #612]	@ (8002850 <HAL_UART_MspInit+0x290>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	f040 8093 	bne.w	8002718 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025f2:	2302      	movs	r3, #2
 80025f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025fa:	f107 0318 	add.w	r3, r7, #24
 80025fe:	4618      	mov	r0, r3
 8002600:	f004 ff76 	bl	80074f0 <HAL_RCCEx_PeriphCLKConfig>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800260a:	f7ff fa20 	bl	8001a4e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800260e:	4b91      	ldr	r3, [pc, #580]	@ (8002854 <HAL_UART_MspInit+0x294>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002612:	4a90      	ldr	r2, [pc, #576]	@ (8002854 <HAL_UART_MspInit+0x294>)
 8002614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002618:	6593      	str	r3, [r2, #88]	@ 0x58
 800261a:	4b8e      	ldr	r3, [pc, #568]	@ (8002854 <HAL_UART_MspInit+0x294>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002626:	4b8b      	ldr	r3, [pc, #556]	@ (8002854 <HAL_UART_MspInit+0x294>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262a:	4a8a      	ldr	r2, [pc, #552]	@ (8002854 <HAL_UART_MspInit+0x294>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002632:	4b88      	ldr	r3, [pc, #544]	@ (8002854 <HAL_UART_MspInit+0x294>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800263e:	230c      	movs	r3, #12
 8002640:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264a:	2300      	movs	r3, #0
 800264c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800264e:	2307      	movs	r3, #7
 8002650:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002656:	4619      	mov	r1, r3
 8002658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800265c:	f003 ffb4 	bl	80065c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8002660:	4b7d      	ldr	r3, [pc, #500]	@ (8002858 <HAL_UART_MspInit+0x298>)
 8002662:	4a7e      	ldr	r2, [pc, #504]	@ (800285c <HAL_UART_MspInit+0x29c>)
 8002664:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002666:	4b7c      	ldr	r3, [pc, #496]	@ (8002858 <HAL_UART_MspInit+0x298>)
 8002668:	221a      	movs	r2, #26
 800266a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800266c:	4b7a      	ldr	r3, [pc, #488]	@ (8002858 <HAL_UART_MspInit+0x298>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002672:	4b79      	ldr	r3, [pc, #484]	@ (8002858 <HAL_UART_MspInit+0x298>)
 8002674:	2200      	movs	r2, #0
 8002676:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002678:	4b77      	ldr	r3, [pc, #476]	@ (8002858 <HAL_UART_MspInit+0x298>)
 800267a:	2280      	movs	r2, #128	@ 0x80
 800267c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800267e:	4b76      	ldr	r3, [pc, #472]	@ (8002858 <HAL_UART_MspInit+0x298>)
 8002680:	2200      	movs	r2, #0
 8002682:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <HAL_UART_MspInit+0x298>)
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800268a:	4b73      	ldr	r3, [pc, #460]	@ (8002858 <HAL_UART_MspInit+0x298>)
 800268c:	2200      	movs	r2, #0
 800268e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002690:	4b71      	ldr	r3, [pc, #452]	@ (8002858 <HAL_UART_MspInit+0x298>)
 8002692:	2200      	movs	r2, #0
 8002694:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002696:	4870      	ldr	r0, [pc, #448]	@ (8002858 <HAL_UART_MspInit+0x298>)
 8002698:	f003 fc64 	bl	8005f64 <HAL_DMA_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80026a2:	f7ff f9d4 	bl	8001a4e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a6b      	ldr	r2, [pc, #428]	@ (8002858 <HAL_UART_MspInit+0x298>)
 80026aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80026ae:	4a6a      	ldr	r2, [pc, #424]	@ (8002858 <HAL_UART_MspInit+0x298>)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80026b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026b6:	4a6b      	ldr	r2, [pc, #428]	@ (8002864 <HAL_UART_MspInit+0x2a4>)
 80026b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80026ba:	4b69      	ldr	r3, [pc, #420]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026bc:	221b      	movs	r2, #27
 80026be:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026c0:	4b67      	ldr	r3, [pc, #412]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026c2:	2210      	movs	r2, #16
 80026c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026c6:	4b66      	ldr	r3, [pc, #408]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026cc:	4b64      	ldr	r3, [pc, #400]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026ce:	2280      	movs	r2, #128	@ 0x80
 80026d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026d2:	4b63      	ldr	r3, [pc, #396]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026d8:	4b61      	ldr	r3, [pc, #388]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80026de:	4b60      	ldr	r3, [pc, #384]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80026ea:	485d      	ldr	r0, [pc, #372]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026ec:	f003 fc3a 	bl	8005f64 <HAL_DMA_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80026f6:	f7ff f9aa 	bl	8001a4e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a58      	ldr	r2, [pc, #352]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 80026fe:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002700:	4a57      	ldr	r2, [pc, #348]	@ (8002860 <HAL_UART_MspInit+0x2a0>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2100      	movs	r1, #0
 800270a:	2026      	movs	r0, #38	@ 0x26
 800270c:	f003 f981 	bl	8005a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002710:	2026      	movs	r0, #38	@ 0x26
 8002712:	f003 f998 	bl	8005a46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002716:	e097      	b.n	8002848 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART3)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a52      	ldr	r2, [pc, #328]	@ (8002868 <HAL_UART_MspInit+0x2a8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	f040 8092 	bne.w	8002848 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002724:	2304      	movs	r3, #4
 8002726:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800272c:	f107 0318 	add.w	r3, r7, #24
 8002730:	4618      	mov	r0, r3
 8002732:	f004 fedd 	bl	80074f0 <HAL_RCCEx_PeriphCLKConfig>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_UART_MspInit+0x180>
      Error_Handler();
 800273c:	f7ff f987 	bl	8001a4e <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002740:	4b44      	ldr	r3, [pc, #272]	@ (8002854 <HAL_UART_MspInit+0x294>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002744:	4a43      	ldr	r2, [pc, #268]	@ (8002854 <HAL_UART_MspInit+0x294>)
 8002746:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800274a:	6593      	str	r3, [r2, #88]	@ 0x58
 800274c:	4b41      	ldr	r3, [pc, #260]	@ (8002854 <HAL_UART_MspInit+0x294>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002750:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002758:	4b3e      	ldr	r3, [pc, #248]	@ (8002854 <HAL_UART_MspInit+0x294>)
 800275a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275c:	4a3d      	ldr	r2, [pc, #244]	@ (8002854 <HAL_UART_MspInit+0x294>)
 800275e:	f043 0302 	orr.w	r3, r3, #2
 8002762:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002764:	4b3b      	ldr	r3, [pc, #236]	@ (8002854 <HAL_UART_MspInit+0x294>)
 8002766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002770:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002774:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	2300      	movs	r3, #0
 8002780:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002782:	2307      	movs	r3, #7
 8002784:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002786:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800278a:	4619      	mov	r1, r3
 800278c:	4837      	ldr	r0, [pc, #220]	@ (800286c <HAL_UART_MspInit+0x2ac>)
 800278e:	f003 ff1b 	bl	80065c8 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel1;
 8002792:	4b37      	ldr	r3, [pc, #220]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 8002794:	4a37      	ldr	r2, [pc, #220]	@ (8002874 <HAL_UART_MspInit+0x2b4>)
 8002796:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002798:	4b35      	ldr	r3, [pc, #212]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 800279a:	221d      	movs	r2, #29
 800279c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800279e:	4b34      	ldr	r3, [pc, #208]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027a0:	2210      	movs	r2, #16
 80027a2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027a4:	4b32      	ldr	r3, [pc, #200]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027aa:	4b31      	ldr	r3, [pc, #196]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027ac:	2280      	movs	r2, #128	@ 0x80
 80027ae:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80027bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027be:	2200      	movs	r2, #0
 80027c0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80027c8:	4829      	ldr	r0, [pc, #164]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027ca:	f003 fbcb 	bl	8005f64 <HAL_DMA_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_UART_MspInit+0x218>
      Error_Handler();
 80027d4:	f7ff f93b 	bl	8001a4e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a25      	ldr	r2, [pc, #148]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027dc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80027de:	4a24      	ldr	r2, [pc, #144]	@ (8002870 <HAL_UART_MspInit+0x2b0>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart3_rx.Instance = DMA1_Channel2;
 80027e4:	4b24      	ldr	r3, [pc, #144]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 80027e6:	4a25      	ldr	r2, [pc, #148]	@ (800287c <HAL_UART_MspInit+0x2bc>)
 80027e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80027ea:	4b23      	ldr	r3, [pc, #140]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 80027ec:	221c      	movs	r2, #28
 80027ee:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027f0:	4b21      	ldr	r3, [pc, #132]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027f6:	4b20      	ldr	r3, [pc, #128]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 80027fe:	2280      	movs	r2, #128	@ 0x80
 8002800:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002802:	4b1d      	ldr	r3, [pc, #116]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 8002804:	2200      	movs	r2, #0
 8002806:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002808:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800280e:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 8002810:	2200      	movs	r2, #0
 8002812:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002814:	4b18      	ldr	r3, [pc, #96]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 8002816:	2200      	movs	r2, #0
 8002818:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800281a:	4817      	ldr	r0, [pc, #92]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 800281c:	f003 fba2 	bl	8005f64 <HAL_DMA_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_UART_MspInit+0x26a>
      Error_Handler();
 8002826:	f7ff f912 	bl	8001a4e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a12      	ldr	r2, [pc, #72]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 800282e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002832:	4a11      	ldr	r2, [pc, #68]	@ (8002878 <HAL_UART_MspInit+0x2b8>)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8002838:	2200      	movs	r2, #0
 800283a:	2101      	movs	r1, #1
 800283c:	2027      	movs	r0, #39	@ 0x27
 800283e:	f003 f8e8 	bl	8005a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002842:	2027      	movs	r0, #39	@ 0x27
 8002844:	f003 f8ff 	bl	8005a46 <HAL_NVIC_EnableIRQ>
}
 8002848:	bf00      	nop
 800284a:	3770      	adds	r7, #112	@ 0x70
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40004400 	.word	0x40004400
 8002854:	40021000 	.word	0x40021000
 8002858:	20000688 	.word	0x20000688
 800285c:	40020030 	.word	0x40020030
 8002860:	200006e8 	.word	0x200006e8
 8002864:	40020044 	.word	0x40020044
 8002868:	40004800 	.word	0x40004800
 800286c:	48000400 	.word	0x48000400
 8002870:	20000748 	.word	0x20000748
 8002874:	40020008 	.word	0x40020008
 8002878:	200007a8 	.word	0x200007a8
 800287c:	4002001c 	.word	0x4002001c

08002880 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002880:	480d      	ldr	r0, [pc, #52]	@ (80028b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002882:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002884:	f7ff fb72 	bl	8001f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002888:	480c      	ldr	r0, [pc, #48]	@ (80028bc <LoopForever+0x6>)
  ldr r1, =_edata
 800288a:	490d      	ldr	r1, [pc, #52]	@ (80028c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800288c:	4a0d      	ldr	r2, [pc, #52]	@ (80028c4 <LoopForever+0xe>)
  movs r3, #0
 800288e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002890:	e002      	b.n	8002898 <LoopCopyDataInit>

08002892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002896:	3304      	adds	r3, #4

08002898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800289a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800289c:	d3f9      	bcc.n	8002892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800289e:	4a0a      	ldr	r2, [pc, #40]	@ (80028c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028a0:	4c0a      	ldr	r4, [pc, #40]	@ (80028cc <LoopForever+0x16>)
  movs r3, #0
 80028a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028a4:	e001      	b.n	80028aa <LoopFillZerobss>

080028a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a8:	3204      	adds	r2, #4

080028aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028ac:	d3fb      	bcc.n	80028a6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80028ae:	f00e faf1 	bl	8010e94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028b2:	f7fe ffcf 	bl	8001854 <main>

080028b6 <LoopForever>:

LoopForever:
    b LoopForever
 80028b6:	e7fe      	b.n	80028b6 <LoopForever>
  ldr   r0, =_estack
 80028b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80028bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028c0:	200002a8 	.word	0x200002a8
  ldr r2, =_sidata
 80028c4:	08014db0 	.word	0x08014db0
  ldr r2, =_sbss
 80028c8:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 80028cc:	20000e4c 	.word	0x20000e4c

080028d0 <CORDIC_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028d0:	e7fe      	b.n	80028d0 <CORDIC_IRQHandler>

080028d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028dc:	2003      	movs	r0, #3
 80028de:	f003 f88d 	bl	80059fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028e2:	200f      	movs	r0, #15
 80028e4:	f000 f80e 	bl	8002904 <HAL_InitTick>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	71fb      	strb	r3, [r7, #7]
 80028f2:	e001      	b.n	80028f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028f4:	f7ff f9c2 	bl	8001c7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028f8:	79fb      	ldrb	r3, [r7, #7]

}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002910:	4b16      	ldr	r3, [pc, #88]	@ (800296c <HAL_InitTick+0x68>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d022      	beq.n	800295e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002918:	4b15      	ldr	r3, [pc, #84]	@ (8002970 <HAL_InitTick+0x6c>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b13      	ldr	r3, [pc, #76]	@ (800296c <HAL_InitTick+0x68>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002924:	fbb1 f3f3 	udiv	r3, r1, r3
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	4618      	mov	r0, r3
 800292e:	f003 f898 	bl	8005a62 <HAL_SYSTICK_Config>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10f      	bne.n	8002958 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b0f      	cmp	r3, #15
 800293c:	d809      	bhi.n	8002952 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800293e:	2200      	movs	r2, #0
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	f04f 30ff 	mov.w	r0, #4294967295
 8002946:	f003 f864 	bl	8005a12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800294a:	4a0a      	ldr	r2, [pc, #40]	@ (8002974 <HAL_InitTick+0x70>)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	e007      	b.n	8002962 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
 8002956:	e004      	b.n	8002962 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
 800295c:	e001      	b.n	8002962 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002962:	7bfb      	ldrb	r3, [r7, #15]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000008 	.word	0x20000008
 8002970:	20000000 	.word	0x20000000
 8002974:	20000004 	.word	0x20000004

08002978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800297c:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <HAL_IncTick+0x1c>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <HAL_IncTick+0x20>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4413      	add	r3, r2
 8002986:	4a03      	ldr	r2, [pc, #12]	@ (8002994 <HAL_IncTick+0x1c>)
 8002988:	6013      	str	r3, [r2, #0]
}
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	20000808 	.word	0x20000808
 8002998:	20000008 	.word	0x20000008

0800299c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return uwTick;
 80029a0:	4b03      	ldr	r3, [pc, #12]	@ (80029b0 <HAL_GetTick+0x14>)
 80029a2:	681b      	ldr	r3, [r3, #0]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	20000808 	.word	0x20000808

080029b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029bc:	f7ff ffee 	bl	800299c <HAL_GetTick>
 80029c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029cc:	d004      	beq.n	80029d8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ce:	4b09      	ldr	r3, [pc, #36]	@ (80029f4 <HAL_Delay+0x40>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4413      	add	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029d8:	bf00      	nop
 80029da:	f7ff ffdf 	bl	800299c <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d8f7      	bhi.n	80029da <HAL_Delay+0x26>
  {
  }
}
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000008 	.word	0x20000008

080029f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	609a      	str	r2, [r3, #8]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	609a      	str	r2, [r3, #8]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3360      	adds	r3, #96	@ 0x60
 8002a72:	461a      	mov	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b08      	ldr	r3, [pc, #32]	@ (8002aa4 <LL_ADC_SetOffset+0x44>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a98:	bf00      	nop
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	03fff000 	.word	0x03fff000

08002aa8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3360      	adds	r3, #96	@ 0x60
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3360      	adds	r3, #96	@ 0x60
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002afe:	bf00      	nop
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b087      	sub	sp, #28
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	3360      	adds	r3, #96	@ 0x60
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b34:	bf00      	nop
 8002b36:	371c      	adds	r7, #28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3360      	adds	r3, #96	@ 0x60
 8002b50:	461a      	mov	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002b6a:	bf00      	nop
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	615a      	str	r2, [r3, #20]
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b087      	sub	sp, #28
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3330      	adds	r3, #48	@ 0x30
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	4413      	add	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	211f      	movs	r1, #31
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	0e9b      	lsrs	r3, r3, #26
 8002bfa:	f003 011f 	and.w	r1, r3, #31
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	fa01 f303 	lsl.w	r3, r1, r3
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c26:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	3314      	adds	r3, #20
 8002c50:	461a      	mov	r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	0e5b      	lsrs	r3, r3, #25
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	4413      	add	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	0d1b      	lsrs	r3, r3, #20
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	2107      	movs	r1, #7
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	401a      	ands	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	0d1b      	lsrs	r3, r3, #20
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	431a      	orrs	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c8a:	bf00      	nop
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f003 0318 	and.w	r3, r3, #24
 8002cba:	4908      	ldr	r1, [pc, #32]	@ (8002cdc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cbc:	40d9      	lsrs	r1, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	400b      	ands	r3, r1
 8002cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	0007ffff 	.word	0x0007ffff

08002ce0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 031f 	and.w	r3, r3, #31
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002d28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6093      	str	r3, [r2, #8]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d50:	d101      	bne.n	8002d56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d78:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002da0:	d101      	bne.n	8002da6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dc8:	f043 0201 	orr.w	r2, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002df0:	f043 0202 	orr.w	r2, r3, #2
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <LL_ADC_IsEnabled+0x18>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <LL_ADC_IsEnabled+0x1a>
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d101      	bne.n	8002e42 <LL_ADC_IsDisableOngoing+0x18>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <LL_ADC_IsDisableOngoing+0x1a>
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e64:	f043 0204 	orr.w	r2, r3, #4
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d101      	bne.n	8002e90 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d101      	bne.n	8002eb6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b089      	sub	sp, #36	@ 0x24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e167      	b.n	80031ae <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d109      	bne.n	8002f00 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7fe f9df 	bl	80012b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff19 	bl	8002d3c <LL_ADC_IsDeepPowerDownEnabled>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d004      	beq.n	8002f1a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff feff 	bl	8002d18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff34 	bl	8002d8c <LL_ADC_IsInternalRegulatorEnabled>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d115      	bne.n	8002f56 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff ff18 	bl	8002d64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f34:	4ba0      	ldr	r3, [pc, #640]	@ (80031b8 <HAL_ADC_Init+0x2f4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	099b      	lsrs	r3, r3, #6
 8002f3a:	4aa0      	ldr	r2, [pc, #640]	@ (80031bc <HAL_ADC_Init+0x2f8>)
 8002f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f40:	099b      	lsrs	r3, r3, #6
 8002f42:	3301      	adds	r3, #1
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f48:	e002      	b.n	8002f50 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f9      	bne.n	8002f4a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff ff16 	bl	8002d8c <LL_ADC_IsInternalRegulatorEnabled>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10d      	bne.n	8002f82 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6a:	f043 0210 	orr.w	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff ff76 	bl	8002e78 <LL_ADC_REG_IsConversionOngoing>
 8002f8c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f040 8100 	bne.w	800319c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f040 80fc 	bne.w	800319c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002fac:	f043 0202 	orr.w	r2, r3, #2
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff ff23 	bl	8002e04 <LL_ADC_IsEnabled>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d111      	bne.n	8002fe8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fc4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002fc8:	f7ff ff1c 	bl	8002e04 <LL_ADC_IsEnabled>
 8002fcc:	4604      	mov	r4, r0
 8002fce:	487c      	ldr	r0, [pc, #496]	@ (80031c0 <HAL_ADC_Init+0x2fc>)
 8002fd0:	f7ff ff18 	bl	8002e04 <LL_ADC_IsEnabled>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	4323      	orrs	r3, r4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d105      	bne.n	8002fe8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4878      	ldr	r0, [pc, #480]	@ (80031c4 <HAL_ADC_Init+0x300>)
 8002fe4:	f7ff fd08 	bl	80029f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	7f5b      	ldrb	r3, [r3, #29]
 8002fec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ff2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ff8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ffe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003006:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003012:	2b01      	cmp	r3, #1
 8003014:	d106      	bne.n	8003024 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301a:	3b01      	subs	r3, #1
 800301c:	045b      	lsls	r3, r3, #17
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003028:	2b00      	cmp	r3, #0
 800302a:	d009      	beq.n	8003040 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003030:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003038:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	4b60      	ldr	r3, [pc, #384]	@ (80031c8 <HAL_ADC_Init+0x304>)
 8003048:	4013      	ands	r3, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	69b9      	ldr	r1, [r7, #24]
 8003050:	430b      	orrs	r3, r1
 8003052:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff ff15 	bl	8002e9e <LL_ADC_INJ_IsConversionOngoing>
 8003074:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d16d      	bne.n	8003158 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d16a      	bne.n	8003158 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003086:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800308e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800309e:	f023 0302 	bic.w	r3, r3, #2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	69b9      	ldr	r1, [r7, #24]
 80030a8:	430b      	orrs	r3, r1
 80030aa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d017      	beq.n	80030e4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80030c2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030cc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6911      	ldr	r1, [r2, #16]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	430b      	orrs	r3, r1
 80030de:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80030e2:	e013      	b.n	800310c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80030f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003104:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003108:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003112:	2b01      	cmp	r3, #1
 8003114:	d118      	bne.n	8003148 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003120:	f023 0304 	bic.w	r3, r3, #4
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800312c:	4311      	orrs	r1, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003132:	4311      	orrs	r1, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003138:	430a      	orrs	r2, r1
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	611a      	str	r2, [r3, #16]
 8003146:	e007      	b.n	8003158 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0201 	bic.w	r2, r2, #1
 8003156:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d10c      	bne.n	800317a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	f023 010f 	bic.w	r1, r3, #15
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	1e5a      	subs	r2, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	631a      	str	r2, [r3, #48]	@ 0x30
 8003178:	e007      	b.n	800318a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 020f 	bic.w	r2, r2, #15
 8003188:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318e:	f023 0303 	bic.w	r3, r3, #3
 8003192:	f043 0201 	orr.w	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	65da      	str	r2, [r3, #92]	@ 0x5c
 800319a:	e007      	b.n	80031ac <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a0:	f043 0210 	orr.w	r2, r3, #16
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3724      	adds	r7, #36	@ 0x24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd90      	pop	{r4, r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000000 	.word	0x20000000
 80031bc:	053e2d63 	.word	0x053e2d63
 80031c0:	50000100 	.word	0x50000100
 80031c4:	50000300 	.word	0x50000300
 80031c8:	fff04007 	.word	0xfff04007

080031cc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031d4:	4859      	ldr	r0, [pc, #356]	@ (800333c <HAL_ADC_Start+0x170>)
 80031d6:	f7ff fd83 	bl	8002ce0 <LL_ADC_GetMultimode>
 80031da:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fe49 	bl	8002e78 <LL_ADC_REG_IsConversionOngoing>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f040 809f 	bne.w	800332c <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_Start+0x30>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e09a      	b.n	8003332 <HAL_ADC_Start+0x166>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 fed3 	bl	8003fb0 <ADC_Enable>
 800320a:	4603      	mov	r3, r0
 800320c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800320e:	7dfb      	ldrb	r3, [r7, #23]
 8003210:	2b00      	cmp	r3, #0
 8003212:	f040 8086 	bne.w	8003322 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a44      	ldr	r2, [pc, #272]	@ (8003340 <HAL_ADC_Start+0x174>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d002      	beq.n	800323a <HAL_ADC_Start+0x6e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	e001      	b.n	800323e <HAL_ADC_Start+0x72>
 800323a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	4293      	cmp	r3, r2
 8003244:	d002      	beq.n	800324c <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d105      	bne.n	8003258 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003250:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003260:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003264:	d106      	bne.n	8003274 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326a:	f023 0206 	bic.w	r2, r3, #6
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	661a      	str	r2, [r3, #96]	@ 0x60
 8003272:	e002      	b.n	800327a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	221c      	movs	r2, #28
 8003280:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a2c      	ldr	r2, [pc, #176]	@ (8003340 <HAL_ADC_Start+0x174>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d002      	beq.n	800329a <HAL_ADC_Start+0xce>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	e001      	b.n	800329e <HAL_ADC_Start+0xd2>
 800329a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d008      	beq.n	80032b8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	2b05      	cmp	r3, #5
 80032b0:	d002      	beq.n	80032b8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b09      	cmp	r3, #9
 80032b6:	d114      	bne.n	80032e2 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d007      	beq.n	80032d6 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80032ce:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff fdb8 	bl	8002e50 <LL_ADC_REG_StartConversion>
 80032e0:	e026      	b.n	8003330 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a13      	ldr	r2, [pc, #76]	@ (8003340 <HAL_ADC_Start+0x174>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d002      	beq.n	80032fe <HAL_ADC_Start+0x132>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	e001      	b.n	8003302 <HAL_ADC_Start+0x136>
 80032fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003302:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00f      	beq.n	8003330 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003314:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003318:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003320:	e006      	b.n	8003330 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800332a:	e001      	b.n	8003330 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800332c:	2302      	movs	r3, #2
 800332e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003330:	7dfb      	ldrb	r3, [r7, #23]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	50000300 	.word	0x50000300
 8003340:	50000100 	.word	0x50000100

08003344 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	@ 0x28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003368:	2300      	movs	r3, #0
 800336a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800337c:	4883      	ldr	r0, [pc, #524]	@ (800358c <HAL_ADC_IRQHandler+0x22c>)
 800337e:	f7ff fcaf 	bl	8002ce0 <LL_ADC_GetMultimode>
 8003382:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d017      	beq.n	80033be <HAL_ADC_IRQHandler+0x5e>
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d012      	beq.n	80033be <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f001 fa9d 	bl	80048f0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2202      	movs	r2, #2
 80033bc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <HAL_ADC_IRQHandler+0x72>
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 8085 	beq.w	80034e8 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d07f      	beq.n	80034e8 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d105      	bne.n	8003400 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fbc9 	bl	8002b9c <LL_ADC_REG_IsTriggerSourceSWStart>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d064      	beq.n	80034da <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a5e      	ldr	r2, [pc, #376]	@ (8003590 <HAL_ADC_IRQHandler+0x230>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d002      	beq.n	8003420 <HAL_ADC_IRQHandler+0xc0>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	e001      	b.n	8003424 <HAL_ADC_IRQHandler+0xc4>
 8003420:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	4293      	cmp	r3, r2
 800342a:	d008      	beq.n	800343e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b05      	cmp	r3, #5
 8003436:	d002      	beq.n	800343e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2b09      	cmp	r3, #9
 800343c:	d104      	bne.n	8003448 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	623b      	str	r3, [r7, #32]
 8003446:	e00d      	b.n	8003464 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a50      	ldr	r2, [pc, #320]	@ (8003590 <HAL_ADC_IRQHandler+0x230>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d002      	beq.n	8003458 <HAL_ADC_IRQHandler+0xf8>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	e001      	b.n	800345c <HAL_ADC_IRQHandler+0xfc>
 8003458:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800345c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d135      	bne.n	80034da <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b08      	cmp	r3, #8
 800347a:	d12e      	bne.n	80034da <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fcf9 	bl	8002e78 <LL_ADC_REG_IsConversionOngoing>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d11a      	bne.n	80034c2 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 020c 	bic.w	r2, r2, #12
 800349a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d112      	bne.n	80034da <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b8:	f043 0201 	orr.w	r2, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034c0:	e00b      	b.n	80034da <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c6:	f043 0210 	orr.w	r2, r3, #16
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d2:	f043 0201 	orr.w	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f95a 	bl	8003794 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	220c      	movs	r2, #12
 80034e6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d004      	beq.n	80034fc <HAL_ADC_IRQHandler+0x19c>
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10b      	bne.n	8003514 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 809e 	beq.w	8003644 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8098 	beq.w	8003644 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	d105      	bne.n	800352c <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003524:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff fb72 	bl	8002c1a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003536:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fb2d 	bl	8002b9c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003542:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a11      	ldr	r2, [pc, #68]	@ (8003590 <HAL_ADC_IRQHandler+0x230>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d002      	beq.n	8003554 <HAL_ADC_IRQHandler+0x1f4>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	e001      	b.n	8003558 <HAL_ADC_IRQHandler+0x1f8>
 8003554:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	4293      	cmp	r3, r2
 800355e:	d008      	beq.n	8003572 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2b06      	cmp	r3, #6
 800356a:	d002      	beq.n	8003572 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	2b07      	cmp	r3, #7
 8003570:	d104      	bne.n	800357c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	623b      	str	r3, [r7, #32]
 800357a:	e011      	b.n	80035a0 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a03      	ldr	r2, [pc, #12]	@ (8003590 <HAL_ADC_IRQHandler+0x230>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d006      	beq.n	8003594 <HAL_ADC_IRQHandler+0x234>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	e005      	b.n	8003598 <HAL_ADC_IRQHandler+0x238>
 800358c:	50000300 	.word	0x50000300
 8003590:	50000100 	.word	0x50000100
 8003594:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003598:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d047      	beq.n	8003636 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d007      	beq.n	80035c0 <HAL_ADC_IRQHandler+0x260>
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d03f      	beq.n	8003636 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d13a      	bne.n	8003636 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ca:	2b40      	cmp	r3, #64	@ 0x40
 80035cc:	d133      	bne.n	8003636 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d12e      	bne.n	8003636 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fc5e 	bl	8002e9e <LL_ADC_INJ_IsConversionOngoing>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d11a      	bne.n	800361e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035f6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d112      	bne.n	8003636 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003614:	f043 0201 	orr.w	r2, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800361c:	e00b      	b.n	8003636 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003622:	f043 0210 	orr.w	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362e:	f043 0201 	orr.w	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f009 fcae 	bl	800cf98 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2260      	movs	r2, #96	@ 0x60
 8003642:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364a:	2b00      	cmp	r3, #0
 800364c:	d011      	beq.n	8003672 <HAL_ADC_IRQHandler+0x312>
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00c      	beq.n	8003672 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f89f 	bl	80037a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2280      	movs	r2, #128	@ 0x80
 8003670:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d012      	beq.n	80036a2 <HAL_ADC_IRQHandler+0x342>
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00d      	beq.n	80036a2 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f001 f918 	bl	80048c8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d012      	beq.n	80036d2 <HAL_ADC_IRQHandler+0x372>
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00d      	beq.n	80036d2 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f001 f90a 	bl	80048dc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d036      	beq.n	800374a <HAL_ADC_IRQHandler+0x3ea>
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d031      	beq.n	800374a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80036ee:	2301      	movs	r3, #1
 80036f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036f2:	e014      	b.n	800371e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d008      	beq.n	800370c <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80036fa:	4825      	ldr	r0, [pc, #148]	@ (8003790 <HAL_ADC_IRQHandler+0x430>)
 80036fc:	f7ff fafe 	bl	8002cfc <LL_ADC_GetMultiDMATransfer>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00b      	beq.n	800371e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003706:	2301      	movs	r3, #1
 8003708:	627b      	str	r3, [r7, #36]	@ 0x24
 800370a:	e008      	b.n	800371e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800371a:	2301      	movs	r3, #1
 800371c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	2b01      	cmp	r3, #1
 8003722:	d10e      	bne.n	8003742 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003728:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003734:	f043 0202 	orr.w	r2, r3, #2
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f83d 	bl	80037bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2210      	movs	r2, #16
 8003748:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003750:	2b00      	cmp	r3, #0
 8003752:	d018      	beq.n	8003786 <HAL_ADC_IRQHandler+0x426>
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800375a:	2b00      	cmp	r3, #0
 800375c:	d013      	beq.n	8003786 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003762:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800376e:	f043 0208 	orr.w	r2, r3, #8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800377e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f001 f897 	bl	80048b4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003786:	bf00      	nop
 8003788:	3728      	adds	r7, #40	@ 0x28
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	50000300 	.word	0x50000300

08003794 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b0b6      	sub	sp, #216	@ 0xd8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x22>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e3c8      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x7b4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff fb3a 	bl	8002e78 <LL_ADC_REG_IsConversionOngoing>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	f040 83ad 	bne.w	8003f66 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	461a      	mov	r2, r3
 800381a:	f7ff f9d2 	bl	8002bc2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fb28 	bl	8002e78 <LL_ADC_REG_IsConversionOngoing>
 8003828:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fb34 	bl	8002e9e <LL_ADC_INJ_IsConversionOngoing>
 8003836:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800383a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800383e:	2b00      	cmp	r3, #0
 8003840:	f040 81d9 	bne.w	8003bf6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003844:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003848:	2b00      	cmp	r3, #0
 800384a:	f040 81d4 	bne.w	8003bf6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003856:	d10f      	bne.n	8003878 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2200      	movs	r2, #0
 8003862:	4619      	mov	r1, r3
 8003864:	f7ff f9ec 	bl	8002c40 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff f980 	bl	8002b76 <LL_ADC_SetSamplingTimeCommonConfig>
 8003876:	e00e      	b.n	8003896 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	6819      	ldr	r1, [r3, #0]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	461a      	mov	r2, r3
 8003886:	f7ff f9db 	bl	8002c40 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff f970 	bl	8002b76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	08db      	lsrs	r3, r3, #3
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d022      	beq.n	80038fe <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	6919      	ldr	r1, [r3, #16]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038c8:	f7ff f8ca 	bl	8002a60 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	6919      	ldr	r1, [r3, #16]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	461a      	mov	r2, r3
 80038da:	f7ff f916 	bl	8002b0a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d102      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x124>
 80038ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038f2:	e000      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x126>
 80038f4:	2300      	movs	r3, #0
 80038f6:	461a      	mov	r2, r3
 80038f8:	f7ff f922 	bl	8002b40 <LL_ADC_SetOffsetSaturation>
 80038fc:	e17b      	b.n	8003bf6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2100      	movs	r1, #0
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff f8cf 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 800390a:	4603      	mov	r3, r0
 800390c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10a      	bne.n	800392a <HAL_ADC_ConfigChannel+0x15a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2100      	movs	r1, #0
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff f8c4 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 8003920:	4603      	mov	r3, r0
 8003922:	0e9b      	lsrs	r3, r3, #26
 8003924:	f003 021f 	and.w	r2, r3, #31
 8003928:	e01e      	b.n	8003968 <HAL_ADC_ConfigChannel+0x198>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff f8b9 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 8003936:	4603      	mov	r3, r0
 8003938:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003940:	fa93 f3a3 	rbit	r3, r3
 8003944:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003948:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800394c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003950:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003958:	2320      	movs	r3, #32
 800395a:	e004      	b.n	8003966 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800395c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003960:	fab3 f383 	clz	r3, r3
 8003964:	b2db      	uxtb	r3, r3
 8003966:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003970:	2b00      	cmp	r3, #0
 8003972:	d105      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x1b0>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	0e9b      	lsrs	r3, r3, #26
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	e018      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1e2>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003988:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800398c:	fa93 f3a3 	rbit	r3, r3
 8003990:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003994:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003998:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800399c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80039a4:	2320      	movs	r3, #32
 80039a6:	e004      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80039a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80039ac:	fab3 f383 	clz	r3, r3
 80039b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d106      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2200      	movs	r2, #0
 80039bc:	2100      	movs	r1, #0
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff f888 	bl	8002ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2101      	movs	r1, #1
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff f86c 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x220>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2101      	movs	r1, #1
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff f861 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 80039e6:	4603      	mov	r3, r0
 80039e8:	0e9b      	lsrs	r3, r3, #26
 80039ea:	f003 021f 	and.w	r2, r3, #31
 80039ee:	e01e      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x25e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2101      	movs	r1, #1
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff f856 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a06:	fa93 f3a3 	rbit	r3, r3
 8003a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003a16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003a1e:	2320      	movs	r3, #32
 8003a20:	e004      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003a22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a26:	fab3 f383 	clz	r3, r3
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d105      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x276>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	0e9b      	lsrs	r3, r3, #26
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	e018      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x2a8>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a52:	fa93 f3a3 	rbit	r3, r3
 8003a56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003a5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003a62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	e004      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003a6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d106      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2200      	movs	r2, #0
 8003a82:	2101      	movs	r1, #1
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff f825 	bl	8002ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2102      	movs	r1, #2
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff f809 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x2e6>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2102      	movs	r1, #2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe fffe 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 8003aac:	4603      	mov	r3, r0
 8003aae:	0e9b      	lsrs	r3, r3, #26
 8003ab0:	f003 021f 	and.w	r2, r3, #31
 8003ab4:	e01e      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x324>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2102      	movs	r1, #2
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fe fff3 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003acc:	fa93 f3a3 	rbit	r3, r3
 8003ad0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ad8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003adc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003ae4:	2320      	movs	r3, #32
 8003ae6:	e004      	b.n	8003af2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003ae8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003aec:	fab3 f383 	clz	r3, r3
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d105      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x33c>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	0e9b      	lsrs	r3, r3, #26
 8003b06:	f003 031f 	and.w	r3, r3, #31
 8003b0a:	e016      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x36a>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b18:	fa93 f3a3 	rbit	r3, r3
 8003b1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003b1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003b2c:	2320      	movs	r3, #32
 8003b2e:	e004      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b34:	fab3 f383 	clz	r3, r3
 8003b38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d106      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2200      	movs	r2, #0
 8003b44:	2102      	movs	r1, #2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fe ffc4 	bl	8002ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2103      	movs	r1, #3
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe ffa8 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10a      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x3a8>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2103      	movs	r1, #3
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fe ff9d 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	0e9b      	lsrs	r3, r3, #26
 8003b72:	f003 021f 	and.w	r2, r3, #31
 8003b76:	e017      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x3d8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2103      	movs	r1, #3
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fe ff92 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 8003b84:	4603      	mov	r3, r0
 8003b86:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b8a:	fa93 f3a3 	rbit	r3, r3
 8003b8e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003b90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b92:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003b94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003b9a:	2320      	movs	r3, #32
 8003b9c:	e003      	b.n	8003ba6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003b9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ba0:	fab3 f383 	clz	r3, r3
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d105      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x3f0>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	0e9b      	lsrs	r3, r3, #26
 8003bba:	f003 031f 	and.w	r3, r3, #31
 8003bbe:	e011      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x414>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bc8:	fa93 f3a3 	rbit	r3, r3
 8003bcc:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003bce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003bd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003bd8:	2320      	movs	r3, #32
 8003bda:	e003      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003bdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bde:	fab3 f383 	clz	r3, r3
 8003be2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d106      	bne.n	8003bf6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2200      	movs	r2, #0
 8003bee:	2103      	movs	r1, #3
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fe ff6f 	bl	8002ad4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff f902 	bl	8002e04 <LL_ADC_IsEnabled>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f040 8140 	bne.w	8003e88 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6819      	ldr	r1, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	461a      	mov	r2, r3
 8003c16:	f7ff f83f 	bl	8002c98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	4a8f      	ldr	r2, [pc, #572]	@ (8003e5c <HAL_ADC_ConfigChannel+0x68c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	f040 8131 	bne.w	8003e88 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x47e>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	0e9b      	lsrs	r3, r3, #26
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	2b09      	cmp	r3, #9
 8003c44:	bf94      	ite	ls
 8003c46:	2301      	movls	r3, #1
 8003c48:	2300      	movhi	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	e019      	b.n	8003c82 <HAL_ADC_ConfigChannel+0x4b2>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c56:	fa93 f3a3 	rbit	r3, r3
 8003c5a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003c5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c5e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003c60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003c66:	2320      	movs	r3, #32
 8003c68:	e003      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003c6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c6c:	fab3 f383 	clz	r3, r3
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	3301      	adds	r3, #1
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	2b09      	cmp	r3, #9
 8003c7a:	bf94      	ite	ls
 8003c7c:	2301      	movls	r3, #1
 8003c7e:	2300      	movhi	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d079      	beq.n	8003d7a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d107      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x4d2>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	0e9b      	lsrs	r3, r3, #26
 8003c98:	3301      	adds	r3, #1
 8003c9a:	069b      	lsls	r3, r3, #26
 8003c9c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ca0:	e015      	b.n	8003cce <HAL_ADC_ConfigChannel+0x4fe>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003caa:	fa93 f3a3 	rbit	r3, r3
 8003cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cb2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003cba:	2320      	movs	r3, #32
 8003cbc:	e003      	b.n	8003cc6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc0:	fab3 f383 	clz	r3, r3
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	069b      	lsls	r3, r3, #26
 8003cca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <HAL_ADC_ConfigChannel+0x51e>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	0e9b      	lsrs	r3, r3, #26
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cec:	e017      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x54e>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cf6:	fa93 f3a3 	rbit	r3, r3
 8003cfa:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003d00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003d06:	2320      	movs	r3, #32
 8003d08:	e003      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d0c:	fab3 f383 	clz	r3, r3
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	3301      	adds	r3, #1
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	2101      	movs	r1, #1
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	ea42 0103 	orr.w	r1, r2, r3
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x574>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	0e9b      	lsrs	r3, r3, #26
 8003d34:	3301      	adds	r3, #1
 8003d36:	f003 021f 	and.w	r2, r3, #31
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4413      	add	r3, r2
 8003d40:	051b      	lsls	r3, r3, #20
 8003d42:	e018      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x5a6>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4c:	fa93 f3a3 	rbit	r3, r3
 8003d50:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003d5c:	2320      	movs	r3, #32
 8003d5e:	e003      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d62:	fab3 f383 	clz	r3, r3
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	3301      	adds	r3, #1
 8003d6a:	f003 021f 	and.w	r2, r3, #31
 8003d6e:	4613      	mov	r3, r2
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4413      	add	r3, r2
 8003d74:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d76:	430b      	orrs	r3, r1
 8003d78:	e081      	b.n	8003e7e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d107      	bne.n	8003d96 <HAL_ADC_ConfigChannel+0x5c6>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	0e9b      	lsrs	r3, r3, #26
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	069b      	lsls	r3, r3, #26
 8003d90:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d94:	e015      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x5f2>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9e:	fa93 f3a3 	rbit	r3, r3
 8003da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003dae:	2320      	movs	r3, #32
 8003db0:	e003      	b.n	8003dba <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	fab3 f383 	clz	r3, r3
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	3301      	adds	r3, #1
 8003dbc:	069b      	lsls	r3, r3, #26
 8003dbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x612>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	0e9b      	lsrs	r3, r3, #26
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	2101      	movs	r1, #1
 8003ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8003de0:	e017      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x642>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	fa93 f3a3 	rbit	r3, r3
 8003dee:	61fb      	str	r3, [r7, #28]
  return result;
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003dfa:	2320      	movs	r3, #32
 8003dfc:	e003      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	fab3 f383 	clz	r3, r3
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	3301      	adds	r3, #1
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e12:	ea42 0103 	orr.w	r1, r2, r3
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10d      	bne.n	8003e3e <HAL_ADC_ConfigChannel+0x66e>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	0e9b      	lsrs	r3, r3, #26
 8003e28:	3301      	adds	r3, #1
 8003e2a:	f003 021f 	and.w	r2, r3, #31
 8003e2e:	4613      	mov	r3, r2
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	4413      	add	r3, r2
 8003e34:	3b1e      	subs	r3, #30
 8003e36:	051b      	lsls	r3, r3, #20
 8003e38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e3c:	e01e      	b.n	8003e7c <HAL_ADC_ConfigChannel+0x6ac>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	fa93 f3a3 	rbit	r3, r3
 8003e4a:	613b      	str	r3, [r7, #16]
  return result;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d104      	bne.n	8003e60 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003e56:	2320      	movs	r3, #32
 8003e58:	e006      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x698>
 8003e5a:	bf00      	nop
 8003e5c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	fab3 f383 	clz	r3, r3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	3301      	adds	r3, #1
 8003e6a:	f003 021f 	and.w	r2, r3, #31
 8003e6e:	4613      	mov	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4413      	add	r3, r2
 8003e74:	3b1e      	subs	r3, #30
 8003e76:	051b      	lsls	r3, r3, #20
 8003e78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e7c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e82:	4619      	mov	r1, r3
 8003e84:	f7fe fedc 	bl	8002c40 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f8c <HAL_ADC_ConfigChannel+0x7bc>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d071      	beq.n	8003f78 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e94:	483e      	ldr	r0, [pc, #248]	@ (8003f90 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e96:	f7fe fdd5 	bl	8002a44 <LL_ADC_GetCommonPathInternalCh>
 8003e9a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a3c      	ldr	r2, [pc, #240]	@ (8003f94 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d004      	beq.n	8003eb2 <HAL_ADC_ConfigChannel+0x6e2>
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a3a      	ldr	r2, [pc, #232]	@ (8003f98 <HAL_ADC_ConfigChannel+0x7c8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d127      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003eb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003eb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d121      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ec6:	d157      	bne.n	8003f78 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ecc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	482f      	ldr	r0, [pc, #188]	@ (8003f90 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ed4:	f7fe fda3 	bl	8002a1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ed8:	4b30      	ldr	r3, [pc, #192]	@ (8003f9c <HAL_ADC_ConfigChannel+0x7cc>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	099b      	lsrs	r3, r3, #6
 8003ede:	4a30      	ldr	r2, [pc, #192]	@ (8003fa0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	099b      	lsrs	r3, r3, #6
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	4613      	mov	r3, r2
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ef2:	e002      	b.n	8003efa <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f9      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f00:	e03a      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a27      	ldr	r2, [pc, #156]	@ (8003fa4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d113      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10d      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a22      	ldr	r2, [pc, #136]	@ (8003fa8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d02a      	beq.n	8003f78 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4818      	ldr	r0, [pc, #96]	@ (8003f90 <HAL_ADC_ConfigChannel+0x7c0>)
 8003f2e:	f7fe fd76 	bl	8002a1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f32:	e021      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a1c      	ldr	r2, [pc, #112]	@ (8003fac <HAL_ADC_ConfigChannel+0x7dc>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d11c      	bne.n	8003f78 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d116      	bne.n	8003f78 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a16      	ldr	r2, [pc, #88]	@ (8003fa8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d011      	beq.n	8003f78 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	480c      	ldr	r0, [pc, #48]	@ (8003f90 <HAL_ADC_ConfigChannel+0x7c0>)
 8003f60:	f7fe fd5d 	bl	8002a1e <LL_ADC_SetCommonPathInternalCh>
 8003f64:	e008      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6a:	f043 0220 	orr.w	r2, r3, #32
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f80:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	37d8      	adds	r7, #216	@ 0xd8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	80080000 	.word	0x80080000
 8003f90:	50000300 	.word	0x50000300
 8003f94:	c3210000 	.word	0xc3210000
 8003f98:	90c00010 	.word	0x90c00010
 8003f9c:	20000000 	.word	0x20000000
 8003fa0:	053e2d63 	.word	0x053e2d63
 8003fa4:	c7520000 	.word	0xc7520000
 8003fa8:	50000100 	.word	0x50000100
 8003fac:	cb840000 	.word	0xcb840000

08003fb0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe ff1f 	bl	8002e04 <LL_ADC_IsEnabled>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d169      	bne.n	80040a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	4b36      	ldr	r3, [pc, #216]	@ (80040ac <ADC_Enable+0xfc>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00d      	beq.n	8003ff6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fde:	f043 0210 	orr.w	r2, r3, #16
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fea:	f043 0201 	orr.w	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e055      	b.n	80040a2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe feda 	bl	8002db4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004000:	482b      	ldr	r0, [pc, #172]	@ (80040b0 <ADC_Enable+0x100>)
 8004002:	f7fe fd1f 	bl	8002a44 <LL_ADC_GetCommonPathInternalCh>
 8004006:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004008:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800400c:	2b00      	cmp	r3, #0
 800400e:	d013      	beq.n	8004038 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004010:	4b28      	ldr	r3, [pc, #160]	@ (80040b4 <ADC_Enable+0x104>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	099b      	lsrs	r3, r3, #6
 8004016:	4a28      	ldr	r2, [pc, #160]	@ (80040b8 <ADC_Enable+0x108>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	099b      	lsrs	r3, r3, #6
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	4613      	mov	r3, r2
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800402a:	e002      	b.n	8004032 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	3b01      	subs	r3, #1
 8004030:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f9      	bne.n	800402c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004038:	f7fe fcb0 	bl	800299c <HAL_GetTick>
 800403c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800403e:	e028      	b.n	8004092 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe fedd 	bl	8002e04 <LL_ADC_IsEnabled>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d104      	bne.n	800405a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7fe fead 	bl	8002db4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800405a:	f7fe fc9f 	bl	800299c <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d914      	bls.n	8004092 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b01      	cmp	r3, #1
 8004074:	d00d      	beq.n	8004092 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407a:	f043 0210 	orr.w	r2, r3, #16
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004086:	f043 0201 	orr.w	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e007      	b.n	80040a2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b01      	cmp	r3, #1
 800409e:	d1cf      	bne.n	8004040 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	8000003f 	.word	0x8000003f
 80040b0:	50000300 	.word	0x50000300
 80040b4:	20000000 	.word	0x20000000
 80040b8:	053e2d63 	.word	0x053e2d63

080040bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe feae 	bl	8002e2a <LL_ADC_IsDisableOngoing>
 80040ce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe fe95 	bl	8002e04 <LL_ADC_IsEnabled>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d047      	beq.n	8004170 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d144      	bne.n	8004170 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 030d 	and.w	r3, r3, #13
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d10c      	bne.n	800410e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe fe6f 	bl	8002ddc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2203      	movs	r2, #3
 8004104:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004106:	f7fe fc49 	bl	800299c <HAL_GetTick>
 800410a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800410c:	e029      	b.n	8004162 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004112:	f043 0210 	orr.w	r2, r3, #16
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800411e:	f043 0201 	orr.w	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e023      	b.n	8004172 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800412a:	f7fe fc37 	bl	800299c <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d914      	bls.n	8004162 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00d      	beq.n	8004162 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414a:	f043 0210 	orr.w	r2, r3, #16
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004156:	f043 0201 	orr.w	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e007      	b.n	8004172 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1dc      	bne.n	800412a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <LL_ADC_SetCommonPathInternalCh>:
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	609a      	str	r2, [r3, #8]
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <LL_ADC_GetCommonPathInternalCh>:
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <LL_ADC_SetOffset>:
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3360      	adds	r3, #96	@ 0x60
 80041ce:	461a      	mov	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	4b08      	ldr	r3, [pc, #32]	@ (8004200 <LL_ADC_SetOffset+0x44>)
 80041de:	4013      	ands	r3, r2
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	601a      	str	r2, [r3, #0]
}
 80041f4:	bf00      	nop
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	03fff000 	.word	0x03fff000

08004204 <LL_ADC_GetOffsetChannel>:
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3360      	adds	r3, #96	@ 0x60
 8004212:	461a      	mov	r2, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <LL_ADC_SetOffsetState>:
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3360      	adds	r3, #96	@ 0x60
 8004240:	461a      	mov	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	431a      	orrs	r2, r3
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	601a      	str	r2, [r3, #0]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <LL_ADC_SetOffsetSign>:
{
 8004266:	b480      	push	{r7}
 8004268:	b087      	sub	sp, #28
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3360      	adds	r3, #96	@ 0x60
 8004276:	461a      	mov	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	431a      	orrs	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	601a      	str	r2, [r3, #0]
}
 8004290:	bf00      	nop
 8004292:	371c      	adds	r7, #28
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <LL_ADC_SetOffsetSaturation>:
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3360      	adds	r3, #96	@ 0x60
 80042ac:	461a      	mov	r2, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	431a      	orrs	r2, r3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	601a      	str	r2, [r3, #0]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	615a      	str	r2, [r3, #20]
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <LL_ADC_INJ_GetTrigAuto>:
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <LL_ADC_SetChannelSamplingTime>:
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3314      	adds	r3, #20
 8004324:	461a      	mov	r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	0e5b      	lsrs	r3, r3, #25
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	4413      	add	r3, r2
 8004332:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	0d1b      	lsrs	r3, r3, #20
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	2107      	movs	r1, #7
 8004342:	fa01 f303 	lsl.w	r3, r1, r3
 8004346:	43db      	mvns	r3, r3
 8004348:	401a      	ands	r2, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	0d1b      	lsrs	r3, r3, #20
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	431a      	orrs	r2, r3
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	601a      	str	r2, [r3, #0]
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
	...

0800436c <LL_ADC_SetChannelSingleDiff>:
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004384:	43db      	mvns	r3, r3
 8004386:	401a      	ands	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f003 0318 	and.w	r3, r3, #24
 800438e:	4908      	ldr	r1, [pc, #32]	@ (80043b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004390:	40d9      	lsrs	r1, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	400b      	ands	r3, r1
 8004396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439a:	431a      	orrs	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80043a2:	bf00      	nop
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	0007ffff 	.word	0x0007ffff

080043b4 <LL_ADC_GetMultimode>:
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 031f 	and.w	r3, r3, #31
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <LL_ADC_IsEnabled>:
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <LL_ADC_IsEnabled+0x18>
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <LL_ADC_IsEnabled+0x1a>
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <LL_ADC_StartCalibration>:
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004408:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004412:	4313      	orrs	r3, r2
 8004414:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	609a      	str	r2, [r3, #8]
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <LL_ADC_IsCalibrationOnGoing>:
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004438:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800443c:	d101      	bne.n	8004442 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <LL_ADC_REG_IsConversionOngoing>:
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b04      	cmp	r3, #4
 8004462:	d101      	bne.n	8004468 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <LL_ADC_INJ_StartConversion>:
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004486:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800448a:	f043 0208 	orr.w	r2, r3, #8
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	609a      	str	r2, [r3, #8]
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <LL_ADC_INJ_IsConversionOngoing>:
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d101      	bne.n	80044b6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_ADCEx_Calibration_Start+0x1c>
 80044dc:	2302      	movs	r3, #2
 80044de:	e04d      	b.n	800457c <HAL_ADCEx_Calibration_Start+0xb8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff fde7 	bl	80040bc <ADC_Disable>
 80044ee:	4603      	mov	r3, r0
 80044f0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d136      	bne.n	8004566 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004500:	f023 0302 	bic.w	r3, r3, #2
 8004504:	f043 0202 	orr.w	r2, r3, #2
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6839      	ldr	r1, [r7, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff ff6f 	bl	80043f6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004518:	e014      	b.n	8004544 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	3301      	adds	r3, #1
 800451e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4a18      	ldr	r2, [pc, #96]	@ (8004584 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d90d      	bls.n	8004544 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452c:	f023 0312 	bic.w	r3, r3, #18
 8004530:	f043 0210 	orr.w	r2, r3, #16
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e01b      	b.n	800457c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff ff6d 	bl	8004428 <LL_ADC_IsCalibrationOnGoing>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e2      	bne.n	800451a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004558:	f023 0303 	bic.w	r3, r3, #3
 800455c:	f043 0201 	orr.w	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004564:	e005      	b.n	8004572 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800456a:	f043 0210 	orr.w	r2, r3, #16
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800457a:	7bfb      	ldrb	r3, [r7, #15]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	0004de01 	.word	0x0004de01

08004588 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004590:	4853      	ldr	r0, [pc, #332]	@ (80046e0 <HAL_ADCEx_InjectedStart+0x158>)
 8004592:	f7ff ff0f 	bl	80043b4 <LL_ADC_GetMultimode>
 8004596:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff ff7e 	bl	800449e <LL_ADC_INJ_IsConversionOngoing>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 80045a8:	2302      	movs	r3, #2
 80045aa:	e094      	b.n	80046d6 <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045b6:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045be:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d107      	bne.n	80045dc <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d0:	f043 0220 	orr.w	r2, r3, #32
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e07c      	b.n	80046d6 <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_ADCEx_InjectedStart+0x62>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e075      	b.n	80046d6 <HAL_ADCEx_InjectedStart+0x14e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff fcdc 	bl	8003fb0 <ADC_Enable>
 80045f8:	4603      	mov	r3, r0
 80045fa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d164      	bne.n	80046cc <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800460a:	2b00      	cmp	r3, #0
 800460c:	d006      	beq.n	800461c <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004612:	f023 0208 	bic.w	r2, r3, #8
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	661a      	str	r2, [r3, #96]	@ 0x60
 800461a:	e002      	b.n	8004622 <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004626:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800462a:	f023 0301 	bic.w	r3, r3, #1
 800462e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a2a      	ldr	r2, [pc, #168]	@ (80046e4 <HAL_ADCEx_InjectedStart+0x15c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d002      	beq.n	8004646 <HAL_ADCEx_InjectedStart+0xbe>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	e001      	b.n	800464a <HAL_ADCEx_InjectedStart+0xc2>
 8004646:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6812      	ldr	r2, [r2, #0]
 800464e:	4293      	cmp	r3, r2
 8004650:	d002      	beq.n	8004658 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d105      	bne.n	8004664 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800465c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2260      	movs	r2, #96	@ 0x60
 800466a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a1a      	ldr	r2, [pc, #104]	@ (80046e4 <HAL_ADCEx_InjectedStart+0x15c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d002      	beq.n	8004684 <HAL_ADCEx_InjectedStart+0xfc>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	e001      	b.n	8004688 <HAL_ADCEx_InjectedStart+0x100>
 8004684:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	4293      	cmp	r3, r2
 800468e:	d008      	beq.n	80046a2 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d005      	beq.n	80046a2 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b06      	cmp	r3, #6
 800469a:	d002      	beq.n	80046a2 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	2b07      	cmp	r3, #7
 80046a0:	d10d      	bne.n	80046be <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff fe26 	bl	80042f8 <LL_ADC_INJ_GetTrigAuto>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d110      	bne.n	80046d4 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fedd 	bl	8004476 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80046bc:	e00a      	b.n	80046d4 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80046ca:	e003      	b.n	80046d4 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	50000300 	.word	0x50000300
 80046e4:	50000100 	.word	0x50000100

080046e8 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046f0:	486e      	ldr	r0, [pc, #440]	@ (80048ac <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 80046f2:	f7ff fe5f 	bl	80043b4 <LL_ADC_GetMultimode>
 80046f6:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fece 	bl	800449e <LL_ADC_INJ_IsConversionOngoing>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8004708:	2302      	movs	r3, #2
 800470a:	e0ca      	b.n	80048a2 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004716:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800471e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10a      	bne.n	800473c <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d107      	bne.n	800473c <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004730:	f043 0220 	orr.w	r2, r3, #32
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0b2      	b.n	80048a2 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004742:	2b01      	cmp	r3, #1
 8004744:	d101      	bne.n	800474a <HAL_ADCEx_InjectedStart_IT+0x62>
 8004746:	2302      	movs	r3, #2
 8004748:	e0ab      	b.n	80048a2 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff fc2c 	bl	8003fb0 <ADC_Enable>
 8004758:	4603      	mov	r3, r0
 800475a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	2b00      	cmp	r3, #0
 8004760:	f040 809a 	bne.w	8004898 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d006      	beq.n	800477e <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004774:	f023 0208 	bic.w	r2, r3, #8
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	661a      	str	r2, [r3, #96]	@ 0x60
 800477c:	e002      	b.n	8004784 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004788:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a44      	ldr	r2, [pc, #272]	@ (80048b0 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d002      	beq.n	80047a8 <HAL_ADCEx_InjectedStart_IT+0xc0>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	e001      	b.n	80047ac <HAL_ADCEx_InjectedStart_IT+0xc4>
 80047a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6812      	ldr	r2, [r2, #0]
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d002      	beq.n	80047ba <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d105      	bne.n	80047c6 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047be:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2260      	movs	r2, #96	@ 0x60
 80047cc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047f2:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d110      	bne.n	800481e <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0220 	bic.w	r2, r2, #32
 800480a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800481a:	605a      	str	r2, [r3, #4]
          break;
 800481c:	e010      	b.n	8004840 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800482c:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0220 	orr.w	r2, r2, #32
 800483c:	605a      	str	r2, [r3, #4]
          break;
 800483e:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a1a      	ldr	r2, [pc, #104]	@ (80048b0 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d002      	beq.n	8004850 <HAL_ADCEx_InjectedStart_IT+0x168>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	e001      	b.n	8004854 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8004850:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	4293      	cmp	r3, r2
 800485a:	d008      	beq.n	800486e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2b06      	cmp	r3, #6
 8004866:	d002      	beq.n	800486e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	2b07      	cmp	r3, #7
 800486c:	d10d      	bne.n	800488a <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff fd40 	bl	80042f8 <LL_ADC_INJ_GetTrigAuto>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d110      	bne.n	80048a0 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff fdf7 	bl	8004476 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004888:	e00a      	b.n	80048a0 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800488e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004896:	e003      	b.n	80048a0 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	50000300 	.word	0x50000300
 80048b0:	50000100 	.word	0x50000100

080048b4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b0b6      	sub	sp, #216	@ 0xd8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004914:	2300      	movs	r3, #0
 8004916:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004924:	2b01      	cmp	r3, #1
 8004926:	d102      	bne.n	800492e <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8004928:	2302      	movs	r3, #2
 800492a:	f000 bcb5 	b.w	8005298 <HAL_ADCEx_InjectedConfigChannel+0x994>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004942:	2b01      	cmp	r3, #1
 8004944:	d130      	bne.n	80049a8 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b09      	cmp	r3, #9
 800494c:	d179      	bne.n	8004a42 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004952:	2b00      	cmp	r3, #0
 8004954:	d010      	beq.n	8004978 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	0e9b      	lsrs	r3, r3, #26
 800495c:	025b      	lsls	r3, r3, #9
 800495e:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004966:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800496a:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004976:	e007      	b.n	8004988 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	0e9b      	lsrs	r3, r3, #26
 800497e:	025b      	lsls	r3, r3, #9
 8004980:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8004984:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800498e:	4b84      	ldr	r3, [pc, #528]	@ (8004ba0 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004990:	4013      	ands	r3, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800499a:	430b      	orrs	r3, r1
 800499c:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049a4:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80049a6:	e04c      	b.n	8004a42 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d11d      	bne.n	80049ec <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	6a1a      	ldr	r2, [r3, #32]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00d      	beq.n	80049e2 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d0:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80049d4:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049e0:	e004      	b.n	80049ec <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	0e9b      	lsrs	r3, r3, #26
 80049f2:	f003 021f 	and.w	r2, r3, #31
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f003 031f 	and.w	r3, r3, #31
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a10:	1e5a      	subs	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004a1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a32:	4b5b      	ldr	r3, [pc, #364]	@ (8004ba0 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	430b      	orrs	r3, r1
 8004a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff fd29 	bl	800449e <LL_ADC_INJ_IsConversionOngoing>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d124      	bne.n	8004a9c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d112      	bne.n	8004a82 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004a6c:	055a      	lsls	r2, r3, #21
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a74:	051b      	lsls	r3, r3, #20
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	60da      	str	r2, [r3, #12]
 8004a80:	e00c      	b.n	8004a9c <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004a92:	055a      	lsls	r2, r3, #21
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff fcd5 	bl	8004450 <LL_ADC_REG_IsConversionOngoing>
 8004aa6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff fcf5 	bl	800449e <LL_ADC_INJ_IsConversionOngoing>
 8004ab4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ab8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f040 822e 	bne.w	8004f1e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f040 8229 	bne.w	8004f1e <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d116      	bne.n	8004b0a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d108      	bne.n	8004af8 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8004af4:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004af6:	e01f      	b.n	8004b38 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8004b06:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004b08:	e016      	b.n	8004b38 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d109      	bne.n	8004b28 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b18:	f043 0220 	orr.w	r2, r3, #32
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004b26:	e007      	b.n	8004b38 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8004b36:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d110      	bne.n	8004b64 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b54:	430b      	orrs	r3, r1
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0202 	orr.w	r2, r2, #2
 8004b60:	611a      	str	r2, [r3, #16]
 8004b62:	e007      	b.n	8004b74 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0202 	bic.w	r2, r2, #2
 8004b72:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b7c:	d112      	bne.n	8004ba4 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2200      	movs	r2, #0
 8004b88:	4619      	mov	r1, r3
 8004b8a:	f7ff fbc3 	bl	8004314 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff fb9b 	bl	80042d2 <LL_ADC_SetSamplingTimeCommonConfig>
 8004b9c:	e011      	b.n	8004bc2 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8004b9e:	bf00      	nop
 8004ba0:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6818      	ldr	r0, [r3, #0]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f7ff fbaf 	bl	8004314 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2100      	movs	r1, #0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff fb88 	bl	80042d2 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	695a      	ldr	r2, [r3, #20]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	08db      	lsrs	r3, r3, #3
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d022      	beq.n	8004c2a <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6919      	ldr	r1, [r3, #16]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004bf4:	f7ff fae2 	bl	80041bc <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6818      	ldr	r0, [r3, #0]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	6919      	ldr	r1, [r3, #16]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	461a      	mov	r2, r3
 8004c06:	f7ff fb2e 	bl	8004266 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d102      	bne.n	8004c20 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004c1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c1e:	e000      	b.n	8004c22 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8004c20:	2300      	movs	r3, #0
 8004c22:	461a      	mov	r2, r3
 8004c24:	f7ff fb3a 	bl	800429c <LL_ADC_SetOffsetSaturation>
 8004c28:	e179      	b.n	8004f1e <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2100      	movs	r1, #0
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff fae7 	bl	8004204 <LL_ADC_GetOffsetChannel>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2100      	movs	r1, #0
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff fadc 	bl	8004204 <LL_ADC_GetOffsetChannel>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	0e9b      	lsrs	r3, r3, #26
 8004c50:	f003 021f 	and.w	r2, r3, #31
 8004c54:	e01e      	b.n	8004c94 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff fad1 	bl	8004204 <LL_ADC_GetOffsetChannel>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c6c:	fa93 f3a3 	rbit	r3, r3
 8004c70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004c74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004c7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8004c84:	2320      	movs	r3, #32
 8004c86:	e004      	b.n	8004c92 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004c88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c8c:	fab3 f383 	clz	r3, r3
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d105      	bne.n	8004cac <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	0e9b      	lsrs	r3, r3, #26
 8004ca6:	f003 031f 	and.w	r3, r3, #31
 8004caa:	e018      	b.n	8004cde <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cb8:	fa93 f3a3 	rbit	r3, r3
 8004cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004cc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004cc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8004cd0:	2320      	movs	r3, #32
 8004cd2:	e004      	b.n	8004cde <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8004cd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004cd8:	fab3 f383 	clz	r3, r3
 8004cdc:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d106      	bne.n	8004cf0 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	2100      	movs	r1, #0
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff faa0 	bl	8004230 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff fa84 	bl	8004204 <LL_ADC_GetOffsetChannel>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10a      	bne.n	8004d1c <HAL_ADCEx_InjectedConfigChannel+0x418>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff fa79 	bl	8004204 <LL_ADC_GetOffsetChannel>
 8004d12:	4603      	mov	r3, r0
 8004d14:	0e9b      	lsrs	r3, r3, #26
 8004d16:	f003 021f 	and.w	r2, r3, #31
 8004d1a:	e01e      	b.n	8004d5a <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2101      	movs	r1, #1
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff fa6e 	bl	8004204 <LL_ADC_GetOffsetChannel>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d32:	fa93 f3a3 	rbit	r3, r3
 8004d36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004d3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004d42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004d4a:	2320      	movs	r3, #32
 8004d4c:	e004      	b.n	8004d58 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8004d4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d52:	fab3 f383 	clz	r3, r3
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d105      	bne.n	8004d72 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	0e9b      	lsrs	r3, r3, #26
 8004d6c:	f003 031f 	and.w	r3, r3, #31
 8004d70:	e018      	b.n	8004da4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d7e:	fa93 f3a3 	rbit	r3, r3
 8004d82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004d86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004d8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004d8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8004d96:	2320      	movs	r3, #32
 8004d98:	e004      	b.n	8004da4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8004d9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d9e:	fab3 f383 	clz	r3, r3
 8004da2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d106      	bne.n	8004db6 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2200      	movs	r2, #0
 8004dae:	2101      	movs	r1, #1
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff fa3d 	bl	8004230 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2102      	movs	r1, #2
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff fa21 	bl	8004204 <LL_ADC_GetOffsetChannel>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10a      	bne.n	8004de2 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2102      	movs	r1, #2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff fa16 	bl	8004204 <LL_ADC_GetOffsetChannel>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	0e9b      	lsrs	r3, r3, #26
 8004ddc:	f003 021f 	and.w	r2, r3, #31
 8004de0:	e01e      	b.n	8004e20 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2102      	movs	r1, #2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fa0b 	bl	8004204 <LL_ADC_GetOffsetChannel>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004df8:	fa93 f3a3 	rbit	r3, r3
 8004dfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004e08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004e10:	2320      	movs	r3, #32
 8004e12:	e004      	b.n	8004e1e <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e18:	fab3 f383 	clz	r3, r3
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d105      	bne.n	8004e38 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	0e9b      	lsrs	r3, r3, #26
 8004e32:	f003 031f 	and.w	r3, r3, #31
 8004e36:	e014      	b.n	8004e62 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e40:	fa93 f3a3 	rbit	r3, r3
 8004e44:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004e46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004e4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004e54:	2320      	movs	r3, #32
 8004e56:	e004      	b.n	8004e62 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004e58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e5c:	fab3 f383 	clz	r3, r3
 8004e60:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d106      	bne.n	8004e74 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2102      	movs	r1, #2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff f9de 	bl	8004230 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2103      	movs	r1, #3
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7ff f9c2 	bl	8004204 <LL_ADC_GetOffsetChannel>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10a      	bne.n	8004ea0 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2103      	movs	r1, #3
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff f9b7 	bl	8004204 <LL_ADC_GetOffsetChannel>
 8004e96:	4603      	mov	r3, r0
 8004e98:	0e9b      	lsrs	r3, r3, #26
 8004e9a:	f003 021f 	and.w	r2, r3, #31
 8004e9e:	e017      	b.n	8004ed0 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2103      	movs	r1, #3
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff f9ac 	bl	8004204 <LL_ADC_GetOffsetChannel>
 8004eac:	4603      	mov	r3, r0
 8004eae:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004eb2:	fa93 f3a3 	rbit	r3, r3
 8004eb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004eb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004eba:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004ebc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004ec2:	2320      	movs	r3, #32
 8004ec4:	e003      	b.n	8004ece <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004ec6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ec8:	fab3 f383 	clz	r3, r3
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d105      	bne.n	8004ee8 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	0e9b      	lsrs	r3, r3, #26
 8004ee2:	f003 031f 	and.w	r3, r3, #31
 8004ee6:	e011      	b.n	8004f0c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ef0:	fa93 f3a3 	rbit	r3, r3
 8004ef4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004ef6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004efa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004f00:	2320      	movs	r3, #32
 8004f02:	e003      	b.n	8004f0c <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004f04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f06:	fab3 f383 	clz	r3, r3
 8004f0a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d106      	bne.n	8004f1e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2200      	movs	r2, #0
 8004f16:	2103      	movs	r1, #3
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff f989 	bl	8004230 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff fa54 	bl	80043d0 <LL_ADC_IsEnabled>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f040 8140 	bne.w	80051b0 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6818      	ldr	r0, [r3, #0]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	6819      	ldr	r1, [r3, #0]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	f7ff fa15 	bl	800436c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	4a8f      	ldr	r2, [pc, #572]	@ (8005184 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	f040 8131 	bne.w	80051b0 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10b      	bne.n	8004f76 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	0e9b      	lsrs	r3, r3, #26
 8004f64:	3301      	adds	r3, #1
 8004f66:	f003 031f 	and.w	r3, r3, #31
 8004f6a:	2b09      	cmp	r3, #9
 8004f6c:	bf94      	ite	ls
 8004f6e:	2301      	movls	r3, #1
 8004f70:	2300      	movhi	r3, #0
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	e019      	b.n	8004faa <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f7e:	fa93 f3a3 	rbit	r3, r3
 8004f82:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f86:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004f88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004f8e:	2320      	movs	r3, #32
 8004f90:	e003      	b.n	8004f9a <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004f92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f94:	fab3 f383 	clz	r3, r3
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	f003 031f 	and.w	r3, r3, #31
 8004fa0:	2b09      	cmp	r3, #9
 8004fa2:	bf94      	ite	ls
 8004fa4:	2301      	movls	r3, #1
 8004fa6:	2300      	movhi	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d079      	beq.n	80050a2 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d107      	bne.n	8004fca <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	0e9b      	lsrs	r3, r3, #26
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	069b      	lsls	r3, r3, #26
 8004fc4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004fc8:	e015      	b.n	8004ff6 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fd2:	fa93 f3a3 	rbit	r3, r3
 8004fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004fd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fda:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004fdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004fe2:	2320      	movs	r3, #32
 8004fe4:	e003      	b.n	8004fee <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004fe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fe8:	fab3 f383 	clz	r3, r3
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	3301      	adds	r3, #1
 8004ff0:	069b      	lsls	r3, r3, #26
 8004ff2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d109      	bne.n	8005016 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	0e9b      	lsrs	r3, r3, #26
 8005008:	3301      	adds	r3, #1
 800500a:	f003 031f 	and.w	r3, r3, #31
 800500e:	2101      	movs	r1, #1
 8005010:	fa01 f303 	lsl.w	r3, r1, r3
 8005014:	e017      	b.n	8005046 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800501e:	fa93 f3a3 	rbit	r3, r3
 8005022:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005026:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 800502e:	2320      	movs	r3, #32
 8005030:	e003      	b.n	800503a <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8005032:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005034:	fab3 f383 	clz	r3, r3
 8005038:	b2db      	uxtb	r3, r3
 800503a:	3301      	adds	r3, #1
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	2101      	movs	r1, #1
 8005042:	fa01 f303 	lsl.w	r3, r1, r3
 8005046:	ea42 0103 	orr.w	r1, r2, r3
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10a      	bne.n	800506c <HAL_ADCEx_InjectedConfigChannel+0x768>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	0e9b      	lsrs	r3, r3, #26
 800505c:	3301      	adds	r3, #1
 800505e:	f003 021f 	and.w	r2, r3, #31
 8005062:	4613      	mov	r3, r2
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	4413      	add	r3, r2
 8005068:	051b      	lsls	r3, r3, #20
 800506a:	e018      	b.n	800509e <HAL_ADCEx_InjectedConfigChannel+0x79a>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005074:	fa93 f3a3 	rbit	r3, r3
 8005078:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800507a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800507e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8005084:	2320      	movs	r3, #32
 8005086:	e003      	b.n	8005090 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8005088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508a:	fab3 f383 	clz	r3, r3
 800508e:	b2db      	uxtb	r3, r3
 8005090:	3301      	adds	r3, #1
 8005092:	f003 021f 	and.w	r2, r3, #31
 8005096:	4613      	mov	r3, r2
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	4413      	add	r3, r2
 800509c:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800509e:	430b      	orrs	r3, r1
 80050a0:	e081      	b.n	80051a6 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d107      	bne.n	80050be <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	0e9b      	lsrs	r3, r3, #26
 80050b4:	3301      	adds	r3, #1
 80050b6:	069b      	lsls	r3, r3, #26
 80050b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050bc:	e015      	b.n	80050ea <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c6:	fa93 f3a3 	rbit	r3, r3
 80050ca:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80050cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80050d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80050d6:	2320      	movs	r3, #32
 80050d8:	e003      	b.n	80050e2 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80050da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050dc:	fab3 f383 	clz	r3, r3
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	3301      	adds	r3, #1
 80050e4:	069b      	lsls	r3, r3, #26
 80050e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <HAL_ADCEx_InjectedConfigChannel+0x806>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	0e9b      	lsrs	r3, r3, #26
 80050fc:	3301      	adds	r3, #1
 80050fe:	f003 031f 	and.w	r3, r3, #31
 8005102:	2101      	movs	r1, #1
 8005104:	fa01 f303 	lsl.w	r3, r1, r3
 8005108:	e017      	b.n	800513a <HAL_ADCEx_InjectedConfigChannel+0x836>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	fa93 f3a3 	rbit	r3, r3
 8005116:	61bb      	str	r3, [r7, #24]
  return result;
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8005122:	2320      	movs	r3, #32
 8005124:	e003      	b.n	800512e <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	fab3 f383 	clz	r3, r3
 800512c:	b2db      	uxtb	r3, r3
 800512e:	3301      	adds	r3, #1
 8005130:	f003 031f 	and.w	r3, r3, #31
 8005134:	2101      	movs	r1, #1
 8005136:	fa01 f303 	lsl.w	r3, r1, r3
 800513a:	ea42 0103 	orr.w	r1, r2, r3
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10d      	bne.n	8005166 <HAL_ADCEx_InjectedConfigChannel+0x862>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	0e9b      	lsrs	r3, r3, #26
 8005150:	3301      	adds	r3, #1
 8005152:	f003 021f 	and.w	r2, r3, #31
 8005156:	4613      	mov	r3, r2
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	4413      	add	r3, r2
 800515c:	3b1e      	subs	r3, #30
 800515e:	051b      	lsls	r3, r3, #20
 8005160:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005164:	e01e      	b.n	80051a4 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	fa93 f3a3 	rbit	r3, r3
 8005172:	60fb      	str	r3, [r7, #12]
  return result;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d104      	bne.n	8005188 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 800517e:	2320      	movs	r3, #32
 8005180:	e006      	b.n	8005190 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8005182:	bf00      	nop
 8005184:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	fab3 f383 	clz	r3, r3
 800518e:	b2db      	uxtb	r3, r3
 8005190:	3301      	adds	r3, #1
 8005192:	f003 021f 	and.w	r2, r3, #31
 8005196:	4613      	mov	r3, r2
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	4413      	add	r3, r2
 800519c:	3b1e      	subs	r3, #30
 800519e:	051b      	lsls	r3, r3, #20
 80051a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051a4:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051aa:	4619      	mov	r1, r3
 80051ac:	f7ff f8b2 	bl	8004314 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	4b3a      	ldr	r3, [pc, #232]	@ (80052a0 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d067      	beq.n	800528c <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051bc:	4839      	ldr	r0, [pc, #228]	@ (80052a4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80051be:	f7fe ffef 	bl	80041a0 <LL_ADC_GetCommonPathInternalCh>
 80051c2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a37      	ldr	r2, [pc, #220]	@ (80052a8 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d004      	beq.n	80051da <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a35      	ldr	r2, [pc, #212]	@ (80052ac <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d127      	bne.n	800522a <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80051de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d121      	bne.n	800522a <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051ee:	d14d      	bne.n	800528c <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80051f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051f8:	4619      	mov	r1, r3
 80051fa:	482a      	ldr	r0, [pc, #168]	@ (80052a4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80051fc:	f7fe ffbd 	bl	800417a <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8005200:	4b2b      	ldr	r3, [pc, #172]	@ (80052b0 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	099b      	lsrs	r3, r3, #6
 8005206:	4a2b      	ldr	r2, [pc, #172]	@ (80052b4 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	099a      	lsrs	r2, r3, #6
 800520e:	4613      	mov	r3, r2
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8005218:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800521a:	e002      	b.n	8005222 <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	3b01      	subs	r3, #1
 8005220:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1f9      	bne.n	800521c <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005228:	e030      	b.n	800528c <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a22      	ldr	r2, [pc, #136]	@ (80052b8 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d113      	bne.n	800525c <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005234:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005238:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10d      	bne.n	800525c <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1d      	ldr	r2, [pc, #116]	@ (80052bc <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d020      	beq.n	800528c <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800524a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800524e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005252:	4619      	mov	r1, r3
 8005254:	4813      	ldr	r0, [pc, #76]	@ (80052a4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8005256:	f7fe ff90 	bl	800417a <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800525a:	e017      	b.n	800528c <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a17      	ldr	r2, [pc, #92]	@ (80052c0 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d112      	bne.n	800528c <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005266:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800526a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10c      	bne.n	800528c <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a11      	ldr	r2, [pc, #68]	@ (80052bc <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d007      	beq.n	800528c <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800527c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005280:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005284:	4619      	mov	r1, r3
 8005286:	4807      	ldr	r0, [pc, #28]	@ (80052a4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8005288:	f7fe ff77 	bl	800417a <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005294:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005298:	4618      	mov	r0, r3
 800529a:	37d8      	adds	r7, #216	@ 0xd8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	80080000 	.word	0x80080000
 80052a4:	50000300 	.word	0x50000300
 80052a8:	c3210000 	.word	0xc3210000
 80052ac:	90c00010 	.word	0x90c00010
 80052b0:	20000000 	.word	0x20000000
 80052b4:	053e2d63 	.word	0x053e2d63
 80052b8:	c7520000 	.word	0xc7520000
 80052bc:	50000100 	.word	0x50000100
 80052c0:	cb840000 	.word	0xcb840000

080052c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80052c4:	b590      	push	{r4, r7, lr}
 80052c6:	b0a1      	sub	sp, #132	@ 0x84
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d101      	bne.n	80052e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80052de:	2302      	movs	r3, #2
 80052e0:	e08b      	b.n	80053fa <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80052ea:	2300      	movs	r3, #0
 80052ec:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80052ee:	2300      	movs	r3, #0
 80052f0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052fa:	d102      	bne.n	8005302 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80052fc:	4b41      	ldr	r3, [pc, #260]	@ (8005404 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80052fe:	60bb      	str	r3, [r7, #8]
 8005300:	e001      	b.n	8005306 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005302:	2300      	movs	r3, #0
 8005304:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10b      	bne.n	8005324 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005310:	f043 0220 	orr.w	r2, r3, #32
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e06a      	b.n	80053fa <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff f892 	bl	8004450 <LL_ADC_REG_IsConversionOngoing>
 800532c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff f88c 	bl	8004450 <LL_ADC_REG_IsConversionOngoing>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d14c      	bne.n	80053d8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800533e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005340:	2b00      	cmp	r3, #0
 8005342:	d149      	bne.n	80053d8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005344:	4b30      	ldr	r3, [pc, #192]	@ (8005408 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005346:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d028      	beq.n	80053a2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005350:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	6859      	ldr	r1, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005362:	035b      	lsls	r3, r3, #13
 8005364:	430b      	orrs	r3, r1
 8005366:	431a      	orrs	r2, r3
 8005368:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800536a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800536c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005370:	f7ff f82e 	bl	80043d0 <LL_ADC_IsEnabled>
 8005374:	4604      	mov	r4, r0
 8005376:	4823      	ldr	r0, [pc, #140]	@ (8005404 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005378:	f7ff f82a 	bl	80043d0 <LL_ADC_IsEnabled>
 800537c:	4603      	mov	r3, r0
 800537e:	4323      	orrs	r3, r4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d133      	bne.n	80053ec <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005384:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800538c:	f023 030f 	bic.w	r3, r3, #15
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	6811      	ldr	r1, [r2, #0]
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	6892      	ldr	r2, [r2, #8]
 8005398:	430a      	orrs	r2, r1
 800539a:	431a      	orrs	r2, r3
 800539c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800539e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80053a0:	e024      	b.n	80053ec <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80053a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053ac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053ae:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80053b2:	f7ff f80d 	bl	80043d0 <LL_ADC_IsEnabled>
 80053b6:	4604      	mov	r4, r0
 80053b8:	4812      	ldr	r0, [pc, #72]	@ (8005404 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80053ba:	f7ff f809 	bl	80043d0 <LL_ADC_IsEnabled>
 80053be:	4603      	mov	r3, r0
 80053c0:	4323      	orrs	r3, r4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d112      	bne.n	80053ec <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80053c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80053ce:	f023 030f 	bic.w	r3, r3, #15
 80053d2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80053d4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80053d6:	e009      	b.n	80053ec <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053dc:	f043 0220 	orr.w	r2, r3, #32
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80053ea:	e000      	b.n	80053ee <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80053ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80053f6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3784      	adds	r7, #132	@ 0x84
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd90      	pop	{r4, r7, pc}
 8005402:	bf00      	nop
 8005404:	50000100 	.word	0x50000100
 8005408:	50000300 	.word	0x50000300

0800540c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005414:	4b05      	ldr	r3, [pc, #20]	@ (800542c <LL_EXTI_EnableIT_0_31+0x20>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	4904      	ldr	r1, [pc, #16]	@ (800542c <LL_EXTI_EnableIT_0_31+0x20>)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4313      	orrs	r3, r2
 800541e:	600b      	str	r3, [r1, #0]
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	40010400 	.word	0x40010400

08005430 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005438:	4b06      	ldr	r3, [pc, #24]	@ (8005454 <LL_EXTI_DisableIT_0_31+0x24>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	43db      	mvns	r3, r3
 8005440:	4904      	ldr	r1, [pc, #16]	@ (8005454 <LL_EXTI_DisableIT_0_31+0x24>)
 8005442:	4013      	ands	r3, r2
 8005444:	600b      	str	r3, [r1, #0]
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40010400 	.word	0x40010400

08005458 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005460:	4b05      	ldr	r3, [pc, #20]	@ (8005478 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	4904      	ldr	r1, [pc, #16]	@ (8005478 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4313      	orrs	r3, r2
 800546a:	604b      	str	r3, [r1, #4]

}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	40010400 	.word	0x40010400

0800547c <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005484:	4b06      	ldr	r3, [pc, #24]	@ (80054a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	43db      	mvns	r3, r3
 800548c:	4904      	ldr	r1, [pc, #16]	@ (80054a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800548e:	4013      	ands	r3, r2
 8005490:	604b      	str	r3, [r1, #4]
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40010400 	.word	0x40010400

080054a4 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80054ac:	4b05      	ldr	r3, [pc, #20]	@ (80054c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	4904      	ldr	r1, [pc, #16]	@ (80054c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	608b      	str	r3, [r1, #8]

}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	40010400 	.word	0x40010400

080054c8 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80054d0:	4b06      	ldr	r3, [pc, #24]	@ (80054ec <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	43db      	mvns	r3, r3
 80054d8:	4904      	ldr	r1, [pc, #16]	@ (80054ec <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80054da:	4013      	ands	r3, r2
 80054dc:	608b      	str	r3, [r1, #8]

}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40010400 	.word	0x40010400

080054f0 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80054f8:	4b05      	ldr	r3, [pc, #20]	@ (8005510 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	4904      	ldr	r1, [pc, #16]	@ (8005510 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4313      	orrs	r3, r2
 8005502:	60cb      	str	r3, [r1, #12]
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	40010400 	.word	0x40010400

08005514 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800551c:	4b06      	ldr	r3, [pc, #24]	@ (8005538 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	43db      	mvns	r3, r3
 8005524:	4904      	ldr	r1, [pc, #16]	@ (8005538 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005526:	4013      	ands	r3, r2
 8005528:	60cb      	str	r3, [r1, #12]
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40010400 	.word	0x40010400

0800553c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8005544:	4b07      	ldr	r3, [pc, #28]	@ (8005564 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8005546:	695a      	ldr	r2, [r3, #20]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4013      	ands	r3, r2
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	429a      	cmp	r2, r3
 8005550:	d101      	bne.n	8005556 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	40010400 	.word	0x40010400

08005568 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005570:	4a04      	ldr	r2, [pc, #16]	@ (8005584 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6153      	str	r3, [r2, #20]
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40010400 	.word	0x40010400

08005588 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005590:	2300      	movs	r3, #0
 8005592:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d102      	bne.n	80055a4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	77fb      	strb	r3, [r7, #31]
 80055a2:	e0bc      	b.n	800571e <HAL_COMP_Init+0x196>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055b2:	d102      	bne.n	80055ba <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	77fb      	strb	r3, [r7, #31]
 80055b8:	e0b1      	b.n	800571e <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	7f5b      	ldrb	r3, [r3, #29]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d108      	bne.n	80055d6 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7fb ff89 	bl	80014e8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055e0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 80055fc:	4313      	orrs	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	4b48      	ldr	r3, [pc, #288]	@ (8005728 <HAL_COMP_Init+0x1a0>)
 8005608:	4013      	ands	r3, r2
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6812      	ldr	r2, [r2, #0]
 800560e:	6979      	ldr	r1, [r7, #20]
 8005610:	430b      	orrs	r3, r1
 8005612:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d016      	beq.n	8005650 <HAL_COMP_Init+0xc8>
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d113      	bne.n	8005650 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005628:	4b40      	ldr	r3, [pc, #256]	@ (800572c <HAL_COMP_Init+0x1a4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	099b      	lsrs	r3, r3, #6
 800562e:	4a40      	ldr	r2, [pc, #256]	@ (8005730 <HAL_COMP_Init+0x1a8>)
 8005630:	fba2 2303 	umull	r2, r3, r2, r3
 8005634:	099b      	lsrs	r3, r3, #6
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8005642:	e002      	b.n	800564a <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3b01      	subs	r3, #1
 8005648:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1f9      	bne.n	8005644 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a37      	ldr	r2, [pc, #220]	@ (8005734 <HAL_COMP_Init+0x1ac>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d012      	beq.n	8005680 <HAL_COMP_Init+0xf8>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a36      	ldr	r2, [pc, #216]	@ (8005738 <HAL_COMP_Init+0x1b0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d00a      	beq.n	800567a <HAL_COMP_Init+0xf2>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a34      	ldr	r2, [pc, #208]	@ (800573c <HAL_COMP_Init+0x1b4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d102      	bne.n	8005674 <HAL_COMP_Init+0xec>
 800566e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005672:	e007      	b.n	8005684 <HAL_COMP_Init+0xfc>
 8005674:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005678:	e004      	b.n	8005684 <HAL_COMP_Init+0xfc>
 800567a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800567e:	e001      	b.n	8005684 <HAL_COMP_Init+0xfc>
 8005680:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005684:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d037      	beq.n	8005702 <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	f003 0310 	and.w	r3, r3, #16
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800569e:	6938      	ldr	r0, [r7, #16]
 80056a0:	f7ff ff00 	bl	80054a4 <LL_EXTI_EnableRisingTrig_0_31>
 80056a4:	e002      	b.n	80056ac <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80056a6:	6938      	ldr	r0, [r7, #16]
 80056a8:	f7ff ff0e 	bl	80054c8 <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f003 0320 	and.w	r3, r3, #32
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80056b8:	6938      	ldr	r0, [r7, #16]
 80056ba:	f7ff ff19 	bl	80054f0 <LL_EXTI_EnableFallingTrig_0_31>
 80056be:	e002      	b.n	80056c6 <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80056c0:	6938      	ldr	r0, [r7, #16]
 80056c2:	f7ff ff27 	bl	8005514 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 80056c6:	6938      	ldr	r0, [r7, #16]
 80056c8:	f7ff ff4e 	bl	8005568 <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 80056d8:	6938      	ldr	r0, [r7, #16]
 80056da:	f7ff febd 	bl	8005458 <LL_EXTI_EnableEvent_0_31>
 80056de:	e002      	b.n	80056e6 <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 80056e0:	6938      	ldr	r0, [r7, #16]
 80056e2:	f7ff fecb 	bl	800547c <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 80056f2:	6938      	ldr	r0, [r7, #16]
 80056f4:	f7ff fe8a 	bl	800540c <LL_EXTI_EnableIT_0_31>
 80056f8:	e009      	b.n	800570e <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 80056fa:	6938      	ldr	r0, [r7, #16]
 80056fc:	f7ff fe98 	bl	8005430 <LL_EXTI_DisableIT_0_31>
 8005700:	e005      	b.n	800570e <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 8005702:	6938      	ldr	r0, [r7, #16]
 8005704:	f7ff feba 	bl	800547c <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 8005708:	6938      	ldr	r0, [r7, #16]
 800570a:	f7ff fe91 	bl	8005430 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	7f5b      	ldrb	r3, [r3, #29]
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d102      	bne.n	800571e <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800571e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	ff007e0f 	.word	0xff007e0f
 800572c:	20000000 	.word	0x20000000
 8005730:	053e2d63 	.word	0x053e2d63
 8005734:	40010200 	.word	0x40010200
 8005738:	40010204 	.word	0x40010204
 800573c:	40010208 	.word	0x40010208

08005740 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005748:	2300      	movs	r3, #0
 800574a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d102      	bne.n	800575c <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	73fb      	strb	r3, [r7, #15]
 800575a:	e02e      	b.n	80057ba <HAL_COMP_Start+0x7a>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005766:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800576a:	d102      	bne.n	8005772 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	73fb      	strb	r3, [r7, #15]
 8005770:	e023      	b.n	80057ba <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	7f5b      	ldrb	r3, [r3, #29]
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b01      	cmp	r3, #1
 800577a:	d11c      	bne.n	80057b6 <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 8005792:	4b0d      	ldr	r3, [pc, #52]	@ (80057c8 <HAL_COMP_Start+0x88>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a0d      	ldr	r2, [pc, #52]	@ (80057cc <HAL_COMP_Start+0x8c>)
 8005798:	fba2 2303 	umull	r2, r3, r2, r3
 800579c:	0cda      	lsrs	r2, r3, #19
 800579e:	4613      	mov	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80057a6:	e002      	b.n	80057ae <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1f9      	bne.n	80057a8 <HAL_COMP_Start+0x68>
 80057b4:	e001      	b.n	80057ba <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	20000000 	.word	0x20000000
 80057cc:	431bde83 	.word	0x431bde83

080057d0 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a17      	ldr	r2, [pc, #92]	@ (800583c <HAL_COMP_IRQHandler+0x6c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d012      	beq.n	8005808 <HAL_COMP_IRQHandler+0x38>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a16      	ldr	r2, [pc, #88]	@ (8005840 <HAL_COMP_IRQHandler+0x70>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00a      	beq.n	8005802 <HAL_COMP_IRQHandler+0x32>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a14      	ldr	r2, [pc, #80]	@ (8005844 <HAL_COMP_IRQHandler+0x74>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d102      	bne.n	80057fc <HAL_COMP_IRQHandler+0x2c>
 80057f6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80057fa:	e007      	b.n	800580c <HAL_COMP_IRQHandler+0x3c>
 80057fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005800:	e004      	b.n	800580c <HAL_COMP_IRQHandler+0x3c>
 8005802:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005806:	e001      	b.n	800580c <HAL_COMP_IRQHandler+0x3c>
 8005808:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800580c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
    {
      tmp_comp_exti_flag_set = 1UL;
    }
  }
#else
  if (LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8005812:	68b8      	ldr	r0, [r7, #8]
 8005814:	f7ff fe92 	bl	800553c <LL_EXTI_IsActiveFlag_0_31>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <HAL_COMP_IRQHandler+0x52>
  {
    tmp_comp_exti_flag_set = 1UL;
 800581e:	2301      	movs	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]
  }
#endif /* COMP7 */

  if (tmp_comp_exti_flag_set != 0UL)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <HAL_COMP_IRQHandler+0x64>
    else
    {
      LL_EXTI_ClearFlag_0_31(exti_line);
    }
#else
    LL_EXTI_ClearFlag_0_31(exti_line);
 8005828:	68b8      	ldr	r0, [r7, #8]
 800582a:	f7ff fe9d 	bl	8005568 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f80a 	bl	8005848 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8005834:	bf00      	nop
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40010200 	.word	0x40010200
 8005840:	40010204 	.word	0x40010204
 8005844:	40010208 	.word	0x40010208

08005848 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800586c:	4b0c      	ldr	r3, [pc, #48]	@ (80058a0 <__NVIC_SetPriorityGrouping+0x44>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005878:	4013      	ands	r3, r2
 800587a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005884:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800588c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800588e:	4a04      	ldr	r2, [pc, #16]	@ (80058a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	60d3      	str	r3, [r2, #12]
}
 8005894:	bf00      	nop
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	e000ed00 	.word	0xe000ed00

080058a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058a8:	4b04      	ldr	r3, [pc, #16]	@ (80058bc <__NVIC_GetPriorityGrouping+0x18>)
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	0a1b      	lsrs	r3, r3, #8
 80058ae:	f003 0307 	and.w	r3, r3, #7
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	e000ed00 	.word	0xe000ed00

080058c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	4603      	mov	r3, r0
 80058c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	db0b      	blt.n	80058ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058d2:	79fb      	ldrb	r3, [r7, #7]
 80058d4:	f003 021f 	and.w	r2, r3, #31
 80058d8:	4907      	ldr	r1, [pc, #28]	@ (80058f8 <__NVIC_EnableIRQ+0x38>)
 80058da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	2001      	movs	r0, #1
 80058e2:	fa00 f202 	lsl.w	r2, r0, r2
 80058e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	e000e100 	.word	0xe000e100

080058fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	4603      	mov	r3, r0
 8005904:	6039      	str	r1, [r7, #0]
 8005906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800590c:	2b00      	cmp	r3, #0
 800590e:	db0a      	blt.n	8005926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	b2da      	uxtb	r2, r3
 8005914:	490c      	ldr	r1, [pc, #48]	@ (8005948 <__NVIC_SetPriority+0x4c>)
 8005916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800591a:	0112      	lsls	r2, r2, #4
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	440b      	add	r3, r1
 8005920:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005924:	e00a      	b.n	800593c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	b2da      	uxtb	r2, r3
 800592a:	4908      	ldr	r1, [pc, #32]	@ (800594c <__NVIC_SetPriority+0x50>)
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	3b04      	subs	r3, #4
 8005934:	0112      	lsls	r2, r2, #4
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	440b      	add	r3, r1
 800593a:	761a      	strb	r2, [r3, #24]
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	e000e100 	.word	0xe000e100
 800594c:	e000ed00 	.word	0xe000ed00

08005950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005950:	b480      	push	{r7}
 8005952:	b089      	sub	sp, #36	@ 0x24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	f1c3 0307 	rsb	r3, r3, #7
 800596a:	2b04      	cmp	r3, #4
 800596c:	bf28      	it	cs
 800596e:	2304      	movcs	r3, #4
 8005970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	3304      	adds	r3, #4
 8005976:	2b06      	cmp	r3, #6
 8005978:	d902      	bls.n	8005980 <NVIC_EncodePriority+0x30>
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	3b03      	subs	r3, #3
 800597e:	e000      	b.n	8005982 <NVIC_EncodePriority+0x32>
 8005980:	2300      	movs	r3, #0
 8005982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005984:	f04f 32ff 	mov.w	r2, #4294967295
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	43da      	mvns	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	401a      	ands	r2, r3
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005998:	f04f 31ff 	mov.w	r1, #4294967295
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	fa01 f303 	lsl.w	r3, r1, r3
 80059a2:	43d9      	mvns	r1, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059a8:	4313      	orrs	r3, r2
         );
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3724      	adds	r7, #36	@ 0x24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
	...

080059b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059c8:	d301      	bcc.n	80059ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059ca:	2301      	movs	r3, #1
 80059cc:	e00f      	b.n	80059ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059ce:	4a0a      	ldr	r2, [pc, #40]	@ (80059f8 <SysTick_Config+0x40>)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059d6:	210f      	movs	r1, #15
 80059d8:	f04f 30ff 	mov.w	r0, #4294967295
 80059dc:	f7ff ff8e 	bl	80058fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059e0:	4b05      	ldr	r3, [pc, #20]	@ (80059f8 <SysTick_Config+0x40>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059e6:	4b04      	ldr	r3, [pc, #16]	@ (80059f8 <SysTick_Config+0x40>)
 80059e8:	2207      	movs	r2, #7
 80059ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	e000e010 	.word	0xe000e010

080059fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7ff ff29 	bl	800585c <__NVIC_SetPriorityGrouping>
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b086      	sub	sp, #24
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	4603      	mov	r3, r0
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	607a      	str	r2, [r7, #4]
 8005a1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a20:	f7ff ff40 	bl	80058a4 <__NVIC_GetPriorityGrouping>
 8005a24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	68b9      	ldr	r1, [r7, #8]
 8005a2a:	6978      	ldr	r0, [r7, #20]
 8005a2c:	f7ff ff90 	bl	8005950 <NVIC_EncodePriority>
 8005a30:	4602      	mov	r2, r0
 8005a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a36:	4611      	mov	r1, r2
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff ff5f 	bl	80058fc <__NVIC_SetPriority>
}
 8005a3e:	bf00      	nop
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff ff33 	bl	80058c0 <__NVIC_EnableIRQ>
}
 8005a5a:	bf00      	nop
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b082      	sub	sp, #8
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7ff ffa4 	bl	80059b8 <SysTick_Config>
 8005a70:	4603      	mov	r3, r0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b082      	sub	sp, #8
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d101      	bne.n	8005a8c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e014      	b.n	8005ab6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	791b      	ldrb	r3, [r3, #4]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d105      	bne.n	8005aa2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7fb fdcb 	bl	8001638 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e056      	b.n	8005b82 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	795b      	ldrb	r3, [r3, #5]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_DAC_Start+0x20>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e050      	b.n	8005b82 <HAL_DAC_Start+0xc2>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6819      	ldr	r1, [r3, #0]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2201      	movs	r2, #1
 8005afa:	409a      	lsls	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b04:	4b22      	ldr	r3, [pc, #136]	@ (8005b90 <HAL_DAC_Start+0xd0>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	099b      	lsrs	r3, r3, #6
 8005b0a:	4a22      	ldr	r2, [pc, #136]	@ (8005b94 <HAL_DAC_Start+0xd4>)
 8005b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b10:	099b      	lsrs	r3, r3, #6
 8005b12:	3301      	adds	r3, #1
 8005b14:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005b16:	e002      	b.n	8005b1e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1f9      	bne.n	8005b18 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10f      	bne.n	8005b4a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d11d      	bne.n	8005b74 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0201 	orr.w	r2, r2, #1
 8005b46:	605a      	str	r2, [r3, #4]
 8005b48:	e014      	b.n	8005b74 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	2102      	movs	r1, #2
 8005b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d107      	bne.n	8005b74 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0202 	orr.w	r2, r2, #2
 8005b72:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	20000000 	.word	0x20000000
 8005b94:	053e2d63 	.word	0x053e2d63

08005b98 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e018      	b.n	8005be6 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d105      	bne.n	8005bd2 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4413      	add	r3, r2
 8005bcc:	3308      	adds	r3, #8
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	e004      	b.n	8005bdc <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	3314      	adds	r3, #20
 8005bda:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	461a      	mov	r2, r3
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08a      	sub	sp, #40	@ 0x28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <HAL_DAC_ConfigChannel+0x1c>
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e19e      	b.n	8005f52 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	795b      	ldrb	r3, [r3, #5]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_DAC_ConfigChannel+0x2c>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e198      	b.n	8005f52 <HAL_DAC_ConfigChannel+0x35e>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	d17a      	bne.n	8005d2a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005c34:	f7fc feb2 	bl	800299c <HAL_GetTick>
 8005c38:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d13d      	bne.n	8005cbc <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005c40:	e018      	b.n	8005c74 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005c42:	f7fc feab 	bl	800299c <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d911      	bls.n	8005c74 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	f043 0208 	orr.w	r2, r3, #8
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2203      	movs	r2, #3
 8005c6e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e16e      	b.n	8005f52 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1df      	bne.n	8005c42 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c8c:	e020      	b.n	8005cd0 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005c8e:	f7fc fe85 	bl	800299c <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d90f      	bls.n	8005cbc <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	da0a      	bge.n	8005cbc <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f043 0208 	orr.w	r2, r3, #8
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2203      	movs	r2, #3
 8005cb6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e14a      	b.n	8005f52 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	dbe3      	blt.n	8005c8e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005cce:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f003 0310 	and.w	r3, r3, #16
 8005cdc:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	ea02 0103 	and.w	r1, r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f003 0310 	and.w	r3, r3, #16
 8005cf4:	409a      	lsls	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f003 0310 	and.w	r3, r3, #16
 8005d0a:	21ff      	movs	r1, #255	@ 0xff
 8005d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d10:	43db      	mvns	r3, r3
 8005d12:	ea02 0103 	and.w	r1, r2, r3
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f003 0310 	and.w	r3, r3, #16
 8005d20:	409a      	lsls	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d11d      	bne.n	8005d6e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d38:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	221f      	movs	r2, #31
 8005d42:	fa02 f303 	lsl.w	r3, r2, r3
 8005d46:	43db      	mvns	r3, r3
 8005d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f003 0310 	and.w	r3, r3, #16
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d62:	4313      	orrs	r3, r2
 8005d64:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d6c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d74:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2207      	movs	r2, #7
 8005d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d82:	43db      	mvns	r3, r3
 8005d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d86:	4013      	ands	r3, r2
 8005d88:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d102      	bne.n	8005d98 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	623b      	str	r3, [r7, #32]
 8005d96:	e00f      	b.n	8005db8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d102      	bne.n	8005da6 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005da0:	2301      	movs	r3, #1
 8005da2:	623b      	str	r3, [r7, #32]
 8005da4:	e008      	b.n	8005db8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d102      	bne.n	8005db4 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005dae:	2301      	movs	r3, #1
 8005db0:	623b      	str	r3, [r7, #32]
 8005db2:	e001      	b.n	8005db8 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	6a3a      	ldr	r2, [r7, #32]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd6:	43db      	mvns	r3, r3
 8005dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dda:	4013      	ands	r3, r2
 8005ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	791b      	ldrb	r3, [r3, #4]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d102      	bne.n	8005dec <HAL_DAC_ConfigChannel+0x1f8>
 8005de6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005dea:	e000      	b.n	8005dee <HAL_DAC_ConfigChannel+0x1fa>
 8005dec:	2300      	movs	r3, #0
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f003 0310 	and.w	r3, r3, #16
 8005dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	43db      	mvns	r3, r3
 8005e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e06:	4013      	ands	r3, r2
 8005e08:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	795b      	ldrb	r3, [r3, #5]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d102      	bne.n	8005e18 <HAL_DAC_ConfigChannel+0x224>
 8005e12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e16:	e000      	b.n	8005e1a <HAL_DAC_ConfigChannel+0x226>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e22:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005e26:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d114      	bne.n	8005e5a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005e30:	f001 fae0 	bl	80073f4 <HAL_RCC_GetHCLKFreq>
 8005e34:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	4a48      	ldr	r2, [pc, #288]	@ (8005f5c <HAL_DAC_ConfigChannel+0x368>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d904      	bls.n	8005e48 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e46:	e00f      	b.n	8005e68 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	4a45      	ldr	r2, [pc, #276]	@ (8005f60 <HAL_DAC_ConfigChannel+0x36c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d90a      	bls.n	8005e66 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e58:	e006      	b.n	8005e68 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e60:	4313      	orrs	r3, r2
 8005e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e64:	e000      	b.n	8005e68 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005e66:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f003 0310 	and.w	r3, r3, #16
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	fa02 f303 	lsl.w	r3, r2, r3
 8005e74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e76:	4313      	orrs	r3, r2
 8005e78:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6819      	ldr	r1, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f003 0310 	and.w	r3, r3, #16
 8005e8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	43da      	mvns	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	400a      	ands	r2, r1
 8005e9e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f003 0310 	and.w	r3, r3, #16
 8005eae:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	43db      	mvns	r3, r3
 8005eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eba:	4013      	ands	r3, r2
 8005ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f003 0310 	and.w	r3, r3, #16
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005edc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6819      	ldr	r1, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f003 0310 	and.w	r3, r3, #16
 8005eea:	22c0      	movs	r2, #192	@ 0xc0
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	43da      	mvns	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	400a      	ands	r2, r1
 8005ef8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	089b      	lsrs	r3, r3, #2
 8005f00:	f003 030f 	and.w	r3, r3, #15
 8005f04:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	089b      	lsrs	r3, r3, #2
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f003 0310 	and.w	r3, r3, #16
 8005f24:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005f28:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	ea02 0103 	and.w	r1, r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f003 0310 	and.w	r3, r3, #16
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	409a      	lsls	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005f50:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3728      	adds	r7, #40	@ 0x28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	09896800 	.word	0x09896800
 8005f60:	04c4b400 	.word	0x04c4b400

08005f64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e08d      	b.n	8006092 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	4b47      	ldr	r3, [pc, #284]	@ (800609c <HAL_DMA_Init+0x138>)
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d80f      	bhi.n	8005fa2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	461a      	mov	r2, r3
 8005f88:	4b45      	ldr	r3, [pc, #276]	@ (80060a0 <HAL_DMA_Init+0x13c>)
 8005f8a:	4413      	add	r3, r2
 8005f8c:	4a45      	ldr	r2, [pc, #276]	@ (80060a4 <HAL_DMA_Init+0x140>)
 8005f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f92:	091b      	lsrs	r3, r3, #4
 8005f94:	009a      	lsls	r2, r3, #2
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a42      	ldr	r2, [pc, #264]	@ (80060a8 <HAL_DMA_Init+0x144>)
 8005f9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005fa0:	e00e      	b.n	8005fc0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	4b40      	ldr	r3, [pc, #256]	@ (80060ac <HAL_DMA_Init+0x148>)
 8005faa:	4413      	add	r3, r2
 8005fac:	4a3d      	ldr	r2, [pc, #244]	@ (80060a4 <HAL_DMA_Init+0x140>)
 8005fae:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb2:	091b      	lsrs	r3, r3, #4
 8005fb4:	009a      	lsls	r2, r3, #2
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a3c      	ldr	r2, [pc, #240]	@ (80060b0 <HAL_DMA_Init+0x14c>)
 8005fbe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ffc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fa76 	bl	8006504 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006020:	d102      	bne.n	8006028 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800603c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d010      	beq.n	8006068 <HAL_DMA_Init+0x104>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b04      	cmp	r3, #4
 800604c:	d80c      	bhi.n	8006068 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fa96 	bl	8006580 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006064:	605a      	str	r2, [r3, #4]
 8006066:	e008      	b.n	800607a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	40020407 	.word	0x40020407
 80060a0:	bffdfff8 	.word	0xbffdfff8
 80060a4:	cccccccd 	.word	0xcccccccd
 80060a8:	40020000 	.word	0x40020000
 80060ac:	bffdfbf8 	.word	0xbffdfbf8
 80060b0:	40020400 	.word	0x40020400

080060b4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_DMA_Start_IT+0x20>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e066      	b.n	80061a2 <HAL_DMA_Start_IT+0xee>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d155      	bne.n	8006194 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0201 	bic.w	r2, r2, #1
 8006104:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	68b9      	ldr	r1, [r7, #8]
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 f9bb 	bl	8006488 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006116:	2b00      	cmp	r3, #0
 8006118:	d008      	beq.n	800612c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 020e 	orr.w	r2, r2, #14
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	e00f      	b.n	800614c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0204 	bic.w	r2, r2, #4
 800613a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 020a 	orr.w	r2, r2, #10
 800614a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d007      	beq.n	800616a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006164:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006168:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800616e:	2b00      	cmp	r3, #0
 8006170:	d007      	beq.n	8006182 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800617c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006180:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f042 0201 	orr.w	r2, r2, #1
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	e005      	b.n	80061a0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800619c:	2302      	movs	r3, #2
 800619e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80061a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d005      	beq.n	80061ce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2204      	movs	r2, #4
 80061c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	73fb      	strb	r3, [r7, #15]
 80061cc:	e037      	b.n	800623e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 020e 	bic.w	r2, r2, #14
 80061dc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061ec:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0201 	bic.w	r2, r2, #1
 80061fc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006202:	f003 021f 	and.w	r2, r3, #31
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620a:	2101      	movs	r1, #1
 800620c:	fa01 f202 	lsl.w	r2, r1, r2
 8006210:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800621a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00c      	beq.n	800623e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800622e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006232:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800623c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800624e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006264:	2300      	movs	r3, #0
 8006266:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d00d      	beq.n	8006290 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2204      	movs	r2, #4
 8006278:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	73fb      	strb	r3, [r7, #15]
 800628e:	e047      	b.n	8006320 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 020e 	bic.w	r2, r2, #14
 800629e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0201 	bic.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062c4:	f003 021f 	and.w	r2, r3, #31
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062cc:	2101      	movs	r1, #1
 80062ce:	fa01 f202 	lsl.w	r2, r1, r2
 80062d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80062dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00c      	beq.n	8006300 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80062fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	4798      	blx	r3
    }
  }
  return status;
 8006320:	7bfb      	ldrb	r3, [r7, #15]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006346:	f003 031f 	and.w	r3, r3, #31
 800634a:	2204      	movs	r2, #4
 800634c:	409a      	lsls	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4013      	ands	r3, r2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d026      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x7a>
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d021      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	d107      	bne.n	800637e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0204 	bic.w	r2, r2, #4
 800637c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006382:	f003 021f 	and.w	r2, r3, #31
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638a:	2104      	movs	r1, #4
 800638c:	fa01 f202 	lsl.w	r2, r1, r2
 8006390:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006396:	2b00      	cmp	r3, #0
 8006398:	d071      	beq.n	800647e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80063a2:	e06c      	b.n	800647e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063a8:	f003 031f 	and.w	r3, r3, #31
 80063ac:	2202      	movs	r2, #2
 80063ae:	409a      	lsls	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4013      	ands	r3, r2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d02e      	beq.n	8006416 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d029      	beq.n	8006416 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0320 	and.w	r3, r3, #32
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10b      	bne.n	80063e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 020a 	bic.w	r2, r2, #10
 80063de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ec:	f003 021f 	and.w	r2, r3, #31
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f4:	2102      	movs	r1, #2
 80063f6:	fa01 f202 	lsl.w	r2, r1, r2
 80063fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d038      	beq.n	800647e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006414:	e033      	b.n	800647e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641a:	f003 031f 	and.w	r3, r3, #31
 800641e:	2208      	movs	r2, #8
 8006420:	409a      	lsls	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4013      	ands	r3, r2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d02a      	beq.n	8006480 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f003 0308 	and.w	r3, r3, #8
 8006430:	2b00      	cmp	r3, #0
 8006432:	d025      	beq.n	8006480 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 020e 	bic.w	r2, r2, #14
 8006442:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006448:	f003 021f 	and.w	r2, r3, #31
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006450:	2101      	movs	r1, #1
 8006452:	fa01 f202 	lsl.w	r2, r1, r2
 8006456:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006472:	2b00      	cmp	r3, #0
 8006474:	d004      	beq.n	8006480 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800647e:	bf00      	nop
 8006480:	bf00      	nop
}
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800649e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d004      	beq.n	80064b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80064b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b6:	f003 021f 	and.w	r2, r3, #31
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064be:	2101      	movs	r1, #1
 80064c0:	fa01 f202 	lsl.w	r2, r1, r2
 80064c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2b10      	cmp	r3, #16
 80064d4:	d108      	bne.n	80064e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80064e6:	e007      	b.n	80064f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	60da      	str	r2, [r3, #12]
}
 80064f8:	bf00      	nop
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	4b16      	ldr	r3, [pc, #88]	@ (800656c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006514:	429a      	cmp	r2, r3
 8006516:	d802      	bhi.n	800651e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006518:	4b15      	ldr	r3, [pc, #84]	@ (8006570 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	e001      	b.n	8006522 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800651e:	4b15      	ldr	r3, [pc, #84]	@ (8006574 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006520:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	3b08      	subs	r3, #8
 800652e:	4a12      	ldr	r2, [pc, #72]	@ (8006578 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006530:	fba2 2303 	umull	r2, r3, r2, r3
 8006534:	091b      	lsrs	r3, r3, #4
 8006536:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800653c:	089b      	lsrs	r3, r3, #2
 800653e:	009a      	lsls	r2, r3, #2
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	4413      	add	r3, r2
 8006544:	461a      	mov	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a0b      	ldr	r2, [pc, #44]	@ (800657c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800654e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f003 031f 	and.w	r3, r3, #31
 8006556:	2201      	movs	r2, #1
 8006558:	409a      	lsls	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	40020407 	.word	0x40020407
 8006570:	40020800 	.word	0x40020800
 8006574:	40020820 	.word	0x40020820
 8006578:	cccccccd 	.word	0xcccccccd
 800657c:	40020880 	.word	0x40020880

08006580 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4b0b      	ldr	r3, [pc, #44]	@ (80065c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006594:	4413      	add	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	461a      	mov	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a08      	ldr	r2, [pc, #32]	@ (80065c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80065a2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	f003 031f 	and.w	r3, r3, #31
 80065ac:	2201      	movs	r2, #1
 80065ae:	409a      	lsls	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80065b4:	bf00      	nop
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	1000823f 	.word	0x1000823f
 80065c4:	40020940 	.word	0x40020940

080065c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80065d6:	e15a      	b.n	800688e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	2101      	movs	r1, #1
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	fa01 f303 	lsl.w	r3, r1, r3
 80065e4:	4013      	ands	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 814c 	beq.w	8006888 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f003 0303 	and.w	r3, r3, #3
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d005      	beq.n	8006608 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006604:	2b02      	cmp	r3, #2
 8006606:	d130      	bne.n	800666a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	2203      	movs	r2, #3
 8006614:	fa02 f303 	lsl.w	r3, r2, r3
 8006618:	43db      	mvns	r3, r3
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	4013      	ands	r3, r2
 800661e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	fa02 f303 	lsl.w	r3, r2, r3
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800663e:	2201      	movs	r2, #1
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	fa02 f303 	lsl.w	r3, r2, r3
 8006646:	43db      	mvns	r3, r3
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	4013      	ands	r3, r2
 800664c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	091b      	lsrs	r3, r3, #4
 8006654:	f003 0201 	and.w	r2, r3, #1
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	fa02 f303 	lsl.w	r3, r2, r3
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	4313      	orrs	r3, r2
 8006662:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	2b03      	cmp	r3, #3
 8006674:	d017      	beq.n	80066a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	005b      	lsls	r3, r3, #1
 8006680:	2203      	movs	r2, #3
 8006682:	fa02 f303 	lsl.w	r3, r2, r3
 8006686:	43db      	mvns	r3, r3
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4013      	ands	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	fa02 f303 	lsl.w	r3, r2, r3
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	4313      	orrs	r3, r2
 800669e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f003 0303 	and.w	r3, r3, #3
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d123      	bne.n	80066fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	08da      	lsrs	r2, r3, #3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3208      	adds	r2, #8
 80066ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	220f      	movs	r2, #15
 80066ca:	fa02 f303 	lsl.w	r3, r2, r3
 80066ce:	43db      	mvns	r3, r3
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4013      	ands	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	691a      	ldr	r2, [r3, #16]
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f003 0307 	and.w	r3, r3, #7
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	fa02 f303 	lsl.w	r3, r2, r3
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	08da      	lsrs	r2, r3, #3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3208      	adds	r2, #8
 80066f4:	6939      	ldr	r1, [r7, #16]
 80066f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	2203      	movs	r2, #3
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	43db      	mvns	r3, r3
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4013      	ands	r3, r2
 8006710:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f003 0203 	and.w	r2, r3, #3
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	fa02 f303 	lsl.w	r3, r2, r3
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4313      	orrs	r3, r2
 8006726:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006736:	2b00      	cmp	r3, #0
 8006738:	f000 80a6 	beq.w	8006888 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800673c:	4b5b      	ldr	r3, [pc, #364]	@ (80068ac <HAL_GPIO_Init+0x2e4>)
 800673e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006740:	4a5a      	ldr	r2, [pc, #360]	@ (80068ac <HAL_GPIO_Init+0x2e4>)
 8006742:	f043 0301 	orr.w	r3, r3, #1
 8006746:	6613      	str	r3, [r2, #96]	@ 0x60
 8006748:	4b58      	ldr	r3, [pc, #352]	@ (80068ac <HAL_GPIO_Init+0x2e4>)
 800674a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	60bb      	str	r3, [r7, #8]
 8006752:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006754:	4a56      	ldr	r2, [pc, #344]	@ (80068b0 <HAL_GPIO_Init+0x2e8>)
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	089b      	lsrs	r3, r3, #2
 800675a:	3302      	adds	r3, #2
 800675c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006760:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f003 0303 	and.w	r3, r3, #3
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	220f      	movs	r2, #15
 800676c:	fa02 f303 	lsl.w	r3, r2, r3
 8006770:	43db      	mvns	r3, r3
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4013      	ands	r3, r2
 8006776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800677e:	d01f      	beq.n	80067c0 <HAL_GPIO_Init+0x1f8>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a4c      	ldr	r2, [pc, #304]	@ (80068b4 <HAL_GPIO_Init+0x2ec>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d019      	beq.n	80067bc <HAL_GPIO_Init+0x1f4>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a4b      	ldr	r2, [pc, #300]	@ (80068b8 <HAL_GPIO_Init+0x2f0>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d013      	beq.n	80067b8 <HAL_GPIO_Init+0x1f0>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a4a      	ldr	r2, [pc, #296]	@ (80068bc <HAL_GPIO_Init+0x2f4>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d00d      	beq.n	80067b4 <HAL_GPIO_Init+0x1ec>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a49      	ldr	r2, [pc, #292]	@ (80068c0 <HAL_GPIO_Init+0x2f8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d007      	beq.n	80067b0 <HAL_GPIO_Init+0x1e8>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a48      	ldr	r2, [pc, #288]	@ (80068c4 <HAL_GPIO_Init+0x2fc>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d101      	bne.n	80067ac <HAL_GPIO_Init+0x1e4>
 80067a8:	2305      	movs	r3, #5
 80067aa:	e00a      	b.n	80067c2 <HAL_GPIO_Init+0x1fa>
 80067ac:	2306      	movs	r3, #6
 80067ae:	e008      	b.n	80067c2 <HAL_GPIO_Init+0x1fa>
 80067b0:	2304      	movs	r3, #4
 80067b2:	e006      	b.n	80067c2 <HAL_GPIO_Init+0x1fa>
 80067b4:	2303      	movs	r3, #3
 80067b6:	e004      	b.n	80067c2 <HAL_GPIO_Init+0x1fa>
 80067b8:	2302      	movs	r3, #2
 80067ba:	e002      	b.n	80067c2 <HAL_GPIO_Init+0x1fa>
 80067bc:	2301      	movs	r3, #1
 80067be:	e000      	b.n	80067c2 <HAL_GPIO_Init+0x1fa>
 80067c0:	2300      	movs	r3, #0
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	f002 0203 	and.w	r2, r2, #3
 80067c8:	0092      	lsls	r2, r2, #2
 80067ca:	4093      	lsls	r3, r2
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067d2:	4937      	ldr	r1, [pc, #220]	@ (80068b0 <HAL_GPIO_Init+0x2e8>)
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	089b      	lsrs	r3, r3, #2
 80067d8:	3302      	adds	r3, #2
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80067e0:	4b39      	ldr	r3, [pc, #228]	@ (80068c8 <HAL_GPIO_Init+0x300>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	43db      	mvns	r3, r3
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4013      	ands	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	4313      	orrs	r3, r2
 8006802:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006804:	4a30      	ldr	r2, [pc, #192]	@ (80068c8 <HAL_GPIO_Init+0x300>)
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800680a:	4b2f      	ldr	r3, [pc, #188]	@ (80068c8 <HAL_GPIO_Init+0x300>)
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	43db      	mvns	r3, r3
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4013      	ands	r3, r2
 8006818:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800682e:	4a26      	ldr	r2, [pc, #152]	@ (80068c8 <HAL_GPIO_Init+0x300>)
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006834:	4b24      	ldr	r3, [pc, #144]	@ (80068c8 <HAL_GPIO_Init+0x300>)
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	43db      	mvns	r3, r3
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	4013      	ands	r3, r2
 8006842:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006858:	4a1b      	ldr	r2, [pc, #108]	@ (80068c8 <HAL_GPIO_Init+0x300>)
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800685e:	4b1a      	ldr	r3, [pc, #104]	@ (80068c8 <HAL_GPIO_Init+0x300>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	43db      	mvns	r3, r3
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	4013      	ands	r3, r2
 800686c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4313      	orrs	r3, r2
 8006880:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006882:	4a11      	ldr	r2, [pc, #68]	@ (80068c8 <HAL_GPIO_Init+0x300>)
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	3301      	adds	r3, #1
 800688c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	fa22 f303 	lsr.w	r3, r2, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	f47f ae9d 	bne.w	80065d8 <HAL_GPIO_Init+0x10>
  }
}
 800689e:	bf00      	nop
 80068a0:	bf00      	nop
 80068a2:	371c      	adds	r7, #28
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	40021000 	.word	0x40021000
 80068b0:	40010000 	.word	0x40010000
 80068b4:	48000400 	.word	0x48000400
 80068b8:	48000800 	.word	0x48000800
 80068bc:	48000c00 	.word	0x48000c00
 80068c0:	48001000 	.word	0x48001000
 80068c4:	48001400 	.word	0x48001400
 80068c8:	40010400 	.word	0x40010400

080068cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	460b      	mov	r3, r1
 80068d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	887b      	ldrh	r3, [r7, #2]
 80068de:	4013      	ands	r3, r2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068e4:	2301      	movs	r3, #1
 80068e6:	73fb      	strb	r3, [r7, #15]
 80068e8:	e001      	b.n	80068ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068ea:	2300      	movs	r3, #0
 80068ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	807b      	strh	r3, [r7, #2]
 8006908:	4613      	mov	r3, r2
 800690a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800690c:	787b      	ldrb	r3, [r7, #1]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006912:	887a      	ldrh	r2, [r7, #2]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006918:	e002      	b.n	8006920 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800691a:	887a      	ldrh	r2, [r7, #2]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d141      	bne.n	80069be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800693a:	4b4b      	ldr	r3, [pc, #300]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006946:	d131      	bne.n	80069ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006948:	4b47      	ldr	r3, [pc, #284]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800694a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800694e:	4a46      	ldr	r2, [pc, #280]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006954:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006958:	4b43      	ldr	r3, [pc, #268]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006960:	4a41      	ldr	r2, [pc, #260]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006962:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006966:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006968:	4b40      	ldr	r3, [pc, #256]	@ (8006a6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2232      	movs	r2, #50	@ 0x32
 800696e:	fb02 f303 	mul.w	r3, r2, r3
 8006972:	4a3f      	ldr	r2, [pc, #252]	@ (8006a70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006974:	fba2 2303 	umull	r2, r3, r2, r3
 8006978:	0c9b      	lsrs	r3, r3, #18
 800697a:	3301      	adds	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800697e:	e002      	b.n	8006986 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3b01      	subs	r3, #1
 8006984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006986:	4b38      	ldr	r3, [pc, #224]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800698e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006992:	d102      	bne.n	800699a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1f2      	bne.n	8006980 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800699a:	4b33      	ldr	r3, [pc, #204]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069a6:	d158      	bne.n	8006a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e057      	b.n	8006a5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069ac:	4b2e      	ldr	r3, [pc, #184]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069b2:	4a2d      	ldr	r2, [pc, #180]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80069bc:	e04d      	b.n	8006a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069c4:	d141      	bne.n	8006a4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80069c6:	4b28      	ldr	r3, [pc, #160]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80069ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069d2:	d131      	bne.n	8006a38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069d4:	4b24      	ldr	r3, [pc, #144]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069da:	4a23      	ldr	r2, [pc, #140]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80069e4:	4b20      	ldr	r3, [pc, #128]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80069ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80069f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80069f4:	4b1d      	ldr	r3, [pc, #116]	@ (8006a6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2232      	movs	r2, #50	@ 0x32
 80069fa:	fb02 f303 	mul.w	r3, r2, r3
 80069fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006a70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006a00:	fba2 2303 	umull	r2, r3, r2, r3
 8006a04:	0c9b      	lsrs	r3, r3, #18
 8006a06:	3301      	adds	r3, #1
 8006a08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a0a:	e002      	b.n	8006a12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a12:	4b15      	ldr	r3, [pc, #84]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a1e:	d102      	bne.n	8006a26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1f2      	bne.n	8006a0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a26:	4b10      	ldr	r3, [pc, #64]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a32:	d112      	bne.n	8006a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e011      	b.n	8006a5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a38:	4b0b      	ldr	r3, [pc, #44]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006a48:	e007      	b.n	8006a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006a4a:	4b07      	ldr	r3, [pc, #28]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006a52:	4a05      	ldr	r2, [pc, #20]	@ (8006a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006a58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	40007000 	.word	0x40007000
 8006a6c:	20000000 	.word	0x20000000
 8006a70:	431bde83 	.word	0x431bde83

08006a74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006a74:	b480      	push	{r7}
 8006a76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006a78:	4b05      	ldr	r3, [pc, #20]	@ (8006a90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	4a04      	ldr	r2, [pc, #16]	@ (8006a90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006a7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a82:	6093      	str	r3, [r2, #8]
}
 8006a84:	bf00      	nop
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	40007000 	.word	0x40007000

08006a94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b088      	sub	sp, #32
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e2fe      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d075      	beq.n	8006b9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ab2:	4b97      	ldr	r3, [pc, #604]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 030c 	and.w	r3, r3, #12
 8006aba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006abc:	4b94      	ldr	r3, [pc, #592]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f003 0303 	and.w	r3, r3, #3
 8006ac4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	2b0c      	cmp	r3, #12
 8006aca:	d102      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x3e>
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d002      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x44>
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	2b08      	cmp	r3, #8
 8006ad6:	d10b      	bne.n	8006af0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ad8:	4b8d      	ldr	r3, [pc, #564]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d05b      	beq.n	8006b9c <HAL_RCC_OscConfig+0x108>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d157      	bne.n	8006b9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e2d9      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006af8:	d106      	bne.n	8006b08 <HAL_RCC_OscConfig+0x74>
 8006afa:	4b85      	ldr	r3, [pc, #532]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a84      	ldr	r2, [pc, #528]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	e01d      	b.n	8006b44 <HAL_RCC_OscConfig+0xb0>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b10:	d10c      	bne.n	8006b2c <HAL_RCC_OscConfig+0x98>
 8006b12:	4b7f      	ldr	r3, [pc, #508]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a7e      	ldr	r2, [pc, #504]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006b18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b1c:	6013      	str	r3, [r2, #0]
 8006b1e:	4b7c      	ldr	r3, [pc, #496]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a7b      	ldr	r2, [pc, #492]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	e00b      	b.n	8006b44 <HAL_RCC_OscConfig+0xb0>
 8006b2c:	4b78      	ldr	r3, [pc, #480]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a77      	ldr	r2, [pc, #476]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	4b75      	ldr	r3, [pc, #468]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a74      	ldr	r2, [pc, #464]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006b3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d013      	beq.n	8006b74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4c:	f7fb ff26 	bl	800299c <HAL_GetTick>
 8006b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b52:	e008      	b.n	8006b66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b54:	f7fb ff22 	bl	800299c <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b64      	cmp	r3, #100	@ 0x64
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e29e      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b66:	4b6a      	ldr	r3, [pc, #424]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0f0      	beq.n	8006b54 <HAL_RCC_OscConfig+0xc0>
 8006b72:	e014      	b.n	8006b9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b74:	f7fb ff12 	bl	800299c <HAL_GetTick>
 8006b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b7a:	e008      	b.n	8006b8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b7c:	f7fb ff0e 	bl	800299c <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b64      	cmp	r3, #100	@ 0x64
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e28a      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b8e:	4b60      	ldr	r3, [pc, #384]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1f0      	bne.n	8006b7c <HAL_RCC_OscConfig+0xe8>
 8006b9a:	e000      	b.n	8006b9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d075      	beq.n	8006c96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006baa:	4b59      	ldr	r3, [pc, #356]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f003 030c 	and.w	r3, r3, #12
 8006bb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006bb4:	4b56      	ldr	r3, [pc, #344]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f003 0303 	and.w	r3, r3, #3
 8006bbc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	2b0c      	cmp	r3, #12
 8006bc2:	d102      	bne.n	8006bca <HAL_RCC_OscConfig+0x136>
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d002      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x13c>
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	d11f      	bne.n	8006c10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bd0:	4b4f      	ldr	r3, [pc, #316]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d005      	beq.n	8006be8 <HAL_RCC_OscConfig+0x154>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e25d      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006be8:	4b49      	ldr	r3, [pc, #292]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	061b      	lsls	r3, r3, #24
 8006bf6:	4946      	ldr	r1, [pc, #280]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006bfc:	4b45      	ldr	r3, [pc, #276]	@ (8006d14 <HAL_RCC_OscConfig+0x280>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fb fe7f 	bl	8002904 <HAL_InitTick>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d043      	beq.n	8006c94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e249      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d023      	beq.n	8006c60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c18:	4b3d      	ldr	r3, [pc, #244]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a3c      	ldr	r2, [pc, #240]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006c1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c24:	f7fb feba 	bl	800299c <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c2c:	f7fb feb6 	bl	800299c <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e232      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c3e:	4b34      	ldr	r3, [pc, #208]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0f0      	beq.n	8006c2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c4a:	4b31      	ldr	r3, [pc, #196]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	061b      	lsls	r3, r3, #24
 8006c58:	492d      	ldr	r1, [pc, #180]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	604b      	str	r3, [r1, #4]
 8006c5e:	e01a      	b.n	8006c96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c60:	4b2b      	ldr	r3, [pc, #172]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a2a      	ldr	r2, [pc, #168]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006c66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c6c:	f7fb fe96 	bl	800299c <HAL_GetTick>
 8006c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c72:	e008      	b.n	8006c86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c74:	f7fb fe92 	bl	800299c <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e20e      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c86:	4b22      	ldr	r3, [pc, #136]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1f0      	bne.n	8006c74 <HAL_RCC_OscConfig+0x1e0>
 8006c92:	e000      	b.n	8006c96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0308 	and.w	r3, r3, #8
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d041      	beq.n	8006d26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d01c      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006caa:	4b19      	ldr	r3, [pc, #100]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cb0:	4a17      	ldr	r2, [pc, #92]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006cb2:	f043 0301 	orr.w	r3, r3, #1
 8006cb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cba:	f7fb fe6f 	bl	800299c <HAL_GetTick>
 8006cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006cc0:	e008      	b.n	8006cd4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cc2:	f7fb fe6b 	bl	800299c <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d901      	bls.n	8006cd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e1e7      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0ef      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x22e>
 8006ce2:	e020      	b.n	8006d26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cea:	4a09      	ldr	r2, [pc, #36]	@ (8006d10 <HAL_RCC_OscConfig+0x27c>)
 8006cec:	f023 0301 	bic.w	r3, r3, #1
 8006cf0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf4:	f7fb fe52 	bl	800299c <HAL_GetTick>
 8006cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006cfa:	e00d      	b.n	8006d18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cfc:	f7fb fe4e 	bl	800299c <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d906      	bls.n	8006d18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e1ca      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>
 8006d0e:	bf00      	nop
 8006d10:	40021000 	.word	0x40021000
 8006d14:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d18:	4b8c      	ldr	r3, [pc, #560]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1ea      	bne.n	8006cfc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 80a6 	beq.w	8006e80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d34:	2300      	movs	r3, #0
 8006d36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006d38:	4b84      	ldr	r3, [pc, #528]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <HAL_RCC_OscConfig+0x2b4>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e000      	b.n	8006d4a <HAL_RCC_OscConfig+0x2b6>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00d      	beq.n	8006d6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d4e:	4b7f      	ldr	r3, [pc, #508]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d52:	4a7e      	ldr	r2, [pc, #504]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d5a:	4b7c      	ldr	r3, [pc, #496]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006d66:	2301      	movs	r3, #1
 8006d68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d6a:	4b79      	ldr	r3, [pc, #484]	@ (8006f50 <HAL_RCC_OscConfig+0x4bc>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d118      	bne.n	8006da8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d76:	4b76      	ldr	r3, [pc, #472]	@ (8006f50 <HAL_RCC_OscConfig+0x4bc>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a75      	ldr	r2, [pc, #468]	@ (8006f50 <HAL_RCC_OscConfig+0x4bc>)
 8006d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d82:	f7fb fe0b 	bl	800299c <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d88:	e008      	b.n	8006d9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d8a:	f7fb fe07 	bl	800299c <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e183      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d9c:	4b6c      	ldr	r3, [pc, #432]	@ (8006f50 <HAL_RCC_OscConfig+0x4bc>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0f0      	beq.n	8006d8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d108      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x32e>
 8006db0:	4b66      	ldr	r3, [pc, #408]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006db6:	4a65      	ldr	r2, [pc, #404]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006db8:	f043 0301 	orr.w	r3, r3, #1
 8006dbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006dc0:	e024      	b.n	8006e0c <HAL_RCC_OscConfig+0x378>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	2b05      	cmp	r3, #5
 8006dc8:	d110      	bne.n	8006dec <HAL_RCC_OscConfig+0x358>
 8006dca:	4b60      	ldr	r3, [pc, #384]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dd0:	4a5e      	ldr	r2, [pc, #376]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006dd2:	f043 0304 	orr.w	r3, r3, #4
 8006dd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006dda:	4b5c      	ldr	r3, [pc, #368]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006de0:	4a5a      	ldr	r2, [pc, #360]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006de2:	f043 0301 	orr.w	r3, r3, #1
 8006de6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006dea:	e00f      	b.n	8006e0c <HAL_RCC_OscConfig+0x378>
 8006dec:	4b57      	ldr	r3, [pc, #348]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df2:	4a56      	ldr	r2, [pc, #344]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006df4:	f023 0301 	bic.w	r3, r3, #1
 8006df8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006dfc:	4b53      	ldr	r3, [pc, #332]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e02:	4a52      	ldr	r2, [pc, #328]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006e04:	f023 0304 	bic.w	r3, r3, #4
 8006e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d016      	beq.n	8006e42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e14:	f7fb fdc2 	bl	800299c <HAL_GetTick>
 8006e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e1a:	e00a      	b.n	8006e32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e1c:	f7fb fdbe 	bl	800299c <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e138      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e32:	4b46      	ldr	r3, [pc, #280]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0ed      	beq.n	8006e1c <HAL_RCC_OscConfig+0x388>
 8006e40:	e015      	b.n	8006e6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e42:	f7fb fdab 	bl	800299c <HAL_GetTick>
 8006e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e48:	e00a      	b.n	8006e60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e4a:	f7fb fda7 	bl	800299c <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d901      	bls.n	8006e60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e121      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e60:	4b3a      	ldr	r3, [pc, #232]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1ed      	bne.n	8006e4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e6e:	7ffb      	ldrb	r3, [r7, #31]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d105      	bne.n	8006e80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e74:	4b35      	ldr	r3, [pc, #212]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e78:	4a34      	ldr	r2, [pc, #208]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006e7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e7e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0320 	and.w	r3, r3, #32
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d03c      	beq.n	8006f06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01c      	beq.n	8006ece <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e94:	4b2d      	ldr	r3, [pc, #180]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006e9c:	f043 0301 	orr.w	r3, r3, #1
 8006ea0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea4:	f7fb fd7a 	bl	800299c <HAL_GetTick>
 8006ea8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006eaa:	e008      	b.n	8006ebe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006eac:	f7fb fd76 	bl	800299c <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e0f2      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ebe:	4b23      	ldr	r3, [pc, #140]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006ec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d0ef      	beq.n	8006eac <HAL_RCC_OscConfig+0x418>
 8006ecc:	e01b      	b.n	8006f06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ece:	4b1f      	ldr	r3, [pc, #124]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006ed0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006ed6:	f023 0301 	bic.w	r3, r3, #1
 8006eda:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ede:	f7fb fd5d 	bl	800299c <HAL_GetTick>
 8006ee2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ee4:	e008      	b.n	8006ef8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ee6:	f7fb fd59 	bl	800299c <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e0d5      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ef8:	4b14      	ldr	r3, [pc, #80]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006efa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1ef      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 80c9 	beq.w	80070a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f10:	4b0e      	ldr	r3, [pc, #56]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f003 030c 	and.w	r3, r3, #12
 8006f18:	2b0c      	cmp	r3, #12
 8006f1a:	f000 8083 	beq.w	8007024 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d15e      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f26:	4b09      	ldr	r3, [pc, #36]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a08      	ldr	r2, [pc, #32]	@ (8006f4c <HAL_RCC_OscConfig+0x4b8>)
 8006f2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f32:	f7fb fd33 	bl	800299c <HAL_GetTick>
 8006f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f38:	e00c      	b.n	8006f54 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f3a:	f7fb fd2f 	bl	800299c <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d905      	bls.n	8006f54 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e0ab      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>
 8006f4c:	40021000 	.word	0x40021000
 8006f50:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f54:	4b55      	ldr	r3, [pc, #340]	@ (80070ac <HAL_RCC_OscConfig+0x618>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1ec      	bne.n	8006f3a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f60:	4b52      	ldr	r3, [pc, #328]	@ (80070ac <HAL_RCC_OscConfig+0x618>)
 8006f62:	68da      	ldr	r2, [r3, #12]
 8006f64:	4b52      	ldr	r3, [pc, #328]	@ (80070b0 <HAL_RCC_OscConfig+0x61c>)
 8006f66:	4013      	ands	r3, r2
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	6a11      	ldr	r1, [r2, #32]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f70:	3a01      	subs	r2, #1
 8006f72:	0112      	lsls	r2, r2, #4
 8006f74:	4311      	orrs	r1, r2
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006f7a:	0212      	lsls	r2, r2, #8
 8006f7c:	4311      	orrs	r1, r2
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006f82:	0852      	lsrs	r2, r2, #1
 8006f84:	3a01      	subs	r2, #1
 8006f86:	0552      	lsls	r2, r2, #21
 8006f88:	4311      	orrs	r1, r2
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006f8e:	0852      	lsrs	r2, r2, #1
 8006f90:	3a01      	subs	r2, #1
 8006f92:	0652      	lsls	r2, r2, #25
 8006f94:	4311      	orrs	r1, r2
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006f9a:	06d2      	lsls	r2, r2, #27
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	4943      	ldr	r1, [pc, #268]	@ (80070ac <HAL_RCC_OscConfig+0x618>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fa4:	4b41      	ldr	r3, [pc, #260]	@ (80070ac <HAL_RCC_OscConfig+0x618>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a40      	ldr	r2, [pc, #256]	@ (80070ac <HAL_RCC_OscConfig+0x618>)
 8006faa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006fae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006fb0:	4b3e      	ldr	r3, [pc, #248]	@ (80070ac <HAL_RCC_OscConfig+0x618>)
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	4a3d      	ldr	r2, [pc, #244]	@ (80070ac <HAL_RCC_OscConfig+0x618>)
 8006fb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006fba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fbc:	f7fb fcee 	bl	800299c <HAL_GetTick>
 8006fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fc2:	e008      	b.n	8006fd6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fc4:	f7fb fcea 	bl	800299c <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e066      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fd6:	4b35      	ldr	r3, [pc, #212]	@ (80070ac <HAL_RCC_OscConfig+0x618>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d0f0      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x530>
 8006fe2:	e05e      	b.n	80070a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fe4:	4b31      	ldr	r3, [pc, #196]	@ (80070ac <HAL_RCC_OscConfig+0x618>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a30      	ldr	r2, [pc, #192]	@ (80070ac <HAL_RCC_OscConfig+0x618>)
 8006fea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff0:	f7fb fcd4 	bl	800299c <HAL_GetTick>
 8006ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ff6:	e008      	b.n	800700a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ff8:	f7fb fcd0 	bl	800299c <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	2b02      	cmp	r3, #2
 8007004:	d901      	bls.n	800700a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e04c      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800700a:	4b28      	ldr	r3, [pc, #160]	@ (80070ac <HAL_RCC_OscConfig+0x618>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1f0      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007016:	4b25      	ldr	r3, [pc, #148]	@ (80070ac <HAL_RCC_OscConfig+0x618>)
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	4924      	ldr	r1, [pc, #144]	@ (80070ac <HAL_RCC_OscConfig+0x618>)
 800701c:	4b25      	ldr	r3, [pc, #148]	@ (80070b4 <HAL_RCC_OscConfig+0x620>)
 800701e:	4013      	ands	r3, r2
 8007020:	60cb      	str	r3, [r1, #12]
 8007022:	e03e      	b.n	80070a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	69db      	ldr	r3, [r3, #28]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d101      	bne.n	8007030 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e039      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007030:	4b1e      	ldr	r3, [pc, #120]	@ (80070ac <HAL_RCC_OscConfig+0x618>)
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f003 0203 	and.w	r2, r3, #3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	429a      	cmp	r2, r3
 8007042:	d12c      	bne.n	800709e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704e:	3b01      	subs	r3, #1
 8007050:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007052:	429a      	cmp	r2, r3
 8007054:	d123      	bne.n	800709e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007060:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007062:	429a      	cmp	r2, r3
 8007064:	d11b      	bne.n	800709e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007070:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007072:	429a      	cmp	r2, r3
 8007074:	d113      	bne.n	800709e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007080:	085b      	lsrs	r3, r3, #1
 8007082:	3b01      	subs	r3, #1
 8007084:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007086:	429a      	cmp	r2, r3
 8007088:	d109      	bne.n	800709e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007094:	085b      	lsrs	r3, r3, #1
 8007096:	3b01      	subs	r3, #1
 8007098:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800709a:	429a      	cmp	r2, r3
 800709c:	d001      	beq.n	80070a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e000      	b.n	80070a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3720      	adds	r7, #32
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	40021000 	.word	0x40021000
 80070b0:	019f800c 	.word	0x019f800c
 80070b4:	feeefffc 	.word	0xfeeefffc

080070b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80070c2:	2300      	movs	r3, #0
 80070c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e11e      	b.n	800730e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070d0:	4b91      	ldr	r3, [pc, #580]	@ (8007318 <HAL_RCC_ClockConfig+0x260>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 030f 	and.w	r3, r3, #15
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d910      	bls.n	8007100 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070de:	4b8e      	ldr	r3, [pc, #568]	@ (8007318 <HAL_RCC_ClockConfig+0x260>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f023 020f 	bic.w	r2, r3, #15
 80070e6:	498c      	ldr	r1, [pc, #560]	@ (8007318 <HAL_RCC_ClockConfig+0x260>)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ee:	4b8a      	ldr	r3, [pc, #552]	@ (8007318 <HAL_RCC_ClockConfig+0x260>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 030f 	and.w	r3, r3, #15
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d001      	beq.n	8007100 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e106      	b.n	800730e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b00      	cmp	r3, #0
 800710a:	d073      	beq.n	80071f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	2b03      	cmp	r3, #3
 8007112:	d129      	bne.n	8007168 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007114:	4b81      	ldr	r3, [pc, #516]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e0f4      	b.n	800730e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007124:	f000 f99e 	bl	8007464 <RCC_GetSysClockFreqFromPLLSource>
 8007128:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	4a7c      	ldr	r2, [pc, #496]	@ (8007320 <HAL_RCC_ClockConfig+0x268>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d93f      	bls.n	80071b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007132:	4b7a      	ldr	r3, [pc, #488]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d009      	beq.n	8007152 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007146:	2b00      	cmp	r3, #0
 8007148:	d033      	beq.n	80071b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800714e:	2b00      	cmp	r3, #0
 8007150:	d12f      	bne.n	80071b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007152:	4b72      	ldr	r3, [pc, #456]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800715a:	4a70      	ldr	r2, [pc, #448]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 800715c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007160:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007162:	2380      	movs	r3, #128	@ 0x80
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	e024      	b.n	80071b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	2b02      	cmp	r3, #2
 800716e:	d107      	bne.n	8007180 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007170:	4b6a      	ldr	r3, [pc, #424]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d109      	bne.n	8007190 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e0c6      	b.n	800730e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007180:	4b66      	ldr	r3, [pc, #408]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e0be      	b.n	800730e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007190:	f000 f8ce 	bl	8007330 <HAL_RCC_GetSysClockFreq>
 8007194:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	4a61      	ldr	r2, [pc, #388]	@ (8007320 <HAL_RCC_ClockConfig+0x268>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d909      	bls.n	80071b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800719e:	4b5f      	ldr	r3, [pc, #380]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071a6:	4a5d      	ldr	r2, [pc, #372]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 80071a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80071ae:	2380      	movs	r3, #128	@ 0x80
 80071b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071b2:	4b5a      	ldr	r3, [pc, #360]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f023 0203 	bic.w	r2, r3, #3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	4957      	ldr	r1, [pc, #348]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071c4:	f7fb fbea 	bl	800299c <HAL_GetTick>
 80071c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071ca:	e00a      	b.n	80071e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071cc:	f7fb fbe6 	bl	800299c <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071da:	4293      	cmp	r3, r2
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e095      	b.n	800730e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071e2:	4b4e      	ldr	r3, [pc, #312]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f003 020c 	and.w	r2, r3, #12
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d1eb      	bne.n	80071cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d023      	beq.n	8007248 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800720c:	4b43      	ldr	r3, [pc, #268]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	4a42      	ldr	r2, [pc, #264]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 8007212:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007216:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0308 	and.w	r3, r3, #8
 8007220:	2b00      	cmp	r3, #0
 8007222:	d007      	beq.n	8007234 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007224:	4b3d      	ldr	r3, [pc, #244]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800722c:	4a3b      	ldr	r2, [pc, #236]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 800722e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007232:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007234:	4b39      	ldr	r3, [pc, #228]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	4936      	ldr	r1, [pc, #216]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 8007242:	4313      	orrs	r3, r2
 8007244:	608b      	str	r3, [r1, #8]
 8007246:	e008      	b.n	800725a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2b80      	cmp	r3, #128	@ 0x80
 800724c:	d105      	bne.n	800725a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800724e:	4b33      	ldr	r3, [pc, #204]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	4a32      	ldr	r2, [pc, #200]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 8007254:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007258:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800725a:	4b2f      	ldr	r3, [pc, #188]	@ (8007318 <HAL_RCC_ClockConfig+0x260>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 030f 	and.w	r3, r3, #15
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d21d      	bcs.n	80072a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007268:	4b2b      	ldr	r3, [pc, #172]	@ (8007318 <HAL_RCC_ClockConfig+0x260>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f023 020f 	bic.w	r2, r3, #15
 8007270:	4929      	ldr	r1, [pc, #164]	@ (8007318 <HAL_RCC_ClockConfig+0x260>)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	4313      	orrs	r3, r2
 8007276:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007278:	f7fb fb90 	bl	800299c <HAL_GetTick>
 800727c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800727e:	e00a      	b.n	8007296 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007280:	f7fb fb8c 	bl	800299c <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800728e:	4293      	cmp	r3, r2
 8007290:	d901      	bls.n	8007296 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e03b      	b.n	800730e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007296:	4b20      	ldr	r3, [pc, #128]	@ (8007318 <HAL_RCC_ClockConfig+0x260>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d1ed      	bne.n	8007280 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d008      	beq.n	80072c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072b0:	4b1a      	ldr	r3, [pc, #104]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	4917      	ldr	r1, [pc, #92]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0308 	and.w	r3, r3, #8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d009      	beq.n	80072e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072ce:	4b13      	ldr	r3, [pc, #76]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	490f      	ldr	r1, [pc, #60]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80072e2:	f000 f825 	bl	8007330 <HAL_RCC_GetSysClockFreq>
 80072e6:	4602      	mov	r2, r0
 80072e8:	4b0c      	ldr	r3, [pc, #48]	@ (800731c <HAL_RCC_ClockConfig+0x264>)
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	091b      	lsrs	r3, r3, #4
 80072ee:	f003 030f 	and.w	r3, r3, #15
 80072f2:	490c      	ldr	r1, [pc, #48]	@ (8007324 <HAL_RCC_ClockConfig+0x26c>)
 80072f4:	5ccb      	ldrb	r3, [r1, r3]
 80072f6:	f003 031f 	and.w	r3, r3, #31
 80072fa:	fa22 f303 	lsr.w	r3, r2, r3
 80072fe:	4a0a      	ldr	r2, [pc, #40]	@ (8007328 <HAL_RCC_ClockConfig+0x270>)
 8007300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007302:	4b0a      	ldr	r3, [pc, #40]	@ (800732c <HAL_RCC_ClockConfig+0x274>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4618      	mov	r0, r3
 8007308:	f7fb fafc 	bl	8002904 <HAL_InitTick>
 800730c:	4603      	mov	r3, r0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	40022000 	.word	0x40022000
 800731c:	40021000 	.word	0x40021000
 8007320:	04c4b400 	.word	0x04c4b400
 8007324:	080148b0 	.word	0x080148b0
 8007328:	20000000 	.word	0x20000000
 800732c:	20000004 	.word	0x20000004

08007330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007336:	4b2c      	ldr	r3, [pc, #176]	@ (80073e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f003 030c 	and.w	r3, r3, #12
 800733e:	2b04      	cmp	r3, #4
 8007340:	d102      	bne.n	8007348 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007342:	4b2a      	ldr	r3, [pc, #168]	@ (80073ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8007344:	613b      	str	r3, [r7, #16]
 8007346:	e047      	b.n	80073d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007348:	4b27      	ldr	r3, [pc, #156]	@ (80073e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f003 030c 	and.w	r3, r3, #12
 8007350:	2b08      	cmp	r3, #8
 8007352:	d102      	bne.n	800735a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007354:	4b26      	ldr	r3, [pc, #152]	@ (80073f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007356:	613b      	str	r3, [r7, #16]
 8007358:	e03e      	b.n	80073d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800735a:	4b23      	ldr	r3, [pc, #140]	@ (80073e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f003 030c 	and.w	r3, r3, #12
 8007362:	2b0c      	cmp	r3, #12
 8007364:	d136      	bne.n	80073d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007366:	4b20      	ldr	r3, [pc, #128]	@ (80073e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f003 0303 	and.w	r3, r3, #3
 800736e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007370:	4b1d      	ldr	r3, [pc, #116]	@ (80073e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	091b      	lsrs	r3, r3, #4
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	3301      	adds	r3, #1
 800737c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b03      	cmp	r3, #3
 8007382:	d10c      	bne.n	800739e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007384:	4a1a      	ldr	r2, [pc, #104]	@ (80073f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	fbb2 f3f3 	udiv	r3, r2, r3
 800738c:	4a16      	ldr	r2, [pc, #88]	@ (80073e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800738e:	68d2      	ldr	r2, [r2, #12]
 8007390:	0a12      	lsrs	r2, r2, #8
 8007392:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007396:	fb02 f303 	mul.w	r3, r2, r3
 800739a:	617b      	str	r3, [r7, #20]
      break;
 800739c:	e00c      	b.n	80073b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800739e:	4a13      	ldr	r2, [pc, #76]	@ (80073ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a6:	4a10      	ldr	r2, [pc, #64]	@ (80073e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073a8:	68d2      	ldr	r2, [r2, #12]
 80073aa:	0a12      	lsrs	r2, r2, #8
 80073ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80073b0:	fb02 f303 	mul.w	r3, r2, r3
 80073b4:	617b      	str	r3, [r7, #20]
      break;
 80073b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80073b8:	4b0b      	ldr	r3, [pc, #44]	@ (80073e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	0e5b      	lsrs	r3, r3, #25
 80073be:	f003 0303 	and.w	r3, r3, #3
 80073c2:	3301      	adds	r3, #1
 80073c4:	005b      	lsls	r3, r3, #1
 80073c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d0:	613b      	str	r3, [r7, #16]
 80073d2:	e001      	b.n	80073d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80073d8:	693b      	ldr	r3, [r7, #16]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	371c      	adds	r7, #28
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	40021000 	.word	0x40021000
 80073ec:	00f42400 	.word	0x00f42400
 80073f0:	016e3600 	.word	0x016e3600

080073f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073f4:	b480      	push	{r7}
 80073f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073f8:	4b03      	ldr	r3, [pc, #12]	@ (8007408 <HAL_RCC_GetHCLKFreq+0x14>)
 80073fa:	681b      	ldr	r3, [r3, #0]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	20000000 	.word	0x20000000

0800740c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007410:	f7ff fff0 	bl	80073f4 <HAL_RCC_GetHCLKFreq>
 8007414:	4602      	mov	r2, r0
 8007416:	4b06      	ldr	r3, [pc, #24]	@ (8007430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	0a1b      	lsrs	r3, r3, #8
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	4904      	ldr	r1, [pc, #16]	@ (8007434 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007422:	5ccb      	ldrb	r3, [r1, r3]
 8007424:	f003 031f 	and.w	r3, r3, #31
 8007428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800742c:	4618      	mov	r0, r3
 800742e:	bd80      	pop	{r7, pc}
 8007430:	40021000 	.word	0x40021000
 8007434:	080148c0 	.word	0x080148c0

08007438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800743c:	f7ff ffda 	bl	80073f4 <HAL_RCC_GetHCLKFreq>
 8007440:	4602      	mov	r2, r0
 8007442:	4b06      	ldr	r3, [pc, #24]	@ (800745c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	0adb      	lsrs	r3, r3, #11
 8007448:	f003 0307 	and.w	r3, r3, #7
 800744c:	4904      	ldr	r1, [pc, #16]	@ (8007460 <HAL_RCC_GetPCLK2Freq+0x28>)
 800744e:	5ccb      	ldrb	r3, [r1, r3]
 8007450:	f003 031f 	and.w	r3, r3, #31
 8007454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007458:	4618      	mov	r0, r3
 800745a:	bd80      	pop	{r7, pc}
 800745c:	40021000 	.word	0x40021000
 8007460:	080148c0 	.word	0x080148c0

08007464 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800746a:	4b1e      	ldr	r3, [pc, #120]	@ (80074e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f003 0303 	and.w	r3, r3, #3
 8007472:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007474:	4b1b      	ldr	r3, [pc, #108]	@ (80074e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	091b      	lsrs	r3, r3, #4
 800747a:	f003 030f 	and.w	r3, r3, #15
 800747e:	3301      	adds	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	2b03      	cmp	r3, #3
 8007486:	d10c      	bne.n	80074a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007488:	4a17      	ldr	r2, [pc, #92]	@ (80074e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007490:	4a14      	ldr	r2, [pc, #80]	@ (80074e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007492:	68d2      	ldr	r2, [r2, #12]
 8007494:	0a12      	lsrs	r2, r2, #8
 8007496:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800749a:	fb02 f303 	mul.w	r3, r2, r3
 800749e:	617b      	str	r3, [r7, #20]
    break;
 80074a0:	e00c      	b.n	80074bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80074a2:	4a12      	ldr	r2, [pc, #72]	@ (80074ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074aa:	4a0e      	ldr	r2, [pc, #56]	@ (80074e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074ac:	68d2      	ldr	r2, [r2, #12]
 80074ae:	0a12      	lsrs	r2, r2, #8
 80074b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80074b4:	fb02 f303 	mul.w	r3, r2, r3
 80074b8:	617b      	str	r3, [r7, #20]
    break;
 80074ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80074bc:	4b09      	ldr	r3, [pc, #36]	@ (80074e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	0e5b      	lsrs	r3, r3, #25
 80074c2:	f003 0303 	and.w	r3, r3, #3
 80074c6:	3301      	adds	r3, #1
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80074d6:	687b      	ldr	r3, [r7, #4]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	371c      	adds	r7, #28
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	40021000 	.word	0x40021000
 80074e8:	016e3600 	.word	0x016e3600
 80074ec:	00f42400 	.word	0x00f42400

080074f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80074f8:	2300      	movs	r3, #0
 80074fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80074fc:	2300      	movs	r3, #0
 80074fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 8098 	beq.w	800763e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800750e:	2300      	movs	r3, #0
 8007510:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007512:	4b43      	ldr	r3, [pc, #268]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10d      	bne.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800751e:	4b40      	ldr	r3, [pc, #256]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007522:	4a3f      	ldr	r2, [pc, #252]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007528:	6593      	str	r3, [r2, #88]	@ 0x58
 800752a:	4b3d      	ldr	r3, [pc, #244]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800752c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800752e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007532:	60bb      	str	r3, [r7, #8]
 8007534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007536:	2301      	movs	r3, #1
 8007538:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800753a:	4b3a      	ldr	r3, [pc, #232]	@ (8007624 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a39      	ldr	r2, [pc, #228]	@ (8007624 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007544:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007546:	f7fb fa29 	bl	800299c <HAL_GetTick>
 800754a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800754c:	e009      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800754e:	f7fb fa25 	bl	800299c <HAL_GetTick>
 8007552:	4602      	mov	r2, r0
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	2b02      	cmp	r3, #2
 800755a:	d902      	bls.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	74fb      	strb	r3, [r7, #19]
        break;
 8007560:	e005      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007562:	4b30      	ldr	r3, [pc, #192]	@ (8007624 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0ef      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800756e:	7cfb      	ldrb	r3, [r7, #19]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d159      	bne.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007574:	4b2a      	ldr	r3, [pc, #168]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800757a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800757e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d01e      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	429a      	cmp	r2, r3
 800758e:	d019      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007590:	4b23      	ldr	r3, [pc, #140]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007596:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800759a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800759c:	4b20      	ldr	r3, [pc, #128]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800759e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075ac:	4b1c      	ldr	r3, [pc, #112]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075b2:	4a1b      	ldr	r2, [pc, #108]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80075bc:	4a18      	ldr	r2, [pc, #96]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d016      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ce:	f7fb f9e5 	bl	800299c <HAL_GetTick>
 80075d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075d4:	e00b      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075d6:	f7fb f9e1 	bl	800299c <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d902      	bls.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	74fb      	strb	r3, [r7, #19]
            break;
 80075ec:	e006      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d0ec      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80075fc:	7cfb      	ldrb	r3, [r7, #19]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10b      	bne.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007602:	4b07      	ldr	r3, [pc, #28]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007608:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007610:	4903      	ldr	r1, [pc, #12]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007612:	4313      	orrs	r3, r2
 8007614:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007618:	e008      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800761a:	7cfb      	ldrb	r3, [r7, #19]
 800761c:	74bb      	strb	r3, [r7, #18]
 800761e:	e005      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007620:	40021000 	.word	0x40021000
 8007624:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007628:	7cfb      	ldrb	r3, [r7, #19]
 800762a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800762c:	7c7b      	ldrb	r3, [r7, #17]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d105      	bne.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007632:	4ba6      	ldr	r3, [pc, #664]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007636:	4aa5      	ldr	r2, [pc, #660]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007638:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800763c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00a      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800764a:	4ba0      	ldr	r3, [pc, #640]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800764c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007650:	f023 0203 	bic.w	r2, r3, #3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	499c      	ldr	r1, [pc, #624]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800765a:	4313      	orrs	r3, r2
 800765c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0302 	and.w	r3, r3, #2
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00a      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800766c:	4b97      	ldr	r3, [pc, #604]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800766e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007672:	f023 020c 	bic.w	r2, r3, #12
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	4994      	ldr	r1, [pc, #592]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800767c:	4313      	orrs	r3, r2
 800767e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0304 	and.w	r3, r3, #4
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00a      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800768e:	4b8f      	ldr	r3, [pc, #572]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007694:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	498b      	ldr	r1, [pc, #556]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0308 	and.w	r3, r3, #8
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00a      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076b0:	4b86      	ldr	r3, [pc, #536]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	4983      	ldr	r1, [pc, #524]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0320 	and.w	r3, r3, #32
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076d2:	4b7e      	ldr	r3, [pc, #504]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076d8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	497a      	ldr	r1, [pc, #488]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00a      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80076f4:	4b75      	ldr	r3, [pc, #468]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076fa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	4972      	ldr	r1, [pc, #456]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007704:	4313      	orrs	r3, r2
 8007706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00a      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007716:	4b6d      	ldr	r3, [pc, #436]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800771c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	69db      	ldr	r3, [r3, #28]
 8007724:	4969      	ldr	r1, [pc, #420]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007726:	4313      	orrs	r3, r2
 8007728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00a      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007738:	4b64      	ldr	r3, [pc, #400]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800773a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800773e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	4961      	ldr	r1, [pc, #388]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007748:	4313      	orrs	r3, r2
 800774a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00a      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800775a:	4b5c      	ldr	r3, [pc, #368]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800775c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007760:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007768:	4958      	ldr	r1, [pc, #352]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800776a:	4313      	orrs	r3, r2
 800776c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007778:	2b00      	cmp	r3, #0
 800777a:	d015      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800777c:	4b53      	ldr	r3, [pc, #332]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800777e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007782:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800778a:	4950      	ldr	r1, [pc, #320]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800778c:	4313      	orrs	r3, r2
 800778e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800779a:	d105      	bne.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800779c:	4b4b      	ldr	r3, [pc, #300]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	4a4a      	ldr	r2, [pc, #296]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d015      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80077b4:	4b45      	ldr	r3, [pc, #276]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c2:	4942      	ldr	r1, [pc, #264]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077d2:	d105      	bne.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077d4:	4b3d      	ldr	r3, [pc, #244]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	4a3c      	ldr	r2, [pc, #240]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d015      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80077ec:	4b37      	ldr	r3, [pc, #220]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077fa:	4934      	ldr	r1, [pc, #208]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007806:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800780a:	d105      	bne.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800780c:	4b2f      	ldr	r3, [pc, #188]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	4a2e      	ldr	r2, [pc, #184]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007816:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d015      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007824:	4b29      	ldr	r3, [pc, #164]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800782a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007832:	4926      	ldr	r1, [pc, #152]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007834:	4313      	orrs	r3, r2
 8007836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800783e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007842:	d105      	bne.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007844:	4b21      	ldr	r3, [pc, #132]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	4a20      	ldr	r2, [pc, #128]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800784a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800784e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d015      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800785c:	4b1b      	ldr	r3, [pc, #108]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800785e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007862:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786a:	4918      	ldr	r1, [pc, #96]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800786c:	4313      	orrs	r3, r2
 800786e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007876:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800787a:	d105      	bne.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800787c:	4b13      	ldr	r3, [pc, #76]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	4a12      	ldr	r2, [pc, #72]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007882:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007886:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d015      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007894:	4b0d      	ldr	r3, [pc, #52]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800789a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a2:	490a      	ldr	r1, [pc, #40]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078b2:	d105      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80078b4:	4b05      	ldr	r3, [pc, #20]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	4a04      	ldr	r2, [pc, #16]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80078c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3718      	adds	r7, #24
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	40021000 	.word	0x40021000

080078d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e09d      	b.n	8007a1e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d108      	bne.n	80078fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078f2:	d009      	beq.n	8007908 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	61da      	str	r2, [r3, #28]
 80078fa:	e005      	b.n	8007908 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d106      	bne.n	8007928 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7fa f916 	bl	8001b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800793e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007948:	d902      	bls.n	8007950 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	e002      	b.n	8007956 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007950:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007954:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800795e:	d007      	beq.n	8007970 <HAL_SPI_Init+0xa0>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007968:	d002      	beq.n	8007970 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007980:	431a      	orrs	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	431a      	orrs	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800799e:	431a      	orrs	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	69db      	ldr	r3, [r3, #28]
 80079a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079a8:	431a      	orrs	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079b2:	ea42 0103 	orr.w	r1, r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	0c1b      	lsrs	r3, r3, #16
 80079cc:	f003 0204 	and.w	r2, r3, #4
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d4:	f003 0310 	and.w	r3, r3, #16
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079de:	f003 0308 	and.w	r3, r3, #8
 80079e2:	431a      	orrs	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80079ec:	ea42 0103 	orr.w	r1, r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69da      	ldr	r2, [r3, #28]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b08a      	sub	sp, #40	@ 0x28
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	60f8      	str	r0, [r7, #12]
 8007a2e:	60b9      	str	r1, [r7, #8]
 8007a30:	607a      	str	r2, [r7, #4]
 8007a32:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a34:	2301      	movs	r3, #1
 8007a36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_SPI_TransmitReceive+0x26>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e20a      	b.n	8007e62 <HAL_SPI_TransmitReceive+0x43c>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a54:	f7fa ffa2 	bl	800299c <HAL_GetTick>
 8007a58:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007a60:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007a68:	887b      	ldrh	r3, [r7, #2]
 8007a6a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007a6c:	887b      	ldrh	r3, [r7, #2]
 8007a6e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a70:	7efb      	ldrb	r3, [r7, #27]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d00e      	beq.n	8007a94 <HAL_SPI_TransmitReceive+0x6e>
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a7c:	d106      	bne.n	8007a8c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d102      	bne.n	8007a8c <HAL_SPI_TransmitReceive+0x66>
 8007a86:	7efb      	ldrb	r3, [r7, #27]
 8007a88:	2b04      	cmp	r3, #4
 8007a8a:	d003      	beq.n	8007a94 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007a92:	e1e0      	b.n	8007e56 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d005      	beq.n	8007aa6 <HAL_SPI_TransmitReceive+0x80>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d002      	beq.n	8007aa6 <HAL_SPI_TransmitReceive+0x80>
 8007aa0:	887b      	ldrh	r3, [r7, #2]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d103      	bne.n	8007aae <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007aac:	e1d3      	b.n	8007e56 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	d003      	beq.n	8007ac2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2205      	movs	r2, #5
 8007abe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	887a      	ldrh	r2, [r7, #2]
 8007ad2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	887a      	ldrh	r2, [r7, #2]
 8007ada:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	887a      	ldrh	r2, [r7, #2]
 8007ae8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	887a      	ldrh	r2, [r7, #2]
 8007aee:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b04:	d802      	bhi.n	8007b0c <HAL_SPI_TransmitReceive+0xe6>
 8007b06:	8a3b      	ldrh	r3, [r7, #16]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d908      	bls.n	8007b1e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007b1a:	605a      	str	r2, [r3, #4]
 8007b1c:	e007      	b.n	8007b2e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007b2c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b38:	2b40      	cmp	r3, #64	@ 0x40
 8007b3a:	d007      	beq.n	8007b4c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b54:	f240 8081 	bls.w	8007c5a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <HAL_SPI_TransmitReceive+0x140>
 8007b60:	8a7b      	ldrh	r3, [r7, #18]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d16d      	bne.n	8007c42 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b6a:	881a      	ldrh	r2, [r3, #0]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b76:	1c9a      	adds	r2, r3, #2
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	3b01      	subs	r3, #1
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b8a:	e05a      	b.n	8007c42 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f003 0302 	and.w	r3, r3, #2
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d11b      	bne.n	8007bd2 <HAL_SPI_TransmitReceive+0x1ac>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d016      	beq.n	8007bd2 <HAL_SPI_TransmitReceive+0x1ac>
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d113      	bne.n	8007bd2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bae:	881a      	ldrh	r2, [r3, #0]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bba:	1c9a      	adds	r2, r3, #2
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d11c      	bne.n	8007c1a <HAL_SPI_TransmitReceive+0x1f4>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d016      	beq.n	8007c1a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68da      	ldr	r2, [r3, #12]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf6:	b292      	uxth	r2, r2
 8007bf8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bfe:	1c9a      	adds	r2, r3, #2
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c16:	2301      	movs	r3, #1
 8007c18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c1a:	f7fa febf 	bl	800299c <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d80b      	bhi.n	8007c42 <HAL_SPI_TransmitReceive+0x21c>
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c30:	d007      	beq.n	8007c42 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007c40:	e109      	b.n	8007e56 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d19f      	bne.n	8007b8c <HAL_SPI_TransmitReceive+0x166>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d199      	bne.n	8007b8c <HAL_SPI_TransmitReceive+0x166>
 8007c58:	e0e3      	b.n	8007e22 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <HAL_SPI_TransmitReceive+0x244>
 8007c62:	8a7b      	ldrh	r3, [r7, #18]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	f040 80cf 	bne.w	8007e08 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d912      	bls.n	8007c9a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c78:	881a      	ldrh	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c84:	1c9a      	adds	r2, r3, #2
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	3b02      	subs	r3, #2
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007c98:	e0b6      	b.n	8007e08 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	330c      	adds	r3, #12
 8007ca4:	7812      	ldrb	r2, [r2, #0]
 8007ca6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cc0:	e0a2      	b.n	8007e08 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d134      	bne.n	8007d3a <HAL_SPI_TransmitReceive+0x314>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d02f      	beq.n	8007d3a <HAL_SPI_TransmitReceive+0x314>
 8007cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d12c      	bne.n	8007d3a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d912      	bls.n	8007d10 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cee:	881a      	ldrh	r2, [r3, #0]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cfa:	1c9a      	adds	r2, r3, #2
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	3b02      	subs	r3, #2
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d0e:	e012      	b.n	8007d36 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	330c      	adds	r3, #12
 8007d1a:	7812      	ldrb	r2, [r2, #0]
 8007d1c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d22:	1c5a      	adds	r2, r3, #1
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d36:	2300      	movs	r3, #0
 8007d38:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d148      	bne.n	8007dda <HAL_SPI_TransmitReceive+0x3b4>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d042      	beq.n	8007dda <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d923      	bls.n	8007da8 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68da      	ldr	r2, [r3, #12]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d6a:	b292      	uxth	r2, r2
 8007d6c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d72:	1c9a      	adds	r2, r3, #2
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	3b02      	subs	r3, #2
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d81f      	bhi.n	8007dd6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007da4:	605a      	str	r2, [r3, #4]
 8007da6:	e016      	b.n	8007dd6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f103 020c 	add.w	r2, r3, #12
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db4:	7812      	ldrb	r2, [r2, #0]
 8007db6:	b2d2      	uxtb	r2, r2
 8007db8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dbe:	1c5a      	adds	r2, r3, #1
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007dda:	f7fa fddf 	bl	800299c <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d803      	bhi.n	8007df2 <HAL_SPI_TransmitReceive+0x3cc>
 8007dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df0:	d102      	bne.n	8007df8 <HAL_SPI_TransmitReceive+0x3d2>
 8007df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d107      	bne.n	8007e08 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007e06:	e026      	b.n	8007e56 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f47f af57 	bne.w	8007cc2 <HAL_SPI_TransmitReceive+0x29c>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f47f af50 	bne.w	8007cc2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e22:	69fa      	ldr	r2, [r7, #28]
 8007e24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 f94c 	bl	80080c4 <SPI_EndRxTxTransaction>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d005      	beq.n	8007e3e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d003      	beq.n	8007e4e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e4c:	e003      	b.n	8007e56 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007e5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3728      	adds	r7, #40	@ 0x28
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b083      	sub	sp, #12
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007e78:	b2db      	uxtb	r3, r3
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
	...

08007e88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b088      	sub	sp, #32
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	603b      	str	r3, [r7, #0]
 8007e94:	4613      	mov	r3, r2
 8007e96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e98:	f7fa fd80 	bl	800299c <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea0:	1a9b      	subs	r3, r3, r2
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ea8:	f7fa fd78 	bl	800299c <HAL_GetTick>
 8007eac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007eae:	4b39      	ldr	r3, [pc, #228]	@ (8007f94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	015b      	lsls	r3, r3, #5
 8007eb4:	0d1b      	lsrs	r3, r3, #20
 8007eb6:	69fa      	ldr	r2, [r7, #28]
 8007eb8:	fb02 f303 	mul.w	r3, r2, r3
 8007ebc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ebe:	e054      	b.n	8007f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec6:	d050      	beq.n	8007f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ec8:	f7fa fd68 	bl	800299c <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	69fa      	ldr	r2, [r7, #28]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d902      	bls.n	8007ede <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d13d      	bne.n	8007f5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007eec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ef6:	d111      	bne.n	8007f1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f00:	d004      	beq.n	8007f0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f0a:	d107      	bne.n	8007f1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f24:	d10f      	bne.n	8007f46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e017      	b.n	8007f8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	689a      	ldr	r2, [r3, #8]
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	4013      	ands	r3, r2
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	bf0c      	ite	eq
 8007f7a:	2301      	moveq	r3, #1
 8007f7c:	2300      	movne	r3, #0
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	461a      	mov	r2, r3
 8007f82:	79fb      	ldrb	r3, [r7, #7]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d19b      	bne.n	8007ec0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3720      	adds	r7, #32
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20000000 	.word	0x20000000

08007f98 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08a      	sub	sp, #40	@ 0x28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
 8007fa4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007faa:	f7fa fcf7 	bl	800299c <HAL_GetTick>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb2:	1a9b      	subs	r3, r3, r2
 8007fb4:	683a      	ldr	r2, [r7, #0]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007fba:	f7fa fcef 	bl	800299c <HAL_GetTick>
 8007fbe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	330c      	adds	r3, #12
 8007fc6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007fc8:	4b3d      	ldr	r3, [pc, #244]	@ (80080c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4413      	add	r3, r2
 8007fd2:	00da      	lsls	r2, r3, #3
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	0d1b      	lsrs	r3, r3, #20
 8007fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fda:	fb02 f303 	mul.w	r3, r2, r3
 8007fde:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007fe0:	e060      	b.n	80080a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007fe8:	d107      	bne.n	8007ffa <SPI_WaitFifoStateUntilTimeout+0x62>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d104      	bne.n	8007ffa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007ff8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008000:	d050      	beq.n	80080a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008002:	f7fa fccb 	bl	800299c <HAL_GetTick>
 8008006:	4602      	mov	r2, r0
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800800e:	429a      	cmp	r2, r3
 8008010:	d902      	bls.n	8008018 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008014:	2b00      	cmp	r3, #0
 8008016:	d13d      	bne.n	8008094 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008026:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008030:	d111      	bne.n	8008056 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800803a:	d004      	beq.n	8008046 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008044:	d107      	bne.n	8008056 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008054:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800805a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800805e:	d10f      	bne.n	8008080 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800807e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e010      	b.n	80080b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800809a:	2300      	movs	r3, #0
 800809c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689a      	ldr	r2, [r3, #8]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	4013      	ands	r3, r2
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d196      	bne.n	8007fe2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3728      	adds	r7, #40	@ 0x28
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20000000 	.word	0x20000000

080080c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af02      	add	r7, sp, #8
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f7ff ff5b 	bl	8007f98 <SPI_WaitFifoStateUntilTimeout>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d007      	beq.n	80080f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080ec:	f043 0220 	orr.w	r2, r3, #32
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e027      	b.n	8008148 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2200      	movs	r2, #0
 8008100:	2180      	movs	r1, #128	@ 0x80
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f7ff fec0 	bl	8007e88 <SPI_WaitFlagStateUntilTimeout>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d007      	beq.n	800811e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008112:	f043 0220 	orr.w	r2, r3, #32
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e014      	b.n	8008148 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2200      	movs	r2, #0
 8008126:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f7ff ff34 	bl	8007f98 <SPI_WaitFifoStateUntilTimeout>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d007      	beq.n	8008146 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800813a:	f043 0220 	orr.w	r2, r3, #32
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e000      	b.n	8008148 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e049      	b.n	80081f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d106      	bne.n	800817c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7fa f8e8 	bl	800234c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2202      	movs	r2, #2
 8008180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3304      	adds	r3, #4
 800818c:	4619      	mov	r1, r3
 800818e:	4610      	mov	r0, r2
 8008190:	f000 fc9e 	bl	8008ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b01      	cmp	r3, #1
 8008212:	d001      	beq.n	8008218 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e042      	b.n	800829e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2202      	movs	r2, #2
 800821c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a21      	ldr	r2, [pc, #132]	@ (80082ac <HAL_TIM_Base_Start+0xac>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d018      	beq.n	800825c <HAL_TIM_Base_Start+0x5c>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008232:	d013      	beq.n	800825c <HAL_TIM_Base_Start+0x5c>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a1d      	ldr	r2, [pc, #116]	@ (80082b0 <HAL_TIM_Base_Start+0xb0>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d00e      	beq.n	800825c <HAL_TIM_Base_Start+0x5c>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a1c      	ldr	r2, [pc, #112]	@ (80082b4 <HAL_TIM_Base_Start+0xb4>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d009      	beq.n	800825c <HAL_TIM_Base_Start+0x5c>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a1a      	ldr	r2, [pc, #104]	@ (80082b8 <HAL_TIM_Base_Start+0xb8>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d004      	beq.n	800825c <HAL_TIM_Base_Start+0x5c>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a19      	ldr	r2, [pc, #100]	@ (80082bc <HAL_TIM_Base_Start+0xbc>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d115      	bne.n	8008288 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689a      	ldr	r2, [r3, #8]
 8008262:	4b17      	ldr	r3, [pc, #92]	@ (80082c0 <HAL_TIM_Base_Start+0xc0>)
 8008264:	4013      	ands	r3, r2
 8008266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2b06      	cmp	r3, #6
 800826c:	d015      	beq.n	800829a <HAL_TIM_Base_Start+0x9a>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008274:	d011      	beq.n	800829a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f042 0201 	orr.w	r2, r2, #1
 8008284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008286:	e008      	b.n	800829a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f042 0201 	orr.w	r2, r2, #1
 8008296:	601a      	str	r2, [r3, #0]
 8008298:	e000      	b.n	800829c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800829a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	40012c00 	.word	0x40012c00
 80082b0:	40000400 	.word	0x40000400
 80082b4:	40000800 	.word	0x40000800
 80082b8:	40013400 	.word	0x40013400
 80082bc:	40014000 	.word	0x40014000
 80082c0:	00010007 	.word	0x00010007

080082c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d101      	bne.n	80082d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e049      	b.n	800836a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d106      	bne.n	80082f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f841 	bl	8008372 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	3304      	adds	r3, #4
 8008300:	4619      	mov	r1, r3
 8008302:	4610      	mov	r0, r2
 8008304:	f000 fbe4 	bl	8008ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008372:	b480      	push	{r7}
 8008374:	b083      	sub	sp, #12
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800837a:	bf00      	nop
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
	...

08008388 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d109      	bne.n	80083ac <HAL_TIM_PWM_Start+0x24>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	bf14      	ite	ne
 80083a4:	2301      	movne	r3, #1
 80083a6:	2300      	moveq	r3, #0
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	e03c      	b.n	8008426 <HAL_TIM_PWM_Start+0x9e>
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d109      	bne.n	80083c6 <HAL_TIM_PWM_Start+0x3e>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	bf14      	ite	ne
 80083be:	2301      	movne	r3, #1
 80083c0:	2300      	moveq	r3, #0
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	e02f      	b.n	8008426 <HAL_TIM_PWM_Start+0x9e>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d109      	bne.n	80083e0 <HAL_TIM_PWM_Start+0x58>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	bf14      	ite	ne
 80083d8:	2301      	movne	r3, #1
 80083da:	2300      	moveq	r3, #0
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	e022      	b.n	8008426 <HAL_TIM_PWM_Start+0x9e>
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	2b0c      	cmp	r3, #12
 80083e4:	d109      	bne.n	80083fa <HAL_TIM_PWM_Start+0x72>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	bf14      	ite	ne
 80083f2:	2301      	movne	r3, #1
 80083f4:	2300      	moveq	r3, #0
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	e015      	b.n	8008426 <HAL_TIM_PWM_Start+0x9e>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2b10      	cmp	r3, #16
 80083fe:	d109      	bne.n	8008414 <HAL_TIM_PWM_Start+0x8c>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b01      	cmp	r3, #1
 800840a:	bf14      	ite	ne
 800840c:	2301      	movne	r3, #1
 800840e:	2300      	moveq	r3, #0
 8008410:	b2db      	uxtb	r3, r3
 8008412:	e008      	b.n	8008426 <HAL_TIM_PWM_Start+0x9e>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b01      	cmp	r3, #1
 800841e:	bf14      	ite	ne
 8008420:	2301      	movne	r3, #1
 8008422:	2300      	moveq	r3, #0
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e097      	b.n	800855e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d104      	bne.n	800843e <HAL_TIM_PWM_Start+0xb6>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2202      	movs	r2, #2
 8008438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800843c:	e023      	b.n	8008486 <HAL_TIM_PWM_Start+0xfe>
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	2b04      	cmp	r3, #4
 8008442:	d104      	bne.n	800844e <HAL_TIM_PWM_Start+0xc6>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2202      	movs	r2, #2
 8008448:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800844c:	e01b      	b.n	8008486 <HAL_TIM_PWM_Start+0xfe>
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b08      	cmp	r3, #8
 8008452:	d104      	bne.n	800845e <HAL_TIM_PWM_Start+0xd6>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2202      	movs	r2, #2
 8008458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800845c:	e013      	b.n	8008486 <HAL_TIM_PWM_Start+0xfe>
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	2b0c      	cmp	r3, #12
 8008462:	d104      	bne.n	800846e <HAL_TIM_PWM_Start+0xe6>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2202      	movs	r2, #2
 8008468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800846c:	e00b      	b.n	8008486 <HAL_TIM_PWM_Start+0xfe>
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b10      	cmp	r3, #16
 8008472:	d104      	bne.n	800847e <HAL_TIM_PWM_Start+0xf6>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2202      	movs	r2, #2
 8008478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800847c:	e003      	b.n	8008486 <HAL_TIM_PWM_Start+0xfe>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2202      	movs	r2, #2
 8008482:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2201      	movs	r2, #1
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	4618      	mov	r0, r3
 8008490:	f000 ff4c 	bl	800932c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a33      	ldr	r2, [pc, #204]	@ (8008568 <HAL_TIM_PWM_Start+0x1e0>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d013      	beq.n	80084c6 <HAL_TIM_PWM_Start+0x13e>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a32      	ldr	r2, [pc, #200]	@ (800856c <HAL_TIM_PWM_Start+0x1e4>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d00e      	beq.n	80084c6 <HAL_TIM_PWM_Start+0x13e>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a30      	ldr	r2, [pc, #192]	@ (8008570 <HAL_TIM_PWM_Start+0x1e8>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d009      	beq.n	80084c6 <HAL_TIM_PWM_Start+0x13e>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a2f      	ldr	r2, [pc, #188]	@ (8008574 <HAL_TIM_PWM_Start+0x1ec>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d004      	beq.n	80084c6 <HAL_TIM_PWM_Start+0x13e>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008578 <HAL_TIM_PWM_Start+0x1f0>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d101      	bne.n	80084ca <HAL_TIM_PWM_Start+0x142>
 80084c6:	2301      	movs	r3, #1
 80084c8:	e000      	b.n	80084cc <HAL_TIM_PWM_Start+0x144>
 80084ca:	2300      	movs	r3, #0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80084de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a20      	ldr	r2, [pc, #128]	@ (8008568 <HAL_TIM_PWM_Start+0x1e0>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d018      	beq.n	800851c <HAL_TIM_PWM_Start+0x194>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084f2:	d013      	beq.n	800851c <HAL_TIM_PWM_Start+0x194>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a20      	ldr	r2, [pc, #128]	@ (800857c <HAL_TIM_PWM_Start+0x1f4>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d00e      	beq.n	800851c <HAL_TIM_PWM_Start+0x194>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a1f      	ldr	r2, [pc, #124]	@ (8008580 <HAL_TIM_PWM_Start+0x1f8>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d009      	beq.n	800851c <HAL_TIM_PWM_Start+0x194>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a17      	ldr	r2, [pc, #92]	@ (800856c <HAL_TIM_PWM_Start+0x1e4>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d004      	beq.n	800851c <HAL_TIM_PWM_Start+0x194>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a16      	ldr	r2, [pc, #88]	@ (8008570 <HAL_TIM_PWM_Start+0x1e8>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d115      	bne.n	8008548 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	689a      	ldr	r2, [r3, #8]
 8008522:	4b18      	ldr	r3, [pc, #96]	@ (8008584 <HAL_TIM_PWM_Start+0x1fc>)
 8008524:	4013      	ands	r3, r2
 8008526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2b06      	cmp	r3, #6
 800852c:	d015      	beq.n	800855a <HAL_TIM_PWM_Start+0x1d2>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008534:	d011      	beq.n	800855a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f042 0201 	orr.w	r2, r2, #1
 8008544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008546:	e008      	b.n	800855a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0201 	orr.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	e000      	b.n	800855c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800855a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	40012c00 	.word	0x40012c00
 800856c:	40013400 	.word	0x40013400
 8008570:	40014000 	.word	0x40014000
 8008574:	40014400 	.word	0x40014400
 8008578:	40014800 	.word	0x40014800
 800857c:	40000400 	.word	0x40000400
 8008580:	40000800 	.word	0x40000800
 8008584:	00010007 	.word	0x00010007

08008588 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2200      	movs	r2, #0
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	4618      	mov	r0, r3
 800859c:	f000 fec6 	bl	800932c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a3e      	ldr	r2, [pc, #248]	@ (80086a0 <HAL_TIM_PWM_Stop+0x118>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d013      	beq.n	80085d2 <HAL_TIM_PWM_Stop+0x4a>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a3d      	ldr	r2, [pc, #244]	@ (80086a4 <HAL_TIM_PWM_Stop+0x11c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d00e      	beq.n	80085d2 <HAL_TIM_PWM_Stop+0x4a>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a3b      	ldr	r2, [pc, #236]	@ (80086a8 <HAL_TIM_PWM_Stop+0x120>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d009      	beq.n	80085d2 <HAL_TIM_PWM_Stop+0x4a>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a3a      	ldr	r2, [pc, #232]	@ (80086ac <HAL_TIM_PWM_Stop+0x124>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d004      	beq.n	80085d2 <HAL_TIM_PWM_Stop+0x4a>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a38      	ldr	r2, [pc, #224]	@ (80086b0 <HAL_TIM_PWM_Stop+0x128>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d101      	bne.n	80085d6 <HAL_TIM_PWM_Stop+0x4e>
 80085d2:	2301      	movs	r3, #1
 80085d4:	e000      	b.n	80085d8 <HAL_TIM_PWM_Stop+0x50>
 80085d6:	2300      	movs	r3, #0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d017      	beq.n	800860c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6a1a      	ldr	r2, [r3, #32]
 80085e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80085e6:	4013      	ands	r3, r2
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10f      	bne.n	800860c <HAL_TIM_PWM_Stop+0x84>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6a1a      	ldr	r2, [r3, #32]
 80085f2:	f244 4344 	movw	r3, #17476	@ 0x4444
 80085f6:	4013      	ands	r3, r2
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d107      	bne.n	800860c <HAL_TIM_PWM_Stop+0x84>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800860a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6a1a      	ldr	r2, [r3, #32]
 8008612:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008616:	4013      	ands	r3, r2
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10f      	bne.n	800863c <HAL_TIM_PWM_Stop+0xb4>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6a1a      	ldr	r2, [r3, #32]
 8008622:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008626:	4013      	ands	r3, r2
 8008628:	2b00      	cmp	r3, #0
 800862a:	d107      	bne.n	800863c <HAL_TIM_PWM_Stop+0xb4>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 0201 	bic.w	r2, r2, #1
 800863a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d104      	bne.n	800864c <HAL_TIM_PWM_Stop+0xc4>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800864a:	e023      	b.n	8008694 <HAL_TIM_PWM_Stop+0x10c>
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	2b04      	cmp	r3, #4
 8008650:	d104      	bne.n	800865c <HAL_TIM_PWM_Stop+0xd4>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800865a:	e01b      	b.n	8008694 <HAL_TIM_PWM_Stop+0x10c>
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2b08      	cmp	r3, #8
 8008660:	d104      	bne.n	800866c <HAL_TIM_PWM_Stop+0xe4>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800866a:	e013      	b.n	8008694 <HAL_TIM_PWM_Stop+0x10c>
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2b0c      	cmp	r3, #12
 8008670:	d104      	bne.n	800867c <HAL_TIM_PWM_Stop+0xf4>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800867a:	e00b      	b.n	8008694 <HAL_TIM_PWM_Stop+0x10c>
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2b10      	cmp	r3, #16
 8008680:	d104      	bne.n	800868c <HAL_TIM_PWM_Stop+0x104>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800868a:	e003      	b.n	8008694 <HAL_TIM_PWM_Stop+0x10c>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	40012c00 	.word	0x40012c00
 80086a4:	40013400 	.word	0x40013400
 80086a8:	40014000 	.word	0x40014000
 80086ac:	40014400 	.word	0x40014400
 80086b0:	40014800 	.word	0x40014800

080086b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d101      	bne.n	80086d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80086ce:	2302      	movs	r3, #2
 80086d0:	e0ff      	b.n	80088d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b14      	cmp	r3, #20
 80086de:	f200 80f0 	bhi.w	80088c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80086e2:	a201      	add	r2, pc, #4	@ (adr r2, 80086e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80086e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e8:	0800873d 	.word	0x0800873d
 80086ec:	080088c3 	.word	0x080088c3
 80086f0:	080088c3 	.word	0x080088c3
 80086f4:	080088c3 	.word	0x080088c3
 80086f8:	0800877d 	.word	0x0800877d
 80086fc:	080088c3 	.word	0x080088c3
 8008700:	080088c3 	.word	0x080088c3
 8008704:	080088c3 	.word	0x080088c3
 8008708:	080087bf 	.word	0x080087bf
 800870c:	080088c3 	.word	0x080088c3
 8008710:	080088c3 	.word	0x080088c3
 8008714:	080088c3 	.word	0x080088c3
 8008718:	080087ff 	.word	0x080087ff
 800871c:	080088c3 	.word	0x080088c3
 8008720:	080088c3 	.word	0x080088c3
 8008724:	080088c3 	.word	0x080088c3
 8008728:	08008841 	.word	0x08008841
 800872c:	080088c3 	.word	0x080088c3
 8008730:	080088c3 	.word	0x080088c3
 8008734:	080088c3 	.word	0x080088c3
 8008738:	08008881 	.word	0x08008881
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68b9      	ldr	r1, [r7, #8]
 8008742:	4618      	mov	r0, r3
 8008744:	f000 fa60 	bl	8008c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	699a      	ldr	r2, [r3, #24]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f042 0208 	orr.w	r2, r2, #8
 8008756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	699a      	ldr	r2, [r3, #24]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f022 0204 	bic.w	r2, r2, #4
 8008766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	6999      	ldr	r1, [r3, #24]
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	691a      	ldr	r2, [r3, #16]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	430a      	orrs	r2, r1
 8008778:	619a      	str	r2, [r3, #24]
      break;
 800877a:	e0a5      	b.n	80088c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68b9      	ldr	r1, [r7, #8]
 8008782:	4618      	mov	r0, r3
 8008784:	f000 fad0 	bl	8008d28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	699a      	ldr	r2, [r3, #24]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6999      	ldr	r1, [r3, #24]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	021a      	lsls	r2, r3, #8
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	430a      	orrs	r2, r1
 80087ba:	619a      	str	r2, [r3, #24]
      break;
 80087bc:	e084      	b.n	80088c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68b9      	ldr	r1, [r7, #8]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 fb39 	bl	8008e3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	69da      	ldr	r2, [r3, #28]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f042 0208 	orr.w	r2, r2, #8
 80087d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	69da      	ldr	r2, [r3, #28]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f022 0204 	bic.w	r2, r2, #4
 80087e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	69d9      	ldr	r1, [r3, #28]
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	691a      	ldr	r2, [r3, #16]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	430a      	orrs	r2, r1
 80087fa:	61da      	str	r2, [r3, #28]
      break;
 80087fc:	e064      	b.n	80088c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68b9      	ldr	r1, [r7, #8]
 8008804:	4618      	mov	r0, r3
 8008806:	f000 fba1 	bl	8008f4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	69da      	ldr	r2, [r3, #28]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	69da      	ldr	r2, [r3, #28]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	69d9      	ldr	r1, [r3, #28]
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	021a      	lsls	r2, r3, #8
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	61da      	str	r2, [r3, #28]
      break;
 800883e:	e043      	b.n	80088c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68b9      	ldr	r1, [r7, #8]
 8008846:	4618      	mov	r0, r3
 8008848:	f000 fc0a 	bl	8009060 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f042 0208 	orr.w	r2, r2, #8
 800885a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f022 0204 	bic.w	r2, r2, #4
 800886a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	691a      	ldr	r2, [r3, #16]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	430a      	orrs	r2, r1
 800887c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800887e:	e023      	b.n	80088c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68b9      	ldr	r1, [r7, #8]
 8008886:	4618      	mov	r0, r3
 8008888:	f000 fc4e 	bl	8009128 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800889a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088aa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	021a      	lsls	r2, r3, #8
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80088c0:	e002      	b.n	80088c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	75fb      	strb	r3, [r7, #23]
      break;
 80088c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3718      	adds	r7, #24
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop

080088dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d101      	bne.n	80088f8 <HAL_TIM_ConfigClockSource+0x1c>
 80088f4:	2302      	movs	r3, #2
 80088f6:	e0de      	b.n	8008ab6 <HAL_TIM_ConfigClockSource+0x1da>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2202      	movs	r2, #2
 8008904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008916:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800891a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008922:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a63      	ldr	r2, [pc, #396]	@ (8008ac0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008932:	4293      	cmp	r3, r2
 8008934:	f000 80a9 	beq.w	8008a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8008938:	4a61      	ldr	r2, [pc, #388]	@ (8008ac0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800893a:	4293      	cmp	r3, r2
 800893c:	f200 80ae 	bhi.w	8008a9c <HAL_TIM_ConfigClockSource+0x1c0>
 8008940:	4a60      	ldr	r2, [pc, #384]	@ (8008ac4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008942:	4293      	cmp	r3, r2
 8008944:	f000 80a1 	beq.w	8008a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8008948:	4a5e      	ldr	r2, [pc, #376]	@ (8008ac4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800894a:	4293      	cmp	r3, r2
 800894c:	f200 80a6 	bhi.w	8008a9c <HAL_TIM_ConfigClockSource+0x1c0>
 8008950:	4a5d      	ldr	r2, [pc, #372]	@ (8008ac8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008952:	4293      	cmp	r3, r2
 8008954:	f000 8099 	beq.w	8008a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8008958:	4a5b      	ldr	r2, [pc, #364]	@ (8008ac8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800895a:	4293      	cmp	r3, r2
 800895c:	f200 809e 	bhi.w	8008a9c <HAL_TIM_ConfigClockSource+0x1c0>
 8008960:	4a5a      	ldr	r2, [pc, #360]	@ (8008acc <HAL_TIM_ConfigClockSource+0x1f0>)
 8008962:	4293      	cmp	r3, r2
 8008964:	f000 8091 	beq.w	8008a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8008968:	4a58      	ldr	r2, [pc, #352]	@ (8008acc <HAL_TIM_ConfigClockSource+0x1f0>)
 800896a:	4293      	cmp	r3, r2
 800896c:	f200 8096 	bhi.w	8008a9c <HAL_TIM_ConfigClockSource+0x1c0>
 8008970:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008974:	f000 8089 	beq.w	8008a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8008978:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800897c:	f200 808e 	bhi.w	8008a9c <HAL_TIM_ConfigClockSource+0x1c0>
 8008980:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008984:	d03e      	beq.n	8008a04 <HAL_TIM_ConfigClockSource+0x128>
 8008986:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800898a:	f200 8087 	bhi.w	8008a9c <HAL_TIM_ConfigClockSource+0x1c0>
 800898e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008992:	f000 8086 	beq.w	8008aa2 <HAL_TIM_ConfigClockSource+0x1c6>
 8008996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800899a:	d87f      	bhi.n	8008a9c <HAL_TIM_ConfigClockSource+0x1c0>
 800899c:	2b70      	cmp	r3, #112	@ 0x70
 800899e:	d01a      	beq.n	80089d6 <HAL_TIM_ConfigClockSource+0xfa>
 80089a0:	2b70      	cmp	r3, #112	@ 0x70
 80089a2:	d87b      	bhi.n	8008a9c <HAL_TIM_ConfigClockSource+0x1c0>
 80089a4:	2b60      	cmp	r3, #96	@ 0x60
 80089a6:	d050      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x16e>
 80089a8:	2b60      	cmp	r3, #96	@ 0x60
 80089aa:	d877      	bhi.n	8008a9c <HAL_TIM_ConfigClockSource+0x1c0>
 80089ac:	2b50      	cmp	r3, #80	@ 0x50
 80089ae:	d03c      	beq.n	8008a2a <HAL_TIM_ConfigClockSource+0x14e>
 80089b0:	2b50      	cmp	r3, #80	@ 0x50
 80089b2:	d873      	bhi.n	8008a9c <HAL_TIM_ConfigClockSource+0x1c0>
 80089b4:	2b40      	cmp	r3, #64	@ 0x40
 80089b6:	d058      	beq.n	8008a6a <HAL_TIM_ConfigClockSource+0x18e>
 80089b8:	2b40      	cmp	r3, #64	@ 0x40
 80089ba:	d86f      	bhi.n	8008a9c <HAL_TIM_ConfigClockSource+0x1c0>
 80089bc:	2b30      	cmp	r3, #48	@ 0x30
 80089be:	d064      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0x1ae>
 80089c0:	2b30      	cmp	r3, #48	@ 0x30
 80089c2:	d86b      	bhi.n	8008a9c <HAL_TIM_ConfigClockSource+0x1c0>
 80089c4:	2b20      	cmp	r3, #32
 80089c6:	d060      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0x1ae>
 80089c8:	2b20      	cmp	r3, #32
 80089ca:	d867      	bhi.n	8008a9c <HAL_TIM_ConfigClockSource+0x1c0>
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d05c      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0x1ae>
 80089d0:	2b10      	cmp	r3, #16
 80089d2:	d05a      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0x1ae>
 80089d4:	e062      	b.n	8008a9c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089e6:	f000 fc81 	bl	80092ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80089f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	609a      	str	r2, [r3, #8]
      break;
 8008a02:	e04f      	b.n	8008aa4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a14:	f000 fc6a 	bl	80092ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	689a      	ldr	r2, [r3, #8]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a26:	609a      	str	r2, [r3, #8]
      break;
 8008a28:	e03c      	b.n	8008aa4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a36:	461a      	mov	r2, r3
 8008a38:	f000 fbdc 	bl	80091f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2150      	movs	r1, #80	@ 0x50
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 fc35 	bl	80092b2 <TIM_ITRx_SetConfig>
      break;
 8008a48:	e02c      	b.n	8008aa4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a56:	461a      	mov	r2, r3
 8008a58:	f000 fbfb 	bl	8009252 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2160      	movs	r1, #96	@ 0x60
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 fc25 	bl	80092b2 <TIM_ITRx_SetConfig>
      break;
 8008a68:	e01c      	b.n	8008aa4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a76:	461a      	mov	r2, r3
 8008a78:	f000 fbbc 	bl	80091f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2140      	movs	r1, #64	@ 0x40
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 fc15 	bl	80092b2 <TIM_ITRx_SetConfig>
      break;
 8008a88:	e00c      	b.n	8008aa4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4619      	mov	r1, r3
 8008a94:	4610      	mov	r0, r2
 8008a96:	f000 fc0c 	bl	80092b2 <TIM_ITRx_SetConfig>
      break;
 8008a9a:	e003      	b.n	8008aa4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8008aa0:	e000      	b.n	8008aa4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8008aa2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	00100070 	.word	0x00100070
 8008ac4:	00100040 	.word	0x00100040
 8008ac8:	00100030 	.word	0x00100030
 8008acc:	00100020 	.word	0x00100020

08008ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a42      	ldr	r2, [pc, #264]	@ (8008bec <TIM_Base_SetConfig+0x11c>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d00f      	beq.n	8008b08 <TIM_Base_SetConfig+0x38>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aee:	d00b      	beq.n	8008b08 <TIM_Base_SetConfig+0x38>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a3f      	ldr	r2, [pc, #252]	@ (8008bf0 <TIM_Base_SetConfig+0x120>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d007      	beq.n	8008b08 <TIM_Base_SetConfig+0x38>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a3e      	ldr	r2, [pc, #248]	@ (8008bf4 <TIM_Base_SetConfig+0x124>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d003      	beq.n	8008b08 <TIM_Base_SetConfig+0x38>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a3d      	ldr	r2, [pc, #244]	@ (8008bf8 <TIM_Base_SetConfig+0x128>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d108      	bne.n	8008b1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a33      	ldr	r2, [pc, #204]	@ (8008bec <TIM_Base_SetConfig+0x11c>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d01b      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b28:	d017      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a30      	ldr	r2, [pc, #192]	@ (8008bf0 <TIM_Base_SetConfig+0x120>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d013      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a2f      	ldr	r2, [pc, #188]	@ (8008bf4 <TIM_Base_SetConfig+0x124>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d00f      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a2e      	ldr	r2, [pc, #184]	@ (8008bf8 <TIM_Base_SetConfig+0x128>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d00b      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a2d      	ldr	r2, [pc, #180]	@ (8008bfc <TIM_Base_SetConfig+0x12c>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d007      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a2c      	ldr	r2, [pc, #176]	@ (8008c00 <TIM_Base_SetConfig+0x130>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d003      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a2b      	ldr	r2, [pc, #172]	@ (8008c04 <TIM_Base_SetConfig+0x134>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d108      	bne.n	8008b6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	689a      	ldr	r2, [r3, #8]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a16      	ldr	r2, [pc, #88]	@ (8008bec <TIM_Base_SetConfig+0x11c>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d00f      	beq.n	8008bb8 <TIM_Base_SetConfig+0xe8>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a17      	ldr	r2, [pc, #92]	@ (8008bf8 <TIM_Base_SetConfig+0x128>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d00b      	beq.n	8008bb8 <TIM_Base_SetConfig+0xe8>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a16      	ldr	r2, [pc, #88]	@ (8008bfc <TIM_Base_SetConfig+0x12c>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d007      	beq.n	8008bb8 <TIM_Base_SetConfig+0xe8>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a15      	ldr	r2, [pc, #84]	@ (8008c00 <TIM_Base_SetConfig+0x130>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d003      	beq.n	8008bb8 <TIM_Base_SetConfig+0xe8>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a14      	ldr	r2, [pc, #80]	@ (8008c04 <TIM_Base_SetConfig+0x134>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d103      	bne.n	8008bc0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	691a      	ldr	r2, [r3, #16]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d105      	bne.n	8008bde <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	f023 0201 	bic.w	r2, r3, #1
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	611a      	str	r2, [r3, #16]
  }
}
 8008bde:	bf00      	nop
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	40012c00 	.word	0x40012c00
 8008bf0:	40000400 	.word	0x40000400
 8008bf4:	40000800 	.word	0x40000800
 8008bf8:	40013400 	.word	0x40013400
 8008bfc:	40014000 	.word	0x40014000
 8008c00:	40014400 	.word	0x40014400
 8008c04:	40014800 	.word	0x40014800

08008c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b087      	sub	sp, #28
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a1b      	ldr	r3, [r3, #32]
 8008c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a1b      	ldr	r3, [r3, #32]
 8008c1c:	f023 0201 	bic.w	r2, r3, #1
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f023 0303 	bic.w	r3, r3, #3
 8008c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f023 0302 	bic.w	r3, r3, #2
 8008c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a2c      	ldr	r2, [pc, #176]	@ (8008d14 <TIM_OC1_SetConfig+0x10c>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d00f      	beq.n	8008c88 <TIM_OC1_SetConfig+0x80>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a2b      	ldr	r2, [pc, #172]	@ (8008d18 <TIM_OC1_SetConfig+0x110>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d00b      	beq.n	8008c88 <TIM_OC1_SetConfig+0x80>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a2a      	ldr	r2, [pc, #168]	@ (8008d1c <TIM_OC1_SetConfig+0x114>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d007      	beq.n	8008c88 <TIM_OC1_SetConfig+0x80>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a29      	ldr	r2, [pc, #164]	@ (8008d20 <TIM_OC1_SetConfig+0x118>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d003      	beq.n	8008c88 <TIM_OC1_SetConfig+0x80>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a28      	ldr	r2, [pc, #160]	@ (8008d24 <TIM_OC1_SetConfig+0x11c>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d10c      	bne.n	8008ca2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	f023 0308 	bic.w	r3, r3, #8
 8008c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f023 0304 	bic.w	r3, r3, #4
 8008ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8008d14 <TIM_OC1_SetConfig+0x10c>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d00f      	beq.n	8008cca <TIM_OC1_SetConfig+0xc2>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a1a      	ldr	r2, [pc, #104]	@ (8008d18 <TIM_OC1_SetConfig+0x110>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d00b      	beq.n	8008cca <TIM_OC1_SetConfig+0xc2>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a19      	ldr	r2, [pc, #100]	@ (8008d1c <TIM_OC1_SetConfig+0x114>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d007      	beq.n	8008cca <TIM_OC1_SetConfig+0xc2>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a18      	ldr	r2, [pc, #96]	@ (8008d20 <TIM_OC1_SetConfig+0x118>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d003      	beq.n	8008cca <TIM_OC1_SetConfig+0xc2>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a17      	ldr	r2, [pc, #92]	@ (8008d24 <TIM_OC1_SetConfig+0x11c>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d111      	bne.n	8008cee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	695b      	ldr	r3, [r3, #20]
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	621a      	str	r2, [r3, #32]
}
 8008d08:	bf00      	nop
 8008d0a:	371c      	adds	r7, #28
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	40012c00 	.word	0x40012c00
 8008d18:	40013400 	.word	0x40013400
 8008d1c:	40014000 	.word	0x40014000
 8008d20:	40014400 	.word	0x40014400
 8008d24:	40014800 	.word	0x40014800

08008d28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a1b      	ldr	r3, [r3, #32]
 8008d3c:	f023 0210 	bic.w	r2, r3, #16
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	021b      	lsls	r3, r3, #8
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	f023 0320 	bic.w	r3, r3, #32
 8008d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	011b      	lsls	r3, r3, #4
 8008d7e:	697a      	ldr	r2, [r7, #20]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a28      	ldr	r2, [pc, #160]	@ (8008e28 <TIM_OC2_SetConfig+0x100>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d003      	beq.n	8008d94 <TIM_OC2_SetConfig+0x6c>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a27      	ldr	r2, [pc, #156]	@ (8008e2c <TIM_OC2_SetConfig+0x104>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d10d      	bne.n	8008db0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	011b      	lsls	r3, r3, #4
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a1d      	ldr	r2, [pc, #116]	@ (8008e28 <TIM_OC2_SetConfig+0x100>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d00f      	beq.n	8008dd8 <TIM_OC2_SetConfig+0xb0>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a1c      	ldr	r2, [pc, #112]	@ (8008e2c <TIM_OC2_SetConfig+0x104>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d00b      	beq.n	8008dd8 <TIM_OC2_SetConfig+0xb0>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8008e30 <TIM_OC2_SetConfig+0x108>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d007      	beq.n	8008dd8 <TIM_OC2_SetConfig+0xb0>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a1a      	ldr	r2, [pc, #104]	@ (8008e34 <TIM_OC2_SetConfig+0x10c>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d003      	beq.n	8008dd8 <TIM_OC2_SetConfig+0xb0>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a19      	ldr	r2, [pc, #100]	@ (8008e38 <TIM_OC2_SetConfig+0x110>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d113      	bne.n	8008e00 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008dde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008de6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	695b      	ldr	r3, [r3, #20]
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	685a      	ldr	r2, [r3, #4]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	621a      	str	r2, [r3, #32]
}
 8008e1a:	bf00      	nop
 8008e1c:	371c      	adds	r7, #28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	40012c00 	.word	0x40012c00
 8008e2c:	40013400 	.word	0x40013400
 8008e30:	40014000 	.word	0x40014000
 8008e34:	40014400 	.word	0x40014400
 8008e38:	40014800 	.word	0x40014800

08008e3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b087      	sub	sp, #28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a1b      	ldr	r3, [r3, #32]
 8008e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a1b      	ldr	r3, [r3, #32]
 8008e50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	69db      	ldr	r3, [r3, #28]
 8008e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f023 0303 	bic.w	r3, r3, #3
 8008e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	021b      	lsls	r3, r3, #8
 8008e90:	697a      	ldr	r2, [r7, #20]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a27      	ldr	r2, [pc, #156]	@ (8008f38 <TIM_OC3_SetConfig+0xfc>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d003      	beq.n	8008ea6 <TIM_OC3_SetConfig+0x6a>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a26      	ldr	r2, [pc, #152]	@ (8008f3c <TIM_OC3_SetConfig+0x100>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d10d      	bne.n	8008ec2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008eac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	021b      	lsls	r3, r3, #8
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8008f38 <TIM_OC3_SetConfig+0xfc>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d00f      	beq.n	8008eea <TIM_OC3_SetConfig+0xae>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8008f3c <TIM_OC3_SetConfig+0x100>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d00b      	beq.n	8008eea <TIM_OC3_SetConfig+0xae>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8008f40 <TIM_OC3_SetConfig+0x104>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d007      	beq.n	8008eea <TIM_OC3_SetConfig+0xae>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a19      	ldr	r2, [pc, #100]	@ (8008f44 <TIM_OC3_SetConfig+0x108>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d003      	beq.n	8008eea <TIM_OC3_SetConfig+0xae>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a18      	ldr	r2, [pc, #96]	@ (8008f48 <TIM_OC3_SetConfig+0x10c>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d113      	bne.n	8008f12 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	695b      	ldr	r3, [r3, #20]
 8008efe:	011b      	lsls	r3, r3, #4
 8008f00:	693a      	ldr	r2, [r7, #16]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	011b      	lsls	r3, r3, #4
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	697a      	ldr	r2, [r7, #20]
 8008f2a:	621a      	str	r2, [r3, #32]
}
 8008f2c:	bf00      	nop
 8008f2e:	371c      	adds	r7, #28
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	40012c00 	.word	0x40012c00
 8008f3c:	40013400 	.word	0x40013400
 8008f40:	40014000 	.word	0x40014000
 8008f44:	40014400 	.word	0x40014400
 8008f48:	40014800 	.word	0x40014800

08008f4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b087      	sub	sp, #28
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a1b      	ldr	r3, [r3, #32]
 8008f60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	69db      	ldr	r3, [r3, #28]
 8008f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	021b      	lsls	r3, r3, #8
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	031b      	lsls	r3, r3, #12
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a28      	ldr	r2, [pc, #160]	@ (800904c <TIM_OC4_SetConfig+0x100>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d003      	beq.n	8008fb8 <TIM_OC4_SetConfig+0x6c>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a27      	ldr	r2, [pc, #156]	@ (8009050 <TIM_OC4_SetConfig+0x104>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d10d      	bne.n	8008fd4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	031b      	lsls	r3, r3, #12
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008fd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800904c <TIM_OC4_SetConfig+0x100>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d00f      	beq.n	8008ffc <TIM_OC4_SetConfig+0xb0>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a1c      	ldr	r2, [pc, #112]	@ (8009050 <TIM_OC4_SetConfig+0x104>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d00b      	beq.n	8008ffc <TIM_OC4_SetConfig+0xb0>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8009054 <TIM_OC4_SetConfig+0x108>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d007      	beq.n	8008ffc <TIM_OC4_SetConfig+0xb0>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a1a      	ldr	r2, [pc, #104]	@ (8009058 <TIM_OC4_SetConfig+0x10c>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d003      	beq.n	8008ffc <TIM_OC4_SetConfig+0xb0>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a19      	ldr	r2, [pc, #100]	@ (800905c <TIM_OC4_SetConfig+0x110>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d113      	bne.n	8009024 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009002:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800900a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	695b      	ldr	r3, [r3, #20]
 8009010:	019b      	lsls	r3, r3, #6
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	4313      	orrs	r3, r2
 8009016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	019b      	lsls	r3, r3, #6
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	4313      	orrs	r3, r2
 8009022:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	693a      	ldr	r2, [r7, #16]
 8009028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	685a      	ldr	r2, [r3, #4]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	697a      	ldr	r2, [r7, #20]
 800903c:	621a      	str	r2, [r3, #32]
}
 800903e:	bf00      	nop
 8009040:	371c      	adds	r7, #28
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	40012c00 	.word	0x40012c00
 8009050:	40013400 	.word	0x40013400
 8009054:	40014000 	.word	0x40014000
 8009058:	40014400 	.word	0x40014400
 800905c:	40014800 	.word	0x40014800

08009060 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009060:	b480      	push	{r7}
 8009062:	b087      	sub	sp, #28
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a1b      	ldr	r3, [r3, #32]
 800906e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a1b      	ldr	r3, [r3, #32]
 8009074:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800908e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	4313      	orrs	r3, r2
 800909c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80090a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	041b      	lsls	r3, r3, #16
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a17      	ldr	r2, [pc, #92]	@ (8009114 <TIM_OC5_SetConfig+0xb4>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d00f      	beq.n	80090da <TIM_OC5_SetConfig+0x7a>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a16      	ldr	r2, [pc, #88]	@ (8009118 <TIM_OC5_SetConfig+0xb8>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d00b      	beq.n	80090da <TIM_OC5_SetConfig+0x7a>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a15      	ldr	r2, [pc, #84]	@ (800911c <TIM_OC5_SetConfig+0xbc>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d007      	beq.n	80090da <TIM_OC5_SetConfig+0x7a>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a14      	ldr	r2, [pc, #80]	@ (8009120 <TIM_OC5_SetConfig+0xc0>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d003      	beq.n	80090da <TIM_OC5_SetConfig+0x7a>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a13      	ldr	r2, [pc, #76]	@ (8009124 <TIM_OC5_SetConfig+0xc4>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d109      	bne.n	80090ee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	021b      	lsls	r3, r3, #8
 80090e8:	697a      	ldr	r2, [r7, #20]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	697a      	ldr	r2, [r7, #20]
 80090f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	685a      	ldr	r2, [r3, #4]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	621a      	str	r2, [r3, #32]
}
 8009108:	bf00      	nop
 800910a:	371c      	adds	r7, #28
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr
 8009114:	40012c00 	.word	0x40012c00
 8009118:	40013400 	.word	0x40013400
 800911c:	40014000 	.word	0x40014000
 8009120:	40014400 	.word	0x40014400
 8009124:	40014800 	.word	0x40014800

08009128 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009128:	b480      	push	{r7}
 800912a:	b087      	sub	sp, #28
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a1b      	ldr	r3, [r3, #32]
 800913c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800914e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800915a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	021b      	lsls	r3, r3, #8
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	4313      	orrs	r3, r2
 8009166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800916e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	051b      	lsls	r3, r3, #20
 8009176:	693a      	ldr	r2, [r7, #16]
 8009178:	4313      	orrs	r3, r2
 800917a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a18      	ldr	r2, [pc, #96]	@ (80091e0 <TIM_OC6_SetConfig+0xb8>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d00f      	beq.n	80091a4 <TIM_OC6_SetConfig+0x7c>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a17      	ldr	r2, [pc, #92]	@ (80091e4 <TIM_OC6_SetConfig+0xbc>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d00b      	beq.n	80091a4 <TIM_OC6_SetConfig+0x7c>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a16      	ldr	r2, [pc, #88]	@ (80091e8 <TIM_OC6_SetConfig+0xc0>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d007      	beq.n	80091a4 <TIM_OC6_SetConfig+0x7c>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4a15      	ldr	r2, [pc, #84]	@ (80091ec <TIM_OC6_SetConfig+0xc4>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d003      	beq.n	80091a4 <TIM_OC6_SetConfig+0x7c>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a14      	ldr	r2, [pc, #80]	@ (80091f0 <TIM_OC6_SetConfig+0xc8>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d109      	bne.n	80091b8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80091aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	695b      	ldr	r3, [r3, #20]
 80091b0:	029b      	lsls	r3, r3, #10
 80091b2:	697a      	ldr	r2, [r7, #20]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	697a      	ldr	r2, [r7, #20]
 80091bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	621a      	str	r2, [r3, #32]
}
 80091d2:	bf00      	nop
 80091d4:	371c      	adds	r7, #28
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	40012c00 	.word	0x40012c00
 80091e4:	40013400 	.word	0x40013400
 80091e8:	40014000 	.word	0x40014000
 80091ec:	40014400 	.word	0x40014400
 80091f0:	40014800 	.word	0x40014800

080091f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6a1b      	ldr	r3, [r3, #32]
 8009204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	f023 0201 	bic.w	r2, r3, #1
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800921e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	011b      	lsls	r3, r3, #4
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	4313      	orrs	r3, r2
 8009228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	f023 030a 	bic.w	r3, r3, #10
 8009230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	4313      	orrs	r3, r2
 8009238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	621a      	str	r2, [r3, #32]
}
 8009246:	bf00      	nop
 8009248:	371c      	adds	r7, #28
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009252:	b480      	push	{r7}
 8009254:	b087      	sub	sp, #28
 8009256:	af00      	add	r7, sp, #0
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	60b9      	str	r1, [r7, #8]
 800925c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6a1b      	ldr	r3, [r3, #32]
 8009268:	f023 0210 	bic.w	r2, r3, #16
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800927c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	031b      	lsls	r3, r3, #12
 8009282:	693a      	ldr	r2, [r7, #16]
 8009284:	4313      	orrs	r3, r2
 8009286:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800928e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	011b      	lsls	r3, r3, #4
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	4313      	orrs	r3, r2
 8009298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	621a      	str	r2, [r3, #32]
}
 80092a6:	bf00      	nop
 80092a8:	371c      	adds	r7, #28
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b085      	sub	sp, #20
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80092c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	f043 0307 	orr.w	r3, r3, #7
 80092d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	609a      	str	r2, [r3, #8]
}
 80092e0:	bf00      	nop
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b087      	sub	sp, #28
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
 80092f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	021a      	lsls	r2, r3, #8
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	431a      	orrs	r2, r3
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	4313      	orrs	r3, r2
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	4313      	orrs	r3, r2
 8009318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	697a      	ldr	r2, [r7, #20]
 800931e:	609a      	str	r2, [r3, #8]
}
 8009320:	bf00      	nop
 8009322:	371c      	adds	r7, #28
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800932c:	b480      	push	{r7}
 800932e:	b087      	sub	sp, #28
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	f003 031f 	and.w	r3, r3, #31
 800933e:	2201      	movs	r2, #1
 8009340:	fa02 f303 	lsl.w	r3, r2, r3
 8009344:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6a1a      	ldr	r2, [r3, #32]
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	43db      	mvns	r3, r3
 800934e:	401a      	ands	r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6a1a      	ldr	r2, [r3, #32]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f003 031f 	and.w	r3, r3, #31
 800935e:	6879      	ldr	r1, [r7, #4]
 8009360:	fa01 f303 	lsl.w	r3, r1, r3
 8009364:	431a      	orrs	r2, r3
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	621a      	str	r2, [r3, #32]
}
 800936a:	bf00      	nop
 800936c:	371c      	adds	r7, #28
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
	...

08009378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009388:	2b01      	cmp	r3, #1
 800938a:	d101      	bne.n	8009390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800938c:	2302      	movs	r3, #2
 800938e:	e065      	b.n	800945c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2202      	movs	r2, #2
 800939c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a2c      	ldr	r2, [pc, #176]	@ (8009468 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d004      	beq.n	80093c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a2b      	ldr	r2, [pc, #172]	@ (800946c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d108      	bne.n	80093d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80093ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80093dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a1b      	ldr	r2, [pc, #108]	@ (8009468 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d018      	beq.n	8009430 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009406:	d013      	beq.n	8009430 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a18      	ldr	r2, [pc, #96]	@ (8009470 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d00e      	beq.n	8009430 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a17      	ldr	r2, [pc, #92]	@ (8009474 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d009      	beq.n	8009430 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a12      	ldr	r2, [pc, #72]	@ (800946c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d004      	beq.n	8009430 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a13      	ldr	r2, [pc, #76]	@ (8009478 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d10c      	bne.n	800944a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009436:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	4313      	orrs	r3, r2
 8009440:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3714      	adds	r7, #20
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr
 8009468:	40012c00 	.word	0x40012c00
 800946c:	40013400 	.word	0x40013400
 8009470:	40000400 	.word	0x40000400
 8009474:	40000800 	.word	0x40000800
 8009478:	40014000 	.word	0x40014000

0800947c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009486:	2300      	movs	r3, #0
 8009488:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009490:	2b01      	cmp	r3, #1
 8009492:	d101      	bne.n	8009498 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009494:	2302      	movs	r3, #2
 8009496:	e073      	b.n	8009580 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	695b      	ldr	r3, [r3, #20]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094fe:	4313      	orrs	r3, r2
 8009500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	041b      	lsls	r3, r3, #16
 800950e:	4313      	orrs	r3, r2
 8009510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	69db      	ldr	r3, [r3, #28]
 800951c:	4313      	orrs	r3, r2
 800951e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a19      	ldr	r2, [pc, #100]	@ (800958c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d004      	beq.n	8009534 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a18      	ldr	r2, [pc, #96]	@ (8009590 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d11c      	bne.n	800956e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953e:	051b      	lsls	r3, r3, #20
 8009540:	4313      	orrs	r3, r2
 8009542:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	4313      	orrs	r3, r2
 8009550:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800955c:	4313      	orrs	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800956a:	4313      	orrs	r3, r2
 800956c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3714      	adds	r7, #20
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	40012c00 	.word	0x40012c00
 8009590:	40013400 	.word	0x40013400

08009594 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8009594:	b480      	push	{r7}
 8009596:	b08b      	sub	sp, #44	@ 0x2c
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d101      	bne.n	80095b4 <HAL_TIMEx_ConfigBreakInput+0x20>
 80095b0:	2302      	movs	r3, #2
 80095b2:	e0c1      	b.n	8009738 <HAL_TIMEx_ConfigBreakInput+0x1a4>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3b01      	subs	r3, #1
 80095c2:	2b0f      	cmp	r3, #15
 80095c4:	d854      	bhi.n	8009670 <HAL_TIMEx_ConfigBreakInput+0xdc>
 80095c6:	a201      	add	r2, pc, #4	@ (adr r2, 80095cc <HAL_TIMEx_ConfigBreakInput+0x38>)
 80095c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095cc:	0800960d 	.word	0x0800960d
 80095d0:	08009621 	.word	0x08009621
 80095d4:	08009671 	.word	0x08009671
 80095d8:	08009635 	.word	0x08009635
 80095dc:	08009671 	.word	0x08009671
 80095e0:	08009671 	.word	0x08009671
 80095e4:	08009671 	.word	0x08009671
 80095e8:	08009649 	.word	0x08009649
 80095ec:	08009671 	.word	0x08009671
 80095f0:	08009671 	.word	0x08009671
 80095f4:	08009671 	.word	0x08009671
 80095f8:	08009671 	.word	0x08009671
 80095fc:	08009671 	.word	0x08009671
 8009600:	08009671 	.word	0x08009671
 8009604:	08009671 	.word	0x08009671
 8009608:	0800965d 	.word	0x0800965d
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800960c:	2301      	movs	r3, #1
 800960e:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8009610:	2300      	movs	r3, #0
 8009612:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8009614:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009618:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800961a:	2309      	movs	r3, #9
 800961c:	617b      	str	r3, [r7, #20]
      break;
 800961e:	e030      	b.n	8009682 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8009620:	2302      	movs	r3, #2
 8009622:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8009624:	2301      	movs	r3, #1
 8009626:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8009628:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800962c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800962e:	230a      	movs	r3, #10
 8009630:	617b      	str	r3, [r7, #20]
      break;
 8009632:	e026      	b.n	8009682 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8009634:	2304      	movs	r3, #4
 8009636:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8009638:	2302      	movs	r3, #2
 800963a:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800963c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009640:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8009642:	230b      	movs	r3, #11
 8009644:	617b      	str	r3, [r7, #20]
      break;
 8009646:	e01c      	b.n	8009682 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 8009648:	2308      	movs	r3, #8
 800964a:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 800964c:	2303      	movs	r3, #3
 800964e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8009650:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009654:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8009656:	230c      	movs	r3, #12
 8009658:	617b      	str	r3, [r7, #20]
      break;
 800965a:	e012      	b.n	8009682 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 800965c:	2310      	movs	r3, #16
 800965e:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8009660:	2304      	movs	r3, #4
 8009662:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8009664:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009668:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 800966a:	230d      	movs	r3, #13
 800966c:	617b      	str	r3, [r7, #20]
      break;
 800966e:	e008      	b.n	8009682 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 8009670:	2300      	movs	r3, #0
 8009672:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8009674:	2300      	movs	r3, #0
 8009676:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 8009678:	2300      	movs	r3, #0
 800967a:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800967c:	2300      	movs	r3, #0
 800967e:	617b      	str	r3, [r7, #20]
      break;
 8009680:	bf00      	nop
    }
  }

  switch (BreakInput)
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d003      	beq.n	8009690 <HAL_TIMEx_ConfigBreakInput+0xfc>
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	2b02      	cmp	r3, #2
 800968c:	d025      	beq.n	80096da <HAL_TIMEx_ConfigBreakInput+0x146>
 800968e:	e049      	b.n	8009724 <HAL_TIMEx_ConfigBreakInput+0x190>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009696:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8009698:	6a3b      	ldr	r3, [r7, #32]
 800969a:	43db      	mvns	r3, r3
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	4013      	ands	r3, r2
 80096a0:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	685a      	ldr	r2, [r3, #4]
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	409a      	lsls	r2, r3
 80096aa:	6a3b      	ldr	r3, [r7, #32]
 80096ac:	4013      	ands	r3, r2
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	43db      	mvns	r3, r3
 80096b8:	693a      	ldr	r2, [r7, #16]
 80096ba:	4013      	ands	r3, r2
 80096bc:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	689a      	ldr	r2, [r3, #8]
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	409a      	lsls	r2, r3
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	4013      	ands	r3, r2
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 80096d8:	e028      	b.n	800972c <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096e0:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80096e2:	6a3b      	ldr	r3, [r7, #32]
 80096e4:	43db      	mvns	r3, r3
 80096e6:	693a      	ldr	r2, [r7, #16]
 80096e8:	4013      	ands	r3, r2
 80096ea:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685a      	ldr	r2, [r3, #4]
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	409a      	lsls	r2, r3
 80096f4:	6a3b      	ldr	r3, [r7, #32]
 80096f6:	4013      	ands	r3, r2
 80096f8:	693a      	ldr	r2, [r7, #16]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	43db      	mvns	r3, r3
 8009702:	693a      	ldr	r2, [r7, #16]
 8009704:	4013      	ands	r3, r2
 8009706:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	689a      	ldr	r2, [r3, #8]
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	409a      	lsls	r2, r3
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	4013      	ands	r3, r2
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	4313      	orrs	r3, r2
 8009718:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8009722:	e003      	b.n	800972c <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    default:
      status = HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800972a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009734:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009738:	4618      	mov	r0, r3
 800973a:	372c      	adds	r7, #44	@ 0x2c
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d101      	bne.n	8009756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e042      	b.n	80097dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800975c:	2b00      	cmp	r3, #0
 800975e:	d106      	bne.n	800976e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f7f8 ff29 	bl	80025c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2224      	movs	r2, #36	@ 0x24
 8009772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f022 0201 	bic.w	r2, r2, #1
 8009784:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800978a:	2b00      	cmp	r3, #0
 800978c:	d002      	beq.n	8009794 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 ff58 	bl	800a644 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fc89 	bl	800a0ac <UART_SetConfig>
 800979a:	4603      	mov	r3, r0
 800979c:	2b01      	cmp	r3, #1
 800979e:	d101      	bne.n	80097a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e01b      	b.n	80097dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	685a      	ldr	r2, [r3, #4]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80097b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	689a      	ldr	r2, [r3, #8]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80097c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f042 0201 	orr.w	r2, r2, #1
 80097d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 ffd7 	bl	800a788 <UART_CheckIdleState>
 80097da:	4603      	mov	r3, r0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b08a      	sub	sp, #40	@ 0x28
 80097e8:	af02      	add	r7, sp, #8
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	603b      	str	r3, [r7, #0]
 80097f0:	4613      	mov	r3, r2
 80097f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097fa:	2b20      	cmp	r3, #32
 80097fc:	d17b      	bne.n	80098f6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d002      	beq.n	800980a <HAL_UART_Transmit+0x26>
 8009804:	88fb      	ldrh	r3, [r7, #6]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d101      	bne.n	800980e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	e074      	b.n	80098f8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2221      	movs	r2, #33	@ 0x21
 800981a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800981e:	f7f9 f8bd 	bl	800299c <HAL_GetTick>
 8009822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	88fa      	ldrh	r2, [r7, #6]
 8009828:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	88fa      	ldrh	r2, [r7, #6]
 8009830:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800983c:	d108      	bne.n	8009850 <HAL_UART_Transmit+0x6c>
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d104      	bne.n	8009850 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009846:	2300      	movs	r3, #0
 8009848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	61bb      	str	r3, [r7, #24]
 800984e:	e003      	b.n	8009858 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009854:	2300      	movs	r3, #0
 8009856:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009858:	e030      	b.n	80098bc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	2200      	movs	r2, #0
 8009862:	2180      	movs	r1, #128	@ 0x80
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f001 f839 	bl	800a8dc <UART_WaitOnFlagUntilTimeout>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d005      	beq.n	800987c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2220      	movs	r2, #32
 8009874:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009878:	2303      	movs	r3, #3
 800987a:	e03d      	b.n	80098f8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d10b      	bne.n	800989a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	881b      	ldrh	r3, [r3, #0]
 8009886:	461a      	mov	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009890:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	3302      	adds	r3, #2
 8009896:	61bb      	str	r3, [r7, #24]
 8009898:	e007      	b.n	80098aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	781a      	ldrb	r2, [r3, #0]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	3301      	adds	r3, #1
 80098a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	3b01      	subs	r3, #1
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1c8      	bne.n	800985a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	2200      	movs	r2, #0
 80098d0:	2140      	movs	r1, #64	@ 0x40
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f001 f802 	bl	800a8dc <UART_WaitOnFlagUntilTimeout>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d005      	beq.n	80098ea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2220      	movs	r2, #32
 80098e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e006      	b.n	80098f8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2220      	movs	r2, #32
 80098ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	e000      	b.n	80098f8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80098f6:	2302      	movs	r3, #2
  }
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3720      	adds	r7, #32
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b08a      	sub	sp, #40	@ 0x28
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	4613      	mov	r3, r2
 800990c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009914:	2b20      	cmp	r3, #32
 8009916:	d167      	bne.n	80099e8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d002      	beq.n	8009924 <HAL_UART_Transmit_DMA+0x24>
 800991e:	88fb      	ldrh	r3, [r7, #6]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d101      	bne.n	8009928 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	e060      	b.n	80099ea <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	68ba      	ldr	r2, [r7, #8]
 800992c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	88fa      	ldrh	r2, [r7, #6]
 8009932:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	88fa      	ldrh	r2, [r7, #6]
 800993a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2221      	movs	r2, #33	@ 0x21
 800994a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009952:	2b00      	cmp	r3, #0
 8009954:	d028      	beq.n	80099a8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800995a:	4a26      	ldr	r2, [pc, #152]	@ (80099f4 <HAL_UART_Transmit_DMA+0xf4>)
 800995c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009962:	4a25      	ldr	r2, [pc, #148]	@ (80099f8 <HAL_UART_Transmit_DMA+0xf8>)
 8009964:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800996a:	4a24      	ldr	r2, [pc, #144]	@ (80099fc <HAL_UART_Transmit_DMA+0xfc>)
 800996c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009972:	2200      	movs	r2, #0
 8009974:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800997e:	4619      	mov	r1, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3328      	adds	r3, #40	@ 0x28
 8009986:	461a      	mov	r2, r3
 8009988:	88fb      	ldrh	r3, [r7, #6]
 800998a:	f7fc fb93 	bl	80060b4 <HAL_DMA_Start_IT>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d009      	beq.n	80099a8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2210      	movs	r2, #16
 8009998:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2220      	movs	r2, #32
 80099a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	e020      	b.n	80099ea <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2240      	movs	r2, #64	@ 0x40
 80099ae:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	3308      	adds	r3, #8
 80099b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	e853 3f00 	ldrex	r3, [r3]
 80099be:	613b      	str	r3, [r7, #16]
   return(result);
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	3308      	adds	r3, #8
 80099ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099d0:	623a      	str	r2, [r7, #32]
 80099d2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d4:	69f9      	ldr	r1, [r7, #28]
 80099d6:	6a3a      	ldr	r2, [r7, #32]
 80099d8:	e841 2300 	strex	r3, r2, [r1]
 80099dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1e5      	bne.n	80099b0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	e000      	b.n	80099ea <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80099e8:	2302      	movs	r3, #2
  }
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3728      	adds	r7, #40	@ 0x28
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	0800ac53 	.word	0x0800ac53
 80099f8:	0800aced 	.word	0x0800aced
 80099fc:	0800ae73 	.word	0x0800ae73

08009a00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b0ba      	sub	sp, #232	@ 0xe8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	69db      	ldr	r3, [r3, #28]
 8009a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009a2a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009a2e:	4013      	ands	r3, r2
 8009a30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009a34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d11b      	bne.n	8009a74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a40:	f003 0320 	and.w	r3, r3, #32
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d015      	beq.n	8009a74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a4c:	f003 0320 	and.w	r3, r3, #32
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d105      	bne.n	8009a60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d009      	beq.n	8009a74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 82e3 	beq.w	800a030 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	4798      	blx	r3
      }
      return;
 8009a72:	e2dd      	b.n	800a030 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009a74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f000 8123 	beq.w	8009cc4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009a7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009a82:	4b8d      	ldr	r3, [pc, #564]	@ (8009cb8 <HAL_UART_IRQHandler+0x2b8>)
 8009a84:	4013      	ands	r3, r2
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d106      	bne.n	8009a98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009a8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009a8e:	4b8b      	ldr	r3, [pc, #556]	@ (8009cbc <HAL_UART_IRQHandler+0x2bc>)
 8009a90:	4013      	ands	r3, r2
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f000 8116 	beq.w	8009cc4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a9c:	f003 0301 	and.w	r3, r3, #1
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d011      	beq.n	8009ac8 <HAL_UART_IRQHandler+0xc8>
 8009aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00b      	beq.n	8009ac8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009abe:	f043 0201 	orr.w	r2, r3, #1
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009acc:	f003 0302 	and.w	r3, r3, #2
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d011      	beq.n	8009af8 <HAL_UART_IRQHandler+0xf8>
 8009ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ad8:	f003 0301 	and.w	r3, r3, #1
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00b      	beq.n	8009af8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2202      	movs	r2, #2
 8009ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aee:	f043 0204 	orr.w	r2, r3, #4
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009afc:	f003 0304 	and.w	r3, r3, #4
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d011      	beq.n	8009b28 <HAL_UART_IRQHandler+0x128>
 8009b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b08:	f003 0301 	and.w	r3, r3, #1
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00b      	beq.n	8009b28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2204      	movs	r2, #4
 8009b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b1e:	f043 0202 	orr.w	r2, r3, #2
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b2c:	f003 0308 	and.w	r3, r3, #8
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d017      	beq.n	8009b64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b38:	f003 0320 	and.w	r3, r3, #32
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d105      	bne.n	8009b4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009b40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009b44:	4b5c      	ldr	r3, [pc, #368]	@ (8009cb8 <HAL_UART_IRQHandler+0x2b8>)
 8009b46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00b      	beq.n	8009b64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2208      	movs	r2, #8
 8009b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b5a:	f043 0208 	orr.w	r2, r3, #8
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d012      	beq.n	8009b96 <HAL_UART_IRQHandler+0x196>
 8009b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00c      	beq.n	8009b96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b8c:	f043 0220 	orr.w	r2, r3, #32
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f000 8249 	beq.w	800a034 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ba6:	f003 0320 	and.w	r3, r3, #32
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d013      	beq.n	8009bd6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bb2:	f003 0320 	and.w	r3, r3, #32
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d105      	bne.n	8009bc6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d007      	beq.n	8009bd6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d003      	beq.n	8009bd6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bdc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bea:	2b40      	cmp	r3, #64	@ 0x40
 8009bec:	d005      	beq.n	8009bfa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009bee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009bf2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d054      	beq.n	8009ca4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 ffc3 	bl	800ab86 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c0a:	2b40      	cmp	r3, #64	@ 0x40
 8009c0c:	d146      	bne.n	8009c9c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3308      	adds	r3, #8
 8009c14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c1c:	e853 3f00 	ldrex	r3, [r3]
 8009c20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	3308      	adds	r3, #8
 8009c36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009c3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009c46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009c4a:	e841 2300 	strex	r3, r2, [r1]
 8009c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1d9      	bne.n	8009c0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d017      	beq.n	8009c94 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c6a:	4a15      	ldr	r2, [pc, #84]	@ (8009cc0 <HAL_UART_IRQHandler+0x2c0>)
 8009c6c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fc faf1 	bl	800625c <HAL_DMA_Abort_IT>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d019      	beq.n	8009cb4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009c8e:	4610      	mov	r0, r2
 8009c90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c92:	e00f      	b.n	8009cb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 f9ff 	bl	800a098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c9a:	e00b      	b.n	8009cb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f9fb 	bl	800a098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ca2:	e007      	b.n	8009cb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 f9f7 	bl	800a098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009cb2:	e1bf      	b.n	800a034 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cb4:	bf00      	nop
    return;
 8009cb6:	e1bd      	b.n	800a034 <HAL_UART_IRQHandler+0x634>
 8009cb8:	10000001 	.word	0x10000001
 8009cbc:	04000120 	.word	0x04000120
 8009cc0:	0800aef3 	.word	0x0800aef3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	f040 8153 	bne.w	8009f74 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cd2:	f003 0310 	and.w	r3, r3, #16
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f000 814c 	beq.w	8009f74 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ce0:	f003 0310 	and.w	r3, r3, #16
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f000 8145 	beq.w	8009f74 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2210      	movs	r2, #16
 8009cf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cfc:	2b40      	cmp	r3, #64	@ 0x40
 8009cfe:	f040 80bb 	bne.w	8009e78 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009d10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	f000 818f 	beq.w	800a038 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d24:	429a      	cmp	r2, r3
 8009d26:	f080 8187 	bcs.w	800a038 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f003 0320 	and.w	r3, r3, #32
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	f040 8087 	bne.w	8009e56 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d54:	e853 3f00 	ldrex	r3, [r3]
 8009d58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009d72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d76:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009d7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009d82:	e841 2300 	strex	r3, r2, [r1]
 8009d86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1da      	bne.n	8009d48 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3308      	adds	r3, #8
 8009d98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d9c:	e853 3f00 	ldrex	r3, [r3]
 8009da0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009da2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009da4:	f023 0301 	bic.w	r3, r3, #1
 8009da8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3308      	adds	r3, #8
 8009db2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009db6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009dba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009dbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009dc2:	e841 2300 	strex	r3, r2, [r1]
 8009dc6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009dc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1e1      	bne.n	8009d92 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	3308      	adds	r3, #8
 8009dd4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009dd8:	e853 3f00 	ldrex	r3, [r3]
 8009ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009dde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009de4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	3308      	adds	r3, #8
 8009dee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009df2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009df4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009df8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009dfa:	e841 2300 	strex	r3, r2, [r1]
 8009dfe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009e00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1e3      	bne.n	8009dce <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2220      	movs	r2, #32
 8009e0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e1c:	e853 3f00 	ldrex	r3, [r3]
 8009e20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e24:	f023 0310 	bic.w	r3, r3, #16
 8009e28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	461a      	mov	r2, r3
 8009e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e3e:	e841 2300 	strex	r3, r2, [r1]
 8009e42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1e4      	bne.n	8009e14 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7fc f9aa 	bl	80061aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2202      	movs	r2, #2
 8009e5a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	1ad3      	subs	r3, r2, r3
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f003 f901 	bl	800d078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e76:	e0df      	b.n	800a038 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f000 80d1 	beq.w	800a03c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009e9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f000 80cc 	beq.w	800a03c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eac:	e853 3f00 	ldrex	r3, [r3]
 8009eb0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009ec6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ec8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ecc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ece:	e841 2300 	strex	r3, r2, [r1]
 8009ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1e4      	bne.n	8009ea4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	3308      	adds	r3, #8
 8009ee0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee4:	e853 3f00 	ldrex	r3, [r3]
 8009ee8:	623b      	str	r3, [r7, #32]
   return(result);
 8009eea:	6a3b      	ldr	r3, [r7, #32]
 8009eec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ef0:	f023 0301 	bic.w	r3, r3, #1
 8009ef4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	3308      	adds	r3, #8
 8009efe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009f02:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f0a:	e841 2300 	strex	r3, r2, [r1]
 8009f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d1e1      	bne.n	8009eda <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2220      	movs	r2, #32
 8009f1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	e853 3f00 	ldrex	r3, [r3]
 8009f36:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f023 0310 	bic.w	r3, r3, #16
 8009f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	461a      	mov	r2, r3
 8009f48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009f4c:	61fb      	str	r3, [r7, #28]
 8009f4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f50:	69b9      	ldr	r1, [r7, #24]
 8009f52:	69fa      	ldr	r2, [r7, #28]
 8009f54:	e841 2300 	strex	r3, r2, [r1]
 8009f58:	617b      	str	r3, [r7, #20]
   return(result);
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1e4      	bne.n	8009f2a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2202      	movs	r2, #2
 8009f64:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f003 f883 	bl	800d078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f72:	e063      	b.n	800a03c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d00e      	beq.n	8009f9e <HAL_UART_IRQHandler+0x59e>
 8009f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d008      	beq.n	8009f9e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009f94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 ffec 	bl	800af74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f9c:	e051      	b.n	800a042 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d014      	beq.n	8009fd4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d105      	bne.n	8009fc2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d008      	beq.n	8009fd4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d03a      	beq.n	800a040 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	4798      	blx	r3
    }
    return;
 8009fd2:	e035      	b.n	800a040 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d009      	beq.n	8009ff4 <HAL_UART_IRQHandler+0x5f4>
 8009fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d003      	beq.n	8009ff4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 ff96 	bl	800af1e <UART_EndTransmit_IT>
    return;
 8009ff2:	e026      	b.n	800a042 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ff8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d009      	beq.n	800a014 <HAL_UART_IRQHandler+0x614>
 800a000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a004:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d003      	beq.n	800a014 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 ffc5 	bl	800af9c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a012:	e016      	b.n	800a042 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a018:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d010      	beq.n	800a042 <HAL_UART_IRQHandler+0x642>
 800a020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a024:	2b00      	cmp	r3, #0
 800a026:	da0c      	bge.n	800a042 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 ffad 	bl	800af88 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a02e:	e008      	b.n	800a042 <HAL_UART_IRQHandler+0x642>
      return;
 800a030:	bf00      	nop
 800a032:	e006      	b.n	800a042 <HAL_UART_IRQHandler+0x642>
    return;
 800a034:	bf00      	nop
 800a036:	e004      	b.n	800a042 <HAL_UART_IRQHandler+0x642>
      return;
 800a038:	bf00      	nop
 800a03a:	e002      	b.n	800a042 <HAL_UART_IRQHandler+0x642>
      return;
 800a03c:	bf00      	nop
 800a03e:	e000      	b.n	800a042 <HAL_UART_IRQHandler+0x642>
    return;
 800a040:	bf00      	nop
  }
}
 800a042:	37e8      	adds	r7, #232	@ 0xe8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a064:	bf00      	nop
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0b0:	b08c      	sub	sp, #48	@ 0x30
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	689a      	ldr	r2, [r3, #8]
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	431a      	orrs	r2, r3
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	431a      	orrs	r2, r3
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	69db      	ldr	r3, [r3, #28]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	4bab      	ldr	r3, [pc, #684]	@ (800a388 <UART_SetConfig+0x2dc>)
 800a0dc:	4013      	ands	r3, r2
 800a0de:	697a      	ldr	r2, [r7, #20]
 800a0e0:	6812      	ldr	r2, [r2, #0]
 800a0e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0e4:	430b      	orrs	r3, r1
 800a0e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	68da      	ldr	r2, [r3, #12]
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	430a      	orrs	r2, r1
 800a0fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	699b      	ldr	r3, [r3, #24]
 800a102:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4aa0      	ldr	r2, [pc, #640]	@ (800a38c <UART_SetConfig+0x2e0>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d004      	beq.n	800a118 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a114:	4313      	orrs	r3, r2
 800a116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a122:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a126:	697a      	ldr	r2, [r7, #20]
 800a128:	6812      	ldr	r2, [r2, #0]
 800a12a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a12c:	430b      	orrs	r3, r1
 800a12e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a136:	f023 010f 	bic.w	r1, r3, #15
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	430a      	orrs	r2, r1
 800a144:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a91      	ldr	r2, [pc, #580]	@ (800a390 <UART_SetConfig+0x2e4>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d125      	bne.n	800a19c <UART_SetConfig+0xf0>
 800a150:	4b90      	ldr	r3, [pc, #576]	@ (800a394 <UART_SetConfig+0x2e8>)
 800a152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a156:	f003 0303 	and.w	r3, r3, #3
 800a15a:	2b03      	cmp	r3, #3
 800a15c:	d81a      	bhi.n	800a194 <UART_SetConfig+0xe8>
 800a15e:	a201      	add	r2, pc, #4	@ (adr r2, 800a164 <UART_SetConfig+0xb8>)
 800a160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a164:	0800a175 	.word	0x0800a175
 800a168:	0800a185 	.word	0x0800a185
 800a16c:	0800a17d 	.word	0x0800a17d
 800a170:	0800a18d 	.word	0x0800a18d
 800a174:	2301      	movs	r3, #1
 800a176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a17a:	e0d6      	b.n	800a32a <UART_SetConfig+0x27e>
 800a17c:	2302      	movs	r3, #2
 800a17e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a182:	e0d2      	b.n	800a32a <UART_SetConfig+0x27e>
 800a184:	2304      	movs	r3, #4
 800a186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a18a:	e0ce      	b.n	800a32a <UART_SetConfig+0x27e>
 800a18c:	2308      	movs	r3, #8
 800a18e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a192:	e0ca      	b.n	800a32a <UART_SetConfig+0x27e>
 800a194:	2310      	movs	r3, #16
 800a196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a19a:	e0c6      	b.n	800a32a <UART_SetConfig+0x27e>
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a7d      	ldr	r2, [pc, #500]	@ (800a398 <UART_SetConfig+0x2ec>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d138      	bne.n	800a218 <UART_SetConfig+0x16c>
 800a1a6:	4b7b      	ldr	r3, [pc, #492]	@ (800a394 <UART_SetConfig+0x2e8>)
 800a1a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1ac:	f003 030c 	and.w	r3, r3, #12
 800a1b0:	2b0c      	cmp	r3, #12
 800a1b2:	d82d      	bhi.n	800a210 <UART_SetConfig+0x164>
 800a1b4:	a201      	add	r2, pc, #4	@ (adr r2, 800a1bc <UART_SetConfig+0x110>)
 800a1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ba:	bf00      	nop
 800a1bc:	0800a1f1 	.word	0x0800a1f1
 800a1c0:	0800a211 	.word	0x0800a211
 800a1c4:	0800a211 	.word	0x0800a211
 800a1c8:	0800a211 	.word	0x0800a211
 800a1cc:	0800a201 	.word	0x0800a201
 800a1d0:	0800a211 	.word	0x0800a211
 800a1d4:	0800a211 	.word	0x0800a211
 800a1d8:	0800a211 	.word	0x0800a211
 800a1dc:	0800a1f9 	.word	0x0800a1f9
 800a1e0:	0800a211 	.word	0x0800a211
 800a1e4:	0800a211 	.word	0x0800a211
 800a1e8:	0800a211 	.word	0x0800a211
 800a1ec:	0800a209 	.word	0x0800a209
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1f6:	e098      	b.n	800a32a <UART_SetConfig+0x27e>
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1fe:	e094      	b.n	800a32a <UART_SetConfig+0x27e>
 800a200:	2304      	movs	r3, #4
 800a202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a206:	e090      	b.n	800a32a <UART_SetConfig+0x27e>
 800a208:	2308      	movs	r3, #8
 800a20a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a20e:	e08c      	b.n	800a32a <UART_SetConfig+0x27e>
 800a210:	2310      	movs	r3, #16
 800a212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a216:	e088      	b.n	800a32a <UART_SetConfig+0x27e>
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a5f      	ldr	r2, [pc, #380]	@ (800a39c <UART_SetConfig+0x2f0>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d125      	bne.n	800a26e <UART_SetConfig+0x1c2>
 800a222:	4b5c      	ldr	r3, [pc, #368]	@ (800a394 <UART_SetConfig+0x2e8>)
 800a224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a228:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a22c:	2b30      	cmp	r3, #48	@ 0x30
 800a22e:	d016      	beq.n	800a25e <UART_SetConfig+0x1b2>
 800a230:	2b30      	cmp	r3, #48	@ 0x30
 800a232:	d818      	bhi.n	800a266 <UART_SetConfig+0x1ba>
 800a234:	2b20      	cmp	r3, #32
 800a236:	d00a      	beq.n	800a24e <UART_SetConfig+0x1a2>
 800a238:	2b20      	cmp	r3, #32
 800a23a:	d814      	bhi.n	800a266 <UART_SetConfig+0x1ba>
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d002      	beq.n	800a246 <UART_SetConfig+0x19a>
 800a240:	2b10      	cmp	r3, #16
 800a242:	d008      	beq.n	800a256 <UART_SetConfig+0x1aa>
 800a244:	e00f      	b.n	800a266 <UART_SetConfig+0x1ba>
 800a246:	2300      	movs	r3, #0
 800a248:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a24c:	e06d      	b.n	800a32a <UART_SetConfig+0x27e>
 800a24e:	2302      	movs	r3, #2
 800a250:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a254:	e069      	b.n	800a32a <UART_SetConfig+0x27e>
 800a256:	2304      	movs	r3, #4
 800a258:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a25c:	e065      	b.n	800a32a <UART_SetConfig+0x27e>
 800a25e:	2308      	movs	r3, #8
 800a260:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a264:	e061      	b.n	800a32a <UART_SetConfig+0x27e>
 800a266:	2310      	movs	r3, #16
 800a268:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a26c:	e05d      	b.n	800a32a <UART_SetConfig+0x27e>
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a4b      	ldr	r2, [pc, #300]	@ (800a3a0 <UART_SetConfig+0x2f4>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d125      	bne.n	800a2c4 <UART_SetConfig+0x218>
 800a278:	4b46      	ldr	r3, [pc, #280]	@ (800a394 <UART_SetConfig+0x2e8>)
 800a27a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a27e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a282:	2bc0      	cmp	r3, #192	@ 0xc0
 800a284:	d016      	beq.n	800a2b4 <UART_SetConfig+0x208>
 800a286:	2bc0      	cmp	r3, #192	@ 0xc0
 800a288:	d818      	bhi.n	800a2bc <UART_SetConfig+0x210>
 800a28a:	2b80      	cmp	r3, #128	@ 0x80
 800a28c:	d00a      	beq.n	800a2a4 <UART_SetConfig+0x1f8>
 800a28e:	2b80      	cmp	r3, #128	@ 0x80
 800a290:	d814      	bhi.n	800a2bc <UART_SetConfig+0x210>
 800a292:	2b00      	cmp	r3, #0
 800a294:	d002      	beq.n	800a29c <UART_SetConfig+0x1f0>
 800a296:	2b40      	cmp	r3, #64	@ 0x40
 800a298:	d008      	beq.n	800a2ac <UART_SetConfig+0x200>
 800a29a:	e00f      	b.n	800a2bc <UART_SetConfig+0x210>
 800a29c:	2300      	movs	r3, #0
 800a29e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2a2:	e042      	b.n	800a32a <UART_SetConfig+0x27e>
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2aa:	e03e      	b.n	800a32a <UART_SetConfig+0x27e>
 800a2ac:	2304      	movs	r3, #4
 800a2ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2b2:	e03a      	b.n	800a32a <UART_SetConfig+0x27e>
 800a2b4:	2308      	movs	r3, #8
 800a2b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2ba:	e036      	b.n	800a32a <UART_SetConfig+0x27e>
 800a2bc:	2310      	movs	r3, #16
 800a2be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2c2:	e032      	b.n	800a32a <UART_SetConfig+0x27e>
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a30      	ldr	r2, [pc, #192]	@ (800a38c <UART_SetConfig+0x2e0>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d12a      	bne.n	800a324 <UART_SetConfig+0x278>
 800a2ce:	4b31      	ldr	r3, [pc, #196]	@ (800a394 <UART_SetConfig+0x2e8>)
 800a2d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a2d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a2dc:	d01a      	beq.n	800a314 <UART_SetConfig+0x268>
 800a2de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a2e2:	d81b      	bhi.n	800a31c <UART_SetConfig+0x270>
 800a2e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2e8:	d00c      	beq.n	800a304 <UART_SetConfig+0x258>
 800a2ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2ee:	d815      	bhi.n	800a31c <UART_SetConfig+0x270>
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d003      	beq.n	800a2fc <UART_SetConfig+0x250>
 800a2f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2f8:	d008      	beq.n	800a30c <UART_SetConfig+0x260>
 800a2fa:	e00f      	b.n	800a31c <UART_SetConfig+0x270>
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a302:	e012      	b.n	800a32a <UART_SetConfig+0x27e>
 800a304:	2302      	movs	r3, #2
 800a306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a30a:	e00e      	b.n	800a32a <UART_SetConfig+0x27e>
 800a30c:	2304      	movs	r3, #4
 800a30e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a312:	e00a      	b.n	800a32a <UART_SetConfig+0x27e>
 800a314:	2308      	movs	r3, #8
 800a316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a31a:	e006      	b.n	800a32a <UART_SetConfig+0x27e>
 800a31c:	2310      	movs	r3, #16
 800a31e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a322:	e002      	b.n	800a32a <UART_SetConfig+0x27e>
 800a324:	2310      	movs	r3, #16
 800a326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a17      	ldr	r2, [pc, #92]	@ (800a38c <UART_SetConfig+0x2e0>)
 800a330:	4293      	cmp	r3, r2
 800a332:	f040 80a8 	bne.w	800a486 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a336:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a33a:	2b08      	cmp	r3, #8
 800a33c:	d834      	bhi.n	800a3a8 <UART_SetConfig+0x2fc>
 800a33e:	a201      	add	r2, pc, #4	@ (adr r2, 800a344 <UART_SetConfig+0x298>)
 800a340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a344:	0800a369 	.word	0x0800a369
 800a348:	0800a3a9 	.word	0x0800a3a9
 800a34c:	0800a371 	.word	0x0800a371
 800a350:	0800a3a9 	.word	0x0800a3a9
 800a354:	0800a377 	.word	0x0800a377
 800a358:	0800a3a9 	.word	0x0800a3a9
 800a35c:	0800a3a9 	.word	0x0800a3a9
 800a360:	0800a3a9 	.word	0x0800a3a9
 800a364:	0800a37f 	.word	0x0800a37f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a368:	f7fd f850 	bl	800740c <HAL_RCC_GetPCLK1Freq>
 800a36c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a36e:	e021      	b.n	800a3b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a370:	4b0c      	ldr	r3, [pc, #48]	@ (800a3a4 <UART_SetConfig+0x2f8>)
 800a372:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a374:	e01e      	b.n	800a3b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a376:	f7fc ffdb 	bl	8007330 <HAL_RCC_GetSysClockFreq>
 800a37a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a37c:	e01a      	b.n	800a3b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a37e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a382:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a384:	e016      	b.n	800a3b4 <UART_SetConfig+0x308>
 800a386:	bf00      	nop
 800a388:	cfff69f3 	.word	0xcfff69f3
 800a38c:	40008000 	.word	0x40008000
 800a390:	40013800 	.word	0x40013800
 800a394:	40021000 	.word	0x40021000
 800a398:	40004400 	.word	0x40004400
 800a39c:	40004800 	.word	0x40004800
 800a3a0:	40004c00 	.word	0x40004c00
 800a3a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a3b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f000 812a 	beq.w	800a610 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c0:	4a9e      	ldr	r2, [pc, #632]	@ (800a63c <UART_SetConfig+0x590>)
 800a3c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3ce:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	685a      	ldr	r2, [r3, #4]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	005b      	lsls	r3, r3, #1
 800a3d8:	4413      	add	r3, r2
 800a3da:	69ba      	ldr	r2, [r7, #24]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d305      	bcc.n	800a3ec <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3e6:	69ba      	ldr	r2, [r7, #24]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d903      	bls.n	800a3f4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a3f2:	e10d      	b.n	800a610 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	60bb      	str	r3, [r7, #8]
 800a3fa:	60fa      	str	r2, [r7, #12]
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a400:	4a8e      	ldr	r2, [pc, #568]	@ (800a63c <UART_SetConfig+0x590>)
 800a402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a406:	b29b      	uxth	r3, r3
 800a408:	2200      	movs	r2, #0
 800a40a:	603b      	str	r3, [r7, #0]
 800a40c:	607a      	str	r2, [r7, #4]
 800a40e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a412:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a416:	f7f6 fc5f 	bl	8000cd8 <__aeabi_uldivmod>
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	4610      	mov	r0, r2
 800a420:	4619      	mov	r1, r3
 800a422:	f04f 0200 	mov.w	r2, #0
 800a426:	f04f 0300 	mov.w	r3, #0
 800a42a:	020b      	lsls	r3, r1, #8
 800a42c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a430:	0202      	lsls	r2, r0, #8
 800a432:	6979      	ldr	r1, [r7, #20]
 800a434:	6849      	ldr	r1, [r1, #4]
 800a436:	0849      	lsrs	r1, r1, #1
 800a438:	2000      	movs	r0, #0
 800a43a:	460c      	mov	r4, r1
 800a43c:	4605      	mov	r5, r0
 800a43e:	eb12 0804 	adds.w	r8, r2, r4
 800a442:	eb43 0905 	adc.w	r9, r3, r5
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	469a      	mov	sl, r3
 800a44e:	4693      	mov	fp, r2
 800a450:	4652      	mov	r2, sl
 800a452:	465b      	mov	r3, fp
 800a454:	4640      	mov	r0, r8
 800a456:	4649      	mov	r1, r9
 800a458:	f7f6 fc3e 	bl	8000cd8 <__aeabi_uldivmod>
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	4613      	mov	r3, r2
 800a462:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a46a:	d308      	bcc.n	800a47e <UART_SetConfig+0x3d2>
 800a46c:	6a3b      	ldr	r3, [r7, #32]
 800a46e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a472:	d204      	bcs.n	800a47e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	6a3a      	ldr	r2, [r7, #32]
 800a47a:	60da      	str	r2, [r3, #12]
 800a47c:	e0c8      	b.n	800a610 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a484:	e0c4      	b.n	800a610 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	69db      	ldr	r3, [r3, #28]
 800a48a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a48e:	d167      	bne.n	800a560 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a490:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a494:	2b08      	cmp	r3, #8
 800a496:	d828      	bhi.n	800a4ea <UART_SetConfig+0x43e>
 800a498:	a201      	add	r2, pc, #4	@ (adr r2, 800a4a0 <UART_SetConfig+0x3f4>)
 800a49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49e:	bf00      	nop
 800a4a0:	0800a4c5 	.word	0x0800a4c5
 800a4a4:	0800a4cd 	.word	0x0800a4cd
 800a4a8:	0800a4d5 	.word	0x0800a4d5
 800a4ac:	0800a4eb 	.word	0x0800a4eb
 800a4b0:	0800a4db 	.word	0x0800a4db
 800a4b4:	0800a4eb 	.word	0x0800a4eb
 800a4b8:	0800a4eb 	.word	0x0800a4eb
 800a4bc:	0800a4eb 	.word	0x0800a4eb
 800a4c0:	0800a4e3 	.word	0x0800a4e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4c4:	f7fc ffa2 	bl	800740c <HAL_RCC_GetPCLK1Freq>
 800a4c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a4ca:	e014      	b.n	800a4f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4cc:	f7fc ffb4 	bl	8007438 <HAL_RCC_GetPCLK2Freq>
 800a4d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a4d2:	e010      	b.n	800a4f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4d4:	4b5a      	ldr	r3, [pc, #360]	@ (800a640 <UART_SetConfig+0x594>)
 800a4d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a4d8:	e00d      	b.n	800a4f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4da:	f7fc ff29 	bl	8007330 <HAL_RCC_GetSysClockFreq>
 800a4de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a4e0:	e009      	b.n	800a4f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a4e8:	e005      	b.n	800a4f6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a4f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 8089 	beq.w	800a610 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a502:	4a4e      	ldr	r2, [pc, #312]	@ (800a63c <UART_SetConfig+0x590>)
 800a504:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a508:	461a      	mov	r2, r3
 800a50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a510:	005a      	lsls	r2, r3, #1
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	085b      	lsrs	r3, r3, #1
 800a518:	441a      	add	r2, r3
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a522:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a524:	6a3b      	ldr	r3, [r7, #32]
 800a526:	2b0f      	cmp	r3, #15
 800a528:	d916      	bls.n	800a558 <UART_SetConfig+0x4ac>
 800a52a:	6a3b      	ldr	r3, [r7, #32]
 800a52c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a530:	d212      	bcs.n	800a558 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a532:	6a3b      	ldr	r3, [r7, #32]
 800a534:	b29b      	uxth	r3, r3
 800a536:	f023 030f 	bic.w	r3, r3, #15
 800a53a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a53c:	6a3b      	ldr	r3, [r7, #32]
 800a53e:	085b      	lsrs	r3, r3, #1
 800a540:	b29b      	uxth	r3, r3
 800a542:	f003 0307 	and.w	r3, r3, #7
 800a546:	b29a      	uxth	r2, r3
 800a548:	8bfb      	ldrh	r3, [r7, #30]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	8bfa      	ldrh	r2, [r7, #30]
 800a554:	60da      	str	r2, [r3, #12]
 800a556:	e05b      	b.n	800a610 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a55e:	e057      	b.n	800a610 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a560:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a564:	2b08      	cmp	r3, #8
 800a566:	d828      	bhi.n	800a5ba <UART_SetConfig+0x50e>
 800a568:	a201      	add	r2, pc, #4	@ (adr r2, 800a570 <UART_SetConfig+0x4c4>)
 800a56a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56e:	bf00      	nop
 800a570:	0800a595 	.word	0x0800a595
 800a574:	0800a59d 	.word	0x0800a59d
 800a578:	0800a5a5 	.word	0x0800a5a5
 800a57c:	0800a5bb 	.word	0x0800a5bb
 800a580:	0800a5ab 	.word	0x0800a5ab
 800a584:	0800a5bb 	.word	0x0800a5bb
 800a588:	0800a5bb 	.word	0x0800a5bb
 800a58c:	0800a5bb 	.word	0x0800a5bb
 800a590:	0800a5b3 	.word	0x0800a5b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a594:	f7fc ff3a 	bl	800740c <HAL_RCC_GetPCLK1Freq>
 800a598:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a59a:	e014      	b.n	800a5c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a59c:	f7fc ff4c 	bl	8007438 <HAL_RCC_GetPCLK2Freq>
 800a5a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5a2:	e010      	b.n	800a5c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5a4:	4b26      	ldr	r3, [pc, #152]	@ (800a640 <UART_SetConfig+0x594>)
 800a5a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a5a8:	e00d      	b.n	800a5c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5aa:	f7fc fec1 	bl	8007330 <HAL_RCC_GetSysClockFreq>
 800a5ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5b0:	e009      	b.n	800a5c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a5b8:	e005      	b.n	800a5c6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a5c4:	bf00      	nop
    }

    if (pclk != 0U)
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d021      	beq.n	800a610 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5d0:	4a1a      	ldr	r2, [pc, #104]	@ (800a63c <UART_SetConfig+0x590>)
 800a5d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5da:	fbb3 f2f2 	udiv	r2, r3, r2
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	085b      	lsrs	r3, r3, #1
 800a5e4:	441a      	add	r2, r3
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5f0:	6a3b      	ldr	r3, [r7, #32]
 800a5f2:	2b0f      	cmp	r3, #15
 800a5f4:	d909      	bls.n	800a60a <UART_SetConfig+0x55e>
 800a5f6:	6a3b      	ldr	r3, [r7, #32]
 800a5f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5fc:	d205      	bcs.n	800a60a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a5fe:	6a3b      	ldr	r3, [r7, #32]
 800a600:	b29a      	uxth	r2, r3
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	60da      	str	r2, [r3, #12]
 800a608:	e002      	b.n	800a610 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	2201      	movs	r2, #1
 800a614:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	2200      	movs	r2, #0
 800a624:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	2200      	movs	r2, #0
 800a62a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a62c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a630:	4618      	mov	r0, r3
 800a632:	3730      	adds	r7, #48	@ 0x30
 800a634:	46bd      	mov	sp, r7
 800a636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a63a:	bf00      	nop
 800a63c:	080148c8 	.word	0x080148c8
 800a640:	00f42400 	.word	0x00f42400

0800a644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a650:	f003 0308 	and.w	r3, r3, #8
 800a654:	2b00      	cmp	r3, #0
 800a656:	d00a      	beq.n	800a66e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	430a      	orrs	r2, r1
 800a66c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00a      	beq.n	800a690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	430a      	orrs	r2, r1
 800a68e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a694:	f003 0302 	and.w	r3, r3, #2
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00a      	beq.n	800a6b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	430a      	orrs	r2, r1
 800a6b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b6:	f003 0304 	and.w	r3, r3, #4
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00a      	beq.n	800a6d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	430a      	orrs	r2, r1
 800a6d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6d8:	f003 0310 	and.w	r3, r3, #16
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00a      	beq.n	800a6f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	430a      	orrs	r2, r1
 800a6f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6fa:	f003 0320 	and.w	r3, r3, #32
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00a      	beq.n	800a718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	430a      	orrs	r2, r1
 800a716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a71c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a720:	2b00      	cmp	r3, #0
 800a722:	d01a      	beq.n	800a75a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	430a      	orrs	r2, r1
 800a738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a73e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a742:	d10a      	bne.n	800a75a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	430a      	orrs	r2, r1
 800a758:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a75e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00a      	beq.n	800a77c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	430a      	orrs	r2, r1
 800a77a:	605a      	str	r2, [r3, #4]
  }
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b098      	sub	sp, #96	@ 0x60
 800a78c:	af02      	add	r7, sp, #8
 800a78e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a798:	f7f8 f900 	bl	800299c <HAL_GetTick>
 800a79c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 0308 	and.w	r3, r3, #8
 800a7a8:	2b08      	cmp	r3, #8
 800a7aa:	d12f      	bne.n	800a80c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7b0:	9300      	str	r3, [sp, #0]
 800a7b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f88e 	bl	800a8dc <UART_WaitOnFlagUntilTimeout>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d022      	beq.n	800a80c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ce:	e853 3f00 	ldrex	r3, [r3]
 800a7d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a7d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7da:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a7ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7ec:	e841 2300 	strex	r3, r2, [r1]
 800a7f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a7f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d1e6      	bne.n	800a7c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2220      	movs	r2, #32
 800a7fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a808:	2303      	movs	r3, #3
 800a80a:	e063      	b.n	800a8d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 0304 	and.w	r3, r3, #4
 800a816:	2b04      	cmp	r3, #4
 800a818:	d149      	bne.n	800a8ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a81a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a822:	2200      	movs	r2, #0
 800a824:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 f857 	bl	800a8dc <UART_WaitOnFlagUntilTimeout>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d03c      	beq.n	800a8ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83c:	e853 3f00 	ldrex	r3, [r3]
 800a840:	623b      	str	r3, [r7, #32]
   return(result);
 800a842:	6a3b      	ldr	r3, [r7, #32]
 800a844:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a848:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	461a      	mov	r2, r3
 800a850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a852:	633b      	str	r3, [r7, #48]	@ 0x30
 800a854:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a856:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a858:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a85a:	e841 2300 	strex	r3, r2, [r1]
 800a85e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1e6      	bne.n	800a834 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	3308      	adds	r3, #8
 800a86c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	e853 3f00 	ldrex	r3, [r3]
 800a874:	60fb      	str	r3, [r7, #12]
   return(result);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f023 0301 	bic.w	r3, r3, #1
 800a87c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	3308      	adds	r3, #8
 800a884:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a886:	61fa      	str	r2, [r7, #28]
 800a888:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88a:	69b9      	ldr	r1, [r7, #24]
 800a88c:	69fa      	ldr	r2, [r7, #28]
 800a88e:	e841 2300 	strex	r3, r2, [r1]
 800a892:	617b      	str	r3, [r7, #20]
   return(result);
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d1e5      	bne.n	800a866 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2220      	movs	r2, #32
 800a89e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	e012      	b.n	800a8d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2220      	movs	r2, #32
 800a8b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2220      	movs	r2, #32
 800a8ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3758      	adds	r7, #88	@ 0x58
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	603b      	str	r3, [r7, #0]
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8ec:	e04f      	b.n	800a98e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f4:	d04b      	beq.n	800a98e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8f6:	f7f8 f851 	bl	800299c <HAL_GetTick>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	1ad3      	subs	r3, r2, r3
 800a900:	69ba      	ldr	r2, [r7, #24]
 800a902:	429a      	cmp	r2, r3
 800a904:	d302      	bcc.n	800a90c <UART_WaitOnFlagUntilTimeout+0x30>
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d101      	bne.n	800a910 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a90c:	2303      	movs	r3, #3
 800a90e:	e04e      	b.n	800a9ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 0304 	and.w	r3, r3, #4
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d037      	beq.n	800a98e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	2b80      	cmp	r3, #128	@ 0x80
 800a922:	d034      	beq.n	800a98e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	2b40      	cmp	r3, #64	@ 0x40
 800a928:	d031      	beq.n	800a98e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	69db      	ldr	r3, [r3, #28]
 800a930:	f003 0308 	and.w	r3, r3, #8
 800a934:	2b08      	cmp	r3, #8
 800a936:	d110      	bne.n	800a95a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2208      	movs	r2, #8
 800a93e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	f000 f920 	bl	800ab86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2208      	movs	r2, #8
 800a94a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e029      	b.n	800a9ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	69db      	ldr	r3, [r3, #28]
 800a960:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a964:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a968:	d111      	bne.n	800a98e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a972:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f000 f906 	bl	800ab86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2220      	movs	r2, #32
 800a97e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a98a:	2303      	movs	r3, #3
 800a98c:	e00f      	b.n	800a9ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	69da      	ldr	r2, [r3, #28]
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	4013      	ands	r3, r2
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	bf0c      	ite	eq
 800a99e:	2301      	moveq	r3, #1
 800a9a0:	2300      	movne	r3, #0
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	79fb      	ldrb	r3, [r7, #7]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d0a0      	beq.n	800a8ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
	...

0800a9b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b096      	sub	sp, #88	@ 0x58
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	88fa      	ldrh	r2, [r7, #6]
 800a9d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2222      	movs	r2, #34	@ 0x22
 800a9e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d02d      	beq.n	800aa4a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9f4:	4a40      	ldr	r2, [pc, #256]	@ (800aaf8 <UART_Start_Receive_DMA+0x140>)
 800a9f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9fe:	4a3f      	ldr	r2, [pc, #252]	@ (800aafc <UART_Start_Receive_DMA+0x144>)
 800aa00:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa08:	4a3d      	ldr	r2, [pc, #244]	@ (800ab00 <UART_Start_Receive_DMA+0x148>)
 800aa0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa12:	2200      	movs	r2, #0
 800aa14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	3324      	adds	r3, #36	@ 0x24
 800aa22:	4619      	mov	r1, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa28:	461a      	mov	r2, r3
 800aa2a:	88fb      	ldrh	r3, [r7, #6]
 800aa2c:	f7fb fb42 	bl	80060b4 <HAL_DMA_Start_IT>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d009      	beq.n	800aa4a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2210      	movs	r2, #16
 800aa3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2220      	movs	r2, #32
 800aa42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800aa46:	2301      	movs	r3, #1
 800aa48:	e051      	b.n	800aaee <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d018      	beq.n	800aa84 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa5a:	e853 3f00 	ldrex	r3, [r3]
 800aa5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa66:	657b      	str	r3, [r7, #84]	@ 0x54
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa72:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa74:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa78:	e841 2300 	strex	r3, r2, [r1]
 800aa7c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800aa7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1e6      	bne.n	800aa52 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	3308      	adds	r3, #8
 800aa8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa8e:	e853 3f00 	ldrex	r3, [r3]
 800aa92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa96:	f043 0301 	orr.w	r3, r3, #1
 800aa9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	3308      	adds	r3, #8
 800aaa2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aaa4:	637a      	str	r2, [r7, #52]	@ 0x34
 800aaa6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aaaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aaac:	e841 2300 	strex	r3, r2, [r1]
 800aab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800aab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1e5      	bne.n	800aa84 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	3308      	adds	r3, #8
 800aabe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	e853 3f00 	ldrex	r3, [r3]
 800aac6:	613b      	str	r3, [r7, #16]
   return(result);
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	3308      	adds	r3, #8
 800aad6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aad8:	623a      	str	r2, [r7, #32]
 800aada:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aadc:	69f9      	ldr	r1, [r7, #28]
 800aade:	6a3a      	ldr	r2, [r7, #32]
 800aae0:	e841 2300 	strex	r3, r2, [r1]
 800aae4:	61bb      	str	r3, [r7, #24]
   return(result);
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1e5      	bne.n	800aab8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3758      	adds	r7, #88	@ 0x58
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	0800ad09 	.word	0x0800ad09
 800aafc:	0800ae35 	.word	0x0800ae35
 800ab00:	0800ae73 	.word	0x0800ae73

0800ab04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b08f      	sub	sp, #60	@ 0x3c
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab12:	6a3b      	ldr	r3, [r7, #32]
 800ab14:	e853 3f00 	ldrex	r3, [r3]
 800ab18:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ab20:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	461a      	mov	r2, r3
 800ab28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab2c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab32:	e841 2300 	strex	r3, r2, [r1]
 800ab36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1e6      	bne.n	800ab0c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	3308      	adds	r3, #8
 800ab44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	e853 3f00 	ldrex	r3, [r3]
 800ab4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ab54:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3308      	adds	r3, #8
 800ab5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab5e:	61ba      	str	r2, [r7, #24]
 800ab60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab62:	6979      	ldr	r1, [r7, #20]
 800ab64:	69ba      	ldr	r2, [r7, #24]
 800ab66:	e841 2300 	strex	r3, r2, [r1]
 800ab6a:	613b      	str	r3, [r7, #16]
   return(result);
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1e5      	bne.n	800ab3e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2220      	movs	r2, #32
 800ab76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ab7a:	bf00      	nop
 800ab7c:	373c      	adds	r7, #60	@ 0x3c
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr

0800ab86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b095      	sub	sp, #84	@ 0x54
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab96:	e853 3f00 	ldrex	r3, [r3]
 800ab9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	461a      	mov	r2, r3
 800abaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abac:	643b      	str	r3, [r7, #64]	@ 0x40
 800abae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800abb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abb4:	e841 2300 	strex	r3, r2, [r1]
 800abb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d1e6      	bne.n	800ab8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	3308      	adds	r3, #8
 800abc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc8:	6a3b      	ldr	r3, [r7, #32]
 800abca:	e853 3f00 	ldrex	r3, [r3]
 800abce:	61fb      	str	r3, [r7, #28]
   return(result);
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800abd6:	f023 0301 	bic.w	r3, r3, #1
 800abda:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	3308      	adds	r3, #8
 800abe2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abe4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800abe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abec:	e841 2300 	strex	r3, r2, [r1]
 800abf0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800abf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d1e3      	bne.n	800abc0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d118      	bne.n	800ac32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	e853 3f00 	ldrex	r3, [r3]
 800ac0c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	f023 0310 	bic.w	r3, r3, #16
 800ac14:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac1e:	61bb      	str	r3, [r7, #24]
 800ac20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac22:	6979      	ldr	r1, [r7, #20]
 800ac24:	69ba      	ldr	r2, [r7, #24]
 800ac26:	e841 2300 	strex	r3, r2, [r1]
 800ac2a:	613b      	str	r3, [r7, #16]
   return(result);
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1e6      	bne.n	800ac00 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2220      	movs	r2, #32
 800ac36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ac46:	bf00      	nop
 800ac48:	3754      	adds	r7, #84	@ 0x54
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr

0800ac52 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b090      	sub	sp, #64	@ 0x40
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac5e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 0320 	and.w	r3, r3, #32
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d137      	bne.n	800acde <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ac6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac70:	2200      	movs	r2, #0
 800ac72:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	3308      	adds	r3, #8
 800ac7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac80:	e853 3f00 	ldrex	r3, [r3]
 800ac84:	623b      	str	r3, [r7, #32]
   return(result);
 800ac86:	6a3b      	ldr	r3, [r7, #32]
 800ac88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ac8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	3308      	adds	r3, #8
 800ac94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac96:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac9e:	e841 2300 	strex	r3, r2, [r1]
 800aca2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1e5      	bne.n	800ac76 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800acaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	e853 3f00 	ldrex	r3, [r3]
 800acb6:	60fb      	str	r3, [r7, #12]
   return(result);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acbe:	637b      	str	r3, [r7, #52]	@ 0x34
 800acc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	461a      	mov	r2, r3
 800acc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acc8:	61fb      	str	r3, [r7, #28]
 800acca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800accc:	69b9      	ldr	r1, [r7, #24]
 800acce:	69fa      	ldr	r2, [r7, #28]
 800acd0:	e841 2300 	strex	r3, r2, [r1]
 800acd4:	617b      	str	r3, [r7, #20]
   return(result);
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d1e6      	bne.n	800acaa <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800acdc:	e002      	b.n	800ace4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800acde:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ace0:	f7ff f9b2 	bl	800a048 <HAL_UART_TxCpltCallback>
}
 800ace4:	bf00      	nop
 800ace6:	3740      	adds	r7, #64	@ 0x40
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f7ff f9ae 	bl	800a05c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad00:	bf00      	nop
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b09c      	sub	sp, #112	@ 0x70
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad14:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0320 	and.w	r3, r3, #32
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d171      	bne.n	800ae08 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ad24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad26:	2200      	movs	r2, #0
 800ad28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad34:	e853 3f00 	ldrex	r3, [r3]
 800ad38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ad3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad40:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	461a      	mov	r2, r3
 800ad48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad4c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ad50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad52:	e841 2300 	strex	r3, r2, [r1]
 800ad56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ad58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d1e6      	bne.n	800ad2c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	3308      	adds	r3, #8
 800ad64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad68:	e853 3f00 	ldrex	r3, [r3]
 800ad6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad70:	f023 0301 	bic.w	r3, r3, #1
 800ad74:	667b      	str	r3, [r7, #100]	@ 0x64
 800ad76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ad7e:	647a      	str	r2, [r7, #68]	@ 0x44
 800ad80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad86:	e841 2300 	strex	r3, r2, [r1]
 800ad8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1e5      	bne.n	800ad5e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	3308      	adds	r3, #8
 800ad98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9c:	e853 3f00 	ldrex	r3, [r3]
 800ada0:	623b      	str	r3, [r7, #32]
   return(result);
 800ada2:	6a3b      	ldr	r3, [r7, #32]
 800ada4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ada8:	663b      	str	r3, [r7, #96]	@ 0x60
 800adaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	3308      	adds	r3, #8
 800adb0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800adb2:	633a      	str	r2, [r7, #48]	@ 0x30
 800adb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800adb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adba:	e841 2300 	strex	r3, r2, [r1]
 800adbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800adc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d1e5      	bne.n	800ad92 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800adc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adc8:	2220      	movs	r2, #32
 800adca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800add0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800add2:	2b01      	cmp	r3, #1
 800add4:	d118      	bne.n	800ae08 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800add6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	e853 3f00 	ldrex	r3, [r3]
 800ade2:	60fb      	str	r3, [r7, #12]
   return(result);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f023 0310 	bic.w	r3, r3, #16
 800adea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800adec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	461a      	mov	r2, r3
 800adf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adf4:	61fb      	str	r3, [r7, #28]
 800adf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf8:	69b9      	ldr	r1, [r7, #24]
 800adfa:	69fa      	ldr	r2, [r7, #28]
 800adfc:	e841 2300 	strex	r3, r2, [r1]
 800ae00:	617b      	str	r3, [r7, #20]
   return(result);
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1e6      	bne.n	800add6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d107      	bne.n	800ae26 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ae20:	f002 f92a 	bl	800d078 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae24:	e002      	b.n	800ae2c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ae26:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ae28:	f7ff f922 	bl	800a070 <HAL_UART_RxCpltCallback>
}
 800ae2c:	bf00      	nop
 800ae2e:	3770      	adds	r7, #112	@ 0x70
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae40:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2201      	movs	r2, #1
 800ae46:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d109      	bne.n	800ae64 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae56:	085b      	lsrs	r3, r3, #1
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	68f8      	ldr	r0, [r7, #12]
 800ae5e:	f002 f90b 	bl	800d078 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae62:	e002      	b.n	800ae6a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f7ff f90d 	bl	800a084 <HAL_UART_RxHalfCpltCallback>
}
 800ae6a:	bf00      	nop
 800ae6c:	3710      	adds	r7, #16
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b086      	sub	sp, #24
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae7e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae86:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae8e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae9a:	2b80      	cmp	r3, #128	@ 0x80
 800ae9c:	d109      	bne.n	800aeb2 <UART_DMAError+0x40>
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	2b21      	cmp	r3, #33	@ 0x21
 800aea2:	d106      	bne.n	800aeb2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800aeac:	6978      	ldr	r0, [r7, #20]
 800aeae:	f7ff fe29 	bl	800ab04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aebc:	2b40      	cmp	r3, #64	@ 0x40
 800aebe:	d109      	bne.n	800aed4 <UART_DMAError+0x62>
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b22      	cmp	r3, #34	@ 0x22
 800aec4:	d106      	bne.n	800aed4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800aece:	6978      	ldr	r0, [r7, #20]
 800aed0:	f7ff fe59 	bl	800ab86 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeda:	f043 0210 	orr.w	r2, r3, #16
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aee4:	6978      	ldr	r0, [r7, #20]
 800aee6:	f7ff f8d7 	bl	800a098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aeea:	bf00      	nop
 800aeec:	3718      	adds	r7, #24
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b084      	sub	sp, #16
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aefe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2200      	movs	r2, #0
 800af04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	f7ff f8c1 	bl	800a098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af16:	bf00      	nop
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b088      	sub	sp, #32
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	e853 3f00 	ldrex	r3, [r3]
 800af32:	60bb      	str	r3, [r7, #8]
   return(result);
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af3a:	61fb      	str	r3, [r7, #28]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	461a      	mov	r2, r3
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	61bb      	str	r3, [r7, #24]
 800af46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af48:	6979      	ldr	r1, [r7, #20]
 800af4a:	69ba      	ldr	r2, [r7, #24]
 800af4c:	e841 2300 	strex	r3, r2, [r1]
 800af50:	613b      	str	r3, [r7, #16]
   return(result);
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d1e6      	bne.n	800af26 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2220      	movs	r2, #32
 800af5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f7ff f86e 	bl	800a048 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af6c:	bf00      	nop
 800af6e:	3720      	adds	r7, #32
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800af90:	bf00      	nop
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800afa4:	bf00      	nop
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b085      	sub	sp, #20
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d101      	bne.n	800afc6 <HAL_UARTEx_DisableFifoMode+0x16>
 800afc2:	2302      	movs	r3, #2
 800afc4:	e027      	b.n	800b016 <HAL_UARTEx_DisableFifoMode+0x66>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2201      	movs	r2, #1
 800afca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2224      	movs	r2, #36	@ 0x24
 800afd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f022 0201 	bic.w	r2, r2, #1
 800afec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aff4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2220      	movs	r2, #32
 800b008:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	3714      	adds	r7, #20
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b084      	sub	sp, #16
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b032:	2b01      	cmp	r3, #1
 800b034:	d101      	bne.n	800b03a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b036:	2302      	movs	r3, #2
 800b038:	e02d      	b.n	800b096 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2201      	movs	r2, #1
 800b03e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2224      	movs	r2, #36	@ 0x24
 800b046:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f022 0201 	bic.w	r2, r2, #1
 800b060:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	683a      	ldr	r2, [r7, #0]
 800b072:	430a      	orrs	r2, r1
 800b074:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 f8a4 	bl	800b1c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2220      	movs	r2, #32
 800b088:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b094:	2300      	movs	r3, #0
}
 800b096:	4618      	mov	r0, r3
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b084      	sub	sp, #16
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d101      	bne.n	800b0b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b0b2:	2302      	movs	r3, #2
 800b0b4:	e02d      	b.n	800b112 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2224      	movs	r2, #36	@ 0x24
 800b0c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f022 0201 	bic.w	r2, r2, #1
 800b0dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	683a      	ldr	r2, [r7, #0]
 800b0ee:	430a      	orrs	r2, r1
 800b0f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f866 	bl	800b1c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2220      	movs	r2, #32
 800b104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b08c      	sub	sp, #48	@ 0x30
 800b11e:	af00      	add	r7, sp, #0
 800b120:	60f8      	str	r0, [r7, #12]
 800b122:	60b9      	str	r1, [r7, #8]
 800b124:	4613      	mov	r3, r2
 800b126:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b12e:	2b20      	cmp	r3, #32
 800b130:	d142      	bne.n	800b1b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d002      	beq.n	800b13e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b138:	88fb      	ldrh	r3, [r7, #6]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d101      	bne.n	800b142 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	e03b      	b.n	800b1ba <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2201      	movs	r2, #1
 800b146:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2200      	movs	r2, #0
 800b14c:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b14e:	88fb      	ldrh	r3, [r7, #6]
 800b150:	461a      	mov	r2, r3
 800b152:	68b9      	ldr	r1, [r7, #8]
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f7ff fc2f 	bl	800a9b8 <UART_Start_Receive_DMA>
 800b15a:	4603      	mov	r3, r0
 800b15c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b160:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b164:	2b00      	cmp	r3, #0
 800b166:	d124      	bne.n	800b1b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d11d      	bne.n	800b1ac <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	2210      	movs	r2, #16
 800b176:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	e853 3f00 	ldrex	r3, [r3]
 800b184:	617b      	str	r3, [r7, #20]
   return(result);
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	f043 0310 	orr.w	r3, r3, #16
 800b18c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	461a      	mov	r2, r3
 800b194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b196:	627b      	str	r3, [r7, #36]	@ 0x24
 800b198:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19a:	6a39      	ldr	r1, [r7, #32]
 800b19c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b19e:	e841 2300 	strex	r3, r2, [r1]
 800b1a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1e6      	bne.n	800b178 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b1aa:	e002      	b.n	800b1b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b1b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b1b6:	e000      	b.n	800b1ba <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b1b8:	2302      	movs	r3, #2
  }
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3730      	adds	r7, #48	@ 0x30
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
	...

0800b1c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d108      	bne.n	800b1e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b1e4:	e031      	b.n	800b24a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b1e6:	2308      	movs	r3, #8
 800b1e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b1ea:	2308      	movs	r3, #8
 800b1ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	0e5b      	lsrs	r3, r3, #25
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	f003 0307 	and.w	r3, r3, #7
 800b1fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	0f5b      	lsrs	r3, r3, #29
 800b206:	b2db      	uxtb	r3, r3
 800b208:	f003 0307 	and.w	r3, r3, #7
 800b20c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b20e:	7bbb      	ldrb	r3, [r7, #14]
 800b210:	7b3a      	ldrb	r2, [r7, #12]
 800b212:	4911      	ldr	r1, [pc, #68]	@ (800b258 <UARTEx_SetNbDataToProcess+0x94>)
 800b214:	5c8a      	ldrb	r2, [r1, r2]
 800b216:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b21a:	7b3a      	ldrb	r2, [r7, #12]
 800b21c:	490f      	ldr	r1, [pc, #60]	@ (800b25c <UARTEx_SetNbDataToProcess+0x98>)
 800b21e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b220:	fb93 f3f2 	sdiv	r3, r3, r2
 800b224:	b29a      	uxth	r2, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b22c:	7bfb      	ldrb	r3, [r7, #15]
 800b22e:	7b7a      	ldrb	r2, [r7, #13]
 800b230:	4909      	ldr	r1, [pc, #36]	@ (800b258 <UARTEx_SetNbDataToProcess+0x94>)
 800b232:	5c8a      	ldrb	r2, [r1, r2]
 800b234:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b238:	7b7a      	ldrb	r2, [r7, #13]
 800b23a:	4908      	ldr	r1, [pc, #32]	@ (800b25c <UARTEx_SetNbDataToProcess+0x98>)
 800b23c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b23e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b242:	b29a      	uxth	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b24a:	bf00      	nop
 800b24c:	3714      	adds	r7, #20
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	080148e0 	.word	0x080148e0
 800b25c:	080148e8 	.word	0x080148e8

0800b260 <goToZeroElecAngle>:
#include "pid.h"
#include "lowpass_filter.h"
#include "focLib.h"

void goToZeroElecAngle(BldcMotor *motor)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
    setTorque(motor, 0, OPEN_LOOP_TORQUE, 0);
 800b268:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800b28c <goToZeroElecAngle+0x2c>
 800b26c:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800b290 <goToZeroElecAngle+0x30>
 800b270:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800b28c <goToZeroElecAngle+0x2c>
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f001 f865 	bl	800c344 <setTorque>
    delay(700);
 800b27a:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800b27e:	f003 fdd1 	bl	800ee24 <delay>
}
 800b282:	bf00      	nop
 800b284:	3708      	adds	r7, #8
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	00000000 	.word	0x00000000
 800b290:	3fc511a3 	.word	0x3fc511a3

0800b294 <alignSensor>:
int alignSensor(BldcMotor *motor)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b08a      	sub	sp, #40	@ 0x28
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
    // setTorque(motor, OPEN_LOOP_TORQUE, 0, _3PI_2);
    // delay(200);
    // encoderUpdate(&motor->magEncoder);
    // float start_angle = motor->magEncoder.fullAngle;
    // printLog("start_angle:%f\n", start_angle);
    for (int i = 0; i <= 500; i++)
 800b29c:	2300      	movs	r3, #0
 800b29e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2a0:	e025      	b.n	800b2ee <alignSensor+0x5a>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800b2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a4:	ee07 3a90 	vmov	s15, r3
 800b2a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2ac:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800b4b4 <alignSensor+0x220>
 800b2b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b2b4:	eddf 6a80 	vldr	s13, [pc, #512]	@ 800b4b8 <alignSensor+0x224>
 800b2b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b2bc:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 800b4bc <alignSensor+0x228>
 800b2c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2c4:	edc7 7a02 	vstr	s15, [r7, #8]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800b2c8:	ed97 1a02 	vldr	s2, [r7, #8]
 800b2cc:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 800b4c0 <alignSensor+0x22c>
 800b2d0:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 800b4c4 <alignSensor+0x230>
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f001 f835 	bl	800c344 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f000 fcf1 	bl	800bcc4 <encoderUpdate>
        delay(2);
 800b2e2:	2002      	movs	r0, #2
 800b2e4:	f003 fd9e 	bl	800ee24 <delay>
    for (int i = 0; i <= 500; i++)
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b2f4:	ddd5      	ble.n	800b2a2 <alignSensor+0xe>
    }
    // encoderUpdate(&motor->magEncoder);

    float mid_angle = motor->magEncoder.fullAngle;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	695b      	ldr	r3, [r3, #20]
 800b2fa:	61fb      	str	r3, [r7, #28]
    printLog("mid_angle:%f\n", mid_angle);
 800b2fc:	69f8      	ldr	r0, [r7, #28]
 800b2fe:	f7f5 f94b 	bl	8000598 <__aeabi_f2d>
 800b302:	4602      	mov	r2, r0
 800b304:	460b      	mov	r3, r1
 800b306:	4870      	ldr	r0, [pc, #448]	@ (800b4c8 <alignSensor+0x234>)
 800b308:	f001 fef6 	bl	800d0f8 <printLog>
    // move one electrical revolution backwards
    for (int i = 500; i >= 0; i--)
 800b30c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800b310:	623b      	str	r3, [r7, #32]
 800b312:	e025      	b.n	800b360 <alignSensor+0xcc>
    {
        float angle = _3PI_2 + _2PI * i / 500.0f;
 800b314:	6a3b      	ldr	r3, [r7, #32]
 800b316:	ee07 3a90 	vmov	s15, r3
 800b31a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b31e:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800b4b4 <alignSensor+0x220>
 800b322:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b326:	eddf 6a64 	vldr	s13, [pc, #400]	@ 800b4b8 <alignSensor+0x224>
 800b32a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b32e:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800b4bc <alignSensor+0x228>
 800b332:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b336:	edc7 7a03 	vstr	s15, [r7, #12]
        setTorque(motor, OPEN_LOOP_TORQUE, 0, angle);
 800b33a:	ed97 1a03 	vldr	s2, [r7, #12]
 800b33e:	eddf 0a60 	vldr	s1, [pc, #384]	@ 800b4c0 <alignSensor+0x22c>
 800b342:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 800b4c4 <alignSensor+0x230>
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 fffc 	bl	800c344 <setTorque>
        encoderUpdate(&motor->magEncoder);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4618      	mov	r0, r3
 800b350:	f000 fcb8 	bl	800bcc4 <encoderUpdate>
        delay(2);
 800b354:	2002      	movs	r0, #2
 800b356:	f003 fd65 	bl	800ee24 <delay>
    for (int i = 500; i >= 0; i--)
 800b35a:	6a3b      	ldr	r3, [r7, #32]
 800b35c:	3b01      	subs	r3, #1
 800b35e:	623b      	str	r3, [r7, #32]
 800b360:	6a3b      	ldr	r3, [r7, #32]
 800b362:	2b00      	cmp	r3, #0
 800b364:	dad6      	bge.n	800b314 <alignSensor+0x80>
    }
    // encoderUpdate(&motor->magEncoder);

    float end_angle = motor->magEncoder.fullAngle;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	695b      	ldr	r3, [r3, #20]
 800b36a:	61bb      	str	r3, [r7, #24]
    printLog("end_angle:%f\n", end_angle);
 800b36c:	69b8      	ldr	r0, [r7, #24]
 800b36e:	f7f5 f913 	bl	8000598 <__aeabi_f2d>
 800b372:	4602      	mov	r2, r0
 800b374:	460b      	mov	r3, r1
 800b376:	4855      	ldr	r0, [pc, #340]	@ (800b4cc <alignSensor+0x238>)
 800b378:	f001 febe 	bl	800d0f8 <printLog>
    // setPhaseVoltage(0, 0, 0);
    delay(200);
 800b37c:	20c8      	movs	r0, #200	@ 0xc8
 800b37e:	f003 fd51 	bl	800ee24 <delay>

    // determine the direction the sensor moved
    float moved = fabsf(mid_angle - end_angle);
 800b382:	ed97 7a07 	vldr	s14, [r7, #28]
 800b386:	edd7 7a06 	vldr	s15, [r7, #24]
 800b38a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b38e:	eef0 7ae7 	vabs.f32	s15, s15
 800b392:	edc7 7a05 	vstr	s15, [r7, #20]
    printLog("moved:%f\n", moved);
 800b396:	6978      	ldr	r0, [r7, #20]
 800b398:	f7f5 f8fe 	bl	8000598 <__aeabi_f2d>
 800b39c:	4602      	mov	r2, r0
 800b39e:	460b      	mov	r3, r1
 800b3a0:	484b      	ldr	r0, [pc, #300]	@ (800b4d0 <alignSensor+0x23c>)
 800b3a2:	f001 fea9 	bl	800d0f8 <printLog>
    if (moved < MIN_ANGLE_DETECT_MOVEMENT)
 800b3a6:	edd7 7a05 	vldr	s15, [r7, #20]
 800b3aa:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800b4d4 <alignSensor+0x240>
 800b3ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3b6:	d504      	bpl.n	800b3c2 <alignSensor+0x12e>
    { // minimum angle to detect movement
        printLog("Failed to notice movement\n");
 800b3b8:	4847      	ldr	r0, [pc, #284]	@ (800b4d8 <alignSensor+0x244>)
 800b3ba:	f001 fe9d 	bl	800d0f8 <printLog>
        return 0; // failed calibration
 800b3be:	2300      	movs	r3, #0
 800b3c0:	e073      	b.n	800b4aa <alignSensor+0x216>
    }
    else if (mid_angle < end_angle)
 800b3c2:	ed97 7a07 	vldr	s14, [r7, #28]
 800b3c6:	edd7 7a06 	vldr	s15, [r7, #24]
 800b3ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d2:	d507      	bpl.n	800b3e4 <alignSensor+0x150>
    {
        printLog("sensor_direction==CCW\n");
 800b3d4:	4841      	ldr	r0, [pc, #260]	@ (800b4dc <alignSensor+0x248>)
 800b3d6:	f001 fe8f 	bl	800d0f8 <printLog>
        motor->magEncoder.direction = CCW;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	22ff      	movs	r2, #255	@ 0xff
 800b3de:	f883 2020 	strb.w	r2, [r3, #32]
 800b3e2:	e006      	b.n	800b3f2 <alignSensor+0x15e>
    }
    else
    {
        printLog("sensor_direction==CW\n");
 800b3e4:	483e      	ldr	r0, [pc, #248]	@ (800b4e0 <alignSensor+0x24c>)
 800b3e6:	f001 fe87 	bl	800d0f8 <printLog>
        motor->magEncoder.direction = CW;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	f883 2020 	strb.w	r2, [r3, #32]
    }
    // check pole pair number
    bool pp_check_result = !(fabsf(moved * motor->pole_pairs - _2PI) > 0.5f); // 0.5f is arbitrary number it can be lower or higher!
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b3f8:	ee07 3a90 	vmov	s15, r3
 800b3fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b400:	edd7 7a05 	vldr	s15, [r7, #20]
 800b404:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b408:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800b4b4 <alignSensor+0x220>
 800b40c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b410:	eef0 7ae7 	vabs.f32	s15, s15
 800b414:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b420:	bfcc      	ite	gt
 800b422:	2301      	movgt	r3, #1
 800b424:	2300      	movle	r3, #0
 800b426:	b2db      	uxtb	r3, r3
 800b428:	f083 0301 	eor.w	r3, r3, #1
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	74fb      	strb	r3, [r7, #19]
    if (pp_check_result == false)
 800b430:	7cfb      	ldrb	r3, [r7, #19]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10d      	bne.n	800b452 <alignSensor+0x1be>
    {
        printLog("PP check: fail - estimated pp: %d\n", (int)(_2PI / moved));
 800b436:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800b4b4 <alignSensor+0x220>
 800b43a:	ed97 7a05 	vldr	s14, [r7, #20]
 800b43e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b446:	ee17 1a90 	vmov	r1, s15
 800b44a:	4826      	ldr	r0, [pc, #152]	@ (800b4e4 <alignSensor+0x250>)
 800b44c:	f001 fe54 	bl	800d0f8 <printLog>
 800b450:	e002      	b.n	800b458 <alignSensor+0x1c4>
    }
    else
    {
        printLog("PP check: OK!\n");
 800b452:	4825      	ldr	r0, [pc, #148]	@ (800b4e8 <alignSensor+0x254>)
 800b454:	f001 fe50 	bl	800d0f8 <printLog>
    }

    // align the electrical phases of the motor and sensor
    // set angle -90(270 = 3PI/2) degrees
    goToZeroElecAngle(motor);
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f7ff ff01 	bl	800b260 <goToZeroElecAngle>
    // read the sensor
    encoderUpdate(&motor->magEncoder);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4618      	mov	r0, r3
 800b462:	f000 fc2f 	bl	800bcc4 <encoderUpdate>
    // get the current zero electric angle
    motor->zeroElectricAngleOffSet = 0;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f04f 0200 	mov.w	r2, #0
 800b46c:	635a      	str	r2, [r3, #52]	@ 0x34
    getElecAngle(motor);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 f840 	bl	800b4f4 <getElecAngle>
    motor->zeroElectricAngleOffSet = motor->angle_el;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	635a      	str	r2, [r3, #52]	@ 0x34
    // zero_electric_angle =  _normalizeAngle(_electricalAngle(sensor_direction*sensor->getAngle(), pole_pairs));

    // encoderUpdate(&motor->magEncoder);
    getElecAngle(motor);
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 f839 	bl	800b4f4 <getElecAngle>
    // motor->zeroElectricAngleOffSet = 0;
    // printLog("[zeroAngleOffset]:%f  [zeroAngle]:%f\r\n", motor->zeroElectricAngleOffSet, motor->angle_el);
    printLog("[zeroAngleOffset]:%f\n", motor->zeroElectricAngleOffSet);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b486:	4618      	mov	r0, r3
 800b488:	f7f5 f886 	bl	8000598 <__aeabi_f2d>
 800b48c:	4602      	mov	r2, r0
 800b48e:	460b      	mov	r3, r1
 800b490:	4816      	ldr	r0, [pc, #88]	@ (800b4ec <alignSensor+0x258>)
 800b492:	f001 fe31 	bl	800d0f8 <printLog>
    printLog("[zeroAngle]:%f\n", motor->angle_el);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7f5 f87c 	bl	8000598 <__aeabi_f2d>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4812      	ldr	r0, [pc, #72]	@ (800b4f0 <alignSensor+0x25c>)
 800b4a6:	f001 fe27 	bl	800d0f8 <printLog>
    // // make sure the angle_el is about zero

    // delay(200);
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3728      	adds	r7, #40	@ 0x28
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	40c90fdb 	.word	0x40c90fdb
 800b4b8:	43fa0000 	.word	0x43fa0000
 800b4bc:	4096cbe4 	.word	0x4096cbe4
 800b4c0:	00000000 	.word	0x00000000
 800b4c4:	3fc511a3 	.word	0x3fc511a3
 800b4c8:	08014730 	.word	0x08014730
 800b4cc:	08014740 	.word	0x08014740
 800b4d0:	08014750 	.word	0x08014750
 800b4d4:	3d7ecfa9 	.word	0x3d7ecfa9
 800b4d8:	0801475c 	.word	0x0801475c
 800b4dc:	08014778 	.word	0x08014778
 800b4e0:	08014790 	.word	0x08014790
 800b4e4:	080147a8 	.word	0x080147a8
 800b4e8:	080147cc 	.word	0x080147cc
 800b4ec:	080147dc 	.word	0x080147dc
 800b4f0:	080147f4 	.word	0x080147f4

0800b4f4 <getElecAngle>:

void getElecAngle(BldcMotor *motor)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
    motor->angle_el = _normalizeAngle(motor->pole_pairs * motor->magEncoder.shaftAngle - motor->zeroElectricAngleOffSet);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b502:	ee07 3a90 	vmov	s15, r3
 800b506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	edd3 7a04 	vldr	s15, [r3, #16]
 800b510:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800b51a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b51e:	eeb0 0a67 	vmov.f32	s0, s15
 800b522:	f000 fd71 	bl	800c008 <_normalizeAngle>
 800b526:	eef0 7a40 	vmov.f32	s15, s0
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
}
 800b530:	bf00      	nop
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <foc>:

void foc(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b088      	sub	sp, #32
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	607a      	str	r2, [r7, #4]

    if (motor->state == MOTOR_CALIBRATE)
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d111      	bne.n	800b572 <foc+0x3a>
    {
        getCurrentOffsets(motor, adc_a, adc_b, 100);
 800b54e:	2364      	movs	r3, #100	@ 0x64
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	68b9      	ldr	r1, [r7, #8]
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	f000 f9af 	bl	800b8b8 <getCurrentOffsets>
        alignSensor(motor);
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f7ff fe9a 	bl	800b294 <alignSensor>
        motor->state = MOTOR_READY;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2201      	movs	r2, #1
 800b564:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        motor->stopPwm();
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800b56e:	4798      	blx	r3
                break;
            }
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
        }
    }
}
 800b570:	e194      	b.n	800b89c <foc+0x364>
        getPhaseCurrents(motor, adc_a, adc_b);
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	68b9      	ldr	r1, [r7, #8]
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f000 fa6e 	bl	800ba58 <getPhaseCurrents>
        getABCurrents(motor);
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f000 fb0d 	bl	800bb9c <getABCurrents>
        getDQCurrents(motor);
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f000 fb30 	bl	800bbe8 <getDQCurrents>
        motor->Iq = lpfOperator(&motor->IqFilter, motor->Iq);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f103 02f4 	add.w	r2, r3, #244	@ 0xf4
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800b594:	eeb0 0a67 	vmov.f32	s0, s15
 800b598:	4610      	mov	r0, r2
 800b59a:	f000 fc2d 	bl	800bdf8 <lpfOperator>
 800b59e:	eef0 7a40 	vmov.f32	s15, s0
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
        motor->Id = lpfOperator(&motor->IdFilter, motor->Id);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800b5b4:	eeb0 0a67 	vmov.f32	s0, s15
 800b5b8:	4610      	mov	r0, r2
 800b5ba:	f000 fc1d 	bl	800bdf8 <lpfOperator>
 800b5be:	eef0 7a40 	vmov.f32	s15, s0
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
        encoderUpdate(&motor->magEncoder);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f000 fb7a 	bl	800bcc4 <encoderUpdate>
        motor->magEncoder.velocity = lpfOperator(&motor->velocityFilter, motor->magEncoder.velocity);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f503 7286 	add.w	r2, r3, #268	@ 0x10c
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	edd3 7a06 	vldr	s15, [r3, #24]
 800b5dc:	eeb0 0a67 	vmov.f32	s0, s15
 800b5e0:	4610      	mov	r0, r2
 800b5e2:	f000 fc09 	bl	800bdf8 <lpfOperator>
 800b5e6:	eef0 7a40 	vmov.f32	s15, s0
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	edc3 7a06 	vstr	s15, [r3, #24]
        getElecAngle(motor);
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f7ff ff7f 	bl	800b4f4 <getElecAngle>
        if (motor->state == MOTOR_READY)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	f000 814d 	beq.w	800b89c <foc+0x364>
        else if (motor->state == MOTOR_START)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b608:	2b02      	cmp	r3, #2
 800b60a:	f040 8147 	bne.w	800b89c <foc+0x364>
            switch (motor->controlType)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800b614:	2b03      	cmp	r3, #3
 800b616:	f200 812f 	bhi.w	800b878 <foc+0x340>
 800b61a:	a201      	add	r2, pc, #4	@ (adr r2, 800b620 <foc+0xe8>)
 800b61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b620:	0800b68d 	.word	0x0800b68d
 800b624:	0800b631 	.word	0x0800b631
 800b628:	0800b6f7 	.word	0x0800b6f7
 800b62c:	0800b7a7 	.word	0x0800b7a7
                motor->target = 50;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	4a9c      	ldr	r2, [pc, #624]	@ (800b8a4 <foc+0x36c>)
 800b634:	631a      	str	r2, [r3, #48]	@ 0x30
                shaftAngle = _normalizeAngle(shaftAngle + motor->target * motor->Ts);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b642:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b646:	4b98      	ldr	r3, [pc, #608]	@ (800b8a8 <foc+0x370>)
 800b648:	edd3 7a00 	vldr	s15, [r3]
 800b64c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b650:	eeb0 0a67 	vmov.f32	s0, s15
 800b654:	f000 fcd8 	bl	800c008 <_normalizeAngle>
 800b658:	eef0 7a40 	vmov.f32	s15, s0
 800b65c:	4b92      	ldr	r3, [pc, #584]	@ (800b8a8 <foc+0x370>)
 800b65e:	edc3 7a00 	vstr	s15, [r3]
                motor->angle_el = _electricalAngle(shaftAngle, motor->pole_pairs);
 800b662:	4b91      	ldr	r3, [pc, #580]	@ (800b8a8 <foc+0x370>)
 800b664:	edd3 7a00 	vldr	s15, [r3]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b66e:	4618      	mov	r0, r3
 800b670:	eeb0 0a67 	vmov.f32	s0, s15
 800b674:	f000 fcfe 	bl	800c074 <_electricalAngle>
 800b678:	eef0 7a40 	vmov.f32	s15, s0
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                motor->Uq = OPEN_LOOP_TORQUE;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	4a89      	ldr	r2, [pc, #548]	@ (800b8ac <foc+0x374>)
 800b686:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                break;
 800b68a:	e0f5      	b.n	800b878 <foc+0x340>
                if (motor->torqueType == VOLTAGE)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b692:	2b00      	cmp	r3, #0
 800b694:	d105      	bne.n	800b6a2 <foc+0x16a>
                    motor->Uq = motor->target;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                break;
 800b6a0:	e0ea      	b.n	800b878 <foc+0x340>
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800b6ae:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b8b0 <foc+0x378>
 800b6b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6b6:	eeb0 0a67 	vmov.f32	s0, s15
 800b6ba:	4610      	mov	r0, r2
 800b6bc:	f000 fd24 	bl	800c108 <pidOperator>
 800b6c0:	eef0 7a40 	vmov.f32	s15, s0
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, motor->target - motor->Iq);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800b6dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6e0:	eeb0 0a67 	vmov.f32	s0, s15
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	f000 fd0f 	bl	800c108 <pidOperator>
 800b6ea:	eef0 7a40 	vmov.f32	s15, s0
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800b6f4:	e0c0      	b.n	800b878 <foc+0x340>
                if (motor->torqueType == VOLTAGE)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d116      	bne.n	800b72e <foc+0x1f6>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	edd3 7a06 	vldr	s15, [r3, #24]
 800b70c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b710:	edc7 7a04 	vstr	s15, [r7, #16]
                    motor->Uq = pidOperator(&motor->velocityPID, velocityErr);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	33ac      	adds	r3, #172	@ 0xac
 800b718:	ed97 0a04 	vldr	s0, [r7, #16]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f000 fcf3 	bl	800c108 <pidOperator>
 800b722:	eef0 7a40 	vmov.f32	s15, s0
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800b72c:	e0a4      	b.n	800b878 <foc+0x340>
                    velocityErr = motor->target - motor->magEncoder.velocity;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	edd3 7a06 	vldr	s15, [r3, #24]
 800b73a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b73e:	edc7 7a04 	vstr	s15, [r7, #16]
                    IqRef = pidOperator(&motor->velocityPID, velocityErr);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	33ac      	adds	r3, #172	@ 0xac
 800b746:	ed97 0a04 	vldr	s0, [r7, #16]
 800b74a:	4618      	mov	r0, r3
 800b74c:	f000 fcdc 	bl	800c108 <pidOperator>
 800b750:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800b760:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800b8b0 <foc+0x378>
 800b764:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b768:	eeb0 0a67 	vmov.f32	s0, s15
 800b76c:	4610      	mov	r0, r2
 800b76e:	f000 fccb 	bl	800c108 <pidOperator>
 800b772:	eef0 7a40 	vmov.f32	s15, s0
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800b788:	ed97 7a05 	vldr	s14, [r7, #20]
 800b78c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b790:	eeb0 0a67 	vmov.f32	s0, s15
 800b794:	4610      	mov	r0, r2
 800b796:	f000 fcb7 	bl	800c108 <pidOperator>
 800b79a:	eef0 7a40 	vmov.f32	s15, s0
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800b7a4:	e068      	b.n	800b878 <foc+0x340>
                if (motor->torqueType == VOLTAGE)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d116      	bne.n	800b7de <foc+0x2a6>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	edd3 7a05 	vldr	s15, [r3, #20]
 800b7bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7c0:	edc7 7a07 	vstr	s15, [r7, #28]
                    motor->Uq = pidOperator(&motor->anglePID, angleErr);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	33d0      	adds	r3, #208	@ 0xd0
 800b7c8:	ed97 0a07 	vldr	s0, [r7, #28]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f000 fc9b 	bl	800c108 <pidOperator>
 800b7d2:	eef0 7a40 	vmov.f32	s15, s0
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800b7dc:	e04b      	b.n	800b876 <foc+0x33e>
                    angleErr = motor->target - motor->magEncoder.fullAngle;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	edd3 7a05 	vldr	s15, [r3, #20]
 800b7ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7ee:	edc7 7a07 	vstr	s15, [r7, #28]
                    velocityRef = pidOperator(&motor->anglePID, angleErr);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	33d0      	adds	r3, #208	@ 0xd0
 800b7f6:	ed97 0a07 	vldr	s0, [r7, #28]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f000 fc84 	bl	800c108 <pidOperator>
 800b800:	ed87 0a06 	vstr	s0, [r7, #24]
                    IqRef = pidOperator(&motor->velocityPID, velocityRef - motor->magEncoder.velocity);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	edd3 7a06 	vldr	s15, [r3, #24]
 800b810:	ed97 7a06 	vldr	s14, [r7, #24]
 800b814:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b818:	eeb0 0a67 	vmov.f32	s0, s15
 800b81c:	4610      	mov	r0, r2
 800b81e:	f000 fc73 	bl	800c108 <pidOperator>
 800b822:	ed87 0a05 	vstr	s0, [r7, #20]
                    motor->Ud = pidOperator(&motor->pidId, 0 - motor->Id);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800b832:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800b8b0 <foc+0x378>
 800b836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b83a:	eeb0 0a67 	vmov.f32	s0, s15
 800b83e:	4610      	mov	r0, r2
 800b840:	f000 fc62 	bl	800c108 <pidOperator>
 800b844:	eef0 7a40 	vmov.f32	s15, s0
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
                    motor->Uq = pidOperator(&motor->pidIq, IqRef - motor->Iq);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800b85a:	ed97 7a05 	vldr	s14, [r7, #20]
 800b85e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b862:	eeb0 0a67 	vmov.f32	s0, s15
 800b866:	4610      	mov	r0, r2
 800b868:	f000 fc4e 	bl	800c108 <pidOperator>
 800b86c:	eef0 7a40 	vmov.f32	s15, s0
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
                break;
 800b876:	bf00      	nop
            setTorque(motor, motor->Uq, motor->Ud, motor->angle_el);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800b88a:	eeb0 1a66 	vmov.f32	s2, s13
 800b88e:	eef0 0a47 	vmov.f32	s1, s14
 800b892:	eeb0 0a67 	vmov.f32	s0, s15
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f000 fd54 	bl	800c344 <setTorque>
}
 800b89c:	bf00      	nop
 800b89e:	3720      	adds	r7, #32
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	42480000 	.word	0x42480000
 800b8a8:	2000080c 	.word	0x2000080c
 800b8ac:	3fc511a3 	.word	0x3fc511a3
	...

0800b8b8 <getCurrentOffsets>:
#include "math_utils.h"
#include "focLib.h"

// Function finding zero offsets of the ADC
void getCurrentOffsets(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b, uint32_t rounds)
{
 800b8b8:	b5b0      	push	{r4, r5, r7, lr}
 800b8ba:	b086      	sub	sp, #24
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
 800b8c4:	603b      	str	r3, [r7, #0]
    // find adc offset = zero current voltage
    motor->offset_ia = 0;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f04f 0200 	mov.w	r2, #0
 800b8cc:	641a      	str	r2, [r3, #64]	@ 0x40
    motor->offset_ib = 0;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f04f 0200 	mov.w	r2, #0
 800b8d4:	645a      	str	r2, [r3, #68]	@ 0x44
    // read the adc voltage  times ( arbitrary number )
    for (int i = 0; i < rounds; i++)
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	617b      	str	r3, [r7, #20]
 800b8da:	e076      	b.n	800b9ca <getCurrentOffsets+0x112>
    {
        motor->offset_ia += ADC_2_CURRENT(adc_a);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7f4 fe59 	bl	8000598 <__aeabi_f2d>
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	460d      	mov	r5, r1
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	ee07 3a90 	vmov	s15, r3
 800b8f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8f4:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800ba48 <getCurrentOffsets+0x190>
 800b8f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8fc:	ee17 0a90 	vmov	r0, s15
 800b900:	f7f4 fe4a 	bl	8000598 <__aeabi_f2d>
 800b904:	a34c      	add	r3, pc, #304	@ (adr r3, 800ba38 <getCurrentOffsets+0x180>)
 800b906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90a:	f7f4 ffc7 	bl	800089c <__aeabi_ddiv>
 800b90e:	4602      	mov	r2, r0
 800b910:	460b      	mov	r3, r1
 800b912:	4610      	mov	r0, r2
 800b914:	4619      	mov	r1, r3
 800b916:	a34a      	add	r3, pc, #296	@ (adr r3, 800ba40 <getCurrentOffsets+0x188>)
 800b918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91c:	f7f4 ffbe 	bl	800089c <__aeabi_ddiv>
 800b920:	4602      	mov	r2, r0
 800b922:	460b      	mov	r3, r1
 800b924:	4610      	mov	r0, r2
 800b926:	4619      	mov	r1, r3
 800b928:	f04f 0200 	mov.w	r2, #0
 800b92c:	4b47      	ldr	r3, [pc, #284]	@ (800ba4c <getCurrentOffsets+0x194>)
 800b92e:	f7f4 ffb5 	bl	800089c <__aeabi_ddiv>
 800b932:	4602      	mov	r2, r0
 800b934:	460b      	mov	r3, r1
 800b936:	4620      	mov	r0, r4
 800b938:	4629      	mov	r1, r5
 800b93a:	f7f4 fccf 	bl	80002dc <__adddf3>
 800b93e:	4602      	mov	r2, r0
 800b940:	460b      	mov	r3, r1
 800b942:	4610      	mov	r0, r2
 800b944:	4619      	mov	r1, r3
 800b946:	f7f5 f977 	bl	8000c38 <__aeabi_d2f>
 800b94a:	4602      	mov	r2, r0
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	641a      	str	r2, [r3, #64]	@ 0x40
        motor->offset_ib += ADC_2_CURRENT(adc_b);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b954:	4618      	mov	r0, r3
 800b956:	f7f4 fe1f 	bl	8000598 <__aeabi_f2d>
 800b95a:	4604      	mov	r4, r0
 800b95c:	460d      	mov	r5, r1
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	ee07 3a90 	vmov	s15, r3
 800b964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b968:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800ba48 <getCurrentOffsets+0x190>
 800b96c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b970:	ee17 0a90 	vmov	r0, s15
 800b974:	f7f4 fe10 	bl	8000598 <__aeabi_f2d>
 800b978:	a32f      	add	r3, pc, #188	@ (adr r3, 800ba38 <getCurrentOffsets+0x180>)
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	f7f4 ff8d 	bl	800089c <__aeabi_ddiv>
 800b982:	4602      	mov	r2, r0
 800b984:	460b      	mov	r3, r1
 800b986:	4610      	mov	r0, r2
 800b988:	4619      	mov	r1, r3
 800b98a:	a32d      	add	r3, pc, #180	@ (adr r3, 800ba40 <getCurrentOffsets+0x188>)
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	f7f4 ff84 	bl	800089c <__aeabi_ddiv>
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	4610      	mov	r0, r2
 800b99a:	4619      	mov	r1, r3
 800b99c:	f04f 0200 	mov.w	r2, #0
 800b9a0:	4b2a      	ldr	r3, [pc, #168]	@ (800ba4c <getCurrentOffsets+0x194>)
 800b9a2:	f7f4 ff7b 	bl	800089c <__aeabi_ddiv>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	4629      	mov	r1, r5
 800b9ae:	f7f4 fc95 	bl	80002dc <__adddf3>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	4610      	mov	r0, r2
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	f7f5 f93d 	bl	8000c38 <__aeabi_d2f>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	645a      	str	r2, [r3, #68]	@ 0x44
    for (int i = 0; i < rounds; i++)
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	617b      	str	r3, [r7, #20]
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	683a      	ldr	r2, [r7, #0]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d884      	bhi.n	800b8dc <getCurrentOffsets+0x24>
    }
    // calculate the mean offsets
    motor->offset_ia = motor->offset_ia / rounds;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	ee07 3a90 	vmov	s15, r3
 800b9de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b9e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    motor->offset_ib = motor->offset_ib / rounds;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	ee07 3a90 	vmov	s15, r3
 800b9f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b9fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    // printLog("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    // printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
    printLog("[offset_ia]:%f\r\n", motor->offset_ia);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7f4 fdc4 	bl	8000598 <__aeabi_f2d>
 800ba10:	4602      	mov	r2, r0
 800ba12:	460b      	mov	r3, r1
 800ba14:	480e      	ldr	r0, [pc, #56]	@ (800ba50 <getCurrentOffsets+0x198>)
 800ba16:	f001 fb6f 	bl	800d0f8 <printLog>
    printLog("[offset_ib]:%f\r\n", motor->offset_ib);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7f4 fdba 	bl	8000598 <__aeabi_f2d>
 800ba24:	4602      	mov	r2, r0
 800ba26:	460b      	mov	r3, r1
 800ba28:	480a      	ldr	r0, [pc, #40]	@ (800ba54 <getCurrentOffsets+0x19c>)
 800ba2a:	f001 fb65 	bl	800d0f8 <printLog>
    // _dbg_printf("[offset_ia]:%f  [offset_ib]:%f\r\n", motor->offset_ia, motor->offset_ib);
}
 800ba2e:	bf00      	nop
 800ba30:	3718      	adds	r7, #24
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bdb0      	pop	{r4, r5, r7, pc}
 800ba36:	bf00      	nop
 800ba38:	00000000 	.word	0x00000000
 800ba3c:	40affe00 	.word	0x40affe00
 800ba40:	40000000 	.word	0x40000000
 800ba44:	3f847ae1 	.word	0x3f847ae1
 800ba48:	40533333 	.word	0x40533333
 800ba4c:	40240000 	.word	0x40240000
 800ba50:	08014804 	.word	0x08014804
 800ba54:	08014818 	.word	0x08014818

0800ba58 <getPhaseCurrents>:

// read all three phase currents (if possible 2 or 3)
void getPhaseCurrents(BldcMotor *motor, uint32_t adc_a, uint32_t adc_b)
{
 800ba58:	b5b0      	push	{r4, r5, r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	60b9      	str	r1, [r7, #8]
 800ba62:	607a      	str	r2, [r7, #4]
    motor->Ia = ADC_2_CURRENT(adc_a) - motor->offset_ia; // amps
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	ee07 3a90 	vmov	s15, r3
 800ba6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba6e:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800bb90 <getPhaseCurrents+0x138>
 800ba72:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba76:	ee17 0a90 	vmov	r0, s15
 800ba7a:	f7f4 fd8d 	bl	8000598 <__aeabi_f2d>
 800ba7e:	a340      	add	r3, pc, #256	@ (adr r3, 800bb80 <getPhaseCurrents+0x128>)
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	f7f4 ff0a 	bl	800089c <__aeabi_ddiv>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	4610      	mov	r0, r2
 800ba8e:	4619      	mov	r1, r3
 800ba90:	a33d      	add	r3, pc, #244	@ (adr r3, 800bb88 <getPhaseCurrents+0x130>)
 800ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba96:	f7f4 ff01 	bl	800089c <__aeabi_ddiv>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	4610      	mov	r0, r2
 800baa0:	4619      	mov	r1, r3
 800baa2:	f04f 0200 	mov.w	r2, #0
 800baa6:	4b3b      	ldr	r3, [pc, #236]	@ (800bb94 <getPhaseCurrents+0x13c>)
 800baa8:	f7f4 fef8 	bl	800089c <__aeabi_ddiv>
 800baac:	4602      	mov	r2, r0
 800baae:	460b      	mov	r3, r1
 800bab0:	4614      	mov	r4, r2
 800bab2:	461d      	mov	r5, r3
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bab8:	4618      	mov	r0, r3
 800baba:	f7f4 fd6d 	bl	8000598 <__aeabi_f2d>
 800babe:	4602      	mov	r2, r0
 800bac0:	460b      	mov	r3, r1
 800bac2:	4620      	mov	r0, r4
 800bac4:	4629      	mov	r1, r5
 800bac6:	f7f4 fc07 	bl	80002d8 <__aeabi_dsub>
 800baca:	4602      	mov	r2, r0
 800bacc:	460b      	mov	r3, r1
 800bace:	4610      	mov	r0, r2
 800bad0:	4619      	mov	r1, r3
 800bad2:	f7f5 f8b1 	bl	8000c38 <__aeabi_d2f>
 800bad6:	4602      	mov	r2, r0
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	649a      	str	r2, [r3, #72]	@ 0x48
    motor->Ic = ADC_2_CURRENT(adc_b) - motor->offset_ib;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	ee07 3a90 	vmov	s15, r3
 800bae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bae6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800bb90 <getPhaseCurrents+0x138>
 800baea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800baee:	ee17 0a90 	vmov	r0, s15
 800baf2:	f7f4 fd51 	bl	8000598 <__aeabi_f2d>
 800baf6:	a322      	add	r3, pc, #136	@ (adr r3, 800bb80 <getPhaseCurrents+0x128>)
 800baf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafc:	f7f4 fece 	bl	800089c <__aeabi_ddiv>
 800bb00:	4602      	mov	r2, r0
 800bb02:	460b      	mov	r3, r1
 800bb04:	4610      	mov	r0, r2
 800bb06:	4619      	mov	r1, r3
 800bb08:	a31f      	add	r3, pc, #124	@ (adr r3, 800bb88 <getPhaseCurrents+0x130>)
 800bb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0e:	f7f4 fec5 	bl	800089c <__aeabi_ddiv>
 800bb12:	4602      	mov	r2, r0
 800bb14:	460b      	mov	r3, r1
 800bb16:	4610      	mov	r0, r2
 800bb18:	4619      	mov	r1, r3
 800bb1a:	f04f 0200 	mov.w	r2, #0
 800bb1e:	4b1d      	ldr	r3, [pc, #116]	@ (800bb94 <getPhaseCurrents+0x13c>)
 800bb20:	f7f4 febc 	bl	800089c <__aeabi_ddiv>
 800bb24:	4602      	mov	r2, r0
 800bb26:	460b      	mov	r3, r1
 800bb28:	4614      	mov	r4, r2
 800bb2a:	461d      	mov	r5, r3
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb30:	4618      	mov	r0, r3
 800bb32:	f7f4 fd31 	bl	8000598 <__aeabi_f2d>
 800bb36:	4602      	mov	r2, r0
 800bb38:	460b      	mov	r3, r1
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	4629      	mov	r1, r5
 800bb3e:	f7f4 fbcb 	bl	80002d8 <__aeabi_dsub>
 800bb42:	4602      	mov	r2, r0
 800bb44:	460b      	mov	r3, r1
 800bb46:	4610      	mov	r0, r2
 800bb48:	4619      	mov	r1, r3
 800bb4a:	f7f5 f875 	bl	8000c38 <__aeabi_d2f>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	651a      	str	r2, [r3, #80]	@ 0x50
    motor->Ib = 0 - motor->Ia - motor->Ic;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800bb5a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800bb98 <getPhaseCurrents+0x140>
 800bb5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800bb68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
}
 800bb72:	bf00      	nop
 800bb74:	3710      	adds	r7, #16
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bdb0      	pop	{r4, r5, r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	f3af 8000 	nop.w
 800bb80:	00000000 	.word	0x00000000
 800bb84:	40affe00 	.word	0x40affe00
 800bb88:	40000000 	.word	0x40000000
 800bb8c:	3f847ae1 	.word	0x3f847ae1
 800bb90:	40533333 	.word	0x40533333
 800bb94:	40240000 	.word	0x40240000
 800bb98:	00000000 	.word	0x00000000

0800bb9c <getABCurrents>:
// Ibeta = 1/sqrt(3) * Ia + 1/sqrt(3) * 2Ib
/*============================================================================*/
//   calculating Alpha Beta currents from phase currents
//   - function calculating Clarke transform of the phase currents
void getABCurrents(BldcMotor *motor)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
    motor->Ialpha = motor->Ia;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	655a      	str	r2, [r3, #84]	@ 0x54
    motor->Ibeta = _1_SQRT3 * motor->Ia + _2_SQRT3 * motor->Ib;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800bbb2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800bbe0 <getABCurrents+0x44>
 800bbb6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800bbc0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800bbe4 <getABCurrents+0x48>
 800bbc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bbc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
}
 800bbd2:	bf00      	nop
 800bbd4:	370c      	adds	r7, #12
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr
 800bbde:	bf00      	nop
 800bbe0:	3f13cd3a 	.word	0x3f13cd3a
 800bbe4:	3f93cd3a 	.word	0x3f93cd3a

0800bbe8 <getDQCurrents>:
/*============================================================================*/
// function used with the foc algorihtm
//   calculating D and Q currents from Alpha Beta currents and electrical angle
//   - function calculating Clarke transform of the phase currents
void getDQCurrents(BldcMotor *motor)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
    float ct;
    float st;
    _sincos(motor->angle_el, &st, &ct);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800bbf6:	f107 020c 	add.w	r2, r7, #12
 800bbfa:	f107 0308 	add.w	r3, r7, #8
 800bbfe:	4611      	mov	r1, r2
 800bc00:	4618      	mov	r0, r3
 800bc02:	eeb0 0a67 	vmov.f32	s0, s15
 800bc06:	f000 f9df 	bl	800bfc8 <_sincos>
    motor->Id = motor->Ialpha * ct + motor->Ibeta * st;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800bc10:	edd7 7a03 	vldr	s15, [r7, #12]
 800bc14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800bc1e:	edd7 7a02 	vldr	s15, [r7, #8]
 800bc22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc26:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
    motor->Iq = motor->Ibeta * ct - motor->Ialpha * st;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 800bc36:	edd7 7a03 	vldr	s15, [r7, #12]
 800bc3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800bc44:	edd7 7a02 	vldr	s15, [r7, #8]
 800bc48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
 800bc56:	bf00      	nop
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <encoderInit>:

#include "encoder.h"
#include "math_utils.h"
#include "focLib.h"
void encoderInit(MagEncoder *encoder, float _Ts, float (*_getRawAngle)(void), Direction _direction)
{
 800bc5e:	b480      	push	{r7}
 800bc60:	b085      	sub	sp, #20
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	60f8      	str	r0, [r7, #12]
 800bc66:	ed87 0a02 	vstr	s0, [r7, #8]
 800bc6a:	6079      	str	r1, [r7, #4]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	70fb      	strb	r3, [r7, #3]
    encoder->angle_prev = 0;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f04f 0200 	mov.w	r2, #0
 800bc76:	601a      	str	r2, [r3, #0]
    encoder->vel_angle_prev = 0;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f04f 0200 	mov.w	r2, #0
 800bc7e:	605a      	str	r2, [r3, #4]
    encoder->full_rotations = 0;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2200      	movs	r2, #0
 800bc84:	609a      	str	r2, [r3, #8]
    encoder->vel_full_rotations = 0;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	60da      	str	r2, [r3, #12]
    encoder->shaftAngle = 0;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f04f 0200 	mov.w	r2, #0
 800bc92:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = 0;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f04f 0200 	mov.w	r2, #0
 800bc9a:	615a      	str	r2, [r3, #20]
    encoder->velocity = 0;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f04f 0200 	mov.w	r2, #0
 800bca2:	619a      	str	r2, [r3, #24]
    encoder->Ts = _Ts;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	61da      	str	r2, [r3, #28]
    encoder->getRawAngle = _getRawAngle;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	625a      	str	r2, [r3, #36]	@ 0x24
    encoder->direction = _direction;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	78fa      	ldrb	r2, [r7, #3]
 800bcb4:	f883 2020 	strb.w	r2, [r3, #32]
}
 800bcb8:	bf00      	nop
 800bcba:	3714      	adds	r7, #20
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <encoderUpdate>:

void encoderUpdate(MagEncoder *encoder)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
    float val = encoder->getRawAngle() * encoder->direction;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcd0:	4798      	blx	r3
 800bcd2:	eeb0 7a40 	vmov.f32	s14, s0
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800bcdc:	ee07 3a90 	vmov	s15, r3
 800bce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bce8:	edc7 7a03 	vstr	s15, [r7, #12]

    float d_angle = val - encoder->angle_prev;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	edd3 7a00 	vldr	s15, [r3]
 800bcf2:	ed97 7a03 	vldr	s14, [r7, #12]
 800bcf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcfa:	edc7 7a02 	vstr	s15, [r7, #8]
    // 圈数检测
    if (fabsf(d_angle) > (0.8f * _2PI))
 800bcfe:	edd7 7a02 	vldr	s15, [r7, #8]
 800bd02:	eef0 7ae7 	vabs.f32	s15, s15
 800bd06:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800bdc0 <encoderUpdate+0xfc>
 800bd0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd12:	dd0f      	ble.n	800bd34 <encoderUpdate+0x70>
        encoder->full_rotations += (d_angle > 0) ? -1 : 1;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	edd7 7a02 	vldr	s15, [r7, #8]
 800bd1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd24:	dd02      	ble.n	800bd2c <encoderUpdate+0x68>
 800bd26:	f04f 32ff 	mov.w	r2, #4294967295
 800bd2a:	e000      	b.n	800bd2e <encoderUpdate+0x6a>
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	441a      	add	r2, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	609a      	str	r2, [r3, #8]

    // angle
    encoder->angle_prev = val;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	601a      	str	r2, [r3, #0]
    encoder->shaftAngle = val;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	611a      	str	r2, [r3, #16]
    encoder->fullAngle = (float)encoder->full_rotations * _2PI + encoder->angle_prev;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	ee07 3a90 	vmov	s15, r3
 800bd48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd4c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800bdc4 <encoderUpdate+0x100>
 800bd50:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	edd3 7a00 	vldr	s15, [r3]
 800bd5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	edc3 7a05 	vstr	s15, [r3, #20]

    // 速度计算
    val = ((float)(encoder->full_rotations - encoder->vel_full_rotations) * _2PI + (encoder->angle_prev - encoder->vel_angle_prev)) / encoder->Ts;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	689a      	ldr	r2, [r3, #8]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	ee07 3a90 	vmov	s15, r3
 800bd72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd76:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800bdc4 <encoderUpdate+0x100>
 800bd7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	edd3 6a00 	vldr	s13, [r3]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	edd3 7a01 	vldr	s15, [r3, #4]
 800bd8a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800bd8e:	ee77 6a27 	vadd.f32	s13, s14, s15
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	ed93 7a07 	vldr	s14, [r3, #28]
 800bd98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd9c:	edc7 7a03 	vstr	s15, [r7, #12]
    // 保存变量以待将来使用
    encoder->vel_angle_prev = encoder->angle_prev;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	605a      	str	r2, [r3, #4]
    encoder->vel_full_rotations = encoder->full_rotations;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	689a      	ldr	r2, [r3, #8]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	60da      	str	r2, [r3, #12]
    encoder->velocity = val;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	68fa      	ldr	r2, [r7, #12]
 800bdb4:	619a      	str	r2, [r3, #24]
}
 800bdb6:	bf00      	nop
 800bdb8:	3710      	adds	r7, #16
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	40a0d97c 	.word	0x40a0d97c
 800bdc4:	40c90fdb 	.word	0x40c90fdb

0800bdc8 <lpfInit>:
#include "lowpass_filter.h"

void lpfInit(LowPassFilter *filter, const float _Tf, const float _dt)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	ed87 0a02 	vstr	s0, [r7, #8]
 800bdd4:	edc7 0a01 	vstr	s1, [r7, #4]
    filter->Tf = _Tf;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	601a      	str	r2, [r3, #0]
    filter->dt = _dt;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	605a      	str	r2, [r3, #4]
    filter->y_prev = 0;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f04f 0200 	mov.w	r2, #0
 800bdea:	609a      	str	r2, [r3, #8]
}
 800bdec:	bf00      	nop
 800bdee:	3714      	adds	r7, #20
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <lpfOperator>:

float lpfOperator(LowPassFilter *filter, float x)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	ed87 0a00 	vstr	s0, [r7]

    float alpha = filter->Tf / (filter->Tf + filter->dt);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	edd3 6a00 	vldr	s13, [r3]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	ed93 7a00 	vldr	s14, [r3]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	edd3 7a01 	vldr	s15, [r3, #4]
 800be16:	ee37 7a27 	vadd.f32	s14, s14, s15
 800be1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be1e:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha * filter->y_prev + (1.0f - alpha) * x;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	ed93 7a02 	vldr	s14, [r3, #8]
 800be28:	edd7 7a03 	vldr	s15, [r7, #12]
 800be2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be34:	edd7 7a03 	vldr	s15, [r7, #12]
 800be38:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800be3c:	edd7 7a00 	vldr	s15, [r7]
 800be40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be44:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be48:	edc7 7a02 	vstr	s15, [r7, #8]
    filter->y_prev = y;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	609a      	str	r2, [r3, #8]

    return y;
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	ee07 3a90 	vmov	s15, r3
}
 800be58:	eeb0 0a67 	vmov.f32	s0, s15
 800be5c:	3714      	adds	r7, #20
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr
	...

0800be68 <_sin>:
#include "focLib.h"
// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b086      	sub	sp, #24
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0, 804, 1608, 2411, 3212, 4011, 4808, 5602, 6393, 7180, 7962, 8740, 9512, 10279, 11039, 11793, 12540, 13279, 14010, 14733, 15447, 16151, 16846, 17531, 18205, 18868, 19520, 20160, 20788, 21403, 22006, 22595, 23170, 23732, 24279, 24812, 25330, 25833, 26320, 26791, 27246, 27684, 28106, 28511, 28899, 29269, 29622, 29957, 30274, 30572, 30853, 31114, 31357, 31581, 31786, 31972, 32138, 32286, 32413, 32522, 32610, 32679, 32729, 32758, 32768};
  unsigned int i = (unsigned int)(a * (64 * 4 * 256.0 / _2PI));
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f7f4 fb90 	bl	8000598 <__aeabi_f2d>
 800be78:	a339      	add	r3, pc, #228	@ (adr r3, 800bf60 <_sin+0xf8>)
 800be7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7e:	f7f4 fbe3 	bl	8000648 <__aeabi_dmul>
 800be82:	4602      	mov	r2, r0
 800be84:	460b      	mov	r3, r1
 800be86:	4610      	mov	r0, r2
 800be88:	4619      	mov	r1, r3
 800be8a:	f7f4 feb5 	bl	8000bf8 <__aeabi_d2uiz>
 800be8e:	4603      	mov	r3, r0
 800be90:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	b2db      	uxtb	r3, r3
 800be96:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	0a1b      	lsrs	r3, r3, #8
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2b3f      	cmp	r3, #63	@ 0x3f
 800bea4:	d80b      	bhi.n	800bebe <_sin+0x56>
  {
    t1 = sine_array[i];
 800bea6:	4a2c      	ldr	r2, [pc, #176]	@ (800bf58 <_sin+0xf0>)
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800beae:	617b      	str	r3, [r7, #20]
    t2 = sine_array[i + 1];
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	3301      	adds	r3, #1
 800beb4:	4a28      	ldr	r2, [pc, #160]	@ (800bf58 <_sin+0xf0>)
 800beb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800beba:	613b      	str	r3, [r7, #16]
 800bebc:	e033      	b.n	800bf26 <_sin+0xbe>
  }
  else if (i < 128)
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2b7f      	cmp	r3, #127	@ 0x7f
 800bec2:	d80e      	bhi.n	800bee2 <_sin+0x7a>
  {
    t1 = sine_array[128 - i];
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800beca:	4a23      	ldr	r2, [pc, #140]	@ (800bf58 <_sin+0xf0>)
 800becc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bed0:	617b      	str	r3, [r7, #20]
    t2 = sine_array[127 - i];
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800bed8:	4a1f      	ldr	r2, [pc, #124]	@ (800bf58 <_sin+0xf0>)
 800beda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bede:	613b      	str	r3, [r7, #16]
 800bee0:	e021      	b.n	800bf26 <_sin+0xbe>
  }
  else if (i < 192)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2bbf      	cmp	r3, #191	@ 0xbf
 800bee6:	d80e      	bhi.n	800bf06 <_sin+0x9e>
  {
    t1 = -sine_array[-128 + i];
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	3b80      	subs	r3, #128	@ 0x80
 800beec:	4a1a      	ldr	r2, [pc, #104]	@ (800bf58 <_sin+0xf0>)
 800beee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bef2:	425b      	negs	r3, r3
 800bef4:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[-127 + i];
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	3b7f      	subs	r3, #127	@ 0x7f
 800befa:	4a17      	ldr	r2, [pc, #92]	@ (800bf58 <_sin+0xf0>)
 800befc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf00:	425b      	negs	r3, r3
 800bf02:	613b      	str	r3, [r7, #16]
 800bf04:	e00f      	b.n	800bf26 <_sin+0xbe>
  }
  else
  {
    t1 = -sine_array[256 - i];
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800bf0c:	4a12      	ldr	r2, [pc, #72]	@ (800bf58 <_sin+0xf0>)
 800bf0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf12:	425b      	negs	r3, r3
 800bf14:	617b      	str	r3, [r7, #20]
    t2 = -sine_array[255 - i];
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800bf1c:	4a0e      	ldr	r2, [pc, #56]	@ (800bf58 <_sin+0xf0>)
 800bf1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf22:	425b      	negs	r3, r3
 800bf24:	613b      	str	r3, [r7, #16]
  }
  return (1.0f / 32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 800bf26:	693a      	ldr	r2, [r7, #16]
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	1ad3      	subs	r3, r2, r3
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	fb02 f303 	mul.w	r3, r2, r3
 800bf32:	121a      	asrs	r2, r3, #8
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	4413      	add	r3, r2
 800bf38:	ee07 3a90 	vmov	s15, r3
 800bf3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf40:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800bf5c <_sin+0xf4>
 800bf44:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800bf48:	eeb0 0a67 	vmov.f32	s0, s15
 800bf4c:	3718      	adds	r7, #24
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	f3af 8000 	nop.w
 800bf58:	2000000c 	.word	0x2000000c
 800bf5c:	38000000 	.word	0x38000000
 800bf60:	6446f9b4 	.word	0x6446f9b4
 800bf64:	40c45f30 	.word	0x40c45f30

0800bf68 <_cos>:
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 800bf72:	edd7 7a01 	vldr	s15, [r7, #4]
 800bf76:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800bfc0 <_cos+0x58>
 800bf7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf7e:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800bf82:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf86:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800bfc4 <_cos+0x5c>
 800bf8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf92:	dd06      	ble.n	800bfa2 <_cos+0x3a>
 800bf94:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf98:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800bfc4 <_cos+0x5c>
 800bf9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bfa0:	e001      	b.n	800bfa6 <_cos+0x3e>
 800bfa2:	edd7 7a03 	vldr	s15, [r7, #12]
 800bfa6:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800bfaa:	ed97 0a03 	vldr	s0, [r7, #12]
 800bfae:	f7ff ff5b 	bl	800be68 <_sin>
 800bfb2:	eef0 7a40 	vmov.f32	s15, s0
}
 800bfb6:	eeb0 0a67 	vmov.f32	s0, s15
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	3fc90fdb 	.word	0x3fc90fdb
 800bfc4:	40c90fdb 	.word	0x40c90fdb

0800bfc8 <_sincos>:

__attribute__((weak)) void _sincos(float a, float *s, float *c)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	ed87 0a03 	vstr	s0, [r7, #12]
 800bfd2:	60b8      	str	r0, [r7, #8]
 800bfd4:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800bfd6:	ed97 0a03 	vldr	s0, [r7, #12]
 800bfda:	f7ff ff45 	bl	800be68 <_sin>
 800bfde:	eef0 7a40 	vmov.f32	s15, s0
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 800bfe8:	ed97 0a03 	vldr	s0, [r7, #12]
 800bfec:	f7ff ffbc 	bl	800bf68 <_cos>
 800bff0:	eef0 7a40 	vmov.f32	s15, s0
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	edc3 7a00 	vstr	s15, [r3]
}
 800bffa:	bf00      	nop
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	0000      	movs	r0, r0
 800c004:	0000      	movs	r0, r0
	...

0800c008 <_normalizeAngle>:
  return r;
}

// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f7f4 fac0 	bl	8000598 <__aeabi_f2d>
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 800c068 <_normalizeAngle+0x60>
 800c020:	ec43 2b10 	vmov	d0, r2, r3
 800c024:	f007 fcd0 	bl	80139c8 <fmod>
 800c028:	ec53 2b10 	vmov	r2, r3, d0
 800c02c:	4610      	mov	r0, r2
 800c02e:	4619      	mov	r1, r3
 800c030:	f7f4 fe02 	bl	8000c38 <__aeabi_d2f>
 800c034:	4603      	mov	r3, r0
 800c036:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 800c038:	edd7 7a03 	vldr	s15, [r7, #12]
 800c03c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c044:	db02      	blt.n	800c04c <_normalizeAngle+0x44>
 800c046:	edd7 7a03 	vldr	s15, [r7, #12]
 800c04a:	e005      	b.n	800c058 <_normalizeAngle+0x50>
 800c04c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c050:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800c070 <_normalizeAngle+0x68>
 800c054:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800c058:	eeb0 0a67 	vmov.f32	s0, s15
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	f3af 8000 	nop.w
 800c068:	60000000 	.word	0x60000000
 800c06c:	401921fb 	.word	0x401921fb
 800c070:	40c90fdb 	.word	0x40c90fdb

0800c074 <_electricalAngle>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs)
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	ed87 0a01 	vstr	s0, [r7, #4]
 800c07e:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	ee07 3a90 	vmov	s15, r3
 800c086:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c08a:	edd7 7a01 	vldr	s15, [r7, #4]
 800c08e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800c092:	eeb0 0a67 	vmov.f32	s0, s15
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <pidInit>:
#include "pid.h"
#include "math_utils.h"

void pidInit(PidController *pidController, float _P, float _I, float _D, float _ramp, float _limit, float _Ts)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b089      	sub	sp, #36	@ 0x24
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	61f8      	str	r0, [r7, #28]
 800c0a8:	ed87 0a06 	vstr	s0, [r7, #24]
 800c0ac:	edc7 0a05 	vstr	s1, [r7, #20]
 800c0b0:	ed87 1a04 	vstr	s2, [r7, #16]
 800c0b4:	edc7 1a03 	vstr	s3, [r7, #12]
 800c0b8:	ed87 2a02 	vstr	s4, [r7, #8]
 800c0bc:	edc7 2a01 	vstr	s5, [r7, #4]
    pidController->P = _P;
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	69ba      	ldr	r2, [r7, #24]
 800c0c4:	601a      	str	r2, [r3, #0]
    pidController->I = _I;
 800c0c6:	69fb      	ldr	r3, [r7, #28]
 800c0c8:	697a      	ldr	r2, [r7, #20]
 800c0ca:	605a      	str	r2, [r3, #4]
    pidController->D = _D;
 800c0cc:	69fb      	ldr	r3, [r7, #28]
 800c0ce:	693a      	ldr	r2, [r7, #16]
 800c0d0:	609a      	str	r2, [r3, #8]
    pidController->output_ramp = _ramp;
 800c0d2:	69fb      	ldr	r3, [r7, #28]
 800c0d4:	68fa      	ldr	r2, [r7, #12]
 800c0d6:	60da      	str	r2, [r3, #12]
    pidController->limit = _limit;
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	68ba      	ldr	r2, [r7, #8]
 800c0dc:	611a      	str	r2, [r3, #16]
    pidController->Ts = _Ts;
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	621a      	str	r2, [r3, #32]
    pidController->error_prev = 0;
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	f04f 0200 	mov.w	r2, #0
 800c0ea:	615a      	str	r2, [r3, #20]
    pidController->output_prev = 0;
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	f04f 0200 	mov.w	r2, #0
 800c0f2:	619a      	str	r2, [r3, #24]
    pidController->integral_prev = 0;
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	f04f 0200 	mov.w	r2, #0
 800c0fa:	61da      	str	r2, [r3, #28]
}
 800c0fc:	bf00      	nop
 800c0fe:	3724      	adds	r7, #36	@ 0x24
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <pidOperator>:

// PID controller function
float pidOperator(PidController *pidController, float error)
{
 800c108:	b480      	push	{r7}
 800c10a:	b08b      	sub	sp, #44	@ 0x2c
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	ed87 0a00 	vstr	s0, [r7]
    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = pidController->P * error;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	edd3 7a00 	vldr	s15, [r3]
 800c11a:	ed97 7a00 	vldr	s14, [r7]
 800c11e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c122:	edc7 7a08 	vstr	s15, [r7, #32]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float a = 0.5f * (error + pidController->error_prev);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	ed93 7a05 	vldr	s14, [r3, #20]
 800c12c:	edd7 7a00 	vldr	s15, [r7]
 800c130:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c134:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c13c:	edc7 7a07 	vstr	s15, [r7, #28]
    float b = pidController->I * pidController->Ts;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	ed93 7a01 	vldr	s14, [r3, #4]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	edd3 7a08 	vldr	s15, [r3, #32]
 800c14c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c150:	edc7 7a06 	vstr	s15, [r7, #24]
    float integral = pidController->integral_prev + pidController->I * pidController->Ts * 0.5f * (error + pidController->error_prev);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	ed93 7a07 	vldr	s14, [r3, #28]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	edd3 6a01 	vldr	s13, [r3, #4]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	edd3 7a08 	vldr	s15, [r3, #32]
 800c166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c16a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800c16e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	ed93 6a05 	vldr	s12, [r3, #20]
 800c178:	edd7 7a00 	vldr	s15, [r7]
 800c17c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800c180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c184:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c188:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -pidController->limit, pidController->limit);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	edd3 7a04 	vldr	s15, [r3, #16]
 800c192:	eef1 7a67 	vneg.f32	s15, s15
 800c196:	ed97 7a05 	vldr	s14, [r7, #20]
 800c19a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1a2:	d505      	bpl.n	800c1b0 <pidOperator+0xa8>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	edd3 7a04 	vldr	s15, [r3, #16]
 800c1aa:	eef1 7a67 	vneg.f32	s15, s15
 800c1ae:	e00f      	b.n	800c1d0 <pidOperator+0xc8>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	edd3 7a04 	vldr	s15, [r3, #16]
 800c1b6:	ed97 7a05 	vldr	s14, [r7, #20]
 800c1ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1c2:	dd03      	ble.n	800c1cc <pidOperator+0xc4>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	edd3 7a04 	vldr	s15, [r3, #16]
 800c1ca:	e001      	b.n	800c1d0 <pidOperator+0xc8>
 800c1cc:	edd7 7a05 	vldr	s15, [r7, #20]
 800c1d0:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = pidController->D * (error - pidController->error_prev) / pidController->Ts;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	ed93 7a02 	vldr	s14, [r3, #8]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	edd3 7a05 	vldr	s15, [r3, #20]
 800c1e0:	edd7 6a00 	vldr	s13, [r7]
 800c1e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c1e8:	ee67 6a27 	vmul.f32	s13, s14, s15
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	ed93 7a08 	vldr	s14, [r3, #32]
 800c1f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1f6:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 800c1fa:	ed97 7a08 	vldr	s14, [r7, #32]
 800c1fe:	edd7 7a05 	vldr	s15, [r7, #20]
 800c202:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c206:	ed97 7a04 	vldr	s14, [r7, #16]
 800c20a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c20e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // antiwindup - limit the output variable
    output = _constrain(output, -pidController->limit, pidController->limit);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	edd3 7a04 	vldr	s15, [r3, #16]
 800c218:	eef1 7a67 	vneg.f32	s15, s15
 800c21c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c228:	d505      	bpl.n	800c236 <pidOperator+0x12e>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	edd3 7a04 	vldr	s15, [r3, #16]
 800c230:	eef1 7a67 	vneg.f32	s15, s15
 800c234:	e00f      	b.n	800c256 <pidOperator+0x14e>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	edd3 7a04 	vldr	s15, [r3, #16]
 800c23c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c240:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c248:	dd03      	ble.n	800c252 <pidOperator+0x14a>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	edd3 7a04 	vldr	s15, [r3, #16]
 800c250:	e001      	b.n	800c256 <pidOperator+0x14e>
 800c252:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c256:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // if output ramp defined
    if (pidController->output_ramp > 0)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	edd3 7a03 	vldr	s15, [r3, #12]
 800c260:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c268:	dd42      	ble.n	800c2f0 <pidOperator+0x1e8>
    {
        // limit the acceleration by ramping the output
        float output_rate = (output - pidController->output_prev) / pidController->Ts;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	edd3 7a06 	vldr	s15, [r3, #24]
 800c270:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c274:	ee77 6a67 	vsub.f32	s13, s14, s15
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	ed93 7a08 	vldr	s14, [r3, #32]
 800c27e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c282:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > pidController->output_ramp)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	edd3 7a03 	vldr	s15, [r3, #12]
 800c28c:	ed97 7a03 	vldr	s14, [r7, #12]
 800c290:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c298:	dd0f      	ble.n	800c2ba <pidOperator+0x1b2>
            output = pidController->output_prev + pidController->output_ramp * pidController->Ts;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	ed93 7a06 	vldr	s14, [r3, #24]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	edd3 6a03 	vldr	s13, [r3, #12]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	edd3 7a08 	vldr	s15, [r3, #32]
 800c2ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2b4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800c2b8:	e01a      	b.n	800c2f0 <pidOperator+0x1e8>
        else if (output_rate < -pidController->output_ramp)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	edd3 7a03 	vldr	s15, [r3, #12]
 800c2c0:	eef1 7a67 	vneg.f32	s15, s15
 800c2c4:	ed97 7a03 	vldr	s14, [r7, #12]
 800c2c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2d0:	d50e      	bpl.n	800c2f0 <pidOperator+0x1e8>
            output = pidController->output_prev - pidController->output_ramp * pidController->Ts;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	ed93 7a06 	vldr	s14, [r3, #24]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	edd3 6a03 	vldr	s13, [r3, #12]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	edd3 7a08 	vldr	s15, [r3, #32]
 800c2e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    // saving for the next pass
    pidController->integral_prev = integral;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	697a      	ldr	r2, [r7, #20]
 800c2f4:	61da      	str	r2, [r3, #28]
    pidController->output_prev = output;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2fa:	619a      	str	r2, [r3, #24]
    pidController->error_prev = error;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	683a      	ldr	r2, [r7, #0]
 800c300:	615a      	str	r2, [r3, #20]
    return output;
 800c302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c304:	ee07 3a90 	vmov	s15, r3
}
 800c308:	eeb0 0a67 	vmov.f32	s0, s15
 800c30c:	372c      	adds	r7, #44	@ 0x2c
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr

0800c316 <reset>:

void reset(PidController *pidController)
{
 800c316:	b480      	push	{r7}
 800c318:	b083      	sub	sp, #12
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
    pidController->integral_prev = 0.0f;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f04f 0200 	mov.w	r2, #0
 800c324:	61da      	str	r2, [r3, #28]
    pidController->output_prev = 0.0f;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f04f 0200 	mov.w	r2, #0
 800c32c:	619a      	str	r2, [r3, #24]
    pidController->error_prev = 0.0f;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f04f 0200 	mov.w	r2, #0
 800c334:	615a      	str	r2, [r3, #20]
}
 800c336:	bf00      	nop
 800c338:	370c      	adds	r7, #12
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr
	...

0800c344 <setTorque>:
    motor->updatePwm(HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Tc);
}
#elif 1

void setTorque(BldcMotor *motor, float Uq, float Ud, float angle_el)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b08e      	sub	sp, #56	@ 0x38
 800c348:	af00      	add	r7, sp, #0
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	ed87 0a02 	vstr	s0, [r7, #8]
 800c350:	edc7 0a01 	vstr	s1, [r7, #4]
 800c354:	ed87 1a00 	vstr	s2, [r7]
    float Ualpha, Ubeta;
    float Ua, Ub, Uc;

    // Sinusoidal PWM modulation
    // Inverse Park + Clarke transformation
    _sincos(angle_el, &_sa, &_ca);
 800c358:	f107 0214 	add.w	r2, r7, #20
 800c35c:	f107 0310 	add.w	r3, r7, #16
 800c360:	4611      	mov	r1, r2
 800c362:	4618      	mov	r0, r3
 800c364:	ed97 0a00 	vldr	s0, [r7]
 800c368:	f7ff fe2e 	bl	800bfc8 <_sincos>

    // Inverse park transform
    Ualpha = _ca * Ud - _sa * Uq; // -sin(angle) * Uq;
 800c36c:	ed97 7a05 	vldr	s14, [r7, #20]
 800c370:	edd7 7a01 	vldr	s15, [r7, #4]
 800c374:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c378:	edd7 6a04 	vldr	s13, [r7, #16]
 800c37c:	edd7 7a02 	vldr	s15, [r7, #8]
 800c380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c384:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c388:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    Ubeta = _sa * Ud + _ca * Uq;  //  cos(angle) * Uq;
 800c38c:	ed97 7a04 	vldr	s14, [r7, #16]
 800c390:	edd7 7a01 	vldr	s15, [r7, #4]
 800c394:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c398:	edd7 6a05 	vldr	s13, [r7, #20]
 800c39c:	edd7 7a02 	vldr	s15, [r7, #8]
 800c3a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c3a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3a8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Clarke transform
    Ua = Ualpha;
 800c3ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Ub = -0.5f * Ualpha + _SQRT3_2 * Ubeta;
 800c3b0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800c3b4:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800c3b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c3bc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c3c0:	eddf 6a95 	vldr	s13, [pc, #596]	@ 800c618 <setTorque+0x2d4>
 800c3c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c3c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3cc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc = -0.5f * Ualpha - _SQRT3_2 * Ubeta;
 800c3d0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800c3d4:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800c3d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c3dc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c3e0:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 800c618 <setTorque+0x2d4>
 800c3e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c3e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    center = U_DC / 2;
 800c3f0:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 800c3f4:	623b      	str	r3, [r7, #32]

    // discussed here: https://community.simplefoc.com/t/embedded-world-2023-stm32-cordic-co-processor/3107/165?u=candas1
    // a bit more info here: https://microchipdeveloper.com/mct5001:which-zsm-is-best
    // Midpoint Clamp
    float Umin = min(Ua, min(Ub, Uc));
 800c3f6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c3fa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c3fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c406:	d502      	bpl.n	800c40e <setTorque+0xca>
 800c408:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800c40c:	e001      	b.n	800c412 <setTorque+0xce>
 800c40e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c412:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800c416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c41e:	dd01      	ble.n	800c424 <setTorque+0xe0>
 800c420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c422:	e00b      	b.n	800c43c <setTorque+0xf8>
 800c424:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c428:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c42c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c434:	d501      	bpl.n	800c43a <setTorque+0xf6>
 800c436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c438:	e000      	b.n	800c43c <setTorque+0xf8>
 800c43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c43c:	61fb      	str	r3, [r7, #28]
    float Umax = max(Ua, max(Ub, Uc));
 800c43e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c442:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c446:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c44e:	dd02      	ble.n	800c456 <setTorque+0x112>
 800c450:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800c454:	e001      	b.n	800c45a <setTorque+0x116>
 800c456:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c45a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800c45e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c466:	d501      	bpl.n	800c46c <setTorque+0x128>
 800c468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c46a:	e00b      	b.n	800c484 <setTorque+0x140>
 800c46c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c470:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c474:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c47c:	dd01      	ble.n	800c482 <setTorque+0x13e>
 800c47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c480:	e000      	b.n	800c484 <setTorque+0x140>
 800c482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c484:	61bb      	str	r3, [r7, #24]
    center -= (Umax + Umin) / 2;
 800c486:	ed97 7a06 	vldr	s14, [r7, #24]
 800c48a:	edd7 7a07 	vldr	s15, [r7, #28]
 800c48e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c492:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800c496:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c49a:	ed97 7a08 	vldr	s14, [r7, #32]
 800c49e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4a2:	edc7 7a08 	vstr	s15, [r7, #32]

    Ua += center;
 800c4a6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800c4aa:	edd7 7a08 	vldr	s15, [r7, #32]
 800c4ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4b2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    Ub += center;
 800c4b6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c4ba:	edd7 7a08 	vldr	s15, [r7, #32]
 800c4be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4c2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Uc += center;
 800c4c6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c4ca:	edd7 7a08 	vldr	s15, [r7, #32]
 800c4ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    motor->Ta = _constrain(Ua / U_DC, 0.0f, 1.0f);
 800c4d6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800c4da:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c4de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c4e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ea:	d502      	bpl.n	800c4f2 <setTorque+0x1ae>
 800c4ec:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 800c61c <setTorque+0x2d8>
 800c4f0:	e015      	b.n	800c51e <setTorque+0x1da>
 800c4f2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800c4f6:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c4fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c4fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c502:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c50a:	dd02      	ble.n	800c512 <setTorque+0x1ce>
 800c50c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c510:	e005      	b.n	800c51e <setTorque+0x1da>
 800c512:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800c516:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c51a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
    motor->Tb = _constrain(Ub / U_DC, 0.0f, 1.0f);
 800c524:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c528:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c52c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c530:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c538:	d502      	bpl.n	800c540 <setTorque+0x1fc>
 800c53a:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800c61c <setTorque+0x2d8>
 800c53e:	e015      	b.n	800c56c <setTorque+0x228>
 800c540:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c544:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c548:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c54c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c550:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c558:	dd02      	ble.n	800c560 <setTorque+0x21c>
 800c55a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c55e:	e005      	b.n	800c56c <setTorque+0x228>
 800c560:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800c564:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c568:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
    motor->Tc = _constrain(Uc / U_DC, 0.0f, 1.0f);
 800c572:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c576:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c57a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c57e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c586:	d502      	bpl.n	800c58e <setTorque+0x24a>
 800c588:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800c61c <setTorque+0x2d8>
 800c58c:	e015      	b.n	800c5ba <setTorque+0x276>
 800c58e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c592:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c596:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c59a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c59e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5a6:	dd02      	ble.n	800c5ae <setTorque+0x26a>
 800c5a8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c5ac:	e005      	b.n	800c5ba <setTorque+0x276>
 800c5ae:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c5b2:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800c5b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	edc3 7a4c 	vstr	s15, [r3, #304]	@ 0x130

    motor->updatePwm(HALP_PWM_PERIOD * motor->Tb, HALP_PWM_PERIOD * motor->Ta, HALP_PWM_PERIOD * motor->Tc);
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 800c5cc:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800c620 <setTorque+0x2dc>
 800c5d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5d8:	ee17 2a90 	vmov	r2, s15
 800c5dc:	b290      	uxth	r0, r2
 800c5de:	68fa      	ldr	r2, [r7, #12]
 800c5e0:	edd2 7a4a 	vldr	s15, [r2, #296]	@ 0x128
 800c5e4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c620 <setTorque+0x2dc>
 800c5e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5f0:	ee17 2a90 	vmov	r2, s15
 800c5f4:	b291      	uxth	r1, r2
 800c5f6:	68fa      	ldr	r2, [r7, #12]
 800c5f8:	edd2 7a4c 	vldr	s15, [r2, #304]	@ 0x130
 800c5fc:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800c620 <setTorque+0x2dc>
 800c600:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c608:	ee17 2a90 	vmov	r2, s15
 800c60c:	b292      	uxth	r2, r2
 800c60e:	4798      	blx	r3
    // set the voltages in driver
    // driver->setPwm(Ua, Ub, Uc);
}
 800c610:	bf00      	nop
 800c612:	3738      	adds	r7, #56	@ 0x38
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	3f5db3d7 	.word	0x3f5db3d7
 800c61c:	00000000 	.word	0x00000000
 800c620:	45fa0000 	.word	0x45fa0000

0800c624 <motorInit>:
static void working(void);

// should be called before interruption enabled

static void motorInit()
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b08c      	sub	sp, #48	@ 0x30
 800c628:	af00      	add	r7, sp, #0
#if 1
    motor1.pole_pairs = 7;
 800c62a:	4bc6      	ldr	r3, [pc, #792]	@ (800c944 <motorInit+0x320>)
 800c62c:	2207      	movs	r2, #7
 800c62e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    motor1.updatePwm = updatePwm1;
 800c632:	4bc4      	ldr	r3, [pc, #784]	@ (800c944 <motorInit+0x320>)
 800c634:	4ac4      	ldr	r2, [pc, #784]	@ (800c948 <motorInit+0x324>)
 800c636:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor1.startPwm = startPwm1;
 800c63a:	4bc2      	ldr	r3, [pc, #776]	@ (800c944 <motorInit+0x320>)
 800c63c:	4ac3      	ldr	r2, [pc, #780]	@ (800c94c <motorInit+0x328>)
 800c63e:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor1.stopPwm = stopPwm1;
 800c642:	4bc0      	ldr	r3, [pc, #768]	@ (800c944 <motorInit+0x320>)
 800c644:	4ac2      	ldr	r2, [pc, #776]	@ (800c950 <motorInit+0x32c>)
 800c646:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    motor1.zeroElectricAngleOffSet = 0;
 800c64a:	4bbe      	ldr	r3, [pc, #760]	@ (800c944 <motorInit+0x320>)
 800c64c:	f04f 0200 	mov.w	r2, #0
 800c650:	635a      	str	r2, [r3, #52]	@ 0x34
    motor1.Ts = 100 * 1e-6f;
 800c652:	4bbc      	ldr	r3, [pc, #752]	@ (800c944 <motorInit+0x320>)
 800c654:	4abf      	ldr	r2, [pc, #764]	@ (800c954 <motorInit+0x330>)
 800c656:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor1.torqueType = VOLTAGE;
 800c658:	4bba      	ldr	r3, [pc, #744]	@ (800c944 <motorInit+0x320>)
 800c65a:	2200      	movs	r2, #0
 800c65c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    motor1.controlType = VELOCITY;
 800c660:	4bb8      	ldr	r3, [pc, #736]	@ (800c944 <motorInit+0x320>)
 800c662:	2202      	movs	r2, #2
 800c664:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    motor1.state = MOTOR_CALIBRATE;
 800c668:	4bb6      	ldr	r3, [pc, #728]	@ (800c944 <motorInit+0x320>)
 800c66a:	2200      	movs	r2, #0
 800c66c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor1.magEncoder, motor1.Ts, _1_MT6701_GetRawAngle, UNKNOWN);
 800c670:	4bb4      	ldr	r3, [pc, #720]	@ (800c944 <motorInit+0x320>)
 800c672:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c676:	2201      	movs	r2, #1
 800c678:	49b7      	ldr	r1, [pc, #732]	@ (800c958 <motorInit+0x334>)
 800c67a:	eeb0 0a67 	vmov.f32	s0, s15
 800c67e:	48b1      	ldr	r0, [pc, #708]	@ (800c944 <motorInit+0x320>)
 800c680:	f7ff faed 	bl	800bc5e <encoderInit>

    if (motor1.controlType == TORQUE && motor1.torqueType == CURRENT)
 800c684:	4baf      	ldr	r3, [pc, #700]	@ (800c944 <motorInit+0x320>)
 800c686:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d11b      	bne.n	800c6c6 <motorInit+0xa2>
 800c68e:	4bad      	ldr	r3, [pc, #692]	@ (800c944 <motorInit+0x320>)
 800c690:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c694:	2b01      	cmp	r3, #1
 800c696:	d116      	bne.n	800c6c6 <motorInit+0xa2>
    {
        float kp, ki;
        kp = 500.0f;
 800c698:	4bb0      	ldr	r3, [pc, #704]	@ (800c95c <motorInit+0x338>)
 800c69a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ki = 50.0f;
 800c69c:	4bb0      	ldr	r3, [pc, #704]	@ (800c960 <motorInit+0x33c>)
 800c69e:	62bb      	str	r3, [r7, #40]	@ 0x28
        pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800c6a0:	4ba8      	ldr	r3, [pc, #672]	@ (800c944 <motorInit+0x320>)
 800c6a2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c6a6:	eef0 2a67 	vmov.f32	s5, s15
 800c6aa:	ed9f 2aae 	vldr	s4, [pc, #696]	@ 800c964 <motorInit+0x340>
 800c6ae:	eddf 1aae 	vldr	s3, [pc, #696]	@ 800c968 <motorInit+0x344>
 800c6b2:	ed9f 1aad 	vldr	s2, [pc, #692]	@ 800c968 <motorInit+0x344>
 800c6b6:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 800c6ba:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800c6be:	48ab      	ldr	r0, [pc, #684]	@ (800c96c <motorInit+0x348>)
 800c6c0:	f7ff fcee 	bl	800c0a0 <pidInit>
    {
 800c6c4:	e0c0      	b.n	800c848 <motorInit+0x224>
        // pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
    }
    else if (motor1.controlType == VELOCITY)
 800c6c6:	4b9f      	ldr	r3, [pc, #636]	@ (800c944 <motorInit+0x320>)
 800c6c8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c6cc:	2b02      	cmp	r3, #2
 800c6ce:	d152      	bne.n	800c776 <motorInit+0x152>
    {
        if (motor1.torqueType == CURRENT)
 800c6d0:	4b9c      	ldr	r3, [pc, #624]	@ (800c944 <motorInit+0x320>)
 800c6d2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d13a      	bne.n	800c750 <motorInit+0x12c>
        {
            pidInit(&motor1.velocityPID, 0.02, 0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800c6da:	4b9a      	ldr	r3, [pc, #616]	@ (800c944 <motorInit+0x320>)
 800c6dc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c6e0:	eef0 2a67 	vmov.f32	s5, s15
 800c6e4:	ed9f 2aa2 	vldr	s4, [pc, #648]	@ 800c970 <motorInit+0x34c>
 800c6e8:	eddf 1a9f 	vldr	s3, [pc, #636]	@ 800c968 <motorInit+0x344>
 800c6ec:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 800c968 <motorInit+0x344>
 800c6f0:	eddf 0aa0 	vldr	s1, [pc, #640]	@ 800c974 <motorInit+0x350>
 800c6f4:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 800c978 <motorInit+0x354>
 800c6f8:	48a0      	ldr	r0, [pc, #640]	@ (800c97c <motorInit+0x358>)
 800c6fa:	f7ff fcd1 	bl	800c0a0 <pidInit>

            float kp, ki;
            kp = 500.0f;
 800c6fe:	4b97      	ldr	r3, [pc, #604]	@ (800c95c <motorInit+0x338>)
 800c700:	61fb      	str	r3, [r7, #28]
            ki = 50.0f;
 800c702:	4b97      	ldr	r3, [pc, #604]	@ (800c960 <motorInit+0x33c>)
 800c704:	61bb      	str	r3, [r7, #24]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800c706:	4b8f      	ldr	r3, [pc, #572]	@ (800c944 <motorInit+0x320>)
 800c708:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c70c:	eef0 2a67 	vmov.f32	s5, s15
 800c710:	ed9f 2a94 	vldr	s4, [pc, #592]	@ 800c964 <motorInit+0x340>
 800c714:	eddf 1a94 	vldr	s3, [pc, #592]	@ 800c968 <motorInit+0x344>
 800c718:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 800c968 <motorInit+0x344>
 800c71c:	edd7 0a06 	vldr	s1, [r7, #24]
 800c720:	ed97 0a07 	vldr	s0, [r7, #28]
 800c724:	4891      	ldr	r0, [pc, #580]	@ (800c96c <motorInit+0x348>)
 800c726:	f7ff fcbb 	bl	800c0a0 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800c72a:	4b86      	ldr	r3, [pc, #536]	@ (800c944 <motorInit+0x320>)
 800c72c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c730:	eef0 2a67 	vmov.f32	s5, s15
 800c734:	ed9f 2a8b 	vldr	s4, [pc, #556]	@ 800c964 <motorInit+0x340>
 800c738:	eddf 1a8b 	vldr	s3, [pc, #556]	@ 800c968 <motorInit+0x344>
 800c73c:	ed9f 1a8a 	vldr	s2, [pc, #552]	@ 800c968 <motorInit+0x344>
 800c740:	edd7 0a06 	vldr	s1, [r7, #24]
 800c744:	ed97 0a07 	vldr	s0, [r7, #28]
 800c748:	488d      	ldr	r0, [pc, #564]	@ (800c980 <motorInit+0x35c>)
 800c74a:	f7ff fca9 	bl	800c0a0 <pidInit>
 800c74e:	e07b      	b.n	800c848 <motorInit+0x224>
        }
        else
        {
            pidInit(&motor1.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor1.Ts);
 800c750:	4b7c      	ldr	r3, [pc, #496]	@ (800c944 <motorInit+0x320>)
 800c752:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c756:	eef0 2a67 	vmov.f32	s5, s15
 800c75a:	ed9f 2a82 	vldr	s4, [pc, #520]	@ 800c964 <motorInit+0x340>
 800c75e:	eddf 1a82 	vldr	s3, [pc, #520]	@ 800c968 <motorInit+0x344>
 800c762:	ed9f 1a81 	vldr	s2, [pc, #516]	@ 800c968 <motorInit+0x344>
 800c766:	eddf 0a87 	vldr	s1, [pc, #540]	@ 800c984 <motorInit+0x360>
 800c76a:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 800c988 <motorInit+0x364>
 800c76e:	4883      	ldr	r0, [pc, #524]	@ (800c97c <motorInit+0x358>)
 800c770:	f7ff fc96 	bl	800c0a0 <pidInit>
 800c774:	e068      	b.n	800c848 <motorInit+0x224>
        }
    }
    else if (motor1.controlType == ANGLE)
 800c776:	4b73      	ldr	r3, [pc, #460]	@ (800c944 <motorInit+0x320>)
 800c778:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c77c:	2b03      	cmp	r3, #3
 800c77e:	d163      	bne.n	800c848 <motorInit+0x224>
    {
        if (motor1.torqueType == CURRENT)
 800c780:	4b70      	ldr	r3, [pc, #448]	@ (800c944 <motorInit+0x320>)
 800c782:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c786:	2b01      	cmp	r3, #1
 800c788:	d14c      	bne.n	800c824 <motorInit+0x200>
        {
            pidInit(&motor1.anglePID, 2, 0, 0, 0, MAX_VELOCITY, motor1.Ts);
 800c78a:	4b6e      	ldr	r3, [pc, #440]	@ (800c944 <motorInit+0x320>)
 800c78c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c790:	eef0 2a67 	vmov.f32	s5, s15
 800c794:	ed9f 2a7d 	vldr	s4, [pc, #500]	@ 800c98c <motorInit+0x368>
 800c798:	eddf 1a73 	vldr	s3, [pc, #460]	@ 800c968 <motorInit+0x344>
 800c79c:	ed9f 1a72 	vldr	s2, [pc, #456]	@ 800c968 <motorInit+0x344>
 800c7a0:	eddf 0a71 	vldr	s1, [pc, #452]	@ 800c968 <motorInit+0x344>
 800c7a4:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800c7a8:	4879      	ldr	r0, [pc, #484]	@ (800c990 <motorInit+0x36c>)
 800c7aa:	f7ff fc79 	bl	800c0a0 <pidInit>

            pidInit(&motor1.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor1.Ts);
 800c7ae:	4b65      	ldr	r3, [pc, #404]	@ (800c944 <motorInit+0x320>)
 800c7b0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c7b4:	eef0 2a67 	vmov.f32	s5, s15
 800c7b8:	ed9f 2a6d 	vldr	s4, [pc, #436]	@ 800c970 <motorInit+0x34c>
 800c7bc:	eddf 1a6a 	vldr	s3, [pc, #424]	@ 800c968 <motorInit+0x344>
 800c7c0:	ed9f 1a69 	vldr	s2, [pc, #420]	@ 800c968 <motorInit+0x344>
 800c7c4:	eddf 0a73 	vldr	s1, [pc, #460]	@ 800c994 <motorInit+0x370>
 800c7c8:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 800c998 <motorInit+0x374>
 800c7cc:	486b      	ldr	r0, [pc, #428]	@ (800c97c <motorInit+0x358>)
 800c7ce:	f7ff fc67 	bl	800c0a0 <pidInit>

            // pidInit(&motor1.anglePID, -0.001, -0.0001, 0, 0, CURRENT_MAX / 2, motor1.Ts);

            float kp, ki;
            kp = -200;
 800c7d2:	4b72      	ldr	r3, [pc, #456]	@ (800c99c <motorInit+0x378>)
 800c7d4:	627b      	str	r3, [r7, #36]	@ 0x24
            ki = -20;
 800c7d6:	4b72      	ldr	r3, [pc, #456]	@ (800c9a0 <motorInit+0x37c>)
 800c7d8:	623b      	str	r3, [r7, #32]
            pidInit(&motor1.pidId, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800c7da:	4b5a      	ldr	r3, [pc, #360]	@ (800c944 <motorInit+0x320>)
 800c7dc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c7e0:	eef0 2a67 	vmov.f32	s5, s15
 800c7e4:	ed9f 2a5f 	vldr	s4, [pc, #380]	@ 800c964 <motorInit+0x340>
 800c7e8:	eddf 1a5f 	vldr	s3, [pc, #380]	@ 800c968 <motorInit+0x344>
 800c7ec:	ed9f 1a5e 	vldr	s2, [pc, #376]	@ 800c968 <motorInit+0x344>
 800c7f0:	edd7 0a08 	vldr	s1, [r7, #32]
 800c7f4:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800c7f8:	485c      	ldr	r0, [pc, #368]	@ (800c96c <motorInit+0x348>)
 800c7fa:	f7ff fc51 	bl	800c0a0 <pidInit>
            pidInit(&motor1.pidIq, kp, ki, 0, 0, UqMAX, motor1.Ts);
 800c7fe:	4b51      	ldr	r3, [pc, #324]	@ (800c944 <motorInit+0x320>)
 800c800:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c804:	eef0 2a67 	vmov.f32	s5, s15
 800c808:	ed9f 2a56 	vldr	s4, [pc, #344]	@ 800c964 <motorInit+0x340>
 800c80c:	eddf 1a56 	vldr	s3, [pc, #344]	@ 800c968 <motorInit+0x344>
 800c810:	ed9f 1a55 	vldr	s2, [pc, #340]	@ 800c968 <motorInit+0x344>
 800c814:	edd7 0a08 	vldr	s1, [r7, #32]
 800c818:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800c81c:	4858      	ldr	r0, [pc, #352]	@ (800c980 <motorInit+0x35c>)
 800c81e:	f7ff fc3f 	bl	800c0a0 <pidInit>
 800c822:	e011      	b.n	800c848 <motorInit+0x224>
        }
        else
        {
            pidInit(&motor1.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor1.Ts);
 800c824:	4b47      	ldr	r3, [pc, #284]	@ (800c944 <motorInit+0x320>)
 800c826:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c82a:	eef0 2a67 	vmov.f32	s5, s15
 800c82e:	ed9f 2a5d 	vldr	s4, [pc, #372]	@ 800c9a4 <motorInit+0x380>
 800c832:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 800c968 <motorInit+0x344>
 800c836:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 800c968 <motorInit+0x344>
 800c83a:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 800c9a8 <motorInit+0x384>
 800c83e:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 800c9ac <motorInit+0x388>
 800c842:	4853      	ldr	r0, [pc, #332]	@ (800c990 <motorInit+0x36c>)
 800c844:	f7ff fc2c 	bl	800c0a0 <pidInit>
        }
    }

    lpfInit(&motor1.IqFilter, 0.05, motor1.Ts);
 800c848:	4b3e      	ldr	r3, [pc, #248]	@ (800c944 <motorInit+0x320>)
 800c84a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c84e:	eef0 0a67 	vmov.f32	s1, s15
 800c852:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 800c984 <motorInit+0x360>
 800c856:	4856      	ldr	r0, [pc, #344]	@ (800c9b0 <motorInit+0x38c>)
 800c858:	f7ff fab6 	bl	800bdc8 <lpfInit>
    lpfInit(&motor1.IdFilter, 0.05, motor1.Ts);
 800c85c:	4b39      	ldr	r3, [pc, #228]	@ (800c944 <motorInit+0x320>)
 800c85e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c862:	eef0 0a67 	vmov.f32	s1, s15
 800c866:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 800c984 <motorInit+0x360>
 800c86a:	4852      	ldr	r0, [pc, #328]	@ (800c9b4 <motorInit+0x390>)
 800c86c:	f7ff faac 	bl	800bdc8 <lpfInit>
    lpfInit(&motor1.velocityFilter, 0.01, motor1.Ts);
 800c870:	4b34      	ldr	r3, [pc, #208]	@ (800c944 <motorInit+0x320>)
 800c872:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c876:	eef0 0a67 	vmov.f32	s1, s15
 800c87a:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800c974 <motorInit+0x350>
 800c87e:	484e      	ldr	r0, [pc, #312]	@ (800c9b8 <motorInit+0x394>)
 800c880:	f7ff faa2 	bl	800bdc8 <lpfInit>

#endif
    motor2.pole_pairs = 7;
 800c884:	4b4d      	ldr	r3, [pc, #308]	@ (800c9bc <motorInit+0x398>)
 800c886:	2207      	movs	r2, #7
 800c888:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    motor2.updatePwm = updatePwm2;
 800c88c:	4b4b      	ldr	r3, [pc, #300]	@ (800c9bc <motorInit+0x398>)
 800c88e:	4a4c      	ldr	r2, [pc, #304]	@ (800c9c0 <motorInit+0x39c>)
 800c890:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    motor2.startPwm = startPwm2;
 800c894:	4b49      	ldr	r3, [pc, #292]	@ (800c9bc <motorInit+0x398>)
 800c896:	4a4b      	ldr	r2, [pc, #300]	@ (800c9c4 <motorInit+0x3a0>)
 800c898:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor2.stopPwm = stopPwm2;
 800c89c:	4b47      	ldr	r3, [pc, #284]	@ (800c9bc <motorInit+0x398>)
 800c89e:	4a4a      	ldr	r2, [pc, #296]	@ (800c9c8 <motorInit+0x3a4>)
 800c8a0:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    motor2.zeroElectricAngleOffSet = 0;
 800c8a4:	4b45      	ldr	r3, [pc, #276]	@ (800c9bc <motorInit+0x398>)
 800c8a6:	f04f 0200 	mov.w	r2, #0
 800c8aa:	635a      	str	r2, [r3, #52]	@ 0x34
    motor2.Ts = 100 * 1e-6f;
 800c8ac:	4b43      	ldr	r3, [pc, #268]	@ (800c9bc <motorInit+0x398>)
 800c8ae:	4a29      	ldr	r2, [pc, #164]	@ (800c954 <motorInit+0x330>)
 800c8b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor2.torqueType = VOLTAGE;
 800c8b2:	4b42      	ldr	r3, [pc, #264]	@ (800c9bc <motorInit+0x398>)
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    motor2.controlType = VELOCITY;
 800c8ba:	4b40      	ldr	r3, [pc, #256]	@ (800c9bc <motorInit+0x398>)
 800c8bc:	2202      	movs	r2, #2
 800c8be:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    motor2.state = MOTOR_CALIBRATE;
 800c8c2:	4b3e      	ldr	r3, [pc, #248]	@ (800c9bc <motorInit+0x398>)
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    encoderInit(&motor2.magEncoder, motor2.Ts, _2_MT6701_GetRawAngle, UNKNOWN);
 800c8ca:	4b3c      	ldr	r3, [pc, #240]	@ (800c9bc <motorInit+0x398>)
 800c8cc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	493e      	ldr	r1, [pc, #248]	@ (800c9cc <motorInit+0x3a8>)
 800c8d4:	eeb0 0a67 	vmov.f32	s0, s15
 800c8d8:	4838      	ldr	r0, [pc, #224]	@ (800c9bc <motorInit+0x398>)
 800c8da:	f7ff f9c0 	bl	800bc5e <encoderInit>
    if (motor2.controlType == TORQUE && motor2.torqueType == CURRENT)
 800c8de:	4b37      	ldr	r3, [pc, #220]	@ (800c9bc <motorInit+0x398>)
 800c8e0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d177      	bne.n	800c9d8 <motorInit+0x3b4>
 800c8e8:	4b34      	ldr	r3, [pc, #208]	@ (800c9bc <motorInit+0x398>)
 800c8ea:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d172      	bne.n	800c9d8 <motorInit+0x3b4>
    {
        float kp, ki;
        kp = -200;
 800c8f2:	4b2a      	ldr	r3, [pc, #168]	@ (800c99c <motorInit+0x378>)
 800c8f4:	617b      	str	r3, [r7, #20]
        ki = -20;
 800c8f6:	4b2a      	ldr	r3, [pc, #168]	@ (800c9a0 <motorInit+0x37c>)
 800c8f8:	613b      	str	r3, [r7, #16]
        pidInit(&motor2.pidId, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800c8fa:	4b30      	ldr	r3, [pc, #192]	@ (800c9bc <motorInit+0x398>)
 800c8fc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c900:	eef0 2a67 	vmov.f32	s5, s15
 800c904:	ed9f 2a17 	vldr	s4, [pc, #92]	@ 800c964 <motorInit+0x340>
 800c908:	eddf 1a17 	vldr	s3, [pc, #92]	@ 800c968 <motorInit+0x344>
 800c90c:	ed9f 1a16 	vldr	s2, [pc, #88]	@ 800c968 <motorInit+0x344>
 800c910:	edd7 0a04 	vldr	s1, [r7, #16]
 800c914:	ed97 0a05 	vldr	s0, [r7, #20]
 800c918:	482d      	ldr	r0, [pc, #180]	@ (800c9d0 <motorInit+0x3ac>)
 800c91a:	f7ff fbc1 	bl	800c0a0 <pidInit>
        pidInit(&motor2.pidIq, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800c91e:	4b27      	ldr	r3, [pc, #156]	@ (800c9bc <motorInit+0x398>)
 800c920:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c924:	eef0 2a67 	vmov.f32	s5, s15
 800c928:	ed9f 2a0e 	vldr	s4, [pc, #56]	@ 800c964 <motorInit+0x340>
 800c92c:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 800c968 <motorInit+0x344>
 800c930:	ed9f 1a0d 	vldr	s2, [pc, #52]	@ 800c968 <motorInit+0x344>
 800c934:	edd7 0a04 	vldr	s1, [r7, #16]
 800c938:	ed97 0a05 	vldr	s0, [r7, #20]
 800c93c:	4825      	ldr	r0, [pc, #148]	@ (800c9d4 <motorInit+0x3b0>)
 800c93e:	f7ff fbaf 	bl	800c0a0 <pidInit>
    {
 800c942:	e10a      	b.n	800cb5a <motorInit+0x536>
 800c944:	20000834 	.word	0x20000834
 800c948:	0800ed75 	.word	0x0800ed75
 800c94c:	0800ed2d 	.word	0x0800ed2d
 800c950:	0800ed51 	.word	0x0800ed51
 800c954:	38d1b717 	.word	0x38d1b717
 800c958:	0800ec21 	.word	0x0800ec21
 800c95c:	43fa0000 	.word	0x43fa0000
 800c960:	42480000 	.word	0x42480000
 800c964:	4093cd3a 	.word	0x4093cd3a
 800c968:	00000000 	.word	0x00000000
 800c96c:	20000898 	.word	0x20000898
 800c970:	3e4ccccd 	.word	0x3e4ccccd
 800c974:	3c23d70a 	.word	0x3c23d70a
 800c978:	3ca3d70a 	.word	0x3ca3d70a
 800c97c:	200008e0 	.word	0x200008e0
 800c980:	200008bc 	.word	0x200008bc
 800c984:	3d4ccccd 	.word	0x3d4ccccd
 800c988:	3e19999a 	.word	0x3e19999a
 800c98c:	43c80000 	.word	0x43c80000
 800c990:	20000904 	.word	0x20000904
 800c994:	bc23d70a 	.word	0xbc23d70a
 800c998:	bca3d70a 	.word	0xbca3d70a
 800c99c:	c3480000 	.word	0xc3480000
 800c9a0:	c1a00000 	.word	0xc1a00000
 800c9a4:	4013cd3a 	.word	0x4013cd3a
 800c9a8:	3a83126f 	.word	0x3a83126f
 800c9ac:	3e99999a 	.word	0x3e99999a
 800c9b0:	20000928 	.word	0x20000928
 800c9b4:	20000934 	.word	0x20000934
 800c9b8:	20000940 	.word	0x20000940
 800c9bc:	20000974 	.word	0x20000974
 800c9c0:	0800edf1 	.word	0x0800edf1
 800c9c4:	0800eda9 	.word	0x0800eda9
 800c9c8:	0800edcd 	.word	0x0800edcd
 800c9cc:	0800ecf1 	.word	0x0800ecf1
 800c9d0:	200009d8 	.word	0x200009d8
 800c9d4:	200009fc 	.word	0x200009fc
    }
    else if (motor2.controlType == VELOCITY)
 800c9d8:	4b71      	ldr	r3, [pc, #452]	@ (800cba0 <motorInit+0x57c>)
 800c9da:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d152      	bne.n	800ca88 <motorInit+0x464>
    {
        if (motor2.torqueType == CURRENT)
 800c9e2:	4b6f      	ldr	r3, [pc, #444]	@ (800cba0 <motorInit+0x57c>)
 800c9e4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d13a      	bne.n	800ca62 <motorInit+0x43e>
        {
            pidInit(&motor2.velocityPID, 0.02, 0.01, 0, 0, CURRENT_MAX, motor2.Ts);
 800c9ec:	4b6c      	ldr	r3, [pc, #432]	@ (800cba0 <motorInit+0x57c>)
 800c9ee:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c9f2:	eef0 2a67 	vmov.f32	s5, s15
 800c9f6:	ed9f 2a6b 	vldr	s4, [pc, #428]	@ 800cba4 <motorInit+0x580>
 800c9fa:	eddf 1a6b 	vldr	s3, [pc, #428]	@ 800cba8 <motorInit+0x584>
 800c9fe:	ed9f 1a6a 	vldr	s2, [pc, #424]	@ 800cba8 <motorInit+0x584>
 800ca02:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 800cbac <motorInit+0x588>
 800ca06:	ed9f 0a6a 	vldr	s0, [pc, #424]	@ 800cbb0 <motorInit+0x58c>
 800ca0a:	486a      	ldr	r0, [pc, #424]	@ (800cbb4 <motorInit+0x590>)
 800ca0c:	f7ff fb48 	bl	800c0a0 <pidInit>

            float kp, ki;
            kp = 500.0f;
 800ca10:	4b69      	ldr	r3, [pc, #420]	@ (800cbb8 <motorInit+0x594>)
 800ca12:	607b      	str	r3, [r7, #4]
            ki = 50.0f;
 800ca14:	4b69      	ldr	r3, [pc, #420]	@ (800cbbc <motorInit+0x598>)
 800ca16:	603b      	str	r3, [r7, #0]
            pidInit(&motor2.pidId, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800ca18:	4b61      	ldr	r3, [pc, #388]	@ (800cba0 <motorInit+0x57c>)
 800ca1a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ca1e:	eef0 2a67 	vmov.f32	s5, s15
 800ca22:	ed9f 2a67 	vldr	s4, [pc, #412]	@ 800cbc0 <motorInit+0x59c>
 800ca26:	eddf 1a60 	vldr	s3, [pc, #384]	@ 800cba8 <motorInit+0x584>
 800ca2a:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 800cba8 <motorInit+0x584>
 800ca2e:	edd7 0a00 	vldr	s1, [r7]
 800ca32:	ed97 0a01 	vldr	s0, [r7, #4]
 800ca36:	4863      	ldr	r0, [pc, #396]	@ (800cbc4 <motorInit+0x5a0>)
 800ca38:	f7ff fb32 	bl	800c0a0 <pidInit>
            pidInit(&motor2.pidIq, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800ca3c:	4b58      	ldr	r3, [pc, #352]	@ (800cba0 <motorInit+0x57c>)
 800ca3e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ca42:	eef0 2a67 	vmov.f32	s5, s15
 800ca46:	ed9f 2a5e 	vldr	s4, [pc, #376]	@ 800cbc0 <motorInit+0x59c>
 800ca4a:	eddf 1a57 	vldr	s3, [pc, #348]	@ 800cba8 <motorInit+0x584>
 800ca4e:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 800cba8 <motorInit+0x584>
 800ca52:	edd7 0a00 	vldr	s1, [r7]
 800ca56:	ed97 0a01 	vldr	s0, [r7, #4]
 800ca5a:	485b      	ldr	r0, [pc, #364]	@ (800cbc8 <motorInit+0x5a4>)
 800ca5c:	f7ff fb20 	bl	800c0a0 <pidInit>
 800ca60:	e07b      	b.n	800cb5a <motorInit+0x536>
        }
        else
        {
            pidInit(&motor2.velocityPID, 0.15, 0.05, 0, 0, UqMAX, motor2.Ts);
 800ca62:	4b4f      	ldr	r3, [pc, #316]	@ (800cba0 <motorInit+0x57c>)
 800ca64:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ca68:	eef0 2a67 	vmov.f32	s5, s15
 800ca6c:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 800cbc0 <motorInit+0x59c>
 800ca70:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 800cba8 <motorInit+0x584>
 800ca74:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 800cba8 <motorInit+0x584>
 800ca78:	eddf 0a54 	vldr	s1, [pc, #336]	@ 800cbcc <motorInit+0x5a8>
 800ca7c:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 800cbd0 <motorInit+0x5ac>
 800ca80:	484c      	ldr	r0, [pc, #304]	@ (800cbb4 <motorInit+0x590>)
 800ca82:	f7ff fb0d 	bl	800c0a0 <pidInit>
 800ca86:	e068      	b.n	800cb5a <motorInit+0x536>
        }
    }
    else if (motor2.controlType == ANGLE)
 800ca88:	4b45      	ldr	r3, [pc, #276]	@ (800cba0 <motorInit+0x57c>)
 800ca8a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800ca8e:	2b03      	cmp	r3, #3
 800ca90:	d163      	bne.n	800cb5a <motorInit+0x536>
    {
        if (motor2.torqueType == CURRENT)
 800ca92:	4b43      	ldr	r3, [pc, #268]	@ (800cba0 <motorInit+0x57c>)
 800ca94:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d14c      	bne.n	800cb36 <motorInit+0x512>
        {
            pidInit(&motor2.anglePID, 2, 0, 0, 0, MAX_VELOCITY, motor2.Ts);
 800ca9c:	4b40      	ldr	r3, [pc, #256]	@ (800cba0 <motorInit+0x57c>)
 800ca9e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800caa2:	eef0 2a67 	vmov.f32	s5, s15
 800caa6:	ed9f 2a4b 	vldr	s4, [pc, #300]	@ 800cbd4 <motorInit+0x5b0>
 800caaa:	eddf 1a3f 	vldr	s3, [pc, #252]	@ 800cba8 <motorInit+0x584>
 800caae:	ed9f 1a3e 	vldr	s2, [pc, #248]	@ 800cba8 <motorInit+0x584>
 800cab2:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 800cba8 <motorInit+0x584>
 800cab6:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800caba:	4847      	ldr	r0, [pc, #284]	@ (800cbd8 <motorInit+0x5b4>)
 800cabc:	f7ff faf0 	bl	800c0a0 <pidInit>

            pidInit(&motor2.velocityPID, -0.02, -0.01, 0, 0, CURRENT_MAX, motor2.Ts);
 800cac0:	4b37      	ldr	r3, [pc, #220]	@ (800cba0 <motorInit+0x57c>)
 800cac2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cac6:	eef0 2a67 	vmov.f32	s5, s15
 800caca:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 800cba4 <motorInit+0x580>
 800cace:	eddf 1a36 	vldr	s3, [pc, #216]	@ 800cba8 <motorInit+0x584>
 800cad2:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 800cba8 <motorInit+0x584>
 800cad6:	eddf 0a41 	vldr	s1, [pc, #260]	@ 800cbdc <motorInit+0x5b8>
 800cada:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 800cbe0 <motorInit+0x5bc>
 800cade:	4835      	ldr	r0, [pc, #212]	@ (800cbb4 <motorInit+0x590>)
 800cae0:	f7ff fade 	bl	800c0a0 <pidInit>

            // pidInit(&motor1.anglePID, -0.001, -0.0001, 0, 0, CURRENT_MAX / 2, motor1.Ts);

            float kp, ki;
            kp = -200;
 800cae4:	4b3f      	ldr	r3, [pc, #252]	@ (800cbe4 <motorInit+0x5c0>)
 800cae6:	60fb      	str	r3, [r7, #12]
            ki = -20;
 800cae8:	4b3f      	ldr	r3, [pc, #252]	@ (800cbe8 <motorInit+0x5c4>)
 800caea:	60bb      	str	r3, [r7, #8]
            pidInit(&motor2.pidId, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800caec:	4b2c      	ldr	r3, [pc, #176]	@ (800cba0 <motorInit+0x57c>)
 800caee:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800caf2:	eef0 2a67 	vmov.f32	s5, s15
 800caf6:	ed9f 2a32 	vldr	s4, [pc, #200]	@ 800cbc0 <motorInit+0x59c>
 800cafa:	eddf 1a2b 	vldr	s3, [pc, #172]	@ 800cba8 <motorInit+0x584>
 800cafe:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 800cba8 <motorInit+0x584>
 800cb02:	edd7 0a02 	vldr	s1, [r7, #8]
 800cb06:	ed97 0a03 	vldr	s0, [r7, #12]
 800cb0a:	482e      	ldr	r0, [pc, #184]	@ (800cbc4 <motorInit+0x5a0>)
 800cb0c:	f7ff fac8 	bl	800c0a0 <pidInit>
            pidInit(&motor2.pidIq, kp, ki, 0, 0, UqMAX, motor2.Ts);
 800cb10:	4b23      	ldr	r3, [pc, #140]	@ (800cba0 <motorInit+0x57c>)
 800cb12:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cb16:	eef0 2a67 	vmov.f32	s5, s15
 800cb1a:	ed9f 2a29 	vldr	s4, [pc, #164]	@ 800cbc0 <motorInit+0x59c>
 800cb1e:	eddf 1a22 	vldr	s3, [pc, #136]	@ 800cba8 <motorInit+0x584>
 800cb22:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 800cba8 <motorInit+0x584>
 800cb26:	edd7 0a02 	vldr	s1, [r7, #8]
 800cb2a:	ed97 0a03 	vldr	s0, [r7, #12]
 800cb2e:	4826      	ldr	r0, [pc, #152]	@ (800cbc8 <motorInit+0x5a4>)
 800cb30:	f7ff fab6 	bl	800c0a0 <pidInit>
 800cb34:	e011      	b.n	800cb5a <motorInit+0x536>
        }
        else
        {
            pidInit(&motor2.anglePID, 0.3, 0.001, 0, 0, UqMAX / 2, motor2.Ts);
 800cb36:	4b1a      	ldr	r3, [pc, #104]	@ (800cba0 <motorInit+0x57c>)
 800cb38:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cb3c:	eef0 2a67 	vmov.f32	s5, s15
 800cb40:	ed9f 2a2a 	vldr	s4, [pc, #168]	@ 800cbec <motorInit+0x5c8>
 800cb44:	eddf 1a18 	vldr	s3, [pc, #96]	@ 800cba8 <motorInit+0x584>
 800cb48:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 800cba8 <motorInit+0x584>
 800cb4c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 800cbf0 <motorInit+0x5cc>
 800cb50:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 800cbf4 <motorInit+0x5d0>
 800cb54:	4820      	ldr	r0, [pc, #128]	@ (800cbd8 <motorInit+0x5b4>)
 800cb56:	f7ff faa3 	bl	800c0a0 <pidInit>
        }
    }

    lpfInit(&motor2.IqFilter, 0.05, motor1.Ts);
 800cb5a:	4b27      	ldr	r3, [pc, #156]	@ (800cbf8 <motorInit+0x5d4>)
 800cb5c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cb60:	eef0 0a67 	vmov.f32	s1, s15
 800cb64:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800cbcc <motorInit+0x5a8>
 800cb68:	4824      	ldr	r0, [pc, #144]	@ (800cbfc <motorInit+0x5d8>)
 800cb6a:	f7ff f92d 	bl	800bdc8 <lpfInit>
    lpfInit(&motor2.IdFilter, 0.05, motor1.Ts);
 800cb6e:	4b22      	ldr	r3, [pc, #136]	@ (800cbf8 <motorInit+0x5d4>)
 800cb70:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cb74:	eef0 0a67 	vmov.f32	s1, s15
 800cb78:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 800cbcc <motorInit+0x5a8>
 800cb7c:	4820      	ldr	r0, [pc, #128]	@ (800cc00 <motorInit+0x5dc>)
 800cb7e:	f7ff f923 	bl	800bdc8 <lpfInit>
    lpfInit(&motor2.velocityFilter, 0.01, motor1.Ts);
 800cb82:	4b1d      	ldr	r3, [pc, #116]	@ (800cbf8 <motorInit+0x5d4>)
 800cb84:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cb88:	eef0 0a67 	vmov.f32	s1, s15
 800cb8c:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800cbac <motorInit+0x588>
 800cb90:	481c      	ldr	r0, [pc, #112]	@ (800cc04 <motorInit+0x5e0>)
 800cb92:	f7ff f919 	bl	800bdc8 <lpfInit>
}
 800cb96:	bf00      	nop
 800cb98:	3730      	adds	r7, #48	@ 0x30
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	20000974 	.word	0x20000974
 800cba4:	3e4ccccd 	.word	0x3e4ccccd
 800cba8:	00000000 	.word	0x00000000
 800cbac:	3c23d70a 	.word	0x3c23d70a
 800cbb0:	3ca3d70a 	.word	0x3ca3d70a
 800cbb4:	20000a20 	.word	0x20000a20
 800cbb8:	43fa0000 	.word	0x43fa0000
 800cbbc:	42480000 	.word	0x42480000
 800cbc0:	4093cd3a 	.word	0x4093cd3a
 800cbc4:	200009d8 	.word	0x200009d8
 800cbc8:	200009fc 	.word	0x200009fc
 800cbcc:	3d4ccccd 	.word	0x3d4ccccd
 800cbd0:	3e19999a 	.word	0x3e19999a
 800cbd4:	43c80000 	.word	0x43c80000
 800cbd8:	20000a44 	.word	0x20000a44
 800cbdc:	bc23d70a 	.word	0xbc23d70a
 800cbe0:	bca3d70a 	.word	0xbca3d70a
 800cbe4:	c3480000 	.word	0xc3480000
 800cbe8:	c1a00000 	.word	0xc1a00000
 800cbec:	4013cd3a 	.word	0x4013cd3a
 800cbf0:	3a83126f 	.word	0x3a83126f
 800cbf4:	3e99999a 	.word	0x3e99999a
 800cbf8:	20000834 	.word	0x20000834
 800cbfc:	20000a68 	.word	0x20000a68
 800cc00:	20000a74 	.word	0x20000a74
 800cc04:	20000a80 	.word	0x20000a80

0800cc08 <appInit>:
float target_pitch;
LowPassFilter lpf_pitch_cmd, lpf_throttle, lpf_steering;
// joyStick

void appInit()
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	af00      	add	r7, sp, #0

    motorInit();
 800cc0c:	f7ff fd0a 	bl	800c624 <motorInit>
    devState = STANDBY;
 800cc10:	4b1d      	ldr	r3, [pc, #116]	@ (800cc88 <appInit+0x80>)
 800cc12:	2200      	movs	r2, #0
 800cc14:	701a      	strb	r2, [r3, #0]
    v = 2400;
 800cc16:	4b1d      	ldr	r3, [pc, #116]	@ (800cc8c <appInit+0x84>)
 800cc18:	4a1d      	ldr	r2, [pc, #116]	@ (800cc90 <appInit+0x88>)
 800cc1a:	601a      	str	r2, [r3, #0]
    // balance
    // pidInit(&pid_stb, 0.14, 0.5, 0.01, 0, UqMAX, 100 * 1e-6f);
    pidInit(&pid_stb, 0.1, 0.4, 0.01, 0, UqMAX, 100 * 1e-6f);
 800cc1c:	eddf 2a1d 	vldr	s5, [pc, #116]	@ 800cc94 <appInit+0x8c>
 800cc20:	ed9f 2a1d 	vldr	s4, [pc, #116]	@ 800cc98 <appInit+0x90>
 800cc24:	eddf 1a1d 	vldr	s3, [pc, #116]	@ 800cc9c <appInit+0x94>
 800cc28:	ed9f 1a1d 	vldr	s2, [pc, #116]	@ 800cca0 <appInit+0x98>
 800cc2c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800cca4 <appInit+0x9c>
 800cc30:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800cca8 <appInit+0xa0>
 800cc34:	481d      	ldr	r0, [pc, #116]	@ (800ccac <appInit+0xa4>)
 800cc36:	f7ff fa33 	bl	800c0a0 <pidInit>
    pidInit(&pid_vel, 0.01, 0.03, 0, 0, 20, 100 * 1e-6f);
 800cc3a:	eddf 2a16 	vldr	s5, [pc, #88]	@ 800cc94 <appInit+0x8c>
 800cc3e:	eeb3 2a04 	vmov.f32	s4, #52	@ 0x41a00000  20.0
 800cc42:	eddf 1a16 	vldr	s3, [pc, #88]	@ 800cc9c <appInit+0x94>
 800cc46:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 800cc9c <appInit+0x94>
 800cc4a:	eddf 0a19 	vldr	s1, [pc, #100]	@ 800ccb0 <appInit+0xa8>
 800cc4e:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 800cca0 <appInit+0x98>
 800cc52:	4818      	ldr	r0, [pc, #96]	@ (800ccb4 <appInit+0xac>)
 800cc54:	f7ff fa24 	bl	800c0a0 <pidInit>
    lpfInit(&lpf_pitch_cmd, 0.07, 100 * 1e-6f);
 800cc58:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 800cc94 <appInit+0x8c>
 800cc5c:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800ccb8 <appInit+0xb0>
 800cc60:	4816      	ldr	r0, [pc, #88]	@ (800ccbc <appInit+0xb4>)
 800cc62:	f7ff f8b1 	bl	800bdc8 <lpfInit>
    lpfInit(&lpf_throttle, 0.5, 100 * 1e-6f);
 800cc66:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 800cc94 <appInit+0x8c>
 800cc6a:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800cc6e:	4814      	ldr	r0, [pc, #80]	@ (800ccc0 <appInit+0xb8>)
 800cc70:	f7ff f8aa 	bl	800bdc8 <lpfInit>
    lpfInit(&lpf_steering, 0.1, 100 * 1e-6f);
 800cc74:	eddf 0a07 	vldr	s1, [pc, #28]	@ 800cc94 <appInit+0x8c>
 800cc78:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800cca8 <appInit+0xa0>
 800cc7c:	4811      	ldr	r0, [pc, #68]	@ (800ccc4 <appInit+0xbc>)
 800cc7e:	f7ff f8a3 	bl	800bdc8 <lpfInit>
}
 800cc82:	bf00      	nop
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	2000008e 	.word	0x2000008e
 800cc8c:	20000ab4 	.word	0x20000ab4
 800cc90:	45160000 	.word	0x45160000
 800cc94:	38d1b717 	.word	0x38d1b717
 800cc98:	4093cd3a 	.word	0x4093cd3a
 800cc9c:	00000000 	.word	0x00000000
 800cca0:	3c23d70a 	.word	0x3c23d70a
 800cca4:	3ecccccd 	.word	0x3ecccccd
 800cca8:	3dcccccd 	.word	0x3dcccccd
 800ccac:	20000ab8 	.word	0x20000ab8
 800ccb0:	3cf5c28f 	.word	0x3cf5c28f
 800ccb4:	20000adc 	.word	0x20000adc
 800ccb8:	3d8f5c29 	.word	0x3d8f5c29
 800ccbc:	20000b00 	.word	0x20000b00
 800ccc0:	20000b0c 	.word	0x20000b0c
 800ccc4:	20000b18 	.word	0x20000b18

0800ccc8 <appRunning>:
static bool zeroReset, _1s;
void appRunning()
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
    _1s = getOneSecFlag();
 800ccce:	f002 fa5b 	bl	800f188 <getOneSecFlag>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	4b65      	ldr	r3, [pc, #404]	@ (800ce6c <appRunning+0x1a4>)
 800ccd8:	701a      	strb	r2, [r3, #0]
    getKeyState(&keyState);
 800ccda:	4865      	ldr	r0, [pc, #404]	@ (800ce70 <appRunning+0x1a8>)
 800ccdc:	f000 fd78 	bl	800d7d0 <getKeyState>
    commander_run(&motor1, &motor2);
 800cce0:	4964      	ldr	r1, [pc, #400]	@ (800ce74 <appRunning+0x1ac>)
 800cce2:	4865      	ldr	r0, [pc, #404]	@ (800ce78 <appRunning+0x1b0>)
 800cce4:	f000 fa2e 	bl	800d144 <commander_run>
    if (++flashCnt >= 10)
 800cce8:	4b64      	ldr	r3, [pc, #400]	@ (800ce7c <appRunning+0x1b4>)
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	3301      	adds	r3, #1
 800ccee:	b2da      	uxtb	r2, r3
 800ccf0:	4b62      	ldr	r3, [pc, #392]	@ (800ce7c <appRunning+0x1b4>)
 800ccf2:	701a      	strb	r2, [r3, #0]
 800ccf4:	4b61      	ldr	r3, [pc, #388]	@ (800ce7c <appRunning+0x1b4>)
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	2b09      	cmp	r3, #9
 800ccfa:	d902      	bls.n	800cd02 <appRunning+0x3a>
        flashCnt = 0;
 800ccfc:	4b5f      	ldr	r3, [pc, #380]	@ (800ce7c <appRunning+0x1b4>)
 800ccfe:	2200      	movs	r2, #0
 800cd00:	701a      	strb	r2, [r3, #0]

    ledOn = 0;
 800cd02:	4b5f      	ldr	r3, [pc, #380]	@ (800ce80 <appRunning+0x1b8>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	701a      	strb	r2, [r3, #0]

#if USE_COMM_TARGET == 0
    uint32_t Vpoten;
    float goalVelocity;
    HAL_ADC_Start(&hadc1);
 800cd08:	485e      	ldr	r0, [pc, #376]	@ (800ce84 <appRunning+0x1bc>)
 800cd0a:	f7f6 fa5f 	bl	80031cc <HAL_ADC_Start>
    // HAL_ADC_Start(&hadc2);
    Vpoten = HAL_ADC_GetValue(&hadc1);
 800cd0e:	485d      	ldr	r0, [pc, #372]	@ (800ce84 <appRunning+0x1bc>)
 800cd10:	f7f6 fb18 	bl	8003344 <HAL_ADC_GetValue>
 800cd14:	60f8      	str	r0, [r7, #12]

    goalVelocity = map(Vpoten, 0, 4095, -MAX_VELOCITY, MAX_VELOCITY);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	ee07 3a90 	vmov	s15, r3
 800cd1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd20:	ed9f 2a59 	vldr	s4, [pc, #356]	@ 800ce88 <appRunning+0x1c0>
 800cd24:	eddf 1a59 	vldr	s3, [pc, #356]	@ 800ce8c <appRunning+0x1c4>
 800cd28:	ed9f 1a59 	vldr	s2, [pc, #356]	@ 800ce90 <appRunning+0x1c8>
 800cd2c:	eddf 0a59 	vldr	s1, [pc, #356]	@ 800ce94 <appRunning+0x1cc>
 800cd30:	eeb0 0a67 	vmov.f32	s0, s15
 800cd34:	f002 f934 	bl	800efa0 <map>
 800cd38:	ed87 0a02 	vstr	s0, [r7, #8]

    // goalVelocity = Vpoten / 4095.0f * MAX_VELOCITY;
    float goalTorqueV = map(Vpoten, 0, 4095, -UqMAX, UqMAX);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	ee07 3a90 	vmov	s15, r3
 800cd42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd46:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 800ce98 <appRunning+0x1d0>
 800cd4a:	eddf 1a54 	vldr	s3, [pc, #336]	@ 800ce9c <appRunning+0x1d4>
 800cd4e:	ed9f 1a50 	vldr	s2, [pc, #320]	@ 800ce90 <appRunning+0x1c8>
 800cd52:	eddf 0a50 	vldr	s1, [pc, #320]	@ 800ce94 <appRunning+0x1cc>
 800cd56:	eeb0 0a67 	vmov.f32	s0, s15
 800cd5a:	f002 f921 	bl	800efa0 <map>
 800cd5e:	ed87 0a01 	vstr	s0, [r7, #4]
    float goalTorqueC = map(Vpoten, 0, 4095, -CURRENT_MAX, CURRENT_MAX);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	ee07 3a90 	vmov	s15, r3
 800cd68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd6c:	ed9f 2a4c 	vldr	s4, [pc, #304]	@ 800cea0 <appRunning+0x1d8>
 800cd70:	eddf 1a4c 	vldr	s3, [pc, #304]	@ 800cea4 <appRunning+0x1dc>
 800cd74:	ed9f 1a46 	vldr	s2, [pc, #280]	@ 800ce90 <appRunning+0x1c8>
 800cd78:	eddf 0a46 	vldr	s1, [pc, #280]	@ 800ce94 <appRunning+0x1cc>
 800cd7c:	eeb0 0a67 	vmov.f32	s0, s15
 800cd80:	f002 f90e 	bl	800efa0 <map>
 800cd84:	ed87 0a00 	vstr	s0, [r7]

    // adc_vbus = HAL_ADC_GetValue(&hadc2);

    // Vbus = adc_vbus * 3.3f / 4096 * 26;

    if (motor1.controlType == VELOCITY || motor1.controlType == VELOCITY_OPEN_LOOP)
 800cd88:	4b3b      	ldr	r3, [pc, #236]	@ (800ce78 <appRunning+0x1b0>)
 800cd8a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800cd8e:	2b02      	cmp	r3, #2
 800cd90:	d004      	beq.n	800cd9c <appRunning+0xd4>
 800cd92:	4b39      	ldr	r3, [pc, #228]	@ (800ce78 <appRunning+0x1b0>)
 800cd94:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d103      	bne.n	800cda4 <appRunning+0xdc>
    {
        motor1.target = goalVelocity;
 800cd9c:	4a36      	ldr	r2, [pc, #216]	@ (800ce78 <appRunning+0x1b0>)
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	6313      	str	r3, [r2, #48]	@ 0x30
 800cda2:	e01f      	b.n	800cde4 <appRunning+0x11c>
    }

    else if (motor1.controlType == ANGLE)
 800cda4:	4b34      	ldr	r3, [pc, #208]	@ (800ce78 <appRunning+0x1b0>)
 800cda6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800cdaa:	2b03      	cmp	r3, #3
 800cdac:	d109      	bne.n	800cdc2 <appRunning+0xfa>
    {
        motor1.target = goalVelocity / 3;
 800cdae:	ed97 7a02 	vldr	s14, [r7, #8]
 800cdb2:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800cdb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cdba:	4b2f      	ldr	r3, [pc, #188]	@ (800ce78 <appRunning+0x1b0>)
 800cdbc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800cdc0:	e010      	b.n	800cde4 <appRunning+0x11c>
    }
    else if (motor1.controlType == TORQUE)
 800cdc2:	4b2d      	ldr	r3, [pc, #180]	@ (800ce78 <appRunning+0x1b0>)
 800cdc4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d10b      	bne.n	800cde4 <appRunning+0x11c>
    {
        if (motor1.torqueType == VOLTAGE)
 800cdcc:	4b2a      	ldr	r3, [pc, #168]	@ (800ce78 <appRunning+0x1b0>)
 800cdce:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d103      	bne.n	800cdde <appRunning+0x116>
        {
            motor1.target = goalTorqueV;
 800cdd6:	4a28      	ldr	r2, [pc, #160]	@ (800ce78 <appRunning+0x1b0>)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6313      	str	r3, [r2, #48]	@ 0x30
 800cddc:	e002      	b.n	800cde4 <appRunning+0x11c>
        }
        else
        {
            motor1.target = goalTorqueC;
 800cdde:	4a26      	ldr	r2, [pc, #152]	@ (800ce78 <appRunning+0x1b0>)
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	6313      	str	r3, [r2, #48]	@ 0x30
        }
    }

    if (motor2.controlType == VELOCITY || motor2.controlType == VELOCITY_OPEN_LOOP)
 800cde4:	4b23      	ldr	r3, [pc, #140]	@ (800ce74 <appRunning+0x1ac>)
 800cde6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800cdea:	2b02      	cmp	r3, #2
 800cdec:	d004      	beq.n	800cdf8 <appRunning+0x130>
 800cdee:	4b21      	ldr	r3, [pc, #132]	@ (800ce74 <appRunning+0x1ac>)
 800cdf0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d103      	bne.n	800ce00 <appRunning+0x138>
    {

        motor2.target = goalVelocity;
 800cdf8:	4a1e      	ldr	r2, [pc, #120]	@ (800ce74 <appRunning+0x1ac>)
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	6313      	str	r3, [r2, #48]	@ 0x30
 800cdfe:	e01f      	b.n	800ce40 <appRunning+0x178>
    }

    else if (motor2.controlType == ANGLE)
 800ce00:	4b1c      	ldr	r3, [pc, #112]	@ (800ce74 <appRunning+0x1ac>)
 800ce02:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800ce06:	2b03      	cmp	r3, #3
 800ce08:	d109      	bne.n	800ce1e <appRunning+0x156>
    {
        motor2.target = goalVelocity / 3;
 800ce0a:	ed97 7a02 	vldr	s14, [r7, #8]
 800ce0e:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800ce12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ce16:	4b17      	ldr	r3, [pc, #92]	@ (800ce74 <appRunning+0x1ac>)
 800ce18:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800ce1c:	e010      	b.n	800ce40 <appRunning+0x178>
    }
    else if (motor2.controlType == TORQUE)
 800ce1e:	4b15      	ldr	r3, [pc, #84]	@ (800ce74 <appRunning+0x1ac>)
 800ce20:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d10b      	bne.n	800ce40 <appRunning+0x178>
    {
        if (motor2.torqueType == VOLTAGE)
 800ce28:	4b12      	ldr	r3, [pc, #72]	@ (800ce74 <appRunning+0x1ac>)
 800ce2a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d103      	bne.n	800ce3a <appRunning+0x172>
        {
            motor2.target = goalTorqueV;
 800ce32:	4a10      	ldr	r2, [pc, #64]	@ (800ce74 <appRunning+0x1ac>)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6313      	str	r3, [r2, #48]	@ 0x30
 800ce38:	e002      	b.n	800ce40 <appRunning+0x178>
        }
        else
        {
            motor2.target = goalTorqueC;
 800ce3a:	4a0e      	ldr	r2, [pc, #56]	@ (800ce74 <appRunning+0x1ac>)
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	6313      	str	r3, [r2, #48]	@ 0x30
        }
    }
#endif

    switch (devState)
 800ce40:	4b19      	ldr	r3, [pc, #100]	@ (800cea8 <appRunning+0x1e0>)
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d002      	beq.n	800ce4e <appRunning+0x186>
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d003      	beq.n	800ce54 <appRunning+0x18c>
 800ce4c:	e005      	b.n	800ce5a <appRunning+0x192>
    {
    case STANDBY:
        standingBy();
 800ce4e:	f000 f82d 	bl	800ceac <standingBy>
        break;
 800ce52:	e002      	b.n	800ce5a <appRunning+0x192>

    case WORK:
        working();
 800ce54:	f000 f86e 	bl	800cf34 <working>
        break;
 800ce58:	bf00      	nop
    }

    LED_drive();
 800ce5a:	f000 fcf7 	bl	800d84c <LED_drive>
    if (_1s)
    {
        // v -= 20;
        // HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v);
    }
    _1s = 0;
 800ce5e:	4b03      	ldr	r3, [pc, #12]	@ (800ce6c <appRunning+0x1a4>)
 800ce60:	2200      	movs	r2, #0
 800ce62:	701a      	strb	r2, [r3, #0]
}
 800ce64:	bf00      	nop
 800ce66:	3710      	adds	r7, #16
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	20000b25 	.word	0x20000b25
 800ce70:	20000810 	.word	0x20000810
 800ce74:	20000974 	.word	0x20000974
 800ce78:	20000834 	.word	0x20000834
 800ce7c:	20000811 	.word	0x20000811
 800ce80:	20000c20 	.word	0x20000c20
 800ce84:	200002c4 	.word	0x200002c4
 800ce88:	43c80000 	.word	0x43c80000
 800ce8c:	c3c80000 	.word	0xc3c80000
 800ce90:	457ff000 	.word	0x457ff000
 800ce94:	00000000 	.word	0x00000000
 800ce98:	4093cd3a 	.word	0x4093cd3a
 800ce9c:	c093cd3a 	.word	0xc093cd3a
 800cea0:	3e4ccccd 	.word	0x3e4ccccd
 800cea4:	be4ccccd 	.word	0xbe4ccccd
 800cea8:	2000008e 	.word	0x2000008e

0800ceac <standingBy>:
static void standingBy()
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	af00      	add	r7, sp, #0
    static bool notFirstTime;
    static uchar cnt;
    ledOn = 1;
 800ceb0:	4b17      	ldr	r3, [pc, #92]	@ (800cf10 <standingBy+0x64>)
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	701a      	strb	r2, [r3, #0]
    //     goToZeroElecAngle(&motor2);
    //     zeroReset = 1;
    // }
    // else
    // {
    motor1.stopPwm();
 800ceb6:	4b17      	ldr	r3, [pc, #92]	@ (800cf14 <standingBy+0x68>)
 800ceb8:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800cebc:	4798      	blx	r3
    motor2.stopPwm();
 800cebe:	4b16      	ldr	r3, [pc, #88]	@ (800cf18 <standingBy+0x6c>)
 800cec0:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800cec4:	4798      	blx	r3
    // }

    //  if (((+cnt >= 30 && notFirstTime == 0) || keyState == USER1_SHORT) && imu.pit <= 30 && imu.pit >= -30)
    if (keyState == USER1_SHORT)
 800cec6:	4b15      	ldr	r3, [pc, #84]	@ (800cf1c <standingBy+0x70>)
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d11e      	bne.n	800cf0c <standingBy+0x60>
    {
        notFirstTime = 1;
 800cece:	4b14      	ldr	r3, [pc, #80]	@ (800cf20 <standingBy+0x74>)
 800ced0:	2201      	movs	r2, #1
 800ced2:	701a      	strb	r2, [r3, #0]
        WORK_INIT;
 800ced4:	4b13      	ldr	r3, [pc, #76]	@ (800cf24 <standingBy+0x78>)
 800ced6:	2201      	movs	r2, #1
 800ced8:	701a      	strb	r2, [r3, #0]
 800ceda:	4b13      	ldr	r3, [pc, #76]	@ (800cf28 <standingBy+0x7c>)
 800cedc:	2200      	movs	r2, #0
 800cede:	701a      	strb	r2, [r3, #0]
 800cee0:	4b0c      	ldr	r3, [pc, #48]	@ (800cf14 <standingBy+0x68>)
 800cee2:	2202      	movs	r2, #2
 800cee4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800cee8:	4b0a      	ldr	r3, [pc, #40]	@ (800cf14 <standingBy+0x68>)
 800ceea:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800ceee:	4798      	blx	r3
 800cef0:	4b09      	ldr	r3, [pc, #36]	@ (800cf18 <standingBy+0x6c>)
 800cef2:	2202      	movs	r2, #2
 800cef4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800cef8:	4b07      	ldr	r3, [pc, #28]	@ (800cf18 <standingBy+0x6c>)
 800cefa:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800cefe:	4798      	blx	r3
 800cf00:	480a      	ldr	r0, [pc, #40]	@ (800cf2c <standingBy+0x80>)
 800cf02:	f7ff fa08 	bl	800c316 <reset>
 800cf06:	480a      	ldr	r0, [pc, #40]	@ (800cf30 <standingBy+0x84>)
 800cf08:	f7ff fa05 	bl	800c316 <reset>
    }
}
 800cf0c:	bf00      	nop
 800cf0e:	bd80      	pop	{r7, pc}
 800cf10:	20000c20 	.word	0x20000c20
 800cf14:	20000834 	.word	0x20000834
 800cf18:	20000974 	.word	0x20000974
 800cf1c:	20000810 	.word	0x20000810
 800cf20:	20000b26 	.word	0x20000b26
 800cf24:	2000008e 	.word	0x2000008e
 800cf28:	20000811 	.word	0x20000811
 800cf2c:	20000ab8 	.word	0x20000ab8
 800cf30:	20000adc 	.word	0x20000adc

0800cf34 <working>:

static void working(void)
{
 800cf34:	b480      	push	{r7}
 800cf36:	af00      	add	r7, sp, #0
    zeroReset = 0;
 800cf38:	4b10      	ldr	r3, [pc, #64]	@ (800cf7c <working+0x48>)
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	701a      	strb	r2, [r3, #0]
    if (flashCnt < 5)
 800cf3e:	4b10      	ldr	r3, [pc, #64]	@ (800cf80 <working+0x4c>)
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	2b04      	cmp	r3, #4
 800cf44:	d802      	bhi.n	800cf4c <working+0x18>
        ledOn = 1;
 800cf46:	4b0f      	ldr	r3, [pc, #60]	@ (800cf84 <working+0x50>)
 800cf48:	2201      	movs	r2, #1
 800cf4a:	701a      	strb	r2, [r3, #0]

    // if (keyState == USER1_SHORT || imu.pit > 60 || imu.pit < -60)
    if (keyState == USER1_SHORT)
 800cf4c:	4b0e      	ldr	r3, [pc, #56]	@ (800cf88 <working+0x54>)
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d10d      	bne.n	800cf70 <working+0x3c>
    {
        STANDBY_INIT;
 800cf54:	4b0d      	ldr	r3, [pc, #52]	@ (800cf8c <working+0x58>)
 800cf56:	2200      	movs	r2, #0
 800cf58:	701a      	strb	r2, [r3, #0]
 800cf5a:	4b09      	ldr	r3, [pc, #36]	@ (800cf80 <working+0x4c>)
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	701a      	strb	r2, [r3, #0]
 800cf60:	4b0b      	ldr	r3, [pc, #44]	@ (800cf90 <working+0x5c>)
 800cf62:	2201      	movs	r2, #1
 800cf64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800cf68:	4b0a      	ldr	r3, [pc, #40]	@ (800cf94 <working+0x60>)
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    //        //     {
    //        //         bldcMotor.focTarget = 23;
    //        //     }
    //        // }
    //    }
}
 800cf70:	bf00      	nop
 800cf72:	46bd      	mov	sp, r7
 800cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf78:	4770      	bx	lr
 800cf7a:	bf00      	nop
 800cf7c:	20000b24 	.word	0x20000b24
 800cf80:	20000811 	.word	0x20000811
 800cf84:	20000c20 	.word	0x20000c20
 800cf88:	20000810 	.word	0x20000810
 800cf8c:	2000008e 	.word	0x2000008e
 800cf90:	20000834 	.word	0x20000834
 800cf94:	20000974 	.word	0x20000974

0800cf98 <HAL_ADCEx_InjectedConvCpltCallback>:

    // sprintf(txBuffer, "pitch : %.2f,  P: %.2f,  I:%.2f, D:%.2f, V1:%.2f, T2:%.2f\n", imu.pit, pid_stb.P, pid_stb.I, pid_stb.D, motor1.magEncoder.velocity, motor2.target);
}

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800cf98:	b5b0      	push	{r4, r5, r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800cfa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800cfaa:	f7f9 fca7 	bl	80068fc <HAL_GPIO_WritePin>
    if (hadc == &hadc1)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	4a2a      	ldr	r2, [pc, #168]	@ (800d05c <HAL_ADCEx_InjectedConvCpltCallback+0xc4>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d146      	bne.n	800d044 <HAL_ADCEx_InjectedConvCpltCallback+0xac>
    {
        static bool shift;
        shift = !shift;
 800cfb6:	4b2a      	ldr	r3, [pc, #168]	@ (800d060 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	bf0c      	ite	eq
 800cfbe:	2301      	moveq	r3, #1
 800cfc0:	2300      	movne	r3, #0
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	4b26      	ldr	r3, [pc, #152]	@ (800d060 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 800cfc8:	701a      	strb	r2, [r3, #0]
        if (shift)
 800cfca:	4b25      	ldr	r3, [pc, #148]	@ (800d060 <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00b      	beq.n	800cfea <HAL_ADCEx_InjectedConvCpltCallback+0x52>
        {
             foc(&motor1, hadc1.Instance->JDR1, hadc2.Instance->JDR1);
 800cfd2:	4b22      	ldr	r3, [pc, #136]	@ (800d05c <HAL_ADCEx_InjectedConvCpltCallback+0xc4>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800cfda:	4b22      	ldr	r3, [pc, #136]	@ (800d064 <HAL_ADCEx_InjectedConvCpltCallback+0xcc>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	4820      	ldr	r0, [pc, #128]	@ (800d068 <HAL_ADCEx_InjectedConvCpltCallback+0xd0>)
 800cfe6:	f7fe faa7 	bl	800b538 <foc>
        else
        {
            //foc(&motor2, hadc1.Instance->JDR2, hadc1.Instance->JDR3);
        }

        dealPer100us();
 800cfea:	f002 f807 	bl	800effc <dealPer100us>

        //         load_data[2] = motor1.Uq;

        // show current

        load_data[0] = motor1.Ia;
 800cfee:	4b1e      	ldr	r3, [pc, #120]	@ (800d068 <HAL_ADCEx_InjectedConvCpltCallback+0xd0>)
 800cff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cff2:	4a1e      	ldr	r2, [pc, #120]	@ (800d06c <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 800cff4:	6013      	str	r3, [r2, #0]
        load_data[1] = motor1.Ib;
 800cff6:	4b1c      	ldr	r3, [pc, #112]	@ (800d068 <HAL_ADCEx_InjectedConvCpltCallback+0xd0>)
 800cff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cffa:	4a1c      	ldr	r2, [pc, #112]	@ (800d06c <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 800cffc:	6053      	str	r3, [r2, #4]
        load_data[2] = motor1.Ic;
 800cffe:	4b1a      	ldr	r3, [pc, #104]	@ (800d068 <HAL_ADCEx_InjectedConvCpltCallback+0xd0>)
 800d000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d002:	4a1a      	ldr	r2, [pc, #104]	@ (800d06c <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 800d004:	6093      	str	r3, [r2, #8]
        // load_data[0] = motor2.Ia;
        // load_data[1] = motor2.Ib;
        // load_data[2] = motor2.Ic;
        load_data[3] = motor1.Ialpha;
 800d006:	4b18      	ldr	r3, [pc, #96]	@ (800d068 <HAL_ADCEx_InjectedConvCpltCallback+0xd0>)
 800d008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d00a:	4a18      	ldr	r2, [pc, #96]	@ (800d06c <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 800d00c:	60d3      	str	r3, [r2, #12]
        load_data[4] = motor1.Ibeta;
 800d00e:	4b16      	ldr	r3, [pc, #88]	@ (800d068 <HAL_ADCEx_InjectedConvCpltCallback+0xd0>)
 800d010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d012:	4a16      	ldr	r2, [pc, #88]	@ (800d06c <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 800d014:	6113      	str	r3, [r2, #16]

        load_data[5] = motor1.Id;
 800d016:	4b14      	ldr	r3, [pc, #80]	@ (800d068 <HAL_ADCEx_InjectedConvCpltCallback+0xd0>)
 800d018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d01a:	4a14      	ldr	r2, [pc, #80]	@ (800d06c <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 800d01c:	6153      	str	r3, [r2, #20]
        load_data[6] = motor1.Iq;
 800d01e:	4b12      	ldr	r3, [pc, #72]	@ (800d068 <HAL_ADCEx_InjectedConvCpltCallback+0xd0>)
 800d020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d022:	4a12      	ldr	r2, [pc, #72]	@ (800d06c <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 800d024:	6193      	str	r3, [r2, #24]
        // load_data[4] = motor2.Uq;

        // load_data[6] = hadc1.Instance->JDR1;
        // load_data[7] = hadc1.Instance->JDR2;

        memcpy(tempData, (uint8_t *)&load_data, sizeof(load_data));
 800d026:	4a12      	ldr	r2, [pc, #72]	@ (800d070 <HAL_ADCEx_InjectedConvCpltCallback+0xd8>)
 800d028:	4b10      	ldr	r3, [pc, #64]	@ (800d06c <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 800d02a:	4614      	mov	r4, r2
 800d02c:	461d      	mov	r5, r3
 800d02e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d032:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d036:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        HAL_UART_Transmit_DMA(&huart3, (uint8_t *)tempData, sizeof(tempData));
 800d03a:	2224      	movs	r2, #36	@ 0x24
 800d03c:	490c      	ldr	r1, [pc, #48]	@ (800d070 <HAL_ADCEx_InjectedConvCpltCallback+0xd8>)
 800d03e:	480d      	ldr	r0, [pc, #52]	@ (800d074 <HAL_ADCEx_InjectedConvCpltCallback+0xdc>)
 800d040:	f7fc fc5e 	bl	8009900 <HAL_UART_Transmit_DMA>
#endif
    }
    HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 800d044:	2200      	movs	r2, #0
 800d046:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d04a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d04e:	f7f9 fc55 	bl	80068fc <HAL_GPIO_WritePin>
}
 800d052:	bf00      	nop
 800d054:	3708      	adds	r7, #8
 800d056:	46bd      	mov	sp, r7
 800d058:	bdb0      	pop	{r4, r5, r7, pc}
 800d05a:	bf00      	nop
 800d05c:	200002c4 	.word	0x200002c4
 800d060:	20000b27 	.word	0x20000b27
 800d064:	20000330 	.word	0x20000330
 800d068:	20000834 	.word	0x20000834
 800d06c:	20000814 	.word	0x20000814
 800d070:	20000090 	.word	0x20000090
 800d074:	200005f4 	.word	0x200005f4

0800d078 <HAL_UARTEx_RxEventCallback>:
uint8_t aRxBuffer;
float comm1, comm2, comm3, comm4, comm5, comm6, comm7, comm8, comm9, comm10, comm11;
extern DMA_HandleTypeDef hdma_usart2_rx;
extern DMA_HandleTypeDef hdma_usart3_rx;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	460b      	mov	r3, r1
 800d082:	807b      	strh	r3, [r7, #2]
  // memset(rxBuffer, '\0', sizeof(rxBuffer));
  if (huart == &huart2)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	4a16      	ldr	r2, [pc, #88]	@ (800d0e0 <HAL_UARTEx_RxEventCallback+0x68>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d110      	bne.n	800d0ae <HAL_UARTEx_RxEventCallback+0x36>
  {
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, sizeof(rxBuffer));
 800d08c:	2264      	movs	r2, #100	@ 0x64
 800d08e:	4915      	ldr	r1, [pc, #84]	@ (800d0e4 <HAL_UARTEx_RxEventCallback+0x6c>)
 800d090:	4813      	ldr	r0, [pc, #76]	@ (800d0e0 <HAL_UARTEx_RxEventCallback+0x68>)
 800d092:	f7fe f842 	bl	800b11a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800d096:	4b14      	ldr	r3, [pc, #80]	@ (800d0e8 <HAL_UARTEx_RxEventCallback+0x70>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	681a      	ldr	r2, [r3, #0]
 800d09c:	4b12      	ldr	r3, [pc, #72]	@ (800d0e8 <HAL_UARTEx_RxEventCallback+0x70>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f022 0204 	bic.w	r2, r2, #4
 800d0a4:	601a      	str	r2, [r3, #0]
    toProcessData = 1;
 800d0a6:	4b11      	ldr	r3, [pc, #68]	@ (800d0ec <HAL_UARTEx_RxEventCallback+0x74>)
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	701a      	strb	r2, [r3, #0]
  {
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
    toProcessData = 1;
  }
}
 800d0ac:	e013      	b.n	800d0d6 <HAL_UARTEx_RxEventCallback+0x5e>
  else if (huart == &huart3)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	4a0f      	ldr	r2, [pc, #60]	@ (800d0f0 <HAL_UARTEx_RxEventCallback+0x78>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d10f      	bne.n	800d0d6 <HAL_UARTEx_RxEventCallback+0x5e>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 800d0b6:	2264      	movs	r2, #100	@ 0x64
 800d0b8:	490a      	ldr	r1, [pc, #40]	@ (800d0e4 <HAL_UARTEx_RxEventCallback+0x6c>)
 800d0ba:	480d      	ldr	r0, [pc, #52]	@ (800d0f0 <HAL_UARTEx_RxEventCallback+0x78>)
 800d0bc:	f7fe f82d 	bl	800b11a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800d0c0:	4b0c      	ldr	r3, [pc, #48]	@ (800d0f4 <HAL_UARTEx_RxEventCallback+0x7c>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	4b0b      	ldr	r3, [pc, #44]	@ (800d0f4 <HAL_UARTEx_RxEventCallback+0x7c>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f022 0204 	bic.w	r2, r2, #4
 800d0ce:	601a      	str	r2, [r3, #0]
    toProcessData = 1;
 800d0d0:	4b06      	ldr	r3, [pc, #24]	@ (800d0ec <HAL_UARTEx_RxEventCallback+0x74>)
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	701a      	strb	r2, [r3, #0]
}
 800d0d6:	bf00      	nop
 800d0d8:	3708      	adds	r7, #8
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	20000560 	.word	0x20000560
 800d0e4:	20000b8c 	.word	0x20000b8c
 800d0e8:	20000688 	.word	0x20000688
 800d0ec:	20000bf0 	.word	0x20000bf0
 800d0f0:	200005f4 	.word	0x200005f4
 800d0f4:	200007a8 	.word	0x200007a8

0800d0f8 <printLog>:

// DMA模式
void printLog(const char *format, ...)
{
 800d0f8:	b40f      	push	{r0, r1, r2, r3}
 800d0fa:	b580      	push	{r7, lr}
 800d0fc:	b0c2      	sub	sp, #264	@ 0x108
 800d0fe:	af00      	add	r7, sp, #0

  va_list args;           // 定义参数列表变量
  va_start(args, format); // 从format位置开始接收参数表，放在arg里面
 800d100:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800d104:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

  char strBuf[256];               // 定义输出的字符串
  vsprintf(strBuf, format, args); // 使用vsprintf将格式化的数据写入缓冲区
 800d108:	1d3b      	adds	r3, r7, #4
 800d10a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800d10e:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800d112:	4618      	mov	r0, r3
 800d114:	f003 fe4a 	bl	8010dac <vsiprintf>
  // while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX)
  // {
  //   // Wait for DMA transfer to complete
  // }
  // HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf));
  HAL_UART_Transmit(&huart3, (uint8_t *)strBuf, strlen(strBuf), 1000);
 800d118:	1d3b      	adds	r3, r7, #4
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7f3 f8d0 	bl	80002c0 <strlen>
 800d120:	4603      	mov	r3, r0
 800d122:	b29a      	uxth	r2, r3
 800d124:	1d39      	adds	r1, r7, #4
 800d126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d12a:	4805      	ldr	r0, [pc, #20]	@ (800d140 <printLog+0x48>)
 800d12c:	f7fc fb5a 	bl	80097e4 <HAL_UART_Transmit>
}
 800d130:	bf00      	nop
 800d132:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d136:	46bd      	mov	sp, r7
 800d138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d13c:	b004      	add	sp, #16
 800d13e:	4770      	bx	lr
 800d140:	200005f4 	.word	0x200005f4

0800d144 <commander_run>:
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
#endif
}

void commander_run(BldcMotor *motor1, BldcMotor *motor2)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
  if (toProcessData == 1)
 800d14e:	4b65      	ldr	r3, [pc, #404]	@ (800d2e4 <commander_run+0x1a0>)
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	2b01      	cmp	r3, #1
 800d154:	f040 80c1 	bne.w	800d2da <commander_run+0x196>
  {
    memset(txBuffer, '\0', sizeof(txBuffer));
 800d158:	2264      	movs	r2, #100	@ 0x64
 800d15a:	2100      	movs	r1, #0
 800d15c:	4862      	ldr	r0, [pc, #392]	@ (800d2e8 <commander_run+0x1a4>)
 800d15e:	f003 fe2f 	bl	8010dc0 <memset>
    // printLog(rxBuffer);
    switch (rxBuffer[0])
 800d162:	4b62      	ldr	r3, [pc, #392]	@ (800d2ec <commander_run+0x1a8>)
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	3b44      	subs	r3, #68	@ 0x44
 800d168:	2b10      	cmp	r3, #16
 800d16a:	f200 80a9 	bhi.w	800d2c0 <commander_run+0x17c>
 800d16e:	a201      	add	r2, pc, #4	@ (adr r2, 800d174 <commander_run+0x30>)
 800d170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d174:	0800d28f 	.word	0x0800d28f
 800d178:	0800d2c1 	.word	0x0800d2c1
 800d17c:	0800d2c1 	.word	0x0800d2c1
 800d180:	0800d2c1 	.word	0x0800d2c1
 800d184:	0800d1ef 	.word	0x0800d1ef
 800d188:	0800d25d 	.word	0x0800d25d
 800d18c:	0800d1b9 	.word	0x0800d1b9
 800d190:	0800d2c1 	.word	0x0800d2c1
 800d194:	0800d2c1 	.word	0x0800d2c1
 800d198:	0800d2c1 	.word	0x0800d2c1
 800d19c:	0800d2c1 	.word	0x0800d2c1
 800d1a0:	0800d2c1 	.word	0x0800d2c1
 800d1a4:	0800d22b 	.word	0x0800d22b
 800d1a8:	0800d2c1 	.word	0x0800d2c1
 800d1ac:	0800d2c1 	.word	0x0800d2c1
 800d1b0:	0800d2c1 	.word	0x0800d2c1
 800d1b4:	0800d1f9 	.word	0x0800d1f9
    {
    case 'J':
      // sprintf(txBuffer, "recved %d bytes\r\n", sizeof(txBuffer));
      char buffer[sizeof(DataPackage)];
      memcpy(buffer, rxBuffer, sizeof(DataPackage));
 800d1b8:	4a4c      	ldr	r2, [pc, #304]	@ (800d2ec <commander_run+0x1a8>)
 800d1ba:	f107 0308 	add.w	r3, r7, #8
 800d1be:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d1c2:	6018      	str	r0, [r3, #0]
 800d1c4:	3304      	adds	r3, #4
 800d1c6:	8019      	strh	r1, [r3, #0]
      //    sprintf(txBuffer, "leftPotX %d, leftPotY %d, rightPotX %d rightPotY %d buttons %d\n", buffer[1], buffer[2], buffer[3], buffer[4], buffer[5]);
      throttle = getThrottle(buffer[2]);
 800d1c8:	7abb      	ldrb	r3, [r7, #10]
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f000 f8a4 	bl	800d318 <getThrottle>
 800d1d0:	eef0 7a40 	vmov.f32	s15, s0
 800d1d4:	4b46      	ldr	r3, [pc, #280]	@ (800d2f0 <commander_run+0x1ac>)
 800d1d6:	edc3 7a00 	vstr	s15, [r3]
      steering = getSteering(buffer[3]);
 800d1da:	7afb      	ldrb	r3, [r7, #11]
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f000 f8e1 	bl	800d3a4 <getSteering>
 800d1e2:	eef0 7a40 	vmov.f32	s15, s0
 800d1e6:	4b43      	ldr	r3, [pc, #268]	@ (800d2f4 <commander_run+0x1b0>)
 800d1e8:	edc3 7a00 	vstr	s15, [r3]
      // sprintf(txBuffer, "throttle %f\n", throttle);
      // sprintf(buffer);
      //   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
      break;
 800d1ec:	e068      	b.n	800d2c0 <commander_run+0x17c>

    case 'H':
      sprintf(txBuffer, "Hello World!\r\n");
 800d1ee:	4942      	ldr	r1, [pc, #264]	@ (800d2f8 <commander_run+0x1b4>)
 800d1f0:	483d      	ldr	r0, [pc, #244]	@ (800d2e8 <commander_run+0x1a4>)
 800d1f2:	f003 fd61 	bl	8010cb8 <siprintf>
      break;
 800d1f6:	e063      	b.n	800d2c0 <commander_run+0x17c>

    case 'T': // T6.28
      motor1->target = atof((const char *)(rxBuffer + 1));
 800d1f8:	4b40      	ldr	r3, [pc, #256]	@ (800d2fc <commander_run+0x1b8>)
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f002 f814 	bl	800f228 <atof>
 800d200:	ec53 2b10 	vmov	r2, r3, d0
 800d204:	4610      	mov	r0, r2
 800d206:	4619      	mov	r1, r3
 800d208:	f7f3 fd16 	bl	8000c38 <__aeabi_d2f>
 800d20c:	4602      	mov	r2, r0
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	631a      	str	r2, [r3, #48]	@ 0x30
      sprintf(txBuffer, "Target=%.2f\r\n", motor1->target);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d216:	4618      	mov	r0, r3
 800d218:	f7f3 f9be 	bl	8000598 <__aeabi_f2d>
 800d21c:	4602      	mov	r2, r0
 800d21e:	460b      	mov	r3, r1
 800d220:	4937      	ldr	r1, [pc, #220]	@ (800d300 <commander_run+0x1bc>)
 800d222:	4831      	ldr	r0, [pc, #196]	@ (800d2e8 <commander_run+0x1a4>)
 800d224:	f003 fd48 	bl	8010cb8 <siprintf>
      // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
      break;
 800d228:	e04a      	b.n	800d2c0 <commander_run+0x17c>
      sprintf(txBuffer, "D=%.2f\r\n", pid_stb.D);
      break;

#elif CALI_VEL_PID
    case 'P': // P0.5
      pid_vel.P = atof((const char *)(rxBuffer + 1));
 800d22a:	4b34      	ldr	r3, [pc, #208]	@ (800d2fc <commander_run+0x1b8>)
 800d22c:	4618      	mov	r0, r3
 800d22e:	f001 fffb 	bl	800f228 <atof>
 800d232:	ec53 2b10 	vmov	r2, r3, d0
 800d236:	4610      	mov	r0, r2
 800d238:	4619      	mov	r1, r3
 800d23a:	f7f3 fcfd 	bl	8000c38 <__aeabi_d2f>
 800d23e:	4603      	mov	r3, r0
 800d240:	4a30      	ldr	r2, [pc, #192]	@ (800d304 <commander_run+0x1c0>)
 800d242:	6013      	str	r3, [r2, #0]
      sprintf(txBuffer, "P=%.3f\r\n", pid_vel.P);
 800d244:	4b2f      	ldr	r3, [pc, #188]	@ (800d304 <commander_run+0x1c0>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4618      	mov	r0, r3
 800d24a:	f7f3 f9a5 	bl	8000598 <__aeabi_f2d>
 800d24e:	4602      	mov	r2, r0
 800d250:	460b      	mov	r3, r1
 800d252:	492d      	ldr	r1, [pc, #180]	@ (800d308 <commander_run+0x1c4>)
 800d254:	4824      	ldr	r0, [pc, #144]	@ (800d2e8 <commander_run+0x1a4>)
 800d256:	f003 fd2f 	bl	8010cb8 <siprintf>
      //   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
      break;
 800d25a:	e031      	b.n	800d2c0 <commander_run+0x17c>

    case 'I': // I0.2
      pid_vel.I = atof((const char *)(rxBuffer + 1));
 800d25c:	4b27      	ldr	r3, [pc, #156]	@ (800d2fc <commander_run+0x1b8>)
 800d25e:	4618      	mov	r0, r3
 800d260:	f001 ffe2 	bl	800f228 <atof>
 800d264:	ec53 2b10 	vmov	r2, r3, d0
 800d268:	4610      	mov	r0, r2
 800d26a:	4619      	mov	r1, r3
 800d26c:	f7f3 fce4 	bl	8000c38 <__aeabi_d2f>
 800d270:	4603      	mov	r3, r0
 800d272:	4a24      	ldr	r2, [pc, #144]	@ (800d304 <commander_run+0x1c0>)
 800d274:	6053      	str	r3, [r2, #4]
      sprintf(txBuffer, "I=%.3f\r\n", pid_vel.I);
 800d276:	4b23      	ldr	r3, [pc, #140]	@ (800d304 <commander_run+0x1c0>)
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7f3 f98c 	bl	8000598 <__aeabi_f2d>
 800d280:	4602      	mov	r2, r0
 800d282:	460b      	mov	r3, r1
 800d284:	4921      	ldr	r1, [pc, #132]	@ (800d30c <commander_run+0x1c8>)
 800d286:	4818      	ldr	r0, [pc, #96]	@ (800d2e8 <commander_run+0x1a4>)
 800d288:	f003 fd16 	bl	8010cb8 <siprintf>
      break;
 800d28c:	e018      	b.n	800d2c0 <commander_run+0x17c>

    case 'D': // I0.2
      pid_vel.D = atof((const char *)(rxBuffer + 1));
 800d28e:	4b1b      	ldr	r3, [pc, #108]	@ (800d2fc <commander_run+0x1b8>)
 800d290:	4618      	mov	r0, r3
 800d292:	f001 ffc9 	bl	800f228 <atof>
 800d296:	ec53 2b10 	vmov	r2, r3, d0
 800d29a:	4610      	mov	r0, r2
 800d29c:	4619      	mov	r1, r3
 800d29e:	f7f3 fccb 	bl	8000c38 <__aeabi_d2f>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	4a17      	ldr	r2, [pc, #92]	@ (800d304 <commander_run+0x1c0>)
 800d2a6:	6093      	str	r3, [r2, #8]
      sprintf(txBuffer, "D=%.3f\r\n", pid_vel.D);
 800d2a8:	4b16      	ldr	r3, [pc, #88]	@ (800d304 <commander_run+0x1c0>)
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7f3 f973 	bl	8000598 <__aeabi_f2d>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	4916      	ldr	r1, [pc, #88]	@ (800d310 <commander_run+0x1cc>)
 800d2b8:	480b      	ldr	r0, [pc, #44]	@ (800d2e8 <commander_run+0x1a4>)
 800d2ba:	f003 fcfd 	bl	8010cb8 <siprintf>
      break;
 800d2be:	bf00      	nop
#endif
    }
    HAL_UART_Transmit_DMA(&huart3, (uint8_t *)txBuffer, sizeof(txBuffer));
 800d2c0:	2264      	movs	r2, #100	@ 0x64
 800d2c2:	4909      	ldr	r1, [pc, #36]	@ (800d2e8 <commander_run+0x1a4>)
 800d2c4:	4813      	ldr	r0, [pc, #76]	@ (800d314 <commander_run+0x1d0>)
 800d2c6:	f7fc fb1b 	bl	8009900 <HAL_UART_Transmit_DMA>
    memset(rxBuffer, '\0', sizeof(rxBuffer));
 800d2ca:	2264      	movs	r2, #100	@ 0x64
 800d2cc:	2100      	movs	r1, #0
 800d2ce:	4807      	ldr	r0, [pc, #28]	@ (800d2ec <commander_run+0x1a8>)
 800d2d0:	f003 fd76 	bl	8010dc0 <memset>
    toProcessData = 0;
 800d2d4:	4b03      	ldr	r3, [pc, #12]	@ (800d2e4 <commander_run+0x1a0>)
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	701a      	strb	r2, [r3, #0]
  }
}
 800d2da:	bf00      	nop
 800d2dc:	3710      	adds	r7, #16
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	20000bf0 	.word	0x20000bf0
 800d2e8:	20000b28 	.word	0x20000b28
 800d2ec:	20000b8c 	.word	0x20000b8c
 800d2f0:	20000bf8 	.word	0x20000bf8
 800d2f4:	20000bf4 	.word	0x20000bf4
 800d2f8:	0801482c 	.word	0x0801482c
 800d2fc:	20000b8d 	.word	0x20000b8d
 800d300:	0801483c 	.word	0x0801483c
 800d304:	20000adc 	.word	0x20000adc
 800d308:	0801484c 	.word	0x0801484c
 800d30c:	08014858 	.word	0x08014858
 800d310:	08014864 	.word	0x08014864
 800d314:	200005f4 	.word	0x200005f4

0800d318 <getThrottle>:
float throttle = 0;
float max_steering = 1;  // 1 V


float getThrottle(unsigned char pm)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	4603      	mov	r3, r0
 800d320:	71fb      	strb	r3, [r7, #7]
    int inByte = map(pm, 0, 255, -125, 125);
 800d322:	79fb      	ldrb	r3, [r7, #7]
 800d324:	ee07 3a90 	vmov	s15, r3
 800d328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d32c:	ed9f 2a18 	vldr	s4, [pc, #96]	@ 800d390 <getThrottle+0x78>
 800d330:	eddf 1a18 	vldr	s3, [pc, #96]	@ 800d394 <getThrottle+0x7c>
 800d334:	ed9f 1a18 	vldr	s2, [pc, #96]	@ 800d398 <getThrottle+0x80>
 800d338:	eddf 0a18 	vldr	s1, [pc, #96]	@ 800d39c <getThrottle+0x84>
 800d33c:	eeb0 0a67 	vmov.f32	s0, s15
 800d340:	f001 fe2e 	bl	800efa0 <map>
 800d344:	eef0 7a40 	vmov.f32	s15, s0
 800d348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d34c:	ee17 3a90 	vmov	r3, s15
 800d350:	60fb      	str	r3, [r7, #12]

  //  printLog("inByte %d\n", inByte);
    if (inByte < -25 || inByte > 25)
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f113 0f19 	cmn.w	r3, #25
 800d358:	db02      	blt.n	800d360 <getThrottle+0x48>
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2b19      	cmp	r3, #25
 800d35e:	dd0e      	ble.n	800d37e <getThrottle+0x66>
    {
        // throttle set-point Byte
        return max_throttle * ((float)inByte) / 125.0;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	ee07 3a90 	vmov	s15, r3
 800d366:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d36a:	4b0d      	ldr	r3, [pc, #52]	@ (800d3a0 <getThrottle+0x88>)
 800d36c:	edd3 7a00 	vldr	s15, [r3]
 800d370:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d374:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800d390 <getThrottle+0x78>
 800d378:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d37c:	e001      	b.n	800d382 <getThrottle+0x6a>
    }
    else
        return 0;
 800d37e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800d39c <getThrottle+0x84>
}
 800d382:	eef0 7a47 	vmov.f32	s15, s14
 800d386:	eeb0 0a67 	vmov.f32	s0, s15
 800d38a:	3710      	adds	r7, #16
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	42fa0000 	.word	0x42fa0000
 800d394:	c2fa0000 	.word	0xc2fa0000
 800d398:	437f0000 	.word	0x437f0000
 800d39c:	00000000 	.word	0x00000000
 800d3a0:	200000b4 	.word	0x200000b4

0800d3a4 <getSteering>:


float getSteering(unsigned char pm)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b084      	sub	sp, #16
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	71fb      	strb	r3, [r7, #7]
    int inByte = map(pm, 0, 255, -125, 125);
 800d3ae:	79fb      	ldrb	r3, [r7, #7]
 800d3b0:	ee07 3a90 	vmov	s15, r3
 800d3b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3b8:	ed9f 2a18 	vldr	s4, [pc, #96]	@ 800d41c <getSteering+0x78>
 800d3bc:	eddf 1a18 	vldr	s3, [pc, #96]	@ 800d420 <getSteering+0x7c>
 800d3c0:	ed9f 1a18 	vldr	s2, [pc, #96]	@ 800d424 <getSteering+0x80>
 800d3c4:	eddf 0a18 	vldr	s1, [pc, #96]	@ 800d428 <getSteering+0x84>
 800d3c8:	eeb0 0a67 	vmov.f32	s0, s15
 800d3cc:	f001 fde8 	bl	800efa0 <map>
 800d3d0:	eef0 7a40 	vmov.f32	s15, s0
 800d3d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d3d8:	ee17 3a90 	vmov	r3, s15
 800d3dc:	60fb      	str	r3, [r7, #12]

    // printLog("inByte %d\n", inByte);
    if (inByte < -25 || inByte > 25)
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f113 0f19 	cmn.w	r3, #25
 800d3e4:	db02      	blt.n	800d3ec <getSteering+0x48>
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2b19      	cmp	r3, #25
 800d3ea:	dd0e      	ble.n	800d40a <getSteering+0x66>
    {
        // throttle set-point Byte
        return max_steering * ((float)inByte) / 125.0;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	ee07 3a90 	vmov	s15, r3
 800d3f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d3f6:	4b0d      	ldr	r3, [pc, #52]	@ (800d42c <getSteering+0x88>)
 800d3f8:	edd3 7a00 	vldr	s15, [r3]
 800d3fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d400:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800d41c <getSteering+0x78>
 800d404:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d408:	e001      	b.n	800d40e <getSteering+0x6a>
    }
    else
        return 0;
 800d40a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800d428 <getSteering+0x84>
}
 800d40e:	eef0 7a47 	vmov.f32	s15, s14
 800d412:	eeb0 0a67 	vmov.f32	s0, s15
 800d416:	3710      	adds	r7, #16
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	42fa0000 	.word	0x42fa0000
 800d420:	c2fa0000 	.word	0xc2fa0000
 800d424:	437f0000 	.word	0x437f0000
 800d428:	00000000 	.word	0x00000000
 800d42c:	200000b8 	.word	0x200000b8

0800d430 <getKeyFlags>:
#include "key.h"

static KeyStruct keyStruct[KEY_NUM];

uint getKeyFlags()
{
 800d430:	b580      	push	{r7, lr}
 800d432:	af00      	add	r7, sp, #0
    static uint keyFlagsBak; // back up keyflags for filtering
    static uchar filterCnt;
    static Byte flags;       // real time key flags with bits operation
    static uint keyFlagsBuf; // return key flags after filtering

    flags.byte = 0;
 800d434:	4b1a      	ldr	r3, [pc, #104]	@ (800d4a0 <getKeyFlags+0x70>)
 800d436:	2200      	movs	r2, #0
 800d438:	701a      	strb	r2, [r3, #0]

    // when IO been multiplexed
    if (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == 0)
 800d43a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800d43e:	4819      	ldr	r0, [pc, #100]	@ (800d4a4 <getKeyFlags+0x74>)
 800d440:	f7f9 fa44 	bl	80068cc <HAL_GPIO_ReadPin>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	d104      	bne.n	800d454 <getKeyFlags+0x24>
    {
        flags.bits.b0 = 1; // SW1
 800d44a:	4a15      	ldr	r2, [pc, #84]	@ (800d4a0 <getKeyFlags+0x70>)
 800d44c:	7813      	ldrb	r3, [r2, #0]
 800d44e:	f043 0301 	orr.w	r3, r3, #1
 800d452:	7013      	strb	r3, [r2, #0]
    }

  
    if (flags.byte == keyFlagsBak)
 800d454:	4b12      	ldr	r3, [pc, #72]	@ (800d4a0 <getKeyFlags+0x70>)
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	461a      	mov	r2, r3
 800d45a:	4b13      	ldr	r3, [pc, #76]	@ (800d4a8 <getKeyFlags+0x78>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	429a      	cmp	r2, r3
 800d460:	d114      	bne.n	800d48c <getKeyFlags+0x5c>
    {
        if (flags.bits.b0)
 800d462:	4b0f      	ldr	r3, [pc, #60]	@ (800d4a0 <getKeyFlags+0x70>)
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	f003 0301 	and.w	r3, r3, #1
 800d46a:	b2db      	uxtb	r3, r3
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d006      	beq.n	800d47e <getKeyFlags+0x4e>
            keyFlagsBuf |= 1;
 800d470:	4b0e      	ldr	r3, [pc, #56]	@ (800d4ac <getKeyFlags+0x7c>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f043 0301 	orr.w	r3, r3, #1
 800d478:	4a0c      	ldr	r2, [pc, #48]	@ (800d4ac <getKeyFlags+0x7c>)
 800d47a:	6013      	str	r3, [r2, #0]
 800d47c:	e00b      	b.n	800d496 <getKeyFlags+0x66>
        else
            keyFlagsBuf &= ~1;
 800d47e:	4b0b      	ldr	r3, [pc, #44]	@ (800d4ac <getKeyFlags+0x7c>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f023 0301 	bic.w	r3, r3, #1
 800d486:	4a09      	ldr	r2, [pc, #36]	@ (800d4ac <getKeyFlags+0x7c>)
 800d488:	6013      	str	r3, [r2, #0]
 800d48a:	e004      	b.n	800d496 <getKeyFlags+0x66>
        // else
        //     keyFlagsBuf &= ~(1 << 2);
    }
    else
    {
        keyFlagsBak = flags.byte;
 800d48c:	4b04      	ldr	r3, [pc, #16]	@ (800d4a0 <getKeyFlags+0x70>)
 800d48e:	781b      	ldrb	r3, [r3, #0]
 800d490:	461a      	mov	r2, r3
 800d492:	4b05      	ldr	r3, [pc, #20]	@ (800d4a8 <getKeyFlags+0x78>)
 800d494:	601a      	str	r2, [r3, #0]
    }
#if DEBUG_KEY
    // displayStuff = keyFlagsBuf;
#endif

    return keyFlagsBuf;
 800d496:	4b05      	ldr	r3, [pc, #20]	@ (800d4ac <getKeyFlags+0x7c>)
 800d498:	681b      	ldr	r3, [r3, #0]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	20000c14 	.word	0x20000c14
 800d4a4:	48000800 	.word	0x48000800
 800d4a8:	20000c18 	.word	0x20000c18
 800d4ac:	20000c1c 	.word	0x20000c1c

0800d4b0 <keyScan>:

void keyScan()
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0

    uint keyFlags;

    keyFlags = getKeyFlags();
 800d4b6:	f7ff ffbb 	bl	800d430 <getKeyFlags>
 800d4ba:	6038      	str	r0, [r7, #0]

    if (keyFlags == 0)
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d13b      	bne.n	800d53a <keyScan+0x8a>
    {
        uchar i;
        for (i = 0; i < KEY_NUM; i++)
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	71fb      	strb	r3, [r7, #7]
 800d4c6:	e035      	b.n	800d534 <keyScan+0x84>
        {
            if (keyStruct[i].keyType == LONG_WITH_SHORT && keyStruct[i].trigCnt > 0)
 800d4c8:	79fa      	ldrb	r2, [r7, #7]
 800d4ca:	4992      	ldr	r1, [pc, #584]	@ (800d714 <keyScan+0x264>)
 800d4cc:	4613      	mov	r3, r2
 800d4ce:	005b      	lsls	r3, r3, #1
 800d4d0:	4413      	add	r3, r2
 800d4d2:	009b      	lsls	r3, r3, #2
 800d4d4:	440b      	add	r3, r1
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d114      	bne.n	800d506 <keyScan+0x56>
 800d4dc:	79fa      	ldrb	r2, [r7, #7]
 800d4de:	498d      	ldr	r1, [pc, #564]	@ (800d714 <keyScan+0x264>)
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	005b      	lsls	r3, r3, #1
 800d4e4:	4413      	add	r3, r2
 800d4e6:	009b      	lsls	r3, r3, #2
 800d4e8:	440b      	add	r3, r1
 800d4ea:	3304      	adds	r3, #4
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d009      	beq.n	800d506 <keyScan+0x56>
            {
                keyStruct[i].trigType = TRIG_SHORT;
 800d4f2:	79fa      	ldrb	r2, [r7, #7]
 800d4f4:	4987      	ldr	r1, [pc, #540]	@ (800d714 <keyScan+0x264>)
 800d4f6:	4613      	mov	r3, r2
 800d4f8:	005b      	lsls	r3, r3, #1
 800d4fa:	4413      	add	r3, r2
 800d4fc:	009b      	lsls	r3, r3, #2
 800d4fe:	440b      	add	r3, r1
 800d500:	3308      	adds	r3, #8
 800d502:	2201      	movs	r2, #1
 800d504:	701a      	strb	r2, [r3, #0]
            }
            keyStruct[i].trigCnt = 0;
 800d506:	79fa      	ldrb	r2, [r7, #7]
 800d508:	4982      	ldr	r1, [pc, #520]	@ (800d714 <keyScan+0x264>)
 800d50a:	4613      	mov	r3, r2
 800d50c:	005b      	lsls	r3, r3, #1
 800d50e:	4413      	add	r3, r2
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	440b      	add	r3, r1
 800d514:	3304      	adds	r3, #4
 800d516:	2200      	movs	r2, #0
 800d518:	601a      	str	r2, [r3, #0]
            keyStruct[i].preKeyValue = NO_TRIG;
 800d51a:	79fa      	ldrb	r2, [r7, #7]
 800d51c:	497d      	ldr	r1, [pc, #500]	@ (800d714 <keyScan+0x264>)
 800d51e:	4613      	mov	r3, r2
 800d520:	005b      	lsls	r3, r3, #1
 800d522:	4413      	add	r3, r2
 800d524:	009b      	lsls	r3, r3, #2
 800d526:	440b      	add	r3, r1
 800d528:	3309      	adds	r3, #9
 800d52a:	2200      	movs	r2, #0
 800d52c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < KEY_NUM; i++)
 800d52e:	79fb      	ldrb	r3, [r7, #7]
 800d530:	3301      	adds	r3, #1
 800d532:	71fb      	strb	r3, [r7, #7]
 800d534:	79fb      	ldrb	r3, [r7, #7]
 800d536:	2b01      	cmp	r3, #1
 800d538:	d9c6      	bls.n	800d4c8 <keyScan+0x18>
        }
    }


    if (keyStruct[1].preKeyValue == NO_TRIG)
 800d53a:	4b76      	ldr	r3, [pc, #472]	@ (800d714 <keyScan+0x264>)
 800d53c:	7d5b      	ldrb	r3, [r3, #21]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d131      	bne.n	800d5a6 <keyScan+0xf6>
    {
        if (keyFlags == K(1))
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	2b01      	cmp	r3, #1
 800d546:	d15d      	bne.n	800d604 <keyScan+0x154>
        {
            if (keyStruct[1].preKeyValue == NO_TRIG)
 800d548:	4b72      	ldr	r3, [pc, #456]	@ (800d714 <keyScan+0x264>)
 800d54a:	7d5b      	ldrb	r3, [r3, #21]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d159      	bne.n	800d604 <keyScan+0x154>
            {
                if (keyStruct[1].keyType == SHORT || keyStruct[1].keyType == CONTINUOUS)
 800d550:	4b70      	ldr	r3, [pc, #448]	@ (800d714 <keyScan+0x264>)
 800d552:	7b1b      	ldrb	r3, [r3, #12]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d003      	beq.n	800d560 <keyScan+0xb0>
 800d558:	4b6e      	ldr	r3, [pc, #440]	@ (800d714 <keyScan+0x264>)
 800d55a:	7b1b      	ldrb	r3, [r3, #12]
 800d55c:	2b02      	cmp	r3, #2
 800d55e:	d106      	bne.n	800d56e <keyScan+0xbe>
                {
                    keyStruct[1].trigType = TRIG_SHORT;
 800d560:	4b6c      	ldr	r3, [pc, #432]	@ (800d714 <keyScan+0x264>)
 800d562:	2201      	movs	r2, #1
 800d564:	751a      	strb	r2, [r3, #20]
                    keyStruct[1].preKeyValue = TRIG_SHORT;
 800d566:	4b6b      	ldr	r3, [pc, #428]	@ (800d714 <keyScan+0x264>)
 800d568:	2201      	movs	r2, #1
 800d56a:	755a      	strb	r2, [r3, #21]
 800d56c:	e04a      	b.n	800d604 <keyScan+0x154>
                }
                else if (keyStruct[1].keyType == LONG_WITH_SHORT || keyStruct[1].keyType == LONG)
 800d56e:	4b69      	ldr	r3, [pc, #420]	@ (800d714 <keyScan+0x264>)
 800d570:	7b1b      	ldrb	r3, [r3, #12]
 800d572:	2b01      	cmp	r3, #1
 800d574:	d003      	beq.n	800d57e <keyScan+0xce>
 800d576:	4b67      	ldr	r3, [pc, #412]	@ (800d714 <keyScan+0x264>)
 800d578:	7b1b      	ldrb	r3, [r3, #12]
 800d57a:	2b03      	cmp	r3, #3
 800d57c:	d142      	bne.n	800d604 <keyScan+0x154>
                {
                    if (++keyStruct[1].trigCnt >= KEY1_LONG_CNT)
 800d57e:	4b65      	ldr	r3, [pc, #404]	@ (800d714 <keyScan+0x264>)
 800d580:	691b      	ldr	r3, [r3, #16]
 800d582:	3301      	adds	r3, #1
 800d584:	4a63      	ldr	r2, [pc, #396]	@ (800d714 <keyScan+0x264>)
 800d586:	6113      	str	r3, [r2, #16]
 800d588:	4b62      	ldr	r3, [pc, #392]	@ (800d714 <keyScan+0x264>)
 800d58a:	691b      	ldr	r3, [r3, #16]
 800d58c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d590:	d338      	bcc.n	800d604 <keyScan+0x154>
                    {
                        keyStruct[1].trigCnt = 0;
 800d592:	4b60      	ldr	r3, [pc, #384]	@ (800d714 <keyScan+0x264>)
 800d594:	2200      	movs	r2, #0
 800d596:	611a      	str	r2, [r3, #16]
                        keyStruct[1].trigType = TRIG_LONG;
 800d598:	4b5e      	ldr	r3, [pc, #376]	@ (800d714 <keyScan+0x264>)
 800d59a:	2202      	movs	r2, #2
 800d59c:	751a      	strb	r2, [r3, #20]
                        keyStruct[1].preKeyValue = TRIG_LONG;
 800d59e:	4b5d      	ldr	r3, [pc, #372]	@ (800d714 <keyScan+0x264>)
 800d5a0:	2202      	movs	r2, #2
 800d5a2:	755a      	strb	r2, [r3, #21]
 800d5a4:	e02e      	b.n	800d604 <keyScan+0x154>
                    }
                }
            }
        }
    }
    else if (keyStruct[1].keyType == CONTINUOUS)
 800d5a6:	4b5b      	ldr	r3, [pc, #364]	@ (800d714 <keyScan+0x264>)
 800d5a8:	7b1b      	ldrb	r3, [r3, #12]
 800d5aa:	2b02      	cmp	r3, #2
 800d5ac:	d12a      	bne.n	800d604 <keyScan+0x154>
    {
        if (keyStruct[1].preKeyValue == TRIG_SHORT) // short key
 800d5ae:	4b59      	ldr	r3, [pc, #356]	@ (800d714 <keyScan+0x264>)
 800d5b0:	7d5b      	ldrb	r3, [r3, #21]
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d112      	bne.n	800d5dc <keyScan+0x12c>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_TRIG_CNT)
 800d5b6:	4b57      	ldr	r3, [pc, #348]	@ (800d714 <keyScan+0x264>)
 800d5b8:	691b      	ldr	r3, [r3, #16]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	4a55      	ldr	r2, [pc, #340]	@ (800d714 <keyScan+0x264>)
 800d5be:	6113      	str	r3, [r2, #16]
 800d5c0:	4b54      	ldr	r3, [pc, #336]	@ (800d714 <keyScan+0x264>)
 800d5c2:	691b      	ldr	r3, [r3, #16]
 800d5c4:	2b63      	cmp	r3, #99	@ 0x63
 800d5c6:	d91d      	bls.n	800d604 <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800d5c8:	4b52      	ldr	r3, [pc, #328]	@ (800d714 <keyScan+0x264>)
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = TRIG_LONG; // long
 800d5ce:	4b51      	ldr	r3, [pc, #324]	@ (800d714 <keyScan+0x264>)
 800d5d0:	2202      	movs	r2, #2
 800d5d2:	751a      	strb	r2, [r3, #20]
                keyStruct[1].preKeyValue = TRIG_LONG;
 800d5d4:	4b4f      	ldr	r3, [pc, #316]	@ (800d714 <keyScan+0x264>)
 800d5d6:	2202      	movs	r2, #2
 800d5d8:	755a      	strb	r2, [r3, #21]
 800d5da:	e013      	b.n	800d604 <keyScan+0x154>
            }
        }
        else if (keyStruct[1].preKeyValue == TRIG_LONG) // long key
 800d5dc:	4b4d      	ldr	r3, [pc, #308]	@ (800d714 <keyScan+0x264>)
 800d5de:	7d5b      	ldrb	r3, [r3, #21]
 800d5e0:	2b02      	cmp	r3, #2
 800d5e2:	d10f      	bne.n	800d604 <keyScan+0x154>
        {
            if (++keyStruct[1].trigCnt >= CONTINUOUS_INTEVAL)
 800d5e4:	4b4b      	ldr	r3, [pc, #300]	@ (800d714 <keyScan+0x264>)
 800d5e6:	691b      	ldr	r3, [r3, #16]
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	4a4a      	ldr	r2, [pc, #296]	@ (800d714 <keyScan+0x264>)
 800d5ec:	6113      	str	r3, [r2, #16]
 800d5ee:	4b49      	ldr	r3, [pc, #292]	@ (800d714 <keyScan+0x264>)
 800d5f0:	691b      	ldr	r3, [r3, #16]
 800d5f2:	2b27      	cmp	r3, #39	@ 0x27
 800d5f4:	d906      	bls.n	800d604 <keyScan+0x154>
            {
                keyStruct[1].trigCnt = 0;
 800d5f6:	4b47      	ldr	r3, [pc, #284]	@ (800d714 <keyScan+0x264>)
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	611a      	str	r2, [r3, #16]
                keyStruct[1].trigType = keyStruct[1].preKeyValue;
 800d5fc:	4b45      	ldr	r3, [pc, #276]	@ (800d714 <keyScan+0x264>)
 800d5fe:	7d5a      	ldrb	r2, [r3, #21]
 800d600:	4b44      	ldr	r3, [pc, #272]	@ (800d714 <keyScan+0x264>)
 800d602:	751a      	strb	r2, [r3, #20]
            }
        }
    }

    if (keyStruct[2].preKeyValue == NO_TRIG)
 800d604:	4b43      	ldr	r3, [pc, #268]	@ (800d714 <keyScan+0x264>)
 800d606:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d131      	bne.n	800d672 <keyScan+0x1c2>
    {
        if (keyFlags == K(2))
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	2b02      	cmp	r3, #2
 800d612:	d163      	bne.n	800d6dc <keyScan+0x22c>
        {

            if (keyStruct[2].keyType == SHORT || keyStruct[2].keyType == CONTINUOUS)
 800d614:	4b3f      	ldr	r3, [pc, #252]	@ (800d714 <keyScan+0x264>)
 800d616:	7e1b      	ldrb	r3, [r3, #24]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d003      	beq.n	800d624 <keyScan+0x174>
 800d61c:	4b3d      	ldr	r3, [pc, #244]	@ (800d714 <keyScan+0x264>)
 800d61e:	7e1b      	ldrb	r3, [r3, #24]
 800d620:	2b02      	cmp	r3, #2
 800d622:	d108      	bne.n	800d636 <keyScan+0x186>
            {
                keyStruct[2].trigType = TRIG_SHORT;
 800d624:	4b3b      	ldr	r3, [pc, #236]	@ (800d714 <keyScan+0x264>)
 800d626:	2201      	movs	r2, #1
 800d628:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_SHORT;
 800d62c:	4b39      	ldr	r3, [pc, #228]	@ (800d714 <keyScan+0x264>)
 800d62e:	2201      	movs	r2, #1
 800d630:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800d634:	e052      	b.n	800d6dc <keyScan+0x22c>
            }
            else if (keyStruct[2].keyType == LONG_WITH_SHORT || keyStruct[2].keyType == LONG)
 800d636:	4b37      	ldr	r3, [pc, #220]	@ (800d714 <keyScan+0x264>)
 800d638:	7e1b      	ldrb	r3, [r3, #24]
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d003      	beq.n	800d646 <keyScan+0x196>
 800d63e:	4b35      	ldr	r3, [pc, #212]	@ (800d714 <keyScan+0x264>)
 800d640:	7e1b      	ldrb	r3, [r3, #24]
 800d642:	2b03      	cmp	r3, #3
 800d644:	d14a      	bne.n	800d6dc <keyScan+0x22c>
            {
                if (++keyStruct[2].trigCnt >= KEY2_LONG_CNT)
 800d646:	4b33      	ldr	r3, [pc, #204]	@ (800d714 <keyScan+0x264>)
 800d648:	69db      	ldr	r3, [r3, #28]
 800d64a:	3301      	adds	r3, #1
 800d64c:	4a31      	ldr	r2, [pc, #196]	@ (800d714 <keyScan+0x264>)
 800d64e:	61d3      	str	r3, [r2, #28]
 800d650:	4b30      	ldr	r3, [pc, #192]	@ (800d714 <keyScan+0x264>)
 800d652:	69db      	ldr	r3, [r3, #28]
 800d654:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d658:	d340      	bcc.n	800d6dc <keyScan+0x22c>
                {
                    keyStruct[2].trigCnt = 0;
 800d65a:	4b2e      	ldr	r3, [pc, #184]	@ (800d714 <keyScan+0x264>)
 800d65c:	2200      	movs	r2, #0
 800d65e:	61da      	str	r2, [r3, #28]
                    keyStruct[2].trigType = TRIG_LONG;
 800d660:	4b2c      	ldr	r3, [pc, #176]	@ (800d714 <keyScan+0x264>)
 800d662:	2202      	movs	r2, #2
 800d664:	f883 2020 	strb.w	r2, [r3, #32]
                    keyStruct[2].preKeyValue = TRIG_LONG;
 800d668:	4b2a      	ldr	r3, [pc, #168]	@ (800d714 <keyScan+0x264>)
 800d66a:	2202      	movs	r2, #2
 800d66c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800d670:	e034      	b.n	800d6dc <keyScan+0x22c>
                }
            }
        }
    }
    else if (keyStruct[2].keyType == CONTINUOUS)
 800d672:	4b28      	ldr	r3, [pc, #160]	@ (800d714 <keyScan+0x264>)
 800d674:	7e1b      	ldrb	r3, [r3, #24]
 800d676:	2b02      	cmp	r3, #2
 800d678:	d130      	bne.n	800d6dc <keyScan+0x22c>
    {
        if (keyStruct[2].preKeyValue == TRIG_SHORT) // short key
 800d67a:	4b26      	ldr	r3, [pc, #152]	@ (800d714 <keyScan+0x264>)
 800d67c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d680:	2b01      	cmp	r3, #1
 800d682:	d114      	bne.n	800d6ae <keyScan+0x1fe>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_TRIG_CNT)
 800d684:	4b23      	ldr	r3, [pc, #140]	@ (800d714 <keyScan+0x264>)
 800d686:	69db      	ldr	r3, [r3, #28]
 800d688:	3301      	adds	r3, #1
 800d68a:	4a22      	ldr	r2, [pc, #136]	@ (800d714 <keyScan+0x264>)
 800d68c:	61d3      	str	r3, [r2, #28]
 800d68e:	4b21      	ldr	r3, [pc, #132]	@ (800d714 <keyScan+0x264>)
 800d690:	69db      	ldr	r3, [r3, #28]
 800d692:	2b63      	cmp	r3, #99	@ 0x63
 800d694:	d922      	bls.n	800d6dc <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800d696:	4b1f      	ldr	r3, [pc, #124]	@ (800d714 <keyScan+0x264>)
 800d698:	2200      	movs	r2, #0
 800d69a:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = TRIG_LONG; // long
 800d69c:	4b1d      	ldr	r3, [pc, #116]	@ (800d714 <keyScan+0x264>)
 800d69e:	2202      	movs	r2, #2
 800d6a0:	f883 2020 	strb.w	r2, [r3, #32]
                keyStruct[2].preKeyValue = TRIG_LONG;
 800d6a4:	4b1b      	ldr	r3, [pc, #108]	@ (800d714 <keyScan+0x264>)
 800d6a6:	2202      	movs	r2, #2
 800d6a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800d6ac:	e016      	b.n	800d6dc <keyScan+0x22c>
            }
        }
        else if (keyStruct[2].preKeyValue == TRIG_LONG) // long key
 800d6ae:	4b19      	ldr	r3, [pc, #100]	@ (800d714 <keyScan+0x264>)
 800d6b0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	d111      	bne.n	800d6dc <keyScan+0x22c>
        {
            if (++keyStruct[2].trigCnt >= CONTINUOUS_INTEVAL)
 800d6b8:	4b16      	ldr	r3, [pc, #88]	@ (800d714 <keyScan+0x264>)
 800d6ba:	69db      	ldr	r3, [r3, #28]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	4a15      	ldr	r2, [pc, #84]	@ (800d714 <keyScan+0x264>)
 800d6c0:	61d3      	str	r3, [r2, #28]
 800d6c2:	4b14      	ldr	r3, [pc, #80]	@ (800d714 <keyScan+0x264>)
 800d6c4:	69db      	ldr	r3, [r3, #28]
 800d6c6:	2b27      	cmp	r3, #39	@ 0x27
 800d6c8:	d908      	bls.n	800d6dc <keyScan+0x22c>
            {
                keyStruct[2].trigCnt = 0;
 800d6ca:	4b12      	ldr	r3, [pc, #72]	@ (800d714 <keyScan+0x264>)
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	61da      	str	r2, [r3, #28]
                keyStruct[2].trigType = keyStruct[2].preKeyValue;
 800d6d0:	4b10      	ldr	r3, [pc, #64]	@ (800d714 <keyScan+0x264>)
 800d6d2:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800d6d6:	4b0f      	ldr	r3, [pc, #60]	@ (800d714 <keyScan+0x264>)
 800d6d8:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }

    if (keyStruct[3].preKeyValue == NO_TRIG)
 800d6dc:	4b0d      	ldr	r3, [pc, #52]	@ (800d714 <keyScan+0x264>)
 800d6de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d137      	bne.n	800d756 <keyScan+0x2a6>
    {
        if (keyFlags == K(3))
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	2b04      	cmp	r3, #4
 800d6ea:	d16a      	bne.n	800d7c2 <keyScan+0x312>
        {
            if (keyStruct[3].keyType == SHORT || keyStruct[3].keyType == CONTINUOUS)
 800d6ec:	4b09      	ldr	r3, [pc, #36]	@ (800d714 <keyScan+0x264>)
 800d6ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d004      	beq.n	800d700 <keyScan+0x250>
 800d6f6:	4b07      	ldr	r3, [pc, #28]	@ (800d714 <keyScan+0x264>)
 800d6f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d6fc:	2b02      	cmp	r3, #2
 800d6fe:	d10b      	bne.n	800d718 <keyScan+0x268>
            {
                keyStruct[3].trigType = TRIG_SHORT;
 800d700:	4b04      	ldr	r3, [pc, #16]	@ (800d714 <keyScan+0x264>)
 800d702:	2201      	movs	r2, #1
 800d704:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_SHORT;
 800d708:	4b02      	ldr	r3, [pc, #8]	@ (800d714 <keyScan+0x264>)
 800d70a:	2201      	movs	r2, #1
 800d70c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                keyStruct[3].trigCnt = 0;
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
            }
        }
    }
}
 800d710:	e057      	b.n	800d7c2 <keyScan+0x312>
 800d712:	bf00      	nop
 800d714:	20000bfc 	.word	0x20000bfc
            else if (keyStruct[3].keyType == LONG_WITH_SHORT || keyStruct[3].keyType == LONG)
 800d718:	4b2c      	ldr	r3, [pc, #176]	@ (800d7cc <keyScan+0x31c>)
 800d71a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d004      	beq.n	800d72c <keyScan+0x27c>
 800d722:	4b2a      	ldr	r3, [pc, #168]	@ (800d7cc <keyScan+0x31c>)
 800d724:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d728:	2b03      	cmp	r3, #3
 800d72a:	d14a      	bne.n	800d7c2 <keyScan+0x312>
                if (++keyStruct[3].trigCnt >= KEY3_LONG_CNT)
 800d72c:	4b27      	ldr	r3, [pc, #156]	@ (800d7cc <keyScan+0x31c>)
 800d72e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d730:	3301      	adds	r3, #1
 800d732:	4a26      	ldr	r2, [pc, #152]	@ (800d7cc <keyScan+0x31c>)
 800d734:	6293      	str	r3, [r2, #40]	@ 0x28
 800d736:	4b25      	ldr	r3, [pc, #148]	@ (800d7cc <keyScan+0x31c>)
 800d738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d041      	beq.n	800d7c2 <keyScan+0x312>
                    keyStruct[3].trigCnt = 0;
 800d73e:	4b23      	ldr	r3, [pc, #140]	@ (800d7cc <keyScan+0x31c>)
 800d740:	2200      	movs	r2, #0
 800d742:	629a      	str	r2, [r3, #40]	@ 0x28
                    keyStruct[3].trigType = TRIG_LONG;
 800d744:	4b21      	ldr	r3, [pc, #132]	@ (800d7cc <keyScan+0x31c>)
 800d746:	2202      	movs	r2, #2
 800d748:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                    keyStruct[3].preKeyValue = TRIG_LONG;
 800d74c:	4b1f      	ldr	r3, [pc, #124]	@ (800d7cc <keyScan+0x31c>)
 800d74e:	2202      	movs	r2, #2
 800d750:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800d754:	e035      	b.n	800d7c2 <keyScan+0x312>
    else if (keyStruct[3].keyType == CONTINUOUS)
 800d756:	4b1d      	ldr	r3, [pc, #116]	@ (800d7cc <keyScan+0x31c>)
 800d758:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d75c:	2b02      	cmp	r3, #2
 800d75e:	d130      	bne.n	800d7c2 <keyScan+0x312>
        if (keyStruct[3].preKeyValue == TRIG_SHORT) // short key
 800d760:	4b1a      	ldr	r3, [pc, #104]	@ (800d7cc <keyScan+0x31c>)
 800d762:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d766:	2b01      	cmp	r3, #1
 800d768:	d114      	bne.n	800d794 <keyScan+0x2e4>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_TRIG_CNT)
 800d76a:	4b18      	ldr	r3, [pc, #96]	@ (800d7cc <keyScan+0x31c>)
 800d76c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d76e:	3301      	adds	r3, #1
 800d770:	4a16      	ldr	r2, [pc, #88]	@ (800d7cc <keyScan+0x31c>)
 800d772:	6293      	str	r3, [r2, #40]	@ 0x28
 800d774:	4b15      	ldr	r3, [pc, #84]	@ (800d7cc <keyScan+0x31c>)
 800d776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d778:	2b63      	cmp	r3, #99	@ 0x63
 800d77a:	d922      	bls.n	800d7c2 <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800d77c:	4b13      	ldr	r3, [pc, #76]	@ (800d7cc <keyScan+0x31c>)
 800d77e:	2200      	movs	r2, #0
 800d780:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = TRIG_LONG; // long
 800d782:	4b12      	ldr	r3, [pc, #72]	@ (800d7cc <keyScan+0x31c>)
 800d784:	2202      	movs	r2, #2
 800d786:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                keyStruct[3].preKeyValue = TRIG_LONG;
 800d78a:	4b10      	ldr	r3, [pc, #64]	@ (800d7cc <keyScan+0x31c>)
 800d78c:	2202      	movs	r2, #2
 800d78e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800d792:	e016      	b.n	800d7c2 <keyScan+0x312>
        else if (keyStruct[3].preKeyValue == TRIG_LONG) // long key
 800d794:	4b0d      	ldr	r3, [pc, #52]	@ (800d7cc <keyScan+0x31c>)
 800d796:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d79a:	2b02      	cmp	r3, #2
 800d79c:	d111      	bne.n	800d7c2 <keyScan+0x312>
            if (++keyStruct[3].trigCnt >= CONTINUOUS_INTEVAL)
 800d79e:	4b0b      	ldr	r3, [pc, #44]	@ (800d7cc <keyScan+0x31c>)
 800d7a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	4a09      	ldr	r2, [pc, #36]	@ (800d7cc <keyScan+0x31c>)
 800d7a6:	6293      	str	r3, [r2, #40]	@ 0x28
 800d7a8:	4b08      	ldr	r3, [pc, #32]	@ (800d7cc <keyScan+0x31c>)
 800d7aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7ac:	2b27      	cmp	r3, #39	@ 0x27
 800d7ae:	d908      	bls.n	800d7c2 <keyScan+0x312>
                keyStruct[3].trigCnt = 0;
 800d7b0:	4b06      	ldr	r3, [pc, #24]	@ (800d7cc <keyScan+0x31c>)
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	629a      	str	r2, [r3, #40]	@ 0x28
                keyStruct[3].trigType = keyStruct[3].preKeyValue;
 800d7b6:	4b05      	ldr	r3, [pc, #20]	@ (800d7cc <keyScan+0x31c>)
 800d7b8:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800d7bc:	4b03      	ldr	r3, [pc, #12]	@ (800d7cc <keyScan+0x31c>)
 800d7be:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 800d7c2:	bf00      	nop
 800d7c4:	3708      	adds	r7, #8
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	20000bfc 	.word	0x20000bfc

0800d7d0 <getKeyState>:

/*
将物理按键转化为逻辑按键
 */
void getKeyState(KeyState *keyState)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b085      	sub	sp, #20
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
    uchar i;

    if (keyStruct[1].trigType == TRIG_SHORT)
 800d7d8:	4b1b      	ldr	r3, [pc, #108]	@ (800d848 <getKeyState+0x78>)
 800d7da:	7d1b      	ldrb	r3, [r3, #20]
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d103      	bne.n	800d7e8 <getKeyState+0x18>
        *keyState = USER1_SHORT;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	701a      	strb	r2, [r3, #0]
 800d7e6:	e014      	b.n	800d812 <getKeyState+0x42>
    else if (keyStruct[2].trigType == TRIG_SHORT)
 800d7e8:	4b17      	ldr	r3, [pc, #92]	@ (800d848 <getKeyState+0x78>)
 800d7ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d103      	bne.n	800d7fa <getKeyState+0x2a>
        *keyState = USER2_SHORT;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2202      	movs	r2, #2
 800d7f6:	701a      	strb	r2, [r3, #0]
 800d7f8:	e00b      	b.n	800d812 <getKeyState+0x42>
    else if (keyStruct[3].trigType == TRIG_SHORT)
 800d7fa:	4b13      	ldr	r3, [pc, #76]	@ (800d848 <getKeyState+0x78>)
 800d7fc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d800:	2b01      	cmp	r3, #1
 800d802:	d103      	bne.n	800d80c <getKeyState+0x3c>
        *keyState = USER3_SHORT;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2203      	movs	r2, #3
 800d808:	701a      	strb	r2, [r3, #0]
 800d80a:	e002      	b.n	800d812 <getKeyState+0x42>
    else
        *keyState = NONE_KEY;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < KEY_NUM; i++)
 800d812:	2300      	movs	r3, #0
 800d814:	73fb      	strb	r3, [r7, #15]
 800d816:	e00c      	b.n	800d832 <getKeyState+0x62>
    {
        keyStruct[i].trigType = NO_TRIG;
 800d818:	7bfa      	ldrb	r2, [r7, #15]
 800d81a:	490b      	ldr	r1, [pc, #44]	@ (800d848 <getKeyState+0x78>)
 800d81c:	4613      	mov	r3, r2
 800d81e:	005b      	lsls	r3, r3, #1
 800d820:	4413      	add	r3, r2
 800d822:	009b      	lsls	r3, r3, #2
 800d824:	440b      	add	r3, r1
 800d826:	3308      	adds	r3, #8
 800d828:	2200      	movs	r2, #0
 800d82a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < KEY_NUM; i++)
 800d82c:	7bfb      	ldrb	r3, [r7, #15]
 800d82e:	3301      	adds	r3, #1
 800d830:	73fb      	strb	r3, [r7, #15]
 800d832:	7bfb      	ldrb	r3, [r7, #15]
 800d834:	2b01      	cmp	r3, #1
 800d836:	d9ef      	bls.n	800d818 <getKeyState+0x48>
    }
}
 800d838:	bf00      	nop
 800d83a:	bf00      	nop
 800d83c:	3714      	adds	r7, #20
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr
 800d846:	bf00      	nop
 800d848:	20000bfc 	.word	0x20000bfc

0800d84c <LED_drive>:
#include "led.h"

bool ledOn;

void LED_drive()
{
 800d84c:	b480      	push	{r7}
 800d84e:	af00      	add	r7, sp, #0
    // if (ledOn)
    //     LED_ON;
    // else
    //     LED_OFF;
}
 800d850:	bf00      	nop
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr
	...

0800d85c <inv_sqrt>:

// 快速平方根倒数，计算 1/Sqrt(x)
// X:数字还需要计算
// 调用imu ahrs update()函数
float inv_sqrt(float x)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b087      	sub	sp, #28
 800d860:	af00      	add	r7, sp, #0
 800d862:	ed87 0a01 	vstr	s0, [r7, #4]
    float halfx = 0.5f * x;
 800d866:	edd7 7a01 	vldr	s15, [r7, #4]
 800d86a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d86e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d872:	edc7 7a05 	vstr	s15, [r7, #20]
    float y = x;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	613b      	str	r3, [r7, #16]
    long i = *(long *)&y;
 800d87a:	f107 0310 	add.w	r3, r7, #16
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	60fb      	str	r3, [r7, #12]

    i = 0x5f3759df - (i >> 1);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	105a      	asrs	r2, r3, #1
 800d886:	4b12      	ldr	r3, [pc, #72]	@ (800d8d0 <inv_sqrt+0x74>)
 800d888:	1a9b      	subs	r3, r3, r2
 800d88a:	60fb      	str	r3, [r7, #12]
    y = *(float *)&i;
 800d88c:	f107 030c 	add.w	r3, r7, #12
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	613b      	str	r3, [r7, #16]
    y = y * (1.5f - (halfx * y * y));
 800d894:	ed97 7a04 	vldr	s14, [r7, #16]
 800d898:	edd7 7a05 	vldr	s15, [r7, #20]
 800d89c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8a0:	edd7 7a04 	vldr	s15, [r7, #16]
 800d8a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8a8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800d8ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d8b0:	edd7 7a04 	vldr	s15, [r7, #16]
 800d8b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8b8:	edc7 7a04 	vstr	s15, [r7, #16]

    return y;
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	ee07 3a90 	vmov	s15, r3
}
 800d8c2:	eeb0 0a67 	vmov.f32	s0, s15
 800d8c6:	371c      	adds	r7, #28
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr
 800d8d0:	5f3759df 	.word	0x5f3759df

0800d8d4 <mpu_write_byte>:
// MPU6500单次写命令
uint8_t mpu_write_byte(uint8_t const reg, uint8_t const data)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af02      	add	r7, sp, #8
 800d8da:	4603      	mov	r3, r0
 800d8dc:	460a      	mov	r2, r1
 800d8de:	71fb      	strb	r3, [r7, #7]
 800d8e0:	4613      	mov	r3, r2
 800d8e2:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;                                         // 开始通讯
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	2110      	movs	r1, #16
 800d8e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d8ec:	f7f9 f806 	bl	80068fc <HAL_GPIO_WritePin>
    tx = reg & 0x7F;                                     // 使第一位为0（写模式）
 800d8f0:	79fb      	ldrb	r3, [r7, #7]
 800d8f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8f6:	b2da      	uxtb	r2, r3
 800d8f8:	4b0f      	ldr	r3, [pc, #60]	@ (800d938 <mpu_write_byte+0x64>)
 800d8fa:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入命令地址
 800d8fc:	2337      	movs	r3, #55	@ 0x37
 800d8fe:	9300      	str	r3, [sp, #0]
 800d900:	2301      	movs	r3, #1
 800d902:	4a0e      	ldr	r2, [pc, #56]	@ (800d93c <mpu_write_byte+0x68>)
 800d904:	490c      	ldr	r1, [pc, #48]	@ (800d938 <mpu_write_byte+0x64>)
 800d906:	480e      	ldr	r0, [pc, #56]	@ (800d940 <mpu_write_byte+0x6c>)
 800d908:	f7fa f88d 	bl	8007a26 <HAL_SPI_TransmitReceive>
    tx = data;
 800d90c:	4a0a      	ldr	r2, [pc, #40]	@ (800d938 <mpu_write_byte+0x64>)
 800d90e:	79bb      	ldrb	r3, [r7, #6]
 800d910:	7013      	strb	r3, [r2, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入数据
 800d912:	2337      	movs	r3, #55	@ 0x37
 800d914:	9300      	str	r3, [sp, #0]
 800d916:	2301      	movs	r3, #1
 800d918:	4a08      	ldr	r2, [pc, #32]	@ (800d93c <mpu_write_byte+0x68>)
 800d91a:	4907      	ldr	r1, [pc, #28]	@ (800d938 <mpu_write_byte+0x64>)
 800d91c:	4808      	ldr	r0, [pc, #32]	@ (800d940 <mpu_write_byte+0x6c>)
 800d91e:	f7fa f882 	bl	8007a26 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;                                        // 结束通讯
 800d922:	2201      	movs	r2, #1
 800d924:	2110      	movs	r1, #16
 800d926:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d92a:	f7f8 ffe7 	bl	80068fc <HAL_GPIO_WritePin>
    return 0;
 800d92e:	2300      	movs	r3, #0
}
 800d930:	4618      	mov	r0, r3
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	20000c21 	.word	0x20000c21
 800d93c:	20000c22 	.word	0x20000c22
 800d940:	200003fc 	.word	0x200003fc

0800d944 <mpu_read_byte>:
// MPU6500单次读取单字节数据
uint8_t mpu_read_byte(uint8_t const reg)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af02      	add	r7, sp, #8
 800d94a:	4603      	mov	r3, r0
 800d94c:	71fb      	strb	r3, [r7, #7]
    MPU_NSS_LOW;
 800d94e:	2200      	movs	r2, #0
 800d950:	2110      	movs	r1, #16
 800d952:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d956:	f7f8 ffd1 	bl	80068fc <HAL_GPIO_WritePin>
    tx = reg | 0x80;                                     // 使地址第一位为1（读模式）
 800d95a:	79fb      	ldrb	r3, [r7, #7]
 800d95c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d960:	b2da      	uxtb	r2, r3
 800d962:	4b0f      	ldr	r3, [pc, #60]	@ (800d9a0 <mpu_read_byte+0x5c>)
 800d964:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 写入需要读取的地址
 800d966:	2337      	movs	r3, #55	@ 0x37
 800d968:	9300      	str	r3, [sp, #0]
 800d96a:	2301      	movs	r3, #1
 800d96c:	4a0d      	ldr	r2, [pc, #52]	@ (800d9a4 <mpu_read_byte+0x60>)
 800d96e:	490c      	ldr	r1, [pc, #48]	@ (800d9a0 <mpu_read_byte+0x5c>)
 800d970:	480d      	ldr	r0, [pc, #52]	@ (800d9a8 <mpu_read_byte+0x64>)
 800d972:	f7fa f858 	bl	8007a26 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55); // 为读取的数据提供存储空间
 800d976:	2337      	movs	r3, #55	@ 0x37
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	2301      	movs	r3, #1
 800d97c:	4a09      	ldr	r2, [pc, #36]	@ (800d9a4 <mpu_read_byte+0x60>)
 800d97e:	4908      	ldr	r1, [pc, #32]	@ (800d9a0 <mpu_read_byte+0x5c>)
 800d980:	4809      	ldr	r0, [pc, #36]	@ (800d9a8 <mpu_read_byte+0x64>)
 800d982:	f7fa f850 	bl	8007a26 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800d986:	2201      	movs	r2, #1
 800d988:	2110      	movs	r1, #16
 800d98a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d98e:	f7f8 ffb5 	bl	80068fc <HAL_GPIO_WritePin>
    return rx;
 800d992:	4b04      	ldr	r3, [pc, #16]	@ (800d9a4 <mpu_read_byte+0x60>)
 800d994:	781b      	ldrb	r3, [r3, #0]
}
 800d996:	4618      	mov	r0, r3
 800d998:	3708      	adds	r7, #8
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	20000c21 	.word	0x20000c21
 800d9a4:	20000c22 	.word	0x20000c22
 800d9a8:	200003fc 	.word	0x200003fc

0800d9ac <mpu_read_bytes>:

// MPU6500单次读取多字节数据
uint8_t mpu_read_bytes(uint8_t const regAddr, uint8_t *pData, uint8_t len)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af02      	add	r7, sp, #8
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	6039      	str	r1, [r7, #0]
 800d9b6:	71fb      	strb	r3, [r7, #7]
 800d9b8:	4613      	mov	r3, r2
 800d9ba:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;
 800d9bc:	2200      	movs	r2, #0
 800d9be:	2110      	movs	r1, #16
 800d9c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d9c4:	f7f8 ff9a 	bl	80068fc <HAL_GPIO_WritePin>
    tx = regAddr | 0x80;
 800d9c8:	79fb      	ldrb	r3, [r7, #7]
 800d9ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d9ce:	b2da      	uxtb	r2, r3
 800d9d0:	4b10      	ldr	r3, [pc, #64]	@ (800da14 <mpu_read_bytes+0x68>)
 800d9d2:	701a      	strb	r2, [r3, #0]
    tx_buff[0] = tx;
 800d9d4:	4b0f      	ldr	r3, [pc, #60]	@ (800da14 <mpu_read_bytes+0x68>)
 800d9d6:	781a      	ldrb	r2, [r3, #0]
 800d9d8:	4b0f      	ldr	r3, [pc, #60]	@ (800da18 <mpu_read_bytes+0x6c>)
 800d9da:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800d9dc:	2337      	movs	r3, #55	@ 0x37
 800d9de:	9300      	str	r3, [sp, #0]
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	4a0e      	ldr	r2, [pc, #56]	@ (800da1c <mpu_read_bytes+0x70>)
 800d9e4:	490b      	ldr	r1, [pc, #44]	@ (800da14 <mpu_read_bytes+0x68>)
 800d9e6:	480e      	ldr	r0, [pc, #56]	@ (800da20 <mpu_read_bytes+0x74>)
 800d9e8:	f7fa f81d 	bl	8007a26 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 800d9ec:	79bb      	ldrb	r3, [r7, #6]
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	2237      	movs	r2, #55	@ 0x37
 800d9f2:	9200      	str	r2, [sp, #0]
 800d9f4:	683a      	ldr	r2, [r7, #0]
 800d9f6:	4908      	ldr	r1, [pc, #32]	@ (800da18 <mpu_read_bytes+0x6c>)
 800d9f8:	4809      	ldr	r0, [pc, #36]	@ (800da20 <mpu_read_bytes+0x74>)
 800d9fa:	f7fa f814 	bl	8007a26 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800d9fe:	2201      	movs	r2, #1
 800da00:	2110      	movs	r1, #16
 800da02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800da06:	f7f8 ff79 	bl	80068fc <HAL_GPIO_WritePin>
    return 0;
 800da0a:	2300      	movs	r3, #0
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3708      	adds	r7, #8
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	20000c21 	.word	0x20000c21
 800da18:	200000c0 	.word	0x200000c0
 800da1c:	20000c22 	.word	0x20000c22
 800da20:	200003fc 	.word	0x200003fc

0800da24 <mpu_set_gyro_fsr>:

// 设置imu 6500陀螺仪测量范围
uint8_t mpu_set_gyro_fsr(uint8_t fsr)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	4603      	mov	r3, r0
 800da2c:	71fb      	strb	r3, [r7, #7]
    return mpu_write_byte(MPU6500_GYRO_CONFIG, fsr << 3);
 800da2e:	79fb      	ldrb	r3, [r7, #7]
 800da30:	00db      	lsls	r3, r3, #3
 800da32:	b2db      	uxtb	r3, r3
 800da34:	4619      	mov	r1, r3
 800da36:	201b      	movs	r0, #27
 800da38:	f7ff ff4c 	bl	800d8d4 <mpu_write_byte>
 800da3c:	4603      	mov	r3, r0
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3708      	adds	r7, #8
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}

0800da46 <mpu_set_accel_fsr>:
// 设置imu 6050/6500加速测量范围
uint8_t mpu_set_accel_fsr(uint8_t fsr)
{
 800da46:	b580      	push	{r7, lr}
 800da48:	b082      	sub	sp, #8
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	4603      	mov	r3, r0
 800da4e:	71fb      	strb	r3, [r7, #7]
    return mpu_write_byte(MPU6500_ACCEL_CONFIG, fsr << 3);
 800da50:	79fb      	ldrb	r3, [r7, #7]
 800da52:	00db      	lsls	r3, r3, #3
 800da54:	b2db      	uxtb	r3, r3
 800da56:	4619      	mov	r1, r3
 800da58:	201c      	movs	r0, #28
 800da5a:	f7ff ff3b 	bl	800d8d4 <mpu_write_byte>
 800da5e:	4603      	mov	r3, r0
}
 800da60:	4618      	mov	r0, r3
 800da62:	3708      	adds	r7, #8
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <mpu_get_data>:
// 获取IMU数据
void mpu_get_data()
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	af00      	add	r7, sp, #0
    mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800da6c:	220e      	movs	r2, #14
 800da6e:	495c      	ldr	r1, [pc, #368]	@ (800dbe0 <mpu_get_data+0x178>)
 800da70:	203b      	movs	r0, #59	@ 0x3b
 800da72:	f7ff ff9b 	bl	800d9ac <mpu_read_bytes>

    mpu_data.ax = mpu_buff[0] << 8 | mpu_buff[1];
 800da76:	4b5a      	ldr	r3, [pc, #360]	@ (800dbe0 <mpu_get_data+0x178>)
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	021b      	lsls	r3, r3, #8
 800da7c:	b21a      	sxth	r2, r3
 800da7e:	4b58      	ldr	r3, [pc, #352]	@ (800dbe0 <mpu_get_data+0x178>)
 800da80:	785b      	ldrb	r3, [r3, #1]
 800da82:	b21b      	sxth	r3, r3
 800da84:	4313      	orrs	r3, r2
 800da86:	b21a      	sxth	r2, r3
 800da88:	4b56      	ldr	r3, [pc, #344]	@ (800dbe4 <mpu_get_data+0x17c>)
 800da8a:	801a      	strh	r2, [r3, #0]
    mpu_data.ay = mpu_buff[2] << 8 | mpu_buff[3];
 800da8c:	4b54      	ldr	r3, [pc, #336]	@ (800dbe0 <mpu_get_data+0x178>)
 800da8e:	789b      	ldrb	r3, [r3, #2]
 800da90:	021b      	lsls	r3, r3, #8
 800da92:	b21a      	sxth	r2, r3
 800da94:	4b52      	ldr	r3, [pc, #328]	@ (800dbe0 <mpu_get_data+0x178>)
 800da96:	78db      	ldrb	r3, [r3, #3]
 800da98:	b21b      	sxth	r3, r3
 800da9a:	4313      	orrs	r3, r2
 800da9c:	b21a      	sxth	r2, r3
 800da9e:	4b51      	ldr	r3, [pc, #324]	@ (800dbe4 <mpu_get_data+0x17c>)
 800daa0:	805a      	strh	r2, [r3, #2]
    mpu_data.az = mpu_buff[4] << 8 | mpu_buff[5];
 800daa2:	4b4f      	ldr	r3, [pc, #316]	@ (800dbe0 <mpu_get_data+0x178>)
 800daa4:	791b      	ldrb	r3, [r3, #4]
 800daa6:	021b      	lsls	r3, r3, #8
 800daa8:	b21a      	sxth	r2, r3
 800daaa:	4b4d      	ldr	r3, [pc, #308]	@ (800dbe0 <mpu_get_data+0x178>)
 800daac:	795b      	ldrb	r3, [r3, #5]
 800daae:	b21b      	sxth	r3, r3
 800dab0:	4313      	orrs	r3, r2
 800dab2:	b21a      	sxth	r2, r3
 800dab4:	4b4b      	ldr	r3, [pc, #300]	@ (800dbe4 <mpu_get_data+0x17c>)
 800dab6:	809a      	strh	r2, [r3, #4]
    mpu_data.temp = mpu_buff[6] << 8 | mpu_buff[7];
 800dab8:	4b49      	ldr	r3, [pc, #292]	@ (800dbe0 <mpu_get_data+0x178>)
 800daba:	799b      	ldrb	r3, [r3, #6]
 800dabc:	021b      	lsls	r3, r3, #8
 800dabe:	b21a      	sxth	r2, r3
 800dac0:	4b47      	ldr	r3, [pc, #284]	@ (800dbe0 <mpu_get_data+0x178>)
 800dac2:	79db      	ldrb	r3, [r3, #7]
 800dac4:	b21b      	sxth	r3, r3
 800dac6:	4313      	orrs	r3, r2
 800dac8:	b21a      	sxth	r2, r3
 800daca:	4b46      	ldr	r3, [pc, #280]	@ (800dbe4 <mpu_get_data+0x17c>)
 800dacc:	819a      	strh	r2, [r3, #12]

    mpu_data.gx = ((mpu_buff[8] << 8 | mpu_buff[9]) - mpu_data.gx_offset);
 800dace:	4b44      	ldr	r3, [pc, #272]	@ (800dbe0 <mpu_get_data+0x178>)
 800dad0:	7a1b      	ldrb	r3, [r3, #8]
 800dad2:	021b      	lsls	r3, r3, #8
 800dad4:	b21a      	sxth	r2, r3
 800dad6:	4b42      	ldr	r3, [pc, #264]	@ (800dbe0 <mpu_get_data+0x178>)
 800dad8:	7a5b      	ldrb	r3, [r3, #9]
 800dada:	b21b      	sxth	r3, r3
 800dadc:	4313      	orrs	r3, r2
 800dade:	b21b      	sxth	r3, r3
 800dae0:	b29a      	uxth	r2, r3
 800dae2:	4b40      	ldr	r3, [pc, #256]	@ (800dbe4 <mpu_get_data+0x17c>)
 800dae4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800dae8:	b29b      	uxth	r3, r3
 800daea:	1ad3      	subs	r3, r2, r3
 800daec:	b29b      	uxth	r3, r3
 800daee:	b21a      	sxth	r2, r3
 800daf0:	4b3c      	ldr	r3, [pc, #240]	@ (800dbe4 <mpu_get_data+0x17c>)
 800daf2:	81da      	strh	r2, [r3, #14]
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 800daf4:	4b3a      	ldr	r3, [pc, #232]	@ (800dbe0 <mpu_get_data+0x178>)
 800daf6:	7a9b      	ldrb	r3, [r3, #10]
 800daf8:	021b      	lsls	r3, r3, #8
 800dafa:	b21a      	sxth	r2, r3
 800dafc:	4b38      	ldr	r3, [pc, #224]	@ (800dbe0 <mpu_get_data+0x178>)
 800dafe:	7adb      	ldrb	r3, [r3, #11]
 800db00:	b21b      	sxth	r3, r3
 800db02:	4313      	orrs	r3, r2
 800db04:	b21b      	sxth	r3, r3
 800db06:	b29a      	uxth	r2, r3
 800db08:	4b36      	ldr	r3, [pc, #216]	@ (800dbe4 <mpu_get_data+0x17c>)
 800db0a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800db0e:	b29b      	uxth	r3, r3
 800db10:	1ad3      	subs	r3, r2, r3
 800db12:	b29b      	uxth	r3, r3
 800db14:	b21a      	sxth	r2, r3
 800db16:	4b33      	ldr	r3, [pc, #204]	@ (800dbe4 <mpu_get_data+0x17c>)
 800db18:	821a      	strh	r2, [r3, #16]
    mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 800db1a:	4b31      	ldr	r3, [pc, #196]	@ (800dbe0 <mpu_get_data+0x178>)
 800db1c:	7b1b      	ldrb	r3, [r3, #12]
 800db1e:	021b      	lsls	r3, r3, #8
 800db20:	b21a      	sxth	r2, r3
 800db22:	4b2f      	ldr	r3, [pc, #188]	@ (800dbe0 <mpu_get_data+0x178>)
 800db24:	7b5b      	ldrb	r3, [r3, #13]
 800db26:	b21b      	sxth	r3, r3
 800db28:	4313      	orrs	r3, r2
 800db2a:	b21b      	sxth	r3, r3
 800db2c:	b29a      	uxth	r2, r3
 800db2e:	4b2d      	ldr	r3, [pc, #180]	@ (800dbe4 <mpu_get_data+0x17c>)
 800db30:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800db34:	b29b      	uxth	r3, r3
 800db36:	1ad3      	subs	r3, r2, r3
 800db38:	b29b      	uxth	r3, r3
 800db3a:	b21a      	sxth	r2, r3
 800db3c:	4b29      	ldr	r3, [pc, #164]	@ (800dbe4 <mpu_get_data+0x17c>)
 800db3e:	825a      	strh	r2, [r3, #18]

    // ist8310_get_data(ist_buff);
    // memcpy(&mpu_data.mx, ist_buff, 6);

    memcpy(&imu.ax, &mpu_data.ax, 6 * sizeof(int16_t));
 800db40:	220c      	movs	r2, #12
 800db42:	4928      	ldr	r1, [pc, #160]	@ (800dbe4 <mpu_get_data+0x17c>)
 800db44:	4828      	ldr	r0, [pc, #160]	@ (800dbe8 <mpu_get_data+0x180>)
 800db46:	f003 f9cc 	bl	8010ee2 <memcpy>

    imu.temp = 21 + mpu_data.temp / 333.87f;
 800db4a:	4b26      	ldr	r3, [pc, #152]	@ (800dbe4 <mpu_get_data+0x17c>)
 800db4c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800db50:	ee07 3a90 	vmov	s15, r3
 800db54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800db58:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800dbec <mpu_get_data+0x184>
 800db5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800db60:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 800db64:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db68:	4b1f      	ldr	r3, [pc, #124]	@ (800dbe8 <mpu_get_data+0x180>)
 800db6a:	edc3 7a03 	vstr	s15, [r3, #12]
    /* 2000dps -> rad/s */
    imu.wx = mpu_data.gx / 16.384f / 57.3f;
 800db6e:	4b1d      	ldr	r3, [pc, #116]	@ (800dbe4 <mpu_get_data+0x17c>)
 800db70:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800db74:	ee07 3a90 	vmov	s15, r3
 800db78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db7c:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800dbf0 <mpu_get_data+0x188>
 800db80:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800db84:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 800dbf4 <mpu_get_data+0x18c>
 800db88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800db8c:	4b16      	ldr	r3, [pc, #88]	@ (800dbe8 <mpu_get_data+0x180>)
 800db8e:	edc3 7a04 	vstr	s15, [r3, #16]
    imu.wy = mpu_data.gy / 16.384f / 57.3f;
 800db92:	4b14      	ldr	r3, [pc, #80]	@ (800dbe4 <mpu_get_data+0x17c>)
 800db94:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800db98:	ee07 3a90 	vmov	s15, r3
 800db9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dba0:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800dbf0 <mpu_get_data+0x188>
 800dba4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800dba8:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800dbf4 <mpu_get_data+0x18c>
 800dbac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dbb0:	4b0d      	ldr	r3, [pc, #52]	@ (800dbe8 <mpu_get_data+0x180>)
 800dbb2:	edc3 7a05 	vstr	s15, [r3, #20]
    imu.wz = mpu_data.gz / 16.384f / 57.3f;
 800dbb6:	4b0b      	ldr	r3, [pc, #44]	@ (800dbe4 <mpu_get_data+0x17c>)
 800dbb8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800dbbc:	ee07 3a90 	vmov	s15, r3
 800dbc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbc4:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800dbf0 <mpu_get_data+0x188>
 800dbc8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800dbcc:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800dbf4 <mpu_get_data+0x18c>
 800dbd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dbd4:	4b04      	ldr	r3, [pc, #16]	@ (800dbe8 <mpu_get_data+0x180>)
 800dbd6:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800dbda:	bf00      	nop
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	20000c3c 	.word	0x20000c3c
 800dbe4:	20000c4c 	.word	0x20000c4c
 800dbe8:	20000c6c 	.word	0x20000c6c
 800dbec:	43a6ef5c 	.word	0x43a6ef5c
 800dbf0:	4183126f 	.word	0x4183126f
 800dbf4:	42653333 	.word	0x42653333

0800dbf8 <mpu_offset_call>:
// 获取MPU6500的偏移量数据
void mpu_offset_call(void)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b082      	sub	sp, #8
 800dbfc:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 300; i++)
 800dbfe:	2300      	movs	r3, #0
 800dc00:	607b      	str	r3, [r7, #4]
 800dc02:	e07c      	b.n	800dcfe <mpu_offset_call+0x106>
    {
        mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800dc04:	220e      	movs	r2, #14
 800dc06:	4966      	ldr	r1, [pc, #408]	@ (800dda0 <mpu_offset_call+0x1a8>)
 800dc08:	203b      	movs	r0, #59	@ 0x3b
 800dc0a:	f7ff fecf 	bl	800d9ac <mpu_read_bytes>

        mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 800dc0e:	4b65      	ldr	r3, [pc, #404]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dc10:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800dc14:	b29a      	uxth	r2, r3
 800dc16:	4b62      	ldr	r3, [pc, #392]	@ (800dda0 <mpu_offset_call+0x1a8>)
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	021b      	lsls	r3, r3, #8
 800dc1c:	b219      	sxth	r1, r3
 800dc1e:	4b60      	ldr	r3, [pc, #384]	@ (800dda0 <mpu_offset_call+0x1a8>)
 800dc20:	785b      	ldrb	r3, [r3, #1]
 800dc22:	b21b      	sxth	r3, r3
 800dc24:	430b      	orrs	r3, r1
 800dc26:	b21b      	sxth	r3, r3
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	4413      	add	r3, r2
 800dc2c:	b29b      	uxth	r3, r3
 800dc2e:	b21a      	sxth	r2, r3
 800dc30:	4b5c      	ldr	r3, [pc, #368]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dc32:	829a      	strh	r2, [r3, #20]
        mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 800dc34:	4b5b      	ldr	r3, [pc, #364]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dc36:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800dc3a:	b29a      	uxth	r2, r3
 800dc3c:	4b58      	ldr	r3, [pc, #352]	@ (800dda0 <mpu_offset_call+0x1a8>)
 800dc3e:	789b      	ldrb	r3, [r3, #2]
 800dc40:	021b      	lsls	r3, r3, #8
 800dc42:	b219      	sxth	r1, r3
 800dc44:	4b56      	ldr	r3, [pc, #344]	@ (800dda0 <mpu_offset_call+0x1a8>)
 800dc46:	78db      	ldrb	r3, [r3, #3]
 800dc48:	b21b      	sxth	r3, r3
 800dc4a:	430b      	orrs	r3, r1
 800dc4c:	b21b      	sxth	r3, r3
 800dc4e:	b29b      	uxth	r3, r3
 800dc50:	4413      	add	r3, r2
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	b21a      	sxth	r2, r3
 800dc56:	4b53      	ldr	r3, [pc, #332]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dc58:	82da      	strh	r2, [r3, #22]
        mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
 800dc5a:	4b52      	ldr	r3, [pc, #328]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dc5c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800dc60:	b29a      	uxth	r2, r3
 800dc62:	4b4f      	ldr	r3, [pc, #316]	@ (800dda0 <mpu_offset_call+0x1a8>)
 800dc64:	791b      	ldrb	r3, [r3, #4]
 800dc66:	021b      	lsls	r3, r3, #8
 800dc68:	b219      	sxth	r1, r3
 800dc6a:	4b4d      	ldr	r3, [pc, #308]	@ (800dda0 <mpu_offset_call+0x1a8>)
 800dc6c:	795b      	ldrb	r3, [r3, #5]
 800dc6e:	b21b      	sxth	r3, r3
 800dc70:	430b      	orrs	r3, r1
 800dc72:	b21b      	sxth	r3, r3
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	4413      	add	r3, r2
 800dc78:	b29b      	uxth	r3, r3
 800dc7a:	b21a      	sxth	r2, r3
 800dc7c:	4b49      	ldr	r3, [pc, #292]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dc7e:	831a      	strh	r2, [r3, #24]

        mpu_data.gx_offset += mpu_buff[8] << 8 | mpu_buff[9];
 800dc80:	4b48      	ldr	r3, [pc, #288]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dc82:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800dc86:	b29a      	uxth	r2, r3
 800dc88:	4b45      	ldr	r3, [pc, #276]	@ (800dda0 <mpu_offset_call+0x1a8>)
 800dc8a:	7a1b      	ldrb	r3, [r3, #8]
 800dc8c:	021b      	lsls	r3, r3, #8
 800dc8e:	b219      	sxth	r1, r3
 800dc90:	4b43      	ldr	r3, [pc, #268]	@ (800dda0 <mpu_offset_call+0x1a8>)
 800dc92:	7a5b      	ldrb	r3, [r3, #9]
 800dc94:	b21b      	sxth	r3, r3
 800dc96:	430b      	orrs	r3, r1
 800dc98:	b21b      	sxth	r3, r3
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	4413      	add	r3, r2
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	b21a      	sxth	r2, r3
 800dca2:	4b40      	ldr	r3, [pc, #256]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dca4:	835a      	strh	r2, [r3, #26]
        mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 800dca6:	4b3f      	ldr	r3, [pc, #252]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dca8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800dcac:	b29a      	uxth	r2, r3
 800dcae:	4b3c      	ldr	r3, [pc, #240]	@ (800dda0 <mpu_offset_call+0x1a8>)
 800dcb0:	7a9b      	ldrb	r3, [r3, #10]
 800dcb2:	021b      	lsls	r3, r3, #8
 800dcb4:	b219      	sxth	r1, r3
 800dcb6:	4b3a      	ldr	r3, [pc, #232]	@ (800dda0 <mpu_offset_call+0x1a8>)
 800dcb8:	7adb      	ldrb	r3, [r3, #11]
 800dcba:	b21b      	sxth	r3, r3
 800dcbc:	430b      	orrs	r3, r1
 800dcbe:	b21b      	sxth	r3, r3
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	4413      	add	r3, r2
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	b21a      	sxth	r2, r3
 800dcc8:	4b36      	ldr	r3, [pc, #216]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dcca:	839a      	strh	r2, [r3, #28]
        mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 800dccc:	4b35      	ldr	r3, [pc, #212]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dcce:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800dcd2:	b29a      	uxth	r2, r3
 800dcd4:	4b32      	ldr	r3, [pc, #200]	@ (800dda0 <mpu_offset_call+0x1a8>)
 800dcd6:	7b1b      	ldrb	r3, [r3, #12]
 800dcd8:	021b      	lsls	r3, r3, #8
 800dcda:	b219      	sxth	r1, r3
 800dcdc:	4b30      	ldr	r3, [pc, #192]	@ (800dda0 <mpu_offset_call+0x1a8>)
 800dcde:	7b5b      	ldrb	r3, [r3, #13]
 800dce0:	b21b      	sxth	r3, r3
 800dce2:	430b      	orrs	r3, r1
 800dce4:	b21b      	sxth	r3, r3
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	4413      	add	r3, r2
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	b21a      	sxth	r2, r3
 800dcee:	4b2d      	ldr	r3, [pc, #180]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dcf0:	83da      	strh	r2, [r3, #30]

        HAL_Delay(5);
 800dcf2:	2005      	movs	r0, #5
 800dcf4:	f7f4 fe5e 	bl	80029b4 <HAL_Delay>
    for (i = 0; i < 300; i++)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	607b      	str	r3, [r7, #4]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800dd04:	f6ff af7e 	blt.w	800dc04 <mpu_offset_call+0xc>
    }
    mpu_data.ax_offset = mpu_data.ax_offset / 300;
 800dd08:	4b26      	ldr	r3, [pc, #152]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dd0a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800dd0e:	4a26      	ldr	r2, [pc, #152]	@ (800dda8 <mpu_offset_call+0x1b0>)
 800dd10:	fb82 1203 	smull	r1, r2, r2, r3
 800dd14:	1152      	asrs	r2, r2, #5
 800dd16:	17db      	asrs	r3, r3, #31
 800dd18:	1ad3      	subs	r3, r2, r3
 800dd1a:	b21a      	sxth	r2, r3
 800dd1c:	4b21      	ldr	r3, [pc, #132]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dd1e:	829a      	strh	r2, [r3, #20]
    mpu_data.ay_offset = mpu_data.ay_offset / 300;
 800dd20:	4b20      	ldr	r3, [pc, #128]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dd22:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800dd26:	4a20      	ldr	r2, [pc, #128]	@ (800dda8 <mpu_offset_call+0x1b0>)
 800dd28:	fb82 1203 	smull	r1, r2, r2, r3
 800dd2c:	1152      	asrs	r2, r2, #5
 800dd2e:	17db      	asrs	r3, r3, #31
 800dd30:	1ad3      	subs	r3, r2, r3
 800dd32:	b21a      	sxth	r2, r3
 800dd34:	4b1b      	ldr	r3, [pc, #108]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dd36:	82da      	strh	r2, [r3, #22]
    mpu_data.az_offset = mpu_data.az_offset / 300;
 800dd38:	4b1a      	ldr	r3, [pc, #104]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dd3a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800dd3e:	4a1a      	ldr	r2, [pc, #104]	@ (800dda8 <mpu_offset_call+0x1b0>)
 800dd40:	fb82 1203 	smull	r1, r2, r2, r3
 800dd44:	1152      	asrs	r2, r2, #5
 800dd46:	17db      	asrs	r3, r3, #31
 800dd48:	1ad3      	subs	r3, r2, r3
 800dd4a:	b21a      	sxth	r2, r3
 800dd4c:	4b15      	ldr	r3, [pc, #84]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dd4e:	831a      	strh	r2, [r3, #24]
    mpu_data.gx_offset = mpu_data.gx_offset / 300;
 800dd50:	4b14      	ldr	r3, [pc, #80]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dd52:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800dd56:	4a14      	ldr	r2, [pc, #80]	@ (800dda8 <mpu_offset_call+0x1b0>)
 800dd58:	fb82 1203 	smull	r1, r2, r2, r3
 800dd5c:	1152      	asrs	r2, r2, #5
 800dd5e:	17db      	asrs	r3, r3, #31
 800dd60:	1ad3      	subs	r3, r2, r3
 800dd62:	b21a      	sxth	r2, r3
 800dd64:	4b0f      	ldr	r3, [pc, #60]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dd66:	835a      	strh	r2, [r3, #26]
    mpu_data.gy_offset = mpu_data.gx_offset / 300;
 800dd68:	4b0e      	ldr	r3, [pc, #56]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dd6a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800dd6e:	4a0e      	ldr	r2, [pc, #56]	@ (800dda8 <mpu_offset_call+0x1b0>)
 800dd70:	fb82 1203 	smull	r1, r2, r2, r3
 800dd74:	1152      	asrs	r2, r2, #5
 800dd76:	17db      	asrs	r3, r3, #31
 800dd78:	1ad3      	subs	r3, r2, r3
 800dd7a:	b21a      	sxth	r2, r3
 800dd7c:	4b09      	ldr	r3, [pc, #36]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dd7e:	839a      	strh	r2, [r3, #28]
    mpu_data.gz_offset = mpu_data.gz_offset / 300;
 800dd80:	4b08      	ldr	r3, [pc, #32]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dd82:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800dd86:	4a08      	ldr	r2, [pc, #32]	@ (800dda8 <mpu_offset_call+0x1b0>)
 800dd88:	fb82 1203 	smull	r1, r2, r2, r3
 800dd8c:	1152      	asrs	r2, r2, #5
 800dd8e:	17db      	asrs	r3, r3, #31
 800dd90:	1ad3      	subs	r3, r2, r3
 800dd92:	b21a      	sxth	r2, r3
 800dd94:	4b03      	ldr	r3, [pc, #12]	@ (800dda4 <mpu_offset_call+0x1ac>)
 800dd96:	83da      	strh	r2, [r3, #30]
}
 800dd98:	bf00      	nop
 800dd9a:	3708      	adds	r7, #8
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	20000c3c 	.word	0x20000c3c
 800dda4:	20000c4c 	.word	0x20000c4c
 800dda8:	1b4e81b5 	.word	0x1b4e81b5

0800ddac <IMU_Init>:

// 初始化mpu6500和ist3810
uint8_t IMU_Init(void)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b086      	sub	sp, #24
 800ddb0:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 800ddb2:	2064      	movs	r0, #100	@ 0x64
 800ddb4:	f7f4 fdfe 	bl	80029b4 <HAL_Delay>

    id = mpu_read_byte(MPU6500_ID);
 800ddb8:	2075      	movs	r0, #117	@ 0x75
 800ddba:	f7ff fdc3 	bl	800d944 <mpu_read_byte>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	4b28      	ldr	r3, [pc, #160]	@ (800de64 <IMU_Init+0xb8>)
 800ddc4:	701a      	strb	r2, [r3, #0]
    if (id != 0x70)
 800ddc6:	4b27      	ldr	r3, [pc, #156]	@ (800de64 <IMU_Init+0xb8>)
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	2b70      	cmp	r3, #112	@ 0x70
 800ddcc:	d001      	beq.n	800ddd2 <IMU_Init+0x26>
        return 1;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	e044      	b.n	800de5c <IMU_Init+0xb0>
    uint8_t i = 0;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	75fb      	strb	r3, [r7, #23]
    uint8_t MPU6500_Init_Data[10][2] = {
 800ddd6:	463b      	mov	r3, r7
 800ddd8:	2200      	movs	r2, #0
 800ddda:	601a      	str	r2, [r3, #0]
 800dddc:	605a      	str	r2, [r3, #4]
 800ddde:	609a      	str	r2, [r3, #8]
 800dde0:	60da      	str	r2, [r3, #12]
 800dde2:	611a      	str	r2, [r3, #16]
 800dde4:	f248 036b 	movw	r3, #32875	@ 0x806b
 800dde8:	803b      	strh	r3, [r7, #0]
 800ddea:	f240 336b 	movw	r3, #875	@ 0x36b
 800ddee:	807b      	strh	r3, [r7, #2]
 800ddf0:	236c      	movs	r3, #108	@ 0x6c
 800ddf2:	80bb      	strh	r3, [r7, #4]
 800ddf4:	f240 431a 	movw	r3, #1050	@ 0x41a
 800ddf8:	80fb      	strh	r3, [r7, #6]
 800ddfa:	f641 031b 	movw	r3, #6171	@ 0x181b
 800ddfe:	813b      	strh	r3, [r7, #8]
 800de00:	f241 031c 	movw	r3, #4124	@ 0x101c
 800de04:	817b      	strh	r3, [r7, #10]
 800de06:	f240 231d 	movw	r3, #541	@ 0x21d
 800de0a:	81bb      	strh	r3, [r7, #12]
 800de0c:	f242 036a 	movw	r3, #8298	@ 0x206a
 800de10:	81fb      	strh	r3, [r7, #14]
        {MPU6500_GYRO_CONFIG, 0x18},    /* +-2000dps */
        {MPU6500_ACCEL_CONFIG, 0x10},   /* +-8G */
        {MPU6500_ACCEL_CONFIG_2, 0x02}, /* 使能低通滤波器  设置 Acc 低通滤波 */
        {MPU6500_USER_CTRL, 0x20},
    }; /* 使能 AUX */
    for (i = 0; i < 10; i++)
 800de12:	2300      	movs	r3, #0
 800de14:	75fb      	strb	r3, [r7, #23]
 800de16:	e015      	b.n	800de44 <IMU_Init+0x98>
    {
        mpu_write_byte(MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 800de18:	7dfb      	ldrb	r3, [r7, #23]
 800de1a:	005b      	lsls	r3, r3, #1
 800de1c:	3318      	adds	r3, #24
 800de1e:	443b      	add	r3, r7
 800de20:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800de24:	7dfb      	ldrb	r3, [r7, #23]
 800de26:	005b      	lsls	r3, r3, #1
 800de28:	3318      	adds	r3, #24
 800de2a:	443b      	add	r3, r7
 800de2c:	f813 3c17 	ldrb.w	r3, [r3, #-23]
 800de30:	4619      	mov	r1, r3
 800de32:	4610      	mov	r0, r2
 800de34:	f7ff fd4e 	bl	800d8d4 <mpu_write_byte>
        HAL_Delay(1);
 800de38:	2001      	movs	r0, #1
 800de3a:	f7f4 fdbb 	bl	80029b4 <HAL_Delay>
    for (i = 0; i < 10; i++)
 800de3e:	7dfb      	ldrb	r3, [r7, #23]
 800de40:	3301      	adds	r3, #1
 800de42:	75fb      	strb	r3, [r7, #23]
 800de44:	7dfb      	ldrb	r3, [r7, #23]
 800de46:	2b09      	cmp	r3, #9
 800de48:	d9e6      	bls.n	800de18 <IMU_Init+0x6c>
    }

    mpu_set_gyro_fsr(3);
 800de4a:	2003      	movs	r0, #3
 800de4c:	f7ff fdea 	bl	800da24 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(2);
 800de50:	2002      	movs	r0, #2
 800de52:	f7ff fdf8 	bl	800da46 <mpu_set_accel_fsr>

    // ist8310_init();
    mpu_offset_call();
 800de56:	f7ff fecf 	bl	800dbf8 <mpu_offset_call>
    return 0;
 800de5a:	2300      	movs	r3, #0
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3718      	adds	r7, #24
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	20000ca0 	.word	0x20000ca0

0800de68 <init_quaternion>:

// 初始化四元数
void init_quaternion(void)
{
 800de68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800de6c:	b084      	sub	sp, #16
 800de6e:	af00      	add	r7, sp, #0
    int16_t hx, hy; // hz;

    hx = imu.mx;
 800de70:	4b79      	ldr	r3, [pc, #484]	@ (800e058 <init_quaternion+0x1f0>)
 800de72:	88db      	ldrh	r3, [r3, #6]
 800de74:	81fb      	strh	r3, [r7, #14]
    hy = imu.my;
 800de76:	4b78      	ldr	r3, [pc, #480]	@ (800e058 <init_quaternion+0x1f0>)
 800de78:	891b      	ldrh	r3, [r3, #8]
 800de7a:	81bb      	strh	r3, [r7, #12]
            q2 = -0.56;
            q3 = 0.0045;
        }
    }
#else
    if (hx < 0 && hy < 0)
 800de7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800de80:	2b00      	cmp	r3, #0
 800de82:	da36      	bge.n	800def2 <init_quaternion+0x8a>
 800de84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	da32      	bge.n	800def2 <init_quaternion+0x8a>
    {
        if (fabs(hx / hy) >= 1)
 800de8c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800de90:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800de94:	fb92 f3f3 	sdiv	r3, r2, r3
 800de98:	4618      	mov	r0, r3
 800de9a:	f7f2 fb6b 	bl	8000574 <__aeabi_i2d>
 800de9e:	4602      	mov	r2, r0
 800dea0:	460b      	mov	r3, r1
 800dea2:	603a      	str	r2, [r7, #0]
 800dea4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dea8:	607b      	str	r3, [r7, #4]
 800deaa:	f04f 0200 	mov.w	r2, #0
 800deae:	4b6b      	ldr	r3, [pc, #428]	@ (800e05c <init_quaternion+0x1f4>)
 800deb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800deb4:	f7f2 fe4e 	bl	8000b54 <__aeabi_dcmpge>
 800deb8:	4603      	mov	r3, r0
 800deba:	2b00      	cmp	r3, #0
 800debc:	d00c      	beq.n	800ded8 <init_quaternion+0x70>
        {
            q0 = 0.195;
 800debe:	4b68      	ldr	r3, [pc, #416]	@ (800e060 <init_quaternion+0x1f8>)
 800dec0:	4a68      	ldr	r2, [pc, #416]	@ (800e064 <init_quaternion+0x1fc>)
 800dec2:	601a      	str	r2, [r3, #0]
            q1 = -0.015;
 800dec4:	4b68      	ldr	r3, [pc, #416]	@ (800e068 <init_quaternion+0x200>)
 800dec6:	4a69      	ldr	r2, [pc, #420]	@ (800e06c <init_quaternion+0x204>)
 800dec8:	601a      	str	r2, [r3, #0]
            q2 = 0.0043;
 800deca:	4b69      	ldr	r3, [pc, #420]	@ (800e070 <init_quaternion+0x208>)
 800decc:	4a69      	ldr	r2, [pc, #420]	@ (800e074 <init_quaternion+0x20c>)
 800dece:	601a      	str	r2, [r3, #0]
            q3 = 0.979;
 800ded0:	4b69      	ldr	r3, [pc, #420]	@ (800e078 <init_quaternion+0x210>)
 800ded2:	4a6a      	ldr	r2, [pc, #424]	@ (800e07c <init_quaternion+0x214>)
 800ded4:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800ded6:	e0ba      	b.n	800e04e <init_quaternion+0x1e6>
        }
        else
        {
            q0 = 0.555;
 800ded8:	4b61      	ldr	r3, [pc, #388]	@ (800e060 <init_quaternion+0x1f8>)
 800deda:	4a69      	ldr	r2, [pc, #420]	@ (800e080 <init_quaternion+0x218>)
 800dedc:	601a      	str	r2, [r3, #0]
            q1 = -0.015;
 800dede:	4b62      	ldr	r3, [pc, #392]	@ (800e068 <init_quaternion+0x200>)
 800dee0:	4a62      	ldr	r2, [pc, #392]	@ (800e06c <init_quaternion+0x204>)
 800dee2:	601a      	str	r2, [r3, #0]
            q2 = 0.006;
 800dee4:	4b62      	ldr	r3, [pc, #392]	@ (800e070 <init_quaternion+0x208>)
 800dee6:	4a67      	ldr	r2, [pc, #412]	@ (800e084 <init_quaternion+0x21c>)
 800dee8:	601a      	str	r2, [r3, #0]
            q3 = 0.829;
 800deea:	4b63      	ldr	r3, [pc, #396]	@ (800e078 <init_quaternion+0x210>)
 800deec:	4a66      	ldr	r2, [pc, #408]	@ (800e088 <init_quaternion+0x220>)
 800deee:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800def0:	e0ad      	b.n	800e04e <init_quaternion+0x1e6>
        }
    }
    else if (hx < 0 && hy > 0)
 800def2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800def6:	2b00      	cmp	r3, #0
 800def8:	da35      	bge.n	800df66 <init_quaternion+0xfe>
 800defa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800defe:	2b00      	cmp	r3, #0
 800df00:	dd31      	ble.n	800df66 <init_quaternion+0xfe>
    {
        if (fabs(hx / hy) >= 1)
 800df02:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800df06:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800df0a:	fb92 f3f3 	sdiv	r3, r2, r3
 800df0e:	4618      	mov	r0, r3
 800df10:	f7f2 fb30 	bl	8000574 <__aeabi_i2d>
 800df14:	4602      	mov	r2, r0
 800df16:	460b      	mov	r3, r1
 800df18:	4692      	mov	sl, r2
 800df1a:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800df1e:	f04f 0200 	mov.w	r2, #0
 800df22:	4b4e      	ldr	r3, [pc, #312]	@ (800e05c <init_quaternion+0x1f4>)
 800df24:	4650      	mov	r0, sl
 800df26:	4659      	mov	r1, fp
 800df28:	f7f2 fe14 	bl	8000b54 <__aeabi_dcmpge>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d00c      	beq.n	800df4c <init_quaternion+0xe4>
        {
            q0 = -0.193;
 800df32:	4b4b      	ldr	r3, [pc, #300]	@ (800e060 <init_quaternion+0x1f8>)
 800df34:	4a55      	ldr	r2, [pc, #340]	@ (800e08c <init_quaternion+0x224>)
 800df36:	601a      	str	r2, [r3, #0]
            q1 = -0.009;
 800df38:	4b4b      	ldr	r3, [pc, #300]	@ (800e068 <init_quaternion+0x200>)
 800df3a:	4a55      	ldr	r2, [pc, #340]	@ (800e090 <init_quaternion+0x228>)
 800df3c:	601a      	str	r2, [r3, #0]
            q2 = -0.006;
 800df3e:	4b4c      	ldr	r3, [pc, #304]	@ (800e070 <init_quaternion+0x208>)
 800df40:	4a54      	ldr	r2, [pc, #336]	@ (800e094 <init_quaternion+0x22c>)
 800df42:	601a      	str	r2, [r3, #0]
            q3 = 0.979;
 800df44:	4b4c      	ldr	r3, [pc, #304]	@ (800e078 <init_quaternion+0x210>)
 800df46:	4a4d      	ldr	r2, [pc, #308]	@ (800e07c <init_quaternion+0x214>)
 800df48:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800df4a:	e080      	b.n	800e04e <init_quaternion+0x1e6>
        }
        else
        {
            q0 = -0.552;
 800df4c:	4b44      	ldr	r3, [pc, #272]	@ (800e060 <init_quaternion+0x1f8>)
 800df4e:	4a52      	ldr	r2, [pc, #328]	@ (800e098 <init_quaternion+0x230>)
 800df50:	601a      	str	r2, [r3, #0]
            q1 = -0.0048;
 800df52:	4b45      	ldr	r3, [pc, #276]	@ (800e068 <init_quaternion+0x200>)
 800df54:	4a51      	ldr	r2, [pc, #324]	@ (800e09c <init_quaternion+0x234>)
 800df56:	601a      	str	r2, [r3, #0]
            q2 = -0.0115;
 800df58:	4b45      	ldr	r3, [pc, #276]	@ (800e070 <init_quaternion+0x208>)
 800df5a:	4a51      	ldr	r2, [pc, #324]	@ (800e0a0 <init_quaternion+0x238>)
 800df5c:	601a      	str	r2, [r3, #0]
            q3 = 0.8313;
 800df5e:	4b46      	ldr	r3, [pc, #280]	@ (800e078 <init_quaternion+0x210>)
 800df60:	4a50      	ldr	r2, [pc, #320]	@ (800e0a4 <init_quaternion+0x23c>)
 800df62:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800df64:	e073      	b.n	800e04e <init_quaternion+0x1e6>
        }
    }
    else if (hx > 0 && hy > 0)
 800df66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	dd35      	ble.n	800dfda <init_quaternion+0x172>
 800df6e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800df72:	2b00      	cmp	r3, #0
 800df74:	dd31      	ble.n	800dfda <init_quaternion+0x172>
    {
        if (fabs(hx / hy) >= 1)
 800df76:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800df7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800df7e:	fb92 f3f3 	sdiv	r3, r2, r3
 800df82:	4618      	mov	r0, r3
 800df84:	f7f2 faf6 	bl	8000574 <__aeabi_i2d>
 800df88:	4602      	mov	r2, r0
 800df8a:	460b      	mov	r3, r1
 800df8c:	4690      	mov	r8, r2
 800df8e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800df92:	f04f 0200 	mov.w	r2, #0
 800df96:	4b31      	ldr	r3, [pc, #196]	@ (800e05c <init_quaternion+0x1f4>)
 800df98:	4640      	mov	r0, r8
 800df9a:	4649      	mov	r1, r9
 800df9c:	f7f2 fdda 	bl	8000b54 <__aeabi_dcmpge>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d00c      	beq.n	800dfc0 <init_quaternion+0x158>
        {
            q0 = -0.9785;
 800dfa6:	4b2e      	ldr	r3, [pc, #184]	@ (800e060 <init_quaternion+0x1f8>)
 800dfa8:	4a3f      	ldr	r2, [pc, #252]	@ (800e0a8 <init_quaternion+0x240>)
 800dfaa:	601a      	str	r2, [r3, #0]
            q1 = 0.008;
 800dfac:	4b2e      	ldr	r3, [pc, #184]	@ (800e068 <init_quaternion+0x200>)
 800dfae:	4a3f      	ldr	r2, [pc, #252]	@ (800e0ac <init_quaternion+0x244>)
 800dfb0:	601a      	str	r2, [r3, #0]
            q2 = -0.02;
 800dfb2:	4b2f      	ldr	r3, [pc, #188]	@ (800e070 <init_quaternion+0x208>)
 800dfb4:	4a3e      	ldr	r2, [pc, #248]	@ (800e0b0 <init_quaternion+0x248>)
 800dfb6:	601a      	str	r2, [r3, #0]
            q3 = 0.195;
 800dfb8:	4b2f      	ldr	r3, [pc, #188]	@ (800e078 <init_quaternion+0x210>)
 800dfba:	4a2a      	ldr	r2, [pc, #168]	@ (800e064 <init_quaternion+0x1fc>)
 800dfbc:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800dfbe:	e046      	b.n	800e04e <init_quaternion+0x1e6>
        }
        else
        {
            q0 = -0.9828;
 800dfc0:	4b27      	ldr	r3, [pc, #156]	@ (800e060 <init_quaternion+0x1f8>)
 800dfc2:	4a3c      	ldr	r2, [pc, #240]	@ (800e0b4 <init_quaternion+0x24c>)
 800dfc4:	601a      	str	r2, [r3, #0]
            q1 = 0.002;
 800dfc6:	4b28      	ldr	r3, [pc, #160]	@ (800e068 <init_quaternion+0x200>)
 800dfc8:	4a3b      	ldr	r2, [pc, #236]	@ (800e0b8 <init_quaternion+0x250>)
 800dfca:	601a      	str	r2, [r3, #0]
            q2 = -0.0167;
 800dfcc:	4b28      	ldr	r3, [pc, #160]	@ (800e070 <init_quaternion+0x208>)
 800dfce:	4a3b      	ldr	r2, [pc, #236]	@ (800e0bc <init_quaternion+0x254>)
 800dfd0:	601a      	str	r2, [r3, #0]
            q3 = 0.5557;
 800dfd2:	4b29      	ldr	r3, [pc, #164]	@ (800e078 <init_quaternion+0x210>)
 800dfd4:	4a3a      	ldr	r2, [pc, #232]	@ (800e0c0 <init_quaternion+0x258>)
 800dfd6:	601a      	str	r2, [r3, #0]
        if (fabs(hx / hy) >= 1)
 800dfd8:	e039      	b.n	800e04e <init_quaternion+0x1e6>
        }
    }
    else if (hx > 0 && hy < 0)
 800dfda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	dd35      	ble.n	800e04e <init_quaternion+0x1e6>
 800dfe2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	da31      	bge.n	800e04e <init_quaternion+0x1e6>
    {
        if (fabs(hx / hy) >= 1)
 800dfea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800dfee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dff2:	fb92 f3f3 	sdiv	r3, r2, r3
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7f2 fabc 	bl	8000574 <__aeabi_i2d>
 800dffc:	4602      	mov	r2, r0
 800dffe:	460b      	mov	r3, r1
 800e000:	4614      	mov	r4, r2
 800e002:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800e006:	f04f 0200 	mov.w	r2, #0
 800e00a:	4b14      	ldr	r3, [pc, #80]	@ (800e05c <init_quaternion+0x1f4>)
 800e00c:	4620      	mov	r0, r4
 800e00e:	4629      	mov	r1, r5
 800e010:	f7f2 fda0 	bl	8000b54 <__aeabi_dcmpge>
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d00c      	beq.n	800e034 <init_quaternion+0x1cc>
        {
            q0 = -0.979;
 800e01a:	4b11      	ldr	r3, [pc, #68]	@ (800e060 <init_quaternion+0x1f8>)
 800e01c:	4a29      	ldr	r2, [pc, #164]	@ (800e0c4 <init_quaternion+0x25c>)
 800e01e:	601a      	str	r2, [r3, #0]
            q1 = 0.0116;
 800e020:	4b11      	ldr	r3, [pc, #68]	@ (800e068 <init_quaternion+0x200>)
 800e022:	4a29      	ldr	r2, [pc, #164]	@ (800e0c8 <init_quaternion+0x260>)
 800e024:	601a      	str	r2, [r3, #0]
            q2 = -0.0167;
 800e026:	4b12      	ldr	r3, [pc, #72]	@ (800e070 <init_quaternion+0x208>)
 800e028:	4a24      	ldr	r2, [pc, #144]	@ (800e0bc <init_quaternion+0x254>)
 800e02a:	601a      	str	r2, [r3, #0]
            q3 = -0.195;
 800e02c:	4b12      	ldr	r3, [pc, #72]	@ (800e078 <init_quaternion+0x210>)
 800e02e:	4a27      	ldr	r2, [pc, #156]	@ (800e0cc <init_quaternion+0x264>)
 800e030:	601a      	str	r2, [r3, #0]
            q2 = -0.012;
            q3 = -0.556;
        }
    }
#endif
}
 800e032:	e00c      	b.n	800e04e <init_quaternion+0x1e6>
            q0 = -0.83;
 800e034:	4b0a      	ldr	r3, [pc, #40]	@ (800e060 <init_quaternion+0x1f8>)
 800e036:	4a26      	ldr	r2, [pc, #152]	@ (800e0d0 <init_quaternion+0x268>)
 800e038:	601a      	str	r2, [r3, #0]
            q1 = 0.014;
 800e03a:	4b0b      	ldr	r3, [pc, #44]	@ (800e068 <init_quaternion+0x200>)
 800e03c:	4a25      	ldr	r2, [pc, #148]	@ (800e0d4 <init_quaternion+0x26c>)
 800e03e:	601a      	str	r2, [r3, #0]
            q2 = -0.012;
 800e040:	4b0b      	ldr	r3, [pc, #44]	@ (800e070 <init_quaternion+0x208>)
 800e042:	4a25      	ldr	r2, [pc, #148]	@ (800e0d8 <init_quaternion+0x270>)
 800e044:	601a      	str	r2, [r3, #0]
            q3 = -0.556;
 800e046:	4b0c      	ldr	r3, [pc, #48]	@ (800e078 <init_quaternion+0x210>)
 800e048:	4a24      	ldr	r2, [pc, #144]	@ (800e0dc <init_quaternion+0x274>)
 800e04a:	601a      	str	r2, [r3, #0]
}
 800e04c:	e7ff      	b.n	800e04e <init_quaternion+0x1e6>
 800e04e:	bf00      	nop
 800e050:	3710      	adds	r7, #16
 800e052:	46bd      	mov	sp, r7
 800e054:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e058:	20000c6c 	.word	0x20000c6c
 800e05c:	3ff00000 	.word	0x3ff00000
 800e060:	200000bc 	.word	0x200000bc
 800e064:	3e47ae14 	.word	0x3e47ae14
 800e068:	20000c24 	.word	0x20000c24
 800e06c:	bc75c28f 	.word	0xbc75c28f
 800e070:	20000c28 	.word	0x20000c28
 800e074:	3b8ce704 	.word	0x3b8ce704
 800e078:	20000c2c 	.word	0x20000c2c
 800e07c:	3f7a9fbe 	.word	0x3f7a9fbe
 800e080:	3f0e147b 	.word	0x3f0e147b
 800e084:	3bc49ba6 	.word	0x3bc49ba6
 800e088:	3f543958 	.word	0x3f543958
 800e08c:	be45a1cb 	.word	0xbe45a1cb
 800e090:	bc1374bc 	.word	0xbc1374bc
 800e094:	bbc49ba6 	.word	0xbbc49ba6
 800e098:	bf0d4fdf 	.word	0xbf0d4fdf
 800e09c:	bb9d4952 	.word	0xbb9d4952
 800e0a0:	bc3c6a7f 	.word	0xbc3c6a7f
 800e0a4:	3f54d014 	.word	0x3f54d014
 800e0a8:	bf7a7efa 	.word	0xbf7a7efa
 800e0ac:	3c03126f 	.word	0x3c03126f
 800e0b0:	bca3d70a 	.word	0xbca3d70a
 800e0b4:	bf7b98c8 	.word	0xbf7b98c8
 800e0b8:	3b03126f 	.word	0x3b03126f
 800e0bc:	bc88ce70 	.word	0xbc88ce70
 800e0c0:	3f0e425b 	.word	0x3f0e425b
 800e0c4:	bf7a9fbe 	.word	0xbf7a9fbe
 800e0c8:	3c3e0ded 	.word	0x3c3e0ded
 800e0cc:	be47ae14 	.word	0xbe47ae14
 800e0d0:	bf547ae1 	.word	0xbf547ae1
 800e0d4:	3c656042 	.word	0x3c656042
 800e0d8:	bc449ba6 	.word	0xbc449ba6
 800e0dc:	bf0e5604 	.word	0xbf0e5604

0800e0e0 <imu_ahrs_update>:

// 更新IMU数值
void imu_ahrs_update(void)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b09e      	sub	sp, #120	@ 0x78
 800e0e4:	af00      	add	r7, sp, #0
    float hx, hy, hz, bx, bz;
    float vx, vy, vz, wx, wy, wz;
    float ex, ey, ez, halfT;
    float tempq0, tempq1, tempq2, tempq3;

    float q0q0 = q0 * q0;
 800e0e6:	4bd6      	ldr	r3, [pc, #856]	@ (800e440 <imu_ahrs_update+0x360>)
 800e0e8:	ed93 7a00 	vldr	s14, [r3]
 800e0ec:	4bd4      	ldr	r3, [pc, #848]	@ (800e440 <imu_ahrs_update+0x360>)
 800e0ee:	edd3 7a00 	vldr	s15, [r3]
 800e0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0f6:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    float q0q1 = q0 * q1;
 800e0fa:	4bd1      	ldr	r3, [pc, #836]	@ (800e440 <imu_ahrs_update+0x360>)
 800e0fc:	ed93 7a00 	vldr	s14, [r3]
 800e100:	4bd0      	ldr	r3, [pc, #832]	@ (800e444 <imu_ahrs_update+0x364>)
 800e102:	edd3 7a00 	vldr	s15, [r3]
 800e106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e10a:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    float q0q2 = q0 * q2;
 800e10e:	4bcc      	ldr	r3, [pc, #816]	@ (800e440 <imu_ahrs_update+0x360>)
 800e110:	ed93 7a00 	vldr	s14, [r3]
 800e114:	4bcc      	ldr	r3, [pc, #816]	@ (800e448 <imu_ahrs_update+0x368>)
 800e116:	edd3 7a00 	vldr	s15, [r3]
 800e11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e11e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    float q0q3 = q0 * q3;
 800e122:	4bc7      	ldr	r3, [pc, #796]	@ (800e440 <imu_ahrs_update+0x360>)
 800e124:	ed93 7a00 	vldr	s14, [r3]
 800e128:	4bc8      	ldr	r3, [pc, #800]	@ (800e44c <imu_ahrs_update+0x36c>)
 800e12a:	edd3 7a00 	vldr	s15, [r3]
 800e12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e132:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    float q1q1 = q1 * q1;
 800e136:	4bc3      	ldr	r3, [pc, #780]	@ (800e444 <imu_ahrs_update+0x364>)
 800e138:	ed93 7a00 	vldr	s14, [r3]
 800e13c:	4bc1      	ldr	r3, [pc, #772]	@ (800e444 <imu_ahrs_update+0x364>)
 800e13e:	edd3 7a00 	vldr	s15, [r3]
 800e142:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e146:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    float q1q2 = q1 * q2;
 800e14a:	4bbe      	ldr	r3, [pc, #760]	@ (800e444 <imu_ahrs_update+0x364>)
 800e14c:	ed93 7a00 	vldr	s14, [r3]
 800e150:	4bbd      	ldr	r3, [pc, #756]	@ (800e448 <imu_ahrs_update+0x368>)
 800e152:	edd3 7a00 	vldr	s15, [r3]
 800e156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e15a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    float q1q3 = q1 * q3;
 800e15e:	4bb9      	ldr	r3, [pc, #740]	@ (800e444 <imu_ahrs_update+0x364>)
 800e160:	ed93 7a00 	vldr	s14, [r3]
 800e164:	4bb9      	ldr	r3, [pc, #740]	@ (800e44c <imu_ahrs_update+0x36c>)
 800e166:	edd3 7a00 	vldr	s15, [r3]
 800e16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e16e:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    float q2q2 = q2 * q2;
 800e172:	4bb5      	ldr	r3, [pc, #724]	@ (800e448 <imu_ahrs_update+0x368>)
 800e174:	ed93 7a00 	vldr	s14, [r3]
 800e178:	4bb3      	ldr	r3, [pc, #716]	@ (800e448 <imu_ahrs_update+0x368>)
 800e17a:	edd3 7a00 	vldr	s15, [r3]
 800e17e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e182:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    float q2q3 = q2 * q3;
 800e186:	4bb0      	ldr	r3, [pc, #704]	@ (800e448 <imu_ahrs_update+0x368>)
 800e188:	ed93 7a00 	vldr	s14, [r3]
 800e18c:	4baf      	ldr	r3, [pc, #700]	@ (800e44c <imu_ahrs_update+0x36c>)
 800e18e:	edd3 7a00 	vldr	s15, [r3]
 800e192:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e196:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    float q3q3 = q3 * q3;
 800e19a:	4bac      	ldr	r3, [pc, #688]	@ (800e44c <imu_ahrs_update+0x36c>)
 800e19c:	ed93 7a00 	vldr	s14, [r3]
 800e1a0:	4baa      	ldr	r3, [pc, #680]	@ (800e44c <imu_ahrs_update+0x36c>)
 800e1a2:	edd3 7a00 	vldr	s15, [r3]
 800e1a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1aa:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    gx = imu.wx;
 800e1ae:	4ba8      	ldr	r3, [pc, #672]	@ (800e450 <imu_ahrs_update+0x370>)
 800e1b0:	691b      	ldr	r3, [r3, #16]
 800e1b2:	4aa8      	ldr	r2, [pc, #672]	@ (800e454 <imu_ahrs_update+0x374>)
 800e1b4:	6013      	str	r3, [r2, #0]
    gy = imu.wy;
 800e1b6:	4ba6      	ldr	r3, [pc, #664]	@ (800e450 <imu_ahrs_update+0x370>)
 800e1b8:	695b      	ldr	r3, [r3, #20]
 800e1ba:	4aa7      	ldr	r2, [pc, #668]	@ (800e458 <imu_ahrs_update+0x378>)
 800e1bc:	6013      	str	r3, [r2, #0]
    gz = imu.wz;
 800e1be:	4ba4      	ldr	r3, [pc, #656]	@ (800e450 <imu_ahrs_update+0x370>)
 800e1c0:	699b      	ldr	r3, [r3, #24]
 800e1c2:	4aa6      	ldr	r2, [pc, #664]	@ (800e45c <imu_ahrs_update+0x37c>)
 800e1c4:	6013      	str	r3, [r2, #0]
    ax = imu.ax;
 800e1c6:	4ba2      	ldr	r3, [pc, #648]	@ (800e450 <imu_ahrs_update+0x370>)
 800e1c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1cc:	ee07 3a90 	vmov	s15, r3
 800e1d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1d4:	4ba2      	ldr	r3, [pc, #648]	@ (800e460 <imu_ahrs_update+0x380>)
 800e1d6:	edc3 7a00 	vstr	s15, [r3]
    ay = imu.ay;
 800e1da:	4b9d      	ldr	r3, [pc, #628]	@ (800e450 <imu_ahrs_update+0x370>)
 800e1dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e1e0:	ee07 3a90 	vmov	s15, r3
 800e1e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1e8:	4b9e      	ldr	r3, [pc, #632]	@ (800e464 <imu_ahrs_update+0x384>)
 800e1ea:	edc3 7a00 	vstr	s15, [r3]
    az = imu.az;
 800e1ee:	4b98      	ldr	r3, [pc, #608]	@ (800e450 <imu_ahrs_update+0x370>)
 800e1f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e1f4:	ee07 3a90 	vmov	s15, r3
 800e1f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1fc:	4b9a      	ldr	r3, [pc, #616]	@ (800e468 <imu_ahrs_update+0x388>)
 800e1fe:	edc3 7a00 	vstr	s15, [r3]
    mx = imu.mx;
 800e202:	4b93      	ldr	r3, [pc, #588]	@ (800e450 <imu_ahrs_update+0x370>)
 800e204:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e208:	ee07 3a90 	vmov	s15, r3
 800e20c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e210:	4b96      	ldr	r3, [pc, #600]	@ (800e46c <imu_ahrs_update+0x38c>)
 800e212:	edc3 7a00 	vstr	s15, [r3]
    my = imu.my;
 800e216:	4b8e      	ldr	r3, [pc, #568]	@ (800e450 <imu_ahrs_update+0x370>)
 800e218:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e21c:	ee07 3a90 	vmov	s15, r3
 800e220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e224:	4b92      	ldr	r3, [pc, #584]	@ (800e470 <imu_ahrs_update+0x390>)
 800e226:	edc3 7a00 	vstr	s15, [r3]
    mz = imu.mz;
 800e22a:	4b89      	ldr	r3, [pc, #548]	@ (800e450 <imu_ahrs_update+0x370>)
 800e22c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800e230:	ee07 3a90 	vmov	s15, r3
 800e234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e238:	4b8e      	ldr	r3, [pc, #568]	@ (800e474 <imu_ahrs_update+0x394>)
 800e23a:	edc3 7a00 	vstr	s15, [r3]

    now_update = HAL_GetTick(); // ms
 800e23e:	f7f4 fbad 	bl	800299c <HAL_GetTick>
 800e242:	4603      	mov	r3, r0
 800e244:	4a8c      	ldr	r2, [pc, #560]	@ (800e478 <imu_ahrs_update+0x398>)
 800e246:	6013      	str	r3, [r2, #0]
    halfT = ((float)(now_update - last_update) / 2000.0f);
 800e248:	4b8b      	ldr	r3, [pc, #556]	@ (800e478 <imu_ahrs_update+0x398>)
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	4b8b      	ldr	r3, [pc, #556]	@ (800e47c <imu_ahrs_update+0x39c>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	1ad3      	subs	r3, r2, r3
 800e252:	ee07 3a90 	vmov	s15, r3
 800e256:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e25a:	eddf 6a89 	vldr	s13, [pc, #548]	@ 800e480 <imu_ahrs_update+0x3a0>
 800e25e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e262:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    last_update = now_update;
 800e266:	4b84      	ldr	r3, [pc, #528]	@ (800e478 <imu_ahrs_update+0x398>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4a84      	ldr	r2, [pc, #528]	@ (800e47c <imu_ahrs_update+0x39c>)
 800e26c:	6013      	str	r3, [r2, #0]

    /* 快速逆平方根 */
    norm = inv_sqrt(ax * ax + ay * ay + az * az);
 800e26e:	4b7c      	ldr	r3, [pc, #496]	@ (800e460 <imu_ahrs_update+0x380>)
 800e270:	ed93 7a00 	vldr	s14, [r3]
 800e274:	4b7a      	ldr	r3, [pc, #488]	@ (800e460 <imu_ahrs_update+0x380>)
 800e276:	edd3 7a00 	vldr	s15, [r3]
 800e27a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e27e:	4b79      	ldr	r3, [pc, #484]	@ (800e464 <imu_ahrs_update+0x384>)
 800e280:	edd3 6a00 	vldr	s13, [r3]
 800e284:	4b77      	ldr	r3, [pc, #476]	@ (800e464 <imu_ahrs_update+0x384>)
 800e286:	edd3 7a00 	vldr	s15, [r3]
 800e28a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e28e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e292:	4b75      	ldr	r3, [pc, #468]	@ (800e468 <imu_ahrs_update+0x388>)
 800e294:	edd3 6a00 	vldr	s13, [r3]
 800e298:	4b73      	ldr	r3, [pc, #460]	@ (800e468 <imu_ahrs_update+0x388>)
 800e29a:	edd3 7a00 	vldr	s15, [r3]
 800e29e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e2a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2a6:	eeb0 0a67 	vmov.f32	s0, s15
 800e2aa:	f7ff fad7 	bl	800d85c <inv_sqrt>
 800e2ae:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    ax = ax * norm;
 800e2b2:	4b6b      	ldr	r3, [pc, #428]	@ (800e460 <imu_ahrs_update+0x380>)
 800e2b4:	ed93 7a00 	vldr	s14, [r3]
 800e2b8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800e2bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2c0:	4b67      	ldr	r3, [pc, #412]	@ (800e460 <imu_ahrs_update+0x380>)
 800e2c2:	edc3 7a00 	vstr	s15, [r3]
    ay = ay * norm;
 800e2c6:	4b67      	ldr	r3, [pc, #412]	@ (800e464 <imu_ahrs_update+0x384>)
 800e2c8:	ed93 7a00 	vldr	s14, [r3]
 800e2cc:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800e2d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2d4:	4b63      	ldr	r3, [pc, #396]	@ (800e464 <imu_ahrs_update+0x384>)
 800e2d6:	edc3 7a00 	vstr	s15, [r3]
    az = az * norm;
 800e2da:	4b63      	ldr	r3, [pc, #396]	@ (800e468 <imu_ahrs_update+0x388>)
 800e2dc:	ed93 7a00 	vldr	s14, [r3]
 800e2e0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800e2e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2e8:	4b5f      	ldr	r3, [pc, #380]	@ (800e468 <imu_ahrs_update+0x388>)
 800e2ea:	edc3 7a00 	vstr	s15, [r3]
    norm = inv_sqrt(mx * mx + my * my + mz * mz);
    mx = mx * norm;
    my = my * norm;
    mz = mz * norm;
#else
    mx = 0;
 800e2ee:	4b5f      	ldr	r3, [pc, #380]	@ (800e46c <imu_ahrs_update+0x38c>)
 800e2f0:	f04f 0200 	mov.w	r2, #0
 800e2f4:	601a      	str	r2, [r3, #0]
    my = 0;
 800e2f6:	4b5e      	ldr	r3, [pc, #376]	@ (800e470 <imu_ahrs_update+0x390>)
 800e2f8:	f04f 0200 	mov.w	r2, #0
 800e2fc:	601a      	str	r2, [r3, #0]
    mz = 0;
 800e2fe:	4b5d      	ldr	r3, [pc, #372]	@ (800e474 <imu_ahrs_update+0x394>)
 800e300:	f04f 0200 	mov.w	r2, #0
 800e304:	601a      	str	r2, [r3, #0]
#endif
    /* 计算通量的参考方向*/
    hx = 2.0f * mx * (0.5f - q2q2 - q3q3) + 2.0f * my * (q1q2 - q0q3) + 2.0f * mz * (q1q3 + q0q2);
 800e306:	4b59      	ldr	r3, [pc, #356]	@ (800e46c <imu_ahrs_update+0x38c>)
 800e308:	edd3 7a00 	vldr	s15, [r3]
 800e30c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e310:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800e314:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800e318:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e31c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800e320:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e324:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e328:	4b51      	ldr	r3, [pc, #324]	@ (800e470 <imu_ahrs_update+0x390>)
 800e32a:	edd3 7a00 	vldr	s15, [r3]
 800e32e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e332:	ed97 6a18 	vldr	s12, [r7, #96]	@ 0x60
 800e336:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800e33a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e33e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e342:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e346:	4b4b      	ldr	r3, [pc, #300]	@ (800e474 <imu_ahrs_update+0x394>)
 800e348:	edd3 7a00 	vldr	s15, [r3]
 800e34c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e350:	ed97 6a17 	vldr	s12, [r7, #92]	@ 0x5c
 800e354:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800e358:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e35c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e360:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e364:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    hy = 2.0f * mx * (q1q2 + q0q3) + 2.0f * my * (0.5f - q1q1 - q3q3) + 2.0f * mz * (q2q3 - q0q1);
 800e368:	4b40      	ldr	r3, [pc, #256]	@ (800e46c <imu_ahrs_update+0x38c>)
 800e36a:	edd3 7a00 	vldr	s15, [r3]
 800e36e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e372:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 800e376:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800e37a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e37e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e382:	4b3b      	ldr	r3, [pc, #236]	@ (800e470 <imu_ahrs_update+0x390>)
 800e384:	edd3 7a00 	vldr	s15, [r3]
 800e388:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e38c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800e390:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800e394:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e398:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800e39c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e3a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e3a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e3a8:	4b32      	ldr	r3, [pc, #200]	@ (800e474 <imu_ahrs_update+0x394>)
 800e3aa:	edd3 7a00 	vldr	s15, [r3]
 800e3ae:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e3b2:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 800e3b6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800e3ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e3be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e3c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e3c6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    hz = 2.0f * mx * (q1q3 - q0q2) + 2.0f * my * (q2q3 + q0q1) + 2.0f * mz * (0.5f - q1q1 - q2q2);
 800e3ca:	4b28      	ldr	r3, [pc, #160]	@ (800e46c <imu_ahrs_update+0x38c>)
 800e3cc:	edd3 7a00 	vldr	s15, [r3]
 800e3d0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e3d4:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800e3d8:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800e3dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e3e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e3e4:	4b22      	ldr	r3, [pc, #136]	@ (800e470 <imu_ahrs_update+0x390>)
 800e3e6:	edd3 7a00 	vldr	s15, [r3]
 800e3ea:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e3ee:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 800e3f2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800e3f6:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e3fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e3fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e402:	4b1c      	ldr	r3, [pc, #112]	@ (800e474 <imu_ahrs_update+0x394>)
 800e404:	edd3 7a00 	vldr	s15, [r3]
 800e408:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e40c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800e410:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800e414:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e418:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800e41c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e420:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e424:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e428:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    bx = sqrt((hx * hx) + (hy * hy));
 800e42c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800e430:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800e434:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800e438:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e43c:	e022      	b.n	800e484 <imu_ahrs_update+0x3a4>
 800e43e:	bf00      	nop
 800e440:	200000bc 	.word	0x200000bc
 800e444:	20000c24 	.word	0x20000c24
 800e448:	20000c28 	.word	0x20000c28
 800e44c:	20000c2c 	.word	0x20000c2c
 800e450:	20000c6c 	.word	0x20000c6c
 800e454:	20000ca4 	.word	0x20000ca4
 800e458:	20000ca8 	.word	0x20000ca8
 800e45c:	20000cac 	.word	0x20000cac
 800e460:	20000cb0 	.word	0x20000cb0
 800e464:	20000cb4 	.word	0x20000cb4
 800e468:	20000cb8 	.word	0x20000cb8
 800e46c:	20000cbc 	.word	0x20000cbc
 800e470:	20000cc0 	.word	0x20000cc0
 800e474:	20000cc4 	.word	0x20000cc4
 800e478:	20000ccc 	.word	0x20000ccc
 800e47c:	20000cc8 	.word	0x20000cc8
 800e480:	44fa0000 	.word	0x44fa0000
 800e484:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e488:	ee17 0a90 	vmov	r0, s15
 800e48c:	f7f2 f884 	bl	8000598 <__aeabi_f2d>
 800e490:	4602      	mov	r2, r0
 800e492:	460b      	mov	r3, r1
 800e494:	ec43 2b10 	vmov	d0, r2, r3
 800e498:	f005 fac4 	bl	8013a24 <sqrt>
 800e49c:	ec53 2b10 	vmov	r2, r3, d0
 800e4a0:	4610      	mov	r0, r2
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	f7f2 fbc8 	bl	8000c38 <__aeabi_d2f>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    bz = hz;
 800e4ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4ae:	637b      	str	r3, [r7, #52]	@ 0x34

    /* 估计重力和通量方向(v和w)   */
    vx = 2.0f * (q1q3 - q0q2);
 800e4b0:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800e4b4:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800e4b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e4bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e4c0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    vy = 2.0f * (q0q1 + q2q3);
 800e4c4:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800e4c8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800e4cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e4d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e4d4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    vz = q0q0 - q1q1 - q2q2 + q3q3;
 800e4d8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800e4dc:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800e4e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e4e4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800e4e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e4ec:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800e4f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e4f4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    wx = 2.0f * bx * (0.5f - q2q2 - q3q3) + 2.0f * bz * (q1q3 - q0q2);
 800e4f8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800e4fc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e500:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800e504:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800e508:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e50c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800e510:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e514:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e518:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800e51c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e520:	ed97 6a17 	vldr	s12, [r7, #92]	@ 0x5c
 800e524:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800e528:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e52c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e530:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e534:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    wy = 2.0f * bx * (q1q2 - q0q3) + 2.0f * bz * (q0q1 + q2q3);
 800e538:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800e53c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e540:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 800e544:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800e548:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e54c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e550:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800e554:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e558:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 800e55c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800e560:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e56c:	edc7 7a08 	vstr	s15, [r7, #32]
    wz = 2.0f * bx * (q0q2 + q1q3) + 2.0f * bz * (0.5f - q1q1 - q2q2);
 800e570:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800e574:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e578:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800e57c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800e580:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e584:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e588:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800e58c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e590:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800e594:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800e598:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e59c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800e5a0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e5a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5ac:	edc7 7a07 	vstr	s15, [r7, #28]

    /*
     * 误差是场的参考方向与传感器测量方向的叉积之和
     */
    ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 800e5b0:	4bde      	ldr	r3, [pc, #888]	@ (800e92c <imu_ahrs_update+0x84c>)
 800e5b2:	ed93 7a00 	vldr	s14, [r3]
 800e5b6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800e5ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e5be:	4bdc      	ldr	r3, [pc, #880]	@ (800e930 <imu_ahrs_update+0x850>)
 800e5c0:	edd3 6a00 	vldr	s13, [r3]
 800e5c4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800e5c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e5d0:	4bd8      	ldr	r3, [pc, #864]	@ (800e934 <imu_ahrs_update+0x854>)
 800e5d2:	edd3 6a00 	vldr	s13, [r3]
 800e5d6:	edd7 7a07 	vldr	s15, [r7, #28]
 800e5da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e5de:	4bd6      	ldr	r3, [pc, #856]	@ (800e938 <imu_ahrs_update+0x858>)
 800e5e0:	ed93 6a00 	vldr	s12, [r3]
 800e5e4:	edd7 7a08 	vldr	s15, [r7, #32]
 800e5e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e5ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e5f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5f4:	edc7 7a06 	vstr	s15, [r7, #24]
    ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 800e5f8:	4bcd      	ldr	r3, [pc, #820]	@ (800e930 <imu_ahrs_update+0x850>)
 800e5fa:	ed93 7a00 	vldr	s14, [r3]
 800e5fe:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800e602:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e606:	4bcd      	ldr	r3, [pc, #820]	@ (800e93c <imu_ahrs_update+0x85c>)
 800e608:	edd3 6a00 	vldr	s13, [r3]
 800e60c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800e610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e614:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e618:	4bc7      	ldr	r3, [pc, #796]	@ (800e938 <imu_ahrs_update+0x858>)
 800e61a:	edd3 6a00 	vldr	s13, [r3]
 800e61e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e622:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e626:	4bc6      	ldr	r3, [pc, #792]	@ (800e940 <imu_ahrs_update+0x860>)
 800e628:	ed93 6a00 	vldr	s12, [r3]
 800e62c:	edd7 7a07 	vldr	s15, [r7, #28]
 800e630:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e634:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e63c:	edc7 7a05 	vstr	s15, [r7, #20]
    ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 800e640:	4bbe      	ldr	r3, [pc, #760]	@ (800e93c <imu_ahrs_update+0x85c>)
 800e642:	ed93 7a00 	vldr	s14, [r3]
 800e646:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800e64a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e64e:	4bb7      	ldr	r3, [pc, #732]	@ (800e92c <imu_ahrs_update+0x84c>)
 800e650:	edd3 6a00 	vldr	s13, [r3]
 800e654:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800e658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e65c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e660:	4bb7      	ldr	r3, [pc, #732]	@ (800e940 <imu_ahrs_update+0x860>)
 800e662:	edd3 6a00 	vldr	s13, [r3]
 800e666:	edd7 7a08 	vldr	s15, [r7, #32]
 800e66a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e66e:	4bb1      	ldr	r3, [pc, #708]	@ (800e934 <imu_ahrs_update+0x854>)
 800e670:	ed93 6a00 	vldr	s12, [r3]
 800e674:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e678:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e67c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e680:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e684:	edc7 7a04 	vstr	s15, [r7, #16]

    /* PI */
    if (ex != 0.0f && ey != 0.0f && ez != 0.0f)
 800e688:	edd7 7a06 	vldr	s15, [r7, #24]
 800e68c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e694:	d076      	beq.n	800e784 <imu_ahrs_update+0x6a4>
 800e696:	edd7 7a05 	vldr	s15, [r7, #20]
 800e69a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6a2:	d06f      	beq.n	800e784 <imu_ahrs_update+0x6a4>
 800e6a4:	edd7 7a04 	vldr	s15, [r7, #16]
 800e6a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6b0:	d068      	beq.n	800e784 <imu_ahrs_update+0x6a4>
    {
        exInt = exInt + ex * Ki * halfT;
 800e6b2:	edd7 7a06 	vldr	s15, [r7, #24]
 800e6b6:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 800e944 <imu_ahrs_update+0x864>
 800e6ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e6be:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e6c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e6c6:	4ba0      	ldr	r3, [pc, #640]	@ (800e948 <imu_ahrs_update+0x868>)
 800e6c8:	edd3 7a00 	vldr	s15, [r3]
 800e6cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6d0:	4b9d      	ldr	r3, [pc, #628]	@ (800e948 <imu_ahrs_update+0x868>)
 800e6d2:	edc3 7a00 	vstr	s15, [r3]
        eyInt = eyInt + ey * Ki * halfT;
 800e6d6:	edd7 7a05 	vldr	s15, [r7, #20]
 800e6da:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800e944 <imu_ahrs_update+0x864>
 800e6de:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e6e2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e6e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e6ea:	4b98      	ldr	r3, [pc, #608]	@ (800e94c <imu_ahrs_update+0x86c>)
 800e6ec:	edd3 7a00 	vldr	s15, [r3]
 800e6f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6f4:	4b95      	ldr	r3, [pc, #596]	@ (800e94c <imu_ahrs_update+0x86c>)
 800e6f6:	edc3 7a00 	vstr	s15, [r3]
        ezInt = ezInt + ez * Ki * halfT;
 800e6fa:	edd7 7a04 	vldr	s15, [r7, #16]
 800e6fe:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800e944 <imu_ahrs_update+0x864>
 800e702:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e706:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e70a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e70e:	4b90      	ldr	r3, [pc, #576]	@ (800e950 <imu_ahrs_update+0x870>)
 800e710:	edd3 7a00 	vldr	s15, [r3]
 800e714:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e718:	4b8d      	ldr	r3, [pc, #564]	@ (800e950 <imu_ahrs_update+0x870>)
 800e71a:	edc3 7a00 	vstr	s15, [r3]

        gx = gx + Kp * ex + exInt;
 800e71e:	edd7 7a06 	vldr	s15, [r7, #24]
 800e722:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e726:	4b8b      	ldr	r3, [pc, #556]	@ (800e954 <imu_ahrs_update+0x874>)
 800e728:	edd3 7a00 	vldr	s15, [r3]
 800e72c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e730:	4b85      	ldr	r3, [pc, #532]	@ (800e948 <imu_ahrs_update+0x868>)
 800e732:	edd3 7a00 	vldr	s15, [r3]
 800e736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e73a:	4b86      	ldr	r3, [pc, #536]	@ (800e954 <imu_ahrs_update+0x874>)
 800e73c:	edc3 7a00 	vstr	s15, [r3]
        gy = gy + Kp * ey + eyInt;
 800e740:	edd7 7a05 	vldr	s15, [r7, #20]
 800e744:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e748:	4b83      	ldr	r3, [pc, #524]	@ (800e958 <imu_ahrs_update+0x878>)
 800e74a:	edd3 7a00 	vldr	s15, [r3]
 800e74e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e752:	4b7e      	ldr	r3, [pc, #504]	@ (800e94c <imu_ahrs_update+0x86c>)
 800e754:	edd3 7a00 	vldr	s15, [r3]
 800e758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e75c:	4b7e      	ldr	r3, [pc, #504]	@ (800e958 <imu_ahrs_update+0x878>)
 800e75e:	edc3 7a00 	vstr	s15, [r3]
        gz = gz + Kp * ez + ezInt;
 800e762:	edd7 7a04 	vldr	s15, [r7, #16]
 800e766:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e76a:	4b7c      	ldr	r3, [pc, #496]	@ (800e95c <imu_ahrs_update+0x87c>)
 800e76c:	edd3 7a00 	vldr	s15, [r3]
 800e770:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e774:	4b76      	ldr	r3, [pc, #472]	@ (800e950 <imu_ahrs_update+0x870>)
 800e776:	edd3 7a00 	vldr	s15, [r3]
 800e77a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e77e:	4b77      	ldr	r3, [pc, #476]	@ (800e95c <imu_ahrs_update+0x87c>)
 800e780:	edc3 7a00 	vstr	s15, [r3]
    }

    tempq0 = q0 + (-q1 * gx - q2 * gy - q3 * gz) * halfT;
 800e784:	4b76      	ldr	r3, [pc, #472]	@ (800e960 <imu_ahrs_update+0x880>)
 800e786:	edd3 7a00 	vldr	s15, [r3]
 800e78a:	eeb1 7a67 	vneg.f32	s14, s15
 800e78e:	4b71      	ldr	r3, [pc, #452]	@ (800e954 <imu_ahrs_update+0x874>)
 800e790:	edd3 7a00 	vldr	s15, [r3]
 800e794:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e798:	4b72      	ldr	r3, [pc, #456]	@ (800e964 <imu_ahrs_update+0x884>)
 800e79a:	edd3 6a00 	vldr	s13, [r3]
 800e79e:	4b6e      	ldr	r3, [pc, #440]	@ (800e958 <imu_ahrs_update+0x878>)
 800e7a0:	edd3 7a00 	vldr	s15, [r3]
 800e7a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e7a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e7ac:	4b6e      	ldr	r3, [pc, #440]	@ (800e968 <imu_ahrs_update+0x888>)
 800e7ae:	edd3 6a00 	vldr	s13, [r3]
 800e7b2:	4b6a      	ldr	r3, [pc, #424]	@ (800e95c <imu_ahrs_update+0x87c>)
 800e7b4:	edd3 7a00 	vldr	s15, [r3]
 800e7b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e7bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e7c0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e7c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e7c8:	4b68      	ldr	r3, [pc, #416]	@ (800e96c <imu_ahrs_update+0x88c>)
 800e7ca:	edd3 7a00 	vldr	s15, [r3]
 800e7ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e7d2:	edc7 7a03 	vstr	s15, [r7, #12]
    tempq1 = q1 + (q0 * gx + q2 * gz - q3 * gy) * halfT;
 800e7d6:	4b65      	ldr	r3, [pc, #404]	@ (800e96c <imu_ahrs_update+0x88c>)
 800e7d8:	ed93 7a00 	vldr	s14, [r3]
 800e7dc:	4b5d      	ldr	r3, [pc, #372]	@ (800e954 <imu_ahrs_update+0x874>)
 800e7de:	edd3 7a00 	vldr	s15, [r3]
 800e7e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e7e6:	4b5f      	ldr	r3, [pc, #380]	@ (800e964 <imu_ahrs_update+0x884>)
 800e7e8:	edd3 6a00 	vldr	s13, [r3]
 800e7ec:	4b5b      	ldr	r3, [pc, #364]	@ (800e95c <imu_ahrs_update+0x87c>)
 800e7ee:	edd3 7a00 	vldr	s15, [r3]
 800e7f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e7f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e7fa:	4b5b      	ldr	r3, [pc, #364]	@ (800e968 <imu_ahrs_update+0x888>)
 800e7fc:	edd3 6a00 	vldr	s13, [r3]
 800e800:	4b55      	ldr	r3, [pc, #340]	@ (800e958 <imu_ahrs_update+0x878>)
 800e802:	edd3 7a00 	vldr	s15, [r3]
 800e806:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e80a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e80e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e812:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e816:	4b52      	ldr	r3, [pc, #328]	@ (800e960 <imu_ahrs_update+0x880>)
 800e818:	edd3 7a00 	vldr	s15, [r3]
 800e81c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e820:	edc7 7a02 	vstr	s15, [r7, #8]
    tempq2 = q2 + (q0 * gy - q1 * gz + q3 * gx) * halfT;
 800e824:	4b51      	ldr	r3, [pc, #324]	@ (800e96c <imu_ahrs_update+0x88c>)
 800e826:	ed93 7a00 	vldr	s14, [r3]
 800e82a:	4b4b      	ldr	r3, [pc, #300]	@ (800e958 <imu_ahrs_update+0x878>)
 800e82c:	edd3 7a00 	vldr	s15, [r3]
 800e830:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e834:	4b4a      	ldr	r3, [pc, #296]	@ (800e960 <imu_ahrs_update+0x880>)
 800e836:	edd3 6a00 	vldr	s13, [r3]
 800e83a:	4b48      	ldr	r3, [pc, #288]	@ (800e95c <imu_ahrs_update+0x87c>)
 800e83c:	edd3 7a00 	vldr	s15, [r3]
 800e840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e844:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e848:	4b47      	ldr	r3, [pc, #284]	@ (800e968 <imu_ahrs_update+0x888>)
 800e84a:	edd3 6a00 	vldr	s13, [r3]
 800e84e:	4b41      	ldr	r3, [pc, #260]	@ (800e954 <imu_ahrs_update+0x874>)
 800e850:	edd3 7a00 	vldr	s15, [r3]
 800e854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e858:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e85c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e860:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e864:	4b3f      	ldr	r3, [pc, #252]	@ (800e964 <imu_ahrs_update+0x884>)
 800e866:	edd3 7a00 	vldr	s15, [r3]
 800e86a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e86e:	edc7 7a01 	vstr	s15, [r7, #4]
    tempq3 = q3 + (q0 * gz + q1 * gy - q2 * gx) * halfT;
 800e872:	4b3e      	ldr	r3, [pc, #248]	@ (800e96c <imu_ahrs_update+0x88c>)
 800e874:	ed93 7a00 	vldr	s14, [r3]
 800e878:	4b38      	ldr	r3, [pc, #224]	@ (800e95c <imu_ahrs_update+0x87c>)
 800e87a:	edd3 7a00 	vldr	s15, [r3]
 800e87e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e882:	4b37      	ldr	r3, [pc, #220]	@ (800e960 <imu_ahrs_update+0x880>)
 800e884:	edd3 6a00 	vldr	s13, [r3]
 800e888:	4b33      	ldr	r3, [pc, #204]	@ (800e958 <imu_ahrs_update+0x878>)
 800e88a:	edd3 7a00 	vldr	s15, [r3]
 800e88e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e892:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e896:	4b33      	ldr	r3, [pc, #204]	@ (800e964 <imu_ahrs_update+0x884>)
 800e898:	edd3 6a00 	vldr	s13, [r3]
 800e89c:	4b2d      	ldr	r3, [pc, #180]	@ (800e954 <imu_ahrs_update+0x874>)
 800e89e:	edd3 7a00 	vldr	s15, [r3]
 800e8a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e8a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e8aa:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e8ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e8b2:	4b2d      	ldr	r3, [pc, #180]	@ (800e968 <imu_ahrs_update+0x888>)
 800e8b4:	edd3 7a00 	vldr	s15, [r3]
 800e8b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e8bc:	edc7 7a00 	vstr	s15, [r7]

    /*将四元数标准化 */
    norm = inv_sqrt(tempq0 * tempq0 + tempq1 * tempq1 + tempq2 * tempq2 + tempq3 * tempq3);
 800e8c0:	edd7 7a03 	vldr	s15, [r7, #12]
 800e8c4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800e8c8:	edd7 7a02 	vldr	s15, [r7, #8]
 800e8cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e8d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e8d4:	edd7 7a01 	vldr	s15, [r7, #4]
 800e8d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e8dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e8e0:	edd7 7a00 	vldr	s15, [r7]
 800e8e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e8e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e8ec:	eeb0 0a67 	vmov.f32	s0, s15
 800e8f0:	f7fe ffb4 	bl	800d85c <inv_sqrt>
 800e8f4:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    q0 = tempq0 * norm;
 800e8f8:	ed97 7a03 	vldr	s14, [r7, #12]
 800e8fc:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800e900:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e904:	4b19      	ldr	r3, [pc, #100]	@ (800e96c <imu_ahrs_update+0x88c>)
 800e906:	edc3 7a00 	vstr	s15, [r3]
    q1 = tempq1 * norm;
 800e90a:	ed97 7a02 	vldr	s14, [r7, #8]
 800e90e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800e912:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e916:	4b12      	ldr	r3, [pc, #72]	@ (800e960 <imu_ahrs_update+0x880>)
 800e918:	edc3 7a00 	vstr	s15, [r3]
    q2 = tempq2 * norm;
 800e91c:	ed97 7a01 	vldr	s14, [r7, #4]
 800e920:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800e924:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e928:	e022      	b.n	800e970 <imu_ahrs_update+0x890>
 800e92a:	bf00      	nop
 800e92c:	20000cb4 	.word	0x20000cb4
 800e930:	20000cb8 	.word	0x20000cb8
 800e934:	20000cc0 	.word	0x20000cc0
 800e938:	20000cc4 	.word	0x20000cc4
 800e93c:	20000cb0 	.word	0x20000cb0
 800e940:	20000cbc 	.word	0x20000cbc
 800e944:	3c23d70a 	.word	0x3c23d70a
 800e948:	20000c30 	.word	0x20000c30
 800e94c:	20000c34 	.word	0x20000c34
 800e950:	20000c38 	.word	0x20000c38
 800e954:	20000ca4 	.word	0x20000ca4
 800e958:	20000ca8 	.word	0x20000ca8
 800e95c:	20000cac 	.word	0x20000cac
 800e960:	20000c24 	.word	0x20000c24
 800e964:	20000c28 	.word	0x20000c28
 800e968:	20000c2c 	.word	0x20000c2c
 800e96c:	200000bc 	.word	0x200000bc
 800e970:	4b07      	ldr	r3, [pc, #28]	@ (800e990 <imu_ahrs_update+0x8b0>)
 800e972:	edc3 7a00 	vstr	s15, [r3]
    q3 = tempq3 * norm;
 800e976:	ed97 7a00 	vldr	s14, [r7]
 800e97a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800e97e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e982:	4b04      	ldr	r3, [pc, #16]	@ (800e994 <imu_ahrs_update+0x8b4>)
 800e984:	edc3 7a00 	vstr	s15, [r3]
}
 800e988:	bf00      	nop
 800e98a:	3778      	adds	r7, #120	@ 0x78
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	20000c28 	.word	0x20000c28
 800e994:	20000c2c 	.word	0x20000c2c

0800e998 <imu_attitude_update>:

// 更新imu的态度
void imu_attitude_update(void)
{
 800e998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e99c:	af00      	add	r7, sp, #0
    /* yaw    -pi----pi */
    imu.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3, -2 * q2 * q2 - 2 * q3 * q3 + 1) * 57.3;
 800e99e:	4b76      	ldr	r3, [pc, #472]	@ (800eb78 <imu_attitude_update+0x1e0>)
 800e9a0:	edd3 7a00 	vldr	s15, [r3]
 800e9a4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e9a8:	4b74      	ldr	r3, [pc, #464]	@ (800eb7c <imu_attitude_update+0x1e4>)
 800e9aa:	edd3 7a00 	vldr	s15, [r3]
 800e9ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e9b2:	4b73      	ldr	r3, [pc, #460]	@ (800eb80 <imu_attitude_update+0x1e8>)
 800e9b4:	edd3 7a00 	vldr	s15, [r3]
 800e9b8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e9bc:	4b71      	ldr	r3, [pc, #452]	@ (800eb84 <imu_attitude_update+0x1ec>)
 800e9be:	edd3 7a00 	vldr	s15, [r3]
 800e9c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e9c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e9ca:	ee17 0a90 	vmov	r0, s15
 800e9ce:	f7f1 fde3 	bl	8000598 <__aeabi_f2d>
 800e9d2:	4682      	mov	sl, r0
 800e9d4:	468b      	mov	fp, r1
 800e9d6:	4b69      	ldr	r3, [pc, #420]	@ (800eb7c <imu_attitude_update+0x1e4>)
 800e9d8:	edd3 7a00 	vldr	s15, [r3]
 800e9dc:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800e9e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e9e4:	4b65      	ldr	r3, [pc, #404]	@ (800eb7c <imu_attitude_update+0x1e4>)
 800e9e6:	edd3 7a00 	vldr	s15, [r3]
 800e9ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e9ee:	4b65      	ldr	r3, [pc, #404]	@ (800eb84 <imu_attitude_update+0x1ec>)
 800e9f0:	edd3 7a00 	vldr	s15, [r3]
 800e9f4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e9f8:	4b62      	ldr	r3, [pc, #392]	@ (800eb84 <imu_attitude_update+0x1ec>)
 800e9fa:	edd3 7a00 	vldr	s15, [r3]
 800e9fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ea06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ea0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ea0e:	ee17 0a90 	vmov	r0, s15
 800ea12:	f7f1 fdc1 	bl	8000598 <__aeabi_f2d>
 800ea16:	4602      	mov	r2, r0
 800ea18:	460b      	mov	r3, r1
 800ea1a:	ec43 2b11 	vmov	d1, r2, r3
 800ea1e:	ec4b ab10 	vmov	d0, sl, fp
 800ea22:	f004 ffcf 	bl	80139c4 <atan2>
 800ea26:	ec53 2b10 	vmov	r2, r3, d0
 800ea2a:	4690      	mov	r8, r2
 800ea2c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800ea30:	a34f      	add	r3, pc, #316	@ (adr r3, 800eb70 <imu_attitude_update+0x1d8>)
 800ea32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea36:	4640      	mov	r0, r8
 800ea38:	4649      	mov	r1, r9
 800ea3a:	f7f1 fe05 	bl	8000648 <__aeabi_dmul>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	460b      	mov	r3, r1
 800ea42:	4610      	mov	r0, r2
 800ea44:	4619      	mov	r1, r3
 800ea46:	f7f2 f8f7 	bl	8000c38 <__aeabi_d2f>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	4a4e      	ldr	r2, [pc, #312]	@ (800eb88 <imu_attitude_update+0x1f0>)
 800ea4e:	6313      	str	r3, [r2, #48]	@ 0x30
    /* pitch  -pi/2----pi/2 */
    imu.pit = -asin(-2 * q1 * q3 + 2 * q0 * q2) * 57.3;
 800ea50:	4b49      	ldr	r3, [pc, #292]	@ (800eb78 <imu_attitude_update+0x1e0>)
 800ea52:	edd3 7a00 	vldr	s15, [r3]
 800ea56:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800ea5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ea5e:	4b49      	ldr	r3, [pc, #292]	@ (800eb84 <imu_attitude_update+0x1ec>)
 800ea60:	edd3 7a00 	vldr	s15, [r3]
 800ea64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ea68:	4b45      	ldr	r3, [pc, #276]	@ (800eb80 <imu_attitude_update+0x1e8>)
 800ea6a:	edd3 7a00 	vldr	s15, [r3]
 800ea6e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800ea72:	4b42      	ldr	r3, [pc, #264]	@ (800eb7c <imu_attitude_update+0x1e4>)
 800ea74:	edd3 7a00 	vldr	s15, [r3]
 800ea78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea80:	ee17 0a90 	vmov	r0, s15
 800ea84:	f7f1 fd88 	bl	8000598 <__aeabi_f2d>
 800ea88:	4602      	mov	r2, r0
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	ec43 2b10 	vmov	d0, r2, r3
 800ea90:	f004 ff64 	bl	801395c <asin>
 800ea94:	ec53 2b10 	vmov	r2, r3, d0
 800ea98:	4614      	mov	r4, r2
 800ea9a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800ea9e:	a334      	add	r3, pc, #208	@ (adr r3, 800eb70 <imu_attitude_update+0x1d8>)
 800eaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	4629      	mov	r1, r5
 800eaa8:	f7f1 fdce 	bl	8000648 <__aeabi_dmul>
 800eaac:	4602      	mov	r2, r0
 800eaae:	460b      	mov	r3, r1
 800eab0:	4610      	mov	r0, r2
 800eab2:	4619      	mov	r1, r3
 800eab4:	f7f2 f8c0 	bl	8000c38 <__aeabi_d2f>
 800eab8:	4603      	mov	r3, r0
 800eaba:	4a33      	ldr	r2, [pc, #204]	@ (800eb88 <imu_attitude_update+0x1f0>)
 800eabc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    /* roll   -pi----pi  */
    imu.rol = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2 * q2 + 1) * 57.3;
 800eabe:	4b2f      	ldr	r3, [pc, #188]	@ (800eb7c <imu_attitude_update+0x1e4>)
 800eac0:	edd3 7a00 	vldr	s15, [r3]
 800eac4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800eac8:	4b2e      	ldr	r3, [pc, #184]	@ (800eb84 <imu_attitude_update+0x1ec>)
 800eaca:	edd3 7a00 	vldr	s15, [r3]
 800eace:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ead2:	4b2b      	ldr	r3, [pc, #172]	@ (800eb80 <imu_attitude_update+0x1e8>)
 800ead4:	edd3 7a00 	vldr	s15, [r3]
 800ead8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800eadc:	4b26      	ldr	r3, [pc, #152]	@ (800eb78 <imu_attitude_update+0x1e0>)
 800eade:	edd3 7a00 	vldr	s15, [r3]
 800eae2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eaea:	ee17 0a90 	vmov	r0, s15
 800eaee:	f7f1 fd53 	bl	8000598 <__aeabi_f2d>
 800eaf2:	4604      	mov	r4, r0
 800eaf4:	460d      	mov	r5, r1
 800eaf6:	4b20      	ldr	r3, [pc, #128]	@ (800eb78 <imu_attitude_update+0x1e0>)
 800eaf8:	edd3 7a00 	vldr	s15, [r3]
 800eafc:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800eb00:	ee27 7a87 	vmul.f32	s14, s15, s14
 800eb04:	4b1c      	ldr	r3, [pc, #112]	@ (800eb78 <imu_attitude_update+0x1e0>)
 800eb06:	edd3 7a00 	vldr	s15, [r3]
 800eb0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb0e:	4b1b      	ldr	r3, [pc, #108]	@ (800eb7c <imu_attitude_update+0x1e4>)
 800eb10:	edd3 7a00 	vldr	s15, [r3]
 800eb14:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800eb18:	4b18      	ldr	r3, [pc, #96]	@ (800eb7c <imu_attitude_update+0x1e4>)
 800eb1a:	edd3 7a00 	vldr	s15, [r3]
 800eb1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb22:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eb2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eb2e:	ee17 0a90 	vmov	r0, s15
 800eb32:	f7f1 fd31 	bl	8000598 <__aeabi_f2d>
 800eb36:	4602      	mov	r2, r0
 800eb38:	460b      	mov	r3, r1
 800eb3a:	ec43 2b11 	vmov	d1, r2, r3
 800eb3e:	ec45 4b10 	vmov	d0, r4, r5
 800eb42:	f004 ff3f 	bl	80139c4 <atan2>
 800eb46:	ec51 0b10 	vmov	r0, r1, d0
 800eb4a:	a309      	add	r3, pc, #36	@ (adr r3, 800eb70 <imu_attitude_update+0x1d8>)
 800eb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb50:	f7f1 fd7a 	bl	8000648 <__aeabi_dmul>
 800eb54:	4602      	mov	r2, r0
 800eb56:	460b      	mov	r3, r1
 800eb58:	4610      	mov	r0, r2
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	f7f2 f86c 	bl	8000c38 <__aeabi_d2f>
 800eb60:	4603      	mov	r3, r0
 800eb62:	4a09      	ldr	r2, [pc, #36]	@ (800eb88 <imu_attitude_update+0x1f0>)
 800eb64:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800eb66:	bf00      	nop
 800eb68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb6c:	f3af 8000 	nop.w
 800eb70:	66666666 	.word	0x66666666
 800eb74:	404ca666 	.word	0x404ca666
 800eb78:	20000c24 	.word	0x20000c24
 800eb7c:	20000c28 	.word	0x20000c28
 800eb80:	200000bc 	.word	0x200000bc
 800eb84:	20000c2c 	.word	0x20000c2c
 800eb88:	20000c6c 	.word	0x20000c6c

0800eb8c <_1_MT6701_GetRawData>:
#include "focLib.h"
#include "time_utils.h"
// static unsigned int rotationCount, rotationCount_Last;

uint16_t _1_MT6701_GetRawData(void)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b084      	sub	sp, #16
 800eb90:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800eb92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800eb96:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800eb98:	23c8      	movs	r3, #200	@ 0xc8
 800eb9a:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800eb9c:	e009      	b.n	800ebb2 <_1_MT6701_GetRawData+0x26>
    {
        if (timeOut-- == 0)
 800eb9e:	88fb      	ldrh	r3, [r7, #6]
 800eba0:	1e5a      	subs	r2, r3, #1
 800eba2:	80fa      	strh	r2, [r7, #6]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d104      	bne.n	800ebb2 <_1_MT6701_GetRawData+0x26>
        {
            printLog("SPI state error!\r\n");
 800eba8:	4819      	ldr	r0, [pc, #100]	@ (800ec10 <_1_MT6701_GetRawData+0x84>)
 800ebaa:	f7fe faa5 	bl	800d0f8 <printLog>
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800ebae:	2300      	movs	r3, #0
 800ebb0:	e02a      	b.n	800ec08 <_1_MT6701_GetRawData+0x7c>
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800ebb2:	4818      	ldr	r0, [pc, #96]	@ (800ec14 <_1_MT6701_GetRawData+0x88>)
 800ebb4:	f7f9 f959 	bl	8007e6a <HAL_SPI_GetState>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	2b01      	cmp	r3, #1
 800ebbc:	d1ef      	bne.n	800eb9e <_1_MT6701_GetRawData+0x12>
        }
    }

    _1_MT6701_CS_Enable;
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	2108      	movs	r1, #8
 800ebc2:	4815      	ldr	r0, [pc, #84]	@ (800ec18 <_1_MT6701_GetRawData+0x8c>)
 800ebc4:	f7f7 fe9a 	bl	80068fc <HAL_GPIO_WritePin>

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800ebc8:	1cba      	adds	r2, r7, #2
 800ebca:	4639      	mov	r1, r7
 800ebcc:	f04f 33ff 	mov.w	r3, #4294967295
 800ebd0:	9300      	str	r3, [sp, #0]
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	480f      	ldr	r0, [pc, #60]	@ (800ec14 <_1_MT6701_GetRawData+0x88>)
 800ebd6:	f7f8 ff26 	bl	8007a26 <HAL_SPI_TransmitReceive>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800ebde:	797b      	ldrb	r3, [r7, #5]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d009      	beq.n	800ebf8 <_1_MT6701_GetRawData+0x6c>
    {
        _1_MT6701_CS_Disable;
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	2108      	movs	r1, #8
 800ebe8:	480b      	ldr	r0, [pc, #44]	@ (800ec18 <_1_MT6701_GetRawData+0x8c>)
 800ebea:	f7f7 fe87 	bl	80068fc <HAL_GPIO_WritePin>
        printLog("MT6701 read data error!\r\n");
 800ebee:	480b      	ldr	r0, [pc, #44]	@ (800ec1c <_1_MT6701_GetRawData+0x90>)
 800ebf0:	f7fe fa82 	bl	800d0f8 <printLog>
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	e007      	b.n	800ec08 <_1_MT6701_GetRawData+0x7c>
    }

    _1_MT6701_CS_Disable;
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	2108      	movs	r1, #8
 800ebfc:	4806      	ldr	r0, [pc, #24]	@ (800ec18 <_1_MT6701_GetRawData+0x8c>)
 800ebfe:	f7f7 fe7d 	bl	80068fc <HAL_GPIO_WritePin>

    return rawData >> 2; // 取高14位的角度数据
 800ec02:	887b      	ldrh	r3, [r7, #2]
 800ec04:	089b      	lsrs	r3, r3, #2
 800ec06:	b29b      	uxth	r3, r3
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3708      	adds	r7, #8
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}
 800ec10:	08014870 	.word	0x08014870
 800ec14:	20000460 	.word	0x20000460
 800ec18:	48000400 	.word	0x48000400
 800ec1c:	08014884 	.word	0x08014884

0800ec20 <_1_MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float _1_MT6701_GetRawAngle(void)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
    uint16_t rawData = _1_MT6701_GetRawData();
 800ec26:	f7ff ffb1 	bl	800eb8c <_1_MT6701_GetRawData>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800ec2e:	88fb      	ldrh	r3, [r7, #6]
 800ec30:	ee07 3a90 	vmov	s15, r3
 800ec34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ec38:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800ec54 <_1_MT6701_GetRawAngle+0x34>
 800ec3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ec40:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800ec58 <_1_MT6701_GetRawAngle+0x38>
 800ec44:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800ec48:	eeb0 0a67 	vmov.f32	s0, s15
 800ec4c:	3708      	adds	r7, #8
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	46800000 	.word	0x46800000
 800ec58:	40c90fdb 	.word	0x40c90fdb

0800ec5c <_2_MT6701_GetRawData>:

uint16_t _2_MT6701_GetRawData(void)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af02      	add	r7, sp, #8
    uint16_t rawData;
    uint16_t txData = 0xFFFF;
 800ec62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ec66:	803b      	strh	r3, [r7, #0]
    uint16_t timeOut = 200;
 800ec68:	23c8      	movs	r3, #200	@ 0xc8
 800ec6a:	80fb      	strh	r3, [r7, #6]

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800ec6c:	e009      	b.n	800ec82 <_2_MT6701_GetRawData+0x26>
    {
        if (timeOut-- == 0)
 800ec6e:	88fb      	ldrh	r3, [r7, #6]
 800ec70:	1e5a      	subs	r2, r3, #1
 800ec72:	80fa      	strh	r2, [r7, #6]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d104      	bne.n	800ec82 <_2_MT6701_GetRawData+0x26>
        {
            printLog("SPI state error!\r\n");
 800ec78:	4819      	ldr	r0, [pc, #100]	@ (800ece0 <_2_MT6701_GetRawData+0x84>)
 800ec7a:	f7fe fa3d 	bl	800d0f8 <printLog>
            return 0; // 在超时时直接返回，避免继续执行后续代码
 800ec7e:	2300      	movs	r3, #0
 800ec80:	e02a      	b.n	800ecd8 <_2_MT6701_GetRawData+0x7c>
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 800ec82:	4818      	ldr	r0, [pc, #96]	@ (800ece4 <_2_MT6701_GetRawData+0x88>)
 800ec84:	f7f9 f8f1 	bl	8007e6a <HAL_SPI_GetState>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	2b01      	cmp	r3, #1
 800ec8c:	d1ef      	bne.n	800ec6e <_2_MT6701_GetRawData+0x12>
        }
    }

    _2_MT6701_CS_Enable;
 800ec8e:	2200      	movs	r2, #0
 800ec90:	2110      	movs	r1, #16
 800ec92:	4815      	ldr	r0, [pc, #84]	@ (800ece8 <_2_MT6701_GetRawData+0x8c>)
 800ec94:	f7f7 fe32 	bl	80068fc <HAL_GPIO_WritePin>

    HAL_StatusTypeDef spiStatus = HAL_SPI_TransmitReceive(&hspi3, (uint8_t *)&txData, (uint8_t *)&rawData, 1, HAL_MAX_DELAY);
 800ec98:	1cba      	adds	r2, r7, #2
 800ec9a:	4639      	mov	r1, r7
 800ec9c:	f04f 33ff 	mov.w	r3, #4294967295
 800eca0:	9300      	str	r3, [sp, #0]
 800eca2:	2301      	movs	r3, #1
 800eca4:	480f      	ldr	r0, [pc, #60]	@ (800ece4 <_2_MT6701_GetRawData+0x88>)
 800eca6:	f7f8 febe 	bl	8007a26 <HAL_SPI_TransmitReceive>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	717b      	strb	r3, [r7, #5]
    if (spiStatus != HAL_OK)
 800ecae:	797b      	ldrb	r3, [r7, #5]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d009      	beq.n	800ecc8 <_2_MT6701_GetRawData+0x6c>
    {
        _2_MT6701_CS_Disable;
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	2110      	movs	r1, #16
 800ecb8:	480b      	ldr	r0, [pc, #44]	@ (800ece8 <_2_MT6701_GetRawData+0x8c>)
 800ecba:	f7f7 fe1f 	bl	80068fc <HAL_GPIO_WritePin>
        printLog("MT6701 read data error!\r\n");
 800ecbe:	480b      	ldr	r0, [pc, #44]	@ (800ecec <_2_MT6701_GetRawData+0x90>)
 800ecc0:	f7fe fa1a 	bl	800d0f8 <printLog>
        return 0; // 在SPI传输错误时直接返回，避免继续执行后续代码
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	e007      	b.n	800ecd8 <_2_MT6701_GetRawData+0x7c>
    }

    _2_MT6701_CS_Disable;
 800ecc8:	2201      	movs	r2, #1
 800ecca:	2110      	movs	r1, #16
 800eccc:	4806      	ldr	r0, [pc, #24]	@ (800ece8 <_2_MT6701_GetRawData+0x8c>)
 800ecce:	f7f7 fe15 	bl	80068fc <HAL_GPIO_WritePin>

    return rawData >> 2; // 取高14位的角度数据
 800ecd2:	887b      	ldrh	r3, [r7, #2]
 800ecd4:	089b      	lsrs	r3, r3, #2
 800ecd6:	b29b      	uxth	r3, r3
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3708      	adds	r7, #8
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	08014870 	.word	0x08014870
 800ece4:	20000460 	.word	0x20000460
 800ece8:	48000800 	.word	0x48000800
 800ecec:	08014884 	.word	0x08014884

0800ecf0 <_2_MT6701_GetRawAngle>:

// 将传感器原始数据转化为弧度
float _2_MT6701_GetRawAngle(void)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
    uint16_t rawData = _2_MT6701_GetRawData();
 800ecf6:	f7ff ffb1 	bl	800ec5c <_2_MT6701_GetRawData>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	80fb      	strh	r3, [r7, #6]
    return (float)rawData / 16384.0f * _2PI;
 800ecfe:	88fb      	ldrh	r3, [r7, #6]
 800ed00:	ee07 3a90 	vmov	s15, r3
 800ed04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ed08:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800ed24 <_2_MT6701_GetRawAngle+0x34>
 800ed0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ed10:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800ed28 <_2_MT6701_GetRawAngle+0x38>
 800ed14:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800ed18:	eeb0 0a67 	vmov.f32	s0, s15
 800ed1c:	3708      	adds	r7, #8
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
 800ed22:	bf00      	nop
 800ed24:	46800000 	.word	0x46800000
 800ed28:	40c90fdb 	.word	0x40c90fdb

0800ed2c <startPwm1>:
#include "pwm.h"

 void startPwm1()
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800ed30:	2100      	movs	r1, #0
 800ed32:	4806      	ldr	r0, [pc, #24]	@ (800ed4c <startPwm1+0x20>)
 800ed34:	f7f9 fb28 	bl	8008388 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800ed38:	2104      	movs	r1, #4
 800ed3a:	4804      	ldr	r0, [pc, #16]	@ (800ed4c <startPwm1+0x20>)
 800ed3c:	f7f9 fb24 	bl	8008388 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800ed40:	2108      	movs	r1, #8
 800ed42:	4802      	ldr	r0, [pc, #8]	@ (800ed4c <startPwm1+0x20>)
 800ed44:	f7f9 fb20 	bl	8008388 <HAL_TIM_PWM_Start>

}
 800ed48:	bf00      	nop
 800ed4a:	bd80      	pop	{r7, pc}
 800ed4c:	20000514 	.word	0x20000514

0800ed50 <stopPwm1>:
 void stopPwm1()
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800ed54:	2100      	movs	r1, #0
 800ed56:	4806      	ldr	r0, [pc, #24]	@ (800ed70 <stopPwm1+0x20>)
 800ed58:	f7f9 fc16 	bl	8008588 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 800ed5c:	2104      	movs	r1, #4
 800ed5e:	4804      	ldr	r0, [pc, #16]	@ (800ed70 <stopPwm1+0x20>)
 800ed60:	f7f9 fc12 	bl	8008588 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 800ed64:	2108      	movs	r1, #8
 800ed66:	4802      	ldr	r0, [pc, #8]	@ (800ed70 <stopPwm1+0x20>)
 800ed68:	f7f9 fc0e 	bl	8008588 <HAL_TIM_PWM_Stop>

}
 800ed6c:	bf00      	nop
 800ed6e:	bd80      	pop	{r7, pc}
 800ed70:	20000514 	.word	0x20000514

0800ed74 <updatePwm1>:
 void updatePwm1(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b083      	sub	sp, #12
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	80fb      	strh	r3, [r7, #6]
 800ed7e:	460b      	mov	r3, r1
 800ed80:	80bb      	strh	r3, [r7, #4]
 800ed82:	4613      	mov	r3, r2
 800ed84:	807b      	strh	r3, [r7, #2]
    TIM8->CCR1 = a;
 800ed86:	4a07      	ldr	r2, [pc, #28]	@ (800eda4 <updatePwm1+0x30>)
 800ed88:	88fb      	ldrh	r3, [r7, #6]
 800ed8a:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM8->CCR2 = b;
 800ed8c:	4a05      	ldr	r2, [pc, #20]	@ (800eda4 <updatePwm1+0x30>)
 800ed8e:	88bb      	ldrh	r3, [r7, #4]
 800ed90:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM8->CCR3 = c;
 800ed92:	4a04      	ldr	r2, [pc, #16]	@ (800eda4 <updatePwm1+0x30>)
 800ed94:	887b      	ldrh	r3, [r7, #2]
 800ed96:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800ed98:	bf00      	nop
 800ed9a:	370c      	adds	r7, #12
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda2:	4770      	bx	lr
 800eda4:	40013400 	.word	0x40013400

0800eda8 <startPwm2>:

 void startPwm2()
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800edac:	2100      	movs	r1, #0
 800edae:	4806      	ldr	r0, [pc, #24]	@ (800edc8 <startPwm2+0x20>)
 800edb0:	f7f9 faea 	bl	8008388 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800edb4:	2104      	movs	r1, #4
 800edb6:	4804      	ldr	r0, [pc, #16]	@ (800edc8 <startPwm2+0x20>)
 800edb8:	f7f9 fae6 	bl	8008388 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800edbc:	2108      	movs	r1, #8
 800edbe:	4802      	ldr	r0, [pc, #8]	@ (800edc8 <startPwm2+0x20>)
 800edc0:	f7f9 fae2 	bl	8008388 <HAL_TIM_PWM_Start>
 
}
 800edc4:	bf00      	nop
 800edc6:	bd80      	pop	{r7, pc}
 800edc8:	200004c8 	.word	0x200004c8

0800edcc <stopPwm2>:
 void stopPwm2()
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800edd0:	2100      	movs	r1, #0
 800edd2:	4806      	ldr	r0, [pc, #24]	@ (800edec <stopPwm2+0x20>)
 800edd4:	f7f9 fbd8 	bl	8008588 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800edd8:	2104      	movs	r1, #4
 800edda:	4804      	ldr	r0, [pc, #16]	@ (800edec <stopPwm2+0x20>)
 800eddc:	f7f9 fbd4 	bl	8008588 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800ede0:	2108      	movs	r1, #8
 800ede2:	4802      	ldr	r0, [pc, #8]	@ (800edec <stopPwm2+0x20>)
 800ede4:	f7f9 fbd0 	bl	8008588 <HAL_TIM_PWM_Stop>
 
}
 800ede8:	bf00      	nop
 800edea:	bd80      	pop	{r7, pc}
 800edec:	200004c8 	.word	0x200004c8

0800edf0 <updatePwm2>:

 void updatePwm2(unsigned short int a, unsigned short int b, unsigned short int c)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	4603      	mov	r3, r0
 800edf8:	80fb      	strh	r3, [r7, #6]
 800edfa:	460b      	mov	r3, r1
 800edfc:	80bb      	strh	r3, [r7, #4]
 800edfe:	4613      	mov	r3, r2
 800ee00:	807b      	strh	r3, [r7, #2]
    TIM1->CCR1 = c;
 800ee02:	4a07      	ldr	r2, [pc, #28]	@ (800ee20 <updatePwm2+0x30>)
 800ee04:	887b      	ldrh	r3, [r7, #2]
 800ee06:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = b;
 800ee08:	4a05      	ldr	r2, [pc, #20]	@ (800ee20 <updatePwm2+0x30>)
 800ee0a:	88bb      	ldrh	r3, [r7, #4]
 800ee0c:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = a;
 800ee0e:	4a04      	ldr	r2, [pc, #16]	@ (800ee20 <updatePwm2+0x30>)
 800ee10:	88fb      	ldrh	r3, [r7, #6]
 800ee12:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800ee14:	bf00      	nop
 800ee16:	370c      	adds	r7, #12
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1e:	4770      	bx	lr
 800ee20:	40012c00 	.word	0x40012c00

0800ee24 <delay>:
#include "time_utils.h"

__IO uint32_t m, tms, u, t0;

void delay(uint32_t _ms)
{
 800ee24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee28:	b082      	sub	sp, #8
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	6078      	str	r0, [r7, #4]
    t0 = micros();
 800ee2e:	f000 f83b 	bl	800eea8 <micros>
 800ee32:	4602      	mov	r2, r0
 800ee34:	460b      	mov	r3, r1
 800ee36:	4b11      	ldr	r3, [pc, #68]	@ (800ee7c <delay+0x58>)
 800ee38:	601a      	str	r2, [r3, #0]
    while (micros() - t0 < _ms * 1000)
 800ee3a:	e000      	b.n	800ee3e <delay+0x1a>
        __NOP();
 800ee3c:	bf00      	nop
    while (micros() - t0 < _ms * 1000)
 800ee3e:	f000 f833 	bl	800eea8 <micros>
 800ee42:	4602      	mov	r2, r0
 800ee44:	460b      	mov	r3, r1
 800ee46:	490d      	ldr	r1, [pc, #52]	@ (800ee7c <delay+0x58>)
 800ee48:	6809      	ldr	r1, [r1, #0]
 800ee4a:	2000      	movs	r0, #0
 800ee4c:	468a      	mov	sl, r1
 800ee4e:	4683      	mov	fp, r0
 800ee50:	ebb2 040a 	subs.w	r4, r2, sl
 800ee54:	eb63 050b 	sbc.w	r5, r3, fp
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ee5e:	fb02 f303 	mul.w	r3, r2, r3
 800ee62:	2200      	movs	r2, #0
 800ee64:	4698      	mov	r8, r3
 800ee66:	4691      	mov	r9, r2
 800ee68:	4544      	cmp	r4, r8
 800ee6a:	eb75 0309 	sbcs.w	r3, r5, r9
 800ee6e:	d3e5      	bcc.n	800ee3c <delay+0x18>
}
 800ee70:	bf00      	nop
 800ee72:	bf00      	nop
 800ee74:	3708      	adds	r7, #8
 800ee76:	46bd      	mov	sp, r7
 800ee78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ee7c:	20000cdc 	.word	0x20000cdc

0800ee80 <LL_SYSTICK_IsActiveCounterFlag>:
    while (_us--)
        __NOP();
}

__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag()
{
 800ee80:	b480      	push	{r7}
 800ee82:	af00      	add	r7, sp, #0
    return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800ee84:	4b07      	ldr	r3, [pc, #28]	@ (800eea4 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ee8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee90:	bf0c      	ite	eq
 800ee92:	2301      	moveq	r3, #1
 800ee94:	2300      	movne	r3, #0
 800ee96:	b2db      	uxtb	r3, r3
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea0:	4770      	bx	lr
 800eea2:	bf00      	nop
 800eea4:	e000e010 	.word	0xe000e010

0800eea8 <micros>:

uint64_t micros()
{
 800eea8:	b5b0      	push	{r4, r5, r7, lr}
 800eeaa:	af00      	add	r7, sp, #0
    /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
    LL_SYSTICK_IsActiveCounterFlag();
 800eeac:	f7ff ffe8 	bl	800ee80 <LL_SYSTICK_IsActiveCounterFlag>
    m = HAL_GetTick();
 800eeb0:	f7f3 fd74 	bl	800299c <HAL_GetTick>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	4a1c      	ldr	r2, [pc, #112]	@ (800ef28 <micros+0x80>)
 800eeb8:	6013      	str	r3, [r2, #0]
    tms = SysTick->LOAD + 1;
 800eeba:	4b1c      	ldr	r3, [pc, #112]	@ (800ef2c <micros+0x84>)
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	3301      	adds	r3, #1
 800eec0:	4a1b      	ldr	r2, [pc, #108]	@ (800ef30 <micros+0x88>)
 800eec2:	6013      	str	r3, [r2, #0]
    u = tms - SysTick->VAL;
 800eec4:	4b1a      	ldr	r3, [pc, #104]	@ (800ef30 <micros+0x88>)
 800eec6:	681a      	ldr	r2, [r3, #0]
 800eec8:	4b18      	ldr	r3, [pc, #96]	@ (800ef2c <micros+0x84>)
 800eeca:	689b      	ldr	r3, [r3, #8]
 800eecc:	1ad3      	subs	r3, r2, r3
 800eece:	4a19      	ldr	r2, [pc, #100]	@ (800ef34 <micros+0x8c>)
 800eed0:	6013      	str	r3, [r2, #0]
    if (LL_SYSTICK_IsActiveCounterFlag())
 800eed2:	f7ff ffd5 	bl	800ee80 <LL_SYSTICK_IsActiveCounterFlag>
 800eed6:	4603      	mov	r3, r0
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d00b      	beq.n	800eef4 <micros+0x4c>
    {
        m = HAL_GetTick();
 800eedc:	f7f3 fd5e 	bl	800299c <HAL_GetTick>
 800eee0:	4603      	mov	r3, r0
 800eee2:	4a11      	ldr	r2, [pc, #68]	@ (800ef28 <micros+0x80>)
 800eee4:	6013      	str	r3, [r2, #0]
        u = tms - SysTick->VAL;
 800eee6:	4b12      	ldr	r3, [pc, #72]	@ (800ef30 <micros+0x88>)
 800eee8:	681a      	ldr	r2, [r3, #0]
 800eeea:	4b10      	ldr	r3, [pc, #64]	@ (800ef2c <micros+0x84>)
 800eeec:	689b      	ldr	r3, [r3, #8]
 800eeee:	1ad3      	subs	r3, r2, r3
 800eef0:	4a10      	ldr	r2, [pc, #64]	@ (800ef34 <micros+0x8c>)
 800eef2:	6013      	str	r3, [r2, #0]
    }
    return (m * 1000 + (u * 1000) / tms);
 800eef4:	4b0c      	ldr	r3, [pc, #48]	@ (800ef28 <micros+0x80>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800eefc:	fb03 f202 	mul.w	r2, r3, r2
 800ef00:	4b0c      	ldr	r3, [pc, #48]	@ (800ef34 <micros+0x8c>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ef08:	fb03 f101 	mul.w	r1, r3, r1
 800ef0c:	4b08      	ldr	r3, [pc, #32]	@ (800ef30 <micros+0x88>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	fbb1 f3f3 	udiv	r3, r1, r3
 800ef14:	4413      	add	r3, r2
 800ef16:	2200      	movs	r2, #0
 800ef18:	461c      	mov	r4, r3
 800ef1a:	4615      	mov	r5, r2
 800ef1c:	4622      	mov	r2, r4
 800ef1e:	462b      	mov	r3, r5
}
 800ef20:	4610      	mov	r0, r2
 800ef22:	4619      	mov	r1, r3
 800ef24:	bdb0      	pop	{r4, r5, r7, pc}
 800ef26:	bf00      	nop
 800ef28:	20000cd0 	.word	0x20000cd0
 800ef2c:	e000e010 	.word	0xe000e010
 800ef30:	20000cd4 	.word	0x20000cd4
 800ef34:	20000cd8 	.word	0x20000cd8

0800ef38 <userMain>:
float HallTheta = 0;
float HallSpeed = 0;
uint8_t HallReadTemp = 0;
// static bool powerLost;
void userMain(void)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	af00      	add	r7, sp, #0

	if (get5MsFlag())
 800ef3c:	f000 f94c 	bl	800f1d8 <get5MsFlag>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d001      	beq.n	800ef4a <userMain+0x12>
	{
		keyScan();
 800ef46:	f7fe fab3 	bl	800d4b0 <keyScan>
	}
	if (getOneMsFlag())
 800ef4a:	f000 f931 	bl	800f1b0 <getOneMsFlag>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d017      	beq.n	800ef84 <userMain+0x4c>
	{
		static bool imuInited;

		if (imuInited == false)
 800ef54:	4b10      	ldr	r3, [pc, #64]	@ (800ef98 <userMain+0x60>)
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d10d      	bne.n	800ef78 <userMain+0x40>
		{
			if (IMU_Init() == 0)
 800ef5c:	f7fe ff26 	bl	800ddac <IMU_Init>
 800ef60:	4603      	mov	r3, r0
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d10e      	bne.n	800ef84 <userMain+0x4c>
			{
				init_quaternion();
 800ef66:	f7fe ff7f 	bl	800de68 <init_quaternion>
				imuInited = true;
 800ef6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ef98 <userMain+0x60>)
 800ef6c:	2201      	movs	r2, #1
 800ef6e:	701a      	strb	r2, [r3, #0]
				printLog("mpu init done\n");
 800ef70:	480a      	ldr	r0, [pc, #40]	@ (800ef9c <userMain+0x64>)
 800ef72:	f7fe f8c1 	bl	800d0f8 <printLog>
 800ef76:	e005      	b.n	800ef84 <userMain+0x4c>
			}
		}
		else
		{
			// IMU_handle();
			mpu_get_data();
 800ef78:	f7fe fd76 	bl	800da68 <mpu_get_data>
			imu_ahrs_update();
 800ef7c:	f7ff f8b0 	bl	800e0e0 <imu_ahrs_update>
			imu_attitude_update();
 800ef80:	f7ff fd0a 	bl	800e998 <imu_attitude_update>
			
		}
	}

	if (get100MsFlag())
 800ef84:	f000 f93c 	bl	800f200 <get100MsFlag>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d001      	beq.n	800ef92 <userMain+0x5a>
	{
		appRunning();
 800ef8e:	f7fd fe9b 	bl	800ccc8 <appRunning>
	if (get500MsFlag())
	{
		uartTx();
	}
#endif
}
 800ef92:	bf00      	nop
 800ef94:	bd80      	pop	{r7, pc}
 800ef96:	bf00      	nop
 800ef98:	20000ce0 	.word	0x20000ce0
 800ef9c:	080148a0 	.word	0x080148a0

0800efa0 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max)
{
 800efa0:	b480      	push	{r7}
 800efa2:	b087      	sub	sp, #28
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	ed87 0a05 	vstr	s0, [r7, #20]
 800efaa:	edc7 0a04 	vstr	s1, [r7, #16]
 800efae:	ed87 1a03 	vstr	s2, [r7, #12]
 800efb2:	edc7 1a02 	vstr	s3, [r7, #8]
 800efb6:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800efba:	ed97 7a05 	vldr	s14, [r7, #20]
 800efbe:	edd7 7a04 	vldr	s15, [r7, #16]
 800efc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800efc6:	edd7 6a01 	vldr	s13, [r7, #4]
 800efca:	edd7 7a02 	vldr	s15, [r7, #8]
 800efce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800efd2:	ee67 6a27 	vmul.f32	s13, s14, s15
 800efd6:	ed97 7a03 	vldr	s14, [r7, #12]
 800efda:	edd7 7a04 	vldr	s15, [r7, #16]
 800efde:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800efe6:	edd7 7a02 	vldr	s15, [r7, #8]
 800efea:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800efee:	eeb0 0a67 	vmov.f32	s0, s15
 800eff2:	371c      	adds	r7, #28
 800eff4:	46bd      	mov	sp, r7
 800eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effa:	4770      	bx	lr

0800effc <dealPer100us>:


static bool _5msFlag, _10msFlag, _20msFlag, _30msFlag, _100msFlag, _500msFlag, _1s;
static void dealPerMs();
void dealPer100us()
{
 800effc:	b580      	push	{r7, lr}
 800effe:	af00      	add	r7, sp, #0
    static unsigned char cnt;
    if (++cnt >= 10)
 800f000:	4b08      	ldr	r3, [pc, #32]	@ (800f024 <dealPer100us+0x28>)
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	3301      	adds	r3, #1
 800f006:	b2da      	uxtb	r2, r3
 800f008:	4b06      	ldr	r3, [pc, #24]	@ (800f024 <dealPer100us+0x28>)
 800f00a:	701a      	strb	r2, [r3, #0]
 800f00c:	4b05      	ldr	r3, [pc, #20]	@ (800f024 <dealPer100us+0x28>)
 800f00e:	781b      	ldrb	r3, [r3, #0]
 800f010:	2b09      	cmp	r3, #9
 800f012:	d904      	bls.n	800f01e <dealPer100us+0x22>
    {
        cnt = 0;
 800f014:	4b03      	ldr	r3, [pc, #12]	@ (800f024 <dealPer100us+0x28>)
 800f016:	2200      	movs	r2, #0
 800f018:	701a      	strb	r2, [r3, #0]
        dealPerMs();
 800f01a:	f000 f805 	bl	800f028 <dealPerMs>
    }

}
 800f01e:	bf00      	nop
 800f020:	bd80      	pop	{r7, pc}
 800f022:	bf00      	nop
 800f024:	20000cef 	.word	0x20000cef

0800f028 <dealPerMs>:

static void dealPerMs()
{
 800f028:	b480      	push	{r7}
 800f02a:	af00      	add	r7, sp, #0
    static unsigned char _5msCnt, _30msCnt, _20msCnt, _100msCnt, _10msCnt;
    static uint _500msCnt, _1000msCnt;
    if (++_5msCnt >= 5)
 800f02c:	4b45      	ldr	r3, [pc, #276]	@ (800f144 <dealPerMs+0x11c>)
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	3301      	adds	r3, #1
 800f032:	b2da      	uxtb	r2, r3
 800f034:	4b43      	ldr	r3, [pc, #268]	@ (800f144 <dealPerMs+0x11c>)
 800f036:	701a      	strb	r2, [r3, #0]
 800f038:	4b42      	ldr	r3, [pc, #264]	@ (800f144 <dealPerMs+0x11c>)
 800f03a:	781b      	ldrb	r3, [r3, #0]
 800f03c:	2b04      	cmp	r3, #4
 800f03e:	d905      	bls.n	800f04c <dealPerMs+0x24>
    {
        _5msCnt = 0;
 800f040:	4b40      	ldr	r3, [pc, #256]	@ (800f144 <dealPerMs+0x11c>)
 800f042:	2200      	movs	r2, #0
 800f044:	701a      	strb	r2, [r3, #0]
        _5msFlag = 1;
 800f046:	4b40      	ldr	r3, [pc, #256]	@ (800f148 <dealPerMs+0x120>)
 800f048:	2201      	movs	r2, #1
 800f04a:	701a      	strb	r2, [r3, #0]
    }

    if (++_10msCnt >= 10)
 800f04c:	4b3f      	ldr	r3, [pc, #252]	@ (800f14c <dealPerMs+0x124>)
 800f04e:	781b      	ldrb	r3, [r3, #0]
 800f050:	3301      	adds	r3, #1
 800f052:	b2da      	uxtb	r2, r3
 800f054:	4b3d      	ldr	r3, [pc, #244]	@ (800f14c <dealPerMs+0x124>)
 800f056:	701a      	strb	r2, [r3, #0]
 800f058:	4b3c      	ldr	r3, [pc, #240]	@ (800f14c <dealPerMs+0x124>)
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	2b09      	cmp	r3, #9
 800f05e:	d905      	bls.n	800f06c <dealPerMs+0x44>
    {
        _10msCnt = 0;
 800f060:	4b3a      	ldr	r3, [pc, #232]	@ (800f14c <dealPerMs+0x124>)
 800f062:	2200      	movs	r2, #0
 800f064:	701a      	strb	r2, [r3, #0]
        _10msFlag = 1;
 800f066:	4b3a      	ldr	r3, [pc, #232]	@ (800f150 <dealPerMs+0x128>)
 800f068:	2201      	movs	r2, #1
 800f06a:	701a      	strb	r2, [r3, #0]
    }

    if (++_20msCnt >= 20)
 800f06c:	4b39      	ldr	r3, [pc, #228]	@ (800f154 <dealPerMs+0x12c>)
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	3301      	adds	r3, #1
 800f072:	b2da      	uxtb	r2, r3
 800f074:	4b37      	ldr	r3, [pc, #220]	@ (800f154 <dealPerMs+0x12c>)
 800f076:	701a      	strb	r2, [r3, #0]
 800f078:	4b36      	ldr	r3, [pc, #216]	@ (800f154 <dealPerMs+0x12c>)
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	2b13      	cmp	r3, #19
 800f07e:	d905      	bls.n	800f08c <dealPerMs+0x64>
    {
        _20msCnt = 0;
 800f080:	4b34      	ldr	r3, [pc, #208]	@ (800f154 <dealPerMs+0x12c>)
 800f082:	2200      	movs	r2, #0
 800f084:	701a      	strb	r2, [r3, #0]
        _20msFlag = 1;
 800f086:	4b34      	ldr	r3, [pc, #208]	@ (800f158 <dealPerMs+0x130>)
 800f088:	2201      	movs	r2, #1
 800f08a:	701a      	strb	r2, [r3, #0]
    }

    if (++_30msCnt >= 30)
 800f08c:	4b33      	ldr	r3, [pc, #204]	@ (800f15c <dealPerMs+0x134>)
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	3301      	adds	r3, #1
 800f092:	b2da      	uxtb	r2, r3
 800f094:	4b31      	ldr	r3, [pc, #196]	@ (800f15c <dealPerMs+0x134>)
 800f096:	701a      	strb	r2, [r3, #0]
 800f098:	4b30      	ldr	r3, [pc, #192]	@ (800f15c <dealPerMs+0x134>)
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	2b1d      	cmp	r3, #29
 800f09e:	d905      	bls.n	800f0ac <dealPerMs+0x84>
    {
        _30msCnt = 0;
 800f0a0:	4b2e      	ldr	r3, [pc, #184]	@ (800f15c <dealPerMs+0x134>)
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	701a      	strb	r2, [r3, #0]
        _30msFlag = 1;
 800f0a6:	4b2e      	ldr	r3, [pc, #184]	@ (800f160 <dealPerMs+0x138>)
 800f0a8:	2201      	movs	r2, #1
 800f0aa:	701a      	strb	r2, [r3, #0]
    }

    if (++_100msCnt >= 100)
 800f0ac:	4b2d      	ldr	r3, [pc, #180]	@ (800f164 <dealPerMs+0x13c>)
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	b2da      	uxtb	r2, r3
 800f0b4:	4b2b      	ldr	r3, [pc, #172]	@ (800f164 <dealPerMs+0x13c>)
 800f0b6:	701a      	strb	r2, [r3, #0]
 800f0b8:	4b2a      	ldr	r3, [pc, #168]	@ (800f164 <dealPerMs+0x13c>)
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	2b63      	cmp	r3, #99	@ 0x63
 800f0be:	d905      	bls.n	800f0cc <dealPerMs+0xa4>
    {
        _100msCnt = 0;
 800f0c0:	4b28      	ldr	r3, [pc, #160]	@ (800f164 <dealPerMs+0x13c>)
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	701a      	strb	r2, [r3, #0]
        _100msFlag = 1;
 800f0c6:	4b28      	ldr	r3, [pc, #160]	@ (800f168 <dealPerMs+0x140>)
 800f0c8:	2201      	movs	r2, #1
 800f0ca:	701a      	strb	r2, [r3, #0]
    }

    if (++_500msCnt >= 500)
 800f0cc:	4b27      	ldr	r3, [pc, #156]	@ (800f16c <dealPerMs+0x144>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	4a26      	ldr	r2, [pc, #152]	@ (800f16c <dealPerMs+0x144>)
 800f0d4:	6013      	str	r3, [r2, #0]
 800f0d6:	4b25      	ldr	r3, [pc, #148]	@ (800f16c <dealPerMs+0x144>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800f0de:	d305      	bcc.n	800f0ec <dealPerMs+0xc4>
    {
        _500msCnt = 0;
 800f0e0:	4b22      	ldr	r3, [pc, #136]	@ (800f16c <dealPerMs+0x144>)
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	601a      	str	r2, [r3, #0]
        _500msFlag = 1;
 800f0e6:	4b22      	ldr	r3, [pc, #136]	@ (800f170 <dealPerMs+0x148>)
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	701a      	strb	r2, [r3, #0]
    }
    if (++_1000msCnt >= 1000)
 800f0ec:	4b21      	ldr	r3, [pc, #132]	@ (800f174 <dealPerMs+0x14c>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	4a20      	ldr	r2, [pc, #128]	@ (800f174 <dealPerMs+0x14c>)
 800f0f4:	6013      	str	r3, [r2, #0]
 800f0f6:	4b1f      	ldr	r3, [pc, #124]	@ (800f174 <dealPerMs+0x14c>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f0fe:	d305      	bcc.n	800f10c <dealPerMs+0xe4>
    {
        _1000msCnt = 0;
 800f100:	4b1c      	ldr	r3, [pc, #112]	@ (800f174 <dealPerMs+0x14c>)
 800f102:	2200      	movs	r2, #0
 800f104:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800f106:	4b1c      	ldr	r3, [pc, #112]	@ (800f178 <dealPerMs+0x150>)
 800f108:	2201      	movs	r2, #1
 800f10a:	701a      	strb	r2, [r3, #0]

        cnt = 0;
    }

#else
    frequence = 50;
 800f10c:	4b1b      	ldr	r3, [pc, #108]	@ (800f17c <dealPerMs+0x154>)
 800f10e:	2232      	movs	r2, #50	@ 0x32
 800f110:	701a      	strb	r2, [r3, #0]
            _1s = 1;
        }
    }
#else

    if (++_1msCnt >= 1000)
 800f112:	4b1b      	ldr	r3, [pc, #108]	@ (800f180 <dealPerMs+0x158>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	3301      	adds	r3, #1
 800f118:	4a19      	ldr	r2, [pc, #100]	@ (800f180 <dealPerMs+0x158>)
 800f11a:	6013      	str	r3, [r2, #0]
 800f11c:	4b18      	ldr	r3, [pc, #96]	@ (800f180 <dealPerMs+0x158>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f124:	d305      	bcc.n	800f132 <dealPerMs+0x10a>
    {
        _1msCnt = 0;
 800f126:	4b16      	ldr	r3, [pc, #88]	@ (800f180 <dealPerMs+0x158>)
 800f128:	2200      	movs	r2, #0
 800f12a:	601a      	str	r2, [r3, #0]
        _1s = 1;
 800f12c:	4b12      	ldr	r3, [pc, #72]	@ (800f178 <dealPerMs+0x150>)
 800f12e:	2201      	movs	r2, #1
 800f130:	701a      	strb	r2, [r3, #0]
    }
#endif
#if SPEED_UP
    _1s = 1;
#endif
    _1ms = 1;
 800f132:	4b14      	ldr	r3, [pc, #80]	@ (800f184 <dealPerMs+0x15c>)
 800f134:	2201      	movs	r2, #1
 800f136:	701a      	strb	r2, [r3, #0]

}
 800f138:	bf00      	nop
 800f13a:	46bd      	mov	sp, r7
 800f13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f140:	4770      	bx	lr
 800f142:	bf00      	nop
 800f144:	20000cf0 	.word	0x20000cf0
 800f148:	20000ce9 	.word	0x20000ce9
 800f14c:	20000cf1 	.word	0x20000cf1
 800f150:	20000cea 	.word	0x20000cea
 800f154:	20000cf2 	.word	0x20000cf2
 800f158:	20000ceb 	.word	0x20000ceb
 800f15c:	20000cf3 	.word	0x20000cf3
 800f160:	20000cec 	.word	0x20000cec
 800f164:	20000cf4 	.word	0x20000cf4
 800f168:	20000ced 	.word	0x20000ced
 800f16c:	20000cf8 	.word	0x20000cf8
 800f170:	20000cee 	.word	0x20000cee
 800f174:	20000cfc 	.word	0x20000cfc
 800f178:	20000ce1 	.word	0x20000ce1
 800f17c:	20000ce8 	.word	0x20000ce8
 800f180:	20000ce4 	.word	0x20000ce4
 800f184:	20000ce2 	.word	0x20000ce2

0800f188 <getOneSecFlag>:
}



bool getOneSecFlag()
{
 800f188:	b480      	push	{r7}
 800f18a:	af00      	add	r7, sp, #0
    if (_1s)
 800f18c:	4b07      	ldr	r3, [pc, #28]	@ (800f1ac <getOneSecFlag+0x24>)
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d004      	beq.n	800f19e <getOneSecFlag+0x16>
    {
        _1s = 0;
 800f194:	4b05      	ldr	r3, [pc, #20]	@ (800f1ac <getOneSecFlag+0x24>)
 800f196:	2200      	movs	r2, #0
 800f198:	701a      	strb	r2, [r3, #0]
        return 1;
 800f19a:	2301      	movs	r3, #1
 800f19c:	e000      	b.n	800f1a0 <getOneSecFlag+0x18>
    }
    else
        return 0;
 800f19e:	2300      	movs	r3, #0
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr
 800f1aa:	bf00      	nop
 800f1ac:	20000ce1 	.word	0x20000ce1

0800f1b0 <getOneMsFlag>:

bool getOneMsFlag()
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	af00      	add	r7, sp, #0
    if (_1ms)
 800f1b4:	4b07      	ldr	r3, [pc, #28]	@ (800f1d4 <getOneMsFlag+0x24>)
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d004      	beq.n	800f1c6 <getOneMsFlag+0x16>
    {
        _1ms = 0;
 800f1bc:	4b05      	ldr	r3, [pc, #20]	@ (800f1d4 <getOneMsFlag+0x24>)
 800f1be:	2200      	movs	r2, #0
 800f1c0:	701a      	strb	r2, [r3, #0]
        return 1;
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	e000      	b.n	800f1c8 <getOneMsFlag+0x18>
    }
    else
        return 0;
 800f1c6:	2300      	movs	r3, #0
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr
 800f1d2:	bf00      	nop
 800f1d4:	20000ce2 	.word	0x20000ce2

0800f1d8 <get5MsFlag>:
bool getCrossZero()
{
    return crossZero;
}
bool get5MsFlag()
{
 800f1d8:	b480      	push	{r7}
 800f1da:	af00      	add	r7, sp, #0
    if (_5msFlag)
 800f1dc:	4b07      	ldr	r3, [pc, #28]	@ (800f1fc <get5MsFlag+0x24>)
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d004      	beq.n	800f1ee <get5MsFlag+0x16>
    {
        _5msFlag = 0;
 800f1e4:	4b05      	ldr	r3, [pc, #20]	@ (800f1fc <get5MsFlag+0x24>)
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	701a      	strb	r2, [r3, #0]
        return 1;
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	e000      	b.n	800f1f0 <get5MsFlag+0x18>
    }
    else
    {
        return 0;
 800f1ee:	2300      	movs	r3, #0
    }
}
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr
 800f1fa:	bf00      	nop
 800f1fc:	20000ce9 	.word	0x20000ce9

0800f200 <get100MsFlag>:
        return 0;
    }
}

bool get100MsFlag()
{
 800f200:	b480      	push	{r7}
 800f202:	af00      	add	r7, sp, #0
    if (_100msFlag)
 800f204:	4b07      	ldr	r3, [pc, #28]	@ (800f224 <get100MsFlag+0x24>)
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d004      	beq.n	800f216 <get100MsFlag+0x16>
    {
        _100msFlag = 0;
 800f20c:	4b05      	ldr	r3, [pc, #20]	@ (800f224 <get100MsFlag+0x24>)
 800f20e:	2200      	movs	r2, #0
 800f210:	701a      	strb	r2, [r3, #0]
        return 1;
 800f212:	2301      	movs	r3, #1
 800f214:	e000      	b.n	800f218 <get100MsFlag+0x18>
    }
    else
    {
        return 0;
 800f216:	2300      	movs	r3, #0
    }
}
 800f218:	4618      	mov	r0, r3
 800f21a:	46bd      	mov	sp, r7
 800f21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f220:	4770      	bx	lr
 800f222:	bf00      	nop
 800f224:	20000ced 	.word	0x20000ced

0800f228 <atof>:
 800f228:	2100      	movs	r1, #0
 800f22a:	f000 be0b 	b.w	800fe44 <strtod>

0800f22e <sulp>:
 800f22e:	b570      	push	{r4, r5, r6, lr}
 800f230:	4604      	mov	r4, r0
 800f232:	460d      	mov	r5, r1
 800f234:	ec45 4b10 	vmov	d0, r4, r5
 800f238:	4616      	mov	r6, r2
 800f23a:	f003 fc7d 	bl	8012b38 <__ulp>
 800f23e:	ec51 0b10 	vmov	r0, r1, d0
 800f242:	b17e      	cbz	r6, 800f264 <sulp+0x36>
 800f244:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f248:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	dd09      	ble.n	800f264 <sulp+0x36>
 800f250:	051b      	lsls	r3, r3, #20
 800f252:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f256:	2400      	movs	r4, #0
 800f258:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f25c:	4622      	mov	r2, r4
 800f25e:	462b      	mov	r3, r5
 800f260:	f7f1 f9f2 	bl	8000648 <__aeabi_dmul>
 800f264:	ec41 0b10 	vmov	d0, r0, r1
 800f268:	bd70      	pop	{r4, r5, r6, pc}
 800f26a:	0000      	movs	r0, r0
 800f26c:	0000      	movs	r0, r0
	...

0800f270 <_strtod_l>:
 800f270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f274:	b09f      	sub	sp, #124	@ 0x7c
 800f276:	460c      	mov	r4, r1
 800f278:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f27a:	2200      	movs	r2, #0
 800f27c:	921a      	str	r2, [sp, #104]	@ 0x68
 800f27e:	9005      	str	r0, [sp, #20]
 800f280:	f04f 0a00 	mov.w	sl, #0
 800f284:	f04f 0b00 	mov.w	fp, #0
 800f288:	460a      	mov	r2, r1
 800f28a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f28c:	7811      	ldrb	r1, [r2, #0]
 800f28e:	292b      	cmp	r1, #43	@ 0x2b
 800f290:	d04a      	beq.n	800f328 <_strtod_l+0xb8>
 800f292:	d838      	bhi.n	800f306 <_strtod_l+0x96>
 800f294:	290d      	cmp	r1, #13
 800f296:	d832      	bhi.n	800f2fe <_strtod_l+0x8e>
 800f298:	2908      	cmp	r1, #8
 800f29a:	d832      	bhi.n	800f302 <_strtod_l+0x92>
 800f29c:	2900      	cmp	r1, #0
 800f29e:	d03b      	beq.n	800f318 <_strtod_l+0xa8>
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f2a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f2a6:	782a      	ldrb	r2, [r5, #0]
 800f2a8:	2a30      	cmp	r2, #48	@ 0x30
 800f2aa:	f040 80b3 	bne.w	800f414 <_strtod_l+0x1a4>
 800f2ae:	786a      	ldrb	r2, [r5, #1]
 800f2b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f2b4:	2a58      	cmp	r2, #88	@ 0x58
 800f2b6:	d16e      	bne.n	800f396 <_strtod_l+0x126>
 800f2b8:	9302      	str	r3, [sp, #8]
 800f2ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2bc:	9301      	str	r3, [sp, #4]
 800f2be:	ab1a      	add	r3, sp, #104	@ 0x68
 800f2c0:	9300      	str	r3, [sp, #0]
 800f2c2:	4a8e      	ldr	r2, [pc, #568]	@ (800f4fc <_strtod_l+0x28c>)
 800f2c4:	9805      	ldr	r0, [sp, #20]
 800f2c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f2c8:	a919      	add	r1, sp, #100	@ 0x64
 800f2ca:	f002 fd27 	bl	8011d1c <__gethex>
 800f2ce:	f010 060f 	ands.w	r6, r0, #15
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	d005      	beq.n	800f2e2 <_strtod_l+0x72>
 800f2d6:	2e06      	cmp	r6, #6
 800f2d8:	d128      	bne.n	800f32c <_strtod_l+0xbc>
 800f2da:	3501      	adds	r5, #1
 800f2dc:	2300      	movs	r3, #0
 800f2de:	9519      	str	r5, [sp, #100]	@ 0x64
 800f2e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	f040 858e 	bne.w	800fe06 <_strtod_l+0xb96>
 800f2ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2ec:	b1cb      	cbz	r3, 800f322 <_strtod_l+0xb2>
 800f2ee:	4652      	mov	r2, sl
 800f2f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f2f4:	ec43 2b10 	vmov	d0, r2, r3
 800f2f8:	b01f      	add	sp, #124	@ 0x7c
 800f2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2fe:	2920      	cmp	r1, #32
 800f300:	d1ce      	bne.n	800f2a0 <_strtod_l+0x30>
 800f302:	3201      	adds	r2, #1
 800f304:	e7c1      	b.n	800f28a <_strtod_l+0x1a>
 800f306:	292d      	cmp	r1, #45	@ 0x2d
 800f308:	d1ca      	bne.n	800f2a0 <_strtod_l+0x30>
 800f30a:	2101      	movs	r1, #1
 800f30c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f30e:	1c51      	adds	r1, r2, #1
 800f310:	9119      	str	r1, [sp, #100]	@ 0x64
 800f312:	7852      	ldrb	r2, [r2, #1]
 800f314:	2a00      	cmp	r2, #0
 800f316:	d1c5      	bne.n	800f2a4 <_strtod_l+0x34>
 800f318:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f31a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	f040 8570 	bne.w	800fe02 <_strtod_l+0xb92>
 800f322:	4652      	mov	r2, sl
 800f324:	465b      	mov	r3, fp
 800f326:	e7e5      	b.n	800f2f4 <_strtod_l+0x84>
 800f328:	2100      	movs	r1, #0
 800f32a:	e7ef      	b.n	800f30c <_strtod_l+0x9c>
 800f32c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f32e:	b13a      	cbz	r2, 800f340 <_strtod_l+0xd0>
 800f330:	2135      	movs	r1, #53	@ 0x35
 800f332:	a81c      	add	r0, sp, #112	@ 0x70
 800f334:	f003 fcfa 	bl	8012d2c <__copybits>
 800f338:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f33a:	9805      	ldr	r0, [sp, #20]
 800f33c:	f003 f8c8 	bl	80124d0 <_Bfree>
 800f340:	3e01      	subs	r6, #1
 800f342:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f344:	2e04      	cmp	r6, #4
 800f346:	d806      	bhi.n	800f356 <_strtod_l+0xe6>
 800f348:	e8df f006 	tbb	[pc, r6]
 800f34c:	201d0314 	.word	0x201d0314
 800f350:	14          	.byte	0x14
 800f351:	00          	.byte	0x00
 800f352:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f356:	05e1      	lsls	r1, r4, #23
 800f358:	bf48      	it	mi
 800f35a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f35e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f362:	0d1b      	lsrs	r3, r3, #20
 800f364:	051b      	lsls	r3, r3, #20
 800f366:	2b00      	cmp	r3, #0
 800f368:	d1bb      	bne.n	800f2e2 <_strtod_l+0x72>
 800f36a:	f001 fd8d 	bl	8010e88 <__errno>
 800f36e:	2322      	movs	r3, #34	@ 0x22
 800f370:	6003      	str	r3, [r0, #0]
 800f372:	e7b6      	b.n	800f2e2 <_strtod_l+0x72>
 800f374:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f378:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f37c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f380:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f384:	e7e7      	b.n	800f356 <_strtod_l+0xe6>
 800f386:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f504 <_strtod_l+0x294>
 800f38a:	e7e4      	b.n	800f356 <_strtod_l+0xe6>
 800f38c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f390:	f04f 3aff 	mov.w	sl, #4294967295
 800f394:	e7df      	b.n	800f356 <_strtod_l+0xe6>
 800f396:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f398:	1c5a      	adds	r2, r3, #1
 800f39a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f39c:	785b      	ldrb	r3, [r3, #1]
 800f39e:	2b30      	cmp	r3, #48	@ 0x30
 800f3a0:	d0f9      	beq.n	800f396 <_strtod_l+0x126>
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d09d      	beq.n	800f2e2 <_strtod_l+0x72>
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f3ac:	930c      	str	r3, [sp, #48]	@ 0x30
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	9308      	str	r3, [sp, #32]
 800f3b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3b4:	461f      	mov	r7, r3
 800f3b6:	220a      	movs	r2, #10
 800f3b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f3ba:	7805      	ldrb	r5, [r0, #0]
 800f3bc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f3c0:	b2d9      	uxtb	r1, r3
 800f3c2:	2909      	cmp	r1, #9
 800f3c4:	d928      	bls.n	800f418 <_strtod_l+0x1a8>
 800f3c6:	494e      	ldr	r1, [pc, #312]	@ (800f500 <_strtod_l+0x290>)
 800f3c8:	2201      	movs	r2, #1
 800f3ca:	f001 fd01 	bl	8010dd0 <strncmp>
 800f3ce:	2800      	cmp	r0, #0
 800f3d0:	d032      	beq.n	800f438 <_strtod_l+0x1c8>
 800f3d2:	2000      	movs	r0, #0
 800f3d4:	462a      	mov	r2, r5
 800f3d6:	4681      	mov	r9, r0
 800f3d8:	463d      	mov	r5, r7
 800f3da:	4603      	mov	r3, r0
 800f3dc:	2a65      	cmp	r2, #101	@ 0x65
 800f3de:	d001      	beq.n	800f3e4 <_strtod_l+0x174>
 800f3e0:	2a45      	cmp	r2, #69	@ 0x45
 800f3e2:	d114      	bne.n	800f40e <_strtod_l+0x19e>
 800f3e4:	b91d      	cbnz	r5, 800f3ee <_strtod_l+0x17e>
 800f3e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3e8:	4302      	orrs	r2, r0
 800f3ea:	d095      	beq.n	800f318 <_strtod_l+0xa8>
 800f3ec:	2500      	movs	r5, #0
 800f3ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f3f0:	1c62      	adds	r2, r4, #1
 800f3f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f3f4:	7862      	ldrb	r2, [r4, #1]
 800f3f6:	2a2b      	cmp	r2, #43	@ 0x2b
 800f3f8:	d077      	beq.n	800f4ea <_strtod_l+0x27a>
 800f3fa:	2a2d      	cmp	r2, #45	@ 0x2d
 800f3fc:	d07b      	beq.n	800f4f6 <_strtod_l+0x286>
 800f3fe:	f04f 0c00 	mov.w	ip, #0
 800f402:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f406:	2909      	cmp	r1, #9
 800f408:	f240 8082 	bls.w	800f510 <_strtod_l+0x2a0>
 800f40c:	9419      	str	r4, [sp, #100]	@ 0x64
 800f40e:	f04f 0800 	mov.w	r8, #0
 800f412:	e0a2      	b.n	800f55a <_strtod_l+0x2ea>
 800f414:	2300      	movs	r3, #0
 800f416:	e7c7      	b.n	800f3a8 <_strtod_l+0x138>
 800f418:	2f08      	cmp	r7, #8
 800f41a:	bfd5      	itete	le
 800f41c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f41e:	9908      	ldrgt	r1, [sp, #32]
 800f420:	fb02 3301 	mlale	r3, r2, r1, r3
 800f424:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f428:	f100 0001 	add.w	r0, r0, #1
 800f42c:	bfd4      	ite	le
 800f42e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f430:	9308      	strgt	r3, [sp, #32]
 800f432:	3701      	adds	r7, #1
 800f434:	9019      	str	r0, [sp, #100]	@ 0x64
 800f436:	e7bf      	b.n	800f3b8 <_strtod_l+0x148>
 800f438:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f43a:	1c5a      	adds	r2, r3, #1
 800f43c:	9219      	str	r2, [sp, #100]	@ 0x64
 800f43e:	785a      	ldrb	r2, [r3, #1]
 800f440:	b37f      	cbz	r7, 800f4a2 <_strtod_l+0x232>
 800f442:	4681      	mov	r9, r0
 800f444:	463d      	mov	r5, r7
 800f446:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f44a:	2b09      	cmp	r3, #9
 800f44c:	d912      	bls.n	800f474 <_strtod_l+0x204>
 800f44e:	2301      	movs	r3, #1
 800f450:	e7c4      	b.n	800f3dc <_strtod_l+0x16c>
 800f452:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f454:	1c5a      	adds	r2, r3, #1
 800f456:	9219      	str	r2, [sp, #100]	@ 0x64
 800f458:	785a      	ldrb	r2, [r3, #1]
 800f45a:	3001      	adds	r0, #1
 800f45c:	2a30      	cmp	r2, #48	@ 0x30
 800f45e:	d0f8      	beq.n	800f452 <_strtod_l+0x1e2>
 800f460:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f464:	2b08      	cmp	r3, #8
 800f466:	f200 84d3 	bhi.w	800fe10 <_strtod_l+0xba0>
 800f46a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f46c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f46e:	4681      	mov	r9, r0
 800f470:	2000      	movs	r0, #0
 800f472:	4605      	mov	r5, r0
 800f474:	3a30      	subs	r2, #48	@ 0x30
 800f476:	f100 0301 	add.w	r3, r0, #1
 800f47a:	d02a      	beq.n	800f4d2 <_strtod_l+0x262>
 800f47c:	4499      	add	r9, r3
 800f47e:	eb00 0c05 	add.w	ip, r0, r5
 800f482:	462b      	mov	r3, r5
 800f484:	210a      	movs	r1, #10
 800f486:	4563      	cmp	r3, ip
 800f488:	d10d      	bne.n	800f4a6 <_strtod_l+0x236>
 800f48a:	1c69      	adds	r1, r5, #1
 800f48c:	4401      	add	r1, r0
 800f48e:	4428      	add	r0, r5
 800f490:	2808      	cmp	r0, #8
 800f492:	dc16      	bgt.n	800f4c2 <_strtod_l+0x252>
 800f494:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f496:	230a      	movs	r3, #10
 800f498:	fb03 2300 	mla	r3, r3, r0, r2
 800f49c:	930a      	str	r3, [sp, #40]	@ 0x28
 800f49e:	2300      	movs	r3, #0
 800f4a0:	e018      	b.n	800f4d4 <_strtod_l+0x264>
 800f4a2:	4638      	mov	r0, r7
 800f4a4:	e7da      	b.n	800f45c <_strtod_l+0x1ec>
 800f4a6:	2b08      	cmp	r3, #8
 800f4a8:	f103 0301 	add.w	r3, r3, #1
 800f4ac:	dc03      	bgt.n	800f4b6 <_strtod_l+0x246>
 800f4ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f4b0:	434e      	muls	r6, r1
 800f4b2:	960a      	str	r6, [sp, #40]	@ 0x28
 800f4b4:	e7e7      	b.n	800f486 <_strtod_l+0x216>
 800f4b6:	2b10      	cmp	r3, #16
 800f4b8:	bfde      	ittt	le
 800f4ba:	9e08      	ldrle	r6, [sp, #32]
 800f4bc:	434e      	mulle	r6, r1
 800f4be:	9608      	strle	r6, [sp, #32]
 800f4c0:	e7e1      	b.n	800f486 <_strtod_l+0x216>
 800f4c2:	280f      	cmp	r0, #15
 800f4c4:	dceb      	bgt.n	800f49e <_strtod_l+0x22e>
 800f4c6:	9808      	ldr	r0, [sp, #32]
 800f4c8:	230a      	movs	r3, #10
 800f4ca:	fb03 2300 	mla	r3, r3, r0, r2
 800f4ce:	9308      	str	r3, [sp, #32]
 800f4d0:	e7e5      	b.n	800f49e <_strtod_l+0x22e>
 800f4d2:	4629      	mov	r1, r5
 800f4d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f4d6:	1c50      	adds	r0, r2, #1
 800f4d8:	9019      	str	r0, [sp, #100]	@ 0x64
 800f4da:	7852      	ldrb	r2, [r2, #1]
 800f4dc:	4618      	mov	r0, r3
 800f4de:	460d      	mov	r5, r1
 800f4e0:	e7b1      	b.n	800f446 <_strtod_l+0x1d6>
 800f4e2:	f04f 0900 	mov.w	r9, #0
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	e77d      	b.n	800f3e6 <_strtod_l+0x176>
 800f4ea:	f04f 0c00 	mov.w	ip, #0
 800f4ee:	1ca2      	adds	r2, r4, #2
 800f4f0:	9219      	str	r2, [sp, #100]	@ 0x64
 800f4f2:	78a2      	ldrb	r2, [r4, #2]
 800f4f4:	e785      	b.n	800f402 <_strtod_l+0x192>
 800f4f6:	f04f 0c01 	mov.w	ip, #1
 800f4fa:	e7f8      	b.n	800f4ee <_strtod_l+0x27e>
 800f4fc:	08014908 	.word	0x08014908
 800f500:	080148f0 	.word	0x080148f0
 800f504:	7ff00000 	.word	0x7ff00000
 800f508:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f50a:	1c51      	adds	r1, r2, #1
 800f50c:	9119      	str	r1, [sp, #100]	@ 0x64
 800f50e:	7852      	ldrb	r2, [r2, #1]
 800f510:	2a30      	cmp	r2, #48	@ 0x30
 800f512:	d0f9      	beq.n	800f508 <_strtod_l+0x298>
 800f514:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f518:	2908      	cmp	r1, #8
 800f51a:	f63f af78 	bhi.w	800f40e <_strtod_l+0x19e>
 800f51e:	3a30      	subs	r2, #48	@ 0x30
 800f520:	920e      	str	r2, [sp, #56]	@ 0x38
 800f522:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f524:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f526:	f04f 080a 	mov.w	r8, #10
 800f52a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f52c:	1c56      	adds	r6, r2, #1
 800f52e:	9619      	str	r6, [sp, #100]	@ 0x64
 800f530:	7852      	ldrb	r2, [r2, #1]
 800f532:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f536:	f1be 0f09 	cmp.w	lr, #9
 800f53a:	d939      	bls.n	800f5b0 <_strtod_l+0x340>
 800f53c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f53e:	1a76      	subs	r6, r6, r1
 800f540:	2e08      	cmp	r6, #8
 800f542:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f546:	dc03      	bgt.n	800f550 <_strtod_l+0x2e0>
 800f548:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f54a:	4588      	cmp	r8, r1
 800f54c:	bfa8      	it	ge
 800f54e:	4688      	movge	r8, r1
 800f550:	f1bc 0f00 	cmp.w	ip, #0
 800f554:	d001      	beq.n	800f55a <_strtod_l+0x2ea>
 800f556:	f1c8 0800 	rsb	r8, r8, #0
 800f55a:	2d00      	cmp	r5, #0
 800f55c:	d14e      	bne.n	800f5fc <_strtod_l+0x38c>
 800f55e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f560:	4308      	orrs	r0, r1
 800f562:	f47f aebe 	bne.w	800f2e2 <_strtod_l+0x72>
 800f566:	2b00      	cmp	r3, #0
 800f568:	f47f aed6 	bne.w	800f318 <_strtod_l+0xa8>
 800f56c:	2a69      	cmp	r2, #105	@ 0x69
 800f56e:	d028      	beq.n	800f5c2 <_strtod_l+0x352>
 800f570:	dc25      	bgt.n	800f5be <_strtod_l+0x34e>
 800f572:	2a49      	cmp	r2, #73	@ 0x49
 800f574:	d025      	beq.n	800f5c2 <_strtod_l+0x352>
 800f576:	2a4e      	cmp	r2, #78	@ 0x4e
 800f578:	f47f aece 	bne.w	800f318 <_strtod_l+0xa8>
 800f57c:	499b      	ldr	r1, [pc, #620]	@ (800f7ec <_strtod_l+0x57c>)
 800f57e:	a819      	add	r0, sp, #100	@ 0x64
 800f580:	f002 fdee 	bl	8012160 <__match>
 800f584:	2800      	cmp	r0, #0
 800f586:	f43f aec7 	beq.w	800f318 <_strtod_l+0xa8>
 800f58a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	2b28      	cmp	r3, #40	@ 0x28
 800f590:	d12e      	bne.n	800f5f0 <_strtod_l+0x380>
 800f592:	4997      	ldr	r1, [pc, #604]	@ (800f7f0 <_strtod_l+0x580>)
 800f594:	aa1c      	add	r2, sp, #112	@ 0x70
 800f596:	a819      	add	r0, sp, #100	@ 0x64
 800f598:	f002 fdf6 	bl	8012188 <__hexnan>
 800f59c:	2805      	cmp	r0, #5
 800f59e:	d127      	bne.n	800f5f0 <_strtod_l+0x380>
 800f5a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f5a2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f5a6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f5aa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f5ae:	e698      	b.n	800f2e2 <_strtod_l+0x72>
 800f5b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f5b2:	fb08 2101 	mla	r1, r8, r1, r2
 800f5b6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f5ba:	920e      	str	r2, [sp, #56]	@ 0x38
 800f5bc:	e7b5      	b.n	800f52a <_strtod_l+0x2ba>
 800f5be:	2a6e      	cmp	r2, #110	@ 0x6e
 800f5c0:	e7da      	b.n	800f578 <_strtod_l+0x308>
 800f5c2:	498c      	ldr	r1, [pc, #560]	@ (800f7f4 <_strtod_l+0x584>)
 800f5c4:	a819      	add	r0, sp, #100	@ 0x64
 800f5c6:	f002 fdcb 	bl	8012160 <__match>
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	f43f aea4 	beq.w	800f318 <_strtod_l+0xa8>
 800f5d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f5d2:	4989      	ldr	r1, [pc, #548]	@ (800f7f8 <_strtod_l+0x588>)
 800f5d4:	3b01      	subs	r3, #1
 800f5d6:	a819      	add	r0, sp, #100	@ 0x64
 800f5d8:	9319      	str	r3, [sp, #100]	@ 0x64
 800f5da:	f002 fdc1 	bl	8012160 <__match>
 800f5de:	b910      	cbnz	r0, 800f5e6 <_strtod_l+0x376>
 800f5e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	9319      	str	r3, [sp, #100]	@ 0x64
 800f5e6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f808 <_strtod_l+0x598>
 800f5ea:	f04f 0a00 	mov.w	sl, #0
 800f5ee:	e678      	b.n	800f2e2 <_strtod_l+0x72>
 800f5f0:	4882      	ldr	r0, [pc, #520]	@ (800f7fc <_strtod_l+0x58c>)
 800f5f2:	f001 fc85 	bl	8010f00 <nan>
 800f5f6:	ec5b ab10 	vmov	sl, fp, d0
 800f5fa:	e672      	b.n	800f2e2 <_strtod_l+0x72>
 800f5fc:	eba8 0309 	sub.w	r3, r8, r9
 800f600:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f602:	9309      	str	r3, [sp, #36]	@ 0x24
 800f604:	2f00      	cmp	r7, #0
 800f606:	bf08      	it	eq
 800f608:	462f      	moveq	r7, r5
 800f60a:	2d10      	cmp	r5, #16
 800f60c:	462c      	mov	r4, r5
 800f60e:	bfa8      	it	ge
 800f610:	2410      	movge	r4, #16
 800f612:	f7f0 ff9f 	bl	8000554 <__aeabi_ui2d>
 800f616:	2d09      	cmp	r5, #9
 800f618:	4682      	mov	sl, r0
 800f61a:	468b      	mov	fp, r1
 800f61c:	dc13      	bgt.n	800f646 <_strtod_l+0x3d6>
 800f61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f620:	2b00      	cmp	r3, #0
 800f622:	f43f ae5e 	beq.w	800f2e2 <_strtod_l+0x72>
 800f626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f628:	dd78      	ble.n	800f71c <_strtod_l+0x4ac>
 800f62a:	2b16      	cmp	r3, #22
 800f62c:	dc5f      	bgt.n	800f6ee <_strtod_l+0x47e>
 800f62e:	4974      	ldr	r1, [pc, #464]	@ (800f800 <_strtod_l+0x590>)
 800f630:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f634:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f638:	4652      	mov	r2, sl
 800f63a:	465b      	mov	r3, fp
 800f63c:	f7f1 f804 	bl	8000648 <__aeabi_dmul>
 800f640:	4682      	mov	sl, r0
 800f642:	468b      	mov	fp, r1
 800f644:	e64d      	b.n	800f2e2 <_strtod_l+0x72>
 800f646:	4b6e      	ldr	r3, [pc, #440]	@ (800f800 <_strtod_l+0x590>)
 800f648:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f64c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f650:	f7f0 fffa 	bl	8000648 <__aeabi_dmul>
 800f654:	4682      	mov	sl, r0
 800f656:	9808      	ldr	r0, [sp, #32]
 800f658:	468b      	mov	fp, r1
 800f65a:	f7f0 ff7b 	bl	8000554 <__aeabi_ui2d>
 800f65e:	4602      	mov	r2, r0
 800f660:	460b      	mov	r3, r1
 800f662:	4650      	mov	r0, sl
 800f664:	4659      	mov	r1, fp
 800f666:	f7f0 fe39 	bl	80002dc <__adddf3>
 800f66a:	2d0f      	cmp	r5, #15
 800f66c:	4682      	mov	sl, r0
 800f66e:	468b      	mov	fp, r1
 800f670:	ddd5      	ble.n	800f61e <_strtod_l+0x3ae>
 800f672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f674:	1b2c      	subs	r4, r5, r4
 800f676:	441c      	add	r4, r3
 800f678:	2c00      	cmp	r4, #0
 800f67a:	f340 8096 	ble.w	800f7aa <_strtod_l+0x53a>
 800f67e:	f014 030f 	ands.w	r3, r4, #15
 800f682:	d00a      	beq.n	800f69a <_strtod_l+0x42a>
 800f684:	495e      	ldr	r1, [pc, #376]	@ (800f800 <_strtod_l+0x590>)
 800f686:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f68a:	4652      	mov	r2, sl
 800f68c:	465b      	mov	r3, fp
 800f68e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f692:	f7f0 ffd9 	bl	8000648 <__aeabi_dmul>
 800f696:	4682      	mov	sl, r0
 800f698:	468b      	mov	fp, r1
 800f69a:	f034 040f 	bics.w	r4, r4, #15
 800f69e:	d073      	beq.n	800f788 <_strtod_l+0x518>
 800f6a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f6a4:	dd48      	ble.n	800f738 <_strtod_l+0x4c8>
 800f6a6:	2400      	movs	r4, #0
 800f6a8:	46a0      	mov	r8, r4
 800f6aa:	940a      	str	r4, [sp, #40]	@ 0x28
 800f6ac:	46a1      	mov	r9, r4
 800f6ae:	9a05      	ldr	r2, [sp, #20]
 800f6b0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f808 <_strtod_l+0x598>
 800f6b4:	2322      	movs	r3, #34	@ 0x22
 800f6b6:	6013      	str	r3, [r2, #0]
 800f6b8:	f04f 0a00 	mov.w	sl, #0
 800f6bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	f43f ae0f 	beq.w	800f2e2 <_strtod_l+0x72>
 800f6c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f6c6:	9805      	ldr	r0, [sp, #20]
 800f6c8:	f002 ff02 	bl	80124d0 <_Bfree>
 800f6cc:	9805      	ldr	r0, [sp, #20]
 800f6ce:	4649      	mov	r1, r9
 800f6d0:	f002 fefe 	bl	80124d0 <_Bfree>
 800f6d4:	9805      	ldr	r0, [sp, #20]
 800f6d6:	4641      	mov	r1, r8
 800f6d8:	f002 fefa 	bl	80124d0 <_Bfree>
 800f6dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f6de:	9805      	ldr	r0, [sp, #20]
 800f6e0:	f002 fef6 	bl	80124d0 <_Bfree>
 800f6e4:	9805      	ldr	r0, [sp, #20]
 800f6e6:	4621      	mov	r1, r4
 800f6e8:	f002 fef2 	bl	80124d0 <_Bfree>
 800f6ec:	e5f9      	b.n	800f2e2 <_strtod_l+0x72>
 800f6ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f6f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	dbbc      	blt.n	800f672 <_strtod_l+0x402>
 800f6f8:	4c41      	ldr	r4, [pc, #260]	@ (800f800 <_strtod_l+0x590>)
 800f6fa:	f1c5 050f 	rsb	r5, r5, #15
 800f6fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f702:	4652      	mov	r2, sl
 800f704:	465b      	mov	r3, fp
 800f706:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f70a:	f7f0 ff9d 	bl	8000648 <__aeabi_dmul>
 800f70e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f710:	1b5d      	subs	r5, r3, r5
 800f712:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f716:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f71a:	e78f      	b.n	800f63c <_strtod_l+0x3cc>
 800f71c:	3316      	adds	r3, #22
 800f71e:	dba8      	blt.n	800f672 <_strtod_l+0x402>
 800f720:	4b37      	ldr	r3, [pc, #220]	@ (800f800 <_strtod_l+0x590>)
 800f722:	eba9 0808 	sub.w	r8, r9, r8
 800f726:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f72a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f72e:	4650      	mov	r0, sl
 800f730:	4659      	mov	r1, fp
 800f732:	f7f1 f8b3 	bl	800089c <__aeabi_ddiv>
 800f736:	e783      	b.n	800f640 <_strtod_l+0x3d0>
 800f738:	4b32      	ldr	r3, [pc, #200]	@ (800f804 <_strtod_l+0x594>)
 800f73a:	9308      	str	r3, [sp, #32]
 800f73c:	2300      	movs	r3, #0
 800f73e:	1124      	asrs	r4, r4, #4
 800f740:	4650      	mov	r0, sl
 800f742:	4659      	mov	r1, fp
 800f744:	461e      	mov	r6, r3
 800f746:	2c01      	cmp	r4, #1
 800f748:	dc21      	bgt.n	800f78e <_strtod_l+0x51e>
 800f74a:	b10b      	cbz	r3, 800f750 <_strtod_l+0x4e0>
 800f74c:	4682      	mov	sl, r0
 800f74e:	468b      	mov	fp, r1
 800f750:	492c      	ldr	r1, [pc, #176]	@ (800f804 <_strtod_l+0x594>)
 800f752:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f756:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f75a:	4652      	mov	r2, sl
 800f75c:	465b      	mov	r3, fp
 800f75e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f762:	f7f0 ff71 	bl	8000648 <__aeabi_dmul>
 800f766:	4b28      	ldr	r3, [pc, #160]	@ (800f808 <_strtod_l+0x598>)
 800f768:	460a      	mov	r2, r1
 800f76a:	400b      	ands	r3, r1
 800f76c:	4927      	ldr	r1, [pc, #156]	@ (800f80c <_strtod_l+0x59c>)
 800f76e:	428b      	cmp	r3, r1
 800f770:	4682      	mov	sl, r0
 800f772:	d898      	bhi.n	800f6a6 <_strtod_l+0x436>
 800f774:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f778:	428b      	cmp	r3, r1
 800f77a:	bf86      	itte	hi
 800f77c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f810 <_strtod_l+0x5a0>
 800f780:	f04f 3aff 	movhi.w	sl, #4294967295
 800f784:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f788:	2300      	movs	r3, #0
 800f78a:	9308      	str	r3, [sp, #32]
 800f78c:	e07a      	b.n	800f884 <_strtod_l+0x614>
 800f78e:	07e2      	lsls	r2, r4, #31
 800f790:	d505      	bpl.n	800f79e <_strtod_l+0x52e>
 800f792:	9b08      	ldr	r3, [sp, #32]
 800f794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f798:	f7f0 ff56 	bl	8000648 <__aeabi_dmul>
 800f79c:	2301      	movs	r3, #1
 800f79e:	9a08      	ldr	r2, [sp, #32]
 800f7a0:	3208      	adds	r2, #8
 800f7a2:	3601      	adds	r6, #1
 800f7a4:	1064      	asrs	r4, r4, #1
 800f7a6:	9208      	str	r2, [sp, #32]
 800f7a8:	e7cd      	b.n	800f746 <_strtod_l+0x4d6>
 800f7aa:	d0ed      	beq.n	800f788 <_strtod_l+0x518>
 800f7ac:	4264      	negs	r4, r4
 800f7ae:	f014 020f 	ands.w	r2, r4, #15
 800f7b2:	d00a      	beq.n	800f7ca <_strtod_l+0x55a>
 800f7b4:	4b12      	ldr	r3, [pc, #72]	@ (800f800 <_strtod_l+0x590>)
 800f7b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7ba:	4650      	mov	r0, sl
 800f7bc:	4659      	mov	r1, fp
 800f7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c2:	f7f1 f86b 	bl	800089c <__aeabi_ddiv>
 800f7c6:	4682      	mov	sl, r0
 800f7c8:	468b      	mov	fp, r1
 800f7ca:	1124      	asrs	r4, r4, #4
 800f7cc:	d0dc      	beq.n	800f788 <_strtod_l+0x518>
 800f7ce:	2c1f      	cmp	r4, #31
 800f7d0:	dd20      	ble.n	800f814 <_strtod_l+0x5a4>
 800f7d2:	2400      	movs	r4, #0
 800f7d4:	46a0      	mov	r8, r4
 800f7d6:	940a      	str	r4, [sp, #40]	@ 0x28
 800f7d8:	46a1      	mov	r9, r4
 800f7da:	9a05      	ldr	r2, [sp, #20]
 800f7dc:	2322      	movs	r3, #34	@ 0x22
 800f7de:	f04f 0a00 	mov.w	sl, #0
 800f7e2:	f04f 0b00 	mov.w	fp, #0
 800f7e6:	6013      	str	r3, [r2, #0]
 800f7e8:	e768      	b.n	800f6bc <_strtod_l+0x44c>
 800f7ea:	bf00      	nop
 800f7ec:	08014955 	.word	0x08014955
 800f7f0:	080148f4 	.word	0x080148f4
 800f7f4:	0801494d 	.word	0x0801494d
 800f7f8:	0801498c 	.word	0x0801498c
 800f7fc:	08014d1d 	.word	0x08014d1d
 800f800:	08014b08 	.word	0x08014b08
 800f804:	08014ae0 	.word	0x08014ae0
 800f808:	7ff00000 	.word	0x7ff00000
 800f80c:	7ca00000 	.word	0x7ca00000
 800f810:	7fefffff 	.word	0x7fefffff
 800f814:	f014 0310 	ands.w	r3, r4, #16
 800f818:	bf18      	it	ne
 800f81a:	236a      	movne	r3, #106	@ 0x6a
 800f81c:	4ea9      	ldr	r6, [pc, #676]	@ (800fac4 <_strtod_l+0x854>)
 800f81e:	9308      	str	r3, [sp, #32]
 800f820:	4650      	mov	r0, sl
 800f822:	4659      	mov	r1, fp
 800f824:	2300      	movs	r3, #0
 800f826:	07e2      	lsls	r2, r4, #31
 800f828:	d504      	bpl.n	800f834 <_strtod_l+0x5c4>
 800f82a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f82e:	f7f0 ff0b 	bl	8000648 <__aeabi_dmul>
 800f832:	2301      	movs	r3, #1
 800f834:	1064      	asrs	r4, r4, #1
 800f836:	f106 0608 	add.w	r6, r6, #8
 800f83a:	d1f4      	bne.n	800f826 <_strtod_l+0x5b6>
 800f83c:	b10b      	cbz	r3, 800f842 <_strtod_l+0x5d2>
 800f83e:	4682      	mov	sl, r0
 800f840:	468b      	mov	fp, r1
 800f842:	9b08      	ldr	r3, [sp, #32]
 800f844:	b1b3      	cbz	r3, 800f874 <_strtod_l+0x604>
 800f846:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f84a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f84e:	2b00      	cmp	r3, #0
 800f850:	4659      	mov	r1, fp
 800f852:	dd0f      	ble.n	800f874 <_strtod_l+0x604>
 800f854:	2b1f      	cmp	r3, #31
 800f856:	dd55      	ble.n	800f904 <_strtod_l+0x694>
 800f858:	2b34      	cmp	r3, #52	@ 0x34
 800f85a:	bfde      	ittt	le
 800f85c:	f04f 33ff 	movle.w	r3, #4294967295
 800f860:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f864:	4093      	lslle	r3, r2
 800f866:	f04f 0a00 	mov.w	sl, #0
 800f86a:	bfcc      	ite	gt
 800f86c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f870:	ea03 0b01 	andle.w	fp, r3, r1
 800f874:	2200      	movs	r2, #0
 800f876:	2300      	movs	r3, #0
 800f878:	4650      	mov	r0, sl
 800f87a:	4659      	mov	r1, fp
 800f87c:	f7f1 f94c 	bl	8000b18 <__aeabi_dcmpeq>
 800f880:	2800      	cmp	r0, #0
 800f882:	d1a6      	bne.n	800f7d2 <_strtod_l+0x562>
 800f884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f886:	9300      	str	r3, [sp, #0]
 800f888:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f88a:	9805      	ldr	r0, [sp, #20]
 800f88c:	462b      	mov	r3, r5
 800f88e:	463a      	mov	r2, r7
 800f890:	f002 fe86 	bl	80125a0 <__s2b>
 800f894:	900a      	str	r0, [sp, #40]	@ 0x28
 800f896:	2800      	cmp	r0, #0
 800f898:	f43f af05 	beq.w	800f6a6 <_strtod_l+0x436>
 800f89c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f89e:	2a00      	cmp	r2, #0
 800f8a0:	eba9 0308 	sub.w	r3, r9, r8
 800f8a4:	bfa8      	it	ge
 800f8a6:	2300      	movge	r3, #0
 800f8a8:	9312      	str	r3, [sp, #72]	@ 0x48
 800f8aa:	2400      	movs	r4, #0
 800f8ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f8b0:	9316      	str	r3, [sp, #88]	@ 0x58
 800f8b2:	46a0      	mov	r8, r4
 800f8b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8b6:	9805      	ldr	r0, [sp, #20]
 800f8b8:	6859      	ldr	r1, [r3, #4]
 800f8ba:	f002 fdc9 	bl	8012450 <_Balloc>
 800f8be:	4681      	mov	r9, r0
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	f43f aef4 	beq.w	800f6ae <_strtod_l+0x43e>
 800f8c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8c8:	691a      	ldr	r2, [r3, #16]
 800f8ca:	3202      	adds	r2, #2
 800f8cc:	f103 010c 	add.w	r1, r3, #12
 800f8d0:	0092      	lsls	r2, r2, #2
 800f8d2:	300c      	adds	r0, #12
 800f8d4:	f001 fb05 	bl	8010ee2 <memcpy>
 800f8d8:	ec4b ab10 	vmov	d0, sl, fp
 800f8dc:	9805      	ldr	r0, [sp, #20]
 800f8de:	aa1c      	add	r2, sp, #112	@ 0x70
 800f8e0:	a91b      	add	r1, sp, #108	@ 0x6c
 800f8e2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f8e6:	f003 f997 	bl	8012c18 <__d2b>
 800f8ea:	901a      	str	r0, [sp, #104]	@ 0x68
 800f8ec:	2800      	cmp	r0, #0
 800f8ee:	f43f aede 	beq.w	800f6ae <_strtod_l+0x43e>
 800f8f2:	9805      	ldr	r0, [sp, #20]
 800f8f4:	2101      	movs	r1, #1
 800f8f6:	f002 fee9 	bl	80126cc <__i2b>
 800f8fa:	4680      	mov	r8, r0
 800f8fc:	b948      	cbnz	r0, 800f912 <_strtod_l+0x6a2>
 800f8fe:	f04f 0800 	mov.w	r8, #0
 800f902:	e6d4      	b.n	800f6ae <_strtod_l+0x43e>
 800f904:	f04f 32ff 	mov.w	r2, #4294967295
 800f908:	fa02 f303 	lsl.w	r3, r2, r3
 800f90c:	ea03 0a0a 	and.w	sl, r3, sl
 800f910:	e7b0      	b.n	800f874 <_strtod_l+0x604>
 800f912:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f914:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f916:	2d00      	cmp	r5, #0
 800f918:	bfab      	itete	ge
 800f91a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f91c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f91e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f920:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f922:	bfac      	ite	ge
 800f924:	18ef      	addge	r7, r5, r3
 800f926:	1b5e      	sublt	r6, r3, r5
 800f928:	9b08      	ldr	r3, [sp, #32]
 800f92a:	1aed      	subs	r5, r5, r3
 800f92c:	4415      	add	r5, r2
 800f92e:	4b66      	ldr	r3, [pc, #408]	@ (800fac8 <_strtod_l+0x858>)
 800f930:	3d01      	subs	r5, #1
 800f932:	429d      	cmp	r5, r3
 800f934:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f938:	da50      	bge.n	800f9dc <_strtod_l+0x76c>
 800f93a:	1b5b      	subs	r3, r3, r5
 800f93c:	2b1f      	cmp	r3, #31
 800f93e:	eba2 0203 	sub.w	r2, r2, r3
 800f942:	f04f 0101 	mov.w	r1, #1
 800f946:	dc3d      	bgt.n	800f9c4 <_strtod_l+0x754>
 800f948:	fa01 f303 	lsl.w	r3, r1, r3
 800f94c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f94e:	2300      	movs	r3, #0
 800f950:	9310      	str	r3, [sp, #64]	@ 0x40
 800f952:	18bd      	adds	r5, r7, r2
 800f954:	9b08      	ldr	r3, [sp, #32]
 800f956:	42af      	cmp	r7, r5
 800f958:	4416      	add	r6, r2
 800f95a:	441e      	add	r6, r3
 800f95c:	463b      	mov	r3, r7
 800f95e:	bfa8      	it	ge
 800f960:	462b      	movge	r3, r5
 800f962:	42b3      	cmp	r3, r6
 800f964:	bfa8      	it	ge
 800f966:	4633      	movge	r3, r6
 800f968:	2b00      	cmp	r3, #0
 800f96a:	bfc2      	ittt	gt
 800f96c:	1aed      	subgt	r5, r5, r3
 800f96e:	1af6      	subgt	r6, r6, r3
 800f970:	1aff      	subgt	r7, r7, r3
 800f972:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f974:	2b00      	cmp	r3, #0
 800f976:	dd16      	ble.n	800f9a6 <_strtod_l+0x736>
 800f978:	4641      	mov	r1, r8
 800f97a:	9805      	ldr	r0, [sp, #20]
 800f97c:	461a      	mov	r2, r3
 800f97e:	f002 ff65 	bl	801284c <__pow5mult>
 800f982:	4680      	mov	r8, r0
 800f984:	2800      	cmp	r0, #0
 800f986:	d0ba      	beq.n	800f8fe <_strtod_l+0x68e>
 800f988:	4601      	mov	r1, r0
 800f98a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f98c:	9805      	ldr	r0, [sp, #20]
 800f98e:	f002 feb3 	bl	80126f8 <__multiply>
 800f992:	900e      	str	r0, [sp, #56]	@ 0x38
 800f994:	2800      	cmp	r0, #0
 800f996:	f43f ae8a 	beq.w	800f6ae <_strtod_l+0x43e>
 800f99a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f99c:	9805      	ldr	r0, [sp, #20]
 800f99e:	f002 fd97 	bl	80124d0 <_Bfree>
 800f9a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800f9a6:	2d00      	cmp	r5, #0
 800f9a8:	dc1d      	bgt.n	800f9e6 <_strtod_l+0x776>
 800f9aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	dd23      	ble.n	800f9f8 <_strtod_l+0x788>
 800f9b0:	4649      	mov	r1, r9
 800f9b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f9b4:	9805      	ldr	r0, [sp, #20]
 800f9b6:	f002 ff49 	bl	801284c <__pow5mult>
 800f9ba:	4681      	mov	r9, r0
 800f9bc:	b9e0      	cbnz	r0, 800f9f8 <_strtod_l+0x788>
 800f9be:	f04f 0900 	mov.w	r9, #0
 800f9c2:	e674      	b.n	800f6ae <_strtod_l+0x43e>
 800f9c4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f9c8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f9cc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f9d0:	35e2      	adds	r5, #226	@ 0xe2
 800f9d2:	fa01 f305 	lsl.w	r3, r1, r5
 800f9d6:	9310      	str	r3, [sp, #64]	@ 0x40
 800f9d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f9da:	e7ba      	b.n	800f952 <_strtod_l+0x6e2>
 800f9dc:	2300      	movs	r3, #0
 800f9de:	9310      	str	r3, [sp, #64]	@ 0x40
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f9e4:	e7b5      	b.n	800f952 <_strtod_l+0x6e2>
 800f9e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f9e8:	9805      	ldr	r0, [sp, #20]
 800f9ea:	462a      	mov	r2, r5
 800f9ec:	f002 ff88 	bl	8012900 <__lshift>
 800f9f0:	901a      	str	r0, [sp, #104]	@ 0x68
 800f9f2:	2800      	cmp	r0, #0
 800f9f4:	d1d9      	bne.n	800f9aa <_strtod_l+0x73a>
 800f9f6:	e65a      	b.n	800f6ae <_strtod_l+0x43e>
 800f9f8:	2e00      	cmp	r6, #0
 800f9fa:	dd07      	ble.n	800fa0c <_strtod_l+0x79c>
 800f9fc:	4649      	mov	r1, r9
 800f9fe:	9805      	ldr	r0, [sp, #20]
 800fa00:	4632      	mov	r2, r6
 800fa02:	f002 ff7d 	bl	8012900 <__lshift>
 800fa06:	4681      	mov	r9, r0
 800fa08:	2800      	cmp	r0, #0
 800fa0a:	d0d8      	beq.n	800f9be <_strtod_l+0x74e>
 800fa0c:	2f00      	cmp	r7, #0
 800fa0e:	dd08      	ble.n	800fa22 <_strtod_l+0x7b2>
 800fa10:	4641      	mov	r1, r8
 800fa12:	9805      	ldr	r0, [sp, #20]
 800fa14:	463a      	mov	r2, r7
 800fa16:	f002 ff73 	bl	8012900 <__lshift>
 800fa1a:	4680      	mov	r8, r0
 800fa1c:	2800      	cmp	r0, #0
 800fa1e:	f43f ae46 	beq.w	800f6ae <_strtod_l+0x43e>
 800fa22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fa24:	9805      	ldr	r0, [sp, #20]
 800fa26:	464a      	mov	r2, r9
 800fa28:	f002 fff2 	bl	8012a10 <__mdiff>
 800fa2c:	4604      	mov	r4, r0
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	f43f ae3d 	beq.w	800f6ae <_strtod_l+0x43e>
 800fa34:	68c3      	ldr	r3, [r0, #12]
 800fa36:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fa38:	2300      	movs	r3, #0
 800fa3a:	60c3      	str	r3, [r0, #12]
 800fa3c:	4641      	mov	r1, r8
 800fa3e:	f002 ffcb 	bl	80129d8 <__mcmp>
 800fa42:	2800      	cmp	r0, #0
 800fa44:	da46      	bge.n	800fad4 <_strtod_l+0x864>
 800fa46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa48:	ea53 030a 	orrs.w	r3, r3, sl
 800fa4c:	d16c      	bne.n	800fb28 <_strtod_l+0x8b8>
 800fa4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d168      	bne.n	800fb28 <_strtod_l+0x8b8>
 800fa56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fa5a:	0d1b      	lsrs	r3, r3, #20
 800fa5c:	051b      	lsls	r3, r3, #20
 800fa5e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fa62:	d961      	bls.n	800fb28 <_strtod_l+0x8b8>
 800fa64:	6963      	ldr	r3, [r4, #20]
 800fa66:	b913      	cbnz	r3, 800fa6e <_strtod_l+0x7fe>
 800fa68:	6923      	ldr	r3, [r4, #16]
 800fa6a:	2b01      	cmp	r3, #1
 800fa6c:	dd5c      	ble.n	800fb28 <_strtod_l+0x8b8>
 800fa6e:	4621      	mov	r1, r4
 800fa70:	2201      	movs	r2, #1
 800fa72:	9805      	ldr	r0, [sp, #20]
 800fa74:	f002 ff44 	bl	8012900 <__lshift>
 800fa78:	4641      	mov	r1, r8
 800fa7a:	4604      	mov	r4, r0
 800fa7c:	f002 ffac 	bl	80129d8 <__mcmp>
 800fa80:	2800      	cmp	r0, #0
 800fa82:	dd51      	ble.n	800fb28 <_strtod_l+0x8b8>
 800fa84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fa88:	9a08      	ldr	r2, [sp, #32]
 800fa8a:	0d1b      	lsrs	r3, r3, #20
 800fa8c:	051b      	lsls	r3, r3, #20
 800fa8e:	2a00      	cmp	r2, #0
 800fa90:	d06b      	beq.n	800fb6a <_strtod_l+0x8fa>
 800fa92:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fa96:	d868      	bhi.n	800fb6a <_strtod_l+0x8fa>
 800fa98:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800fa9c:	f67f ae9d 	bls.w	800f7da <_strtod_l+0x56a>
 800faa0:	4b0a      	ldr	r3, [pc, #40]	@ (800facc <_strtod_l+0x85c>)
 800faa2:	4650      	mov	r0, sl
 800faa4:	4659      	mov	r1, fp
 800faa6:	2200      	movs	r2, #0
 800faa8:	f7f0 fdce 	bl	8000648 <__aeabi_dmul>
 800faac:	4b08      	ldr	r3, [pc, #32]	@ (800fad0 <_strtod_l+0x860>)
 800faae:	400b      	ands	r3, r1
 800fab0:	4682      	mov	sl, r0
 800fab2:	468b      	mov	fp, r1
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	f47f ae05 	bne.w	800f6c4 <_strtod_l+0x454>
 800faba:	9a05      	ldr	r2, [sp, #20]
 800fabc:	2322      	movs	r3, #34	@ 0x22
 800fabe:	6013      	str	r3, [r2, #0]
 800fac0:	e600      	b.n	800f6c4 <_strtod_l+0x454>
 800fac2:	bf00      	nop
 800fac4:	08014920 	.word	0x08014920
 800fac8:	fffffc02 	.word	0xfffffc02
 800facc:	39500000 	.word	0x39500000
 800fad0:	7ff00000 	.word	0x7ff00000
 800fad4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800fad8:	d165      	bne.n	800fba6 <_strtod_l+0x936>
 800fada:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fadc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fae0:	b35a      	cbz	r2, 800fb3a <_strtod_l+0x8ca>
 800fae2:	4a9f      	ldr	r2, [pc, #636]	@ (800fd60 <_strtod_l+0xaf0>)
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d12b      	bne.n	800fb40 <_strtod_l+0x8d0>
 800fae8:	9b08      	ldr	r3, [sp, #32]
 800faea:	4651      	mov	r1, sl
 800faec:	b303      	cbz	r3, 800fb30 <_strtod_l+0x8c0>
 800faee:	4b9d      	ldr	r3, [pc, #628]	@ (800fd64 <_strtod_l+0xaf4>)
 800faf0:	465a      	mov	r2, fp
 800faf2:	4013      	ands	r3, r2
 800faf4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800faf8:	f04f 32ff 	mov.w	r2, #4294967295
 800fafc:	d81b      	bhi.n	800fb36 <_strtod_l+0x8c6>
 800fafe:	0d1b      	lsrs	r3, r3, #20
 800fb00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fb04:	fa02 f303 	lsl.w	r3, r2, r3
 800fb08:	4299      	cmp	r1, r3
 800fb0a:	d119      	bne.n	800fb40 <_strtod_l+0x8d0>
 800fb0c:	4b96      	ldr	r3, [pc, #600]	@ (800fd68 <_strtod_l+0xaf8>)
 800fb0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d102      	bne.n	800fb1a <_strtod_l+0x8aa>
 800fb14:	3101      	adds	r1, #1
 800fb16:	f43f adca 	beq.w	800f6ae <_strtod_l+0x43e>
 800fb1a:	4b92      	ldr	r3, [pc, #584]	@ (800fd64 <_strtod_l+0xaf4>)
 800fb1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fb1e:	401a      	ands	r2, r3
 800fb20:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800fb24:	f04f 0a00 	mov.w	sl, #0
 800fb28:	9b08      	ldr	r3, [sp, #32]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d1b8      	bne.n	800faa0 <_strtod_l+0x830>
 800fb2e:	e5c9      	b.n	800f6c4 <_strtod_l+0x454>
 800fb30:	f04f 33ff 	mov.w	r3, #4294967295
 800fb34:	e7e8      	b.n	800fb08 <_strtod_l+0x898>
 800fb36:	4613      	mov	r3, r2
 800fb38:	e7e6      	b.n	800fb08 <_strtod_l+0x898>
 800fb3a:	ea53 030a 	orrs.w	r3, r3, sl
 800fb3e:	d0a1      	beq.n	800fa84 <_strtod_l+0x814>
 800fb40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fb42:	b1db      	cbz	r3, 800fb7c <_strtod_l+0x90c>
 800fb44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fb46:	4213      	tst	r3, r2
 800fb48:	d0ee      	beq.n	800fb28 <_strtod_l+0x8b8>
 800fb4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb4c:	9a08      	ldr	r2, [sp, #32]
 800fb4e:	4650      	mov	r0, sl
 800fb50:	4659      	mov	r1, fp
 800fb52:	b1bb      	cbz	r3, 800fb84 <_strtod_l+0x914>
 800fb54:	f7ff fb6b 	bl	800f22e <sulp>
 800fb58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fb5c:	ec53 2b10 	vmov	r2, r3, d0
 800fb60:	f7f0 fbbc 	bl	80002dc <__adddf3>
 800fb64:	4682      	mov	sl, r0
 800fb66:	468b      	mov	fp, r1
 800fb68:	e7de      	b.n	800fb28 <_strtod_l+0x8b8>
 800fb6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800fb6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fb72:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fb76:	f04f 3aff 	mov.w	sl, #4294967295
 800fb7a:	e7d5      	b.n	800fb28 <_strtod_l+0x8b8>
 800fb7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fb7e:	ea13 0f0a 	tst.w	r3, sl
 800fb82:	e7e1      	b.n	800fb48 <_strtod_l+0x8d8>
 800fb84:	f7ff fb53 	bl	800f22e <sulp>
 800fb88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fb8c:	ec53 2b10 	vmov	r2, r3, d0
 800fb90:	f7f0 fba2 	bl	80002d8 <__aeabi_dsub>
 800fb94:	2200      	movs	r2, #0
 800fb96:	2300      	movs	r3, #0
 800fb98:	4682      	mov	sl, r0
 800fb9a:	468b      	mov	fp, r1
 800fb9c:	f7f0 ffbc 	bl	8000b18 <__aeabi_dcmpeq>
 800fba0:	2800      	cmp	r0, #0
 800fba2:	d0c1      	beq.n	800fb28 <_strtod_l+0x8b8>
 800fba4:	e619      	b.n	800f7da <_strtod_l+0x56a>
 800fba6:	4641      	mov	r1, r8
 800fba8:	4620      	mov	r0, r4
 800fbaa:	f003 f88d 	bl	8012cc8 <__ratio>
 800fbae:	ec57 6b10 	vmov	r6, r7, d0
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fbb8:	4630      	mov	r0, r6
 800fbba:	4639      	mov	r1, r7
 800fbbc:	f7f0 ffc0 	bl	8000b40 <__aeabi_dcmple>
 800fbc0:	2800      	cmp	r0, #0
 800fbc2:	d06f      	beq.n	800fca4 <_strtod_l+0xa34>
 800fbc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d17a      	bne.n	800fcc0 <_strtod_l+0xa50>
 800fbca:	f1ba 0f00 	cmp.w	sl, #0
 800fbce:	d158      	bne.n	800fc82 <_strtod_l+0xa12>
 800fbd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fbd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d15a      	bne.n	800fc90 <_strtod_l+0xa20>
 800fbda:	4b64      	ldr	r3, [pc, #400]	@ (800fd6c <_strtod_l+0xafc>)
 800fbdc:	2200      	movs	r2, #0
 800fbde:	4630      	mov	r0, r6
 800fbe0:	4639      	mov	r1, r7
 800fbe2:	f7f0 ffa3 	bl	8000b2c <__aeabi_dcmplt>
 800fbe6:	2800      	cmp	r0, #0
 800fbe8:	d159      	bne.n	800fc9e <_strtod_l+0xa2e>
 800fbea:	4630      	mov	r0, r6
 800fbec:	4639      	mov	r1, r7
 800fbee:	4b60      	ldr	r3, [pc, #384]	@ (800fd70 <_strtod_l+0xb00>)
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	f7f0 fd29 	bl	8000648 <__aeabi_dmul>
 800fbf6:	4606      	mov	r6, r0
 800fbf8:	460f      	mov	r7, r1
 800fbfa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800fbfe:	9606      	str	r6, [sp, #24]
 800fc00:	9307      	str	r3, [sp, #28]
 800fc02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fc06:	4d57      	ldr	r5, [pc, #348]	@ (800fd64 <_strtod_l+0xaf4>)
 800fc08:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fc0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc0e:	401d      	ands	r5, r3
 800fc10:	4b58      	ldr	r3, [pc, #352]	@ (800fd74 <_strtod_l+0xb04>)
 800fc12:	429d      	cmp	r5, r3
 800fc14:	f040 80b2 	bne.w	800fd7c <_strtod_l+0xb0c>
 800fc18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc1a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800fc1e:	ec4b ab10 	vmov	d0, sl, fp
 800fc22:	f002 ff89 	bl	8012b38 <__ulp>
 800fc26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fc2a:	ec51 0b10 	vmov	r0, r1, d0
 800fc2e:	f7f0 fd0b 	bl	8000648 <__aeabi_dmul>
 800fc32:	4652      	mov	r2, sl
 800fc34:	465b      	mov	r3, fp
 800fc36:	f7f0 fb51 	bl	80002dc <__adddf3>
 800fc3a:	460b      	mov	r3, r1
 800fc3c:	4949      	ldr	r1, [pc, #292]	@ (800fd64 <_strtod_l+0xaf4>)
 800fc3e:	4a4e      	ldr	r2, [pc, #312]	@ (800fd78 <_strtod_l+0xb08>)
 800fc40:	4019      	ands	r1, r3
 800fc42:	4291      	cmp	r1, r2
 800fc44:	4682      	mov	sl, r0
 800fc46:	d942      	bls.n	800fcce <_strtod_l+0xa5e>
 800fc48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fc4a:	4b47      	ldr	r3, [pc, #284]	@ (800fd68 <_strtod_l+0xaf8>)
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d103      	bne.n	800fc58 <_strtod_l+0x9e8>
 800fc50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc52:	3301      	adds	r3, #1
 800fc54:	f43f ad2b 	beq.w	800f6ae <_strtod_l+0x43e>
 800fc58:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800fd68 <_strtod_l+0xaf8>
 800fc5c:	f04f 3aff 	mov.w	sl, #4294967295
 800fc60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fc62:	9805      	ldr	r0, [sp, #20]
 800fc64:	f002 fc34 	bl	80124d0 <_Bfree>
 800fc68:	9805      	ldr	r0, [sp, #20]
 800fc6a:	4649      	mov	r1, r9
 800fc6c:	f002 fc30 	bl	80124d0 <_Bfree>
 800fc70:	9805      	ldr	r0, [sp, #20]
 800fc72:	4641      	mov	r1, r8
 800fc74:	f002 fc2c 	bl	80124d0 <_Bfree>
 800fc78:	9805      	ldr	r0, [sp, #20]
 800fc7a:	4621      	mov	r1, r4
 800fc7c:	f002 fc28 	bl	80124d0 <_Bfree>
 800fc80:	e618      	b.n	800f8b4 <_strtod_l+0x644>
 800fc82:	f1ba 0f01 	cmp.w	sl, #1
 800fc86:	d103      	bne.n	800fc90 <_strtod_l+0xa20>
 800fc88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	f43f ada5 	beq.w	800f7da <_strtod_l+0x56a>
 800fc90:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800fd40 <_strtod_l+0xad0>
 800fc94:	4f35      	ldr	r7, [pc, #212]	@ (800fd6c <_strtod_l+0xafc>)
 800fc96:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fc9a:	2600      	movs	r6, #0
 800fc9c:	e7b1      	b.n	800fc02 <_strtod_l+0x992>
 800fc9e:	4f34      	ldr	r7, [pc, #208]	@ (800fd70 <_strtod_l+0xb00>)
 800fca0:	2600      	movs	r6, #0
 800fca2:	e7aa      	b.n	800fbfa <_strtod_l+0x98a>
 800fca4:	4b32      	ldr	r3, [pc, #200]	@ (800fd70 <_strtod_l+0xb00>)
 800fca6:	4630      	mov	r0, r6
 800fca8:	4639      	mov	r1, r7
 800fcaa:	2200      	movs	r2, #0
 800fcac:	f7f0 fccc 	bl	8000648 <__aeabi_dmul>
 800fcb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fcb2:	4606      	mov	r6, r0
 800fcb4:	460f      	mov	r7, r1
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d09f      	beq.n	800fbfa <_strtod_l+0x98a>
 800fcba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fcbe:	e7a0      	b.n	800fc02 <_strtod_l+0x992>
 800fcc0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fd48 <_strtod_l+0xad8>
 800fcc4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fcc8:	ec57 6b17 	vmov	r6, r7, d7
 800fccc:	e799      	b.n	800fc02 <_strtod_l+0x992>
 800fcce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800fcd2:	9b08      	ldr	r3, [sp, #32]
 800fcd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d1c1      	bne.n	800fc60 <_strtod_l+0x9f0>
 800fcdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fce0:	0d1b      	lsrs	r3, r3, #20
 800fce2:	051b      	lsls	r3, r3, #20
 800fce4:	429d      	cmp	r5, r3
 800fce6:	d1bb      	bne.n	800fc60 <_strtod_l+0x9f0>
 800fce8:	4630      	mov	r0, r6
 800fcea:	4639      	mov	r1, r7
 800fcec:	f7f1 f80c 	bl	8000d08 <__aeabi_d2lz>
 800fcf0:	f7f0 fc7c 	bl	80005ec <__aeabi_l2d>
 800fcf4:	4602      	mov	r2, r0
 800fcf6:	460b      	mov	r3, r1
 800fcf8:	4630      	mov	r0, r6
 800fcfa:	4639      	mov	r1, r7
 800fcfc:	f7f0 faec 	bl	80002d8 <__aeabi_dsub>
 800fd00:	460b      	mov	r3, r1
 800fd02:	4602      	mov	r2, r0
 800fd04:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800fd08:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800fd0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd0e:	ea46 060a 	orr.w	r6, r6, sl
 800fd12:	431e      	orrs	r6, r3
 800fd14:	d06f      	beq.n	800fdf6 <_strtod_l+0xb86>
 800fd16:	a30e      	add	r3, pc, #56	@ (adr r3, 800fd50 <_strtod_l+0xae0>)
 800fd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1c:	f7f0 ff06 	bl	8000b2c <__aeabi_dcmplt>
 800fd20:	2800      	cmp	r0, #0
 800fd22:	f47f accf 	bne.w	800f6c4 <_strtod_l+0x454>
 800fd26:	a30c      	add	r3, pc, #48	@ (adr r3, 800fd58 <_strtod_l+0xae8>)
 800fd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd30:	f7f0 ff1a 	bl	8000b68 <__aeabi_dcmpgt>
 800fd34:	2800      	cmp	r0, #0
 800fd36:	d093      	beq.n	800fc60 <_strtod_l+0x9f0>
 800fd38:	e4c4      	b.n	800f6c4 <_strtod_l+0x454>
 800fd3a:	bf00      	nop
 800fd3c:	f3af 8000 	nop.w
 800fd40:	00000000 	.word	0x00000000
 800fd44:	bff00000 	.word	0xbff00000
 800fd48:	00000000 	.word	0x00000000
 800fd4c:	3ff00000 	.word	0x3ff00000
 800fd50:	94a03595 	.word	0x94a03595
 800fd54:	3fdfffff 	.word	0x3fdfffff
 800fd58:	35afe535 	.word	0x35afe535
 800fd5c:	3fe00000 	.word	0x3fe00000
 800fd60:	000fffff 	.word	0x000fffff
 800fd64:	7ff00000 	.word	0x7ff00000
 800fd68:	7fefffff 	.word	0x7fefffff
 800fd6c:	3ff00000 	.word	0x3ff00000
 800fd70:	3fe00000 	.word	0x3fe00000
 800fd74:	7fe00000 	.word	0x7fe00000
 800fd78:	7c9fffff 	.word	0x7c9fffff
 800fd7c:	9b08      	ldr	r3, [sp, #32]
 800fd7e:	b323      	cbz	r3, 800fdca <_strtod_l+0xb5a>
 800fd80:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800fd84:	d821      	bhi.n	800fdca <_strtod_l+0xb5a>
 800fd86:	a328      	add	r3, pc, #160	@ (adr r3, 800fe28 <_strtod_l+0xbb8>)
 800fd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd8c:	4630      	mov	r0, r6
 800fd8e:	4639      	mov	r1, r7
 800fd90:	f7f0 fed6 	bl	8000b40 <__aeabi_dcmple>
 800fd94:	b1a0      	cbz	r0, 800fdc0 <_strtod_l+0xb50>
 800fd96:	4639      	mov	r1, r7
 800fd98:	4630      	mov	r0, r6
 800fd9a:	f7f0 ff2d 	bl	8000bf8 <__aeabi_d2uiz>
 800fd9e:	2801      	cmp	r0, #1
 800fda0:	bf38      	it	cc
 800fda2:	2001      	movcc	r0, #1
 800fda4:	f7f0 fbd6 	bl	8000554 <__aeabi_ui2d>
 800fda8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdaa:	4606      	mov	r6, r0
 800fdac:	460f      	mov	r7, r1
 800fdae:	b9fb      	cbnz	r3, 800fdf0 <_strtod_l+0xb80>
 800fdb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fdb4:	9014      	str	r0, [sp, #80]	@ 0x50
 800fdb6:	9315      	str	r3, [sp, #84]	@ 0x54
 800fdb8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800fdbc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fdc0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fdc2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800fdc6:	1b5b      	subs	r3, r3, r5
 800fdc8:	9311      	str	r3, [sp, #68]	@ 0x44
 800fdca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fdce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800fdd2:	f002 feb1 	bl	8012b38 <__ulp>
 800fdd6:	4650      	mov	r0, sl
 800fdd8:	ec53 2b10 	vmov	r2, r3, d0
 800fddc:	4659      	mov	r1, fp
 800fdde:	f7f0 fc33 	bl	8000648 <__aeabi_dmul>
 800fde2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fde6:	f7f0 fa79 	bl	80002dc <__adddf3>
 800fdea:	4682      	mov	sl, r0
 800fdec:	468b      	mov	fp, r1
 800fdee:	e770      	b.n	800fcd2 <_strtod_l+0xa62>
 800fdf0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800fdf4:	e7e0      	b.n	800fdb8 <_strtod_l+0xb48>
 800fdf6:	a30e      	add	r3, pc, #56	@ (adr r3, 800fe30 <_strtod_l+0xbc0>)
 800fdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfc:	f7f0 fe96 	bl	8000b2c <__aeabi_dcmplt>
 800fe00:	e798      	b.n	800fd34 <_strtod_l+0xac4>
 800fe02:	2300      	movs	r3, #0
 800fe04:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe06:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800fe08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe0a:	6013      	str	r3, [r2, #0]
 800fe0c:	f7ff ba6d 	b.w	800f2ea <_strtod_l+0x7a>
 800fe10:	2a65      	cmp	r2, #101	@ 0x65
 800fe12:	f43f ab66 	beq.w	800f4e2 <_strtod_l+0x272>
 800fe16:	2a45      	cmp	r2, #69	@ 0x45
 800fe18:	f43f ab63 	beq.w	800f4e2 <_strtod_l+0x272>
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	f7ff bb9e 	b.w	800f55e <_strtod_l+0x2ee>
 800fe22:	bf00      	nop
 800fe24:	f3af 8000 	nop.w
 800fe28:	ffc00000 	.word	0xffc00000
 800fe2c:	41dfffff 	.word	0x41dfffff
 800fe30:	94a03595 	.word	0x94a03595
 800fe34:	3fcfffff 	.word	0x3fcfffff

0800fe38 <_strtod_r>:
 800fe38:	4b01      	ldr	r3, [pc, #4]	@ (800fe40 <_strtod_r+0x8>)
 800fe3a:	f7ff ba19 	b.w	800f270 <_strtod_l>
 800fe3e:	bf00      	nop
 800fe40:	200000dc 	.word	0x200000dc

0800fe44 <strtod>:
 800fe44:	460a      	mov	r2, r1
 800fe46:	4601      	mov	r1, r0
 800fe48:	4802      	ldr	r0, [pc, #8]	@ (800fe54 <strtod+0x10>)
 800fe4a:	4b03      	ldr	r3, [pc, #12]	@ (800fe58 <strtod+0x14>)
 800fe4c:	6800      	ldr	r0, [r0, #0]
 800fe4e:	f7ff ba0f 	b.w	800f270 <_strtod_l>
 800fe52:	bf00      	nop
 800fe54:	20000248 	.word	0x20000248
 800fe58:	200000dc 	.word	0x200000dc

0800fe5c <__cvt>:
 800fe5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe60:	ec57 6b10 	vmov	r6, r7, d0
 800fe64:	2f00      	cmp	r7, #0
 800fe66:	460c      	mov	r4, r1
 800fe68:	4619      	mov	r1, r3
 800fe6a:	463b      	mov	r3, r7
 800fe6c:	bfbb      	ittet	lt
 800fe6e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fe72:	461f      	movlt	r7, r3
 800fe74:	2300      	movge	r3, #0
 800fe76:	232d      	movlt	r3, #45	@ 0x2d
 800fe78:	700b      	strb	r3, [r1, #0]
 800fe7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fe7c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fe80:	4691      	mov	r9, r2
 800fe82:	f023 0820 	bic.w	r8, r3, #32
 800fe86:	bfbc      	itt	lt
 800fe88:	4632      	movlt	r2, r6
 800fe8a:	4616      	movlt	r6, r2
 800fe8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fe90:	d005      	beq.n	800fe9e <__cvt+0x42>
 800fe92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800fe96:	d100      	bne.n	800fe9a <__cvt+0x3e>
 800fe98:	3401      	adds	r4, #1
 800fe9a:	2102      	movs	r1, #2
 800fe9c:	e000      	b.n	800fea0 <__cvt+0x44>
 800fe9e:	2103      	movs	r1, #3
 800fea0:	ab03      	add	r3, sp, #12
 800fea2:	9301      	str	r3, [sp, #4]
 800fea4:	ab02      	add	r3, sp, #8
 800fea6:	9300      	str	r3, [sp, #0]
 800fea8:	ec47 6b10 	vmov	d0, r6, r7
 800feac:	4653      	mov	r3, sl
 800feae:	4622      	mov	r2, r4
 800feb0:	f001 f8be 	bl	8011030 <_dtoa_r>
 800feb4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800feb8:	4605      	mov	r5, r0
 800feba:	d119      	bne.n	800fef0 <__cvt+0x94>
 800febc:	f019 0f01 	tst.w	r9, #1
 800fec0:	d00e      	beq.n	800fee0 <__cvt+0x84>
 800fec2:	eb00 0904 	add.w	r9, r0, r4
 800fec6:	2200      	movs	r2, #0
 800fec8:	2300      	movs	r3, #0
 800feca:	4630      	mov	r0, r6
 800fecc:	4639      	mov	r1, r7
 800fece:	f7f0 fe23 	bl	8000b18 <__aeabi_dcmpeq>
 800fed2:	b108      	cbz	r0, 800fed8 <__cvt+0x7c>
 800fed4:	f8cd 900c 	str.w	r9, [sp, #12]
 800fed8:	2230      	movs	r2, #48	@ 0x30
 800feda:	9b03      	ldr	r3, [sp, #12]
 800fedc:	454b      	cmp	r3, r9
 800fede:	d31e      	bcc.n	800ff1e <__cvt+0xc2>
 800fee0:	9b03      	ldr	r3, [sp, #12]
 800fee2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fee4:	1b5b      	subs	r3, r3, r5
 800fee6:	4628      	mov	r0, r5
 800fee8:	6013      	str	r3, [r2, #0]
 800feea:	b004      	add	sp, #16
 800feec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fef0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fef4:	eb00 0904 	add.w	r9, r0, r4
 800fef8:	d1e5      	bne.n	800fec6 <__cvt+0x6a>
 800fefa:	7803      	ldrb	r3, [r0, #0]
 800fefc:	2b30      	cmp	r3, #48	@ 0x30
 800fefe:	d10a      	bne.n	800ff16 <__cvt+0xba>
 800ff00:	2200      	movs	r2, #0
 800ff02:	2300      	movs	r3, #0
 800ff04:	4630      	mov	r0, r6
 800ff06:	4639      	mov	r1, r7
 800ff08:	f7f0 fe06 	bl	8000b18 <__aeabi_dcmpeq>
 800ff0c:	b918      	cbnz	r0, 800ff16 <__cvt+0xba>
 800ff0e:	f1c4 0401 	rsb	r4, r4, #1
 800ff12:	f8ca 4000 	str.w	r4, [sl]
 800ff16:	f8da 3000 	ldr.w	r3, [sl]
 800ff1a:	4499      	add	r9, r3
 800ff1c:	e7d3      	b.n	800fec6 <__cvt+0x6a>
 800ff1e:	1c59      	adds	r1, r3, #1
 800ff20:	9103      	str	r1, [sp, #12]
 800ff22:	701a      	strb	r2, [r3, #0]
 800ff24:	e7d9      	b.n	800feda <__cvt+0x7e>

0800ff26 <__exponent>:
 800ff26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff28:	2900      	cmp	r1, #0
 800ff2a:	bfba      	itte	lt
 800ff2c:	4249      	neglt	r1, r1
 800ff2e:	232d      	movlt	r3, #45	@ 0x2d
 800ff30:	232b      	movge	r3, #43	@ 0x2b
 800ff32:	2909      	cmp	r1, #9
 800ff34:	7002      	strb	r2, [r0, #0]
 800ff36:	7043      	strb	r3, [r0, #1]
 800ff38:	dd29      	ble.n	800ff8e <__exponent+0x68>
 800ff3a:	f10d 0307 	add.w	r3, sp, #7
 800ff3e:	461d      	mov	r5, r3
 800ff40:	270a      	movs	r7, #10
 800ff42:	461a      	mov	r2, r3
 800ff44:	fbb1 f6f7 	udiv	r6, r1, r7
 800ff48:	fb07 1416 	mls	r4, r7, r6, r1
 800ff4c:	3430      	adds	r4, #48	@ 0x30
 800ff4e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ff52:	460c      	mov	r4, r1
 800ff54:	2c63      	cmp	r4, #99	@ 0x63
 800ff56:	f103 33ff 	add.w	r3, r3, #4294967295
 800ff5a:	4631      	mov	r1, r6
 800ff5c:	dcf1      	bgt.n	800ff42 <__exponent+0x1c>
 800ff5e:	3130      	adds	r1, #48	@ 0x30
 800ff60:	1e94      	subs	r4, r2, #2
 800ff62:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ff66:	1c41      	adds	r1, r0, #1
 800ff68:	4623      	mov	r3, r4
 800ff6a:	42ab      	cmp	r3, r5
 800ff6c:	d30a      	bcc.n	800ff84 <__exponent+0x5e>
 800ff6e:	f10d 0309 	add.w	r3, sp, #9
 800ff72:	1a9b      	subs	r3, r3, r2
 800ff74:	42ac      	cmp	r4, r5
 800ff76:	bf88      	it	hi
 800ff78:	2300      	movhi	r3, #0
 800ff7a:	3302      	adds	r3, #2
 800ff7c:	4403      	add	r3, r0
 800ff7e:	1a18      	subs	r0, r3, r0
 800ff80:	b003      	add	sp, #12
 800ff82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff84:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ff88:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ff8c:	e7ed      	b.n	800ff6a <__exponent+0x44>
 800ff8e:	2330      	movs	r3, #48	@ 0x30
 800ff90:	3130      	adds	r1, #48	@ 0x30
 800ff92:	7083      	strb	r3, [r0, #2]
 800ff94:	70c1      	strb	r1, [r0, #3]
 800ff96:	1d03      	adds	r3, r0, #4
 800ff98:	e7f1      	b.n	800ff7e <__exponent+0x58>
	...

0800ff9c <_printf_float>:
 800ff9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa0:	b08d      	sub	sp, #52	@ 0x34
 800ffa2:	460c      	mov	r4, r1
 800ffa4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ffa8:	4616      	mov	r6, r2
 800ffaa:	461f      	mov	r7, r3
 800ffac:	4605      	mov	r5, r0
 800ffae:	f000 ff21 	bl	8010df4 <_localeconv_r>
 800ffb2:	6803      	ldr	r3, [r0, #0]
 800ffb4:	9304      	str	r3, [sp, #16]
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7f0 f982 	bl	80002c0 <strlen>
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800ffc0:	f8d8 3000 	ldr.w	r3, [r8]
 800ffc4:	9005      	str	r0, [sp, #20]
 800ffc6:	3307      	adds	r3, #7
 800ffc8:	f023 0307 	bic.w	r3, r3, #7
 800ffcc:	f103 0208 	add.w	r2, r3, #8
 800ffd0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ffd4:	f8d4 b000 	ldr.w	fp, [r4]
 800ffd8:	f8c8 2000 	str.w	r2, [r8]
 800ffdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ffe0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ffe4:	9307      	str	r3, [sp, #28]
 800ffe6:	f8cd 8018 	str.w	r8, [sp, #24]
 800ffea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ffee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fff2:	4b9c      	ldr	r3, [pc, #624]	@ (8010264 <_printf_float+0x2c8>)
 800fff4:	f04f 32ff 	mov.w	r2, #4294967295
 800fff8:	f7f0 fdc0 	bl	8000b7c <__aeabi_dcmpun>
 800fffc:	bb70      	cbnz	r0, 801005c <_printf_float+0xc0>
 800fffe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010002:	4b98      	ldr	r3, [pc, #608]	@ (8010264 <_printf_float+0x2c8>)
 8010004:	f04f 32ff 	mov.w	r2, #4294967295
 8010008:	f7f0 fd9a 	bl	8000b40 <__aeabi_dcmple>
 801000c:	bb30      	cbnz	r0, 801005c <_printf_float+0xc0>
 801000e:	2200      	movs	r2, #0
 8010010:	2300      	movs	r3, #0
 8010012:	4640      	mov	r0, r8
 8010014:	4649      	mov	r1, r9
 8010016:	f7f0 fd89 	bl	8000b2c <__aeabi_dcmplt>
 801001a:	b110      	cbz	r0, 8010022 <_printf_float+0x86>
 801001c:	232d      	movs	r3, #45	@ 0x2d
 801001e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010022:	4a91      	ldr	r2, [pc, #580]	@ (8010268 <_printf_float+0x2cc>)
 8010024:	4b91      	ldr	r3, [pc, #580]	@ (801026c <_printf_float+0x2d0>)
 8010026:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801002a:	bf94      	ite	ls
 801002c:	4690      	movls	r8, r2
 801002e:	4698      	movhi	r8, r3
 8010030:	2303      	movs	r3, #3
 8010032:	6123      	str	r3, [r4, #16]
 8010034:	f02b 0304 	bic.w	r3, fp, #4
 8010038:	6023      	str	r3, [r4, #0]
 801003a:	f04f 0900 	mov.w	r9, #0
 801003e:	9700      	str	r7, [sp, #0]
 8010040:	4633      	mov	r3, r6
 8010042:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010044:	4621      	mov	r1, r4
 8010046:	4628      	mov	r0, r5
 8010048:	f000 f9d2 	bl	80103f0 <_printf_common>
 801004c:	3001      	adds	r0, #1
 801004e:	f040 808d 	bne.w	801016c <_printf_float+0x1d0>
 8010052:	f04f 30ff 	mov.w	r0, #4294967295
 8010056:	b00d      	add	sp, #52	@ 0x34
 8010058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801005c:	4642      	mov	r2, r8
 801005e:	464b      	mov	r3, r9
 8010060:	4640      	mov	r0, r8
 8010062:	4649      	mov	r1, r9
 8010064:	f7f0 fd8a 	bl	8000b7c <__aeabi_dcmpun>
 8010068:	b140      	cbz	r0, 801007c <_printf_float+0xe0>
 801006a:	464b      	mov	r3, r9
 801006c:	2b00      	cmp	r3, #0
 801006e:	bfbc      	itt	lt
 8010070:	232d      	movlt	r3, #45	@ 0x2d
 8010072:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010076:	4a7e      	ldr	r2, [pc, #504]	@ (8010270 <_printf_float+0x2d4>)
 8010078:	4b7e      	ldr	r3, [pc, #504]	@ (8010274 <_printf_float+0x2d8>)
 801007a:	e7d4      	b.n	8010026 <_printf_float+0x8a>
 801007c:	6863      	ldr	r3, [r4, #4]
 801007e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010082:	9206      	str	r2, [sp, #24]
 8010084:	1c5a      	adds	r2, r3, #1
 8010086:	d13b      	bne.n	8010100 <_printf_float+0x164>
 8010088:	2306      	movs	r3, #6
 801008a:	6063      	str	r3, [r4, #4]
 801008c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010090:	2300      	movs	r3, #0
 8010092:	6022      	str	r2, [r4, #0]
 8010094:	9303      	str	r3, [sp, #12]
 8010096:	ab0a      	add	r3, sp, #40	@ 0x28
 8010098:	e9cd a301 	strd	sl, r3, [sp, #4]
 801009c:	ab09      	add	r3, sp, #36	@ 0x24
 801009e:	9300      	str	r3, [sp, #0]
 80100a0:	6861      	ldr	r1, [r4, #4]
 80100a2:	ec49 8b10 	vmov	d0, r8, r9
 80100a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80100aa:	4628      	mov	r0, r5
 80100ac:	f7ff fed6 	bl	800fe5c <__cvt>
 80100b0:	9b06      	ldr	r3, [sp, #24]
 80100b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80100b4:	2b47      	cmp	r3, #71	@ 0x47
 80100b6:	4680      	mov	r8, r0
 80100b8:	d129      	bne.n	801010e <_printf_float+0x172>
 80100ba:	1cc8      	adds	r0, r1, #3
 80100bc:	db02      	blt.n	80100c4 <_printf_float+0x128>
 80100be:	6863      	ldr	r3, [r4, #4]
 80100c0:	4299      	cmp	r1, r3
 80100c2:	dd41      	ble.n	8010148 <_printf_float+0x1ac>
 80100c4:	f1aa 0a02 	sub.w	sl, sl, #2
 80100c8:	fa5f fa8a 	uxtb.w	sl, sl
 80100cc:	3901      	subs	r1, #1
 80100ce:	4652      	mov	r2, sl
 80100d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80100d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80100d6:	f7ff ff26 	bl	800ff26 <__exponent>
 80100da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80100dc:	1813      	adds	r3, r2, r0
 80100de:	2a01      	cmp	r2, #1
 80100e0:	4681      	mov	r9, r0
 80100e2:	6123      	str	r3, [r4, #16]
 80100e4:	dc02      	bgt.n	80100ec <_printf_float+0x150>
 80100e6:	6822      	ldr	r2, [r4, #0]
 80100e8:	07d2      	lsls	r2, r2, #31
 80100ea:	d501      	bpl.n	80100f0 <_printf_float+0x154>
 80100ec:	3301      	adds	r3, #1
 80100ee:	6123      	str	r3, [r4, #16]
 80100f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d0a2      	beq.n	801003e <_printf_float+0xa2>
 80100f8:	232d      	movs	r3, #45	@ 0x2d
 80100fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80100fe:	e79e      	b.n	801003e <_printf_float+0xa2>
 8010100:	9a06      	ldr	r2, [sp, #24]
 8010102:	2a47      	cmp	r2, #71	@ 0x47
 8010104:	d1c2      	bne.n	801008c <_printf_float+0xf0>
 8010106:	2b00      	cmp	r3, #0
 8010108:	d1c0      	bne.n	801008c <_printf_float+0xf0>
 801010a:	2301      	movs	r3, #1
 801010c:	e7bd      	b.n	801008a <_printf_float+0xee>
 801010e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010112:	d9db      	bls.n	80100cc <_printf_float+0x130>
 8010114:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010118:	d118      	bne.n	801014c <_printf_float+0x1b0>
 801011a:	2900      	cmp	r1, #0
 801011c:	6863      	ldr	r3, [r4, #4]
 801011e:	dd0b      	ble.n	8010138 <_printf_float+0x19c>
 8010120:	6121      	str	r1, [r4, #16]
 8010122:	b913      	cbnz	r3, 801012a <_printf_float+0x18e>
 8010124:	6822      	ldr	r2, [r4, #0]
 8010126:	07d0      	lsls	r0, r2, #31
 8010128:	d502      	bpl.n	8010130 <_printf_float+0x194>
 801012a:	3301      	adds	r3, #1
 801012c:	440b      	add	r3, r1
 801012e:	6123      	str	r3, [r4, #16]
 8010130:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010132:	f04f 0900 	mov.w	r9, #0
 8010136:	e7db      	b.n	80100f0 <_printf_float+0x154>
 8010138:	b913      	cbnz	r3, 8010140 <_printf_float+0x1a4>
 801013a:	6822      	ldr	r2, [r4, #0]
 801013c:	07d2      	lsls	r2, r2, #31
 801013e:	d501      	bpl.n	8010144 <_printf_float+0x1a8>
 8010140:	3302      	adds	r3, #2
 8010142:	e7f4      	b.n	801012e <_printf_float+0x192>
 8010144:	2301      	movs	r3, #1
 8010146:	e7f2      	b.n	801012e <_printf_float+0x192>
 8010148:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801014c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801014e:	4299      	cmp	r1, r3
 8010150:	db05      	blt.n	801015e <_printf_float+0x1c2>
 8010152:	6823      	ldr	r3, [r4, #0]
 8010154:	6121      	str	r1, [r4, #16]
 8010156:	07d8      	lsls	r0, r3, #31
 8010158:	d5ea      	bpl.n	8010130 <_printf_float+0x194>
 801015a:	1c4b      	adds	r3, r1, #1
 801015c:	e7e7      	b.n	801012e <_printf_float+0x192>
 801015e:	2900      	cmp	r1, #0
 8010160:	bfd4      	ite	le
 8010162:	f1c1 0202 	rsble	r2, r1, #2
 8010166:	2201      	movgt	r2, #1
 8010168:	4413      	add	r3, r2
 801016a:	e7e0      	b.n	801012e <_printf_float+0x192>
 801016c:	6823      	ldr	r3, [r4, #0]
 801016e:	055a      	lsls	r2, r3, #21
 8010170:	d407      	bmi.n	8010182 <_printf_float+0x1e6>
 8010172:	6923      	ldr	r3, [r4, #16]
 8010174:	4642      	mov	r2, r8
 8010176:	4631      	mov	r1, r6
 8010178:	4628      	mov	r0, r5
 801017a:	47b8      	blx	r7
 801017c:	3001      	adds	r0, #1
 801017e:	d12b      	bne.n	80101d8 <_printf_float+0x23c>
 8010180:	e767      	b.n	8010052 <_printf_float+0xb6>
 8010182:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010186:	f240 80dd 	bls.w	8010344 <_printf_float+0x3a8>
 801018a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801018e:	2200      	movs	r2, #0
 8010190:	2300      	movs	r3, #0
 8010192:	f7f0 fcc1 	bl	8000b18 <__aeabi_dcmpeq>
 8010196:	2800      	cmp	r0, #0
 8010198:	d033      	beq.n	8010202 <_printf_float+0x266>
 801019a:	4a37      	ldr	r2, [pc, #220]	@ (8010278 <_printf_float+0x2dc>)
 801019c:	2301      	movs	r3, #1
 801019e:	4631      	mov	r1, r6
 80101a0:	4628      	mov	r0, r5
 80101a2:	47b8      	blx	r7
 80101a4:	3001      	adds	r0, #1
 80101a6:	f43f af54 	beq.w	8010052 <_printf_float+0xb6>
 80101aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80101ae:	4543      	cmp	r3, r8
 80101b0:	db02      	blt.n	80101b8 <_printf_float+0x21c>
 80101b2:	6823      	ldr	r3, [r4, #0]
 80101b4:	07d8      	lsls	r0, r3, #31
 80101b6:	d50f      	bpl.n	80101d8 <_printf_float+0x23c>
 80101b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101bc:	4631      	mov	r1, r6
 80101be:	4628      	mov	r0, r5
 80101c0:	47b8      	blx	r7
 80101c2:	3001      	adds	r0, #1
 80101c4:	f43f af45 	beq.w	8010052 <_printf_float+0xb6>
 80101c8:	f04f 0900 	mov.w	r9, #0
 80101cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80101d0:	f104 0a1a 	add.w	sl, r4, #26
 80101d4:	45c8      	cmp	r8, r9
 80101d6:	dc09      	bgt.n	80101ec <_printf_float+0x250>
 80101d8:	6823      	ldr	r3, [r4, #0]
 80101da:	079b      	lsls	r3, r3, #30
 80101dc:	f100 8103 	bmi.w	80103e6 <_printf_float+0x44a>
 80101e0:	68e0      	ldr	r0, [r4, #12]
 80101e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80101e4:	4298      	cmp	r0, r3
 80101e6:	bfb8      	it	lt
 80101e8:	4618      	movlt	r0, r3
 80101ea:	e734      	b.n	8010056 <_printf_float+0xba>
 80101ec:	2301      	movs	r3, #1
 80101ee:	4652      	mov	r2, sl
 80101f0:	4631      	mov	r1, r6
 80101f2:	4628      	mov	r0, r5
 80101f4:	47b8      	blx	r7
 80101f6:	3001      	adds	r0, #1
 80101f8:	f43f af2b 	beq.w	8010052 <_printf_float+0xb6>
 80101fc:	f109 0901 	add.w	r9, r9, #1
 8010200:	e7e8      	b.n	80101d4 <_printf_float+0x238>
 8010202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010204:	2b00      	cmp	r3, #0
 8010206:	dc39      	bgt.n	801027c <_printf_float+0x2e0>
 8010208:	4a1b      	ldr	r2, [pc, #108]	@ (8010278 <_printf_float+0x2dc>)
 801020a:	2301      	movs	r3, #1
 801020c:	4631      	mov	r1, r6
 801020e:	4628      	mov	r0, r5
 8010210:	47b8      	blx	r7
 8010212:	3001      	adds	r0, #1
 8010214:	f43f af1d 	beq.w	8010052 <_printf_float+0xb6>
 8010218:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801021c:	ea59 0303 	orrs.w	r3, r9, r3
 8010220:	d102      	bne.n	8010228 <_printf_float+0x28c>
 8010222:	6823      	ldr	r3, [r4, #0]
 8010224:	07d9      	lsls	r1, r3, #31
 8010226:	d5d7      	bpl.n	80101d8 <_printf_float+0x23c>
 8010228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801022c:	4631      	mov	r1, r6
 801022e:	4628      	mov	r0, r5
 8010230:	47b8      	blx	r7
 8010232:	3001      	adds	r0, #1
 8010234:	f43f af0d 	beq.w	8010052 <_printf_float+0xb6>
 8010238:	f04f 0a00 	mov.w	sl, #0
 801023c:	f104 0b1a 	add.w	fp, r4, #26
 8010240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010242:	425b      	negs	r3, r3
 8010244:	4553      	cmp	r3, sl
 8010246:	dc01      	bgt.n	801024c <_printf_float+0x2b0>
 8010248:	464b      	mov	r3, r9
 801024a:	e793      	b.n	8010174 <_printf_float+0x1d8>
 801024c:	2301      	movs	r3, #1
 801024e:	465a      	mov	r2, fp
 8010250:	4631      	mov	r1, r6
 8010252:	4628      	mov	r0, r5
 8010254:	47b8      	blx	r7
 8010256:	3001      	adds	r0, #1
 8010258:	f43f aefb 	beq.w	8010052 <_printf_float+0xb6>
 801025c:	f10a 0a01 	add.w	sl, sl, #1
 8010260:	e7ee      	b.n	8010240 <_printf_float+0x2a4>
 8010262:	bf00      	nop
 8010264:	7fefffff 	.word	0x7fefffff
 8010268:	08014948 	.word	0x08014948
 801026c:	0801494c 	.word	0x0801494c
 8010270:	08014950 	.word	0x08014950
 8010274:	08014954 	.word	0x08014954
 8010278:	08014958 	.word	0x08014958
 801027c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801027e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010282:	4553      	cmp	r3, sl
 8010284:	bfa8      	it	ge
 8010286:	4653      	movge	r3, sl
 8010288:	2b00      	cmp	r3, #0
 801028a:	4699      	mov	r9, r3
 801028c:	dc36      	bgt.n	80102fc <_printf_float+0x360>
 801028e:	f04f 0b00 	mov.w	fp, #0
 8010292:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010296:	f104 021a 	add.w	r2, r4, #26
 801029a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801029c:	9306      	str	r3, [sp, #24]
 801029e:	eba3 0309 	sub.w	r3, r3, r9
 80102a2:	455b      	cmp	r3, fp
 80102a4:	dc31      	bgt.n	801030a <_printf_float+0x36e>
 80102a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102a8:	459a      	cmp	sl, r3
 80102aa:	dc3a      	bgt.n	8010322 <_printf_float+0x386>
 80102ac:	6823      	ldr	r3, [r4, #0]
 80102ae:	07da      	lsls	r2, r3, #31
 80102b0:	d437      	bmi.n	8010322 <_printf_float+0x386>
 80102b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102b4:	ebaa 0903 	sub.w	r9, sl, r3
 80102b8:	9b06      	ldr	r3, [sp, #24]
 80102ba:	ebaa 0303 	sub.w	r3, sl, r3
 80102be:	4599      	cmp	r9, r3
 80102c0:	bfa8      	it	ge
 80102c2:	4699      	movge	r9, r3
 80102c4:	f1b9 0f00 	cmp.w	r9, #0
 80102c8:	dc33      	bgt.n	8010332 <_printf_float+0x396>
 80102ca:	f04f 0800 	mov.w	r8, #0
 80102ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80102d2:	f104 0b1a 	add.w	fp, r4, #26
 80102d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102d8:	ebaa 0303 	sub.w	r3, sl, r3
 80102dc:	eba3 0309 	sub.w	r3, r3, r9
 80102e0:	4543      	cmp	r3, r8
 80102e2:	f77f af79 	ble.w	80101d8 <_printf_float+0x23c>
 80102e6:	2301      	movs	r3, #1
 80102e8:	465a      	mov	r2, fp
 80102ea:	4631      	mov	r1, r6
 80102ec:	4628      	mov	r0, r5
 80102ee:	47b8      	blx	r7
 80102f0:	3001      	adds	r0, #1
 80102f2:	f43f aeae 	beq.w	8010052 <_printf_float+0xb6>
 80102f6:	f108 0801 	add.w	r8, r8, #1
 80102fa:	e7ec      	b.n	80102d6 <_printf_float+0x33a>
 80102fc:	4642      	mov	r2, r8
 80102fe:	4631      	mov	r1, r6
 8010300:	4628      	mov	r0, r5
 8010302:	47b8      	blx	r7
 8010304:	3001      	adds	r0, #1
 8010306:	d1c2      	bne.n	801028e <_printf_float+0x2f2>
 8010308:	e6a3      	b.n	8010052 <_printf_float+0xb6>
 801030a:	2301      	movs	r3, #1
 801030c:	4631      	mov	r1, r6
 801030e:	4628      	mov	r0, r5
 8010310:	9206      	str	r2, [sp, #24]
 8010312:	47b8      	blx	r7
 8010314:	3001      	adds	r0, #1
 8010316:	f43f ae9c 	beq.w	8010052 <_printf_float+0xb6>
 801031a:	9a06      	ldr	r2, [sp, #24]
 801031c:	f10b 0b01 	add.w	fp, fp, #1
 8010320:	e7bb      	b.n	801029a <_printf_float+0x2fe>
 8010322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010326:	4631      	mov	r1, r6
 8010328:	4628      	mov	r0, r5
 801032a:	47b8      	blx	r7
 801032c:	3001      	adds	r0, #1
 801032e:	d1c0      	bne.n	80102b2 <_printf_float+0x316>
 8010330:	e68f      	b.n	8010052 <_printf_float+0xb6>
 8010332:	9a06      	ldr	r2, [sp, #24]
 8010334:	464b      	mov	r3, r9
 8010336:	4442      	add	r2, r8
 8010338:	4631      	mov	r1, r6
 801033a:	4628      	mov	r0, r5
 801033c:	47b8      	blx	r7
 801033e:	3001      	adds	r0, #1
 8010340:	d1c3      	bne.n	80102ca <_printf_float+0x32e>
 8010342:	e686      	b.n	8010052 <_printf_float+0xb6>
 8010344:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010348:	f1ba 0f01 	cmp.w	sl, #1
 801034c:	dc01      	bgt.n	8010352 <_printf_float+0x3b6>
 801034e:	07db      	lsls	r3, r3, #31
 8010350:	d536      	bpl.n	80103c0 <_printf_float+0x424>
 8010352:	2301      	movs	r3, #1
 8010354:	4642      	mov	r2, r8
 8010356:	4631      	mov	r1, r6
 8010358:	4628      	mov	r0, r5
 801035a:	47b8      	blx	r7
 801035c:	3001      	adds	r0, #1
 801035e:	f43f ae78 	beq.w	8010052 <_printf_float+0xb6>
 8010362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010366:	4631      	mov	r1, r6
 8010368:	4628      	mov	r0, r5
 801036a:	47b8      	blx	r7
 801036c:	3001      	adds	r0, #1
 801036e:	f43f ae70 	beq.w	8010052 <_printf_float+0xb6>
 8010372:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010376:	2200      	movs	r2, #0
 8010378:	2300      	movs	r3, #0
 801037a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801037e:	f7f0 fbcb 	bl	8000b18 <__aeabi_dcmpeq>
 8010382:	b9c0      	cbnz	r0, 80103b6 <_printf_float+0x41a>
 8010384:	4653      	mov	r3, sl
 8010386:	f108 0201 	add.w	r2, r8, #1
 801038a:	4631      	mov	r1, r6
 801038c:	4628      	mov	r0, r5
 801038e:	47b8      	blx	r7
 8010390:	3001      	adds	r0, #1
 8010392:	d10c      	bne.n	80103ae <_printf_float+0x412>
 8010394:	e65d      	b.n	8010052 <_printf_float+0xb6>
 8010396:	2301      	movs	r3, #1
 8010398:	465a      	mov	r2, fp
 801039a:	4631      	mov	r1, r6
 801039c:	4628      	mov	r0, r5
 801039e:	47b8      	blx	r7
 80103a0:	3001      	adds	r0, #1
 80103a2:	f43f ae56 	beq.w	8010052 <_printf_float+0xb6>
 80103a6:	f108 0801 	add.w	r8, r8, #1
 80103aa:	45d0      	cmp	r8, sl
 80103ac:	dbf3      	blt.n	8010396 <_printf_float+0x3fa>
 80103ae:	464b      	mov	r3, r9
 80103b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80103b4:	e6df      	b.n	8010176 <_printf_float+0x1da>
 80103b6:	f04f 0800 	mov.w	r8, #0
 80103ba:	f104 0b1a 	add.w	fp, r4, #26
 80103be:	e7f4      	b.n	80103aa <_printf_float+0x40e>
 80103c0:	2301      	movs	r3, #1
 80103c2:	4642      	mov	r2, r8
 80103c4:	e7e1      	b.n	801038a <_printf_float+0x3ee>
 80103c6:	2301      	movs	r3, #1
 80103c8:	464a      	mov	r2, r9
 80103ca:	4631      	mov	r1, r6
 80103cc:	4628      	mov	r0, r5
 80103ce:	47b8      	blx	r7
 80103d0:	3001      	adds	r0, #1
 80103d2:	f43f ae3e 	beq.w	8010052 <_printf_float+0xb6>
 80103d6:	f108 0801 	add.w	r8, r8, #1
 80103da:	68e3      	ldr	r3, [r4, #12]
 80103dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80103de:	1a5b      	subs	r3, r3, r1
 80103e0:	4543      	cmp	r3, r8
 80103e2:	dcf0      	bgt.n	80103c6 <_printf_float+0x42a>
 80103e4:	e6fc      	b.n	80101e0 <_printf_float+0x244>
 80103e6:	f04f 0800 	mov.w	r8, #0
 80103ea:	f104 0919 	add.w	r9, r4, #25
 80103ee:	e7f4      	b.n	80103da <_printf_float+0x43e>

080103f0 <_printf_common>:
 80103f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103f4:	4616      	mov	r6, r2
 80103f6:	4698      	mov	r8, r3
 80103f8:	688a      	ldr	r2, [r1, #8]
 80103fa:	690b      	ldr	r3, [r1, #16]
 80103fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010400:	4293      	cmp	r3, r2
 8010402:	bfb8      	it	lt
 8010404:	4613      	movlt	r3, r2
 8010406:	6033      	str	r3, [r6, #0]
 8010408:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801040c:	4607      	mov	r7, r0
 801040e:	460c      	mov	r4, r1
 8010410:	b10a      	cbz	r2, 8010416 <_printf_common+0x26>
 8010412:	3301      	adds	r3, #1
 8010414:	6033      	str	r3, [r6, #0]
 8010416:	6823      	ldr	r3, [r4, #0]
 8010418:	0699      	lsls	r1, r3, #26
 801041a:	bf42      	ittt	mi
 801041c:	6833      	ldrmi	r3, [r6, #0]
 801041e:	3302      	addmi	r3, #2
 8010420:	6033      	strmi	r3, [r6, #0]
 8010422:	6825      	ldr	r5, [r4, #0]
 8010424:	f015 0506 	ands.w	r5, r5, #6
 8010428:	d106      	bne.n	8010438 <_printf_common+0x48>
 801042a:	f104 0a19 	add.w	sl, r4, #25
 801042e:	68e3      	ldr	r3, [r4, #12]
 8010430:	6832      	ldr	r2, [r6, #0]
 8010432:	1a9b      	subs	r3, r3, r2
 8010434:	42ab      	cmp	r3, r5
 8010436:	dc26      	bgt.n	8010486 <_printf_common+0x96>
 8010438:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801043c:	6822      	ldr	r2, [r4, #0]
 801043e:	3b00      	subs	r3, #0
 8010440:	bf18      	it	ne
 8010442:	2301      	movne	r3, #1
 8010444:	0692      	lsls	r2, r2, #26
 8010446:	d42b      	bmi.n	80104a0 <_printf_common+0xb0>
 8010448:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801044c:	4641      	mov	r1, r8
 801044e:	4638      	mov	r0, r7
 8010450:	47c8      	blx	r9
 8010452:	3001      	adds	r0, #1
 8010454:	d01e      	beq.n	8010494 <_printf_common+0xa4>
 8010456:	6823      	ldr	r3, [r4, #0]
 8010458:	6922      	ldr	r2, [r4, #16]
 801045a:	f003 0306 	and.w	r3, r3, #6
 801045e:	2b04      	cmp	r3, #4
 8010460:	bf02      	ittt	eq
 8010462:	68e5      	ldreq	r5, [r4, #12]
 8010464:	6833      	ldreq	r3, [r6, #0]
 8010466:	1aed      	subeq	r5, r5, r3
 8010468:	68a3      	ldr	r3, [r4, #8]
 801046a:	bf0c      	ite	eq
 801046c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010470:	2500      	movne	r5, #0
 8010472:	4293      	cmp	r3, r2
 8010474:	bfc4      	itt	gt
 8010476:	1a9b      	subgt	r3, r3, r2
 8010478:	18ed      	addgt	r5, r5, r3
 801047a:	2600      	movs	r6, #0
 801047c:	341a      	adds	r4, #26
 801047e:	42b5      	cmp	r5, r6
 8010480:	d11a      	bne.n	80104b8 <_printf_common+0xc8>
 8010482:	2000      	movs	r0, #0
 8010484:	e008      	b.n	8010498 <_printf_common+0xa8>
 8010486:	2301      	movs	r3, #1
 8010488:	4652      	mov	r2, sl
 801048a:	4641      	mov	r1, r8
 801048c:	4638      	mov	r0, r7
 801048e:	47c8      	blx	r9
 8010490:	3001      	adds	r0, #1
 8010492:	d103      	bne.n	801049c <_printf_common+0xac>
 8010494:	f04f 30ff 	mov.w	r0, #4294967295
 8010498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801049c:	3501      	adds	r5, #1
 801049e:	e7c6      	b.n	801042e <_printf_common+0x3e>
 80104a0:	18e1      	adds	r1, r4, r3
 80104a2:	1c5a      	adds	r2, r3, #1
 80104a4:	2030      	movs	r0, #48	@ 0x30
 80104a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80104aa:	4422      	add	r2, r4
 80104ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80104b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80104b4:	3302      	adds	r3, #2
 80104b6:	e7c7      	b.n	8010448 <_printf_common+0x58>
 80104b8:	2301      	movs	r3, #1
 80104ba:	4622      	mov	r2, r4
 80104bc:	4641      	mov	r1, r8
 80104be:	4638      	mov	r0, r7
 80104c0:	47c8      	blx	r9
 80104c2:	3001      	adds	r0, #1
 80104c4:	d0e6      	beq.n	8010494 <_printf_common+0xa4>
 80104c6:	3601      	adds	r6, #1
 80104c8:	e7d9      	b.n	801047e <_printf_common+0x8e>
	...

080104cc <_printf_i>:
 80104cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104d0:	7e0f      	ldrb	r7, [r1, #24]
 80104d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80104d4:	2f78      	cmp	r7, #120	@ 0x78
 80104d6:	4691      	mov	r9, r2
 80104d8:	4680      	mov	r8, r0
 80104da:	460c      	mov	r4, r1
 80104dc:	469a      	mov	sl, r3
 80104de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80104e2:	d807      	bhi.n	80104f4 <_printf_i+0x28>
 80104e4:	2f62      	cmp	r7, #98	@ 0x62
 80104e6:	d80a      	bhi.n	80104fe <_printf_i+0x32>
 80104e8:	2f00      	cmp	r7, #0
 80104ea:	f000 80d2 	beq.w	8010692 <_printf_i+0x1c6>
 80104ee:	2f58      	cmp	r7, #88	@ 0x58
 80104f0:	f000 80b9 	beq.w	8010666 <_printf_i+0x19a>
 80104f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80104f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80104fc:	e03a      	b.n	8010574 <_printf_i+0xa8>
 80104fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010502:	2b15      	cmp	r3, #21
 8010504:	d8f6      	bhi.n	80104f4 <_printf_i+0x28>
 8010506:	a101      	add	r1, pc, #4	@ (adr r1, 801050c <_printf_i+0x40>)
 8010508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801050c:	08010565 	.word	0x08010565
 8010510:	08010579 	.word	0x08010579
 8010514:	080104f5 	.word	0x080104f5
 8010518:	080104f5 	.word	0x080104f5
 801051c:	080104f5 	.word	0x080104f5
 8010520:	080104f5 	.word	0x080104f5
 8010524:	08010579 	.word	0x08010579
 8010528:	080104f5 	.word	0x080104f5
 801052c:	080104f5 	.word	0x080104f5
 8010530:	080104f5 	.word	0x080104f5
 8010534:	080104f5 	.word	0x080104f5
 8010538:	08010679 	.word	0x08010679
 801053c:	080105a3 	.word	0x080105a3
 8010540:	08010633 	.word	0x08010633
 8010544:	080104f5 	.word	0x080104f5
 8010548:	080104f5 	.word	0x080104f5
 801054c:	0801069b 	.word	0x0801069b
 8010550:	080104f5 	.word	0x080104f5
 8010554:	080105a3 	.word	0x080105a3
 8010558:	080104f5 	.word	0x080104f5
 801055c:	080104f5 	.word	0x080104f5
 8010560:	0801063b 	.word	0x0801063b
 8010564:	6833      	ldr	r3, [r6, #0]
 8010566:	1d1a      	adds	r2, r3, #4
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	6032      	str	r2, [r6, #0]
 801056c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010570:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010574:	2301      	movs	r3, #1
 8010576:	e09d      	b.n	80106b4 <_printf_i+0x1e8>
 8010578:	6833      	ldr	r3, [r6, #0]
 801057a:	6820      	ldr	r0, [r4, #0]
 801057c:	1d19      	adds	r1, r3, #4
 801057e:	6031      	str	r1, [r6, #0]
 8010580:	0606      	lsls	r6, r0, #24
 8010582:	d501      	bpl.n	8010588 <_printf_i+0xbc>
 8010584:	681d      	ldr	r5, [r3, #0]
 8010586:	e003      	b.n	8010590 <_printf_i+0xc4>
 8010588:	0645      	lsls	r5, r0, #25
 801058a:	d5fb      	bpl.n	8010584 <_printf_i+0xb8>
 801058c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010590:	2d00      	cmp	r5, #0
 8010592:	da03      	bge.n	801059c <_printf_i+0xd0>
 8010594:	232d      	movs	r3, #45	@ 0x2d
 8010596:	426d      	negs	r5, r5
 8010598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801059c:	4859      	ldr	r0, [pc, #356]	@ (8010704 <_printf_i+0x238>)
 801059e:	230a      	movs	r3, #10
 80105a0:	e011      	b.n	80105c6 <_printf_i+0xfa>
 80105a2:	6821      	ldr	r1, [r4, #0]
 80105a4:	6833      	ldr	r3, [r6, #0]
 80105a6:	0608      	lsls	r0, r1, #24
 80105a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80105ac:	d402      	bmi.n	80105b4 <_printf_i+0xe8>
 80105ae:	0649      	lsls	r1, r1, #25
 80105b0:	bf48      	it	mi
 80105b2:	b2ad      	uxthmi	r5, r5
 80105b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80105b6:	4853      	ldr	r0, [pc, #332]	@ (8010704 <_printf_i+0x238>)
 80105b8:	6033      	str	r3, [r6, #0]
 80105ba:	bf14      	ite	ne
 80105bc:	230a      	movne	r3, #10
 80105be:	2308      	moveq	r3, #8
 80105c0:	2100      	movs	r1, #0
 80105c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80105c6:	6866      	ldr	r6, [r4, #4]
 80105c8:	60a6      	str	r6, [r4, #8]
 80105ca:	2e00      	cmp	r6, #0
 80105cc:	bfa2      	ittt	ge
 80105ce:	6821      	ldrge	r1, [r4, #0]
 80105d0:	f021 0104 	bicge.w	r1, r1, #4
 80105d4:	6021      	strge	r1, [r4, #0]
 80105d6:	b90d      	cbnz	r5, 80105dc <_printf_i+0x110>
 80105d8:	2e00      	cmp	r6, #0
 80105da:	d04b      	beq.n	8010674 <_printf_i+0x1a8>
 80105dc:	4616      	mov	r6, r2
 80105de:	fbb5 f1f3 	udiv	r1, r5, r3
 80105e2:	fb03 5711 	mls	r7, r3, r1, r5
 80105e6:	5dc7      	ldrb	r7, [r0, r7]
 80105e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80105ec:	462f      	mov	r7, r5
 80105ee:	42bb      	cmp	r3, r7
 80105f0:	460d      	mov	r5, r1
 80105f2:	d9f4      	bls.n	80105de <_printf_i+0x112>
 80105f4:	2b08      	cmp	r3, #8
 80105f6:	d10b      	bne.n	8010610 <_printf_i+0x144>
 80105f8:	6823      	ldr	r3, [r4, #0]
 80105fa:	07df      	lsls	r7, r3, #31
 80105fc:	d508      	bpl.n	8010610 <_printf_i+0x144>
 80105fe:	6923      	ldr	r3, [r4, #16]
 8010600:	6861      	ldr	r1, [r4, #4]
 8010602:	4299      	cmp	r1, r3
 8010604:	bfde      	ittt	le
 8010606:	2330      	movle	r3, #48	@ 0x30
 8010608:	f806 3c01 	strble.w	r3, [r6, #-1]
 801060c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010610:	1b92      	subs	r2, r2, r6
 8010612:	6122      	str	r2, [r4, #16]
 8010614:	f8cd a000 	str.w	sl, [sp]
 8010618:	464b      	mov	r3, r9
 801061a:	aa03      	add	r2, sp, #12
 801061c:	4621      	mov	r1, r4
 801061e:	4640      	mov	r0, r8
 8010620:	f7ff fee6 	bl	80103f0 <_printf_common>
 8010624:	3001      	adds	r0, #1
 8010626:	d14a      	bne.n	80106be <_printf_i+0x1f2>
 8010628:	f04f 30ff 	mov.w	r0, #4294967295
 801062c:	b004      	add	sp, #16
 801062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010632:	6823      	ldr	r3, [r4, #0]
 8010634:	f043 0320 	orr.w	r3, r3, #32
 8010638:	6023      	str	r3, [r4, #0]
 801063a:	4833      	ldr	r0, [pc, #204]	@ (8010708 <_printf_i+0x23c>)
 801063c:	2778      	movs	r7, #120	@ 0x78
 801063e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010642:	6823      	ldr	r3, [r4, #0]
 8010644:	6831      	ldr	r1, [r6, #0]
 8010646:	061f      	lsls	r7, r3, #24
 8010648:	f851 5b04 	ldr.w	r5, [r1], #4
 801064c:	d402      	bmi.n	8010654 <_printf_i+0x188>
 801064e:	065f      	lsls	r7, r3, #25
 8010650:	bf48      	it	mi
 8010652:	b2ad      	uxthmi	r5, r5
 8010654:	6031      	str	r1, [r6, #0]
 8010656:	07d9      	lsls	r1, r3, #31
 8010658:	bf44      	itt	mi
 801065a:	f043 0320 	orrmi.w	r3, r3, #32
 801065e:	6023      	strmi	r3, [r4, #0]
 8010660:	b11d      	cbz	r5, 801066a <_printf_i+0x19e>
 8010662:	2310      	movs	r3, #16
 8010664:	e7ac      	b.n	80105c0 <_printf_i+0xf4>
 8010666:	4827      	ldr	r0, [pc, #156]	@ (8010704 <_printf_i+0x238>)
 8010668:	e7e9      	b.n	801063e <_printf_i+0x172>
 801066a:	6823      	ldr	r3, [r4, #0]
 801066c:	f023 0320 	bic.w	r3, r3, #32
 8010670:	6023      	str	r3, [r4, #0]
 8010672:	e7f6      	b.n	8010662 <_printf_i+0x196>
 8010674:	4616      	mov	r6, r2
 8010676:	e7bd      	b.n	80105f4 <_printf_i+0x128>
 8010678:	6833      	ldr	r3, [r6, #0]
 801067a:	6825      	ldr	r5, [r4, #0]
 801067c:	6961      	ldr	r1, [r4, #20]
 801067e:	1d18      	adds	r0, r3, #4
 8010680:	6030      	str	r0, [r6, #0]
 8010682:	062e      	lsls	r6, r5, #24
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	d501      	bpl.n	801068c <_printf_i+0x1c0>
 8010688:	6019      	str	r1, [r3, #0]
 801068a:	e002      	b.n	8010692 <_printf_i+0x1c6>
 801068c:	0668      	lsls	r0, r5, #25
 801068e:	d5fb      	bpl.n	8010688 <_printf_i+0x1bc>
 8010690:	8019      	strh	r1, [r3, #0]
 8010692:	2300      	movs	r3, #0
 8010694:	6123      	str	r3, [r4, #16]
 8010696:	4616      	mov	r6, r2
 8010698:	e7bc      	b.n	8010614 <_printf_i+0x148>
 801069a:	6833      	ldr	r3, [r6, #0]
 801069c:	1d1a      	adds	r2, r3, #4
 801069e:	6032      	str	r2, [r6, #0]
 80106a0:	681e      	ldr	r6, [r3, #0]
 80106a2:	6862      	ldr	r2, [r4, #4]
 80106a4:	2100      	movs	r1, #0
 80106a6:	4630      	mov	r0, r6
 80106a8:	f7ef fdba 	bl	8000220 <memchr>
 80106ac:	b108      	cbz	r0, 80106b2 <_printf_i+0x1e6>
 80106ae:	1b80      	subs	r0, r0, r6
 80106b0:	6060      	str	r0, [r4, #4]
 80106b2:	6863      	ldr	r3, [r4, #4]
 80106b4:	6123      	str	r3, [r4, #16]
 80106b6:	2300      	movs	r3, #0
 80106b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80106bc:	e7aa      	b.n	8010614 <_printf_i+0x148>
 80106be:	6923      	ldr	r3, [r4, #16]
 80106c0:	4632      	mov	r2, r6
 80106c2:	4649      	mov	r1, r9
 80106c4:	4640      	mov	r0, r8
 80106c6:	47d0      	blx	sl
 80106c8:	3001      	adds	r0, #1
 80106ca:	d0ad      	beq.n	8010628 <_printf_i+0x15c>
 80106cc:	6823      	ldr	r3, [r4, #0]
 80106ce:	079b      	lsls	r3, r3, #30
 80106d0:	d413      	bmi.n	80106fa <_printf_i+0x22e>
 80106d2:	68e0      	ldr	r0, [r4, #12]
 80106d4:	9b03      	ldr	r3, [sp, #12]
 80106d6:	4298      	cmp	r0, r3
 80106d8:	bfb8      	it	lt
 80106da:	4618      	movlt	r0, r3
 80106dc:	e7a6      	b.n	801062c <_printf_i+0x160>
 80106de:	2301      	movs	r3, #1
 80106e0:	4632      	mov	r2, r6
 80106e2:	4649      	mov	r1, r9
 80106e4:	4640      	mov	r0, r8
 80106e6:	47d0      	blx	sl
 80106e8:	3001      	adds	r0, #1
 80106ea:	d09d      	beq.n	8010628 <_printf_i+0x15c>
 80106ec:	3501      	adds	r5, #1
 80106ee:	68e3      	ldr	r3, [r4, #12]
 80106f0:	9903      	ldr	r1, [sp, #12]
 80106f2:	1a5b      	subs	r3, r3, r1
 80106f4:	42ab      	cmp	r3, r5
 80106f6:	dcf2      	bgt.n	80106de <_printf_i+0x212>
 80106f8:	e7eb      	b.n	80106d2 <_printf_i+0x206>
 80106fa:	2500      	movs	r5, #0
 80106fc:	f104 0619 	add.w	r6, r4, #25
 8010700:	e7f5      	b.n	80106ee <_printf_i+0x222>
 8010702:	bf00      	nop
 8010704:	0801495a 	.word	0x0801495a
 8010708:	0801496b 	.word	0x0801496b

0801070c <_scanf_float>:
 801070c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010710:	b087      	sub	sp, #28
 8010712:	4617      	mov	r7, r2
 8010714:	9303      	str	r3, [sp, #12]
 8010716:	688b      	ldr	r3, [r1, #8]
 8010718:	1e5a      	subs	r2, r3, #1
 801071a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801071e:	bf81      	itttt	hi
 8010720:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010724:	eb03 0b05 	addhi.w	fp, r3, r5
 8010728:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801072c:	608b      	strhi	r3, [r1, #8]
 801072e:	680b      	ldr	r3, [r1, #0]
 8010730:	460a      	mov	r2, r1
 8010732:	f04f 0500 	mov.w	r5, #0
 8010736:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801073a:	f842 3b1c 	str.w	r3, [r2], #28
 801073e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010742:	4680      	mov	r8, r0
 8010744:	460c      	mov	r4, r1
 8010746:	bf98      	it	ls
 8010748:	f04f 0b00 	movls.w	fp, #0
 801074c:	9201      	str	r2, [sp, #4]
 801074e:	4616      	mov	r6, r2
 8010750:	46aa      	mov	sl, r5
 8010752:	46a9      	mov	r9, r5
 8010754:	9502      	str	r5, [sp, #8]
 8010756:	68a2      	ldr	r2, [r4, #8]
 8010758:	b152      	cbz	r2, 8010770 <_scanf_float+0x64>
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	2b4e      	cmp	r3, #78	@ 0x4e
 8010760:	d864      	bhi.n	801082c <_scanf_float+0x120>
 8010762:	2b40      	cmp	r3, #64	@ 0x40
 8010764:	d83c      	bhi.n	80107e0 <_scanf_float+0xd4>
 8010766:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801076a:	b2c8      	uxtb	r0, r1
 801076c:	280e      	cmp	r0, #14
 801076e:	d93a      	bls.n	80107e6 <_scanf_float+0xda>
 8010770:	f1b9 0f00 	cmp.w	r9, #0
 8010774:	d003      	beq.n	801077e <_scanf_float+0x72>
 8010776:	6823      	ldr	r3, [r4, #0]
 8010778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801077c:	6023      	str	r3, [r4, #0]
 801077e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010782:	f1ba 0f01 	cmp.w	sl, #1
 8010786:	f200 8117 	bhi.w	80109b8 <_scanf_float+0x2ac>
 801078a:	9b01      	ldr	r3, [sp, #4]
 801078c:	429e      	cmp	r6, r3
 801078e:	f200 8108 	bhi.w	80109a2 <_scanf_float+0x296>
 8010792:	2001      	movs	r0, #1
 8010794:	b007      	add	sp, #28
 8010796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801079a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801079e:	2a0d      	cmp	r2, #13
 80107a0:	d8e6      	bhi.n	8010770 <_scanf_float+0x64>
 80107a2:	a101      	add	r1, pc, #4	@ (adr r1, 80107a8 <_scanf_float+0x9c>)
 80107a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80107a8:	080108ef 	.word	0x080108ef
 80107ac:	08010771 	.word	0x08010771
 80107b0:	08010771 	.word	0x08010771
 80107b4:	08010771 	.word	0x08010771
 80107b8:	0801094f 	.word	0x0801094f
 80107bc:	08010927 	.word	0x08010927
 80107c0:	08010771 	.word	0x08010771
 80107c4:	08010771 	.word	0x08010771
 80107c8:	080108fd 	.word	0x080108fd
 80107cc:	08010771 	.word	0x08010771
 80107d0:	08010771 	.word	0x08010771
 80107d4:	08010771 	.word	0x08010771
 80107d8:	08010771 	.word	0x08010771
 80107dc:	080108b5 	.word	0x080108b5
 80107e0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80107e4:	e7db      	b.n	801079e <_scanf_float+0x92>
 80107e6:	290e      	cmp	r1, #14
 80107e8:	d8c2      	bhi.n	8010770 <_scanf_float+0x64>
 80107ea:	a001      	add	r0, pc, #4	@ (adr r0, 80107f0 <_scanf_float+0xe4>)
 80107ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80107f0:	080108a5 	.word	0x080108a5
 80107f4:	08010771 	.word	0x08010771
 80107f8:	080108a5 	.word	0x080108a5
 80107fc:	0801093b 	.word	0x0801093b
 8010800:	08010771 	.word	0x08010771
 8010804:	0801084d 	.word	0x0801084d
 8010808:	0801088b 	.word	0x0801088b
 801080c:	0801088b 	.word	0x0801088b
 8010810:	0801088b 	.word	0x0801088b
 8010814:	0801088b 	.word	0x0801088b
 8010818:	0801088b 	.word	0x0801088b
 801081c:	0801088b 	.word	0x0801088b
 8010820:	0801088b 	.word	0x0801088b
 8010824:	0801088b 	.word	0x0801088b
 8010828:	0801088b 	.word	0x0801088b
 801082c:	2b6e      	cmp	r3, #110	@ 0x6e
 801082e:	d809      	bhi.n	8010844 <_scanf_float+0x138>
 8010830:	2b60      	cmp	r3, #96	@ 0x60
 8010832:	d8b2      	bhi.n	801079a <_scanf_float+0x8e>
 8010834:	2b54      	cmp	r3, #84	@ 0x54
 8010836:	d07b      	beq.n	8010930 <_scanf_float+0x224>
 8010838:	2b59      	cmp	r3, #89	@ 0x59
 801083a:	d199      	bne.n	8010770 <_scanf_float+0x64>
 801083c:	2d07      	cmp	r5, #7
 801083e:	d197      	bne.n	8010770 <_scanf_float+0x64>
 8010840:	2508      	movs	r5, #8
 8010842:	e02c      	b.n	801089e <_scanf_float+0x192>
 8010844:	2b74      	cmp	r3, #116	@ 0x74
 8010846:	d073      	beq.n	8010930 <_scanf_float+0x224>
 8010848:	2b79      	cmp	r3, #121	@ 0x79
 801084a:	e7f6      	b.n	801083a <_scanf_float+0x12e>
 801084c:	6821      	ldr	r1, [r4, #0]
 801084e:	05c8      	lsls	r0, r1, #23
 8010850:	d51b      	bpl.n	801088a <_scanf_float+0x17e>
 8010852:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8010856:	6021      	str	r1, [r4, #0]
 8010858:	f109 0901 	add.w	r9, r9, #1
 801085c:	f1bb 0f00 	cmp.w	fp, #0
 8010860:	d003      	beq.n	801086a <_scanf_float+0x15e>
 8010862:	3201      	adds	r2, #1
 8010864:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010868:	60a2      	str	r2, [r4, #8]
 801086a:	68a3      	ldr	r3, [r4, #8]
 801086c:	3b01      	subs	r3, #1
 801086e:	60a3      	str	r3, [r4, #8]
 8010870:	6923      	ldr	r3, [r4, #16]
 8010872:	3301      	adds	r3, #1
 8010874:	6123      	str	r3, [r4, #16]
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	3b01      	subs	r3, #1
 801087a:	2b00      	cmp	r3, #0
 801087c:	607b      	str	r3, [r7, #4]
 801087e:	f340 8087 	ble.w	8010990 <_scanf_float+0x284>
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	3301      	adds	r3, #1
 8010886:	603b      	str	r3, [r7, #0]
 8010888:	e765      	b.n	8010756 <_scanf_float+0x4a>
 801088a:	eb1a 0105 	adds.w	r1, sl, r5
 801088e:	f47f af6f 	bne.w	8010770 <_scanf_float+0x64>
 8010892:	6822      	ldr	r2, [r4, #0]
 8010894:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010898:	6022      	str	r2, [r4, #0]
 801089a:	460d      	mov	r5, r1
 801089c:	468a      	mov	sl, r1
 801089e:	f806 3b01 	strb.w	r3, [r6], #1
 80108a2:	e7e2      	b.n	801086a <_scanf_float+0x15e>
 80108a4:	6822      	ldr	r2, [r4, #0]
 80108a6:	0610      	lsls	r0, r2, #24
 80108a8:	f57f af62 	bpl.w	8010770 <_scanf_float+0x64>
 80108ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80108b0:	6022      	str	r2, [r4, #0]
 80108b2:	e7f4      	b.n	801089e <_scanf_float+0x192>
 80108b4:	f1ba 0f00 	cmp.w	sl, #0
 80108b8:	d10e      	bne.n	80108d8 <_scanf_float+0x1cc>
 80108ba:	f1b9 0f00 	cmp.w	r9, #0
 80108be:	d10e      	bne.n	80108de <_scanf_float+0x1d2>
 80108c0:	6822      	ldr	r2, [r4, #0]
 80108c2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80108c6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80108ca:	d108      	bne.n	80108de <_scanf_float+0x1d2>
 80108cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80108d0:	6022      	str	r2, [r4, #0]
 80108d2:	f04f 0a01 	mov.w	sl, #1
 80108d6:	e7e2      	b.n	801089e <_scanf_float+0x192>
 80108d8:	f1ba 0f02 	cmp.w	sl, #2
 80108dc:	d055      	beq.n	801098a <_scanf_float+0x27e>
 80108de:	2d01      	cmp	r5, #1
 80108e0:	d002      	beq.n	80108e8 <_scanf_float+0x1dc>
 80108e2:	2d04      	cmp	r5, #4
 80108e4:	f47f af44 	bne.w	8010770 <_scanf_float+0x64>
 80108e8:	3501      	adds	r5, #1
 80108ea:	b2ed      	uxtb	r5, r5
 80108ec:	e7d7      	b.n	801089e <_scanf_float+0x192>
 80108ee:	f1ba 0f01 	cmp.w	sl, #1
 80108f2:	f47f af3d 	bne.w	8010770 <_scanf_float+0x64>
 80108f6:	f04f 0a02 	mov.w	sl, #2
 80108fa:	e7d0      	b.n	801089e <_scanf_float+0x192>
 80108fc:	b97d      	cbnz	r5, 801091e <_scanf_float+0x212>
 80108fe:	f1b9 0f00 	cmp.w	r9, #0
 8010902:	f47f af38 	bne.w	8010776 <_scanf_float+0x6a>
 8010906:	6822      	ldr	r2, [r4, #0]
 8010908:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801090c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010910:	f040 8108 	bne.w	8010b24 <_scanf_float+0x418>
 8010914:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010918:	6022      	str	r2, [r4, #0]
 801091a:	2501      	movs	r5, #1
 801091c:	e7bf      	b.n	801089e <_scanf_float+0x192>
 801091e:	2d03      	cmp	r5, #3
 8010920:	d0e2      	beq.n	80108e8 <_scanf_float+0x1dc>
 8010922:	2d05      	cmp	r5, #5
 8010924:	e7de      	b.n	80108e4 <_scanf_float+0x1d8>
 8010926:	2d02      	cmp	r5, #2
 8010928:	f47f af22 	bne.w	8010770 <_scanf_float+0x64>
 801092c:	2503      	movs	r5, #3
 801092e:	e7b6      	b.n	801089e <_scanf_float+0x192>
 8010930:	2d06      	cmp	r5, #6
 8010932:	f47f af1d 	bne.w	8010770 <_scanf_float+0x64>
 8010936:	2507      	movs	r5, #7
 8010938:	e7b1      	b.n	801089e <_scanf_float+0x192>
 801093a:	6822      	ldr	r2, [r4, #0]
 801093c:	0591      	lsls	r1, r2, #22
 801093e:	f57f af17 	bpl.w	8010770 <_scanf_float+0x64>
 8010942:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8010946:	6022      	str	r2, [r4, #0]
 8010948:	f8cd 9008 	str.w	r9, [sp, #8]
 801094c:	e7a7      	b.n	801089e <_scanf_float+0x192>
 801094e:	6822      	ldr	r2, [r4, #0]
 8010950:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8010954:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010958:	d006      	beq.n	8010968 <_scanf_float+0x25c>
 801095a:	0550      	lsls	r0, r2, #21
 801095c:	f57f af08 	bpl.w	8010770 <_scanf_float+0x64>
 8010960:	f1b9 0f00 	cmp.w	r9, #0
 8010964:	f000 80de 	beq.w	8010b24 <_scanf_float+0x418>
 8010968:	0591      	lsls	r1, r2, #22
 801096a:	bf58      	it	pl
 801096c:	9902      	ldrpl	r1, [sp, #8]
 801096e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010972:	bf58      	it	pl
 8010974:	eba9 0101 	subpl.w	r1, r9, r1
 8010978:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801097c:	bf58      	it	pl
 801097e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010982:	6022      	str	r2, [r4, #0]
 8010984:	f04f 0900 	mov.w	r9, #0
 8010988:	e789      	b.n	801089e <_scanf_float+0x192>
 801098a:	f04f 0a03 	mov.w	sl, #3
 801098e:	e786      	b.n	801089e <_scanf_float+0x192>
 8010990:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010994:	4639      	mov	r1, r7
 8010996:	4640      	mov	r0, r8
 8010998:	4798      	blx	r3
 801099a:	2800      	cmp	r0, #0
 801099c:	f43f aedb 	beq.w	8010756 <_scanf_float+0x4a>
 80109a0:	e6e6      	b.n	8010770 <_scanf_float+0x64>
 80109a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80109a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80109aa:	463a      	mov	r2, r7
 80109ac:	4640      	mov	r0, r8
 80109ae:	4798      	blx	r3
 80109b0:	6923      	ldr	r3, [r4, #16]
 80109b2:	3b01      	subs	r3, #1
 80109b4:	6123      	str	r3, [r4, #16]
 80109b6:	e6e8      	b.n	801078a <_scanf_float+0x7e>
 80109b8:	1e6b      	subs	r3, r5, #1
 80109ba:	2b06      	cmp	r3, #6
 80109bc:	d824      	bhi.n	8010a08 <_scanf_float+0x2fc>
 80109be:	2d02      	cmp	r5, #2
 80109c0:	d836      	bhi.n	8010a30 <_scanf_float+0x324>
 80109c2:	9b01      	ldr	r3, [sp, #4]
 80109c4:	429e      	cmp	r6, r3
 80109c6:	f67f aee4 	bls.w	8010792 <_scanf_float+0x86>
 80109ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80109ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80109d2:	463a      	mov	r2, r7
 80109d4:	4640      	mov	r0, r8
 80109d6:	4798      	blx	r3
 80109d8:	6923      	ldr	r3, [r4, #16]
 80109da:	3b01      	subs	r3, #1
 80109dc:	6123      	str	r3, [r4, #16]
 80109de:	e7f0      	b.n	80109c2 <_scanf_float+0x2b6>
 80109e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80109e4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80109e8:	463a      	mov	r2, r7
 80109ea:	4640      	mov	r0, r8
 80109ec:	4798      	blx	r3
 80109ee:	6923      	ldr	r3, [r4, #16]
 80109f0:	3b01      	subs	r3, #1
 80109f2:	6123      	str	r3, [r4, #16]
 80109f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80109f8:	fa5f fa8a 	uxtb.w	sl, sl
 80109fc:	f1ba 0f02 	cmp.w	sl, #2
 8010a00:	d1ee      	bne.n	80109e0 <_scanf_float+0x2d4>
 8010a02:	3d03      	subs	r5, #3
 8010a04:	b2ed      	uxtb	r5, r5
 8010a06:	1b76      	subs	r6, r6, r5
 8010a08:	6823      	ldr	r3, [r4, #0]
 8010a0a:	05da      	lsls	r2, r3, #23
 8010a0c:	d530      	bpl.n	8010a70 <_scanf_float+0x364>
 8010a0e:	055b      	lsls	r3, r3, #21
 8010a10:	d511      	bpl.n	8010a36 <_scanf_float+0x32a>
 8010a12:	9b01      	ldr	r3, [sp, #4]
 8010a14:	429e      	cmp	r6, r3
 8010a16:	f67f aebc 	bls.w	8010792 <_scanf_float+0x86>
 8010a1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010a1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010a22:	463a      	mov	r2, r7
 8010a24:	4640      	mov	r0, r8
 8010a26:	4798      	blx	r3
 8010a28:	6923      	ldr	r3, [r4, #16]
 8010a2a:	3b01      	subs	r3, #1
 8010a2c:	6123      	str	r3, [r4, #16]
 8010a2e:	e7f0      	b.n	8010a12 <_scanf_float+0x306>
 8010a30:	46aa      	mov	sl, r5
 8010a32:	46b3      	mov	fp, r6
 8010a34:	e7de      	b.n	80109f4 <_scanf_float+0x2e8>
 8010a36:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010a3a:	6923      	ldr	r3, [r4, #16]
 8010a3c:	2965      	cmp	r1, #101	@ 0x65
 8010a3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8010a42:	f106 35ff 	add.w	r5, r6, #4294967295
 8010a46:	6123      	str	r3, [r4, #16]
 8010a48:	d00c      	beq.n	8010a64 <_scanf_float+0x358>
 8010a4a:	2945      	cmp	r1, #69	@ 0x45
 8010a4c:	d00a      	beq.n	8010a64 <_scanf_float+0x358>
 8010a4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010a52:	463a      	mov	r2, r7
 8010a54:	4640      	mov	r0, r8
 8010a56:	4798      	blx	r3
 8010a58:	6923      	ldr	r3, [r4, #16]
 8010a5a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010a5e:	3b01      	subs	r3, #1
 8010a60:	1eb5      	subs	r5, r6, #2
 8010a62:	6123      	str	r3, [r4, #16]
 8010a64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010a68:	463a      	mov	r2, r7
 8010a6a:	4640      	mov	r0, r8
 8010a6c:	4798      	blx	r3
 8010a6e:	462e      	mov	r6, r5
 8010a70:	6822      	ldr	r2, [r4, #0]
 8010a72:	f012 0210 	ands.w	r2, r2, #16
 8010a76:	d001      	beq.n	8010a7c <_scanf_float+0x370>
 8010a78:	2000      	movs	r0, #0
 8010a7a:	e68b      	b.n	8010794 <_scanf_float+0x88>
 8010a7c:	7032      	strb	r2, [r6, #0]
 8010a7e:	6823      	ldr	r3, [r4, #0]
 8010a80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010a84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010a88:	d11c      	bne.n	8010ac4 <_scanf_float+0x3b8>
 8010a8a:	9b02      	ldr	r3, [sp, #8]
 8010a8c:	454b      	cmp	r3, r9
 8010a8e:	eba3 0209 	sub.w	r2, r3, r9
 8010a92:	d123      	bne.n	8010adc <_scanf_float+0x3d0>
 8010a94:	9901      	ldr	r1, [sp, #4]
 8010a96:	2200      	movs	r2, #0
 8010a98:	4640      	mov	r0, r8
 8010a9a:	f7ff f9cd 	bl	800fe38 <_strtod_r>
 8010a9e:	9b03      	ldr	r3, [sp, #12]
 8010aa0:	6821      	ldr	r1, [r4, #0]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	f011 0f02 	tst.w	r1, #2
 8010aa8:	ec57 6b10 	vmov	r6, r7, d0
 8010aac:	f103 0204 	add.w	r2, r3, #4
 8010ab0:	d01f      	beq.n	8010af2 <_scanf_float+0x3e6>
 8010ab2:	9903      	ldr	r1, [sp, #12]
 8010ab4:	600a      	str	r2, [r1, #0]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	e9c3 6700 	strd	r6, r7, [r3]
 8010abc:	68e3      	ldr	r3, [r4, #12]
 8010abe:	3301      	adds	r3, #1
 8010ac0:	60e3      	str	r3, [r4, #12]
 8010ac2:	e7d9      	b.n	8010a78 <_scanf_float+0x36c>
 8010ac4:	9b04      	ldr	r3, [sp, #16]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d0e4      	beq.n	8010a94 <_scanf_float+0x388>
 8010aca:	9905      	ldr	r1, [sp, #20]
 8010acc:	230a      	movs	r3, #10
 8010ace:	3101      	adds	r1, #1
 8010ad0:	4640      	mov	r0, r8
 8010ad2:	f002 f9e9 	bl	8012ea8 <_strtol_r>
 8010ad6:	9b04      	ldr	r3, [sp, #16]
 8010ad8:	9e05      	ldr	r6, [sp, #20]
 8010ada:	1ac2      	subs	r2, r0, r3
 8010adc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010ae0:	429e      	cmp	r6, r3
 8010ae2:	bf28      	it	cs
 8010ae4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010ae8:	4910      	ldr	r1, [pc, #64]	@ (8010b2c <_scanf_float+0x420>)
 8010aea:	4630      	mov	r0, r6
 8010aec:	f000 f8e4 	bl	8010cb8 <siprintf>
 8010af0:	e7d0      	b.n	8010a94 <_scanf_float+0x388>
 8010af2:	f011 0f04 	tst.w	r1, #4
 8010af6:	9903      	ldr	r1, [sp, #12]
 8010af8:	600a      	str	r2, [r1, #0]
 8010afa:	d1dc      	bne.n	8010ab6 <_scanf_float+0x3aa>
 8010afc:	681d      	ldr	r5, [r3, #0]
 8010afe:	4632      	mov	r2, r6
 8010b00:	463b      	mov	r3, r7
 8010b02:	4630      	mov	r0, r6
 8010b04:	4639      	mov	r1, r7
 8010b06:	f7f0 f839 	bl	8000b7c <__aeabi_dcmpun>
 8010b0a:	b128      	cbz	r0, 8010b18 <_scanf_float+0x40c>
 8010b0c:	4808      	ldr	r0, [pc, #32]	@ (8010b30 <_scanf_float+0x424>)
 8010b0e:	f000 f9ff 	bl	8010f10 <nanf>
 8010b12:	ed85 0a00 	vstr	s0, [r5]
 8010b16:	e7d1      	b.n	8010abc <_scanf_float+0x3b0>
 8010b18:	4630      	mov	r0, r6
 8010b1a:	4639      	mov	r1, r7
 8010b1c:	f7f0 f88c 	bl	8000c38 <__aeabi_d2f>
 8010b20:	6028      	str	r0, [r5, #0]
 8010b22:	e7cb      	b.n	8010abc <_scanf_float+0x3b0>
 8010b24:	f04f 0900 	mov.w	r9, #0
 8010b28:	e629      	b.n	801077e <_scanf_float+0x72>
 8010b2a:	bf00      	nop
 8010b2c:	0801497c 	.word	0x0801497c
 8010b30:	08014d1d 	.word	0x08014d1d

08010b34 <std>:
 8010b34:	2300      	movs	r3, #0
 8010b36:	b510      	push	{r4, lr}
 8010b38:	4604      	mov	r4, r0
 8010b3a:	e9c0 3300 	strd	r3, r3, [r0]
 8010b3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010b42:	6083      	str	r3, [r0, #8]
 8010b44:	8181      	strh	r1, [r0, #12]
 8010b46:	6643      	str	r3, [r0, #100]	@ 0x64
 8010b48:	81c2      	strh	r2, [r0, #14]
 8010b4a:	6183      	str	r3, [r0, #24]
 8010b4c:	4619      	mov	r1, r3
 8010b4e:	2208      	movs	r2, #8
 8010b50:	305c      	adds	r0, #92	@ 0x5c
 8010b52:	f000 f935 	bl	8010dc0 <memset>
 8010b56:	4b0d      	ldr	r3, [pc, #52]	@ (8010b8c <std+0x58>)
 8010b58:	6263      	str	r3, [r4, #36]	@ 0x24
 8010b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8010b90 <std+0x5c>)
 8010b5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8010b94 <std+0x60>)
 8010b60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010b62:	4b0d      	ldr	r3, [pc, #52]	@ (8010b98 <std+0x64>)
 8010b64:	6323      	str	r3, [r4, #48]	@ 0x30
 8010b66:	4b0d      	ldr	r3, [pc, #52]	@ (8010b9c <std+0x68>)
 8010b68:	6224      	str	r4, [r4, #32]
 8010b6a:	429c      	cmp	r4, r3
 8010b6c:	d006      	beq.n	8010b7c <std+0x48>
 8010b6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010b72:	4294      	cmp	r4, r2
 8010b74:	d002      	beq.n	8010b7c <std+0x48>
 8010b76:	33d0      	adds	r3, #208	@ 0xd0
 8010b78:	429c      	cmp	r4, r3
 8010b7a:	d105      	bne.n	8010b88 <std+0x54>
 8010b7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b84:	f000 b9aa 	b.w	8010edc <__retarget_lock_init_recursive>
 8010b88:	bd10      	pop	{r4, pc}
 8010b8a:	bf00      	nop
 8010b8c:	08010cf9 	.word	0x08010cf9
 8010b90:	08010d1b 	.word	0x08010d1b
 8010b94:	08010d53 	.word	0x08010d53
 8010b98:	08010d77 	.word	0x08010d77
 8010b9c:	20000d00 	.word	0x20000d00

08010ba0 <stdio_exit_handler>:
 8010ba0:	4a02      	ldr	r2, [pc, #8]	@ (8010bac <stdio_exit_handler+0xc>)
 8010ba2:	4903      	ldr	r1, [pc, #12]	@ (8010bb0 <stdio_exit_handler+0x10>)
 8010ba4:	4803      	ldr	r0, [pc, #12]	@ (8010bb4 <stdio_exit_handler+0x14>)
 8010ba6:	f000 b869 	b.w	8010c7c <_fwalk_sglue>
 8010baa:	bf00      	nop
 8010bac:	200000d0 	.word	0x200000d0
 8010bb0:	0801327d 	.word	0x0801327d
 8010bb4:	2000024c 	.word	0x2000024c

08010bb8 <cleanup_stdio>:
 8010bb8:	6841      	ldr	r1, [r0, #4]
 8010bba:	4b0c      	ldr	r3, [pc, #48]	@ (8010bec <cleanup_stdio+0x34>)
 8010bbc:	4299      	cmp	r1, r3
 8010bbe:	b510      	push	{r4, lr}
 8010bc0:	4604      	mov	r4, r0
 8010bc2:	d001      	beq.n	8010bc8 <cleanup_stdio+0x10>
 8010bc4:	f002 fb5a 	bl	801327c <_fflush_r>
 8010bc8:	68a1      	ldr	r1, [r4, #8]
 8010bca:	4b09      	ldr	r3, [pc, #36]	@ (8010bf0 <cleanup_stdio+0x38>)
 8010bcc:	4299      	cmp	r1, r3
 8010bce:	d002      	beq.n	8010bd6 <cleanup_stdio+0x1e>
 8010bd0:	4620      	mov	r0, r4
 8010bd2:	f002 fb53 	bl	801327c <_fflush_r>
 8010bd6:	68e1      	ldr	r1, [r4, #12]
 8010bd8:	4b06      	ldr	r3, [pc, #24]	@ (8010bf4 <cleanup_stdio+0x3c>)
 8010bda:	4299      	cmp	r1, r3
 8010bdc:	d004      	beq.n	8010be8 <cleanup_stdio+0x30>
 8010bde:	4620      	mov	r0, r4
 8010be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010be4:	f002 bb4a 	b.w	801327c <_fflush_r>
 8010be8:	bd10      	pop	{r4, pc}
 8010bea:	bf00      	nop
 8010bec:	20000d00 	.word	0x20000d00
 8010bf0:	20000d68 	.word	0x20000d68
 8010bf4:	20000dd0 	.word	0x20000dd0

08010bf8 <global_stdio_init.part.0>:
 8010bf8:	b510      	push	{r4, lr}
 8010bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8010c28 <global_stdio_init.part.0+0x30>)
 8010bfc:	4c0b      	ldr	r4, [pc, #44]	@ (8010c2c <global_stdio_init.part.0+0x34>)
 8010bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8010c30 <global_stdio_init.part.0+0x38>)
 8010c00:	601a      	str	r2, [r3, #0]
 8010c02:	4620      	mov	r0, r4
 8010c04:	2200      	movs	r2, #0
 8010c06:	2104      	movs	r1, #4
 8010c08:	f7ff ff94 	bl	8010b34 <std>
 8010c0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010c10:	2201      	movs	r2, #1
 8010c12:	2109      	movs	r1, #9
 8010c14:	f7ff ff8e 	bl	8010b34 <std>
 8010c18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010c1c:	2202      	movs	r2, #2
 8010c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c22:	2112      	movs	r1, #18
 8010c24:	f7ff bf86 	b.w	8010b34 <std>
 8010c28:	20000e38 	.word	0x20000e38
 8010c2c:	20000d00 	.word	0x20000d00
 8010c30:	08010ba1 	.word	0x08010ba1

08010c34 <__sfp_lock_acquire>:
 8010c34:	4801      	ldr	r0, [pc, #4]	@ (8010c3c <__sfp_lock_acquire+0x8>)
 8010c36:	f000 b952 	b.w	8010ede <__retarget_lock_acquire_recursive>
 8010c3a:	bf00      	nop
 8010c3c:	20000e41 	.word	0x20000e41

08010c40 <__sfp_lock_release>:
 8010c40:	4801      	ldr	r0, [pc, #4]	@ (8010c48 <__sfp_lock_release+0x8>)
 8010c42:	f000 b94d 	b.w	8010ee0 <__retarget_lock_release_recursive>
 8010c46:	bf00      	nop
 8010c48:	20000e41 	.word	0x20000e41

08010c4c <__sinit>:
 8010c4c:	b510      	push	{r4, lr}
 8010c4e:	4604      	mov	r4, r0
 8010c50:	f7ff fff0 	bl	8010c34 <__sfp_lock_acquire>
 8010c54:	6a23      	ldr	r3, [r4, #32]
 8010c56:	b11b      	cbz	r3, 8010c60 <__sinit+0x14>
 8010c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c5c:	f7ff bff0 	b.w	8010c40 <__sfp_lock_release>
 8010c60:	4b04      	ldr	r3, [pc, #16]	@ (8010c74 <__sinit+0x28>)
 8010c62:	6223      	str	r3, [r4, #32]
 8010c64:	4b04      	ldr	r3, [pc, #16]	@ (8010c78 <__sinit+0x2c>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d1f5      	bne.n	8010c58 <__sinit+0xc>
 8010c6c:	f7ff ffc4 	bl	8010bf8 <global_stdio_init.part.0>
 8010c70:	e7f2      	b.n	8010c58 <__sinit+0xc>
 8010c72:	bf00      	nop
 8010c74:	08010bb9 	.word	0x08010bb9
 8010c78:	20000e38 	.word	0x20000e38

08010c7c <_fwalk_sglue>:
 8010c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c80:	4607      	mov	r7, r0
 8010c82:	4688      	mov	r8, r1
 8010c84:	4614      	mov	r4, r2
 8010c86:	2600      	movs	r6, #0
 8010c88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010c8c:	f1b9 0901 	subs.w	r9, r9, #1
 8010c90:	d505      	bpl.n	8010c9e <_fwalk_sglue+0x22>
 8010c92:	6824      	ldr	r4, [r4, #0]
 8010c94:	2c00      	cmp	r4, #0
 8010c96:	d1f7      	bne.n	8010c88 <_fwalk_sglue+0xc>
 8010c98:	4630      	mov	r0, r6
 8010c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c9e:	89ab      	ldrh	r3, [r5, #12]
 8010ca0:	2b01      	cmp	r3, #1
 8010ca2:	d907      	bls.n	8010cb4 <_fwalk_sglue+0x38>
 8010ca4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010ca8:	3301      	adds	r3, #1
 8010caa:	d003      	beq.n	8010cb4 <_fwalk_sglue+0x38>
 8010cac:	4629      	mov	r1, r5
 8010cae:	4638      	mov	r0, r7
 8010cb0:	47c0      	blx	r8
 8010cb2:	4306      	orrs	r6, r0
 8010cb4:	3568      	adds	r5, #104	@ 0x68
 8010cb6:	e7e9      	b.n	8010c8c <_fwalk_sglue+0x10>

08010cb8 <siprintf>:
 8010cb8:	b40e      	push	{r1, r2, r3}
 8010cba:	b500      	push	{lr}
 8010cbc:	b09c      	sub	sp, #112	@ 0x70
 8010cbe:	ab1d      	add	r3, sp, #116	@ 0x74
 8010cc0:	9002      	str	r0, [sp, #8]
 8010cc2:	9006      	str	r0, [sp, #24]
 8010cc4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010cc8:	4809      	ldr	r0, [pc, #36]	@ (8010cf0 <siprintf+0x38>)
 8010cca:	9107      	str	r1, [sp, #28]
 8010ccc:	9104      	str	r1, [sp, #16]
 8010cce:	4909      	ldr	r1, [pc, #36]	@ (8010cf4 <siprintf+0x3c>)
 8010cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cd4:	9105      	str	r1, [sp, #20]
 8010cd6:	6800      	ldr	r0, [r0, #0]
 8010cd8:	9301      	str	r3, [sp, #4]
 8010cda:	a902      	add	r1, sp, #8
 8010cdc:	f002 f94e 	bl	8012f7c <_svfiprintf_r>
 8010ce0:	9b02      	ldr	r3, [sp, #8]
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	701a      	strb	r2, [r3, #0]
 8010ce6:	b01c      	add	sp, #112	@ 0x70
 8010ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010cec:	b003      	add	sp, #12
 8010cee:	4770      	bx	lr
 8010cf0:	20000248 	.word	0x20000248
 8010cf4:	ffff0208 	.word	0xffff0208

08010cf8 <__sread>:
 8010cf8:	b510      	push	{r4, lr}
 8010cfa:	460c      	mov	r4, r1
 8010cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d00:	f000 f89e 	bl	8010e40 <_read_r>
 8010d04:	2800      	cmp	r0, #0
 8010d06:	bfab      	itete	ge
 8010d08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8010d0c:	181b      	addge	r3, r3, r0
 8010d0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010d12:	bfac      	ite	ge
 8010d14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010d16:	81a3      	strhlt	r3, [r4, #12]
 8010d18:	bd10      	pop	{r4, pc}

08010d1a <__swrite>:
 8010d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d1e:	461f      	mov	r7, r3
 8010d20:	898b      	ldrh	r3, [r1, #12]
 8010d22:	05db      	lsls	r3, r3, #23
 8010d24:	4605      	mov	r5, r0
 8010d26:	460c      	mov	r4, r1
 8010d28:	4616      	mov	r6, r2
 8010d2a:	d505      	bpl.n	8010d38 <__swrite+0x1e>
 8010d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d30:	2302      	movs	r3, #2
 8010d32:	2200      	movs	r2, #0
 8010d34:	f000 f872 	bl	8010e1c <_lseek_r>
 8010d38:	89a3      	ldrh	r3, [r4, #12]
 8010d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010d42:	81a3      	strh	r3, [r4, #12]
 8010d44:	4632      	mov	r2, r6
 8010d46:	463b      	mov	r3, r7
 8010d48:	4628      	mov	r0, r5
 8010d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d4e:	f000 b889 	b.w	8010e64 <_write_r>

08010d52 <__sseek>:
 8010d52:	b510      	push	{r4, lr}
 8010d54:	460c      	mov	r4, r1
 8010d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d5a:	f000 f85f 	bl	8010e1c <_lseek_r>
 8010d5e:	1c43      	adds	r3, r0, #1
 8010d60:	89a3      	ldrh	r3, [r4, #12]
 8010d62:	bf15      	itete	ne
 8010d64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010d66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010d6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010d6e:	81a3      	strheq	r3, [r4, #12]
 8010d70:	bf18      	it	ne
 8010d72:	81a3      	strhne	r3, [r4, #12]
 8010d74:	bd10      	pop	{r4, pc}

08010d76 <__sclose>:
 8010d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d7a:	f000 b83f 	b.w	8010dfc <_close_r>
	...

08010d80 <_vsiprintf_r>:
 8010d80:	b500      	push	{lr}
 8010d82:	b09b      	sub	sp, #108	@ 0x6c
 8010d84:	9100      	str	r1, [sp, #0]
 8010d86:	9104      	str	r1, [sp, #16]
 8010d88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010d8c:	9105      	str	r1, [sp, #20]
 8010d8e:	9102      	str	r1, [sp, #8]
 8010d90:	4905      	ldr	r1, [pc, #20]	@ (8010da8 <_vsiprintf_r+0x28>)
 8010d92:	9103      	str	r1, [sp, #12]
 8010d94:	4669      	mov	r1, sp
 8010d96:	f002 f8f1 	bl	8012f7c <_svfiprintf_r>
 8010d9a:	9b00      	ldr	r3, [sp, #0]
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	701a      	strb	r2, [r3, #0]
 8010da0:	b01b      	add	sp, #108	@ 0x6c
 8010da2:	f85d fb04 	ldr.w	pc, [sp], #4
 8010da6:	bf00      	nop
 8010da8:	ffff0208 	.word	0xffff0208

08010dac <vsiprintf>:
 8010dac:	4613      	mov	r3, r2
 8010dae:	460a      	mov	r2, r1
 8010db0:	4601      	mov	r1, r0
 8010db2:	4802      	ldr	r0, [pc, #8]	@ (8010dbc <vsiprintf+0x10>)
 8010db4:	6800      	ldr	r0, [r0, #0]
 8010db6:	f7ff bfe3 	b.w	8010d80 <_vsiprintf_r>
 8010dba:	bf00      	nop
 8010dbc:	20000248 	.word	0x20000248

08010dc0 <memset>:
 8010dc0:	4402      	add	r2, r0
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	4293      	cmp	r3, r2
 8010dc6:	d100      	bne.n	8010dca <memset+0xa>
 8010dc8:	4770      	bx	lr
 8010dca:	f803 1b01 	strb.w	r1, [r3], #1
 8010dce:	e7f9      	b.n	8010dc4 <memset+0x4>

08010dd0 <strncmp>:
 8010dd0:	b510      	push	{r4, lr}
 8010dd2:	b16a      	cbz	r2, 8010df0 <strncmp+0x20>
 8010dd4:	3901      	subs	r1, #1
 8010dd6:	1884      	adds	r4, r0, r2
 8010dd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ddc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d103      	bne.n	8010dec <strncmp+0x1c>
 8010de4:	42a0      	cmp	r0, r4
 8010de6:	d001      	beq.n	8010dec <strncmp+0x1c>
 8010de8:	2a00      	cmp	r2, #0
 8010dea:	d1f5      	bne.n	8010dd8 <strncmp+0x8>
 8010dec:	1ad0      	subs	r0, r2, r3
 8010dee:	bd10      	pop	{r4, pc}
 8010df0:	4610      	mov	r0, r2
 8010df2:	e7fc      	b.n	8010dee <strncmp+0x1e>

08010df4 <_localeconv_r>:
 8010df4:	4800      	ldr	r0, [pc, #0]	@ (8010df8 <_localeconv_r+0x4>)
 8010df6:	4770      	bx	lr
 8010df8:	200001cc 	.word	0x200001cc

08010dfc <_close_r>:
 8010dfc:	b538      	push	{r3, r4, r5, lr}
 8010dfe:	4d06      	ldr	r5, [pc, #24]	@ (8010e18 <_close_r+0x1c>)
 8010e00:	2300      	movs	r3, #0
 8010e02:	4604      	mov	r4, r0
 8010e04:	4608      	mov	r0, r1
 8010e06:	602b      	str	r3, [r5, #0]
 8010e08:	f7f1 f846 	bl	8001e98 <_close>
 8010e0c:	1c43      	adds	r3, r0, #1
 8010e0e:	d102      	bne.n	8010e16 <_close_r+0x1a>
 8010e10:	682b      	ldr	r3, [r5, #0]
 8010e12:	b103      	cbz	r3, 8010e16 <_close_r+0x1a>
 8010e14:	6023      	str	r3, [r4, #0]
 8010e16:	bd38      	pop	{r3, r4, r5, pc}
 8010e18:	20000e3c 	.word	0x20000e3c

08010e1c <_lseek_r>:
 8010e1c:	b538      	push	{r3, r4, r5, lr}
 8010e1e:	4d07      	ldr	r5, [pc, #28]	@ (8010e3c <_lseek_r+0x20>)
 8010e20:	4604      	mov	r4, r0
 8010e22:	4608      	mov	r0, r1
 8010e24:	4611      	mov	r1, r2
 8010e26:	2200      	movs	r2, #0
 8010e28:	602a      	str	r2, [r5, #0]
 8010e2a:	461a      	mov	r2, r3
 8010e2c:	f7f1 f85b 	bl	8001ee6 <_lseek>
 8010e30:	1c43      	adds	r3, r0, #1
 8010e32:	d102      	bne.n	8010e3a <_lseek_r+0x1e>
 8010e34:	682b      	ldr	r3, [r5, #0]
 8010e36:	b103      	cbz	r3, 8010e3a <_lseek_r+0x1e>
 8010e38:	6023      	str	r3, [r4, #0]
 8010e3a:	bd38      	pop	{r3, r4, r5, pc}
 8010e3c:	20000e3c 	.word	0x20000e3c

08010e40 <_read_r>:
 8010e40:	b538      	push	{r3, r4, r5, lr}
 8010e42:	4d07      	ldr	r5, [pc, #28]	@ (8010e60 <_read_r+0x20>)
 8010e44:	4604      	mov	r4, r0
 8010e46:	4608      	mov	r0, r1
 8010e48:	4611      	mov	r1, r2
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	602a      	str	r2, [r5, #0]
 8010e4e:	461a      	mov	r2, r3
 8010e50:	f7f0 ffe9 	bl	8001e26 <_read>
 8010e54:	1c43      	adds	r3, r0, #1
 8010e56:	d102      	bne.n	8010e5e <_read_r+0x1e>
 8010e58:	682b      	ldr	r3, [r5, #0]
 8010e5a:	b103      	cbz	r3, 8010e5e <_read_r+0x1e>
 8010e5c:	6023      	str	r3, [r4, #0]
 8010e5e:	bd38      	pop	{r3, r4, r5, pc}
 8010e60:	20000e3c 	.word	0x20000e3c

08010e64 <_write_r>:
 8010e64:	b538      	push	{r3, r4, r5, lr}
 8010e66:	4d07      	ldr	r5, [pc, #28]	@ (8010e84 <_write_r+0x20>)
 8010e68:	4604      	mov	r4, r0
 8010e6a:	4608      	mov	r0, r1
 8010e6c:	4611      	mov	r1, r2
 8010e6e:	2200      	movs	r2, #0
 8010e70:	602a      	str	r2, [r5, #0]
 8010e72:	461a      	mov	r2, r3
 8010e74:	f7f0 fff4 	bl	8001e60 <_write>
 8010e78:	1c43      	adds	r3, r0, #1
 8010e7a:	d102      	bne.n	8010e82 <_write_r+0x1e>
 8010e7c:	682b      	ldr	r3, [r5, #0]
 8010e7e:	b103      	cbz	r3, 8010e82 <_write_r+0x1e>
 8010e80:	6023      	str	r3, [r4, #0]
 8010e82:	bd38      	pop	{r3, r4, r5, pc}
 8010e84:	20000e3c 	.word	0x20000e3c

08010e88 <__errno>:
 8010e88:	4b01      	ldr	r3, [pc, #4]	@ (8010e90 <__errno+0x8>)
 8010e8a:	6818      	ldr	r0, [r3, #0]
 8010e8c:	4770      	bx	lr
 8010e8e:	bf00      	nop
 8010e90:	20000248 	.word	0x20000248

08010e94 <__libc_init_array>:
 8010e94:	b570      	push	{r4, r5, r6, lr}
 8010e96:	4d0d      	ldr	r5, [pc, #52]	@ (8010ecc <__libc_init_array+0x38>)
 8010e98:	4c0d      	ldr	r4, [pc, #52]	@ (8010ed0 <__libc_init_array+0x3c>)
 8010e9a:	1b64      	subs	r4, r4, r5
 8010e9c:	10a4      	asrs	r4, r4, #2
 8010e9e:	2600      	movs	r6, #0
 8010ea0:	42a6      	cmp	r6, r4
 8010ea2:	d109      	bne.n	8010eb8 <__libc_init_array+0x24>
 8010ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8010ed4 <__libc_init_array+0x40>)
 8010ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8010ed8 <__libc_init_array+0x44>)
 8010ea8:	f003 fc36 	bl	8014718 <_init>
 8010eac:	1b64      	subs	r4, r4, r5
 8010eae:	10a4      	asrs	r4, r4, #2
 8010eb0:	2600      	movs	r6, #0
 8010eb2:	42a6      	cmp	r6, r4
 8010eb4:	d105      	bne.n	8010ec2 <__libc_init_array+0x2e>
 8010eb6:	bd70      	pop	{r4, r5, r6, pc}
 8010eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ebc:	4798      	blx	r3
 8010ebe:	3601      	adds	r6, #1
 8010ec0:	e7ee      	b.n	8010ea0 <__libc_init_array+0xc>
 8010ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ec6:	4798      	blx	r3
 8010ec8:	3601      	adds	r6, #1
 8010eca:	e7f2      	b.n	8010eb2 <__libc_init_array+0x1e>
 8010ecc:	08014da8 	.word	0x08014da8
 8010ed0:	08014da8 	.word	0x08014da8
 8010ed4:	08014da8 	.word	0x08014da8
 8010ed8:	08014dac 	.word	0x08014dac

08010edc <__retarget_lock_init_recursive>:
 8010edc:	4770      	bx	lr

08010ede <__retarget_lock_acquire_recursive>:
 8010ede:	4770      	bx	lr

08010ee0 <__retarget_lock_release_recursive>:
 8010ee0:	4770      	bx	lr

08010ee2 <memcpy>:
 8010ee2:	440a      	add	r2, r1
 8010ee4:	4291      	cmp	r1, r2
 8010ee6:	f100 33ff 	add.w	r3, r0, #4294967295
 8010eea:	d100      	bne.n	8010eee <memcpy+0xc>
 8010eec:	4770      	bx	lr
 8010eee:	b510      	push	{r4, lr}
 8010ef0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ef4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ef8:	4291      	cmp	r1, r2
 8010efa:	d1f9      	bne.n	8010ef0 <memcpy+0xe>
 8010efc:	bd10      	pop	{r4, pc}
	...

08010f00 <nan>:
 8010f00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010f08 <nan+0x8>
 8010f04:	4770      	bx	lr
 8010f06:	bf00      	nop
 8010f08:	00000000 	.word	0x00000000
 8010f0c:	7ff80000 	.word	0x7ff80000

08010f10 <nanf>:
 8010f10:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010f18 <nanf+0x8>
 8010f14:	4770      	bx	lr
 8010f16:	bf00      	nop
 8010f18:	7fc00000 	.word	0x7fc00000

08010f1c <quorem>:
 8010f1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f20:	6903      	ldr	r3, [r0, #16]
 8010f22:	690c      	ldr	r4, [r1, #16]
 8010f24:	42a3      	cmp	r3, r4
 8010f26:	4607      	mov	r7, r0
 8010f28:	db7e      	blt.n	8011028 <quorem+0x10c>
 8010f2a:	3c01      	subs	r4, #1
 8010f2c:	f101 0814 	add.w	r8, r1, #20
 8010f30:	00a3      	lsls	r3, r4, #2
 8010f32:	f100 0514 	add.w	r5, r0, #20
 8010f36:	9300      	str	r3, [sp, #0]
 8010f38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010f3c:	9301      	str	r3, [sp, #4]
 8010f3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010f42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010f46:	3301      	adds	r3, #1
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010f4e:	fbb2 f6f3 	udiv	r6, r2, r3
 8010f52:	d32e      	bcc.n	8010fb2 <quorem+0x96>
 8010f54:	f04f 0a00 	mov.w	sl, #0
 8010f58:	46c4      	mov	ip, r8
 8010f5a:	46ae      	mov	lr, r5
 8010f5c:	46d3      	mov	fp, sl
 8010f5e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010f62:	b298      	uxth	r0, r3
 8010f64:	fb06 a000 	mla	r0, r6, r0, sl
 8010f68:	0c02      	lsrs	r2, r0, #16
 8010f6a:	0c1b      	lsrs	r3, r3, #16
 8010f6c:	fb06 2303 	mla	r3, r6, r3, r2
 8010f70:	f8de 2000 	ldr.w	r2, [lr]
 8010f74:	b280      	uxth	r0, r0
 8010f76:	b292      	uxth	r2, r2
 8010f78:	1a12      	subs	r2, r2, r0
 8010f7a:	445a      	add	r2, fp
 8010f7c:	f8de 0000 	ldr.w	r0, [lr]
 8010f80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010f84:	b29b      	uxth	r3, r3
 8010f86:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010f8a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010f8e:	b292      	uxth	r2, r2
 8010f90:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010f94:	45e1      	cmp	r9, ip
 8010f96:	f84e 2b04 	str.w	r2, [lr], #4
 8010f9a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010f9e:	d2de      	bcs.n	8010f5e <quorem+0x42>
 8010fa0:	9b00      	ldr	r3, [sp, #0]
 8010fa2:	58eb      	ldr	r3, [r5, r3]
 8010fa4:	b92b      	cbnz	r3, 8010fb2 <quorem+0x96>
 8010fa6:	9b01      	ldr	r3, [sp, #4]
 8010fa8:	3b04      	subs	r3, #4
 8010faa:	429d      	cmp	r5, r3
 8010fac:	461a      	mov	r2, r3
 8010fae:	d32f      	bcc.n	8011010 <quorem+0xf4>
 8010fb0:	613c      	str	r4, [r7, #16]
 8010fb2:	4638      	mov	r0, r7
 8010fb4:	f001 fd10 	bl	80129d8 <__mcmp>
 8010fb8:	2800      	cmp	r0, #0
 8010fba:	db25      	blt.n	8011008 <quorem+0xec>
 8010fbc:	4629      	mov	r1, r5
 8010fbe:	2000      	movs	r0, #0
 8010fc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8010fc4:	f8d1 c000 	ldr.w	ip, [r1]
 8010fc8:	fa1f fe82 	uxth.w	lr, r2
 8010fcc:	fa1f f38c 	uxth.w	r3, ip
 8010fd0:	eba3 030e 	sub.w	r3, r3, lr
 8010fd4:	4403      	add	r3, r0
 8010fd6:	0c12      	lsrs	r2, r2, #16
 8010fd8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010fdc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010fe0:	b29b      	uxth	r3, r3
 8010fe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010fe6:	45c1      	cmp	r9, r8
 8010fe8:	f841 3b04 	str.w	r3, [r1], #4
 8010fec:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010ff0:	d2e6      	bcs.n	8010fc0 <quorem+0xa4>
 8010ff2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010ff6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010ffa:	b922      	cbnz	r2, 8011006 <quorem+0xea>
 8010ffc:	3b04      	subs	r3, #4
 8010ffe:	429d      	cmp	r5, r3
 8011000:	461a      	mov	r2, r3
 8011002:	d30b      	bcc.n	801101c <quorem+0x100>
 8011004:	613c      	str	r4, [r7, #16]
 8011006:	3601      	adds	r6, #1
 8011008:	4630      	mov	r0, r6
 801100a:	b003      	add	sp, #12
 801100c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011010:	6812      	ldr	r2, [r2, #0]
 8011012:	3b04      	subs	r3, #4
 8011014:	2a00      	cmp	r2, #0
 8011016:	d1cb      	bne.n	8010fb0 <quorem+0x94>
 8011018:	3c01      	subs	r4, #1
 801101a:	e7c6      	b.n	8010faa <quorem+0x8e>
 801101c:	6812      	ldr	r2, [r2, #0]
 801101e:	3b04      	subs	r3, #4
 8011020:	2a00      	cmp	r2, #0
 8011022:	d1ef      	bne.n	8011004 <quorem+0xe8>
 8011024:	3c01      	subs	r4, #1
 8011026:	e7ea      	b.n	8010ffe <quorem+0xe2>
 8011028:	2000      	movs	r0, #0
 801102a:	e7ee      	b.n	801100a <quorem+0xee>
 801102c:	0000      	movs	r0, r0
	...

08011030 <_dtoa_r>:
 8011030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011034:	69c7      	ldr	r7, [r0, #28]
 8011036:	b099      	sub	sp, #100	@ 0x64
 8011038:	ed8d 0b02 	vstr	d0, [sp, #8]
 801103c:	ec55 4b10 	vmov	r4, r5, d0
 8011040:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011042:	9109      	str	r1, [sp, #36]	@ 0x24
 8011044:	4683      	mov	fp, r0
 8011046:	920e      	str	r2, [sp, #56]	@ 0x38
 8011048:	9313      	str	r3, [sp, #76]	@ 0x4c
 801104a:	b97f      	cbnz	r7, 801106c <_dtoa_r+0x3c>
 801104c:	2010      	movs	r0, #16
 801104e:	f001 f937 	bl	80122c0 <malloc>
 8011052:	4602      	mov	r2, r0
 8011054:	f8cb 001c 	str.w	r0, [fp, #28]
 8011058:	b920      	cbnz	r0, 8011064 <_dtoa_r+0x34>
 801105a:	4ba7      	ldr	r3, [pc, #668]	@ (80112f8 <_dtoa_r+0x2c8>)
 801105c:	21ef      	movs	r1, #239	@ 0xef
 801105e:	48a7      	ldr	r0, [pc, #668]	@ (80112fc <_dtoa_r+0x2cc>)
 8011060:	f002 f95e 	bl	8013320 <__assert_func>
 8011064:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011068:	6007      	str	r7, [r0, #0]
 801106a:	60c7      	str	r7, [r0, #12]
 801106c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011070:	6819      	ldr	r1, [r3, #0]
 8011072:	b159      	cbz	r1, 801108c <_dtoa_r+0x5c>
 8011074:	685a      	ldr	r2, [r3, #4]
 8011076:	604a      	str	r2, [r1, #4]
 8011078:	2301      	movs	r3, #1
 801107a:	4093      	lsls	r3, r2
 801107c:	608b      	str	r3, [r1, #8]
 801107e:	4658      	mov	r0, fp
 8011080:	f001 fa26 	bl	80124d0 <_Bfree>
 8011084:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011088:	2200      	movs	r2, #0
 801108a:	601a      	str	r2, [r3, #0]
 801108c:	1e2b      	subs	r3, r5, #0
 801108e:	bfb9      	ittee	lt
 8011090:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011094:	9303      	strlt	r3, [sp, #12]
 8011096:	2300      	movge	r3, #0
 8011098:	6033      	strge	r3, [r6, #0]
 801109a:	9f03      	ldr	r7, [sp, #12]
 801109c:	4b98      	ldr	r3, [pc, #608]	@ (8011300 <_dtoa_r+0x2d0>)
 801109e:	bfbc      	itt	lt
 80110a0:	2201      	movlt	r2, #1
 80110a2:	6032      	strlt	r2, [r6, #0]
 80110a4:	43bb      	bics	r3, r7
 80110a6:	d112      	bne.n	80110ce <_dtoa_r+0x9e>
 80110a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80110aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80110ae:	6013      	str	r3, [r2, #0]
 80110b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80110b4:	4323      	orrs	r3, r4
 80110b6:	f000 854d 	beq.w	8011b54 <_dtoa_r+0xb24>
 80110ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80110bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011314 <_dtoa_r+0x2e4>
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	f000 854f 	beq.w	8011b64 <_dtoa_r+0xb34>
 80110c6:	f10a 0303 	add.w	r3, sl, #3
 80110ca:	f000 bd49 	b.w	8011b60 <_dtoa_r+0xb30>
 80110ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80110d2:	2200      	movs	r2, #0
 80110d4:	ec51 0b17 	vmov	r0, r1, d7
 80110d8:	2300      	movs	r3, #0
 80110da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80110de:	f7ef fd1b 	bl	8000b18 <__aeabi_dcmpeq>
 80110e2:	4680      	mov	r8, r0
 80110e4:	b158      	cbz	r0, 80110fe <_dtoa_r+0xce>
 80110e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80110e8:	2301      	movs	r3, #1
 80110ea:	6013      	str	r3, [r2, #0]
 80110ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80110ee:	b113      	cbz	r3, 80110f6 <_dtoa_r+0xc6>
 80110f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80110f2:	4b84      	ldr	r3, [pc, #528]	@ (8011304 <_dtoa_r+0x2d4>)
 80110f4:	6013      	str	r3, [r2, #0]
 80110f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011318 <_dtoa_r+0x2e8>
 80110fa:	f000 bd33 	b.w	8011b64 <_dtoa_r+0xb34>
 80110fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011102:	aa16      	add	r2, sp, #88	@ 0x58
 8011104:	a917      	add	r1, sp, #92	@ 0x5c
 8011106:	4658      	mov	r0, fp
 8011108:	f001 fd86 	bl	8012c18 <__d2b>
 801110c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011110:	4681      	mov	r9, r0
 8011112:	2e00      	cmp	r6, #0
 8011114:	d077      	beq.n	8011206 <_dtoa_r+0x1d6>
 8011116:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011118:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801111c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011124:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011128:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801112c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011130:	4619      	mov	r1, r3
 8011132:	2200      	movs	r2, #0
 8011134:	4b74      	ldr	r3, [pc, #464]	@ (8011308 <_dtoa_r+0x2d8>)
 8011136:	f7ef f8cf 	bl	80002d8 <__aeabi_dsub>
 801113a:	a369      	add	r3, pc, #420	@ (adr r3, 80112e0 <_dtoa_r+0x2b0>)
 801113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011140:	f7ef fa82 	bl	8000648 <__aeabi_dmul>
 8011144:	a368      	add	r3, pc, #416	@ (adr r3, 80112e8 <_dtoa_r+0x2b8>)
 8011146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801114a:	f7ef f8c7 	bl	80002dc <__adddf3>
 801114e:	4604      	mov	r4, r0
 8011150:	4630      	mov	r0, r6
 8011152:	460d      	mov	r5, r1
 8011154:	f7ef fa0e 	bl	8000574 <__aeabi_i2d>
 8011158:	a365      	add	r3, pc, #404	@ (adr r3, 80112f0 <_dtoa_r+0x2c0>)
 801115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801115e:	f7ef fa73 	bl	8000648 <__aeabi_dmul>
 8011162:	4602      	mov	r2, r0
 8011164:	460b      	mov	r3, r1
 8011166:	4620      	mov	r0, r4
 8011168:	4629      	mov	r1, r5
 801116a:	f7ef f8b7 	bl	80002dc <__adddf3>
 801116e:	4604      	mov	r4, r0
 8011170:	460d      	mov	r5, r1
 8011172:	f7ef fd19 	bl	8000ba8 <__aeabi_d2iz>
 8011176:	2200      	movs	r2, #0
 8011178:	4607      	mov	r7, r0
 801117a:	2300      	movs	r3, #0
 801117c:	4620      	mov	r0, r4
 801117e:	4629      	mov	r1, r5
 8011180:	f7ef fcd4 	bl	8000b2c <__aeabi_dcmplt>
 8011184:	b140      	cbz	r0, 8011198 <_dtoa_r+0x168>
 8011186:	4638      	mov	r0, r7
 8011188:	f7ef f9f4 	bl	8000574 <__aeabi_i2d>
 801118c:	4622      	mov	r2, r4
 801118e:	462b      	mov	r3, r5
 8011190:	f7ef fcc2 	bl	8000b18 <__aeabi_dcmpeq>
 8011194:	b900      	cbnz	r0, 8011198 <_dtoa_r+0x168>
 8011196:	3f01      	subs	r7, #1
 8011198:	2f16      	cmp	r7, #22
 801119a:	d851      	bhi.n	8011240 <_dtoa_r+0x210>
 801119c:	4b5b      	ldr	r3, [pc, #364]	@ (801130c <_dtoa_r+0x2dc>)
 801119e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80111a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80111aa:	f7ef fcbf 	bl	8000b2c <__aeabi_dcmplt>
 80111ae:	2800      	cmp	r0, #0
 80111b0:	d048      	beq.n	8011244 <_dtoa_r+0x214>
 80111b2:	3f01      	subs	r7, #1
 80111b4:	2300      	movs	r3, #0
 80111b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80111b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80111ba:	1b9b      	subs	r3, r3, r6
 80111bc:	1e5a      	subs	r2, r3, #1
 80111be:	bf44      	itt	mi
 80111c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80111c4:	2300      	movmi	r3, #0
 80111c6:	9208      	str	r2, [sp, #32]
 80111c8:	bf54      	ite	pl
 80111ca:	f04f 0800 	movpl.w	r8, #0
 80111ce:	9308      	strmi	r3, [sp, #32]
 80111d0:	2f00      	cmp	r7, #0
 80111d2:	db39      	blt.n	8011248 <_dtoa_r+0x218>
 80111d4:	9b08      	ldr	r3, [sp, #32]
 80111d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80111d8:	443b      	add	r3, r7
 80111da:	9308      	str	r3, [sp, #32]
 80111dc:	2300      	movs	r3, #0
 80111de:	930a      	str	r3, [sp, #40]	@ 0x28
 80111e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111e2:	2b09      	cmp	r3, #9
 80111e4:	d864      	bhi.n	80112b0 <_dtoa_r+0x280>
 80111e6:	2b05      	cmp	r3, #5
 80111e8:	bfc4      	itt	gt
 80111ea:	3b04      	subgt	r3, #4
 80111ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80111ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111f0:	f1a3 0302 	sub.w	r3, r3, #2
 80111f4:	bfcc      	ite	gt
 80111f6:	2400      	movgt	r4, #0
 80111f8:	2401      	movle	r4, #1
 80111fa:	2b03      	cmp	r3, #3
 80111fc:	d863      	bhi.n	80112c6 <_dtoa_r+0x296>
 80111fe:	e8df f003 	tbb	[pc, r3]
 8011202:	372a      	.short	0x372a
 8011204:	5535      	.short	0x5535
 8011206:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801120a:	441e      	add	r6, r3
 801120c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011210:	2b20      	cmp	r3, #32
 8011212:	bfc1      	itttt	gt
 8011214:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011218:	409f      	lslgt	r7, r3
 801121a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801121e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011222:	bfd6      	itet	le
 8011224:	f1c3 0320 	rsble	r3, r3, #32
 8011228:	ea47 0003 	orrgt.w	r0, r7, r3
 801122c:	fa04 f003 	lslle.w	r0, r4, r3
 8011230:	f7ef f990 	bl	8000554 <__aeabi_ui2d>
 8011234:	2201      	movs	r2, #1
 8011236:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801123a:	3e01      	subs	r6, #1
 801123c:	9214      	str	r2, [sp, #80]	@ 0x50
 801123e:	e777      	b.n	8011130 <_dtoa_r+0x100>
 8011240:	2301      	movs	r3, #1
 8011242:	e7b8      	b.n	80111b6 <_dtoa_r+0x186>
 8011244:	9012      	str	r0, [sp, #72]	@ 0x48
 8011246:	e7b7      	b.n	80111b8 <_dtoa_r+0x188>
 8011248:	427b      	negs	r3, r7
 801124a:	930a      	str	r3, [sp, #40]	@ 0x28
 801124c:	2300      	movs	r3, #0
 801124e:	eba8 0807 	sub.w	r8, r8, r7
 8011252:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011254:	e7c4      	b.n	80111e0 <_dtoa_r+0x1b0>
 8011256:	2300      	movs	r3, #0
 8011258:	930b      	str	r3, [sp, #44]	@ 0x2c
 801125a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801125c:	2b00      	cmp	r3, #0
 801125e:	dc35      	bgt.n	80112cc <_dtoa_r+0x29c>
 8011260:	2301      	movs	r3, #1
 8011262:	9300      	str	r3, [sp, #0]
 8011264:	9307      	str	r3, [sp, #28]
 8011266:	461a      	mov	r2, r3
 8011268:	920e      	str	r2, [sp, #56]	@ 0x38
 801126a:	e00b      	b.n	8011284 <_dtoa_r+0x254>
 801126c:	2301      	movs	r3, #1
 801126e:	e7f3      	b.n	8011258 <_dtoa_r+0x228>
 8011270:	2300      	movs	r3, #0
 8011272:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011274:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011276:	18fb      	adds	r3, r7, r3
 8011278:	9300      	str	r3, [sp, #0]
 801127a:	3301      	adds	r3, #1
 801127c:	2b01      	cmp	r3, #1
 801127e:	9307      	str	r3, [sp, #28]
 8011280:	bfb8      	it	lt
 8011282:	2301      	movlt	r3, #1
 8011284:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011288:	2100      	movs	r1, #0
 801128a:	2204      	movs	r2, #4
 801128c:	f102 0514 	add.w	r5, r2, #20
 8011290:	429d      	cmp	r5, r3
 8011292:	d91f      	bls.n	80112d4 <_dtoa_r+0x2a4>
 8011294:	6041      	str	r1, [r0, #4]
 8011296:	4658      	mov	r0, fp
 8011298:	f001 f8da 	bl	8012450 <_Balloc>
 801129c:	4682      	mov	sl, r0
 801129e:	2800      	cmp	r0, #0
 80112a0:	d13c      	bne.n	801131c <_dtoa_r+0x2ec>
 80112a2:	4b1b      	ldr	r3, [pc, #108]	@ (8011310 <_dtoa_r+0x2e0>)
 80112a4:	4602      	mov	r2, r0
 80112a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80112aa:	e6d8      	b.n	801105e <_dtoa_r+0x2e>
 80112ac:	2301      	movs	r3, #1
 80112ae:	e7e0      	b.n	8011272 <_dtoa_r+0x242>
 80112b0:	2401      	movs	r4, #1
 80112b2:	2300      	movs	r3, #0
 80112b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80112b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80112b8:	f04f 33ff 	mov.w	r3, #4294967295
 80112bc:	9300      	str	r3, [sp, #0]
 80112be:	9307      	str	r3, [sp, #28]
 80112c0:	2200      	movs	r2, #0
 80112c2:	2312      	movs	r3, #18
 80112c4:	e7d0      	b.n	8011268 <_dtoa_r+0x238>
 80112c6:	2301      	movs	r3, #1
 80112c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80112ca:	e7f5      	b.n	80112b8 <_dtoa_r+0x288>
 80112cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80112ce:	9300      	str	r3, [sp, #0]
 80112d0:	9307      	str	r3, [sp, #28]
 80112d2:	e7d7      	b.n	8011284 <_dtoa_r+0x254>
 80112d4:	3101      	adds	r1, #1
 80112d6:	0052      	lsls	r2, r2, #1
 80112d8:	e7d8      	b.n	801128c <_dtoa_r+0x25c>
 80112da:	bf00      	nop
 80112dc:	f3af 8000 	nop.w
 80112e0:	636f4361 	.word	0x636f4361
 80112e4:	3fd287a7 	.word	0x3fd287a7
 80112e8:	8b60c8b3 	.word	0x8b60c8b3
 80112ec:	3fc68a28 	.word	0x3fc68a28
 80112f0:	509f79fb 	.word	0x509f79fb
 80112f4:	3fd34413 	.word	0x3fd34413
 80112f8:	08014996 	.word	0x08014996
 80112fc:	080149ad 	.word	0x080149ad
 8011300:	7ff00000 	.word	0x7ff00000
 8011304:	08014959 	.word	0x08014959
 8011308:	3ff80000 	.word	0x3ff80000
 801130c:	08014b08 	.word	0x08014b08
 8011310:	08014a05 	.word	0x08014a05
 8011314:	08014992 	.word	0x08014992
 8011318:	08014958 	.word	0x08014958
 801131c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011320:	6018      	str	r0, [r3, #0]
 8011322:	9b07      	ldr	r3, [sp, #28]
 8011324:	2b0e      	cmp	r3, #14
 8011326:	f200 80a4 	bhi.w	8011472 <_dtoa_r+0x442>
 801132a:	2c00      	cmp	r4, #0
 801132c:	f000 80a1 	beq.w	8011472 <_dtoa_r+0x442>
 8011330:	2f00      	cmp	r7, #0
 8011332:	dd33      	ble.n	801139c <_dtoa_r+0x36c>
 8011334:	4bad      	ldr	r3, [pc, #692]	@ (80115ec <_dtoa_r+0x5bc>)
 8011336:	f007 020f 	and.w	r2, r7, #15
 801133a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801133e:	ed93 7b00 	vldr	d7, [r3]
 8011342:	05f8      	lsls	r0, r7, #23
 8011344:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011348:	ea4f 1427 	mov.w	r4, r7, asr #4
 801134c:	d516      	bpl.n	801137c <_dtoa_r+0x34c>
 801134e:	4ba8      	ldr	r3, [pc, #672]	@ (80115f0 <_dtoa_r+0x5c0>)
 8011350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011354:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011358:	f7ef faa0 	bl	800089c <__aeabi_ddiv>
 801135c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011360:	f004 040f 	and.w	r4, r4, #15
 8011364:	2603      	movs	r6, #3
 8011366:	4da2      	ldr	r5, [pc, #648]	@ (80115f0 <_dtoa_r+0x5c0>)
 8011368:	b954      	cbnz	r4, 8011380 <_dtoa_r+0x350>
 801136a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801136e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011372:	f7ef fa93 	bl	800089c <__aeabi_ddiv>
 8011376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801137a:	e028      	b.n	80113ce <_dtoa_r+0x39e>
 801137c:	2602      	movs	r6, #2
 801137e:	e7f2      	b.n	8011366 <_dtoa_r+0x336>
 8011380:	07e1      	lsls	r1, r4, #31
 8011382:	d508      	bpl.n	8011396 <_dtoa_r+0x366>
 8011384:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011388:	e9d5 2300 	ldrd	r2, r3, [r5]
 801138c:	f7ef f95c 	bl	8000648 <__aeabi_dmul>
 8011390:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011394:	3601      	adds	r6, #1
 8011396:	1064      	asrs	r4, r4, #1
 8011398:	3508      	adds	r5, #8
 801139a:	e7e5      	b.n	8011368 <_dtoa_r+0x338>
 801139c:	f000 80d2 	beq.w	8011544 <_dtoa_r+0x514>
 80113a0:	427c      	negs	r4, r7
 80113a2:	4b92      	ldr	r3, [pc, #584]	@ (80115ec <_dtoa_r+0x5bc>)
 80113a4:	4d92      	ldr	r5, [pc, #584]	@ (80115f0 <_dtoa_r+0x5c0>)
 80113a6:	f004 020f 	and.w	r2, r4, #15
 80113aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80113ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80113b6:	f7ef f947 	bl	8000648 <__aeabi_dmul>
 80113ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80113be:	1124      	asrs	r4, r4, #4
 80113c0:	2300      	movs	r3, #0
 80113c2:	2602      	movs	r6, #2
 80113c4:	2c00      	cmp	r4, #0
 80113c6:	f040 80b2 	bne.w	801152e <_dtoa_r+0x4fe>
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d1d3      	bne.n	8011376 <_dtoa_r+0x346>
 80113ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80113d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	f000 80b7 	beq.w	8011548 <_dtoa_r+0x518>
 80113da:	4b86      	ldr	r3, [pc, #536]	@ (80115f4 <_dtoa_r+0x5c4>)
 80113dc:	2200      	movs	r2, #0
 80113de:	4620      	mov	r0, r4
 80113e0:	4629      	mov	r1, r5
 80113e2:	f7ef fba3 	bl	8000b2c <__aeabi_dcmplt>
 80113e6:	2800      	cmp	r0, #0
 80113e8:	f000 80ae 	beq.w	8011548 <_dtoa_r+0x518>
 80113ec:	9b07      	ldr	r3, [sp, #28]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	f000 80aa 	beq.w	8011548 <_dtoa_r+0x518>
 80113f4:	9b00      	ldr	r3, [sp, #0]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	dd37      	ble.n	801146a <_dtoa_r+0x43a>
 80113fa:	1e7b      	subs	r3, r7, #1
 80113fc:	9304      	str	r3, [sp, #16]
 80113fe:	4620      	mov	r0, r4
 8011400:	4b7d      	ldr	r3, [pc, #500]	@ (80115f8 <_dtoa_r+0x5c8>)
 8011402:	2200      	movs	r2, #0
 8011404:	4629      	mov	r1, r5
 8011406:	f7ef f91f 	bl	8000648 <__aeabi_dmul>
 801140a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801140e:	9c00      	ldr	r4, [sp, #0]
 8011410:	3601      	adds	r6, #1
 8011412:	4630      	mov	r0, r6
 8011414:	f7ef f8ae 	bl	8000574 <__aeabi_i2d>
 8011418:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801141c:	f7ef f914 	bl	8000648 <__aeabi_dmul>
 8011420:	4b76      	ldr	r3, [pc, #472]	@ (80115fc <_dtoa_r+0x5cc>)
 8011422:	2200      	movs	r2, #0
 8011424:	f7ee ff5a 	bl	80002dc <__adddf3>
 8011428:	4605      	mov	r5, r0
 801142a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801142e:	2c00      	cmp	r4, #0
 8011430:	f040 808d 	bne.w	801154e <_dtoa_r+0x51e>
 8011434:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011438:	4b71      	ldr	r3, [pc, #452]	@ (8011600 <_dtoa_r+0x5d0>)
 801143a:	2200      	movs	r2, #0
 801143c:	f7ee ff4c 	bl	80002d8 <__aeabi_dsub>
 8011440:	4602      	mov	r2, r0
 8011442:	460b      	mov	r3, r1
 8011444:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011448:	462a      	mov	r2, r5
 801144a:	4633      	mov	r3, r6
 801144c:	f7ef fb8c 	bl	8000b68 <__aeabi_dcmpgt>
 8011450:	2800      	cmp	r0, #0
 8011452:	f040 828b 	bne.w	801196c <_dtoa_r+0x93c>
 8011456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801145a:	462a      	mov	r2, r5
 801145c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011460:	f7ef fb64 	bl	8000b2c <__aeabi_dcmplt>
 8011464:	2800      	cmp	r0, #0
 8011466:	f040 8128 	bne.w	80116ba <_dtoa_r+0x68a>
 801146a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801146e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011472:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011474:	2b00      	cmp	r3, #0
 8011476:	f2c0 815a 	blt.w	801172e <_dtoa_r+0x6fe>
 801147a:	2f0e      	cmp	r7, #14
 801147c:	f300 8157 	bgt.w	801172e <_dtoa_r+0x6fe>
 8011480:	4b5a      	ldr	r3, [pc, #360]	@ (80115ec <_dtoa_r+0x5bc>)
 8011482:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011486:	ed93 7b00 	vldr	d7, [r3]
 801148a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801148c:	2b00      	cmp	r3, #0
 801148e:	ed8d 7b00 	vstr	d7, [sp]
 8011492:	da03      	bge.n	801149c <_dtoa_r+0x46c>
 8011494:	9b07      	ldr	r3, [sp, #28]
 8011496:	2b00      	cmp	r3, #0
 8011498:	f340 8101 	ble.w	801169e <_dtoa_r+0x66e>
 801149c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80114a0:	4656      	mov	r6, sl
 80114a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114a6:	4620      	mov	r0, r4
 80114a8:	4629      	mov	r1, r5
 80114aa:	f7ef f9f7 	bl	800089c <__aeabi_ddiv>
 80114ae:	f7ef fb7b 	bl	8000ba8 <__aeabi_d2iz>
 80114b2:	4680      	mov	r8, r0
 80114b4:	f7ef f85e 	bl	8000574 <__aeabi_i2d>
 80114b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114bc:	f7ef f8c4 	bl	8000648 <__aeabi_dmul>
 80114c0:	4602      	mov	r2, r0
 80114c2:	460b      	mov	r3, r1
 80114c4:	4620      	mov	r0, r4
 80114c6:	4629      	mov	r1, r5
 80114c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80114cc:	f7ee ff04 	bl	80002d8 <__aeabi_dsub>
 80114d0:	f806 4b01 	strb.w	r4, [r6], #1
 80114d4:	9d07      	ldr	r5, [sp, #28]
 80114d6:	eba6 040a 	sub.w	r4, r6, sl
 80114da:	42a5      	cmp	r5, r4
 80114dc:	4602      	mov	r2, r0
 80114de:	460b      	mov	r3, r1
 80114e0:	f040 8117 	bne.w	8011712 <_dtoa_r+0x6e2>
 80114e4:	f7ee fefa 	bl	80002dc <__adddf3>
 80114e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114ec:	4604      	mov	r4, r0
 80114ee:	460d      	mov	r5, r1
 80114f0:	f7ef fb3a 	bl	8000b68 <__aeabi_dcmpgt>
 80114f4:	2800      	cmp	r0, #0
 80114f6:	f040 80f9 	bne.w	80116ec <_dtoa_r+0x6bc>
 80114fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114fe:	4620      	mov	r0, r4
 8011500:	4629      	mov	r1, r5
 8011502:	f7ef fb09 	bl	8000b18 <__aeabi_dcmpeq>
 8011506:	b118      	cbz	r0, 8011510 <_dtoa_r+0x4e0>
 8011508:	f018 0f01 	tst.w	r8, #1
 801150c:	f040 80ee 	bne.w	80116ec <_dtoa_r+0x6bc>
 8011510:	4649      	mov	r1, r9
 8011512:	4658      	mov	r0, fp
 8011514:	f000 ffdc 	bl	80124d0 <_Bfree>
 8011518:	2300      	movs	r3, #0
 801151a:	7033      	strb	r3, [r6, #0]
 801151c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801151e:	3701      	adds	r7, #1
 8011520:	601f      	str	r7, [r3, #0]
 8011522:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011524:	2b00      	cmp	r3, #0
 8011526:	f000 831d 	beq.w	8011b64 <_dtoa_r+0xb34>
 801152a:	601e      	str	r6, [r3, #0]
 801152c:	e31a      	b.n	8011b64 <_dtoa_r+0xb34>
 801152e:	07e2      	lsls	r2, r4, #31
 8011530:	d505      	bpl.n	801153e <_dtoa_r+0x50e>
 8011532:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011536:	f7ef f887 	bl	8000648 <__aeabi_dmul>
 801153a:	3601      	adds	r6, #1
 801153c:	2301      	movs	r3, #1
 801153e:	1064      	asrs	r4, r4, #1
 8011540:	3508      	adds	r5, #8
 8011542:	e73f      	b.n	80113c4 <_dtoa_r+0x394>
 8011544:	2602      	movs	r6, #2
 8011546:	e742      	b.n	80113ce <_dtoa_r+0x39e>
 8011548:	9c07      	ldr	r4, [sp, #28]
 801154a:	9704      	str	r7, [sp, #16]
 801154c:	e761      	b.n	8011412 <_dtoa_r+0x3e2>
 801154e:	4b27      	ldr	r3, [pc, #156]	@ (80115ec <_dtoa_r+0x5bc>)
 8011550:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011552:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011556:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801155a:	4454      	add	r4, sl
 801155c:	2900      	cmp	r1, #0
 801155e:	d053      	beq.n	8011608 <_dtoa_r+0x5d8>
 8011560:	4928      	ldr	r1, [pc, #160]	@ (8011604 <_dtoa_r+0x5d4>)
 8011562:	2000      	movs	r0, #0
 8011564:	f7ef f99a 	bl	800089c <__aeabi_ddiv>
 8011568:	4633      	mov	r3, r6
 801156a:	462a      	mov	r2, r5
 801156c:	f7ee feb4 	bl	80002d8 <__aeabi_dsub>
 8011570:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011574:	4656      	mov	r6, sl
 8011576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801157a:	f7ef fb15 	bl	8000ba8 <__aeabi_d2iz>
 801157e:	4605      	mov	r5, r0
 8011580:	f7ee fff8 	bl	8000574 <__aeabi_i2d>
 8011584:	4602      	mov	r2, r0
 8011586:	460b      	mov	r3, r1
 8011588:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801158c:	f7ee fea4 	bl	80002d8 <__aeabi_dsub>
 8011590:	3530      	adds	r5, #48	@ 0x30
 8011592:	4602      	mov	r2, r0
 8011594:	460b      	mov	r3, r1
 8011596:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801159a:	f806 5b01 	strb.w	r5, [r6], #1
 801159e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80115a2:	f7ef fac3 	bl	8000b2c <__aeabi_dcmplt>
 80115a6:	2800      	cmp	r0, #0
 80115a8:	d171      	bne.n	801168e <_dtoa_r+0x65e>
 80115aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80115ae:	4911      	ldr	r1, [pc, #68]	@ (80115f4 <_dtoa_r+0x5c4>)
 80115b0:	2000      	movs	r0, #0
 80115b2:	f7ee fe91 	bl	80002d8 <__aeabi_dsub>
 80115b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80115ba:	f7ef fab7 	bl	8000b2c <__aeabi_dcmplt>
 80115be:	2800      	cmp	r0, #0
 80115c0:	f040 8095 	bne.w	80116ee <_dtoa_r+0x6be>
 80115c4:	42a6      	cmp	r6, r4
 80115c6:	f43f af50 	beq.w	801146a <_dtoa_r+0x43a>
 80115ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80115ce:	4b0a      	ldr	r3, [pc, #40]	@ (80115f8 <_dtoa_r+0x5c8>)
 80115d0:	2200      	movs	r2, #0
 80115d2:	f7ef f839 	bl	8000648 <__aeabi_dmul>
 80115d6:	4b08      	ldr	r3, [pc, #32]	@ (80115f8 <_dtoa_r+0x5c8>)
 80115d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80115dc:	2200      	movs	r2, #0
 80115de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80115e2:	f7ef f831 	bl	8000648 <__aeabi_dmul>
 80115e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80115ea:	e7c4      	b.n	8011576 <_dtoa_r+0x546>
 80115ec:	08014b08 	.word	0x08014b08
 80115f0:	08014ae0 	.word	0x08014ae0
 80115f4:	3ff00000 	.word	0x3ff00000
 80115f8:	40240000 	.word	0x40240000
 80115fc:	401c0000 	.word	0x401c0000
 8011600:	40140000 	.word	0x40140000
 8011604:	3fe00000 	.word	0x3fe00000
 8011608:	4631      	mov	r1, r6
 801160a:	4628      	mov	r0, r5
 801160c:	f7ef f81c 	bl	8000648 <__aeabi_dmul>
 8011610:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011614:	9415      	str	r4, [sp, #84]	@ 0x54
 8011616:	4656      	mov	r6, sl
 8011618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801161c:	f7ef fac4 	bl	8000ba8 <__aeabi_d2iz>
 8011620:	4605      	mov	r5, r0
 8011622:	f7ee ffa7 	bl	8000574 <__aeabi_i2d>
 8011626:	4602      	mov	r2, r0
 8011628:	460b      	mov	r3, r1
 801162a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801162e:	f7ee fe53 	bl	80002d8 <__aeabi_dsub>
 8011632:	3530      	adds	r5, #48	@ 0x30
 8011634:	f806 5b01 	strb.w	r5, [r6], #1
 8011638:	4602      	mov	r2, r0
 801163a:	460b      	mov	r3, r1
 801163c:	42a6      	cmp	r6, r4
 801163e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011642:	f04f 0200 	mov.w	r2, #0
 8011646:	d124      	bne.n	8011692 <_dtoa_r+0x662>
 8011648:	4bac      	ldr	r3, [pc, #688]	@ (80118fc <_dtoa_r+0x8cc>)
 801164a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801164e:	f7ee fe45 	bl	80002dc <__adddf3>
 8011652:	4602      	mov	r2, r0
 8011654:	460b      	mov	r3, r1
 8011656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801165a:	f7ef fa85 	bl	8000b68 <__aeabi_dcmpgt>
 801165e:	2800      	cmp	r0, #0
 8011660:	d145      	bne.n	80116ee <_dtoa_r+0x6be>
 8011662:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011666:	49a5      	ldr	r1, [pc, #660]	@ (80118fc <_dtoa_r+0x8cc>)
 8011668:	2000      	movs	r0, #0
 801166a:	f7ee fe35 	bl	80002d8 <__aeabi_dsub>
 801166e:	4602      	mov	r2, r0
 8011670:	460b      	mov	r3, r1
 8011672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011676:	f7ef fa59 	bl	8000b2c <__aeabi_dcmplt>
 801167a:	2800      	cmp	r0, #0
 801167c:	f43f aef5 	beq.w	801146a <_dtoa_r+0x43a>
 8011680:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011682:	1e73      	subs	r3, r6, #1
 8011684:	9315      	str	r3, [sp, #84]	@ 0x54
 8011686:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801168a:	2b30      	cmp	r3, #48	@ 0x30
 801168c:	d0f8      	beq.n	8011680 <_dtoa_r+0x650>
 801168e:	9f04      	ldr	r7, [sp, #16]
 8011690:	e73e      	b.n	8011510 <_dtoa_r+0x4e0>
 8011692:	4b9b      	ldr	r3, [pc, #620]	@ (8011900 <_dtoa_r+0x8d0>)
 8011694:	f7ee ffd8 	bl	8000648 <__aeabi_dmul>
 8011698:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801169c:	e7bc      	b.n	8011618 <_dtoa_r+0x5e8>
 801169e:	d10c      	bne.n	80116ba <_dtoa_r+0x68a>
 80116a0:	4b98      	ldr	r3, [pc, #608]	@ (8011904 <_dtoa_r+0x8d4>)
 80116a2:	2200      	movs	r2, #0
 80116a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116a8:	f7ee ffce 	bl	8000648 <__aeabi_dmul>
 80116ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80116b0:	f7ef fa50 	bl	8000b54 <__aeabi_dcmpge>
 80116b4:	2800      	cmp	r0, #0
 80116b6:	f000 8157 	beq.w	8011968 <_dtoa_r+0x938>
 80116ba:	2400      	movs	r4, #0
 80116bc:	4625      	mov	r5, r4
 80116be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80116c0:	43db      	mvns	r3, r3
 80116c2:	9304      	str	r3, [sp, #16]
 80116c4:	4656      	mov	r6, sl
 80116c6:	2700      	movs	r7, #0
 80116c8:	4621      	mov	r1, r4
 80116ca:	4658      	mov	r0, fp
 80116cc:	f000 ff00 	bl	80124d0 <_Bfree>
 80116d0:	2d00      	cmp	r5, #0
 80116d2:	d0dc      	beq.n	801168e <_dtoa_r+0x65e>
 80116d4:	b12f      	cbz	r7, 80116e2 <_dtoa_r+0x6b2>
 80116d6:	42af      	cmp	r7, r5
 80116d8:	d003      	beq.n	80116e2 <_dtoa_r+0x6b2>
 80116da:	4639      	mov	r1, r7
 80116dc:	4658      	mov	r0, fp
 80116de:	f000 fef7 	bl	80124d0 <_Bfree>
 80116e2:	4629      	mov	r1, r5
 80116e4:	4658      	mov	r0, fp
 80116e6:	f000 fef3 	bl	80124d0 <_Bfree>
 80116ea:	e7d0      	b.n	801168e <_dtoa_r+0x65e>
 80116ec:	9704      	str	r7, [sp, #16]
 80116ee:	4633      	mov	r3, r6
 80116f0:	461e      	mov	r6, r3
 80116f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80116f6:	2a39      	cmp	r2, #57	@ 0x39
 80116f8:	d107      	bne.n	801170a <_dtoa_r+0x6da>
 80116fa:	459a      	cmp	sl, r3
 80116fc:	d1f8      	bne.n	80116f0 <_dtoa_r+0x6c0>
 80116fe:	9a04      	ldr	r2, [sp, #16]
 8011700:	3201      	adds	r2, #1
 8011702:	9204      	str	r2, [sp, #16]
 8011704:	2230      	movs	r2, #48	@ 0x30
 8011706:	f88a 2000 	strb.w	r2, [sl]
 801170a:	781a      	ldrb	r2, [r3, #0]
 801170c:	3201      	adds	r2, #1
 801170e:	701a      	strb	r2, [r3, #0]
 8011710:	e7bd      	b.n	801168e <_dtoa_r+0x65e>
 8011712:	4b7b      	ldr	r3, [pc, #492]	@ (8011900 <_dtoa_r+0x8d0>)
 8011714:	2200      	movs	r2, #0
 8011716:	f7ee ff97 	bl	8000648 <__aeabi_dmul>
 801171a:	2200      	movs	r2, #0
 801171c:	2300      	movs	r3, #0
 801171e:	4604      	mov	r4, r0
 8011720:	460d      	mov	r5, r1
 8011722:	f7ef f9f9 	bl	8000b18 <__aeabi_dcmpeq>
 8011726:	2800      	cmp	r0, #0
 8011728:	f43f aebb 	beq.w	80114a2 <_dtoa_r+0x472>
 801172c:	e6f0      	b.n	8011510 <_dtoa_r+0x4e0>
 801172e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011730:	2a00      	cmp	r2, #0
 8011732:	f000 80db 	beq.w	80118ec <_dtoa_r+0x8bc>
 8011736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011738:	2a01      	cmp	r2, #1
 801173a:	f300 80bf 	bgt.w	80118bc <_dtoa_r+0x88c>
 801173e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011740:	2a00      	cmp	r2, #0
 8011742:	f000 80b7 	beq.w	80118b4 <_dtoa_r+0x884>
 8011746:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801174a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801174c:	4646      	mov	r6, r8
 801174e:	9a08      	ldr	r2, [sp, #32]
 8011750:	2101      	movs	r1, #1
 8011752:	441a      	add	r2, r3
 8011754:	4658      	mov	r0, fp
 8011756:	4498      	add	r8, r3
 8011758:	9208      	str	r2, [sp, #32]
 801175a:	f000 ffb7 	bl	80126cc <__i2b>
 801175e:	4605      	mov	r5, r0
 8011760:	b15e      	cbz	r6, 801177a <_dtoa_r+0x74a>
 8011762:	9b08      	ldr	r3, [sp, #32]
 8011764:	2b00      	cmp	r3, #0
 8011766:	dd08      	ble.n	801177a <_dtoa_r+0x74a>
 8011768:	42b3      	cmp	r3, r6
 801176a:	9a08      	ldr	r2, [sp, #32]
 801176c:	bfa8      	it	ge
 801176e:	4633      	movge	r3, r6
 8011770:	eba8 0803 	sub.w	r8, r8, r3
 8011774:	1af6      	subs	r6, r6, r3
 8011776:	1ad3      	subs	r3, r2, r3
 8011778:	9308      	str	r3, [sp, #32]
 801177a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801177c:	b1f3      	cbz	r3, 80117bc <_dtoa_r+0x78c>
 801177e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011780:	2b00      	cmp	r3, #0
 8011782:	f000 80b7 	beq.w	80118f4 <_dtoa_r+0x8c4>
 8011786:	b18c      	cbz	r4, 80117ac <_dtoa_r+0x77c>
 8011788:	4629      	mov	r1, r5
 801178a:	4622      	mov	r2, r4
 801178c:	4658      	mov	r0, fp
 801178e:	f001 f85d 	bl	801284c <__pow5mult>
 8011792:	464a      	mov	r2, r9
 8011794:	4601      	mov	r1, r0
 8011796:	4605      	mov	r5, r0
 8011798:	4658      	mov	r0, fp
 801179a:	f000 ffad 	bl	80126f8 <__multiply>
 801179e:	4649      	mov	r1, r9
 80117a0:	9004      	str	r0, [sp, #16]
 80117a2:	4658      	mov	r0, fp
 80117a4:	f000 fe94 	bl	80124d0 <_Bfree>
 80117a8:	9b04      	ldr	r3, [sp, #16]
 80117aa:	4699      	mov	r9, r3
 80117ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117ae:	1b1a      	subs	r2, r3, r4
 80117b0:	d004      	beq.n	80117bc <_dtoa_r+0x78c>
 80117b2:	4649      	mov	r1, r9
 80117b4:	4658      	mov	r0, fp
 80117b6:	f001 f849 	bl	801284c <__pow5mult>
 80117ba:	4681      	mov	r9, r0
 80117bc:	2101      	movs	r1, #1
 80117be:	4658      	mov	r0, fp
 80117c0:	f000 ff84 	bl	80126cc <__i2b>
 80117c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80117c6:	4604      	mov	r4, r0
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	f000 81cf 	beq.w	8011b6c <_dtoa_r+0xb3c>
 80117ce:	461a      	mov	r2, r3
 80117d0:	4601      	mov	r1, r0
 80117d2:	4658      	mov	r0, fp
 80117d4:	f001 f83a 	bl	801284c <__pow5mult>
 80117d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117da:	2b01      	cmp	r3, #1
 80117dc:	4604      	mov	r4, r0
 80117de:	f300 8095 	bgt.w	801190c <_dtoa_r+0x8dc>
 80117e2:	9b02      	ldr	r3, [sp, #8]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	f040 8087 	bne.w	80118f8 <_dtoa_r+0x8c8>
 80117ea:	9b03      	ldr	r3, [sp, #12]
 80117ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	f040 8089 	bne.w	8011908 <_dtoa_r+0x8d8>
 80117f6:	9b03      	ldr	r3, [sp, #12]
 80117f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80117fc:	0d1b      	lsrs	r3, r3, #20
 80117fe:	051b      	lsls	r3, r3, #20
 8011800:	b12b      	cbz	r3, 801180e <_dtoa_r+0x7de>
 8011802:	9b08      	ldr	r3, [sp, #32]
 8011804:	3301      	adds	r3, #1
 8011806:	9308      	str	r3, [sp, #32]
 8011808:	f108 0801 	add.w	r8, r8, #1
 801180c:	2301      	movs	r3, #1
 801180e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011810:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011812:	2b00      	cmp	r3, #0
 8011814:	f000 81b0 	beq.w	8011b78 <_dtoa_r+0xb48>
 8011818:	6923      	ldr	r3, [r4, #16]
 801181a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801181e:	6918      	ldr	r0, [r3, #16]
 8011820:	f000 ff08 	bl	8012634 <__hi0bits>
 8011824:	f1c0 0020 	rsb	r0, r0, #32
 8011828:	9b08      	ldr	r3, [sp, #32]
 801182a:	4418      	add	r0, r3
 801182c:	f010 001f 	ands.w	r0, r0, #31
 8011830:	d077      	beq.n	8011922 <_dtoa_r+0x8f2>
 8011832:	f1c0 0320 	rsb	r3, r0, #32
 8011836:	2b04      	cmp	r3, #4
 8011838:	dd6b      	ble.n	8011912 <_dtoa_r+0x8e2>
 801183a:	9b08      	ldr	r3, [sp, #32]
 801183c:	f1c0 001c 	rsb	r0, r0, #28
 8011840:	4403      	add	r3, r0
 8011842:	4480      	add	r8, r0
 8011844:	4406      	add	r6, r0
 8011846:	9308      	str	r3, [sp, #32]
 8011848:	f1b8 0f00 	cmp.w	r8, #0
 801184c:	dd05      	ble.n	801185a <_dtoa_r+0x82a>
 801184e:	4649      	mov	r1, r9
 8011850:	4642      	mov	r2, r8
 8011852:	4658      	mov	r0, fp
 8011854:	f001 f854 	bl	8012900 <__lshift>
 8011858:	4681      	mov	r9, r0
 801185a:	9b08      	ldr	r3, [sp, #32]
 801185c:	2b00      	cmp	r3, #0
 801185e:	dd05      	ble.n	801186c <_dtoa_r+0x83c>
 8011860:	4621      	mov	r1, r4
 8011862:	461a      	mov	r2, r3
 8011864:	4658      	mov	r0, fp
 8011866:	f001 f84b 	bl	8012900 <__lshift>
 801186a:	4604      	mov	r4, r0
 801186c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801186e:	2b00      	cmp	r3, #0
 8011870:	d059      	beq.n	8011926 <_dtoa_r+0x8f6>
 8011872:	4621      	mov	r1, r4
 8011874:	4648      	mov	r0, r9
 8011876:	f001 f8af 	bl	80129d8 <__mcmp>
 801187a:	2800      	cmp	r0, #0
 801187c:	da53      	bge.n	8011926 <_dtoa_r+0x8f6>
 801187e:	1e7b      	subs	r3, r7, #1
 8011880:	9304      	str	r3, [sp, #16]
 8011882:	4649      	mov	r1, r9
 8011884:	2300      	movs	r3, #0
 8011886:	220a      	movs	r2, #10
 8011888:	4658      	mov	r0, fp
 801188a:	f000 fe43 	bl	8012514 <__multadd>
 801188e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011890:	4681      	mov	r9, r0
 8011892:	2b00      	cmp	r3, #0
 8011894:	f000 8172 	beq.w	8011b7c <_dtoa_r+0xb4c>
 8011898:	2300      	movs	r3, #0
 801189a:	4629      	mov	r1, r5
 801189c:	220a      	movs	r2, #10
 801189e:	4658      	mov	r0, fp
 80118a0:	f000 fe38 	bl	8012514 <__multadd>
 80118a4:	9b00      	ldr	r3, [sp, #0]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	4605      	mov	r5, r0
 80118aa:	dc67      	bgt.n	801197c <_dtoa_r+0x94c>
 80118ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118ae:	2b02      	cmp	r3, #2
 80118b0:	dc41      	bgt.n	8011936 <_dtoa_r+0x906>
 80118b2:	e063      	b.n	801197c <_dtoa_r+0x94c>
 80118b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80118b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80118ba:	e746      	b.n	801174a <_dtoa_r+0x71a>
 80118bc:	9b07      	ldr	r3, [sp, #28]
 80118be:	1e5c      	subs	r4, r3, #1
 80118c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80118c2:	42a3      	cmp	r3, r4
 80118c4:	bfbf      	itttt	lt
 80118c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80118c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80118ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80118cc:	1ae3      	sublt	r3, r4, r3
 80118ce:	bfb4      	ite	lt
 80118d0:	18d2      	addlt	r2, r2, r3
 80118d2:	1b1c      	subge	r4, r3, r4
 80118d4:	9b07      	ldr	r3, [sp, #28]
 80118d6:	bfbc      	itt	lt
 80118d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80118da:	2400      	movlt	r4, #0
 80118dc:	2b00      	cmp	r3, #0
 80118de:	bfb5      	itete	lt
 80118e0:	eba8 0603 	sublt.w	r6, r8, r3
 80118e4:	9b07      	ldrge	r3, [sp, #28]
 80118e6:	2300      	movlt	r3, #0
 80118e8:	4646      	movge	r6, r8
 80118ea:	e730      	b.n	801174e <_dtoa_r+0x71e>
 80118ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80118ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80118f0:	4646      	mov	r6, r8
 80118f2:	e735      	b.n	8011760 <_dtoa_r+0x730>
 80118f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80118f6:	e75c      	b.n	80117b2 <_dtoa_r+0x782>
 80118f8:	2300      	movs	r3, #0
 80118fa:	e788      	b.n	801180e <_dtoa_r+0x7de>
 80118fc:	3fe00000 	.word	0x3fe00000
 8011900:	40240000 	.word	0x40240000
 8011904:	40140000 	.word	0x40140000
 8011908:	9b02      	ldr	r3, [sp, #8]
 801190a:	e780      	b.n	801180e <_dtoa_r+0x7de>
 801190c:	2300      	movs	r3, #0
 801190e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011910:	e782      	b.n	8011818 <_dtoa_r+0x7e8>
 8011912:	d099      	beq.n	8011848 <_dtoa_r+0x818>
 8011914:	9a08      	ldr	r2, [sp, #32]
 8011916:	331c      	adds	r3, #28
 8011918:	441a      	add	r2, r3
 801191a:	4498      	add	r8, r3
 801191c:	441e      	add	r6, r3
 801191e:	9208      	str	r2, [sp, #32]
 8011920:	e792      	b.n	8011848 <_dtoa_r+0x818>
 8011922:	4603      	mov	r3, r0
 8011924:	e7f6      	b.n	8011914 <_dtoa_r+0x8e4>
 8011926:	9b07      	ldr	r3, [sp, #28]
 8011928:	9704      	str	r7, [sp, #16]
 801192a:	2b00      	cmp	r3, #0
 801192c:	dc20      	bgt.n	8011970 <_dtoa_r+0x940>
 801192e:	9300      	str	r3, [sp, #0]
 8011930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011932:	2b02      	cmp	r3, #2
 8011934:	dd1e      	ble.n	8011974 <_dtoa_r+0x944>
 8011936:	9b00      	ldr	r3, [sp, #0]
 8011938:	2b00      	cmp	r3, #0
 801193a:	f47f aec0 	bne.w	80116be <_dtoa_r+0x68e>
 801193e:	4621      	mov	r1, r4
 8011940:	2205      	movs	r2, #5
 8011942:	4658      	mov	r0, fp
 8011944:	f000 fde6 	bl	8012514 <__multadd>
 8011948:	4601      	mov	r1, r0
 801194a:	4604      	mov	r4, r0
 801194c:	4648      	mov	r0, r9
 801194e:	f001 f843 	bl	80129d8 <__mcmp>
 8011952:	2800      	cmp	r0, #0
 8011954:	f77f aeb3 	ble.w	80116be <_dtoa_r+0x68e>
 8011958:	4656      	mov	r6, sl
 801195a:	2331      	movs	r3, #49	@ 0x31
 801195c:	f806 3b01 	strb.w	r3, [r6], #1
 8011960:	9b04      	ldr	r3, [sp, #16]
 8011962:	3301      	adds	r3, #1
 8011964:	9304      	str	r3, [sp, #16]
 8011966:	e6ae      	b.n	80116c6 <_dtoa_r+0x696>
 8011968:	9c07      	ldr	r4, [sp, #28]
 801196a:	9704      	str	r7, [sp, #16]
 801196c:	4625      	mov	r5, r4
 801196e:	e7f3      	b.n	8011958 <_dtoa_r+0x928>
 8011970:	9b07      	ldr	r3, [sp, #28]
 8011972:	9300      	str	r3, [sp, #0]
 8011974:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011976:	2b00      	cmp	r3, #0
 8011978:	f000 8104 	beq.w	8011b84 <_dtoa_r+0xb54>
 801197c:	2e00      	cmp	r6, #0
 801197e:	dd05      	ble.n	801198c <_dtoa_r+0x95c>
 8011980:	4629      	mov	r1, r5
 8011982:	4632      	mov	r2, r6
 8011984:	4658      	mov	r0, fp
 8011986:	f000 ffbb 	bl	8012900 <__lshift>
 801198a:	4605      	mov	r5, r0
 801198c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801198e:	2b00      	cmp	r3, #0
 8011990:	d05a      	beq.n	8011a48 <_dtoa_r+0xa18>
 8011992:	6869      	ldr	r1, [r5, #4]
 8011994:	4658      	mov	r0, fp
 8011996:	f000 fd5b 	bl	8012450 <_Balloc>
 801199a:	4606      	mov	r6, r0
 801199c:	b928      	cbnz	r0, 80119aa <_dtoa_r+0x97a>
 801199e:	4b84      	ldr	r3, [pc, #528]	@ (8011bb0 <_dtoa_r+0xb80>)
 80119a0:	4602      	mov	r2, r0
 80119a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80119a6:	f7ff bb5a 	b.w	801105e <_dtoa_r+0x2e>
 80119aa:	692a      	ldr	r2, [r5, #16]
 80119ac:	3202      	adds	r2, #2
 80119ae:	0092      	lsls	r2, r2, #2
 80119b0:	f105 010c 	add.w	r1, r5, #12
 80119b4:	300c      	adds	r0, #12
 80119b6:	f7ff fa94 	bl	8010ee2 <memcpy>
 80119ba:	2201      	movs	r2, #1
 80119bc:	4631      	mov	r1, r6
 80119be:	4658      	mov	r0, fp
 80119c0:	f000 ff9e 	bl	8012900 <__lshift>
 80119c4:	f10a 0301 	add.w	r3, sl, #1
 80119c8:	9307      	str	r3, [sp, #28]
 80119ca:	9b00      	ldr	r3, [sp, #0]
 80119cc:	4453      	add	r3, sl
 80119ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80119d0:	9b02      	ldr	r3, [sp, #8]
 80119d2:	f003 0301 	and.w	r3, r3, #1
 80119d6:	462f      	mov	r7, r5
 80119d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80119da:	4605      	mov	r5, r0
 80119dc:	9b07      	ldr	r3, [sp, #28]
 80119de:	4621      	mov	r1, r4
 80119e0:	3b01      	subs	r3, #1
 80119e2:	4648      	mov	r0, r9
 80119e4:	9300      	str	r3, [sp, #0]
 80119e6:	f7ff fa99 	bl	8010f1c <quorem>
 80119ea:	4639      	mov	r1, r7
 80119ec:	9002      	str	r0, [sp, #8]
 80119ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80119f2:	4648      	mov	r0, r9
 80119f4:	f000 fff0 	bl	80129d8 <__mcmp>
 80119f8:	462a      	mov	r2, r5
 80119fa:	9008      	str	r0, [sp, #32]
 80119fc:	4621      	mov	r1, r4
 80119fe:	4658      	mov	r0, fp
 8011a00:	f001 f806 	bl	8012a10 <__mdiff>
 8011a04:	68c2      	ldr	r2, [r0, #12]
 8011a06:	4606      	mov	r6, r0
 8011a08:	bb02      	cbnz	r2, 8011a4c <_dtoa_r+0xa1c>
 8011a0a:	4601      	mov	r1, r0
 8011a0c:	4648      	mov	r0, r9
 8011a0e:	f000 ffe3 	bl	80129d8 <__mcmp>
 8011a12:	4602      	mov	r2, r0
 8011a14:	4631      	mov	r1, r6
 8011a16:	4658      	mov	r0, fp
 8011a18:	920e      	str	r2, [sp, #56]	@ 0x38
 8011a1a:	f000 fd59 	bl	80124d0 <_Bfree>
 8011a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011a22:	9e07      	ldr	r6, [sp, #28]
 8011a24:	ea43 0102 	orr.w	r1, r3, r2
 8011a28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011a2a:	4319      	orrs	r1, r3
 8011a2c:	d110      	bne.n	8011a50 <_dtoa_r+0xa20>
 8011a2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011a32:	d029      	beq.n	8011a88 <_dtoa_r+0xa58>
 8011a34:	9b08      	ldr	r3, [sp, #32]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	dd02      	ble.n	8011a40 <_dtoa_r+0xa10>
 8011a3a:	9b02      	ldr	r3, [sp, #8]
 8011a3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011a40:	9b00      	ldr	r3, [sp, #0]
 8011a42:	f883 8000 	strb.w	r8, [r3]
 8011a46:	e63f      	b.n	80116c8 <_dtoa_r+0x698>
 8011a48:	4628      	mov	r0, r5
 8011a4a:	e7bb      	b.n	80119c4 <_dtoa_r+0x994>
 8011a4c:	2201      	movs	r2, #1
 8011a4e:	e7e1      	b.n	8011a14 <_dtoa_r+0x9e4>
 8011a50:	9b08      	ldr	r3, [sp, #32]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	db04      	blt.n	8011a60 <_dtoa_r+0xa30>
 8011a56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011a58:	430b      	orrs	r3, r1
 8011a5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011a5c:	430b      	orrs	r3, r1
 8011a5e:	d120      	bne.n	8011aa2 <_dtoa_r+0xa72>
 8011a60:	2a00      	cmp	r2, #0
 8011a62:	dded      	ble.n	8011a40 <_dtoa_r+0xa10>
 8011a64:	4649      	mov	r1, r9
 8011a66:	2201      	movs	r2, #1
 8011a68:	4658      	mov	r0, fp
 8011a6a:	f000 ff49 	bl	8012900 <__lshift>
 8011a6e:	4621      	mov	r1, r4
 8011a70:	4681      	mov	r9, r0
 8011a72:	f000 ffb1 	bl	80129d8 <__mcmp>
 8011a76:	2800      	cmp	r0, #0
 8011a78:	dc03      	bgt.n	8011a82 <_dtoa_r+0xa52>
 8011a7a:	d1e1      	bne.n	8011a40 <_dtoa_r+0xa10>
 8011a7c:	f018 0f01 	tst.w	r8, #1
 8011a80:	d0de      	beq.n	8011a40 <_dtoa_r+0xa10>
 8011a82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011a86:	d1d8      	bne.n	8011a3a <_dtoa_r+0xa0a>
 8011a88:	9a00      	ldr	r2, [sp, #0]
 8011a8a:	2339      	movs	r3, #57	@ 0x39
 8011a8c:	7013      	strb	r3, [r2, #0]
 8011a8e:	4633      	mov	r3, r6
 8011a90:	461e      	mov	r6, r3
 8011a92:	3b01      	subs	r3, #1
 8011a94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011a98:	2a39      	cmp	r2, #57	@ 0x39
 8011a9a:	d052      	beq.n	8011b42 <_dtoa_r+0xb12>
 8011a9c:	3201      	adds	r2, #1
 8011a9e:	701a      	strb	r2, [r3, #0]
 8011aa0:	e612      	b.n	80116c8 <_dtoa_r+0x698>
 8011aa2:	2a00      	cmp	r2, #0
 8011aa4:	dd07      	ble.n	8011ab6 <_dtoa_r+0xa86>
 8011aa6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011aaa:	d0ed      	beq.n	8011a88 <_dtoa_r+0xa58>
 8011aac:	9a00      	ldr	r2, [sp, #0]
 8011aae:	f108 0301 	add.w	r3, r8, #1
 8011ab2:	7013      	strb	r3, [r2, #0]
 8011ab4:	e608      	b.n	80116c8 <_dtoa_r+0x698>
 8011ab6:	9b07      	ldr	r3, [sp, #28]
 8011ab8:	9a07      	ldr	r2, [sp, #28]
 8011aba:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011abe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011ac0:	4293      	cmp	r3, r2
 8011ac2:	d028      	beq.n	8011b16 <_dtoa_r+0xae6>
 8011ac4:	4649      	mov	r1, r9
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	220a      	movs	r2, #10
 8011aca:	4658      	mov	r0, fp
 8011acc:	f000 fd22 	bl	8012514 <__multadd>
 8011ad0:	42af      	cmp	r7, r5
 8011ad2:	4681      	mov	r9, r0
 8011ad4:	f04f 0300 	mov.w	r3, #0
 8011ad8:	f04f 020a 	mov.w	r2, #10
 8011adc:	4639      	mov	r1, r7
 8011ade:	4658      	mov	r0, fp
 8011ae0:	d107      	bne.n	8011af2 <_dtoa_r+0xac2>
 8011ae2:	f000 fd17 	bl	8012514 <__multadd>
 8011ae6:	4607      	mov	r7, r0
 8011ae8:	4605      	mov	r5, r0
 8011aea:	9b07      	ldr	r3, [sp, #28]
 8011aec:	3301      	adds	r3, #1
 8011aee:	9307      	str	r3, [sp, #28]
 8011af0:	e774      	b.n	80119dc <_dtoa_r+0x9ac>
 8011af2:	f000 fd0f 	bl	8012514 <__multadd>
 8011af6:	4629      	mov	r1, r5
 8011af8:	4607      	mov	r7, r0
 8011afa:	2300      	movs	r3, #0
 8011afc:	220a      	movs	r2, #10
 8011afe:	4658      	mov	r0, fp
 8011b00:	f000 fd08 	bl	8012514 <__multadd>
 8011b04:	4605      	mov	r5, r0
 8011b06:	e7f0      	b.n	8011aea <_dtoa_r+0xaba>
 8011b08:	9b00      	ldr	r3, [sp, #0]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	bfcc      	ite	gt
 8011b0e:	461e      	movgt	r6, r3
 8011b10:	2601      	movle	r6, #1
 8011b12:	4456      	add	r6, sl
 8011b14:	2700      	movs	r7, #0
 8011b16:	4649      	mov	r1, r9
 8011b18:	2201      	movs	r2, #1
 8011b1a:	4658      	mov	r0, fp
 8011b1c:	f000 fef0 	bl	8012900 <__lshift>
 8011b20:	4621      	mov	r1, r4
 8011b22:	4681      	mov	r9, r0
 8011b24:	f000 ff58 	bl	80129d8 <__mcmp>
 8011b28:	2800      	cmp	r0, #0
 8011b2a:	dcb0      	bgt.n	8011a8e <_dtoa_r+0xa5e>
 8011b2c:	d102      	bne.n	8011b34 <_dtoa_r+0xb04>
 8011b2e:	f018 0f01 	tst.w	r8, #1
 8011b32:	d1ac      	bne.n	8011a8e <_dtoa_r+0xa5e>
 8011b34:	4633      	mov	r3, r6
 8011b36:	461e      	mov	r6, r3
 8011b38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011b3c:	2a30      	cmp	r2, #48	@ 0x30
 8011b3e:	d0fa      	beq.n	8011b36 <_dtoa_r+0xb06>
 8011b40:	e5c2      	b.n	80116c8 <_dtoa_r+0x698>
 8011b42:	459a      	cmp	sl, r3
 8011b44:	d1a4      	bne.n	8011a90 <_dtoa_r+0xa60>
 8011b46:	9b04      	ldr	r3, [sp, #16]
 8011b48:	3301      	adds	r3, #1
 8011b4a:	9304      	str	r3, [sp, #16]
 8011b4c:	2331      	movs	r3, #49	@ 0x31
 8011b4e:	f88a 3000 	strb.w	r3, [sl]
 8011b52:	e5b9      	b.n	80116c8 <_dtoa_r+0x698>
 8011b54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011b56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011bb4 <_dtoa_r+0xb84>
 8011b5a:	b11b      	cbz	r3, 8011b64 <_dtoa_r+0xb34>
 8011b5c:	f10a 0308 	add.w	r3, sl, #8
 8011b60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011b62:	6013      	str	r3, [r2, #0]
 8011b64:	4650      	mov	r0, sl
 8011b66:	b019      	add	sp, #100	@ 0x64
 8011b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b6e:	2b01      	cmp	r3, #1
 8011b70:	f77f ae37 	ble.w	80117e2 <_dtoa_r+0x7b2>
 8011b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b76:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b78:	2001      	movs	r0, #1
 8011b7a:	e655      	b.n	8011828 <_dtoa_r+0x7f8>
 8011b7c:	9b00      	ldr	r3, [sp, #0]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	f77f aed6 	ble.w	8011930 <_dtoa_r+0x900>
 8011b84:	4656      	mov	r6, sl
 8011b86:	4621      	mov	r1, r4
 8011b88:	4648      	mov	r0, r9
 8011b8a:	f7ff f9c7 	bl	8010f1c <quorem>
 8011b8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011b92:	f806 8b01 	strb.w	r8, [r6], #1
 8011b96:	9b00      	ldr	r3, [sp, #0]
 8011b98:	eba6 020a 	sub.w	r2, r6, sl
 8011b9c:	4293      	cmp	r3, r2
 8011b9e:	ddb3      	ble.n	8011b08 <_dtoa_r+0xad8>
 8011ba0:	4649      	mov	r1, r9
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	220a      	movs	r2, #10
 8011ba6:	4658      	mov	r0, fp
 8011ba8:	f000 fcb4 	bl	8012514 <__multadd>
 8011bac:	4681      	mov	r9, r0
 8011bae:	e7ea      	b.n	8011b86 <_dtoa_r+0xb56>
 8011bb0:	08014a05 	.word	0x08014a05
 8011bb4:	08014989 	.word	0x08014989

08011bb8 <_free_r>:
 8011bb8:	b538      	push	{r3, r4, r5, lr}
 8011bba:	4605      	mov	r5, r0
 8011bbc:	2900      	cmp	r1, #0
 8011bbe:	d041      	beq.n	8011c44 <_free_r+0x8c>
 8011bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011bc4:	1f0c      	subs	r4, r1, #4
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	bfb8      	it	lt
 8011bca:	18e4      	addlt	r4, r4, r3
 8011bcc:	f000 fc34 	bl	8012438 <__malloc_lock>
 8011bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8011c48 <_free_r+0x90>)
 8011bd2:	6813      	ldr	r3, [r2, #0]
 8011bd4:	b933      	cbnz	r3, 8011be4 <_free_r+0x2c>
 8011bd6:	6063      	str	r3, [r4, #4]
 8011bd8:	6014      	str	r4, [r2, #0]
 8011bda:	4628      	mov	r0, r5
 8011bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011be0:	f000 bc30 	b.w	8012444 <__malloc_unlock>
 8011be4:	42a3      	cmp	r3, r4
 8011be6:	d908      	bls.n	8011bfa <_free_r+0x42>
 8011be8:	6820      	ldr	r0, [r4, #0]
 8011bea:	1821      	adds	r1, r4, r0
 8011bec:	428b      	cmp	r3, r1
 8011bee:	bf01      	itttt	eq
 8011bf0:	6819      	ldreq	r1, [r3, #0]
 8011bf2:	685b      	ldreq	r3, [r3, #4]
 8011bf4:	1809      	addeq	r1, r1, r0
 8011bf6:	6021      	streq	r1, [r4, #0]
 8011bf8:	e7ed      	b.n	8011bd6 <_free_r+0x1e>
 8011bfa:	461a      	mov	r2, r3
 8011bfc:	685b      	ldr	r3, [r3, #4]
 8011bfe:	b10b      	cbz	r3, 8011c04 <_free_r+0x4c>
 8011c00:	42a3      	cmp	r3, r4
 8011c02:	d9fa      	bls.n	8011bfa <_free_r+0x42>
 8011c04:	6811      	ldr	r1, [r2, #0]
 8011c06:	1850      	adds	r0, r2, r1
 8011c08:	42a0      	cmp	r0, r4
 8011c0a:	d10b      	bne.n	8011c24 <_free_r+0x6c>
 8011c0c:	6820      	ldr	r0, [r4, #0]
 8011c0e:	4401      	add	r1, r0
 8011c10:	1850      	adds	r0, r2, r1
 8011c12:	4283      	cmp	r3, r0
 8011c14:	6011      	str	r1, [r2, #0]
 8011c16:	d1e0      	bne.n	8011bda <_free_r+0x22>
 8011c18:	6818      	ldr	r0, [r3, #0]
 8011c1a:	685b      	ldr	r3, [r3, #4]
 8011c1c:	6053      	str	r3, [r2, #4]
 8011c1e:	4408      	add	r0, r1
 8011c20:	6010      	str	r0, [r2, #0]
 8011c22:	e7da      	b.n	8011bda <_free_r+0x22>
 8011c24:	d902      	bls.n	8011c2c <_free_r+0x74>
 8011c26:	230c      	movs	r3, #12
 8011c28:	602b      	str	r3, [r5, #0]
 8011c2a:	e7d6      	b.n	8011bda <_free_r+0x22>
 8011c2c:	6820      	ldr	r0, [r4, #0]
 8011c2e:	1821      	adds	r1, r4, r0
 8011c30:	428b      	cmp	r3, r1
 8011c32:	bf04      	itt	eq
 8011c34:	6819      	ldreq	r1, [r3, #0]
 8011c36:	685b      	ldreq	r3, [r3, #4]
 8011c38:	6063      	str	r3, [r4, #4]
 8011c3a:	bf04      	itt	eq
 8011c3c:	1809      	addeq	r1, r1, r0
 8011c3e:	6021      	streq	r1, [r4, #0]
 8011c40:	6054      	str	r4, [r2, #4]
 8011c42:	e7ca      	b.n	8011bda <_free_r+0x22>
 8011c44:	bd38      	pop	{r3, r4, r5, pc}
 8011c46:	bf00      	nop
 8011c48:	20000e48 	.word	0x20000e48

08011c4c <rshift>:
 8011c4c:	6903      	ldr	r3, [r0, #16]
 8011c4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011c52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c56:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011c5a:	f100 0414 	add.w	r4, r0, #20
 8011c5e:	dd45      	ble.n	8011cec <rshift+0xa0>
 8011c60:	f011 011f 	ands.w	r1, r1, #31
 8011c64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011c68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011c6c:	d10c      	bne.n	8011c88 <rshift+0x3c>
 8011c6e:	f100 0710 	add.w	r7, r0, #16
 8011c72:	4629      	mov	r1, r5
 8011c74:	42b1      	cmp	r1, r6
 8011c76:	d334      	bcc.n	8011ce2 <rshift+0x96>
 8011c78:	1a9b      	subs	r3, r3, r2
 8011c7a:	009b      	lsls	r3, r3, #2
 8011c7c:	1eea      	subs	r2, r5, #3
 8011c7e:	4296      	cmp	r6, r2
 8011c80:	bf38      	it	cc
 8011c82:	2300      	movcc	r3, #0
 8011c84:	4423      	add	r3, r4
 8011c86:	e015      	b.n	8011cb4 <rshift+0x68>
 8011c88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011c8c:	f1c1 0820 	rsb	r8, r1, #32
 8011c90:	40cf      	lsrs	r7, r1
 8011c92:	f105 0e04 	add.w	lr, r5, #4
 8011c96:	46a1      	mov	r9, r4
 8011c98:	4576      	cmp	r6, lr
 8011c9a:	46f4      	mov	ip, lr
 8011c9c:	d815      	bhi.n	8011cca <rshift+0x7e>
 8011c9e:	1a9a      	subs	r2, r3, r2
 8011ca0:	0092      	lsls	r2, r2, #2
 8011ca2:	3a04      	subs	r2, #4
 8011ca4:	3501      	adds	r5, #1
 8011ca6:	42ae      	cmp	r6, r5
 8011ca8:	bf38      	it	cc
 8011caa:	2200      	movcc	r2, #0
 8011cac:	18a3      	adds	r3, r4, r2
 8011cae:	50a7      	str	r7, [r4, r2]
 8011cb0:	b107      	cbz	r7, 8011cb4 <rshift+0x68>
 8011cb2:	3304      	adds	r3, #4
 8011cb4:	1b1a      	subs	r2, r3, r4
 8011cb6:	42a3      	cmp	r3, r4
 8011cb8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011cbc:	bf08      	it	eq
 8011cbe:	2300      	moveq	r3, #0
 8011cc0:	6102      	str	r2, [r0, #16]
 8011cc2:	bf08      	it	eq
 8011cc4:	6143      	streq	r3, [r0, #20]
 8011cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cca:	f8dc c000 	ldr.w	ip, [ip]
 8011cce:	fa0c fc08 	lsl.w	ip, ip, r8
 8011cd2:	ea4c 0707 	orr.w	r7, ip, r7
 8011cd6:	f849 7b04 	str.w	r7, [r9], #4
 8011cda:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011cde:	40cf      	lsrs	r7, r1
 8011ce0:	e7da      	b.n	8011c98 <rshift+0x4c>
 8011ce2:	f851 cb04 	ldr.w	ip, [r1], #4
 8011ce6:	f847 cf04 	str.w	ip, [r7, #4]!
 8011cea:	e7c3      	b.n	8011c74 <rshift+0x28>
 8011cec:	4623      	mov	r3, r4
 8011cee:	e7e1      	b.n	8011cb4 <rshift+0x68>

08011cf0 <__hexdig_fun>:
 8011cf0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011cf4:	2b09      	cmp	r3, #9
 8011cf6:	d802      	bhi.n	8011cfe <__hexdig_fun+0xe>
 8011cf8:	3820      	subs	r0, #32
 8011cfa:	b2c0      	uxtb	r0, r0
 8011cfc:	4770      	bx	lr
 8011cfe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011d02:	2b05      	cmp	r3, #5
 8011d04:	d801      	bhi.n	8011d0a <__hexdig_fun+0x1a>
 8011d06:	3847      	subs	r0, #71	@ 0x47
 8011d08:	e7f7      	b.n	8011cfa <__hexdig_fun+0xa>
 8011d0a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011d0e:	2b05      	cmp	r3, #5
 8011d10:	d801      	bhi.n	8011d16 <__hexdig_fun+0x26>
 8011d12:	3827      	subs	r0, #39	@ 0x27
 8011d14:	e7f1      	b.n	8011cfa <__hexdig_fun+0xa>
 8011d16:	2000      	movs	r0, #0
 8011d18:	4770      	bx	lr
	...

08011d1c <__gethex>:
 8011d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d20:	b085      	sub	sp, #20
 8011d22:	468a      	mov	sl, r1
 8011d24:	9302      	str	r3, [sp, #8]
 8011d26:	680b      	ldr	r3, [r1, #0]
 8011d28:	9001      	str	r0, [sp, #4]
 8011d2a:	4690      	mov	r8, r2
 8011d2c:	1c9c      	adds	r4, r3, #2
 8011d2e:	46a1      	mov	r9, r4
 8011d30:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011d34:	2830      	cmp	r0, #48	@ 0x30
 8011d36:	d0fa      	beq.n	8011d2e <__gethex+0x12>
 8011d38:	eba9 0303 	sub.w	r3, r9, r3
 8011d3c:	f1a3 0b02 	sub.w	fp, r3, #2
 8011d40:	f7ff ffd6 	bl	8011cf0 <__hexdig_fun>
 8011d44:	4605      	mov	r5, r0
 8011d46:	2800      	cmp	r0, #0
 8011d48:	d168      	bne.n	8011e1c <__gethex+0x100>
 8011d4a:	49a0      	ldr	r1, [pc, #640]	@ (8011fcc <__gethex+0x2b0>)
 8011d4c:	2201      	movs	r2, #1
 8011d4e:	4648      	mov	r0, r9
 8011d50:	f7ff f83e 	bl	8010dd0 <strncmp>
 8011d54:	4607      	mov	r7, r0
 8011d56:	2800      	cmp	r0, #0
 8011d58:	d167      	bne.n	8011e2a <__gethex+0x10e>
 8011d5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011d5e:	4626      	mov	r6, r4
 8011d60:	f7ff ffc6 	bl	8011cf0 <__hexdig_fun>
 8011d64:	2800      	cmp	r0, #0
 8011d66:	d062      	beq.n	8011e2e <__gethex+0x112>
 8011d68:	4623      	mov	r3, r4
 8011d6a:	7818      	ldrb	r0, [r3, #0]
 8011d6c:	2830      	cmp	r0, #48	@ 0x30
 8011d6e:	4699      	mov	r9, r3
 8011d70:	f103 0301 	add.w	r3, r3, #1
 8011d74:	d0f9      	beq.n	8011d6a <__gethex+0x4e>
 8011d76:	f7ff ffbb 	bl	8011cf0 <__hexdig_fun>
 8011d7a:	fab0 f580 	clz	r5, r0
 8011d7e:	096d      	lsrs	r5, r5, #5
 8011d80:	f04f 0b01 	mov.w	fp, #1
 8011d84:	464a      	mov	r2, r9
 8011d86:	4616      	mov	r6, r2
 8011d88:	3201      	adds	r2, #1
 8011d8a:	7830      	ldrb	r0, [r6, #0]
 8011d8c:	f7ff ffb0 	bl	8011cf0 <__hexdig_fun>
 8011d90:	2800      	cmp	r0, #0
 8011d92:	d1f8      	bne.n	8011d86 <__gethex+0x6a>
 8011d94:	498d      	ldr	r1, [pc, #564]	@ (8011fcc <__gethex+0x2b0>)
 8011d96:	2201      	movs	r2, #1
 8011d98:	4630      	mov	r0, r6
 8011d9a:	f7ff f819 	bl	8010dd0 <strncmp>
 8011d9e:	2800      	cmp	r0, #0
 8011da0:	d13f      	bne.n	8011e22 <__gethex+0x106>
 8011da2:	b944      	cbnz	r4, 8011db6 <__gethex+0x9a>
 8011da4:	1c74      	adds	r4, r6, #1
 8011da6:	4622      	mov	r2, r4
 8011da8:	4616      	mov	r6, r2
 8011daa:	3201      	adds	r2, #1
 8011dac:	7830      	ldrb	r0, [r6, #0]
 8011dae:	f7ff ff9f 	bl	8011cf0 <__hexdig_fun>
 8011db2:	2800      	cmp	r0, #0
 8011db4:	d1f8      	bne.n	8011da8 <__gethex+0x8c>
 8011db6:	1ba4      	subs	r4, r4, r6
 8011db8:	00a7      	lsls	r7, r4, #2
 8011dba:	7833      	ldrb	r3, [r6, #0]
 8011dbc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011dc0:	2b50      	cmp	r3, #80	@ 0x50
 8011dc2:	d13e      	bne.n	8011e42 <__gethex+0x126>
 8011dc4:	7873      	ldrb	r3, [r6, #1]
 8011dc6:	2b2b      	cmp	r3, #43	@ 0x2b
 8011dc8:	d033      	beq.n	8011e32 <__gethex+0x116>
 8011dca:	2b2d      	cmp	r3, #45	@ 0x2d
 8011dcc:	d034      	beq.n	8011e38 <__gethex+0x11c>
 8011dce:	1c71      	adds	r1, r6, #1
 8011dd0:	2400      	movs	r4, #0
 8011dd2:	7808      	ldrb	r0, [r1, #0]
 8011dd4:	f7ff ff8c 	bl	8011cf0 <__hexdig_fun>
 8011dd8:	1e43      	subs	r3, r0, #1
 8011dda:	b2db      	uxtb	r3, r3
 8011ddc:	2b18      	cmp	r3, #24
 8011dde:	d830      	bhi.n	8011e42 <__gethex+0x126>
 8011de0:	f1a0 0210 	sub.w	r2, r0, #16
 8011de4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011de8:	f7ff ff82 	bl	8011cf0 <__hexdig_fun>
 8011dec:	f100 3cff 	add.w	ip, r0, #4294967295
 8011df0:	fa5f fc8c 	uxtb.w	ip, ip
 8011df4:	f1bc 0f18 	cmp.w	ip, #24
 8011df8:	f04f 030a 	mov.w	r3, #10
 8011dfc:	d91e      	bls.n	8011e3c <__gethex+0x120>
 8011dfe:	b104      	cbz	r4, 8011e02 <__gethex+0xe6>
 8011e00:	4252      	negs	r2, r2
 8011e02:	4417      	add	r7, r2
 8011e04:	f8ca 1000 	str.w	r1, [sl]
 8011e08:	b1ed      	cbz	r5, 8011e46 <__gethex+0x12a>
 8011e0a:	f1bb 0f00 	cmp.w	fp, #0
 8011e0e:	bf0c      	ite	eq
 8011e10:	2506      	moveq	r5, #6
 8011e12:	2500      	movne	r5, #0
 8011e14:	4628      	mov	r0, r5
 8011e16:	b005      	add	sp, #20
 8011e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e1c:	2500      	movs	r5, #0
 8011e1e:	462c      	mov	r4, r5
 8011e20:	e7b0      	b.n	8011d84 <__gethex+0x68>
 8011e22:	2c00      	cmp	r4, #0
 8011e24:	d1c7      	bne.n	8011db6 <__gethex+0x9a>
 8011e26:	4627      	mov	r7, r4
 8011e28:	e7c7      	b.n	8011dba <__gethex+0x9e>
 8011e2a:	464e      	mov	r6, r9
 8011e2c:	462f      	mov	r7, r5
 8011e2e:	2501      	movs	r5, #1
 8011e30:	e7c3      	b.n	8011dba <__gethex+0x9e>
 8011e32:	2400      	movs	r4, #0
 8011e34:	1cb1      	adds	r1, r6, #2
 8011e36:	e7cc      	b.n	8011dd2 <__gethex+0xb6>
 8011e38:	2401      	movs	r4, #1
 8011e3a:	e7fb      	b.n	8011e34 <__gethex+0x118>
 8011e3c:	fb03 0002 	mla	r0, r3, r2, r0
 8011e40:	e7ce      	b.n	8011de0 <__gethex+0xc4>
 8011e42:	4631      	mov	r1, r6
 8011e44:	e7de      	b.n	8011e04 <__gethex+0xe8>
 8011e46:	eba6 0309 	sub.w	r3, r6, r9
 8011e4a:	3b01      	subs	r3, #1
 8011e4c:	4629      	mov	r1, r5
 8011e4e:	2b07      	cmp	r3, #7
 8011e50:	dc0a      	bgt.n	8011e68 <__gethex+0x14c>
 8011e52:	9801      	ldr	r0, [sp, #4]
 8011e54:	f000 fafc 	bl	8012450 <_Balloc>
 8011e58:	4604      	mov	r4, r0
 8011e5a:	b940      	cbnz	r0, 8011e6e <__gethex+0x152>
 8011e5c:	4b5c      	ldr	r3, [pc, #368]	@ (8011fd0 <__gethex+0x2b4>)
 8011e5e:	4602      	mov	r2, r0
 8011e60:	21e4      	movs	r1, #228	@ 0xe4
 8011e62:	485c      	ldr	r0, [pc, #368]	@ (8011fd4 <__gethex+0x2b8>)
 8011e64:	f001 fa5c 	bl	8013320 <__assert_func>
 8011e68:	3101      	adds	r1, #1
 8011e6a:	105b      	asrs	r3, r3, #1
 8011e6c:	e7ef      	b.n	8011e4e <__gethex+0x132>
 8011e6e:	f100 0a14 	add.w	sl, r0, #20
 8011e72:	2300      	movs	r3, #0
 8011e74:	4655      	mov	r5, sl
 8011e76:	469b      	mov	fp, r3
 8011e78:	45b1      	cmp	r9, r6
 8011e7a:	d337      	bcc.n	8011eec <__gethex+0x1d0>
 8011e7c:	f845 bb04 	str.w	fp, [r5], #4
 8011e80:	eba5 050a 	sub.w	r5, r5, sl
 8011e84:	10ad      	asrs	r5, r5, #2
 8011e86:	6125      	str	r5, [r4, #16]
 8011e88:	4658      	mov	r0, fp
 8011e8a:	f000 fbd3 	bl	8012634 <__hi0bits>
 8011e8e:	016d      	lsls	r5, r5, #5
 8011e90:	f8d8 6000 	ldr.w	r6, [r8]
 8011e94:	1a2d      	subs	r5, r5, r0
 8011e96:	42b5      	cmp	r5, r6
 8011e98:	dd54      	ble.n	8011f44 <__gethex+0x228>
 8011e9a:	1bad      	subs	r5, r5, r6
 8011e9c:	4629      	mov	r1, r5
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	f000 ff67 	bl	8012d72 <__any_on>
 8011ea4:	4681      	mov	r9, r0
 8011ea6:	b178      	cbz	r0, 8011ec8 <__gethex+0x1ac>
 8011ea8:	1e6b      	subs	r3, r5, #1
 8011eaa:	1159      	asrs	r1, r3, #5
 8011eac:	f003 021f 	and.w	r2, r3, #31
 8011eb0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011eb4:	f04f 0901 	mov.w	r9, #1
 8011eb8:	fa09 f202 	lsl.w	r2, r9, r2
 8011ebc:	420a      	tst	r2, r1
 8011ebe:	d003      	beq.n	8011ec8 <__gethex+0x1ac>
 8011ec0:	454b      	cmp	r3, r9
 8011ec2:	dc36      	bgt.n	8011f32 <__gethex+0x216>
 8011ec4:	f04f 0902 	mov.w	r9, #2
 8011ec8:	4629      	mov	r1, r5
 8011eca:	4620      	mov	r0, r4
 8011ecc:	f7ff febe 	bl	8011c4c <rshift>
 8011ed0:	442f      	add	r7, r5
 8011ed2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011ed6:	42bb      	cmp	r3, r7
 8011ed8:	da42      	bge.n	8011f60 <__gethex+0x244>
 8011eda:	9801      	ldr	r0, [sp, #4]
 8011edc:	4621      	mov	r1, r4
 8011ede:	f000 faf7 	bl	80124d0 <_Bfree>
 8011ee2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	6013      	str	r3, [r2, #0]
 8011ee8:	25a3      	movs	r5, #163	@ 0xa3
 8011eea:	e793      	b.n	8011e14 <__gethex+0xf8>
 8011eec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011ef0:	2a2e      	cmp	r2, #46	@ 0x2e
 8011ef2:	d012      	beq.n	8011f1a <__gethex+0x1fe>
 8011ef4:	2b20      	cmp	r3, #32
 8011ef6:	d104      	bne.n	8011f02 <__gethex+0x1e6>
 8011ef8:	f845 bb04 	str.w	fp, [r5], #4
 8011efc:	f04f 0b00 	mov.w	fp, #0
 8011f00:	465b      	mov	r3, fp
 8011f02:	7830      	ldrb	r0, [r6, #0]
 8011f04:	9303      	str	r3, [sp, #12]
 8011f06:	f7ff fef3 	bl	8011cf0 <__hexdig_fun>
 8011f0a:	9b03      	ldr	r3, [sp, #12]
 8011f0c:	f000 000f 	and.w	r0, r0, #15
 8011f10:	4098      	lsls	r0, r3
 8011f12:	ea4b 0b00 	orr.w	fp, fp, r0
 8011f16:	3304      	adds	r3, #4
 8011f18:	e7ae      	b.n	8011e78 <__gethex+0x15c>
 8011f1a:	45b1      	cmp	r9, r6
 8011f1c:	d8ea      	bhi.n	8011ef4 <__gethex+0x1d8>
 8011f1e:	492b      	ldr	r1, [pc, #172]	@ (8011fcc <__gethex+0x2b0>)
 8011f20:	9303      	str	r3, [sp, #12]
 8011f22:	2201      	movs	r2, #1
 8011f24:	4630      	mov	r0, r6
 8011f26:	f7fe ff53 	bl	8010dd0 <strncmp>
 8011f2a:	9b03      	ldr	r3, [sp, #12]
 8011f2c:	2800      	cmp	r0, #0
 8011f2e:	d1e1      	bne.n	8011ef4 <__gethex+0x1d8>
 8011f30:	e7a2      	b.n	8011e78 <__gethex+0x15c>
 8011f32:	1ea9      	subs	r1, r5, #2
 8011f34:	4620      	mov	r0, r4
 8011f36:	f000 ff1c 	bl	8012d72 <__any_on>
 8011f3a:	2800      	cmp	r0, #0
 8011f3c:	d0c2      	beq.n	8011ec4 <__gethex+0x1a8>
 8011f3e:	f04f 0903 	mov.w	r9, #3
 8011f42:	e7c1      	b.n	8011ec8 <__gethex+0x1ac>
 8011f44:	da09      	bge.n	8011f5a <__gethex+0x23e>
 8011f46:	1b75      	subs	r5, r6, r5
 8011f48:	4621      	mov	r1, r4
 8011f4a:	9801      	ldr	r0, [sp, #4]
 8011f4c:	462a      	mov	r2, r5
 8011f4e:	f000 fcd7 	bl	8012900 <__lshift>
 8011f52:	1b7f      	subs	r7, r7, r5
 8011f54:	4604      	mov	r4, r0
 8011f56:	f100 0a14 	add.w	sl, r0, #20
 8011f5a:	f04f 0900 	mov.w	r9, #0
 8011f5e:	e7b8      	b.n	8011ed2 <__gethex+0x1b6>
 8011f60:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011f64:	42bd      	cmp	r5, r7
 8011f66:	dd6f      	ble.n	8012048 <__gethex+0x32c>
 8011f68:	1bed      	subs	r5, r5, r7
 8011f6a:	42ae      	cmp	r6, r5
 8011f6c:	dc34      	bgt.n	8011fd8 <__gethex+0x2bc>
 8011f6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011f72:	2b02      	cmp	r3, #2
 8011f74:	d022      	beq.n	8011fbc <__gethex+0x2a0>
 8011f76:	2b03      	cmp	r3, #3
 8011f78:	d024      	beq.n	8011fc4 <__gethex+0x2a8>
 8011f7a:	2b01      	cmp	r3, #1
 8011f7c:	d115      	bne.n	8011faa <__gethex+0x28e>
 8011f7e:	42ae      	cmp	r6, r5
 8011f80:	d113      	bne.n	8011faa <__gethex+0x28e>
 8011f82:	2e01      	cmp	r6, #1
 8011f84:	d10b      	bne.n	8011f9e <__gethex+0x282>
 8011f86:	9a02      	ldr	r2, [sp, #8]
 8011f88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011f8c:	6013      	str	r3, [r2, #0]
 8011f8e:	2301      	movs	r3, #1
 8011f90:	6123      	str	r3, [r4, #16]
 8011f92:	f8ca 3000 	str.w	r3, [sl]
 8011f96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f98:	2562      	movs	r5, #98	@ 0x62
 8011f9a:	601c      	str	r4, [r3, #0]
 8011f9c:	e73a      	b.n	8011e14 <__gethex+0xf8>
 8011f9e:	1e71      	subs	r1, r6, #1
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	f000 fee6 	bl	8012d72 <__any_on>
 8011fa6:	2800      	cmp	r0, #0
 8011fa8:	d1ed      	bne.n	8011f86 <__gethex+0x26a>
 8011faa:	9801      	ldr	r0, [sp, #4]
 8011fac:	4621      	mov	r1, r4
 8011fae:	f000 fa8f 	bl	80124d0 <_Bfree>
 8011fb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	6013      	str	r3, [r2, #0]
 8011fb8:	2550      	movs	r5, #80	@ 0x50
 8011fba:	e72b      	b.n	8011e14 <__gethex+0xf8>
 8011fbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d1f3      	bne.n	8011faa <__gethex+0x28e>
 8011fc2:	e7e0      	b.n	8011f86 <__gethex+0x26a>
 8011fc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d1dd      	bne.n	8011f86 <__gethex+0x26a>
 8011fca:	e7ee      	b.n	8011faa <__gethex+0x28e>
 8011fcc:	080148f0 	.word	0x080148f0
 8011fd0:	08014a05 	.word	0x08014a05
 8011fd4:	08014a16 	.word	0x08014a16
 8011fd8:	1e6f      	subs	r7, r5, #1
 8011fda:	f1b9 0f00 	cmp.w	r9, #0
 8011fde:	d130      	bne.n	8012042 <__gethex+0x326>
 8011fe0:	b127      	cbz	r7, 8011fec <__gethex+0x2d0>
 8011fe2:	4639      	mov	r1, r7
 8011fe4:	4620      	mov	r0, r4
 8011fe6:	f000 fec4 	bl	8012d72 <__any_on>
 8011fea:	4681      	mov	r9, r0
 8011fec:	117a      	asrs	r2, r7, #5
 8011fee:	2301      	movs	r3, #1
 8011ff0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011ff4:	f007 071f 	and.w	r7, r7, #31
 8011ff8:	40bb      	lsls	r3, r7
 8011ffa:	4213      	tst	r3, r2
 8011ffc:	4629      	mov	r1, r5
 8011ffe:	4620      	mov	r0, r4
 8012000:	bf18      	it	ne
 8012002:	f049 0902 	orrne.w	r9, r9, #2
 8012006:	f7ff fe21 	bl	8011c4c <rshift>
 801200a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801200e:	1b76      	subs	r6, r6, r5
 8012010:	2502      	movs	r5, #2
 8012012:	f1b9 0f00 	cmp.w	r9, #0
 8012016:	d047      	beq.n	80120a8 <__gethex+0x38c>
 8012018:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801201c:	2b02      	cmp	r3, #2
 801201e:	d015      	beq.n	801204c <__gethex+0x330>
 8012020:	2b03      	cmp	r3, #3
 8012022:	d017      	beq.n	8012054 <__gethex+0x338>
 8012024:	2b01      	cmp	r3, #1
 8012026:	d109      	bne.n	801203c <__gethex+0x320>
 8012028:	f019 0f02 	tst.w	r9, #2
 801202c:	d006      	beq.n	801203c <__gethex+0x320>
 801202e:	f8da 3000 	ldr.w	r3, [sl]
 8012032:	ea49 0903 	orr.w	r9, r9, r3
 8012036:	f019 0f01 	tst.w	r9, #1
 801203a:	d10e      	bne.n	801205a <__gethex+0x33e>
 801203c:	f045 0510 	orr.w	r5, r5, #16
 8012040:	e032      	b.n	80120a8 <__gethex+0x38c>
 8012042:	f04f 0901 	mov.w	r9, #1
 8012046:	e7d1      	b.n	8011fec <__gethex+0x2d0>
 8012048:	2501      	movs	r5, #1
 801204a:	e7e2      	b.n	8012012 <__gethex+0x2f6>
 801204c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801204e:	f1c3 0301 	rsb	r3, r3, #1
 8012052:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012056:	2b00      	cmp	r3, #0
 8012058:	d0f0      	beq.n	801203c <__gethex+0x320>
 801205a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801205e:	f104 0314 	add.w	r3, r4, #20
 8012062:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012066:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801206a:	f04f 0c00 	mov.w	ip, #0
 801206e:	4618      	mov	r0, r3
 8012070:	f853 2b04 	ldr.w	r2, [r3], #4
 8012074:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012078:	d01b      	beq.n	80120b2 <__gethex+0x396>
 801207a:	3201      	adds	r2, #1
 801207c:	6002      	str	r2, [r0, #0]
 801207e:	2d02      	cmp	r5, #2
 8012080:	f104 0314 	add.w	r3, r4, #20
 8012084:	d13c      	bne.n	8012100 <__gethex+0x3e4>
 8012086:	f8d8 2000 	ldr.w	r2, [r8]
 801208a:	3a01      	subs	r2, #1
 801208c:	42b2      	cmp	r2, r6
 801208e:	d109      	bne.n	80120a4 <__gethex+0x388>
 8012090:	1171      	asrs	r1, r6, #5
 8012092:	2201      	movs	r2, #1
 8012094:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012098:	f006 061f 	and.w	r6, r6, #31
 801209c:	fa02 f606 	lsl.w	r6, r2, r6
 80120a0:	421e      	tst	r6, r3
 80120a2:	d13a      	bne.n	801211a <__gethex+0x3fe>
 80120a4:	f045 0520 	orr.w	r5, r5, #32
 80120a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80120aa:	601c      	str	r4, [r3, #0]
 80120ac:	9b02      	ldr	r3, [sp, #8]
 80120ae:	601f      	str	r7, [r3, #0]
 80120b0:	e6b0      	b.n	8011e14 <__gethex+0xf8>
 80120b2:	4299      	cmp	r1, r3
 80120b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80120b8:	d8d9      	bhi.n	801206e <__gethex+0x352>
 80120ba:	68a3      	ldr	r3, [r4, #8]
 80120bc:	459b      	cmp	fp, r3
 80120be:	db17      	blt.n	80120f0 <__gethex+0x3d4>
 80120c0:	6861      	ldr	r1, [r4, #4]
 80120c2:	9801      	ldr	r0, [sp, #4]
 80120c4:	3101      	adds	r1, #1
 80120c6:	f000 f9c3 	bl	8012450 <_Balloc>
 80120ca:	4681      	mov	r9, r0
 80120cc:	b918      	cbnz	r0, 80120d6 <__gethex+0x3ba>
 80120ce:	4b1a      	ldr	r3, [pc, #104]	@ (8012138 <__gethex+0x41c>)
 80120d0:	4602      	mov	r2, r0
 80120d2:	2184      	movs	r1, #132	@ 0x84
 80120d4:	e6c5      	b.n	8011e62 <__gethex+0x146>
 80120d6:	6922      	ldr	r2, [r4, #16]
 80120d8:	3202      	adds	r2, #2
 80120da:	f104 010c 	add.w	r1, r4, #12
 80120de:	0092      	lsls	r2, r2, #2
 80120e0:	300c      	adds	r0, #12
 80120e2:	f7fe fefe 	bl	8010ee2 <memcpy>
 80120e6:	4621      	mov	r1, r4
 80120e8:	9801      	ldr	r0, [sp, #4]
 80120ea:	f000 f9f1 	bl	80124d0 <_Bfree>
 80120ee:	464c      	mov	r4, r9
 80120f0:	6923      	ldr	r3, [r4, #16]
 80120f2:	1c5a      	adds	r2, r3, #1
 80120f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80120f8:	6122      	str	r2, [r4, #16]
 80120fa:	2201      	movs	r2, #1
 80120fc:	615a      	str	r2, [r3, #20]
 80120fe:	e7be      	b.n	801207e <__gethex+0x362>
 8012100:	6922      	ldr	r2, [r4, #16]
 8012102:	455a      	cmp	r2, fp
 8012104:	dd0b      	ble.n	801211e <__gethex+0x402>
 8012106:	2101      	movs	r1, #1
 8012108:	4620      	mov	r0, r4
 801210a:	f7ff fd9f 	bl	8011c4c <rshift>
 801210e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012112:	3701      	adds	r7, #1
 8012114:	42bb      	cmp	r3, r7
 8012116:	f6ff aee0 	blt.w	8011eda <__gethex+0x1be>
 801211a:	2501      	movs	r5, #1
 801211c:	e7c2      	b.n	80120a4 <__gethex+0x388>
 801211e:	f016 061f 	ands.w	r6, r6, #31
 8012122:	d0fa      	beq.n	801211a <__gethex+0x3fe>
 8012124:	4453      	add	r3, sl
 8012126:	f1c6 0620 	rsb	r6, r6, #32
 801212a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801212e:	f000 fa81 	bl	8012634 <__hi0bits>
 8012132:	42b0      	cmp	r0, r6
 8012134:	dbe7      	blt.n	8012106 <__gethex+0x3ea>
 8012136:	e7f0      	b.n	801211a <__gethex+0x3fe>
 8012138:	08014a05 	.word	0x08014a05

0801213c <L_shift>:
 801213c:	f1c2 0208 	rsb	r2, r2, #8
 8012140:	0092      	lsls	r2, r2, #2
 8012142:	b570      	push	{r4, r5, r6, lr}
 8012144:	f1c2 0620 	rsb	r6, r2, #32
 8012148:	6843      	ldr	r3, [r0, #4]
 801214a:	6804      	ldr	r4, [r0, #0]
 801214c:	fa03 f506 	lsl.w	r5, r3, r6
 8012150:	432c      	orrs	r4, r5
 8012152:	40d3      	lsrs	r3, r2
 8012154:	6004      	str	r4, [r0, #0]
 8012156:	f840 3f04 	str.w	r3, [r0, #4]!
 801215a:	4288      	cmp	r0, r1
 801215c:	d3f4      	bcc.n	8012148 <L_shift+0xc>
 801215e:	bd70      	pop	{r4, r5, r6, pc}

08012160 <__match>:
 8012160:	b530      	push	{r4, r5, lr}
 8012162:	6803      	ldr	r3, [r0, #0]
 8012164:	3301      	adds	r3, #1
 8012166:	f811 4b01 	ldrb.w	r4, [r1], #1
 801216a:	b914      	cbnz	r4, 8012172 <__match+0x12>
 801216c:	6003      	str	r3, [r0, #0]
 801216e:	2001      	movs	r0, #1
 8012170:	bd30      	pop	{r4, r5, pc}
 8012172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012176:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801217a:	2d19      	cmp	r5, #25
 801217c:	bf98      	it	ls
 801217e:	3220      	addls	r2, #32
 8012180:	42a2      	cmp	r2, r4
 8012182:	d0f0      	beq.n	8012166 <__match+0x6>
 8012184:	2000      	movs	r0, #0
 8012186:	e7f3      	b.n	8012170 <__match+0x10>

08012188 <__hexnan>:
 8012188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801218c:	680b      	ldr	r3, [r1, #0]
 801218e:	6801      	ldr	r1, [r0, #0]
 8012190:	115e      	asrs	r6, r3, #5
 8012192:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012196:	f013 031f 	ands.w	r3, r3, #31
 801219a:	b087      	sub	sp, #28
 801219c:	bf18      	it	ne
 801219e:	3604      	addne	r6, #4
 80121a0:	2500      	movs	r5, #0
 80121a2:	1f37      	subs	r7, r6, #4
 80121a4:	4682      	mov	sl, r0
 80121a6:	4690      	mov	r8, r2
 80121a8:	9301      	str	r3, [sp, #4]
 80121aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80121ae:	46b9      	mov	r9, r7
 80121b0:	463c      	mov	r4, r7
 80121b2:	9502      	str	r5, [sp, #8]
 80121b4:	46ab      	mov	fp, r5
 80121b6:	784a      	ldrb	r2, [r1, #1]
 80121b8:	1c4b      	adds	r3, r1, #1
 80121ba:	9303      	str	r3, [sp, #12]
 80121bc:	b342      	cbz	r2, 8012210 <__hexnan+0x88>
 80121be:	4610      	mov	r0, r2
 80121c0:	9105      	str	r1, [sp, #20]
 80121c2:	9204      	str	r2, [sp, #16]
 80121c4:	f7ff fd94 	bl	8011cf0 <__hexdig_fun>
 80121c8:	2800      	cmp	r0, #0
 80121ca:	d151      	bne.n	8012270 <__hexnan+0xe8>
 80121cc:	9a04      	ldr	r2, [sp, #16]
 80121ce:	9905      	ldr	r1, [sp, #20]
 80121d0:	2a20      	cmp	r2, #32
 80121d2:	d818      	bhi.n	8012206 <__hexnan+0x7e>
 80121d4:	9b02      	ldr	r3, [sp, #8]
 80121d6:	459b      	cmp	fp, r3
 80121d8:	dd13      	ble.n	8012202 <__hexnan+0x7a>
 80121da:	454c      	cmp	r4, r9
 80121dc:	d206      	bcs.n	80121ec <__hexnan+0x64>
 80121de:	2d07      	cmp	r5, #7
 80121e0:	dc04      	bgt.n	80121ec <__hexnan+0x64>
 80121e2:	462a      	mov	r2, r5
 80121e4:	4649      	mov	r1, r9
 80121e6:	4620      	mov	r0, r4
 80121e8:	f7ff ffa8 	bl	801213c <L_shift>
 80121ec:	4544      	cmp	r4, r8
 80121ee:	d952      	bls.n	8012296 <__hexnan+0x10e>
 80121f0:	2300      	movs	r3, #0
 80121f2:	f1a4 0904 	sub.w	r9, r4, #4
 80121f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80121fa:	f8cd b008 	str.w	fp, [sp, #8]
 80121fe:	464c      	mov	r4, r9
 8012200:	461d      	mov	r5, r3
 8012202:	9903      	ldr	r1, [sp, #12]
 8012204:	e7d7      	b.n	80121b6 <__hexnan+0x2e>
 8012206:	2a29      	cmp	r2, #41	@ 0x29
 8012208:	d157      	bne.n	80122ba <__hexnan+0x132>
 801220a:	3102      	adds	r1, #2
 801220c:	f8ca 1000 	str.w	r1, [sl]
 8012210:	f1bb 0f00 	cmp.w	fp, #0
 8012214:	d051      	beq.n	80122ba <__hexnan+0x132>
 8012216:	454c      	cmp	r4, r9
 8012218:	d206      	bcs.n	8012228 <__hexnan+0xa0>
 801221a:	2d07      	cmp	r5, #7
 801221c:	dc04      	bgt.n	8012228 <__hexnan+0xa0>
 801221e:	462a      	mov	r2, r5
 8012220:	4649      	mov	r1, r9
 8012222:	4620      	mov	r0, r4
 8012224:	f7ff ff8a 	bl	801213c <L_shift>
 8012228:	4544      	cmp	r4, r8
 801222a:	d936      	bls.n	801229a <__hexnan+0x112>
 801222c:	f1a8 0204 	sub.w	r2, r8, #4
 8012230:	4623      	mov	r3, r4
 8012232:	f853 1b04 	ldr.w	r1, [r3], #4
 8012236:	f842 1f04 	str.w	r1, [r2, #4]!
 801223a:	429f      	cmp	r7, r3
 801223c:	d2f9      	bcs.n	8012232 <__hexnan+0xaa>
 801223e:	1b3b      	subs	r3, r7, r4
 8012240:	f023 0303 	bic.w	r3, r3, #3
 8012244:	3304      	adds	r3, #4
 8012246:	3401      	adds	r4, #1
 8012248:	3e03      	subs	r6, #3
 801224a:	42b4      	cmp	r4, r6
 801224c:	bf88      	it	hi
 801224e:	2304      	movhi	r3, #4
 8012250:	4443      	add	r3, r8
 8012252:	2200      	movs	r2, #0
 8012254:	f843 2b04 	str.w	r2, [r3], #4
 8012258:	429f      	cmp	r7, r3
 801225a:	d2fb      	bcs.n	8012254 <__hexnan+0xcc>
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	b91b      	cbnz	r3, 8012268 <__hexnan+0xe0>
 8012260:	4547      	cmp	r7, r8
 8012262:	d128      	bne.n	80122b6 <__hexnan+0x12e>
 8012264:	2301      	movs	r3, #1
 8012266:	603b      	str	r3, [r7, #0]
 8012268:	2005      	movs	r0, #5
 801226a:	b007      	add	sp, #28
 801226c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012270:	3501      	adds	r5, #1
 8012272:	2d08      	cmp	r5, #8
 8012274:	f10b 0b01 	add.w	fp, fp, #1
 8012278:	dd06      	ble.n	8012288 <__hexnan+0x100>
 801227a:	4544      	cmp	r4, r8
 801227c:	d9c1      	bls.n	8012202 <__hexnan+0x7a>
 801227e:	2300      	movs	r3, #0
 8012280:	f844 3c04 	str.w	r3, [r4, #-4]
 8012284:	2501      	movs	r5, #1
 8012286:	3c04      	subs	r4, #4
 8012288:	6822      	ldr	r2, [r4, #0]
 801228a:	f000 000f 	and.w	r0, r0, #15
 801228e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012292:	6020      	str	r0, [r4, #0]
 8012294:	e7b5      	b.n	8012202 <__hexnan+0x7a>
 8012296:	2508      	movs	r5, #8
 8012298:	e7b3      	b.n	8012202 <__hexnan+0x7a>
 801229a:	9b01      	ldr	r3, [sp, #4]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d0dd      	beq.n	801225c <__hexnan+0xd4>
 80122a0:	f1c3 0320 	rsb	r3, r3, #32
 80122a4:	f04f 32ff 	mov.w	r2, #4294967295
 80122a8:	40da      	lsrs	r2, r3
 80122aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80122ae:	4013      	ands	r3, r2
 80122b0:	f846 3c04 	str.w	r3, [r6, #-4]
 80122b4:	e7d2      	b.n	801225c <__hexnan+0xd4>
 80122b6:	3f04      	subs	r7, #4
 80122b8:	e7d0      	b.n	801225c <__hexnan+0xd4>
 80122ba:	2004      	movs	r0, #4
 80122bc:	e7d5      	b.n	801226a <__hexnan+0xe2>
	...

080122c0 <malloc>:
 80122c0:	4b02      	ldr	r3, [pc, #8]	@ (80122cc <malloc+0xc>)
 80122c2:	4601      	mov	r1, r0
 80122c4:	6818      	ldr	r0, [r3, #0]
 80122c6:	f000 b825 	b.w	8012314 <_malloc_r>
 80122ca:	bf00      	nop
 80122cc:	20000248 	.word	0x20000248

080122d0 <sbrk_aligned>:
 80122d0:	b570      	push	{r4, r5, r6, lr}
 80122d2:	4e0f      	ldr	r6, [pc, #60]	@ (8012310 <sbrk_aligned+0x40>)
 80122d4:	460c      	mov	r4, r1
 80122d6:	6831      	ldr	r1, [r6, #0]
 80122d8:	4605      	mov	r5, r0
 80122da:	b911      	cbnz	r1, 80122e2 <sbrk_aligned+0x12>
 80122dc:	f001 f810 	bl	8013300 <_sbrk_r>
 80122e0:	6030      	str	r0, [r6, #0]
 80122e2:	4621      	mov	r1, r4
 80122e4:	4628      	mov	r0, r5
 80122e6:	f001 f80b 	bl	8013300 <_sbrk_r>
 80122ea:	1c43      	adds	r3, r0, #1
 80122ec:	d103      	bne.n	80122f6 <sbrk_aligned+0x26>
 80122ee:	f04f 34ff 	mov.w	r4, #4294967295
 80122f2:	4620      	mov	r0, r4
 80122f4:	bd70      	pop	{r4, r5, r6, pc}
 80122f6:	1cc4      	adds	r4, r0, #3
 80122f8:	f024 0403 	bic.w	r4, r4, #3
 80122fc:	42a0      	cmp	r0, r4
 80122fe:	d0f8      	beq.n	80122f2 <sbrk_aligned+0x22>
 8012300:	1a21      	subs	r1, r4, r0
 8012302:	4628      	mov	r0, r5
 8012304:	f000 fffc 	bl	8013300 <_sbrk_r>
 8012308:	3001      	adds	r0, #1
 801230a:	d1f2      	bne.n	80122f2 <sbrk_aligned+0x22>
 801230c:	e7ef      	b.n	80122ee <sbrk_aligned+0x1e>
 801230e:	bf00      	nop
 8012310:	20000e44 	.word	0x20000e44

08012314 <_malloc_r>:
 8012314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012318:	1ccd      	adds	r5, r1, #3
 801231a:	f025 0503 	bic.w	r5, r5, #3
 801231e:	3508      	adds	r5, #8
 8012320:	2d0c      	cmp	r5, #12
 8012322:	bf38      	it	cc
 8012324:	250c      	movcc	r5, #12
 8012326:	2d00      	cmp	r5, #0
 8012328:	4606      	mov	r6, r0
 801232a:	db01      	blt.n	8012330 <_malloc_r+0x1c>
 801232c:	42a9      	cmp	r1, r5
 801232e:	d904      	bls.n	801233a <_malloc_r+0x26>
 8012330:	230c      	movs	r3, #12
 8012332:	6033      	str	r3, [r6, #0]
 8012334:	2000      	movs	r0, #0
 8012336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801233a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012410 <_malloc_r+0xfc>
 801233e:	f000 f87b 	bl	8012438 <__malloc_lock>
 8012342:	f8d8 3000 	ldr.w	r3, [r8]
 8012346:	461c      	mov	r4, r3
 8012348:	bb44      	cbnz	r4, 801239c <_malloc_r+0x88>
 801234a:	4629      	mov	r1, r5
 801234c:	4630      	mov	r0, r6
 801234e:	f7ff ffbf 	bl	80122d0 <sbrk_aligned>
 8012352:	1c43      	adds	r3, r0, #1
 8012354:	4604      	mov	r4, r0
 8012356:	d158      	bne.n	801240a <_malloc_r+0xf6>
 8012358:	f8d8 4000 	ldr.w	r4, [r8]
 801235c:	4627      	mov	r7, r4
 801235e:	2f00      	cmp	r7, #0
 8012360:	d143      	bne.n	80123ea <_malloc_r+0xd6>
 8012362:	2c00      	cmp	r4, #0
 8012364:	d04b      	beq.n	80123fe <_malloc_r+0xea>
 8012366:	6823      	ldr	r3, [r4, #0]
 8012368:	4639      	mov	r1, r7
 801236a:	4630      	mov	r0, r6
 801236c:	eb04 0903 	add.w	r9, r4, r3
 8012370:	f000 ffc6 	bl	8013300 <_sbrk_r>
 8012374:	4581      	cmp	r9, r0
 8012376:	d142      	bne.n	80123fe <_malloc_r+0xea>
 8012378:	6821      	ldr	r1, [r4, #0]
 801237a:	1a6d      	subs	r5, r5, r1
 801237c:	4629      	mov	r1, r5
 801237e:	4630      	mov	r0, r6
 8012380:	f7ff ffa6 	bl	80122d0 <sbrk_aligned>
 8012384:	3001      	adds	r0, #1
 8012386:	d03a      	beq.n	80123fe <_malloc_r+0xea>
 8012388:	6823      	ldr	r3, [r4, #0]
 801238a:	442b      	add	r3, r5
 801238c:	6023      	str	r3, [r4, #0]
 801238e:	f8d8 3000 	ldr.w	r3, [r8]
 8012392:	685a      	ldr	r2, [r3, #4]
 8012394:	bb62      	cbnz	r2, 80123f0 <_malloc_r+0xdc>
 8012396:	f8c8 7000 	str.w	r7, [r8]
 801239a:	e00f      	b.n	80123bc <_malloc_r+0xa8>
 801239c:	6822      	ldr	r2, [r4, #0]
 801239e:	1b52      	subs	r2, r2, r5
 80123a0:	d420      	bmi.n	80123e4 <_malloc_r+0xd0>
 80123a2:	2a0b      	cmp	r2, #11
 80123a4:	d917      	bls.n	80123d6 <_malloc_r+0xc2>
 80123a6:	1961      	adds	r1, r4, r5
 80123a8:	42a3      	cmp	r3, r4
 80123aa:	6025      	str	r5, [r4, #0]
 80123ac:	bf18      	it	ne
 80123ae:	6059      	strne	r1, [r3, #4]
 80123b0:	6863      	ldr	r3, [r4, #4]
 80123b2:	bf08      	it	eq
 80123b4:	f8c8 1000 	streq.w	r1, [r8]
 80123b8:	5162      	str	r2, [r4, r5]
 80123ba:	604b      	str	r3, [r1, #4]
 80123bc:	4630      	mov	r0, r6
 80123be:	f000 f841 	bl	8012444 <__malloc_unlock>
 80123c2:	f104 000b 	add.w	r0, r4, #11
 80123c6:	1d23      	adds	r3, r4, #4
 80123c8:	f020 0007 	bic.w	r0, r0, #7
 80123cc:	1ac2      	subs	r2, r0, r3
 80123ce:	bf1c      	itt	ne
 80123d0:	1a1b      	subne	r3, r3, r0
 80123d2:	50a3      	strne	r3, [r4, r2]
 80123d4:	e7af      	b.n	8012336 <_malloc_r+0x22>
 80123d6:	6862      	ldr	r2, [r4, #4]
 80123d8:	42a3      	cmp	r3, r4
 80123da:	bf0c      	ite	eq
 80123dc:	f8c8 2000 	streq.w	r2, [r8]
 80123e0:	605a      	strne	r2, [r3, #4]
 80123e2:	e7eb      	b.n	80123bc <_malloc_r+0xa8>
 80123e4:	4623      	mov	r3, r4
 80123e6:	6864      	ldr	r4, [r4, #4]
 80123e8:	e7ae      	b.n	8012348 <_malloc_r+0x34>
 80123ea:	463c      	mov	r4, r7
 80123ec:	687f      	ldr	r7, [r7, #4]
 80123ee:	e7b6      	b.n	801235e <_malloc_r+0x4a>
 80123f0:	461a      	mov	r2, r3
 80123f2:	685b      	ldr	r3, [r3, #4]
 80123f4:	42a3      	cmp	r3, r4
 80123f6:	d1fb      	bne.n	80123f0 <_malloc_r+0xdc>
 80123f8:	2300      	movs	r3, #0
 80123fa:	6053      	str	r3, [r2, #4]
 80123fc:	e7de      	b.n	80123bc <_malloc_r+0xa8>
 80123fe:	230c      	movs	r3, #12
 8012400:	6033      	str	r3, [r6, #0]
 8012402:	4630      	mov	r0, r6
 8012404:	f000 f81e 	bl	8012444 <__malloc_unlock>
 8012408:	e794      	b.n	8012334 <_malloc_r+0x20>
 801240a:	6005      	str	r5, [r0, #0]
 801240c:	e7d6      	b.n	80123bc <_malloc_r+0xa8>
 801240e:	bf00      	nop
 8012410:	20000e48 	.word	0x20000e48

08012414 <__ascii_mbtowc>:
 8012414:	b082      	sub	sp, #8
 8012416:	b901      	cbnz	r1, 801241a <__ascii_mbtowc+0x6>
 8012418:	a901      	add	r1, sp, #4
 801241a:	b142      	cbz	r2, 801242e <__ascii_mbtowc+0x1a>
 801241c:	b14b      	cbz	r3, 8012432 <__ascii_mbtowc+0x1e>
 801241e:	7813      	ldrb	r3, [r2, #0]
 8012420:	600b      	str	r3, [r1, #0]
 8012422:	7812      	ldrb	r2, [r2, #0]
 8012424:	1e10      	subs	r0, r2, #0
 8012426:	bf18      	it	ne
 8012428:	2001      	movne	r0, #1
 801242a:	b002      	add	sp, #8
 801242c:	4770      	bx	lr
 801242e:	4610      	mov	r0, r2
 8012430:	e7fb      	b.n	801242a <__ascii_mbtowc+0x16>
 8012432:	f06f 0001 	mvn.w	r0, #1
 8012436:	e7f8      	b.n	801242a <__ascii_mbtowc+0x16>

08012438 <__malloc_lock>:
 8012438:	4801      	ldr	r0, [pc, #4]	@ (8012440 <__malloc_lock+0x8>)
 801243a:	f7fe bd50 	b.w	8010ede <__retarget_lock_acquire_recursive>
 801243e:	bf00      	nop
 8012440:	20000e40 	.word	0x20000e40

08012444 <__malloc_unlock>:
 8012444:	4801      	ldr	r0, [pc, #4]	@ (801244c <__malloc_unlock+0x8>)
 8012446:	f7fe bd4b 	b.w	8010ee0 <__retarget_lock_release_recursive>
 801244a:	bf00      	nop
 801244c:	20000e40 	.word	0x20000e40

08012450 <_Balloc>:
 8012450:	b570      	push	{r4, r5, r6, lr}
 8012452:	69c6      	ldr	r6, [r0, #28]
 8012454:	4604      	mov	r4, r0
 8012456:	460d      	mov	r5, r1
 8012458:	b976      	cbnz	r6, 8012478 <_Balloc+0x28>
 801245a:	2010      	movs	r0, #16
 801245c:	f7ff ff30 	bl	80122c0 <malloc>
 8012460:	4602      	mov	r2, r0
 8012462:	61e0      	str	r0, [r4, #28]
 8012464:	b920      	cbnz	r0, 8012470 <_Balloc+0x20>
 8012466:	4b18      	ldr	r3, [pc, #96]	@ (80124c8 <_Balloc+0x78>)
 8012468:	4818      	ldr	r0, [pc, #96]	@ (80124cc <_Balloc+0x7c>)
 801246a:	216b      	movs	r1, #107	@ 0x6b
 801246c:	f000 ff58 	bl	8013320 <__assert_func>
 8012470:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012474:	6006      	str	r6, [r0, #0]
 8012476:	60c6      	str	r6, [r0, #12]
 8012478:	69e6      	ldr	r6, [r4, #28]
 801247a:	68f3      	ldr	r3, [r6, #12]
 801247c:	b183      	cbz	r3, 80124a0 <_Balloc+0x50>
 801247e:	69e3      	ldr	r3, [r4, #28]
 8012480:	68db      	ldr	r3, [r3, #12]
 8012482:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012486:	b9b8      	cbnz	r0, 80124b8 <_Balloc+0x68>
 8012488:	2101      	movs	r1, #1
 801248a:	fa01 f605 	lsl.w	r6, r1, r5
 801248e:	1d72      	adds	r2, r6, #5
 8012490:	0092      	lsls	r2, r2, #2
 8012492:	4620      	mov	r0, r4
 8012494:	f000 ff62 	bl	801335c <_calloc_r>
 8012498:	b160      	cbz	r0, 80124b4 <_Balloc+0x64>
 801249a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801249e:	e00e      	b.n	80124be <_Balloc+0x6e>
 80124a0:	2221      	movs	r2, #33	@ 0x21
 80124a2:	2104      	movs	r1, #4
 80124a4:	4620      	mov	r0, r4
 80124a6:	f000 ff59 	bl	801335c <_calloc_r>
 80124aa:	69e3      	ldr	r3, [r4, #28]
 80124ac:	60f0      	str	r0, [r6, #12]
 80124ae:	68db      	ldr	r3, [r3, #12]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d1e4      	bne.n	801247e <_Balloc+0x2e>
 80124b4:	2000      	movs	r0, #0
 80124b6:	bd70      	pop	{r4, r5, r6, pc}
 80124b8:	6802      	ldr	r2, [r0, #0]
 80124ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80124be:	2300      	movs	r3, #0
 80124c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80124c4:	e7f7      	b.n	80124b6 <_Balloc+0x66>
 80124c6:	bf00      	nop
 80124c8:	08014996 	.word	0x08014996
 80124cc:	08014a76 	.word	0x08014a76

080124d0 <_Bfree>:
 80124d0:	b570      	push	{r4, r5, r6, lr}
 80124d2:	69c6      	ldr	r6, [r0, #28]
 80124d4:	4605      	mov	r5, r0
 80124d6:	460c      	mov	r4, r1
 80124d8:	b976      	cbnz	r6, 80124f8 <_Bfree+0x28>
 80124da:	2010      	movs	r0, #16
 80124dc:	f7ff fef0 	bl	80122c0 <malloc>
 80124e0:	4602      	mov	r2, r0
 80124e2:	61e8      	str	r0, [r5, #28]
 80124e4:	b920      	cbnz	r0, 80124f0 <_Bfree+0x20>
 80124e6:	4b09      	ldr	r3, [pc, #36]	@ (801250c <_Bfree+0x3c>)
 80124e8:	4809      	ldr	r0, [pc, #36]	@ (8012510 <_Bfree+0x40>)
 80124ea:	218f      	movs	r1, #143	@ 0x8f
 80124ec:	f000 ff18 	bl	8013320 <__assert_func>
 80124f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80124f4:	6006      	str	r6, [r0, #0]
 80124f6:	60c6      	str	r6, [r0, #12]
 80124f8:	b13c      	cbz	r4, 801250a <_Bfree+0x3a>
 80124fa:	69eb      	ldr	r3, [r5, #28]
 80124fc:	6862      	ldr	r2, [r4, #4]
 80124fe:	68db      	ldr	r3, [r3, #12]
 8012500:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012504:	6021      	str	r1, [r4, #0]
 8012506:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801250a:	bd70      	pop	{r4, r5, r6, pc}
 801250c:	08014996 	.word	0x08014996
 8012510:	08014a76 	.word	0x08014a76

08012514 <__multadd>:
 8012514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012518:	690d      	ldr	r5, [r1, #16]
 801251a:	4607      	mov	r7, r0
 801251c:	460c      	mov	r4, r1
 801251e:	461e      	mov	r6, r3
 8012520:	f101 0c14 	add.w	ip, r1, #20
 8012524:	2000      	movs	r0, #0
 8012526:	f8dc 3000 	ldr.w	r3, [ip]
 801252a:	b299      	uxth	r1, r3
 801252c:	fb02 6101 	mla	r1, r2, r1, r6
 8012530:	0c1e      	lsrs	r6, r3, #16
 8012532:	0c0b      	lsrs	r3, r1, #16
 8012534:	fb02 3306 	mla	r3, r2, r6, r3
 8012538:	b289      	uxth	r1, r1
 801253a:	3001      	adds	r0, #1
 801253c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012540:	4285      	cmp	r5, r0
 8012542:	f84c 1b04 	str.w	r1, [ip], #4
 8012546:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801254a:	dcec      	bgt.n	8012526 <__multadd+0x12>
 801254c:	b30e      	cbz	r6, 8012592 <__multadd+0x7e>
 801254e:	68a3      	ldr	r3, [r4, #8]
 8012550:	42ab      	cmp	r3, r5
 8012552:	dc19      	bgt.n	8012588 <__multadd+0x74>
 8012554:	6861      	ldr	r1, [r4, #4]
 8012556:	4638      	mov	r0, r7
 8012558:	3101      	adds	r1, #1
 801255a:	f7ff ff79 	bl	8012450 <_Balloc>
 801255e:	4680      	mov	r8, r0
 8012560:	b928      	cbnz	r0, 801256e <__multadd+0x5a>
 8012562:	4602      	mov	r2, r0
 8012564:	4b0c      	ldr	r3, [pc, #48]	@ (8012598 <__multadd+0x84>)
 8012566:	480d      	ldr	r0, [pc, #52]	@ (801259c <__multadd+0x88>)
 8012568:	21ba      	movs	r1, #186	@ 0xba
 801256a:	f000 fed9 	bl	8013320 <__assert_func>
 801256e:	6922      	ldr	r2, [r4, #16]
 8012570:	3202      	adds	r2, #2
 8012572:	f104 010c 	add.w	r1, r4, #12
 8012576:	0092      	lsls	r2, r2, #2
 8012578:	300c      	adds	r0, #12
 801257a:	f7fe fcb2 	bl	8010ee2 <memcpy>
 801257e:	4621      	mov	r1, r4
 8012580:	4638      	mov	r0, r7
 8012582:	f7ff ffa5 	bl	80124d0 <_Bfree>
 8012586:	4644      	mov	r4, r8
 8012588:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801258c:	3501      	adds	r5, #1
 801258e:	615e      	str	r6, [r3, #20]
 8012590:	6125      	str	r5, [r4, #16]
 8012592:	4620      	mov	r0, r4
 8012594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012598:	08014a05 	.word	0x08014a05
 801259c:	08014a76 	.word	0x08014a76

080125a0 <__s2b>:
 80125a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125a4:	460c      	mov	r4, r1
 80125a6:	4615      	mov	r5, r2
 80125a8:	461f      	mov	r7, r3
 80125aa:	2209      	movs	r2, #9
 80125ac:	3308      	adds	r3, #8
 80125ae:	4606      	mov	r6, r0
 80125b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80125b4:	2100      	movs	r1, #0
 80125b6:	2201      	movs	r2, #1
 80125b8:	429a      	cmp	r2, r3
 80125ba:	db09      	blt.n	80125d0 <__s2b+0x30>
 80125bc:	4630      	mov	r0, r6
 80125be:	f7ff ff47 	bl	8012450 <_Balloc>
 80125c2:	b940      	cbnz	r0, 80125d6 <__s2b+0x36>
 80125c4:	4602      	mov	r2, r0
 80125c6:	4b19      	ldr	r3, [pc, #100]	@ (801262c <__s2b+0x8c>)
 80125c8:	4819      	ldr	r0, [pc, #100]	@ (8012630 <__s2b+0x90>)
 80125ca:	21d3      	movs	r1, #211	@ 0xd3
 80125cc:	f000 fea8 	bl	8013320 <__assert_func>
 80125d0:	0052      	lsls	r2, r2, #1
 80125d2:	3101      	adds	r1, #1
 80125d4:	e7f0      	b.n	80125b8 <__s2b+0x18>
 80125d6:	9b08      	ldr	r3, [sp, #32]
 80125d8:	6143      	str	r3, [r0, #20]
 80125da:	2d09      	cmp	r5, #9
 80125dc:	f04f 0301 	mov.w	r3, #1
 80125e0:	6103      	str	r3, [r0, #16]
 80125e2:	dd16      	ble.n	8012612 <__s2b+0x72>
 80125e4:	f104 0909 	add.w	r9, r4, #9
 80125e8:	46c8      	mov	r8, r9
 80125ea:	442c      	add	r4, r5
 80125ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80125f0:	4601      	mov	r1, r0
 80125f2:	3b30      	subs	r3, #48	@ 0x30
 80125f4:	220a      	movs	r2, #10
 80125f6:	4630      	mov	r0, r6
 80125f8:	f7ff ff8c 	bl	8012514 <__multadd>
 80125fc:	45a0      	cmp	r8, r4
 80125fe:	d1f5      	bne.n	80125ec <__s2b+0x4c>
 8012600:	f1a5 0408 	sub.w	r4, r5, #8
 8012604:	444c      	add	r4, r9
 8012606:	1b2d      	subs	r5, r5, r4
 8012608:	1963      	adds	r3, r4, r5
 801260a:	42bb      	cmp	r3, r7
 801260c:	db04      	blt.n	8012618 <__s2b+0x78>
 801260e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012612:	340a      	adds	r4, #10
 8012614:	2509      	movs	r5, #9
 8012616:	e7f6      	b.n	8012606 <__s2b+0x66>
 8012618:	f814 3b01 	ldrb.w	r3, [r4], #1
 801261c:	4601      	mov	r1, r0
 801261e:	3b30      	subs	r3, #48	@ 0x30
 8012620:	220a      	movs	r2, #10
 8012622:	4630      	mov	r0, r6
 8012624:	f7ff ff76 	bl	8012514 <__multadd>
 8012628:	e7ee      	b.n	8012608 <__s2b+0x68>
 801262a:	bf00      	nop
 801262c:	08014a05 	.word	0x08014a05
 8012630:	08014a76 	.word	0x08014a76

08012634 <__hi0bits>:
 8012634:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012638:	4603      	mov	r3, r0
 801263a:	bf36      	itet	cc
 801263c:	0403      	lslcc	r3, r0, #16
 801263e:	2000      	movcs	r0, #0
 8012640:	2010      	movcc	r0, #16
 8012642:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012646:	bf3c      	itt	cc
 8012648:	021b      	lslcc	r3, r3, #8
 801264a:	3008      	addcc	r0, #8
 801264c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012650:	bf3c      	itt	cc
 8012652:	011b      	lslcc	r3, r3, #4
 8012654:	3004      	addcc	r0, #4
 8012656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801265a:	bf3c      	itt	cc
 801265c:	009b      	lslcc	r3, r3, #2
 801265e:	3002      	addcc	r0, #2
 8012660:	2b00      	cmp	r3, #0
 8012662:	db05      	blt.n	8012670 <__hi0bits+0x3c>
 8012664:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012668:	f100 0001 	add.w	r0, r0, #1
 801266c:	bf08      	it	eq
 801266e:	2020      	moveq	r0, #32
 8012670:	4770      	bx	lr

08012672 <__lo0bits>:
 8012672:	6803      	ldr	r3, [r0, #0]
 8012674:	4602      	mov	r2, r0
 8012676:	f013 0007 	ands.w	r0, r3, #7
 801267a:	d00b      	beq.n	8012694 <__lo0bits+0x22>
 801267c:	07d9      	lsls	r1, r3, #31
 801267e:	d421      	bmi.n	80126c4 <__lo0bits+0x52>
 8012680:	0798      	lsls	r0, r3, #30
 8012682:	bf49      	itett	mi
 8012684:	085b      	lsrmi	r3, r3, #1
 8012686:	089b      	lsrpl	r3, r3, #2
 8012688:	2001      	movmi	r0, #1
 801268a:	6013      	strmi	r3, [r2, #0]
 801268c:	bf5c      	itt	pl
 801268e:	6013      	strpl	r3, [r2, #0]
 8012690:	2002      	movpl	r0, #2
 8012692:	4770      	bx	lr
 8012694:	b299      	uxth	r1, r3
 8012696:	b909      	cbnz	r1, 801269c <__lo0bits+0x2a>
 8012698:	0c1b      	lsrs	r3, r3, #16
 801269a:	2010      	movs	r0, #16
 801269c:	b2d9      	uxtb	r1, r3
 801269e:	b909      	cbnz	r1, 80126a4 <__lo0bits+0x32>
 80126a0:	3008      	adds	r0, #8
 80126a2:	0a1b      	lsrs	r3, r3, #8
 80126a4:	0719      	lsls	r1, r3, #28
 80126a6:	bf04      	itt	eq
 80126a8:	091b      	lsreq	r3, r3, #4
 80126aa:	3004      	addeq	r0, #4
 80126ac:	0799      	lsls	r1, r3, #30
 80126ae:	bf04      	itt	eq
 80126b0:	089b      	lsreq	r3, r3, #2
 80126b2:	3002      	addeq	r0, #2
 80126b4:	07d9      	lsls	r1, r3, #31
 80126b6:	d403      	bmi.n	80126c0 <__lo0bits+0x4e>
 80126b8:	085b      	lsrs	r3, r3, #1
 80126ba:	f100 0001 	add.w	r0, r0, #1
 80126be:	d003      	beq.n	80126c8 <__lo0bits+0x56>
 80126c0:	6013      	str	r3, [r2, #0]
 80126c2:	4770      	bx	lr
 80126c4:	2000      	movs	r0, #0
 80126c6:	4770      	bx	lr
 80126c8:	2020      	movs	r0, #32
 80126ca:	4770      	bx	lr

080126cc <__i2b>:
 80126cc:	b510      	push	{r4, lr}
 80126ce:	460c      	mov	r4, r1
 80126d0:	2101      	movs	r1, #1
 80126d2:	f7ff febd 	bl	8012450 <_Balloc>
 80126d6:	4602      	mov	r2, r0
 80126d8:	b928      	cbnz	r0, 80126e6 <__i2b+0x1a>
 80126da:	4b05      	ldr	r3, [pc, #20]	@ (80126f0 <__i2b+0x24>)
 80126dc:	4805      	ldr	r0, [pc, #20]	@ (80126f4 <__i2b+0x28>)
 80126de:	f240 1145 	movw	r1, #325	@ 0x145
 80126e2:	f000 fe1d 	bl	8013320 <__assert_func>
 80126e6:	2301      	movs	r3, #1
 80126e8:	6144      	str	r4, [r0, #20]
 80126ea:	6103      	str	r3, [r0, #16]
 80126ec:	bd10      	pop	{r4, pc}
 80126ee:	bf00      	nop
 80126f0:	08014a05 	.word	0x08014a05
 80126f4:	08014a76 	.word	0x08014a76

080126f8 <__multiply>:
 80126f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126fc:	4614      	mov	r4, r2
 80126fe:	690a      	ldr	r2, [r1, #16]
 8012700:	6923      	ldr	r3, [r4, #16]
 8012702:	429a      	cmp	r2, r3
 8012704:	bfa8      	it	ge
 8012706:	4623      	movge	r3, r4
 8012708:	460f      	mov	r7, r1
 801270a:	bfa4      	itt	ge
 801270c:	460c      	movge	r4, r1
 801270e:	461f      	movge	r7, r3
 8012710:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012714:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012718:	68a3      	ldr	r3, [r4, #8]
 801271a:	6861      	ldr	r1, [r4, #4]
 801271c:	eb0a 0609 	add.w	r6, sl, r9
 8012720:	42b3      	cmp	r3, r6
 8012722:	b085      	sub	sp, #20
 8012724:	bfb8      	it	lt
 8012726:	3101      	addlt	r1, #1
 8012728:	f7ff fe92 	bl	8012450 <_Balloc>
 801272c:	b930      	cbnz	r0, 801273c <__multiply+0x44>
 801272e:	4602      	mov	r2, r0
 8012730:	4b44      	ldr	r3, [pc, #272]	@ (8012844 <__multiply+0x14c>)
 8012732:	4845      	ldr	r0, [pc, #276]	@ (8012848 <__multiply+0x150>)
 8012734:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012738:	f000 fdf2 	bl	8013320 <__assert_func>
 801273c:	f100 0514 	add.w	r5, r0, #20
 8012740:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012744:	462b      	mov	r3, r5
 8012746:	2200      	movs	r2, #0
 8012748:	4543      	cmp	r3, r8
 801274a:	d321      	bcc.n	8012790 <__multiply+0x98>
 801274c:	f107 0114 	add.w	r1, r7, #20
 8012750:	f104 0214 	add.w	r2, r4, #20
 8012754:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012758:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801275c:	9302      	str	r3, [sp, #8]
 801275e:	1b13      	subs	r3, r2, r4
 8012760:	3b15      	subs	r3, #21
 8012762:	f023 0303 	bic.w	r3, r3, #3
 8012766:	3304      	adds	r3, #4
 8012768:	f104 0715 	add.w	r7, r4, #21
 801276c:	42ba      	cmp	r2, r7
 801276e:	bf38      	it	cc
 8012770:	2304      	movcc	r3, #4
 8012772:	9301      	str	r3, [sp, #4]
 8012774:	9b02      	ldr	r3, [sp, #8]
 8012776:	9103      	str	r1, [sp, #12]
 8012778:	428b      	cmp	r3, r1
 801277a:	d80c      	bhi.n	8012796 <__multiply+0x9e>
 801277c:	2e00      	cmp	r6, #0
 801277e:	dd03      	ble.n	8012788 <__multiply+0x90>
 8012780:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012784:	2b00      	cmp	r3, #0
 8012786:	d05b      	beq.n	8012840 <__multiply+0x148>
 8012788:	6106      	str	r6, [r0, #16]
 801278a:	b005      	add	sp, #20
 801278c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012790:	f843 2b04 	str.w	r2, [r3], #4
 8012794:	e7d8      	b.n	8012748 <__multiply+0x50>
 8012796:	f8b1 a000 	ldrh.w	sl, [r1]
 801279a:	f1ba 0f00 	cmp.w	sl, #0
 801279e:	d024      	beq.n	80127ea <__multiply+0xf2>
 80127a0:	f104 0e14 	add.w	lr, r4, #20
 80127a4:	46a9      	mov	r9, r5
 80127a6:	f04f 0c00 	mov.w	ip, #0
 80127aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80127ae:	f8d9 3000 	ldr.w	r3, [r9]
 80127b2:	fa1f fb87 	uxth.w	fp, r7
 80127b6:	b29b      	uxth	r3, r3
 80127b8:	fb0a 330b 	mla	r3, sl, fp, r3
 80127bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80127c0:	f8d9 7000 	ldr.w	r7, [r9]
 80127c4:	4463      	add	r3, ip
 80127c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80127ca:	fb0a c70b 	mla	r7, sl, fp, ip
 80127ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80127d2:	b29b      	uxth	r3, r3
 80127d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80127d8:	4572      	cmp	r2, lr
 80127da:	f849 3b04 	str.w	r3, [r9], #4
 80127de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80127e2:	d8e2      	bhi.n	80127aa <__multiply+0xb2>
 80127e4:	9b01      	ldr	r3, [sp, #4]
 80127e6:	f845 c003 	str.w	ip, [r5, r3]
 80127ea:	9b03      	ldr	r3, [sp, #12]
 80127ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80127f0:	3104      	adds	r1, #4
 80127f2:	f1b9 0f00 	cmp.w	r9, #0
 80127f6:	d021      	beq.n	801283c <__multiply+0x144>
 80127f8:	682b      	ldr	r3, [r5, #0]
 80127fa:	f104 0c14 	add.w	ip, r4, #20
 80127fe:	46ae      	mov	lr, r5
 8012800:	f04f 0a00 	mov.w	sl, #0
 8012804:	f8bc b000 	ldrh.w	fp, [ip]
 8012808:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801280c:	fb09 770b 	mla	r7, r9, fp, r7
 8012810:	4457      	add	r7, sl
 8012812:	b29b      	uxth	r3, r3
 8012814:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012818:	f84e 3b04 	str.w	r3, [lr], #4
 801281c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012820:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012824:	f8be 3000 	ldrh.w	r3, [lr]
 8012828:	fb09 330a 	mla	r3, r9, sl, r3
 801282c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012830:	4562      	cmp	r2, ip
 8012832:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012836:	d8e5      	bhi.n	8012804 <__multiply+0x10c>
 8012838:	9f01      	ldr	r7, [sp, #4]
 801283a:	51eb      	str	r3, [r5, r7]
 801283c:	3504      	adds	r5, #4
 801283e:	e799      	b.n	8012774 <__multiply+0x7c>
 8012840:	3e01      	subs	r6, #1
 8012842:	e79b      	b.n	801277c <__multiply+0x84>
 8012844:	08014a05 	.word	0x08014a05
 8012848:	08014a76 	.word	0x08014a76

0801284c <__pow5mult>:
 801284c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012850:	4615      	mov	r5, r2
 8012852:	f012 0203 	ands.w	r2, r2, #3
 8012856:	4607      	mov	r7, r0
 8012858:	460e      	mov	r6, r1
 801285a:	d007      	beq.n	801286c <__pow5mult+0x20>
 801285c:	4c25      	ldr	r4, [pc, #148]	@ (80128f4 <__pow5mult+0xa8>)
 801285e:	3a01      	subs	r2, #1
 8012860:	2300      	movs	r3, #0
 8012862:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012866:	f7ff fe55 	bl	8012514 <__multadd>
 801286a:	4606      	mov	r6, r0
 801286c:	10ad      	asrs	r5, r5, #2
 801286e:	d03d      	beq.n	80128ec <__pow5mult+0xa0>
 8012870:	69fc      	ldr	r4, [r7, #28]
 8012872:	b97c      	cbnz	r4, 8012894 <__pow5mult+0x48>
 8012874:	2010      	movs	r0, #16
 8012876:	f7ff fd23 	bl	80122c0 <malloc>
 801287a:	4602      	mov	r2, r0
 801287c:	61f8      	str	r0, [r7, #28]
 801287e:	b928      	cbnz	r0, 801288c <__pow5mult+0x40>
 8012880:	4b1d      	ldr	r3, [pc, #116]	@ (80128f8 <__pow5mult+0xac>)
 8012882:	481e      	ldr	r0, [pc, #120]	@ (80128fc <__pow5mult+0xb0>)
 8012884:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012888:	f000 fd4a 	bl	8013320 <__assert_func>
 801288c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012890:	6004      	str	r4, [r0, #0]
 8012892:	60c4      	str	r4, [r0, #12]
 8012894:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012898:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801289c:	b94c      	cbnz	r4, 80128b2 <__pow5mult+0x66>
 801289e:	f240 2171 	movw	r1, #625	@ 0x271
 80128a2:	4638      	mov	r0, r7
 80128a4:	f7ff ff12 	bl	80126cc <__i2b>
 80128a8:	2300      	movs	r3, #0
 80128aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80128ae:	4604      	mov	r4, r0
 80128b0:	6003      	str	r3, [r0, #0]
 80128b2:	f04f 0900 	mov.w	r9, #0
 80128b6:	07eb      	lsls	r3, r5, #31
 80128b8:	d50a      	bpl.n	80128d0 <__pow5mult+0x84>
 80128ba:	4631      	mov	r1, r6
 80128bc:	4622      	mov	r2, r4
 80128be:	4638      	mov	r0, r7
 80128c0:	f7ff ff1a 	bl	80126f8 <__multiply>
 80128c4:	4631      	mov	r1, r6
 80128c6:	4680      	mov	r8, r0
 80128c8:	4638      	mov	r0, r7
 80128ca:	f7ff fe01 	bl	80124d0 <_Bfree>
 80128ce:	4646      	mov	r6, r8
 80128d0:	106d      	asrs	r5, r5, #1
 80128d2:	d00b      	beq.n	80128ec <__pow5mult+0xa0>
 80128d4:	6820      	ldr	r0, [r4, #0]
 80128d6:	b938      	cbnz	r0, 80128e8 <__pow5mult+0x9c>
 80128d8:	4622      	mov	r2, r4
 80128da:	4621      	mov	r1, r4
 80128dc:	4638      	mov	r0, r7
 80128de:	f7ff ff0b 	bl	80126f8 <__multiply>
 80128e2:	6020      	str	r0, [r4, #0]
 80128e4:	f8c0 9000 	str.w	r9, [r0]
 80128e8:	4604      	mov	r4, r0
 80128ea:	e7e4      	b.n	80128b6 <__pow5mult+0x6a>
 80128ec:	4630      	mov	r0, r6
 80128ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128f2:	bf00      	nop
 80128f4:	08014ad0 	.word	0x08014ad0
 80128f8:	08014996 	.word	0x08014996
 80128fc:	08014a76 	.word	0x08014a76

08012900 <__lshift>:
 8012900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012904:	460c      	mov	r4, r1
 8012906:	6849      	ldr	r1, [r1, #4]
 8012908:	6923      	ldr	r3, [r4, #16]
 801290a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801290e:	68a3      	ldr	r3, [r4, #8]
 8012910:	4607      	mov	r7, r0
 8012912:	4691      	mov	r9, r2
 8012914:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012918:	f108 0601 	add.w	r6, r8, #1
 801291c:	42b3      	cmp	r3, r6
 801291e:	db0b      	blt.n	8012938 <__lshift+0x38>
 8012920:	4638      	mov	r0, r7
 8012922:	f7ff fd95 	bl	8012450 <_Balloc>
 8012926:	4605      	mov	r5, r0
 8012928:	b948      	cbnz	r0, 801293e <__lshift+0x3e>
 801292a:	4602      	mov	r2, r0
 801292c:	4b28      	ldr	r3, [pc, #160]	@ (80129d0 <__lshift+0xd0>)
 801292e:	4829      	ldr	r0, [pc, #164]	@ (80129d4 <__lshift+0xd4>)
 8012930:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012934:	f000 fcf4 	bl	8013320 <__assert_func>
 8012938:	3101      	adds	r1, #1
 801293a:	005b      	lsls	r3, r3, #1
 801293c:	e7ee      	b.n	801291c <__lshift+0x1c>
 801293e:	2300      	movs	r3, #0
 8012940:	f100 0114 	add.w	r1, r0, #20
 8012944:	f100 0210 	add.w	r2, r0, #16
 8012948:	4618      	mov	r0, r3
 801294a:	4553      	cmp	r3, sl
 801294c:	db33      	blt.n	80129b6 <__lshift+0xb6>
 801294e:	6920      	ldr	r0, [r4, #16]
 8012950:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012954:	f104 0314 	add.w	r3, r4, #20
 8012958:	f019 091f 	ands.w	r9, r9, #31
 801295c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012960:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012964:	d02b      	beq.n	80129be <__lshift+0xbe>
 8012966:	f1c9 0e20 	rsb	lr, r9, #32
 801296a:	468a      	mov	sl, r1
 801296c:	2200      	movs	r2, #0
 801296e:	6818      	ldr	r0, [r3, #0]
 8012970:	fa00 f009 	lsl.w	r0, r0, r9
 8012974:	4310      	orrs	r0, r2
 8012976:	f84a 0b04 	str.w	r0, [sl], #4
 801297a:	f853 2b04 	ldr.w	r2, [r3], #4
 801297e:	459c      	cmp	ip, r3
 8012980:	fa22 f20e 	lsr.w	r2, r2, lr
 8012984:	d8f3      	bhi.n	801296e <__lshift+0x6e>
 8012986:	ebac 0304 	sub.w	r3, ip, r4
 801298a:	3b15      	subs	r3, #21
 801298c:	f023 0303 	bic.w	r3, r3, #3
 8012990:	3304      	adds	r3, #4
 8012992:	f104 0015 	add.w	r0, r4, #21
 8012996:	4584      	cmp	ip, r0
 8012998:	bf38      	it	cc
 801299a:	2304      	movcc	r3, #4
 801299c:	50ca      	str	r2, [r1, r3]
 801299e:	b10a      	cbz	r2, 80129a4 <__lshift+0xa4>
 80129a0:	f108 0602 	add.w	r6, r8, #2
 80129a4:	3e01      	subs	r6, #1
 80129a6:	4638      	mov	r0, r7
 80129a8:	612e      	str	r6, [r5, #16]
 80129aa:	4621      	mov	r1, r4
 80129ac:	f7ff fd90 	bl	80124d0 <_Bfree>
 80129b0:	4628      	mov	r0, r5
 80129b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80129ba:	3301      	adds	r3, #1
 80129bc:	e7c5      	b.n	801294a <__lshift+0x4a>
 80129be:	3904      	subs	r1, #4
 80129c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80129c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80129c8:	459c      	cmp	ip, r3
 80129ca:	d8f9      	bhi.n	80129c0 <__lshift+0xc0>
 80129cc:	e7ea      	b.n	80129a4 <__lshift+0xa4>
 80129ce:	bf00      	nop
 80129d0:	08014a05 	.word	0x08014a05
 80129d4:	08014a76 	.word	0x08014a76

080129d8 <__mcmp>:
 80129d8:	690a      	ldr	r2, [r1, #16]
 80129da:	4603      	mov	r3, r0
 80129dc:	6900      	ldr	r0, [r0, #16]
 80129de:	1a80      	subs	r0, r0, r2
 80129e0:	b530      	push	{r4, r5, lr}
 80129e2:	d10e      	bne.n	8012a02 <__mcmp+0x2a>
 80129e4:	3314      	adds	r3, #20
 80129e6:	3114      	adds	r1, #20
 80129e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80129ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80129f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80129f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80129f8:	4295      	cmp	r5, r2
 80129fa:	d003      	beq.n	8012a04 <__mcmp+0x2c>
 80129fc:	d205      	bcs.n	8012a0a <__mcmp+0x32>
 80129fe:	f04f 30ff 	mov.w	r0, #4294967295
 8012a02:	bd30      	pop	{r4, r5, pc}
 8012a04:	42a3      	cmp	r3, r4
 8012a06:	d3f3      	bcc.n	80129f0 <__mcmp+0x18>
 8012a08:	e7fb      	b.n	8012a02 <__mcmp+0x2a>
 8012a0a:	2001      	movs	r0, #1
 8012a0c:	e7f9      	b.n	8012a02 <__mcmp+0x2a>
	...

08012a10 <__mdiff>:
 8012a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a14:	4689      	mov	r9, r1
 8012a16:	4606      	mov	r6, r0
 8012a18:	4611      	mov	r1, r2
 8012a1a:	4648      	mov	r0, r9
 8012a1c:	4614      	mov	r4, r2
 8012a1e:	f7ff ffdb 	bl	80129d8 <__mcmp>
 8012a22:	1e05      	subs	r5, r0, #0
 8012a24:	d112      	bne.n	8012a4c <__mdiff+0x3c>
 8012a26:	4629      	mov	r1, r5
 8012a28:	4630      	mov	r0, r6
 8012a2a:	f7ff fd11 	bl	8012450 <_Balloc>
 8012a2e:	4602      	mov	r2, r0
 8012a30:	b928      	cbnz	r0, 8012a3e <__mdiff+0x2e>
 8012a32:	4b3f      	ldr	r3, [pc, #252]	@ (8012b30 <__mdiff+0x120>)
 8012a34:	f240 2137 	movw	r1, #567	@ 0x237
 8012a38:	483e      	ldr	r0, [pc, #248]	@ (8012b34 <__mdiff+0x124>)
 8012a3a:	f000 fc71 	bl	8013320 <__assert_func>
 8012a3e:	2301      	movs	r3, #1
 8012a40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012a44:	4610      	mov	r0, r2
 8012a46:	b003      	add	sp, #12
 8012a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a4c:	bfbc      	itt	lt
 8012a4e:	464b      	movlt	r3, r9
 8012a50:	46a1      	movlt	r9, r4
 8012a52:	4630      	mov	r0, r6
 8012a54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012a58:	bfba      	itte	lt
 8012a5a:	461c      	movlt	r4, r3
 8012a5c:	2501      	movlt	r5, #1
 8012a5e:	2500      	movge	r5, #0
 8012a60:	f7ff fcf6 	bl	8012450 <_Balloc>
 8012a64:	4602      	mov	r2, r0
 8012a66:	b918      	cbnz	r0, 8012a70 <__mdiff+0x60>
 8012a68:	4b31      	ldr	r3, [pc, #196]	@ (8012b30 <__mdiff+0x120>)
 8012a6a:	f240 2145 	movw	r1, #581	@ 0x245
 8012a6e:	e7e3      	b.n	8012a38 <__mdiff+0x28>
 8012a70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012a74:	6926      	ldr	r6, [r4, #16]
 8012a76:	60c5      	str	r5, [r0, #12]
 8012a78:	f109 0310 	add.w	r3, r9, #16
 8012a7c:	f109 0514 	add.w	r5, r9, #20
 8012a80:	f104 0e14 	add.w	lr, r4, #20
 8012a84:	f100 0b14 	add.w	fp, r0, #20
 8012a88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012a8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012a90:	9301      	str	r3, [sp, #4]
 8012a92:	46d9      	mov	r9, fp
 8012a94:	f04f 0c00 	mov.w	ip, #0
 8012a98:	9b01      	ldr	r3, [sp, #4]
 8012a9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012a9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012aa2:	9301      	str	r3, [sp, #4]
 8012aa4:	fa1f f38a 	uxth.w	r3, sl
 8012aa8:	4619      	mov	r1, r3
 8012aaa:	b283      	uxth	r3, r0
 8012aac:	1acb      	subs	r3, r1, r3
 8012aae:	0c00      	lsrs	r0, r0, #16
 8012ab0:	4463      	add	r3, ip
 8012ab2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012ab6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012aba:	b29b      	uxth	r3, r3
 8012abc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012ac0:	4576      	cmp	r6, lr
 8012ac2:	f849 3b04 	str.w	r3, [r9], #4
 8012ac6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012aca:	d8e5      	bhi.n	8012a98 <__mdiff+0x88>
 8012acc:	1b33      	subs	r3, r6, r4
 8012ace:	3b15      	subs	r3, #21
 8012ad0:	f023 0303 	bic.w	r3, r3, #3
 8012ad4:	3415      	adds	r4, #21
 8012ad6:	3304      	adds	r3, #4
 8012ad8:	42a6      	cmp	r6, r4
 8012ada:	bf38      	it	cc
 8012adc:	2304      	movcc	r3, #4
 8012ade:	441d      	add	r5, r3
 8012ae0:	445b      	add	r3, fp
 8012ae2:	461e      	mov	r6, r3
 8012ae4:	462c      	mov	r4, r5
 8012ae6:	4544      	cmp	r4, r8
 8012ae8:	d30e      	bcc.n	8012b08 <__mdiff+0xf8>
 8012aea:	f108 0103 	add.w	r1, r8, #3
 8012aee:	1b49      	subs	r1, r1, r5
 8012af0:	f021 0103 	bic.w	r1, r1, #3
 8012af4:	3d03      	subs	r5, #3
 8012af6:	45a8      	cmp	r8, r5
 8012af8:	bf38      	it	cc
 8012afa:	2100      	movcc	r1, #0
 8012afc:	440b      	add	r3, r1
 8012afe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012b02:	b191      	cbz	r1, 8012b2a <__mdiff+0x11a>
 8012b04:	6117      	str	r7, [r2, #16]
 8012b06:	e79d      	b.n	8012a44 <__mdiff+0x34>
 8012b08:	f854 1b04 	ldr.w	r1, [r4], #4
 8012b0c:	46e6      	mov	lr, ip
 8012b0e:	0c08      	lsrs	r0, r1, #16
 8012b10:	fa1c fc81 	uxtah	ip, ip, r1
 8012b14:	4471      	add	r1, lr
 8012b16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012b1a:	b289      	uxth	r1, r1
 8012b1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012b20:	f846 1b04 	str.w	r1, [r6], #4
 8012b24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012b28:	e7dd      	b.n	8012ae6 <__mdiff+0xd6>
 8012b2a:	3f01      	subs	r7, #1
 8012b2c:	e7e7      	b.n	8012afe <__mdiff+0xee>
 8012b2e:	bf00      	nop
 8012b30:	08014a05 	.word	0x08014a05
 8012b34:	08014a76 	.word	0x08014a76

08012b38 <__ulp>:
 8012b38:	b082      	sub	sp, #8
 8012b3a:	ed8d 0b00 	vstr	d0, [sp]
 8012b3e:	9a01      	ldr	r2, [sp, #4]
 8012b40:	4b0f      	ldr	r3, [pc, #60]	@ (8012b80 <__ulp+0x48>)
 8012b42:	4013      	ands	r3, r2
 8012b44:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	dc08      	bgt.n	8012b5e <__ulp+0x26>
 8012b4c:	425b      	negs	r3, r3
 8012b4e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012b52:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012b56:	da04      	bge.n	8012b62 <__ulp+0x2a>
 8012b58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012b5c:	4113      	asrs	r3, r2
 8012b5e:	2200      	movs	r2, #0
 8012b60:	e008      	b.n	8012b74 <__ulp+0x3c>
 8012b62:	f1a2 0314 	sub.w	r3, r2, #20
 8012b66:	2b1e      	cmp	r3, #30
 8012b68:	bfda      	itte	le
 8012b6a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012b6e:	40da      	lsrle	r2, r3
 8012b70:	2201      	movgt	r2, #1
 8012b72:	2300      	movs	r3, #0
 8012b74:	4619      	mov	r1, r3
 8012b76:	4610      	mov	r0, r2
 8012b78:	ec41 0b10 	vmov	d0, r0, r1
 8012b7c:	b002      	add	sp, #8
 8012b7e:	4770      	bx	lr
 8012b80:	7ff00000 	.word	0x7ff00000

08012b84 <__b2d>:
 8012b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b88:	6906      	ldr	r6, [r0, #16]
 8012b8a:	f100 0814 	add.w	r8, r0, #20
 8012b8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012b92:	1f37      	subs	r7, r6, #4
 8012b94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012b98:	4610      	mov	r0, r2
 8012b9a:	f7ff fd4b 	bl	8012634 <__hi0bits>
 8012b9e:	f1c0 0320 	rsb	r3, r0, #32
 8012ba2:	280a      	cmp	r0, #10
 8012ba4:	600b      	str	r3, [r1, #0]
 8012ba6:	491b      	ldr	r1, [pc, #108]	@ (8012c14 <__b2d+0x90>)
 8012ba8:	dc15      	bgt.n	8012bd6 <__b2d+0x52>
 8012baa:	f1c0 0c0b 	rsb	ip, r0, #11
 8012bae:	fa22 f30c 	lsr.w	r3, r2, ip
 8012bb2:	45b8      	cmp	r8, r7
 8012bb4:	ea43 0501 	orr.w	r5, r3, r1
 8012bb8:	bf34      	ite	cc
 8012bba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012bbe:	2300      	movcs	r3, #0
 8012bc0:	3015      	adds	r0, #21
 8012bc2:	fa02 f000 	lsl.w	r0, r2, r0
 8012bc6:	fa23 f30c 	lsr.w	r3, r3, ip
 8012bca:	4303      	orrs	r3, r0
 8012bcc:	461c      	mov	r4, r3
 8012bce:	ec45 4b10 	vmov	d0, r4, r5
 8012bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bd6:	45b8      	cmp	r8, r7
 8012bd8:	bf3a      	itte	cc
 8012bda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012bde:	f1a6 0708 	subcc.w	r7, r6, #8
 8012be2:	2300      	movcs	r3, #0
 8012be4:	380b      	subs	r0, #11
 8012be6:	d012      	beq.n	8012c0e <__b2d+0x8a>
 8012be8:	f1c0 0120 	rsb	r1, r0, #32
 8012bec:	fa23 f401 	lsr.w	r4, r3, r1
 8012bf0:	4082      	lsls	r2, r0
 8012bf2:	4322      	orrs	r2, r4
 8012bf4:	4547      	cmp	r7, r8
 8012bf6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012bfa:	bf8c      	ite	hi
 8012bfc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012c00:	2200      	movls	r2, #0
 8012c02:	4083      	lsls	r3, r0
 8012c04:	40ca      	lsrs	r2, r1
 8012c06:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012c0a:	4313      	orrs	r3, r2
 8012c0c:	e7de      	b.n	8012bcc <__b2d+0x48>
 8012c0e:	ea42 0501 	orr.w	r5, r2, r1
 8012c12:	e7db      	b.n	8012bcc <__b2d+0x48>
 8012c14:	3ff00000 	.word	0x3ff00000

08012c18 <__d2b>:
 8012c18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012c1c:	460f      	mov	r7, r1
 8012c1e:	2101      	movs	r1, #1
 8012c20:	ec59 8b10 	vmov	r8, r9, d0
 8012c24:	4616      	mov	r6, r2
 8012c26:	f7ff fc13 	bl	8012450 <_Balloc>
 8012c2a:	4604      	mov	r4, r0
 8012c2c:	b930      	cbnz	r0, 8012c3c <__d2b+0x24>
 8012c2e:	4602      	mov	r2, r0
 8012c30:	4b23      	ldr	r3, [pc, #140]	@ (8012cc0 <__d2b+0xa8>)
 8012c32:	4824      	ldr	r0, [pc, #144]	@ (8012cc4 <__d2b+0xac>)
 8012c34:	f240 310f 	movw	r1, #783	@ 0x30f
 8012c38:	f000 fb72 	bl	8013320 <__assert_func>
 8012c3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012c40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012c44:	b10d      	cbz	r5, 8012c4a <__d2b+0x32>
 8012c46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012c4a:	9301      	str	r3, [sp, #4]
 8012c4c:	f1b8 0300 	subs.w	r3, r8, #0
 8012c50:	d023      	beq.n	8012c9a <__d2b+0x82>
 8012c52:	4668      	mov	r0, sp
 8012c54:	9300      	str	r3, [sp, #0]
 8012c56:	f7ff fd0c 	bl	8012672 <__lo0bits>
 8012c5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012c5e:	b1d0      	cbz	r0, 8012c96 <__d2b+0x7e>
 8012c60:	f1c0 0320 	rsb	r3, r0, #32
 8012c64:	fa02 f303 	lsl.w	r3, r2, r3
 8012c68:	430b      	orrs	r3, r1
 8012c6a:	40c2      	lsrs	r2, r0
 8012c6c:	6163      	str	r3, [r4, #20]
 8012c6e:	9201      	str	r2, [sp, #4]
 8012c70:	9b01      	ldr	r3, [sp, #4]
 8012c72:	61a3      	str	r3, [r4, #24]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	bf0c      	ite	eq
 8012c78:	2201      	moveq	r2, #1
 8012c7a:	2202      	movne	r2, #2
 8012c7c:	6122      	str	r2, [r4, #16]
 8012c7e:	b1a5      	cbz	r5, 8012caa <__d2b+0x92>
 8012c80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012c84:	4405      	add	r5, r0
 8012c86:	603d      	str	r5, [r7, #0]
 8012c88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012c8c:	6030      	str	r0, [r6, #0]
 8012c8e:	4620      	mov	r0, r4
 8012c90:	b003      	add	sp, #12
 8012c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c96:	6161      	str	r1, [r4, #20]
 8012c98:	e7ea      	b.n	8012c70 <__d2b+0x58>
 8012c9a:	a801      	add	r0, sp, #4
 8012c9c:	f7ff fce9 	bl	8012672 <__lo0bits>
 8012ca0:	9b01      	ldr	r3, [sp, #4]
 8012ca2:	6163      	str	r3, [r4, #20]
 8012ca4:	3020      	adds	r0, #32
 8012ca6:	2201      	movs	r2, #1
 8012ca8:	e7e8      	b.n	8012c7c <__d2b+0x64>
 8012caa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012cae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012cb2:	6038      	str	r0, [r7, #0]
 8012cb4:	6918      	ldr	r0, [r3, #16]
 8012cb6:	f7ff fcbd 	bl	8012634 <__hi0bits>
 8012cba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012cbe:	e7e5      	b.n	8012c8c <__d2b+0x74>
 8012cc0:	08014a05 	.word	0x08014a05
 8012cc4:	08014a76 	.word	0x08014a76

08012cc8 <__ratio>:
 8012cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ccc:	b085      	sub	sp, #20
 8012cce:	e9cd 1000 	strd	r1, r0, [sp]
 8012cd2:	a902      	add	r1, sp, #8
 8012cd4:	f7ff ff56 	bl	8012b84 <__b2d>
 8012cd8:	9800      	ldr	r0, [sp, #0]
 8012cda:	a903      	add	r1, sp, #12
 8012cdc:	ec55 4b10 	vmov	r4, r5, d0
 8012ce0:	f7ff ff50 	bl	8012b84 <__b2d>
 8012ce4:	9b01      	ldr	r3, [sp, #4]
 8012ce6:	6919      	ldr	r1, [r3, #16]
 8012ce8:	9b00      	ldr	r3, [sp, #0]
 8012cea:	691b      	ldr	r3, [r3, #16]
 8012cec:	1ac9      	subs	r1, r1, r3
 8012cee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012cf2:	1a9b      	subs	r3, r3, r2
 8012cf4:	ec5b ab10 	vmov	sl, fp, d0
 8012cf8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	bfce      	itee	gt
 8012d00:	462a      	movgt	r2, r5
 8012d02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012d06:	465a      	movle	r2, fp
 8012d08:	462f      	mov	r7, r5
 8012d0a:	46d9      	mov	r9, fp
 8012d0c:	bfcc      	ite	gt
 8012d0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012d12:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012d16:	464b      	mov	r3, r9
 8012d18:	4652      	mov	r2, sl
 8012d1a:	4620      	mov	r0, r4
 8012d1c:	4639      	mov	r1, r7
 8012d1e:	f7ed fdbd 	bl	800089c <__aeabi_ddiv>
 8012d22:	ec41 0b10 	vmov	d0, r0, r1
 8012d26:	b005      	add	sp, #20
 8012d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012d2c <__copybits>:
 8012d2c:	3901      	subs	r1, #1
 8012d2e:	b570      	push	{r4, r5, r6, lr}
 8012d30:	1149      	asrs	r1, r1, #5
 8012d32:	6914      	ldr	r4, [r2, #16]
 8012d34:	3101      	adds	r1, #1
 8012d36:	f102 0314 	add.w	r3, r2, #20
 8012d3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012d3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012d42:	1f05      	subs	r5, r0, #4
 8012d44:	42a3      	cmp	r3, r4
 8012d46:	d30c      	bcc.n	8012d62 <__copybits+0x36>
 8012d48:	1aa3      	subs	r3, r4, r2
 8012d4a:	3b11      	subs	r3, #17
 8012d4c:	f023 0303 	bic.w	r3, r3, #3
 8012d50:	3211      	adds	r2, #17
 8012d52:	42a2      	cmp	r2, r4
 8012d54:	bf88      	it	hi
 8012d56:	2300      	movhi	r3, #0
 8012d58:	4418      	add	r0, r3
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	4288      	cmp	r0, r1
 8012d5e:	d305      	bcc.n	8012d6c <__copybits+0x40>
 8012d60:	bd70      	pop	{r4, r5, r6, pc}
 8012d62:	f853 6b04 	ldr.w	r6, [r3], #4
 8012d66:	f845 6f04 	str.w	r6, [r5, #4]!
 8012d6a:	e7eb      	b.n	8012d44 <__copybits+0x18>
 8012d6c:	f840 3b04 	str.w	r3, [r0], #4
 8012d70:	e7f4      	b.n	8012d5c <__copybits+0x30>

08012d72 <__any_on>:
 8012d72:	f100 0214 	add.w	r2, r0, #20
 8012d76:	6900      	ldr	r0, [r0, #16]
 8012d78:	114b      	asrs	r3, r1, #5
 8012d7a:	4298      	cmp	r0, r3
 8012d7c:	b510      	push	{r4, lr}
 8012d7e:	db11      	blt.n	8012da4 <__any_on+0x32>
 8012d80:	dd0a      	ble.n	8012d98 <__any_on+0x26>
 8012d82:	f011 011f 	ands.w	r1, r1, #31
 8012d86:	d007      	beq.n	8012d98 <__any_on+0x26>
 8012d88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012d8c:	fa24 f001 	lsr.w	r0, r4, r1
 8012d90:	fa00 f101 	lsl.w	r1, r0, r1
 8012d94:	428c      	cmp	r4, r1
 8012d96:	d10b      	bne.n	8012db0 <__any_on+0x3e>
 8012d98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012d9c:	4293      	cmp	r3, r2
 8012d9e:	d803      	bhi.n	8012da8 <__any_on+0x36>
 8012da0:	2000      	movs	r0, #0
 8012da2:	bd10      	pop	{r4, pc}
 8012da4:	4603      	mov	r3, r0
 8012da6:	e7f7      	b.n	8012d98 <__any_on+0x26>
 8012da8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012dac:	2900      	cmp	r1, #0
 8012dae:	d0f5      	beq.n	8012d9c <__any_on+0x2a>
 8012db0:	2001      	movs	r0, #1
 8012db2:	e7f6      	b.n	8012da2 <__any_on+0x30>

08012db4 <_strtol_l.constprop.0>:
 8012db4:	2b24      	cmp	r3, #36	@ 0x24
 8012db6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dba:	4686      	mov	lr, r0
 8012dbc:	4690      	mov	r8, r2
 8012dbe:	d801      	bhi.n	8012dc4 <_strtol_l.constprop.0+0x10>
 8012dc0:	2b01      	cmp	r3, #1
 8012dc2:	d106      	bne.n	8012dd2 <_strtol_l.constprop.0+0x1e>
 8012dc4:	f7fe f860 	bl	8010e88 <__errno>
 8012dc8:	2316      	movs	r3, #22
 8012dca:	6003      	str	r3, [r0, #0]
 8012dcc:	2000      	movs	r0, #0
 8012dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dd2:	4834      	ldr	r0, [pc, #208]	@ (8012ea4 <_strtol_l.constprop.0+0xf0>)
 8012dd4:	460d      	mov	r5, r1
 8012dd6:	462a      	mov	r2, r5
 8012dd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012ddc:	5d06      	ldrb	r6, [r0, r4]
 8012dde:	f016 0608 	ands.w	r6, r6, #8
 8012de2:	d1f8      	bne.n	8012dd6 <_strtol_l.constprop.0+0x22>
 8012de4:	2c2d      	cmp	r4, #45	@ 0x2d
 8012de6:	d12d      	bne.n	8012e44 <_strtol_l.constprop.0+0x90>
 8012de8:	782c      	ldrb	r4, [r5, #0]
 8012dea:	2601      	movs	r6, #1
 8012dec:	1c95      	adds	r5, r2, #2
 8012dee:	f033 0210 	bics.w	r2, r3, #16
 8012df2:	d109      	bne.n	8012e08 <_strtol_l.constprop.0+0x54>
 8012df4:	2c30      	cmp	r4, #48	@ 0x30
 8012df6:	d12a      	bne.n	8012e4e <_strtol_l.constprop.0+0x9a>
 8012df8:	782a      	ldrb	r2, [r5, #0]
 8012dfa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012dfe:	2a58      	cmp	r2, #88	@ 0x58
 8012e00:	d125      	bne.n	8012e4e <_strtol_l.constprop.0+0x9a>
 8012e02:	786c      	ldrb	r4, [r5, #1]
 8012e04:	2310      	movs	r3, #16
 8012e06:	3502      	adds	r5, #2
 8012e08:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012e0c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012e10:	2200      	movs	r2, #0
 8012e12:	fbbc f9f3 	udiv	r9, ip, r3
 8012e16:	4610      	mov	r0, r2
 8012e18:	fb03 ca19 	mls	sl, r3, r9, ip
 8012e1c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012e20:	2f09      	cmp	r7, #9
 8012e22:	d81b      	bhi.n	8012e5c <_strtol_l.constprop.0+0xa8>
 8012e24:	463c      	mov	r4, r7
 8012e26:	42a3      	cmp	r3, r4
 8012e28:	dd27      	ble.n	8012e7a <_strtol_l.constprop.0+0xc6>
 8012e2a:	1c57      	adds	r7, r2, #1
 8012e2c:	d007      	beq.n	8012e3e <_strtol_l.constprop.0+0x8a>
 8012e2e:	4581      	cmp	r9, r0
 8012e30:	d320      	bcc.n	8012e74 <_strtol_l.constprop.0+0xc0>
 8012e32:	d101      	bne.n	8012e38 <_strtol_l.constprop.0+0x84>
 8012e34:	45a2      	cmp	sl, r4
 8012e36:	db1d      	blt.n	8012e74 <_strtol_l.constprop.0+0xc0>
 8012e38:	fb00 4003 	mla	r0, r0, r3, r4
 8012e3c:	2201      	movs	r2, #1
 8012e3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012e42:	e7eb      	b.n	8012e1c <_strtol_l.constprop.0+0x68>
 8012e44:	2c2b      	cmp	r4, #43	@ 0x2b
 8012e46:	bf04      	itt	eq
 8012e48:	782c      	ldrbeq	r4, [r5, #0]
 8012e4a:	1c95      	addeq	r5, r2, #2
 8012e4c:	e7cf      	b.n	8012dee <_strtol_l.constprop.0+0x3a>
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d1da      	bne.n	8012e08 <_strtol_l.constprop.0+0x54>
 8012e52:	2c30      	cmp	r4, #48	@ 0x30
 8012e54:	bf0c      	ite	eq
 8012e56:	2308      	moveq	r3, #8
 8012e58:	230a      	movne	r3, #10
 8012e5a:	e7d5      	b.n	8012e08 <_strtol_l.constprop.0+0x54>
 8012e5c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012e60:	2f19      	cmp	r7, #25
 8012e62:	d801      	bhi.n	8012e68 <_strtol_l.constprop.0+0xb4>
 8012e64:	3c37      	subs	r4, #55	@ 0x37
 8012e66:	e7de      	b.n	8012e26 <_strtol_l.constprop.0+0x72>
 8012e68:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012e6c:	2f19      	cmp	r7, #25
 8012e6e:	d804      	bhi.n	8012e7a <_strtol_l.constprop.0+0xc6>
 8012e70:	3c57      	subs	r4, #87	@ 0x57
 8012e72:	e7d8      	b.n	8012e26 <_strtol_l.constprop.0+0x72>
 8012e74:	f04f 32ff 	mov.w	r2, #4294967295
 8012e78:	e7e1      	b.n	8012e3e <_strtol_l.constprop.0+0x8a>
 8012e7a:	1c53      	adds	r3, r2, #1
 8012e7c:	d108      	bne.n	8012e90 <_strtol_l.constprop.0+0xdc>
 8012e7e:	2322      	movs	r3, #34	@ 0x22
 8012e80:	f8ce 3000 	str.w	r3, [lr]
 8012e84:	4660      	mov	r0, ip
 8012e86:	f1b8 0f00 	cmp.w	r8, #0
 8012e8a:	d0a0      	beq.n	8012dce <_strtol_l.constprop.0+0x1a>
 8012e8c:	1e69      	subs	r1, r5, #1
 8012e8e:	e006      	b.n	8012e9e <_strtol_l.constprop.0+0xea>
 8012e90:	b106      	cbz	r6, 8012e94 <_strtol_l.constprop.0+0xe0>
 8012e92:	4240      	negs	r0, r0
 8012e94:	f1b8 0f00 	cmp.w	r8, #0
 8012e98:	d099      	beq.n	8012dce <_strtol_l.constprop.0+0x1a>
 8012e9a:	2a00      	cmp	r2, #0
 8012e9c:	d1f6      	bne.n	8012e8c <_strtol_l.constprop.0+0xd8>
 8012e9e:	f8c8 1000 	str.w	r1, [r8]
 8012ea2:	e794      	b.n	8012dce <_strtol_l.constprop.0+0x1a>
 8012ea4:	08014bd1 	.word	0x08014bd1

08012ea8 <_strtol_r>:
 8012ea8:	f7ff bf84 	b.w	8012db4 <_strtol_l.constprop.0>

08012eac <__ascii_wctomb>:
 8012eac:	4603      	mov	r3, r0
 8012eae:	4608      	mov	r0, r1
 8012eb0:	b141      	cbz	r1, 8012ec4 <__ascii_wctomb+0x18>
 8012eb2:	2aff      	cmp	r2, #255	@ 0xff
 8012eb4:	d904      	bls.n	8012ec0 <__ascii_wctomb+0x14>
 8012eb6:	228a      	movs	r2, #138	@ 0x8a
 8012eb8:	601a      	str	r2, [r3, #0]
 8012eba:	f04f 30ff 	mov.w	r0, #4294967295
 8012ebe:	4770      	bx	lr
 8012ec0:	700a      	strb	r2, [r1, #0]
 8012ec2:	2001      	movs	r0, #1
 8012ec4:	4770      	bx	lr

08012ec6 <__ssputs_r>:
 8012ec6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012eca:	688e      	ldr	r6, [r1, #8]
 8012ecc:	461f      	mov	r7, r3
 8012ece:	42be      	cmp	r6, r7
 8012ed0:	680b      	ldr	r3, [r1, #0]
 8012ed2:	4682      	mov	sl, r0
 8012ed4:	460c      	mov	r4, r1
 8012ed6:	4690      	mov	r8, r2
 8012ed8:	d82d      	bhi.n	8012f36 <__ssputs_r+0x70>
 8012eda:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012ede:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012ee2:	d026      	beq.n	8012f32 <__ssputs_r+0x6c>
 8012ee4:	6965      	ldr	r5, [r4, #20]
 8012ee6:	6909      	ldr	r1, [r1, #16]
 8012ee8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012eec:	eba3 0901 	sub.w	r9, r3, r1
 8012ef0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012ef4:	1c7b      	adds	r3, r7, #1
 8012ef6:	444b      	add	r3, r9
 8012ef8:	106d      	asrs	r5, r5, #1
 8012efa:	429d      	cmp	r5, r3
 8012efc:	bf38      	it	cc
 8012efe:	461d      	movcc	r5, r3
 8012f00:	0553      	lsls	r3, r2, #21
 8012f02:	d527      	bpl.n	8012f54 <__ssputs_r+0x8e>
 8012f04:	4629      	mov	r1, r5
 8012f06:	f7ff fa05 	bl	8012314 <_malloc_r>
 8012f0a:	4606      	mov	r6, r0
 8012f0c:	b360      	cbz	r0, 8012f68 <__ssputs_r+0xa2>
 8012f0e:	6921      	ldr	r1, [r4, #16]
 8012f10:	464a      	mov	r2, r9
 8012f12:	f7fd ffe6 	bl	8010ee2 <memcpy>
 8012f16:	89a3      	ldrh	r3, [r4, #12]
 8012f18:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012f20:	81a3      	strh	r3, [r4, #12]
 8012f22:	6126      	str	r6, [r4, #16]
 8012f24:	6165      	str	r5, [r4, #20]
 8012f26:	444e      	add	r6, r9
 8012f28:	eba5 0509 	sub.w	r5, r5, r9
 8012f2c:	6026      	str	r6, [r4, #0]
 8012f2e:	60a5      	str	r5, [r4, #8]
 8012f30:	463e      	mov	r6, r7
 8012f32:	42be      	cmp	r6, r7
 8012f34:	d900      	bls.n	8012f38 <__ssputs_r+0x72>
 8012f36:	463e      	mov	r6, r7
 8012f38:	6820      	ldr	r0, [r4, #0]
 8012f3a:	4632      	mov	r2, r6
 8012f3c:	4641      	mov	r1, r8
 8012f3e:	f000 f9c5 	bl	80132cc <memmove>
 8012f42:	68a3      	ldr	r3, [r4, #8]
 8012f44:	1b9b      	subs	r3, r3, r6
 8012f46:	60a3      	str	r3, [r4, #8]
 8012f48:	6823      	ldr	r3, [r4, #0]
 8012f4a:	4433      	add	r3, r6
 8012f4c:	6023      	str	r3, [r4, #0]
 8012f4e:	2000      	movs	r0, #0
 8012f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f54:	462a      	mov	r2, r5
 8012f56:	f000 fa15 	bl	8013384 <_realloc_r>
 8012f5a:	4606      	mov	r6, r0
 8012f5c:	2800      	cmp	r0, #0
 8012f5e:	d1e0      	bne.n	8012f22 <__ssputs_r+0x5c>
 8012f60:	6921      	ldr	r1, [r4, #16]
 8012f62:	4650      	mov	r0, sl
 8012f64:	f7fe fe28 	bl	8011bb8 <_free_r>
 8012f68:	230c      	movs	r3, #12
 8012f6a:	f8ca 3000 	str.w	r3, [sl]
 8012f6e:	89a3      	ldrh	r3, [r4, #12]
 8012f70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f74:	81a3      	strh	r3, [r4, #12]
 8012f76:	f04f 30ff 	mov.w	r0, #4294967295
 8012f7a:	e7e9      	b.n	8012f50 <__ssputs_r+0x8a>

08012f7c <_svfiprintf_r>:
 8012f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f80:	4698      	mov	r8, r3
 8012f82:	898b      	ldrh	r3, [r1, #12]
 8012f84:	061b      	lsls	r3, r3, #24
 8012f86:	b09d      	sub	sp, #116	@ 0x74
 8012f88:	4607      	mov	r7, r0
 8012f8a:	460d      	mov	r5, r1
 8012f8c:	4614      	mov	r4, r2
 8012f8e:	d510      	bpl.n	8012fb2 <_svfiprintf_r+0x36>
 8012f90:	690b      	ldr	r3, [r1, #16]
 8012f92:	b973      	cbnz	r3, 8012fb2 <_svfiprintf_r+0x36>
 8012f94:	2140      	movs	r1, #64	@ 0x40
 8012f96:	f7ff f9bd 	bl	8012314 <_malloc_r>
 8012f9a:	6028      	str	r0, [r5, #0]
 8012f9c:	6128      	str	r0, [r5, #16]
 8012f9e:	b930      	cbnz	r0, 8012fae <_svfiprintf_r+0x32>
 8012fa0:	230c      	movs	r3, #12
 8012fa2:	603b      	str	r3, [r7, #0]
 8012fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8012fa8:	b01d      	add	sp, #116	@ 0x74
 8012faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fae:	2340      	movs	r3, #64	@ 0x40
 8012fb0:	616b      	str	r3, [r5, #20]
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012fb6:	2320      	movs	r3, #32
 8012fb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012fbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8012fc0:	2330      	movs	r3, #48	@ 0x30
 8012fc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013160 <_svfiprintf_r+0x1e4>
 8012fc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012fca:	f04f 0901 	mov.w	r9, #1
 8012fce:	4623      	mov	r3, r4
 8012fd0:	469a      	mov	sl, r3
 8012fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012fd6:	b10a      	cbz	r2, 8012fdc <_svfiprintf_r+0x60>
 8012fd8:	2a25      	cmp	r2, #37	@ 0x25
 8012fda:	d1f9      	bne.n	8012fd0 <_svfiprintf_r+0x54>
 8012fdc:	ebba 0b04 	subs.w	fp, sl, r4
 8012fe0:	d00b      	beq.n	8012ffa <_svfiprintf_r+0x7e>
 8012fe2:	465b      	mov	r3, fp
 8012fe4:	4622      	mov	r2, r4
 8012fe6:	4629      	mov	r1, r5
 8012fe8:	4638      	mov	r0, r7
 8012fea:	f7ff ff6c 	bl	8012ec6 <__ssputs_r>
 8012fee:	3001      	adds	r0, #1
 8012ff0:	f000 80a7 	beq.w	8013142 <_svfiprintf_r+0x1c6>
 8012ff4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ff6:	445a      	add	r2, fp
 8012ff8:	9209      	str	r2, [sp, #36]	@ 0x24
 8012ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	f000 809f 	beq.w	8013142 <_svfiprintf_r+0x1c6>
 8013004:	2300      	movs	r3, #0
 8013006:	f04f 32ff 	mov.w	r2, #4294967295
 801300a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801300e:	f10a 0a01 	add.w	sl, sl, #1
 8013012:	9304      	str	r3, [sp, #16]
 8013014:	9307      	str	r3, [sp, #28]
 8013016:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801301a:	931a      	str	r3, [sp, #104]	@ 0x68
 801301c:	4654      	mov	r4, sl
 801301e:	2205      	movs	r2, #5
 8013020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013024:	484e      	ldr	r0, [pc, #312]	@ (8013160 <_svfiprintf_r+0x1e4>)
 8013026:	f7ed f8fb 	bl	8000220 <memchr>
 801302a:	9a04      	ldr	r2, [sp, #16]
 801302c:	b9d8      	cbnz	r0, 8013066 <_svfiprintf_r+0xea>
 801302e:	06d0      	lsls	r0, r2, #27
 8013030:	bf44      	itt	mi
 8013032:	2320      	movmi	r3, #32
 8013034:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013038:	0711      	lsls	r1, r2, #28
 801303a:	bf44      	itt	mi
 801303c:	232b      	movmi	r3, #43	@ 0x2b
 801303e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013042:	f89a 3000 	ldrb.w	r3, [sl]
 8013046:	2b2a      	cmp	r3, #42	@ 0x2a
 8013048:	d015      	beq.n	8013076 <_svfiprintf_r+0xfa>
 801304a:	9a07      	ldr	r2, [sp, #28]
 801304c:	4654      	mov	r4, sl
 801304e:	2000      	movs	r0, #0
 8013050:	f04f 0c0a 	mov.w	ip, #10
 8013054:	4621      	mov	r1, r4
 8013056:	f811 3b01 	ldrb.w	r3, [r1], #1
 801305a:	3b30      	subs	r3, #48	@ 0x30
 801305c:	2b09      	cmp	r3, #9
 801305e:	d94b      	bls.n	80130f8 <_svfiprintf_r+0x17c>
 8013060:	b1b0      	cbz	r0, 8013090 <_svfiprintf_r+0x114>
 8013062:	9207      	str	r2, [sp, #28]
 8013064:	e014      	b.n	8013090 <_svfiprintf_r+0x114>
 8013066:	eba0 0308 	sub.w	r3, r0, r8
 801306a:	fa09 f303 	lsl.w	r3, r9, r3
 801306e:	4313      	orrs	r3, r2
 8013070:	9304      	str	r3, [sp, #16]
 8013072:	46a2      	mov	sl, r4
 8013074:	e7d2      	b.n	801301c <_svfiprintf_r+0xa0>
 8013076:	9b03      	ldr	r3, [sp, #12]
 8013078:	1d19      	adds	r1, r3, #4
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	9103      	str	r1, [sp, #12]
 801307e:	2b00      	cmp	r3, #0
 8013080:	bfbb      	ittet	lt
 8013082:	425b      	neglt	r3, r3
 8013084:	f042 0202 	orrlt.w	r2, r2, #2
 8013088:	9307      	strge	r3, [sp, #28]
 801308a:	9307      	strlt	r3, [sp, #28]
 801308c:	bfb8      	it	lt
 801308e:	9204      	strlt	r2, [sp, #16]
 8013090:	7823      	ldrb	r3, [r4, #0]
 8013092:	2b2e      	cmp	r3, #46	@ 0x2e
 8013094:	d10a      	bne.n	80130ac <_svfiprintf_r+0x130>
 8013096:	7863      	ldrb	r3, [r4, #1]
 8013098:	2b2a      	cmp	r3, #42	@ 0x2a
 801309a:	d132      	bne.n	8013102 <_svfiprintf_r+0x186>
 801309c:	9b03      	ldr	r3, [sp, #12]
 801309e:	1d1a      	adds	r2, r3, #4
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	9203      	str	r2, [sp, #12]
 80130a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80130a8:	3402      	adds	r4, #2
 80130aa:	9305      	str	r3, [sp, #20]
 80130ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013170 <_svfiprintf_r+0x1f4>
 80130b0:	7821      	ldrb	r1, [r4, #0]
 80130b2:	2203      	movs	r2, #3
 80130b4:	4650      	mov	r0, sl
 80130b6:	f7ed f8b3 	bl	8000220 <memchr>
 80130ba:	b138      	cbz	r0, 80130cc <_svfiprintf_r+0x150>
 80130bc:	9b04      	ldr	r3, [sp, #16]
 80130be:	eba0 000a 	sub.w	r0, r0, sl
 80130c2:	2240      	movs	r2, #64	@ 0x40
 80130c4:	4082      	lsls	r2, r0
 80130c6:	4313      	orrs	r3, r2
 80130c8:	3401      	adds	r4, #1
 80130ca:	9304      	str	r3, [sp, #16]
 80130cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130d0:	4824      	ldr	r0, [pc, #144]	@ (8013164 <_svfiprintf_r+0x1e8>)
 80130d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80130d6:	2206      	movs	r2, #6
 80130d8:	f7ed f8a2 	bl	8000220 <memchr>
 80130dc:	2800      	cmp	r0, #0
 80130de:	d036      	beq.n	801314e <_svfiprintf_r+0x1d2>
 80130e0:	4b21      	ldr	r3, [pc, #132]	@ (8013168 <_svfiprintf_r+0x1ec>)
 80130e2:	bb1b      	cbnz	r3, 801312c <_svfiprintf_r+0x1b0>
 80130e4:	9b03      	ldr	r3, [sp, #12]
 80130e6:	3307      	adds	r3, #7
 80130e8:	f023 0307 	bic.w	r3, r3, #7
 80130ec:	3308      	adds	r3, #8
 80130ee:	9303      	str	r3, [sp, #12]
 80130f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130f2:	4433      	add	r3, r6
 80130f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80130f6:	e76a      	b.n	8012fce <_svfiprintf_r+0x52>
 80130f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80130fc:	460c      	mov	r4, r1
 80130fe:	2001      	movs	r0, #1
 8013100:	e7a8      	b.n	8013054 <_svfiprintf_r+0xd8>
 8013102:	2300      	movs	r3, #0
 8013104:	3401      	adds	r4, #1
 8013106:	9305      	str	r3, [sp, #20]
 8013108:	4619      	mov	r1, r3
 801310a:	f04f 0c0a 	mov.w	ip, #10
 801310e:	4620      	mov	r0, r4
 8013110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013114:	3a30      	subs	r2, #48	@ 0x30
 8013116:	2a09      	cmp	r2, #9
 8013118:	d903      	bls.n	8013122 <_svfiprintf_r+0x1a6>
 801311a:	2b00      	cmp	r3, #0
 801311c:	d0c6      	beq.n	80130ac <_svfiprintf_r+0x130>
 801311e:	9105      	str	r1, [sp, #20]
 8013120:	e7c4      	b.n	80130ac <_svfiprintf_r+0x130>
 8013122:	fb0c 2101 	mla	r1, ip, r1, r2
 8013126:	4604      	mov	r4, r0
 8013128:	2301      	movs	r3, #1
 801312a:	e7f0      	b.n	801310e <_svfiprintf_r+0x192>
 801312c:	ab03      	add	r3, sp, #12
 801312e:	9300      	str	r3, [sp, #0]
 8013130:	462a      	mov	r2, r5
 8013132:	4b0e      	ldr	r3, [pc, #56]	@ (801316c <_svfiprintf_r+0x1f0>)
 8013134:	a904      	add	r1, sp, #16
 8013136:	4638      	mov	r0, r7
 8013138:	f7fc ff30 	bl	800ff9c <_printf_float>
 801313c:	1c42      	adds	r2, r0, #1
 801313e:	4606      	mov	r6, r0
 8013140:	d1d6      	bne.n	80130f0 <_svfiprintf_r+0x174>
 8013142:	89ab      	ldrh	r3, [r5, #12]
 8013144:	065b      	lsls	r3, r3, #25
 8013146:	f53f af2d 	bmi.w	8012fa4 <_svfiprintf_r+0x28>
 801314a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801314c:	e72c      	b.n	8012fa8 <_svfiprintf_r+0x2c>
 801314e:	ab03      	add	r3, sp, #12
 8013150:	9300      	str	r3, [sp, #0]
 8013152:	462a      	mov	r2, r5
 8013154:	4b05      	ldr	r3, [pc, #20]	@ (801316c <_svfiprintf_r+0x1f0>)
 8013156:	a904      	add	r1, sp, #16
 8013158:	4638      	mov	r0, r7
 801315a:	f7fd f9b7 	bl	80104cc <_printf_i>
 801315e:	e7ed      	b.n	801313c <_svfiprintf_r+0x1c0>
 8013160:	08014cd1 	.word	0x08014cd1
 8013164:	08014cdb 	.word	0x08014cdb
 8013168:	0800ff9d 	.word	0x0800ff9d
 801316c:	08012ec7 	.word	0x08012ec7
 8013170:	08014cd7 	.word	0x08014cd7

08013174 <__sflush_r>:
 8013174:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801317c:	0716      	lsls	r6, r2, #28
 801317e:	4605      	mov	r5, r0
 8013180:	460c      	mov	r4, r1
 8013182:	d454      	bmi.n	801322e <__sflush_r+0xba>
 8013184:	684b      	ldr	r3, [r1, #4]
 8013186:	2b00      	cmp	r3, #0
 8013188:	dc02      	bgt.n	8013190 <__sflush_r+0x1c>
 801318a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801318c:	2b00      	cmp	r3, #0
 801318e:	dd48      	ble.n	8013222 <__sflush_r+0xae>
 8013190:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013192:	2e00      	cmp	r6, #0
 8013194:	d045      	beq.n	8013222 <__sflush_r+0xae>
 8013196:	2300      	movs	r3, #0
 8013198:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801319c:	682f      	ldr	r7, [r5, #0]
 801319e:	6a21      	ldr	r1, [r4, #32]
 80131a0:	602b      	str	r3, [r5, #0]
 80131a2:	d030      	beq.n	8013206 <__sflush_r+0x92>
 80131a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80131a6:	89a3      	ldrh	r3, [r4, #12]
 80131a8:	0759      	lsls	r1, r3, #29
 80131aa:	d505      	bpl.n	80131b8 <__sflush_r+0x44>
 80131ac:	6863      	ldr	r3, [r4, #4]
 80131ae:	1ad2      	subs	r2, r2, r3
 80131b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80131b2:	b10b      	cbz	r3, 80131b8 <__sflush_r+0x44>
 80131b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80131b6:	1ad2      	subs	r2, r2, r3
 80131b8:	2300      	movs	r3, #0
 80131ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80131bc:	6a21      	ldr	r1, [r4, #32]
 80131be:	4628      	mov	r0, r5
 80131c0:	47b0      	blx	r6
 80131c2:	1c43      	adds	r3, r0, #1
 80131c4:	89a3      	ldrh	r3, [r4, #12]
 80131c6:	d106      	bne.n	80131d6 <__sflush_r+0x62>
 80131c8:	6829      	ldr	r1, [r5, #0]
 80131ca:	291d      	cmp	r1, #29
 80131cc:	d82b      	bhi.n	8013226 <__sflush_r+0xb2>
 80131ce:	4a2a      	ldr	r2, [pc, #168]	@ (8013278 <__sflush_r+0x104>)
 80131d0:	410a      	asrs	r2, r1
 80131d2:	07d6      	lsls	r6, r2, #31
 80131d4:	d427      	bmi.n	8013226 <__sflush_r+0xb2>
 80131d6:	2200      	movs	r2, #0
 80131d8:	6062      	str	r2, [r4, #4]
 80131da:	04d9      	lsls	r1, r3, #19
 80131dc:	6922      	ldr	r2, [r4, #16]
 80131de:	6022      	str	r2, [r4, #0]
 80131e0:	d504      	bpl.n	80131ec <__sflush_r+0x78>
 80131e2:	1c42      	adds	r2, r0, #1
 80131e4:	d101      	bne.n	80131ea <__sflush_r+0x76>
 80131e6:	682b      	ldr	r3, [r5, #0]
 80131e8:	b903      	cbnz	r3, 80131ec <__sflush_r+0x78>
 80131ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80131ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80131ee:	602f      	str	r7, [r5, #0]
 80131f0:	b1b9      	cbz	r1, 8013222 <__sflush_r+0xae>
 80131f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80131f6:	4299      	cmp	r1, r3
 80131f8:	d002      	beq.n	8013200 <__sflush_r+0x8c>
 80131fa:	4628      	mov	r0, r5
 80131fc:	f7fe fcdc 	bl	8011bb8 <_free_r>
 8013200:	2300      	movs	r3, #0
 8013202:	6363      	str	r3, [r4, #52]	@ 0x34
 8013204:	e00d      	b.n	8013222 <__sflush_r+0xae>
 8013206:	2301      	movs	r3, #1
 8013208:	4628      	mov	r0, r5
 801320a:	47b0      	blx	r6
 801320c:	4602      	mov	r2, r0
 801320e:	1c50      	adds	r0, r2, #1
 8013210:	d1c9      	bne.n	80131a6 <__sflush_r+0x32>
 8013212:	682b      	ldr	r3, [r5, #0]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d0c6      	beq.n	80131a6 <__sflush_r+0x32>
 8013218:	2b1d      	cmp	r3, #29
 801321a:	d001      	beq.n	8013220 <__sflush_r+0xac>
 801321c:	2b16      	cmp	r3, #22
 801321e:	d11e      	bne.n	801325e <__sflush_r+0xea>
 8013220:	602f      	str	r7, [r5, #0]
 8013222:	2000      	movs	r0, #0
 8013224:	e022      	b.n	801326c <__sflush_r+0xf8>
 8013226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801322a:	b21b      	sxth	r3, r3
 801322c:	e01b      	b.n	8013266 <__sflush_r+0xf2>
 801322e:	690f      	ldr	r7, [r1, #16]
 8013230:	2f00      	cmp	r7, #0
 8013232:	d0f6      	beq.n	8013222 <__sflush_r+0xae>
 8013234:	0793      	lsls	r3, r2, #30
 8013236:	680e      	ldr	r6, [r1, #0]
 8013238:	bf08      	it	eq
 801323a:	694b      	ldreq	r3, [r1, #20]
 801323c:	600f      	str	r7, [r1, #0]
 801323e:	bf18      	it	ne
 8013240:	2300      	movne	r3, #0
 8013242:	eba6 0807 	sub.w	r8, r6, r7
 8013246:	608b      	str	r3, [r1, #8]
 8013248:	f1b8 0f00 	cmp.w	r8, #0
 801324c:	dde9      	ble.n	8013222 <__sflush_r+0xae>
 801324e:	6a21      	ldr	r1, [r4, #32]
 8013250:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013252:	4643      	mov	r3, r8
 8013254:	463a      	mov	r2, r7
 8013256:	4628      	mov	r0, r5
 8013258:	47b0      	blx	r6
 801325a:	2800      	cmp	r0, #0
 801325c:	dc08      	bgt.n	8013270 <__sflush_r+0xfc>
 801325e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013266:	81a3      	strh	r3, [r4, #12]
 8013268:	f04f 30ff 	mov.w	r0, #4294967295
 801326c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013270:	4407      	add	r7, r0
 8013272:	eba8 0800 	sub.w	r8, r8, r0
 8013276:	e7e7      	b.n	8013248 <__sflush_r+0xd4>
 8013278:	dfbffffe 	.word	0xdfbffffe

0801327c <_fflush_r>:
 801327c:	b538      	push	{r3, r4, r5, lr}
 801327e:	690b      	ldr	r3, [r1, #16]
 8013280:	4605      	mov	r5, r0
 8013282:	460c      	mov	r4, r1
 8013284:	b913      	cbnz	r3, 801328c <_fflush_r+0x10>
 8013286:	2500      	movs	r5, #0
 8013288:	4628      	mov	r0, r5
 801328a:	bd38      	pop	{r3, r4, r5, pc}
 801328c:	b118      	cbz	r0, 8013296 <_fflush_r+0x1a>
 801328e:	6a03      	ldr	r3, [r0, #32]
 8013290:	b90b      	cbnz	r3, 8013296 <_fflush_r+0x1a>
 8013292:	f7fd fcdb 	bl	8010c4c <__sinit>
 8013296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d0f3      	beq.n	8013286 <_fflush_r+0xa>
 801329e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80132a0:	07d0      	lsls	r0, r2, #31
 80132a2:	d404      	bmi.n	80132ae <_fflush_r+0x32>
 80132a4:	0599      	lsls	r1, r3, #22
 80132a6:	d402      	bmi.n	80132ae <_fflush_r+0x32>
 80132a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80132aa:	f7fd fe18 	bl	8010ede <__retarget_lock_acquire_recursive>
 80132ae:	4628      	mov	r0, r5
 80132b0:	4621      	mov	r1, r4
 80132b2:	f7ff ff5f 	bl	8013174 <__sflush_r>
 80132b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80132b8:	07da      	lsls	r2, r3, #31
 80132ba:	4605      	mov	r5, r0
 80132bc:	d4e4      	bmi.n	8013288 <_fflush_r+0xc>
 80132be:	89a3      	ldrh	r3, [r4, #12]
 80132c0:	059b      	lsls	r3, r3, #22
 80132c2:	d4e1      	bmi.n	8013288 <_fflush_r+0xc>
 80132c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80132c6:	f7fd fe0b 	bl	8010ee0 <__retarget_lock_release_recursive>
 80132ca:	e7dd      	b.n	8013288 <_fflush_r+0xc>

080132cc <memmove>:
 80132cc:	4288      	cmp	r0, r1
 80132ce:	b510      	push	{r4, lr}
 80132d0:	eb01 0402 	add.w	r4, r1, r2
 80132d4:	d902      	bls.n	80132dc <memmove+0x10>
 80132d6:	4284      	cmp	r4, r0
 80132d8:	4623      	mov	r3, r4
 80132da:	d807      	bhi.n	80132ec <memmove+0x20>
 80132dc:	1e43      	subs	r3, r0, #1
 80132de:	42a1      	cmp	r1, r4
 80132e0:	d008      	beq.n	80132f4 <memmove+0x28>
 80132e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80132e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80132ea:	e7f8      	b.n	80132de <memmove+0x12>
 80132ec:	4402      	add	r2, r0
 80132ee:	4601      	mov	r1, r0
 80132f0:	428a      	cmp	r2, r1
 80132f2:	d100      	bne.n	80132f6 <memmove+0x2a>
 80132f4:	bd10      	pop	{r4, pc}
 80132f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80132fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80132fe:	e7f7      	b.n	80132f0 <memmove+0x24>

08013300 <_sbrk_r>:
 8013300:	b538      	push	{r3, r4, r5, lr}
 8013302:	4d06      	ldr	r5, [pc, #24]	@ (801331c <_sbrk_r+0x1c>)
 8013304:	2300      	movs	r3, #0
 8013306:	4604      	mov	r4, r0
 8013308:	4608      	mov	r0, r1
 801330a:	602b      	str	r3, [r5, #0]
 801330c:	f7ee fdf8 	bl	8001f00 <_sbrk>
 8013310:	1c43      	adds	r3, r0, #1
 8013312:	d102      	bne.n	801331a <_sbrk_r+0x1a>
 8013314:	682b      	ldr	r3, [r5, #0]
 8013316:	b103      	cbz	r3, 801331a <_sbrk_r+0x1a>
 8013318:	6023      	str	r3, [r4, #0]
 801331a:	bd38      	pop	{r3, r4, r5, pc}
 801331c:	20000e3c 	.word	0x20000e3c

08013320 <__assert_func>:
 8013320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013322:	4614      	mov	r4, r2
 8013324:	461a      	mov	r2, r3
 8013326:	4b09      	ldr	r3, [pc, #36]	@ (801334c <__assert_func+0x2c>)
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	4605      	mov	r5, r0
 801332c:	68d8      	ldr	r0, [r3, #12]
 801332e:	b954      	cbnz	r4, 8013346 <__assert_func+0x26>
 8013330:	4b07      	ldr	r3, [pc, #28]	@ (8013350 <__assert_func+0x30>)
 8013332:	461c      	mov	r4, r3
 8013334:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013338:	9100      	str	r1, [sp, #0]
 801333a:	462b      	mov	r3, r5
 801333c:	4905      	ldr	r1, [pc, #20]	@ (8013354 <__assert_func+0x34>)
 801333e:	f000 f84f 	bl	80133e0 <fiprintf>
 8013342:	f000 f85f 	bl	8013404 <abort>
 8013346:	4b04      	ldr	r3, [pc, #16]	@ (8013358 <__assert_func+0x38>)
 8013348:	e7f4      	b.n	8013334 <__assert_func+0x14>
 801334a:	bf00      	nop
 801334c:	20000248 	.word	0x20000248
 8013350:	08014d1d 	.word	0x08014d1d
 8013354:	08014cef 	.word	0x08014cef
 8013358:	08014ce2 	.word	0x08014ce2

0801335c <_calloc_r>:
 801335c:	b570      	push	{r4, r5, r6, lr}
 801335e:	fba1 5402 	umull	r5, r4, r1, r2
 8013362:	b93c      	cbnz	r4, 8013374 <_calloc_r+0x18>
 8013364:	4629      	mov	r1, r5
 8013366:	f7fe ffd5 	bl	8012314 <_malloc_r>
 801336a:	4606      	mov	r6, r0
 801336c:	b928      	cbnz	r0, 801337a <_calloc_r+0x1e>
 801336e:	2600      	movs	r6, #0
 8013370:	4630      	mov	r0, r6
 8013372:	bd70      	pop	{r4, r5, r6, pc}
 8013374:	220c      	movs	r2, #12
 8013376:	6002      	str	r2, [r0, #0]
 8013378:	e7f9      	b.n	801336e <_calloc_r+0x12>
 801337a:	462a      	mov	r2, r5
 801337c:	4621      	mov	r1, r4
 801337e:	f7fd fd1f 	bl	8010dc0 <memset>
 8013382:	e7f5      	b.n	8013370 <_calloc_r+0x14>

08013384 <_realloc_r>:
 8013384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013388:	4680      	mov	r8, r0
 801338a:	4615      	mov	r5, r2
 801338c:	460c      	mov	r4, r1
 801338e:	b921      	cbnz	r1, 801339a <_realloc_r+0x16>
 8013390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013394:	4611      	mov	r1, r2
 8013396:	f7fe bfbd 	b.w	8012314 <_malloc_r>
 801339a:	b92a      	cbnz	r2, 80133a8 <_realloc_r+0x24>
 801339c:	f7fe fc0c 	bl	8011bb8 <_free_r>
 80133a0:	2400      	movs	r4, #0
 80133a2:	4620      	mov	r0, r4
 80133a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133a8:	f000 f833 	bl	8013412 <_malloc_usable_size_r>
 80133ac:	4285      	cmp	r5, r0
 80133ae:	4606      	mov	r6, r0
 80133b0:	d802      	bhi.n	80133b8 <_realloc_r+0x34>
 80133b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80133b6:	d8f4      	bhi.n	80133a2 <_realloc_r+0x1e>
 80133b8:	4629      	mov	r1, r5
 80133ba:	4640      	mov	r0, r8
 80133bc:	f7fe ffaa 	bl	8012314 <_malloc_r>
 80133c0:	4607      	mov	r7, r0
 80133c2:	2800      	cmp	r0, #0
 80133c4:	d0ec      	beq.n	80133a0 <_realloc_r+0x1c>
 80133c6:	42b5      	cmp	r5, r6
 80133c8:	462a      	mov	r2, r5
 80133ca:	4621      	mov	r1, r4
 80133cc:	bf28      	it	cs
 80133ce:	4632      	movcs	r2, r6
 80133d0:	f7fd fd87 	bl	8010ee2 <memcpy>
 80133d4:	4621      	mov	r1, r4
 80133d6:	4640      	mov	r0, r8
 80133d8:	f7fe fbee 	bl	8011bb8 <_free_r>
 80133dc:	463c      	mov	r4, r7
 80133de:	e7e0      	b.n	80133a2 <_realloc_r+0x1e>

080133e0 <fiprintf>:
 80133e0:	b40e      	push	{r1, r2, r3}
 80133e2:	b503      	push	{r0, r1, lr}
 80133e4:	4601      	mov	r1, r0
 80133e6:	ab03      	add	r3, sp, #12
 80133e8:	4805      	ldr	r0, [pc, #20]	@ (8013400 <fiprintf+0x20>)
 80133ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80133ee:	6800      	ldr	r0, [r0, #0]
 80133f0:	9301      	str	r3, [sp, #4]
 80133f2:	f000 f83f 	bl	8013474 <_vfiprintf_r>
 80133f6:	b002      	add	sp, #8
 80133f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80133fc:	b003      	add	sp, #12
 80133fe:	4770      	bx	lr
 8013400:	20000248 	.word	0x20000248

08013404 <abort>:
 8013404:	b508      	push	{r3, lr}
 8013406:	2006      	movs	r0, #6
 8013408:	f000 fa08 	bl	801381c <raise>
 801340c:	2001      	movs	r0, #1
 801340e:	f7ee fcff 	bl	8001e10 <_exit>

08013412 <_malloc_usable_size_r>:
 8013412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013416:	1f18      	subs	r0, r3, #4
 8013418:	2b00      	cmp	r3, #0
 801341a:	bfbc      	itt	lt
 801341c:	580b      	ldrlt	r3, [r1, r0]
 801341e:	18c0      	addlt	r0, r0, r3
 8013420:	4770      	bx	lr

08013422 <__sfputc_r>:
 8013422:	6893      	ldr	r3, [r2, #8]
 8013424:	3b01      	subs	r3, #1
 8013426:	2b00      	cmp	r3, #0
 8013428:	b410      	push	{r4}
 801342a:	6093      	str	r3, [r2, #8]
 801342c:	da08      	bge.n	8013440 <__sfputc_r+0x1e>
 801342e:	6994      	ldr	r4, [r2, #24]
 8013430:	42a3      	cmp	r3, r4
 8013432:	db01      	blt.n	8013438 <__sfputc_r+0x16>
 8013434:	290a      	cmp	r1, #10
 8013436:	d103      	bne.n	8013440 <__sfputc_r+0x1e>
 8013438:	f85d 4b04 	ldr.w	r4, [sp], #4
 801343c:	f000 b932 	b.w	80136a4 <__swbuf_r>
 8013440:	6813      	ldr	r3, [r2, #0]
 8013442:	1c58      	adds	r0, r3, #1
 8013444:	6010      	str	r0, [r2, #0]
 8013446:	7019      	strb	r1, [r3, #0]
 8013448:	4608      	mov	r0, r1
 801344a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801344e:	4770      	bx	lr

08013450 <__sfputs_r>:
 8013450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013452:	4606      	mov	r6, r0
 8013454:	460f      	mov	r7, r1
 8013456:	4614      	mov	r4, r2
 8013458:	18d5      	adds	r5, r2, r3
 801345a:	42ac      	cmp	r4, r5
 801345c:	d101      	bne.n	8013462 <__sfputs_r+0x12>
 801345e:	2000      	movs	r0, #0
 8013460:	e007      	b.n	8013472 <__sfputs_r+0x22>
 8013462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013466:	463a      	mov	r2, r7
 8013468:	4630      	mov	r0, r6
 801346a:	f7ff ffda 	bl	8013422 <__sfputc_r>
 801346e:	1c43      	adds	r3, r0, #1
 8013470:	d1f3      	bne.n	801345a <__sfputs_r+0xa>
 8013472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013474 <_vfiprintf_r>:
 8013474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013478:	460d      	mov	r5, r1
 801347a:	b09d      	sub	sp, #116	@ 0x74
 801347c:	4614      	mov	r4, r2
 801347e:	4698      	mov	r8, r3
 8013480:	4606      	mov	r6, r0
 8013482:	b118      	cbz	r0, 801348c <_vfiprintf_r+0x18>
 8013484:	6a03      	ldr	r3, [r0, #32]
 8013486:	b90b      	cbnz	r3, 801348c <_vfiprintf_r+0x18>
 8013488:	f7fd fbe0 	bl	8010c4c <__sinit>
 801348c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801348e:	07d9      	lsls	r1, r3, #31
 8013490:	d405      	bmi.n	801349e <_vfiprintf_r+0x2a>
 8013492:	89ab      	ldrh	r3, [r5, #12]
 8013494:	059a      	lsls	r2, r3, #22
 8013496:	d402      	bmi.n	801349e <_vfiprintf_r+0x2a>
 8013498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801349a:	f7fd fd20 	bl	8010ede <__retarget_lock_acquire_recursive>
 801349e:	89ab      	ldrh	r3, [r5, #12]
 80134a0:	071b      	lsls	r3, r3, #28
 80134a2:	d501      	bpl.n	80134a8 <_vfiprintf_r+0x34>
 80134a4:	692b      	ldr	r3, [r5, #16]
 80134a6:	b99b      	cbnz	r3, 80134d0 <_vfiprintf_r+0x5c>
 80134a8:	4629      	mov	r1, r5
 80134aa:	4630      	mov	r0, r6
 80134ac:	f000 f938 	bl	8013720 <__swsetup_r>
 80134b0:	b170      	cbz	r0, 80134d0 <_vfiprintf_r+0x5c>
 80134b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80134b4:	07dc      	lsls	r4, r3, #31
 80134b6:	d504      	bpl.n	80134c2 <_vfiprintf_r+0x4e>
 80134b8:	f04f 30ff 	mov.w	r0, #4294967295
 80134bc:	b01d      	add	sp, #116	@ 0x74
 80134be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134c2:	89ab      	ldrh	r3, [r5, #12]
 80134c4:	0598      	lsls	r0, r3, #22
 80134c6:	d4f7      	bmi.n	80134b8 <_vfiprintf_r+0x44>
 80134c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80134ca:	f7fd fd09 	bl	8010ee0 <__retarget_lock_release_recursive>
 80134ce:	e7f3      	b.n	80134b8 <_vfiprintf_r+0x44>
 80134d0:	2300      	movs	r3, #0
 80134d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80134d4:	2320      	movs	r3, #32
 80134d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80134da:	f8cd 800c 	str.w	r8, [sp, #12]
 80134de:	2330      	movs	r3, #48	@ 0x30
 80134e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013690 <_vfiprintf_r+0x21c>
 80134e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80134e8:	f04f 0901 	mov.w	r9, #1
 80134ec:	4623      	mov	r3, r4
 80134ee:	469a      	mov	sl, r3
 80134f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134f4:	b10a      	cbz	r2, 80134fa <_vfiprintf_r+0x86>
 80134f6:	2a25      	cmp	r2, #37	@ 0x25
 80134f8:	d1f9      	bne.n	80134ee <_vfiprintf_r+0x7a>
 80134fa:	ebba 0b04 	subs.w	fp, sl, r4
 80134fe:	d00b      	beq.n	8013518 <_vfiprintf_r+0xa4>
 8013500:	465b      	mov	r3, fp
 8013502:	4622      	mov	r2, r4
 8013504:	4629      	mov	r1, r5
 8013506:	4630      	mov	r0, r6
 8013508:	f7ff ffa2 	bl	8013450 <__sfputs_r>
 801350c:	3001      	adds	r0, #1
 801350e:	f000 80a7 	beq.w	8013660 <_vfiprintf_r+0x1ec>
 8013512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013514:	445a      	add	r2, fp
 8013516:	9209      	str	r2, [sp, #36]	@ 0x24
 8013518:	f89a 3000 	ldrb.w	r3, [sl]
 801351c:	2b00      	cmp	r3, #0
 801351e:	f000 809f 	beq.w	8013660 <_vfiprintf_r+0x1ec>
 8013522:	2300      	movs	r3, #0
 8013524:	f04f 32ff 	mov.w	r2, #4294967295
 8013528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801352c:	f10a 0a01 	add.w	sl, sl, #1
 8013530:	9304      	str	r3, [sp, #16]
 8013532:	9307      	str	r3, [sp, #28]
 8013534:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013538:	931a      	str	r3, [sp, #104]	@ 0x68
 801353a:	4654      	mov	r4, sl
 801353c:	2205      	movs	r2, #5
 801353e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013542:	4853      	ldr	r0, [pc, #332]	@ (8013690 <_vfiprintf_r+0x21c>)
 8013544:	f7ec fe6c 	bl	8000220 <memchr>
 8013548:	9a04      	ldr	r2, [sp, #16]
 801354a:	b9d8      	cbnz	r0, 8013584 <_vfiprintf_r+0x110>
 801354c:	06d1      	lsls	r1, r2, #27
 801354e:	bf44      	itt	mi
 8013550:	2320      	movmi	r3, #32
 8013552:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013556:	0713      	lsls	r3, r2, #28
 8013558:	bf44      	itt	mi
 801355a:	232b      	movmi	r3, #43	@ 0x2b
 801355c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013560:	f89a 3000 	ldrb.w	r3, [sl]
 8013564:	2b2a      	cmp	r3, #42	@ 0x2a
 8013566:	d015      	beq.n	8013594 <_vfiprintf_r+0x120>
 8013568:	9a07      	ldr	r2, [sp, #28]
 801356a:	4654      	mov	r4, sl
 801356c:	2000      	movs	r0, #0
 801356e:	f04f 0c0a 	mov.w	ip, #10
 8013572:	4621      	mov	r1, r4
 8013574:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013578:	3b30      	subs	r3, #48	@ 0x30
 801357a:	2b09      	cmp	r3, #9
 801357c:	d94b      	bls.n	8013616 <_vfiprintf_r+0x1a2>
 801357e:	b1b0      	cbz	r0, 80135ae <_vfiprintf_r+0x13a>
 8013580:	9207      	str	r2, [sp, #28]
 8013582:	e014      	b.n	80135ae <_vfiprintf_r+0x13a>
 8013584:	eba0 0308 	sub.w	r3, r0, r8
 8013588:	fa09 f303 	lsl.w	r3, r9, r3
 801358c:	4313      	orrs	r3, r2
 801358e:	9304      	str	r3, [sp, #16]
 8013590:	46a2      	mov	sl, r4
 8013592:	e7d2      	b.n	801353a <_vfiprintf_r+0xc6>
 8013594:	9b03      	ldr	r3, [sp, #12]
 8013596:	1d19      	adds	r1, r3, #4
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	9103      	str	r1, [sp, #12]
 801359c:	2b00      	cmp	r3, #0
 801359e:	bfbb      	ittet	lt
 80135a0:	425b      	neglt	r3, r3
 80135a2:	f042 0202 	orrlt.w	r2, r2, #2
 80135a6:	9307      	strge	r3, [sp, #28]
 80135a8:	9307      	strlt	r3, [sp, #28]
 80135aa:	bfb8      	it	lt
 80135ac:	9204      	strlt	r2, [sp, #16]
 80135ae:	7823      	ldrb	r3, [r4, #0]
 80135b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80135b2:	d10a      	bne.n	80135ca <_vfiprintf_r+0x156>
 80135b4:	7863      	ldrb	r3, [r4, #1]
 80135b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80135b8:	d132      	bne.n	8013620 <_vfiprintf_r+0x1ac>
 80135ba:	9b03      	ldr	r3, [sp, #12]
 80135bc:	1d1a      	adds	r2, r3, #4
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	9203      	str	r2, [sp, #12]
 80135c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80135c6:	3402      	adds	r4, #2
 80135c8:	9305      	str	r3, [sp, #20]
 80135ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80136a0 <_vfiprintf_r+0x22c>
 80135ce:	7821      	ldrb	r1, [r4, #0]
 80135d0:	2203      	movs	r2, #3
 80135d2:	4650      	mov	r0, sl
 80135d4:	f7ec fe24 	bl	8000220 <memchr>
 80135d8:	b138      	cbz	r0, 80135ea <_vfiprintf_r+0x176>
 80135da:	9b04      	ldr	r3, [sp, #16]
 80135dc:	eba0 000a 	sub.w	r0, r0, sl
 80135e0:	2240      	movs	r2, #64	@ 0x40
 80135e2:	4082      	lsls	r2, r0
 80135e4:	4313      	orrs	r3, r2
 80135e6:	3401      	adds	r4, #1
 80135e8:	9304      	str	r3, [sp, #16]
 80135ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135ee:	4829      	ldr	r0, [pc, #164]	@ (8013694 <_vfiprintf_r+0x220>)
 80135f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80135f4:	2206      	movs	r2, #6
 80135f6:	f7ec fe13 	bl	8000220 <memchr>
 80135fa:	2800      	cmp	r0, #0
 80135fc:	d03f      	beq.n	801367e <_vfiprintf_r+0x20a>
 80135fe:	4b26      	ldr	r3, [pc, #152]	@ (8013698 <_vfiprintf_r+0x224>)
 8013600:	bb1b      	cbnz	r3, 801364a <_vfiprintf_r+0x1d6>
 8013602:	9b03      	ldr	r3, [sp, #12]
 8013604:	3307      	adds	r3, #7
 8013606:	f023 0307 	bic.w	r3, r3, #7
 801360a:	3308      	adds	r3, #8
 801360c:	9303      	str	r3, [sp, #12]
 801360e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013610:	443b      	add	r3, r7
 8013612:	9309      	str	r3, [sp, #36]	@ 0x24
 8013614:	e76a      	b.n	80134ec <_vfiprintf_r+0x78>
 8013616:	fb0c 3202 	mla	r2, ip, r2, r3
 801361a:	460c      	mov	r4, r1
 801361c:	2001      	movs	r0, #1
 801361e:	e7a8      	b.n	8013572 <_vfiprintf_r+0xfe>
 8013620:	2300      	movs	r3, #0
 8013622:	3401      	adds	r4, #1
 8013624:	9305      	str	r3, [sp, #20]
 8013626:	4619      	mov	r1, r3
 8013628:	f04f 0c0a 	mov.w	ip, #10
 801362c:	4620      	mov	r0, r4
 801362e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013632:	3a30      	subs	r2, #48	@ 0x30
 8013634:	2a09      	cmp	r2, #9
 8013636:	d903      	bls.n	8013640 <_vfiprintf_r+0x1cc>
 8013638:	2b00      	cmp	r3, #0
 801363a:	d0c6      	beq.n	80135ca <_vfiprintf_r+0x156>
 801363c:	9105      	str	r1, [sp, #20]
 801363e:	e7c4      	b.n	80135ca <_vfiprintf_r+0x156>
 8013640:	fb0c 2101 	mla	r1, ip, r1, r2
 8013644:	4604      	mov	r4, r0
 8013646:	2301      	movs	r3, #1
 8013648:	e7f0      	b.n	801362c <_vfiprintf_r+0x1b8>
 801364a:	ab03      	add	r3, sp, #12
 801364c:	9300      	str	r3, [sp, #0]
 801364e:	462a      	mov	r2, r5
 8013650:	4b12      	ldr	r3, [pc, #72]	@ (801369c <_vfiprintf_r+0x228>)
 8013652:	a904      	add	r1, sp, #16
 8013654:	4630      	mov	r0, r6
 8013656:	f7fc fca1 	bl	800ff9c <_printf_float>
 801365a:	4607      	mov	r7, r0
 801365c:	1c78      	adds	r0, r7, #1
 801365e:	d1d6      	bne.n	801360e <_vfiprintf_r+0x19a>
 8013660:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013662:	07d9      	lsls	r1, r3, #31
 8013664:	d405      	bmi.n	8013672 <_vfiprintf_r+0x1fe>
 8013666:	89ab      	ldrh	r3, [r5, #12]
 8013668:	059a      	lsls	r2, r3, #22
 801366a:	d402      	bmi.n	8013672 <_vfiprintf_r+0x1fe>
 801366c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801366e:	f7fd fc37 	bl	8010ee0 <__retarget_lock_release_recursive>
 8013672:	89ab      	ldrh	r3, [r5, #12]
 8013674:	065b      	lsls	r3, r3, #25
 8013676:	f53f af1f 	bmi.w	80134b8 <_vfiprintf_r+0x44>
 801367a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801367c:	e71e      	b.n	80134bc <_vfiprintf_r+0x48>
 801367e:	ab03      	add	r3, sp, #12
 8013680:	9300      	str	r3, [sp, #0]
 8013682:	462a      	mov	r2, r5
 8013684:	4b05      	ldr	r3, [pc, #20]	@ (801369c <_vfiprintf_r+0x228>)
 8013686:	a904      	add	r1, sp, #16
 8013688:	4630      	mov	r0, r6
 801368a:	f7fc ff1f 	bl	80104cc <_printf_i>
 801368e:	e7e4      	b.n	801365a <_vfiprintf_r+0x1e6>
 8013690:	08014cd1 	.word	0x08014cd1
 8013694:	08014cdb 	.word	0x08014cdb
 8013698:	0800ff9d 	.word	0x0800ff9d
 801369c:	08013451 	.word	0x08013451
 80136a0:	08014cd7 	.word	0x08014cd7

080136a4 <__swbuf_r>:
 80136a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136a6:	460e      	mov	r6, r1
 80136a8:	4614      	mov	r4, r2
 80136aa:	4605      	mov	r5, r0
 80136ac:	b118      	cbz	r0, 80136b6 <__swbuf_r+0x12>
 80136ae:	6a03      	ldr	r3, [r0, #32]
 80136b0:	b90b      	cbnz	r3, 80136b6 <__swbuf_r+0x12>
 80136b2:	f7fd facb 	bl	8010c4c <__sinit>
 80136b6:	69a3      	ldr	r3, [r4, #24]
 80136b8:	60a3      	str	r3, [r4, #8]
 80136ba:	89a3      	ldrh	r3, [r4, #12]
 80136bc:	071a      	lsls	r2, r3, #28
 80136be:	d501      	bpl.n	80136c4 <__swbuf_r+0x20>
 80136c0:	6923      	ldr	r3, [r4, #16]
 80136c2:	b943      	cbnz	r3, 80136d6 <__swbuf_r+0x32>
 80136c4:	4621      	mov	r1, r4
 80136c6:	4628      	mov	r0, r5
 80136c8:	f000 f82a 	bl	8013720 <__swsetup_r>
 80136cc:	b118      	cbz	r0, 80136d6 <__swbuf_r+0x32>
 80136ce:	f04f 37ff 	mov.w	r7, #4294967295
 80136d2:	4638      	mov	r0, r7
 80136d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136d6:	6823      	ldr	r3, [r4, #0]
 80136d8:	6922      	ldr	r2, [r4, #16]
 80136da:	1a98      	subs	r0, r3, r2
 80136dc:	6963      	ldr	r3, [r4, #20]
 80136de:	b2f6      	uxtb	r6, r6
 80136e0:	4283      	cmp	r3, r0
 80136e2:	4637      	mov	r7, r6
 80136e4:	dc05      	bgt.n	80136f2 <__swbuf_r+0x4e>
 80136e6:	4621      	mov	r1, r4
 80136e8:	4628      	mov	r0, r5
 80136ea:	f7ff fdc7 	bl	801327c <_fflush_r>
 80136ee:	2800      	cmp	r0, #0
 80136f0:	d1ed      	bne.n	80136ce <__swbuf_r+0x2a>
 80136f2:	68a3      	ldr	r3, [r4, #8]
 80136f4:	3b01      	subs	r3, #1
 80136f6:	60a3      	str	r3, [r4, #8]
 80136f8:	6823      	ldr	r3, [r4, #0]
 80136fa:	1c5a      	adds	r2, r3, #1
 80136fc:	6022      	str	r2, [r4, #0]
 80136fe:	701e      	strb	r6, [r3, #0]
 8013700:	6962      	ldr	r2, [r4, #20]
 8013702:	1c43      	adds	r3, r0, #1
 8013704:	429a      	cmp	r2, r3
 8013706:	d004      	beq.n	8013712 <__swbuf_r+0x6e>
 8013708:	89a3      	ldrh	r3, [r4, #12]
 801370a:	07db      	lsls	r3, r3, #31
 801370c:	d5e1      	bpl.n	80136d2 <__swbuf_r+0x2e>
 801370e:	2e0a      	cmp	r6, #10
 8013710:	d1df      	bne.n	80136d2 <__swbuf_r+0x2e>
 8013712:	4621      	mov	r1, r4
 8013714:	4628      	mov	r0, r5
 8013716:	f7ff fdb1 	bl	801327c <_fflush_r>
 801371a:	2800      	cmp	r0, #0
 801371c:	d0d9      	beq.n	80136d2 <__swbuf_r+0x2e>
 801371e:	e7d6      	b.n	80136ce <__swbuf_r+0x2a>

08013720 <__swsetup_r>:
 8013720:	b538      	push	{r3, r4, r5, lr}
 8013722:	4b29      	ldr	r3, [pc, #164]	@ (80137c8 <__swsetup_r+0xa8>)
 8013724:	4605      	mov	r5, r0
 8013726:	6818      	ldr	r0, [r3, #0]
 8013728:	460c      	mov	r4, r1
 801372a:	b118      	cbz	r0, 8013734 <__swsetup_r+0x14>
 801372c:	6a03      	ldr	r3, [r0, #32]
 801372e:	b90b      	cbnz	r3, 8013734 <__swsetup_r+0x14>
 8013730:	f7fd fa8c 	bl	8010c4c <__sinit>
 8013734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013738:	0719      	lsls	r1, r3, #28
 801373a:	d422      	bmi.n	8013782 <__swsetup_r+0x62>
 801373c:	06da      	lsls	r2, r3, #27
 801373e:	d407      	bmi.n	8013750 <__swsetup_r+0x30>
 8013740:	2209      	movs	r2, #9
 8013742:	602a      	str	r2, [r5, #0]
 8013744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013748:	81a3      	strh	r3, [r4, #12]
 801374a:	f04f 30ff 	mov.w	r0, #4294967295
 801374e:	e033      	b.n	80137b8 <__swsetup_r+0x98>
 8013750:	0758      	lsls	r0, r3, #29
 8013752:	d512      	bpl.n	801377a <__swsetup_r+0x5a>
 8013754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013756:	b141      	cbz	r1, 801376a <__swsetup_r+0x4a>
 8013758:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801375c:	4299      	cmp	r1, r3
 801375e:	d002      	beq.n	8013766 <__swsetup_r+0x46>
 8013760:	4628      	mov	r0, r5
 8013762:	f7fe fa29 	bl	8011bb8 <_free_r>
 8013766:	2300      	movs	r3, #0
 8013768:	6363      	str	r3, [r4, #52]	@ 0x34
 801376a:	89a3      	ldrh	r3, [r4, #12]
 801376c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013770:	81a3      	strh	r3, [r4, #12]
 8013772:	2300      	movs	r3, #0
 8013774:	6063      	str	r3, [r4, #4]
 8013776:	6923      	ldr	r3, [r4, #16]
 8013778:	6023      	str	r3, [r4, #0]
 801377a:	89a3      	ldrh	r3, [r4, #12]
 801377c:	f043 0308 	orr.w	r3, r3, #8
 8013780:	81a3      	strh	r3, [r4, #12]
 8013782:	6923      	ldr	r3, [r4, #16]
 8013784:	b94b      	cbnz	r3, 801379a <__swsetup_r+0x7a>
 8013786:	89a3      	ldrh	r3, [r4, #12]
 8013788:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801378c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013790:	d003      	beq.n	801379a <__swsetup_r+0x7a>
 8013792:	4621      	mov	r1, r4
 8013794:	4628      	mov	r0, r5
 8013796:	f000 f883 	bl	80138a0 <__smakebuf_r>
 801379a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801379e:	f013 0201 	ands.w	r2, r3, #1
 80137a2:	d00a      	beq.n	80137ba <__swsetup_r+0x9a>
 80137a4:	2200      	movs	r2, #0
 80137a6:	60a2      	str	r2, [r4, #8]
 80137a8:	6962      	ldr	r2, [r4, #20]
 80137aa:	4252      	negs	r2, r2
 80137ac:	61a2      	str	r2, [r4, #24]
 80137ae:	6922      	ldr	r2, [r4, #16]
 80137b0:	b942      	cbnz	r2, 80137c4 <__swsetup_r+0xa4>
 80137b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80137b6:	d1c5      	bne.n	8013744 <__swsetup_r+0x24>
 80137b8:	bd38      	pop	{r3, r4, r5, pc}
 80137ba:	0799      	lsls	r1, r3, #30
 80137bc:	bf58      	it	pl
 80137be:	6962      	ldrpl	r2, [r4, #20]
 80137c0:	60a2      	str	r2, [r4, #8]
 80137c2:	e7f4      	b.n	80137ae <__swsetup_r+0x8e>
 80137c4:	2000      	movs	r0, #0
 80137c6:	e7f7      	b.n	80137b8 <__swsetup_r+0x98>
 80137c8:	20000248 	.word	0x20000248

080137cc <_raise_r>:
 80137cc:	291f      	cmp	r1, #31
 80137ce:	b538      	push	{r3, r4, r5, lr}
 80137d0:	4605      	mov	r5, r0
 80137d2:	460c      	mov	r4, r1
 80137d4:	d904      	bls.n	80137e0 <_raise_r+0x14>
 80137d6:	2316      	movs	r3, #22
 80137d8:	6003      	str	r3, [r0, #0]
 80137da:	f04f 30ff 	mov.w	r0, #4294967295
 80137de:	bd38      	pop	{r3, r4, r5, pc}
 80137e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80137e2:	b112      	cbz	r2, 80137ea <_raise_r+0x1e>
 80137e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80137e8:	b94b      	cbnz	r3, 80137fe <_raise_r+0x32>
 80137ea:	4628      	mov	r0, r5
 80137ec:	f000 f830 	bl	8013850 <_getpid_r>
 80137f0:	4622      	mov	r2, r4
 80137f2:	4601      	mov	r1, r0
 80137f4:	4628      	mov	r0, r5
 80137f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80137fa:	f000 b817 	b.w	801382c <_kill_r>
 80137fe:	2b01      	cmp	r3, #1
 8013800:	d00a      	beq.n	8013818 <_raise_r+0x4c>
 8013802:	1c59      	adds	r1, r3, #1
 8013804:	d103      	bne.n	801380e <_raise_r+0x42>
 8013806:	2316      	movs	r3, #22
 8013808:	6003      	str	r3, [r0, #0]
 801380a:	2001      	movs	r0, #1
 801380c:	e7e7      	b.n	80137de <_raise_r+0x12>
 801380e:	2100      	movs	r1, #0
 8013810:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013814:	4620      	mov	r0, r4
 8013816:	4798      	blx	r3
 8013818:	2000      	movs	r0, #0
 801381a:	e7e0      	b.n	80137de <_raise_r+0x12>

0801381c <raise>:
 801381c:	4b02      	ldr	r3, [pc, #8]	@ (8013828 <raise+0xc>)
 801381e:	4601      	mov	r1, r0
 8013820:	6818      	ldr	r0, [r3, #0]
 8013822:	f7ff bfd3 	b.w	80137cc <_raise_r>
 8013826:	bf00      	nop
 8013828:	20000248 	.word	0x20000248

0801382c <_kill_r>:
 801382c:	b538      	push	{r3, r4, r5, lr}
 801382e:	4d07      	ldr	r5, [pc, #28]	@ (801384c <_kill_r+0x20>)
 8013830:	2300      	movs	r3, #0
 8013832:	4604      	mov	r4, r0
 8013834:	4608      	mov	r0, r1
 8013836:	4611      	mov	r1, r2
 8013838:	602b      	str	r3, [r5, #0]
 801383a:	f7ee fad9 	bl	8001df0 <_kill>
 801383e:	1c43      	adds	r3, r0, #1
 8013840:	d102      	bne.n	8013848 <_kill_r+0x1c>
 8013842:	682b      	ldr	r3, [r5, #0]
 8013844:	b103      	cbz	r3, 8013848 <_kill_r+0x1c>
 8013846:	6023      	str	r3, [r4, #0]
 8013848:	bd38      	pop	{r3, r4, r5, pc}
 801384a:	bf00      	nop
 801384c:	20000e3c 	.word	0x20000e3c

08013850 <_getpid_r>:
 8013850:	f7ee bac6 	b.w	8001de0 <_getpid>

08013854 <__swhatbuf_r>:
 8013854:	b570      	push	{r4, r5, r6, lr}
 8013856:	460c      	mov	r4, r1
 8013858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801385c:	2900      	cmp	r1, #0
 801385e:	b096      	sub	sp, #88	@ 0x58
 8013860:	4615      	mov	r5, r2
 8013862:	461e      	mov	r6, r3
 8013864:	da0d      	bge.n	8013882 <__swhatbuf_r+0x2e>
 8013866:	89a3      	ldrh	r3, [r4, #12]
 8013868:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801386c:	f04f 0100 	mov.w	r1, #0
 8013870:	bf14      	ite	ne
 8013872:	2340      	movne	r3, #64	@ 0x40
 8013874:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013878:	2000      	movs	r0, #0
 801387a:	6031      	str	r1, [r6, #0]
 801387c:	602b      	str	r3, [r5, #0]
 801387e:	b016      	add	sp, #88	@ 0x58
 8013880:	bd70      	pop	{r4, r5, r6, pc}
 8013882:	466a      	mov	r2, sp
 8013884:	f000 f848 	bl	8013918 <_fstat_r>
 8013888:	2800      	cmp	r0, #0
 801388a:	dbec      	blt.n	8013866 <__swhatbuf_r+0x12>
 801388c:	9901      	ldr	r1, [sp, #4]
 801388e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013892:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013896:	4259      	negs	r1, r3
 8013898:	4159      	adcs	r1, r3
 801389a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801389e:	e7eb      	b.n	8013878 <__swhatbuf_r+0x24>

080138a0 <__smakebuf_r>:
 80138a0:	898b      	ldrh	r3, [r1, #12]
 80138a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80138a4:	079d      	lsls	r5, r3, #30
 80138a6:	4606      	mov	r6, r0
 80138a8:	460c      	mov	r4, r1
 80138aa:	d507      	bpl.n	80138bc <__smakebuf_r+0x1c>
 80138ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80138b0:	6023      	str	r3, [r4, #0]
 80138b2:	6123      	str	r3, [r4, #16]
 80138b4:	2301      	movs	r3, #1
 80138b6:	6163      	str	r3, [r4, #20]
 80138b8:	b003      	add	sp, #12
 80138ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138bc:	ab01      	add	r3, sp, #4
 80138be:	466a      	mov	r2, sp
 80138c0:	f7ff ffc8 	bl	8013854 <__swhatbuf_r>
 80138c4:	9f00      	ldr	r7, [sp, #0]
 80138c6:	4605      	mov	r5, r0
 80138c8:	4639      	mov	r1, r7
 80138ca:	4630      	mov	r0, r6
 80138cc:	f7fe fd22 	bl	8012314 <_malloc_r>
 80138d0:	b948      	cbnz	r0, 80138e6 <__smakebuf_r+0x46>
 80138d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138d6:	059a      	lsls	r2, r3, #22
 80138d8:	d4ee      	bmi.n	80138b8 <__smakebuf_r+0x18>
 80138da:	f023 0303 	bic.w	r3, r3, #3
 80138de:	f043 0302 	orr.w	r3, r3, #2
 80138e2:	81a3      	strh	r3, [r4, #12]
 80138e4:	e7e2      	b.n	80138ac <__smakebuf_r+0xc>
 80138e6:	89a3      	ldrh	r3, [r4, #12]
 80138e8:	6020      	str	r0, [r4, #0]
 80138ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80138ee:	81a3      	strh	r3, [r4, #12]
 80138f0:	9b01      	ldr	r3, [sp, #4]
 80138f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80138f6:	b15b      	cbz	r3, 8013910 <__smakebuf_r+0x70>
 80138f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80138fc:	4630      	mov	r0, r6
 80138fe:	f000 f81d 	bl	801393c <_isatty_r>
 8013902:	b128      	cbz	r0, 8013910 <__smakebuf_r+0x70>
 8013904:	89a3      	ldrh	r3, [r4, #12]
 8013906:	f023 0303 	bic.w	r3, r3, #3
 801390a:	f043 0301 	orr.w	r3, r3, #1
 801390e:	81a3      	strh	r3, [r4, #12]
 8013910:	89a3      	ldrh	r3, [r4, #12]
 8013912:	431d      	orrs	r5, r3
 8013914:	81a5      	strh	r5, [r4, #12]
 8013916:	e7cf      	b.n	80138b8 <__smakebuf_r+0x18>

08013918 <_fstat_r>:
 8013918:	b538      	push	{r3, r4, r5, lr}
 801391a:	4d07      	ldr	r5, [pc, #28]	@ (8013938 <_fstat_r+0x20>)
 801391c:	2300      	movs	r3, #0
 801391e:	4604      	mov	r4, r0
 8013920:	4608      	mov	r0, r1
 8013922:	4611      	mov	r1, r2
 8013924:	602b      	str	r3, [r5, #0]
 8013926:	f7ee fac3 	bl	8001eb0 <_fstat>
 801392a:	1c43      	adds	r3, r0, #1
 801392c:	d102      	bne.n	8013934 <_fstat_r+0x1c>
 801392e:	682b      	ldr	r3, [r5, #0]
 8013930:	b103      	cbz	r3, 8013934 <_fstat_r+0x1c>
 8013932:	6023      	str	r3, [r4, #0]
 8013934:	bd38      	pop	{r3, r4, r5, pc}
 8013936:	bf00      	nop
 8013938:	20000e3c 	.word	0x20000e3c

0801393c <_isatty_r>:
 801393c:	b538      	push	{r3, r4, r5, lr}
 801393e:	4d06      	ldr	r5, [pc, #24]	@ (8013958 <_isatty_r+0x1c>)
 8013940:	2300      	movs	r3, #0
 8013942:	4604      	mov	r4, r0
 8013944:	4608      	mov	r0, r1
 8013946:	602b      	str	r3, [r5, #0]
 8013948:	f7ee fac2 	bl	8001ed0 <_isatty>
 801394c:	1c43      	adds	r3, r0, #1
 801394e:	d102      	bne.n	8013956 <_isatty_r+0x1a>
 8013950:	682b      	ldr	r3, [r5, #0]
 8013952:	b103      	cbz	r3, 8013956 <_isatty_r+0x1a>
 8013954:	6023      	str	r3, [r4, #0]
 8013956:	bd38      	pop	{r3, r4, r5, pc}
 8013958:	20000e3c 	.word	0x20000e3c

0801395c <asin>:
 801395c:	b538      	push	{r3, r4, r5, lr}
 801395e:	ed2d 8b02 	vpush	{d8}
 8013962:	ec55 4b10 	vmov	r4, r5, d0
 8013966:	f000 f96b 	bl	8013c40 <__ieee754_asin>
 801396a:	4622      	mov	r2, r4
 801396c:	462b      	mov	r3, r5
 801396e:	4620      	mov	r0, r4
 8013970:	4629      	mov	r1, r5
 8013972:	eeb0 8a40 	vmov.f32	s16, s0
 8013976:	eef0 8a60 	vmov.f32	s17, s1
 801397a:	f7ed f8ff 	bl	8000b7c <__aeabi_dcmpun>
 801397e:	b9a8      	cbnz	r0, 80139ac <asin+0x50>
 8013980:	ec45 4b10 	vmov	d0, r4, r5
 8013984:	f000 f87a 	bl	8013a7c <fabs>
 8013988:	4b0c      	ldr	r3, [pc, #48]	@ (80139bc <asin+0x60>)
 801398a:	ec51 0b10 	vmov	r0, r1, d0
 801398e:	2200      	movs	r2, #0
 8013990:	f7ed f8ea 	bl	8000b68 <__aeabi_dcmpgt>
 8013994:	b150      	cbz	r0, 80139ac <asin+0x50>
 8013996:	f7fd fa77 	bl	8010e88 <__errno>
 801399a:	ecbd 8b02 	vpop	{d8}
 801399e:	2321      	movs	r3, #33	@ 0x21
 80139a0:	6003      	str	r3, [r0, #0]
 80139a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80139a6:	4806      	ldr	r0, [pc, #24]	@ (80139c0 <asin+0x64>)
 80139a8:	f7fd baaa 	b.w	8010f00 <nan>
 80139ac:	eeb0 0a48 	vmov.f32	s0, s16
 80139b0:	eef0 0a68 	vmov.f32	s1, s17
 80139b4:	ecbd 8b02 	vpop	{d8}
 80139b8:	bd38      	pop	{r3, r4, r5, pc}
 80139ba:	bf00      	nop
 80139bc:	3ff00000 	.word	0x3ff00000
 80139c0:	08014d1d 	.word	0x08014d1d

080139c4 <atan2>:
 80139c4:	f000 bb40 	b.w	8014048 <__ieee754_atan2>

080139c8 <fmod>:
 80139c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ca:	ed2d 8b02 	vpush	{d8}
 80139ce:	ec57 6b10 	vmov	r6, r7, d0
 80139d2:	ec55 4b11 	vmov	r4, r5, d1
 80139d6:	f000 fbfd 	bl	80141d4 <__ieee754_fmod>
 80139da:	4622      	mov	r2, r4
 80139dc:	462b      	mov	r3, r5
 80139de:	4630      	mov	r0, r6
 80139e0:	4639      	mov	r1, r7
 80139e2:	eeb0 8a40 	vmov.f32	s16, s0
 80139e6:	eef0 8a60 	vmov.f32	s17, s1
 80139ea:	f7ed f8c7 	bl	8000b7c <__aeabi_dcmpun>
 80139ee:	b990      	cbnz	r0, 8013a16 <fmod+0x4e>
 80139f0:	2200      	movs	r2, #0
 80139f2:	2300      	movs	r3, #0
 80139f4:	4620      	mov	r0, r4
 80139f6:	4629      	mov	r1, r5
 80139f8:	f7ed f88e 	bl	8000b18 <__aeabi_dcmpeq>
 80139fc:	b158      	cbz	r0, 8013a16 <fmod+0x4e>
 80139fe:	f7fd fa43 	bl	8010e88 <__errno>
 8013a02:	2321      	movs	r3, #33	@ 0x21
 8013a04:	6003      	str	r3, [r0, #0]
 8013a06:	2200      	movs	r2, #0
 8013a08:	2300      	movs	r3, #0
 8013a0a:	4610      	mov	r0, r2
 8013a0c:	4619      	mov	r1, r3
 8013a0e:	f7ec ff45 	bl	800089c <__aeabi_ddiv>
 8013a12:	ec41 0b18 	vmov	d8, r0, r1
 8013a16:	eeb0 0a48 	vmov.f32	s0, s16
 8013a1a:	eef0 0a68 	vmov.f32	s1, s17
 8013a1e:	ecbd 8b02 	vpop	{d8}
 8013a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013a24 <sqrt>:
 8013a24:	b538      	push	{r3, r4, r5, lr}
 8013a26:	ed2d 8b02 	vpush	{d8}
 8013a2a:	ec55 4b10 	vmov	r4, r5, d0
 8013a2e:	f000 f82d 	bl	8013a8c <__ieee754_sqrt>
 8013a32:	4622      	mov	r2, r4
 8013a34:	462b      	mov	r3, r5
 8013a36:	4620      	mov	r0, r4
 8013a38:	4629      	mov	r1, r5
 8013a3a:	eeb0 8a40 	vmov.f32	s16, s0
 8013a3e:	eef0 8a60 	vmov.f32	s17, s1
 8013a42:	f7ed f89b 	bl	8000b7c <__aeabi_dcmpun>
 8013a46:	b990      	cbnz	r0, 8013a6e <sqrt+0x4a>
 8013a48:	2200      	movs	r2, #0
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	4629      	mov	r1, r5
 8013a50:	f7ed f86c 	bl	8000b2c <__aeabi_dcmplt>
 8013a54:	b158      	cbz	r0, 8013a6e <sqrt+0x4a>
 8013a56:	f7fd fa17 	bl	8010e88 <__errno>
 8013a5a:	2321      	movs	r3, #33	@ 0x21
 8013a5c:	6003      	str	r3, [r0, #0]
 8013a5e:	2200      	movs	r2, #0
 8013a60:	2300      	movs	r3, #0
 8013a62:	4610      	mov	r0, r2
 8013a64:	4619      	mov	r1, r3
 8013a66:	f7ec ff19 	bl	800089c <__aeabi_ddiv>
 8013a6a:	ec41 0b18 	vmov	d8, r0, r1
 8013a6e:	eeb0 0a48 	vmov.f32	s0, s16
 8013a72:	eef0 0a68 	vmov.f32	s1, s17
 8013a76:	ecbd 8b02 	vpop	{d8}
 8013a7a:	bd38      	pop	{r3, r4, r5, pc}

08013a7c <fabs>:
 8013a7c:	ec51 0b10 	vmov	r0, r1, d0
 8013a80:	4602      	mov	r2, r0
 8013a82:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013a86:	ec43 2b10 	vmov	d0, r2, r3
 8013a8a:	4770      	bx	lr

08013a8c <__ieee754_sqrt>:
 8013a8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a90:	4a68      	ldr	r2, [pc, #416]	@ (8013c34 <__ieee754_sqrt+0x1a8>)
 8013a92:	ec55 4b10 	vmov	r4, r5, d0
 8013a96:	43aa      	bics	r2, r5
 8013a98:	462b      	mov	r3, r5
 8013a9a:	4621      	mov	r1, r4
 8013a9c:	d110      	bne.n	8013ac0 <__ieee754_sqrt+0x34>
 8013a9e:	4622      	mov	r2, r4
 8013aa0:	4620      	mov	r0, r4
 8013aa2:	4629      	mov	r1, r5
 8013aa4:	f7ec fdd0 	bl	8000648 <__aeabi_dmul>
 8013aa8:	4602      	mov	r2, r0
 8013aaa:	460b      	mov	r3, r1
 8013aac:	4620      	mov	r0, r4
 8013aae:	4629      	mov	r1, r5
 8013ab0:	f7ec fc14 	bl	80002dc <__adddf3>
 8013ab4:	4604      	mov	r4, r0
 8013ab6:	460d      	mov	r5, r1
 8013ab8:	ec45 4b10 	vmov	d0, r4, r5
 8013abc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ac0:	2d00      	cmp	r5, #0
 8013ac2:	dc0e      	bgt.n	8013ae2 <__ieee754_sqrt+0x56>
 8013ac4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8013ac8:	4322      	orrs	r2, r4
 8013aca:	d0f5      	beq.n	8013ab8 <__ieee754_sqrt+0x2c>
 8013acc:	b19d      	cbz	r5, 8013af6 <__ieee754_sqrt+0x6a>
 8013ace:	4622      	mov	r2, r4
 8013ad0:	4620      	mov	r0, r4
 8013ad2:	4629      	mov	r1, r5
 8013ad4:	f7ec fc00 	bl	80002d8 <__aeabi_dsub>
 8013ad8:	4602      	mov	r2, r0
 8013ada:	460b      	mov	r3, r1
 8013adc:	f7ec fede 	bl	800089c <__aeabi_ddiv>
 8013ae0:	e7e8      	b.n	8013ab4 <__ieee754_sqrt+0x28>
 8013ae2:	152a      	asrs	r2, r5, #20
 8013ae4:	d115      	bne.n	8013b12 <__ieee754_sqrt+0x86>
 8013ae6:	2000      	movs	r0, #0
 8013ae8:	e009      	b.n	8013afe <__ieee754_sqrt+0x72>
 8013aea:	0acb      	lsrs	r3, r1, #11
 8013aec:	3a15      	subs	r2, #21
 8013aee:	0549      	lsls	r1, r1, #21
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d0fa      	beq.n	8013aea <__ieee754_sqrt+0x5e>
 8013af4:	e7f7      	b.n	8013ae6 <__ieee754_sqrt+0x5a>
 8013af6:	462a      	mov	r2, r5
 8013af8:	e7fa      	b.n	8013af0 <__ieee754_sqrt+0x64>
 8013afa:	005b      	lsls	r3, r3, #1
 8013afc:	3001      	adds	r0, #1
 8013afe:	02dc      	lsls	r4, r3, #11
 8013b00:	d5fb      	bpl.n	8013afa <__ieee754_sqrt+0x6e>
 8013b02:	1e44      	subs	r4, r0, #1
 8013b04:	1b12      	subs	r2, r2, r4
 8013b06:	f1c0 0420 	rsb	r4, r0, #32
 8013b0a:	fa21 f404 	lsr.w	r4, r1, r4
 8013b0e:	4323      	orrs	r3, r4
 8013b10:	4081      	lsls	r1, r0
 8013b12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013b16:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8013b1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013b1e:	07d2      	lsls	r2, r2, #31
 8013b20:	bf5c      	itt	pl
 8013b22:	005b      	lslpl	r3, r3, #1
 8013b24:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8013b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013b2c:	bf58      	it	pl
 8013b2e:	0049      	lslpl	r1, r1, #1
 8013b30:	2600      	movs	r6, #0
 8013b32:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8013b36:	106d      	asrs	r5, r5, #1
 8013b38:	0049      	lsls	r1, r1, #1
 8013b3a:	2016      	movs	r0, #22
 8013b3c:	4632      	mov	r2, r6
 8013b3e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8013b42:	1917      	adds	r7, r2, r4
 8013b44:	429f      	cmp	r7, r3
 8013b46:	bfde      	ittt	le
 8013b48:	193a      	addle	r2, r7, r4
 8013b4a:	1bdb      	suble	r3, r3, r7
 8013b4c:	1936      	addle	r6, r6, r4
 8013b4e:	0fcf      	lsrs	r7, r1, #31
 8013b50:	3801      	subs	r0, #1
 8013b52:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8013b56:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013b5a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8013b5e:	d1f0      	bne.n	8013b42 <__ieee754_sqrt+0xb6>
 8013b60:	4604      	mov	r4, r0
 8013b62:	2720      	movs	r7, #32
 8013b64:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8013b68:	429a      	cmp	r2, r3
 8013b6a:	eb00 0e0c 	add.w	lr, r0, ip
 8013b6e:	db02      	blt.n	8013b76 <__ieee754_sqrt+0xea>
 8013b70:	d113      	bne.n	8013b9a <__ieee754_sqrt+0x10e>
 8013b72:	458e      	cmp	lr, r1
 8013b74:	d811      	bhi.n	8013b9a <__ieee754_sqrt+0x10e>
 8013b76:	f1be 0f00 	cmp.w	lr, #0
 8013b7a:	eb0e 000c 	add.w	r0, lr, ip
 8013b7e:	da42      	bge.n	8013c06 <__ieee754_sqrt+0x17a>
 8013b80:	2800      	cmp	r0, #0
 8013b82:	db40      	blt.n	8013c06 <__ieee754_sqrt+0x17a>
 8013b84:	f102 0801 	add.w	r8, r2, #1
 8013b88:	1a9b      	subs	r3, r3, r2
 8013b8a:	458e      	cmp	lr, r1
 8013b8c:	bf88      	it	hi
 8013b8e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013b92:	eba1 010e 	sub.w	r1, r1, lr
 8013b96:	4464      	add	r4, ip
 8013b98:	4642      	mov	r2, r8
 8013b9a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8013b9e:	3f01      	subs	r7, #1
 8013ba0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8013ba4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013ba8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013bac:	d1dc      	bne.n	8013b68 <__ieee754_sqrt+0xdc>
 8013bae:	4319      	orrs	r1, r3
 8013bb0:	d01b      	beq.n	8013bea <__ieee754_sqrt+0x15e>
 8013bb2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8013c38 <__ieee754_sqrt+0x1ac>
 8013bb6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8013c3c <__ieee754_sqrt+0x1b0>
 8013bba:	e9da 0100 	ldrd	r0, r1, [sl]
 8013bbe:	e9db 2300 	ldrd	r2, r3, [fp]
 8013bc2:	f7ec fb89 	bl	80002d8 <__aeabi_dsub>
 8013bc6:	e9da 8900 	ldrd	r8, r9, [sl]
 8013bca:	4602      	mov	r2, r0
 8013bcc:	460b      	mov	r3, r1
 8013bce:	4640      	mov	r0, r8
 8013bd0:	4649      	mov	r1, r9
 8013bd2:	f7ec ffb5 	bl	8000b40 <__aeabi_dcmple>
 8013bd6:	b140      	cbz	r0, 8013bea <__ieee754_sqrt+0x15e>
 8013bd8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8013bdc:	e9da 0100 	ldrd	r0, r1, [sl]
 8013be0:	e9db 2300 	ldrd	r2, r3, [fp]
 8013be4:	d111      	bne.n	8013c0a <__ieee754_sqrt+0x17e>
 8013be6:	3601      	adds	r6, #1
 8013be8:	463c      	mov	r4, r7
 8013bea:	1072      	asrs	r2, r6, #1
 8013bec:	0863      	lsrs	r3, r4, #1
 8013bee:	07f1      	lsls	r1, r6, #31
 8013bf0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8013bf4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8013bf8:	bf48      	it	mi
 8013bfa:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8013bfe:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8013c02:	4618      	mov	r0, r3
 8013c04:	e756      	b.n	8013ab4 <__ieee754_sqrt+0x28>
 8013c06:	4690      	mov	r8, r2
 8013c08:	e7be      	b.n	8013b88 <__ieee754_sqrt+0xfc>
 8013c0a:	f7ec fb67 	bl	80002dc <__adddf3>
 8013c0e:	e9da 8900 	ldrd	r8, r9, [sl]
 8013c12:	4602      	mov	r2, r0
 8013c14:	460b      	mov	r3, r1
 8013c16:	4640      	mov	r0, r8
 8013c18:	4649      	mov	r1, r9
 8013c1a:	f7ec ff87 	bl	8000b2c <__aeabi_dcmplt>
 8013c1e:	b120      	cbz	r0, 8013c2a <__ieee754_sqrt+0x19e>
 8013c20:	1ca0      	adds	r0, r4, #2
 8013c22:	bf08      	it	eq
 8013c24:	3601      	addeq	r6, #1
 8013c26:	3402      	adds	r4, #2
 8013c28:	e7df      	b.n	8013bea <__ieee754_sqrt+0x15e>
 8013c2a:	1c63      	adds	r3, r4, #1
 8013c2c:	f023 0401 	bic.w	r4, r3, #1
 8013c30:	e7db      	b.n	8013bea <__ieee754_sqrt+0x15e>
 8013c32:	bf00      	nop
 8013c34:	7ff00000 	.word	0x7ff00000
 8013c38:	200002a0 	.word	0x200002a0
 8013c3c:	20000298 	.word	0x20000298

08013c40 <__ieee754_asin>:
 8013c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c44:	ec55 4b10 	vmov	r4, r5, d0
 8013c48:	4bc7      	ldr	r3, [pc, #796]	@ (8013f68 <__ieee754_asin+0x328>)
 8013c4a:	b087      	sub	sp, #28
 8013c4c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8013c50:	429e      	cmp	r6, r3
 8013c52:	9501      	str	r5, [sp, #4]
 8013c54:	d92d      	bls.n	8013cb2 <__ieee754_asin+0x72>
 8013c56:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8013c5a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8013c5e:	4326      	orrs	r6, r4
 8013c60:	d116      	bne.n	8013c90 <__ieee754_asin+0x50>
 8013c62:	a3a7      	add	r3, pc, #668	@ (adr r3, 8013f00 <__ieee754_asin+0x2c0>)
 8013c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c68:	4620      	mov	r0, r4
 8013c6a:	4629      	mov	r1, r5
 8013c6c:	f7ec fcec 	bl	8000648 <__aeabi_dmul>
 8013c70:	a3a5      	add	r3, pc, #660	@ (adr r3, 8013f08 <__ieee754_asin+0x2c8>)
 8013c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c76:	4606      	mov	r6, r0
 8013c78:	460f      	mov	r7, r1
 8013c7a:	4620      	mov	r0, r4
 8013c7c:	4629      	mov	r1, r5
 8013c7e:	f7ec fce3 	bl	8000648 <__aeabi_dmul>
 8013c82:	4602      	mov	r2, r0
 8013c84:	460b      	mov	r3, r1
 8013c86:	4630      	mov	r0, r6
 8013c88:	4639      	mov	r1, r7
 8013c8a:	f7ec fb27 	bl	80002dc <__adddf3>
 8013c8e:	e009      	b.n	8013ca4 <__ieee754_asin+0x64>
 8013c90:	4622      	mov	r2, r4
 8013c92:	462b      	mov	r3, r5
 8013c94:	4620      	mov	r0, r4
 8013c96:	4629      	mov	r1, r5
 8013c98:	f7ec fb1e 	bl	80002d8 <__aeabi_dsub>
 8013c9c:	4602      	mov	r2, r0
 8013c9e:	460b      	mov	r3, r1
 8013ca0:	f7ec fdfc 	bl	800089c <__aeabi_ddiv>
 8013ca4:	4604      	mov	r4, r0
 8013ca6:	460d      	mov	r5, r1
 8013ca8:	ec45 4b10 	vmov	d0, r4, r5
 8013cac:	b007      	add	sp, #28
 8013cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cb2:	4bae      	ldr	r3, [pc, #696]	@ (8013f6c <__ieee754_asin+0x32c>)
 8013cb4:	429e      	cmp	r6, r3
 8013cb6:	d810      	bhi.n	8013cda <__ieee754_asin+0x9a>
 8013cb8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8013cbc:	f080 80ad 	bcs.w	8013e1a <__ieee754_asin+0x1da>
 8013cc0:	a393      	add	r3, pc, #588	@ (adr r3, 8013f10 <__ieee754_asin+0x2d0>)
 8013cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cc6:	4620      	mov	r0, r4
 8013cc8:	4629      	mov	r1, r5
 8013cca:	f7ec fb07 	bl	80002dc <__adddf3>
 8013cce:	4ba8      	ldr	r3, [pc, #672]	@ (8013f70 <__ieee754_asin+0x330>)
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	f7ec ff49 	bl	8000b68 <__aeabi_dcmpgt>
 8013cd6:	2800      	cmp	r0, #0
 8013cd8:	d1e6      	bne.n	8013ca8 <__ieee754_asin+0x68>
 8013cda:	ec45 4b10 	vmov	d0, r4, r5
 8013cde:	f7ff fecd 	bl	8013a7c <fabs>
 8013ce2:	49a3      	ldr	r1, [pc, #652]	@ (8013f70 <__ieee754_asin+0x330>)
 8013ce4:	ec53 2b10 	vmov	r2, r3, d0
 8013ce8:	2000      	movs	r0, #0
 8013cea:	f7ec faf5 	bl	80002d8 <__aeabi_dsub>
 8013cee:	4ba1      	ldr	r3, [pc, #644]	@ (8013f74 <__ieee754_asin+0x334>)
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	f7ec fca9 	bl	8000648 <__aeabi_dmul>
 8013cf6:	a388      	add	r3, pc, #544	@ (adr r3, 8013f18 <__ieee754_asin+0x2d8>)
 8013cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cfc:	4604      	mov	r4, r0
 8013cfe:	460d      	mov	r5, r1
 8013d00:	f7ec fca2 	bl	8000648 <__aeabi_dmul>
 8013d04:	a386      	add	r3, pc, #536	@ (adr r3, 8013f20 <__ieee754_asin+0x2e0>)
 8013d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d0a:	f7ec fae7 	bl	80002dc <__adddf3>
 8013d0e:	4622      	mov	r2, r4
 8013d10:	462b      	mov	r3, r5
 8013d12:	f7ec fc99 	bl	8000648 <__aeabi_dmul>
 8013d16:	a384      	add	r3, pc, #528	@ (adr r3, 8013f28 <__ieee754_asin+0x2e8>)
 8013d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d1c:	f7ec fadc 	bl	80002d8 <__aeabi_dsub>
 8013d20:	4622      	mov	r2, r4
 8013d22:	462b      	mov	r3, r5
 8013d24:	f7ec fc90 	bl	8000648 <__aeabi_dmul>
 8013d28:	a381      	add	r3, pc, #516	@ (adr r3, 8013f30 <__ieee754_asin+0x2f0>)
 8013d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d2e:	f7ec fad5 	bl	80002dc <__adddf3>
 8013d32:	4622      	mov	r2, r4
 8013d34:	462b      	mov	r3, r5
 8013d36:	f7ec fc87 	bl	8000648 <__aeabi_dmul>
 8013d3a:	a37f      	add	r3, pc, #508	@ (adr r3, 8013f38 <__ieee754_asin+0x2f8>)
 8013d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d40:	f7ec faca 	bl	80002d8 <__aeabi_dsub>
 8013d44:	4622      	mov	r2, r4
 8013d46:	462b      	mov	r3, r5
 8013d48:	f7ec fc7e 	bl	8000648 <__aeabi_dmul>
 8013d4c:	a37c      	add	r3, pc, #496	@ (adr r3, 8013f40 <__ieee754_asin+0x300>)
 8013d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d52:	f7ec fac3 	bl	80002dc <__adddf3>
 8013d56:	4622      	mov	r2, r4
 8013d58:	462b      	mov	r3, r5
 8013d5a:	f7ec fc75 	bl	8000648 <__aeabi_dmul>
 8013d5e:	a37a      	add	r3, pc, #488	@ (adr r3, 8013f48 <__ieee754_asin+0x308>)
 8013d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013d68:	4620      	mov	r0, r4
 8013d6a:	4629      	mov	r1, r5
 8013d6c:	f7ec fc6c 	bl	8000648 <__aeabi_dmul>
 8013d70:	a377      	add	r3, pc, #476	@ (adr r3, 8013f50 <__ieee754_asin+0x310>)
 8013d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d76:	f7ec faaf 	bl	80002d8 <__aeabi_dsub>
 8013d7a:	4622      	mov	r2, r4
 8013d7c:	462b      	mov	r3, r5
 8013d7e:	f7ec fc63 	bl	8000648 <__aeabi_dmul>
 8013d82:	a375      	add	r3, pc, #468	@ (adr r3, 8013f58 <__ieee754_asin+0x318>)
 8013d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d88:	f7ec faa8 	bl	80002dc <__adddf3>
 8013d8c:	4622      	mov	r2, r4
 8013d8e:	462b      	mov	r3, r5
 8013d90:	f7ec fc5a 	bl	8000648 <__aeabi_dmul>
 8013d94:	a372      	add	r3, pc, #456	@ (adr r3, 8013f60 <__ieee754_asin+0x320>)
 8013d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d9a:	f7ec fa9d 	bl	80002d8 <__aeabi_dsub>
 8013d9e:	4622      	mov	r2, r4
 8013da0:	462b      	mov	r3, r5
 8013da2:	f7ec fc51 	bl	8000648 <__aeabi_dmul>
 8013da6:	4b72      	ldr	r3, [pc, #456]	@ (8013f70 <__ieee754_asin+0x330>)
 8013da8:	2200      	movs	r2, #0
 8013daa:	f7ec fa97 	bl	80002dc <__adddf3>
 8013dae:	ec45 4b10 	vmov	d0, r4, r5
 8013db2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013db6:	f7ff fe69 	bl	8013a8c <__ieee754_sqrt>
 8013dba:	4b6f      	ldr	r3, [pc, #444]	@ (8013f78 <__ieee754_asin+0x338>)
 8013dbc:	429e      	cmp	r6, r3
 8013dbe:	ec5b ab10 	vmov	sl, fp, d0
 8013dc2:	f240 80db 	bls.w	8013f7c <__ieee754_asin+0x33c>
 8013dc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013dca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013dce:	f7ec fd65 	bl	800089c <__aeabi_ddiv>
 8013dd2:	4652      	mov	r2, sl
 8013dd4:	465b      	mov	r3, fp
 8013dd6:	f7ec fc37 	bl	8000648 <__aeabi_dmul>
 8013dda:	4652      	mov	r2, sl
 8013ddc:	465b      	mov	r3, fp
 8013dde:	f7ec fa7d 	bl	80002dc <__adddf3>
 8013de2:	4602      	mov	r2, r0
 8013de4:	460b      	mov	r3, r1
 8013de6:	f7ec fa79 	bl	80002dc <__adddf3>
 8013dea:	a347      	add	r3, pc, #284	@ (adr r3, 8013f08 <__ieee754_asin+0x2c8>)
 8013dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df0:	f7ec fa72 	bl	80002d8 <__aeabi_dsub>
 8013df4:	4602      	mov	r2, r0
 8013df6:	460b      	mov	r3, r1
 8013df8:	a141      	add	r1, pc, #260	@ (adr r1, 8013f00 <__ieee754_asin+0x2c0>)
 8013dfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013dfe:	f7ec fa6b 	bl	80002d8 <__aeabi_dsub>
 8013e02:	9b01      	ldr	r3, [sp, #4]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	bfdc      	itt	le
 8013e08:	4602      	movle	r2, r0
 8013e0a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8013e0e:	4604      	mov	r4, r0
 8013e10:	460d      	mov	r5, r1
 8013e12:	bfdc      	itt	le
 8013e14:	4614      	movle	r4, r2
 8013e16:	461d      	movle	r5, r3
 8013e18:	e746      	b.n	8013ca8 <__ieee754_asin+0x68>
 8013e1a:	4622      	mov	r2, r4
 8013e1c:	462b      	mov	r3, r5
 8013e1e:	4620      	mov	r0, r4
 8013e20:	4629      	mov	r1, r5
 8013e22:	f7ec fc11 	bl	8000648 <__aeabi_dmul>
 8013e26:	a33c      	add	r3, pc, #240	@ (adr r3, 8013f18 <__ieee754_asin+0x2d8>)
 8013e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e2c:	4606      	mov	r6, r0
 8013e2e:	460f      	mov	r7, r1
 8013e30:	f7ec fc0a 	bl	8000648 <__aeabi_dmul>
 8013e34:	a33a      	add	r3, pc, #232	@ (adr r3, 8013f20 <__ieee754_asin+0x2e0>)
 8013e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e3a:	f7ec fa4f 	bl	80002dc <__adddf3>
 8013e3e:	4632      	mov	r2, r6
 8013e40:	463b      	mov	r3, r7
 8013e42:	f7ec fc01 	bl	8000648 <__aeabi_dmul>
 8013e46:	a338      	add	r3, pc, #224	@ (adr r3, 8013f28 <__ieee754_asin+0x2e8>)
 8013e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e4c:	f7ec fa44 	bl	80002d8 <__aeabi_dsub>
 8013e50:	4632      	mov	r2, r6
 8013e52:	463b      	mov	r3, r7
 8013e54:	f7ec fbf8 	bl	8000648 <__aeabi_dmul>
 8013e58:	a335      	add	r3, pc, #212	@ (adr r3, 8013f30 <__ieee754_asin+0x2f0>)
 8013e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e5e:	f7ec fa3d 	bl	80002dc <__adddf3>
 8013e62:	4632      	mov	r2, r6
 8013e64:	463b      	mov	r3, r7
 8013e66:	f7ec fbef 	bl	8000648 <__aeabi_dmul>
 8013e6a:	a333      	add	r3, pc, #204	@ (adr r3, 8013f38 <__ieee754_asin+0x2f8>)
 8013e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e70:	f7ec fa32 	bl	80002d8 <__aeabi_dsub>
 8013e74:	4632      	mov	r2, r6
 8013e76:	463b      	mov	r3, r7
 8013e78:	f7ec fbe6 	bl	8000648 <__aeabi_dmul>
 8013e7c:	a330      	add	r3, pc, #192	@ (adr r3, 8013f40 <__ieee754_asin+0x300>)
 8013e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e82:	f7ec fa2b 	bl	80002dc <__adddf3>
 8013e86:	4632      	mov	r2, r6
 8013e88:	463b      	mov	r3, r7
 8013e8a:	f7ec fbdd 	bl	8000648 <__aeabi_dmul>
 8013e8e:	a32e      	add	r3, pc, #184	@ (adr r3, 8013f48 <__ieee754_asin+0x308>)
 8013e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e94:	4680      	mov	r8, r0
 8013e96:	4689      	mov	r9, r1
 8013e98:	4630      	mov	r0, r6
 8013e9a:	4639      	mov	r1, r7
 8013e9c:	f7ec fbd4 	bl	8000648 <__aeabi_dmul>
 8013ea0:	a32b      	add	r3, pc, #172	@ (adr r3, 8013f50 <__ieee754_asin+0x310>)
 8013ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ea6:	f7ec fa17 	bl	80002d8 <__aeabi_dsub>
 8013eaa:	4632      	mov	r2, r6
 8013eac:	463b      	mov	r3, r7
 8013eae:	f7ec fbcb 	bl	8000648 <__aeabi_dmul>
 8013eb2:	a329      	add	r3, pc, #164	@ (adr r3, 8013f58 <__ieee754_asin+0x318>)
 8013eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eb8:	f7ec fa10 	bl	80002dc <__adddf3>
 8013ebc:	4632      	mov	r2, r6
 8013ebe:	463b      	mov	r3, r7
 8013ec0:	f7ec fbc2 	bl	8000648 <__aeabi_dmul>
 8013ec4:	a326      	add	r3, pc, #152	@ (adr r3, 8013f60 <__ieee754_asin+0x320>)
 8013ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eca:	f7ec fa05 	bl	80002d8 <__aeabi_dsub>
 8013ece:	4632      	mov	r2, r6
 8013ed0:	463b      	mov	r3, r7
 8013ed2:	f7ec fbb9 	bl	8000648 <__aeabi_dmul>
 8013ed6:	4b26      	ldr	r3, [pc, #152]	@ (8013f70 <__ieee754_asin+0x330>)
 8013ed8:	2200      	movs	r2, #0
 8013eda:	f7ec f9ff 	bl	80002dc <__adddf3>
 8013ede:	4602      	mov	r2, r0
 8013ee0:	460b      	mov	r3, r1
 8013ee2:	4640      	mov	r0, r8
 8013ee4:	4649      	mov	r1, r9
 8013ee6:	f7ec fcd9 	bl	800089c <__aeabi_ddiv>
 8013eea:	4622      	mov	r2, r4
 8013eec:	462b      	mov	r3, r5
 8013eee:	f7ec fbab 	bl	8000648 <__aeabi_dmul>
 8013ef2:	4602      	mov	r2, r0
 8013ef4:	460b      	mov	r3, r1
 8013ef6:	4620      	mov	r0, r4
 8013ef8:	4629      	mov	r1, r5
 8013efa:	e6c6      	b.n	8013c8a <__ieee754_asin+0x4a>
 8013efc:	f3af 8000 	nop.w
 8013f00:	54442d18 	.word	0x54442d18
 8013f04:	3ff921fb 	.word	0x3ff921fb
 8013f08:	33145c07 	.word	0x33145c07
 8013f0c:	3c91a626 	.word	0x3c91a626
 8013f10:	8800759c 	.word	0x8800759c
 8013f14:	7e37e43c 	.word	0x7e37e43c
 8013f18:	0dfdf709 	.word	0x0dfdf709
 8013f1c:	3f023de1 	.word	0x3f023de1
 8013f20:	7501b288 	.word	0x7501b288
 8013f24:	3f49efe0 	.word	0x3f49efe0
 8013f28:	b5688f3b 	.word	0xb5688f3b
 8013f2c:	3fa48228 	.word	0x3fa48228
 8013f30:	0e884455 	.word	0x0e884455
 8013f34:	3fc9c155 	.word	0x3fc9c155
 8013f38:	03eb6f7d 	.word	0x03eb6f7d
 8013f3c:	3fd4d612 	.word	0x3fd4d612
 8013f40:	55555555 	.word	0x55555555
 8013f44:	3fc55555 	.word	0x3fc55555
 8013f48:	b12e9282 	.word	0xb12e9282
 8013f4c:	3fb3b8c5 	.word	0x3fb3b8c5
 8013f50:	1b8d0159 	.word	0x1b8d0159
 8013f54:	3fe6066c 	.word	0x3fe6066c
 8013f58:	9c598ac8 	.word	0x9c598ac8
 8013f5c:	40002ae5 	.word	0x40002ae5
 8013f60:	1c8a2d4b 	.word	0x1c8a2d4b
 8013f64:	40033a27 	.word	0x40033a27
 8013f68:	3fefffff 	.word	0x3fefffff
 8013f6c:	3fdfffff 	.word	0x3fdfffff
 8013f70:	3ff00000 	.word	0x3ff00000
 8013f74:	3fe00000 	.word	0x3fe00000
 8013f78:	3fef3332 	.word	0x3fef3332
 8013f7c:	4652      	mov	r2, sl
 8013f7e:	465b      	mov	r3, fp
 8013f80:	4650      	mov	r0, sl
 8013f82:	4659      	mov	r1, fp
 8013f84:	f7ec f9aa 	bl	80002dc <__adddf3>
 8013f88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f8c:	4606      	mov	r6, r0
 8013f8e:	460f      	mov	r7, r1
 8013f90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f94:	f7ec fc82 	bl	800089c <__aeabi_ddiv>
 8013f98:	4602      	mov	r2, r0
 8013f9a:	460b      	mov	r3, r1
 8013f9c:	4630      	mov	r0, r6
 8013f9e:	4639      	mov	r1, r7
 8013fa0:	f7ec fb52 	bl	8000648 <__aeabi_dmul>
 8013fa4:	f04f 0800 	mov.w	r8, #0
 8013fa8:	4606      	mov	r6, r0
 8013faa:	460f      	mov	r7, r1
 8013fac:	4642      	mov	r2, r8
 8013fae:	465b      	mov	r3, fp
 8013fb0:	4640      	mov	r0, r8
 8013fb2:	4659      	mov	r1, fp
 8013fb4:	f7ec fb48 	bl	8000648 <__aeabi_dmul>
 8013fb8:	4602      	mov	r2, r0
 8013fba:	460b      	mov	r3, r1
 8013fbc:	4620      	mov	r0, r4
 8013fbe:	4629      	mov	r1, r5
 8013fc0:	f7ec f98a 	bl	80002d8 <__aeabi_dsub>
 8013fc4:	4642      	mov	r2, r8
 8013fc6:	4604      	mov	r4, r0
 8013fc8:	460d      	mov	r5, r1
 8013fca:	465b      	mov	r3, fp
 8013fcc:	4650      	mov	r0, sl
 8013fce:	4659      	mov	r1, fp
 8013fd0:	f7ec f984 	bl	80002dc <__adddf3>
 8013fd4:	4602      	mov	r2, r0
 8013fd6:	460b      	mov	r3, r1
 8013fd8:	4620      	mov	r0, r4
 8013fda:	4629      	mov	r1, r5
 8013fdc:	f7ec fc5e 	bl	800089c <__aeabi_ddiv>
 8013fe0:	4602      	mov	r2, r0
 8013fe2:	460b      	mov	r3, r1
 8013fe4:	f7ec f97a 	bl	80002dc <__adddf3>
 8013fe8:	4602      	mov	r2, r0
 8013fea:	460b      	mov	r3, r1
 8013fec:	a112      	add	r1, pc, #72	@ (adr r1, 8014038 <__ieee754_asin+0x3f8>)
 8013fee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ff2:	f7ec f971 	bl	80002d8 <__aeabi_dsub>
 8013ff6:	4602      	mov	r2, r0
 8013ff8:	460b      	mov	r3, r1
 8013ffa:	4630      	mov	r0, r6
 8013ffc:	4639      	mov	r1, r7
 8013ffe:	f7ec f96b 	bl	80002d8 <__aeabi_dsub>
 8014002:	4642      	mov	r2, r8
 8014004:	4604      	mov	r4, r0
 8014006:	460d      	mov	r5, r1
 8014008:	465b      	mov	r3, fp
 801400a:	4640      	mov	r0, r8
 801400c:	4659      	mov	r1, fp
 801400e:	f7ec f965 	bl	80002dc <__adddf3>
 8014012:	4602      	mov	r2, r0
 8014014:	460b      	mov	r3, r1
 8014016:	a10a      	add	r1, pc, #40	@ (adr r1, 8014040 <__ieee754_asin+0x400>)
 8014018:	e9d1 0100 	ldrd	r0, r1, [r1]
 801401c:	f7ec f95c 	bl	80002d8 <__aeabi_dsub>
 8014020:	4602      	mov	r2, r0
 8014022:	460b      	mov	r3, r1
 8014024:	4620      	mov	r0, r4
 8014026:	4629      	mov	r1, r5
 8014028:	f7ec f956 	bl	80002d8 <__aeabi_dsub>
 801402c:	4602      	mov	r2, r0
 801402e:	460b      	mov	r3, r1
 8014030:	a103      	add	r1, pc, #12	@ (adr r1, 8014040 <__ieee754_asin+0x400>)
 8014032:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014036:	e6e2      	b.n	8013dfe <__ieee754_asin+0x1be>
 8014038:	33145c07 	.word	0x33145c07
 801403c:	3c91a626 	.word	0x3c91a626
 8014040:	54442d18 	.word	0x54442d18
 8014044:	3fe921fb 	.word	0x3fe921fb

08014048 <__ieee754_atan2>:
 8014048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801404c:	ec57 6b11 	vmov	r6, r7, d1
 8014050:	4273      	negs	r3, r6
 8014052:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80141d0 <__ieee754_atan2+0x188>
 8014056:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801405a:	4333      	orrs	r3, r6
 801405c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8014060:	4543      	cmp	r3, r8
 8014062:	ec51 0b10 	vmov	r0, r1, d0
 8014066:	4635      	mov	r5, r6
 8014068:	d809      	bhi.n	801407e <__ieee754_atan2+0x36>
 801406a:	4244      	negs	r4, r0
 801406c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014070:	4304      	orrs	r4, r0
 8014072:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8014076:	4544      	cmp	r4, r8
 8014078:	468e      	mov	lr, r1
 801407a:	4681      	mov	r9, r0
 801407c:	d907      	bls.n	801408e <__ieee754_atan2+0x46>
 801407e:	4632      	mov	r2, r6
 8014080:	463b      	mov	r3, r7
 8014082:	f7ec f92b 	bl	80002dc <__adddf3>
 8014086:	ec41 0b10 	vmov	d0, r0, r1
 801408a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801408e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8014092:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8014096:	4334      	orrs	r4, r6
 8014098:	d103      	bne.n	80140a2 <__ieee754_atan2+0x5a>
 801409a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801409e:	f000 b9a3 	b.w	80143e8 <atan>
 80140a2:	17bc      	asrs	r4, r7, #30
 80140a4:	f004 0402 	and.w	r4, r4, #2
 80140a8:	ea53 0909 	orrs.w	r9, r3, r9
 80140ac:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80140b0:	d107      	bne.n	80140c2 <__ieee754_atan2+0x7a>
 80140b2:	2c02      	cmp	r4, #2
 80140b4:	d05f      	beq.n	8014176 <__ieee754_atan2+0x12e>
 80140b6:	2c03      	cmp	r4, #3
 80140b8:	d1e5      	bne.n	8014086 <__ieee754_atan2+0x3e>
 80140ba:	a141      	add	r1, pc, #260	@ (adr r1, 80141c0 <__ieee754_atan2+0x178>)
 80140bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140c0:	e7e1      	b.n	8014086 <__ieee754_atan2+0x3e>
 80140c2:	4315      	orrs	r5, r2
 80140c4:	d106      	bne.n	80140d4 <__ieee754_atan2+0x8c>
 80140c6:	f1be 0f00 	cmp.w	lr, #0
 80140ca:	da5f      	bge.n	801418c <__ieee754_atan2+0x144>
 80140cc:	a13e      	add	r1, pc, #248	@ (adr r1, 80141c8 <__ieee754_atan2+0x180>)
 80140ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140d2:	e7d8      	b.n	8014086 <__ieee754_atan2+0x3e>
 80140d4:	4542      	cmp	r2, r8
 80140d6:	d10f      	bne.n	80140f8 <__ieee754_atan2+0xb0>
 80140d8:	4293      	cmp	r3, r2
 80140da:	f104 34ff 	add.w	r4, r4, #4294967295
 80140de:	d107      	bne.n	80140f0 <__ieee754_atan2+0xa8>
 80140e0:	2c02      	cmp	r4, #2
 80140e2:	d84c      	bhi.n	801417e <__ieee754_atan2+0x136>
 80140e4:	4b34      	ldr	r3, [pc, #208]	@ (80141b8 <__ieee754_atan2+0x170>)
 80140e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80140ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80140ee:	e7ca      	b.n	8014086 <__ieee754_atan2+0x3e>
 80140f0:	2c02      	cmp	r4, #2
 80140f2:	d848      	bhi.n	8014186 <__ieee754_atan2+0x13e>
 80140f4:	4b31      	ldr	r3, [pc, #196]	@ (80141bc <__ieee754_atan2+0x174>)
 80140f6:	e7f6      	b.n	80140e6 <__ieee754_atan2+0x9e>
 80140f8:	4543      	cmp	r3, r8
 80140fa:	d0e4      	beq.n	80140c6 <__ieee754_atan2+0x7e>
 80140fc:	1a9b      	subs	r3, r3, r2
 80140fe:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8014102:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014106:	da1e      	bge.n	8014146 <__ieee754_atan2+0xfe>
 8014108:	2f00      	cmp	r7, #0
 801410a:	da01      	bge.n	8014110 <__ieee754_atan2+0xc8>
 801410c:	323c      	adds	r2, #60	@ 0x3c
 801410e:	db1e      	blt.n	801414e <__ieee754_atan2+0x106>
 8014110:	4632      	mov	r2, r6
 8014112:	463b      	mov	r3, r7
 8014114:	f7ec fbc2 	bl	800089c <__aeabi_ddiv>
 8014118:	ec41 0b10 	vmov	d0, r0, r1
 801411c:	f7ff fcae 	bl	8013a7c <fabs>
 8014120:	f000 f962 	bl	80143e8 <atan>
 8014124:	ec51 0b10 	vmov	r0, r1, d0
 8014128:	2c01      	cmp	r4, #1
 801412a:	d013      	beq.n	8014154 <__ieee754_atan2+0x10c>
 801412c:	2c02      	cmp	r4, #2
 801412e:	d015      	beq.n	801415c <__ieee754_atan2+0x114>
 8014130:	2c00      	cmp	r4, #0
 8014132:	d0a8      	beq.n	8014086 <__ieee754_atan2+0x3e>
 8014134:	a318      	add	r3, pc, #96	@ (adr r3, 8014198 <__ieee754_atan2+0x150>)
 8014136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801413a:	f7ec f8cd 	bl	80002d8 <__aeabi_dsub>
 801413e:	a318      	add	r3, pc, #96	@ (adr r3, 80141a0 <__ieee754_atan2+0x158>)
 8014140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014144:	e014      	b.n	8014170 <__ieee754_atan2+0x128>
 8014146:	a118      	add	r1, pc, #96	@ (adr r1, 80141a8 <__ieee754_atan2+0x160>)
 8014148:	e9d1 0100 	ldrd	r0, r1, [r1]
 801414c:	e7ec      	b.n	8014128 <__ieee754_atan2+0xe0>
 801414e:	2000      	movs	r0, #0
 8014150:	2100      	movs	r1, #0
 8014152:	e7e9      	b.n	8014128 <__ieee754_atan2+0xe0>
 8014154:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014158:	4619      	mov	r1, r3
 801415a:	e794      	b.n	8014086 <__ieee754_atan2+0x3e>
 801415c:	a30e      	add	r3, pc, #56	@ (adr r3, 8014198 <__ieee754_atan2+0x150>)
 801415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014162:	f7ec f8b9 	bl	80002d8 <__aeabi_dsub>
 8014166:	4602      	mov	r2, r0
 8014168:	460b      	mov	r3, r1
 801416a:	a10d      	add	r1, pc, #52	@ (adr r1, 80141a0 <__ieee754_atan2+0x158>)
 801416c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014170:	f7ec f8b2 	bl	80002d8 <__aeabi_dsub>
 8014174:	e787      	b.n	8014086 <__ieee754_atan2+0x3e>
 8014176:	a10a      	add	r1, pc, #40	@ (adr r1, 80141a0 <__ieee754_atan2+0x158>)
 8014178:	e9d1 0100 	ldrd	r0, r1, [r1]
 801417c:	e783      	b.n	8014086 <__ieee754_atan2+0x3e>
 801417e:	a10c      	add	r1, pc, #48	@ (adr r1, 80141b0 <__ieee754_atan2+0x168>)
 8014180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014184:	e77f      	b.n	8014086 <__ieee754_atan2+0x3e>
 8014186:	2000      	movs	r0, #0
 8014188:	2100      	movs	r1, #0
 801418a:	e77c      	b.n	8014086 <__ieee754_atan2+0x3e>
 801418c:	a106      	add	r1, pc, #24	@ (adr r1, 80141a8 <__ieee754_atan2+0x160>)
 801418e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014192:	e778      	b.n	8014086 <__ieee754_atan2+0x3e>
 8014194:	f3af 8000 	nop.w
 8014198:	33145c07 	.word	0x33145c07
 801419c:	3ca1a626 	.word	0x3ca1a626
 80141a0:	54442d18 	.word	0x54442d18
 80141a4:	400921fb 	.word	0x400921fb
 80141a8:	54442d18 	.word	0x54442d18
 80141ac:	3ff921fb 	.word	0x3ff921fb
 80141b0:	54442d18 	.word	0x54442d18
 80141b4:	3fe921fb 	.word	0x3fe921fb
 80141b8:	08014d38 	.word	0x08014d38
 80141bc:	08014d20 	.word	0x08014d20
 80141c0:	54442d18 	.word	0x54442d18
 80141c4:	c00921fb 	.word	0xc00921fb
 80141c8:	54442d18 	.word	0x54442d18
 80141cc:	bff921fb 	.word	0xbff921fb
 80141d0:	7ff00000 	.word	0x7ff00000

080141d4 <__ieee754_fmod>:
 80141d4:	ec53 2b11 	vmov	r2, r3, d1
 80141d8:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 80141dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141e0:	ea52 040c 	orrs.w	r4, r2, ip
 80141e4:	ec51 0b10 	vmov	r0, r1, d0
 80141e8:	461e      	mov	r6, r3
 80141ea:	4617      	mov	r7, r2
 80141ec:	4696      	mov	lr, r2
 80141ee:	d00c      	beq.n	801420a <__ieee754_fmod+0x36>
 80141f0:	4c77      	ldr	r4, [pc, #476]	@ (80143d0 <__ieee754_fmod+0x1fc>)
 80141f2:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 80141f6:	45a0      	cmp	r8, r4
 80141f8:	4689      	mov	r9, r1
 80141fa:	d806      	bhi.n	801420a <__ieee754_fmod+0x36>
 80141fc:	4254      	negs	r4, r2
 80141fe:	4d75      	ldr	r5, [pc, #468]	@ (80143d4 <__ieee754_fmod+0x200>)
 8014200:	4314      	orrs	r4, r2
 8014202:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8014206:	42ac      	cmp	r4, r5
 8014208:	d909      	bls.n	801421e <__ieee754_fmod+0x4a>
 801420a:	f7ec fa1d 	bl	8000648 <__aeabi_dmul>
 801420e:	4602      	mov	r2, r0
 8014210:	460b      	mov	r3, r1
 8014212:	f7ec fb43 	bl	800089c <__aeabi_ddiv>
 8014216:	ec41 0b10 	vmov	d0, r0, r1
 801421a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801421e:	45e0      	cmp	r8, ip
 8014220:	4682      	mov	sl, r0
 8014222:	4604      	mov	r4, r0
 8014224:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8014228:	dc09      	bgt.n	801423e <__ieee754_fmod+0x6a>
 801422a:	dbf4      	blt.n	8014216 <__ieee754_fmod+0x42>
 801422c:	4282      	cmp	r2, r0
 801422e:	d8f2      	bhi.n	8014216 <__ieee754_fmod+0x42>
 8014230:	d105      	bne.n	801423e <__ieee754_fmod+0x6a>
 8014232:	4b69      	ldr	r3, [pc, #420]	@ (80143d8 <__ieee754_fmod+0x204>)
 8014234:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8014238:	e9d3 0100 	ldrd	r0, r1, [r3]
 801423c:	e7eb      	b.n	8014216 <__ieee754_fmod+0x42>
 801423e:	4a65      	ldr	r2, [pc, #404]	@ (80143d4 <__ieee754_fmod+0x200>)
 8014240:	ea19 0f02 	tst.w	r9, r2
 8014244:	d148      	bne.n	80142d8 <__ieee754_fmod+0x104>
 8014246:	f1b8 0f00 	cmp.w	r8, #0
 801424a:	d13d      	bne.n	80142c8 <__ieee754_fmod+0xf4>
 801424c:	4963      	ldr	r1, [pc, #396]	@ (80143dc <__ieee754_fmod+0x208>)
 801424e:	4653      	mov	r3, sl
 8014250:	2b00      	cmp	r3, #0
 8014252:	dc36      	bgt.n	80142c2 <__ieee754_fmod+0xee>
 8014254:	4216      	tst	r6, r2
 8014256:	d14f      	bne.n	80142f8 <__ieee754_fmod+0x124>
 8014258:	f1bc 0f00 	cmp.w	ip, #0
 801425c:	d144      	bne.n	80142e8 <__ieee754_fmod+0x114>
 801425e:	4a5f      	ldr	r2, [pc, #380]	@ (80143dc <__ieee754_fmod+0x208>)
 8014260:	463b      	mov	r3, r7
 8014262:	2b00      	cmp	r3, #0
 8014264:	dc3d      	bgt.n	80142e2 <__ieee754_fmod+0x10e>
 8014266:	485e      	ldr	r0, [pc, #376]	@ (80143e0 <__ieee754_fmod+0x20c>)
 8014268:	4281      	cmp	r1, r0
 801426a:	db4a      	blt.n	8014302 <__ieee754_fmod+0x12e>
 801426c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014270:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014274:	485a      	ldr	r0, [pc, #360]	@ (80143e0 <__ieee754_fmod+0x20c>)
 8014276:	4282      	cmp	r2, r0
 8014278:	db57      	blt.n	801432a <__ieee754_fmod+0x156>
 801427a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801427e:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8014282:	1a89      	subs	r1, r1, r2
 8014284:	1b98      	subs	r0, r3, r6
 8014286:	eba4 070e 	sub.w	r7, r4, lr
 801428a:	2900      	cmp	r1, #0
 801428c:	d162      	bne.n	8014354 <__ieee754_fmod+0x180>
 801428e:	4574      	cmp	r4, lr
 8014290:	bf38      	it	cc
 8014292:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8014296:	2800      	cmp	r0, #0
 8014298:	bfa4      	itt	ge
 801429a:	463c      	movge	r4, r7
 801429c:	4603      	movge	r3, r0
 801429e:	ea53 0104 	orrs.w	r1, r3, r4
 80142a2:	d0c6      	beq.n	8014232 <__ieee754_fmod+0x5e>
 80142a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80142a8:	db69      	blt.n	801437e <__ieee754_fmod+0x1aa>
 80142aa:	494d      	ldr	r1, [pc, #308]	@ (80143e0 <__ieee754_fmod+0x20c>)
 80142ac:	428a      	cmp	r2, r1
 80142ae:	db6c      	blt.n	801438a <__ieee754_fmod+0x1b6>
 80142b0:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80142b4:	432b      	orrs	r3, r5
 80142b6:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 80142ba:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80142be:	4620      	mov	r0, r4
 80142c0:	e7a9      	b.n	8014216 <__ieee754_fmod+0x42>
 80142c2:	3901      	subs	r1, #1
 80142c4:	005b      	lsls	r3, r3, #1
 80142c6:	e7c3      	b.n	8014250 <__ieee754_fmod+0x7c>
 80142c8:	4945      	ldr	r1, [pc, #276]	@ (80143e0 <__ieee754_fmod+0x20c>)
 80142ca:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	ddc0      	ble.n	8014254 <__ieee754_fmod+0x80>
 80142d2:	3901      	subs	r1, #1
 80142d4:	005b      	lsls	r3, r3, #1
 80142d6:	e7fa      	b.n	80142ce <__ieee754_fmod+0xfa>
 80142d8:	ea4f 5128 	mov.w	r1, r8, asr #20
 80142dc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80142e0:	e7b8      	b.n	8014254 <__ieee754_fmod+0x80>
 80142e2:	3a01      	subs	r2, #1
 80142e4:	005b      	lsls	r3, r3, #1
 80142e6:	e7bc      	b.n	8014262 <__ieee754_fmod+0x8e>
 80142e8:	4a3d      	ldr	r2, [pc, #244]	@ (80143e0 <__ieee754_fmod+0x20c>)
 80142ea:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	ddb9      	ble.n	8014266 <__ieee754_fmod+0x92>
 80142f2:	3a01      	subs	r2, #1
 80142f4:	005b      	lsls	r3, r3, #1
 80142f6:	e7fa      	b.n	80142ee <__ieee754_fmod+0x11a>
 80142f8:	ea4f 522c 	mov.w	r2, ip, asr #20
 80142fc:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8014300:	e7b1      	b.n	8014266 <__ieee754_fmod+0x92>
 8014302:	1a40      	subs	r0, r0, r1
 8014304:	281f      	cmp	r0, #31
 8014306:	dc0a      	bgt.n	801431e <__ieee754_fmod+0x14a>
 8014308:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 801430c:	fa08 f800 	lsl.w	r8, r8, r0
 8014310:	fa2a f303 	lsr.w	r3, sl, r3
 8014314:	ea43 0308 	orr.w	r3, r3, r8
 8014318:	fa0a f400 	lsl.w	r4, sl, r0
 801431c:	e7aa      	b.n	8014274 <__ieee754_fmod+0xa0>
 801431e:	4b31      	ldr	r3, [pc, #196]	@ (80143e4 <__ieee754_fmod+0x210>)
 8014320:	1a5b      	subs	r3, r3, r1
 8014322:	fa0a f303 	lsl.w	r3, sl, r3
 8014326:	2400      	movs	r4, #0
 8014328:	e7a4      	b.n	8014274 <__ieee754_fmod+0xa0>
 801432a:	1a80      	subs	r0, r0, r2
 801432c:	281f      	cmp	r0, #31
 801432e:	dc0a      	bgt.n	8014346 <__ieee754_fmod+0x172>
 8014330:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8014334:	fa0c fc00 	lsl.w	ip, ip, r0
 8014338:	fa27 f606 	lsr.w	r6, r7, r6
 801433c:	ea46 060c 	orr.w	r6, r6, ip
 8014340:	fa07 fe00 	lsl.w	lr, r7, r0
 8014344:	e79d      	b.n	8014282 <__ieee754_fmod+0xae>
 8014346:	4e27      	ldr	r6, [pc, #156]	@ (80143e4 <__ieee754_fmod+0x210>)
 8014348:	1ab6      	subs	r6, r6, r2
 801434a:	fa07 f606 	lsl.w	r6, r7, r6
 801434e:	f04f 0e00 	mov.w	lr, #0
 8014352:	e796      	b.n	8014282 <__ieee754_fmod+0xae>
 8014354:	4574      	cmp	r4, lr
 8014356:	bf38      	it	cc
 8014358:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801435c:	2800      	cmp	r0, #0
 801435e:	da05      	bge.n	801436c <__ieee754_fmod+0x198>
 8014360:	0fe0      	lsrs	r0, r4, #31
 8014362:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014366:	0064      	lsls	r4, r4, #1
 8014368:	3901      	subs	r1, #1
 801436a:	e78b      	b.n	8014284 <__ieee754_fmod+0xb0>
 801436c:	ea50 0307 	orrs.w	r3, r0, r7
 8014370:	f43f af5f 	beq.w	8014232 <__ieee754_fmod+0x5e>
 8014374:	0ffb      	lsrs	r3, r7, #31
 8014376:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801437a:	007c      	lsls	r4, r7, #1
 801437c:	e7f4      	b.n	8014368 <__ieee754_fmod+0x194>
 801437e:	0fe1      	lsrs	r1, r4, #31
 8014380:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8014384:	0064      	lsls	r4, r4, #1
 8014386:	3a01      	subs	r2, #1
 8014388:	e78c      	b.n	80142a4 <__ieee754_fmod+0xd0>
 801438a:	1a89      	subs	r1, r1, r2
 801438c:	2914      	cmp	r1, #20
 801438e:	dc0a      	bgt.n	80143a6 <__ieee754_fmod+0x1d2>
 8014390:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8014394:	fa03 f202 	lsl.w	r2, r3, r2
 8014398:	40cc      	lsrs	r4, r1
 801439a:	4322      	orrs	r2, r4
 801439c:	410b      	asrs	r3, r1
 801439e:	ea43 0105 	orr.w	r1, r3, r5
 80143a2:	4610      	mov	r0, r2
 80143a4:	e737      	b.n	8014216 <__ieee754_fmod+0x42>
 80143a6:	291f      	cmp	r1, #31
 80143a8:	dc07      	bgt.n	80143ba <__ieee754_fmod+0x1e6>
 80143aa:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80143ae:	40cc      	lsrs	r4, r1
 80143b0:	fa03 f202 	lsl.w	r2, r3, r2
 80143b4:	4322      	orrs	r2, r4
 80143b6:	462b      	mov	r3, r5
 80143b8:	e7f1      	b.n	801439e <__ieee754_fmod+0x1ca>
 80143ba:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 80143be:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80143c2:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 80143c6:	32e2      	adds	r2, #226	@ 0xe2
 80143c8:	fa43 f202 	asr.w	r2, r3, r2
 80143cc:	e7f3      	b.n	80143b6 <__ieee754_fmod+0x1e2>
 80143ce:	bf00      	nop
 80143d0:	7fefffff 	.word	0x7fefffff
 80143d4:	7ff00000 	.word	0x7ff00000
 80143d8:	08014d50 	.word	0x08014d50
 80143dc:	fffffbed 	.word	0xfffffbed
 80143e0:	fffffc02 	.word	0xfffffc02
 80143e4:	fffffbe2 	.word	0xfffffbe2

080143e8 <atan>:
 80143e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143ec:	ec55 4b10 	vmov	r4, r5, d0
 80143f0:	4bbf      	ldr	r3, [pc, #764]	@ (80146f0 <atan+0x308>)
 80143f2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80143f6:	429e      	cmp	r6, r3
 80143f8:	46ab      	mov	fp, r5
 80143fa:	d918      	bls.n	801442e <atan+0x46>
 80143fc:	4bbd      	ldr	r3, [pc, #756]	@ (80146f4 <atan+0x30c>)
 80143fe:	429e      	cmp	r6, r3
 8014400:	d801      	bhi.n	8014406 <atan+0x1e>
 8014402:	d109      	bne.n	8014418 <atan+0x30>
 8014404:	b144      	cbz	r4, 8014418 <atan+0x30>
 8014406:	4622      	mov	r2, r4
 8014408:	462b      	mov	r3, r5
 801440a:	4620      	mov	r0, r4
 801440c:	4629      	mov	r1, r5
 801440e:	f7eb ff65 	bl	80002dc <__adddf3>
 8014412:	4604      	mov	r4, r0
 8014414:	460d      	mov	r5, r1
 8014416:	e006      	b.n	8014426 <atan+0x3e>
 8014418:	f1bb 0f00 	cmp.w	fp, #0
 801441c:	f340 812b 	ble.w	8014676 <atan+0x28e>
 8014420:	a597      	add	r5, pc, #604	@ (adr r5, 8014680 <atan+0x298>)
 8014422:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014426:	ec45 4b10 	vmov	d0, r4, r5
 801442a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801442e:	4bb2      	ldr	r3, [pc, #712]	@ (80146f8 <atan+0x310>)
 8014430:	429e      	cmp	r6, r3
 8014432:	d813      	bhi.n	801445c <atan+0x74>
 8014434:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8014438:	429e      	cmp	r6, r3
 801443a:	d80c      	bhi.n	8014456 <atan+0x6e>
 801443c:	a392      	add	r3, pc, #584	@ (adr r3, 8014688 <atan+0x2a0>)
 801443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014442:	4620      	mov	r0, r4
 8014444:	4629      	mov	r1, r5
 8014446:	f7eb ff49 	bl	80002dc <__adddf3>
 801444a:	4bac      	ldr	r3, [pc, #688]	@ (80146fc <atan+0x314>)
 801444c:	2200      	movs	r2, #0
 801444e:	f7ec fb8b 	bl	8000b68 <__aeabi_dcmpgt>
 8014452:	2800      	cmp	r0, #0
 8014454:	d1e7      	bne.n	8014426 <atan+0x3e>
 8014456:	f04f 3aff 	mov.w	sl, #4294967295
 801445a:	e029      	b.n	80144b0 <atan+0xc8>
 801445c:	f7ff fb0e 	bl	8013a7c <fabs>
 8014460:	4ba7      	ldr	r3, [pc, #668]	@ (8014700 <atan+0x318>)
 8014462:	429e      	cmp	r6, r3
 8014464:	ec55 4b10 	vmov	r4, r5, d0
 8014468:	f200 80bc 	bhi.w	80145e4 <atan+0x1fc>
 801446c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8014470:	429e      	cmp	r6, r3
 8014472:	f200 809e 	bhi.w	80145b2 <atan+0x1ca>
 8014476:	4622      	mov	r2, r4
 8014478:	462b      	mov	r3, r5
 801447a:	4620      	mov	r0, r4
 801447c:	4629      	mov	r1, r5
 801447e:	f7eb ff2d 	bl	80002dc <__adddf3>
 8014482:	4b9e      	ldr	r3, [pc, #632]	@ (80146fc <atan+0x314>)
 8014484:	2200      	movs	r2, #0
 8014486:	f7eb ff27 	bl	80002d8 <__aeabi_dsub>
 801448a:	2200      	movs	r2, #0
 801448c:	4606      	mov	r6, r0
 801448e:	460f      	mov	r7, r1
 8014490:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014494:	4620      	mov	r0, r4
 8014496:	4629      	mov	r1, r5
 8014498:	f7eb ff20 	bl	80002dc <__adddf3>
 801449c:	4602      	mov	r2, r0
 801449e:	460b      	mov	r3, r1
 80144a0:	4630      	mov	r0, r6
 80144a2:	4639      	mov	r1, r7
 80144a4:	f7ec f9fa 	bl	800089c <__aeabi_ddiv>
 80144a8:	f04f 0a00 	mov.w	sl, #0
 80144ac:	4604      	mov	r4, r0
 80144ae:	460d      	mov	r5, r1
 80144b0:	4622      	mov	r2, r4
 80144b2:	462b      	mov	r3, r5
 80144b4:	4620      	mov	r0, r4
 80144b6:	4629      	mov	r1, r5
 80144b8:	f7ec f8c6 	bl	8000648 <__aeabi_dmul>
 80144bc:	4602      	mov	r2, r0
 80144be:	460b      	mov	r3, r1
 80144c0:	4680      	mov	r8, r0
 80144c2:	4689      	mov	r9, r1
 80144c4:	f7ec f8c0 	bl	8000648 <__aeabi_dmul>
 80144c8:	a371      	add	r3, pc, #452	@ (adr r3, 8014690 <atan+0x2a8>)
 80144ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ce:	4606      	mov	r6, r0
 80144d0:	460f      	mov	r7, r1
 80144d2:	f7ec f8b9 	bl	8000648 <__aeabi_dmul>
 80144d6:	a370      	add	r3, pc, #448	@ (adr r3, 8014698 <atan+0x2b0>)
 80144d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144dc:	f7eb fefe 	bl	80002dc <__adddf3>
 80144e0:	4632      	mov	r2, r6
 80144e2:	463b      	mov	r3, r7
 80144e4:	f7ec f8b0 	bl	8000648 <__aeabi_dmul>
 80144e8:	a36d      	add	r3, pc, #436	@ (adr r3, 80146a0 <atan+0x2b8>)
 80144ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ee:	f7eb fef5 	bl	80002dc <__adddf3>
 80144f2:	4632      	mov	r2, r6
 80144f4:	463b      	mov	r3, r7
 80144f6:	f7ec f8a7 	bl	8000648 <__aeabi_dmul>
 80144fa:	a36b      	add	r3, pc, #428	@ (adr r3, 80146a8 <atan+0x2c0>)
 80144fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014500:	f7eb feec 	bl	80002dc <__adddf3>
 8014504:	4632      	mov	r2, r6
 8014506:	463b      	mov	r3, r7
 8014508:	f7ec f89e 	bl	8000648 <__aeabi_dmul>
 801450c:	a368      	add	r3, pc, #416	@ (adr r3, 80146b0 <atan+0x2c8>)
 801450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014512:	f7eb fee3 	bl	80002dc <__adddf3>
 8014516:	4632      	mov	r2, r6
 8014518:	463b      	mov	r3, r7
 801451a:	f7ec f895 	bl	8000648 <__aeabi_dmul>
 801451e:	a366      	add	r3, pc, #408	@ (adr r3, 80146b8 <atan+0x2d0>)
 8014520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014524:	f7eb feda 	bl	80002dc <__adddf3>
 8014528:	4642      	mov	r2, r8
 801452a:	464b      	mov	r3, r9
 801452c:	f7ec f88c 	bl	8000648 <__aeabi_dmul>
 8014530:	a363      	add	r3, pc, #396	@ (adr r3, 80146c0 <atan+0x2d8>)
 8014532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014536:	4680      	mov	r8, r0
 8014538:	4689      	mov	r9, r1
 801453a:	4630      	mov	r0, r6
 801453c:	4639      	mov	r1, r7
 801453e:	f7ec f883 	bl	8000648 <__aeabi_dmul>
 8014542:	a361      	add	r3, pc, #388	@ (adr r3, 80146c8 <atan+0x2e0>)
 8014544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014548:	f7eb fec6 	bl	80002d8 <__aeabi_dsub>
 801454c:	4632      	mov	r2, r6
 801454e:	463b      	mov	r3, r7
 8014550:	f7ec f87a 	bl	8000648 <__aeabi_dmul>
 8014554:	a35e      	add	r3, pc, #376	@ (adr r3, 80146d0 <atan+0x2e8>)
 8014556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801455a:	f7eb febd 	bl	80002d8 <__aeabi_dsub>
 801455e:	4632      	mov	r2, r6
 8014560:	463b      	mov	r3, r7
 8014562:	f7ec f871 	bl	8000648 <__aeabi_dmul>
 8014566:	a35c      	add	r3, pc, #368	@ (adr r3, 80146d8 <atan+0x2f0>)
 8014568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801456c:	f7eb feb4 	bl	80002d8 <__aeabi_dsub>
 8014570:	4632      	mov	r2, r6
 8014572:	463b      	mov	r3, r7
 8014574:	f7ec f868 	bl	8000648 <__aeabi_dmul>
 8014578:	a359      	add	r3, pc, #356	@ (adr r3, 80146e0 <atan+0x2f8>)
 801457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801457e:	f7eb feab 	bl	80002d8 <__aeabi_dsub>
 8014582:	4632      	mov	r2, r6
 8014584:	463b      	mov	r3, r7
 8014586:	f7ec f85f 	bl	8000648 <__aeabi_dmul>
 801458a:	4602      	mov	r2, r0
 801458c:	460b      	mov	r3, r1
 801458e:	4640      	mov	r0, r8
 8014590:	4649      	mov	r1, r9
 8014592:	f7eb fea3 	bl	80002dc <__adddf3>
 8014596:	4622      	mov	r2, r4
 8014598:	462b      	mov	r3, r5
 801459a:	f7ec f855 	bl	8000648 <__aeabi_dmul>
 801459e:	f1ba 3fff 	cmp.w	sl, #4294967295
 80145a2:	4602      	mov	r2, r0
 80145a4:	460b      	mov	r3, r1
 80145a6:	d148      	bne.n	801463a <atan+0x252>
 80145a8:	4620      	mov	r0, r4
 80145aa:	4629      	mov	r1, r5
 80145ac:	f7eb fe94 	bl	80002d8 <__aeabi_dsub>
 80145b0:	e72f      	b.n	8014412 <atan+0x2a>
 80145b2:	4b52      	ldr	r3, [pc, #328]	@ (80146fc <atan+0x314>)
 80145b4:	2200      	movs	r2, #0
 80145b6:	4620      	mov	r0, r4
 80145b8:	4629      	mov	r1, r5
 80145ba:	f7eb fe8d 	bl	80002d8 <__aeabi_dsub>
 80145be:	4b4f      	ldr	r3, [pc, #316]	@ (80146fc <atan+0x314>)
 80145c0:	4606      	mov	r6, r0
 80145c2:	460f      	mov	r7, r1
 80145c4:	2200      	movs	r2, #0
 80145c6:	4620      	mov	r0, r4
 80145c8:	4629      	mov	r1, r5
 80145ca:	f7eb fe87 	bl	80002dc <__adddf3>
 80145ce:	4602      	mov	r2, r0
 80145d0:	460b      	mov	r3, r1
 80145d2:	4630      	mov	r0, r6
 80145d4:	4639      	mov	r1, r7
 80145d6:	f7ec f961 	bl	800089c <__aeabi_ddiv>
 80145da:	f04f 0a01 	mov.w	sl, #1
 80145de:	4604      	mov	r4, r0
 80145e0:	460d      	mov	r5, r1
 80145e2:	e765      	b.n	80144b0 <atan+0xc8>
 80145e4:	4b47      	ldr	r3, [pc, #284]	@ (8014704 <atan+0x31c>)
 80145e6:	429e      	cmp	r6, r3
 80145e8:	d21c      	bcs.n	8014624 <atan+0x23c>
 80145ea:	4b47      	ldr	r3, [pc, #284]	@ (8014708 <atan+0x320>)
 80145ec:	2200      	movs	r2, #0
 80145ee:	4620      	mov	r0, r4
 80145f0:	4629      	mov	r1, r5
 80145f2:	f7eb fe71 	bl	80002d8 <__aeabi_dsub>
 80145f6:	4b44      	ldr	r3, [pc, #272]	@ (8014708 <atan+0x320>)
 80145f8:	4606      	mov	r6, r0
 80145fa:	460f      	mov	r7, r1
 80145fc:	2200      	movs	r2, #0
 80145fe:	4620      	mov	r0, r4
 8014600:	4629      	mov	r1, r5
 8014602:	f7ec f821 	bl	8000648 <__aeabi_dmul>
 8014606:	4b3d      	ldr	r3, [pc, #244]	@ (80146fc <atan+0x314>)
 8014608:	2200      	movs	r2, #0
 801460a:	f7eb fe67 	bl	80002dc <__adddf3>
 801460e:	4602      	mov	r2, r0
 8014610:	460b      	mov	r3, r1
 8014612:	4630      	mov	r0, r6
 8014614:	4639      	mov	r1, r7
 8014616:	f7ec f941 	bl	800089c <__aeabi_ddiv>
 801461a:	f04f 0a02 	mov.w	sl, #2
 801461e:	4604      	mov	r4, r0
 8014620:	460d      	mov	r5, r1
 8014622:	e745      	b.n	80144b0 <atan+0xc8>
 8014624:	4622      	mov	r2, r4
 8014626:	462b      	mov	r3, r5
 8014628:	4938      	ldr	r1, [pc, #224]	@ (801470c <atan+0x324>)
 801462a:	2000      	movs	r0, #0
 801462c:	f7ec f936 	bl	800089c <__aeabi_ddiv>
 8014630:	f04f 0a03 	mov.w	sl, #3
 8014634:	4604      	mov	r4, r0
 8014636:	460d      	mov	r5, r1
 8014638:	e73a      	b.n	80144b0 <atan+0xc8>
 801463a:	4b35      	ldr	r3, [pc, #212]	@ (8014710 <atan+0x328>)
 801463c:	4e35      	ldr	r6, [pc, #212]	@ (8014714 <atan+0x32c>)
 801463e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014646:	f7eb fe47 	bl	80002d8 <__aeabi_dsub>
 801464a:	4622      	mov	r2, r4
 801464c:	462b      	mov	r3, r5
 801464e:	f7eb fe43 	bl	80002d8 <__aeabi_dsub>
 8014652:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8014656:	4602      	mov	r2, r0
 8014658:	460b      	mov	r3, r1
 801465a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801465e:	f7eb fe3b 	bl	80002d8 <__aeabi_dsub>
 8014662:	f1bb 0f00 	cmp.w	fp, #0
 8014666:	4604      	mov	r4, r0
 8014668:	460d      	mov	r5, r1
 801466a:	f6bf aedc 	bge.w	8014426 <atan+0x3e>
 801466e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014672:	461d      	mov	r5, r3
 8014674:	e6d7      	b.n	8014426 <atan+0x3e>
 8014676:	a51c      	add	r5, pc, #112	@ (adr r5, 80146e8 <atan+0x300>)
 8014678:	e9d5 4500 	ldrd	r4, r5, [r5]
 801467c:	e6d3      	b.n	8014426 <atan+0x3e>
 801467e:	bf00      	nop
 8014680:	54442d18 	.word	0x54442d18
 8014684:	3ff921fb 	.word	0x3ff921fb
 8014688:	8800759c 	.word	0x8800759c
 801468c:	7e37e43c 	.word	0x7e37e43c
 8014690:	e322da11 	.word	0xe322da11
 8014694:	3f90ad3a 	.word	0x3f90ad3a
 8014698:	24760deb 	.word	0x24760deb
 801469c:	3fa97b4b 	.word	0x3fa97b4b
 80146a0:	a0d03d51 	.word	0xa0d03d51
 80146a4:	3fb10d66 	.word	0x3fb10d66
 80146a8:	c54c206e 	.word	0xc54c206e
 80146ac:	3fb745cd 	.word	0x3fb745cd
 80146b0:	920083ff 	.word	0x920083ff
 80146b4:	3fc24924 	.word	0x3fc24924
 80146b8:	5555550d 	.word	0x5555550d
 80146bc:	3fd55555 	.word	0x3fd55555
 80146c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80146c4:	bfa2b444 	.word	0xbfa2b444
 80146c8:	52defd9a 	.word	0x52defd9a
 80146cc:	3fadde2d 	.word	0x3fadde2d
 80146d0:	af749a6d 	.word	0xaf749a6d
 80146d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80146d8:	fe231671 	.word	0xfe231671
 80146dc:	3fbc71c6 	.word	0x3fbc71c6
 80146e0:	9998ebc4 	.word	0x9998ebc4
 80146e4:	3fc99999 	.word	0x3fc99999
 80146e8:	54442d18 	.word	0x54442d18
 80146ec:	bff921fb 	.word	0xbff921fb
 80146f0:	440fffff 	.word	0x440fffff
 80146f4:	7ff00000 	.word	0x7ff00000
 80146f8:	3fdbffff 	.word	0x3fdbffff
 80146fc:	3ff00000 	.word	0x3ff00000
 8014700:	3ff2ffff 	.word	0x3ff2ffff
 8014704:	40038000 	.word	0x40038000
 8014708:	3ff80000 	.word	0x3ff80000
 801470c:	bff00000 	.word	0xbff00000
 8014710:	08014d60 	.word	0x08014d60
 8014714:	08014d80 	.word	0x08014d80

08014718 <_init>:
 8014718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801471a:	bf00      	nop
 801471c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801471e:	bc08      	pop	{r3}
 8014720:	469e      	mov	lr, r3
 8014722:	4770      	bx	lr

08014724 <_fini>:
 8014724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014726:	bf00      	nop
 8014728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801472a:	bc08      	pop	{r3}
 801472c:	469e      	mov	lr, r3
 801472e:	4770      	bx	lr
